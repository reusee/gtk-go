// this file is auto-generated by gobject-go

package glib

// #cgo pkg-config: glib-2.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <glib.h>
/*
gint _g_async_queue_length(GAsyncQueue* _self_) {
	return g_async_queue_length((GAsyncQueue *)(_self_));
}
gint _g_async_queue_length_unlocked(GAsyncQueue* _self_) {
	return g_async_queue_length_unlocked((GAsyncQueue *)(_self_));
}
void _g_async_queue_lock(GAsyncQueue* _self_) {
	g_async_queue_lock((GAsyncQueue *)(_self_));
}
gpointer _g_async_queue_pop(GAsyncQueue* _self_) {
	return g_async_queue_pop((GAsyncQueue *)(_self_));
}
gpointer _g_async_queue_pop_unlocked(GAsyncQueue* _self_) {
	return g_async_queue_pop_unlocked((GAsyncQueue *)(_self_));
}
void _g_async_queue_push(GAsyncQueue* _self_, gpointer data) {
	g_async_queue_push((GAsyncQueue *)(_self_), data);
}
void _g_async_queue_push_sorted(GAsyncQueue* _self_, gpointer data, GCompareDataFunc func_, gpointer user_data) {
	g_async_queue_push_sorted((GAsyncQueue *)(_self_), data, func_, user_data);
}
void _g_async_queue_push_sorted_unlocked(GAsyncQueue* _self_, gpointer data, GCompareDataFunc func_, gpointer user_data) {
	g_async_queue_push_sorted_unlocked((GAsyncQueue *)(_self_), data, func_, user_data);
}
void _g_async_queue_push_unlocked(GAsyncQueue* _self_, gpointer data) {
	g_async_queue_push_unlocked((GAsyncQueue *)(_self_), data);
}
GAsyncQueue * _g_async_queue_ref(GAsyncQueue* _self_) {
	return g_async_queue_ref((GAsyncQueue *)(_self_));
}
void _g_async_queue_sort(GAsyncQueue* _self_, GCompareDataFunc func_, gpointer user_data) {
	g_async_queue_sort((GAsyncQueue *)(_self_), func_, user_data);
}
void _g_async_queue_sort_unlocked(GAsyncQueue* _self_, GCompareDataFunc func_, gpointer user_data) {
	g_async_queue_sort_unlocked((GAsyncQueue *)(_self_), func_, user_data);
}
gpointer _g_async_queue_timeout_pop(GAsyncQueue* _self_, guint64 timeout) {
	return g_async_queue_timeout_pop((GAsyncQueue *)(_self_), timeout);
}
gpointer _g_async_queue_timeout_pop_unlocked(GAsyncQueue* _self_, guint64 timeout) {
	return g_async_queue_timeout_pop_unlocked((GAsyncQueue *)(_self_), timeout);
}
gpointer _g_async_queue_try_pop(GAsyncQueue* _self_) {
	return g_async_queue_try_pop((GAsyncQueue *)(_self_));
}
gpointer _g_async_queue_try_pop_unlocked(GAsyncQueue* _self_) {
	return g_async_queue_try_pop_unlocked((GAsyncQueue *)(_self_));
}
void _g_async_queue_unlock(GAsyncQueue* _self_) {
	g_async_queue_unlock((GAsyncQueue *)(_self_));
}
void _g_async_queue_unref(GAsyncQueue* _self_) {
	g_async_queue_unref((GAsyncQueue *)(_self_));
}
void _g_bookmark_file_add_application(GBookmarkFile* _self_, gchar* uri, gchar* name, gchar* exec) {
	g_bookmark_file_add_application((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(name), (const gchar *)(exec));
}
void _g_bookmark_file_add_group(GBookmarkFile* _self_, gchar* uri, gchar* group) {
	g_bookmark_file_add_group((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(group));
}
void _g_bookmark_file_free(GBookmarkFile* _self_) {
	g_bookmark_file_free((GBookmarkFile *)(_self_));
}
time_t _g_bookmark_file_get_added(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_added((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_get_app_info(GBookmarkFile* _self_, gchar* uri, gchar* name, void* exec, guint* count, time_t* stamp, void* _error_) {
	return g_bookmark_file_get_app_info((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(name), (gchar **)(exec), (guint *)(count), (time_t *)(stamp), (GError **)(_error_));
}
gchar ** _g_bookmark_file_get_applications(GBookmarkFile* _self_, gchar* uri, gsize* length, void* _error_) {
	return g_bookmark_file_get_applications((GBookmarkFile *)(_self_), (const gchar *)(uri), (gsize *)(length), (GError **)(_error_));
}
gchar * _g_bookmark_file_get_description(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_description((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gchar ** _g_bookmark_file_get_groups(GBookmarkFile* _self_, gchar* uri, gsize* length, void* _error_) {
	return g_bookmark_file_get_groups((GBookmarkFile *)(_self_), (const gchar *)(uri), (gsize *)(length), (GError **)(_error_));
}
gboolean _g_bookmark_file_get_icon(GBookmarkFile* _self_, gchar* uri, void* href, void* mime_type, void* _error_) {
	return g_bookmark_file_get_icon((GBookmarkFile *)(_self_), (const gchar *)(uri), (gchar **)(href), (gchar **)(mime_type), (GError **)(_error_));
}
gboolean _g_bookmark_file_get_is_private(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_is_private((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gchar * _g_bookmark_file_get_mime_type(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_mime_type((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
time_t _g_bookmark_file_get_modified(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_modified((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gint _g_bookmark_file_get_size(GBookmarkFile* _self_) {
	return g_bookmark_file_get_size((GBookmarkFile *)(_self_));
}
gchar * _g_bookmark_file_get_title(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_title((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gchar ** _g_bookmark_file_get_uris(GBookmarkFile* _self_, gsize* length) {
	return g_bookmark_file_get_uris((GBookmarkFile *)(_self_), (gsize *)(length));
}
time_t _g_bookmark_file_get_visited(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_get_visited((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_application(GBookmarkFile* _self_, gchar* uri, gchar* name, void* _error_) {
	return g_bookmark_file_has_application((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(name), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_group(GBookmarkFile* _self_, gchar* uri, gchar* group, void* _error_) {
	return g_bookmark_file_has_group((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(group), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_item(GBookmarkFile* _self_, gchar* uri) {
	return g_bookmark_file_has_item((GBookmarkFile *)(_self_), (const gchar *)(uri));
}
gboolean _g_bookmark_file_load_from_data(GBookmarkFile* _self_, gchar* data, gsize length, void* _error_) {
	return g_bookmark_file_load_from_data((GBookmarkFile *)(_self_), (const gchar *)(data), length, (GError **)(_error_));
}
gboolean _g_bookmark_file_load_from_data_dirs(GBookmarkFile* _self_, gchar* file, void* full_path, void* _error_) {
	return g_bookmark_file_load_from_data_dirs((GBookmarkFile *)(_self_), (const gchar *)(file), (gchar **)(full_path), (GError **)(_error_));
}
gboolean _g_bookmark_file_load_from_file(GBookmarkFile* _self_, gchar* filename, void* _error_) {
	return g_bookmark_file_load_from_file((GBookmarkFile *)(_self_), (const gchar *)(filename), (GError **)(_error_));
}
gboolean _g_bookmark_file_move_item(GBookmarkFile* _self_, gchar* old_uri, gchar* new_uri, void* _error_) {
	return g_bookmark_file_move_item((GBookmarkFile *)(_self_), (const gchar *)(old_uri), (const gchar *)(new_uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_application(GBookmarkFile* _self_, gchar* uri, gchar* name, void* _error_) {
	return g_bookmark_file_remove_application((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(name), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_group(GBookmarkFile* _self_, gchar* uri, gchar* group, void* _error_) {
	return g_bookmark_file_remove_group((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(group), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_item(GBookmarkFile* _self_, gchar* uri, void* _error_) {
	return g_bookmark_file_remove_item((GBookmarkFile *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
void _g_bookmark_file_set_added(GBookmarkFile* _self_, gchar* uri, time_t added) {
	g_bookmark_file_set_added((GBookmarkFile *)(_self_), (const gchar *)(uri), added);
}
gboolean _g_bookmark_file_set_app_info(GBookmarkFile* _self_, gchar* uri, gchar* name, gchar* exec, gint count, time_t stamp, void* _error_) {
	return g_bookmark_file_set_app_info((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(name), (const gchar *)(exec), count, stamp, (GError **)(_error_));
}
void _g_bookmark_file_set_description(GBookmarkFile* _self_, gchar* uri, gchar* description) {
	g_bookmark_file_set_description((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(description));
}
void _g_bookmark_file_set_groups(GBookmarkFile* _self_, gchar* uri, void* groups, gsize length) {
	g_bookmark_file_set_groups((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar **)(groups), length);
}
void _g_bookmark_file_set_icon(GBookmarkFile* _self_, gchar* uri, gchar* href, gchar* mime_type) {
	g_bookmark_file_set_icon((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(href), (const gchar *)(mime_type));
}
void _g_bookmark_file_set_is_private(GBookmarkFile* _self_, gchar* uri, gboolean is_private) {
	g_bookmark_file_set_is_private((GBookmarkFile *)(_self_), (const gchar *)(uri), is_private);
}
void _g_bookmark_file_set_mime_type(GBookmarkFile* _self_, gchar* uri, gchar* mime_type) {
	g_bookmark_file_set_mime_type((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(mime_type));
}
void _g_bookmark_file_set_modified(GBookmarkFile* _self_, gchar* uri, time_t modified) {
	g_bookmark_file_set_modified((GBookmarkFile *)(_self_), (const gchar *)(uri), modified);
}
void _g_bookmark_file_set_title(GBookmarkFile* _self_, gchar* uri, gchar* title) {
	g_bookmark_file_set_title((GBookmarkFile *)(_self_), (const gchar *)(uri), (const gchar *)(title));
}
void _g_bookmark_file_set_visited(GBookmarkFile* _self_, gchar* uri, time_t visited) {
	g_bookmark_file_set_visited((GBookmarkFile *)(_self_), (const gchar *)(uri), visited);
}
gchar * _g_bookmark_file_to_data(GBookmarkFile* _self_, gsize* length, void* _error_) {
	return g_bookmark_file_to_data((GBookmarkFile *)(_self_), (gsize *)(length), (GError **)(_error_));
}
gboolean _g_bookmark_file_to_file(GBookmarkFile* _self_, gchar* filename, void* _error_) {
	return g_bookmark_file_to_file((GBookmarkFile *)(_self_), (const gchar *)(filename), (GError **)(_error_));
}
gint _g_bytes_compare(GBytes* _self_, gconstpointer bytes2) {
	return g_bytes_compare((gconstpointer)(_self_), bytes2);
}
gboolean _g_bytes_equal(GBytes* _self_, gconstpointer bytes2) {
	return g_bytes_equal((gconstpointer)(_self_), bytes2);
}
gconstpointer _g_bytes_get_data(GBytes* _self_, gsize* size) {
	return g_bytes_get_data((GBytes *)(_self_), (gsize *)(size));
}
gsize _g_bytes_get_size(GBytes* _self_) {
	return g_bytes_get_size((GBytes *)(_self_));
}
guint _g_bytes_hash(GBytes* _self_) {
	return g_bytes_hash((gconstpointer)(_self_));
}
GBytes * _g_bytes_new_from_bytes(GBytes* _self_, gsize offset, gsize length) {
	return g_bytes_new_from_bytes((GBytes *)(_self_), offset, length);
}
GBytes * _g_bytes_ref(GBytes* _self_) {
	return g_bytes_ref((GBytes *)(_self_));
}
void _g_bytes_unref(GBytes* _self_) {
	g_bytes_unref((GBytes *)(_self_));
}
GByteArray * _g_bytes_unref_to_array(GBytes* _self_) {
	return g_bytes_unref_to_array((GBytes *)(_self_));
}
gpointer _g_bytes_unref_to_data(GBytes* _self_, gsize* size) {
	return g_bytes_unref_to_data((GBytes *)(_self_), (gsize *)(size));
}
GChecksum * _g_checksum_copy(GChecksum* _self_) {
	return g_checksum_copy((const GChecksum *)(_self_));
}
void _g_checksum_free(GChecksum* _self_) {
	g_checksum_free((GChecksum *)(_self_));
}
void _g_checksum_get_digest(GChecksum* _self_, guint8* buffer, gsize* digest_len) {
	g_checksum_get_digest((GChecksum *)(_self_), (guint8 *)(buffer), (gsize *)(digest_len));
}
const gchar * _g_checksum_get_string(GChecksum* _self_) {
	return g_checksum_get_string((GChecksum *)(_self_));
}
void _g_checksum_reset(GChecksum* _self_) {
	g_checksum_reset((GChecksum *)(_self_));
}
void _g_checksum_update(GChecksum* _self_, guchar* data, gssize length) {
	g_checksum_update((GChecksum *)(_self_), (const guchar *)(data), length);
}
void _g_cond_broadcast(GCond* _self_) {
	g_cond_broadcast((GCond *)(_self_));
}
void _g_cond_clear(GCond* _self_) {
	g_cond_clear((GCond *)(_self_));
}
void _g_cond_init(GCond* _self_) {
	g_cond_init((GCond *)(_self_));
}
void _g_cond_signal(GCond* _self_) {
	g_cond_signal((GCond *)(_self_));
}
void _g_cond_wait(GCond* _self_, GMutex* mutex) {
	g_cond_wait((GCond *)(_self_), (GMutex *)(mutex));
}
gboolean _g_cond_wait_until(GCond* _self_, GMutex* mutex, gint64 end_time) {
	return g_cond_wait_until((GCond *)(_self_), (GMutex *)(mutex), end_time);
}
gsize _g_date_strftime(gchar* s, gsize slen, gchar* format, GDate* date) {
	return g_date_strftime((gchar *)(s), slen, (const gchar *)(format), (const GDate *)(date));
}
void _g_date_add_days(GDate* _self_, guint n_days) {
	g_date_add_days((GDate *)(_self_), n_days);
}
void _g_date_add_months(GDate* _self_, guint n_months) {
	g_date_add_months((GDate *)(_self_), n_months);
}
void _g_date_add_years(GDate* _self_, guint n_years) {
	g_date_add_years((GDate *)(_self_), n_years);
}
void _g_date_clamp(GDate* _self_, GDate* min_date, GDate* max_date) {
	g_date_clamp((GDate *)(_self_), (const GDate *)(min_date), (const GDate *)(max_date));
}
void _g_date_clear(GDate* _self_, guint n_dates) {
	g_date_clear((GDate *)(_self_), n_dates);
}
gint _g_date_compare(GDate* _self_, GDate* rhs) {
	return g_date_compare((const GDate *)(_self_), (const GDate *)(rhs));
}
gint _g_date_days_between(GDate* _self_, GDate* date2) {
	return g_date_days_between((const GDate *)(_self_), (const GDate *)(date2));
}
void _g_date_free(GDate* _self_) {
	g_date_free((GDate *)(_self_));
}
GDateDay _g_date_get_day(GDate* _self_) {
	return g_date_get_day((const GDate *)(_self_));
}
guint _g_date_get_day_of_year(GDate* _self_) {
	return g_date_get_day_of_year((const GDate *)(_self_));
}
guint _g_date_get_iso8601_week_of_year(GDate* _self_) {
	return g_date_get_iso8601_week_of_year((const GDate *)(_self_));
}
guint32 _g_date_get_julian(GDate* _self_) {
	return g_date_get_julian((const GDate *)(_self_));
}
guint _g_date_get_monday_week_of_year(GDate* _self_) {
	return g_date_get_monday_week_of_year((const GDate *)(_self_));
}
GDateMonth _g_date_get_month(GDate* _self_) {
	return g_date_get_month((const GDate *)(_self_));
}
guint _g_date_get_sunday_week_of_year(GDate* _self_) {
	return g_date_get_sunday_week_of_year((const GDate *)(_self_));
}
GDateWeekday _g_date_get_weekday(GDate* _self_) {
	return g_date_get_weekday((const GDate *)(_self_));
}
GDateYear _g_date_get_year(GDate* _self_) {
	return g_date_get_year((const GDate *)(_self_));
}
gboolean _g_date_is_first_of_month(GDate* _self_) {
	return g_date_is_first_of_month((const GDate *)(_self_));
}
gboolean _g_date_is_last_of_month(GDate* _self_) {
	return g_date_is_last_of_month((const GDate *)(_self_));
}
void _g_date_order(GDate* _self_, GDate* date2) {
	g_date_order((GDate *)(_self_), (GDate *)(date2));
}
void _g_date_set_day(GDate* _self_, GDateDay day) {
	g_date_set_day((GDate *)(_self_), day);
}
void _g_date_set_dmy(GDate* _self_, GDateDay day, GDateMonth month, GDateYear y) {
	g_date_set_dmy((GDate *)(_self_), day, month, y);
}
void _g_date_set_julian(GDate* _self_, guint32 julian_date) {
	g_date_set_julian((GDate *)(_self_), julian_date);
}
void _g_date_set_month(GDate* _self_, GDateMonth month) {
	g_date_set_month((GDate *)(_self_), month);
}
void _g_date_set_parse(GDate* _self_, gchar* str) {
	g_date_set_parse((GDate *)(_self_), (const gchar *)(str));
}
void _g_date_set_time_t(GDate* _self_, time_t timet) {
	g_date_set_time_t((GDate *)(_self_), timet);
}
void _g_date_set_time_val(GDate* _self_, GTimeVal* timeval) {
	g_date_set_time_val((GDate *)(_self_), (GTimeVal *)(timeval));
}
void _g_date_set_year(GDate* _self_, GDateYear year) {
	g_date_set_year((GDate *)(_self_), year);
}
void _g_date_subtract_days(GDate* _self_, guint n_days) {
	g_date_subtract_days((GDate *)(_self_), n_days);
}
void _g_date_subtract_months(GDate* _self_, guint n_months) {
	g_date_subtract_months((GDate *)(_self_), n_months);
}
void _g_date_subtract_years(GDate* _self_, guint n_years) {
	g_date_subtract_years((GDate *)(_self_), n_years);
}
gboolean _g_date_valid(GDate* _self_) {
	return g_date_valid((const GDate *)(_self_));
}
GDateTime * _g_date_time_new_from_timeval_local(GTimeVal* tv) {
	return g_date_time_new_from_timeval_local((const GTimeVal *)(tv));
}
GDateTime * _g_date_time_new_from_timeval_utc(GTimeVal* tv) {
	return g_date_time_new_from_timeval_utc((const GTimeVal *)(tv));
}
GDateTime * _g_date_time_add(GDateTime* _self_, GTimeSpan timespan) {
	return g_date_time_add((GDateTime *)(_self_), timespan);
}
GDateTime * _g_date_time_add_days(GDateTime* _self_, gint days) {
	return g_date_time_add_days((GDateTime *)(_self_), days);
}
GDateTime * _g_date_time_add_full(GDateTime* _self_, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds) {
	return g_date_time_add_full((GDateTime *)(_self_), years, months, days, hours, minutes, seconds);
}
GDateTime * _g_date_time_add_hours(GDateTime* _self_, gint hours) {
	return g_date_time_add_hours((GDateTime *)(_self_), hours);
}
GDateTime * _g_date_time_add_minutes(GDateTime* _self_, gint minutes) {
	return g_date_time_add_minutes((GDateTime *)(_self_), minutes);
}
GDateTime * _g_date_time_add_months(GDateTime* _self_, gint months) {
	return g_date_time_add_months((GDateTime *)(_self_), months);
}
GDateTime * _g_date_time_add_seconds(GDateTime* _self_, gdouble seconds) {
	return g_date_time_add_seconds((GDateTime *)(_self_), seconds);
}
GDateTime * _g_date_time_add_weeks(GDateTime* _self_, gint weeks) {
	return g_date_time_add_weeks((GDateTime *)(_self_), weeks);
}
GDateTime * _g_date_time_add_years(GDateTime* _self_, gint years) {
	return g_date_time_add_years((GDateTime *)(_self_), years);
}
GTimeSpan _g_date_time_difference(GDateTime* _self_, GDateTime* begin) {
	return g_date_time_difference((GDateTime *)(_self_), (GDateTime *)(begin));
}
gchar * _g_date_time_format(GDateTime* _self_, gchar* format) {
	return g_date_time_format((GDateTime *)(_self_), (const gchar *)(format));
}
gint _g_date_time_get_day_of_month(GDateTime* _self_) {
	return g_date_time_get_day_of_month((GDateTime *)(_self_));
}
gint _g_date_time_get_day_of_week(GDateTime* _self_) {
	return g_date_time_get_day_of_week((GDateTime *)(_self_));
}
gint _g_date_time_get_day_of_year(GDateTime* _self_) {
	return g_date_time_get_day_of_year((GDateTime *)(_self_));
}
gint _g_date_time_get_hour(GDateTime* _self_) {
	return g_date_time_get_hour((GDateTime *)(_self_));
}
gint _g_date_time_get_microsecond(GDateTime* _self_) {
	return g_date_time_get_microsecond((GDateTime *)(_self_));
}
gint _g_date_time_get_minute(GDateTime* _self_) {
	return g_date_time_get_minute((GDateTime *)(_self_));
}
gint _g_date_time_get_month(GDateTime* _self_) {
	return g_date_time_get_month((GDateTime *)(_self_));
}
gint _g_date_time_get_second(GDateTime* _self_) {
	return g_date_time_get_second((GDateTime *)(_self_));
}
gdouble _g_date_time_get_seconds(GDateTime* _self_) {
	return g_date_time_get_seconds((GDateTime *)(_self_));
}
const gchar * _g_date_time_get_timezone_abbreviation(GDateTime* _self_) {
	return g_date_time_get_timezone_abbreviation((GDateTime *)(_self_));
}
GTimeSpan _g_date_time_get_utc_offset(GDateTime* _self_) {
	return g_date_time_get_utc_offset((GDateTime *)(_self_));
}
gint _g_date_time_get_week_numbering_year(GDateTime* _self_) {
	return g_date_time_get_week_numbering_year((GDateTime *)(_self_));
}
gint _g_date_time_get_week_of_year(GDateTime* _self_) {
	return g_date_time_get_week_of_year((GDateTime *)(_self_));
}
gint _g_date_time_get_year(GDateTime* _self_) {
	return g_date_time_get_year((GDateTime *)(_self_));
}
void _g_date_time_get_ymd(GDateTime* _self_, gint* year, gint* month, gint* day) {
	g_date_time_get_ymd((GDateTime *)(_self_), (gint *)(year), (gint *)(month), (gint *)(day));
}
gboolean _g_date_time_is_daylight_savings(GDateTime* _self_) {
	return g_date_time_is_daylight_savings((GDateTime *)(_self_));
}
GDateTime * _g_date_time_ref(GDateTime* _self_) {
	return g_date_time_ref((GDateTime *)(_self_));
}
GDateTime * _g_date_time_to_local(GDateTime* _self_) {
	return g_date_time_to_local((GDateTime *)(_self_));
}
gboolean _g_date_time_to_timeval(GDateTime* _self_, GTimeVal* tv) {
	return g_date_time_to_timeval((GDateTime *)(_self_), (GTimeVal *)(tv));
}
GDateTime * _g_date_time_to_timezone(GDateTime* _self_, GTimeZone* tz) {
	return g_date_time_to_timezone((GDateTime *)(_self_), (GTimeZone *)(tz));
}
gint64 _g_date_time_to_unix(GDateTime* _self_) {
	return g_date_time_to_unix((GDateTime *)(_self_));
}
GDateTime * _g_date_time_to_utc(GDateTime* _self_) {
	return g_date_time_to_utc((GDateTime *)(_self_));
}
void _g_date_time_unref(GDateTime* _self_) {
	g_date_time_unref((GDateTime *)(_self_));
}
gchar * _g_dir_make_tmp(gchar* tmpl, void* _error_) {
	return g_dir_make_tmp((const gchar *)(tmpl), (GError **)(_error_));
}
GDir * _g_dir_open(gchar* path, guint flags, void* _error_) {
	return g_dir_open((const gchar *)(path), flags, (GError **)(_error_));
}
void _g_dir_close(GDir* _self_) {
	g_dir_close((GDir *)(_self_));
}
const gchar * _g_dir_read_name(GDir* _self_) {
	return g_dir_read_name((GDir *)(_self_));
}
void _g_dir_rewind(GDir* _self_) {
	g_dir_rewind((GDir *)(_self_));
}
GError * _g_error_new_literal(GQuark domain, gint code, gchar* message) {
	return g_error_new_literal(domain, code, (const gchar *)(message));
}
GError * _g_error_copy(GError* _self_) {
	return g_error_copy((const GError *)(_self_));
}
void _g_error_free(GError* _self_) {
	g_error_free((GError *)(_self_));
}
gboolean _g_error_matches(GError* _self_, GQuark domain, gint code) {
	return g_error_matches((const GError *)(_self_), domain, code);
}
GHashTable * _g_hash_table_iter_get_hash_table(GHashTableIter* _self_) {
	return g_hash_table_iter_get_hash_table((GHashTableIter *)(_self_));
}
void _g_hash_table_iter_init(GHashTableIter* _self_, GHashTable* hash_table) {
	g_hash_table_iter_init((GHashTableIter *)(_self_), (GHashTable *)(hash_table));
}
gboolean _g_hash_table_iter_next(GHashTableIter* _self_, gpointer* key, gpointer* value) {
	return g_hash_table_iter_next((GHashTableIter *)(_self_), (gpointer *)(key), (gpointer *)(value));
}
void _g_hash_table_iter_remove(GHashTableIter* _self_) {
	g_hash_table_iter_remove((GHashTableIter *)(_self_));
}
void _g_hash_table_iter_replace(GHashTableIter* _self_, gpointer value) {
	g_hash_table_iter_replace((GHashTableIter *)(_self_), value);
}
void _g_hash_table_iter_steal(GHashTableIter* _self_) {
	g_hash_table_iter_steal((GHashTableIter *)(_self_));
}
GHmac * _g_hmac_copy(GHmac* _self_) {
	return g_hmac_copy((const GHmac *)(_self_));
}
void _g_hmac_get_digest(GHmac* _self_, guint8* buffer, gsize* digest_len) {
	g_hmac_get_digest((GHmac *)(_self_), (guint8 *)(buffer), (gsize *)(digest_len));
}
const gchar * _g_hmac_get_string(GHmac* _self_) {
	return g_hmac_get_string((GHmac *)(_self_));
}
GHmac * _g_hmac_ref(GHmac* _self_) {
	return g_hmac_ref((GHmac *)(_self_));
}
void _g_hmac_unref(GHmac* _self_) {
	g_hmac_unref((GHmac *)(_self_));
}
gint _g_hook_compare_ids(GHook* _self_, GHook* sibling) {
	return g_hook_compare_ids((GHook *)(_self_), (GHook *)(sibling));
}
void _g_hook_list_clear(GHookList* _self_) {
	g_hook_list_clear((GHookList *)(_self_));
}
void _g_hook_list_init(GHookList* _self_, guint hook_size) {
	g_hook_list_init((GHookList *)(_self_), hook_size);
}
void _g_hook_list_invoke(GHookList* _self_, gboolean may_recurse) {
	g_hook_list_invoke((GHookList *)(_self_), may_recurse);
}
void _g_hook_list_invoke_check(GHookList* _self_, gboolean may_recurse) {
	g_hook_list_invoke_check((GHookList *)(_self_), may_recurse);
}
void _g_hook_list_marshal(GHookList* _self_, gboolean may_recurse, GHookMarshaller marshaller, gpointer marshal_data) {
	g_hook_list_marshal((GHookList *)(_self_), may_recurse, marshaller, marshal_data);
}
void _g_hook_list_marshal_check(GHookList* _self_, gboolean may_recurse, GHookCheckMarshaller marshaller, gpointer marshal_data) {
	g_hook_list_marshal_check((GHookList *)(_self_), may_recurse, marshaller, marshal_data);
}
GIOChannel * _g_io_channel_new_file(gchar* filename, gchar* mode, void* _error_) {
	return g_io_channel_new_file((const gchar *)(filename), (const gchar *)(mode), (GError **)(_error_));
}
GIOStatus _g_io_channel_flush(GIOChannel* _self_, void* _error_) {
	return g_io_channel_flush((GIOChannel *)(_self_), (GError **)(_error_));
}
GIOCondition _g_io_channel_get_buffer_condition(GIOChannel* _self_) {
	return g_io_channel_get_buffer_condition((GIOChannel *)(_self_));
}
gsize _g_io_channel_get_buffer_size(GIOChannel* _self_) {
	return g_io_channel_get_buffer_size((GIOChannel *)(_self_));
}
gboolean _g_io_channel_get_buffered(GIOChannel* _self_) {
	return g_io_channel_get_buffered((GIOChannel *)(_self_));
}
gboolean _g_io_channel_get_close_on_unref(GIOChannel* _self_) {
	return g_io_channel_get_close_on_unref((GIOChannel *)(_self_));
}
const gchar * _g_io_channel_get_encoding(GIOChannel* _self_) {
	return g_io_channel_get_encoding((GIOChannel *)(_self_));
}
GIOFlags _g_io_channel_get_flags(GIOChannel* _self_) {
	return g_io_channel_get_flags((GIOChannel *)(_self_));
}
const gchar * _g_io_channel_get_line_term(GIOChannel* _self_, gint* length) {
	return g_io_channel_get_line_term((GIOChannel *)(_self_), (gint *)(length));
}
void _g_io_channel_init(GIOChannel* _self_) {
	g_io_channel_init((GIOChannel *)(_self_));
}
GIOStatus _g_io_channel_read_line(GIOChannel* _self_, void* str_return, gsize* length, gsize* terminator_pos, void* _error_) {
	return g_io_channel_read_line((GIOChannel *)(_self_), (gchar **)(str_return), (gsize *)(length), (gsize *)(terminator_pos), (GError **)(_error_));
}
GIOStatus _g_io_channel_read_line_string(GIOChannel* _self_, GString* buffer, gsize* terminator_pos, void* _error_) {
	return g_io_channel_read_line_string((GIOChannel *)(_self_), (GString *)(buffer), (gsize *)(terminator_pos), (GError **)(_error_));
}
GIOStatus _g_io_channel_read_unichar(GIOChannel* _self_, gunichar* thechar, void* _error_) {
	return g_io_channel_read_unichar((GIOChannel *)(_self_), (gunichar *)(thechar), (GError **)(_error_));
}
GIOChannel * _g_io_channel_ref(GIOChannel* _self_) {
	return g_io_channel_ref((GIOChannel *)(_self_));
}
GIOStatus _g_io_channel_seek_position(GIOChannel* _self_, gint64 offset, GSeekType type_, void* _error_) {
	return g_io_channel_seek_position((GIOChannel *)(_self_), offset, type_, (GError **)(_error_));
}
void _g_io_channel_set_buffer_size(GIOChannel* _self_, gsize size) {
	g_io_channel_set_buffer_size((GIOChannel *)(_self_), size);
}
void _g_io_channel_set_buffered(GIOChannel* _self_, gboolean buffered) {
	g_io_channel_set_buffered((GIOChannel *)(_self_), buffered);
}
void _g_io_channel_set_close_on_unref(GIOChannel* _self_, gboolean do_close) {
	g_io_channel_set_close_on_unref((GIOChannel *)(_self_), do_close);
}
GIOStatus _g_io_channel_set_encoding(GIOChannel* _self_, gchar* encoding, void* _error_) {
	return g_io_channel_set_encoding((GIOChannel *)(_self_), (const gchar *)(encoding), (GError **)(_error_));
}
GIOStatus _g_io_channel_set_flags(GIOChannel* _self_, GIOFlags flags, void* _error_) {
	return g_io_channel_set_flags((GIOChannel *)(_self_), flags, (GError **)(_error_));
}
void _g_io_channel_set_line_term(GIOChannel* _self_, gchar* line_term, gint length) {
	g_io_channel_set_line_term((GIOChannel *)(_self_), (const gchar *)(line_term), length);
}
GIOStatus _g_io_channel_shutdown(GIOChannel* _self_, gboolean flush, void* _error_) {
	return g_io_channel_shutdown((GIOChannel *)(_self_), flush, (GError **)(_error_));
}
gint _g_io_channel_unix_get_fd(GIOChannel* _self_) {
	return g_io_channel_unix_get_fd((GIOChannel *)(_self_));
}
void _g_io_channel_unref(GIOChannel* _self_) {
	g_io_channel_unref((GIOChannel *)(_self_));
}
GIOStatus _g_io_channel_write_unichar(GIOChannel* _self_, gunichar thechar, void* _error_) {
	return g_io_channel_write_unichar((GIOChannel *)(_self_), thechar, (GError **)(_error_));
}
void _g_key_file_free(GKeyFile* _self_) {
	g_key_file_free((GKeyFile *)(_self_));
}
gboolean _g_key_file_get_boolean(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_boolean((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean * _g_key_file_get_boolean_list(GKeyFile* _self_, gchar* group_name, gchar* key, gsize* length, void* _error_) {
	return g_key_file_get_boolean_list((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (gsize *)(length), (GError **)(_error_));
}
gchar * _g_key_file_get_comment(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_comment((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gdouble _g_key_file_get_double(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_double((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gdouble * _g_key_file_get_double_list(GKeyFile* _self_, gchar* group_name, gchar* key, gsize* length, void* _error_) {
	return g_key_file_get_double_list((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (gsize *)(length), (GError **)(_error_));
}
gchar ** _g_key_file_get_groups(GKeyFile* _self_, gsize* length) {
	return g_key_file_get_groups((GKeyFile *)(_self_), (gsize *)(length));
}
gint64 _g_key_file_get_int64(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_int64((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gint _g_key_file_get_integer(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_integer((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gint * _g_key_file_get_integer_list(GKeyFile* _self_, gchar* group_name, gchar* key, gsize* length, void* _error_) {
	return g_key_file_get_integer_list((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (gsize *)(length), (GError **)(_error_));
}
gchar ** _g_key_file_get_keys(GKeyFile* _self_, gchar* group_name, gsize* length, void* _error_) {
	return g_key_file_get_keys((GKeyFile *)(_self_), (const gchar *)(group_name), (gsize *)(length), (GError **)(_error_));
}
gchar * _g_key_file_get_locale_string(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* locale, void* _error_) {
	return g_key_file_get_locale_string((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (GError **)(_error_));
}
gchar ** _g_key_file_get_locale_string_list(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* locale, gsize* length, void* _error_) {
	return g_key_file_get_locale_string_list((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (gsize *)(length), (GError **)(_error_));
}
gchar * _g_key_file_get_start_group(GKeyFile* _self_) {
	return g_key_file_get_start_group((GKeyFile *)(_self_));
}
gchar * _g_key_file_get_string(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_string((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gchar ** _g_key_file_get_string_list(GKeyFile* _self_, gchar* group_name, gchar* key, gsize* length, void* _error_) {
	return g_key_file_get_string_list((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (gsize *)(length), (GError **)(_error_));
}
guint64 _g_key_file_get_uint64(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_uint64((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gchar * _g_key_file_get_value(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_get_value((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_has_group(GKeyFile* _self_, gchar* group_name) {
	return g_key_file_has_group((GKeyFile *)(_self_), (const gchar *)(group_name));
}
gboolean _g_key_file_has_key(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_has_key((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_load_from_data(GKeyFile* _self_, gchar* data, gsize length, GKeyFileFlags flags, void* _error_) {
	return g_key_file_load_from_data((GKeyFile *)(_self_), (const gchar *)(data), length, flags, (GError **)(_error_));
}
gboolean _g_key_file_load_from_data_dirs(GKeyFile* _self_, gchar* file, void* full_path, GKeyFileFlags flags, void* _error_) {
	return g_key_file_load_from_data_dirs((GKeyFile *)(_self_), (const gchar *)(file), (gchar **)(full_path), flags, (GError **)(_error_));
}
gboolean _g_key_file_load_from_file(GKeyFile* _self_, gchar* file, GKeyFileFlags flags, void* _error_) {
	return g_key_file_load_from_file((GKeyFile *)(_self_), (const gchar *)(file), flags, (GError **)(_error_));
}
GKeyFile * _g_key_file_ref(GKeyFile* _self_) {
	return g_key_file_ref((GKeyFile *)(_self_));
}
gboolean _g_key_file_remove_comment(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_remove_comment((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_remove_group(GKeyFile* _self_, gchar* group_name, void* _error_) {
	return g_key_file_remove_group((GKeyFile *)(_self_), (const gchar *)(group_name), (GError **)(_error_));
}
gboolean _g_key_file_remove_key(GKeyFile* _self_, gchar* group_name, gchar* key, void* _error_) {
	return g_key_file_remove_key((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
void _g_key_file_set_boolean(GKeyFile* _self_, gchar* group_name, gchar* key, gboolean value) {
	g_key_file_set_boolean((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), value);
}
gboolean _g_key_file_set_comment(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* comment, void* _error_) {
	return g_key_file_set_comment((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(comment), (GError **)(_error_));
}
void _g_key_file_set_double(GKeyFile* _self_, gchar* group_name, gchar* key, gdouble value) {
	g_key_file_set_double((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_int64(GKeyFile* _self_, gchar* group_name, gchar* key, gint64 value) {
	g_key_file_set_int64((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_integer(GKeyFile* _self_, gchar* group_name, gchar* key, gint value) {
	g_key_file_set_integer((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_list_separator(GKeyFile* _self_, gchar separator) {
	g_key_file_set_list_separator((GKeyFile *)(_self_), separator);
}
void _g_key_file_set_locale_string(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* locale, gchar* string_) {
	g_key_file_set_locale_string((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (const gchar *)(string_));
}
void _g_key_file_set_string(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* string_) {
	g_key_file_set_string((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(string_));
}
void _g_key_file_set_uint64(GKeyFile* _self_, gchar* group_name, gchar* key, guint64 value) {
	g_key_file_set_uint64((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_value(GKeyFile* _self_, gchar* group_name, gchar* key, gchar* value) {
	g_key_file_set_value((GKeyFile *)(_self_), (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(value));
}
gchar * _g_key_file_to_data(GKeyFile* _self_, gsize* length, void* _error_) {
	return g_key_file_to_data((GKeyFile *)(_self_), (gsize *)(length), (GError **)(_error_));
}
void _g_key_file_unref(GKeyFile* _self_) {
	g_key_file_unref((GKeyFile *)(_self_));
}
gboolean _g_main_context_acquire(GMainContext* _self_) {
	return g_main_context_acquire((GMainContext *)(_self_));
}
void _g_main_context_add_poll(GMainContext* _self_, GPollFD* fd, gint priority) {
	g_main_context_add_poll((GMainContext *)(_self_), (GPollFD *)(fd), priority);
}
void _g_main_context_dispatch(GMainContext* _self_) {
	g_main_context_dispatch((GMainContext *)(_self_));
}
GSource * _g_main_context_find_source_by_funcs_user_data(GMainContext* _self_, GSourceFuncs* funcs, gpointer user_data) {
	return g_main_context_find_source_by_funcs_user_data((GMainContext *)(_self_), (GSourceFuncs *)(funcs), user_data);
}
GSource * _g_main_context_find_source_by_id(GMainContext* _self_, guint source_id) {
	return g_main_context_find_source_by_id((GMainContext *)(_self_), source_id);
}
GSource * _g_main_context_find_source_by_user_data(GMainContext* _self_, gpointer user_data) {
	return g_main_context_find_source_by_user_data((GMainContext *)(_self_), user_data);
}
GPollFunc _g_main_context_get_poll_func(GMainContext* _self_) {
	return g_main_context_get_poll_func((GMainContext *)(_self_));
}
void _g_main_context_invoke(GMainContext* _self_, GSourceFunc function, gpointer data) {
	g_main_context_invoke((GMainContext *)(_self_), function, data);
}
void _g_main_context_invoke_full(GMainContext* _self_, gint priority, GSourceFunc function, gpointer data, GDestroyNotify notify) {
	g_main_context_invoke_full((GMainContext *)(_self_), priority, function, data, notify);
}
gboolean _g_main_context_is_owner(GMainContext* _self_) {
	return g_main_context_is_owner((GMainContext *)(_self_));
}
gboolean _g_main_context_iteration(GMainContext* _self_, gboolean may_block) {
	return g_main_context_iteration((GMainContext *)(_self_), may_block);
}
gboolean _g_main_context_pending(GMainContext* _self_) {
	return g_main_context_pending((GMainContext *)(_self_));
}
void _g_main_context_pop_thread_default(GMainContext* _self_) {
	g_main_context_pop_thread_default((GMainContext *)(_self_));
}
gboolean _g_main_context_prepare(GMainContext* _self_, gint* priority) {
	return g_main_context_prepare((GMainContext *)(_self_), (gint *)(priority));
}
void _g_main_context_push_thread_default(GMainContext* _self_) {
	g_main_context_push_thread_default((GMainContext *)(_self_));
}
GMainContext * _g_main_context_ref(GMainContext* _self_) {
	return g_main_context_ref((GMainContext *)(_self_));
}
void _g_main_context_release(GMainContext* _self_) {
	g_main_context_release((GMainContext *)(_self_));
}
void _g_main_context_remove_poll(GMainContext* _self_, GPollFD* fd) {
	g_main_context_remove_poll((GMainContext *)(_self_), (GPollFD *)(fd));
}
void _g_main_context_set_poll_func(GMainContext* _self_, GPollFunc func_) {
	g_main_context_set_poll_func((GMainContext *)(_self_), func_);
}
void _g_main_context_unref(GMainContext* _self_) {
	g_main_context_unref((GMainContext *)(_self_));
}
gboolean _g_main_context_wait(GMainContext* _self_, GCond* cond, GMutex* mutex) {
	return g_main_context_wait((GMainContext *)(_self_), (GCond *)(cond), (GMutex *)(mutex));
}
void _g_main_context_wakeup(GMainContext* _self_) {
	g_main_context_wakeup((GMainContext *)(_self_));
}
GMainContext * _g_main_loop_get_context(GMainLoop* _self_) {
	return g_main_loop_get_context((GMainLoop *)(_self_));
}
gboolean _g_main_loop_is_running(GMainLoop* _self_) {
	return g_main_loop_is_running((GMainLoop *)(_self_));
}
void _g_main_loop_quit(GMainLoop* _self_) {
	g_main_loop_quit((GMainLoop *)(_self_));
}
GMainLoop * _g_main_loop_ref(GMainLoop* _self_) {
	return g_main_loop_ref((GMainLoop *)(_self_));
}
void _g_main_loop_run(GMainLoop* _self_) {
	g_main_loop_run((GMainLoop *)(_self_));
}
void _g_main_loop_unref(GMainLoop* _self_) {
	g_main_loop_unref((GMainLoop *)(_self_));
}
GMappedFile * _g_mapped_file_new(gchar* filename, gboolean writable, void* _error_) {
	return g_mapped_file_new((const gchar *)(filename), writable, (GError **)(_error_));
}
GMappedFile * _g_mapped_file_new_from_fd(gint fd, gboolean writable, void* _error_) {
	return g_mapped_file_new_from_fd(fd, writable, (GError **)(_error_));
}
GBytes * _g_mapped_file_get_bytes(GMappedFile* _self_) {
	return g_mapped_file_get_bytes((GMappedFile *)(_self_));
}
gchar * _g_mapped_file_get_contents(GMappedFile* _self_) {
	return g_mapped_file_get_contents((GMappedFile *)(_self_));
}
gsize _g_mapped_file_get_length(GMappedFile* _self_) {
	return g_mapped_file_get_length((GMappedFile *)(_self_));
}
GMappedFile * _g_mapped_file_ref(GMappedFile* _self_) {
	return g_mapped_file_ref((GMappedFile *)(_self_));
}
void _g_mapped_file_unref(GMappedFile* _self_) {
	g_mapped_file_unref((GMappedFile *)(_self_));
}
GMarkupParseContext * _g_markup_parse_context_new(GMarkupParser* parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify) {
	return g_markup_parse_context_new((const GMarkupParser *)(parser), flags, user_data, user_data_dnotify);
}
gboolean _g_markup_parse_context_end_parse(GMarkupParseContext* _self_, void* _error_) {
	return g_markup_parse_context_end_parse((GMarkupParseContext *)(_self_), (GError **)(_error_));
}
void _g_markup_parse_context_free(GMarkupParseContext* _self_) {
	g_markup_parse_context_free((GMarkupParseContext *)(_self_));
}
const gchar * _g_markup_parse_context_get_element(GMarkupParseContext* _self_) {
	return g_markup_parse_context_get_element((GMarkupParseContext *)(_self_));
}
const GSList * _g_markup_parse_context_get_element_stack(GMarkupParseContext* _self_) {
	return g_markup_parse_context_get_element_stack((GMarkupParseContext *)(_self_));
}
void _g_markup_parse_context_get_position(GMarkupParseContext* _self_, gint* line_number, gint* char_number) {
	g_markup_parse_context_get_position((GMarkupParseContext *)(_self_), (gint *)(line_number), (gint *)(char_number));
}
gpointer _g_markup_parse_context_get_user_data(GMarkupParseContext* _self_) {
	return g_markup_parse_context_get_user_data((GMarkupParseContext *)(_self_));
}
gboolean _g_markup_parse_context_parse(GMarkupParseContext* _self_, gchar* text, gssize text_len, void* _error_) {
	return g_markup_parse_context_parse((GMarkupParseContext *)(_self_), (const gchar *)(text), text_len, (GError **)(_error_));
}
gpointer _g_markup_parse_context_pop(GMarkupParseContext* _self_) {
	return g_markup_parse_context_pop((GMarkupParseContext *)(_self_));
}
void _g_markup_parse_context_push(GMarkupParseContext* _self_, GMarkupParser* parser, gpointer user_data) {
	g_markup_parse_context_push((GMarkupParseContext *)(_self_), (const GMarkupParser *)(parser), user_data);
}
gchar * _g_match_info_expand_references(GMatchInfo* _self_, gchar* string_to_expand, void* _error_) {
	return g_match_info_expand_references((const GMatchInfo *)(_self_), (const gchar *)(string_to_expand), (GError **)(_error_));
}
gchar * _g_match_info_fetch(GMatchInfo* _self_, gint match_num) {
	return g_match_info_fetch((const GMatchInfo *)(_self_), match_num);
}
gchar ** _g_match_info_fetch_all(GMatchInfo* _self_) {
	return g_match_info_fetch_all((const GMatchInfo *)(_self_));
}
gchar * _g_match_info_fetch_named(GMatchInfo* _self_, gchar* name) {
	return g_match_info_fetch_named((const GMatchInfo *)(_self_), (const gchar *)(name));
}
gboolean _g_match_info_fetch_named_pos(GMatchInfo* _self_, gchar* name, gint* start_pos, gint* end_pos) {
	return g_match_info_fetch_named_pos((const GMatchInfo *)(_self_), (const gchar *)(name), (gint *)(start_pos), (gint *)(end_pos));
}
gboolean _g_match_info_fetch_pos(GMatchInfo* _self_, gint match_num, gint* start_pos, gint* end_pos) {
	return g_match_info_fetch_pos((const GMatchInfo *)(_self_), match_num, (gint *)(start_pos), (gint *)(end_pos));
}
void _g_match_info_free(GMatchInfo* _self_) {
	g_match_info_free((GMatchInfo *)(_self_));
}
gint _g_match_info_get_match_count(GMatchInfo* _self_) {
	return g_match_info_get_match_count((const GMatchInfo *)(_self_));
}
GRegex * _g_match_info_get_regex(GMatchInfo* _self_) {
	return g_match_info_get_regex((const GMatchInfo *)(_self_));
}
const gchar * _g_match_info_get_string(GMatchInfo* _self_) {
	return g_match_info_get_string((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_is_partial_match(GMatchInfo* _self_) {
	return g_match_info_is_partial_match((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_matches(GMatchInfo* _self_) {
	return g_match_info_matches((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_next(GMatchInfo* _self_, void* _error_) {
	return g_match_info_next((GMatchInfo *)(_self_), (GError **)(_error_));
}
GMatchInfo * _g_match_info_ref(GMatchInfo* _self_) {
	return g_match_info_ref((GMatchInfo *)(_self_));
}
void _g_match_info_unref(GMatchInfo* _self_) {
	g_match_info_unref((GMatchInfo *)(_self_));
}
gint _g_node_child_index(GNode* _self_, gpointer data) {
	return g_node_child_index((GNode *)(_self_), data);
}
gint _g_node_child_position(GNode* _self_, GNode* child) {
	return g_node_child_position((GNode *)(_self_), (GNode *)(child));
}
void _g_node_children_foreach(GNode* _self_, GTraverseFlags flags, GNodeForeachFunc func_, gpointer data) {
	g_node_children_foreach((GNode *)(_self_), flags, func_, data);
}
GNode * _g_node_copy(GNode* _self_) {
	return g_node_copy((GNode *)(_self_));
}
GNode * _g_node_copy_deep(GNode* _self_, GCopyFunc copy_func, gpointer data) {
	return g_node_copy_deep((GNode *)(_self_), copy_func, data);
}
guint _g_node_depth(GNode* _self_) {
	return g_node_depth((GNode *)(_self_));
}
void _g_node_destroy(GNode* _self_) {
	g_node_destroy((GNode *)(_self_));
}
GNode * _g_node_find(GNode* _self_, GTraverseType order, GTraverseFlags flags, gpointer data) {
	return g_node_find((GNode *)(_self_), order, flags, data);
}
GNode * _g_node_find_child(GNode* _self_, GTraverseFlags flags, gpointer data) {
	return g_node_find_child((GNode *)(_self_), flags, data);
}
GNode * _g_node_first_sibling(GNode* _self_) {
	return g_node_first_sibling((GNode *)(_self_));
}
GNode * _g_node_get_root(GNode* _self_) {
	return g_node_get_root((GNode *)(_self_));
}
GNode * _g_node_insert(GNode* _self_, gint position, GNode* node) {
	return g_node_insert((GNode *)(_self_), position, (GNode *)(node));
}
GNode * _g_node_insert_after(GNode* _self_, GNode* sibling, GNode* node) {
	return g_node_insert_after((GNode *)(_self_), (GNode *)(sibling), (GNode *)(node));
}
GNode * _g_node_insert_before(GNode* _self_, GNode* sibling, GNode* node) {
	return g_node_insert_before((GNode *)(_self_), (GNode *)(sibling), (GNode *)(node));
}
gboolean _g_node_is_ancestor(GNode* _self_, GNode* descendant) {
	return g_node_is_ancestor((GNode *)(_self_), (GNode *)(descendant));
}
GNode * _g_node_last_child(GNode* _self_) {
	return g_node_last_child((GNode *)(_self_));
}
GNode * _g_node_last_sibling(GNode* _self_) {
	return g_node_last_sibling((GNode *)(_self_));
}
guint _g_node_max_height(GNode* _self_) {
	return g_node_max_height((GNode *)(_self_));
}
guint _g_node_n_children(GNode* _self_) {
	return g_node_n_children((GNode *)(_self_));
}
guint _g_node_n_nodes(GNode* _self_, GTraverseFlags flags) {
	return g_node_n_nodes((GNode *)(_self_), flags);
}
GNode * _g_node_nth_child(GNode* _self_, guint n) {
	return g_node_nth_child((GNode *)(_self_), n);
}
GNode * _g_node_prepend(GNode* _self_, GNode* node) {
	return g_node_prepend((GNode *)(_self_), (GNode *)(node));
}
void _g_node_reverse_children(GNode* _self_) {
	g_node_reverse_children((GNode *)(_self_));
}
void _g_node_traverse(GNode* _self_, GTraverseType order, GTraverseFlags flags, gint max_depth, GNodeTraverseFunc func_, gpointer data) {
	g_node_traverse((GNode *)(_self_), order, flags, max_depth, func_, data);
}
void _g_node_unlink(GNode* _self_) {
	g_node_unlink((GNode *)(_self_));
}
gpointer _g_once_impl(GOnce* _self_, GThreadFunc func_, gpointer arg) {
	return g_once_impl((GOnce *)(_self_), func_, arg);
}
GOptionContext * _g_option_context_new(gchar* parameter_string) {
	return g_option_context_new((const gchar *)(parameter_string));
}
void _g_option_context_add_group(GOptionContext* _self_, GOptionGroup* group) {
	g_option_context_add_group((GOptionContext *)(_self_), (GOptionGroup *)(group));
}
void _g_option_context_add_main_entries(GOptionContext* _self_, GOptionEntry* entries, gchar* translation_domain) {
	g_option_context_add_main_entries((GOptionContext *)(_self_), (const GOptionEntry *)(entries), (const gchar *)(translation_domain));
}
void _g_option_context_free(GOptionContext* _self_) {
	g_option_context_free((GOptionContext *)(_self_));
}
const gchar * _g_option_context_get_description(GOptionContext* _self_) {
	return g_option_context_get_description((GOptionContext *)(_self_));
}
gchar * _g_option_context_get_help(GOptionContext* _self_, gboolean main_help, GOptionGroup* group) {
	return g_option_context_get_help((GOptionContext *)(_self_), main_help, (GOptionGroup *)(group));
}
gboolean _g_option_context_get_help_enabled(GOptionContext* _self_) {
	return g_option_context_get_help_enabled((GOptionContext *)(_self_));
}
gboolean _g_option_context_get_ignore_unknown_options(GOptionContext* _self_) {
	return g_option_context_get_ignore_unknown_options((GOptionContext *)(_self_));
}
GOptionGroup * _g_option_context_get_main_group(GOptionContext* _self_) {
	return g_option_context_get_main_group((GOptionContext *)(_self_));
}
const gchar * _g_option_context_get_summary(GOptionContext* _self_) {
	return g_option_context_get_summary((GOptionContext *)(_self_));
}
void _g_option_context_set_description(GOptionContext* _self_, gchar* description) {
	g_option_context_set_description((GOptionContext *)(_self_), (const gchar *)(description));
}
void _g_option_context_set_help_enabled(GOptionContext* _self_, gboolean help_enabled) {
	g_option_context_set_help_enabled((GOptionContext *)(_self_), help_enabled);
}
void _g_option_context_set_ignore_unknown_options(GOptionContext* _self_, gboolean ignore_unknown) {
	g_option_context_set_ignore_unknown_options((GOptionContext *)(_self_), ignore_unknown);
}
void _g_option_context_set_main_group(GOptionContext* _self_, GOptionGroup* group) {
	g_option_context_set_main_group((GOptionContext *)(_self_), (GOptionGroup *)(group));
}
void _g_option_context_set_summary(GOptionContext* _self_, gchar* summary) {
	g_option_context_set_summary((GOptionContext *)(_self_), (const gchar *)(summary));
}
void _g_option_context_set_translate_func(GOptionContext* _self_, GTranslateFunc func_, gpointer data, GDestroyNotify destroy_notify) {
	g_option_context_set_translate_func((GOptionContext *)(_self_), func_, data, destroy_notify);
}
void _g_option_context_set_translation_domain(GOptionContext* _self_, gchar* domain) {
	g_option_context_set_translation_domain((GOptionContext *)(_self_), (const gchar *)(domain));
}
GOptionGroup * _g_option_group_new(gchar* name, gchar* description, gchar* help_description, gpointer user_data, GDestroyNotify destroy) {
	return g_option_group_new((const gchar *)(name), (const gchar *)(description), (const gchar *)(help_description), user_data, destroy);
}
void _g_option_group_add_entries(GOptionGroup* _self_, GOptionEntry* entries) {
	g_option_group_add_entries((GOptionGroup *)(_self_), (const GOptionEntry *)(entries));
}
void _g_option_group_free(GOptionGroup* _self_) {
	g_option_group_free((GOptionGroup *)(_self_));
}
void _g_option_group_set_error_hook(GOptionGroup* _self_, GOptionErrorFunc error_func) {
	g_option_group_set_error_hook((GOptionGroup *)(_self_), error_func);
}
void _g_option_group_set_parse_hooks(GOptionGroup* _self_, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func) {
	g_option_group_set_parse_hooks((GOptionGroup *)(_self_), pre_parse_func, post_parse_func);
}
void _g_option_group_set_translate_func(GOptionGroup* _self_, GTranslateFunc func_, gpointer data, GDestroyNotify destroy_notify) {
	g_option_group_set_translate_func((GOptionGroup *)(_self_), func_, data, destroy_notify);
}
void _g_option_group_set_translation_domain(GOptionGroup* _self_, gchar* domain) {
	g_option_group_set_translation_domain((GOptionGroup *)(_self_), (const gchar *)(domain));
}
GPatternSpec * _g_pattern_spec_new(gchar* pattern) {
	return g_pattern_spec_new((const gchar *)(pattern));
}
gboolean _g_pattern_spec_equal(GPatternSpec* _self_, GPatternSpec* pspec2) {
	return g_pattern_spec_equal((GPatternSpec *)(_self_), (GPatternSpec *)(pspec2));
}
void _g_pattern_spec_free(GPatternSpec* _self_) {
	g_pattern_spec_free((GPatternSpec *)(_self_));
}
gpointer _g_private_get(GPrivate* _self_) {
	return g_private_get((GPrivate *)(_self_));
}
void _g_private_replace(GPrivate* _self_, gpointer value) {
	g_private_replace((GPrivate *)(_self_), value);
}
void _g_private_set(GPrivate* _self_, gpointer value) {
	g_private_set((GPrivate *)(_self_), value);
}
void _g_queue_clear(GQueue* _self_) {
	g_queue_clear((GQueue *)(_self_));
}
GQueue * _g_queue_copy(GQueue* _self_) {
	return g_queue_copy((GQueue *)(_self_));
}
void _g_queue_delete_link(GQueue* _self_, GList* link_) {
	g_queue_delete_link((GQueue *)(_self_), (GList *)(link_));
}
GList * _g_queue_find(GQueue* _self_, gconstpointer data) {
	return g_queue_find((GQueue *)(_self_), data);
}
GList * _g_queue_find_custom(GQueue* _self_, gconstpointer data, GCompareFunc func_) {
	return g_queue_find_custom((GQueue *)(_self_), data, func_);
}
void _g_queue_foreach(GQueue* _self_, GFunc func_, gpointer user_data) {
	g_queue_foreach((GQueue *)(_self_), func_, user_data);
}
void _g_queue_free(GQueue* _self_) {
	g_queue_free((GQueue *)(_self_));
}
void _g_queue_free_full(GQueue* _self_, GDestroyNotify free_func) {
	g_queue_free_full((GQueue *)(_self_), free_func);
}
guint _g_queue_get_length(GQueue* _self_) {
	return g_queue_get_length((GQueue *)(_self_));
}
gint _g_queue_index(GQueue* _self_, gconstpointer data) {
	return g_queue_index((GQueue *)(_self_), data);
}
void _g_queue_init(GQueue* _self_) {
	g_queue_init((GQueue *)(_self_));
}
void _g_queue_insert_after(GQueue* _self_, GList* sibling, gpointer data) {
	g_queue_insert_after((GQueue *)(_self_), (GList *)(sibling), data);
}
void _g_queue_insert_before(GQueue* _self_, GList* sibling, gpointer data) {
	g_queue_insert_before((GQueue *)(_self_), (GList *)(sibling), data);
}
void _g_queue_insert_sorted(GQueue* _self_, gpointer data, GCompareDataFunc func_, gpointer user_data) {
	g_queue_insert_sorted((GQueue *)(_self_), data, func_, user_data);
}
gboolean _g_queue_is_empty(GQueue* _self_) {
	return g_queue_is_empty((GQueue *)(_self_));
}
gint _g_queue_link_index(GQueue* _self_, GList* link_) {
	return g_queue_link_index((GQueue *)(_self_), (GList *)(link_));
}
gpointer _g_queue_peek_head(GQueue* _self_) {
	return g_queue_peek_head((GQueue *)(_self_));
}
GList * _g_queue_peek_head_link(GQueue* _self_) {
	return g_queue_peek_head_link((GQueue *)(_self_));
}
gpointer _g_queue_peek_nth(GQueue* _self_, guint n) {
	return g_queue_peek_nth((GQueue *)(_self_), n);
}
GList * _g_queue_peek_nth_link(GQueue* _self_, guint n) {
	return g_queue_peek_nth_link((GQueue *)(_self_), n);
}
gpointer _g_queue_peek_tail(GQueue* _self_) {
	return g_queue_peek_tail((GQueue *)(_self_));
}
GList * _g_queue_peek_tail_link(GQueue* _self_) {
	return g_queue_peek_tail_link((GQueue *)(_self_));
}
gpointer _g_queue_pop_head(GQueue* _self_) {
	return g_queue_pop_head((GQueue *)(_self_));
}
GList * _g_queue_pop_head_link(GQueue* _self_) {
	return g_queue_pop_head_link((GQueue *)(_self_));
}
gpointer _g_queue_pop_nth(GQueue* _self_, guint n) {
	return g_queue_pop_nth((GQueue *)(_self_), n);
}
GList * _g_queue_pop_nth_link(GQueue* _self_, guint n) {
	return g_queue_pop_nth_link((GQueue *)(_self_), n);
}
gpointer _g_queue_pop_tail(GQueue* _self_) {
	return g_queue_pop_tail((GQueue *)(_self_));
}
GList * _g_queue_pop_tail_link(GQueue* _self_) {
	return g_queue_pop_tail_link((GQueue *)(_self_));
}
void _g_queue_push_head(GQueue* _self_, gpointer data) {
	g_queue_push_head((GQueue *)(_self_), data);
}
void _g_queue_push_head_link(GQueue* _self_, GList* link_) {
	g_queue_push_head_link((GQueue *)(_self_), (GList *)(link_));
}
void _g_queue_push_nth(GQueue* _self_, gpointer data, gint n) {
	g_queue_push_nth((GQueue *)(_self_), data, n);
}
void _g_queue_push_nth_link(GQueue* _self_, gint n, GList* link_) {
	g_queue_push_nth_link((GQueue *)(_self_), n, (GList *)(link_));
}
void _g_queue_push_tail(GQueue* _self_, gpointer data) {
	g_queue_push_tail((GQueue *)(_self_), data);
}
void _g_queue_push_tail_link(GQueue* _self_, GList* link_) {
	g_queue_push_tail_link((GQueue *)(_self_), (GList *)(link_));
}
gboolean _g_queue_remove(GQueue* _self_, gconstpointer data) {
	return g_queue_remove((GQueue *)(_self_), data);
}
guint _g_queue_remove_all(GQueue* _self_, gconstpointer data) {
	return g_queue_remove_all((GQueue *)(_self_), data);
}
void _g_queue_reverse(GQueue* _self_) {
	g_queue_reverse((GQueue *)(_self_));
}
void _g_queue_sort(GQueue* _self_, GCompareDataFunc compare_func, gpointer user_data) {
	g_queue_sort((GQueue *)(_self_), compare_func, user_data);
}
void _g_queue_unlink(GQueue* _self_, GList* link_) {
	g_queue_unlink((GQueue *)(_self_), (GList *)(link_));
}
void _g_rw_lock_clear(GRWLock* _self_) {
	g_rw_lock_clear((GRWLock *)(_self_));
}
void _g_rw_lock_init(GRWLock* _self_) {
	g_rw_lock_init((GRWLock *)(_self_));
}
void _g_rw_lock_reader_lock(GRWLock* _self_) {
	g_rw_lock_reader_lock((GRWLock *)(_self_));
}
gboolean _g_rw_lock_reader_trylock(GRWLock* _self_) {
	return g_rw_lock_reader_trylock((GRWLock *)(_self_));
}
void _g_rw_lock_reader_unlock(GRWLock* _self_) {
	g_rw_lock_reader_unlock((GRWLock *)(_self_));
}
void _g_rw_lock_writer_lock(GRWLock* _self_) {
	g_rw_lock_writer_lock((GRWLock *)(_self_));
}
gboolean _g_rw_lock_writer_trylock(GRWLock* _self_) {
	return g_rw_lock_writer_trylock((GRWLock *)(_self_));
}
void _g_rw_lock_writer_unlock(GRWLock* _self_) {
	g_rw_lock_writer_unlock((GRWLock *)(_self_));
}
GRand * _g_rand_new_with_seed_array(guint32* seed, guint seed_length) {
	return g_rand_new_with_seed_array((const guint32 *)(seed), seed_length);
}
GRand * _g_rand_copy(GRand* _self_) {
	return g_rand_copy((GRand *)(_self_));
}
gdouble _g_rand_double(GRand* _self_) {
	return g_rand_double((GRand *)(_self_));
}
gdouble _g_rand_double_range(GRand* _self_, gdouble begin, gdouble end) {
	return g_rand_double_range((GRand *)(_self_), begin, end);
}
void _g_rand_free(GRand* _self_) {
	g_rand_free((GRand *)(_self_));
}
guint32 _g_rand_int(GRand* _self_) {
	return g_rand_int((GRand *)(_self_));
}
gint32 _g_rand_int_range(GRand* _self_, gint32 begin, gint32 end) {
	return g_rand_int_range((GRand *)(_self_), begin, end);
}
void _g_rand_set_seed(GRand* _self_, guint32 seed) {
	g_rand_set_seed((GRand *)(_self_), seed);
}
void _g_rand_set_seed_array(GRand* _self_, guint32* seed, guint seed_length) {
	g_rand_set_seed_array((GRand *)(_self_), (const guint32 *)(seed), seed_length);
}
void _g_rec_mutex_clear(GRecMutex* _self_) {
	g_rec_mutex_clear((GRecMutex *)(_self_));
}
void _g_rec_mutex_init(GRecMutex* _self_) {
	g_rec_mutex_init((GRecMutex *)(_self_));
}
void _g_rec_mutex_lock(GRecMutex* _self_) {
	g_rec_mutex_lock((GRecMutex *)(_self_));
}
gboolean _g_rec_mutex_trylock(GRecMutex* _self_) {
	return g_rec_mutex_trylock((GRecMutex *)(_self_));
}
void _g_rec_mutex_unlock(GRecMutex* _self_) {
	g_rec_mutex_unlock((GRecMutex *)(_self_));
}
GRegex * _g_regex_new(gchar* pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, void* _error_) {
	return g_regex_new((const gchar *)(pattern), compile_options, match_options, (GError **)(_error_));
}
gboolean _g_regex_check_replacement(gchar* replacement, gboolean* has_references, void* _error_) {
	return g_regex_check_replacement((const gchar *)(replacement), (gboolean *)(has_references), (GError **)(_error_));
}
gchar * _g_regex_escape_nul(gchar* string_, gint length) {
	return g_regex_escape_nul((const gchar *)(string_), length);
}
gboolean _g_regex_match_simple(gchar* pattern, gchar* string_, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return g_regex_match_simple((const gchar *)(pattern), (const gchar *)(string_), compile_options, match_options);
}
gchar ** _g_regex_split_simple(gchar* pattern, gchar* string_, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return g_regex_split_simple((const gchar *)(pattern), (const gchar *)(string_), compile_options, match_options);
}
gint _g_regex_get_capture_count(GRegex* _self_) {
	return g_regex_get_capture_count((const GRegex *)(_self_));
}
GRegexCompileFlags _g_regex_get_compile_flags(GRegex* _self_) {
	return g_regex_get_compile_flags((const GRegex *)(_self_));
}
gboolean _g_regex_get_has_cr_or_lf(GRegex* _self_) {
	return g_regex_get_has_cr_or_lf((const GRegex *)(_self_));
}
GRegexMatchFlags _g_regex_get_match_flags(GRegex* _self_) {
	return g_regex_get_match_flags((const GRegex *)(_self_));
}
gint _g_regex_get_max_backref(GRegex* _self_) {
	return g_regex_get_max_backref((const GRegex *)(_self_));
}
const gchar * _g_regex_get_pattern(GRegex* _self_) {
	return g_regex_get_pattern((const GRegex *)(_self_));
}
gint _g_regex_get_string_number(GRegex* _self_, gchar* name) {
	return g_regex_get_string_number((const GRegex *)(_self_), (const gchar *)(name));
}
gboolean _g_regex_match(GRegex* _self_, gchar* string_, GRegexMatchFlags match_options, void* match_info) {
	return g_regex_match((const GRegex *)(_self_), (const gchar *)(string_), match_options, (GMatchInfo **)(match_info));
}
gboolean _g_regex_match_all(GRegex* _self_, gchar* string_, GRegexMatchFlags match_options, void* match_info) {
	return g_regex_match_all((const GRegex *)(_self_), (const gchar *)(string_), match_options, (GMatchInfo **)(match_info));
}
GRegex * _g_regex_ref(GRegex* _self_) {
	return g_regex_ref((GRegex *)(_self_));
}
gchar ** _g_regex_split(GRegex* _self_, gchar* string_, GRegexMatchFlags match_options) {
	return g_regex_split((const GRegex *)(_self_), (const gchar *)(string_), match_options);
}
void _g_regex_unref(GRegex* _self_) {
	g_regex_unref((GRegex *)(_self_));
}
GScanner * _g_scanner_new(GScannerConfig* config_templ) {
	return g_scanner_new((const GScannerConfig *)(config_templ));
}
guint _g_scanner_cur_line(GScanner* _self_) {
	return g_scanner_cur_line((GScanner *)(_self_));
}
guint _g_scanner_cur_position(GScanner* _self_) {
	return g_scanner_cur_position((GScanner *)(_self_));
}
GTokenType _g_scanner_cur_token(GScanner* _self_) {
	return g_scanner_cur_token((GScanner *)(_self_));
}
GTokenValue _g_scanner_cur_value(GScanner* _self_) {
	return g_scanner_cur_value((GScanner *)(_self_));
}
void _g_scanner_destroy(GScanner* _self_) {
	g_scanner_destroy((GScanner *)(_self_));
}
gboolean _g_scanner_eof(GScanner* _self_) {
	return g_scanner_eof((GScanner *)(_self_));
}
GTokenType _g_scanner_get_next_token(GScanner* _self_) {
	return g_scanner_get_next_token((GScanner *)(_self_));
}
void _g_scanner_input_file(GScanner* _self_, gint input_fd) {
	g_scanner_input_file((GScanner *)(_self_), input_fd);
}
void _g_scanner_input_text(GScanner* _self_, gchar* text, guint text_len) {
	g_scanner_input_text((GScanner *)(_self_), (const gchar *)(text), text_len);
}
gpointer _g_scanner_lookup_symbol(GScanner* _self_, gchar* symbol) {
	return g_scanner_lookup_symbol((GScanner *)(_self_), (const gchar *)(symbol));
}
GTokenType _g_scanner_peek_next_token(GScanner* _self_) {
	return g_scanner_peek_next_token((GScanner *)(_self_));
}
void _g_scanner_scope_add_symbol(GScanner* _self_, guint scope_id, gchar* symbol, gpointer value) {
	g_scanner_scope_add_symbol((GScanner *)(_self_), scope_id, (const gchar *)(symbol), value);
}
void _g_scanner_scope_foreach_symbol(GScanner* _self_, guint scope_id, GHFunc func_, gpointer user_data) {
	g_scanner_scope_foreach_symbol((GScanner *)(_self_), scope_id, func_, user_data);
}
gpointer _g_scanner_scope_lookup_symbol(GScanner* _self_, guint scope_id, gchar* symbol) {
	return g_scanner_scope_lookup_symbol((GScanner *)(_self_), scope_id, (const gchar *)(symbol));
}
void _g_scanner_scope_remove_symbol(GScanner* _self_, guint scope_id, gchar* symbol) {
	g_scanner_scope_remove_symbol((GScanner *)(_self_), scope_id, (const gchar *)(symbol));
}
guint _g_scanner_set_scope(GScanner* _self_, guint scope_id) {
	return g_scanner_set_scope((GScanner *)(_self_), scope_id);
}
void _g_scanner_sync_file_offset(GScanner* _self_) {
	g_scanner_sync_file_offset((GScanner *)(_self_));
}
void _g_scanner_unexp_token(GScanner* _self_, GTokenType expected_token, gchar* identifier_spec, gchar* symbol_spec, gchar* symbol_name, gchar* message, gint is_error) {
	g_scanner_unexp_token((GScanner *)(_self_), expected_token, (const gchar *)(identifier_spec), (const gchar *)(symbol_spec), (const gchar *)(symbol_name), (const gchar *)(message), is_error);
}
GSequenceIter * _g_sequence_append(GSequence* _self_, gpointer data) {
	return g_sequence_append((GSequence *)(_self_), data);
}
void _g_sequence_foreach(GSequence* _self_, GFunc func_, gpointer user_data) {
	g_sequence_foreach((GSequence *)(_self_), func_, user_data);
}
void _g_sequence_free(GSequence* _self_) {
	g_sequence_free((GSequence *)(_self_));
}
GSequenceIter * _g_sequence_get_begin_iter(GSequence* _self_) {
	return g_sequence_get_begin_iter((GSequence *)(_self_));
}
GSequenceIter * _g_sequence_get_end_iter(GSequence* _self_) {
	return g_sequence_get_end_iter((GSequence *)(_self_));
}
GSequenceIter * _g_sequence_get_iter_at_pos(GSequence* _self_, gint pos) {
	return g_sequence_get_iter_at_pos((GSequence *)(_self_), pos);
}
gint _g_sequence_get_length(GSequence* _self_) {
	return g_sequence_get_length((GSequence *)(_self_));
}
GSequenceIter * _g_sequence_insert_sorted(GSequence* _self_, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data) {
	return g_sequence_insert_sorted((GSequence *)(_self_), data, cmp_func, cmp_data);
}
GSequenceIter * _g_sequence_insert_sorted_iter(GSequence* _self_, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data) {
	return g_sequence_insert_sorted_iter((GSequence *)(_self_), data, iter_cmp, cmp_data);
}
GSequenceIter * _g_sequence_lookup(GSequence* _self_, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data) {
	return g_sequence_lookup((GSequence *)(_self_), data, cmp_func, cmp_data);
}
GSequenceIter * _g_sequence_lookup_iter(GSequence* _self_, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data) {
	return g_sequence_lookup_iter((GSequence *)(_self_), data, iter_cmp, cmp_data);
}
GSequenceIter * _g_sequence_prepend(GSequence* _self_, gpointer data) {
	return g_sequence_prepend((GSequence *)(_self_), data);
}
GSequenceIter * _g_sequence_search(GSequence* _self_, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data) {
	return g_sequence_search((GSequence *)(_self_), data, cmp_func, cmp_data);
}
GSequenceIter * _g_sequence_search_iter(GSequence* _self_, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data) {
	return g_sequence_search_iter((GSequence *)(_self_), data, iter_cmp, cmp_data);
}
void _g_sequence_sort(GSequence* _self_, GCompareDataFunc cmp_func, gpointer cmp_data) {
	g_sequence_sort((GSequence *)(_self_), cmp_func, cmp_data);
}
void _g_sequence_sort_iter(GSequence* _self_, GSequenceIterCompareFunc cmp_func, gpointer cmp_data) {
	g_sequence_sort_iter((GSequence *)(_self_), cmp_func, cmp_data);
}
gint _g_sequence_iter_compare(GSequenceIter* _self_, GSequenceIter* b) {
	return g_sequence_iter_compare((GSequenceIter *)(_self_), (GSequenceIter *)(b));
}
gint _g_sequence_iter_get_position(GSequenceIter* _self_) {
	return g_sequence_iter_get_position((GSequenceIter *)(_self_));
}
GSequence * _g_sequence_iter_get_sequence(GSequenceIter* _self_) {
	return g_sequence_iter_get_sequence((GSequenceIter *)(_self_));
}
gboolean _g_sequence_iter_is_begin(GSequenceIter* _self_) {
	return g_sequence_iter_is_begin((GSequenceIter *)(_self_));
}
gboolean _g_sequence_iter_is_end(GSequenceIter* _self_) {
	return g_sequence_iter_is_end((GSequenceIter *)(_self_));
}
GSequenceIter * _g_sequence_iter_move(GSequenceIter* _self_, gint delta) {
	return g_sequence_iter_move((GSequenceIter *)(_self_), delta);
}
GSequenceIter * _g_sequence_iter_next(GSequenceIter* _self_) {
	return g_sequence_iter_next((GSequenceIter *)(_self_));
}
GSequenceIter * _g_sequence_iter_prev(GSequenceIter* _self_) {
	return g_sequence_iter_prev((GSequenceIter *)(_self_));
}
void _g_source_set_name_by_id(guint tag, char* name) {
	g_source_set_name_by_id(tag, (const char *)(name));
}
void _g_source_add_child_source(GSource* _self_, GSource* child_source) {
	g_source_add_child_source((GSource *)(_self_), (GSource *)(child_source));
}
void _g_source_add_poll(GSource* _self_, GPollFD* fd) {
	g_source_add_poll((GSource *)(_self_), (GPollFD *)(fd));
}
guint _g_source_attach(GSource* _self_, GMainContext* context) {
	return g_source_attach((GSource *)(_self_), (GMainContext *)(context));
}
void _g_source_destroy(GSource* _self_) {
	g_source_destroy((GSource *)(_self_));
}
gboolean _g_source_get_can_recurse(GSource* _self_) {
	return g_source_get_can_recurse((GSource *)(_self_));
}
GMainContext * _g_source_get_context(GSource* _self_) {
	return g_source_get_context((GSource *)(_self_));
}
guint _g_source_get_id(GSource* _self_) {
	return g_source_get_id((GSource *)(_self_));
}
const char * _g_source_get_name(GSource* _self_) {
	return g_source_get_name((GSource *)(_self_));
}
gint _g_source_get_priority(GSource* _self_) {
	return g_source_get_priority((GSource *)(_self_));
}
gint64 _g_source_get_time(GSource* _self_) {
	return g_source_get_time((GSource *)(_self_));
}
gboolean _g_source_is_destroyed(GSource* _self_) {
	return g_source_is_destroyed((GSource *)(_self_));
}
GSource * _g_source_ref(GSource* _self_) {
	return g_source_ref((GSource *)(_self_));
}
void _g_source_remove_child_source(GSource* _self_, GSource* child_source) {
	g_source_remove_child_source((GSource *)(_self_), (GSource *)(child_source));
}
void _g_source_remove_poll(GSource* _self_, GPollFD* fd) {
	g_source_remove_poll((GSource *)(_self_), (GPollFD *)(fd));
}
void _g_source_set_callback(GSource* _self_, GSourceFunc func_, gpointer data, GDestroyNotify notify) {
	g_source_set_callback((GSource *)(_self_), func_, data, notify);
}
void _g_source_set_callback_indirect(GSource* _self_, gpointer callback_data, GSourceCallbackFuncs* callback_funcs) {
	g_source_set_callback_indirect((GSource *)(_self_), callback_data, (GSourceCallbackFuncs *)(callback_funcs));
}
void _g_source_set_can_recurse(GSource* _self_, gboolean can_recurse) {
	g_source_set_can_recurse((GSource *)(_self_), can_recurse);
}
void _g_source_set_funcs(GSource* _self_, GSourceFuncs* funcs) {
	g_source_set_funcs((GSource *)(_self_), (GSourceFuncs *)(funcs));
}
void _g_source_set_name(GSource* _self_, char* name) {
	g_source_set_name((GSource *)(_self_), (const char *)(name));
}
void _g_source_set_priority(GSource* _self_, gint priority) {
	g_source_set_priority((GSource *)(_self_), priority);
}
void _g_source_unref(GSource* _self_) {
	g_source_unref((GSource *)(_self_));
}
GString * _g_string_append(GString* _self_, gchar* val) {
	return g_string_append((GString *)(_self_), (const gchar *)(val));
}
GString * _g_string_append_c(GString* _self_, gchar c) {
	return g_string_append_c((GString *)(_self_), c);
}
GString * _g_string_append_len(GString* _self_, gchar* val, gssize len_) {
	return g_string_append_len((GString *)(_self_), (const gchar *)(val), len_);
}
GString * _g_string_append_unichar(GString* _self_, gunichar wc) {
	return g_string_append_unichar((GString *)(_self_), wc);
}
GString * _g_string_append_uri_escaped(GString* _self_, gchar* unescaped, gchar* reserved_chars_allowed, gboolean allow_utf8) {
	return g_string_append_uri_escaped((GString *)(_self_), (const gchar *)(unescaped), (const gchar *)(reserved_chars_allowed), allow_utf8);
}
GString * _g_string_ascii_down(GString* _self_) {
	return g_string_ascii_down((GString *)(_self_));
}
GString * _g_string_ascii_up(GString* _self_) {
	return g_string_ascii_up((GString *)(_self_));
}
GString * _g_string_assign(GString* _self_, gchar* rval) {
	return g_string_assign((GString *)(_self_), (const gchar *)(rval));
}
gboolean _g_string_equal(GString* _self_, GString* v2) {
	return g_string_equal((const GString *)(_self_), (const GString *)(v2));
}
GString * _g_string_erase(GString* _self_, gssize pos, gssize len_) {
	return g_string_erase((GString *)(_self_), pos, len_);
}
gchar * _g_string_free(GString* _self_, gboolean free_segment) {
	return g_string_free((GString *)(_self_), free_segment);
}
GBytes * _g_string_free_to_bytes(GString* _self_) {
	return g_string_free_to_bytes((GString *)(_self_));
}
guint _g_string_hash(GString* _self_) {
	return g_string_hash((const GString *)(_self_));
}
GString * _g_string_insert(GString* _self_, gssize pos, gchar* val) {
	return g_string_insert((GString *)(_self_), pos, (const gchar *)(val));
}
GString * _g_string_insert_c(GString* _self_, gssize pos, gchar c) {
	return g_string_insert_c((GString *)(_self_), pos, c);
}
GString * _g_string_insert_len(GString* _self_, gssize pos, gchar* val, gssize len_) {
	return g_string_insert_len((GString *)(_self_), pos, (const gchar *)(val), len_);
}
GString * _g_string_insert_unichar(GString* _self_, gssize pos, gunichar wc) {
	return g_string_insert_unichar((GString *)(_self_), pos, wc);
}
GString * _g_string_overwrite(GString* _self_, gsize pos, gchar* val) {
	return g_string_overwrite((GString *)(_self_), pos, (const gchar *)(val));
}
GString * _g_string_overwrite_len(GString* _self_, gsize pos, gchar* val, gssize len_) {
	return g_string_overwrite_len((GString *)(_self_), pos, (const gchar *)(val), len_);
}
GString * _g_string_prepend(GString* _self_, gchar* val) {
	return g_string_prepend((GString *)(_self_), (const gchar *)(val));
}
GString * _g_string_prepend_c(GString* _self_, gchar c) {
	return g_string_prepend_c((GString *)(_self_), c);
}
GString * _g_string_prepend_len(GString* _self_, gchar* val, gssize len_) {
	return g_string_prepend_len((GString *)(_self_), (const gchar *)(val), len_);
}
GString * _g_string_prepend_unichar(GString* _self_, gunichar wc) {
	return g_string_prepend_unichar((GString *)(_self_), wc);
}
GString * _g_string_set_size(GString* _self_, gsize len_) {
	return g_string_set_size((GString *)(_self_), len_);
}
GString * _g_string_truncate(GString* _self_, gsize len_) {
	return g_string_truncate((GString *)(_self_), len_);
}
void _g_string_chunk_clear(GStringChunk* _self_) {
	g_string_chunk_clear((GStringChunk *)(_self_));
}
void _g_string_chunk_free(GStringChunk* _self_) {
	g_string_chunk_free((GStringChunk *)(_self_));
}
gchar * _g_string_chunk_insert(GStringChunk* _self_, gchar* string_) {
	return g_string_chunk_insert((GStringChunk *)(_self_), (const gchar *)(string_));
}
gchar * _g_string_chunk_insert_const(GStringChunk* _self_, gchar* string_) {
	return g_string_chunk_insert_const((GStringChunk *)(_self_), (const gchar *)(string_));
}
gchar * _g_string_chunk_insert_len(GStringChunk* _self_, gchar* string_, gssize len_) {
	return g_string_chunk_insert_len((GStringChunk *)(_self_), (const gchar *)(string_), len_);
}
void _g_test_suite_add(GTestSuite* _self_, GTestCase* test_case) {
	g_test_suite_add((GTestSuite *)(_self_), (GTestCase *)(test_case));
}
void _g_test_suite_add_suite(GTestSuite* _self_, GTestSuite* nestedsuite) {
	g_test_suite_add_suite((GTestSuite *)(_self_), (GTestSuite *)(nestedsuite));
}
GThread * _g_thread_new(gchar* name, GThreadFunc func_, gpointer data) {
	return g_thread_new((const gchar *)(name), func_, data);
}
GThread * _g_thread_try_new(gchar* name, GThreadFunc func_, gpointer data, void* _error_) {
	return g_thread_try_new((const gchar *)(name), func_, data, (GError **)(_error_));
}
gpointer _g_thread_join(GThread* _self_) {
	return g_thread_join((GThread *)(_self_));
}
GThread * _g_thread_ref(GThread* _self_) {
	return g_thread_ref((GThread *)(_self_));
}
void _g_thread_unref(GThread* _self_) {
	g_thread_unref((GThread *)(_self_));
}
GThreadPool * _g_thread_pool_new(GFunc func_, gpointer user_data, gint max_threads, gboolean exclusive, void* _error_) {
	return g_thread_pool_new(func_, user_data, max_threads, exclusive, (GError **)(_error_));
}
void _g_thread_pool_free(GThreadPool* _self_, gboolean immediate, gboolean wait_) {
	g_thread_pool_free((GThreadPool *)(_self_), immediate, wait_);
}
gint _g_thread_pool_get_max_threads(GThreadPool* _self_) {
	return g_thread_pool_get_max_threads((GThreadPool *)(_self_));
}
guint _g_thread_pool_get_num_threads(GThreadPool* _self_) {
	return g_thread_pool_get_num_threads((GThreadPool *)(_self_));
}
gboolean _g_thread_pool_push(GThreadPool* _self_, gpointer data, void* _error_) {
	return g_thread_pool_push((GThreadPool *)(_self_), data, (GError **)(_error_));
}
gboolean _g_thread_pool_set_max_threads(GThreadPool* _self_, gint max_threads, void* _error_) {
	return g_thread_pool_set_max_threads((GThreadPool *)(_self_), max_threads, (GError **)(_error_));
}
void _g_thread_pool_set_sort_function(GThreadPool* _self_, GCompareDataFunc func_, gpointer user_data) {
	g_thread_pool_set_sort_function((GThreadPool *)(_self_), func_, user_data);
}
guint _g_thread_pool_unprocessed(GThreadPool* _self_) {
	return g_thread_pool_unprocessed((GThreadPool *)(_self_));
}
gboolean _g_time_val_from_iso8601(gchar* iso_date, GTimeVal* time_) {
	return g_time_val_from_iso8601((const gchar *)(iso_date), (GTimeVal *)(time_));
}
void _g_time_val_add(GTimeVal* _self_, glong microseconds) {
	g_time_val_add((GTimeVal *)(_self_), microseconds);
}
gchar * _g_time_val_to_iso8601(GTimeVal* _self_) {
	return g_time_val_to_iso8601((GTimeVal *)(_self_));
}
GTimeZone * _g_time_zone_new(gchar* identifier) {
	return g_time_zone_new((const gchar *)(identifier));
}
gint _g_time_zone_adjust_time(GTimeZone* _self_, GTimeType type_, gint64* time_) {
	return g_time_zone_adjust_time((GTimeZone *)(_self_), type_, (gint64 *)(time_));
}
gint _g_time_zone_find_interval(GTimeZone* _self_, GTimeType type_, gint64 time_) {
	return g_time_zone_find_interval((GTimeZone *)(_self_), type_, time_);
}
const gchar * _g_time_zone_get_abbreviation(GTimeZone* _self_, gint interval) {
	return g_time_zone_get_abbreviation((GTimeZone *)(_self_), interval);
}
gint32 _g_time_zone_get_offset(GTimeZone* _self_, gint interval) {
	return g_time_zone_get_offset((GTimeZone *)(_self_), interval);
}
gboolean _g_time_zone_is_dst(GTimeZone* _self_, gint interval) {
	return g_time_zone_is_dst((GTimeZone *)(_self_), interval);
}
GTimeZone * _g_time_zone_ref(GTimeZone* _self_) {
	return g_time_zone_ref((GTimeZone *)(_self_));
}
void _g_time_zone_unref(GTimeZone* _self_) {
	g_time_zone_unref((GTimeZone *)(_self_));
}
void _g_timer_continue(GTimer* _self_) {
	g_timer_continue((GTimer *)(_self_));
}
void _g_timer_destroy(GTimer* _self_) {
	g_timer_destroy((GTimer *)(_self_));
}
gdouble _g_timer_elapsed(GTimer* _self_, gulong* microseconds) {
	return g_timer_elapsed((GTimer *)(_self_), (gulong *)(microseconds));
}
void _g_timer_reset(GTimer* _self_) {
	g_timer_reset((GTimer *)(_self_));
}
void _g_timer_start(GTimer* _self_) {
	g_timer_start((GTimer *)(_self_));
}
void _g_timer_stop(GTimer* _self_) {
	g_timer_stop((GTimer *)(_self_));
}
guint _g_trash_stack_height(void* stack_p) {
	return g_trash_stack_height((GTrashStack **)(stack_p));
}
gpointer _g_trash_stack_peek(void* stack_p) {
	return g_trash_stack_peek((GTrashStack **)(stack_p));
}
gpointer _g_trash_stack_pop(void* stack_p) {
	return g_trash_stack_pop((GTrashStack **)(stack_p));
}
void _g_trash_stack_push(void* stack_p, gpointer data_p) {
	g_trash_stack_push((GTrashStack **)(stack_p), data_p);
}
void _g_tree_destroy(GTree* _self_) {
	g_tree_destroy((GTree *)(_self_));
}
void _g_tree_foreach(GTree* _self_, GTraverseFunc func_, gpointer user_data) {
	g_tree_foreach((GTree *)(_self_), func_, user_data);
}
gint _g_tree_height(GTree* _self_) {
	return g_tree_height((GTree *)(_self_));
}
void _g_tree_insert(GTree* _self_, gpointer key, gpointer value) {
	g_tree_insert((GTree *)(_self_), key, value);
}
gpointer _g_tree_lookup(GTree* _self_, gconstpointer key) {
	return g_tree_lookup((GTree *)(_self_), key);
}
gboolean _g_tree_lookup_extended(GTree* _self_, gconstpointer lookup_key, gpointer* orig_key, gpointer* value) {
	return g_tree_lookup_extended((GTree *)(_self_), lookup_key, (gpointer *)(orig_key), (gpointer *)(value));
}
gint _g_tree_nnodes(GTree* _self_) {
	return g_tree_nnodes((GTree *)(_self_));
}
GTree * _g_tree_ref(GTree* _self_) {
	return g_tree_ref((GTree *)(_self_));
}
gboolean _g_tree_remove(GTree* _self_, gconstpointer key) {
	return g_tree_remove((GTree *)(_self_), key);
}
void _g_tree_replace(GTree* _self_, gpointer key, gpointer value) {
	g_tree_replace((GTree *)(_self_), key, value);
}
gpointer _g_tree_search(GTree* _self_, GCompareFunc search_func, gconstpointer user_data) {
	return g_tree_search((GTree *)(_self_), search_func, user_data);
}
gboolean _g_tree_steal(GTree* _self_, gconstpointer key) {
	return g_tree_steal((GTree *)(_self_), key);
}
void _g_tree_unref(GTree* _self_) {
	g_tree_unref((GTree *)(_self_));
}
GVariant * _g_variant_new_fixed_array(GVariantType* element_type, gconstpointer elements, gsize n_elements, gsize element_size) {
	return g_variant_new_fixed_array((const GVariantType *)(element_type), elements, n_elements, element_size);
}
GVariant * _g_variant_new_from_bytes(GVariantType* type_, GBytes* bytes, gboolean trusted) {
	return g_variant_new_from_bytes((const GVariantType *)(type_), (GBytes *)(bytes), trusted);
}
GVariant * _g_variant_new_maybe(GVariantType* child_type, GVariant* child) {
	return g_variant_new_maybe((const GVariantType *)(child_type), (GVariant *)(child));
}
GVariant * _g_variant_new_object_path(gchar* object_path) {
	return g_variant_new_object_path((const gchar *)(object_path));
}
GVariant * _g_variant_new_parsed_va(gchar* format, va_list* app) {
	return g_variant_new_parsed_va((const gchar *)(format), (va_list *)(app));
}
GVariant * _g_variant_new_signature(gchar* signature) {
	return g_variant_new_signature((const gchar *)(signature));
}
GVariant * _g_variant_new_string(gchar* string_) {
	return g_variant_new_string((const gchar *)(string_));
}
GVariant * _g_variant_new_va(gchar* format_string, void* endptr, va_list* app) {
	return g_variant_new_va((const gchar *)(format_string), (const gchar **)(endptr), (va_list *)(app));
}
gboolean _g_variant_is_object_path(gchar* string_) {
	return g_variant_is_object_path((const gchar *)(string_));
}
gboolean _g_variant_is_signature(gchar* string_) {
	return g_variant_is_signature((const gchar *)(string_));
}
GVariant * _g_variant_parse(GVariantType* type_, gchar* text, gchar* limit, void* endptr, void* _error_) {
	return g_variant_parse((const GVariantType *)(type_), (const gchar *)(text), (const gchar *)(limit), (const gchar **)(endptr), (GError **)(_error_));
}
GVariant * _g_variant_byteswap(GVariant* _self_) {
	return g_variant_byteswap((GVariant *)(_self_));
}
gboolean _g_variant_check_format_string(GVariant* _self_, gchar* format_string, gboolean copy_only) {
	return g_variant_check_format_string((GVariant *)(_self_), (const gchar *)(format_string), copy_only);
}
GVariantClass _g_variant_classify(GVariant* _self_) {
	return g_variant_classify((GVariant *)(_self_));
}
gint _g_variant_compare(GVariant* _self_, gconstpointer two) {
	return g_variant_compare((gconstpointer)(_self_), two);
}
gchar * _g_variant_dup_bytestring(GVariant* _self_, gsize* length) {
	return g_variant_dup_bytestring((GVariant *)(_self_), (gsize *)(length));
}
gchar ** _g_variant_dup_bytestring_array(GVariant* _self_, gsize* length) {
	return g_variant_dup_bytestring_array((GVariant *)(_self_), (gsize *)(length));
}
gchar ** _g_variant_dup_objv(GVariant* _self_, gsize* length) {
	return g_variant_dup_objv((GVariant *)(_self_), (gsize *)(length));
}
gchar * _g_variant_dup_string(GVariant* _self_, gsize* length) {
	return g_variant_dup_string((GVariant *)(_self_), (gsize *)(length));
}
gchar ** _g_variant_dup_strv(GVariant* _self_, gsize* length) {
	return g_variant_dup_strv((GVariant *)(_self_), (gsize *)(length));
}
gboolean _g_variant_equal(GVariant* _self_, gconstpointer two) {
	return g_variant_equal((gconstpointer)(_self_), two);
}
gboolean _g_variant_get_boolean(GVariant* _self_) {
	return g_variant_get_boolean((GVariant *)(_self_));
}
guchar _g_variant_get_byte(GVariant* _self_) {
	return g_variant_get_byte((GVariant *)(_self_));
}
const gchar * _g_variant_get_bytestring(GVariant* _self_) {
	return g_variant_get_bytestring((GVariant *)(_self_));
}
const gchar ** _g_variant_get_bytestring_array(GVariant* _self_, gsize* length) {
	return g_variant_get_bytestring_array((GVariant *)(_self_), (gsize *)(length));
}
GVariant * _g_variant_get_child_value(GVariant* _self_, gsize index_) {
	return g_variant_get_child_value((GVariant *)(_self_), index_);
}
gconstpointer _g_variant_get_data(GVariant* _self_) {
	return g_variant_get_data((GVariant *)(_self_));
}
GBytes * _g_variant_get_data_as_bytes(GVariant* _self_) {
	return g_variant_get_data_as_bytes((GVariant *)(_self_));
}
gdouble _g_variant_get_double(GVariant* _self_) {
	return g_variant_get_double((GVariant *)(_self_));
}
gconstpointer _g_variant_get_fixed_array(GVariant* _self_, gsize* n_elements, gsize element_size) {
	return g_variant_get_fixed_array((GVariant *)(_self_), (gsize *)(n_elements), element_size);
}
gint32 _g_variant_get_handle(GVariant* _self_) {
	return g_variant_get_handle((GVariant *)(_self_));
}
gint16 _g_variant_get_int16(GVariant* _self_) {
	return g_variant_get_int16((GVariant *)(_self_));
}
gint32 _g_variant_get_int32(GVariant* _self_) {
	return g_variant_get_int32((GVariant *)(_self_));
}
gint64 _g_variant_get_int64(GVariant* _self_) {
	return g_variant_get_int64((GVariant *)(_self_));
}
GVariant * _g_variant_get_maybe(GVariant* _self_) {
	return g_variant_get_maybe((GVariant *)(_self_));
}
GVariant * _g_variant_get_normal_form(GVariant* _self_) {
	return g_variant_get_normal_form((GVariant *)(_self_));
}
const gchar ** _g_variant_get_objv(GVariant* _self_, gsize* length) {
	return g_variant_get_objv((GVariant *)(_self_), (gsize *)(length));
}
gsize _g_variant_get_size(GVariant* _self_) {
	return g_variant_get_size((GVariant *)(_self_));
}
const gchar * _g_variant_get_string(GVariant* _self_, gsize* length) {
	return g_variant_get_string((GVariant *)(_self_), (gsize *)(length));
}
const gchar ** _g_variant_get_strv(GVariant* _self_, gsize* length) {
	return g_variant_get_strv((GVariant *)(_self_), (gsize *)(length));
}
const GVariantType * _g_variant_get_type(GVariant* _self_) {
	return g_variant_get_type((GVariant *)(_self_));
}
const gchar * _g_variant_get_type_string(GVariant* _self_) {
	return g_variant_get_type_string((GVariant *)(_self_));
}
guint16 _g_variant_get_uint16(GVariant* _self_) {
	return g_variant_get_uint16((GVariant *)(_self_));
}
guint32 _g_variant_get_uint32(GVariant* _self_) {
	return g_variant_get_uint32((GVariant *)(_self_));
}
guint64 _g_variant_get_uint64(GVariant* _self_) {
	return g_variant_get_uint64((GVariant *)(_self_));
}
void _g_variant_get_va(GVariant* _self_, gchar* format_string, void* endptr, va_list* app) {
	g_variant_get_va((GVariant *)(_self_), (const gchar *)(format_string), (const gchar **)(endptr), (va_list *)(app));
}
GVariant * _g_variant_get_variant(GVariant* _self_) {
	return g_variant_get_variant((GVariant *)(_self_));
}
guint _g_variant_hash(GVariant* _self_) {
	return g_variant_hash((gconstpointer)(_self_));
}
gboolean _g_variant_is_container(GVariant* _self_) {
	return g_variant_is_container((GVariant *)(_self_));
}
gboolean _g_variant_is_floating(GVariant* _self_) {
	return g_variant_is_floating((GVariant *)(_self_));
}
gboolean _g_variant_is_normal_form(GVariant* _self_) {
	return g_variant_is_normal_form((GVariant *)(_self_));
}
gboolean _g_variant_is_of_type(GVariant* _self_, GVariantType* type_) {
	return g_variant_is_of_type((GVariant *)(_self_), (const GVariantType *)(type_));
}
GVariantIter * _g_variant_iter_new(GVariant* _self_) {
	return g_variant_iter_new((GVariant *)(_self_));
}
GVariant * _g_variant_lookup_value(GVariant* _self_, gchar* key, GVariantType* expected_type) {
	return g_variant_lookup_value((GVariant *)(_self_), (const gchar *)(key), (const GVariantType *)(expected_type));
}
gsize _g_variant_n_children(GVariant* _self_) {
	return g_variant_n_children((GVariant *)(_self_));
}
gchar * _g_variant_print(GVariant* _self_, gboolean type_annotate) {
	return g_variant_print((GVariant *)(_self_), type_annotate);
}
GString * _g_variant_print_string(GVariant* _self_, GString* string_, gboolean type_annotate) {
	return g_variant_print_string((GVariant *)(_self_), (GString *)(string_), type_annotate);
}
GVariant * _g_variant_ref(GVariant* _self_) {
	return g_variant_ref((GVariant *)(_self_));
}
GVariant * _g_variant_ref_sink(GVariant* _self_) {
	return g_variant_ref_sink((GVariant *)(_self_));
}
void _g_variant_store(GVariant* _self_, gpointer data) {
	g_variant_store((GVariant *)(_self_), data);
}
GVariant * _g_variant_take_ref(GVariant* _self_) {
	return g_variant_take_ref((GVariant *)(_self_));
}
void _g_variant_unref(GVariant* _self_) {
	g_variant_unref((GVariant *)(_self_));
}
GVariantBuilder * _g_variant_builder_new(GVariantType* type_) {
	return g_variant_builder_new((const GVariantType *)(type_));
}
void _g_variant_builder_add_value(GVariantBuilder* _self_, GVariant* value) {
	g_variant_builder_add_value((GVariantBuilder *)(_self_), (GVariant *)(value));
}
void _g_variant_builder_clear(GVariantBuilder* _self_) {
	g_variant_builder_clear((GVariantBuilder *)(_self_));
}
void _g_variant_builder_close(GVariantBuilder* _self_) {
	g_variant_builder_close((GVariantBuilder *)(_self_));
}
GVariant * _g_variant_builder_end(GVariantBuilder* _self_) {
	return g_variant_builder_end((GVariantBuilder *)(_self_));
}
void _g_variant_builder_init(GVariantBuilder* _self_, GVariantType* type_) {
	g_variant_builder_init((GVariantBuilder *)(_self_), (const GVariantType *)(type_));
}
void _g_variant_builder_open(GVariantBuilder* _self_, GVariantType* type_) {
	g_variant_builder_open((GVariantBuilder *)(_self_), (const GVariantType *)(type_));
}
GVariantBuilder * _g_variant_builder_ref(GVariantBuilder* _self_) {
	return g_variant_builder_ref((GVariantBuilder *)(_self_));
}
void _g_variant_builder_unref(GVariantBuilder* _self_) {
	g_variant_builder_unref((GVariantBuilder *)(_self_));
}
GVariantIter * _g_variant_iter_copy(GVariantIter* _self_) {
	return g_variant_iter_copy((GVariantIter *)(_self_));
}
void _g_variant_iter_free(GVariantIter* _self_) {
	g_variant_iter_free((GVariantIter *)(_self_));
}
gsize _g_variant_iter_init(GVariantIter* _self_, GVariant* value) {
	return g_variant_iter_init((GVariantIter *)(_self_), (GVariant *)(value));
}
gsize _g_variant_iter_n_children(GVariantIter* _self_) {
	return g_variant_iter_n_children((GVariantIter *)(_self_));
}
GVariant * _g_variant_iter_next_value(GVariantIter* _self_) {
	return g_variant_iter_next_value((GVariantIter *)(_self_));
}
GVariantType * _g_variant_type_new(gchar* type_string) {
	return g_variant_type_new((const gchar *)(type_string));
}
GVariantType * _g_variant_type_new_array(GVariantType* element) {
	return g_variant_type_new_array((const GVariantType *)(element));
}
GVariantType * _g_variant_type_new_dict_entry(GVariantType* key, GVariantType* value) {
	return g_variant_type_new_dict_entry((const GVariantType *)(key), (const GVariantType *)(value));
}
GVariantType * _g_variant_type_new_maybe(GVariantType* element) {
	return g_variant_type_new_maybe((const GVariantType *)(element));
}
const GVariantType * _g_variant_type_checked_(gchar* arg_15) {
	return g_variant_type_checked_((const gchar *)(arg_15));
}
gboolean _g_variant_type_string_is_valid(gchar* type_string) {
	return g_variant_type_string_is_valid((const gchar *)(type_string));
}
gboolean _g_variant_type_string_scan(gchar* string_, gchar* limit, void* endptr) {
	return g_variant_type_string_scan((const gchar *)(string_), (const gchar *)(limit), (const gchar **)(endptr));
}
GVariantType * _g_variant_type_copy(GVariantType* _self_) {
	return g_variant_type_copy((const GVariantType *)(_self_));
}
gchar * _g_variant_type_dup_string(GVariantType* _self_) {
	return g_variant_type_dup_string((const GVariantType *)(_self_));
}
const GVariantType * _g_variant_type_element(GVariantType* _self_) {
	return g_variant_type_element((const GVariantType *)(_self_));
}
gboolean _g_variant_type_equal(GVariantType* _self_, gconstpointer type2) {
	return g_variant_type_equal((gconstpointer)(_self_), type2);
}
const GVariantType * _g_variant_type_first(GVariantType* _self_) {
	return g_variant_type_first((const GVariantType *)(_self_));
}
void _g_variant_type_free(GVariantType* _self_) {
	g_variant_type_free((GVariantType *)(_self_));
}
gsize _g_variant_type_get_string_length(GVariantType* _self_) {
	return g_variant_type_get_string_length((const GVariantType *)(_self_));
}
guint _g_variant_type_hash(GVariantType* _self_) {
	return g_variant_type_hash((gconstpointer)(_self_));
}
gboolean _g_variant_type_is_array(GVariantType* _self_) {
	return g_variant_type_is_array((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_basic(GVariantType* _self_) {
	return g_variant_type_is_basic((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_container(GVariantType* _self_) {
	return g_variant_type_is_container((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_definite(GVariantType* _self_) {
	return g_variant_type_is_definite((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_dict_entry(GVariantType* _self_) {
	return g_variant_type_is_dict_entry((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_maybe(GVariantType* _self_) {
	return g_variant_type_is_maybe((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_subtype_of(GVariantType* _self_, GVariantType* supertype) {
	return g_variant_type_is_subtype_of((const GVariantType *)(_self_), (const GVariantType *)(supertype));
}
gboolean _g_variant_type_is_tuple(GVariantType* _self_) {
	return g_variant_type_is_tuple((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_variant(GVariantType* _self_) {
	return g_variant_type_is_variant((const GVariantType *)(_self_));
}
const GVariantType * _g_variant_type_key(GVariantType* _self_) {
	return g_variant_type_key((const GVariantType *)(_self_));
}
gsize _g_variant_type_n_items(GVariantType* _self_) {
	return g_variant_type_n_items((const GVariantType *)(_self_));
}
const GVariantType * _g_variant_type_next(GVariantType* _self_) {
	return g_variant_type_next((const GVariantType *)(_self_));
}
const gchar * _g_variant_type_peek_string(GVariantType* _self_) {
	return g_variant_type_peek_string((const GVariantType *)(_self_));
}
const GVariantType * _g_variant_type_value(GVariantType* _self_) {
	return g_variant_type_value((const GVariantType *)(_self_));
}
int _g_access(gchar* filename, int mode) {
	return g_access((const gchar *)(filename), mode);
}
gchar * _g_ascii_formatd(gchar* buffer, gint buf_len, gchar* format, gdouble d) {
	return g_ascii_formatd((gchar *)(buffer), buf_len, (const gchar *)(format), d);
}
gint _g_ascii_strcasecmp(gchar* s1, gchar* s2) {
	return g_ascii_strcasecmp((const gchar *)(s1), (const gchar *)(s2));
}
gchar * _g_ascii_strdown(gchar* str, gssize len_) {
	return g_ascii_strdown((const gchar *)(str), len_);
}
gint _g_ascii_strncasecmp(gchar* s1, gchar* s2, gsize n) {
	return g_ascii_strncasecmp((const gchar *)(s1), (const gchar *)(s2), n);
}
gdouble _g_ascii_strtod(gchar* nptr, void* endptr) {
	return g_ascii_strtod((const gchar *)(nptr), (gchar **)(endptr));
}
gint64 _g_ascii_strtoll(gchar* nptr, void* endptr, guint base) {
	return g_ascii_strtoll((const gchar *)(nptr), (gchar **)(endptr), base);
}
guint64 _g_ascii_strtoull(gchar* nptr, void* endptr, guint base) {
	return g_ascii_strtoull((const gchar *)(nptr), (gchar **)(endptr), base);
}
gchar * _g_ascii_strup(gchar* str, gssize len_) {
	return g_ascii_strup((const gchar *)(str), len_);
}
void _g_assertion_message(char* domain, char* file, int line, char* func_, char* message) {
	g_assertion_message((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(message));
}
void _g_assertion_message_cmpnum(char* domain, char* file, int line, char* func_, char* expr, double arg1, char* cmp, double arg2, char numtype) {
	g_assertion_message_cmpnum((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(expr), (long double)(arg1), (const char *)(cmp), (long double)(arg2), numtype);
}
void _g_assertion_message_cmpstr(char* domain, char* file, int line, char* func_, char* expr, char* arg1, char* cmp, char* arg2) {
	g_assertion_message_cmpstr((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(expr), (const char *)(arg1), (const char *)(cmp), (const char *)(arg2));
}
void _g_assertion_message_error(char* domain, char* file, int line, char* func_, char* expr, GError* error_, GQuark error_domain, int error_code) {
	g_assertion_message_error((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(expr), (const GError *)(error_), error_domain, error_code);
}
void _g_assertion_message_expr(char* domain, char* file, int line, char* func_, char* expr) {
	g_assertion_message_expr((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(expr));
}
guchar * _g_base64_decode(gchar* text, gsize* out_len) {
	return g_base64_decode((const gchar *)(text), (gsize *)(out_len));
}
int _g_chdir(gchar* path) {
	return g_chdir((const gchar *)(path));
}
void _g_clear_error(void* _error_) {
	g_clear_error((GError **)(_error_));
}
gchar * _g_compute_checksum_for_data(GChecksumType checksum_type, guchar* data, gsize length) {
	return g_compute_checksum_for_data(checksum_type, (const guchar *)(data), length);
}
gchar * _g_compute_checksum_for_string(GChecksumType checksum_type, gchar* str, gssize length) {
	return g_compute_checksum_for_string(checksum_type, (const gchar *)(str), length);
}
gchar * _g_convert(gchar* str, gssize len_, gchar* to_codeset, gchar* from_codeset, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_convert((const gchar *)(str), len_, (const gchar *)(to_codeset), (const gchar *)(from_codeset), (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
gchar * _g_convert_with_fallback(gchar* str, gssize len_, gchar* to_codeset, gchar* from_codeset, gchar* fallback, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_convert_with_fallback((const gchar *)(str), len_, (const gchar *)(to_codeset), (const gchar *)(from_codeset), (const gchar *)(fallback), (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
gchar * _g_convert_with_iconv(gchar* str, gssize len_, GIConv converter, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_convert_with_iconv((const gchar *)(str), len_, converter, (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
void _g_datalist_clear(void* datalist) {
	g_datalist_clear((GData **)(datalist));
}
void _g_datalist_foreach(void* datalist, GDataForeachFunc func_, gpointer user_data) {
	g_datalist_foreach((GData **)(datalist), func_, user_data);
}
gpointer _g_datalist_get_data(void* datalist, gchar* key) {
	return g_datalist_get_data((GData **)(datalist), (const gchar *)(key));
}
guint _g_datalist_get_flags(void* datalist) {
	return g_datalist_get_flags((GData **)(datalist));
}
gpointer _g_datalist_id_dup_data(void* datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data) {
	return g_datalist_id_dup_data((GData **)(datalist), key_id, dup_func, user_data);
}
gpointer _g_datalist_id_get_data(void* datalist, GQuark key_id) {
	return g_datalist_id_get_data((GData **)(datalist), key_id);
}
gpointer _g_datalist_id_remove_no_notify(void* datalist, GQuark key_id) {
	return g_datalist_id_remove_no_notify((GData **)(datalist), key_id);
}
gboolean _g_datalist_id_replace_data(void* datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify* old_destroy) {
	return g_datalist_id_replace_data((GData **)(datalist), key_id, oldval, newval, destroy, (GDestroyNotify *)(old_destroy));
}
void _g_datalist_id_set_data_full(void* datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func) {
	g_datalist_id_set_data_full((GData **)(datalist), key_id, data, destroy_func);
}
void _g_datalist_init(void* datalist) {
	g_datalist_init((GData **)(datalist));
}
void _g_datalist_set_flags(void* datalist, guint flags) {
	g_datalist_set_flags((GData **)(datalist), flags);
}
void _g_datalist_unset_flags(void* datalist, guint flags) {
	g_datalist_unset_flags((GData **)(datalist), flags);
}
const gchar * _g_dcgettext(gchar* domain, gchar* msgid, gint category) {
	return g_dcgettext((const gchar *)(domain), (const gchar *)(msgid), category);
}
const gchar * _g_dgettext(gchar* domain, gchar* msgid) {
	return g_dgettext((const gchar *)(domain), (const gchar *)(msgid));
}
const gchar * _g_dngettext(gchar* domain, gchar* msgid, gchar* msgid_plural, gulong n) {
	return g_dngettext((const gchar *)(domain), (const gchar *)(msgid), (const gchar *)(msgid_plural), n);
}
const gchar * _g_dpgettext(gchar* domain, gchar* msgctxtid, gsize msgidoffset) {
	return g_dpgettext((const gchar *)(domain), (const gchar *)(msgctxtid), msgidoffset);
}
const gchar * _g_dpgettext2(gchar* domain, gchar* context, gchar* msgid) {
	return g_dpgettext2((const gchar *)(domain), (const gchar *)(context), (const gchar *)(msgid));
}
gint _g_file_open_tmp(gchar* tmpl, void* name_used, void* _error_) {
	return g_file_open_tmp((const gchar *)(tmpl), (gchar **)(name_used), (GError **)(_error_));
}
gchar * _g_file_read_link(gchar* filename, void* _error_) {
	return g_file_read_link((const gchar *)(filename), (GError **)(_error_));
}
gboolean _g_file_test(gchar* filename, GFileTest test) {
	return g_file_test((const gchar *)(filename), test);
}
gchar * _g_filename_display_basename(gchar* filename) {
	return g_filename_display_basename((const gchar *)(filename));
}
gchar * _g_filename_display_name(gchar* filename) {
	return g_filename_display_name((const gchar *)(filename));
}
gchar * _g_filename_from_uri(gchar* uri, void* hostname, void* _error_) {
	return g_filename_from_uri((const gchar *)(uri), (gchar **)(hostname), (GError **)(_error_));
}
gchar * _g_filename_from_utf8(gchar* utf8string, gssize len_, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_filename_from_utf8((const gchar *)(utf8string), len_, (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
gchar * _g_filename_to_uri(gchar* filename, gchar* hostname, void* _error_) {
	return g_filename_to_uri((const gchar *)(filename), (const gchar *)(hostname), (GError **)(_error_));
}
gchar * _g_filename_to_utf8(gchar* opsysstring, gssize len_, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_filename_to_utf8((const gchar *)(opsysstring), len_, (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
gchar * _g_find_program_in_path(gchar* program) {
	return g_find_program_in_path((const gchar *)(program));
}
gboolean _g_get_charset(void* charset) {
	return g_get_charset((const char **)(charset));
}
gboolean _g_get_filename_charsets(void* charsets) {
	return g_get_filename_charsets((const gchar ***)(charsets));
}
gchar ** _g_get_locale_variants(gchar* locale) {
	return g_get_locale_variants((const gchar *)(locale));
}
const gchar * _g_getenv(gchar* variable) {
	return g_getenv((const gchar *)(variable));
}
gboolean _g_hostname_is_ascii_encoded(gchar* hostname) {
	return g_hostname_is_ascii_encoded((const gchar *)(hostname));
}
gboolean _g_hostname_is_ip_address(gchar* hostname) {
	return g_hostname_is_ip_address((const gchar *)(hostname));
}
gboolean _g_hostname_is_non_ascii(gchar* hostname) {
	return g_hostname_is_non_ascii((const gchar *)(hostname));
}
gchar * _g_hostname_to_ascii(gchar* hostname) {
	return g_hostname_to_ascii((const gchar *)(hostname));
}
gchar * _g_hostname_to_unicode(gchar* hostname) {
	return g_hostname_to_unicode((const gchar *)(hostname));
}
const gchar * _g_intern_static_string(gchar* string_) {
	return g_intern_static_string((const gchar *)(string_));
}
const gchar * _g_intern_string(gchar* string_) {
	return g_intern_string((const gchar *)(string_));
}
gchar * _g_locale_from_utf8(gchar* utf8string, gssize len_, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_locale_from_utf8((const gchar *)(utf8string), len_, (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
gchar * _g_locale_to_utf8(gchar* opsysstring, gssize len_, gsize* bytes_read, gsize* bytes_written, void* _error_) {
	return g_locale_to_utf8((const gchar *)(opsysstring), len_, (gsize *)(bytes_read), (gsize *)(bytes_written), (GError **)(_error_));
}
void _g_log_default_handler(gchar* log_domain, GLogLevelFlags log_level, gchar* message, gpointer unused_data) {
	g_log_default_handler((const gchar *)(log_domain), log_level, (const gchar *)(message), unused_data);
}
void _g_log_remove_handler(gchar* log_domain, guint handler_id) {
	g_log_remove_handler((const gchar *)(log_domain), handler_id);
}
GLogLevelFlags _g_log_set_fatal_mask(gchar* log_domain, GLogLevelFlags fatal_mask) {
	return g_log_set_fatal_mask((const gchar *)(log_domain), fatal_mask);
}
guint _g_log_set_handler(gchar* log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data) {
	return g_log_set_handler((const gchar *)(log_domain), log_levels, log_func, user_data);
}
gchar * _g_markup_escape_text(gchar* text, gssize length) {
	return g_markup_escape_text((const gchar *)(text), length);
}
gint _g_mkdir_with_parents(gchar* pathname, gint mode) {
	return g_mkdir_with_parents((const gchar *)(pathname), mode);
}
void _g_on_error_query(gchar* prg_name) {
	g_on_error_query((const gchar *)(prg_name));
}
void _g_on_error_stack_trace(gchar* prg_name) {
	g_on_error_stack_trace((const gchar *)(prg_name));
}
gchar * _g_path_get_basename(gchar* file_name) {
	return g_path_get_basename((const gchar *)(file_name));
}
gchar * _g_path_get_dirname(gchar* file_name) {
	return g_path_get_dirname((const gchar *)(file_name));
}
gboolean _g_path_is_absolute(gchar* file_name) {
	return g_path_is_absolute((const gchar *)(file_name));
}
const gchar * _g_path_skip_root(gchar* file_name) {
	return g_path_skip_root((const gchar *)(file_name));
}
gboolean _g_pattern_match(GPatternSpec* pspec, guint string_length, gchar* string_, gchar* string_reversed) {
	return g_pattern_match((GPatternSpec *)(pspec), string_length, (const gchar *)(string_), (const gchar *)(string_reversed));
}
gboolean _g_pattern_match_simple(gchar* pattern, gchar* string_) {
	return g_pattern_match_simple((const gchar *)(pattern), (const gchar *)(string_));
}
gboolean _g_pattern_match_string(GPatternSpec* pspec, gchar* string_) {
	return g_pattern_match_string((GPatternSpec *)(pspec), (const gchar *)(string_));
}
void _g_propagate_error(void* dest, GError* src) {
	g_propagate_error((GError **)(dest), (GError *)(src));
}
GQuark _g_quark_from_static_string(gchar* string_) {
	return g_quark_from_static_string((const gchar *)(string_));
}
GQuark _g_quark_from_string(gchar* string_) {
	return g_quark_from_string((const gchar *)(string_));
}
GQuark _g_quark_try_string(gchar* string_) {
	return g_quark_try_string((const gchar *)(string_));
}
void _g_return_if_fail_warning(char* log_domain, char* pretty_function, char* expression) {
	g_return_if_fail_warning((const char *)(log_domain), (const char *)(pretty_function), (const char *)(expression));
}
int _g_rmdir(gchar* filename) {
	return g_rmdir((const gchar *)(filename));
}
void _g_set_application_name(gchar* application_name) {
	g_set_application_name((const gchar *)(application_name));
}
void _g_set_error_literal(void* err, GQuark domain, gint code, gchar* message) {
	g_set_error_literal((GError **)(err), domain, code, (const gchar *)(message));
}
void _g_set_prgname(gchar* prgname) {
	g_set_prgname((const gchar *)(prgname));
}
gboolean _g_setenv(gchar* variable, gchar* value, gboolean overwrite) {
	return g_setenv((const gchar *)(variable), (const gchar *)(value), overwrite);
}
gchar * _g_shell_quote(gchar* unquoted_string) {
	return g_shell_quote((const gchar *)(unquoted_string));
}
gchar * _g_shell_unquote(gchar* quoted_string, void* _error_) {
	return g_shell_unquote((const gchar *)(quoted_string), (GError **)(_error_));
}
gboolean _g_spawn_check_exit_status(gint exit_status, void* _error_) {
	return g_spawn_check_exit_status(exit_status, (GError **)(_error_));
}
gboolean _g_spawn_command_line_async(gchar* command_line, void* _error_) {
	return g_spawn_command_line_async((const gchar *)(command_line), (GError **)(_error_));
}
gchar * _g_stpcpy(gchar* dest, char* src) {
	return g_stpcpy((gchar *)(dest), (const char *)(src));
}
gboolean _g_str_has_prefix(gchar* str, gchar* prefix) {
	return g_str_has_prefix((const gchar *)(str), (const gchar *)(prefix));
}
gboolean _g_str_has_suffix(gchar* str, gchar* suffix) {
	return g_str_has_suffix((const gchar *)(str), (const gchar *)(suffix));
}
gchar * _g_strcanon(gchar* string_, gchar* valid_chars, gchar substitutor) {
	return g_strcanon((gchar *)(string_), (const gchar *)(valid_chars), substitutor);
}
int _g_strcmp0(char* str1, char* str2) {
	return g_strcmp0((const char *)(str1), (const char *)(str2));
}
gchar * _g_strcompress(gchar* source) {
	return g_strcompress((const gchar *)(source));
}
gchar * _g_strdelimit(gchar* string_, gchar* delimiters, gchar new_delimiter) {
	return g_strdelimit((gchar *)(string_), (const gchar *)(delimiters), new_delimiter);
}
gchar * _g_strdup(gchar* str) {
	return g_strdup((const gchar *)(str));
}
gchar ** _g_strdupv(void* str_array) {
	return g_strdupv((gchar **)(str_array));
}
gchar * _g_strescape(gchar* source, gchar* exceptions) {
	return g_strescape((const gchar *)(source), (const gchar *)(exceptions));
}
void _g_strfreev(void* str_array) {
	g_strfreev((gchar **)(str_array));
}
GString * _g_string_new(gchar* init) {
	return g_string_new((const gchar *)(init));
}
GString * _g_string_new_len(gchar* init, gssize len_) {
	return g_string_new_len((const gchar *)(init), len_);
}
const gchar * _g_strip_context(gchar* msgid, gchar* msgval) {
	return g_strip_context((const gchar *)(msgid), (const gchar *)(msgval));
}
gchar * _g_strjoinv(gchar* separator, void* str_array) {
	return g_strjoinv((const gchar *)(separator), (gchar **)(str_array));
}
gsize _g_strlcat(gchar* dest, gchar* src, gsize dest_size) {
	return g_strlcat((gchar *)(dest), (const gchar *)(src), dest_size);
}
gsize _g_strlcpy(gchar* dest, gchar* src, gsize dest_size) {
	return g_strlcpy((gchar *)(dest), (const gchar *)(src), dest_size);
}
gchar * _g_strndup(gchar* str, gsize n) {
	return g_strndup((const gchar *)(str), n);
}
gchar * _g_strrstr(gchar* haystack, gchar* needle) {
	return g_strrstr((const gchar *)(haystack), (const gchar *)(needle));
}
gchar * _g_strrstr_len(gchar* haystack, gssize haystack_len, gchar* needle) {
	return g_strrstr_len((const gchar *)(haystack), haystack_len, (const gchar *)(needle));
}
gchar ** _g_strsplit(gchar* string_, gchar* delimiter, gint max_tokens) {
	return g_strsplit((const gchar *)(string_), (const gchar *)(delimiter), max_tokens);
}
gchar ** _g_strsplit_set(gchar* string_, gchar* delimiters, gint max_tokens) {
	return g_strsplit_set((const gchar *)(string_), (const gchar *)(delimiters), max_tokens);
}
gchar * _g_strstr_len(gchar* haystack, gssize haystack_len, gchar* needle) {
	return g_strstr_len((const gchar *)(haystack), haystack_len, (const gchar *)(needle));
}
gdouble _g_strtod(gchar* nptr, void* endptr) {
	return g_strtod((const gchar *)(nptr), (gchar **)(endptr));
}
guint _g_strv_length(void* str_array) {
	return g_strv_length((gchar **)(str_array));
}
void _g_test_add_data_func(char* testpath, gconstpointer test_data, GTestDataFunc test_func) {
	g_test_add_data_func((const char *)(testpath), test_data, test_func);
}
void _g_test_add_data_func_full(char* testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func) {
	g_test_add_data_func_full((const char *)(testpath), test_data, test_func, data_free_func);
}
void _g_test_add_func(char* testpath, GTestFunc test_func) {
	g_test_add_func((const char *)(testpath), test_func);
}
void _g_test_add_vtable(char* testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	g_test_add_vtable((const char *)(testpath), data_size, test_data, data_setup, data_test, data_teardown);
}
void _g_test_assert_expected_messages_internal(char* domain, char* file, int line, char* func_) {
	g_test_assert_expected_messages_internal((const char *)(domain), (const char *)(file), line, (const char *)(func_));
}
void _g_test_bug(char* bug_uri_snippet) {
	g_test_bug((const char *)(bug_uri_snippet));
}
void _g_test_bug_base(char* uri_pattern) {
	g_test_bug_base((const char *)(uri_pattern));
}
GTestCase * _g_test_create_case(char* test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	return g_test_create_case((const char *)(test_name), data_size, test_data, data_setup, data_test, data_teardown);
}
GTestSuite * _g_test_create_suite(char* suite_name) {
	return g_test_create_suite((const char *)(suite_name));
}
void _g_test_expect_message(gchar* log_domain, GLogLevelFlags log_level, gchar* pattern) {
	g_test_expect_message((const gchar *)(log_domain), log_level, (const gchar *)(pattern));
}
void _g_test_trap_assertions(char* domain, char* file, int line, char* func_, guint64 assertion_flags, char* pattern) {
	g_test_trap_assertions((const char *)(domain), (const char *)(file), line, (const char *)(func_), assertion_flags, (const char *)(pattern));
}
gunichar2 * _g_ucs4_to_utf16(gunichar* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_ucs4_to_utf16((const gunichar *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
gchar * _g_ucs4_to_utf8(gunichar* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_ucs4_to_utf8((const gunichar *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
gboolean _g_unix_open_pipe(gint* fds, gint flags, void* _error_) {
	return g_unix_open_pipe((gint *)(fds), flags, (GError **)(_error_));
}
gboolean _g_unix_set_fd_nonblocking(gint fd, gboolean nonblock, void* _error_) {
	return g_unix_set_fd_nonblocking(fd, nonblock, (GError **)(_error_));
}
int _g_unlink(gchar* filename) {
	return g_unlink((const gchar *)(filename));
}
void _g_unsetenv(gchar* variable) {
	g_unsetenv((const gchar *)(variable));
}
char * _g_uri_escape_string(char* unescaped, char* reserved_chars_allowed, gboolean allow_utf8) {
	return g_uri_escape_string((const char *)(unescaped), (const char *)(reserved_chars_allowed), allow_utf8);
}
gchar ** _g_uri_list_extract_uris(gchar* uri_list) {
	return g_uri_list_extract_uris((const gchar *)(uri_list));
}
char * _g_uri_parse_scheme(char* uri) {
	return g_uri_parse_scheme((const char *)(uri));
}
char * _g_uri_unescape_segment(char* escaped_string, char* escaped_string_end, char* illegal_characters) {
	return g_uri_unescape_segment((const char *)(escaped_string), (const char *)(escaped_string_end), (const char *)(illegal_characters));
}
char * _g_uri_unescape_string(char* escaped_string, char* illegal_characters) {
	return g_uri_unescape_string((const char *)(escaped_string), (const char *)(illegal_characters));
}
gunichar * _g_utf16_to_ucs4(gunichar2* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_utf16_to_ucs4((const gunichar2 *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
gchar * _g_utf16_to_utf8(gunichar2* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_utf16_to_utf8((const gunichar2 *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
gchar * _g_utf8_casefold(gchar* str, gssize len_) {
	return g_utf8_casefold((const gchar *)(str), len_);
}
gint _g_utf8_collate(gchar* str1, gchar* str2) {
	return g_utf8_collate((const gchar *)(str1), (const gchar *)(str2));
}
gchar * _g_utf8_collate_key(gchar* str, gssize len_) {
	return g_utf8_collate_key((const gchar *)(str), len_);
}
gchar * _g_utf8_collate_key_for_filename(gchar* str, gssize len_) {
	return g_utf8_collate_key_for_filename((const gchar *)(str), len_);
}
gchar * _g_utf8_find_next_char(gchar* p, gchar* end) {
	return g_utf8_find_next_char((const gchar *)(p), (const gchar *)(end));
}
gchar * _g_utf8_find_prev_char(gchar* str, gchar* p) {
	return g_utf8_find_prev_char((const gchar *)(str), (const gchar *)(p));
}
gunichar _g_utf8_get_char(gchar* p) {
	return g_utf8_get_char((const gchar *)(p));
}
gunichar _g_utf8_get_char_validated(gchar* p, gssize max_len) {
	return g_utf8_get_char_validated((const gchar *)(p), max_len);
}
gchar * _g_utf8_normalize(gchar* str, gssize len_, GNormalizeMode mode) {
	return g_utf8_normalize((const gchar *)(str), len_, mode);
}
gchar * _g_utf8_offset_to_pointer(gchar* str, glong offset) {
	return g_utf8_offset_to_pointer((const gchar *)(str), offset);
}
glong _g_utf8_pointer_to_offset(gchar* str, gchar* pos) {
	return g_utf8_pointer_to_offset((const gchar *)(str), (const gchar *)(pos));
}
gchar * _g_utf8_prev_char(gchar* p) {
	return g_utf8_prev_char((const gchar *)(p));
}
gchar * _g_utf8_strchr(gchar* p, gssize len_, gunichar c) {
	return g_utf8_strchr((const gchar *)(p), len_, c);
}
gchar * _g_utf8_strdown(gchar* str, gssize len_) {
	return g_utf8_strdown((const gchar *)(str), len_);
}
glong _g_utf8_strlen(gchar* p, gssize max) {
	return g_utf8_strlen((const gchar *)(p), max);
}
gchar * _g_utf8_strncpy(gchar* dest, gchar* src, gsize n) {
	return g_utf8_strncpy((gchar *)(dest), (const gchar *)(src), n);
}
gchar * _g_utf8_strrchr(gchar* p, gssize len_, gunichar c) {
	return g_utf8_strrchr((const gchar *)(p), len_, c);
}
gchar * _g_utf8_strreverse(gchar* str, gssize len_) {
	return g_utf8_strreverse((const gchar *)(str), len_);
}
gchar * _g_utf8_strup(gchar* str, gssize len_) {
	return g_utf8_strup((const gchar *)(str), len_);
}
gchar * _g_utf8_substring(gchar* str, glong start_pos, glong end_pos) {
	return g_utf8_substring((const gchar *)(str), start_pos, end_pos);
}
gunichar * _g_utf8_to_ucs4(gchar* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_utf8_to_ucs4((const gchar *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
gunichar * _g_utf8_to_ucs4_fast(gchar* str, glong len_, glong* items_written) {
	return g_utf8_to_ucs4_fast((const gchar *)(str), len_, (glong *)(items_written));
}
gunichar2 * _g_utf8_to_utf16(gchar* str, glong len_, glong* items_read, glong* items_written, void* _error_) {
	return g_utf8_to_utf16((const gchar *)(str), len_, (glong *)(items_read), (glong *)(items_written), (GError **)(_error_));
}
void _g_warn_message(char* domain, char* file, int line, char* func_, char* warnexpr) {
	g_warn_message((const char *)(domain), (const char *)(file), line, (const char *)(func_), (const char *)(warnexpr));
}
gboolean glibtrue() { return TRUE; }
*/
import "C"
import (
	"unsafe"
)

type SList C.GSList
type Cond C.GCond
type Timer C.GTimer
type List C.GList
type Source C.GSource
type Rand C.GRand
type SourcePrivate C.GSourcePrivate
type PtrArray C.GPtrArray
type BookmarkFile C.GBookmarkFile
type MatchInfo C.GMatchInfo
type MainLoop C.GMainLoop
type MemVTable C.GMemVTable
type VariantType C.GVariantType
type OptionContext C.GOptionContext
type KeyFile C.GKeyFile
type Hook C.GHook
type StatBuf C.GStatBuf
type Dir C.GDir
type Regex C.GRegex
type OptionGroup C.GOptionGroup
type IOFuncs C.GIOFuncs
type ScannerConfig C.GScannerConfig
type SourceCallbackFuncs C.GSourceCallbackFuncs
type RecMutex C.GRecMutex
type SourceFuncs C.GSourceFuncs
type TestConfig C.GTestConfig
type Data C.GData
type AsyncQueue C.GAsyncQueue
type ThreadPool C.GThreadPool
type Array C.GArray
type Thread C.GThread
type DebugKey C.GDebugKey
type Sequence C.GSequence
type TestSuite C.GTestSuite
type Scanner C.GScanner
type PatternSpec C.GPatternSpec
type String C.GString
type Private C.GPrivate
type Tree C.GTree
type VariantBuilder C.GVariantBuilder
type Date C.GDate
type HookList C.GHookList
type Variant C.GVariant
type Hmac C.GHmac
type OptionEntry C.GOptionEntry
type MainContext C.GMainContext
type VariantIter C.GVariantIter
type HashTableIter C.GHashTableIter
type Error C.GError
type TrashStack C.GTrashStack
type MarkupParser C.GMarkupParser
type IOChannel C.GIOChannel
type RWLock C.GRWLock
type Node C.GNode
type Queue C.GQueue
type Checksum C.GChecksum
type Bytes C.GBytes
type Once C.GOnce
type TimeZone C.GTimeZone
type StringChunk C.GStringChunk
type TimeVal C.GTimeVal
type PollFD C.GPollFD
type SequenceIter C.GSequenceIter
type MarkupParseContext C.GMarkupParseContext
type DateTime C.GDateTime
type ByteArray C.GByteArray
type MappedFile C.GMappedFile
type TestCase C.GTestCase
type HashTable C.GHashTable
func ArrayNew(zero_terminated C.gboolean, clear_ C.gboolean, element_size C.guint) (_return_ *Array) {
	_cgo_return_ := C.g_array_new((C.gboolean)(zero_terminated), (C.gboolean)(clear_), (C.guint)(element_size))
	_return_ = (*Array)(_cgo_return_)
	return
}

func ArraySizedNew(zero_terminated C.gboolean, clear_ C.gboolean, element_size C.guint, reserved_size C.guint) (_return_ *Array) {
	_cgo_return_ := C.g_array_sized_new((C.gboolean)(zero_terminated), (C.gboolean)(clear_), (C.guint)(element_size), (C.guint)(reserved_size))
	_return_ = (*Array)(_cgo_return_)
	return
}

func AsyncQueueNew() (_return_ *AsyncQueue) {
	_cgo_return_ := C.g_async_queue_new()
	_return_ = (*AsyncQueue)(_cgo_return_)
	return
}

func AsyncQueueNewFull(item_free_func C.GDestroyNotify) (_return_ *AsyncQueue) {
	_cgo_return_ := C.g_async_queue_new_full((C.GDestroyNotify)(item_free_func))
	_return_ = (*AsyncQueue)(_cgo_return_)
	return
}

func (_self_ *AsyncQueue) Length() (_return_ int) {
	_cgo_return_ := C._g_async_queue_length((*C.GAsyncQueue)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *AsyncQueue) LengthUnlocked() (_return_ int) {
	_cgo_return_ := C._g_async_queue_length_unlocked((*C.GAsyncQueue)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *AsyncQueue) Lock() () {
	C._g_async_queue_lock((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Pop() (_return_ C.gpointer) {
	_return_ = C._g_async_queue_pop((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) PopUnlocked() (_return_ C.gpointer) {
	_return_ = C._g_async_queue_pop_unlocked((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Push(data C.gpointer) () {
	C._g_async_queue_push((*C.GAsyncQueue)(_self_), (C.gpointer)(data))
	return
}

func (_self_ *AsyncQueue) PushSorted(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_async_queue_push_sorted((*C.GAsyncQueue)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *AsyncQueue) PushSortedUnlocked(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_async_queue_push_sorted_unlocked((*C.GAsyncQueue)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *AsyncQueue) PushUnlocked(data C.gpointer) () {
	C._g_async_queue_push_unlocked((*C.GAsyncQueue)(_self_), (C.gpointer)(data))
	return
}

func (_self_ *AsyncQueue) Ref() (_return_ *AsyncQueue) {
	_cgo_return_ := C._g_async_queue_ref((*C.GAsyncQueue)(_self_))
	_return_ = (*AsyncQueue)(_cgo_return_)
	return
}

func (_self_ *AsyncQueue) Sort(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_async_queue_sort((*C.GAsyncQueue)(_self_), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *AsyncQueue) SortUnlocked(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_async_queue_sort_unlocked((*C.GAsyncQueue)(_self_), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *AsyncQueue) TimeoutPop(timeout C.guint64) (_return_ C.gpointer) {
	_return_ = C._g_async_queue_timeout_pop((*C.GAsyncQueue)(_self_), (C.guint64)(timeout))
	return
}

func (_self_ *AsyncQueue) TimeoutPopUnlocked(timeout C.guint64) (_return_ C.gpointer) {
	_return_ = C._g_async_queue_timeout_pop_unlocked((*C.GAsyncQueue)(_self_), (C.guint64)(timeout))
	return
}

func (_self_ *AsyncQueue) TryPop() (_return_ C.gpointer) {
	_return_ = C._g_async_queue_try_pop((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) TryPopUnlocked() (_return_ C.gpointer) {
	_return_ = C._g_async_queue_try_pop_unlocked((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Unlock() () {
	C._g_async_queue_unlock((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Unref() () {
	C._g_async_queue_unref((*C.GAsyncQueue)(_self_))
	return
}

func BookmarkFileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_bookmark_file_error_quark()
	return
}

func BookmarkFileNew() (_return_ *BookmarkFile) {
	_cgo_return_ := C.g_bookmark_file_new()
	_return_ = (*BookmarkFile)(_cgo_return_)
	return
}

func (_self_ *BookmarkFile) AddApplication(uri string, name string, exec string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_exec_ := (*C.gchar)(unsafe.Pointer(C.CString(exec)))
	C._g_bookmark_file_add_application((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_exec_))
	return
}

func (_self_ *BookmarkFile) AddGroup(uri string, group string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_group_ := (*C.gchar)(unsafe.Pointer(C.CString(group)))
	C._g_bookmark_file_add_group((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_group_))
	return
}

func (_self_ *BookmarkFile) Free() () {
	C._g_bookmark_file_free((*C.GBookmarkFile)(_self_))
	return
}

func (_self_ *BookmarkFile) GetAdded(uri string) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_added((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) GetAppInfo(uri string, name string, exec unsafe.Pointer, count *C.guint, stamp *C.time_t) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_bookmark_file_get_app_info((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_name_), unsafe.Pointer(exec), (*C.guint)(count), (*C.time_t)(stamp), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) GetApplications(uri string, length *C.gsize) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = unsafe.Pointer(C._g_bookmark_file_get_applications((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gsize)(length), unsafe.Pointer(_error_)))
	return
}

func (_self_ *BookmarkFile) GetDescription(uri string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_description((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) GetGroups(uri string, length *C.gsize) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = unsafe.Pointer(C._g_bookmark_file_get_groups((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gsize)(length), unsafe.Pointer(_error_)))
	return
}

func (_self_ *BookmarkFile) GetIcon(uri string, href unsafe.Pointer, mime_type unsafe.Pointer) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_return_ := C._g_bookmark_file_get_icon((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(href), unsafe.Pointer(mime_type), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) GetIsPrivate(uri string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_return_ := C._g_bookmark_file_get_is_private((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) GetMimeType(uri string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_mime_type((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) GetModified(uri string) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_modified((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) GetSize() (_return_ int) {
	_cgo_return_ := C._g_bookmark_file_get_size((*C.GBookmarkFile)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *BookmarkFile) GetTitle(uri string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_title((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) GetUris(length *C.gsize) (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._g_bookmark_file_get_uris((*C.GBookmarkFile)(_self_), (*C.gsize)(length)))
	return
}

func (_self_ *BookmarkFile) GetVisited(uri string) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_bookmark_file_get_visited((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) HasApplication(uri string, name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_bookmark_file_has_application((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) HasGroup(uri string, group string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_group_ := (*C.gchar)(unsafe.Pointer(C.CString(group)))
	_cgo_return_ := C._g_bookmark_file_has_group((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_group_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) HasItem(uri string) (_return_ bool) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_return_ := C._g_bookmark_file_has_item((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) LoadFromData(data string, length C.gsize) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_data_ := (*C.gchar)(unsafe.Pointer(C.CString(data)))
	_cgo_return_ := C._g_bookmark_file_load_from_data((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_data_), (C.gsize)(length), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) LoadFromDataDirs(file string, full_path unsafe.Pointer) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_file_ := (*C.gchar)(unsafe.Pointer(C.CString(file)))
	_cgo_return_ := C._g_bookmark_file_load_from_data_dirs((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_file_), unsafe.Pointer(full_path), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) LoadFromFile(filename string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_return_ := C._g_bookmark_file_load_from_file((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) MoveItem(old_uri string, new_uri string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_old_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(old_uri)))
	_cgo_of_new_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(new_uri)))
	_cgo_return_ := C._g_bookmark_file_move_item((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_old_uri_), (*C.gchar)(_cgo_of_new_uri_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) RemoveApplication(uri string, name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_bookmark_file_remove_application((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) RemoveGroup(uri string, group string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_group_ := (*C.gchar)(unsafe.Pointer(C.CString(group)))
	_cgo_return_ := C._g_bookmark_file_remove_group((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_group_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) RemoveItem(uri string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_return_ := C._g_bookmark_file_remove_item((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) SetAdded(uri string, added C.time_t) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._g_bookmark_file_set_added((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (C.time_t)(added))
	return
}

func (_self_ *BookmarkFile) SetAppInfo(uri string, name string, exec string, count C.gint, stamp C.time_t) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_exec_ := (*C.gchar)(unsafe.Pointer(C.CString(exec)))
	_cgo_return_ := C._g_bookmark_file_set_app_info((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_exec_), (C.gint)(count), (C.time_t)(stamp), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *BookmarkFile) SetDescription(uri string, description string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_description_ := (*C.gchar)(unsafe.Pointer(C.CString(description)))
	C._g_bookmark_file_set_description((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_description_))
	return
}

func (_self_ *BookmarkFile) SetGroups(uri string, groups unsafe.Pointer, length C.gsize) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._g_bookmark_file_set_groups((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(groups), (C.gsize)(length))
	return
}

func (_self_ *BookmarkFile) SetIcon(uri string, href string, mime_type string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_href_ := (*C.gchar)(unsafe.Pointer(C.CString(href)))
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	C._g_bookmark_file_set_icon((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_href_), (*C.gchar)(_cgo_of_mime_type_))
	return
}

func (_self_ *BookmarkFile) SetIsPrivate(uri string, is_private C.gboolean) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._g_bookmark_file_set_is_private((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (C.gboolean)(is_private))
	return
}

func (_self_ *BookmarkFile) SetMimeType(uri string, mime_type string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	C._g_bookmark_file_set_mime_type((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_mime_type_))
	return
}

func (_self_ *BookmarkFile) SetModified(uri string, modified C.time_t) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._g_bookmark_file_set_modified((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (C.time_t)(modified))
	return
}

func (_self_ *BookmarkFile) SetTitle(uri string, title string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._g_bookmark_file_set_title((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *BookmarkFile) SetVisited(uri string, visited C.time_t) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._g_bookmark_file_set_visited((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_uri_), (C.time_t)(visited))
	return
}

func (_self_ *BookmarkFile) ToData(length *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_to_data((*C.GBookmarkFile)(_self_), (*C.gsize)(length), unsafe.Pointer(_error_))
	return
}

func (_self_ *BookmarkFile) ToFile(filename string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_return_ := C._g_bookmark_file_to_file((*C.GBookmarkFile)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func ByteArrayNew() (_return_ *ByteArray) {
	_cgo_return_ := C.g_byte_array_new()
	_return_ = (*ByteArray)(_cgo_return_)
	return
}

func ByteArraySizedNew(reserved_size C.guint) (_return_ *ByteArray) {
	_cgo_return_ := C.g_byte_array_sized_new((C.guint)(reserved_size))
	_return_ = (*ByteArray)(_cgo_return_)
	return
}

func (_self_ *Bytes) Compare(bytes2 C.gconstpointer) (_return_ int) {
	_cgo_return_ := C._g_bytes_compare((*C.GBytes)(_self_), (C.gconstpointer)(bytes2))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Bytes) Equal(bytes2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_bytes_equal((*C.GBytes)(_self_), (C.gconstpointer)(bytes2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Bytes) GetData() (_return_ C.gconstpointer, size C.gsize) {
	_return_ = C._g_bytes_get_data((*C.GBytes)(_self_), (*C.gsize)(&size))
	return
}

func (_self_ *Bytes) GetSize() (_return_ uint64) {
	_cgo_return_ := C._g_bytes_get_size((*C.GBytes)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *Bytes) Hash() (_return_ uint) {
	_cgo_return_ := C._g_bytes_hash((*C.GBytes)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Bytes) NewFromBytes(offset C.gsize, length C.gsize) (_return_ *Bytes) {
	_cgo_return_ := C._g_bytes_new_from_bytes((*C.GBytes)(_self_), (C.gsize)(offset), (C.gsize)(length))
	_return_ = (*Bytes)(_cgo_return_)
	return
}

func (_self_ *Bytes) Ref() (_return_ *Bytes) {
	_cgo_return_ := C._g_bytes_ref((*C.GBytes)(_self_))
	_return_ = (*Bytes)(_cgo_return_)
	return
}

func (_self_ *Bytes) Unref() () {
	C._g_bytes_unref((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) UnrefToArray() (_return_ *ByteArray) {
	_cgo_return_ := C._g_bytes_unref_to_array((*C.GBytes)(_self_))
	_return_ = (*ByteArray)(_cgo_return_)
	return
}

func (_self_ *Bytes) UnrefToData(size *C.gsize) (_return_ C.gpointer) {
	_return_ = C._g_bytes_unref_to_data((*C.GBytes)(_self_), (*C.gsize)(size))
	return
}

func ChecksumNew(checksum_type C.GChecksumType) (_return_ *Checksum) {
	_cgo_return_ := C.g_checksum_new((C.GChecksumType)(checksum_type))
	_return_ = (*Checksum)(_cgo_return_)
	return
}

func ChecksumTypeGetLength(checksum_type C.GChecksumType) (_return_ int64) {
	_cgo_return_ := C.g_checksum_type_get_length((C.GChecksumType)(checksum_type))
	_return_ = int64(_cgo_return_)
	return
}

func (_self_ *Checksum) Copy() (_return_ *Checksum) {
	_cgo_return_ := C._g_checksum_copy((*C.GChecksum)(_self_))
	_return_ = (*Checksum)(_cgo_return_)
	return
}

func (_self_ *Checksum) Free() () {
	C._g_checksum_free((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) GetDigest(buffer *C.guint8, digest_len *C.gsize) () {
	C._g_checksum_get_digest((*C.GChecksum)(_self_), (*C.guint8)(buffer), (*C.gsize)(digest_len))
	return
}

func (_self_ *Checksum) GetString() (_return_ *C.gchar) {
	_return_ = C._g_checksum_get_string((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) Reset() () {
	C._g_checksum_reset((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) Update(data *C.guchar, length C.gssize) () {
	C._g_checksum_update((*C.GChecksum)(_self_), (*C.guchar)(data), (C.gssize)(length))
	return
}

func (_self_ *Cond) Broadcast() () {
	C._g_cond_broadcast((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Clear() () {
	C._g_cond_clear((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Init() () {
	C._g_cond_init((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Signal() () {
	C._g_cond_signal((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Wait(mutex *C.GMutex) () {
	C._g_cond_wait((*C.GCond)(_self_), (*C.GMutex)(mutex))
	return
}

func (_self_ *Cond) WaitUntil(mutex *C.GMutex, end_time C.gint64) (_return_ bool) {
	_cgo_return_ := C._g_cond_wait_until((*C.GCond)(_self_), (*C.GMutex)(mutex), (C.gint64)(end_time))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateNew() (_return_ *Date) {
	_cgo_return_ := C.g_date_new()
	_return_ = (*Date)(_cgo_return_)
	return
}

func DateNewDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) (_return_ *Date) {
	_cgo_return_ := C.g_date_new_dmy((C.GDateDay)(day), (C.GDateMonth)(month), (C.GDateYear)(year))
	_return_ = (*Date)(_cgo_return_)
	return
}

func DateNewJulian(julian_day C.guint32) (_return_ *Date) {
	_cgo_return_ := C.g_date_new_julian((C.guint32)(julian_day))
	_return_ = (*Date)(_cgo_return_)
	return
}

func DateGetDaysInMonth(month C.GDateMonth, year C.GDateYear) (_return_ uint8) {
	_cgo_return_ := C.g_date_get_days_in_month((C.GDateMonth)(month), (C.GDateYear)(year))
	_return_ = uint8(_cgo_return_)
	return
}

func DateGetMondayWeeksInYear(year C.GDateYear) (_return_ uint8) {
	_cgo_return_ := C.g_date_get_monday_weeks_in_year((C.GDateYear)(year))
	_return_ = uint8(_cgo_return_)
	return
}

func DateGetSundayWeeksInYear(year C.GDateYear) (_return_ uint8) {
	_cgo_return_ := C.g_date_get_sunday_weeks_in_year((C.GDateYear)(year))
	_return_ = uint8(_cgo_return_)
	return
}

func DateIsLeapYear(year C.GDateYear) (_return_ bool) {
	_cgo_return_ := C.g_date_is_leap_year((C.GDateYear)(year))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateStrftime(s string, slen C.gsize, format string, date *Date) (_return_ uint64) {
	_cgo_of_s_ := (*C.gchar)(unsafe.Pointer(C.CString(s)))
	_cgo_of_format_ := (*C.gchar)(unsafe.Pointer(C.CString(format)))
	_cgo_of_date_ := (*C.GDate)(date)
	_cgo_return_ := C._g_date_strftime((*C.gchar)(_cgo_of_s_), (C.gsize)(slen), (*C.gchar)(_cgo_of_format_), (*C.GDate)(_cgo_of_date_))
	_return_ = uint64(_cgo_return_)
	return
}

func DateValidDay(day C.GDateDay) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_day((C.GDateDay)(day))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateValidDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_dmy((C.GDateDay)(day), (C.GDateMonth)(month), (C.GDateYear)(year))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateValidJulian(julian_date C.guint32) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_julian((C.guint32)(julian_date))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateValidMonth(month C.GDateMonth) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_month((C.GDateMonth)(month))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateValidWeekday(weekday C.GDateWeekday) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_weekday((C.GDateWeekday)(weekday))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateValidYear(year C.GDateYear) (_return_ bool) {
	_cgo_return_ := C.g_date_valid_year((C.GDateYear)(year))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Date) AddDays(n_days C.guint) () {
	C._g_date_add_days((*C.GDate)(_self_), (C.guint)(n_days))
	return
}

func (_self_ *Date) AddMonths(n_months C.guint) () {
	C._g_date_add_months((*C.GDate)(_self_), (C.guint)(n_months))
	return
}

func (_self_ *Date) AddYears(n_years C.guint) () {
	C._g_date_add_years((*C.GDate)(_self_), (C.guint)(n_years))
	return
}

func (_self_ *Date) Clamp(min_date *Date, max_date *Date) () {
	_cgo_of_min_date_ := (*C.GDate)(min_date)
	_cgo_of_max_date_ := (*C.GDate)(max_date)
	C._g_date_clamp((*C.GDate)(_self_), (*C.GDate)(_cgo_of_min_date_), (*C.GDate)(_cgo_of_max_date_))
	return
}

func (_self_ *Date) Clear(n_dates C.guint) () {
	C._g_date_clear((*C.GDate)(_self_), (C.guint)(n_dates))
	return
}

func (_self_ *Date) Compare(rhs *Date) (_return_ int) {
	_cgo_of_rhs_ := (*C.GDate)(rhs)
	_cgo_return_ := C._g_date_compare((*C.GDate)(_self_), (*C.GDate)(_cgo_of_rhs_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Date) DaysBetween(date2 *Date) (_return_ int) {
	_cgo_of_date2_ := (*C.GDate)(date2)
	_cgo_return_ := C._g_date_days_between((*C.GDate)(_self_), (*C.GDate)(_cgo_of_date2_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Date) Free() () {
	C._g_date_free((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetDay() (_return_ C.GDateDay) {
	_return_ = C._g_date_get_day((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetDayOfYear() (_return_ uint) {
	_cgo_return_ := C._g_date_get_day_of_year((*C.GDate)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Date) GetIso8601WeekOfYear() (_return_ uint) {
	_cgo_return_ := C._g_date_get_iso8601_week_of_year((*C.GDate)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Date) GetJulian() (_return_ uint32) {
	_cgo_return_ := C._g_date_get_julian((*C.GDate)(_self_))
	_return_ = uint32(_cgo_return_)
	return
}

func (_self_ *Date) GetMondayWeekOfYear() (_return_ uint) {
	_cgo_return_ := C._g_date_get_monday_week_of_year((*C.GDate)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Date) GetMonth() (_return_ C.GDateMonth) {
	_return_ = C._g_date_get_month((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetSundayWeekOfYear() (_return_ uint) {
	_cgo_return_ := C._g_date_get_sunday_week_of_year((*C.GDate)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Date) GetWeekday() (_return_ C.GDateWeekday) {
	_return_ = C._g_date_get_weekday((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetYear() (_return_ C.GDateYear) {
	_return_ = C._g_date_get_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) IsFirstOfMonth() (_return_ bool) {
	_cgo_return_ := C._g_date_is_first_of_month((*C.GDate)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Date) IsLastOfMonth() (_return_ bool) {
	_cgo_return_ := C._g_date_is_last_of_month((*C.GDate)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Date) Order(date2 *Date) () {
	_cgo_of_date2_ := (*C.GDate)(date2)
	C._g_date_order((*C.GDate)(_self_), (*C.GDate)(_cgo_of_date2_))
	return
}

func (_self_ *Date) SetDay(day C.GDateDay) () {
	C._g_date_set_day((*C.GDate)(_self_), (C.GDateDay)(day))
	return
}

func (_self_ *Date) SetDmy(day C.GDateDay, month C.GDateMonth, y C.GDateYear) () {
	C._g_date_set_dmy((*C.GDate)(_self_), (C.GDateDay)(day), (C.GDateMonth)(month), (C.GDateYear)(y))
	return
}

func (_self_ *Date) SetJulian(julian_date C.guint32) () {
	C._g_date_set_julian((*C.GDate)(_self_), (C.guint32)(julian_date))
	return
}

func (_self_ *Date) SetMonth(month C.GDateMonth) () {
	C._g_date_set_month((*C.GDate)(_self_), (C.GDateMonth)(month))
	return
}

func (_self_ *Date) SetParse(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._g_date_set_parse((*C.GDate)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Date) SetTimeT(timet C.time_t) () {
	C._g_date_set_time_t((*C.GDate)(_self_), (C.time_t)(timet))
	return
}

func (_self_ *Date) SetTimeVal(timeval *TimeVal) () {
	_cgo_of_timeval_ := (*C.GTimeVal)(timeval)
	C._g_date_set_time_val((*C.GDate)(_self_), (*C.GTimeVal)(_cgo_of_timeval_))
	return
}

func (_self_ *Date) SetYear(year C.GDateYear) () {
	C._g_date_set_year((*C.GDate)(_self_), (C.GDateYear)(year))
	return
}

func (_self_ *Date) SubtractDays(n_days C.guint) () {
	C._g_date_subtract_days((*C.GDate)(_self_), (C.guint)(n_days))
	return
}

func (_self_ *Date) SubtractMonths(n_months C.guint) () {
	C._g_date_subtract_months((*C.GDate)(_self_), (C.guint)(n_months))
	return
}

func (_self_ *Date) SubtractYears(n_years C.guint) () {
	C._g_date_subtract_years((*C.GDate)(_self_), (C.guint)(n_years))
	return
}

func (_self_ *Date) Valid() (_return_ bool) {
	_cgo_return_ := C._g_date_valid((*C.GDate)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateTimeNew(tz *TimeZone, year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *DateTime) {
	_cgo_of_tz_ := (*C.GTimeZone)(tz)
	_cgo_return_ := C.g_date_time_new((*C.GTimeZone)(_cgo_of_tz_), (C.gint)(year), (C.gint)(month), (C.gint)(day), (C.gint)(hour), (C.gint)(minute), (C.gdouble)(seconds))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewFromTimevalLocal(tv *TimeVal) (_return_ *DateTime) {
	_cgo_of_tv_ := (*C.GTimeVal)(tv)
	_cgo_return_ := C._g_date_time_new_from_timeval_local((*C.GTimeVal)(_cgo_of_tv_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewFromTimevalUtc(tv *TimeVal) (_return_ *DateTime) {
	_cgo_of_tv_ := (*C.GTimeVal)(tv)
	_cgo_return_ := C._g_date_time_new_from_timeval_utc((*C.GTimeVal)(_cgo_of_tv_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewFromUnixLocal(t C.gint64) (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_from_unix_local((C.gint64)(t))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewFromUnixUtc(t C.gint64) (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_from_unix_utc((C.gint64)(t))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewLocal(year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_local((C.gint)(year), (C.gint)(month), (C.gint)(day), (C.gint)(hour), (C.gint)(minute), (C.gdouble)(seconds))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewNow(tz *TimeZone) (_return_ *DateTime) {
	_cgo_of_tz_ := (*C.GTimeZone)(tz)
	_cgo_return_ := C.g_date_time_new_now((*C.GTimeZone)(_cgo_of_tz_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewNowLocal() (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_now_local()
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewNowUtc() (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_now_utc()
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeNewUtc(year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *DateTime) {
	_cgo_return_ := C.g_date_time_new_utc((C.gint)(year), (C.gint)(month), (C.gint)(day), (C.gint)(hour), (C.gint)(minute), (C.gdouble)(seconds))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func DateTimeCompare(dt1 C.gconstpointer, dt2 C.gconstpointer) (_return_ int) {
	_cgo_return_ := C.g_date_time_compare((C.gconstpointer)(dt1), (C.gconstpointer)(dt2))
	_return_ = int(_cgo_return_)
	return
}

func DateTimeEqual(dt1 C.gconstpointer, dt2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_date_time_equal((C.gconstpointer)(dt1), (C.gconstpointer)(dt2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DateTimeHash(datetime C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_date_time_hash((C.gconstpointer)(datetime))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *DateTime) Add(timespan C.GTimeSpan) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add((*C.GDateTime)(_self_), (C.GTimeSpan)(timespan))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddDays(days C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_days((*C.GDateTime)(_self_), (C.gint)(days))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddFull(years C.gint, months C.gint, days C.gint, hours C.gint, minutes C.gint, seconds C.gdouble) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_full((*C.GDateTime)(_self_), (C.gint)(years), (C.gint)(months), (C.gint)(days), (C.gint)(hours), (C.gint)(minutes), (C.gdouble)(seconds))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddHours(hours C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_hours((*C.GDateTime)(_self_), (C.gint)(hours))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddMinutes(minutes C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_minutes((*C.GDateTime)(_self_), (C.gint)(minutes))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddMonths(months C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_months((*C.GDateTime)(_self_), (C.gint)(months))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddSeconds(seconds C.gdouble) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_seconds((*C.GDateTime)(_self_), (C.gdouble)(seconds))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddWeeks(weeks C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_weeks((*C.GDateTime)(_self_), (C.gint)(weeks))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) AddYears(years C.gint) (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_add_years((*C.GDateTime)(_self_), (C.gint)(years))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) Difference(begin *DateTime) (_return_ C.GTimeSpan) {
	_cgo_of_begin_ := (*C.GDateTime)(begin)
	_return_ = C._g_date_time_difference((*C.GDateTime)(_self_), (*C.GDateTime)(_cgo_of_begin_))
	return
}

func (_self_ *DateTime) Format(format string) (_return_ *C.gchar) {
	_cgo_of_format_ := (*C.gchar)(unsafe.Pointer(C.CString(format)))
	_return_ = C._g_date_time_format((*C.GDateTime)(_self_), (*C.gchar)(_cgo_of_format_))
	return
}

func (_self_ *DateTime) GetDayOfMonth() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_day_of_month((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetDayOfWeek() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_day_of_week((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetDayOfYear() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_day_of_year((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetHour() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_hour((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetMicrosecond() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_microsecond((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetMinute() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_minute((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetMonth() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_month((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetSecond() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_second((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetSeconds() (_return_ float64) {
	_cgo_return_ := C._g_date_time_get_seconds((*C.GDateTime)(_self_))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *DateTime) GetTimezoneAbbreviation() (_return_ *C.gchar) {
	_return_ = C._g_date_time_get_timezone_abbreviation((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetUtcOffset() (_return_ C.GTimeSpan) {
	_return_ = C._g_date_time_get_utc_offset((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetWeekNumberingYear() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_week_numbering_year((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetWeekOfYear() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_week_of_year((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetYear() (_return_ int) {
	_cgo_return_ := C._g_date_time_get_year((*C.GDateTime)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *DateTime) GetYmd() (year C.gint, month C.gint, day C.gint) {
	C._g_date_time_get_ymd((*C.GDateTime)(_self_), (*C.gint)(&year), (*C.gint)(&month), (*C.gint)(&day))
	return
}

func (_self_ *DateTime) IsDaylightSavings() (_return_ bool) {
	_cgo_return_ := C._g_date_time_is_daylight_savings((*C.GDateTime)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *DateTime) Ref() (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_ref((*C.GDateTime)(_self_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) ToLocal() (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_to_local((*C.GDateTime)(_self_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) ToTimeval(tv *TimeVal) (_return_ bool) {
	_cgo_of_tv_ := (*C.GTimeVal)(tv)
	_cgo_return_ := C._g_date_time_to_timeval((*C.GDateTime)(_self_), (*C.GTimeVal)(_cgo_of_tv_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *DateTime) ToTimezone(tz *TimeZone) (_return_ *DateTime) {
	_cgo_of_tz_ := (*C.GTimeZone)(tz)
	_cgo_return_ := C._g_date_time_to_timezone((*C.GDateTime)(_self_), (*C.GTimeZone)(_cgo_of_tz_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) ToUnix() (_return_ int64) {
	_cgo_return_ := C._g_date_time_to_unix((*C.GDateTime)(_self_))
	_return_ = int64(_cgo_return_)
	return
}

func (_self_ *DateTime) ToUtc() (_return_ *DateTime) {
	_cgo_return_ := C._g_date_time_to_utc((*C.GDateTime)(_self_))
	_return_ = (*DateTime)(_cgo_return_)
	return
}

func (_self_ *DateTime) Unref() () {
	C._g_date_time_unref((*C.GDateTime)(_self_))
	return
}

func DirMakeTmp(tmpl string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_return_ = C._g_dir_make_tmp((*C.gchar)(_cgo_of_tmpl_), unsafe.Pointer(_error_))
	return
}

func DirOpen(path string, flags C.guint) (_return_ *Dir, _error_ unsafe.Pointer) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_return_ := C._g_dir_open((*C.gchar)(_cgo_of_path_), (C.guint)(flags), unsafe.Pointer(_error_))
	_return_ = (*Dir)(_cgo_return_)
	return
}

func (_self_ *Dir) Close() () {
	C._g_dir_close((*C.GDir)(_self_))
	return
}

func (_self_ *Dir) ReadName() (_return_ *C.gchar) {
	_return_ = C._g_dir_read_name((*C.GDir)(_self_))
	return
}

func (_self_ *Dir) Rewind() () {
	C._g_dir_rewind((*C.GDir)(_self_))
	return
}

func ErrorNewLiteral(domain C.GQuark, code C.gint, message string) (_return_ *Error) {
	_cgo_of_message_ := (*C.gchar)(unsafe.Pointer(C.CString(message)))
	_cgo_return_ := C._g_error_new_literal((C.GQuark)(domain), (C.gint)(code), (*C.gchar)(_cgo_of_message_))
	_return_ = (*Error)(_cgo_return_)
	return
}

func (_self_ *Error) Copy() (_return_ *Error) {
	_cgo_return_ := C._g_error_copy((*C.GError)(_self_))
	_return_ = (*Error)(_cgo_return_)
	return
}

func (_self_ *Error) Free() () {
	C._g_error_free((*C.GError)(_self_))
	return
}

func (_self_ *Error) Matches(domain C.GQuark, code C.gint) (_return_ bool) {
	_cgo_return_ := C._g_error_matches((*C.GError)(_self_), (C.GQuark)(domain), (C.gint)(code))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HashTableAdd(hash_table *HashTable, key C.gpointer) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_add((*C.GHashTable)(_cgo_of_hash_table_), (C.gpointer)(key))
	return
}

func HashTableContains(hash_table *HashTable, key C.gconstpointer) (_return_ bool) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_contains((*C.GHashTable)(_cgo_of_hash_table_), (C.gconstpointer)(key))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HashTableDestroy(hash_table *HashTable) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_destroy((*C.GHashTable)(_cgo_of_hash_table_))
	return
}

func HashTableFind(hash_table *HashTable, predicate C.GHRFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_return_ = C.g_hash_table_find((*C.GHashTable)(_cgo_of_hash_table_), (C.GHRFunc)(predicate), (C.gpointer)(user_data))
	return
}

func HashTableForeach(hash_table *HashTable, func_ C.GHFunc, user_data C.gpointer) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_foreach((*C.GHashTable)(_cgo_of_hash_table_), (C.GHFunc)(func_), (C.gpointer)(user_data))
	return
}

func HashTableForeachRemove(hash_table *HashTable, func_ C.GHRFunc, user_data C.gpointer) (_return_ uint) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_foreach_remove((*C.GHashTable)(_cgo_of_hash_table_), (C.GHRFunc)(func_), (C.gpointer)(user_data))
	_return_ = uint(_cgo_return_)
	return
}

func HashTableForeachSteal(hash_table *HashTable, func_ C.GHRFunc, user_data C.gpointer) (_return_ uint) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_foreach_steal((*C.GHashTable)(_cgo_of_hash_table_), (C.GHRFunc)(func_), (C.gpointer)(user_data))
	_return_ = uint(_cgo_return_)
	return
}

func HashTableGetKeys(hash_table *HashTable) (_return_ *List) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_get_keys((*C.GHashTable)(_cgo_of_hash_table_))
	_return_ = (*List)(_cgo_return_)
	return
}

func HashTableGetValues(hash_table *HashTable) (_return_ *List) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_get_values((*C.GHashTable)(_cgo_of_hash_table_))
	_return_ = (*List)(_cgo_return_)
	return
}

func HashTableInsert(hash_table *HashTable, key C.gpointer, value C.gpointer) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_insert((*C.GHashTable)(_cgo_of_hash_table_), (C.gpointer)(key), (C.gpointer)(value))
	return
}

func HashTableLookup(hash_table *HashTable, key C.gconstpointer) (_return_ C.gpointer) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_return_ = C.g_hash_table_lookup((*C.GHashTable)(_cgo_of_hash_table_), (C.gconstpointer)(key))
	return
}

func HashTableLookupExtended(hash_table *HashTable, lookup_key C.gconstpointer, orig_key *C.gpointer, value *C.gpointer) (_return_ bool) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_lookup_extended((*C.GHashTable)(_cgo_of_hash_table_), (C.gconstpointer)(lookup_key), (*C.gpointer)(orig_key), (*C.gpointer)(value))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HashTableNew(hash_func C.GHashFunc, key_equal_func C.GEqualFunc) (_return_ *HashTable) {
	_cgo_return_ := C.g_hash_table_new((C.GHashFunc)(hash_func), (C.GEqualFunc)(key_equal_func))
	_return_ = (*HashTable)(_cgo_return_)
	return
}

func HashTableNewFull(hash_func C.GHashFunc, key_equal_func C.GEqualFunc, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) (_return_ *HashTable) {
	_cgo_return_ := C.g_hash_table_new_full((C.GHashFunc)(hash_func), (C.GEqualFunc)(key_equal_func), (C.GDestroyNotify)(key_destroy_func), (C.GDestroyNotify)(value_destroy_func))
	_return_ = (*HashTable)(_cgo_return_)
	return
}

func HashTableRef(hash_table *HashTable) (_return_ *HashTable) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_ref((*C.GHashTable)(_cgo_of_hash_table_))
	_return_ = (*HashTable)(_cgo_return_)
	return
}

func HashTableRemove(hash_table *HashTable, key C.gconstpointer) (_return_ bool) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_remove((*C.GHashTable)(_cgo_of_hash_table_), (C.gconstpointer)(key))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HashTableRemoveAll(hash_table *HashTable) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_remove_all((*C.GHashTable)(_cgo_of_hash_table_))
	return
}

func HashTableReplace(hash_table *HashTable, key C.gpointer, value C.gpointer) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_replace((*C.GHashTable)(_cgo_of_hash_table_), (C.gpointer)(key), (C.gpointer)(value))
	return
}

func HashTableSize(hash_table *HashTable) (_return_ uint) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_size((*C.GHashTable)(_cgo_of_hash_table_))
	_return_ = uint(_cgo_return_)
	return
}

func HashTableSteal(hash_table *HashTable, key C.gconstpointer) (_return_ bool) {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	_cgo_return_ := C.g_hash_table_steal((*C.GHashTable)(_cgo_of_hash_table_), (C.gconstpointer)(key))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HashTableStealAll(hash_table *HashTable) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_steal_all((*C.GHashTable)(_cgo_of_hash_table_))
	return
}

func HashTableUnref(hash_table *HashTable) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_unref((*C.GHashTable)(_cgo_of_hash_table_))
	return
}

func (_self_ *HashTableIter) GetHashTable() (_return_ *HashTable) {
	_cgo_return_ := C._g_hash_table_iter_get_hash_table((*C.GHashTableIter)(_self_))
	_return_ = (*HashTable)(_cgo_return_)
	return
}

func (_self_ *HashTableIter) Init(hash_table *HashTable) () {
	_cgo_of_hash_table_ := (*C.GHashTable)(hash_table)
	C._g_hash_table_iter_init((*C.GHashTableIter)(_self_), (*C.GHashTable)(_cgo_of_hash_table_))
	return
}

func (_self_ *HashTableIter) Next(key *C.gpointer, value *C.gpointer) (_return_ bool) {
	_cgo_return_ := C._g_hash_table_iter_next((*C.GHashTableIter)(_self_), (*C.gpointer)(key), (*C.gpointer)(value))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *HashTableIter) Remove() () {
	C._g_hash_table_iter_remove((*C.GHashTableIter)(_self_))
	return
}

func (_self_ *HashTableIter) Replace(value C.gpointer) () {
	C._g_hash_table_iter_replace((*C.GHashTableIter)(_self_), (C.gpointer)(value))
	return
}

func (_self_ *HashTableIter) Steal() () {
	C._g_hash_table_iter_steal((*C.GHashTableIter)(_self_))
	return
}

func (_self_ *Hmac) Copy() (_return_ *Hmac) {
	_cgo_return_ := C._g_hmac_copy((*C.GHmac)(_self_))
	_return_ = (*Hmac)(_cgo_return_)
	return
}

func (_self_ *Hmac) GetDigest(buffer *C.guint8, digest_len *C.gsize) () {
	C._g_hmac_get_digest((*C.GHmac)(_self_), (*C.guint8)(buffer), (*C.gsize)(digest_len))
	return
}

func (_self_ *Hmac) GetString() (_return_ *C.gchar) {
	_return_ = C._g_hmac_get_string((*C.GHmac)(_self_))
	return
}

func (_self_ *Hmac) Ref() (_return_ *Hmac) {
	_cgo_return_ := C._g_hmac_ref((*C.GHmac)(_self_))
	_return_ = (*Hmac)(_cgo_return_)
	return
}

func (_self_ *Hmac) Unref() () {
	C._g_hmac_unref((*C.GHmac)(_self_))
	return
}

func HookAlloc(hook_list *HookList) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_alloc((*C.GHookList)(_cgo_of_hook_list_))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookDestroy(hook_list *HookList, hook_id C.gulong) (_return_ bool) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_destroy((*C.GHookList)(_cgo_of_hook_list_), (C.gulong)(hook_id))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HookDestroyLink(hook_list *HookList, hook *Hook) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_destroy_link((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_))
	return
}

func HookFind(hook_list *HookList, need_valids C.gboolean, func_ C.GHookFindFunc, data C.gpointer) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_find((*C.GHookList)(_cgo_of_hook_list_), (C.gboolean)(need_valids), (C.GHookFindFunc)(func_), (C.gpointer)(data))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookFindData(hook_list *HookList, need_valids C.gboolean, data C.gpointer) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_find_data((*C.GHookList)(_cgo_of_hook_list_), (C.gboolean)(need_valids), (C.gpointer)(data))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookFindFunc(hook_list *HookList, need_valids C.gboolean, func_ C.gpointer) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_find_func((*C.GHookList)(_cgo_of_hook_list_), (C.gboolean)(need_valids), (C.gpointer)(func_))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookFindFuncData(hook_list *HookList, need_valids C.gboolean, func_ C.gpointer, data C.gpointer) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_find_func_data((*C.GHookList)(_cgo_of_hook_list_), (C.gboolean)(need_valids), (C.gpointer)(func_), (C.gpointer)(data))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookFirstValid(hook_list *HookList, may_be_in_call C.gboolean) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_first_valid((*C.GHookList)(_cgo_of_hook_list_), (C.gboolean)(may_be_in_call))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookFree(hook_list *HookList, hook *Hook) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_free((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_))
	return
}

func HookGet(hook_list *HookList, hook_id C.gulong) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_return_ := C.g_hook_get((*C.GHookList)(_cgo_of_hook_list_), (C.gulong)(hook_id))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookInsertBefore(hook_list *HookList, sibling *Hook, hook *Hook) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_sibling_ := (*C.GHook)(sibling)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_insert_before((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_sibling_), (*C.GHook)(_cgo_of_hook_))
	return
}

func HookInsertSorted(hook_list *HookList, hook *Hook, func_ C.GHookCompareFunc) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_insert_sorted((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_), (C.GHookCompareFunc)(func_))
	return
}

func HookNextValid(hook_list *HookList, hook *Hook, may_be_in_call C.gboolean) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	_cgo_return_ := C.g_hook_next_valid((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_), (C.gboolean)(may_be_in_call))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookPrepend(hook_list *HookList, hook *Hook) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_prepend((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_))
	return
}

func HookRef(hook_list *HookList, hook *Hook) (_return_ *Hook) {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	_cgo_return_ := C.g_hook_ref((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_))
	_return_ = (*Hook)(_cgo_return_)
	return
}

func HookUnref(hook_list *HookList, hook *Hook) () {
	_cgo_of_hook_list_ := (*C.GHookList)(hook_list)
	_cgo_of_hook_ := (*C.GHook)(hook)
	C.g_hook_unref((*C.GHookList)(_cgo_of_hook_list_), (*C.GHook)(_cgo_of_hook_))
	return
}

func (_self_ *Hook) CompareIds(sibling *Hook) (_return_ int) {
	_cgo_of_sibling_ := (*C.GHook)(sibling)
	_cgo_return_ := C._g_hook_compare_ids((*C.GHook)(_self_), (*C.GHook)(_cgo_of_sibling_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *HookList) Clear() () {
	C._g_hook_list_clear((*C.GHookList)(_self_))
	return
}

func (_self_ *HookList) Init(hook_size C.guint) () {
	C._g_hook_list_init((*C.GHookList)(_self_), (C.guint)(hook_size))
	return
}

func (_self_ *HookList) Invoke(may_recurse C.gboolean) () {
	C._g_hook_list_invoke((*C.GHookList)(_self_), (C.gboolean)(may_recurse))
	return
}

func (_self_ *HookList) InvokeCheck(may_recurse C.gboolean) () {
	C._g_hook_list_invoke_check((*C.GHookList)(_self_), (C.gboolean)(may_recurse))
	return
}

func (_self_ *HookList) Marshal(may_recurse C.gboolean, marshaller C.GHookMarshaller, marshal_data C.gpointer) () {
	C._g_hook_list_marshal((*C.GHookList)(_self_), (C.gboolean)(may_recurse), (C.GHookMarshaller)(marshaller), (C.gpointer)(marshal_data))
	return
}

func (_self_ *HookList) MarshalCheck(may_recurse C.gboolean, marshaller C.GHookCheckMarshaller, marshal_data C.gpointer) () {
	C._g_hook_list_marshal_check((*C.GHookList)(_self_), (C.gboolean)(may_recurse), (C.GHookCheckMarshaller)(marshaller), (C.gpointer)(marshal_data))
	return
}

func IOChannelNewFile(filename string, mode string) (_return_ *IOChannel, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of_mode_ := (*C.gchar)(unsafe.Pointer(C.CString(mode)))
	_cgo_return_ := C._g_io_channel_new_file((*C.gchar)(_cgo_of_filename_), (*C.gchar)(_cgo_of_mode_), unsafe.Pointer(_error_))
	_return_ = (*IOChannel)(_cgo_return_)
	return
}

func IOChannelUnixNew(fd C.int) (_return_ *IOChannel) {
	_cgo_return_ := C.g_io_channel_unix_new((C.int)(fd))
	_return_ = (*IOChannel)(_cgo_return_)
	return
}

func IOChannelErrorFromErrno(en C.gint) (_return_ C.GIOChannelError) {
	_return_ = C.g_io_channel_error_from_errno((C.gint)(en))
	return
}

func IOChannelErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_io_channel_error_quark()
	return
}

func (_self_ *IOChannel) Flush() (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_flush((*C.GIOChannel)(_self_), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) GetBufferCondition() (_return_ C.GIOCondition) {
	_return_ = C._g_io_channel_get_buffer_condition((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetBufferSize() (_return_ uint64) {
	_cgo_return_ := C._g_io_channel_get_buffer_size((*C.GIOChannel)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *IOChannel) GetBuffered() (_return_ bool) {
	_cgo_return_ := C._g_io_channel_get_buffered((*C.GIOChannel)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *IOChannel) GetCloseOnUnref() (_return_ bool) {
	_cgo_return_ := C._g_io_channel_get_close_on_unref((*C.GIOChannel)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *IOChannel) GetEncoding() (_return_ *C.gchar) {
	_return_ = C._g_io_channel_get_encoding((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetFlags() (_return_ C.GIOFlags) {
	_return_ = C._g_io_channel_get_flags((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetLineTerm(length *C.gint) (_return_ *C.gchar) {
	_return_ = C._g_io_channel_get_line_term((*C.GIOChannel)(_self_), (*C.gint)(length))
	return
}

func (_self_ *IOChannel) Init() () {
	C._g_io_channel_init((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) ReadLine() (_return_ C.GIOStatus, str_return unsafe.Pointer, length C.gsize, terminator_pos C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_line((*C.GIOChannel)(_self_), unsafe.Pointer(str_return), (*C.gsize)(&length), (*C.gsize)(&terminator_pos), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) ReadLineString(buffer *String, terminator_pos *C.gsize) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_cgo_of_buffer_ := (*C.GString)(buffer)
	_return_ = C._g_io_channel_read_line_string((*C.GIOChannel)(_self_), (*C.GString)(_cgo_of_buffer_), (*C.gsize)(terminator_pos), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) ReadUnichar(thechar *C.gunichar) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_unichar((*C.GIOChannel)(_self_), (*C.gunichar)(thechar), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) Ref() (_return_ *IOChannel) {
	_cgo_return_ := C._g_io_channel_ref((*C.GIOChannel)(_self_))
	_return_ = (*IOChannel)(_cgo_return_)
	return
}

func (_self_ *IOChannel) SeekPosition(offset C.gint64, type_ C.GSeekType) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_seek_position((*C.GIOChannel)(_self_), (C.gint64)(offset), (C.GSeekType)(type_), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) SetBufferSize(size C.gsize) () {
	C._g_io_channel_set_buffer_size((*C.GIOChannel)(_self_), (C.gsize)(size))
	return
}

func (_self_ *IOChannel) SetBuffered(buffered C.gboolean) () {
	C._g_io_channel_set_buffered((*C.GIOChannel)(_self_), (C.gboolean)(buffered))
	return
}

func (_self_ *IOChannel) SetCloseOnUnref(do_close C.gboolean) () {
	C._g_io_channel_set_close_on_unref((*C.GIOChannel)(_self_), (C.gboolean)(do_close))
	return
}

func (_self_ *IOChannel) SetEncoding(encoding string) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_cgo_of_encoding_ := (*C.gchar)(unsafe.Pointer(C.CString(encoding)))
	_return_ = C._g_io_channel_set_encoding((*C.GIOChannel)(_self_), (*C.gchar)(_cgo_of_encoding_), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) SetFlags(flags C.GIOFlags) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_set_flags((*C.GIOChannel)(_self_), (C.GIOFlags)(flags), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) SetLineTerm(line_term string, length C.gint) () {
	_cgo_of_line_term_ := (*C.gchar)(unsafe.Pointer(C.CString(line_term)))
	C._g_io_channel_set_line_term((*C.GIOChannel)(_self_), (*C.gchar)(_cgo_of_line_term_), (C.gint)(length))
	return
}

func (_self_ *IOChannel) Shutdown(flush C.gboolean) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_shutdown((*C.GIOChannel)(_self_), (C.gboolean)(flush), unsafe.Pointer(_error_))
	return
}

func (_self_ *IOChannel) UnixGetFd() (_return_ int) {
	_cgo_return_ := C._g_io_channel_unix_get_fd((*C.GIOChannel)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *IOChannel) Unref() () {
	C._g_io_channel_unref((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) WriteUnichar(thechar C.gunichar) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_write_unichar((*C.GIOChannel)(_self_), (C.gunichar)(thechar), unsafe.Pointer(_error_))
	return
}

func KeyFileNew() (_return_ *KeyFile) {
	_cgo_return_ := C.g_key_file_new()
	_return_ = (*KeyFile)(_cgo_return_)
	return
}

func KeyFileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_key_file_error_quark()
	return
}

func (_self_ *KeyFile) Free() () {
	C._g_key_file_free((*C.GKeyFile)(_self_))
	return
}

func (_self_ *KeyFile) GetBoolean(group_name string, key string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_get_boolean((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) GetBooleanList(group_name string, key string) (_return_ *C.gboolean, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_boolean_list((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gsize)(&length), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetComment(group_name string, key string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_comment((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetDouble(group_name string, key string) (_return_ float64, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_get_double((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *KeyFile) GetDoubleList(group_name string, key string) (_return_ *C.gdouble, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_double_list((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gsize)(&length), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetGroups() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_key_file_get_groups((*C.GKeyFile)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *KeyFile) GetInt64(group_name string, key string) (_return_ int64, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_get_int64((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = int64(_cgo_return_)
	return
}

func (_self_ *KeyFile) GetInteger(group_name string, key string) (_return_ int, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_get_integer((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *KeyFile) GetIntegerList(group_name string, key string) (_return_ *C.gint, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_integer_list((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gsize)(&length), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetKeys(group_name string) (_return_ unsafe.Pointer, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_return_ = unsafe.Pointer(C._g_key_file_get_keys((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gsize)(&length), unsafe.Pointer(_error_)))
	return
}

func (_self_ *KeyFile) GetLocaleString(group_name string, key string, locale string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_locale_ := (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	_return_ = C._g_key_file_get_locale_string((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_locale_), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetLocaleStringList(group_name string, key string, locale string) (_return_ unsafe.Pointer, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_locale_ := (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	_return_ = unsafe.Pointer(C._g_key_file_get_locale_string_list((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_locale_), (*C.gsize)(&length), unsafe.Pointer(_error_)))
	return
}

func (_self_ *KeyFile) GetStartGroup() (_return_ *C.gchar) {
	_return_ = C._g_key_file_get_start_group((*C.GKeyFile)(_self_))
	return
}

func (_self_ *KeyFile) GetString(group_name string, key string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_string((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) GetStringList(group_name string, key string) (_return_ unsafe.Pointer, length C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = unsafe.Pointer(C._g_key_file_get_string_list((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gsize)(&length), unsafe.Pointer(_error_)))
	return
}

func (_self_ *KeyFile) GetUint64(group_name string, key string) (_return_ uint64, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_get_uint64((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *KeyFile) GetValue(group_name string, key string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_key_file_get_value((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) HasGroup(group_name string) (_return_ bool) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_return_ := C._g_key_file_has_group((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) HasKey(group_name string, key string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_has_key((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) LoadFromData(data string, length C.gsize, flags C.GKeyFileFlags) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_data_ := (*C.gchar)(unsafe.Pointer(C.CString(data)))
	_cgo_return_ := C._g_key_file_load_from_data((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_data_), (C.gsize)(length), (C.GKeyFileFlags)(flags), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) LoadFromDataDirs(file string, flags C.GKeyFileFlags) (_return_ bool, full_path unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_of_file_ := (*C.gchar)(unsafe.Pointer(C.CString(file)))
	_cgo_return_ := C._g_key_file_load_from_data_dirs((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_file_), unsafe.Pointer(full_path), (C.GKeyFileFlags)(flags), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) LoadFromFile(file string, flags C.GKeyFileFlags) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_file_ := (*C.gchar)(unsafe.Pointer(C.CString(file)))
	_cgo_return_ := C._g_key_file_load_from_file((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_file_), (C.GKeyFileFlags)(flags), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) Ref() (_return_ *KeyFile) {
	_cgo_return_ := C._g_key_file_ref((*C.GKeyFile)(_self_))
	_return_ = (*KeyFile)(_cgo_return_)
	return
}

func (_self_ *KeyFile) RemoveComment(group_name string, key string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_remove_comment((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) RemoveGroup(group_name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_return_ := C._g_key_file_remove_group((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) RemoveKey(group_name string, key string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_return_ := C._g_key_file_remove_key((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) SetBoolean(group_name string, key string, value C.gboolean) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._g_key_file_set_boolean((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (C.gboolean)(value))
	return
}

func (_self_ *KeyFile) SetComment(group_name string, key string, comment string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_comment_ := (*C.gchar)(unsafe.Pointer(C.CString(comment)))
	_cgo_return_ := C._g_key_file_set_comment((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_comment_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *KeyFile) SetDouble(group_name string, key string, value C.gdouble) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._g_key_file_set_double((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (C.gdouble)(value))
	return
}

func (_self_ *KeyFile) SetInt64(group_name string, key string, value C.gint64) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._g_key_file_set_int64((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (C.gint64)(value))
	return
}

func (_self_ *KeyFile) SetInteger(group_name string, key string, value C.gint) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._g_key_file_set_integer((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (C.gint)(value))
	return
}

func (_self_ *KeyFile) SetListSeparator(separator C.gchar) () {
	C._g_key_file_set_list_separator((*C.GKeyFile)(_self_), (C.gchar)(separator))
	return
}

func (_self_ *KeyFile) SetLocaleString(group_name string, key string, locale string, string_ string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_locale_ := (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	C._g_key_file_set_locale_string((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_locale_), (*C.gchar)(_cgo_of_string__))
	return
}

func (_self_ *KeyFile) SetString(group_name string, key string, string_ string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	C._g_key_file_set_string((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_string__))
	return
}

func (_self_ *KeyFile) SetUint64(group_name string, key string, value C.guint64) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._g_key_file_set_uint64((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (C.guint64)(value))
	return
}

func (_self_ *KeyFile) SetValue(group_name string, key string, value string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := (*C.gchar)(unsafe.Pointer(C.CString(value)))
	C._g_key_file_set_value((*C.GKeyFile)(_self_), (*C.gchar)(_cgo_of_group_name_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_value_))
	return
}

func (_self_ *KeyFile) ToData() (_return_ *C.gchar, length C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_to_data((*C.GKeyFile)(_self_), (*C.gsize)(&length), unsafe.Pointer(_error_))
	return
}

func (_self_ *KeyFile) Unref() () {
	C._g_key_file_unref((*C.GKeyFile)(_self_))
	return
}

func ListAlloc() (_return_ *List) {
	_cgo_return_ := C.g_list_alloc()
	_return_ = (*List)(_cgo_return_)
	return
}

func ListAppend(list *List, data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_append((*C.GList)(_cgo_of_list_), (C.gpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListConcat(list1 *List, list2 *List) (_return_ *List) {
	_cgo_of_list1_ := (*C.GList)(list1)
	_cgo_of_list2_ := (*C.GList)(list2)
	_cgo_return_ := C.g_list_concat((*C.GList)(_cgo_of_list1_), (*C.GList)(_cgo_of_list2_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListCopy(list *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_copy((*C.GList)(_cgo_of_list_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListCopyDeep(list *List, func_ C.GCopyFunc, user_data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_copy_deep((*C.GList)(_cgo_of_list_), (C.GCopyFunc)(func_), (C.gpointer)(user_data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListDeleteLink(list *List, link_ *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_of_link__ := (*C.GList)(link_)
	_cgo_return_ := C.g_list_delete_link((*C.GList)(_cgo_of_list_), (*C.GList)(_cgo_of_link__))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListFind(list *List, data C.gconstpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_find((*C.GList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListFindCustom(list *List, data C.gconstpointer, func_ C.GCompareFunc) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_find_custom((*C.GList)(_cgo_of_list_), (C.gconstpointer)(data), (C.GCompareFunc)(func_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListFirst(list *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_first((*C.GList)(_cgo_of_list_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListForeach(list *List, func_ C.GFunc, user_data C.gpointer) () {
	_cgo_of_list_ := (*C.GList)(list)
	C.g_list_foreach((*C.GList)(_cgo_of_list_), (C.GFunc)(func_), (C.gpointer)(user_data))
	return
}

func ListFree(list *List) () {
	_cgo_of_list_ := (*C.GList)(list)
	C.g_list_free((*C.GList)(_cgo_of_list_))
	return
}

func ListFree1(list *List) () {
	_cgo_of_list_ := (*C.GList)(list)
	C.g_list_free_1((*C.GList)(_cgo_of_list_))
	return
}

func ListFreeFull(list *List, free_func C.GDestroyNotify) () {
	_cgo_of_list_ := (*C.GList)(list)
	C.g_list_free_full((*C.GList)(_cgo_of_list_), (C.GDestroyNotify)(free_func))
	return
}

func ListIndex(list *List, data C.gconstpointer) (_return_ int) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_index((*C.GList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = int(_cgo_return_)
	return
}

func ListInsert(list *List, data C.gpointer, position C.gint) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_insert((*C.GList)(_cgo_of_list_), (C.gpointer)(data), (C.gint)(position))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListInsertBefore(list *List, sibling *List, data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_of_sibling_ := (*C.GList)(sibling)
	_cgo_return_ := C.g_list_insert_before((*C.GList)(_cgo_of_list_), (*C.GList)(_cgo_of_sibling_), (C.gpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListInsertSorted(list *List, data C.gpointer, func_ C.GCompareFunc) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_insert_sorted((*C.GList)(_cgo_of_list_), (C.gpointer)(data), (C.GCompareFunc)(func_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListInsertSortedWithData(list *List, data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_insert_sorted_with_data((*C.GList)(_cgo_of_list_), (C.gpointer)(data), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListLast(list *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_last((*C.GList)(_cgo_of_list_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListLength(list *List) (_return_ uint) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_length((*C.GList)(_cgo_of_list_))
	_return_ = uint(_cgo_return_)
	return
}

func ListNth(list *List, n C.guint) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_nth((*C.GList)(_cgo_of_list_), (C.guint)(n))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListNthData(list *List, n C.guint) (_return_ C.gpointer) {
	_cgo_of_list_ := (*C.GList)(list)
	_return_ = C.g_list_nth_data((*C.GList)(_cgo_of_list_), (C.guint)(n))
	return
}

func ListNthPrev(list *List, n C.guint) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_nth_prev((*C.GList)(_cgo_of_list_), (C.guint)(n))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListPosition(list *List, llink *List) (_return_ int) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_of_llink_ := (*C.GList)(llink)
	_cgo_return_ := C.g_list_position((*C.GList)(_cgo_of_list_), (*C.GList)(_cgo_of_llink_))
	_return_ = int(_cgo_return_)
	return
}

func ListPrepend(list *List, data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_prepend((*C.GList)(_cgo_of_list_), (C.gpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListRemove(list *List, data C.gconstpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_remove((*C.GList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListRemoveAll(list *List, data C.gconstpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_remove_all((*C.GList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListRemoveLink(list *List, llink *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_of_llink_ := (*C.GList)(llink)
	_cgo_return_ := C.g_list_remove_link((*C.GList)(_cgo_of_list_), (*C.GList)(_cgo_of_llink_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListReverse(list *List) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_reverse((*C.GList)(_cgo_of_list_))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListSort(list *List, compare_func C.GCompareFunc) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_sort((*C.GList)(_cgo_of_list_), (C.GCompareFunc)(compare_func))
	_return_ = (*List)(_cgo_return_)
	return
}

func ListSortWithData(list *List, compare_func C.GCompareDataFunc, user_data C.gpointer) (_return_ *List) {
	_cgo_of_list_ := (*C.GList)(list)
	_cgo_return_ := C.g_list_sort_with_data((*C.GList)(_cgo_of_list_), (C.GCompareDataFunc)(compare_func), (C.gpointer)(user_data))
	_return_ = (*List)(_cgo_return_)
	return
}

func MainContextNew() (_return_ *MainContext) {
	_cgo_return_ := C.g_main_context_new()
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func MainContextDefault() (_return_ *MainContext) {
	_cgo_return_ := C.g_main_context_default()
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func MainContextGetThreadDefault() (_return_ *MainContext) {
	_cgo_return_ := C.g_main_context_get_thread_default()
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func MainContextRefThreadDefault() (_return_ *MainContext) {
	_cgo_return_ := C.g_main_context_ref_thread_default()
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func (_self_ *MainContext) Acquire() (_return_ bool) {
	_cgo_return_ := C._g_main_context_acquire((*C.GMainContext)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) AddPoll(fd *PollFD, priority C.gint) () {
	_cgo_of_fd_ := (*C.GPollFD)(fd)
	C._g_main_context_add_poll((*C.GMainContext)(_self_), (*C.GPollFD)(_cgo_of_fd_), (C.gint)(priority))
	return
}

func (_self_ *MainContext) Dispatch() () {
	C._g_main_context_dispatch((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) FindSourceByFuncsUserData(funcs *SourceFuncs, user_data C.gpointer) (_return_ *Source) {
	_cgo_of_funcs_ := (*C.GSourceFuncs)(funcs)
	_cgo_return_ := C._g_main_context_find_source_by_funcs_user_data((*C.GMainContext)(_self_), (*C.GSourceFuncs)(_cgo_of_funcs_), (C.gpointer)(user_data))
	_return_ = (*Source)(_cgo_return_)
	return
}

func (_self_ *MainContext) FindSourceById(source_id C.guint) (_return_ *Source) {
	_cgo_return_ := C._g_main_context_find_source_by_id((*C.GMainContext)(_self_), (C.guint)(source_id))
	_return_ = (*Source)(_cgo_return_)
	return
}

func (_self_ *MainContext) FindSourceByUserData(user_data C.gpointer) (_return_ *Source) {
	_cgo_return_ := C._g_main_context_find_source_by_user_data((*C.GMainContext)(_self_), (C.gpointer)(user_data))
	_return_ = (*Source)(_cgo_return_)
	return
}

func (_self_ *MainContext) GetPollFunc() (_return_ C.GPollFunc) {
	_return_ = C._g_main_context_get_poll_func((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Invoke(function C.GSourceFunc, data C.gpointer) () {
	C._g_main_context_invoke((*C.GMainContext)(_self_), (C.GSourceFunc)(function), (C.gpointer)(data))
	return
}

func (_self_ *MainContext) InvokeFull(priority C.gint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C._g_main_context_invoke_full((*C.GMainContext)(_self_), (C.gint)(priority), (C.GSourceFunc)(function), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	return
}

func (_self_ *MainContext) IsOwner() (_return_ bool) {
	_cgo_return_ := C._g_main_context_is_owner((*C.GMainContext)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) Iteration(may_block C.gboolean) (_return_ bool) {
	_cgo_return_ := C._g_main_context_iteration((*C.GMainContext)(_self_), (C.gboolean)(may_block))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) Pending() (_return_ bool) {
	_cgo_return_ := C._g_main_context_pending((*C.GMainContext)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) PopThreadDefault() () {
	C._g_main_context_pop_thread_default((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Prepare(priority *C.gint) (_return_ bool) {
	_cgo_return_ := C._g_main_context_prepare((*C.GMainContext)(_self_), (*C.gint)(priority))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) PushThreadDefault() () {
	C._g_main_context_push_thread_default((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Ref() (_return_ *MainContext) {
	_cgo_return_ := C._g_main_context_ref((*C.GMainContext)(_self_))
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func (_self_ *MainContext) Release() () {
	C._g_main_context_release((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) RemovePoll(fd *PollFD) () {
	_cgo_of_fd_ := (*C.GPollFD)(fd)
	C._g_main_context_remove_poll((*C.GMainContext)(_self_), (*C.GPollFD)(_cgo_of_fd_))
	return
}

func (_self_ *MainContext) SetPollFunc(func_ C.GPollFunc) () {
	C._g_main_context_set_poll_func((*C.GMainContext)(_self_), (C.GPollFunc)(func_))
	return
}

func (_self_ *MainContext) Unref() () {
	C._g_main_context_unref((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Wait(cond *Cond, mutex *C.GMutex) (_return_ bool) {
	_cgo_of_cond_ := (*C.GCond)(cond)
	_cgo_return_ := C._g_main_context_wait((*C.GMainContext)(_self_), (*C.GCond)(_cgo_of_cond_), (*C.GMutex)(mutex))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainContext) Wakeup() () {
	C._g_main_context_wakeup((*C.GMainContext)(_self_))
	return
}

func MainLoopNew(context *MainContext, is_running C.gboolean) (_return_ *MainLoop) {
	_cgo_of_context_ := (*C.GMainContext)(context)
	_cgo_return_ := C.g_main_loop_new((*C.GMainContext)(_cgo_of_context_), (C.gboolean)(is_running))
	_return_ = (*MainLoop)(_cgo_return_)
	return
}

func (_self_ *MainLoop) GetContext() (_return_ *MainContext) {
	_cgo_return_ := C._g_main_loop_get_context((*C.GMainLoop)(_self_))
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func (_self_ *MainLoop) IsRunning() (_return_ bool) {
	_cgo_return_ := C._g_main_loop_is_running((*C.GMainLoop)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MainLoop) Quit() () {
	C._g_main_loop_quit((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Ref() (_return_ *MainLoop) {
	_cgo_return_ := C._g_main_loop_ref((*C.GMainLoop)(_self_))
	_return_ = (*MainLoop)(_cgo_return_)
	return
}

func (_self_ *MainLoop) Run() () {
	C._g_main_loop_run((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Unref() () {
	C._g_main_loop_unref((*C.GMainLoop)(_self_))
	return
}

func MappedFileNew(filename string, writable C.gboolean) (_return_ *MappedFile, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_return_ := C._g_mapped_file_new((*C.gchar)(_cgo_of_filename_), (C.gboolean)(writable), unsafe.Pointer(_error_))
	_return_ = (*MappedFile)(_cgo_return_)
	return
}

func MappedFileNewFromFd(fd C.gint, writable C.gboolean) (_return_ *MappedFile, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_mapped_file_new_from_fd((C.gint)(fd), (C.gboolean)(writable), unsafe.Pointer(_error_))
	_return_ = (*MappedFile)(_cgo_return_)
	return
}

func (_self_ *MappedFile) GetBytes() (_return_ *Bytes) {
	_cgo_return_ := C._g_mapped_file_get_bytes((*C.GMappedFile)(_self_))
	_return_ = (*Bytes)(_cgo_return_)
	return
}

func (_self_ *MappedFile) GetContents() (_return_ *C.gchar) {
	_return_ = C._g_mapped_file_get_contents((*C.GMappedFile)(_self_))
	return
}

func (_self_ *MappedFile) GetLength() (_return_ uint64) {
	_cgo_return_ := C._g_mapped_file_get_length((*C.GMappedFile)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *MappedFile) Ref() (_return_ *MappedFile) {
	_cgo_return_ := C._g_mapped_file_ref((*C.GMappedFile)(_self_))
	_return_ = (*MappedFile)(_cgo_return_)
	return
}

func (_self_ *MappedFile) Unref() () {
	C._g_mapped_file_unref((*C.GMappedFile)(_self_))
	return
}

func MarkupParseContextNew(parser *MarkupParser, flags C.GMarkupParseFlags, user_data C.gpointer, user_data_dnotify C.GDestroyNotify) (_return_ *MarkupParseContext) {
	_cgo_of_parser_ := (*C.GMarkupParser)(parser)
	_cgo_return_ := C._g_markup_parse_context_new((*C.GMarkupParser)(_cgo_of_parser_), (C.GMarkupParseFlags)(flags), (C.gpointer)(user_data), (C.GDestroyNotify)(user_data_dnotify))
	_return_ = (*MarkupParseContext)(_cgo_return_)
	return
}

func (_self_ *MarkupParseContext) EndParse() (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_markup_parse_context_end_parse((*C.GMarkupParseContext)(_self_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MarkupParseContext) Free() () {
	C._g_markup_parse_context_free((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) GetElement() (_return_ *C.gchar) {
	_return_ = C._g_markup_parse_context_get_element((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) GetElementStack() (_return_ *SList) {
	_cgo_return_ := C._g_markup_parse_context_get_element_stack((*C.GMarkupParseContext)(_self_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func (_self_ *MarkupParseContext) GetPosition(line_number *C.gint, char_number *C.gint) () {
	C._g_markup_parse_context_get_position((*C.GMarkupParseContext)(_self_), (*C.gint)(line_number), (*C.gint)(char_number))
	return
}

func (_self_ *MarkupParseContext) GetUserData() (_return_ C.gpointer) {
	_return_ = C._g_markup_parse_context_get_user_data((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) Parse(text string, text_len C.gssize) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_return_ := C._g_markup_parse_context_parse((*C.GMarkupParseContext)(_self_), (*C.gchar)(_cgo_of_text_), (C.gssize)(text_len), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MarkupParseContext) Pop() (_return_ C.gpointer) {
	_return_ = C._g_markup_parse_context_pop((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) Push(parser *MarkupParser, user_data C.gpointer) () {
	_cgo_of_parser_ := (*C.GMarkupParser)(parser)
	C._g_markup_parse_context_push((*C.GMarkupParseContext)(_self_), (*C.GMarkupParser)(_cgo_of_parser_), (C.gpointer)(user_data))
	return
}

func (_self_ *MatchInfo) ExpandReferences(string_to_expand string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_string_to_expand_ := (*C.gchar)(unsafe.Pointer(C.CString(string_to_expand)))
	_return_ = C._g_match_info_expand_references((*C.GMatchInfo)(_self_), (*C.gchar)(_cgo_of_string_to_expand_), unsafe.Pointer(_error_))
	return
}

func (_self_ *MatchInfo) Fetch(match_num C.gint) (_return_ *C.gchar) {
	_return_ = C._g_match_info_fetch((*C.GMatchInfo)(_self_), (C.gint)(match_num))
	return
}

func (_self_ *MatchInfo) FetchAll() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._g_match_info_fetch_all((*C.GMatchInfo)(_self_)))
	return
}

func (_self_ *MatchInfo) FetchNamed(name string) (_return_ *C.gchar) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_return_ = C._g_match_info_fetch_named((*C.GMatchInfo)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *MatchInfo) FetchNamedPos(name string) (_return_ bool, start_pos C.gint, end_pos C.gint) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_match_info_fetch_named_pos((*C.GMatchInfo)(_self_), (*C.gchar)(_cgo_of_name_), (*C.gint)(&start_pos), (*C.gint)(&end_pos))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MatchInfo) FetchPos(match_num C.gint) (_return_ bool, start_pos C.gint, end_pos C.gint) {
	_cgo_return_ := C._g_match_info_fetch_pos((*C.GMatchInfo)(_self_), (C.gint)(match_num), (*C.gint)(&start_pos), (*C.gint)(&end_pos))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MatchInfo) Free() () {
	C._g_match_info_free((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) GetMatchCount() (_return_ int) {
	_cgo_return_ := C._g_match_info_get_match_count((*C.GMatchInfo)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *MatchInfo) GetRegex() (_return_ *Regex) {
	_cgo_return_ := C._g_match_info_get_regex((*C.GMatchInfo)(_self_))
	_return_ = (*Regex)(_cgo_return_)
	return
}

func (_self_ *MatchInfo) GetString() (_return_ *C.gchar) {
	_return_ = C._g_match_info_get_string((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) IsPartialMatch() (_return_ bool) {
	_cgo_return_ := C._g_match_info_is_partial_match((*C.GMatchInfo)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MatchInfo) Matches() (_return_ bool) {
	_cgo_return_ := C._g_match_info_matches((*C.GMatchInfo)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MatchInfo) Next() (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_match_info_next((*C.GMatchInfo)(_self_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *MatchInfo) Ref() (_return_ *MatchInfo) {
	_cgo_return_ := C._g_match_info_ref((*C.GMatchInfo)(_self_))
	_return_ = (*MatchInfo)(_cgo_return_)
	return
}

func (_self_ *MatchInfo) Unref() () {
	C._g_match_info_unref((*C.GMatchInfo)(_self_))
	return
}

func NodeNew(data C.gpointer) (_return_ *Node) {
	_cgo_return_ := C.g_node_new((C.gpointer)(data))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) ChildIndex(data C.gpointer) (_return_ int) {
	_cgo_return_ := C._g_node_child_index((*C.GNode)(_self_), (C.gpointer)(data))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Node) ChildPosition(child *Node) (_return_ int) {
	_cgo_of_child_ := (*C.GNode)(child)
	_cgo_return_ := C._g_node_child_position((*C.GNode)(_self_), (*C.GNode)(_cgo_of_child_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Node) ChildrenForeach(flags C.GTraverseFlags, func_ C.GNodeForeachFunc, data C.gpointer) () {
	C._g_node_children_foreach((*C.GNode)(_self_), (C.GTraverseFlags)(flags), (C.GNodeForeachFunc)(func_), (C.gpointer)(data))
	return
}

func (_self_ *Node) Copy() (_return_ *Node) {
	_cgo_return_ := C._g_node_copy((*C.GNode)(_self_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) CopyDeep(copy_func C.GCopyFunc, data C.gpointer) (_return_ *Node) {
	_cgo_return_ := C._g_node_copy_deep((*C.GNode)(_self_), (C.GCopyFunc)(copy_func), (C.gpointer)(data))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) Depth() (_return_ uint) {
	_cgo_return_ := C._g_node_depth((*C.GNode)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Node) Destroy() () {
	C._g_node_destroy((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Find(order C.GTraverseType, flags C.GTraverseFlags, data C.gpointer) (_return_ *Node) {
	_cgo_return_ := C._g_node_find((*C.GNode)(_self_), (C.GTraverseType)(order), (C.GTraverseFlags)(flags), (C.gpointer)(data))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) FindChild(flags C.GTraverseFlags, data C.gpointer) (_return_ *Node) {
	_cgo_return_ := C._g_node_find_child((*C.GNode)(_self_), (C.GTraverseFlags)(flags), (C.gpointer)(data))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) FirstSibling() (_return_ *Node) {
	_cgo_return_ := C._g_node_first_sibling((*C.GNode)(_self_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) GetRoot() (_return_ *Node) {
	_cgo_return_ := C._g_node_get_root((*C.GNode)(_self_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) Insert(position C.gint, node *Node) (_return_ *Node) {
	_cgo_of_node_ := (*C.GNode)(node)
	_cgo_return_ := C._g_node_insert((*C.GNode)(_self_), (C.gint)(position), (*C.GNode)(_cgo_of_node_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) InsertAfter(sibling *Node, node *Node) (_return_ *Node) {
	_cgo_of_sibling_ := (*C.GNode)(sibling)
	_cgo_of_node_ := (*C.GNode)(node)
	_cgo_return_ := C._g_node_insert_after((*C.GNode)(_self_), (*C.GNode)(_cgo_of_sibling_), (*C.GNode)(_cgo_of_node_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) InsertBefore(sibling *Node, node *Node) (_return_ *Node) {
	_cgo_of_sibling_ := (*C.GNode)(sibling)
	_cgo_of_node_ := (*C.GNode)(node)
	_cgo_return_ := C._g_node_insert_before((*C.GNode)(_self_), (*C.GNode)(_cgo_of_sibling_), (*C.GNode)(_cgo_of_node_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) IsAncestor(descendant *Node) (_return_ bool) {
	_cgo_of_descendant_ := (*C.GNode)(descendant)
	_cgo_return_ := C._g_node_is_ancestor((*C.GNode)(_self_), (*C.GNode)(_cgo_of_descendant_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Node) LastChild() (_return_ *Node) {
	_cgo_return_ := C._g_node_last_child((*C.GNode)(_self_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) LastSibling() (_return_ *Node) {
	_cgo_return_ := C._g_node_last_sibling((*C.GNode)(_self_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) MaxHeight() (_return_ uint) {
	_cgo_return_ := C._g_node_max_height((*C.GNode)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Node) NChildren() (_return_ uint) {
	_cgo_return_ := C._g_node_n_children((*C.GNode)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Node) NNodes(flags C.GTraverseFlags) (_return_ uint) {
	_cgo_return_ := C._g_node_n_nodes((*C.GNode)(_self_), (C.GTraverseFlags)(flags))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Node) NthChild(n C.guint) (_return_ *Node) {
	_cgo_return_ := C._g_node_nth_child((*C.GNode)(_self_), (C.guint)(n))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) Prepend(node *Node) (_return_ *Node) {
	_cgo_of_node_ := (*C.GNode)(node)
	_cgo_return_ := C._g_node_prepend((*C.GNode)(_self_), (*C.GNode)(_cgo_of_node_))
	_return_ = (*Node)(_cgo_return_)
	return
}

func (_self_ *Node) ReverseChildren() () {
	C._g_node_reverse_children((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Traverse(order C.GTraverseType, flags C.GTraverseFlags, max_depth C.gint, func_ C.GNodeTraverseFunc, data C.gpointer) () {
	C._g_node_traverse((*C.GNode)(_self_), (C.GTraverseType)(order), (C.GTraverseFlags)(flags), (C.gint)(max_depth), (C.GNodeTraverseFunc)(func_), (C.gpointer)(data))
	return
}

func (_self_ *Node) Unlink() () {
	C._g_node_unlink((*C.GNode)(_self_))
	return
}

func (_self_ *Once) Impl(func_ C.GThreadFunc, arg C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_once_impl((*C.GOnce)(_self_), (C.GThreadFunc)(func_), (C.gpointer)(arg))
	return
}

func OptionContextNew(parameter_string string) (_return_ *OptionContext) {
	_cgo_of_parameter_string_ := (*C.gchar)(unsafe.Pointer(C.CString(parameter_string)))
	_cgo_return_ := C._g_option_context_new((*C.gchar)(_cgo_of_parameter_string_))
	_return_ = (*OptionContext)(_cgo_return_)
	return
}

func (_self_ *OptionContext) AddGroup(group *OptionGroup) () {
	_cgo_of_group_ := (*C.GOptionGroup)(group)
	C._g_option_context_add_group((*C.GOptionContext)(_self_), (*C.GOptionGroup)(_cgo_of_group_))
	return
}

func (_self_ *OptionContext) AddMainEntries(entries *OptionEntry, translation_domain string) () {
	_cgo_of_entries_ := (*C.GOptionEntry)(entries)
	_cgo_of_translation_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(translation_domain)))
	C._g_option_context_add_main_entries((*C.GOptionContext)(_self_), (*C.GOptionEntry)(_cgo_of_entries_), (*C.gchar)(_cgo_of_translation_domain_))
	return
}

func (_self_ *OptionContext) Free() () {
	C._g_option_context_free((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetDescription() (_return_ *C.gchar) {
	_return_ = C._g_option_context_get_description((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetHelp(main_help C.gboolean, group *OptionGroup) (_return_ *C.gchar) {
	_cgo_of_group_ := (*C.GOptionGroup)(group)
	_return_ = C._g_option_context_get_help((*C.GOptionContext)(_self_), (C.gboolean)(main_help), (*C.GOptionGroup)(_cgo_of_group_))
	return
}

func (_self_ *OptionContext) GetHelpEnabled() (_return_ bool) {
	_cgo_return_ := C._g_option_context_get_help_enabled((*C.GOptionContext)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *OptionContext) GetIgnoreUnknownOptions() (_return_ bool) {
	_cgo_return_ := C._g_option_context_get_ignore_unknown_options((*C.GOptionContext)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *OptionContext) GetMainGroup() (_return_ *OptionGroup) {
	_cgo_return_ := C._g_option_context_get_main_group((*C.GOptionContext)(_self_))
	_return_ = (*OptionGroup)(_cgo_return_)
	return
}

func (_self_ *OptionContext) GetSummary() (_return_ *C.gchar) {
	_return_ = C._g_option_context_get_summary((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) SetDescription(description string) () {
	_cgo_of_description_ := (*C.gchar)(unsafe.Pointer(C.CString(description)))
	C._g_option_context_set_description((*C.GOptionContext)(_self_), (*C.gchar)(_cgo_of_description_))
	return
}

func (_self_ *OptionContext) SetHelpEnabled(help_enabled C.gboolean) () {
	C._g_option_context_set_help_enabled((*C.GOptionContext)(_self_), (C.gboolean)(help_enabled))
	return
}

func (_self_ *OptionContext) SetIgnoreUnknownOptions(ignore_unknown C.gboolean) () {
	C._g_option_context_set_ignore_unknown_options((*C.GOptionContext)(_self_), (C.gboolean)(ignore_unknown))
	return
}

func (_self_ *OptionContext) SetMainGroup(group *OptionGroup) () {
	_cgo_of_group_ := (*C.GOptionGroup)(group)
	C._g_option_context_set_main_group((*C.GOptionContext)(_self_), (*C.GOptionGroup)(_cgo_of_group_))
	return
}

func (_self_ *OptionContext) SetSummary(summary string) () {
	_cgo_of_summary_ := (*C.gchar)(unsafe.Pointer(C.CString(summary)))
	C._g_option_context_set_summary((*C.GOptionContext)(_self_), (*C.gchar)(_cgo_of_summary_))
	return
}

func (_self_ *OptionContext) SetTranslateFunc(func_ C.GTranslateFunc, data C.gpointer, destroy_notify C.GDestroyNotify) () {
	C._g_option_context_set_translate_func((*C.GOptionContext)(_self_), (C.GTranslateFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy_notify))
	return
}

func (_self_ *OptionContext) SetTranslationDomain(domain string) () {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	C._g_option_context_set_translation_domain((*C.GOptionContext)(_self_), (*C.gchar)(_cgo_of_domain_))
	return
}

func OptionGroupNew(name string, description string, help_description string, user_data C.gpointer, destroy C.GDestroyNotify) (_return_ *OptionGroup) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_description_ := (*C.gchar)(unsafe.Pointer(C.CString(description)))
	_cgo_of_help_description_ := (*C.gchar)(unsafe.Pointer(C.CString(help_description)))
	_cgo_return_ := C._g_option_group_new((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_description_), (*C.gchar)(_cgo_of_help_description_), (C.gpointer)(user_data), (C.GDestroyNotify)(destroy))
	_return_ = (*OptionGroup)(_cgo_return_)
	return
}

func (_self_ *OptionGroup) AddEntries(entries *OptionEntry) () {
	_cgo_of_entries_ := (*C.GOptionEntry)(entries)
	C._g_option_group_add_entries((*C.GOptionGroup)(_self_), (*C.GOptionEntry)(_cgo_of_entries_))
	return
}

func (_self_ *OptionGroup) Free() () {
	C._g_option_group_free((*C.GOptionGroup)(_self_))
	return
}

func (_self_ *OptionGroup) SetErrorHook(error_func C.GOptionErrorFunc) () {
	C._g_option_group_set_error_hook((*C.GOptionGroup)(_self_), (C.GOptionErrorFunc)(error_func))
	return
}

func (_self_ *OptionGroup) SetParseHooks(pre_parse_func C.GOptionParseFunc, post_parse_func C.GOptionParseFunc) () {
	C._g_option_group_set_parse_hooks((*C.GOptionGroup)(_self_), (C.GOptionParseFunc)(pre_parse_func), (C.GOptionParseFunc)(post_parse_func))
	return
}

func (_self_ *OptionGroup) SetTranslateFunc(func_ C.GTranslateFunc, data C.gpointer, destroy_notify C.GDestroyNotify) () {
	C._g_option_group_set_translate_func((*C.GOptionGroup)(_self_), (C.GTranslateFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy_notify))
	return
}

func (_self_ *OptionGroup) SetTranslationDomain(domain string) () {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	C._g_option_group_set_translation_domain((*C.GOptionGroup)(_self_), (*C.gchar)(_cgo_of_domain_))
	return
}

func PatternSpecNew(pattern string) (_return_ *PatternSpec) {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	_cgo_return_ := C._g_pattern_spec_new((*C.gchar)(_cgo_of_pattern_))
	_return_ = (*PatternSpec)(_cgo_return_)
	return
}

func (_self_ *PatternSpec) Equal(pspec2 *PatternSpec) (_return_ bool) {
	_cgo_of_pspec2_ := (*C.GPatternSpec)(pspec2)
	_cgo_return_ := C._g_pattern_spec_equal((*C.GPatternSpec)(_self_), (*C.GPatternSpec)(_cgo_of_pspec2_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *PatternSpec) Free() () {
	C._g_pattern_spec_free((*C.GPatternSpec)(_self_))
	return
}

func (_self_ *Private) Get() (_return_ C.gpointer) {
	_return_ = C._g_private_get((*C.GPrivate)(_self_))
	return
}

func (_self_ *Private) Replace(value C.gpointer) () {
	C._g_private_replace((*C.GPrivate)(_self_), (C.gpointer)(value))
	return
}

func (_self_ *Private) Set(value C.gpointer) () {
	C._g_private_set((*C.GPrivate)(_self_), (C.gpointer)(value))
	return
}

func PtrArrayNew() (_return_ *PtrArray) {
	_cgo_return_ := C.g_ptr_array_new()
	_return_ = (*PtrArray)(_cgo_return_)
	return
}

func PtrArrayNewFull(reserved_size C.guint, element_free_func C.GDestroyNotify) (_return_ *PtrArray) {
	_cgo_return_ := C.g_ptr_array_new_full((C.guint)(reserved_size), (C.GDestroyNotify)(element_free_func))
	_return_ = (*PtrArray)(_cgo_return_)
	return
}

func PtrArrayNewWithFreeFunc(element_free_func C.GDestroyNotify) (_return_ *PtrArray) {
	_cgo_return_ := C.g_ptr_array_new_with_free_func((C.GDestroyNotify)(element_free_func))
	_return_ = (*PtrArray)(_cgo_return_)
	return
}

func PtrArraySizedNew(reserved_size C.guint) (_return_ *PtrArray) {
	_cgo_return_ := C.g_ptr_array_sized_new((C.guint)(reserved_size))
	_return_ = (*PtrArray)(_cgo_return_)
	return
}

func QueueNew() (_return_ *Queue) {
	_cgo_return_ := C.g_queue_new()
	_return_ = (*Queue)(_cgo_return_)
	return
}

func (_self_ *Queue) Clear() () {
	C._g_queue_clear((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) Copy() (_return_ *Queue) {
	_cgo_return_ := C._g_queue_copy((*C.GQueue)(_self_))
	_return_ = (*Queue)(_cgo_return_)
	return
}

func (_self_ *Queue) DeleteLink(link_ *List) () {
	_cgo_of_link__ := (*C.GList)(link_)
	C._g_queue_delete_link((*C.GQueue)(_self_), (*C.GList)(_cgo_of_link__))
	return
}

func (_self_ *Queue) Find(data C.gconstpointer) (_return_ *List) {
	_cgo_return_ := C._g_queue_find((*C.GQueue)(_self_), (C.gconstpointer)(data))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) FindCustom(data C.gconstpointer, func_ C.GCompareFunc) (_return_ *List) {
	_cgo_return_ := C._g_queue_find_custom((*C.GQueue)(_self_), (C.gconstpointer)(data), (C.GCompareFunc)(func_))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) Foreach(func_ C.GFunc, user_data C.gpointer) () {
	C._g_queue_foreach((*C.GQueue)(_self_), (C.GFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Queue) Free() () {
	C._g_queue_free((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) FreeFull(free_func C.GDestroyNotify) () {
	C._g_queue_free_full((*C.GQueue)(_self_), (C.GDestroyNotify)(free_func))
	return
}

func (_self_ *Queue) GetLength() (_return_ uint) {
	_cgo_return_ := C._g_queue_get_length((*C.GQueue)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Queue) Index(data C.gconstpointer) (_return_ int) {
	_cgo_return_ := C._g_queue_index((*C.GQueue)(_self_), (C.gconstpointer)(data))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Queue) Init() () {
	C._g_queue_init((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) InsertAfter(sibling *List, data C.gpointer) () {
	_cgo_of_sibling_ := (*C.GList)(sibling)
	C._g_queue_insert_after((*C.GQueue)(_self_), (*C.GList)(_cgo_of_sibling_), (C.gpointer)(data))
	return
}

func (_self_ *Queue) InsertBefore(sibling *List, data C.gpointer) () {
	_cgo_of_sibling_ := (*C.GList)(sibling)
	C._g_queue_insert_before((*C.GQueue)(_self_), (*C.GList)(_cgo_of_sibling_), (C.gpointer)(data))
	return
}

func (_self_ *Queue) InsertSorted(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_queue_insert_sorted((*C.GQueue)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Queue) IsEmpty() (_return_ bool) {
	_cgo_return_ := C._g_queue_is_empty((*C.GQueue)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Queue) LinkIndex(link_ *List) (_return_ int) {
	_cgo_of_link__ := (*C.GList)(link_)
	_cgo_return_ := C._g_queue_link_index((*C.GQueue)(_self_), (*C.GList)(_cgo_of_link__))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Queue) PeekHead() (_return_ C.gpointer) {
	_return_ = C._g_queue_peek_head((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PeekHeadLink() (_return_ *List) {
	_cgo_return_ := C._g_queue_peek_head_link((*C.GQueue)(_self_))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PeekNth(n C.guint) (_return_ C.gpointer) {
	_return_ = C._g_queue_peek_nth((*C.GQueue)(_self_), (C.guint)(n))
	return
}

func (_self_ *Queue) PeekNthLink(n C.guint) (_return_ *List) {
	_cgo_return_ := C._g_queue_peek_nth_link((*C.GQueue)(_self_), (C.guint)(n))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PeekTail() (_return_ C.gpointer) {
	_return_ = C._g_queue_peek_tail((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PeekTailLink() (_return_ *List) {
	_cgo_return_ := C._g_queue_peek_tail_link((*C.GQueue)(_self_))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PopHead() (_return_ C.gpointer) {
	_return_ = C._g_queue_pop_head((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopHeadLink() (_return_ *List) {
	_cgo_return_ := C._g_queue_pop_head_link((*C.GQueue)(_self_))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PopNth(n C.guint) (_return_ C.gpointer) {
	_return_ = C._g_queue_pop_nth((*C.GQueue)(_self_), (C.guint)(n))
	return
}

func (_self_ *Queue) PopNthLink(n C.guint) (_return_ *List) {
	_cgo_return_ := C._g_queue_pop_nth_link((*C.GQueue)(_self_), (C.guint)(n))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PopTail() (_return_ C.gpointer) {
	_return_ = C._g_queue_pop_tail((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopTailLink() (_return_ *List) {
	_cgo_return_ := C._g_queue_pop_tail_link((*C.GQueue)(_self_))
	_return_ = (*List)(_cgo_return_)
	return
}

func (_self_ *Queue) PushHead(data C.gpointer) () {
	C._g_queue_push_head((*C.GQueue)(_self_), (C.gpointer)(data))
	return
}

func (_self_ *Queue) PushHeadLink(link_ *List) () {
	_cgo_of_link__ := (*C.GList)(link_)
	C._g_queue_push_head_link((*C.GQueue)(_self_), (*C.GList)(_cgo_of_link__))
	return
}

func (_self_ *Queue) PushNth(data C.gpointer, n C.gint) () {
	C._g_queue_push_nth((*C.GQueue)(_self_), (C.gpointer)(data), (C.gint)(n))
	return
}

func (_self_ *Queue) PushNthLink(n C.gint, link_ *List) () {
	_cgo_of_link__ := (*C.GList)(link_)
	C._g_queue_push_nth_link((*C.GQueue)(_self_), (C.gint)(n), (*C.GList)(_cgo_of_link__))
	return
}

func (_self_ *Queue) PushTail(data C.gpointer) () {
	C._g_queue_push_tail((*C.GQueue)(_self_), (C.gpointer)(data))
	return
}

func (_self_ *Queue) PushTailLink(link_ *List) () {
	_cgo_of_link__ := (*C.GList)(link_)
	C._g_queue_push_tail_link((*C.GQueue)(_self_), (*C.GList)(_cgo_of_link__))
	return
}

func (_self_ *Queue) Remove(data C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_queue_remove((*C.GQueue)(_self_), (C.gconstpointer)(data))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Queue) RemoveAll(data C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C._g_queue_remove_all((*C.GQueue)(_self_), (C.gconstpointer)(data))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Queue) Reverse() () {
	C._g_queue_reverse((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) Sort(compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_queue_sort((*C.GQueue)(_self_), (C.GCompareDataFunc)(compare_func), (C.gpointer)(user_data))
	return
}

func (_self_ *Queue) Unlink(link_ *List) () {
	_cgo_of_link__ := (*C.GList)(link_)
	C._g_queue_unlink((*C.GQueue)(_self_), (*C.GList)(_cgo_of_link__))
	return
}

func (_self_ *RWLock) Clear() () {
	C._g_rw_lock_clear((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) Init() () {
	C._g_rw_lock_init((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) ReaderLock() () {
	C._g_rw_lock_reader_lock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) ReaderTrylock() (_return_ bool) {
	_cgo_return_ := C._g_rw_lock_reader_trylock((*C.GRWLock)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *RWLock) ReaderUnlock() () {
	C._g_rw_lock_reader_unlock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) WriterLock() () {
	C._g_rw_lock_writer_lock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) WriterTrylock() (_return_ bool) {
	_cgo_return_ := C._g_rw_lock_writer_trylock((*C.GRWLock)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *RWLock) WriterUnlock() () {
	C._g_rw_lock_writer_unlock((*C.GRWLock)(_self_))
	return
}

func RandNew() (_return_ *Rand) {
	_cgo_return_ := C.g_rand_new()
	_return_ = (*Rand)(_cgo_return_)
	return
}

func RandNewWithSeed(seed C.guint32) (_return_ *Rand) {
	_cgo_return_ := C.g_rand_new_with_seed((C.guint32)(seed))
	_return_ = (*Rand)(_cgo_return_)
	return
}

func RandNewWithSeedArray(seed *C.guint32, seed_length C.guint) (_return_ *Rand) {
	_cgo_return_ := C._g_rand_new_with_seed_array((*C.guint32)(seed), (C.guint)(seed_length))
	_return_ = (*Rand)(_cgo_return_)
	return
}

func (_self_ *Rand) Copy() (_return_ *Rand) {
	_cgo_return_ := C._g_rand_copy((*C.GRand)(_self_))
	_return_ = (*Rand)(_cgo_return_)
	return
}

func (_self_ *Rand) Double() (_return_ float64) {
	_cgo_return_ := C._g_rand_double((*C.GRand)(_self_))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *Rand) DoubleRange(begin C.gdouble, end C.gdouble) (_return_ float64) {
	_cgo_return_ := C._g_rand_double_range((*C.GRand)(_self_), (C.gdouble)(begin), (C.gdouble)(end))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *Rand) Free() () {
	C._g_rand_free((*C.GRand)(_self_))
	return
}

func (_self_ *Rand) Int() (_return_ uint32) {
	_cgo_return_ := C._g_rand_int((*C.GRand)(_self_))
	_return_ = uint32(_cgo_return_)
	return
}

func (_self_ *Rand) IntRange(begin C.gint32, end C.gint32) (_return_ int32) {
	_cgo_return_ := C._g_rand_int_range((*C.GRand)(_self_), (C.gint32)(begin), (C.gint32)(end))
	_return_ = int32(_cgo_return_)
	return
}

func (_self_ *Rand) SetSeed(seed C.guint32) () {
	C._g_rand_set_seed((*C.GRand)(_self_), (C.guint32)(seed))
	return
}

func (_self_ *Rand) SetSeedArray(seed *C.guint32, seed_length C.guint) () {
	C._g_rand_set_seed_array((*C.GRand)(_self_), (*C.guint32)(seed), (C.guint)(seed_length))
	return
}

func (_self_ *RecMutex) Clear() () {
	C._g_rec_mutex_clear((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Init() () {
	C._g_rec_mutex_init((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Lock() () {
	C._g_rec_mutex_lock((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Trylock() (_return_ bool) {
	_cgo_return_ := C._g_rec_mutex_trylock((*C.GRecMutex)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *RecMutex) Unlock() () {
	C._g_rec_mutex_unlock((*C.GRecMutex)(_self_))
	return
}

func RegexNew(pattern string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ *Regex, _error_ unsafe.Pointer) {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	_cgo_return_ := C._g_regex_new((*C.gchar)(_cgo_of_pattern_), (C.GRegexCompileFlags)(compile_options), (C.GRegexMatchFlags)(match_options), unsafe.Pointer(_error_))
	_return_ = (*Regex)(_cgo_return_)
	return
}

func RegexCheckReplacement(replacement string) (_return_ bool, has_references C.gboolean, _error_ unsafe.Pointer) {
	_cgo_of_replacement_ := (*C.gchar)(unsafe.Pointer(C.CString(replacement)))
	_cgo_return_ := C._g_regex_check_replacement((*C.gchar)(_cgo_of_replacement_), (*C.gboolean)(&has_references), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func RegexErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_regex_error_quark()
	return
}

func RegexEscapeNul(string_ string, length C.gint) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_regex_escape_nul((*C.gchar)(_cgo_of_string__), (C.gint)(length))
	return
}

func RegexMatchSimple(pattern string, string_ string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ bool) {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_regex_match_simple((*C.gchar)(_cgo_of_pattern_), (*C.gchar)(_cgo_of_string__), (C.GRegexCompileFlags)(compile_options), (C.GRegexMatchFlags)(match_options))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func RegexSplitSimple(pattern string, string_ string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ unsafe.Pointer) {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = unsafe.Pointer(C._g_regex_split_simple((*C.gchar)(_cgo_of_pattern_), (*C.gchar)(_cgo_of_string__), (C.GRegexCompileFlags)(compile_options), (C.GRegexMatchFlags)(match_options)))
	return
}

func (_self_ *Regex) GetCaptureCount() (_return_ int) {
	_cgo_return_ := C._g_regex_get_capture_count((*C.GRegex)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Regex) GetCompileFlags() (_return_ C.GRegexCompileFlags) {
	_return_ = C._g_regex_get_compile_flags((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetHasCrOrLf() (_return_ bool) {
	_cgo_return_ := C._g_regex_get_has_cr_or_lf((*C.GRegex)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Regex) GetMatchFlags() (_return_ C.GRegexMatchFlags) {
	_return_ = C._g_regex_get_match_flags((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetMaxBackref() (_return_ int) {
	_cgo_return_ := C._g_regex_get_max_backref((*C.GRegex)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Regex) GetPattern() (_return_ *C.gchar) {
	_return_ = C._g_regex_get_pattern((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetStringNumber(name string) (_return_ int) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_regex_get_string_number((*C.GRegex)(_self_), (*C.gchar)(_cgo_of_name_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Regex) Match(string_ string, match_options C.GRegexMatchFlags) (_return_ bool, match_info unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_regex_match((*C.GRegex)(_self_), (*C.gchar)(_cgo_of_string__), (C.GRegexMatchFlags)(match_options), unsafe.Pointer(match_info))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Regex) MatchAll(string_ string, match_options C.GRegexMatchFlags) (_return_ bool, match_info unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_regex_match_all((*C.GRegex)(_self_), (*C.gchar)(_cgo_of_string__), (C.GRegexMatchFlags)(match_options), unsafe.Pointer(match_info))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Regex) Ref() (_return_ *Regex) {
	_cgo_return_ := C._g_regex_ref((*C.GRegex)(_self_))
	_return_ = (*Regex)(_cgo_return_)
	return
}

func (_self_ *Regex) Split(string_ string, match_options C.GRegexMatchFlags) (_return_ unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = unsafe.Pointer(C._g_regex_split((*C.GRegex)(_self_), (*C.gchar)(_cgo_of_string__), (C.GRegexMatchFlags)(match_options)))
	return
}

func (_self_ *Regex) Unref() () {
	C._g_regex_unref((*C.GRegex)(_self_))
	return
}

func SListAlloc() (_return_ *SList) {
	_cgo_return_ := C.g_slist_alloc()
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListAppend(list *SList, data C.gpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_append((*C.GSList)(_cgo_of_list_), (C.gpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListConcat(list1 *SList, list2 *SList) (_return_ *SList) {
	_cgo_of_list1_ := (*C.GSList)(list1)
	_cgo_of_list2_ := (*C.GSList)(list2)
	_cgo_return_ := C.g_slist_concat((*C.GSList)(_cgo_of_list1_), (*C.GSList)(_cgo_of_list2_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListCopy(list *SList) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_copy((*C.GSList)(_cgo_of_list_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListCopyDeep(list *SList, func_ C.GCopyFunc, user_data C.gpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_copy_deep((*C.GSList)(_cgo_of_list_), (C.GCopyFunc)(func_), (C.gpointer)(user_data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListDeleteLink(list *SList, link_ *SList) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_of_link__ := (*C.GSList)(link_)
	_cgo_return_ := C.g_slist_delete_link((*C.GSList)(_cgo_of_list_), (*C.GSList)(_cgo_of_link__))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListFind(list *SList, data C.gconstpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_find((*C.GSList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListFindCustom(list *SList, data C.gconstpointer, func_ C.GCompareFunc) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_find_custom((*C.GSList)(_cgo_of_list_), (C.gconstpointer)(data), (C.GCompareFunc)(func_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListForeach(list *SList, func_ C.GFunc, user_data C.gpointer) () {
	_cgo_of_list_ := (*C.GSList)(list)
	C.g_slist_foreach((*C.GSList)(_cgo_of_list_), (C.GFunc)(func_), (C.gpointer)(user_data))
	return
}

func SListFree(list *SList) () {
	_cgo_of_list_ := (*C.GSList)(list)
	C.g_slist_free((*C.GSList)(_cgo_of_list_))
	return
}

func SListFree1(list *SList) () {
	_cgo_of_list_ := (*C.GSList)(list)
	C.g_slist_free_1((*C.GSList)(_cgo_of_list_))
	return
}

func SListFreeFull(list *SList, free_func C.GDestroyNotify) () {
	_cgo_of_list_ := (*C.GSList)(list)
	C.g_slist_free_full((*C.GSList)(_cgo_of_list_), (C.GDestroyNotify)(free_func))
	return
}

func SListIndex(list *SList, data C.gconstpointer) (_return_ int) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_index((*C.GSList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = int(_cgo_return_)
	return
}

func SListInsert(list *SList, data C.gpointer, position C.gint) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_insert((*C.GSList)(_cgo_of_list_), (C.gpointer)(data), (C.gint)(position))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListInsertBefore(slist *SList, sibling *SList, data C.gpointer) (_return_ *SList) {
	_cgo_of_slist_ := (*C.GSList)(slist)
	_cgo_of_sibling_ := (*C.GSList)(sibling)
	_cgo_return_ := C.g_slist_insert_before((*C.GSList)(_cgo_of_slist_), (*C.GSList)(_cgo_of_sibling_), (C.gpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListInsertSorted(list *SList, data C.gpointer, func_ C.GCompareFunc) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_insert_sorted((*C.GSList)(_cgo_of_list_), (C.gpointer)(data), (C.GCompareFunc)(func_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListInsertSortedWithData(list *SList, data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_insert_sorted_with_data((*C.GSList)(_cgo_of_list_), (C.gpointer)(data), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListLast(list *SList) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_last((*C.GSList)(_cgo_of_list_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListLength(list *SList) (_return_ uint) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_length((*C.GSList)(_cgo_of_list_))
	_return_ = uint(_cgo_return_)
	return
}

func SListNth(list *SList, n C.guint) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_nth((*C.GSList)(_cgo_of_list_), (C.guint)(n))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListNthData(list *SList, n C.guint) (_return_ C.gpointer) {
	_cgo_of_list_ := (*C.GSList)(list)
	_return_ = C.g_slist_nth_data((*C.GSList)(_cgo_of_list_), (C.guint)(n))
	return
}

func SListPosition(list *SList, llink *SList) (_return_ int) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_of_llink_ := (*C.GSList)(llink)
	_cgo_return_ := C.g_slist_position((*C.GSList)(_cgo_of_list_), (*C.GSList)(_cgo_of_llink_))
	_return_ = int(_cgo_return_)
	return
}

func SListPrepend(list *SList, data C.gpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_prepend((*C.GSList)(_cgo_of_list_), (C.gpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListRemove(list *SList, data C.gconstpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_remove((*C.GSList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListRemoveAll(list *SList, data C.gconstpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_remove_all((*C.GSList)(_cgo_of_list_), (C.gconstpointer)(data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListRemoveLink(list *SList, link_ *SList) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_of_link__ := (*C.GSList)(link_)
	_cgo_return_ := C.g_slist_remove_link((*C.GSList)(_cgo_of_list_), (*C.GSList)(_cgo_of_link__))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListReverse(list *SList) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_reverse((*C.GSList)(_cgo_of_list_))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListSort(list *SList, compare_func C.GCompareFunc) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_sort((*C.GSList)(_cgo_of_list_), (C.GCompareFunc)(compare_func))
	_return_ = (*SList)(_cgo_return_)
	return
}

func SListSortWithData(list *SList, compare_func C.GCompareDataFunc, user_data C.gpointer) (_return_ *SList) {
	_cgo_of_list_ := (*C.GSList)(list)
	_cgo_return_ := C.g_slist_sort_with_data((*C.GSList)(_cgo_of_list_), (C.GCompareDataFunc)(compare_func), (C.gpointer)(user_data))
	_return_ = (*SList)(_cgo_return_)
	return
}

func ScannerNew(config_templ *ScannerConfig) (_return_ *Scanner) {
	_cgo_of_config_templ_ := (*C.GScannerConfig)(config_templ)
	_cgo_return_ := C._g_scanner_new((*C.GScannerConfig)(_cgo_of_config_templ_))
	_return_ = (*Scanner)(_cgo_return_)
	return
}

func (_self_ *Scanner) CurLine() (_return_ uint) {
	_cgo_return_ := C._g_scanner_cur_line((*C.GScanner)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Scanner) CurPosition() (_return_ uint) {
	_cgo_return_ := C._g_scanner_cur_position((*C.GScanner)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Scanner) CurToken() (_return_ C.GTokenType) {
	_return_ = C._g_scanner_cur_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) CurValue() (_return_ C.GTokenValue) {
	_return_ = C._g_scanner_cur_value((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) Destroy() () {
	C._g_scanner_destroy((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) Eof() (_return_ bool) {
	_cgo_return_ := C._g_scanner_eof((*C.GScanner)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Scanner) GetNextToken() (_return_ C.GTokenType) {
	_return_ = C._g_scanner_get_next_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) InputFile(input_fd C.gint) () {
	C._g_scanner_input_file((*C.GScanner)(_self_), (C.gint)(input_fd))
	return
}

func (_self_ *Scanner) InputText(text string, text_len C.guint) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._g_scanner_input_text((*C.GScanner)(_self_), (*C.gchar)(_cgo_of_text_), (C.guint)(text_len))
	return
}

func (_self_ *Scanner) LookupSymbol(symbol string) (_return_ C.gpointer) {
	_cgo_of_symbol_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol)))
	_return_ = C._g_scanner_lookup_symbol((*C.GScanner)(_self_), (*C.gchar)(_cgo_of_symbol_))
	return
}

func (_self_ *Scanner) PeekNextToken() (_return_ C.GTokenType) {
	_return_ = C._g_scanner_peek_next_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) ScopeAddSymbol(scope_id C.guint, symbol string, value C.gpointer) () {
	_cgo_of_symbol_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol)))
	C._g_scanner_scope_add_symbol((*C.GScanner)(_self_), (C.guint)(scope_id), (*C.gchar)(_cgo_of_symbol_), (C.gpointer)(value))
	return
}

func (_self_ *Scanner) ScopeForeachSymbol(scope_id C.guint, func_ C.GHFunc, user_data C.gpointer) () {
	C._g_scanner_scope_foreach_symbol((*C.GScanner)(_self_), (C.guint)(scope_id), (C.GHFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Scanner) ScopeLookupSymbol(scope_id C.guint, symbol string) (_return_ C.gpointer) {
	_cgo_of_symbol_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol)))
	_return_ = C._g_scanner_scope_lookup_symbol((*C.GScanner)(_self_), (C.guint)(scope_id), (*C.gchar)(_cgo_of_symbol_))
	return
}

func (_self_ *Scanner) ScopeRemoveSymbol(scope_id C.guint, symbol string) () {
	_cgo_of_symbol_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol)))
	C._g_scanner_scope_remove_symbol((*C.GScanner)(_self_), (C.guint)(scope_id), (*C.gchar)(_cgo_of_symbol_))
	return
}

func (_self_ *Scanner) SetScope(scope_id C.guint) (_return_ uint) {
	_cgo_return_ := C._g_scanner_set_scope((*C.GScanner)(_self_), (C.guint)(scope_id))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Scanner) SyncFileOffset() () {
	C._g_scanner_sync_file_offset((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) UnexpToken(expected_token C.GTokenType, identifier_spec string, symbol_spec string, symbol_name string, message string, is_error C.gint) () {
	_cgo_of_identifier_spec_ := (*C.gchar)(unsafe.Pointer(C.CString(identifier_spec)))
	_cgo_of_symbol_spec_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol_spec)))
	_cgo_of_symbol_name_ := (*C.gchar)(unsafe.Pointer(C.CString(symbol_name)))
	_cgo_of_message_ := (*C.gchar)(unsafe.Pointer(C.CString(message)))
	C._g_scanner_unexp_token((*C.GScanner)(_self_), (C.GTokenType)(expected_token), (*C.gchar)(_cgo_of_identifier_spec_), (*C.gchar)(_cgo_of_symbol_spec_), (*C.gchar)(_cgo_of_symbol_name_), (*C.gchar)(_cgo_of_message_), (C.gint)(is_error))
	return
}

func SequenceForeachRange(begin *SequenceIter, end *SequenceIter, func_ C.GFunc, user_data C.gpointer) () {
	_cgo_of_begin_ := (*C.GSequenceIter)(begin)
	_cgo_of_end_ := (*C.GSequenceIter)(end)
	C.g_sequence_foreach_range((*C.GSequenceIter)(_cgo_of_begin_), (*C.GSequenceIter)(_cgo_of_end_), (C.GFunc)(func_), (C.gpointer)(user_data))
	return
}

func SequenceGet(iter *SequenceIter) (_return_ C.gpointer) {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	_return_ = C.g_sequence_get((*C.GSequenceIter)(_cgo_of_iter_))
	return
}

func SequenceInsertBefore(iter *SequenceIter, data C.gpointer) (_return_ *SequenceIter) {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	_cgo_return_ := C.g_sequence_insert_before((*C.GSequenceIter)(_cgo_of_iter_), (C.gpointer)(data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func SequenceMove(src *SequenceIter, dest *SequenceIter) () {
	_cgo_of_src_ := (*C.GSequenceIter)(src)
	_cgo_of_dest_ := (*C.GSequenceIter)(dest)
	C.g_sequence_move((*C.GSequenceIter)(_cgo_of_src_), (*C.GSequenceIter)(_cgo_of_dest_))
	return
}

func SequenceMoveRange(dest *SequenceIter, begin *SequenceIter, end *SequenceIter) () {
	_cgo_of_dest_ := (*C.GSequenceIter)(dest)
	_cgo_of_begin_ := (*C.GSequenceIter)(begin)
	_cgo_of_end_ := (*C.GSequenceIter)(end)
	C.g_sequence_move_range((*C.GSequenceIter)(_cgo_of_dest_), (*C.GSequenceIter)(_cgo_of_begin_), (*C.GSequenceIter)(_cgo_of_end_))
	return
}

func SequenceNew(data_destroy C.GDestroyNotify) (_return_ *Sequence) {
	_cgo_return_ := C.g_sequence_new((C.GDestroyNotify)(data_destroy))
	_return_ = (*Sequence)(_cgo_return_)
	return
}

func SequenceRangeGetMidpoint(begin *SequenceIter, end *SequenceIter) (_return_ *SequenceIter) {
	_cgo_of_begin_ := (*C.GSequenceIter)(begin)
	_cgo_of_end_ := (*C.GSequenceIter)(end)
	_cgo_return_ := C.g_sequence_range_get_midpoint((*C.GSequenceIter)(_cgo_of_begin_), (*C.GSequenceIter)(_cgo_of_end_))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func SequenceRemove(iter *SequenceIter) () {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	C.g_sequence_remove((*C.GSequenceIter)(_cgo_of_iter_))
	return
}

func SequenceRemoveRange(begin *SequenceIter, end *SequenceIter) () {
	_cgo_of_begin_ := (*C.GSequenceIter)(begin)
	_cgo_of_end_ := (*C.GSequenceIter)(end)
	C.g_sequence_remove_range((*C.GSequenceIter)(_cgo_of_begin_), (*C.GSequenceIter)(_cgo_of_end_))
	return
}

func SequenceSet(iter *SequenceIter, data C.gpointer) () {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	C.g_sequence_set((*C.GSequenceIter)(_cgo_of_iter_), (C.gpointer)(data))
	return
}

func SequenceSortChanged(iter *SequenceIter, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) () {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	C.g_sequence_sort_changed((*C.GSequenceIter)(_cgo_of_iter_), (C.GCompareDataFunc)(cmp_func), (C.gpointer)(cmp_data))
	return
}

func SequenceSortChangedIter(iter *SequenceIter, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) () {
	_cgo_of_iter_ := (*C.GSequenceIter)(iter)
	C.g_sequence_sort_changed_iter((*C.GSequenceIter)(_cgo_of_iter_), (C.GSequenceIterCompareFunc)(iter_cmp), (C.gpointer)(cmp_data))
	return
}

func SequenceSwap(a *SequenceIter, b *SequenceIter) () {
	_cgo_of_a_ := (*C.GSequenceIter)(a)
	_cgo_of_b_ := (*C.GSequenceIter)(b)
	C.g_sequence_swap((*C.GSequenceIter)(_cgo_of_a_), (*C.GSequenceIter)(_cgo_of_b_))
	return
}

func (_self_ *Sequence) Append(data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_append((*C.GSequence)(_self_), (C.gpointer)(data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) Foreach(func_ C.GFunc, user_data C.gpointer) () {
	C._g_sequence_foreach((*C.GSequence)(_self_), (C.GFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Sequence) Free() () {
	C._g_sequence_free((*C.GSequence)(_self_))
	return
}

func (_self_ *Sequence) GetBeginIter() (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_get_begin_iter((*C.GSequence)(_self_))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) GetEndIter() (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_get_end_iter((*C.GSequence)(_self_))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) GetIterAtPos(pos C.gint) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_get_iter_at_pos((*C.GSequence)(_self_), (C.gint)(pos))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) GetLength() (_return_ int) {
	_cgo_return_ := C._g_sequence_get_length((*C.GSequence)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Sequence) InsertSorted(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_insert_sorted((*C.GSequence)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(cmp_func), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) InsertSortedIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_insert_sorted_iter((*C.GSequence)(_self_), (C.gpointer)(data), (C.GSequenceIterCompareFunc)(iter_cmp), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) Lookup(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_lookup((*C.GSequence)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(cmp_func), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) LookupIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_lookup_iter((*C.GSequence)(_self_), (C.gpointer)(data), (C.GSequenceIterCompareFunc)(iter_cmp), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) Prepend(data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_prepend((*C.GSequence)(_self_), (C.gpointer)(data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) Search(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_search((*C.GSequence)(_self_), (C.gpointer)(data), (C.GCompareDataFunc)(cmp_func), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) SearchIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_search_iter((*C.GSequence)(_self_), (C.gpointer)(data), (C.GSequenceIterCompareFunc)(iter_cmp), (C.gpointer)(cmp_data))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *Sequence) Sort(cmp_func C.GCompareDataFunc, cmp_data C.gpointer) () {
	C._g_sequence_sort((*C.GSequence)(_self_), (C.GCompareDataFunc)(cmp_func), (C.gpointer)(cmp_data))
	return
}

func (_self_ *Sequence) SortIter(cmp_func C.GSequenceIterCompareFunc, cmp_data C.gpointer) () {
	C._g_sequence_sort_iter((*C.GSequence)(_self_), (C.GSequenceIterCompareFunc)(cmp_func), (C.gpointer)(cmp_data))
	return
}

func (_self_ *SequenceIter) Compare(b *SequenceIter) (_return_ int) {
	_cgo_of_b_ := (*C.GSequenceIter)(b)
	_cgo_return_ := C._g_sequence_iter_compare((*C.GSequenceIter)(_self_), (*C.GSequenceIter)(_cgo_of_b_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *SequenceIter) GetPosition() (_return_ int) {
	_cgo_return_ := C._g_sequence_iter_get_position((*C.GSequenceIter)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *SequenceIter) GetSequence() (_return_ *Sequence) {
	_cgo_return_ := C._g_sequence_iter_get_sequence((*C.GSequenceIter)(_self_))
	_return_ = (*Sequence)(_cgo_return_)
	return
}

func (_self_ *SequenceIter) IsBegin() (_return_ bool) {
	_cgo_return_ := C._g_sequence_iter_is_begin((*C.GSequenceIter)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *SequenceIter) IsEnd() (_return_ bool) {
	_cgo_return_ := C._g_sequence_iter_is_end((*C.GSequenceIter)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *SequenceIter) Move(delta C.gint) (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_iter_move((*C.GSequenceIter)(_self_), (C.gint)(delta))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *SequenceIter) Next() (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_iter_next((*C.GSequenceIter)(_self_))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func (_self_ *SequenceIter) Prev() (_return_ *SequenceIter) {
	_cgo_return_ := C._g_sequence_iter_prev((*C.GSequenceIter)(_self_))
	_return_ = (*SequenceIter)(_cgo_return_)
	return
}

func SourceNew(source_funcs *SourceFuncs, struct_size C.guint) (_return_ *Source) {
	_cgo_of_source_funcs_ := (*C.GSourceFuncs)(source_funcs)
	_cgo_return_ := C.g_source_new((*C.GSourceFuncs)(_cgo_of_source_funcs_), (C.guint)(struct_size))
	_return_ = (*Source)(_cgo_return_)
	return
}

func SourceRemove(tag C.guint) (_return_ bool) {
	_cgo_return_ := C.g_source_remove((C.guint)(tag))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func SourceRemoveByFuncsUserData(funcs *SourceFuncs, user_data C.gpointer) (_return_ bool) {
	_cgo_of_funcs_ := (*C.GSourceFuncs)(funcs)
	_cgo_return_ := C.g_source_remove_by_funcs_user_data((*C.GSourceFuncs)(_cgo_of_funcs_), (C.gpointer)(user_data))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func SourceRemoveByUserData(user_data C.gpointer) (_return_ bool) {
	_cgo_return_ := C.g_source_remove_by_user_data((C.gpointer)(user_data))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func SourceSetNameById(tag C.guint, name *C.char) () {
	C._g_source_set_name_by_id((C.guint)(tag), (*C.char)(name))
	return
}

func (_self_ *Source) AddChildSource(child_source *Source) () {
	_cgo_of_child_source_ := (*C.GSource)(child_source)
	C._g_source_add_child_source((*C.GSource)(_self_), (*C.GSource)(_cgo_of_child_source_))
	return
}

func (_self_ *Source) AddPoll(fd *PollFD) () {
	_cgo_of_fd_ := (*C.GPollFD)(fd)
	C._g_source_add_poll((*C.GSource)(_self_), (*C.GPollFD)(_cgo_of_fd_))
	return
}

func (_self_ *Source) Attach(context *MainContext) (_return_ uint) {
	_cgo_of_context_ := (*C.GMainContext)(context)
	_cgo_return_ := C._g_source_attach((*C.GSource)(_self_), (*C.GMainContext)(_cgo_of_context_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Source) Destroy() () {
	C._g_source_destroy((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetCanRecurse() (_return_ bool) {
	_cgo_return_ := C._g_source_get_can_recurse((*C.GSource)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Source) GetContext() (_return_ *MainContext) {
	_cgo_return_ := C._g_source_get_context((*C.GSource)(_self_))
	_return_ = (*MainContext)(_cgo_return_)
	return
}

func (_self_ *Source) GetId() (_return_ uint) {
	_cgo_return_ := C._g_source_get_id((*C.GSource)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Source) GetName() (_return_ *C.char) {
	_return_ = C._g_source_get_name((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetPriority() (_return_ int) {
	_cgo_return_ := C._g_source_get_priority((*C.GSource)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Source) GetTime() (_return_ int64) {
	_cgo_return_ := C._g_source_get_time((*C.GSource)(_self_))
	_return_ = int64(_cgo_return_)
	return
}

func (_self_ *Source) IsDestroyed() (_return_ bool) {
	_cgo_return_ := C._g_source_is_destroyed((*C.GSource)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Source) Ref() (_return_ *Source) {
	_cgo_return_ := C._g_source_ref((*C.GSource)(_self_))
	_return_ = (*Source)(_cgo_return_)
	return
}

func (_self_ *Source) RemoveChildSource(child_source *Source) () {
	_cgo_of_child_source_ := (*C.GSource)(child_source)
	C._g_source_remove_child_source((*C.GSource)(_self_), (*C.GSource)(_cgo_of_child_source_))
	return
}

func (_self_ *Source) RemovePoll(fd *PollFD) () {
	_cgo_of_fd_ := (*C.GPollFD)(fd)
	C._g_source_remove_poll((*C.GSource)(_self_), (*C.GPollFD)(_cgo_of_fd_))
	return
}

func (_self_ *Source) SetCallback(func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C._g_source_set_callback((*C.GSource)(_self_), (C.GSourceFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	return
}

func (_self_ *Source) SetCallbackIndirect(callback_data C.gpointer, callback_funcs *SourceCallbackFuncs) () {
	_cgo_of_callback_funcs_ := (*C.GSourceCallbackFuncs)(callback_funcs)
	C._g_source_set_callback_indirect((*C.GSource)(_self_), (C.gpointer)(callback_data), (*C.GSourceCallbackFuncs)(_cgo_of_callback_funcs_))
	return
}

func (_self_ *Source) SetCanRecurse(can_recurse C.gboolean) () {
	C._g_source_set_can_recurse((*C.GSource)(_self_), (C.gboolean)(can_recurse))
	return
}

func (_self_ *Source) SetFuncs(funcs *SourceFuncs) () {
	_cgo_of_funcs_ := (*C.GSourceFuncs)(funcs)
	C._g_source_set_funcs((*C.GSource)(_self_), (*C.GSourceFuncs)(_cgo_of_funcs_))
	return
}

func (_self_ *Source) SetName(name *C.char) () {
	C._g_source_set_name((*C.GSource)(_self_), (*C.char)(name))
	return
}

func (_self_ *Source) SetPriority(priority C.gint) () {
	C._g_source_set_priority((*C.GSource)(_self_), (C.gint)(priority))
	return
}

func (_self_ *Source) Unref() () {
	C._g_source_unref((*C.GSource)(_self_))
	return
}

func (_self_ *String) Append(val string) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_append((*C.GString)(_self_), (*C.gchar)(_cgo_of_val_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AppendC(c C.gchar) (_return_ *String) {
	_cgo_return_ := C._g_string_append_c((*C.GString)(_self_), (C.gchar)(c))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AppendLen(val string, len_ C.gssize) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_append_len((*C.GString)(_self_), (*C.gchar)(_cgo_of_val_), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AppendUnichar(wc C.gunichar) (_return_ *String) {
	_cgo_return_ := C._g_string_append_unichar((*C.GString)(_self_), (C.gunichar)(wc))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AppendUriEscaped(unescaped string, reserved_chars_allowed string, allow_utf8 C.gboolean) (_return_ *String) {
	_cgo_of_unescaped_ := (*C.gchar)(unsafe.Pointer(C.CString(unescaped)))
	_cgo_of_reserved_chars_allowed_ := (*C.gchar)(unsafe.Pointer(C.CString(reserved_chars_allowed)))
	_cgo_return_ := C._g_string_append_uri_escaped((*C.GString)(_self_), (*C.gchar)(_cgo_of_unescaped_), (*C.gchar)(_cgo_of_reserved_chars_allowed_), (C.gboolean)(allow_utf8))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AsciiDown() (_return_ *String) {
	_cgo_return_ := C._g_string_ascii_down((*C.GString)(_self_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) AsciiUp() (_return_ *String) {
	_cgo_return_ := C._g_string_ascii_up((*C.GString)(_self_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Assign(rval string) (_return_ *String) {
	_cgo_of_rval_ := (*C.gchar)(unsafe.Pointer(C.CString(rval)))
	_cgo_return_ := C._g_string_assign((*C.GString)(_self_), (*C.gchar)(_cgo_of_rval_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Equal(v2 *String) (_return_ bool) {
	_cgo_of_v2_ := (*C.GString)(v2)
	_cgo_return_ := C._g_string_equal((*C.GString)(_self_), (*C.GString)(_cgo_of_v2_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *String) Erase(pos C.gssize, len_ C.gssize) (_return_ *String) {
	_cgo_return_ := C._g_string_erase((*C.GString)(_self_), (C.gssize)(pos), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Free(free_segment C.gboolean) (_return_ *C.gchar) {
	_return_ = C._g_string_free((*C.GString)(_self_), (C.gboolean)(free_segment))
	return
}

func (_self_ *String) FreeToBytes() (_return_ *Bytes) {
	_cgo_return_ := C._g_string_free_to_bytes((*C.GString)(_self_))
	_return_ = (*Bytes)(_cgo_return_)
	return
}

func (_self_ *String) Hash() (_return_ uint) {
	_cgo_return_ := C._g_string_hash((*C.GString)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *String) Insert(pos C.gssize, val string) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_insert((*C.GString)(_self_), (C.gssize)(pos), (*C.gchar)(_cgo_of_val_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) InsertC(pos C.gssize, c C.gchar) (_return_ *String) {
	_cgo_return_ := C._g_string_insert_c((*C.GString)(_self_), (C.gssize)(pos), (C.gchar)(c))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) InsertLen(pos C.gssize, val string, len_ C.gssize) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_insert_len((*C.GString)(_self_), (C.gssize)(pos), (*C.gchar)(_cgo_of_val_), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) InsertUnichar(pos C.gssize, wc C.gunichar) (_return_ *String) {
	_cgo_return_ := C._g_string_insert_unichar((*C.GString)(_self_), (C.gssize)(pos), (C.gunichar)(wc))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Overwrite(pos C.gsize, val string) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_overwrite((*C.GString)(_self_), (C.gsize)(pos), (*C.gchar)(_cgo_of_val_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) OverwriteLen(pos C.gsize, val string, len_ C.gssize) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_overwrite_len((*C.GString)(_self_), (C.gsize)(pos), (*C.gchar)(_cgo_of_val_), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Prepend(val string) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_prepend((*C.GString)(_self_), (*C.gchar)(_cgo_of_val_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) PrependC(c C.gchar) (_return_ *String) {
	_cgo_return_ := C._g_string_prepend_c((*C.GString)(_self_), (C.gchar)(c))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) PrependLen(val string, len_ C.gssize) (_return_ *String) {
	_cgo_of_val_ := (*C.gchar)(unsafe.Pointer(C.CString(val)))
	_cgo_return_ := C._g_string_prepend_len((*C.GString)(_self_), (*C.gchar)(_cgo_of_val_), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) PrependUnichar(wc C.gunichar) (_return_ *String) {
	_cgo_return_ := C._g_string_prepend_unichar((*C.GString)(_self_), (C.gunichar)(wc))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) SetSize(len_ C.gsize) (_return_ *String) {
	_cgo_return_ := C._g_string_set_size((*C.GString)(_self_), (C.gsize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *String) Truncate(len_ C.gsize) (_return_ *String) {
	_cgo_return_ := C._g_string_truncate((*C.GString)(_self_), (C.gsize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func StringChunkNew(size C.gsize) (_return_ *StringChunk) {
	_cgo_return_ := C.g_string_chunk_new((C.gsize)(size))
	_return_ = (*StringChunk)(_cgo_return_)
	return
}

func (_self_ *StringChunk) Clear() () {
	C._g_string_chunk_clear((*C.GStringChunk)(_self_))
	return
}

func (_self_ *StringChunk) Free() () {
	C._g_string_chunk_free((*C.GStringChunk)(_self_))
	return
}

func (_self_ *StringChunk) Insert(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_string_chunk_insert((*C.GStringChunk)(_self_), (*C.gchar)(_cgo_of_string__))
	return
}

func (_self_ *StringChunk) InsertConst(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_string_chunk_insert_const((*C.GStringChunk)(_self_), (*C.gchar)(_cgo_of_string__))
	return
}

func (_self_ *StringChunk) InsertLen(string_ string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_string_chunk_insert_len((*C.GStringChunk)(_self_), (*C.gchar)(_cgo_of_string__), (C.gssize)(len_))
	return
}

func (_self_ *TestSuite) Add(test_case *TestCase) () {
	_cgo_of_test_case_ := (*C.GTestCase)(test_case)
	C._g_test_suite_add((*C.GTestSuite)(_self_), (*C.GTestCase)(_cgo_of_test_case_))
	return
}

func (_self_ *TestSuite) AddSuite(nestedsuite *TestSuite) () {
	_cgo_of_nestedsuite_ := (*C.GTestSuite)(nestedsuite)
	C._g_test_suite_add_suite((*C.GTestSuite)(_self_), (*C.GTestSuite)(_cgo_of_nestedsuite_))
	return
}

func ThreadNew(name string, func_ C.GThreadFunc, data C.gpointer) (_return_ *Thread) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_thread_new((*C.gchar)(_cgo_of_name_), (C.GThreadFunc)(func_), (C.gpointer)(data))
	_return_ = (*Thread)(_cgo_return_)
	return
}

func ThreadTryNew(name string, func_ C.GThreadFunc, data C.gpointer) (_return_ *Thread, _error_ unsafe.Pointer) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_return_ := C._g_thread_try_new((*C.gchar)(_cgo_of_name_), (C.GThreadFunc)(func_), (C.gpointer)(data), unsafe.Pointer(_error_))
	_return_ = (*Thread)(_cgo_return_)
	return
}

func ThreadErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_thread_error_quark()
	return
}

func ThreadExit(retval C.gpointer) () {
	C.g_thread_exit((C.gpointer)(retval))
	return
}

func ThreadSelf() (_return_ *Thread) {
	_cgo_return_ := C.g_thread_self()
	_return_ = (*Thread)(_cgo_return_)
	return
}

func ThreadYield() () {
	C.g_thread_yield()
	return
}

func (_self_ *Thread) Join() (_return_ C.gpointer) {
	_return_ = C._g_thread_join((*C.GThread)(_self_))
	return
}

func (_self_ *Thread) Ref() (_return_ *Thread) {
	_cgo_return_ := C._g_thread_ref((*C.GThread)(_self_))
	_return_ = (*Thread)(_cgo_return_)
	return
}

func (_self_ *Thread) Unref() () {
	C._g_thread_unref((*C.GThread)(_self_))
	return
}

func ThreadPoolGetMaxIdleTime() (_return_ uint) {
	_cgo_return_ := C.g_thread_pool_get_max_idle_time()
	_return_ = uint(_cgo_return_)
	return
}

func ThreadPoolGetMaxUnusedThreads() (_return_ int) {
	_cgo_return_ := C.g_thread_pool_get_max_unused_threads()
	_return_ = int(_cgo_return_)
	return
}

func ThreadPoolGetNumUnusedThreads() (_return_ uint) {
	_cgo_return_ := C.g_thread_pool_get_num_unused_threads()
	_return_ = uint(_cgo_return_)
	return
}

func ThreadPoolNew(func_ C.GFunc, user_data C.gpointer, max_threads C.gint, exclusive C.gboolean) (_return_ *ThreadPool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_thread_pool_new((C.GFunc)(func_), (C.gpointer)(user_data), (C.gint)(max_threads), (C.gboolean)(exclusive), unsafe.Pointer(_error_))
	_return_ = (*ThreadPool)(_cgo_return_)
	return
}

func ThreadPoolSetMaxIdleTime(interval C.guint) () {
	C.g_thread_pool_set_max_idle_time((C.guint)(interval))
	return
}

func ThreadPoolSetMaxUnusedThreads(max_threads C.gint) () {
	C.g_thread_pool_set_max_unused_threads((C.gint)(max_threads))
	return
}

func ThreadPoolStopUnusedThreads() () {
	C.g_thread_pool_stop_unused_threads()
	return
}

func (_self_ *ThreadPool) Free(immediate C.gboolean, wait_ C.gboolean) () {
	C._g_thread_pool_free((*C.GThreadPool)(_self_), (C.gboolean)(immediate), (C.gboolean)(wait_))
	return
}

func (_self_ *ThreadPool) GetMaxThreads() (_return_ int) {
	_cgo_return_ := C._g_thread_pool_get_max_threads((*C.GThreadPool)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *ThreadPool) GetNumThreads() (_return_ uint) {
	_cgo_return_ := C._g_thread_pool_get_num_threads((*C.GThreadPool)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *ThreadPool) Push(data C.gpointer) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_thread_pool_push((*C.GThreadPool)(_self_), (C.gpointer)(data), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *ThreadPool) SetMaxThreads(max_threads C.gint) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_thread_pool_set_max_threads((*C.GThreadPool)(_self_), (C.gint)(max_threads), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *ThreadPool) SetSortFunction(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_thread_pool_set_sort_function((*C.GThreadPool)(_self_), (C.GCompareDataFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *ThreadPool) Unprocessed() (_return_ uint) {
	_cgo_return_ := C._g_thread_pool_unprocessed((*C.GThreadPool)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func TimeValFromIso8601(iso_date string) (_return_ bool, time_ *C.GTimeVal) {
	_cgo_of_iso_date_ := (*C.gchar)(unsafe.Pointer(C.CString(iso_date)))
	var _allocated_time__ C.GTimeVal
	_cgo_return_ := C._g_time_val_from_iso8601((*C.gchar)(_cgo_of_iso_date_), (*C.GTimeVal)(&_allocated_time__))
	_return_ = _cgo_return_ == C.glibtrue()
	time_ = &_allocated_time__
	return
}

func (_self_ *TimeVal) Add(microseconds C.glong) () {
	C._g_time_val_add((*C.GTimeVal)(_self_), (C.glong)(microseconds))
	return
}

func (_self_ *TimeVal) ToIso8601() (_return_ *C.gchar) {
	_return_ = C._g_time_val_to_iso8601((*C.GTimeVal)(_self_))
	return
}

func TimeZoneNew(identifier string) (_return_ *TimeZone) {
	_cgo_of_identifier_ := (*C.gchar)(unsafe.Pointer(C.CString(identifier)))
	_cgo_return_ := C._g_time_zone_new((*C.gchar)(_cgo_of_identifier_))
	_return_ = (*TimeZone)(_cgo_return_)
	return
}

func TimeZoneNewLocal() (_return_ *TimeZone) {
	_cgo_return_ := C.g_time_zone_new_local()
	_return_ = (*TimeZone)(_cgo_return_)
	return
}

func TimeZoneNewUtc() (_return_ *TimeZone) {
	_cgo_return_ := C.g_time_zone_new_utc()
	_return_ = (*TimeZone)(_cgo_return_)
	return
}

func (_self_ *TimeZone) AdjustTime(type_ C.GTimeType, time_ *C.gint64) (_return_ int) {
	_cgo_return_ := C._g_time_zone_adjust_time((*C.GTimeZone)(_self_), (C.GTimeType)(type_), (*C.gint64)(time_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *TimeZone) FindInterval(type_ C.GTimeType, time_ C.gint64) (_return_ int) {
	_cgo_return_ := C._g_time_zone_find_interval((*C.GTimeZone)(_self_), (C.GTimeType)(type_), (C.gint64)(time_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *TimeZone) GetAbbreviation(interval C.gint) (_return_ *C.gchar) {
	_return_ = C._g_time_zone_get_abbreviation((*C.GTimeZone)(_self_), (C.gint)(interval))
	return
}

func (_self_ *TimeZone) GetOffset(interval C.gint) (_return_ int32) {
	_cgo_return_ := C._g_time_zone_get_offset((*C.GTimeZone)(_self_), (C.gint)(interval))
	_return_ = int32(_cgo_return_)
	return
}

func (_self_ *TimeZone) IsDst(interval C.gint) (_return_ bool) {
	_cgo_return_ := C._g_time_zone_is_dst((*C.GTimeZone)(_self_), (C.gint)(interval))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *TimeZone) Ref() (_return_ *TimeZone) {
	_cgo_return_ := C._g_time_zone_ref((*C.GTimeZone)(_self_))
	_return_ = (*TimeZone)(_cgo_return_)
	return
}

func (_self_ *TimeZone) Unref() () {
	C._g_time_zone_unref((*C.GTimeZone)(_self_))
	return
}

func TimerNew() (_return_ *Timer) {
	_cgo_return_ := C.g_timer_new()
	_return_ = (*Timer)(_cgo_return_)
	return
}

func (_self_ *Timer) Continue() () {
	C._g_timer_continue((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Destroy() () {
	C._g_timer_destroy((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Elapsed(microseconds *C.gulong) (_return_ float64) {
	_cgo_return_ := C._g_timer_elapsed((*C.GTimer)(_self_), (*C.gulong)(microseconds))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *Timer) Reset() () {
	C._g_timer_reset((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Start() () {
	C._g_timer_start((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Stop() () {
	C._g_timer_stop((*C.GTimer)(_self_))
	return
}

func TrashStackHeight(stack_p unsafe.Pointer) (_return_ uint) {
	_cgo_return_ := C._g_trash_stack_height(unsafe.Pointer(stack_p))
	_return_ = uint(_cgo_return_)
	return
}

func TrashStackPeek(stack_p unsafe.Pointer) (_return_ C.gpointer) {
	_return_ = C._g_trash_stack_peek(unsafe.Pointer(stack_p))
	return
}

func TrashStackPop(stack_p unsafe.Pointer) (_return_ C.gpointer) {
	_return_ = C._g_trash_stack_pop(unsafe.Pointer(stack_p))
	return
}

func TrashStackPush(stack_p unsafe.Pointer, data_p C.gpointer) () {
	C._g_trash_stack_push(unsafe.Pointer(stack_p), (C.gpointer)(data_p))
	return
}

func TreeNew(key_compare_func C.GCompareFunc) (_return_ *Tree) {
	_cgo_return_ := C.g_tree_new((C.GCompareFunc)(key_compare_func))
	_return_ = (*Tree)(_cgo_return_)
	return
}

func TreeNewFull(key_compare_func C.GCompareDataFunc, key_compare_data C.gpointer, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) (_return_ *Tree) {
	_cgo_return_ := C.g_tree_new_full((C.GCompareDataFunc)(key_compare_func), (C.gpointer)(key_compare_data), (C.GDestroyNotify)(key_destroy_func), (C.GDestroyNotify)(value_destroy_func))
	_return_ = (*Tree)(_cgo_return_)
	return
}

func TreeNewWithData(key_compare_func C.GCompareDataFunc, key_compare_data C.gpointer) (_return_ *Tree) {
	_cgo_return_ := C.g_tree_new_with_data((C.GCompareDataFunc)(key_compare_func), (C.gpointer)(key_compare_data))
	_return_ = (*Tree)(_cgo_return_)
	return
}

func (_self_ *Tree) Destroy() () {
	C._g_tree_destroy((*C.GTree)(_self_))
	return
}

func (_self_ *Tree) Foreach(func_ C.GTraverseFunc, user_data C.gpointer) () {
	C._g_tree_foreach((*C.GTree)(_self_), (C.GTraverseFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Tree) Height() (_return_ int) {
	_cgo_return_ := C._g_tree_height((*C.GTree)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Tree) Insert(key C.gpointer, value C.gpointer) () {
	C._g_tree_insert((*C.GTree)(_self_), (C.gpointer)(key), (C.gpointer)(value))
	return
}

func (_self_ *Tree) Lookup(key C.gconstpointer) (_return_ C.gpointer) {
	_return_ = C._g_tree_lookup((*C.GTree)(_self_), (C.gconstpointer)(key))
	return
}

func (_self_ *Tree) LookupExtended(lookup_key C.gconstpointer, orig_key *C.gpointer, value *C.gpointer) (_return_ bool) {
	_cgo_return_ := C._g_tree_lookup_extended((*C.GTree)(_self_), (C.gconstpointer)(lookup_key), (*C.gpointer)(orig_key), (*C.gpointer)(value))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Tree) Nnodes() (_return_ int) {
	_cgo_return_ := C._g_tree_nnodes((*C.GTree)(_self_))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Tree) Ref() (_return_ *Tree) {
	_cgo_return_ := C._g_tree_ref((*C.GTree)(_self_))
	_return_ = (*Tree)(_cgo_return_)
	return
}

func (_self_ *Tree) Remove(key C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_tree_remove((*C.GTree)(_self_), (C.gconstpointer)(key))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Tree) Replace(key C.gpointer, value C.gpointer) () {
	C._g_tree_replace((*C.GTree)(_self_), (C.gpointer)(key), (C.gpointer)(value))
	return
}

func (_self_ *Tree) Search(search_func C.GCompareFunc, user_data C.gconstpointer) (_return_ C.gpointer) {
	_return_ = C._g_tree_search((*C.GTree)(_self_), (C.GCompareFunc)(search_func), (C.gconstpointer)(user_data))
	return
}

func (_self_ *Tree) Steal(key C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_tree_steal((*C.GTree)(_self_), (C.gconstpointer)(key))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Tree) Unref() () {
	C._g_tree_unref((*C.GTree)(_self_))
	return
}

func VariantNewBoolean(value C.gboolean) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_boolean((C.gboolean)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewByte(value C.guchar) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_byte((C.guchar)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewDictEntry(key *Variant, value *Variant) (_return_ *Variant) {
	_cgo_of_key_ := (*C.GVariant)(key)
	_cgo_of_value_ := (*C.GVariant)(value)
	_cgo_return_ := C.g_variant_new_dict_entry((*C.GVariant)(_cgo_of_key_), (*C.GVariant)(_cgo_of_value_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewDouble(value C.gdouble) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_double((C.gdouble)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewFixedArray(element_type *VariantType, elements C.gconstpointer, n_elements C.gsize, element_size C.gsize) (_return_ *Variant) {
	_cgo_of_element_type_ := (*C.GVariantType)(element_type)
	_cgo_return_ := C._g_variant_new_fixed_array((*C.GVariantType)(_cgo_of_element_type_), (C.gconstpointer)(elements), (C.gsize)(n_elements), (C.gsize)(element_size))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewFromBytes(type_ *VariantType, bytes *Bytes, trusted C.gboolean) (_return_ *Variant) {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	_cgo_of_bytes_ := (*C.GBytes)(bytes)
	_cgo_return_ := C._g_variant_new_from_bytes((*C.GVariantType)(_cgo_of_type__), (*C.GBytes)(_cgo_of_bytes_), (C.gboolean)(trusted))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewHandle(value C.gint32) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_handle((C.gint32)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewInt16(value C.gint16) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_int16((C.gint16)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewInt32(value C.gint32) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_int32((C.gint32)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewInt64(value C.gint64) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_int64((C.gint64)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewMaybe(child_type *VariantType, child *Variant) (_return_ *Variant) {
	_cgo_of_child_type_ := (*C.GVariantType)(child_type)
	_cgo_of_child_ := (*C.GVariant)(child)
	_cgo_return_ := C._g_variant_new_maybe((*C.GVariantType)(_cgo_of_child_type_), (*C.GVariant)(_cgo_of_child_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewObjectPath(object_path string) (_return_ *Variant) {
	_cgo_of_object_path_ := (*C.gchar)(unsafe.Pointer(C.CString(object_path)))
	_cgo_return_ := C._g_variant_new_object_path((*C.gchar)(_cgo_of_object_path_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewParsedVa(format string, app *C.va_list) (_return_ *Variant) {
	_cgo_of_format_ := (*C.gchar)(unsafe.Pointer(C.CString(format)))
	_cgo_return_ := C._g_variant_new_parsed_va((*C.gchar)(_cgo_of_format_), (*C.va_list)(app))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewSignature(signature string) (_return_ *Variant) {
	_cgo_of_signature_ := (*C.gchar)(unsafe.Pointer(C.CString(signature)))
	_cgo_return_ := C._g_variant_new_signature((*C.gchar)(_cgo_of_signature_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewString(string_ string) (_return_ *Variant) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_variant_new_string((*C.gchar)(_cgo_of_string__))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewUint16(value C.guint16) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_uint16((C.guint16)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewUint32(value C.guint32) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_uint32((C.guint32)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewUint64(value C.guint64) (_return_ *Variant) {
	_cgo_return_ := C.g_variant_new_uint64((C.guint64)(value))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewVa(format_string string, endptr unsafe.Pointer, app *C.va_list) (_return_ *Variant) {
	_cgo_of_format_string_ := (*C.gchar)(unsafe.Pointer(C.CString(format_string)))
	_cgo_return_ := C._g_variant_new_va((*C.gchar)(_cgo_of_format_string_), unsafe.Pointer(endptr), (*C.va_list)(app))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantNewVariant(value *Variant) (_return_ *Variant) {
	_cgo_of_value_ := (*C.GVariant)(value)
	_cgo_return_ := C.g_variant_new_variant((*C.GVariant)(_cgo_of_value_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantIsObjectPath(string_ string) (_return_ bool) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_variant_is_object_path((*C.gchar)(_cgo_of_string__))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func VariantIsSignature(string_ string) (_return_ bool) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_variant_is_signature((*C.gchar)(_cgo_of_string__))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func VariantParse(type_ *VariantType, text string, limit string, endptr unsafe.Pointer) (_return_ *Variant, _error_ unsafe.Pointer) {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_limit_ := (*C.gchar)(unsafe.Pointer(C.CString(limit)))
	_cgo_return_ := C._g_variant_parse((*C.GVariantType)(_cgo_of_type__), (*C.gchar)(_cgo_of_text_), (*C.gchar)(_cgo_of_limit_), unsafe.Pointer(endptr), unsafe.Pointer(_error_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantParserGetErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_variant_parser_get_error_quark()
	return
}

func (_self_ *Variant) Byteswap() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_byteswap((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) CheckFormatString(format_string string, copy_only C.gboolean) (_return_ bool) {
	_cgo_of_format_string_ := (*C.gchar)(unsafe.Pointer(C.CString(format_string)))
	_cgo_return_ := C._g_variant_check_format_string((*C.GVariant)(_self_), (*C.gchar)(_cgo_of_format_string_), (C.gboolean)(copy_only))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) Classify() (_return_ C.GVariantClass) {
	_return_ = C._g_variant_classify((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Compare(two C.gconstpointer) (_return_ int) {
	_cgo_return_ := C._g_variant_compare((*C.GVariant)(_self_), (C.gconstpointer)(two))
	_return_ = int(_cgo_return_)
	return
}

func (_self_ *Variant) DupBytestring() (_return_ *C.gchar, length C.gsize) {
	_return_ = C._g_variant_dup_bytestring((*C.GVariant)(_self_), (*C.gsize)(&length))
	return
}

func (_self_ *Variant) DupBytestringArray() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_dup_bytestring_array((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) DupObjv() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_dup_objv((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) DupString() (_return_ *C.gchar, length C.gsize) {
	_return_ = C._g_variant_dup_string((*C.GVariant)(_self_), (*C.gsize)(&length))
	return
}

func (_self_ *Variant) DupStrv() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_dup_strv((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) Equal(two C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_variant_equal((*C.GVariant)(_self_), (C.gconstpointer)(two))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) GetBoolean() (_return_ bool) {
	_cgo_return_ := C._g_variant_get_boolean((*C.GVariant)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) GetByte() (_return_ byte) {
	_cgo_return_ := C._g_variant_get_byte((*C.GVariant)(_self_))
	_return_ = byte(_cgo_return_)
	return
}

func (_self_ *Variant) GetBytestring() (_return_ *C.gchar) {
	_return_ = C._g_variant_get_bytestring((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetBytestringArray() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_get_bytestring_array((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) GetChildValue(index_ C.gsize) (_return_ *Variant) {
	_cgo_return_ := C._g_variant_get_child_value((*C.GVariant)(_self_), (C.gsize)(index_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) GetData() (_return_ C.gconstpointer) {
	_return_ = C._g_variant_get_data((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetDataAsBytes() (_return_ *Bytes) {
	_cgo_return_ := C._g_variant_get_data_as_bytes((*C.GVariant)(_self_))
	_return_ = (*Bytes)(_cgo_return_)
	return
}

func (_self_ *Variant) GetDouble() (_return_ float64) {
	_cgo_return_ := C._g_variant_get_double((*C.GVariant)(_self_))
	_return_ = float64(_cgo_return_)
	return
}

func (_self_ *Variant) GetFixedArray(element_size C.gsize) (_return_ C.gconstpointer, n_elements C.gsize) {
	_return_ = C._g_variant_get_fixed_array((*C.GVariant)(_self_), (*C.gsize)(&n_elements), (C.gsize)(element_size))
	return
}

func (_self_ *Variant) GetHandle() (_return_ int32) {
	_cgo_return_ := C._g_variant_get_handle((*C.GVariant)(_self_))
	_return_ = int32(_cgo_return_)
	return
}

func (_self_ *Variant) GetInt16() (_return_ int16) {
	_cgo_return_ := C._g_variant_get_int16((*C.GVariant)(_self_))
	_return_ = int16(_cgo_return_)
	return
}

func (_self_ *Variant) GetInt32() (_return_ int32) {
	_cgo_return_ := C._g_variant_get_int32((*C.GVariant)(_self_))
	_return_ = int32(_cgo_return_)
	return
}

func (_self_ *Variant) GetInt64() (_return_ int64) {
	_cgo_return_ := C._g_variant_get_int64((*C.GVariant)(_self_))
	_return_ = int64(_cgo_return_)
	return
}

func (_self_ *Variant) GetMaybe() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_get_maybe((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) GetNormalForm() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_get_normal_form((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) GetObjv() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_get_objv((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) GetSize() (_return_ uint64) {
	_cgo_return_ := C._g_variant_get_size((*C.GVariant)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *Variant) GetString() (_return_ *C.gchar, length C.gsize) {
	_return_ = C._g_variant_get_string((*C.GVariant)(_self_), (*C.gsize)(&length))
	return
}

func (_self_ *Variant) GetStrv() (_return_ unsafe.Pointer, length C.gsize) {
	_return_ = unsafe.Pointer(C._g_variant_get_strv((*C.GVariant)(_self_), (*C.gsize)(&length)))
	return
}

func (_self_ *Variant) GetType() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_get_type((*C.GVariant)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *Variant) GetTypeString() (_return_ *C.gchar) {
	_return_ = C._g_variant_get_type_string((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetUint16() (_return_ uint16) {
	_cgo_return_ := C._g_variant_get_uint16((*C.GVariant)(_self_))
	_return_ = uint16(_cgo_return_)
	return
}

func (_self_ *Variant) GetUint32() (_return_ uint32) {
	_cgo_return_ := C._g_variant_get_uint32((*C.GVariant)(_self_))
	_return_ = uint32(_cgo_return_)
	return
}

func (_self_ *Variant) GetUint64() (_return_ uint64) {
	_cgo_return_ := C._g_variant_get_uint64((*C.GVariant)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *Variant) GetVa(format_string string, endptr unsafe.Pointer, app *C.va_list) () {
	_cgo_of_format_string_ := (*C.gchar)(unsafe.Pointer(C.CString(format_string)))
	C._g_variant_get_va((*C.GVariant)(_self_), (*C.gchar)(_cgo_of_format_string_), unsafe.Pointer(endptr), (*C.va_list)(app))
	return
}

func (_self_ *Variant) GetVariant() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_get_variant((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) Hash() (_return_ uint) {
	_cgo_return_ := C._g_variant_hash((*C.GVariant)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *Variant) IsContainer() (_return_ bool) {
	_cgo_return_ := C._g_variant_is_container((*C.GVariant)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) IsFloating() (_return_ bool) {
	_cgo_return_ := C._g_variant_is_floating((*C.GVariant)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) IsNormalForm() (_return_ bool) {
	_cgo_return_ := C._g_variant_is_normal_form((*C.GVariant)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) IsOfType(type_ *VariantType) (_return_ bool) {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	_cgo_return_ := C._g_variant_is_of_type((*C.GVariant)(_self_), (*C.GVariantType)(_cgo_of_type__))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *Variant) IterNew() (_return_ *VariantIter) {
	_cgo_return_ := C._g_variant_iter_new((*C.GVariant)(_self_))
	_return_ = (*VariantIter)(_cgo_return_)
	return
}

func (_self_ *Variant) LookupValue(key string, expected_type *VariantType) (_return_ *Variant) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_expected_type_ := (*C.GVariantType)(expected_type)
	_cgo_return_ := C._g_variant_lookup_value((*C.GVariant)(_self_), (*C.gchar)(_cgo_of_key_), (*C.GVariantType)(_cgo_of_expected_type_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) NChildren() (_return_ uint64) {
	_cgo_return_ := C._g_variant_n_children((*C.GVariant)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *Variant) Print(type_annotate C.gboolean) (_return_ *C.gchar) {
	_return_ = C._g_variant_print((*C.GVariant)(_self_), (C.gboolean)(type_annotate))
	return
}

func (_self_ *Variant) PrintString(string_ *String, type_annotate C.gboolean) (_return_ *String) {
	_cgo_of_string__ := (*C.GString)(string_)
	_cgo_return_ := C._g_variant_print_string((*C.GVariant)(_self_), (*C.GString)(_cgo_of_string__), (C.gboolean)(type_annotate))
	_return_ = (*String)(_cgo_return_)
	return
}

func (_self_ *Variant) Ref() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_ref((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) RefSink() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_ref_sink((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) Store(data C.gpointer) () {
	C._g_variant_store((*C.GVariant)(_self_), (C.gpointer)(data))
	return
}

func (_self_ *Variant) TakeRef() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_take_ref((*C.GVariant)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *Variant) Unref() () {
	C._g_variant_unref((*C.GVariant)(_self_))
	return
}

func VariantBuilderNew(type_ *VariantType) (_return_ *VariantBuilder) {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	_cgo_return_ := C._g_variant_builder_new((*C.GVariantType)(_cgo_of_type__))
	_return_ = (*VariantBuilder)(_cgo_return_)
	return
}

func (_self_ *VariantBuilder) AddValue(value *Variant) () {
	_cgo_of_value_ := (*C.GVariant)(value)
	C._g_variant_builder_add_value((*C.GVariantBuilder)(_self_), (*C.GVariant)(_cgo_of_value_))
	return
}

func (_self_ *VariantBuilder) Clear() () {
	C._g_variant_builder_clear((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) Close() () {
	C._g_variant_builder_close((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) End() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_builder_end((*C.GVariantBuilder)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func (_self_ *VariantBuilder) Init(type_ *VariantType) () {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	C._g_variant_builder_init((*C.GVariantBuilder)(_self_), (*C.GVariantType)(_cgo_of_type__))
	return
}

func (_self_ *VariantBuilder) Open(type_ *VariantType) () {
	_cgo_of_type__ := (*C.GVariantType)(type_)
	C._g_variant_builder_open((*C.GVariantBuilder)(_self_), (*C.GVariantType)(_cgo_of_type__))
	return
}

func (_self_ *VariantBuilder) Ref() (_return_ *VariantBuilder) {
	_cgo_return_ := C._g_variant_builder_ref((*C.GVariantBuilder)(_self_))
	_return_ = (*VariantBuilder)(_cgo_return_)
	return
}

func (_self_ *VariantBuilder) Unref() () {
	C._g_variant_builder_unref((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantIter) Copy() (_return_ *VariantIter) {
	_cgo_return_ := C._g_variant_iter_copy((*C.GVariantIter)(_self_))
	_return_ = (*VariantIter)(_cgo_return_)
	return
}

func (_self_ *VariantIter) Free() () {
	C._g_variant_iter_free((*C.GVariantIter)(_self_))
	return
}

func (_self_ *VariantIter) Init(value *Variant) (_return_ uint64) {
	_cgo_of_value_ := (*C.GVariant)(value)
	_cgo_return_ := C._g_variant_iter_init((*C.GVariantIter)(_self_), (*C.GVariant)(_cgo_of_value_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *VariantIter) NChildren() (_return_ uint64) {
	_cgo_return_ := C._g_variant_iter_n_children((*C.GVariantIter)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *VariantIter) NextValue() (_return_ *Variant) {
	_cgo_return_ := C._g_variant_iter_next_value((*C.GVariantIter)(_self_))
	_return_ = (*Variant)(_cgo_return_)
	return
}

func VariantTypeNew(type_string string) (_return_ *VariantType) {
	_cgo_of_type_string_ := (*C.gchar)(unsafe.Pointer(C.CString(type_string)))
	_cgo_return_ := C._g_variant_type_new((*C.gchar)(_cgo_of_type_string_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func VariantTypeNewArray(element *VariantType) (_return_ *VariantType) {
	_cgo_of_element_ := (*C.GVariantType)(element)
	_cgo_return_ := C._g_variant_type_new_array((*C.GVariantType)(_cgo_of_element_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func VariantTypeNewDictEntry(key *VariantType, value *VariantType) (_return_ *VariantType) {
	_cgo_of_key_ := (*C.GVariantType)(key)
	_cgo_of_value_ := (*C.GVariantType)(value)
	_cgo_return_ := C._g_variant_type_new_dict_entry((*C.GVariantType)(_cgo_of_key_), (*C.GVariantType)(_cgo_of_value_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func VariantTypeNewMaybe(element *VariantType) (_return_ *VariantType) {
	_cgo_of_element_ := (*C.GVariantType)(element)
	_cgo_return_ := C._g_variant_type_new_maybe((*C.GVariantType)(_cgo_of_element_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func VariantTypeChecked(arg_15 string) (_return_ *VariantType) {
	_cgo_of_arg_15_ := (*C.gchar)(unsafe.Pointer(C.CString(arg_15)))
	_cgo_return_ := C._g_variant_type_checked_((*C.gchar)(_cgo_of_arg_15_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func VariantTypeStringIsValid(type_string string) (_return_ bool) {
	_cgo_of_type_string_ := (*C.gchar)(unsafe.Pointer(C.CString(type_string)))
	_cgo_return_ := C._g_variant_type_string_is_valid((*C.gchar)(_cgo_of_type_string_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func VariantTypeStringScan(string_ string, limit string) (_return_ bool, endptr unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_limit_ := (*C.gchar)(unsafe.Pointer(C.CString(limit)))
	_cgo_return_ := C._g_variant_type_string_scan((*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_limit_), unsafe.Pointer(endptr))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) Copy() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_copy((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *VariantType) DupString() (_return_ *C.gchar) {
	_return_ = C._g_variant_type_dup_string((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Element() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_element((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *VariantType) Equal(type2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C._g_variant_type_equal((*C.GVariantType)(_self_), (C.gconstpointer)(type2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) First() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_first((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *VariantType) Free() () {
	C._g_variant_type_free((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) GetStringLength() (_return_ uint64) {
	_cgo_return_ := C._g_variant_type_get_string_length((*C.GVariantType)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *VariantType) Hash() (_return_ uint) {
	_cgo_return_ := C._g_variant_type_hash((*C.GVariantType)(_self_))
	_return_ = uint(_cgo_return_)
	return
}

func (_self_ *VariantType) IsArray() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_array((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsBasic() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_basic((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsContainer() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_container((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsDefinite() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_definite((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsDictEntry() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_dict_entry((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsMaybe() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_maybe((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsSubtypeOf(supertype *VariantType) (_return_ bool) {
	_cgo_of_supertype_ := (*C.GVariantType)(supertype)
	_cgo_return_ := C._g_variant_type_is_subtype_of((*C.GVariantType)(_self_), (*C.GVariantType)(_cgo_of_supertype_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsTuple() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_tuple((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) IsVariant() (_return_ bool) {
	_cgo_return_ := C._g_variant_type_is_variant((*C.GVariantType)(_self_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func (_self_ *VariantType) Key() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_key((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *VariantType) NItems() (_return_ uint64) {
	_cgo_return_ := C._g_variant_type_n_items((*C.GVariantType)(_self_))
	_return_ = uint64(_cgo_return_)
	return
}

func (_self_ *VariantType) Next() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_next((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func (_self_ *VariantType) PeekString() (_return_ *C.gchar) {
	_return_ = C._g_variant_type_peek_string((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Value() (_return_ *VariantType) {
	_cgo_return_ := C._g_variant_type_value((*C.GVariantType)(_self_))
	_return_ = (*VariantType)(_cgo_return_)
	return
}

func Access(filename string, mode C.int) (_return_ C.int) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_access((*C.gchar)(_cgo_of_filename_), (C.int)(mode))
	return
}

func AsciiDigitValue(c C.gchar) (_return_ int) {
	_cgo_return_ := C.g_ascii_digit_value((C.gchar)(c))
	_return_ = int(_cgo_return_)
	return
}

func AsciiDtostr(buffer string, buf_len C.gint, d C.gdouble) (_return_ *C.gchar) {
	_cgo_of_buffer_ := (*C.gchar)(unsafe.Pointer(C.CString(buffer)))
	_return_ = C.g_ascii_dtostr((*C.gchar)(_cgo_of_buffer_), (C.gint)(buf_len), (C.gdouble)(d))
	return
}

func AsciiFormatd(buffer string, buf_len C.gint, format string, d C.gdouble) (_return_ *C.gchar) {
	_cgo_of_buffer_ := (*C.gchar)(unsafe.Pointer(C.CString(buffer)))
	_cgo_of_format_ := (*C.gchar)(unsafe.Pointer(C.CString(format)))
	_return_ = C._g_ascii_formatd((*C.gchar)(_cgo_of_buffer_), (C.gint)(buf_len), (*C.gchar)(_cgo_of_format_), (C.gdouble)(d))
	return
}

func AsciiStrcasecmp(s1 string, s2 string) (_return_ int) {
	_cgo_of_s1_ := (*C.gchar)(unsafe.Pointer(C.CString(s1)))
	_cgo_of_s2_ := (*C.gchar)(unsafe.Pointer(C.CString(s2)))
	_cgo_return_ := C._g_ascii_strcasecmp((*C.gchar)(_cgo_of_s1_), (*C.gchar)(_cgo_of_s2_))
	_return_ = int(_cgo_return_)
	return
}

func AsciiStrdown(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_ascii_strdown((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func AsciiStrncasecmp(s1 string, s2 string, n C.gsize) (_return_ int) {
	_cgo_of_s1_ := (*C.gchar)(unsafe.Pointer(C.CString(s1)))
	_cgo_of_s2_ := (*C.gchar)(unsafe.Pointer(C.CString(s2)))
	_cgo_return_ := C._g_ascii_strncasecmp((*C.gchar)(_cgo_of_s1_), (*C.gchar)(_cgo_of_s2_), (C.gsize)(n))
	_return_ = int(_cgo_return_)
	return
}

func AsciiStrtod(nptr string, endptr unsafe.Pointer) (_return_ float64) {
	_cgo_of_nptr_ := (*C.gchar)(unsafe.Pointer(C.CString(nptr)))
	_cgo_return_ := C._g_ascii_strtod((*C.gchar)(_cgo_of_nptr_), unsafe.Pointer(endptr))
	_return_ = float64(_cgo_return_)
	return
}

func AsciiStrtoll(nptr string, endptr unsafe.Pointer, base C.guint) (_return_ int64) {
	_cgo_of_nptr_ := (*C.gchar)(unsafe.Pointer(C.CString(nptr)))
	_cgo_return_ := C._g_ascii_strtoll((*C.gchar)(_cgo_of_nptr_), unsafe.Pointer(endptr), (C.guint)(base))
	_return_ = int64(_cgo_return_)
	return
}

func AsciiStrtoull(nptr string, endptr unsafe.Pointer, base C.guint) (_return_ uint64) {
	_cgo_of_nptr_ := (*C.gchar)(unsafe.Pointer(C.CString(nptr)))
	_cgo_return_ := C._g_ascii_strtoull((*C.gchar)(_cgo_of_nptr_), unsafe.Pointer(endptr), (C.guint)(base))
	_return_ = uint64(_cgo_return_)
	return
}

func AsciiStrup(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_ascii_strup((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func AsciiTolower(c C.gchar) (_return_ int8) {
	_cgo_return_ := C.g_ascii_tolower((C.gchar)(c))
	_return_ = int8(_cgo_return_)
	return
}

func AsciiToupper(c C.gchar) (_return_ int8) {
	_cgo_return_ := C.g_ascii_toupper((C.gchar)(c))
	_return_ = int8(_cgo_return_)
	return
}

func AsciiXdigitValue(c C.gchar) (_return_ int) {
	_cgo_return_ := C.g_ascii_xdigit_value((C.gchar)(c))
	_return_ = int(_cgo_return_)
	return
}

func AssertionMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, message *C.char) () {
	C._g_assertion_message((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(message))
	return
}

func AssertionMessageCmpnum(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 C.double, cmp *C.char, arg2 C.double, numtype C.char) () {
	C._g_assertion_message_cmpnum((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(expr), (C.double)(arg1), (*C.char)(cmp), (C.double)(arg2), (C.char)(numtype))
	return
}

func AssertionMessageCmpstr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 *C.char, cmp *C.char, arg2 *C.char) () {
	C._g_assertion_message_cmpstr((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(expr), (*C.char)(arg1), (*C.char)(cmp), (*C.char)(arg2))
	return
}

func AssertionMessageError(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, error_ *Error, error_domain C.GQuark, error_code C.int) () {
	_cgo_of_error__ := (*C.GError)(error_)
	C._g_assertion_message_error((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(expr), (*C.GError)(_cgo_of_error__), (C.GQuark)(error_domain), (C.int)(error_code))
	return
}

func AssertionMessageExpr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char) () {
	C._g_assertion_message_expr((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(expr))
	return
}

func Base64Decode(text string) (_return_ *C.guchar, out_len C.gsize) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_return_ = C._g_base64_decode((*C.gchar)(_cgo_of_text_), (*C.gsize)(&out_len))
	return
}

func BitLock(address *C.gint, lock_bit C.gint) () {
	C.g_bit_lock((*C.gint)(address), (C.gint)(lock_bit))
	return
}

func BitNthLsf(mask C.gulong, nth_bit C.gint) (_return_ int) {
	_cgo_return_ := C.g_bit_nth_lsf((C.gulong)(mask), (C.gint)(nth_bit))
	_return_ = int(_cgo_return_)
	return
}

func BitNthMsf(mask C.gulong, nth_bit C.gint) (_return_ int) {
	_cgo_return_ := C.g_bit_nth_msf((C.gulong)(mask), (C.gint)(nth_bit))
	_return_ = int(_cgo_return_)
	return
}

func BitStorage(number C.gulong) (_return_ uint) {
	_cgo_return_ := C.g_bit_storage((C.gulong)(number))
	_return_ = uint(_cgo_return_)
	return
}

func BitTrylock(address *C.gint, lock_bit C.gint) (_return_ bool) {
	_cgo_return_ := C.g_bit_trylock((*C.gint)(address), (C.gint)(lock_bit))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func BitUnlock(address *C.gint, lock_bit C.gint) () {
	C.g_bit_unlock((*C.gint)(address), (C.gint)(lock_bit))
	return
}

func Chdir(path string) (_return_ C.int) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_return_ = C._g_chdir((*C.gchar)(_cgo_of_path_))
	return
}

func CheckVersion(required_major C.guint, required_minor C.guint, required_micro C.guint) (_return_ *C.gchar) {
	_return_ = C.glib_check_version((C.guint)(required_major), (C.guint)(required_minor), (C.guint)(required_micro))
	return
}

func ChildWatchAdd(pid C.GPid, function C.GChildWatchFunc, data C.gpointer) (_return_ uint) {
	_cgo_return_ := C.g_child_watch_add((C.GPid)(pid), (C.GChildWatchFunc)(function), (C.gpointer)(data))
	_return_ = uint(_cgo_return_)
	return
}

func ChildWatchAddFull(priority C.gint, pid C.GPid, function C.GChildWatchFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_return_ := C.g_child_watch_add_full((C.gint)(priority), (C.GPid)(pid), (C.GChildWatchFunc)(function), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func ChildWatchSourceNew(pid C.GPid) (_return_ *Source) {
	_cgo_return_ := C.g_child_watch_source_new((C.GPid)(pid))
	_return_ = (*Source)(_cgo_return_)
	return
}

func ClearError() (_error_ unsafe.Pointer) {
	C._g_clear_error(unsafe.Pointer(_error_))
	return
}

func ComputeChecksumForBytes(checksum_type C.GChecksumType, data *Bytes) (_return_ *C.gchar) {
	_cgo_of_data_ := (*C.GBytes)(data)
	_return_ = C.g_compute_checksum_for_bytes((C.GChecksumType)(checksum_type), (*C.GBytes)(_cgo_of_data_))
	return
}

func ComputeChecksumForData(checksum_type C.GChecksumType, data *C.guchar, length C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_compute_checksum_for_data((C.GChecksumType)(checksum_type), (*C.guchar)(data), (C.gsize)(length))
	return
}

func ComputeChecksumForString(checksum_type C.GChecksumType, str string, length C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_compute_checksum_for_string((C.GChecksumType)(checksum_type), (*C.gchar)(_cgo_of_str_), (C.gssize)(length))
	return
}

func Convert(str string, len_ C.gssize, to_codeset string, from_codeset string) (_return_ *C.gchar, bytes_read C.gsize, bytes_written C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_to_codeset_ := (*C.gchar)(unsafe.Pointer(C.CString(to_codeset)))
	_cgo_of_from_codeset_ := (*C.gchar)(unsafe.Pointer(C.CString(from_codeset)))
	_return_ = C._g_convert((*C.gchar)(_cgo_of_str_), (C.gssize)(len_), (*C.gchar)(_cgo_of_to_codeset_), (*C.gchar)(_cgo_of_from_codeset_), (*C.gsize)(&bytes_read), (*C.gsize)(&bytes_written), unsafe.Pointer(_error_))
	return
}

func ConvertErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_convert_error_quark()
	return
}

func ConvertWithFallback(str string, len_ C.gssize, to_codeset string, from_codeset string, fallback string, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_to_codeset_ := (*C.gchar)(unsafe.Pointer(C.CString(to_codeset)))
	_cgo_of_from_codeset_ := (*C.gchar)(unsafe.Pointer(C.CString(from_codeset)))
	_cgo_of_fallback_ := (*C.gchar)(unsafe.Pointer(C.CString(fallback)))
	_return_ = C._g_convert_with_fallback((*C.gchar)(_cgo_of_str_), (C.gssize)(len_), (*C.gchar)(_cgo_of_to_codeset_), (*C.gchar)(_cgo_of_from_codeset_), (*C.gchar)(_cgo_of_fallback_), (*C.gsize)(bytes_read), (*C.gsize)(bytes_written), unsafe.Pointer(_error_))
	return
}

func ConvertWithIconv(str string, len_ C.gssize, converter C.GIConv, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_convert_with_iconv((*C.gchar)(_cgo_of_str_), (C.gssize)(len_), (C.GIConv)(converter), (*C.gsize)(bytes_read), (*C.gsize)(bytes_written), unsafe.Pointer(_error_))
	return
}

func DatalistClear(datalist unsafe.Pointer) () {
	C._g_datalist_clear(unsafe.Pointer(datalist))
	return
}

func DatalistForeach(datalist unsafe.Pointer, func_ C.GDataForeachFunc, user_data C.gpointer) () {
	C._g_datalist_foreach(unsafe.Pointer(datalist), (C.GDataForeachFunc)(func_), (C.gpointer)(user_data))
	return
}

func DatalistGetData(datalist unsafe.Pointer, key string) (_return_ C.gpointer) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_return_ = C._g_datalist_get_data(unsafe.Pointer(datalist), (*C.gchar)(_cgo_of_key_))
	return
}

func DatalistGetFlags(datalist unsafe.Pointer) (_return_ uint) {
	_cgo_return_ := C._g_datalist_get_flags(unsafe.Pointer(datalist))
	_return_ = uint(_cgo_return_)
	return
}

func DatalistIdDupData(datalist unsafe.Pointer, key_id C.GQuark, dup_func C.GDuplicateFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_dup_data(unsafe.Pointer(datalist), (C.GQuark)(key_id), (C.GDuplicateFunc)(dup_func), (C.gpointer)(user_data))
	return
}

func DatalistIdGetData(datalist unsafe.Pointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_get_data(unsafe.Pointer(datalist), (C.GQuark)(key_id))
	return
}

func DatalistIdRemoveNoNotify(datalist unsafe.Pointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_remove_no_notify(unsafe.Pointer(datalist), (C.GQuark)(key_id))
	return
}

func DatalistIdReplaceData(datalist unsafe.Pointer, key_id C.GQuark, oldval C.gpointer, newval C.gpointer, destroy C.GDestroyNotify, old_destroy *C.GDestroyNotify) (_return_ bool) {
	_cgo_return_ := C._g_datalist_id_replace_data(unsafe.Pointer(datalist), (C.GQuark)(key_id), (C.gpointer)(oldval), (C.gpointer)(newval), (C.GDestroyNotify)(destroy), (*C.GDestroyNotify)(old_destroy))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DatalistIdSetDataFull(datalist unsafe.Pointer, key_id C.GQuark, data C.gpointer, destroy_func C.GDestroyNotify) () {
	C._g_datalist_id_set_data_full(unsafe.Pointer(datalist), (C.GQuark)(key_id), (C.gpointer)(data), (C.GDestroyNotify)(destroy_func))
	return
}

func DatalistInit(datalist unsafe.Pointer) () {
	C._g_datalist_init(unsafe.Pointer(datalist))
	return
}

func DatalistSetFlags(datalist unsafe.Pointer, flags C.guint) () {
	C._g_datalist_set_flags(unsafe.Pointer(datalist), (C.guint)(flags))
	return
}

func DatalistUnsetFlags(datalist unsafe.Pointer, flags C.guint) () {
	C._g_datalist_unset_flags(unsafe.Pointer(datalist), (C.guint)(flags))
	return
}

func DatasetDestroy(dataset_location C.gconstpointer) () {
	C.g_dataset_destroy((C.gconstpointer)(dataset_location))
	return
}

func DatasetForeach(dataset_location C.gconstpointer, func_ C.GDataForeachFunc, user_data C.gpointer) () {
	C.g_dataset_foreach((C.gconstpointer)(dataset_location), (C.GDataForeachFunc)(func_), (C.gpointer)(user_data))
	return
}

func DatasetIdGetData(dataset_location C.gconstpointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_dataset_id_get_data((C.gconstpointer)(dataset_location), (C.GQuark)(key_id))
	return
}

func DatasetIdRemoveNoNotify(dataset_location C.gconstpointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_dataset_id_remove_no_notify((C.gconstpointer)(dataset_location), (C.GQuark)(key_id))
	return
}

func DatasetIdSetDataFull(dataset_location C.gconstpointer, key_id C.GQuark, data C.gpointer, destroy_func C.GDestroyNotify) () {
	C.g_dataset_id_set_data_full((C.gconstpointer)(dataset_location), (C.GQuark)(key_id), (C.gpointer)(data), (C.GDestroyNotify)(destroy_func))
	return
}

func Dcgettext(domain string, msgid string, category C.gint) (_return_ *C.gchar) {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	_cgo_of_msgid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	_return_ = C._g_dcgettext((*C.gchar)(_cgo_of_domain_), (*C.gchar)(_cgo_of_msgid_), (C.gint)(category))
	return
}

func Dgettext(domain string, msgid string) (_return_ *C.gchar) {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	_cgo_of_msgid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	_return_ = C._g_dgettext((*C.gchar)(_cgo_of_domain_), (*C.gchar)(_cgo_of_msgid_))
	return
}

func DirectEqual(v1 C.gconstpointer, v2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_direct_equal((C.gconstpointer)(v1), (C.gconstpointer)(v2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DirectHash(v C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_direct_hash((C.gconstpointer)(v))
	_return_ = uint(_cgo_return_)
	return
}

func Dngettext(domain string, msgid string, msgid_plural string, n C.gulong) (_return_ *C.gchar) {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	_cgo_of_msgid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	_cgo_of_msgid_plural_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid_plural)))
	_return_ = C._g_dngettext((*C.gchar)(_cgo_of_domain_), (*C.gchar)(_cgo_of_msgid_), (*C.gchar)(_cgo_of_msgid_plural_), (C.gulong)(n))
	return
}

func DoubleEqual(v1 C.gconstpointer, v2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_double_equal((C.gconstpointer)(v1), (C.gconstpointer)(v2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func DoubleHash(v C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_double_hash((C.gconstpointer)(v))
	_return_ = uint(_cgo_return_)
	return
}

func Dpgettext(domain string, msgctxtid string, msgidoffset C.gsize) (_return_ *C.gchar) {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	_cgo_of_msgctxtid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgctxtid)))
	_return_ = C._g_dpgettext((*C.gchar)(_cgo_of_domain_), (*C.gchar)(_cgo_of_msgctxtid_), (C.gsize)(msgidoffset))
	return
}

func Dpgettext2(domain string, context string, msgid string) (_return_ *C.gchar) {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	_cgo_of_context_ := (*C.gchar)(unsafe.Pointer(C.CString(context)))
	_cgo_of_msgid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	_return_ = C._g_dpgettext2((*C.gchar)(_cgo_of_domain_), (*C.gchar)(_cgo_of_context_), (*C.gchar)(_cgo_of_msgid_))
	return
}

func FileErrorFromErrno(err_no C.gint) (_return_ C.GFileError) {
	_return_ = C.g_file_error_from_errno((C.gint)(err_no))
	return
}

func FileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_file_error_quark()
	return
}

func FileOpenTmp(tmpl string) (_return_ int, name_used unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_cgo_return_ := C._g_file_open_tmp((*C.gchar)(_cgo_of_tmpl_), unsafe.Pointer(name_used), unsafe.Pointer(_error_))
	_return_ = int(_cgo_return_)
	return
}

func FileReadLink(filename string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_file_read_link((*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	return
}

func FileTest(filename string, test C.GFileTest) (_return_ bool) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_return_ := C._g_file_test((*C.gchar)(_cgo_of_filename_), (C.GFileTest)(test))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func FilenameDisplayBasename(filename string) (_return_ *C.gchar) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_filename_display_basename((*C.gchar)(_cgo_of_filename_))
	return
}

func FilenameDisplayName(filename string) (_return_ *C.gchar) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_filename_display_name((*C.gchar)(_cgo_of_filename_))
	return
}

func FilenameFromUri(uri string) (_return_ *C.gchar, hostname unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_return_ = C._g_filename_from_uri((*C.gchar)(_cgo_of_uri_), unsafe.Pointer(hostname), unsafe.Pointer(_error_))
	return
}

func FilenameFromUtf8(utf8string string, len_ C.gssize) (_return_ *C.gchar, bytes_read C.gsize, bytes_written C.gsize, _error_ unsafe.Pointer) {
	_cgo_of_utf8string_ := (*C.gchar)(unsafe.Pointer(C.CString(utf8string)))
	_return_ = C._g_filename_from_utf8((*C.gchar)(_cgo_of_utf8string_), (C.gssize)(len_), (*C.gsize)(&bytes_read), (*C.gsize)(&bytes_written), unsafe.Pointer(_error_))
	return
}

func FilenameToUri(filename string, hostname string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_return_ = C._g_filename_to_uri((*C.gchar)(_cgo_of_filename_), (*C.gchar)(_cgo_of_hostname_), unsafe.Pointer(_error_))
	return
}

func FilenameToUtf8(opsysstring string, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_opsysstring_ := (*C.gchar)(unsafe.Pointer(C.CString(opsysstring)))
	_return_ = C._g_filename_to_utf8((*C.gchar)(_cgo_of_opsysstring_), (C.gssize)(len_), (*C.gsize)(bytes_read), (*C.gsize)(bytes_written), unsafe.Pointer(_error_))
	return
}

func FindProgramInPath(program string) (_return_ *C.gchar) {
	_cgo_of_program_ := (*C.gchar)(unsafe.Pointer(C.CString(program)))
	_return_ = C._g_find_program_in_path((*C.gchar)(_cgo_of_program_))
	return
}

func FormatSize(size C.guint64) (_return_ *C.gchar) {
	_return_ = C.g_format_size((C.guint64)(size))
	return
}

func FormatSizeFull(size C.guint64, flags C.GFormatSizeFlags) (_return_ *C.gchar) {
	_return_ = C.g_format_size_full((C.guint64)(size), (C.GFormatSizeFlags)(flags))
	return
}

func Free(mem C.gpointer) () {
	C.g_free((C.gpointer)(mem))
	return
}

func GetApplicationName() (_return_ *C.gchar) {
	_return_ = C.g_get_application_name()
	return
}

func GetCharset(charset unsafe.Pointer) (_return_ bool) {
	_cgo_return_ := C._g_get_charset(unsafe.Pointer(charset))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func GetCodeset() (_return_ *C.gchar) {
	_return_ = C.g_get_codeset()
	return
}

func GetCurrentDir() (_return_ *C.gchar) {
	_return_ = C.g_get_current_dir()
	return
}

func GetCurrentTime(result *TimeVal) () {
	_cgo_of_result_ := (*C.GTimeVal)(result)
	C.g_get_current_time((*C.GTimeVal)(_cgo_of_result_))
	return
}

func GetEnviron() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C.g_get_environ())
	return
}

func GetFilenameCharsets(charsets unsafe.Pointer) (_return_ bool) {
	_cgo_return_ := C._g_get_filename_charsets(unsafe.Pointer(charsets))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func GetHomeDir() (_return_ *C.gchar) {
	_return_ = C.g_get_home_dir()
	return
}

func GetHostName() (_return_ *C.gchar) {
	_return_ = C.g_get_host_name()
	return
}

func GetLanguageNames() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C.g_get_language_names())
	return
}

func GetLocaleVariants(locale string) (_return_ unsafe.Pointer) {
	_cgo_of_locale_ := (*C.gchar)(unsafe.Pointer(C.CString(locale)))
	_return_ = unsafe.Pointer(C._g_get_locale_variants((*C.gchar)(_cgo_of_locale_)))
	return
}

func GetMonotonicTime() (_return_ int64) {
	_cgo_return_ := C.g_get_monotonic_time()
	_return_ = int64(_cgo_return_)
	return
}

func GetPrgname() (_return_ *C.gchar) {
	_return_ = C.g_get_prgname()
	return
}

func GetRealName() (_return_ *C.gchar) {
	_return_ = C.g_get_real_name()
	return
}

func GetRealTime() (_return_ int64) {
	_cgo_return_ := C.g_get_real_time()
	_return_ = int64(_cgo_return_)
	return
}

func GetSystemConfigDirs() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C.g_get_system_config_dirs())
	return
}

func GetSystemDataDirs() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C.g_get_system_data_dirs())
	return
}

func GetTmpDir() (_return_ *C.gchar) {
	_return_ = C.g_get_tmp_dir()
	return
}

func GetUserCacheDir() (_return_ *C.gchar) {
	_return_ = C.g_get_user_cache_dir()
	return
}

func GetUserConfigDir() (_return_ *C.gchar) {
	_return_ = C.g_get_user_config_dir()
	return
}

func GetUserDataDir() (_return_ *C.gchar) {
	_return_ = C.g_get_user_data_dir()
	return
}

func GetUserName() (_return_ *C.gchar) {
	_return_ = C.g_get_user_name()
	return
}

func GetUserRuntimeDir() (_return_ *C.gchar) {
	_return_ = C.g_get_user_runtime_dir()
	return
}

func GetUserSpecialDir(directory C.GUserDirectory) (_return_ *C.gchar) {
	_return_ = C.g_get_user_special_dir((C.GUserDirectory)(directory))
	return
}

func Getenv(variable string) (_return_ *C.gchar) {
	_cgo_of_variable_ := (*C.gchar)(unsafe.Pointer(C.CString(variable)))
	_return_ = C._g_getenv((*C.gchar)(_cgo_of_variable_))
	return
}

func HostnameIsAsciiEncoded(hostname string) (_return_ bool) {
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_cgo_return_ := C._g_hostname_is_ascii_encoded((*C.gchar)(_cgo_of_hostname_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HostnameIsIpAddress(hostname string) (_return_ bool) {
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_cgo_return_ := C._g_hostname_is_ip_address((*C.gchar)(_cgo_of_hostname_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HostnameIsNonAscii(hostname string) (_return_ bool) {
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_cgo_return_ := C._g_hostname_is_non_ascii((*C.gchar)(_cgo_of_hostname_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func HostnameToAscii(hostname string) (_return_ *C.gchar) {
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_return_ = C._g_hostname_to_ascii((*C.gchar)(_cgo_of_hostname_))
	return
}

func HostnameToUnicode(hostname string) (_return_ *C.gchar) {
	_cgo_of_hostname_ := (*C.gchar)(unsafe.Pointer(C.CString(hostname)))
	_return_ = C._g_hostname_to_unicode((*C.gchar)(_cgo_of_hostname_))
	return
}

func IdleAdd(function C.GSourceFunc, data C.gpointer) (_return_ uint) {
	_cgo_return_ := C.g_idle_add((C.GSourceFunc)(function), (C.gpointer)(data))
	_return_ = uint(_cgo_return_)
	return
}

func IdleAddFull(priority C.gint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_return_ := C.g_idle_add_full((C.gint)(priority), (C.GSourceFunc)(function), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func IdleRemoveByData(data C.gpointer) (_return_ bool) {
	_cgo_return_ := C.g_idle_remove_by_data((C.gpointer)(data))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func IdleSourceNew() (_return_ *Source) {
	_cgo_return_ := C.g_idle_source_new()
	_return_ = (*Source)(_cgo_return_)
	return
}

func Int64Equal(v1 C.gconstpointer, v2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_int64_equal((C.gconstpointer)(v1), (C.gconstpointer)(v2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func Int64Hash(v C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_int64_hash((C.gconstpointer)(v))
	_return_ = uint(_cgo_return_)
	return
}

func IntEqual(v1 C.gconstpointer, v2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_int_equal((C.gconstpointer)(v1), (C.gconstpointer)(v2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func IntHash(v C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_int_hash((C.gconstpointer)(v))
	_return_ = uint(_cgo_return_)
	return
}

func InternStaticString(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_intern_static_string((*C.gchar)(_cgo_of_string__))
	return
}

func InternString(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_intern_string((*C.gchar)(_cgo_of_string__))
	return
}

func IoAddWatch(channel *IOChannel, condition C.GIOCondition, func_ C.GIOFunc, user_data C.gpointer) (_return_ uint) {
	_cgo_of_channel_ := (*C.GIOChannel)(channel)
	_cgo_return_ := C.g_io_add_watch((*C.GIOChannel)(_cgo_of_channel_), (C.GIOCondition)(condition), (C.GIOFunc)(func_), (C.gpointer)(user_data))
	_return_ = uint(_cgo_return_)
	return
}

func IoAddWatchFull(channel *IOChannel, priority C.gint, condition C.GIOCondition, func_ C.GIOFunc, user_data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_of_channel_ := (*C.GIOChannel)(channel)
	_cgo_return_ := C.g_io_add_watch_full((*C.GIOChannel)(_cgo_of_channel_), (C.gint)(priority), (C.GIOCondition)(condition), (C.GIOFunc)(func_), (C.gpointer)(user_data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func IoCreateWatch(channel *IOChannel, condition C.GIOCondition) (_return_ *Source) {
	_cgo_of_channel_ := (*C.GIOChannel)(channel)
	_cgo_return_ := C.g_io_create_watch((*C.GIOChannel)(_cgo_of_channel_), (C.GIOCondition)(condition))
	_return_ = (*Source)(_cgo_return_)
	return
}

func Listenv() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C.g_listenv())
	return
}

func LocaleFromUtf8(utf8string string, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_utf8string_ := (*C.gchar)(unsafe.Pointer(C.CString(utf8string)))
	_return_ = C._g_locale_from_utf8((*C.gchar)(_cgo_of_utf8string_), (C.gssize)(len_), (*C.gsize)(bytes_read), (*C.gsize)(bytes_written), unsafe.Pointer(_error_))
	return
}

func LocaleToUtf8(opsysstring string, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_opsysstring_ := (*C.gchar)(unsafe.Pointer(C.CString(opsysstring)))
	_return_ = C._g_locale_to_utf8((*C.gchar)(_cgo_of_opsysstring_), (C.gssize)(len_), (*C.gsize)(bytes_read), (*C.gsize)(bytes_written), unsafe.Pointer(_error_))
	return
}

func LogDefaultHandler(log_domain string, log_level C.GLogLevelFlags, message string, unused_data C.gpointer) () {
	_cgo_of_log_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(log_domain)))
	_cgo_of_message_ := (*C.gchar)(unsafe.Pointer(C.CString(message)))
	C._g_log_default_handler((*C.gchar)(_cgo_of_log_domain_), (C.GLogLevelFlags)(log_level), (*C.gchar)(_cgo_of_message_), (C.gpointer)(unused_data))
	return
}

func LogRemoveHandler(log_domain string, handler_id C.guint) () {
	_cgo_of_log_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(log_domain)))
	C._g_log_remove_handler((*C.gchar)(_cgo_of_log_domain_), (C.guint)(handler_id))
	return
}

func LogSetAlwaysFatal(fatal_mask C.GLogLevelFlags) (_return_ C.GLogLevelFlags) {
	_return_ = C.g_log_set_always_fatal((C.GLogLevelFlags)(fatal_mask))
	return
}

func LogSetDefaultHandler(log_func C.GLogFunc, user_data C.gpointer) (_return_ C.GLogFunc) {
	_return_ = C.g_log_set_default_handler((C.GLogFunc)(log_func), (C.gpointer)(user_data))
	return
}

func LogSetFatalMask(log_domain string, fatal_mask C.GLogLevelFlags) (_return_ C.GLogLevelFlags) {
	_cgo_of_log_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(log_domain)))
	_return_ = C._g_log_set_fatal_mask((*C.gchar)(_cgo_of_log_domain_), (C.GLogLevelFlags)(fatal_mask))
	return
}

func LogSetHandler(log_domain string, log_levels C.GLogLevelFlags, log_func C.GLogFunc, user_data C.gpointer) (_return_ uint) {
	_cgo_of_log_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(log_domain)))
	_cgo_return_ := C._g_log_set_handler((*C.gchar)(_cgo_of_log_domain_), (C.GLogLevelFlags)(log_levels), (C.GLogFunc)(log_func), (C.gpointer)(user_data))
	_return_ = uint(_cgo_return_)
	return
}

func MainCurrentSource() (_return_ *Source) {
	_cgo_return_ := C.g_main_current_source()
	_return_ = (*Source)(_cgo_return_)
	return
}

func MainDepth() (_return_ int) {
	_cgo_return_ := C.g_main_depth()
	_return_ = int(_cgo_return_)
	return
}

func Malloc(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc((C.gsize)(n_bytes))
	return
}

func Malloc0(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc0((C.gsize)(n_bytes))
	return
}

func Malloc0N(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc0_n((C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func MallocN(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc_n((C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func MarkupErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_markup_error_quark()
	return
}

func MarkupEscapeText(text string, length C.gssize) (_return_ *C.gchar) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_return_ = C._g_markup_escape_text((*C.gchar)(_cgo_of_text_), (C.gssize)(length))
	return
}

func MemIsSystemMalloc() (_return_ bool) {
	_cgo_return_ := C.g_mem_is_system_malloc()
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func MemProfile() () {
	C.g_mem_profile()
	return
}

func MemSetVtable(vtable *MemVTable) () {
	_cgo_of_vtable_ := (*C.GMemVTable)(vtable)
	C.g_mem_set_vtable((*C.GMemVTable)(_cgo_of_vtable_))
	return
}

func Memdup(mem C.gconstpointer, byte_size C.guint) (_return_ C.gpointer) {
	_return_ = C.g_memdup((C.gconstpointer)(mem), (C.guint)(byte_size))
	return
}

func MkdirWithParents(pathname string, mode C.gint) (_return_ int) {
	_cgo_of_pathname_ := (*C.gchar)(unsafe.Pointer(C.CString(pathname)))
	_cgo_return_ := C._g_mkdir_with_parents((*C.gchar)(_cgo_of_pathname_), (C.gint)(mode))
	_return_ = int(_cgo_return_)
	return
}

func Mkdtemp(tmpl string) (_return_ *C.gchar) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_return_ = C.g_mkdtemp((*C.gchar)(_cgo_of_tmpl_))
	return
}

func MkdtempFull(tmpl string, mode C.gint) (_return_ *C.gchar) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_return_ = C.g_mkdtemp_full((*C.gchar)(_cgo_of_tmpl_), (C.gint)(mode))
	return
}

func Mkstemp(tmpl string) (_return_ int) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_cgo_return_ := C.g_mkstemp((*C.gchar)(_cgo_of_tmpl_))
	_return_ = int(_cgo_return_)
	return
}

func MkstempFull(tmpl string, flags C.gint, mode C.gint) (_return_ int) {
	_cgo_of_tmpl_ := (*C.gchar)(unsafe.Pointer(C.CString(tmpl)))
	_cgo_return_ := C.g_mkstemp_full((*C.gchar)(_cgo_of_tmpl_), (C.gint)(flags), (C.gint)(mode))
	_return_ = int(_cgo_return_)
	return
}

func NullifyPointer(nullify_location *C.gpointer) () {
	C.g_nullify_pointer((*C.gpointer)(nullify_location))
	return
}

func OnErrorQuery(prg_name string) () {
	_cgo_of_prg_name_ := (*C.gchar)(unsafe.Pointer(C.CString(prg_name)))
	C._g_on_error_query((*C.gchar)(_cgo_of_prg_name_))
	return
}

func OnErrorStackTrace(prg_name string) () {
	_cgo_of_prg_name_ := (*C.gchar)(unsafe.Pointer(C.CString(prg_name)))
	C._g_on_error_stack_trace((*C.gchar)(_cgo_of_prg_name_))
	return
}

func OptionErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_option_error_quark()
	return
}

func PathGetBasename(file_name string) (_return_ *C.gchar) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_return_ = C._g_path_get_basename((*C.gchar)(_cgo_of_file_name_))
	return
}

func PathGetDirname(file_name string) (_return_ *C.gchar) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_return_ = C._g_path_get_dirname((*C.gchar)(_cgo_of_file_name_))
	return
}

func PathIsAbsolute(file_name string) (_return_ bool) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_cgo_return_ := C._g_path_is_absolute((*C.gchar)(_cgo_of_file_name_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func PathSkipRoot(file_name string) (_return_ *C.gchar) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_return_ = C._g_path_skip_root((*C.gchar)(_cgo_of_file_name_))
	return
}

func PatternMatch(pspec *PatternSpec, string_length C.guint, string_ string, string_reversed string) (_return_ bool) {
	_cgo_of_pspec_ := (*C.GPatternSpec)(pspec)
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_string_reversed_ := (*C.gchar)(unsafe.Pointer(C.CString(string_reversed)))
	_cgo_return_ := C._g_pattern_match((*C.GPatternSpec)(_cgo_of_pspec_), (C.guint)(string_length), (*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_string_reversed_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func PatternMatchSimple(pattern string, string_ string) (_return_ bool) {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_pattern_match_simple((*C.gchar)(_cgo_of_pattern_), (*C.gchar)(_cgo_of_string__))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func PatternMatchString(pspec *PatternSpec, string_ string) (_return_ bool) {
	_cgo_of_pspec_ := (*C.GPatternSpec)(pspec)
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_return_ := C._g_pattern_match_string((*C.GPatternSpec)(_cgo_of_pspec_), (*C.gchar)(_cgo_of_string__))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func Poll(fds *PollFD, nfds C.guint, timeout C.gint) (_return_ int) {
	_cgo_of_fds_ := (*C.GPollFD)(fds)
	_cgo_return_ := C.g_poll((*C.GPollFD)(_cgo_of_fds_), (C.guint)(nfds), (C.gint)(timeout))
	_return_ = int(_cgo_return_)
	return
}

func PropagateError(dest unsafe.Pointer, src *Error) () {
	_cgo_of_src_ := (*C.GError)(src)
	C._g_propagate_error(unsafe.Pointer(dest), (*C.GError)(_cgo_of_src_))
	return
}

func QsortWithData(pbase C.gconstpointer, total_elems C.gint, size C.gsize, compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_qsort_with_data((C.gconstpointer)(pbase), (C.gint)(total_elems), (C.gsize)(size), (C.GCompareDataFunc)(compare_func), (C.gpointer)(user_data))
	return
}

func QuarkFromStaticString(string_ string) (_return_ C.GQuark) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_quark_from_static_string((*C.gchar)(_cgo_of_string__))
	return
}

func QuarkFromString(string_ string) (_return_ C.GQuark) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_quark_from_string((*C.gchar)(_cgo_of_string__))
	return
}

func QuarkToString(quark C.GQuark) (_return_ *C.gchar) {
	_return_ = C.g_quark_to_string((C.GQuark)(quark))
	return
}

func QuarkTryString(string_ string) (_return_ C.GQuark) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C._g_quark_try_string((*C.gchar)(_cgo_of_string__))
	return
}

func RandomDouble() (_return_ float64) {
	_cgo_return_ := C.g_random_double()
	_return_ = float64(_cgo_return_)
	return
}

func RandomDoubleRange(begin C.gdouble, end C.gdouble) (_return_ float64) {
	_cgo_return_ := C.g_random_double_range((C.gdouble)(begin), (C.gdouble)(end))
	_return_ = float64(_cgo_return_)
	return
}

func RandomInt() (_return_ uint32) {
	_cgo_return_ := C.g_random_int()
	_return_ = uint32(_cgo_return_)
	return
}

func RandomIntRange(begin C.gint32, end C.gint32) (_return_ int32) {
	_cgo_return_ := C.g_random_int_range((C.gint32)(begin), (C.gint32)(end))
	_return_ = int32(_cgo_return_)
	return
}

func RandomSetSeed(seed C.guint32) () {
	C.g_random_set_seed((C.guint32)(seed))
	return
}

func Realloc(mem C.gpointer, n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_realloc((C.gpointer)(mem), (C.gsize)(n_bytes))
	return
}

func ReallocN(mem C.gpointer, n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_realloc_n((C.gpointer)(mem), (C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func ReloadUserSpecialDirsCache() () {
	C.g_reload_user_special_dirs_cache()
	return
}

func ReturnIfFailWarning(log_domain *C.char, pretty_function *C.char, expression *C.char) () {
	C._g_return_if_fail_warning((*C.char)(log_domain), (*C.char)(pretty_function), (*C.char)(expression))
	return
}

func Rmdir(filename string) (_return_ C.int) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_rmdir((*C.gchar)(_cgo_of_filename_))
	return
}

func SetApplicationName(application_name string) () {
	_cgo_of_application_name_ := (*C.gchar)(unsafe.Pointer(C.CString(application_name)))
	C._g_set_application_name((*C.gchar)(_cgo_of_application_name_))
	return
}

func SetErrorLiteral(err unsafe.Pointer, domain C.GQuark, code C.gint, message string) () {
	_cgo_of_message_ := (*C.gchar)(unsafe.Pointer(C.CString(message)))
	C._g_set_error_literal(unsafe.Pointer(err), (C.GQuark)(domain), (C.gint)(code), (*C.gchar)(_cgo_of_message_))
	return
}

func SetPrgname(prgname string) () {
	_cgo_of_prgname_ := (*C.gchar)(unsafe.Pointer(C.CString(prgname)))
	C._g_set_prgname((*C.gchar)(_cgo_of_prgname_))
	return
}

func SetPrintHandler(func_ C.GPrintFunc) (_return_ C.GPrintFunc) {
	_return_ = C.g_set_print_handler((C.GPrintFunc)(func_))
	return
}

func SetPrinterrHandler(func_ C.GPrintFunc) (_return_ C.GPrintFunc) {
	_return_ = C.g_set_printerr_handler((C.GPrintFunc)(func_))
	return
}

func Setenv(variable string, value string, overwrite C.gboolean) (_return_ bool) {
	_cgo_of_variable_ := (*C.gchar)(unsafe.Pointer(C.CString(variable)))
	_cgo_of_value_ := (*C.gchar)(unsafe.Pointer(C.CString(value)))
	_cgo_return_ := C._g_setenv((*C.gchar)(_cgo_of_variable_), (*C.gchar)(_cgo_of_value_), (C.gboolean)(overwrite))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func ShellErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_shell_error_quark()
	return
}

func ShellQuote(unquoted_string string) (_return_ *C.gchar) {
	_cgo_of_unquoted_string_ := (*C.gchar)(unsafe.Pointer(C.CString(unquoted_string)))
	_return_ = C._g_shell_quote((*C.gchar)(_cgo_of_unquoted_string_))
	return
}

func ShellUnquote(quoted_string string) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_cgo_of_quoted_string_ := (*C.gchar)(unsafe.Pointer(C.CString(quoted_string)))
	_return_ = C._g_shell_unquote((*C.gchar)(_cgo_of_quoted_string_), unsafe.Pointer(_error_))
	return
}

func SliceAlloc(block_size C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_slice_alloc((C.gsize)(block_size))
	return
}

func SliceAlloc0(block_size C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_slice_alloc0((C.gsize)(block_size))
	return
}

func SliceCopy(block_size C.gsize, mem_block C.gconstpointer) (_return_ C.gpointer) {
	_return_ = C.g_slice_copy((C.gsize)(block_size), (C.gconstpointer)(mem_block))
	return
}

func SliceFree1(block_size C.gsize, mem_block C.gpointer) () {
	C.g_slice_free1((C.gsize)(block_size), (C.gpointer)(mem_block))
	return
}

func SliceFreeChainWithOffset(block_size C.gsize, mem_chain C.gpointer, next_offset C.gsize) () {
	C.g_slice_free_chain_with_offset((C.gsize)(block_size), (C.gpointer)(mem_chain), (C.gsize)(next_offset))
	return
}

func SpacedPrimesClosest(num C.guint) (_return_ uint) {
	_cgo_return_ := C.g_spaced_primes_closest((C.guint)(num))
	_return_ = uint(_cgo_return_)
	return
}

func SpawnCheckExitStatus(exit_status C.gint) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_spawn_check_exit_status((C.gint)(exit_status), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func SpawnClosePid(pid C.GPid) () {
	C.g_spawn_close_pid((C.GPid)(pid))
	return
}

func SpawnCommandLineAsync(command_line string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_command_line_ := (*C.gchar)(unsafe.Pointer(C.CString(command_line)))
	_cgo_return_ := C._g_spawn_command_line_async((*C.gchar)(_cgo_of_command_line_), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func SpawnErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_spawn_error_quark()
	return
}

func SpawnExitErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_spawn_exit_error_quark()
	return
}

func Stpcpy(dest string, src *C.char) (_return_ *C.gchar) {
	_cgo_of_dest_ := (*C.gchar)(unsafe.Pointer(C.CString(dest)))
	_return_ = C._g_stpcpy((*C.gchar)(_cgo_of_dest_), (*C.char)(src))
	return
}

func StrEqual(v1 C.gconstpointer, v2 C.gconstpointer) (_return_ bool) {
	_cgo_return_ := C.g_str_equal((C.gconstpointer)(v1), (C.gconstpointer)(v2))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func StrHasPrefix(str string, prefix string) (_return_ bool) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_prefix_ := (*C.gchar)(unsafe.Pointer(C.CString(prefix)))
	_cgo_return_ := C._g_str_has_prefix((*C.gchar)(_cgo_of_str_), (*C.gchar)(_cgo_of_prefix_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func StrHasSuffix(str string, suffix string) (_return_ bool) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_suffix_ := (*C.gchar)(unsafe.Pointer(C.CString(suffix)))
	_cgo_return_ := C._g_str_has_suffix((*C.gchar)(_cgo_of_str_), (*C.gchar)(_cgo_of_suffix_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func StrHash(v C.gconstpointer) (_return_ uint) {
	_cgo_return_ := C.g_str_hash((C.gconstpointer)(v))
	_return_ = uint(_cgo_return_)
	return
}

func Strcanon(string_ string, valid_chars string, substitutor C.gchar) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_valid_chars_ := (*C.gchar)(unsafe.Pointer(C.CString(valid_chars)))
	_return_ = C._g_strcanon((*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_valid_chars_), (C.gchar)(substitutor))
	return
}

func Strchomp(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C.g_strchomp((*C.gchar)(_cgo_of_string__))
	return
}

func Strchug(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C.g_strchug((*C.gchar)(_cgo_of_string__))
	return
}

func Strcmp0(str1 *C.char, str2 *C.char) (_return_ C.int) {
	_return_ = C._g_strcmp0((*C.char)(str1), (*C.char)(str2))
	return
}

func Strcompress(source string) (_return_ *C.gchar) {
	_cgo_of_source_ := (*C.gchar)(unsafe.Pointer(C.CString(source)))
	_return_ = C._g_strcompress((*C.gchar)(_cgo_of_source_))
	return
}

func Strdelimit(string_ string, delimiters string, new_delimiter C.gchar) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_delimiters_ := (*C.gchar)(unsafe.Pointer(C.CString(delimiters)))
	_return_ = C._g_strdelimit((*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_delimiters_), (C.gchar)(new_delimiter))
	return
}

func Strdup(str string) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_strdup((*C.gchar)(_cgo_of_str_))
	return
}

func Strdupv(str_array unsafe.Pointer) (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._g_strdupv(unsafe.Pointer(str_array)))
	return
}

func Strerror(errnum C.gint) (_return_ *C.gchar) {
	_return_ = C.g_strerror((C.gint)(errnum))
	return
}

func Strescape(source string, exceptions string) (_return_ *C.gchar) {
	_cgo_of_source_ := (*C.gchar)(unsafe.Pointer(C.CString(source)))
	_cgo_of_exceptions_ := (*C.gchar)(unsafe.Pointer(C.CString(exceptions)))
	_return_ = C._g_strescape((*C.gchar)(_cgo_of_source_), (*C.gchar)(_cgo_of_exceptions_))
	return
}

func Strfreev(str_array unsafe.Pointer) () {
	C._g_strfreev(unsafe.Pointer(str_array))
	return
}

func StringNew(init string) (_return_ *String) {
	_cgo_of_init_ := (*C.gchar)(unsafe.Pointer(C.CString(init)))
	_cgo_return_ := C._g_string_new((*C.gchar)(_cgo_of_init_))
	_return_ = (*String)(_cgo_return_)
	return
}

func StringNewLen(init string, len_ C.gssize) (_return_ *String) {
	_cgo_of_init_ := (*C.gchar)(unsafe.Pointer(C.CString(init)))
	_cgo_return_ := C._g_string_new_len((*C.gchar)(_cgo_of_init_), (C.gssize)(len_))
	_return_ = (*String)(_cgo_return_)
	return
}

func StringSizedNew(dfl_size C.gsize) (_return_ *String) {
	_cgo_return_ := C.g_string_sized_new((C.gsize)(dfl_size))
	_return_ = (*String)(_cgo_return_)
	return
}

func StripContext(msgid string, msgval string) (_return_ *C.gchar) {
	_cgo_of_msgid_ := (*C.gchar)(unsafe.Pointer(C.CString(msgid)))
	_cgo_of_msgval_ := (*C.gchar)(unsafe.Pointer(C.CString(msgval)))
	_return_ = C._g_strip_context((*C.gchar)(_cgo_of_msgid_), (*C.gchar)(_cgo_of_msgval_))
	return
}

func Strjoinv(separator string, str_array unsafe.Pointer) (_return_ *C.gchar) {
	_cgo_of_separator_ := (*C.gchar)(unsafe.Pointer(C.CString(separator)))
	_return_ = C._g_strjoinv((*C.gchar)(_cgo_of_separator_), unsafe.Pointer(str_array))
	return
}

func Strlcat(dest string, src string, dest_size C.gsize) (_return_ uint64) {
	_cgo_of_dest_ := (*C.gchar)(unsafe.Pointer(C.CString(dest)))
	_cgo_of_src_ := (*C.gchar)(unsafe.Pointer(C.CString(src)))
	_cgo_return_ := C._g_strlcat((*C.gchar)(_cgo_of_dest_), (*C.gchar)(_cgo_of_src_), (C.gsize)(dest_size))
	_return_ = uint64(_cgo_return_)
	return
}

func Strlcpy(dest string, src string, dest_size C.gsize) (_return_ uint64) {
	_cgo_of_dest_ := (*C.gchar)(unsafe.Pointer(C.CString(dest)))
	_cgo_of_src_ := (*C.gchar)(unsafe.Pointer(C.CString(src)))
	_cgo_return_ := C._g_strlcpy((*C.gchar)(_cgo_of_dest_), (*C.gchar)(_cgo_of_src_), (C.gsize)(dest_size))
	_return_ = uint64(_cgo_return_)
	return
}

func Strndup(str string, n C.gsize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_strndup((*C.gchar)(_cgo_of_str_), (C.gsize)(n))
	return
}

func Strnfill(length C.gsize, fill_char C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_strnfill((C.gsize)(length), (C.gchar)(fill_char))
	return
}

func Strreverse(string_ string) (_return_ *C.gchar) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_return_ = C.g_strreverse((*C.gchar)(_cgo_of_string__))
	return
}

func Strrstr(haystack string, needle string) (_return_ *C.gchar) {
	_cgo_of_haystack_ := (*C.gchar)(unsafe.Pointer(C.CString(haystack)))
	_cgo_of_needle_ := (*C.gchar)(unsafe.Pointer(C.CString(needle)))
	_return_ = C._g_strrstr((*C.gchar)(_cgo_of_haystack_), (*C.gchar)(_cgo_of_needle_))
	return
}

func StrrstrLen(haystack string, haystack_len C.gssize, needle string) (_return_ *C.gchar) {
	_cgo_of_haystack_ := (*C.gchar)(unsafe.Pointer(C.CString(haystack)))
	_cgo_of_needle_ := (*C.gchar)(unsafe.Pointer(C.CString(needle)))
	_return_ = C._g_strrstr_len((*C.gchar)(_cgo_of_haystack_), (C.gssize)(haystack_len), (*C.gchar)(_cgo_of_needle_))
	return
}

func Strsignal(signum C.gint) (_return_ *C.gchar) {
	_return_ = C.g_strsignal((C.gint)(signum))
	return
}

func Strsplit(string_ string, delimiter string, max_tokens C.gint) (_return_ unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_delimiter_ := (*C.gchar)(unsafe.Pointer(C.CString(delimiter)))
	_return_ = unsafe.Pointer(C._g_strsplit((*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_delimiter_), (C.gint)(max_tokens)))
	return
}

func StrsplitSet(string_ string, delimiters string, max_tokens C.gint) (_return_ unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of_delimiters_ := (*C.gchar)(unsafe.Pointer(C.CString(delimiters)))
	_return_ = unsafe.Pointer(C._g_strsplit_set((*C.gchar)(_cgo_of_string__), (*C.gchar)(_cgo_of_delimiters_), (C.gint)(max_tokens)))
	return
}

func StrstrLen(haystack string, haystack_len C.gssize, needle string) (_return_ *C.gchar) {
	_cgo_of_haystack_ := (*C.gchar)(unsafe.Pointer(C.CString(haystack)))
	_cgo_of_needle_ := (*C.gchar)(unsafe.Pointer(C.CString(needle)))
	_return_ = C._g_strstr_len((*C.gchar)(_cgo_of_haystack_), (C.gssize)(haystack_len), (*C.gchar)(_cgo_of_needle_))
	return
}

func Strtod(nptr string, endptr unsafe.Pointer) (_return_ float64) {
	_cgo_of_nptr_ := (*C.gchar)(unsafe.Pointer(C.CString(nptr)))
	_cgo_return_ := C._g_strtod((*C.gchar)(_cgo_of_nptr_), unsafe.Pointer(endptr))
	_return_ = float64(_cgo_return_)
	return
}

func StrvGetType() (_return_ C.GType) {
	_return_ = C.g_strv_get_type()
	return
}

func StrvLength(str_array unsafe.Pointer) (_return_ uint) {
	_cgo_return_ := C._g_strv_length(unsafe.Pointer(str_array))
	_return_ = uint(_cgo_return_)
	return
}

func TestAddDataFunc(testpath *C.char, test_data C.gconstpointer, test_func C.GTestDataFunc) () {
	C._g_test_add_data_func((*C.char)(testpath), (C.gconstpointer)(test_data), (C.GTestDataFunc)(test_func))
	return
}

func TestAddDataFuncFull(testpath *C.char, test_data C.gpointer, test_func C.GTestDataFunc, data_free_func C.GDestroyNotify) () {
	C._g_test_add_data_func_full((*C.char)(testpath), (C.gpointer)(test_data), (C.GTestDataFunc)(test_func), (C.GDestroyNotify)(data_free_func))
	return
}

func TestAddFunc(testpath *C.char, test_func C.GTestFunc) () {
	C._g_test_add_func((*C.char)(testpath), (C.GTestFunc)(test_func))
	return
}

func TestAddVtable(testpath *C.char, data_size C.gsize, test_data C.gconstpointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) () {
	C._g_test_add_vtable((*C.char)(testpath), (C.gsize)(data_size), (C.gconstpointer)(test_data), (C.GTestFixtureFunc)(data_setup), (C.GTestFixtureFunc)(data_test), (C.GTestFixtureFunc)(data_teardown))
	return
}

func TestAssertExpectedMessagesInternal(domain *C.char, file *C.char, line C.int, func_ *C.char) () {
	C._g_test_assert_expected_messages_internal((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_))
	return
}

func TestBug(bug_uri_snippet *C.char) () {
	C._g_test_bug((*C.char)(bug_uri_snippet))
	return
}

func TestBugBase(uri_pattern *C.char) () {
	C._g_test_bug_base((*C.char)(uri_pattern))
	return
}

func TestCreateCase(test_name *C.char, data_size C.gsize, test_data C.gconstpointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) (_return_ *TestCase) {
	_cgo_return_ := C._g_test_create_case((*C.char)(test_name), (C.gsize)(data_size), (C.gconstpointer)(test_data), (C.GTestFixtureFunc)(data_setup), (C.GTestFixtureFunc)(data_test), (C.GTestFixtureFunc)(data_teardown))
	_return_ = (*TestCase)(_cgo_return_)
	return
}

func TestCreateSuite(suite_name *C.char) (_return_ *TestSuite) {
	_cgo_return_ := C._g_test_create_suite((*C.char)(suite_name))
	_return_ = (*TestSuite)(_cgo_return_)
	return
}

func TestExpectMessage(log_domain string, log_level C.GLogLevelFlags, pattern string) () {
	_cgo_of_log_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(log_domain)))
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	C._g_test_expect_message((*C.gchar)(_cgo_of_log_domain_), (C.GLogLevelFlags)(log_level), (*C.gchar)(_cgo_of_pattern_))
	return
}

func TestFail() () {
	C.g_test_fail()
	return
}

func TestGetRoot() (_return_ *TestSuite) {
	_cgo_return_ := C.g_test_get_root()
	_return_ = (*TestSuite)(_cgo_return_)
	return
}

func TestLogSetFatalHandler(log_func C.GTestLogFatalFunc, user_data C.gpointer) () {
	C.g_test_log_set_fatal_handler((C.GTestLogFatalFunc)(log_func), (C.gpointer)(user_data))
	return
}

func TestLogTypeName(log_type C.GTestLogType) (_return_ *C.char) {
	_return_ = C.g_test_log_type_name((C.GTestLogType)(log_type))
	return
}

func TestQueueDestroy(destroy_func C.GDestroyNotify, destroy_data C.gpointer) () {
	C.g_test_queue_destroy((C.GDestroyNotify)(destroy_func), (C.gpointer)(destroy_data))
	return
}

func TestQueueFree(gfree_pointer C.gpointer) () {
	C.g_test_queue_free((C.gpointer)(gfree_pointer))
	return
}

func TestRandDouble() (_return_ C.double) {
	_return_ = C.g_test_rand_double()
	return
}

func TestRandDoubleRange(range_start C.double, range_end C.double) (_return_ C.double) {
	_return_ = C.g_test_rand_double_range((C.double)(range_start), (C.double)(range_end))
	return
}

func TestRandInt() (_return_ int32) {
	_cgo_return_ := C.g_test_rand_int()
	_return_ = int32(_cgo_return_)
	return
}

func TestRandIntRange(begin C.gint32, end C.gint32) (_return_ int32) {
	_cgo_return_ := C.g_test_rand_int_range((C.gint32)(begin), (C.gint32)(end))
	_return_ = int32(_cgo_return_)
	return
}

func TestRun() (_return_ C.int) {
	_return_ = C.g_test_run()
	return
}

func TestRunSuite(suite *TestSuite) (_return_ C.int) {
	_cgo_of_suite_ := (*C.GTestSuite)(suite)
	_return_ = C.g_test_run_suite((*C.GTestSuite)(_cgo_of_suite_))
	return
}

func TestTimerElapsed() (_return_ C.double) {
	_return_ = C.g_test_timer_elapsed()
	return
}

func TestTimerLast() (_return_ C.double) {
	_return_ = C.g_test_timer_last()
	return
}

func TestTimerStart() () {
	C.g_test_timer_start()
	return
}

func TestTrapAssertions(domain *C.char, file *C.char, line C.int, func_ *C.char, assertion_flags C.guint64, pattern *C.char) () {
	C._g_test_trap_assertions((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (C.guint64)(assertion_flags), (*C.char)(pattern))
	return
}

func TestTrapFork(usec_timeout C.guint64, test_trap_flags C.GTestTrapFlags) (_return_ bool) {
	_cgo_return_ := C.g_test_trap_fork((C.guint64)(usec_timeout), (C.GTestTrapFlags)(test_trap_flags))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func TestTrapHasPassed() (_return_ bool) {
	_cgo_return_ := C.g_test_trap_has_passed()
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func TestTrapReachedTimeout() (_return_ bool) {
	_cgo_return_ := C.g_test_trap_reached_timeout()
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func TimeoutAdd(interval C.guint, function C.GSourceFunc, data C.gpointer) (_return_ uint) {
	_cgo_return_ := C.g_timeout_add((C.guint)(interval), (C.GSourceFunc)(function), (C.gpointer)(data))
	_return_ = uint(_cgo_return_)
	return
}

func TimeoutAddFull(priority C.gint, interval C.guint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_return_ := C.g_timeout_add_full((C.gint)(priority), (C.guint)(interval), (C.GSourceFunc)(function), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func TimeoutAddSeconds(interval C.guint, function C.GSourceFunc, data C.gpointer) (_return_ uint) {
	_cgo_return_ := C.g_timeout_add_seconds((C.guint)(interval), (C.GSourceFunc)(function), (C.gpointer)(data))
	_return_ = uint(_cgo_return_)
	return
}

func TimeoutAddSecondsFull(priority C.gint, interval C.guint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_return_ := C.g_timeout_add_seconds_full((C.gint)(priority), (C.guint)(interval), (C.GSourceFunc)(function), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func TimeoutSourceNew(interval C.guint) (_return_ *Source) {
	_cgo_return_ := C.g_timeout_source_new((C.guint)(interval))
	_return_ = (*Source)(_cgo_return_)
	return
}

func TimeoutSourceNewSeconds(interval C.guint) (_return_ *Source) {
	_cgo_return_ := C.g_timeout_source_new_seconds((C.guint)(interval))
	_return_ = (*Source)(_cgo_return_)
	return
}

func TryMalloc(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc((C.gsize)(n_bytes))
	return
}

func TryMalloc0(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc0((C.gsize)(n_bytes))
	return
}

func TryMalloc0N(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc0_n((C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func TryMallocN(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc_n((C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func TryRealloc(mem C.gpointer, n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_realloc((C.gpointer)(mem), (C.gsize)(n_bytes))
	return
}

func TryReallocN(mem C.gpointer, n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_realloc_n((C.gpointer)(mem), (C.gsize)(n_blocks), (C.gsize)(n_block_bytes))
	return
}

func Ucs4ToUtf16(str *C.gunichar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar2, _error_ unsafe.Pointer) {
	_return_ = C._g_ucs4_to_utf16((*C.gunichar)(str), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func Ucs4ToUtf8(str *C.gunichar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_ucs4_to_utf8((*C.gunichar)(str), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func UnicharBreakType(c C.gunichar) (_return_ C.GUnicodeBreakType) {
	_return_ = C.g_unichar_break_type((C.gunichar)(c))
	return
}

func UnicharCombiningClass(uc C.gunichar) (_return_ int) {
	_cgo_return_ := C.g_unichar_combining_class((C.gunichar)(uc))
	_return_ = int(_cgo_return_)
	return
}

func UnicharCompose(a C.gunichar, b C.gunichar, ch *C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_compose((C.gunichar)(a), (C.gunichar)(b), (*C.gunichar)(ch))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharDecompose(ch C.gunichar, a *C.gunichar, b *C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_decompose((C.gunichar)(ch), (*C.gunichar)(a), (*C.gunichar)(b))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharDigitValue(c C.gunichar) (_return_ int) {
	_cgo_return_ := C.g_unichar_digit_value((C.gunichar)(c))
	_return_ = int(_cgo_return_)
	return
}

func UnicharFullyDecompose(ch C.gunichar, compat C.gboolean, result *C.gunichar, result_len C.gsize) (_return_ uint64) {
	_cgo_return_ := C.g_unichar_fully_decompose((C.gunichar)(ch), (C.gboolean)(compat), (*C.gunichar)(result), (C.gsize)(result_len))
	_return_ = uint64(_cgo_return_)
	return
}

func UnicharGetMirrorChar(ch C.gunichar, mirrored_ch *C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_get_mirror_char((C.gunichar)(ch), (*C.gunichar)(mirrored_ch))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharGetScript(ch C.gunichar) (_return_ C.GUnicodeScript) {
	_return_ = C.g_unichar_get_script((C.gunichar)(ch))
	return
}

func UnicharIsalnum(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isalnum((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsalpha(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isalpha((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIscntrl(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_iscntrl((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsdefined(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isdefined((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsdigit(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isdigit((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsgraph(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isgraph((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIslower(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_islower((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsmark(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_ismark((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsprint(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isprint((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIspunct(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_ispunct((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsspace(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isspace((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIstitle(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_istitle((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsupper(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isupper((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIswide(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_iswide((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIswideCjk(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_iswide_cjk((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIsxdigit(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_isxdigit((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharIszerowidth(c C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_iszerowidth((C.gunichar)(c))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharToUtf8(c C.gunichar, outbuf string) (_return_ int) {
	_cgo_of_outbuf_ := (*C.gchar)(unsafe.Pointer(C.CString(outbuf)))
	_cgo_return_ := C.g_unichar_to_utf8((C.gunichar)(c), (*C.gchar)(_cgo_of_outbuf_))
	_return_ = int(_cgo_return_)
	return
}

func UnicharTolower(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_tolower((C.gunichar)(c))
	return
}

func UnicharTotitle(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_totitle((C.gunichar)(c))
	return
}

func UnicharToupper(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_toupper((C.gunichar)(c))
	return
}

func UnicharType(c C.gunichar) (_return_ C.GUnicodeType) {
	_return_ = C.g_unichar_type((C.gunichar)(c))
	return
}

func UnicharValidate(ch C.gunichar) (_return_ bool) {
	_cgo_return_ := C.g_unichar_validate((C.gunichar)(ch))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnicharXdigitValue(c C.gunichar) (_return_ int) {
	_cgo_return_ := C.g_unichar_xdigit_value((C.gunichar)(c))
	_return_ = int(_cgo_return_)
	return
}

func UnicodeCanonicalOrdering(string_ *C.gunichar, len_ C.gsize) () {
	C.g_unicode_canonical_ordering((*C.gunichar)(string_), (C.gsize)(len_))
	return
}

func UnicodeScriptFromIso15924(iso15924 C.guint32) (_return_ C.GUnicodeScript) {
	_return_ = C.g_unicode_script_from_iso15924((C.guint32)(iso15924))
	return
}

func UnicodeScriptToIso15924(script C.GUnicodeScript) (_return_ uint32) {
	_cgo_return_ := C.g_unicode_script_to_iso15924((C.GUnicodeScript)(script))
	_return_ = uint32(_cgo_return_)
	return
}

func UnixErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_unix_error_quark()
	return
}

func UnixOpenPipe(fds *C.gint, flags C.gint) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_unix_open_pipe((*C.gint)(fds), (C.gint)(flags), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnixSetFdNonblocking(fd C.gint, nonblock C.gboolean) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_return_ := C._g_unix_set_fd_nonblocking((C.gint)(fd), (C.gboolean)(nonblock), unsafe.Pointer(_error_))
	_return_ = _cgo_return_ == C.glibtrue()
	return
}

func UnixSignalAdd(signum C.gint, handler C.GSourceFunc, user_data C.gpointer) (_return_ uint) {
	_cgo_return_ := C.g_unix_signal_add((C.gint)(signum), (C.GSourceFunc)(handler), (C.gpointer)(user_data))
	_return_ = uint(_cgo_return_)
	return
}

func UnixSignalAddFull(priority C.gint, signum C.gint, handler C.GSourceFunc, user_data C.gpointer, notify C.GDestroyNotify) (_return_ uint) {
	_cgo_return_ := C.g_unix_signal_add_full((C.gint)(priority), (C.gint)(signum), (C.GSourceFunc)(handler), (C.gpointer)(user_data), (C.GDestroyNotify)(notify))
	_return_ = uint(_cgo_return_)
	return
}

func UnixSignalSourceNew(signum C.gint) (_return_ *Source) {
	_cgo_return_ := C.g_unix_signal_source_new((C.gint)(signum))
	_return_ = (*Source)(_cgo_return_)
	return
}

func Unlink(filename string) (_return_ C.int) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_return_ = C._g_unlink((*C.gchar)(_cgo_of_filename_))
	return
}

func Unsetenv(variable string) () {
	_cgo_of_variable_ := (*C.gchar)(unsafe.Pointer(C.CString(variable)))
	C._g_unsetenv((*C.gchar)(_cgo_of_variable_))
	return
}

func UriEscapeString(unescaped *C.char, reserved_chars_allowed *C.char, allow_utf8 C.gboolean) (_return_ *C.char) {
	_return_ = C._g_uri_escape_string((*C.char)(unescaped), (*C.char)(reserved_chars_allowed), (C.gboolean)(allow_utf8))
	return
}

func UriListExtractUris(uri_list string) (_return_ unsafe.Pointer) {
	_cgo_of_uri_list_ := (*C.gchar)(unsafe.Pointer(C.CString(uri_list)))
	_return_ = unsafe.Pointer(C._g_uri_list_extract_uris((*C.gchar)(_cgo_of_uri_list_)))
	return
}

func UriParseScheme(uri *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_parse_scheme((*C.char)(uri))
	return
}

func UriUnescapeSegment(escaped_string *C.char, escaped_string_end *C.char, illegal_characters *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_unescape_segment((*C.char)(escaped_string), (*C.char)(escaped_string_end), (*C.char)(illegal_characters))
	return
}

func UriUnescapeString(escaped_string *C.char, illegal_characters *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_unescape_string((*C.char)(escaped_string), (*C.char)(illegal_characters))
	return
}

func Usleep(microseconds C.gulong) () {
	C.g_usleep((C.gulong)(microseconds))
	return
}

func Utf16ToUcs4(str *C.gunichar2, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar, _error_ unsafe.Pointer) {
	_return_ = C._g_utf16_to_ucs4((*C.gunichar2)(str), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func Utf16ToUtf8(str *C.gunichar2, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_utf16_to_utf8((*C.gunichar2)(str), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func Utf8Casefold(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_casefold((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8Collate(str1 string, str2 string) (_return_ int) {
	_cgo_of_str1_ := (*C.gchar)(unsafe.Pointer(C.CString(str1)))
	_cgo_of_str2_ := (*C.gchar)(unsafe.Pointer(C.CString(str2)))
	_cgo_return_ := C._g_utf8_collate((*C.gchar)(_cgo_of_str1_), (*C.gchar)(_cgo_of_str2_))
	_return_ = int(_cgo_return_)
	return
}

func Utf8CollateKey(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_collate_key((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8CollateKeyForFilename(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_collate_key_for_filename((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8FindNextChar(p string, end string) (_return_ *C.gchar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_cgo_of_end_ := (*C.gchar)(unsafe.Pointer(C.CString(end)))
	_return_ = C._g_utf8_find_next_char((*C.gchar)(_cgo_of_p_), (*C.gchar)(_cgo_of_end_))
	return
}

func Utf8FindPrevChar(str string, p string) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_find_prev_char((*C.gchar)(_cgo_of_str_), (*C.gchar)(_cgo_of_p_))
	return
}

func Utf8GetChar(p string) (_return_ C.gunichar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_get_char((*C.gchar)(_cgo_of_p_))
	return
}

func Utf8GetCharValidated(p string, max_len C.gssize) (_return_ C.gunichar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_get_char_validated((*C.gchar)(_cgo_of_p_), (C.gssize)(max_len))
	return
}

func Utf8Normalize(str string, len_ C.gssize, mode C.GNormalizeMode) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_normalize((*C.gchar)(_cgo_of_str_), (C.gssize)(len_), (C.GNormalizeMode)(mode))
	return
}

func Utf8OffsetToPointer(str string, offset C.glong) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_offset_to_pointer((*C.gchar)(_cgo_of_str_), (C.glong)(offset))
	return
}

func Utf8PointerToOffset(str string, pos string) (_return_ int64) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_pos_ := (*C.gchar)(unsafe.Pointer(C.CString(pos)))
	_cgo_return_ := C._g_utf8_pointer_to_offset((*C.gchar)(_cgo_of_str_), (*C.gchar)(_cgo_of_pos_))
	_return_ = int64(_cgo_return_)
	return
}

func Utf8PrevChar(p string) (_return_ *C.gchar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_prev_char((*C.gchar)(_cgo_of_p_))
	return
}

func Utf8Strchr(p string, len_ C.gssize, c C.gunichar) (_return_ *C.gchar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_strchr((*C.gchar)(_cgo_of_p_), (C.gssize)(len_), (C.gunichar)(c))
	return
}

func Utf8Strdown(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_strdown((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8Strlen(p string, max C.gssize) (_return_ int64) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_cgo_return_ := C._g_utf8_strlen((*C.gchar)(_cgo_of_p_), (C.gssize)(max))
	_return_ = int64(_cgo_return_)
	return
}

func Utf8Strncpy(dest string, src string, n C.gsize) (_return_ *C.gchar) {
	_cgo_of_dest_ := (*C.gchar)(unsafe.Pointer(C.CString(dest)))
	_cgo_of_src_ := (*C.gchar)(unsafe.Pointer(C.CString(src)))
	_return_ = C._g_utf8_strncpy((*C.gchar)(_cgo_of_dest_), (*C.gchar)(_cgo_of_src_), (C.gsize)(n))
	return
}

func Utf8Strrchr(p string, len_ C.gssize, c C.gunichar) (_return_ *C.gchar) {
	_cgo_of_p_ := (*C.gchar)(unsafe.Pointer(C.CString(p)))
	_return_ = C._g_utf8_strrchr((*C.gchar)(_cgo_of_p_), (C.gssize)(len_), (C.gunichar)(c))
	return
}

func Utf8Strreverse(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_strreverse((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8Strup(str string, len_ C.gssize) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_strup((*C.gchar)(_cgo_of_str_), (C.gssize)(len_))
	return
}

func Utf8Substring(str string, start_pos C.glong, end_pos C.glong) (_return_ *C.gchar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_substring((*C.gchar)(_cgo_of_str_), (C.glong)(start_pos), (C.glong)(end_pos))
	return
}

func Utf8ToUcs4(str string, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar, _error_ unsafe.Pointer) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_to_ucs4((*C.gchar)(_cgo_of_str_), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func Utf8ToUcs4Fast(str string, len_ C.glong, items_written *C.glong) (_return_ *C.gunichar) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_to_ucs4_fast((*C.gchar)(_cgo_of_str_), (C.glong)(len_), (*C.glong)(items_written))
	return
}

func Utf8ToUtf16(str string, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar2, _error_ unsafe.Pointer) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_return_ = C._g_utf8_to_utf16((*C.gchar)(_cgo_of_str_), (C.glong)(len_), (*C.glong)(items_read), (*C.glong)(items_written), unsafe.Pointer(_error_))
	return
}

func WarnMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, warnexpr *C.char) () {
	C._g_warn_message((*C.char)(domain), (*C.char)(file), (C.int)(line), (*C.char)(func_), (*C.char)(warnexpr))
	return
}

const BOOKMARK_FILE_ERROR_INVALID_URI = C.G_BOOKMARK_FILE_ERROR_INVALID_URI
const BOOKMARK_FILE_ERROR_INVALID_VALUE = C.G_BOOKMARK_FILE_ERROR_INVALID_VALUE
const BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = C.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED
const BOOKMARK_FILE_ERROR_URI_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND
const BOOKMARK_FILE_ERROR_READ = C.G_BOOKMARK_FILE_ERROR_READ
const BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = C.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING
const BOOKMARK_FILE_ERROR_WRITE = C.G_BOOKMARK_FILE_ERROR_WRITE
const BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
const CHECKSUM_MD5 = C.G_CHECKSUM_MD5
const CHECKSUM_SHA1 = C.G_CHECKSUM_SHA1
const CHECKSUM_SHA256 = C.G_CHECKSUM_SHA256
const CHECKSUM_SHA512 = C.G_CHECKSUM_SHA512
const CONVERT_ERROR_NO_CONVERSION = C.G_CONVERT_ERROR_NO_CONVERSION
const CONVERT_ERROR_ILLEGAL_SEQUENCE = C.G_CONVERT_ERROR_ILLEGAL_SEQUENCE
const CONVERT_ERROR_FAILED = C.G_CONVERT_ERROR_FAILED
const CONVERT_ERROR_PARTIAL_INPUT = C.G_CONVERT_ERROR_PARTIAL_INPUT
const CONVERT_ERROR_BAD_URI = C.G_CONVERT_ERROR_BAD_URI
const CONVERT_ERROR_NOT_ABSOLUTE_PATH = C.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
const DATE_DAY = C.G_DATE_DAY
const DATE_MONTH = C.G_DATE_MONTH
const DATE_YEAR = C.G_DATE_YEAR
const DATE_BAD_MONTH = C.G_DATE_BAD_MONTH
const DATE_JANUARY = C.G_DATE_JANUARY
const DATE_FEBRUARY = C.G_DATE_FEBRUARY
const DATE_MARCH = C.G_DATE_MARCH
const DATE_APRIL = C.G_DATE_APRIL
const DATE_MAY = C.G_DATE_MAY
const DATE_JUNE = C.G_DATE_JUNE
const DATE_JULY = C.G_DATE_JULY
const DATE_AUGUST = C.G_DATE_AUGUST
const DATE_SEPTEMBER = C.G_DATE_SEPTEMBER
const DATE_OCTOBER = C.G_DATE_OCTOBER
const DATE_NOVEMBER = C.G_DATE_NOVEMBER
const DATE_DECEMBER = C.G_DATE_DECEMBER
const DATE_BAD_WEEKDAY = C.G_DATE_BAD_WEEKDAY
const DATE_MONDAY = C.G_DATE_MONDAY
const DATE_TUESDAY = C.G_DATE_TUESDAY
const DATE_WEDNESDAY = C.G_DATE_WEDNESDAY
const DATE_THURSDAY = C.G_DATE_THURSDAY
const DATE_FRIDAY = C.G_DATE_FRIDAY
const DATE_SATURDAY = C.G_DATE_SATURDAY
const DATE_SUNDAY = C.G_DATE_SUNDAY
const ERR_UNKNOWN = C.G_ERR_UNKNOWN
const ERR_UNEXP_EOF = C.G_ERR_UNEXP_EOF
const ERR_UNEXP_EOF_IN_STRING = C.G_ERR_UNEXP_EOF_IN_STRING
const ERR_UNEXP_EOF_IN_COMMENT = C.G_ERR_UNEXP_EOF_IN_COMMENT
const ERR_NON_DIGIT_IN_CONST = C.G_ERR_NON_DIGIT_IN_CONST
const ERR_DIGIT_RADIX = C.G_ERR_DIGIT_RADIX
const ERR_FLOAT_RADIX = C.G_ERR_FLOAT_RADIX
const ERR_FLOAT_MALFORMED = C.G_ERR_FLOAT_MALFORMED
const FILE_ERROR_EXIST = C.G_FILE_ERROR_EXIST
const FILE_ERROR_ISDIR = C.G_FILE_ERROR_ISDIR
const FILE_ERROR_ACCES = C.G_FILE_ERROR_ACCES
const FILE_ERROR_NAMETOOLONG = C.G_FILE_ERROR_NAMETOOLONG
const FILE_ERROR_NOENT = C.G_FILE_ERROR_NOENT
const FILE_ERROR_NOTDIR = C.G_FILE_ERROR_NOTDIR
const FILE_ERROR_NXIO = C.G_FILE_ERROR_NXIO
const FILE_ERROR_NODEV = C.G_FILE_ERROR_NODEV
const FILE_ERROR_ROFS = C.G_FILE_ERROR_ROFS
const FILE_ERROR_TXTBSY = C.G_FILE_ERROR_TXTBSY
const FILE_ERROR_FAULT = C.G_FILE_ERROR_FAULT
const FILE_ERROR_LOOP = C.G_FILE_ERROR_LOOP
const FILE_ERROR_NOSPC = C.G_FILE_ERROR_NOSPC
const FILE_ERROR_NOMEM = C.G_FILE_ERROR_NOMEM
const FILE_ERROR_MFILE = C.G_FILE_ERROR_MFILE
const FILE_ERROR_NFILE = C.G_FILE_ERROR_NFILE
const FILE_ERROR_BADF = C.G_FILE_ERROR_BADF
const FILE_ERROR_INVAL = C.G_FILE_ERROR_INVAL
const FILE_ERROR_PIPE = C.G_FILE_ERROR_PIPE
const FILE_ERROR_AGAIN = C.G_FILE_ERROR_AGAIN
const FILE_ERROR_INTR = C.G_FILE_ERROR_INTR
const FILE_ERROR_IO = C.G_FILE_ERROR_IO
const FILE_ERROR_PERM = C.G_FILE_ERROR_PERM
const FILE_ERROR_NOSYS = C.G_FILE_ERROR_NOSYS
const FILE_ERROR_FAILED = C.G_FILE_ERROR_FAILED
const IO_CHANNEL_ERROR_FBIG = C.G_IO_CHANNEL_ERROR_FBIG
const IO_CHANNEL_ERROR_INVAL = C.G_IO_CHANNEL_ERROR_INVAL
const IO_CHANNEL_ERROR_IO = C.G_IO_CHANNEL_ERROR_IO
const IO_CHANNEL_ERROR_ISDIR = C.G_IO_CHANNEL_ERROR_ISDIR
const IO_CHANNEL_ERROR_NOSPC = C.G_IO_CHANNEL_ERROR_NOSPC
const IO_CHANNEL_ERROR_NXIO = C.G_IO_CHANNEL_ERROR_NXIO
const IO_CHANNEL_ERROR_OVERFLOW = C.G_IO_CHANNEL_ERROR_OVERFLOW
const IO_CHANNEL_ERROR_PIPE = C.G_IO_CHANNEL_ERROR_PIPE
const IO_CHANNEL_ERROR_FAILED = C.G_IO_CHANNEL_ERROR_FAILED
const IO_ERROR_NONE = C.G_IO_ERROR_NONE
const IO_ERROR_AGAIN = C.G_IO_ERROR_AGAIN
const IO_ERROR_INVAL = C.G_IO_ERROR_INVAL
const IO_ERROR_UNKNOWN = C.G_IO_ERROR_UNKNOWN
const IO_STATUS_ERROR = C.G_IO_STATUS_ERROR
const IO_STATUS_NORMAL = C.G_IO_STATUS_NORMAL
const IO_STATUS_EOF = C.G_IO_STATUS_EOF
const IO_STATUS_AGAIN = C.G_IO_STATUS_AGAIN
const KEY_FILE_ERROR_UNKNOWN_ENCODING = C.G_KEY_FILE_ERROR_UNKNOWN_ENCODING
const KEY_FILE_ERROR_PARSE = C.G_KEY_FILE_ERROR_PARSE
const KEY_FILE_ERROR_NOT_FOUND = C.G_KEY_FILE_ERROR_NOT_FOUND
const KEY_FILE_ERROR_KEY_NOT_FOUND = C.G_KEY_FILE_ERROR_KEY_NOT_FOUND
const KEY_FILE_ERROR_GROUP_NOT_FOUND = C.G_KEY_FILE_ERROR_GROUP_NOT_FOUND
const KEY_FILE_ERROR_INVALID_VALUE = C.G_KEY_FILE_ERROR_INVALID_VALUE
const MARKUP_ERROR_BAD_UTF8 = C.G_MARKUP_ERROR_BAD_UTF8
const MARKUP_ERROR_EMPTY = C.G_MARKUP_ERROR_EMPTY
const MARKUP_ERROR_PARSE = C.G_MARKUP_ERROR_PARSE
const MARKUP_ERROR_UNKNOWN_ELEMENT = C.G_MARKUP_ERROR_UNKNOWN_ELEMENT
const MARKUP_ERROR_UNKNOWN_ATTRIBUTE = C.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE
const MARKUP_ERROR_INVALID_CONTENT = C.G_MARKUP_ERROR_INVALID_CONTENT
const MARKUP_ERROR_MISSING_ATTRIBUTE = C.G_MARKUP_ERROR_MISSING_ATTRIBUTE
const NORMALIZE_DEFAULT = C.G_NORMALIZE_DEFAULT
const NORMALIZE_NFD = C.G_NORMALIZE_NFD
const NORMALIZE_DEFAULT_COMPOSE = C.G_NORMALIZE_DEFAULT_COMPOSE
const NORMALIZE_NFC = C.G_NORMALIZE_NFC
const NORMALIZE_ALL = C.G_NORMALIZE_ALL
const NORMALIZE_NFKD = C.G_NORMALIZE_NFKD
const NORMALIZE_ALL_COMPOSE = C.G_NORMALIZE_ALL_COMPOSE
const NORMALIZE_NFKC = C.G_NORMALIZE_NFKC
const ONCE_STATUS_NOTCALLED = C.G_ONCE_STATUS_NOTCALLED
const ONCE_STATUS_PROGRESS = C.G_ONCE_STATUS_PROGRESS
const ONCE_STATUS_READY = C.G_ONCE_STATUS_READY
const OPTION_ARG_NONE = C.G_OPTION_ARG_NONE
const OPTION_ARG_STRING = C.G_OPTION_ARG_STRING
const OPTION_ARG_INT = C.G_OPTION_ARG_INT
const OPTION_ARG_CALLBACK = C.G_OPTION_ARG_CALLBACK
const OPTION_ARG_FILENAME = C.G_OPTION_ARG_FILENAME
const OPTION_ARG_STRING_ARRAY = C.G_OPTION_ARG_STRING_ARRAY
const OPTION_ARG_FILENAME_ARRAY = C.G_OPTION_ARG_FILENAME_ARRAY
const OPTION_ARG_DOUBLE = C.G_OPTION_ARG_DOUBLE
const OPTION_ARG_INT64 = C.G_OPTION_ARG_INT64
const OPTION_ERROR_UNKNOWN_OPTION = C.G_OPTION_ERROR_UNKNOWN_OPTION
const OPTION_ERROR_BAD_VALUE = C.G_OPTION_ERROR_BAD_VALUE
const OPTION_ERROR_FAILED = C.G_OPTION_ERROR_FAILED
const REGEX_ERROR_COMPILE = C.G_REGEX_ERROR_COMPILE
const REGEX_ERROR_OPTIMIZE = C.G_REGEX_ERROR_OPTIMIZE
const REGEX_ERROR_REPLACE = C.G_REGEX_ERROR_REPLACE
const REGEX_ERROR_MATCH = C.G_REGEX_ERROR_MATCH
const REGEX_ERROR_INTERNAL = C.G_REGEX_ERROR_INTERNAL
const REGEX_ERROR_STRAY_BACKSLASH = C.G_REGEX_ERROR_STRAY_BACKSLASH
const REGEX_ERROR_MISSING_CONTROL_CHAR = C.G_REGEX_ERROR_MISSING_CONTROL_CHAR
const REGEX_ERROR_UNRECOGNIZED_ESCAPE = C.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE
const REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = C.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER
const REGEX_ERROR_QUANTIFIER_TOO_BIG = C.G_REGEX_ERROR_QUANTIFIER_TOO_BIG
const REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = C.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS
const REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = C.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS
const REGEX_ERROR_RANGE_OUT_OF_ORDER = C.G_REGEX_ERROR_RANGE_OUT_OF_ORDER
const REGEX_ERROR_NOTHING_TO_REPEAT = C.G_REGEX_ERROR_NOTHING_TO_REPEAT
const REGEX_ERROR_UNRECOGNIZED_CHARACTER = C.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER
const REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = C.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS
const REGEX_ERROR_UNMATCHED_PARENTHESIS = C.G_REGEX_ERROR_UNMATCHED_PARENTHESIS
const REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = C.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE
const REGEX_ERROR_UNTERMINATED_COMMENT = C.G_REGEX_ERROR_UNTERMINATED_COMMENT
const REGEX_ERROR_EXPRESSION_TOO_LARGE = C.G_REGEX_ERROR_EXPRESSION_TOO_LARGE
const REGEX_ERROR_MEMORY_ERROR = C.G_REGEX_ERROR_MEMORY_ERROR
const REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = C.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND
const REGEX_ERROR_MALFORMED_CONDITION = C.G_REGEX_ERROR_MALFORMED_CONDITION
const REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = C.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES
const REGEX_ERROR_ASSERTION_EXPECTED = C.G_REGEX_ERROR_ASSERTION_EXPECTED
const REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = C.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME
const REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = C.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED
const REGEX_ERROR_HEX_CODE_TOO_LARGE = C.G_REGEX_ERROR_HEX_CODE_TOO_LARGE
const REGEX_ERROR_INVALID_CONDITION = C.G_REGEX_ERROR_INVALID_CONDITION
const REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = C.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND
const REGEX_ERROR_INFINITE_LOOP = C.G_REGEX_ERROR_INFINITE_LOOP
const REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR
const REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = C.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME
const REGEX_ERROR_MALFORMED_PROPERTY = C.G_REGEX_ERROR_MALFORMED_PROPERTY
const REGEX_ERROR_UNKNOWN_PROPERTY = C.G_REGEX_ERROR_UNKNOWN_PROPERTY
const REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = C.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG
const REGEX_ERROR_TOO_MANY_SUBPATTERNS = C.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS
const REGEX_ERROR_INVALID_OCTAL_VALUE = C.G_REGEX_ERROR_INVALID_OCTAL_VALUE
const REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = C.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE
const REGEX_ERROR_DEFINE_REPETION = C.G_REGEX_ERROR_DEFINE_REPETION
const REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = C.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS
const REGEX_ERROR_MISSING_BACK_REFERENCE = C.G_REGEX_ERROR_MISSING_BACK_REFERENCE
const REGEX_ERROR_INVALID_RELATIVE_REFERENCE = C.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN
const REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = C.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB
const REGEX_ERROR_NUMBER_TOO_BIG = C.G_REGEX_ERROR_NUMBER_TOO_BIG
const REGEX_ERROR_MISSING_SUBPATTERN_NAME = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME
const REGEX_ERROR_MISSING_DIGIT = C.G_REGEX_ERROR_MISSING_DIGIT
const REGEX_ERROR_INVALID_DATA_CHARACTER = C.G_REGEX_ERROR_INVALID_DATA_CHARACTER
const REGEX_ERROR_EXTRA_SUBPATTERN_NAME = C.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED
const REGEX_ERROR_INVALID_CONTROL_CHAR = C.G_REGEX_ERROR_INVALID_CONTROL_CHAR
const REGEX_ERROR_MISSING_NAME = C.G_REGEX_ERROR_MISSING_NAME
const REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = C.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS
const REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = C.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES
const REGEX_ERROR_NAME_TOO_LONG = C.G_REGEX_ERROR_NAME_TOO_LONG
const REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = C.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE
const SEEK_CUR = C.G_SEEK_CUR
const SEEK_SET = C.G_SEEK_SET
const SEEK_END = C.G_SEEK_END
const SHELL_ERROR_BAD_QUOTING = C.G_SHELL_ERROR_BAD_QUOTING
const SHELL_ERROR_EMPTY_STRING = C.G_SHELL_ERROR_EMPTY_STRING
const SHELL_ERROR_FAILED = C.G_SHELL_ERROR_FAILED
const SLICE_CONFIG_ALWAYS_MALLOC = C.G_SLICE_CONFIG_ALWAYS_MALLOC
const SLICE_CONFIG_BYPASS_MAGAZINES = C.G_SLICE_CONFIG_BYPASS_MAGAZINES
const SLICE_CONFIG_WORKING_SET_MSECS = C.G_SLICE_CONFIG_WORKING_SET_MSECS
const SLICE_CONFIG_COLOR_INCREMENT = C.G_SLICE_CONFIG_COLOR_INCREMENT
const SLICE_CONFIG_CHUNK_SIZES = C.G_SLICE_CONFIG_CHUNK_SIZES
const SLICE_CONFIG_CONTENTION_COUNTER = C.G_SLICE_CONFIG_CONTENTION_COUNTER
const SPAWN_ERROR_FORK = C.G_SPAWN_ERROR_FORK
const SPAWN_ERROR_READ = C.G_SPAWN_ERROR_READ
const SPAWN_ERROR_CHDIR = C.G_SPAWN_ERROR_CHDIR
const SPAWN_ERROR_ACCES = C.G_SPAWN_ERROR_ACCES
const SPAWN_ERROR_PERM = C.G_SPAWN_ERROR_PERM
const SPAWN_ERROR_TOO_BIG = C.G_SPAWN_ERROR_TOO_BIG
const SPAWN_ERROR_2BIG = C.G_SPAWN_ERROR_2BIG
const SPAWN_ERROR_NOEXEC = C.G_SPAWN_ERROR_NOEXEC
const SPAWN_ERROR_NAMETOOLONG = C.G_SPAWN_ERROR_NAMETOOLONG
const SPAWN_ERROR_NOENT = C.G_SPAWN_ERROR_NOENT
const SPAWN_ERROR_NOMEM = C.G_SPAWN_ERROR_NOMEM
const SPAWN_ERROR_NOTDIR = C.G_SPAWN_ERROR_NOTDIR
const SPAWN_ERROR_LOOP = C.G_SPAWN_ERROR_LOOP
const SPAWN_ERROR_TXTBUSY = C.G_SPAWN_ERROR_TXTBUSY
const SPAWN_ERROR_IO = C.G_SPAWN_ERROR_IO
const SPAWN_ERROR_NFILE = C.G_SPAWN_ERROR_NFILE
const SPAWN_ERROR_MFILE = C.G_SPAWN_ERROR_MFILE
const SPAWN_ERROR_INVAL = C.G_SPAWN_ERROR_INVAL
const SPAWN_ERROR_ISDIR = C.G_SPAWN_ERROR_ISDIR
const SPAWN_ERROR_LIBBAD = C.G_SPAWN_ERROR_LIBBAD
const SPAWN_ERROR_FAILED = C.G_SPAWN_ERROR_FAILED
const TEST_LOG_NONE = C.G_TEST_LOG_NONE
const TEST_LOG_ERROR = C.G_TEST_LOG_ERROR
const TEST_LOG_START_BINARY = C.G_TEST_LOG_START_BINARY
const TEST_LOG_LIST_CASE = C.G_TEST_LOG_LIST_CASE
const TEST_LOG_SKIP_CASE = C.G_TEST_LOG_SKIP_CASE
const TEST_LOG_START_CASE = C.G_TEST_LOG_START_CASE
const TEST_LOG_STOP_CASE = C.G_TEST_LOG_STOP_CASE
const TEST_LOG_MIN_RESULT = C.G_TEST_LOG_MIN_RESULT
const TEST_LOG_MAX_RESULT = C.G_TEST_LOG_MAX_RESULT
const TEST_LOG_MESSAGE = C.G_TEST_LOG_MESSAGE
const THREAD_ERROR_AGAIN = C.G_THREAD_ERROR_AGAIN
const TIME_TYPE_STANDARD = C.G_TIME_TYPE_STANDARD
const TIME_TYPE_DAYLIGHT = C.G_TIME_TYPE_DAYLIGHT
const TIME_TYPE_UNIVERSAL = C.G_TIME_TYPE_UNIVERSAL
const TOKEN_EOF = C.G_TOKEN_EOF
const TOKEN_LEFT_PAREN = C.G_TOKEN_LEFT_PAREN
const TOKEN_RIGHT_PAREN = C.G_TOKEN_RIGHT_PAREN
const TOKEN_LEFT_CURLY = C.G_TOKEN_LEFT_CURLY
const TOKEN_RIGHT_CURLY = C.G_TOKEN_RIGHT_CURLY
const TOKEN_LEFT_BRACE = C.G_TOKEN_LEFT_BRACE
const TOKEN_RIGHT_BRACE = C.G_TOKEN_RIGHT_BRACE
const TOKEN_EQUAL_SIGN = C.G_TOKEN_EQUAL_SIGN
const TOKEN_COMMA = C.G_TOKEN_COMMA
const TOKEN_NONE = C.G_TOKEN_NONE
const TOKEN_ERROR = C.G_TOKEN_ERROR
const TOKEN_CHAR = C.G_TOKEN_CHAR
const TOKEN_BINARY = C.G_TOKEN_BINARY
const TOKEN_OCTAL = C.G_TOKEN_OCTAL
const TOKEN_INT = C.G_TOKEN_INT
const TOKEN_HEX = C.G_TOKEN_HEX
const TOKEN_FLOAT = C.G_TOKEN_FLOAT
const TOKEN_STRING = C.G_TOKEN_STRING
const TOKEN_SYMBOL = C.G_TOKEN_SYMBOL
const TOKEN_IDENTIFIER = C.G_TOKEN_IDENTIFIER
const TOKEN_IDENTIFIER_NULL = C.G_TOKEN_IDENTIFIER_NULL
const TOKEN_COMMENT_SINGLE = C.G_TOKEN_COMMENT_SINGLE
const TOKEN_COMMENT_MULTI = C.G_TOKEN_COMMENT_MULTI
const IN_ORDER = C.G_IN_ORDER
const PRE_ORDER = C.G_PRE_ORDER
const POST_ORDER = C.G_POST_ORDER
const LEVEL_ORDER = C.G_LEVEL_ORDER
const UNICODE_BREAK_MANDATORY = C.G_UNICODE_BREAK_MANDATORY
const UNICODE_BREAK_CARRIAGE_RETURN = C.G_UNICODE_BREAK_CARRIAGE_RETURN
const UNICODE_BREAK_LINE_FEED = C.G_UNICODE_BREAK_LINE_FEED
const UNICODE_BREAK_COMBINING_MARK = C.G_UNICODE_BREAK_COMBINING_MARK
const UNICODE_BREAK_SURROGATE = C.G_UNICODE_BREAK_SURROGATE
const UNICODE_BREAK_ZERO_WIDTH_SPACE = C.G_UNICODE_BREAK_ZERO_WIDTH_SPACE
const UNICODE_BREAK_INSEPARABLE = C.G_UNICODE_BREAK_INSEPARABLE
const UNICODE_BREAK_NON_BREAKING_GLUE = C.G_UNICODE_BREAK_NON_BREAKING_GLUE
const UNICODE_BREAK_CONTINGENT = C.G_UNICODE_BREAK_CONTINGENT
const UNICODE_BREAK_SPACE = C.G_UNICODE_BREAK_SPACE
const UNICODE_BREAK_AFTER = C.G_UNICODE_BREAK_AFTER
const UNICODE_BREAK_BEFORE = C.G_UNICODE_BREAK_BEFORE
const UNICODE_BREAK_BEFORE_AND_AFTER = C.G_UNICODE_BREAK_BEFORE_AND_AFTER
const UNICODE_BREAK_HYPHEN = C.G_UNICODE_BREAK_HYPHEN
const UNICODE_BREAK_NON_STARTER = C.G_UNICODE_BREAK_NON_STARTER
const UNICODE_BREAK_OPEN_PUNCTUATION = C.G_UNICODE_BREAK_OPEN_PUNCTUATION
const UNICODE_BREAK_CLOSE_PUNCTUATION = C.G_UNICODE_BREAK_CLOSE_PUNCTUATION
const UNICODE_BREAK_QUOTATION = C.G_UNICODE_BREAK_QUOTATION
const UNICODE_BREAK_EXCLAMATION = C.G_UNICODE_BREAK_EXCLAMATION
const UNICODE_BREAK_IDEOGRAPHIC = C.G_UNICODE_BREAK_IDEOGRAPHIC
const UNICODE_BREAK_NUMERIC = C.G_UNICODE_BREAK_NUMERIC
const UNICODE_BREAK_INFIX_SEPARATOR = C.G_UNICODE_BREAK_INFIX_SEPARATOR
const UNICODE_BREAK_SYMBOL = C.G_UNICODE_BREAK_SYMBOL
const UNICODE_BREAK_ALPHABETIC = C.G_UNICODE_BREAK_ALPHABETIC
const UNICODE_BREAK_PREFIX = C.G_UNICODE_BREAK_PREFIX
const UNICODE_BREAK_POSTFIX = C.G_UNICODE_BREAK_POSTFIX
const UNICODE_BREAK_COMPLEX_CONTEXT = C.G_UNICODE_BREAK_COMPLEX_CONTEXT
const UNICODE_BREAK_AMBIGUOUS = C.G_UNICODE_BREAK_AMBIGUOUS
const UNICODE_BREAK_UNKNOWN = C.G_UNICODE_BREAK_UNKNOWN
const UNICODE_BREAK_NEXT_LINE = C.G_UNICODE_BREAK_NEXT_LINE
const UNICODE_BREAK_WORD_JOINER = C.G_UNICODE_BREAK_WORD_JOINER
const UNICODE_BREAK_HANGUL_L_JAMO = C.G_UNICODE_BREAK_HANGUL_L_JAMO
const UNICODE_BREAK_HANGUL_V_JAMO = C.G_UNICODE_BREAK_HANGUL_V_JAMO
const UNICODE_BREAK_HANGUL_T_JAMO = C.G_UNICODE_BREAK_HANGUL_T_JAMO
const UNICODE_BREAK_HANGUL_LV_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE
const UNICODE_BREAK_HANGUL_LVT_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE
const UNICODE_BREAK_CLOSE_PARANTHESIS = C.G_UNICODE_BREAK_CLOSE_PARANTHESIS
const UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = C.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER
const UNICODE_BREAK_HEBREW_LETTER = C.G_UNICODE_BREAK_HEBREW_LETTER
const UNICODE_BREAK_REGIONAL_INDICATOR = C.G_UNICODE_BREAK_REGIONAL_INDICATOR
const UNICODE_SCRIPT_INVALID_CODE = C.G_UNICODE_SCRIPT_INVALID_CODE
const UNICODE_SCRIPT_COMMON = C.G_UNICODE_SCRIPT_COMMON
const UNICODE_SCRIPT_INHERITED = C.G_UNICODE_SCRIPT_INHERITED
const UNICODE_SCRIPT_ARABIC = C.G_UNICODE_SCRIPT_ARABIC
const UNICODE_SCRIPT_ARMENIAN = C.G_UNICODE_SCRIPT_ARMENIAN
const UNICODE_SCRIPT_BENGALI = C.G_UNICODE_SCRIPT_BENGALI
const UNICODE_SCRIPT_BOPOMOFO = C.G_UNICODE_SCRIPT_BOPOMOFO
const UNICODE_SCRIPT_CHEROKEE = C.G_UNICODE_SCRIPT_CHEROKEE
const UNICODE_SCRIPT_COPTIC = C.G_UNICODE_SCRIPT_COPTIC
const UNICODE_SCRIPT_CYRILLIC = C.G_UNICODE_SCRIPT_CYRILLIC
const UNICODE_SCRIPT_DESERET = C.G_UNICODE_SCRIPT_DESERET
const UNICODE_SCRIPT_DEVANAGARI = C.G_UNICODE_SCRIPT_DEVANAGARI
const UNICODE_SCRIPT_ETHIOPIC = C.G_UNICODE_SCRIPT_ETHIOPIC
const UNICODE_SCRIPT_GEORGIAN = C.G_UNICODE_SCRIPT_GEORGIAN
const UNICODE_SCRIPT_GOTHIC = C.G_UNICODE_SCRIPT_GOTHIC
const UNICODE_SCRIPT_GREEK = C.G_UNICODE_SCRIPT_GREEK
const UNICODE_SCRIPT_GUJARATI = C.G_UNICODE_SCRIPT_GUJARATI
const UNICODE_SCRIPT_GURMUKHI = C.G_UNICODE_SCRIPT_GURMUKHI
const UNICODE_SCRIPT_HAN = C.G_UNICODE_SCRIPT_HAN
const UNICODE_SCRIPT_HANGUL = C.G_UNICODE_SCRIPT_HANGUL
const UNICODE_SCRIPT_HEBREW = C.G_UNICODE_SCRIPT_HEBREW
const UNICODE_SCRIPT_HIRAGANA = C.G_UNICODE_SCRIPT_HIRAGANA
const UNICODE_SCRIPT_KANNADA = C.G_UNICODE_SCRIPT_KANNADA
const UNICODE_SCRIPT_KATAKANA = C.G_UNICODE_SCRIPT_KATAKANA
const UNICODE_SCRIPT_KHMER = C.G_UNICODE_SCRIPT_KHMER
const UNICODE_SCRIPT_LAO = C.G_UNICODE_SCRIPT_LAO
const UNICODE_SCRIPT_LATIN = C.G_UNICODE_SCRIPT_LATIN
const UNICODE_SCRIPT_MALAYALAM = C.G_UNICODE_SCRIPT_MALAYALAM
const UNICODE_SCRIPT_MONGOLIAN = C.G_UNICODE_SCRIPT_MONGOLIAN
const UNICODE_SCRIPT_MYANMAR = C.G_UNICODE_SCRIPT_MYANMAR
const UNICODE_SCRIPT_OGHAM = C.G_UNICODE_SCRIPT_OGHAM
const UNICODE_SCRIPT_OLD_ITALIC = C.G_UNICODE_SCRIPT_OLD_ITALIC
const UNICODE_SCRIPT_ORIYA = C.G_UNICODE_SCRIPT_ORIYA
const UNICODE_SCRIPT_RUNIC = C.G_UNICODE_SCRIPT_RUNIC
const UNICODE_SCRIPT_SINHALA = C.G_UNICODE_SCRIPT_SINHALA
const UNICODE_SCRIPT_SYRIAC = C.G_UNICODE_SCRIPT_SYRIAC
const UNICODE_SCRIPT_TAMIL = C.G_UNICODE_SCRIPT_TAMIL
const UNICODE_SCRIPT_TELUGU = C.G_UNICODE_SCRIPT_TELUGU
const UNICODE_SCRIPT_THAANA = C.G_UNICODE_SCRIPT_THAANA
const UNICODE_SCRIPT_THAI = C.G_UNICODE_SCRIPT_THAI
const UNICODE_SCRIPT_TIBETAN = C.G_UNICODE_SCRIPT_TIBETAN
const UNICODE_SCRIPT_CANADIAN_ABORIGINAL = C.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL
const UNICODE_SCRIPT_YI = C.G_UNICODE_SCRIPT_YI
const UNICODE_SCRIPT_TAGALOG = C.G_UNICODE_SCRIPT_TAGALOG
const UNICODE_SCRIPT_HANUNOO = C.G_UNICODE_SCRIPT_HANUNOO
const UNICODE_SCRIPT_BUHID = C.G_UNICODE_SCRIPT_BUHID
const UNICODE_SCRIPT_TAGBANWA = C.G_UNICODE_SCRIPT_TAGBANWA
const UNICODE_SCRIPT_BRAILLE = C.G_UNICODE_SCRIPT_BRAILLE
const UNICODE_SCRIPT_CYPRIOT = C.G_UNICODE_SCRIPT_CYPRIOT
const UNICODE_SCRIPT_LIMBU = C.G_UNICODE_SCRIPT_LIMBU
const UNICODE_SCRIPT_OSMANYA = C.G_UNICODE_SCRIPT_OSMANYA
const UNICODE_SCRIPT_SHAVIAN = C.G_UNICODE_SCRIPT_SHAVIAN
const UNICODE_SCRIPT_LINEAR_B = C.G_UNICODE_SCRIPT_LINEAR_B
const UNICODE_SCRIPT_TAI_LE = C.G_UNICODE_SCRIPT_TAI_LE
const UNICODE_SCRIPT_UGARITIC = C.G_UNICODE_SCRIPT_UGARITIC
const UNICODE_SCRIPT_NEW_TAI_LUE = C.G_UNICODE_SCRIPT_NEW_TAI_LUE
const UNICODE_SCRIPT_BUGINESE = C.G_UNICODE_SCRIPT_BUGINESE
const UNICODE_SCRIPT_GLAGOLITIC = C.G_UNICODE_SCRIPT_GLAGOLITIC
const UNICODE_SCRIPT_TIFINAGH = C.G_UNICODE_SCRIPT_TIFINAGH
const UNICODE_SCRIPT_SYLOTI_NAGRI = C.G_UNICODE_SCRIPT_SYLOTI_NAGRI
const UNICODE_SCRIPT_OLD_PERSIAN = C.G_UNICODE_SCRIPT_OLD_PERSIAN
const UNICODE_SCRIPT_KHAROSHTHI = C.G_UNICODE_SCRIPT_KHAROSHTHI
const UNICODE_SCRIPT_UNKNOWN = C.G_UNICODE_SCRIPT_UNKNOWN
const UNICODE_SCRIPT_BALINESE = C.G_UNICODE_SCRIPT_BALINESE
const UNICODE_SCRIPT_CUNEIFORM = C.G_UNICODE_SCRIPT_CUNEIFORM
const UNICODE_SCRIPT_PHOENICIAN = C.G_UNICODE_SCRIPT_PHOENICIAN
const UNICODE_SCRIPT_PHAGS_PA = C.G_UNICODE_SCRIPT_PHAGS_PA
const UNICODE_SCRIPT_NKO = C.G_UNICODE_SCRIPT_NKO
const UNICODE_SCRIPT_KAYAH_LI = C.G_UNICODE_SCRIPT_KAYAH_LI
const UNICODE_SCRIPT_LEPCHA = C.G_UNICODE_SCRIPT_LEPCHA
const UNICODE_SCRIPT_REJANG = C.G_UNICODE_SCRIPT_REJANG
const UNICODE_SCRIPT_SUNDANESE = C.G_UNICODE_SCRIPT_SUNDANESE
const UNICODE_SCRIPT_SAURASHTRA = C.G_UNICODE_SCRIPT_SAURASHTRA
const UNICODE_SCRIPT_CHAM = C.G_UNICODE_SCRIPT_CHAM
const UNICODE_SCRIPT_OL_CHIKI = C.G_UNICODE_SCRIPT_OL_CHIKI
const UNICODE_SCRIPT_VAI = C.G_UNICODE_SCRIPT_VAI
const UNICODE_SCRIPT_CARIAN = C.G_UNICODE_SCRIPT_CARIAN
const UNICODE_SCRIPT_LYCIAN = C.G_UNICODE_SCRIPT_LYCIAN
const UNICODE_SCRIPT_LYDIAN = C.G_UNICODE_SCRIPT_LYDIAN
const UNICODE_SCRIPT_AVESTAN = C.G_UNICODE_SCRIPT_AVESTAN
const UNICODE_SCRIPT_BAMUM = C.G_UNICODE_SCRIPT_BAMUM
const UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = C.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS
const UNICODE_SCRIPT_IMPERIAL_ARAMAIC = C.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC
const UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI
const UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN
const UNICODE_SCRIPT_JAVANESE = C.G_UNICODE_SCRIPT_JAVANESE
const UNICODE_SCRIPT_KAITHI = C.G_UNICODE_SCRIPT_KAITHI
const UNICODE_SCRIPT_LISU = C.G_UNICODE_SCRIPT_LISU
const UNICODE_SCRIPT_MEETEI_MAYEK = C.G_UNICODE_SCRIPT_MEETEI_MAYEK
const UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = C.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN
const UNICODE_SCRIPT_OLD_TURKIC = C.G_UNICODE_SCRIPT_OLD_TURKIC
const UNICODE_SCRIPT_SAMARITAN = C.G_UNICODE_SCRIPT_SAMARITAN
const UNICODE_SCRIPT_TAI_THAM = C.G_UNICODE_SCRIPT_TAI_THAM
const UNICODE_SCRIPT_TAI_VIET = C.G_UNICODE_SCRIPT_TAI_VIET
const UNICODE_SCRIPT_BATAK = C.G_UNICODE_SCRIPT_BATAK
const UNICODE_SCRIPT_BRAHMI = C.G_UNICODE_SCRIPT_BRAHMI
const UNICODE_SCRIPT_MANDAIC = C.G_UNICODE_SCRIPT_MANDAIC
const UNICODE_SCRIPT_CHAKMA = C.G_UNICODE_SCRIPT_CHAKMA
const UNICODE_SCRIPT_MEROITIC_CURSIVE = C.G_UNICODE_SCRIPT_MEROITIC_CURSIVE
const UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = C.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS
const UNICODE_SCRIPT_MIAO = C.G_UNICODE_SCRIPT_MIAO
const UNICODE_SCRIPT_SHARADA = C.G_UNICODE_SCRIPT_SHARADA
const UNICODE_SCRIPT_SORA_SOMPENG = C.G_UNICODE_SCRIPT_SORA_SOMPENG
const UNICODE_SCRIPT_TAKRI = C.G_UNICODE_SCRIPT_TAKRI
const UNICODE_CONTROL = C.G_UNICODE_CONTROL
const UNICODE_FORMAT = C.G_UNICODE_FORMAT
const UNICODE_UNASSIGNED = C.G_UNICODE_UNASSIGNED
const UNICODE_PRIVATE_USE = C.G_UNICODE_PRIVATE_USE
const UNICODE_SURROGATE = C.G_UNICODE_SURROGATE
const UNICODE_LOWERCASE_LETTER = C.G_UNICODE_LOWERCASE_LETTER
const UNICODE_MODIFIER_LETTER = C.G_UNICODE_MODIFIER_LETTER
const UNICODE_OTHER_LETTER = C.G_UNICODE_OTHER_LETTER
const UNICODE_TITLECASE_LETTER = C.G_UNICODE_TITLECASE_LETTER
const UNICODE_UPPERCASE_LETTER = C.G_UNICODE_UPPERCASE_LETTER
const UNICODE_SPACING_MARK = C.G_UNICODE_SPACING_MARK
const UNICODE_ENCLOSING_MARK = C.G_UNICODE_ENCLOSING_MARK
const UNICODE_NON_SPACING_MARK = C.G_UNICODE_NON_SPACING_MARK
const UNICODE_DECIMAL_NUMBER = C.G_UNICODE_DECIMAL_NUMBER
const UNICODE_LETTER_NUMBER = C.G_UNICODE_LETTER_NUMBER
const UNICODE_OTHER_NUMBER = C.G_UNICODE_OTHER_NUMBER
const UNICODE_CONNECT_PUNCTUATION = C.G_UNICODE_CONNECT_PUNCTUATION
const UNICODE_DASH_PUNCTUATION = C.G_UNICODE_DASH_PUNCTUATION
const UNICODE_CLOSE_PUNCTUATION = C.G_UNICODE_CLOSE_PUNCTUATION
const UNICODE_FINAL_PUNCTUATION = C.G_UNICODE_FINAL_PUNCTUATION
const UNICODE_INITIAL_PUNCTUATION = C.G_UNICODE_INITIAL_PUNCTUATION
const UNICODE_OTHER_PUNCTUATION = C.G_UNICODE_OTHER_PUNCTUATION
const UNICODE_OPEN_PUNCTUATION = C.G_UNICODE_OPEN_PUNCTUATION
const UNICODE_CURRENCY_SYMBOL = C.G_UNICODE_CURRENCY_SYMBOL
const UNICODE_MODIFIER_SYMBOL = C.G_UNICODE_MODIFIER_SYMBOL
const UNICODE_MATH_SYMBOL = C.G_UNICODE_MATH_SYMBOL
const UNICODE_OTHER_SYMBOL = C.G_UNICODE_OTHER_SYMBOL
const UNICODE_LINE_SEPARATOR = C.G_UNICODE_LINE_SEPARATOR
const UNICODE_PARAGRAPH_SEPARATOR = C.G_UNICODE_PARAGRAPH_SEPARATOR
const UNICODE_SPACE_SEPARATOR = C.G_UNICODE_SPACE_SEPARATOR
const USER_DIRECTORY_DESKTOP = C.G_USER_DIRECTORY_DESKTOP
const USER_DIRECTORY_DOCUMENTS = C.G_USER_DIRECTORY_DOCUMENTS
const USER_DIRECTORY_DOWNLOAD = C.G_USER_DIRECTORY_DOWNLOAD
const USER_DIRECTORY_MUSIC = C.G_USER_DIRECTORY_MUSIC
const USER_DIRECTORY_PICTURES = C.G_USER_DIRECTORY_PICTURES
const USER_DIRECTORY_PUBLIC_SHARE = C.G_USER_DIRECTORY_PUBLIC_SHARE
const USER_DIRECTORY_TEMPLATES = C.G_USER_DIRECTORY_TEMPLATES
const USER_DIRECTORY_VIDEOS = C.G_USER_DIRECTORY_VIDEOS
const USER_N_DIRECTORIES = C.G_USER_N_DIRECTORIES
const VARIANT_CLASS_BOOLEAN = C.G_VARIANT_CLASS_BOOLEAN
const VARIANT_CLASS_BYTE = C.G_VARIANT_CLASS_BYTE
const VARIANT_CLASS_INT16 = C.G_VARIANT_CLASS_INT16
const VARIANT_CLASS_UINT16 = C.G_VARIANT_CLASS_UINT16
const VARIANT_CLASS_INT32 = C.G_VARIANT_CLASS_INT32
const VARIANT_CLASS_UINT32 = C.G_VARIANT_CLASS_UINT32
const VARIANT_CLASS_INT64 = C.G_VARIANT_CLASS_INT64
const VARIANT_CLASS_UINT64 = C.G_VARIANT_CLASS_UINT64
const VARIANT_CLASS_HANDLE = C.G_VARIANT_CLASS_HANDLE
const VARIANT_CLASS_DOUBLE = C.G_VARIANT_CLASS_DOUBLE
const VARIANT_CLASS_STRING = C.G_VARIANT_CLASS_STRING
const VARIANT_CLASS_OBJECT_PATH = C.G_VARIANT_CLASS_OBJECT_PATH
const VARIANT_CLASS_SIGNATURE = C.G_VARIANT_CLASS_SIGNATURE
const VARIANT_CLASS_VARIANT = C.G_VARIANT_CLASS_VARIANT
const VARIANT_CLASS_MAYBE = C.G_VARIANT_CLASS_MAYBE
const VARIANT_CLASS_ARRAY = C.G_VARIANT_CLASS_ARRAY
const VARIANT_CLASS_TUPLE = C.G_VARIANT_CLASS_TUPLE
const VARIANT_CLASS_DICT_ENTRY = C.G_VARIANT_CLASS_DICT_ENTRY
const VARIANT_PARSE_ERROR_FAILED = C.G_VARIANT_PARSE_ERROR_FAILED
const VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = C.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE
const VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = C.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END
const VARIANT_PARSE_ERROR_INVALID_CHARACTER = C.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER
const VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING
const VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = C.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH
const VARIANT_PARSE_ERROR_INVALID_SIGNATURE = C.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE
const VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING
const VARIANT_PARSE_ERROR_NO_COMMON_TYPE = C.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE
const VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = C.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE
const VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = C.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG
const VARIANT_PARSE_ERROR_TYPE_ERROR = C.G_VARIANT_PARSE_ERROR_TYPE_ERROR
const VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = C.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN
const VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = C.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD
const VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = C.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT
const VARIANT_PARSE_ERROR_VALUE_EXPECTED = C.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED
const ASCII_DTOSTR_BUF_SIZE = C.G_ASCII_DTOSTR_BUF_SIZE
const BIG_ENDIAN = C.G_BIG_ENDIAN
const CAN_INLINE = C.G_CAN_INLINE
const CSET_A_2_Z = C.G_CSET_A_2_Z
const CSET_DIGITS = C.G_CSET_DIGITS
const CSET_a_2_z = C.G_CSET_a_2_z
const DATALIST_FLAGS_MASK = C.G_DATALIST_FLAGS_MASK
const DATE_BAD_DAY = C.G_DATE_BAD_DAY
const DATE_BAD_JULIAN = C.G_DATE_BAD_JULIAN
const DATE_BAD_YEAR = C.G_DATE_BAD_YEAR
const DIR_SEPARATOR = C.G_DIR_SEPARATOR
const DIR_SEPARATOR_S = C.G_DIR_SEPARATOR_S
const GINT16_FORMAT = C.G_GINT16_FORMAT
const GINT16_MODIFIER = C.G_GINT16_MODIFIER
const GINT32_FORMAT = C.G_GINT32_FORMAT
const GINT32_MODIFIER = C.G_GINT32_MODIFIER
const GINT64_FORMAT = C.G_GINT64_FORMAT
const GINT64_MODIFIER = C.G_GINT64_MODIFIER
const GINTPTR_FORMAT = C.G_GINTPTR_FORMAT
const GINTPTR_MODIFIER = C.G_GINTPTR_MODIFIER
const GNUC_FUNCTION = C.G_GNUC_FUNCTION
const GNUC_PRETTY_FUNCTION = C.G_GNUC_PRETTY_FUNCTION
const GSIZE_FORMAT = C.G_GSIZE_FORMAT
const GSIZE_MODIFIER = C.G_GSIZE_MODIFIER
const GSSIZE_FORMAT = C.G_GSSIZE_FORMAT
const GUINT16_FORMAT = C.G_GUINT16_FORMAT
const GUINT32_FORMAT = C.G_GUINT32_FORMAT
const GUINT64_FORMAT = C.G_GUINT64_FORMAT
const GUINTPTR_FORMAT = C.G_GUINTPTR_FORMAT
const HAVE_GINT64 = C.G_HAVE_GINT64
const HAVE_GNUC_VARARGS = C.G_HAVE_GNUC_VARARGS
const HAVE_GNUC_VISIBILITY = C.G_HAVE_GNUC_VISIBILITY
const HAVE_GROWING_STACK = C.G_HAVE_GROWING_STACK
const HAVE_INLINE = C.G_HAVE_INLINE
const HAVE_ISO_VARARGS = C.G_HAVE_ISO_VARARGS
const HAVE___INLINE = C.G_HAVE___INLINE
const HAVE___INLINE__ = C.G_HAVE___INLINE__
const HOOK_FLAG_USER_SHIFT = C.G_HOOK_FLAG_USER_SHIFT
const IEEE754_DOUBLE_BIAS = C.G_IEEE754_DOUBLE_BIAS
const IEEE754_FLOAT_BIAS = C.G_IEEE754_FLOAT_BIAS
const KEY_FILE_DESKTOP_GROUP = C.G_KEY_FILE_DESKTOP_GROUP
const KEY_FILE_DESKTOP_KEY_CATEGORIES = C.G_KEY_FILE_DESKTOP_KEY_CATEGORIES
const KEY_FILE_DESKTOP_KEY_COMMENT = C.G_KEY_FILE_DESKTOP_KEY_COMMENT
const KEY_FILE_DESKTOP_KEY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_EXEC
const KEY_FILE_DESKTOP_KEY_GENERIC_NAME = C.G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME
const KEY_FILE_DESKTOP_KEY_HIDDEN = C.G_KEY_FILE_DESKTOP_KEY_HIDDEN
const KEY_FILE_DESKTOP_KEY_ICON = C.G_KEY_FILE_DESKTOP_KEY_ICON
const KEY_FILE_DESKTOP_KEY_MIME_TYPE = C.G_KEY_FILE_DESKTOP_KEY_MIME_TYPE
const KEY_FILE_DESKTOP_KEY_NAME = C.G_KEY_FILE_DESKTOP_KEY_NAME
const KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN
const KEY_FILE_DESKTOP_KEY_NO_DISPLAY = C.G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY
const KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN
const KEY_FILE_DESKTOP_KEY_PATH = C.G_KEY_FILE_DESKTOP_KEY_PATH
const KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY
const KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS
const KEY_FILE_DESKTOP_KEY_TERMINAL = C.G_KEY_FILE_DESKTOP_KEY_TERMINAL
const KEY_FILE_DESKTOP_KEY_TRY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_TRY_EXEC
const KEY_FILE_DESKTOP_KEY_TYPE = C.G_KEY_FILE_DESKTOP_KEY_TYPE
const KEY_FILE_DESKTOP_KEY_URL = C.G_KEY_FILE_DESKTOP_KEY_URL
const KEY_FILE_DESKTOP_KEY_VERSION = C.G_KEY_FILE_DESKTOP_KEY_VERSION
const KEY_FILE_DESKTOP_TYPE_APPLICATION = C.G_KEY_FILE_DESKTOP_TYPE_APPLICATION
const KEY_FILE_DESKTOP_TYPE_DIRECTORY = C.G_KEY_FILE_DESKTOP_TYPE_DIRECTORY
const KEY_FILE_DESKTOP_TYPE_LINK = C.G_KEY_FILE_DESKTOP_TYPE_LINK
const LITTLE_ENDIAN = C.G_LITTLE_ENDIAN
const LOG_FATAL_MASK = C.G_LOG_FATAL_MASK
const LOG_LEVEL_USER_SHIFT = C.G_LOG_LEVEL_USER_SHIFT
const MAJOR_VERSION = C.GLIB_MAJOR_VERSION
const MAXINT16 = C.G_MAXINT16
const MAXINT32 = C.G_MAXINT32
const MAXINT64 = C.G_MAXINT64
const MAXINT8 = C.G_MAXINT8
const MAXUINT16 = C.G_MAXUINT16
const MAXUINT32 = C.G_MAXUINT32
const MAXUINT64 = C.G_MAXUINT64
const MAXUINT8 = C.G_MAXUINT8
const MICRO_VERSION = C.GLIB_MICRO_VERSION
const MININT16 = C.G_MININT16
const MININT32 = C.G_MININT32
const MININT64 = C.G_MININT64
const MININT8 = C.G_MININT8
const MINOR_VERSION = C.GLIB_MINOR_VERSION
const MODULE_SUFFIX = C.G_MODULE_SUFFIX
const OPTION_REMAINING = C.G_OPTION_REMAINING
const PDP_ENDIAN = C.G_PDP_ENDIAN
const POLLFD_FORMAT = C.G_POLLFD_FORMAT
const PRIORITY_DEFAULT = C.G_PRIORITY_DEFAULT
const PRIORITY_DEFAULT_IDLE = C.G_PRIORITY_DEFAULT_IDLE
const PRIORITY_HIGH = C.G_PRIORITY_HIGH
const PRIORITY_HIGH_IDLE = C.G_PRIORITY_HIGH_IDLE
const PRIORITY_LOW = C.G_PRIORITY_LOW
const SEARCHPATH_SEPARATOR = C.G_SEARCHPATH_SEPARATOR
const SEARCHPATH_SEPARATOR_S = C.G_SEARCHPATH_SEPARATOR_S
const SIZEOF_LONG = C.GLIB_SIZEOF_LONG
const SIZEOF_SIZE_T = C.GLIB_SIZEOF_SIZE_T
const SIZEOF_VOID_P = C.GLIB_SIZEOF_VOID_P
const STR_DELIMITERS = C.G_STR_DELIMITERS
const SYSDEF_AF_INET = C.GLIB_SYSDEF_AF_INET
const SYSDEF_AF_INET6 = C.GLIB_SYSDEF_AF_INET6
const SYSDEF_AF_UNIX = C.GLIB_SYSDEF_AF_UNIX
const SYSDEF_MSG_DONTROUTE = C.GLIB_SYSDEF_MSG_DONTROUTE
const SYSDEF_MSG_OOB = C.GLIB_SYSDEF_MSG_OOB
const SYSDEF_MSG_PEEK = C.GLIB_SYSDEF_MSG_PEEK
const TIME_SPAN_DAY = C.G_TIME_SPAN_DAY
const TIME_SPAN_HOUR = C.G_TIME_SPAN_HOUR
const TIME_SPAN_MILLISECOND = C.G_TIME_SPAN_MILLISECOND
const TIME_SPAN_MINUTE = C.G_TIME_SPAN_MINUTE
const TIME_SPAN_SECOND = C.G_TIME_SPAN_SECOND
const UNICHAR_MAX_DECOMPOSITION_LENGTH = C.G_UNICHAR_MAX_DECOMPOSITION_LENGTH
const URI_RESERVED_CHARS_GENERIC_DELIMITERS = C.G_URI_RESERVED_CHARS_GENERIC_DELIMITERS
const URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = C.G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS
const USEC_PER_SEC = C.G_USEC_PER_SEC
const VA_COPY_AS_ARRAY = C.G_VA_COPY_AS_ARRAY
const VERSION_MIN_REQUIRED = C.GLIB_VERSION_MIN_REQUIRED
