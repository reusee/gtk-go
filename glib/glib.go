// this file is auto-generated by gtk-go

package glib

// #cgo pkg-config: glib-2.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <glib.h>
/*
GArray * _g_array_append_vals(GArray * array, gpointer data, guint len) {
	return (GArray *)g_array_append_vals(array, (gconstpointer)(data), len);
}
GArray * _g_array_insert_vals(GArray * array, guint index_, gpointer data, guint len) {
	return (GArray *)g_array_insert_vals(array, index_, (gconstpointer)(data), len);
}
GArray * _g_array_prepend_vals(GArray * array, gpointer data, guint len) {
	return (GArray *)g_array_prepend_vals(array, (gconstpointer)(data), len);
}
void _g_bookmark_file_add_application(GBookmarkFile * _self_, gchar * uri, gchar * name, gchar * exec) {
	(void)g_bookmark_file_add_application(_self_, (const gchar *)(uri), (const gchar *)(name), (const gchar *)(exec));
}
void _g_bookmark_file_add_group(GBookmarkFile * _self_, gchar * uri, gchar * group) {
	(void)g_bookmark_file_add_group(_self_, (const gchar *)(uri), (const gchar *)(group));
}
time_t _g_bookmark_file_get_added(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (time_t)g_bookmark_file_get_added(_self_, (const gchar *)(uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_get_app_info(GBookmarkFile * _self_, gchar * uri, gchar * name, void * exec, guint * count, time_t * stamp, void * _error_) {
	return (gboolean)g_bookmark_file_get_app_info(_self_, (const gchar *)(uri), (const gchar *)(name), (gchar **)(exec), count, stamp, (GError **)(_error_));
}
void * _g_bookmark_file_get_applications(GBookmarkFile * _self_, gchar * uri, gsize * length, void * _error_) {
	return (void *)g_bookmark_file_get_applications(_self_, (const gchar *)(uri), length, (GError **)(_error_));
}
gchar * _g_bookmark_file_get_description(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (gchar *)g_bookmark_file_get_description(_self_, (const gchar *)(uri), (GError **)(_error_));
}
void * _g_bookmark_file_get_groups(GBookmarkFile * _self_, gchar * uri, gsize * length, void * _error_) {
	return (void *)g_bookmark_file_get_groups(_self_, (const gchar *)(uri), length, (GError **)(_error_));
}
gboolean _g_bookmark_file_get_icon(GBookmarkFile * _self_, gchar * uri, void * href, void * mime_type, void * _error_) {
	return (gboolean)g_bookmark_file_get_icon(_self_, (const gchar *)(uri), (gchar **)(href), (gchar **)(mime_type), (GError **)(_error_));
}
gboolean _g_bookmark_file_get_is_private(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (gboolean)g_bookmark_file_get_is_private(_self_, (const gchar *)(uri), (GError **)(_error_));
}
gchar * _g_bookmark_file_get_mime_type(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (gchar *)g_bookmark_file_get_mime_type(_self_, (const gchar *)(uri), (GError **)(_error_));
}
time_t _g_bookmark_file_get_modified(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (time_t)g_bookmark_file_get_modified(_self_, (const gchar *)(uri), (GError **)(_error_));
}
gchar * _g_bookmark_file_get_title(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (gchar *)g_bookmark_file_get_title(_self_, (const gchar *)(uri), (GError **)(_error_));
}
void * _g_bookmark_file_get_uris(GBookmarkFile * _self_, gsize * length) {
	return (void *)g_bookmark_file_get_uris(_self_, length);
}
time_t _g_bookmark_file_get_visited(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (time_t)g_bookmark_file_get_visited(_self_, (const gchar *)(uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_application(GBookmarkFile * _self_, gchar * uri, gchar * name, void * _error_) {
	return (gboolean)g_bookmark_file_has_application(_self_, (const gchar *)(uri), (const gchar *)(name), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_group(GBookmarkFile * _self_, gchar * uri, gchar * group, void * _error_) {
	return (gboolean)g_bookmark_file_has_group(_self_, (const gchar *)(uri), (const gchar *)(group), (GError **)(_error_));
}
gboolean _g_bookmark_file_has_item(GBookmarkFile * _self_, gchar * uri) {
	return (gboolean)g_bookmark_file_has_item(_self_, (const gchar *)(uri));
}
gboolean _g_bookmark_file_load_from_data(GBookmarkFile * _self_, gchar * data, gsize length, void * _error_) {
	return (gboolean)g_bookmark_file_load_from_data(_self_, (const gchar *)(data), length, (GError **)(_error_));
}
gboolean _g_bookmark_file_load_from_data_dirs(GBookmarkFile * _self_, gchar * file, void * full_path, void * _error_) {
	return (gboolean)g_bookmark_file_load_from_data_dirs(_self_, (const gchar *)(file), (gchar **)(full_path), (GError **)(_error_));
}
gboolean _g_bookmark_file_load_from_file(GBookmarkFile * _self_, gchar * filename, void * _error_) {
	return (gboolean)g_bookmark_file_load_from_file(_self_, (const gchar *)(filename), (GError **)(_error_));
}
gboolean _g_bookmark_file_move_item(GBookmarkFile * _self_, gchar * old_uri, gchar * new_uri, void * _error_) {
	return (gboolean)g_bookmark_file_move_item(_self_, (const gchar *)(old_uri), (const gchar *)(new_uri), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_application(GBookmarkFile * _self_, gchar * uri, gchar * name, void * _error_) {
	return (gboolean)g_bookmark_file_remove_application(_self_, (const gchar *)(uri), (const gchar *)(name), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_group(GBookmarkFile * _self_, gchar * uri, gchar * group, void * _error_) {
	return (gboolean)g_bookmark_file_remove_group(_self_, (const gchar *)(uri), (const gchar *)(group), (GError **)(_error_));
}
gboolean _g_bookmark_file_remove_item(GBookmarkFile * _self_, gchar * uri, void * _error_) {
	return (gboolean)g_bookmark_file_remove_item(_self_, (const gchar *)(uri), (GError **)(_error_));
}
void _g_bookmark_file_set_added(GBookmarkFile * _self_, gchar * uri, time_t added) {
	(void)g_bookmark_file_set_added(_self_, (const gchar *)(uri), added);
}
gboolean _g_bookmark_file_set_app_info(GBookmarkFile * _self_, gchar * uri, gchar * name, gchar * exec, gint count, time_t stamp, void * _error_) {
	return (gboolean)g_bookmark_file_set_app_info(_self_, (const gchar *)(uri), (const gchar *)(name), (const gchar *)(exec), count, stamp, (GError **)(_error_));
}
void _g_bookmark_file_set_description(GBookmarkFile * _self_, gchar * uri, gchar * description) {
	(void)g_bookmark_file_set_description(_self_, (const gchar *)(uri), (const gchar *)(description));
}
void _g_bookmark_file_set_groups(GBookmarkFile * _self_, gchar * uri, void * groups, gsize length) {
	(void)g_bookmark_file_set_groups(_self_, (const gchar *)(uri), (const gchar **)(groups), length);
}
void _g_bookmark_file_set_icon(GBookmarkFile * _self_, gchar * uri, gchar * href, gchar * mime_type) {
	(void)g_bookmark_file_set_icon(_self_, (const gchar *)(uri), (const gchar *)(href), (const gchar *)(mime_type));
}
void _g_bookmark_file_set_is_private(GBookmarkFile * _self_, gchar * uri, gboolean is_private) {
	(void)g_bookmark_file_set_is_private(_self_, (const gchar *)(uri), is_private);
}
void _g_bookmark_file_set_mime_type(GBookmarkFile * _self_, gchar * uri, gchar * mime_type) {
	(void)g_bookmark_file_set_mime_type(_self_, (const gchar *)(uri), (const gchar *)(mime_type));
}
void _g_bookmark_file_set_modified(GBookmarkFile * _self_, gchar * uri, time_t modified) {
	(void)g_bookmark_file_set_modified(_self_, (const gchar *)(uri), modified);
}
void _g_bookmark_file_set_title(GBookmarkFile * _self_, gchar * uri, gchar * title) {
	(void)g_bookmark_file_set_title(_self_, (const gchar *)(uri), (const gchar *)(title));
}
void _g_bookmark_file_set_visited(GBookmarkFile * _self_, gchar * uri, time_t visited) {
	(void)g_bookmark_file_set_visited(_self_, (const gchar *)(uri), visited);
}
gchar * _g_bookmark_file_to_data(GBookmarkFile * _self_, gsize * length, void * _error_) {
	return (gchar *)g_bookmark_file_to_data(_self_, length, (GError **)(_error_));
}
gboolean _g_bookmark_file_to_file(GBookmarkFile * _self_, gchar * filename, void * _error_) {
	return (gboolean)g_bookmark_file_to_file(_self_, (const gchar *)(filename), (GError **)(_error_));
}
GByteArray * _g_byte_array_append(GByteArray * array, guint8 * data, guint len) {
	return (GByteArray *)g_byte_array_append(array, (const guint8 *)(data), len);
}
GByteArray * _g_byte_array_prepend(GByteArray * array, guint8 * data, guint len) {
	return (GByteArray *)g_byte_array_prepend(array, (const guint8 *)(data), len);
}
GBytes * _g_bytes_new(gpointer data, gsize size) {
	return (GBytes *)g_bytes_new((gconstpointer)(data), size);
}
GBytes * _g_bytes_new_static(gpointer data, gsize size) {
	return (GBytes *)g_bytes_new_static((gconstpointer)(data), size);
}
GBytes * _g_bytes_new_with_free_func(gpointer data, gsize size, GDestroyNotify free_func, gpointer user_data) {
	return (GBytes *)g_bytes_new_with_free_func((gconstpointer)(data), size, free_func, user_data);
}
gint _g_bytes_compare(GBytes * _self_, gpointer bytes2) {
	return (gint)g_bytes_compare((gconstpointer)(_self_), (gconstpointer)(bytes2));
}
gboolean _g_bytes_equal(GBytes * _self_, gpointer bytes2) {
	return (gboolean)g_bytes_equal((gconstpointer)(_self_), (gconstpointer)(bytes2));
}
gpointer _g_bytes_get_data(GBytes * _self_, gsize * size) {
	return (gpointer)g_bytes_get_data(_self_, size);
}
guint _g_bytes_hash(GBytes * _self_) {
	return (guint)g_bytes_hash((gconstpointer)(_self_));
}
GChecksum * _g_checksum_copy(GChecksum * _self_) {
	return (GChecksum *)g_checksum_copy((const GChecksum *)(_self_));
}
gchar * _g_checksum_get_string(GChecksum * _self_) {
	return (gchar *)g_checksum_get_string(_self_);
}
void _g_checksum_update(GChecksum * _self_, guchar * data, gssize length) {
	(void)g_checksum_update(_self_, (const guchar *)(data), length);
}
gsize _g_date_strftime(gchar * s, gsize slen, gchar * format, GDate * date) {
	return (gsize)g_date_strftime(s, slen, (const gchar *)(format), (const GDate *)(date));
}
void _g_date_clamp(GDate * _self_, GDate * min_date, GDate * max_date) {
	(void)g_date_clamp(_self_, (const GDate *)(min_date), (const GDate *)(max_date));
}
gint _g_date_compare(GDate * _self_, GDate * rhs) {
	return (gint)g_date_compare((const GDate *)(_self_), (const GDate *)(rhs));
}
gint _g_date_days_between(GDate * _self_, GDate * date2) {
	return (gint)g_date_days_between((const GDate *)(_self_), (const GDate *)(date2));
}
GDateDay _g_date_get_day(GDate * _self_) {
	return (GDateDay)g_date_get_day((const GDate *)(_self_));
}
guint _g_date_get_day_of_year(GDate * _self_) {
	return (guint)g_date_get_day_of_year((const GDate *)(_self_));
}
guint _g_date_get_iso8601_week_of_year(GDate * _self_) {
	return (guint)g_date_get_iso8601_week_of_year((const GDate *)(_self_));
}
guint32 _g_date_get_julian(GDate * _self_) {
	return (guint32)g_date_get_julian((const GDate *)(_self_));
}
guint _g_date_get_monday_week_of_year(GDate * _self_) {
	return (guint)g_date_get_monday_week_of_year((const GDate *)(_self_));
}
GDateMonth _g_date_get_month(GDate * _self_) {
	return (GDateMonth)g_date_get_month((const GDate *)(_self_));
}
guint _g_date_get_sunday_week_of_year(GDate * _self_) {
	return (guint)g_date_get_sunday_week_of_year((const GDate *)(_self_));
}
GDateWeekday _g_date_get_weekday(GDate * _self_) {
	return (GDateWeekday)g_date_get_weekday((const GDate *)(_self_));
}
GDateYear _g_date_get_year(GDate * _self_) {
	return (GDateYear)g_date_get_year((const GDate *)(_self_));
}
gboolean _g_date_is_first_of_month(GDate * _self_) {
	return (gboolean)g_date_is_first_of_month((const GDate *)(_self_));
}
gboolean _g_date_is_last_of_month(GDate * _self_) {
	return (gboolean)g_date_is_last_of_month((const GDate *)(_self_));
}
void _g_date_set_parse(GDate * _self_, gchar * str) {
	(void)g_date_set_parse(_self_, (const gchar *)(str));
}
gboolean _g_date_valid(GDate * _self_) {
	return (gboolean)g_date_valid((const GDate *)(_self_));
}
GDateTime * _g_date_time_new_from_timeval_local(GTimeVal * tv) {
	return (GDateTime *)g_date_time_new_from_timeval_local((const GTimeVal *)(tv));
}
GDateTime * _g_date_time_new_from_timeval_utc(GTimeVal * tv) {
	return (GDateTime *)g_date_time_new_from_timeval_utc((const GTimeVal *)(tv));
}
gint _g_date_time_compare(gpointer dt1, gpointer dt2) {
	return (gint)g_date_time_compare((gconstpointer)(dt1), (gconstpointer)(dt2));
}
gboolean _g_date_time_equal(gpointer dt1, gpointer dt2) {
	return (gboolean)g_date_time_equal((gconstpointer)(dt1), (gconstpointer)(dt2));
}
guint _g_date_time_hash(gpointer datetime) {
	return (guint)g_date_time_hash((gconstpointer)(datetime));
}
gchar * _g_date_time_format(GDateTime * _self_, gchar * format) {
	return (gchar *)g_date_time_format(_self_, (const gchar *)(format));
}
gchar * _g_date_time_get_timezone_abbreviation(GDateTime * _self_) {
	return (gchar *)g_date_time_get_timezone_abbreviation(_self_);
}
gchar * _g_dir_make_tmp(gchar * tmpl, void * _error_) {
	return (gchar *)g_dir_make_tmp((const gchar *)(tmpl), (GError **)(_error_));
}
GDir * _g_dir_open(gchar * path, guint flags, void * _error_) {
	return (GDir *)g_dir_open((const gchar *)(path), flags, (GError **)(_error_));
}
gchar * _g_dir_read_name(GDir * _self_) {
	return (gchar *)g_dir_read_name(_self_);
}
GError * _g_error_new_literal(GQuark domain, gint code, gchar * message) {
	return (GError *)g_error_new_literal(domain, code, (const gchar *)(message));
}
GError * _g_error_copy(GError * _self_) {
	return (GError *)g_error_copy((const GError *)(_self_));
}
gboolean _g_error_matches(GError * _self_, GQuark domain, gint code) {
	return (gboolean)g_error_matches((const GError *)(_self_), domain, code);
}
gboolean _g_hash_table_contains(GHashTable * hash_table, gpointer key) {
	return (gboolean)g_hash_table_contains(hash_table, (gconstpointer)(key));
}
gpointer _g_hash_table_lookup(GHashTable * hash_table, gpointer key) {
	return (gpointer)g_hash_table_lookup(hash_table, (gconstpointer)(key));
}
gboolean _g_hash_table_lookup_extended(GHashTable * hash_table, gpointer lookup_key, gpointer * orig_key, gpointer * value) {
	return (gboolean)g_hash_table_lookup_extended(hash_table, (gconstpointer)(lookup_key), orig_key, value);
}
gboolean _g_hash_table_remove(GHashTable * hash_table, gpointer key) {
	return (gboolean)g_hash_table_remove(hash_table, (gconstpointer)(key));
}
gboolean _g_hash_table_steal(GHashTable * hash_table, gpointer key) {
	return (gboolean)g_hash_table_steal(hash_table, (gconstpointer)(key));
}
GHmac * _g_hmac_new(GChecksumType digest_type, guchar * key, gsize key_len) {
	return (GHmac *)g_hmac_new(digest_type, (const guchar *)(key), key_len);
}
GHmac * _g_hmac_copy(GHmac * _self_) {
	return (GHmac *)g_hmac_copy((const GHmac *)(_self_));
}
gchar * _g_hmac_get_string(GHmac * _self_) {
	return (gchar *)g_hmac_get_string(_self_);
}
void _g_hmac_update(GHmac * _self_, guchar * data, gssize length) {
	(void)g_hmac_update(_self_, (const guchar *)(data), length);
}
GIOChannel * _g_io_channel_new_file(gchar * filename, gchar * mode, void * _error_) {
	return (GIOChannel *)g_io_channel_new_file((const gchar *)(filename), (const gchar *)(mode), (GError **)(_error_));
}
GIOStatus _g_io_channel_flush(GIOChannel * _self_, void * _error_) {
	return (GIOStatus)g_io_channel_flush(_self_, (GError **)(_error_));
}
gchar * _g_io_channel_get_encoding(GIOChannel * _self_) {
	return (gchar *)g_io_channel_get_encoding(_self_);
}
gchar * _g_io_channel_get_line_term(GIOChannel * _self_, gint * length) {
	return (gchar *)g_io_channel_get_line_term(_self_, length);
}
GIOStatus _g_io_channel_read_chars(GIOChannel * _self_, gchar * buf, gsize count, gsize * bytes_read, void * _error_) {
	return (GIOStatus)g_io_channel_read_chars(_self_, buf, count, bytes_read, (GError **)(_error_));
}
GIOStatus _g_io_channel_read_line(GIOChannel * _self_, void * str_return, gsize * length, gsize * terminator_pos, void * _error_) {
	return (GIOStatus)g_io_channel_read_line(_self_, (gchar **)(str_return), length, terminator_pos, (GError **)(_error_));
}
GIOStatus _g_io_channel_read_line_string(GIOChannel * _self_, GString * buffer, gsize * terminator_pos, void * _error_) {
	return (GIOStatus)g_io_channel_read_line_string(_self_, buffer, terminator_pos, (GError **)(_error_));
}
GIOStatus _g_io_channel_read_to_end(GIOChannel * _self_, void * str_return, gsize * length, void * _error_) {
	return (GIOStatus)g_io_channel_read_to_end(_self_, (gchar **)(str_return), length, (GError **)(_error_));
}
GIOStatus _g_io_channel_read_unichar(GIOChannel * _self_, gunichar * thechar, void * _error_) {
	return (GIOStatus)g_io_channel_read_unichar(_self_, thechar, (GError **)(_error_));
}
GIOStatus _g_io_channel_seek_position(GIOChannel * _self_, gint64 offset, GSeekType type, void * _error_) {
	return (GIOStatus)g_io_channel_seek_position(_self_, offset, type, (GError **)(_error_));
}
GIOStatus _g_io_channel_set_encoding(GIOChannel * _self_, gchar * encoding, void * _error_) {
	return (GIOStatus)g_io_channel_set_encoding(_self_, (const gchar *)(encoding), (GError **)(_error_));
}
GIOStatus _g_io_channel_set_flags(GIOChannel * _self_, GIOFlags flags, void * _error_) {
	return (GIOStatus)g_io_channel_set_flags(_self_, flags, (GError **)(_error_));
}
void _g_io_channel_set_line_term(GIOChannel * _self_, gchar * line_term, gint length) {
	(void)g_io_channel_set_line_term(_self_, (const gchar *)(line_term), length);
}
GIOStatus _g_io_channel_shutdown(GIOChannel * _self_, gboolean flush, void * _error_) {
	return (GIOStatus)g_io_channel_shutdown(_self_, flush, (GError **)(_error_));
}
GIOStatus _g_io_channel_write_chars(GIOChannel * _self_, gchar * buf, gssize count, gsize * bytes_written, void * _error_) {
	return (GIOStatus)g_io_channel_write_chars(_self_, (const gchar *)(buf), count, bytes_written, (GError **)(_error_));
}
GIOStatus _g_io_channel_write_unichar(GIOChannel * _self_, gunichar thechar, void * _error_) {
	return (GIOStatus)g_io_channel_write_unichar(_self_, thechar, (GError **)(_error_));
}
gboolean _g_key_file_get_boolean(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gboolean)g_key_file_get_boolean(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean * _g_key_file_get_boolean_list(GKeyFile * _self_, gchar * group_name, gchar * key, gsize * length, void * _error_) {
	return (gboolean *)g_key_file_get_boolean_list(_self_, (const gchar *)(group_name), (const gchar *)(key), length, (GError **)(_error_));
}
gchar * _g_key_file_get_comment(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gchar *)g_key_file_get_comment(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gdouble _g_key_file_get_double(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gdouble)g_key_file_get_double(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gdouble * _g_key_file_get_double_list(GKeyFile * _self_, gchar * group_name, gchar * key, gsize * length, void * _error_) {
	return (gdouble *)g_key_file_get_double_list(_self_, (const gchar *)(group_name), (const gchar *)(key), length, (GError **)(_error_));
}
void * _g_key_file_get_groups(GKeyFile * _self_, gsize * length) {
	return (void *)g_key_file_get_groups(_self_, length);
}
gint64 _g_key_file_get_int64(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gint64)g_key_file_get_int64(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gint _g_key_file_get_integer(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gint)g_key_file_get_integer(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gint * _g_key_file_get_integer_list(GKeyFile * _self_, gchar * group_name, gchar * key, gsize * length, void * _error_) {
	return (gint *)g_key_file_get_integer_list(_self_, (const gchar *)(group_name), (const gchar *)(key), length, (GError **)(_error_));
}
void * _g_key_file_get_keys(GKeyFile * _self_, gchar * group_name, gsize * length, void * _error_) {
	return (void *)g_key_file_get_keys(_self_, (const gchar *)(group_name), length, (GError **)(_error_));
}
gchar * _g_key_file_get_locale_string(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * locale, void * _error_) {
	return (gchar *)g_key_file_get_locale_string(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (GError **)(_error_));
}
void * _g_key_file_get_locale_string_list(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * locale, gsize * length, void * _error_) {
	return (void *)g_key_file_get_locale_string_list(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), length, (GError **)(_error_));
}
gchar * _g_key_file_get_string(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gchar *)g_key_file_get_string(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
void * _g_key_file_get_string_list(GKeyFile * _self_, gchar * group_name, gchar * key, gsize * length, void * _error_) {
	return (void *)g_key_file_get_string_list(_self_, (const gchar *)(group_name), (const gchar *)(key), length, (GError **)(_error_));
}
guint64 _g_key_file_get_uint64(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (guint64)g_key_file_get_uint64(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gchar * _g_key_file_get_value(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gchar *)g_key_file_get_value(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_has_group(GKeyFile * _self_, gchar * group_name) {
	return (gboolean)g_key_file_has_group(_self_, (const gchar *)(group_name));
}
gboolean _g_key_file_has_key(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gboolean)g_key_file_has_key(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_load_from_data(GKeyFile * _self_, gchar * data, gsize length, GKeyFileFlags flags, void * _error_) {
	return (gboolean)g_key_file_load_from_data(_self_, (const gchar *)(data), length, flags, (GError **)(_error_));
}
gboolean _g_key_file_load_from_data_dirs(GKeyFile * _self_, gchar * file, void * full_path, GKeyFileFlags flags, void * _error_) {
	return (gboolean)g_key_file_load_from_data_dirs(_self_, (const gchar *)(file), (gchar **)(full_path), flags, (GError **)(_error_));
}
gboolean _g_key_file_load_from_dirs(GKeyFile * _self_, gchar * file, void * search_dirs, void * full_path, GKeyFileFlags flags, void * _error_) {
	return (gboolean)g_key_file_load_from_dirs(_self_, (const gchar *)(file), (const gchar **)(search_dirs), (gchar **)(full_path), flags, (GError **)(_error_));
}
gboolean _g_key_file_load_from_file(GKeyFile * _self_, gchar * file, GKeyFileFlags flags, void * _error_) {
	return (gboolean)g_key_file_load_from_file(_self_, (const gchar *)(file), flags, (GError **)(_error_));
}
gboolean _g_key_file_remove_comment(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gboolean)g_key_file_remove_comment(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
gboolean _g_key_file_remove_group(GKeyFile * _self_, gchar * group_name, void * _error_) {
	return (gboolean)g_key_file_remove_group(_self_, (const gchar *)(group_name), (GError **)(_error_));
}
gboolean _g_key_file_remove_key(GKeyFile * _self_, gchar * group_name, gchar * key, void * _error_) {
	return (gboolean)g_key_file_remove_key(_self_, (const gchar *)(group_name), (const gchar *)(key), (GError **)(_error_));
}
void _g_key_file_set_boolean(GKeyFile * _self_, gchar * group_name, gchar * key, gboolean value) {
	(void)g_key_file_set_boolean(_self_, (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_boolean_list(GKeyFile * _self_, gchar * group_name, gchar * key, gboolean * list, gsize length) {
	(void)g_key_file_set_boolean_list(_self_, (const gchar *)(group_name), (const gchar *)(key), list, length);
}
gboolean _g_key_file_set_comment(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * comment, void * _error_) {
	return (gboolean)g_key_file_set_comment(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(comment), (GError **)(_error_));
}
void _g_key_file_set_double(GKeyFile * _self_, gchar * group_name, gchar * key, gdouble value) {
	(void)g_key_file_set_double(_self_, (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_double_list(GKeyFile * _self_, gchar * group_name, gchar * key, gdouble * list, gsize length) {
	(void)g_key_file_set_double_list(_self_, (const gchar *)(group_name), (const gchar *)(key), list, length);
}
void _g_key_file_set_int64(GKeyFile * _self_, gchar * group_name, gchar * key, gint64 value) {
	(void)g_key_file_set_int64(_self_, (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_integer(GKeyFile * _self_, gchar * group_name, gchar * key, gint value) {
	(void)g_key_file_set_integer(_self_, (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_integer_list(GKeyFile * _self_, gchar * group_name, gchar * key, gint * list, gsize length) {
	(void)g_key_file_set_integer_list(_self_, (const gchar *)(group_name), (const gchar *)(key), list, length);
}
void _g_key_file_set_locale_string(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * locale, gchar * string) {
	(void)g_key_file_set_locale_string(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (const gchar *)(string));
}
void _g_key_file_set_locale_string_list(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * locale, void * list, gsize length) {
	(void)g_key_file_set_locale_string_list(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(locale), (const gchar *const *)(list), length);
}
void _g_key_file_set_string(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * string) {
	(void)g_key_file_set_string(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(string));
}
void _g_key_file_set_string_list(GKeyFile * _self_, gchar * group_name, gchar * key, void * list, gsize length) {
	(void)g_key_file_set_string_list(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *const *)(list), length);
}
void _g_key_file_set_uint64(GKeyFile * _self_, gchar * group_name, gchar * key, guint64 value) {
	(void)g_key_file_set_uint64(_self_, (const gchar *)(group_name), (const gchar *)(key), value);
}
void _g_key_file_set_value(GKeyFile * _self_, gchar * group_name, gchar * key, gchar * value) {
	(void)g_key_file_set_value(_self_, (const gchar *)(group_name), (const gchar *)(key), (const gchar *)(value));
}
gchar * _g_key_file_to_data(GKeyFile * _self_, gsize * length, void * _error_) {
	return (gchar *)g_key_file_to_data(_self_, length, (GError **)(_error_));
}
GList * _g_list_find(GList * list, gpointer data) {
	return (GList *)g_list_find(list, (gconstpointer)(data));
}
GList * _g_list_find_custom(GList * list, gpointer data, GCompareFunc func) {
	return (GList *)g_list_find_custom(list, (gconstpointer)(data), func);
}
gint _g_list_index(GList * list, gpointer data) {
	return (gint)g_list_index(list, (gconstpointer)(data));
}
GList * _g_list_remove(GList * list, gpointer data) {
	return (GList *)g_list_remove(list, (gconstpointer)(data));
}
GList * _g_list_remove_all(GList * list, gpointer data) {
	return (GList *)g_list_remove_all(list, (gconstpointer)(data));
}
GMappedFile * _g_mapped_file_new(gchar * filename, gboolean writable, void * _error_) {
	return (GMappedFile *)g_mapped_file_new((const gchar *)(filename), writable, (GError **)(_error_));
}
GMappedFile * _g_mapped_file_new_from_fd(gint fd, gboolean writable, void * _error_) {
	return (GMappedFile *)g_mapped_file_new_from_fd(fd, writable, (GError **)(_error_));
}
GMarkupParseContext * _g_markup_parse_context_new(GMarkupParser * parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify) {
	return (GMarkupParseContext *)g_markup_parse_context_new((const GMarkupParser *)(parser), flags, user_data, user_data_dnotify);
}
gboolean _g_markup_parse_context_end_parse(GMarkupParseContext * _self_, void * _error_) {
	return (gboolean)g_markup_parse_context_end_parse(_self_, (GError **)(_error_));
}
gchar * _g_markup_parse_context_get_element(GMarkupParseContext * _self_) {
	return (gchar *)g_markup_parse_context_get_element(_self_);
}
GSList * _g_markup_parse_context_get_element_stack(GMarkupParseContext * _self_) {
	return (GSList *)g_markup_parse_context_get_element_stack(_self_);
}
gboolean _g_markup_parse_context_parse(GMarkupParseContext * _self_, gchar * text, gssize text_len, void * _error_) {
	return (gboolean)g_markup_parse_context_parse(_self_, (const gchar *)(text), text_len, (GError **)(_error_));
}
void _g_markup_parse_context_push(GMarkupParseContext * _self_, GMarkupParser * parser, gpointer user_data) {
	(void)g_markup_parse_context_push(_self_, (const GMarkupParser *)(parser), user_data);
}
gchar * _g_match_info_expand_references(GMatchInfo * _self_, gchar * string_to_expand, void * _error_) {
	return (gchar *)g_match_info_expand_references((const GMatchInfo *)(_self_), (const gchar *)(string_to_expand), (GError **)(_error_));
}
gchar * _g_match_info_fetch(GMatchInfo * _self_, gint match_num) {
	return (gchar *)g_match_info_fetch((const GMatchInfo *)(_self_), match_num);
}
void * _g_match_info_fetch_all(GMatchInfo * _self_) {
	return (void *)g_match_info_fetch_all((const GMatchInfo *)(_self_));
}
gchar * _g_match_info_fetch_named(GMatchInfo * _self_, gchar * name) {
	return (gchar *)g_match_info_fetch_named((const GMatchInfo *)(_self_), (const gchar *)(name));
}
gboolean _g_match_info_fetch_named_pos(GMatchInfo * _self_, gchar * name, gint * start_pos, gint * end_pos) {
	return (gboolean)g_match_info_fetch_named_pos((const GMatchInfo *)(_self_), (const gchar *)(name), start_pos, end_pos);
}
gboolean _g_match_info_fetch_pos(GMatchInfo * _self_, gint match_num, gint * start_pos, gint * end_pos) {
	return (gboolean)g_match_info_fetch_pos((const GMatchInfo *)(_self_), match_num, start_pos, end_pos);
}
gint _g_match_info_get_match_count(GMatchInfo * _self_) {
	return (gint)g_match_info_get_match_count((const GMatchInfo *)(_self_));
}
GRegex * _g_match_info_get_regex(GMatchInfo * _self_) {
	return (GRegex *)g_match_info_get_regex((const GMatchInfo *)(_self_));
}
gchar * _g_match_info_get_string(GMatchInfo * _self_) {
	return (gchar *)g_match_info_get_string((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_is_partial_match(GMatchInfo * _self_) {
	return (gboolean)g_match_info_is_partial_match((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_matches(GMatchInfo * _self_) {
	return (gboolean)g_match_info_matches((const GMatchInfo *)(_self_));
}
gboolean _g_match_info_next(GMatchInfo * _self_, void * _error_) {
	return (gboolean)g_match_info_next(_self_, (GError **)(_error_));
}
GOptionContext * _g_option_context_new(gchar * parameter_string) {
	return (GOptionContext *)g_option_context_new((const gchar *)(parameter_string));
}
void _g_option_context_add_main_entries(GOptionContext * _self_, GOptionEntry * entries, gchar * translation_domain) {
	(void)g_option_context_add_main_entries(_self_, (const GOptionEntry *)(entries), (const gchar *)(translation_domain));
}
gchar * _g_option_context_get_description(GOptionContext * _self_) {
	return (gchar *)g_option_context_get_description(_self_);
}
gchar * _g_option_context_get_summary(GOptionContext * _self_) {
	return (gchar *)g_option_context_get_summary(_self_);
}
void _g_option_context_set_description(GOptionContext * _self_, gchar * description) {
	(void)g_option_context_set_description(_self_, (const gchar *)(description));
}
void _g_option_context_set_summary(GOptionContext * _self_, gchar * summary) {
	(void)g_option_context_set_summary(_self_, (const gchar *)(summary));
}
void _g_option_context_set_translation_domain(GOptionContext * _self_, gchar * domain) {
	(void)g_option_context_set_translation_domain(_self_, (const gchar *)(domain));
}
GOptionGroup * _g_option_group_new(gchar * name, gchar * description, gchar * help_description, gpointer user_data, GDestroyNotify destroy) {
	return (GOptionGroup *)g_option_group_new((const gchar *)(name), (const gchar *)(description), (const gchar *)(help_description), user_data, destroy);
}
void _g_option_group_add_entries(GOptionGroup * _self_, GOptionEntry * entries) {
	(void)g_option_group_add_entries(_self_, (const GOptionEntry *)(entries));
}
void _g_option_group_set_translation_domain(GOptionGroup * _self_, gchar * domain) {
	(void)g_option_group_set_translation_domain(_self_, (const gchar *)(domain));
}
GPatternSpec * _g_pattern_spec_new(gchar * pattern) {
	return (GPatternSpec *)g_pattern_spec_new((const gchar *)(pattern));
}
GList * _g_queue_find(GQueue * _self_, gpointer data) {
	return (GList *)g_queue_find(_self_, (gconstpointer)(data));
}
GList * _g_queue_find_custom(GQueue * _self_, gpointer data, GCompareFunc func) {
	return (GList *)g_queue_find_custom(_self_, (gconstpointer)(data), func);
}
gint _g_queue_index(GQueue * _self_, gpointer data) {
	return (gint)g_queue_index(_self_, (gconstpointer)(data));
}
gboolean _g_queue_remove(GQueue * _self_, gpointer data) {
	return (gboolean)g_queue_remove(_self_, (gconstpointer)(data));
}
guint _g_queue_remove_all(GQueue * _self_, gpointer data) {
	return (guint)g_queue_remove_all(_self_, (gconstpointer)(data));
}
GRand * _g_rand_new_with_seed_array(guint32 * seed, guint seed_length) {
	return (GRand *)g_rand_new_with_seed_array((const guint32 *)(seed), seed_length);
}
void _g_rand_set_seed_array(GRand * _self_, guint32 * seed, guint seed_length) {
	(void)g_rand_set_seed_array(_self_, (const guint32 *)(seed), seed_length);
}
GRegex * _g_regex_new(gchar * pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, void * _error_) {
	return (GRegex *)g_regex_new((const gchar *)(pattern), compile_options, match_options, (GError **)(_error_));
}
gboolean _g_regex_check_replacement(gchar * replacement, gboolean * has_references, void * _error_) {
	return (gboolean)g_regex_check_replacement((const gchar *)(replacement), has_references, (GError **)(_error_));
}
gchar * _g_regex_escape_nul(gchar * string, gint length) {
	return (gchar *)g_regex_escape_nul((const gchar *)(string), length);
}
gchar * _g_regex_escape_string(gchar * string, gint length) {
	return (gchar *)g_regex_escape_string((const gchar *)(string), length);
}
gboolean _g_regex_match_simple(gchar * pattern, gchar * string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return (gboolean)g_regex_match_simple((const gchar *)(pattern), (const gchar *)(string), compile_options, match_options);
}
void * _g_regex_split_simple(gchar * pattern, gchar * string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return (void *)g_regex_split_simple((const gchar *)(pattern), (const gchar *)(string), compile_options, match_options);
}
gint _g_regex_get_capture_count(GRegex * _self_) {
	return (gint)g_regex_get_capture_count((const GRegex *)(_self_));
}
GRegexCompileFlags _g_regex_get_compile_flags(GRegex * _self_) {
	return (GRegexCompileFlags)g_regex_get_compile_flags((const GRegex *)(_self_));
}
gboolean _g_regex_get_has_cr_or_lf(GRegex * _self_) {
	return (gboolean)g_regex_get_has_cr_or_lf((const GRegex *)(_self_));
}
GRegexMatchFlags _g_regex_get_match_flags(GRegex * _self_) {
	return (GRegexMatchFlags)g_regex_get_match_flags((const GRegex *)(_self_));
}
gint _g_regex_get_max_backref(GRegex * _self_) {
	return (gint)g_regex_get_max_backref((const GRegex *)(_self_));
}
gchar * _g_regex_get_pattern(GRegex * _self_) {
	return (gchar *)g_regex_get_pattern((const GRegex *)(_self_));
}
gint _g_regex_get_string_number(GRegex * _self_, gchar * name) {
	return (gint)g_regex_get_string_number((const GRegex *)(_self_), (const gchar *)(name));
}
gboolean _g_regex_match(GRegex * _self_, gchar * string, GRegexMatchFlags match_options, void * match_info) {
	return (gboolean)g_regex_match((const GRegex *)(_self_), (const gchar *)(string), match_options, (GMatchInfo **)(match_info));
}
gboolean _g_regex_match_all(GRegex * _self_, gchar * string, GRegexMatchFlags match_options, void * match_info) {
	return (gboolean)g_regex_match_all((const GRegex *)(_self_), (const gchar *)(string), match_options, (GMatchInfo **)(match_info));
}
gboolean _g_regex_match_all_full(GRegex * _self_, gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, void * match_info, void * _error_) {
	return (gboolean)g_regex_match_all_full((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, match_options, (GMatchInfo **)(match_info), (GError **)(_error_));
}
gboolean _g_regex_match_full(GRegex * _self_, gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, void * match_info, void * _error_) {
	return (gboolean)g_regex_match_full((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, match_options, (GMatchInfo **)(match_info), (GError **)(_error_));
}
gchar * _g_regex_replace(GRegex * _self_, gchar * string, gssize string_len, gint start_position, gchar * replacement, GRegexMatchFlags match_options, void * _error_) {
	return (gchar *)g_regex_replace((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, (const gchar *)(replacement), match_options, (GError **)(_error_));
}
gchar * _g_regex_replace_eval(GRegex * _self_, gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, void * _error_) {
	return (gchar *)g_regex_replace_eval((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, match_options, eval, user_data, (GError **)(_error_));
}
gchar * _g_regex_replace_literal(GRegex * _self_, gchar * string, gssize string_len, gint start_position, gchar * replacement, GRegexMatchFlags match_options, void * _error_) {
	return (gchar *)g_regex_replace_literal((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, (const gchar *)(replacement), match_options, (GError **)(_error_));
}
void * _g_regex_split(GRegex * _self_, gchar * string, GRegexMatchFlags match_options) {
	return (void *)g_regex_split((const GRegex *)(_self_), (const gchar *)(string), match_options);
}
void * _g_regex_split_full(GRegex * _self_, gchar * string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, void * _error_) {
	return (void *)g_regex_split_full((const GRegex *)(_self_), (const gchar *)(string), string_len, start_position, match_options, max_tokens, (GError **)(_error_));
}
GSList * _g_slist_find(GSList * list, gpointer data) {
	return (GSList *)g_slist_find(list, (gconstpointer)(data));
}
GSList * _g_slist_find_custom(GSList * list, gpointer data, GCompareFunc func) {
	return (GSList *)g_slist_find_custom(list, (gconstpointer)(data), func);
}
gint _g_slist_index(GSList * list, gpointer data) {
	return (gint)g_slist_index(list, (gconstpointer)(data));
}
GSList * _g_slist_remove(GSList * list, gpointer data) {
	return (GSList *)g_slist_remove(list, (gconstpointer)(data));
}
GSList * _g_slist_remove_all(GSList * list, gpointer data) {
	return (GSList *)g_slist_remove_all(list, (gconstpointer)(data));
}
GScanner * _g_scanner_new(GScannerConfig * config_templ) {
	return (GScanner *)g_scanner_new((const GScannerConfig *)(config_templ));
}
void _g_scanner_input_text(GScanner * _self_, gchar * text, guint text_len) {
	(void)g_scanner_input_text(_self_, (const gchar *)(text), text_len);
}
gpointer _g_scanner_lookup_symbol(GScanner * _self_, gchar * symbol) {
	return (gpointer)g_scanner_lookup_symbol(_self_, (const gchar *)(symbol));
}
void _g_scanner_scope_add_symbol(GScanner * _self_, guint scope_id, gchar * symbol, gpointer value) {
	(void)g_scanner_scope_add_symbol(_self_, scope_id, (const gchar *)(symbol), value);
}
gpointer _g_scanner_scope_lookup_symbol(GScanner * _self_, guint scope_id, gchar * symbol) {
	return (gpointer)g_scanner_scope_lookup_symbol(_self_, scope_id, (const gchar *)(symbol));
}
void _g_scanner_scope_remove_symbol(GScanner * _self_, guint scope_id, gchar * symbol) {
	(void)g_scanner_scope_remove_symbol(_self_, scope_id, (const gchar *)(symbol));
}
void _g_scanner_unexp_token(GScanner * _self_, GTokenType expected_token, gchar * identifier_spec, gchar * symbol_spec, gchar * symbol_name, gchar * message, gint is_error) {
	(void)g_scanner_unexp_token(_self_, expected_token, (const gchar *)(identifier_spec), (const gchar *)(symbol_spec), (const gchar *)(symbol_name), (const gchar *)(message), is_error);
}
void _g_source_set_name_by_id(guint tag, char * name) {
	(void)g_source_set_name_by_id(tag, (const char *)(name));
}
char * _g_source_get_name(GSource * _self_) {
	return (char *)g_source_get_name(_self_);
}
void _g_source_set_name(GSource * _self_, char * name) {
	(void)g_source_set_name(_self_, (const char *)(name));
}
GString * _g_string_append(GString * _self_, gchar * val) {
	return (GString *)g_string_append(_self_, (const gchar *)(val));
}
GString * _g_string_append_len(GString * _self_, gchar * val, gssize len) {
	return (GString *)g_string_append_len(_self_, (const gchar *)(val), len);
}
GString * _g_string_append_uri_escaped(GString * _self_, gchar * unescaped, gchar * reserved_chars_allowed, gboolean allow_utf8) {
	return (GString *)g_string_append_uri_escaped(_self_, (const gchar *)(unescaped), (const gchar *)(reserved_chars_allowed), allow_utf8);
}
GString * _g_string_assign(GString * _self_, gchar * rval) {
	return (GString *)g_string_assign(_self_, (const gchar *)(rval));
}
gboolean _g_string_equal(GString * _self_, GString * v2) {
	return (gboolean)g_string_equal((const GString *)(_self_), (const GString *)(v2));
}
guint _g_string_hash(GString * _self_) {
	return (guint)g_string_hash((const GString *)(_self_));
}
GString * _g_string_insert(GString * _self_, gssize pos, gchar * val) {
	return (GString *)g_string_insert(_self_, pos, (const gchar *)(val));
}
GString * _g_string_insert_len(GString * _self_, gssize pos, gchar * val, gssize len) {
	return (GString *)g_string_insert_len(_self_, pos, (const gchar *)(val), len);
}
GString * _g_string_overwrite(GString * _self_, gsize pos, gchar * val) {
	return (GString *)g_string_overwrite(_self_, pos, (const gchar *)(val));
}
GString * _g_string_overwrite_len(GString * _self_, gsize pos, gchar * val, gssize len) {
	return (GString *)g_string_overwrite_len(_self_, pos, (const gchar *)(val), len);
}
GString * _g_string_prepend(GString * _self_, gchar * val) {
	return (GString *)g_string_prepend(_self_, (const gchar *)(val));
}
GString * _g_string_prepend_len(GString * _self_, gchar * val, gssize len) {
	return (GString *)g_string_prepend_len(_self_, (const gchar *)(val), len);
}
gchar * _g_string_chunk_insert(GStringChunk * _self_, gchar * string) {
	return (gchar *)g_string_chunk_insert(_self_, (const gchar *)(string));
}
gchar * _g_string_chunk_insert_const(GStringChunk * _self_, gchar * string) {
	return (gchar *)g_string_chunk_insert_const(_self_, (const gchar *)(string));
}
gchar * _g_string_chunk_insert_len(GStringChunk * _self_, gchar * string, gssize len) {
	return (gchar *)g_string_chunk_insert_len(_self_, (const gchar *)(string), len);
}
GThread * _g_thread_new(gchar * name, GThreadFunc func, gpointer data) {
	return (GThread *)g_thread_new((const gchar *)(name), func, data);
}
GThread * _g_thread_try_new(gchar * name, GThreadFunc func, gpointer data, void * _error_) {
	return (GThread *)g_thread_try_new((const gchar *)(name), func, data, (GError **)(_error_));
}
GThreadPool * _g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, void * _error_) {
	return (GThreadPool *)g_thread_pool_new(func, user_data, max_threads, exclusive, (GError **)(_error_));
}
gboolean _g_thread_pool_push(GThreadPool * _self_, gpointer data, void * _error_) {
	return (gboolean)g_thread_pool_push(_self_, data, (GError **)(_error_));
}
gboolean _g_thread_pool_set_max_threads(GThreadPool * _self_, gint max_threads, void * _error_) {
	return (gboolean)g_thread_pool_set_max_threads(_self_, max_threads, (GError **)(_error_));
}
gboolean _g_time_val_from_iso8601(gchar * iso_date, GTimeVal * time_) {
	return (gboolean)g_time_val_from_iso8601((const gchar *)(iso_date), time_);
}
GTimeZone * _g_time_zone_new(gchar * identifier) {
	return (GTimeZone *)g_time_zone_new((const gchar *)(identifier));
}
gchar * _g_time_zone_get_abbreviation(GTimeZone * _self_, gint interval) {
	return (gchar *)g_time_zone_get_abbreviation(_self_, interval);
}
guint _g_trash_stack_height(void * stack_p) {
	return (guint)g_trash_stack_height((GTrashStack **)(stack_p));
}
gpointer _g_trash_stack_peek(void * stack_p) {
	return (gpointer)g_trash_stack_peek((GTrashStack **)(stack_p));
}
gpointer _g_trash_stack_pop(void * stack_p) {
	return (gpointer)g_trash_stack_pop((GTrashStack **)(stack_p));
}
void _g_trash_stack_push(void * stack_p, gpointer data_p) {
	(void)g_trash_stack_push((GTrashStack **)(stack_p), data_p);
}
gpointer _g_tree_lookup(GTree * _self_, gpointer key) {
	return (gpointer)g_tree_lookup(_self_, (gconstpointer)(key));
}
gboolean _g_tree_lookup_extended(GTree * _self_, gpointer lookup_key, gpointer * orig_key, gpointer * value) {
	return (gboolean)g_tree_lookup_extended(_self_, (gconstpointer)(lookup_key), orig_key, value);
}
gboolean _g_tree_remove(GTree * _self_, gpointer key) {
	return (gboolean)g_tree_remove(_self_, (gconstpointer)(key));
}
gpointer _g_tree_search(GTree * _self_, GCompareFunc search_func, gpointer user_data) {
	return (gpointer)g_tree_search(_self_, search_func, (gconstpointer)(user_data));
}
gboolean _g_tree_steal(GTree * _self_, gpointer key) {
	return (gboolean)g_tree_steal(_self_, (gconstpointer)(key));
}
GVariant * _g_variant_new_array(GVariantType * child_type, void * children, gsize n_children) {
	return (GVariant *)g_variant_new_array((const GVariantType *)(child_type), (GVariant *const *)(children), n_children);
}
GVariant * _g_variant_new_bytestring(gchar * string) {
	return (GVariant *)g_variant_new_bytestring((const gchar *)(string));
}
GVariant * _g_variant_new_bytestring_array(void * strv, gssize length) {
	return (GVariant *)g_variant_new_bytestring_array((const gchar *const *)(strv), length);
}
GVariant * _g_variant_new_fixed_array(GVariantType * element_type, gpointer elements, gsize n_elements, gsize element_size) {
	return (GVariant *)g_variant_new_fixed_array((const GVariantType *)(element_type), (gconstpointer)(elements), n_elements, element_size);
}
GVariant * _g_variant_new_from_bytes(GVariantType * type, GBytes * bytes, gboolean trusted) {
	return (GVariant *)g_variant_new_from_bytes((const GVariantType *)(type), bytes, trusted);
}
GVariant * _g_variant_new_from_data(GVariantType * type, gpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data) {
	return (GVariant *)g_variant_new_from_data((const GVariantType *)(type), (gconstpointer)(data), size, trusted, notify, user_data);
}
GVariant * _g_variant_new_maybe(GVariantType * child_type, GVariant * child) {
	return (GVariant *)g_variant_new_maybe((const GVariantType *)(child_type), child);
}
GVariant * _g_variant_new_object_path(gchar * object_path) {
	return (GVariant *)g_variant_new_object_path((const gchar *)(object_path));
}
GVariant * _g_variant_new_objv(void * strv, gssize length) {
	return (GVariant *)g_variant_new_objv((const gchar *const *)(strv), length);
}
GVariant * _g_variant_new_signature(gchar * signature) {
	return (GVariant *)g_variant_new_signature((const gchar *)(signature));
}
GVariant * _g_variant_new_string(gchar * string) {
	return (GVariant *)g_variant_new_string((const gchar *)(string));
}
GVariant * _g_variant_new_strv(void * strv, gssize length) {
	return (GVariant *)g_variant_new_strv((const gchar *const *)(strv), length);
}
GVariant * _g_variant_new_tuple(void * children, gsize n_children) {
	return (GVariant *)g_variant_new_tuple((GVariant *const *)(children), n_children);
}
gboolean _g_variant_is_object_path(gchar * string) {
	return (gboolean)g_variant_is_object_path((const gchar *)(string));
}
gboolean _g_variant_is_signature(gchar * string) {
	return (gboolean)g_variant_is_signature((const gchar *)(string));
}
GVariant * _g_variant_parse(GVariantType * type, gchar * text, gchar * limit, void * endptr, void * _error_) {
	return (GVariant *)g_variant_parse((const GVariantType *)(type), (const gchar *)(text), (const gchar *)(limit), (const gchar **)(endptr), (GError **)(_error_));
}
gboolean _g_variant_check_format_string(GVariant * _self_, gchar * format_string, gboolean copy_only) {
	return (gboolean)g_variant_check_format_string(_self_, (const gchar *)(format_string), copy_only);
}
gint _g_variant_compare(GVariant * _self_, gpointer two) {
	return (gint)g_variant_compare((gconstpointer)(_self_), (gconstpointer)(two));
}
void * _g_variant_dup_bytestring_array(GVariant * _self_, gsize * length) {
	return (void *)g_variant_dup_bytestring_array(_self_, length);
}
void * _g_variant_dup_objv(GVariant * _self_, gsize * length) {
	return (void *)g_variant_dup_objv(_self_, length);
}
void * _g_variant_dup_strv(GVariant * _self_, gsize * length) {
	return (void *)g_variant_dup_strv(_self_, length);
}
gboolean _g_variant_equal(GVariant * _self_, gpointer two) {
	return (gboolean)g_variant_equal((gconstpointer)(_self_), (gconstpointer)(two));
}
gchar * _g_variant_get_bytestring(GVariant * _self_) {
	return (gchar *)g_variant_get_bytestring(_self_);
}
void * _g_variant_get_bytestring_array(GVariant * _self_, gsize * length) {
	return (void *)g_variant_get_bytestring_array(_self_, length);
}
gpointer _g_variant_get_data(GVariant * _self_) {
	return (gpointer)g_variant_get_data(_self_);
}
gpointer _g_variant_get_fixed_array(GVariant * _self_, gsize * n_elements, gsize element_size) {
	return (gpointer)g_variant_get_fixed_array(_self_, n_elements, element_size);
}
void * _g_variant_get_objv(GVariant * _self_, gsize * length) {
	return (void *)g_variant_get_objv(_self_, length);
}
gchar * _g_variant_get_string(GVariant * _self_, gsize * length) {
	return (gchar *)g_variant_get_string(_self_, length);
}
void * _g_variant_get_strv(GVariant * _self_, gsize * length) {
	return (void *)g_variant_get_strv(_self_, length);
}
GVariantType * _g_variant_get_type(GVariant * _self_) {
	return (GVariantType *)g_variant_get_type(_self_);
}
gchar * _g_variant_get_type_string(GVariant * _self_) {
	return (gchar *)g_variant_get_type_string(_self_);
}
guint _g_variant_hash(GVariant * _self_) {
	return (guint)g_variant_hash((gconstpointer)(_self_));
}
gboolean _g_variant_is_of_type(GVariant * _self_, GVariantType * type) {
	return (gboolean)g_variant_is_of_type(_self_, (const GVariantType *)(type));
}
GVariant * _g_variant_lookup_value(GVariant * _self_, gchar * key, GVariantType * expected_type) {
	return (GVariant *)g_variant_lookup_value(_self_, (const gchar *)(key), (const GVariantType *)(expected_type));
}
GVariantBuilder * _g_variant_builder_new(GVariantType * type) {
	return (GVariantBuilder *)g_variant_builder_new((const GVariantType *)(type));
}
void _g_variant_builder_init(GVariantBuilder * _self_, GVariantType * type) {
	(void)g_variant_builder_init(_self_, (const GVariantType *)(type));
}
void _g_variant_builder_open(GVariantBuilder * _self_, GVariantType * type) {
	(void)g_variant_builder_open(_self_, (const GVariantType *)(type));
}
GVariantType * _g_variant_type_new(gchar * type_string) {
	return (GVariantType *)g_variant_type_new((const gchar *)(type_string));
}
GVariantType * _g_variant_type_new_array(GVariantType * element) {
	return (GVariantType *)g_variant_type_new_array((const GVariantType *)(element));
}
GVariantType * _g_variant_type_new_dict_entry(GVariantType * key, GVariantType * value) {
	return (GVariantType *)g_variant_type_new_dict_entry((const GVariantType *)(key), (const GVariantType *)(value));
}
GVariantType * _g_variant_type_new_maybe(GVariantType * element) {
	return (GVariantType *)g_variant_type_new_maybe((const GVariantType *)(element));
}
GVariantType * _g_variant_type_new_tuple(void * items, gint length) {
	return (GVariantType *)g_variant_type_new_tuple((const GVariantType *const *)(items), length);
}
gboolean _g_variant_type_string_is_valid(gchar * type_string) {
	return (gboolean)g_variant_type_string_is_valid((const gchar *)(type_string));
}
gboolean _g_variant_type_string_scan(gchar * string, gchar * limit, void * endptr) {
	return (gboolean)g_variant_type_string_scan((const gchar *)(string), (const gchar *)(limit), (const gchar **)(endptr));
}
GVariantType * _g_variant_type_copy(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_copy((const GVariantType *)(_self_));
}
gchar * _g_variant_type_dup_string(GVariantType * _self_) {
	return (gchar *)g_variant_type_dup_string((const GVariantType *)(_self_));
}
GVariantType * _g_variant_type_element(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_element((const GVariantType *)(_self_));
}
gboolean _g_variant_type_equal(GVariantType * _self_, gpointer type2) {
	return (gboolean)g_variant_type_equal((gconstpointer)(_self_), (gconstpointer)(type2));
}
GVariantType * _g_variant_type_first(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_first((const GVariantType *)(_self_));
}
gsize _g_variant_type_get_string_length(GVariantType * _self_) {
	return (gsize)g_variant_type_get_string_length((const GVariantType *)(_self_));
}
guint _g_variant_type_hash(GVariantType * _self_) {
	return (guint)g_variant_type_hash((gconstpointer)(_self_));
}
gboolean _g_variant_type_is_array(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_array((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_basic(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_basic((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_container(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_container((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_definite(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_definite((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_dict_entry(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_dict_entry((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_maybe(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_maybe((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_subtype_of(GVariantType * _self_, GVariantType * supertype) {
	return (gboolean)g_variant_type_is_subtype_of((const GVariantType *)(_self_), (const GVariantType *)(supertype));
}
gboolean _g_variant_type_is_tuple(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_tuple((const GVariantType *)(_self_));
}
gboolean _g_variant_type_is_variant(GVariantType * _self_) {
	return (gboolean)g_variant_type_is_variant((const GVariantType *)(_self_));
}
GVariantType * _g_variant_type_key(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_key((const GVariantType *)(_self_));
}
gsize _g_variant_type_n_items(GVariantType * _self_) {
	return (gsize)g_variant_type_n_items((const GVariantType *)(_self_));
}
GVariantType * _g_variant_type_next(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_next((const GVariantType *)(_self_));
}
gchar * _g_variant_type_peek_string(GVariantType * _self_) {
	return (gchar *)g_variant_type_peek_string((const GVariantType *)(_self_));
}
GVariantType * _g_variant_type_value(GVariantType * _self_) {
	return (GVariantType *)g_variant_type_value((const GVariantType *)(_self_));
}
int _g_access(gchar * filename, int mode) {
	return (int)g_access((const gchar *)(filename), mode);
}
gchar * _g_ascii_formatd(gchar * buffer, gint buf_len, gchar * format, gdouble d) {
	return (gchar *)g_ascii_formatd(buffer, buf_len, (const gchar *)(format), d);
}
gint _g_ascii_strcasecmp(gchar * s1, gchar * s2) {
	return (gint)g_ascii_strcasecmp((const gchar *)(s1), (const gchar *)(s2));
}
gchar * _g_ascii_strdown(gchar * str, gssize len) {
	return (gchar *)g_ascii_strdown((const gchar *)(str), len);
}
gint _g_ascii_strncasecmp(gchar * s1, gchar * s2, gsize n) {
	return (gint)g_ascii_strncasecmp((const gchar *)(s1), (const gchar *)(s2), n);
}
gdouble _g_ascii_strtod(gchar * nptr, void * endptr) {
	return (gdouble)g_ascii_strtod((const gchar *)(nptr), (gchar **)(endptr));
}
gint64 _g_ascii_strtoll(gchar * nptr, void * endptr, guint base) {
	return (gint64)g_ascii_strtoll((const gchar *)(nptr), (gchar **)(endptr), base);
}
guint64 _g_ascii_strtoull(gchar * nptr, void * endptr, guint base) {
	return (guint64)g_ascii_strtoull((const gchar *)(nptr), (gchar **)(endptr), base);
}
gchar * _g_ascii_strup(gchar * str, gssize len) {
	return (gchar *)g_ascii_strup((const gchar *)(str), len);
}
void _g_assertion_message(char * domain, char * file, int line, char * func, char * message) {
	(void)g_assertion_message((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(message));
}
void _g_assertion_message_cmpnum(char * domain, char * file, int line, char * func, char * expr, double arg1, char * cmp, double arg2, char numtype) {
	(void)g_assertion_message_cmpnum((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(expr), (long double)(arg1), (const char *)(cmp), (long double)(arg2), numtype);
}
void _g_assertion_message_cmpstr(char * domain, char * file, int line, char * func, char * expr, char * arg1, char * cmp, char * arg2) {
	(void)g_assertion_message_cmpstr((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(expr), (const char *)(arg1), (const char *)(cmp), (const char *)(arg2));
}
void _g_assertion_message_error(char * domain, char * file, int line, char * func, char * expr, GError * error, GQuark error_domain, int error_code) {
	(void)g_assertion_message_error((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(expr), (const GError *)(error), error_domain, error_code);
}
void _g_assertion_message_expr(char * domain, char * file, int line, char * func, char * expr) {
	(void)g_assertion_message_expr((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(expr));
}
guchar * _g_base64_decode(gchar * text, gsize * out_len) {
	return (guchar *)g_base64_decode((const gchar *)(text), out_len);
}
gchar * _g_base64_encode(guchar * data, gsize len) {
	return (gchar *)g_base64_encode((const guchar *)(data), len);
}
gchar * _g_build_filenamev(void * args) {
	return (gchar *)g_build_filenamev((gchar **)(args));
}
gchar * _g_build_pathv(gchar * separator, void * args) {
	return (gchar *)g_build_pathv((const gchar *)(separator), (gchar **)(args));
}
int _g_chdir(gchar * path) {
	return (int)g_chdir((const gchar *)(path));
}
gchar * _glib_check_version(guint required_major, guint required_minor, guint required_micro) {
	return (gchar *)glib_check_version(required_major, required_minor, required_micro);
}
void _g_clear_error(void * _error_) {
	(void)g_clear_error((GError **)(_error_));
}
gchar * _g_compute_checksum_for_data(GChecksumType checksum_type, guchar * data, gsize length) {
	return (gchar *)g_compute_checksum_for_data(checksum_type, (const guchar *)(data), length);
}
gchar * _g_compute_checksum_for_string(GChecksumType checksum_type, gchar * str, gssize length) {
	return (gchar *)g_compute_checksum_for_string(checksum_type, (const gchar *)(str), length);
}
gchar * _g_compute_hmac_for_data(GChecksumType digest_type, guchar * key, gsize key_len, guchar * data, gsize length) {
	return (gchar *)g_compute_hmac_for_data(digest_type, (const guchar *)(key), key_len, (const guchar *)(data), length);
}
gchar * _g_compute_hmac_for_string(GChecksumType digest_type, guchar * key, gsize key_len, gchar * str, gssize length) {
	return (gchar *)g_compute_hmac_for_string(digest_type, (const guchar *)(key), key_len, (const gchar *)(str), length);
}
gchar * _g_convert(gchar * str, gssize len, gchar * to_codeset, gchar * from_codeset, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_convert((const gchar *)(str), len, (const gchar *)(to_codeset), (const gchar *)(from_codeset), bytes_read, bytes_written, (GError **)(_error_));
}
gchar * _g_convert_with_fallback(gchar * str, gssize len, gchar * to_codeset, gchar * from_codeset, gchar * fallback, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_convert_with_fallback((const gchar *)(str), len, (const gchar *)(to_codeset), (const gchar *)(from_codeset), (const gchar *)(fallback), bytes_read, bytes_written, (GError **)(_error_));
}
gchar * _g_convert_with_iconv(gchar * str, gssize len, GIConv converter, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_convert_with_iconv((const gchar *)(str), len, converter, bytes_read, bytes_written, (GError **)(_error_));
}
void _g_datalist_clear(void * datalist) {
	(void)g_datalist_clear((GData **)(datalist));
}
void _g_datalist_foreach(void * datalist, GDataForeachFunc func, gpointer user_data) {
	(void)g_datalist_foreach((GData **)(datalist), func, user_data);
}
gpointer _g_datalist_get_data(void * datalist, gchar * key) {
	return (gpointer)g_datalist_get_data((GData **)(datalist), (const gchar *)(key));
}
guint _g_datalist_get_flags(void * datalist) {
	return (guint)g_datalist_get_flags((GData **)(datalist));
}
gpointer _g_datalist_id_dup_data(void * datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data) {
	return (gpointer)g_datalist_id_dup_data((GData **)(datalist), key_id, dup_func, user_data);
}
gpointer _g_datalist_id_get_data(void * datalist, GQuark key_id) {
	return (gpointer)g_datalist_id_get_data((GData **)(datalist), key_id);
}
gpointer _g_datalist_id_remove_no_notify(void * datalist, GQuark key_id) {
	return (gpointer)g_datalist_id_remove_no_notify((GData **)(datalist), key_id);
}
gboolean _g_datalist_id_replace_data(void * datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify * old_destroy) {
	return (gboolean)g_datalist_id_replace_data((GData **)(datalist), key_id, oldval, newval, destroy, old_destroy);
}
void _g_datalist_id_set_data_full(void * datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func) {
	(void)g_datalist_id_set_data_full((GData **)(datalist), key_id, data, destroy_func);
}
void _g_datalist_init(void * datalist) {
	(void)g_datalist_init((GData **)(datalist));
}
void _g_datalist_set_flags(void * datalist, guint flags) {
	(void)g_datalist_set_flags((GData **)(datalist), flags);
}
void _g_datalist_unset_flags(void * datalist, guint flags) {
	(void)g_datalist_unset_flags((GData **)(datalist), flags);
}
void _g_dataset_destroy(gpointer dataset_location) {
	(void)g_dataset_destroy((gconstpointer)(dataset_location));
}
void _g_dataset_foreach(gpointer dataset_location, GDataForeachFunc func, gpointer user_data) {
	(void)g_dataset_foreach((gconstpointer)(dataset_location), func, user_data);
}
gpointer _g_dataset_id_get_data(gpointer dataset_location, GQuark key_id) {
	return (gpointer)g_dataset_id_get_data((gconstpointer)(dataset_location), key_id);
}
gpointer _g_dataset_id_remove_no_notify(gpointer dataset_location, GQuark key_id) {
	return (gpointer)g_dataset_id_remove_no_notify((gconstpointer)(dataset_location), key_id);
}
void _g_dataset_id_set_data_full(gpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func) {
	(void)g_dataset_id_set_data_full((gconstpointer)(dataset_location), key_id, data, destroy_func);
}
gchar * _g_dcgettext(gchar * domain, gchar * msgid, gint category) {
	return (gchar *)g_dcgettext((const gchar *)(domain), (const gchar *)(msgid), category);
}
gchar * _g_dgettext(gchar * domain, gchar * msgid) {
	return (gchar *)g_dgettext((const gchar *)(domain), (const gchar *)(msgid));
}
gboolean _g_direct_equal(gpointer v1, gpointer v2) {
	return (gboolean)g_direct_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
guint _g_direct_hash(gpointer v) {
	return (guint)g_direct_hash((gconstpointer)(v));
}
gchar * _g_dngettext(gchar * domain, gchar * msgid, gchar * msgid_plural, gulong n) {
	return (gchar *)g_dngettext((const gchar *)(domain), (const gchar *)(msgid), (const gchar *)(msgid_plural), n);
}
gboolean _g_double_equal(gpointer v1, gpointer v2) {
	return (gboolean)g_double_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
guint _g_double_hash(gpointer v) {
	return (guint)g_double_hash((gconstpointer)(v));
}
gchar * _g_dpgettext(gchar * domain, gchar * msgctxtid, gsize msgidoffset) {
	return (gchar *)g_dpgettext((const gchar *)(domain), (const gchar *)(msgctxtid), msgidoffset);
}
gchar * _g_dpgettext2(gchar * domain, gchar * context, gchar * msgid) {
	return (gchar *)g_dpgettext2((const gchar *)(domain), (const gchar *)(context), (const gchar *)(msgid));
}
gchar * _g_environ_getenv(void * envp, gchar * variable) {
	return (gchar *)g_environ_getenv((gchar **)(envp), (const gchar *)(variable));
}
void * _g_environ_setenv(void * envp, gchar * variable, gchar * value, gboolean overwrite) {
	return (void *)g_environ_setenv((gchar **)(envp), (const gchar *)(variable), (const gchar *)(value), overwrite);
}
void * _g_environ_unsetenv(void * envp, gchar * variable) {
	return (void *)g_environ_unsetenv((gchar **)(envp), (const gchar *)(variable));
}
gboolean _g_file_get_contents(gchar * filename, void * contents, gsize * length, void * _error_) {
	return (gboolean)g_file_get_contents((const gchar *)(filename), (gchar **)(contents), length, (GError **)(_error_));
}
gint _g_file_open_tmp(gchar * tmpl, void * name_used, void * _error_) {
	return (gint)g_file_open_tmp((const gchar *)(tmpl), (gchar **)(name_used), (GError **)(_error_));
}
gchar * _g_file_read_link(gchar * filename, void * _error_) {
	return (gchar *)g_file_read_link((const gchar *)(filename), (GError **)(_error_));
}
gboolean _g_file_set_contents(gchar * filename, gchar * contents, gssize length, void * _error_) {
	return (gboolean)g_file_set_contents((const gchar *)(filename), (const gchar *)(contents), length, (GError **)(_error_));
}
gboolean _g_file_test(gchar * filename, GFileTest test) {
	return (gboolean)g_file_test((const gchar *)(filename), test);
}
gchar * _g_filename_display_basename(gchar * filename) {
	return (gchar *)g_filename_display_basename((const gchar *)(filename));
}
gchar * _g_filename_display_name(gchar * filename) {
	return (gchar *)g_filename_display_name((const gchar *)(filename));
}
gchar * _g_filename_from_uri(gchar * uri, void * hostname, void * _error_) {
	return (gchar *)g_filename_from_uri((const gchar *)(uri), (gchar **)(hostname), (GError **)(_error_));
}
gchar * _g_filename_from_utf8(gchar * utf8string, gssize len, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_filename_from_utf8((const gchar *)(utf8string), len, bytes_read, bytes_written, (GError **)(_error_));
}
gchar * _g_filename_to_uri(gchar * filename, gchar * hostname, void * _error_) {
	return (gchar *)g_filename_to_uri((const gchar *)(filename), (const gchar *)(hostname), (GError **)(_error_));
}
gchar * _g_filename_to_utf8(gchar * opsysstring, gssize len, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_filename_to_utf8((const gchar *)(opsysstring), len, bytes_read, bytes_written, (GError **)(_error_));
}
gchar * _g_find_program_in_path(gchar * program) {
	return (gchar *)g_find_program_in_path((const gchar *)(program));
}
gchar * _g_get_application_name() {
	return (gchar *)g_get_application_name();
}
gboolean _g_get_charset(void * charset) {
	return (gboolean)g_get_charset((const char **)(charset));
}
void * _g_get_environ() {
	return (void *)g_get_environ();
}
gboolean _g_get_filename_charsets(void * charsets) {
	return (gboolean)g_get_filename_charsets((const gchar ***)(charsets));
}
gchar * _g_get_home_dir() {
	return (gchar *)g_get_home_dir();
}
gchar * _g_get_host_name() {
	return (gchar *)g_get_host_name();
}
void * _g_get_language_names() {
	return (void *)g_get_language_names();
}
void * _g_get_locale_variants(gchar * locale) {
	return (void *)g_get_locale_variants((const gchar *)(locale));
}
gchar * _g_get_real_name() {
	return (gchar *)g_get_real_name();
}
void * _g_get_system_config_dirs() {
	return (void *)g_get_system_config_dirs();
}
void * _g_get_system_data_dirs() {
	return (void *)g_get_system_data_dirs();
}
gchar * _g_get_tmp_dir() {
	return (gchar *)g_get_tmp_dir();
}
gchar * _g_get_user_cache_dir() {
	return (gchar *)g_get_user_cache_dir();
}
gchar * _g_get_user_config_dir() {
	return (gchar *)g_get_user_config_dir();
}
gchar * _g_get_user_data_dir() {
	return (gchar *)g_get_user_data_dir();
}
gchar * _g_get_user_name() {
	return (gchar *)g_get_user_name();
}
gchar * _g_get_user_runtime_dir() {
	return (gchar *)g_get_user_runtime_dir();
}
gchar * _g_get_user_special_dir(GUserDirectory directory) {
	return (gchar *)g_get_user_special_dir(directory);
}
gchar * _g_getenv(gchar * variable) {
	return (gchar *)g_getenv((const gchar *)(variable));
}
gboolean _g_hostname_is_ascii_encoded(gchar * hostname) {
	return (gboolean)g_hostname_is_ascii_encoded((const gchar *)(hostname));
}
gboolean _g_hostname_is_ip_address(gchar * hostname) {
	return (gboolean)g_hostname_is_ip_address((const gchar *)(hostname));
}
gboolean _g_hostname_is_non_ascii(gchar * hostname) {
	return (gboolean)g_hostname_is_non_ascii((const gchar *)(hostname));
}
gchar * _g_hostname_to_ascii(gchar * hostname) {
	return (gchar *)g_hostname_to_ascii((const gchar *)(hostname));
}
gchar * _g_hostname_to_unicode(gchar * hostname) {
	return (gchar *)g_hostname_to_unicode((const gchar *)(hostname));
}
gboolean _g_int64_equal(gpointer v1, gpointer v2) {
	return (gboolean)g_int64_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
guint _g_int64_hash(gpointer v) {
	return (guint)g_int64_hash((gconstpointer)(v));
}
gboolean _g_int_equal(gpointer v1, gpointer v2) {
	return (gboolean)g_int_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
guint _g_int_hash(gpointer v) {
	return (guint)g_int_hash((gconstpointer)(v));
}
gchar * _g_intern_static_string(gchar * string) {
	return (gchar *)g_intern_static_string((const gchar *)(string));
}
gchar * _g_intern_string(gchar * string) {
	return (gchar *)g_intern_string((const gchar *)(string));
}
void * _g_listenv() {
	return (void *)g_listenv();
}
gchar * _g_locale_from_utf8(gchar * utf8string, gssize len, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_locale_from_utf8((const gchar *)(utf8string), len, bytes_read, bytes_written, (GError **)(_error_));
}
gchar * _g_locale_to_utf8(gchar * opsysstring, gssize len, gsize * bytes_read, gsize * bytes_written, void * _error_) {
	return (gchar *)g_locale_to_utf8((const gchar *)(opsysstring), len, bytes_read, bytes_written, (GError **)(_error_));
}
void _g_log_default_handler(gchar * log_domain, GLogLevelFlags log_level, gchar * message, gpointer unused_data) {
	(void)g_log_default_handler((const gchar *)(log_domain), log_level, (const gchar *)(message), unused_data);
}
void _g_log_remove_handler(gchar * log_domain, guint handler_id) {
	(void)g_log_remove_handler((const gchar *)(log_domain), handler_id);
}
GLogLevelFlags _g_log_set_fatal_mask(gchar * log_domain, GLogLevelFlags fatal_mask) {
	return (GLogLevelFlags)g_log_set_fatal_mask((const gchar *)(log_domain), fatal_mask);
}
guint _g_log_set_handler(gchar * log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data) {
	return (guint)g_log_set_handler((const gchar *)(log_domain), log_levels, log_func, user_data);
}
gchar * _g_markup_escape_text(gchar * text, gssize length) {
	return (gchar *)g_markup_escape_text((const gchar *)(text), length);
}
gpointer _g_memdup(gpointer mem, guint byte_size) {
	return (gpointer)g_memdup((gconstpointer)(mem), byte_size);
}
gint _g_mkdir_with_parents(gchar * pathname, gint mode) {
	return (gint)g_mkdir_with_parents((const gchar *)(pathname), mode);
}
void _g_on_error_query(gchar * prg_name) {
	(void)g_on_error_query((const gchar *)(prg_name));
}
void _g_on_error_stack_trace(gchar * prg_name) {
	(void)g_on_error_stack_trace((const gchar *)(prg_name));
}
guint _g_parse_debug_string(gchar * string, GDebugKey * keys, guint nkeys) {
	return (guint)g_parse_debug_string((const gchar *)(string), (const GDebugKey *)(keys), nkeys);
}
gchar * _g_path_get_basename(gchar * file_name) {
	return (gchar *)g_path_get_basename((const gchar *)(file_name));
}
gchar * _g_path_get_dirname(gchar * file_name) {
	return (gchar *)g_path_get_dirname((const gchar *)(file_name));
}
gboolean _g_path_is_absolute(gchar * file_name) {
	return (gboolean)g_path_is_absolute((const gchar *)(file_name));
}
gchar * _g_path_skip_root(gchar * file_name) {
	return (gchar *)g_path_skip_root((const gchar *)(file_name));
}
gboolean _g_pattern_match(GPatternSpec * pspec, guint string_length, gchar * string, gchar * string_reversed) {
	return (gboolean)g_pattern_match(pspec, string_length, (const gchar *)(string), (const gchar *)(string_reversed));
}
gboolean _g_pattern_match_simple(gchar * pattern, gchar * string) {
	return (gboolean)g_pattern_match_simple((const gchar *)(pattern), (const gchar *)(string));
}
gboolean _g_pattern_match_string(GPatternSpec * pspec, gchar * string) {
	return (gboolean)g_pattern_match_string(pspec, (const gchar *)(string));
}
void _g_propagate_error(void * dest, GError * src) {
	(void)g_propagate_error((GError **)(dest), src);
}
void _g_qsort_with_data(gpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data) {
	(void)g_qsort_with_data((gconstpointer)(pbase), total_elems, size, compare_func, user_data);
}
GQuark _g_quark_from_static_string(gchar * string) {
	return (GQuark)g_quark_from_static_string((const gchar *)(string));
}
GQuark _g_quark_from_string(gchar * string) {
	return (GQuark)g_quark_from_string((const gchar *)(string));
}
gchar * _g_quark_to_string(GQuark quark) {
	return (gchar *)g_quark_to_string(quark);
}
GQuark _g_quark_try_string(gchar * string) {
	return (GQuark)g_quark_try_string((const gchar *)(string));
}
void _g_return_if_fail_warning(char * log_domain, char * pretty_function, char * expression) {
	(void)g_return_if_fail_warning((const char *)(log_domain), (const char *)(pretty_function), (const char *)(expression));
}
int _g_rmdir(gchar * filename) {
	return (int)g_rmdir((const gchar *)(filename));
}
void _g_set_application_name(gchar * application_name) {
	(void)g_set_application_name((const gchar *)(application_name));
}
void _g_set_error_literal(void * err, GQuark domain, gint code, gchar * message) {
	(void)g_set_error_literal((GError **)(err), domain, code, (const gchar *)(message));
}
void _g_set_prgname(gchar * prgname) {
	(void)g_set_prgname((const gchar *)(prgname));
}
gboolean _g_setenv(gchar * variable, gchar * value, gboolean overwrite) {
	return (gboolean)g_setenv((const gchar *)(variable), (const gchar *)(value), overwrite);
}
gboolean _g_shell_parse_argv(gchar * command_line, gint * argcp, void * argvp, void * _error_) {
	return (gboolean)g_shell_parse_argv((const gchar *)(command_line), argcp, (gchar ***)(argvp), (GError **)(_error_));
}
gchar * _g_shell_quote(gchar * unquoted_string) {
	return (gchar *)g_shell_quote((const gchar *)(unquoted_string));
}
gchar * _g_shell_unquote(gchar * quoted_string, void * _error_) {
	return (gchar *)g_shell_unquote((const gchar *)(quoted_string), (GError **)(_error_));
}
gpointer _g_slice_copy(gsize block_size, gpointer mem_block) {
	return (gpointer)g_slice_copy(block_size, (gconstpointer)(mem_block));
}
gboolean _g_spawn_async(gchar * working_directory, void * argv, void * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid * child_pid, void * _error_) {
	return (gboolean)g_spawn_async((const gchar *)(working_directory), (gchar **)(argv), (gchar **)(envp), flags, child_setup, user_data, child_pid, (GError **)(_error_));
}
gboolean _g_spawn_async_with_pipes(gchar * working_directory, void * argv, void * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid * child_pid, gint * standard_input, gint * standard_output, gint * standard_error, void * _error_) {
	return (gboolean)g_spawn_async_with_pipes((const gchar *)(working_directory), (gchar **)(argv), (gchar **)(envp), flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, (GError **)(_error_));
}
gboolean _g_spawn_check_exit_status(gint exit_status, void * _error_) {
	return (gboolean)g_spawn_check_exit_status(exit_status, (GError **)(_error_));
}
gboolean _g_spawn_command_line_async(gchar * command_line, void * _error_) {
	return (gboolean)g_spawn_command_line_async((const gchar *)(command_line), (GError **)(_error_));
}
gboolean _g_spawn_command_line_sync(gchar * command_line, void * standard_output, void * standard_error, gint * exit_status, void * _error_) {
	return (gboolean)g_spawn_command_line_sync((const gchar *)(command_line), (gchar **)(standard_output), (gchar **)(standard_error), exit_status, (GError **)(_error_));
}
gboolean _g_spawn_sync(gchar * working_directory, void * argv, void * envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, void * standard_output, void * standard_error, gint * exit_status, void * _error_) {
	return (gboolean)g_spawn_sync((const gchar *)(working_directory), (gchar **)(argv), (gchar **)(envp), flags, child_setup, user_data, (gchar **)(standard_output), (gchar **)(standard_error), exit_status, (GError **)(_error_));
}
gchar * _g_stpcpy(gchar * dest, char * src) {
	return (gchar *)g_stpcpy(dest, (const char *)(src));
}
gboolean _g_str_equal(gpointer v1, gpointer v2) {
	return (gboolean)g_str_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
gboolean _g_str_has_prefix(gchar * str, gchar * prefix) {
	return (gboolean)g_str_has_prefix((const gchar *)(str), (const gchar *)(prefix));
}
gboolean _g_str_has_suffix(gchar * str, gchar * suffix) {
	return (gboolean)g_str_has_suffix((const gchar *)(str), (const gchar *)(suffix));
}
guint _g_str_hash(gpointer v) {
	return (guint)g_str_hash((gconstpointer)(v));
}
gchar * _g_strcanon(gchar * string, gchar * valid_chars, gchar substitutor) {
	return (gchar *)g_strcanon(string, (const gchar *)(valid_chars), substitutor);
}
int _g_strcmp0(char * str1, char * str2) {
	return (int)g_strcmp0((const char *)(str1), (const char *)(str2));
}
gchar * _g_strcompress(gchar * source) {
	return (gchar *)g_strcompress((const gchar *)(source));
}
gchar * _g_strdelimit(gchar * string, gchar * delimiters, gchar new_delimiter) {
	return (gchar *)g_strdelimit(string, (const gchar *)(delimiters), new_delimiter);
}
gchar * _g_strdup(gchar * str) {
	return (gchar *)g_strdup((const gchar *)(str));
}
void * _g_strdupv(void * str_array) {
	return (void *)g_strdupv((gchar **)(str_array));
}
gchar * _g_strerror(gint errnum) {
	return (gchar *)g_strerror(errnum);
}
gchar * _g_strescape(gchar * source, gchar * exceptions) {
	return (gchar *)g_strescape((const gchar *)(source), (const gchar *)(exceptions));
}
void _g_strfreev(void * str_array) {
	(void)g_strfreev((gchar **)(str_array));
}
GString * _g_string_new(gchar * init) {
	return (GString *)g_string_new((const gchar *)(init));
}
GString * _g_string_new_len(gchar * init, gssize len) {
	return (GString *)g_string_new_len((const gchar *)(init), len);
}
gchar * _g_strip_context(gchar * msgid, gchar * msgval) {
	return (gchar *)g_strip_context((const gchar *)(msgid), (const gchar *)(msgval));
}
gchar * _g_strjoinv(gchar * separator, void * str_array) {
	return (gchar *)g_strjoinv((const gchar *)(separator), (gchar **)(str_array));
}
gsize _g_strlcat(gchar * dest, gchar * src, gsize dest_size) {
	return (gsize)g_strlcat(dest, (const gchar *)(src), dest_size);
}
gsize _g_strlcpy(gchar * dest, gchar * src, gsize dest_size) {
	return (gsize)g_strlcpy(dest, (const gchar *)(src), dest_size);
}
gchar * _g_strndup(gchar * str, gsize n) {
	return (gchar *)g_strndup((const gchar *)(str), n);
}
gchar * _g_strrstr(gchar * haystack, gchar * needle) {
	return (gchar *)g_strrstr((const gchar *)(haystack), (const gchar *)(needle));
}
gchar * _g_strrstr_len(gchar * haystack, gssize haystack_len, gchar * needle) {
	return (gchar *)g_strrstr_len((const gchar *)(haystack), haystack_len, (const gchar *)(needle));
}
gchar * _g_strsignal(gint signum) {
	return (gchar *)g_strsignal(signum);
}
void * _g_strsplit(gchar * string, gchar * delimiter, gint max_tokens) {
	return (void *)g_strsplit((const gchar *)(string), (const gchar *)(delimiter), max_tokens);
}
void * _g_strsplit_set(gchar * string, gchar * delimiters, gint max_tokens) {
	return (void *)g_strsplit_set((const gchar *)(string), (const gchar *)(delimiters), max_tokens);
}
gchar * _g_strstr_len(gchar * haystack, gssize haystack_len, gchar * needle) {
	return (gchar *)g_strstr_len((const gchar *)(haystack), haystack_len, (const gchar *)(needle));
}
gdouble _g_strtod(gchar * nptr, void * endptr) {
	return (gdouble)g_strtod((const gchar *)(nptr), (gchar **)(endptr));
}
guint _g_strv_length(void * str_array) {
	return (guint)g_strv_length((gchar **)(str_array));
}
void _g_test_add_data_func(char * testpath, gpointer test_data, GTestDataFunc test_func) {
	(void)g_test_add_data_func((const char *)(testpath), (gconstpointer)(test_data), test_func);
}
void _g_test_add_data_func_full(char * testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func) {
	(void)g_test_add_data_func_full((const char *)(testpath), test_data, test_func, data_free_func);
}
void _g_test_add_func(char * testpath, GTestFunc test_func) {
	(void)g_test_add_func((const char *)(testpath), test_func);
}
void _g_test_add_vtable(char * testpath, gsize data_size, gpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	(void)g_test_add_vtable((const char *)(testpath), data_size, (gconstpointer)(test_data), data_setup, data_test, data_teardown);
}
void _g_test_assert_expected_messages_internal(char * domain, char * file, int line, char * func) {
	(void)g_test_assert_expected_messages_internal((const char *)(domain), (const char *)(file), line, (const char *)(func));
}
void _g_test_bug(char * bug_uri_snippet) {
	(void)g_test_bug((const char *)(bug_uri_snippet));
}
void _g_test_bug_base(char * uri_pattern) {
	(void)g_test_bug_base((const char *)(uri_pattern));
}
GTestCase * _g_test_create_case(char * test_name, gsize data_size, gpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	return (GTestCase *)g_test_create_case((const char *)(test_name), data_size, (gconstpointer)(test_data), data_setup, data_test, data_teardown);
}
GTestSuite * _g_test_create_suite(char * suite_name) {
	return (GTestSuite *)g_test_create_suite((const char *)(suite_name));
}
void _g_test_expect_message(gchar * log_domain, GLogLevelFlags log_level, gchar * pattern) {
	(void)g_test_expect_message((const gchar *)(log_domain), log_level, (const gchar *)(pattern));
}
char * _g_test_log_type_name(GTestLogType log_type) {
	return (char *)g_test_log_type_name(log_type);
}
void _g_test_trap_assertions(char * domain, char * file, int line, char * func, guint64 assertion_flags, char * pattern) {
	(void)g_test_trap_assertions((const char *)(domain), (const char *)(file), line, (const char *)(func), assertion_flags, (const char *)(pattern));
}
gunichar2 * _g_ucs4_to_utf16(gunichar * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gunichar2 *)g_ucs4_to_utf16((const gunichar *)(str), len, items_read, items_written, (GError **)(_error_));
}
gchar * _g_ucs4_to_utf8(gunichar * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gchar *)g_ucs4_to_utf8((const gunichar *)(str), len, items_read, items_written, (GError **)(_error_));
}
gboolean _g_unix_open_pipe(gint * fds, gint flags, void * _error_) {
	return (gboolean)g_unix_open_pipe(fds, flags, (GError **)(_error_));
}
gboolean _g_unix_set_fd_nonblocking(gint fd, gboolean nonblock, void * _error_) {
	return (gboolean)g_unix_set_fd_nonblocking(fd, nonblock, (GError **)(_error_));
}
int _g_unlink(gchar * filename) {
	return (int)g_unlink((const gchar *)(filename));
}
void _g_unsetenv(gchar * variable) {
	(void)g_unsetenv((const gchar *)(variable));
}
char * _g_uri_escape_string(char * unescaped, char * reserved_chars_allowed, gboolean allow_utf8) {
	return (char *)g_uri_escape_string((const char *)(unescaped), (const char *)(reserved_chars_allowed), allow_utf8);
}
void * _g_uri_list_extract_uris(gchar * uri_list) {
	return (void *)g_uri_list_extract_uris((const gchar *)(uri_list));
}
char * _g_uri_parse_scheme(char * uri) {
	return (char *)g_uri_parse_scheme((const char *)(uri));
}
char * _g_uri_unescape_segment(char * escaped_string, char * escaped_string_end, char * illegal_characters) {
	return (char *)g_uri_unescape_segment((const char *)(escaped_string), (const char *)(escaped_string_end), (const char *)(illegal_characters));
}
char * _g_uri_unescape_string(char * escaped_string, char * illegal_characters) {
	return (char *)g_uri_unescape_string((const char *)(escaped_string), (const char *)(illegal_characters));
}
gunichar * _g_utf16_to_ucs4(gunichar2 * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gunichar *)g_utf16_to_ucs4((const gunichar2 *)(str), len, items_read, items_written, (GError **)(_error_));
}
gchar * _g_utf16_to_utf8(gunichar2 * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gchar *)g_utf16_to_utf8((const gunichar2 *)(str), len, items_read, items_written, (GError **)(_error_));
}
gchar * _g_utf8_casefold(gchar * str, gssize len) {
	return (gchar *)g_utf8_casefold((const gchar *)(str), len);
}
gint _g_utf8_collate(gchar * str1, gchar * str2) {
	return (gint)g_utf8_collate((const gchar *)(str1), (const gchar *)(str2));
}
gchar * _g_utf8_collate_key(gchar * str, gssize len) {
	return (gchar *)g_utf8_collate_key((const gchar *)(str), len);
}
gchar * _g_utf8_collate_key_for_filename(gchar * str, gssize len) {
	return (gchar *)g_utf8_collate_key_for_filename((const gchar *)(str), len);
}
gchar * _g_utf8_find_next_char(gchar * p, gchar * end) {
	return (gchar *)g_utf8_find_next_char((const gchar *)(p), (const gchar *)(end));
}
gchar * _g_utf8_find_prev_char(gchar * str, gchar * p) {
	return (gchar *)g_utf8_find_prev_char((const gchar *)(str), (const gchar *)(p));
}
gunichar _g_utf8_get_char(gchar * p) {
	return (gunichar)g_utf8_get_char((const gchar *)(p));
}
gunichar _g_utf8_get_char_validated(gchar * p, gssize max_len) {
	return (gunichar)g_utf8_get_char_validated((const gchar *)(p), max_len);
}
gchar * _g_utf8_normalize(gchar * str, gssize len, GNormalizeMode mode) {
	return (gchar *)g_utf8_normalize((const gchar *)(str), len, mode);
}
gchar * _g_utf8_offset_to_pointer(gchar * str, glong offset) {
	return (gchar *)g_utf8_offset_to_pointer((const gchar *)(str), offset);
}
glong _g_utf8_pointer_to_offset(gchar * str, gchar * pos) {
	return (glong)g_utf8_pointer_to_offset((const gchar *)(str), (const gchar *)(pos));
}
gchar * _g_utf8_prev_char(gchar * p) {
	return (gchar *)g_utf8_prev_char((const gchar *)(p));
}
gchar * _g_utf8_strchr(gchar * p, gssize len, gunichar c) {
	return (gchar *)g_utf8_strchr((const gchar *)(p), len, c);
}
gchar * _g_utf8_strdown(gchar * str, gssize len) {
	return (gchar *)g_utf8_strdown((const gchar *)(str), len);
}
glong _g_utf8_strlen(gchar * p, gssize max) {
	return (glong)g_utf8_strlen((const gchar *)(p), max);
}
gchar * _g_utf8_strncpy(gchar * dest, gchar * src, gsize n) {
	return (gchar *)g_utf8_strncpy(dest, (const gchar *)(src), n);
}
gchar * _g_utf8_strrchr(gchar * p, gssize len, gunichar c) {
	return (gchar *)g_utf8_strrchr((const gchar *)(p), len, c);
}
gchar * _g_utf8_strreverse(gchar * str, gssize len) {
	return (gchar *)g_utf8_strreverse((const gchar *)(str), len);
}
gchar * _g_utf8_strup(gchar * str, gssize len) {
	return (gchar *)g_utf8_strup((const gchar *)(str), len);
}
gchar * _g_utf8_substring(gchar * str, glong start_pos, glong end_pos) {
	return (gchar *)g_utf8_substring((const gchar *)(str), start_pos, end_pos);
}
gunichar * _g_utf8_to_ucs4(gchar * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gunichar *)g_utf8_to_ucs4((const gchar *)(str), len, items_read, items_written, (GError **)(_error_));
}
gunichar * _g_utf8_to_ucs4_fast(gchar * str, glong len, glong * items_written) {
	return (gunichar *)g_utf8_to_ucs4_fast((const gchar *)(str), len, items_written);
}
gunichar2 * _g_utf8_to_utf16(gchar * str, glong len, glong * items_read, glong * items_written, void * _error_) {
	return (gunichar2 *)g_utf8_to_utf16((const gchar *)(str), len, items_read, items_written, (GError **)(_error_));
}
gboolean _g_utf8_validate(gchar * str, gssize max_len, void * end) {
	return (gboolean)g_utf8_validate((const gchar *)(str), max_len, (const gchar **)(end));
}
void _g_warn_message(char * domain, char * file, int line, char * func, char * warnexpr) {
	(void)g_warn_message((const char *)(domain), (const char *)(file), line, (const char *)(func), (const char *)(warnexpr));
}
gboolean glibtrue() { return TRUE; }
gboolean glibfalse() { return FALSE; }
*/
import "C"
import (
	"unsafe"
)

type SList C.GSList
type Cond C.GCond
type Timer C.GTimer
type List C.GList
type Source C.GSource
type Rand C.GRand
type SourcePrivate C.GSourcePrivate
type PtrArray C.GPtrArray
type BookmarkFile C.GBookmarkFile
type MatchInfo C.GMatchInfo
type MainLoop C.GMainLoop
type MemVTable C.GMemVTable
type VariantType C.GVariantType
type OptionContext C.GOptionContext
type KeyFile C.GKeyFile
type Hook C.GHook
type StatBuf C.GStatBuf
type Dir C.GDir
type Regex C.GRegex
type OptionGroup C.GOptionGroup
type IOFuncs C.GIOFuncs
type ScannerConfig C.GScannerConfig
type SourceCallbackFuncs C.GSourceCallbackFuncs
type RecMutex C.GRecMutex
type SourceFuncs C.GSourceFuncs
type TestConfig C.GTestConfig
type Data C.GData
type AsyncQueue C.GAsyncQueue
type ThreadPool C.GThreadPool
type Array C.GArray
type Thread C.GThread
type DebugKey C.GDebugKey
type Sequence C.GSequence
type TestSuite C.GTestSuite
type Scanner C.GScanner
type PatternSpec C.GPatternSpec
type String C.GString
type Private C.GPrivate
type Tree C.GTree
type VariantBuilder C.GVariantBuilder
type Date C.GDate
type HookList C.GHookList
type Variant C.GVariant
type Hmac C.GHmac
type OptionEntry C.GOptionEntry
type MainContext C.GMainContext
type VariantIter C.GVariantIter
type HashTableIter C.GHashTableIter
type Error C.GError
type TrashStack C.GTrashStack
type MarkupParser C.GMarkupParser
type IOChannel C.GIOChannel
type RWLock C.GRWLock
type Node C.GNode
type Queue C.GQueue
type Checksum C.GChecksum
type Bytes C.GBytes
type Once C.GOnce
type TimeZone C.GTimeZone
type StringChunk C.GStringChunk
type TimeVal C.GTimeVal
type PollFD C.GPollFD
type SequenceIter C.GSequenceIter
type MarkupParseContext C.GMarkupParseContext
type DateTime C.GDateTime
type ByteArray C.GByteArray
type MappedFile C.GMappedFile
type TestCase C.GTestCase
type HashTable C.GHashTable
func ArrayAppendVals(array *C.GArray, data C.gpointer, len_ C.guint) (_return_ *C.GArray) {
	_return_ = C._g_array_append_vals(array, data, len_)
	return
}

func ArrayFree(array *C.GArray, free_segment C.gboolean) (_return_ *C.gchar) {
	_return_ = C.g_array_free(array, free_segment)
	return
}

func ArrayGetElementSize(array *C.GArray) (_return_ C.guint) {
	_return_ = C.g_array_get_element_size(array)
	return
}

func ArrayInsertVals(array *C.GArray, index_ C.guint, data C.gpointer, len_ C.guint) (_return_ *C.GArray) {
	_return_ = C._g_array_insert_vals(array, index_, data, len_)
	return
}

func ArrayNew(zero_terminated C.gboolean, clear_ C.gboolean, element_size C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_new(zero_terminated, clear_, element_size)
	return
}

func ArrayPrependVals(array *C.GArray, data C.gpointer, len_ C.guint) (_return_ *C.GArray) {
	_return_ = C._g_array_prepend_vals(array, data, len_)
	return
}

func ArrayRef(array *C.GArray) (_return_ *C.GArray) {
	_return_ = C.g_array_ref(array)
	return
}

func ArrayRemoveIndex(array *C.GArray, index_ C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_remove_index(array, index_)
	return
}

func ArrayRemoveIndexFast(array *C.GArray, index_ C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_remove_index_fast(array, index_)
	return
}

func ArrayRemoveRange(array *C.GArray, index_ C.guint, length C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_remove_range(array, index_, length)
	return
}

func ArraySetClearFunc(array *C.GArray, clear_func C.GDestroyNotify) () {
	C.g_array_set_clear_func(array, clear_func)
	return
}

func ArraySetSize(array *C.GArray, length C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_set_size(array, length)
	return
}

func ArraySizedNew(zero_terminated C.gboolean, clear_ C.gboolean, element_size C.guint, reserved_size C.guint) (_return_ *C.GArray) {
	_return_ = C.g_array_sized_new(zero_terminated, clear_, element_size, reserved_size)
	return
}

func ArraySort(array *C.GArray, compare_func C.GCompareFunc) () {
	C.g_array_sort(array, compare_func)
	return
}

func ArraySortWithData(array *C.GArray, compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_array_sort_with_data(array, compare_func, user_data)
	return
}

func ArrayUnref(array *C.GArray) () {
	C.g_array_unref(array)
	return
}

func AsyncQueueNew() (_return_ *C.GAsyncQueue) {
	_return_ = C.g_async_queue_new()
	return
}

func AsyncQueueNewFull(item_free_func C.GDestroyNotify) (_return_ *C.GAsyncQueue) {
	_return_ = C.g_async_queue_new_full(item_free_func)
	return
}

func (_self_ *AsyncQueue) Length() (_return_ C.gint) {
	_return_ = C.g_async_queue_length((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) LengthUnlocked() (_return_ C.gint) {
	_return_ = C.g_async_queue_length_unlocked((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Lock() () {
	C.g_async_queue_lock((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Pop() (_return_ C.gpointer) {
	_return_ = C.g_async_queue_pop((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) PopUnlocked() (_return_ C.gpointer) {
	_return_ = C.g_async_queue_pop_unlocked((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Push(data C.gpointer) () {
	C.g_async_queue_push((*C.GAsyncQueue)(_self_), data)
	return
}

func (_self_ *AsyncQueue) PushSorted(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_async_queue_push_sorted((*C.GAsyncQueue)(_self_), data, func_, user_data)
	return
}

func (_self_ *AsyncQueue) PushSortedUnlocked(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_async_queue_push_sorted_unlocked((*C.GAsyncQueue)(_self_), data, func_, user_data)
	return
}

func (_self_ *AsyncQueue) PushUnlocked(data C.gpointer) () {
	C.g_async_queue_push_unlocked((*C.GAsyncQueue)(_self_), data)
	return
}

func (_self_ *AsyncQueue) Ref() (_return_ *C.GAsyncQueue) {
	_return_ = C.g_async_queue_ref((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Sort(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_async_queue_sort((*C.GAsyncQueue)(_self_), func_, user_data)
	return
}

func (_self_ *AsyncQueue) SortUnlocked(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_async_queue_sort_unlocked((*C.GAsyncQueue)(_self_), func_, user_data)
	return
}

func (_self_ *AsyncQueue) TimeoutPop(timeout C.guint64) (_return_ C.gpointer) {
	_return_ = C.g_async_queue_timeout_pop((*C.GAsyncQueue)(_self_), timeout)
	return
}

func (_self_ *AsyncQueue) TimeoutPopUnlocked(timeout C.guint64) (_return_ C.gpointer) {
	_return_ = C.g_async_queue_timeout_pop_unlocked((*C.GAsyncQueue)(_self_), timeout)
	return
}

func (_self_ *AsyncQueue) TryPop() (_return_ C.gpointer) {
	_return_ = C.g_async_queue_try_pop((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) TryPopUnlocked() (_return_ C.gpointer) {
	_return_ = C.g_async_queue_try_pop_unlocked((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Unlock() () {
	C.g_async_queue_unlock((*C.GAsyncQueue)(_self_))
	return
}

func (_self_ *AsyncQueue) Unref() () {
	C.g_async_queue_unref((*C.GAsyncQueue)(_self_))
	return
}

func BookmarkFileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_bookmark_file_error_quark()
	return
}

func BookmarkFileNew() (_return_ *C.GBookmarkFile) {
	_return_ = C.g_bookmark_file_new()
	return
}

func (_self_ *BookmarkFile) AddApplication(uri *C.gchar, name *C.gchar, exec *C.gchar) () {
	C._g_bookmark_file_add_application((*C.GBookmarkFile)(_self_), uri, name, exec)
	return
}

func (_self_ *BookmarkFile) AddGroup(uri *C.gchar, group *C.gchar) () {
	C._g_bookmark_file_add_group((*C.GBookmarkFile)(_self_), uri, group)
	return
}

func (_self_ *BookmarkFile) Free() () {
	C.g_bookmark_file_free((*C.GBookmarkFile)(_self_))
	return
}

func (_self_ *BookmarkFile) GetAdded(uri *C.gchar) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_added((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetAppInfo(uri *C.gchar, name *C.gchar, exec unsafe.Pointer, count *C.guint, stamp *C.time_t) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_app_info((*C.GBookmarkFile)(_self_), uri, name, exec, count, stamp, _error_)
	return
}

func (_self_ *BookmarkFile) GetApplications(uri *C.gchar, length *C.gsize) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_applications((*C.GBookmarkFile)(_self_), uri, length, _error_)
	return
}

func (_self_ *BookmarkFile) GetDescription(uri *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_description((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetGroups(uri *C.gchar, length *C.gsize) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_groups((*C.GBookmarkFile)(_self_), uri, length, _error_)
	return
}

func (_self_ *BookmarkFile) GetIcon(uri *C.gchar, href unsafe.Pointer, mime_type unsafe.Pointer) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_icon((*C.GBookmarkFile)(_self_), uri, href, mime_type, _error_)
	return
}

func (_self_ *BookmarkFile) GetIsPrivate(uri *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_is_private((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetMimeType(uri *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_mime_type((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetModified(uri *C.gchar) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_modified((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetSize() (_return_ C.gint) {
	_return_ = C.g_bookmark_file_get_size((*C.GBookmarkFile)(_self_))
	return
}

func (_self_ *BookmarkFile) GetTitle(uri *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_title((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) GetUris(length *C.gsize) (_return_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_uris((*C.GBookmarkFile)(_self_), length)
	return
}

func (_self_ *BookmarkFile) GetVisited(uri *C.gchar) (_return_ C.time_t, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_get_visited((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) HasApplication(uri *C.gchar, name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_has_application((*C.GBookmarkFile)(_self_), uri, name, _error_)
	return
}

func (_self_ *BookmarkFile) HasGroup(uri *C.gchar, group *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_has_group((*C.GBookmarkFile)(_self_), uri, group, _error_)
	return
}

func (_self_ *BookmarkFile) HasItem(uri *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_bookmark_file_has_item((*C.GBookmarkFile)(_self_), uri)
	return
}

func (_self_ *BookmarkFile) LoadFromData(data *C.gchar, length C.gsize) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_load_from_data((*C.GBookmarkFile)(_self_), data, length, _error_)
	return
}

func (_self_ *BookmarkFile) LoadFromDataDirs(file *C.gchar, full_path unsafe.Pointer) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_load_from_data_dirs((*C.GBookmarkFile)(_self_), file, full_path, _error_)
	return
}

func (_self_ *BookmarkFile) LoadFromFile(filename *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_load_from_file((*C.GBookmarkFile)(_self_), filename, _error_)
	return
}

func (_self_ *BookmarkFile) MoveItem(old_uri *C.gchar, new_uri *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_move_item((*C.GBookmarkFile)(_self_), old_uri, new_uri, _error_)
	return
}

func (_self_ *BookmarkFile) RemoveApplication(uri *C.gchar, name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_remove_application((*C.GBookmarkFile)(_self_), uri, name, _error_)
	return
}

func (_self_ *BookmarkFile) RemoveGroup(uri *C.gchar, group *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_remove_group((*C.GBookmarkFile)(_self_), uri, group, _error_)
	return
}

func (_self_ *BookmarkFile) RemoveItem(uri *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_remove_item((*C.GBookmarkFile)(_self_), uri, _error_)
	return
}

func (_self_ *BookmarkFile) SetAdded(uri *C.gchar, added C.time_t) () {
	C._g_bookmark_file_set_added((*C.GBookmarkFile)(_self_), uri, added)
	return
}

func (_self_ *BookmarkFile) SetAppInfo(uri *C.gchar, name *C.gchar, exec *C.gchar, count C.gint, stamp C.time_t) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_set_app_info((*C.GBookmarkFile)(_self_), uri, name, exec, count, stamp, _error_)
	return
}

func (_self_ *BookmarkFile) SetDescription(uri *C.gchar, description *C.gchar) () {
	C._g_bookmark_file_set_description((*C.GBookmarkFile)(_self_), uri, description)
	return
}

func (_self_ *BookmarkFile) SetGroups(uri *C.gchar, groups unsafe.Pointer, length C.gsize) () {
	C._g_bookmark_file_set_groups((*C.GBookmarkFile)(_self_), uri, groups, length)
	return
}

func (_self_ *BookmarkFile) SetIcon(uri *C.gchar, href *C.gchar, mime_type *C.gchar) () {
	C._g_bookmark_file_set_icon((*C.GBookmarkFile)(_self_), uri, href, mime_type)
	return
}

func (_self_ *BookmarkFile) SetIsPrivate(uri *C.gchar, is_private C.gboolean) () {
	C._g_bookmark_file_set_is_private((*C.GBookmarkFile)(_self_), uri, is_private)
	return
}

func (_self_ *BookmarkFile) SetMimeType(uri *C.gchar, mime_type *C.gchar) () {
	C._g_bookmark_file_set_mime_type((*C.GBookmarkFile)(_self_), uri, mime_type)
	return
}

func (_self_ *BookmarkFile) SetModified(uri *C.gchar, modified C.time_t) () {
	C._g_bookmark_file_set_modified((*C.GBookmarkFile)(_self_), uri, modified)
	return
}

func (_self_ *BookmarkFile) SetTitle(uri *C.gchar, title *C.gchar) () {
	C._g_bookmark_file_set_title((*C.GBookmarkFile)(_self_), uri, title)
	return
}

func (_self_ *BookmarkFile) SetVisited(uri *C.gchar, visited C.time_t) () {
	C._g_bookmark_file_set_visited((*C.GBookmarkFile)(_self_), uri, visited)
	return
}

func (_self_ *BookmarkFile) ToData(length *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_to_data((*C.GBookmarkFile)(_self_), length, _error_)
	return
}

func (_self_ *BookmarkFile) ToFile(filename *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_bookmark_file_to_file((*C.GBookmarkFile)(_self_), filename, _error_)
	return
}

func ByteArrayAppend(array *C.GByteArray, data *C.guint8, len_ C.guint) (_return_ *C.GByteArray) {
	_return_ = C._g_byte_array_append(array, data, len_)
	return
}

func ByteArrayFree(array *C.GByteArray, free_segment C.gboolean) (_return_ *C.guint8) {
	_return_ = C.g_byte_array_free(array, free_segment)
	return
}

func ByteArrayFreeToBytes(array *C.GByteArray) (_return_ *C.GBytes) {
	_return_ = C.g_byte_array_free_to_bytes(array)
	return
}

func ByteArrayNew() (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_new()
	return
}

func ByteArrayNewTake(data *C.guint8, len_ C.gsize) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_new_take(data, len_)
	return
}

func ByteArrayPrepend(array *C.GByteArray, data *C.guint8, len_ C.guint) (_return_ *C.GByteArray) {
	_return_ = C._g_byte_array_prepend(array, data, len_)
	return
}

func ByteArrayRef(array *C.GByteArray) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_ref(array)
	return
}

func ByteArrayRemoveIndex(array *C.GByteArray, index_ C.guint) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_remove_index(array, index_)
	return
}

func ByteArrayRemoveIndexFast(array *C.GByteArray, index_ C.guint) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_remove_index_fast(array, index_)
	return
}

func ByteArrayRemoveRange(array *C.GByteArray, index_ C.guint, length C.guint) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_remove_range(array, index_, length)
	return
}

func ByteArraySetSize(array *C.GByteArray, length C.guint) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_set_size(array, length)
	return
}

func ByteArraySizedNew(reserved_size C.guint) (_return_ *C.GByteArray) {
	_return_ = C.g_byte_array_sized_new(reserved_size)
	return
}

func ByteArraySort(array *C.GByteArray, compare_func C.GCompareFunc) () {
	C.g_byte_array_sort(array, compare_func)
	return
}

func ByteArraySortWithData(array *C.GByteArray, compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_byte_array_sort_with_data(array, compare_func, user_data)
	return
}

func ByteArrayUnref(array *C.GByteArray) () {
	C.g_byte_array_unref(array)
	return
}

func BytesNew(data C.gpointer, size C.gsize) (_return_ *C.GBytes) {
	_return_ = C._g_bytes_new(data, size)
	return
}

func BytesNewStatic(data C.gpointer, size C.gsize) (_return_ *C.GBytes) {
	_return_ = C._g_bytes_new_static(data, size)
	return
}

func BytesNewTake(data C.gpointer, size C.gsize) (_return_ *C.GBytes) {
	_return_ = C.g_bytes_new_take(data, size)
	return
}

func BytesNewWithFreeFunc(data C.gpointer, size C.gsize, free_func C.GDestroyNotify, user_data C.gpointer) (_return_ *C.GBytes) {
	_return_ = C._g_bytes_new_with_free_func(data, size, free_func, user_data)
	return
}

func (_self_ *Bytes) Compare(bytes2 C.gpointer) (_return_ C.gint) {
	_return_ = C._g_bytes_compare((*C.GBytes)(_self_), bytes2)
	return
}

func (_self_ *Bytes) Equal(bytes2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_bytes_equal((*C.GBytes)(_self_), bytes2)
	return
}

func (_self_ *Bytes) GetData() (_return_ C.gpointer, size *C.gsize) {
	_return_ = C._g_bytes_get_data((*C.GBytes)(_self_), size)
	return
}

func (_self_ *Bytes) GetSize() (_return_ C.gsize) {
	_return_ = C.g_bytes_get_size((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) Hash() (_return_ C.guint) {
	_return_ = C._g_bytes_hash((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) NewFromBytes(offset C.gsize, length C.gsize) (_return_ *C.GBytes) {
	_return_ = C.g_bytes_new_from_bytes((*C.GBytes)(_self_), offset, length)
	return
}

func (_self_ *Bytes) Ref() (_return_ *C.GBytes) {
	_return_ = C.g_bytes_ref((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) Unref() () {
	C.g_bytes_unref((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) UnrefToArray() (_return_ *C.GByteArray) {
	_return_ = C.g_bytes_unref_to_array((*C.GBytes)(_self_))
	return
}

func (_self_ *Bytes) UnrefToData(size *C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_bytes_unref_to_data((*C.GBytes)(_self_), size)
	return
}

func ChecksumNew(checksum_type C.GChecksumType) (_return_ *C.GChecksum) {
	_return_ = C.g_checksum_new(checksum_type)
	return
}

func ChecksumTypeGetLength(checksum_type C.GChecksumType) (_return_ C.gssize) {
	_return_ = C.g_checksum_type_get_length(checksum_type)
	return
}

func (_self_ *Checksum) Copy() (_return_ *C.GChecksum) {
	_return_ = C._g_checksum_copy((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) Free() () {
	C.g_checksum_free((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) GetDigest(buffer *C.guint8, digest_len *C.gsize) () {
	C.g_checksum_get_digest((*C.GChecksum)(_self_), buffer, digest_len)
	return
}

func (_self_ *Checksum) GetString() (_return_ *C.gchar) {
	_return_ = C._g_checksum_get_string((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) Reset() () {
	C.g_checksum_reset((*C.GChecksum)(_self_))
	return
}

func (_self_ *Checksum) Update(data *C.guchar, length C.gssize) () {
	C._g_checksum_update((*C.GChecksum)(_self_), data, length)
	return
}

func (_self_ *Cond) Broadcast() () {
	C.g_cond_broadcast((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Clear() () {
	C.g_cond_clear((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Init() () {
	C.g_cond_init((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Signal() () {
	C.g_cond_signal((*C.GCond)(_self_))
	return
}

func (_self_ *Cond) Wait(mutex *C.GMutex) () {
	C.g_cond_wait((*C.GCond)(_self_), mutex)
	return
}

func (_self_ *Cond) WaitUntil(mutex *C.GMutex, end_time C.gint64) (_return_ C.gboolean) {
	_return_ = C.g_cond_wait_until((*C.GCond)(_self_), mutex, end_time)
	return
}

func DateNew() (_return_ *C.GDate) {
	_return_ = C.g_date_new()
	return
}

func DateNewDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) (_return_ *C.GDate) {
	_return_ = C.g_date_new_dmy(day, month, year)
	return
}

func DateNewJulian(julian_day C.guint32) (_return_ *C.GDate) {
	_return_ = C.g_date_new_julian(julian_day)
	return
}

func DateGetDaysInMonth(month C.GDateMonth, year C.GDateYear) (_return_ C.guint8) {
	_return_ = C.g_date_get_days_in_month(month, year)
	return
}

func DateGetMondayWeeksInYear(year C.GDateYear) (_return_ C.guint8) {
	_return_ = C.g_date_get_monday_weeks_in_year(year)
	return
}

func DateGetSundayWeeksInYear(year C.GDateYear) (_return_ C.guint8) {
	_return_ = C.g_date_get_sunday_weeks_in_year(year)
	return
}

func DateIsLeapYear(year C.GDateYear) (_return_ C.gboolean) {
	_return_ = C.g_date_is_leap_year(year)
	return
}

func DateStrftime(s *C.gchar, slen C.gsize, format *C.gchar, date *C.GDate) (_return_ C.gsize) {
	_return_ = C._g_date_strftime(s, slen, format, date)
	return
}

func DateValidDay(day C.GDateDay) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_day(day)
	return
}

func DateValidDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_dmy(day, month, year)
	return
}

func DateValidJulian(julian_date C.guint32) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_julian(julian_date)
	return
}

func DateValidMonth(month C.GDateMonth) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_month(month)
	return
}

func DateValidWeekday(weekday C.GDateWeekday) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_weekday(weekday)
	return
}

func DateValidYear(year C.GDateYear) (_return_ C.gboolean) {
	_return_ = C.g_date_valid_year(year)
	return
}

func (_self_ *Date) AddDays(n_days C.guint) () {
	C.g_date_add_days((*C.GDate)(_self_), n_days)
	return
}

func (_self_ *Date) AddMonths(n_months C.guint) () {
	C.g_date_add_months((*C.GDate)(_self_), n_months)
	return
}

func (_self_ *Date) AddYears(n_years C.guint) () {
	C.g_date_add_years((*C.GDate)(_self_), n_years)
	return
}

func (_self_ *Date) Clamp(min_date *C.GDate, max_date *C.GDate) () {
	C._g_date_clamp((*C.GDate)(_self_), min_date, max_date)
	return
}

func (_self_ *Date) Clear(n_dates C.guint) () {
	C.g_date_clear((*C.GDate)(_self_), n_dates)
	return
}

func (_self_ *Date) Compare(rhs *C.GDate) (_return_ C.gint) {
	_return_ = C._g_date_compare((*C.GDate)(_self_), rhs)
	return
}

func (_self_ *Date) DaysBetween(date2 *C.GDate) (_return_ C.gint) {
	_return_ = C._g_date_days_between((*C.GDate)(_self_), date2)
	return
}

func (_self_ *Date) Free() () {
	C.g_date_free((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetDay() (_return_ C.GDateDay) {
	_return_ = C._g_date_get_day((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetDayOfYear() (_return_ C.guint) {
	_return_ = C._g_date_get_day_of_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetIso8601WeekOfYear() (_return_ C.guint) {
	_return_ = C._g_date_get_iso8601_week_of_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetJulian() (_return_ C.guint32) {
	_return_ = C._g_date_get_julian((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetMondayWeekOfYear() (_return_ C.guint) {
	_return_ = C._g_date_get_monday_week_of_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetMonth() (_return_ C.GDateMonth) {
	_return_ = C._g_date_get_month((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetSundayWeekOfYear() (_return_ C.guint) {
	_return_ = C._g_date_get_sunday_week_of_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetWeekday() (_return_ C.GDateWeekday) {
	_return_ = C._g_date_get_weekday((*C.GDate)(_self_))
	return
}

func (_self_ *Date) GetYear() (_return_ C.GDateYear) {
	_return_ = C._g_date_get_year((*C.GDate)(_self_))
	return
}

func (_self_ *Date) IsFirstOfMonth() (_return_ C.gboolean) {
	_return_ = C._g_date_is_first_of_month((*C.GDate)(_self_))
	return
}

func (_self_ *Date) IsLastOfMonth() (_return_ C.gboolean) {
	_return_ = C._g_date_is_last_of_month((*C.GDate)(_self_))
	return
}

func (_self_ *Date) Order(date2 *C.GDate) () {
	C.g_date_order((*C.GDate)(_self_), date2)
	return
}

func (_self_ *Date) SetDay(day C.GDateDay) () {
	C.g_date_set_day((*C.GDate)(_self_), day)
	return
}

func (_self_ *Date) SetDmy(day C.GDateDay, month C.GDateMonth, y C.GDateYear) () {
	C.g_date_set_dmy((*C.GDate)(_self_), day, month, y)
	return
}

func (_self_ *Date) SetJulian(julian_date C.guint32) () {
	C.g_date_set_julian((*C.GDate)(_self_), julian_date)
	return
}

func (_self_ *Date) SetMonth(month C.GDateMonth) () {
	C.g_date_set_month((*C.GDate)(_self_), month)
	return
}

func (_self_ *Date) SetParse(str *C.gchar) () {
	C._g_date_set_parse((*C.GDate)(_self_), str)
	return
}

func (_self_ *Date) SetTimeT(timet C.time_t) () {
	C.g_date_set_time_t((*C.GDate)(_self_), timet)
	return
}

func (_self_ *Date) SetTimeVal(timeval *C.GTimeVal) () {
	C.g_date_set_time_val((*C.GDate)(_self_), timeval)
	return
}

func (_self_ *Date) SetYear(year C.GDateYear) () {
	C.g_date_set_year((*C.GDate)(_self_), year)
	return
}

func (_self_ *Date) SubtractDays(n_days C.guint) () {
	C.g_date_subtract_days((*C.GDate)(_self_), n_days)
	return
}

func (_self_ *Date) SubtractMonths(n_months C.guint) () {
	C.g_date_subtract_months((*C.GDate)(_self_), n_months)
	return
}

func (_self_ *Date) SubtractYears(n_years C.guint) () {
	C.g_date_subtract_years((*C.GDate)(_self_), n_years)
	return
}

func (_self_ *Date) Valid() (_return_ C.gboolean) {
	_return_ = C._g_date_valid((*C.GDate)(_self_))
	return
}

func DateTimeNew(tz *C.GTimeZone, year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new(tz, year, month, day, hour, minute, seconds)
	return
}

func DateTimeNewFromTimevalLocal(tv *C.GTimeVal) (_return_ *C.GDateTime) {
	_return_ = C._g_date_time_new_from_timeval_local(tv)
	return
}

func DateTimeNewFromTimevalUtc(tv *C.GTimeVal) (_return_ *C.GDateTime) {
	_return_ = C._g_date_time_new_from_timeval_utc(tv)
	return
}

func DateTimeNewFromUnixLocal(t C.gint64) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_from_unix_local(t)
	return
}

func DateTimeNewFromUnixUtc(t C.gint64) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_from_unix_utc(t)
	return
}

func DateTimeNewLocal(year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_local(year, month, day, hour, minute, seconds)
	return
}

func DateTimeNewNow(tz *C.GTimeZone) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_now(tz)
	return
}

func DateTimeNewNowLocal() (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_now_local()
	return
}

func DateTimeNewNowUtc() (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_now_utc()
	return
}

func DateTimeNewUtc(year C.gint, month C.gint, day C.gint, hour C.gint, minute C.gint, seconds C.gdouble) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_new_utc(year, month, day, hour, minute, seconds)
	return
}

func DateTimeCompare(dt1 C.gpointer, dt2 C.gpointer) (_return_ C.gint) {
	_return_ = C._g_date_time_compare(dt1, dt2)
	return
}

func DateTimeEqual(dt1 C.gpointer, dt2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_date_time_equal(dt1, dt2)
	return
}

func DateTimeHash(datetime C.gpointer) (_return_ C.guint) {
	_return_ = C._g_date_time_hash(datetime)
	return
}

func (_self_ *DateTime) Add(timespan C.GTimeSpan) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add((*C.GDateTime)(_self_), timespan)
	return
}

func (_self_ *DateTime) AddDays(days C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_days((*C.GDateTime)(_self_), days)
	return
}

func (_self_ *DateTime) AddFull(years C.gint, months C.gint, days C.gint, hours C.gint, minutes C.gint, seconds C.gdouble) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_full((*C.GDateTime)(_self_), years, months, days, hours, minutes, seconds)
	return
}

func (_self_ *DateTime) AddHours(hours C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_hours((*C.GDateTime)(_self_), hours)
	return
}

func (_self_ *DateTime) AddMinutes(minutes C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_minutes((*C.GDateTime)(_self_), minutes)
	return
}

func (_self_ *DateTime) AddMonths(months C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_months((*C.GDateTime)(_self_), months)
	return
}

func (_self_ *DateTime) AddSeconds(seconds C.gdouble) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_seconds((*C.GDateTime)(_self_), seconds)
	return
}

func (_self_ *DateTime) AddWeeks(weeks C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_weeks((*C.GDateTime)(_self_), weeks)
	return
}

func (_self_ *DateTime) AddYears(years C.gint) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_add_years((*C.GDateTime)(_self_), years)
	return
}

func (_self_ *DateTime) Difference(begin *C.GDateTime) (_return_ C.GTimeSpan) {
	_return_ = C.g_date_time_difference((*C.GDateTime)(_self_), begin)
	return
}

func (_self_ *DateTime) Format(format *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_date_time_format((*C.GDateTime)(_self_), format)
	return
}

func (_self_ *DateTime) GetDayOfMonth() (_return_ C.gint) {
	_return_ = C.g_date_time_get_day_of_month((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetDayOfWeek() (_return_ C.gint) {
	_return_ = C.g_date_time_get_day_of_week((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetDayOfYear() (_return_ C.gint) {
	_return_ = C.g_date_time_get_day_of_year((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetHour() (_return_ C.gint) {
	_return_ = C.g_date_time_get_hour((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetMicrosecond() (_return_ C.gint) {
	_return_ = C.g_date_time_get_microsecond((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetMinute() (_return_ C.gint) {
	_return_ = C.g_date_time_get_minute((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetMonth() (_return_ C.gint) {
	_return_ = C.g_date_time_get_month((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetSecond() (_return_ C.gint) {
	_return_ = C.g_date_time_get_second((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetSeconds() (_return_ C.gdouble) {
	_return_ = C.g_date_time_get_seconds((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetTimezoneAbbreviation() (_return_ *C.gchar) {
	_return_ = C._g_date_time_get_timezone_abbreviation((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetUtcOffset() (_return_ C.GTimeSpan) {
	_return_ = C.g_date_time_get_utc_offset((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetWeekNumberingYear() (_return_ C.gint) {
	_return_ = C.g_date_time_get_week_numbering_year((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetWeekOfYear() (_return_ C.gint) {
	_return_ = C.g_date_time_get_week_of_year((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetYear() (_return_ C.gint) {
	_return_ = C.g_date_time_get_year((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) GetYmd() (year *C.gint, month *C.gint, day *C.gint) {
	C.g_date_time_get_ymd((*C.GDateTime)(_self_), year, month, day)
	return
}

func (_self_ *DateTime) IsDaylightSavings() (_return_ C.gboolean) {
	_return_ = C.g_date_time_is_daylight_savings((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) Ref() (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_ref((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) ToLocal() (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_to_local((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) ToTimeval(tv *C.GTimeVal) (_return_ C.gboolean) {
	_return_ = C.g_date_time_to_timeval((*C.GDateTime)(_self_), tv)
	return
}

func (_self_ *DateTime) ToTimezone(tz *C.GTimeZone) (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_to_timezone((*C.GDateTime)(_self_), tz)
	return
}

func (_self_ *DateTime) ToUnix() (_return_ C.gint64) {
	_return_ = C.g_date_time_to_unix((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) ToUtc() (_return_ *C.GDateTime) {
	_return_ = C.g_date_time_to_utc((*C.GDateTime)(_self_))
	return
}

func (_self_ *DateTime) Unref() () {
	C.g_date_time_unref((*C.GDateTime)(_self_))
	return
}

func DirMakeTmp(tmpl *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_dir_make_tmp(tmpl, _error_)
	return
}

func DirOpen(path *C.gchar, flags C.guint) (_return_ *C.GDir, _error_ unsafe.Pointer) {
	_return_ = C._g_dir_open(path, flags, _error_)
	return
}

func (_self_ *Dir) Close() () {
	C.g_dir_close((*C.GDir)(_self_))
	return
}

func (_self_ *Dir) ReadName() (_return_ *C.gchar) {
	_return_ = C._g_dir_read_name((*C.GDir)(_self_))
	return
}

func (_self_ *Dir) Rewind() () {
	C.g_dir_rewind((*C.GDir)(_self_))
	return
}

func ErrorNewLiteral(domain C.GQuark, code C.gint, message *C.gchar) (_return_ *C.GError) {
	_return_ = C._g_error_new_literal(domain, code, message)
	return
}

func (_self_ *Error) Copy() (_return_ *C.GError) {
	_return_ = C._g_error_copy((*C.GError)(_self_))
	return
}

func (_self_ *Error) Free() () {
	C.g_error_free((*C.GError)(_self_))
	return
}

func (_self_ *Error) Matches(domain C.GQuark, code C.gint) (_return_ C.gboolean) {
	_return_ = C._g_error_matches((*C.GError)(_self_), domain, code)
	return
}

func HashTableAdd(hash_table *C.GHashTable, key C.gpointer) () {
	C.g_hash_table_add(hash_table, key)
	return
}

func HashTableContains(hash_table *C.GHashTable, key C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_hash_table_contains(hash_table, key)
	return
}

func HashTableDestroy(hash_table *C.GHashTable) () {
	C.g_hash_table_destroy(hash_table)
	return
}

func HashTableFind(hash_table *C.GHashTable, predicate C.GHRFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_return_ = C.g_hash_table_find(hash_table, predicate, user_data)
	return
}

func HashTableForeach(hash_table *C.GHashTable, func_ C.GHFunc, user_data C.gpointer) () {
	C.g_hash_table_foreach(hash_table, func_, user_data)
	return
}

func HashTableForeachRemove(hash_table *C.GHashTable, func_ C.GHRFunc, user_data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_hash_table_foreach_remove(hash_table, func_, user_data)
	return
}

func HashTableForeachSteal(hash_table *C.GHashTable, func_ C.GHRFunc, user_data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_hash_table_foreach_steal(hash_table, func_, user_data)
	return
}

func HashTableGetKeys(hash_table *C.GHashTable) (_return_ *C.GList) {
	_return_ = C.g_hash_table_get_keys(hash_table)
	return
}

func HashTableGetValues(hash_table *C.GHashTable) (_return_ *C.GList) {
	_return_ = C.g_hash_table_get_values(hash_table)
	return
}

func HashTableInsert(hash_table *C.GHashTable, key C.gpointer, value C.gpointer) () {
	C.g_hash_table_insert(hash_table, key, value)
	return
}

func HashTableLookup(hash_table *C.GHashTable, key C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_hash_table_lookup(hash_table, key)
	return
}

func HashTableLookupExtended(hash_table *C.GHashTable, lookup_key C.gpointer, orig_key *C.gpointer, value *C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_hash_table_lookup_extended(hash_table, lookup_key, orig_key, value)
	return
}

func HashTableNew(hash_func C.GHashFunc, key_equal_func C.GEqualFunc) (_return_ *C.GHashTable) {
	_return_ = C.g_hash_table_new(hash_func, key_equal_func)
	return
}

func HashTableNewFull(hash_func C.GHashFunc, key_equal_func C.GEqualFunc, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) (_return_ *C.GHashTable) {
	_return_ = C.g_hash_table_new_full(hash_func, key_equal_func, key_destroy_func, value_destroy_func)
	return
}

func HashTableRef(hash_table *C.GHashTable) (_return_ *C.GHashTable) {
	_return_ = C.g_hash_table_ref(hash_table)
	return
}

func HashTableRemove(hash_table *C.GHashTable, key C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_hash_table_remove(hash_table, key)
	return
}

func HashTableRemoveAll(hash_table *C.GHashTable) () {
	C.g_hash_table_remove_all(hash_table)
	return
}

func HashTableReplace(hash_table *C.GHashTable, key C.gpointer, value C.gpointer) () {
	C.g_hash_table_replace(hash_table, key, value)
	return
}

func HashTableSize(hash_table *C.GHashTable) (_return_ C.guint) {
	_return_ = C.g_hash_table_size(hash_table)
	return
}

func HashTableSteal(hash_table *C.GHashTable, key C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_hash_table_steal(hash_table, key)
	return
}

func HashTableStealAll(hash_table *C.GHashTable) () {
	C.g_hash_table_steal_all(hash_table)
	return
}

func HashTableUnref(hash_table *C.GHashTable) () {
	C.g_hash_table_unref(hash_table)
	return
}

func (_self_ *HashTableIter) GetHashTable() (_return_ *C.GHashTable) {
	_return_ = C.g_hash_table_iter_get_hash_table((*C.GHashTableIter)(_self_))
	return
}

func (_self_ *HashTableIter) Init(hash_table *C.GHashTable) () {
	C.g_hash_table_iter_init((*C.GHashTableIter)(_self_), hash_table)
	return
}

func (_self_ *HashTableIter) Next(key *C.gpointer, value *C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_hash_table_iter_next((*C.GHashTableIter)(_self_), key, value)
	return
}

func (_self_ *HashTableIter) Remove() () {
	C.g_hash_table_iter_remove((*C.GHashTableIter)(_self_))
	return
}

func (_self_ *HashTableIter) Replace(value C.gpointer) () {
	C.g_hash_table_iter_replace((*C.GHashTableIter)(_self_), value)
	return
}

func (_self_ *HashTableIter) Steal() () {
	C.g_hash_table_iter_steal((*C.GHashTableIter)(_self_))
	return
}

func HmacNew(digest_type C.GChecksumType, key *C.guchar, key_len C.gsize) (_return_ *C.GHmac) {
	_return_ = C._g_hmac_new(digest_type, key, key_len)
	return
}

func (_self_ *Hmac) Copy() (_return_ *C.GHmac) {
	_return_ = C._g_hmac_copy((*C.GHmac)(_self_))
	return
}

func (_self_ *Hmac) GetDigest(buffer *C.guint8, digest_len *C.gsize) () {
	C.g_hmac_get_digest((*C.GHmac)(_self_), buffer, digest_len)
	return
}

func (_self_ *Hmac) GetString() (_return_ *C.gchar) {
	_return_ = C._g_hmac_get_string((*C.GHmac)(_self_))
	return
}

func (_self_ *Hmac) Ref() (_return_ *C.GHmac) {
	_return_ = C.g_hmac_ref((*C.GHmac)(_self_))
	return
}

func (_self_ *Hmac) Unref() () {
	C.g_hmac_unref((*C.GHmac)(_self_))
	return
}

func (_self_ *Hmac) Update(data *C.guchar, length C.gssize) () {
	C._g_hmac_update((*C.GHmac)(_self_), data, length)
	return
}

func HookAlloc(hook_list *C.GHookList) (_return_ *C.GHook) {
	_return_ = C.g_hook_alloc(hook_list)
	return
}

func HookDestroy(hook_list *C.GHookList, hook_id C.gulong) (_return_ C.gboolean) {
	_return_ = C.g_hook_destroy(hook_list, hook_id)
	return
}

func HookDestroyLink(hook_list *C.GHookList, hook *C.GHook) () {
	C.g_hook_destroy_link(hook_list, hook)
	return
}

func HookFind(hook_list *C.GHookList, need_valids C.gboolean, func_ C.GHookFindFunc, data C.gpointer) (_return_ *C.GHook) {
	_return_ = C.g_hook_find(hook_list, need_valids, func_, data)
	return
}

func HookFindData(hook_list *C.GHookList, need_valids C.gboolean, data C.gpointer) (_return_ *C.GHook) {
	_return_ = C.g_hook_find_data(hook_list, need_valids, data)
	return
}

func HookFindFunc(hook_list *C.GHookList, need_valids C.gboolean, func_ C.gpointer) (_return_ *C.GHook) {
	_return_ = C.g_hook_find_func(hook_list, need_valids, func_)
	return
}

func HookFindFuncData(hook_list *C.GHookList, need_valids C.gboolean, func_ C.gpointer, data C.gpointer) (_return_ *C.GHook) {
	_return_ = C.g_hook_find_func_data(hook_list, need_valids, func_, data)
	return
}

func HookFirstValid(hook_list *C.GHookList, may_be_in_call C.gboolean) (_return_ *C.GHook) {
	_return_ = C.g_hook_first_valid(hook_list, may_be_in_call)
	return
}

func HookFree(hook_list *C.GHookList, hook *C.GHook) () {
	C.g_hook_free(hook_list, hook)
	return
}

func HookGet(hook_list *C.GHookList, hook_id C.gulong) (_return_ *C.GHook) {
	_return_ = C.g_hook_get(hook_list, hook_id)
	return
}

func HookInsertBefore(hook_list *C.GHookList, sibling *C.GHook, hook *C.GHook) () {
	C.g_hook_insert_before(hook_list, sibling, hook)
	return
}

func HookInsertSorted(hook_list *C.GHookList, hook *C.GHook, func_ C.GHookCompareFunc) () {
	C.g_hook_insert_sorted(hook_list, hook, func_)
	return
}

func HookNextValid(hook_list *C.GHookList, hook *C.GHook, may_be_in_call C.gboolean) (_return_ *C.GHook) {
	_return_ = C.g_hook_next_valid(hook_list, hook, may_be_in_call)
	return
}

func HookPrepend(hook_list *C.GHookList, hook *C.GHook) () {
	C.g_hook_prepend(hook_list, hook)
	return
}

func HookRef(hook_list *C.GHookList, hook *C.GHook) (_return_ *C.GHook) {
	_return_ = C.g_hook_ref(hook_list, hook)
	return
}

func HookUnref(hook_list *C.GHookList, hook *C.GHook) () {
	C.g_hook_unref(hook_list, hook)
	return
}

func (_self_ *Hook) CompareIds(sibling *C.GHook) (_return_ C.gint) {
	_return_ = C.g_hook_compare_ids((*C.GHook)(_self_), sibling)
	return
}

func (_self_ *HookList) Clear() () {
	C.g_hook_list_clear((*C.GHookList)(_self_))
	return
}

func (_self_ *HookList) Init(hook_size C.guint) () {
	C.g_hook_list_init((*C.GHookList)(_self_), hook_size)
	return
}

func (_self_ *HookList) Invoke(may_recurse C.gboolean) () {
	C.g_hook_list_invoke((*C.GHookList)(_self_), may_recurse)
	return
}

func (_self_ *HookList) InvokeCheck(may_recurse C.gboolean) () {
	C.g_hook_list_invoke_check((*C.GHookList)(_self_), may_recurse)
	return
}

func (_self_ *HookList) Marshal(may_recurse C.gboolean, marshaller C.GHookMarshaller, marshal_data C.gpointer) () {
	C.g_hook_list_marshal((*C.GHookList)(_self_), may_recurse, marshaller, marshal_data)
	return
}

func (_self_ *HookList) MarshalCheck(may_recurse C.gboolean, marshaller C.GHookCheckMarshaller, marshal_data C.gpointer) () {
	C.g_hook_list_marshal_check((*C.GHookList)(_self_), may_recurse, marshaller, marshal_data)
	return
}

func IOChannelNewFile(filename *C.gchar, mode *C.gchar) (_return_ *C.GIOChannel, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_new_file(filename, mode, _error_)
	return
}

func IOChannelUnixNew(fd C.int) (_return_ *C.GIOChannel) {
	_return_ = C.g_io_channel_unix_new(fd)
	return
}

func IOChannelErrorFromErrno(en C.gint) (_return_ C.GIOChannelError) {
	_return_ = C.g_io_channel_error_from_errno(en)
	return
}

func IOChannelErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_io_channel_error_quark()
	return
}

func (_self_ *IOChannel) Flush() (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_flush((*C.GIOChannel)(_self_), _error_)
	return
}

func (_self_ *IOChannel) GetBufferCondition() (_return_ C.GIOCondition) {
	_return_ = C.g_io_channel_get_buffer_condition((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetBufferSize() (_return_ C.gsize) {
	_return_ = C.g_io_channel_get_buffer_size((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetBuffered() (_return_ C.gboolean) {
	_return_ = C.g_io_channel_get_buffered((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetCloseOnUnref() (_return_ C.gboolean) {
	_return_ = C.g_io_channel_get_close_on_unref((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetEncoding() (_return_ *C.gchar) {
	_return_ = C._g_io_channel_get_encoding((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetFlags() (_return_ C.GIOFlags) {
	_return_ = C.g_io_channel_get_flags((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) GetLineTerm(length *C.gint) (_return_ *C.gchar) {
	_return_ = C._g_io_channel_get_line_term((*C.GIOChannel)(_self_), length)
	return
}

func (_self_ *IOChannel) Init() () {
	C.g_io_channel_init((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) ReadChars(count C.gsize) (_return_ C.GIOStatus, buf *C.gchar, bytes_read *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_chars((*C.GIOChannel)(_self_), buf, count, bytes_read, _error_)
	return
}

func (_self_ *IOChannel) ReadLine() (_return_ C.GIOStatus, str_return unsafe.Pointer, length *C.gsize, terminator_pos *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_line((*C.GIOChannel)(_self_), str_return, length, terminator_pos, _error_)
	return
}

func (_self_ *IOChannel) ReadLineString(buffer *C.GString, terminator_pos *C.gsize) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_line_string((*C.GIOChannel)(_self_), buffer, terminator_pos, _error_)
	return
}

func (_self_ *IOChannel) ReadToEnd() (_return_ C.GIOStatus, str_return unsafe.Pointer, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_to_end((*C.GIOChannel)(_self_), str_return, length, _error_)
	return
}

func (_self_ *IOChannel) ReadUnichar(thechar *C.gunichar) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_read_unichar((*C.GIOChannel)(_self_), thechar, _error_)
	return
}

func (_self_ *IOChannel) Ref() (_return_ *C.GIOChannel) {
	_return_ = C.g_io_channel_ref((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) SeekPosition(offset C.gint64, type_ C.GSeekType) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_seek_position((*C.GIOChannel)(_self_), offset, type_, _error_)
	return
}

func (_self_ *IOChannel) SetBufferSize(size C.gsize) () {
	C.g_io_channel_set_buffer_size((*C.GIOChannel)(_self_), size)
	return
}

func (_self_ *IOChannel) SetBuffered(buffered C.gboolean) () {
	C.g_io_channel_set_buffered((*C.GIOChannel)(_self_), buffered)
	return
}

func (_self_ *IOChannel) SetCloseOnUnref(do_close C.gboolean) () {
	C.g_io_channel_set_close_on_unref((*C.GIOChannel)(_self_), do_close)
	return
}

func (_self_ *IOChannel) SetEncoding(encoding *C.gchar) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_set_encoding((*C.GIOChannel)(_self_), encoding, _error_)
	return
}

func (_self_ *IOChannel) SetFlags(flags C.GIOFlags) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_set_flags((*C.GIOChannel)(_self_), flags, _error_)
	return
}

func (_self_ *IOChannel) SetLineTerm(line_term *C.gchar, length C.gint) () {
	C._g_io_channel_set_line_term((*C.GIOChannel)(_self_), line_term, length)
	return
}

func (_self_ *IOChannel) Shutdown(flush C.gboolean) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_shutdown((*C.GIOChannel)(_self_), flush, _error_)
	return
}

func (_self_ *IOChannel) UnixGetFd() (_return_ C.gint) {
	_return_ = C.g_io_channel_unix_get_fd((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) Unref() () {
	C.g_io_channel_unref((*C.GIOChannel)(_self_))
	return
}

func (_self_ *IOChannel) WriteChars(buf *C.gchar, count C.gssize) (_return_ C.GIOStatus, bytes_written *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_write_chars((*C.GIOChannel)(_self_), buf, count, bytes_written, _error_)
	return
}

func (_self_ *IOChannel) WriteUnichar(thechar C.gunichar) (_return_ C.GIOStatus, _error_ unsafe.Pointer) {
	_return_ = C._g_io_channel_write_unichar((*C.GIOChannel)(_self_), thechar, _error_)
	return
}

func KeyFileNew() (_return_ *C.GKeyFile) {
	_return_ = C.g_key_file_new()
	return
}

func KeyFileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_key_file_error_quark()
	return
}

func (_self_ *KeyFile) Free() () {
	C.g_key_file_free((*C.GKeyFile)(_self_))
	return
}

func (_self_ *KeyFile) GetBoolean(group_name *C.gchar, key *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_boolean((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetBooleanList(group_name *C.gchar, key *C.gchar) (_return_ *C.gboolean, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_boolean_list((*C.GKeyFile)(_self_), group_name, key, length, _error_)
	return
}

func (_self_ *KeyFile) GetComment(group_name *C.gchar, key *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_comment((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetDouble(group_name *C.gchar, key *C.gchar) (_return_ C.gdouble, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_double((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetDoubleList(group_name *C.gchar, key *C.gchar) (_return_ *C.gdouble, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_double_list((*C.GKeyFile)(_self_), group_name, key, length, _error_)
	return
}

func (_self_ *KeyFile) GetGroups() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_key_file_get_groups((*C.GKeyFile)(_self_), length)
	return
}

func (_self_ *KeyFile) GetInt64(group_name *C.gchar, key *C.gchar) (_return_ C.gint64, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_int64((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetInteger(group_name *C.gchar, key *C.gchar) (_return_ C.gint, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_integer((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetIntegerList(group_name *C.gchar, key *C.gchar) (_return_ *C.gint, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_integer_list((*C.GKeyFile)(_self_), group_name, key, length, _error_)
	return
}

func (_self_ *KeyFile) GetKeys(group_name *C.gchar) (_return_ unsafe.Pointer, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_keys((*C.GKeyFile)(_self_), group_name, length, _error_)
	return
}

func (_self_ *KeyFile) GetLocaleString(group_name *C.gchar, key *C.gchar, locale *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_locale_string((*C.GKeyFile)(_self_), group_name, key, locale, _error_)
	return
}

func (_self_ *KeyFile) GetLocaleStringList(group_name *C.gchar, key *C.gchar, locale *C.gchar) (_return_ unsafe.Pointer, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_locale_string_list((*C.GKeyFile)(_self_), group_name, key, locale, length, _error_)
	return
}

func (_self_ *KeyFile) GetStartGroup() (_return_ *C.gchar) {
	_return_ = C.g_key_file_get_start_group((*C.GKeyFile)(_self_))
	return
}

func (_self_ *KeyFile) GetString(group_name *C.gchar, key *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_string((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetStringList(group_name *C.gchar, key *C.gchar) (_return_ unsafe.Pointer, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_string_list((*C.GKeyFile)(_self_), group_name, key, length, _error_)
	return
}

func (_self_ *KeyFile) GetUint64(group_name *C.gchar, key *C.gchar) (_return_ C.guint64, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_uint64((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) GetValue(group_name *C.gchar, key *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_get_value((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) HasGroup(group_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_key_file_has_group((*C.GKeyFile)(_self_), group_name)
	return
}

func (_self_ *KeyFile) HasKey(group_name *C.gchar, key *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_has_key((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) LoadFromData(data *C.gchar, length C.gsize, flags C.GKeyFileFlags) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_load_from_data((*C.GKeyFile)(_self_), data, length, flags, _error_)
	return
}

func (_self_ *KeyFile) LoadFromDataDirs(file *C.gchar, flags C.GKeyFileFlags) (_return_ C.gboolean, full_path unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_load_from_data_dirs((*C.GKeyFile)(_self_), file, full_path, flags, _error_)
	return
}

func (_self_ *KeyFile) LoadFromDirs(file *C.gchar, search_dirs unsafe.Pointer, flags C.GKeyFileFlags) (_return_ C.gboolean, full_path unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_load_from_dirs((*C.GKeyFile)(_self_), file, search_dirs, full_path, flags, _error_)
	return
}

func (_self_ *KeyFile) LoadFromFile(file *C.gchar, flags C.GKeyFileFlags) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_load_from_file((*C.GKeyFile)(_self_), file, flags, _error_)
	return
}

func (_self_ *KeyFile) Ref() (_return_ *C.GKeyFile) {
	_return_ = C.g_key_file_ref((*C.GKeyFile)(_self_))
	return
}

func (_self_ *KeyFile) RemoveComment(group_name *C.gchar, key *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_remove_comment((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) RemoveGroup(group_name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_remove_group((*C.GKeyFile)(_self_), group_name, _error_)
	return
}

func (_self_ *KeyFile) RemoveKey(group_name *C.gchar, key *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_remove_key((*C.GKeyFile)(_self_), group_name, key, _error_)
	return
}

func (_self_ *KeyFile) SetBoolean(group_name *C.gchar, key *C.gchar, value C.gboolean) () {
	C._g_key_file_set_boolean((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) SetBooleanList(group_name *C.gchar, key *C.gchar, list *C.gboolean, length C.gsize) () {
	C._g_key_file_set_boolean_list((*C.GKeyFile)(_self_), group_name, key, list, length)
	return
}

func (_self_ *KeyFile) SetComment(group_name *C.gchar, key *C.gchar, comment *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_set_comment((*C.GKeyFile)(_self_), group_name, key, comment, _error_)
	return
}

func (_self_ *KeyFile) SetDouble(group_name *C.gchar, key *C.gchar, value C.gdouble) () {
	C._g_key_file_set_double((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) SetDoubleList(group_name *C.gchar, key *C.gchar, list *C.gdouble, length C.gsize) () {
	C._g_key_file_set_double_list((*C.GKeyFile)(_self_), group_name, key, list, length)
	return
}

func (_self_ *KeyFile) SetInt64(group_name *C.gchar, key *C.gchar, value C.gint64) () {
	C._g_key_file_set_int64((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) SetInteger(group_name *C.gchar, key *C.gchar, value C.gint) () {
	C._g_key_file_set_integer((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) SetIntegerList(group_name *C.gchar, key *C.gchar, list *C.gint, length C.gsize) () {
	C._g_key_file_set_integer_list((*C.GKeyFile)(_self_), group_name, key, list, length)
	return
}

func (_self_ *KeyFile) SetListSeparator(separator C.gchar) () {
	C.g_key_file_set_list_separator((*C.GKeyFile)(_self_), separator)
	return
}

func (_self_ *KeyFile) SetLocaleString(group_name *C.gchar, key *C.gchar, locale *C.gchar, string_ *C.gchar) () {
	C._g_key_file_set_locale_string((*C.GKeyFile)(_self_), group_name, key, locale, string_)
	return
}

func (_self_ *KeyFile) SetLocaleStringList(group_name *C.gchar, key *C.gchar, locale *C.gchar, list unsafe.Pointer, length C.gsize) () {
	C._g_key_file_set_locale_string_list((*C.GKeyFile)(_self_), group_name, key, locale, list, length)
	return
}

func (_self_ *KeyFile) SetString(group_name *C.gchar, key *C.gchar, string_ *C.gchar) () {
	C._g_key_file_set_string((*C.GKeyFile)(_self_), group_name, key, string_)
	return
}

func (_self_ *KeyFile) SetStringList(group_name *C.gchar, key *C.gchar, list unsafe.Pointer, length C.gsize) () {
	C._g_key_file_set_string_list((*C.GKeyFile)(_self_), group_name, key, list, length)
	return
}

func (_self_ *KeyFile) SetUint64(group_name *C.gchar, key *C.gchar, value C.guint64) () {
	C._g_key_file_set_uint64((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) SetValue(group_name *C.gchar, key *C.gchar, value *C.gchar) () {
	C._g_key_file_set_value((*C.GKeyFile)(_self_), group_name, key, value)
	return
}

func (_self_ *KeyFile) ToData() (_return_ *C.gchar, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_key_file_to_data((*C.GKeyFile)(_self_), length, _error_)
	return
}

func (_self_ *KeyFile) Unref() () {
	C.g_key_file_unref((*C.GKeyFile)(_self_))
	return
}

func ListAlloc() (_return_ *C.GList) {
	_return_ = C.g_list_alloc()
	return
}

func ListAppend(list *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_append(list, data)
	return
}

func ListConcat(list1 *C.GList, list2 *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_concat(list1, list2)
	return
}

func ListCopy(list *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_copy(list)
	return
}

func ListCopyDeep(list *C.GList, func_ C.GCopyFunc, user_data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_copy_deep(list, func_, user_data)
	return
}

func ListDeleteLink(list *C.GList, link_ *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_delete_link(list, link_)
	return
}

func ListFind(list *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C._g_list_find(list, data)
	return
}

func ListFindCustom(list *C.GList, data C.gpointer, func_ C.GCompareFunc) (_return_ *C.GList) {
	_return_ = C._g_list_find_custom(list, data, func_)
	return
}

func ListFirst(list *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_first(list)
	return
}

func ListForeach(list *C.GList, func_ C.GFunc, user_data C.gpointer) () {
	C.g_list_foreach(list, func_, user_data)
	return
}

func ListFree(list *C.GList) () {
	C.g_list_free(list)
	return
}

func ListFree1(list *C.GList) () {
	C.g_list_free_1(list)
	return
}

func ListFreeFull(list *C.GList, free_func C.GDestroyNotify) () {
	C.g_list_free_full(list, free_func)
	return
}

func ListIndex(list *C.GList, data C.gpointer) (_return_ C.gint) {
	_return_ = C._g_list_index(list, data)
	return
}

func ListInsert(list *C.GList, data C.gpointer, position C.gint) (_return_ *C.GList) {
	_return_ = C.g_list_insert(list, data, position)
	return
}

func ListInsertBefore(list *C.GList, sibling *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_insert_before(list, sibling, data)
	return
}

func ListInsertSorted(list *C.GList, data C.gpointer, func_ C.GCompareFunc) (_return_ *C.GList) {
	_return_ = C.g_list_insert_sorted(list, data, func_)
	return
}

func ListInsertSortedWithData(list *C.GList, data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_insert_sorted_with_data(list, data, func_, user_data)
	return
}

func ListLast(list *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_last(list)
	return
}

func ListLength(list *C.GList) (_return_ C.guint) {
	_return_ = C.g_list_length(list)
	return
}

func ListNth(list *C.GList, n C.guint) (_return_ *C.GList) {
	_return_ = C.g_list_nth(list, n)
	return
}

func ListNthData(list *C.GList, n C.guint) (_return_ C.gpointer) {
	_return_ = C.g_list_nth_data(list, n)
	return
}

func ListNthPrev(list *C.GList, n C.guint) (_return_ *C.GList) {
	_return_ = C.g_list_nth_prev(list, n)
	return
}

func ListPosition(list *C.GList, llink *C.GList) (_return_ C.gint) {
	_return_ = C.g_list_position(list, llink)
	return
}

func ListPrepend(list *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_prepend(list, data)
	return
}

func ListRemove(list *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C._g_list_remove(list, data)
	return
}

func ListRemoveAll(list *C.GList, data C.gpointer) (_return_ *C.GList) {
	_return_ = C._g_list_remove_all(list, data)
	return
}

func ListRemoveLink(list *C.GList, llink *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_remove_link(list, llink)
	return
}

func ListReverse(list *C.GList) (_return_ *C.GList) {
	_return_ = C.g_list_reverse(list)
	return
}

func ListSort(list *C.GList, compare_func C.GCompareFunc) (_return_ *C.GList) {
	_return_ = C.g_list_sort(list, compare_func)
	return
}

func ListSortWithData(list *C.GList, compare_func C.GCompareDataFunc, user_data C.gpointer) (_return_ *C.GList) {
	_return_ = C.g_list_sort_with_data(list, compare_func, user_data)
	return
}

func MainContextNew() (_return_ *C.GMainContext) {
	_return_ = C.g_main_context_new()
	return
}

func MainContextDefault() (_return_ *C.GMainContext) {
	_return_ = C.g_main_context_default()
	return
}

func MainContextGetThreadDefault() (_return_ *C.GMainContext) {
	_return_ = C.g_main_context_get_thread_default()
	return
}

func MainContextRefThreadDefault() (_return_ *C.GMainContext) {
	_return_ = C.g_main_context_ref_thread_default()
	return
}

func (_self_ *MainContext) Acquire() (_return_ C.gboolean) {
	_return_ = C.g_main_context_acquire((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) AddPoll(fd *C.GPollFD, priority C.gint) () {
	C.g_main_context_add_poll((*C.GMainContext)(_self_), fd, priority)
	return
}

func (_self_ *MainContext) Check(max_priority C.gint, fds *C.GPollFD, n_fds C.gint) (_return_ C.gint) {
	_return_ = C.g_main_context_check((*C.GMainContext)(_self_), max_priority, fds, n_fds)
	return
}

func (_self_ *MainContext) Dispatch() () {
	C.g_main_context_dispatch((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) FindSourceByFuncsUserData(funcs *C.GSourceFuncs, user_data C.gpointer) (_return_ *C.GSource) {
	_return_ = C.g_main_context_find_source_by_funcs_user_data((*C.GMainContext)(_self_), funcs, user_data)
	return
}

func (_self_ *MainContext) FindSourceById(source_id C.guint) (_return_ *C.GSource) {
	_return_ = C.g_main_context_find_source_by_id((*C.GMainContext)(_self_), source_id)
	return
}

func (_self_ *MainContext) FindSourceByUserData(user_data C.gpointer) (_return_ *C.GSource) {
	_return_ = C.g_main_context_find_source_by_user_data((*C.GMainContext)(_self_), user_data)
	return
}

func (_self_ *MainContext) GetPollFunc() (_return_ C.GPollFunc) {
	_return_ = C.g_main_context_get_poll_func((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Invoke(function C.GSourceFunc, data C.gpointer) () {
	C.g_main_context_invoke((*C.GMainContext)(_self_), function, data)
	return
}

func (_self_ *MainContext) InvokeFull(priority C.gint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.g_main_context_invoke_full((*C.GMainContext)(_self_), priority, function, data, notify)
	return
}

func (_self_ *MainContext) IsOwner() (_return_ C.gboolean) {
	_return_ = C.g_main_context_is_owner((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Iteration(may_block C.gboolean) (_return_ C.gboolean) {
	_return_ = C.g_main_context_iteration((*C.GMainContext)(_self_), may_block)
	return
}

func (_self_ *MainContext) Pending() (_return_ C.gboolean) {
	_return_ = C.g_main_context_pending((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) PopThreadDefault() () {
	C.g_main_context_pop_thread_default((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Prepare(priority *C.gint) (_return_ C.gboolean) {
	_return_ = C.g_main_context_prepare((*C.GMainContext)(_self_), priority)
	return
}

func (_self_ *MainContext) PushThreadDefault() () {
	C.g_main_context_push_thread_default((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Ref() (_return_ *C.GMainContext) {
	_return_ = C.g_main_context_ref((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Release() () {
	C.g_main_context_release((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) RemovePoll(fd *C.GPollFD) () {
	C.g_main_context_remove_poll((*C.GMainContext)(_self_), fd)
	return
}

func (_self_ *MainContext) SetPollFunc(func_ C.GPollFunc) () {
	C.g_main_context_set_poll_func((*C.GMainContext)(_self_), func_)
	return
}

func (_self_ *MainContext) Unref() () {
	C.g_main_context_unref((*C.GMainContext)(_self_))
	return
}

func (_self_ *MainContext) Wait(cond *C.GCond, mutex *C.GMutex) (_return_ C.gboolean) {
	_return_ = C.g_main_context_wait((*C.GMainContext)(_self_), cond, mutex)
	return
}

func (_self_ *MainContext) Wakeup() () {
	C.g_main_context_wakeup((*C.GMainContext)(_self_))
	return
}

func MainLoopNew(context *C.GMainContext, is_running C.gboolean) (_return_ *C.GMainLoop) {
	_return_ = C.g_main_loop_new(context, is_running)
	return
}

func (_self_ *MainLoop) GetContext() (_return_ *C.GMainContext) {
	_return_ = C.g_main_loop_get_context((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) IsRunning() (_return_ C.gboolean) {
	_return_ = C.g_main_loop_is_running((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Quit() () {
	C.g_main_loop_quit((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Ref() (_return_ *C.GMainLoop) {
	_return_ = C.g_main_loop_ref((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Run() () {
	C.g_main_loop_run((*C.GMainLoop)(_self_))
	return
}

func (_self_ *MainLoop) Unref() () {
	C.g_main_loop_unref((*C.GMainLoop)(_self_))
	return
}

func MappedFileNew(filename *C.gchar, writable C.gboolean) (_return_ *C.GMappedFile, _error_ unsafe.Pointer) {
	_return_ = C._g_mapped_file_new(filename, writable, _error_)
	return
}

func MappedFileNewFromFd(fd C.gint, writable C.gboolean) (_return_ *C.GMappedFile, _error_ unsafe.Pointer) {
	_return_ = C._g_mapped_file_new_from_fd(fd, writable, _error_)
	return
}

func (_self_ *MappedFile) GetBytes() (_return_ *C.GBytes) {
	_return_ = C.g_mapped_file_get_bytes((*C.GMappedFile)(_self_))
	return
}

func (_self_ *MappedFile) GetContents() (_return_ *C.gchar) {
	_return_ = C.g_mapped_file_get_contents((*C.GMappedFile)(_self_))
	return
}

func (_self_ *MappedFile) GetLength() (_return_ C.gsize) {
	_return_ = C.g_mapped_file_get_length((*C.GMappedFile)(_self_))
	return
}

func (_self_ *MappedFile) Ref() (_return_ *C.GMappedFile) {
	_return_ = C.g_mapped_file_ref((*C.GMappedFile)(_self_))
	return
}

func (_self_ *MappedFile) Unref() () {
	C.g_mapped_file_unref((*C.GMappedFile)(_self_))
	return
}

func MarkupParseContextNew(parser *C.GMarkupParser, flags C.GMarkupParseFlags, user_data C.gpointer, user_data_dnotify C.GDestroyNotify) (_return_ *C.GMarkupParseContext) {
	_return_ = C._g_markup_parse_context_new(parser, flags, user_data, user_data_dnotify)
	return
}

func (_self_ *MarkupParseContext) EndParse() (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_markup_parse_context_end_parse((*C.GMarkupParseContext)(_self_), _error_)
	return
}

func (_self_ *MarkupParseContext) Free() () {
	C.g_markup_parse_context_free((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) GetElement() (_return_ *C.gchar) {
	_return_ = C._g_markup_parse_context_get_element((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) GetElementStack() (_return_ *C.GSList) {
	_return_ = C._g_markup_parse_context_get_element_stack((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) GetPosition(line_number *C.gint, char_number *C.gint) () {
	C.g_markup_parse_context_get_position((*C.GMarkupParseContext)(_self_), line_number, char_number)
	return
}

func (_self_ *MarkupParseContext) GetUserData() (_return_ C.gpointer) {
	_return_ = C.g_markup_parse_context_get_user_data((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) Parse(text *C.gchar, text_len C.gssize) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_markup_parse_context_parse((*C.GMarkupParseContext)(_self_), text, text_len, _error_)
	return
}

func (_self_ *MarkupParseContext) Pop() (_return_ C.gpointer) {
	_return_ = C.g_markup_parse_context_pop((*C.GMarkupParseContext)(_self_))
	return
}

func (_self_ *MarkupParseContext) Push(parser *C.GMarkupParser, user_data C.gpointer) () {
	C._g_markup_parse_context_push((*C.GMarkupParseContext)(_self_), parser, user_data)
	return
}

func (_self_ *MatchInfo) ExpandReferences(string_to_expand *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_match_info_expand_references((*C.GMatchInfo)(_self_), string_to_expand, _error_)
	return
}

func (_self_ *MatchInfo) Fetch(match_num C.gint) (_return_ *C.gchar) {
	_return_ = C._g_match_info_fetch((*C.GMatchInfo)(_self_), match_num)
	return
}

func (_self_ *MatchInfo) FetchAll() (_return_ unsafe.Pointer) {
	_return_ = C._g_match_info_fetch_all((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) FetchNamed(name *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_match_info_fetch_named((*C.GMatchInfo)(_self_), name)
	return
}

func (_self_ *MatchInfo) FetchNamedPos(name *C.gchar) (_return_ C.gboolean, start_pos *C.gint, end_pos *C.gint) {
	_return_ = C._g_match_info_fetch_named_pos((*C.GMatchInfo)(_self_), name, start_pos, end_pos)
	return
}

func (_self_ *MatchInfo) FetchPos(match_num C.gint) (_return_ C.gboolean, start_pos *C.gint, end_pos *C.gint) {
	_return_ = C._g_match_info_fetch_pos((*C.GMatchInfo)(_self_), match_num, start_pos, end_pos)
	return
}

func (_self_ *MatchInfo) Free() () {
	C.g_match_info_free((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) GetMatchCount() (_return_ C.gint) {
	_return_ = C._g_match_info_get_match_count((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) GetRegex() (_return_ *C.GRegex) {
	_return_ = C._g_match_info_get_regex((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) GetString() (_return_ *C.gchar) {
	_return_ = C._g_match_info_get_string((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) IsPartialMatch() (_return_ C.gboolean) {
	_return_ = C._g_match_info_is_partial_match((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) Matches() (_return_ C.gboolean) {
	_return_ = C._g_match_info_matches((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) Next() (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_match_info_next((*C.GMatchInfo)(_self_), _error_)
	return
}

func (_self_ *MatchInfo) Ref() (_return_ *C.GMatchInfo) {
	_return_ = C.g_match_info_ref((*C.GMatchInfo)(_self_))
	return
}

func (_self_ *MatchInfo) Unref() () {
	C.g_match_info_unref((*C.GMatchInfo)(_self_))
	return
}

func NodeNew(data C.gpointer) (_return_ *C.GNode) {
	_return_ = C.g_node_new(data)
	return
}

func (_self_ *Node) ChildIndex(data C.gpointer) (_return_ C.gint) {
	_return_ = C.g_node_child_index((*C.GNode)(_self_), data)
	return
}

func (_self_ *Node) ChildPosition(child *C.GNode) (_return_ C.gint) {
	_return_ = C.g_node_child_position((*C.GNode)(_self_), child)
	return
}

func (_self_ *Node) ChildrenForeach(flags C.GTraverseFlags, func_ C.GNodeForeachFunc, data C.gpointer) () {
	C.g_node_children_foreach((*C.GNode)(_self_), flags, func_, data)
	return
}

func (_self_ *Node) Copy() (_return_ *C.GNode) {
	_return_ = C.g_node_copy((*C.GNode)(_self_))
	return
}

func (_self_ *Node) CopyDeep(copy_func C.GCopyFunc, data C.gpointer) (_return_ *C.GNode) {
	_return_ = C.g_node_copy_deep((*C.GNode)(_self_), copy_func, data)
	return
}

func (_self_ *Node) Depth() (_return_ C.guint) {
	_return_ = C.g_node_depth((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Destroy() () {
	C.g_node_destroy((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Find(order C.GTraverseType, flags C.GTraverseFlags, data C.gpointer) (_return_ *C.GNode) {
	_return_ = C.g_node_find((*C.GNode)(_self_), order, flags, data)
	return
}

func (_self_ *Node) FindChild(flags C.GTraverseFlags, data C.gpointer) (_return_ *C.GNode) {
	_return_ = C.g_node_find_child((*C.GNode)(_self_), flags, data)
	return
}

func (_self_ *Node) FirstSibling() (_return_ *C.GNode) {
	_return_ = C.g_node_first_sibling((*C.GNode)(_self_))
	return
}

func (_self_ *Node) GetRoot() (_return_ *C.GNode) {
	_return_ = C.g_node_get_root((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Insert(position C.gint, node *C.GNode) (_return_ *C.GNode) {
	_return_ = C.g_node_insert((*C.GNode)(_self_), position, node)
	return
}

func (_self_ *Node) InsertAfter(sibling *C.GNode, node *C.GNode) (_return_ *C.GNode) {
	_return_ = C.g_node_insert_after((*C.GNode)(_self_), sibling, node)
	return
}

func (_self_ *Node) InsertBefore(sibling *C.GNode, node *C.GNode) (_return_ *C.GNode) {
	_return_ = C.g_node_insert_before((*C.GNode)(_self_), sibling, node)
	return
}

func (_self_ *Node) IsAncestor(descendant *C.GNode) (_return_ C.gboolean) {
	_return_ = C.g_node_is_ancestor((*C.GNode)(_self_), descendant)
	return
}

func (_self_ *Node) LastChild() (_return_ *C.GNode) {
	_return_ = C.g_node_last_child((*C.GNode)(_self_))
	return
}

func (_self_ *Node) LastSibling() (_return_ *C.GNode) {
	_return_ = C.g_node_last_sibling((*C.GNode)(_self_))
	return
}

func (_self_ *Node) MaxHeight() (_return_ C.guint) {
	_return_ = C.g_node_max_height((*C.GNode)(_self_))
	return
}

func (_self_ *Node) NChildren() (_return_ C.guint) {
	_return_ = C.g_node_n_children((*C.GNode)(_self_))
	return
}

func (_self_ *Node) NNodes(flags C.GTraverseFlags) (_return_ C.guint) {
	_return_ = C.g_node_n_nodes((*C.GNode)(_self_), flags)
	return
}

func (_self_ *Node) NthChild(n C.guint) (_return_ *C.GNode) {
	_return_ = C.g_node_nth_child((*C.GNode)(_self_), n)
	return
}

func (_self_ *Node) Prepend(node *C.GNode) (_return_ *C.GNode) {
	_return_ = C.g_node_prepend((*C.GNode)(_self_), node)
	return
}

func (_self_ *Node) ReverseChildren() () {
	C.g_node_reverse_children((*C.GNode)(_self_))
	return
}

func (_self_ *Node) Traverse(order C.GTraverseType, flags C.GTraverseFlags, max_depth C.gint, func_ C.GNodeTraverseFunc, data C.gpointer) () {
	C.g_node_traverse((*C.GNode)(_self_), order, flags, max_depth, func_, data)
	return
}

func (_self_ *Node) Unlink() () {
	C.g_node_unlink((*C.GNode)(_self_))
	return
}

func (_self_ *Once) Impl(func_ C.GThreadFunc, arg C.gpointer) (_return_ C.gpointer) {
	_return_ = C.g_once_impl((*C.GOnce)(_self_), func_, arg)
	return
}

func OptionContextNew(parameter_string *C.gchar) (_return_ *C.GOptionContext) {
	_return_ = C._g_option_context_new(parameter_string)
	return
}

func (_self_ *OptionContext) AddGroup(group *C.GOptionGroup) () {
	C.g_option_context_add_group((*C.GOptionContext)(_self_), group)
	return
}

func (_self_ *OptionContext) AddMainEntries(entries *C.GOptionEntry, translation_domain *C.gchar) () {
	C._g_option_context_add_main_entries((*C.GOptionContext)(_self_), entries, translation_domain)
	return
}

func (_self_ *OptionContext) Free() () {
	C.g_option_context_free((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetDescription() (_return_ *C.gchar) {
	_return_ = C._g_option_context_get_description((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetHelp(main_help C.gboolean, group *C.GOptionGroup) (_return_ *C.gchar) {
	_return_ = C.g_option_context_get_help((*C.GOptionContext)(_self_), main_help, group)
	return
}

func (_self_ *OptionContext) GetHelpEnabled() (_return_ C.gboolean) {
	_return_ = C.g_option_context_get_help_enabled((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetIgnoreUnknownOptions() (_return_ C.gboolean) {
	_return_ = C.g_option_context_get_ignore_unknown_options((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetMainGroup() (_return_ *C.GOptionGroup) {
	_return_ = C.g_option_context_get_main_group((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) GetSummary() (_return_ *C.gchar) {
	_return_ = C._g_option_context_get_summary((*C.GOptionContext)(_self_))
	return
}

func (_self_ *OptionContext) SetDescription(description *C.gchar) () {
	C._g_option_context_set_description((*C.GOptionContext)(_self_), description)
	return
}

func (_self_ *OptionContext) SetHelpEnabled(help_enabled C.gboolean) () {
	C.g_option_context_set_help_enabled((*C.GOptionContext)(_self_), help_enabled)
	return
}

func (_self_ *OptionContext) SetIgnoreUnknownOptions(ignore_unknown C.gboolean) () {
	C.g_option_context_set_ignore_unknown_options((*C.GOptionContext)(_self_), ignore_unknown)
	return
}

func (_self_ *OptionContext) SetMainGroup(group *C.GOptionGroup) () {
	C.g_option_context_set_main_group((*C.GOptionContext)(_self_), group)
	return
}

func (_self_ *OptionContext) SetSummary(summary *C.gchar) () {
	C._g_option_context_set_summary((*C.GOptionContext)(_self_), summary)
	return
}

func (_self_ *OptionContext) SetTranslateFunc(func_ C.GTranslateFunc, data C.gpointer, destroy_notify C.GDestroyNotify) () {
	C.g_option_context_set_translate_func((*C.GOptionContext)(_self_), func_, data, destroy_notify)
	return
}

func (_self_ *OptionContext) SetTranslationDomain(domain *C.gchar) () {
	C._g_option_context_set_translation_domain((*C.GOptionContext)(_self_), domain)
	return
}

func OptionGroupNew(name *C.gchar, description *C.gchar, help_description *C.gchar, user_data C.gpointer, destroy C.GDestroyNotify) (_return_ *C.GOptionGroup) {
	_return_ = C._g_option_group_new(name, description, help_description, user_data, destroy)
	return
}

func (_self_ *OptionGroup) AddEntries(entries *C.GOptionEntry) () {
	C._g_option_group_add_entries((*C.GOptionGroup)(_self_), entries)
	return
}

func (_self_ *OptionGroup) Free() () {
	C.g_option_group_free((*C.GOptionGroup)(_self_))
	return
}

func (_self_ *OptionGroup) SetErrorHook(error_func C.GOptionErrorFunc) () {
	C.g_option_group_set_error_hook((*C.GOptionGroup)(_self_), error_func)
	return
}

func (_self_ *OptionGroup) SetParseHooks(pre_parse_func C.GOptionParseFunc, post_parse_func C.GOptionParseFunc) () {
	C.g_option_group_set_parse_hooks((*C.GOptionGroup)(_self_), pre_parse_func, post_parse_func)
	return
}

func (_self_ *OptionGroup) SetTranslateFunc(func_ C.GTranslateFunc, data C.gpointer, destroy_notify C.GDestroyNotify) () {
	C.g_option_group_set_translate_func((*C.GOptionGroup)(_self_), func_, data, destroy_notify)
	return
}

func (_self_ *OptionGroup) SetTranslationDomain(domain *C.gchar) () {
	C._g_option_group_set_translation_domain((*C.GOptionGroup)(_self_), domain)
	return
}

func PatternSpecNew(pattern *C.gchar) (_return_ *C.GPatternSpec) {
	_return_ = C._g_pattern_spec_new(pattern)
	return
}

func (_self_ *PatternSpec) Equal(pspec2 *C.GPatternSpec) (_return_ C.gboolean) {
	_return_ = C.g_pattern_spec_equal((*C.GPatternSpec)(_self_), pspec2)
	return
}

func (_self_ *PatternSpec) Free() () {
	C.g_pattern_spec_free((*C.GPatternSpec)(_self_))
	return
}

func (_self_ *Private) Get() (_return_ C.gpointer) {
	_return_ = C.g_private_get((*C.GPrivate)(_self_))
	return
}

func (_self_ *Private) Replace(value C.gpointer) () {
	C.g_private_replace((*C.GPrivate)(_self_), value)
	return
}

func (_self_ *Private) Set(value C.gpointer) () {
	C.g_private_set((*C.GPrivate)(_self_), value)
	return
}

func PtrArrayAdd(array *C.GPtrArray, data C.gpointer) () {
	C.g_ptr_array_add(array, data)
	return
}

func PtrArrayForeach(array *C.GPtrArray, func_ C.GFunc, user_data C.gpointer) () {
	C.g_ptr_array_foreach(array, func_, user_data)
	return
}

func PtrArrayFree(array *C.GPtrArray, free_seg C.gboolean) (_return_ *C.gpointer) {
	_return_ = C.g_ptr_array_free(array, free_seg)
	return
}

func PtrArrayNew() (_return_ *C.GPtrArray) {
	_return_ = C.g_ptr_array_new()
	return
}

func PtrArrayNewFull(reserved_size C.guint, element_free_func C.GDestroyNotify) (_return_ *C.GPtrArray) {
	_return_ = C.g_ptr_array_new_full(reserved_size, element_free_func)
	return
}

func PtrArrayNewWithFreeFunc(element_free_func C.GDestroyNotify) (_return_ *C.GPtrArray) {
	_return_ = C.g_ptr_array_new_with_free_func(element_free_func)
	return
}

func PtrArrayRef(array *C.GPtrArray) (_return_ *C.GPtrArray) {
	_return_ = C.g_ptr_array_ref(array)
	return
}

func PtrArrayRemove(array *C.GPtrArray, data C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_ptr_array_remove(array, data)
	return
}

func PtrArrayRemoveFast(array *C.GPtrArray, data C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_ptr_array_remove_fast(array, data)
	return
}

func PtrArrayRemoveIndex(array *C.GPtrArray, index_ C.guint) (_return_ C.gpointer) {
	_return_ = C.g_ptr_array_remove_index(array, index_)
	return
}

func PtrArrayRemoveIndexFast(array *C.GPtrArray, index_ C.guint) (_return_ C.gpointer) {
	_return_ = C.g_ptr_array_remove_index_fast(array, index_)
	return
}

func PtrArrayRemoveRange(array *C.GPtrArray, index_ C.guint, length C.guint) () {
	C.g_ptr_array_remove_range(array, index_, length)
	return
}

func PtrArraySetFreeFunc(array *C.GPtrArray, element_free_func C.GDestroyNotify) () {
	C.g_ptr_array_set_free_func(array, element_free_func)
	return
}

func PtrArraySetSize(array *C.GPtrArray, length C.gint) () {
	C.g_ptr_array_set_size(array, length)
	return
}

func PtrArraySizedNew(reserved_size C.guint) (_return_ *C.GPtrArray) {
	_return_ = C.g_ptr_array_sized_new(reserved_size)
	return
}

func PtrArraySort(array *C.GPtrArray, compare_func C.GCompareFunc) () {
	C.g_ptr_array_sort(array, compare_func)
	return
}

func PtrArraySortWithData(array *C.GPtrArray, compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_ptr_array_sort_with_data(array, compare_func, user_data)
	return
}

func PtrArrayUnref(array *C.GPtrArray) () {
	C.g_ptr_array_unref(array)
	return
}

func QueueNew() (_return_ *C.GQueue) {
	_return_ = C.g_queue_new()
	return
}

func (_self_ *Queue) Clear() () {
	C.g_queue_clear((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) Copy() (_return_ *C.GQueue) {
	_return_ = C.g_queue_copy((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) DeleteLink(link_ *C.GList) () {
	C.g_queue_delete_link((*C.GQueue)(_self_), link_)
	return
}

func (_self_ *Queue) Find(data C.gpointer) (_return_ *C.GList) {
	_return_ = C._g_queue_find((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) FindCustom(data C.gpointer, func_ C.GCompareFunc) (_return_ *C.GList) {
	_return_ = C._g_queue_find_custom((*C.GQueue)(_self_), data, func_)
	return
}

func (_self_ *Queue) Foreach(func_ C.GFunc, user_data C.gpointer) () {
	C.g_queue_foreach((*C.GQueue)(_self_), func_, user_data)
	return
}

func (_self_ *Queue) Free() () {
	C.g_queue_free((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) FreeFull(free_func C.GDestroyNotify) () {
	C.g_queue_free_full((*C.GQueue)(_self_), free_func)
	return
}

func (_self_ *Queue) GetLength() (_return_ C.guint) {
	_return_ = C.g_queue_get_length((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) Index(data C.gpointer) (_return_ C.gint) {
	_return_ = C._g_queue_index((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) Init() () {
	C.g_queue_init((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) InsertAfter(sibling *C.GList, data C.gpointer) () {
	C.g_queue_insert_after((*C.GQueue)(_self_), sibling, data)
	return
}

func (_self_ *Queue) InsertBefore(sibling *C.GList, data C.gpointer) () {
	C.g_queue_insert_before((*C.GQueue)(_self_), sibling, data)
	return
}

func (_self_ *Queue) InsertSorted(data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_queue_insert_sorted((*C.GQueue)(_self_), data, func_, user_data)
	return
}

func (_self_ *Queue) IsEmpty() (_return_ C.gboolean) {
	_return_ = C.g_queue_is_empty((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) LinkIndex(link_ *C.GList) (_return_ C.gint) {
	_return_ = C.g_queue_link_index((*C.GQueue)(_self_), link_)
	return
}

func (_self_ *Queue) PeekHead() (_return_ C.gpointer) {
	_return_ = C.g_queue_peek_head((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PeekHeadLink() (_return_ *C.GList) {
	_return_ = C.g_queue_peek_head_link((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PeekNth(n C.guint) (_return_ C.gpointer) {
	_return_ = C.g_queue_peek_nth((*C.GQueue)(_self_), n)
	return
}

func (_self_ *Queue) PeekNthLink(n C.guint) (_return_ *C.GList) {
	_return_ = C.g_queue_peek_nth_link((*C.GQueue)(_self_), n)
	return
}

func (_self_ *Queue) PeekTail() (_return_ C.gpointer) {
	_return_ = C.g_queue_peek_tail((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PeekTailLink() (_return_ *C.GList) {
	_return_ = C.g_queue_peek_tail_link((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopHead() (_return_ C.gpointer) {
	_return_ = C.g_queue_pop_head((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopHeadLink() (_return_ *C.GList) {
	_return_ = C.g_queue_pop_head_link((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopNth(n C.guint) (_return_ C.gpointer) {
	_return_ = C.g_queue_pop_nth((*C.GQueue)(_self_), n)
	return
}

func (_self_ *Queue) PopNthLink(n C.guint) (_return_ *C.GList) {
	_return_ = C.g_queue_pop_nth_link((*C.GQueue)(_self_), n)
	return
}

func (_self_ *Queue) PopTail() (_return_ C.gpointer) {
	_return_ = C.g_queue_pop_tail((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PopTailLink() (_return_ *C.GList) {
	_return_ = C.g_queue_pop_tail_link((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) PushHead(data C.gpointer) () {
	C.g_queue_push_head((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) PushHeadLink(link_ *C.GList) () {
	C.g_queue_push_head_link((*C.GQueue)(_self_), link_)
	return
}

func (_self_ *Queue) PushNth(data C.gpointer, n C.gint) () {
	C.g_queue_push_nth((*C.GQueue)(_self_), data, n)
	return
}

func (_self_ *Queue) PushNthLink(n C.gint, link_ *C.GList) () {
	C.g_queue_push_nth_link((*C.GQueue)(_self_), n, link_)
	return
}

func (_self_ *Queue) PushTail(data C.gpointer) () {
	C.g_queue_push_tail((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) PushTailLink(link_ *C.GList) () {
	C.g_queue_push_tail_link((*C.GQueue)(_self_), link_)
	return
}

func (_self_ *Queue) Remove(data C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_queue_remove((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) RemoveAll(data C.gpointer) (_return_ C.guint) {
	_return_ = C._g_queue_remove_all((*C.GQueue)(_self_), data)
	return
}

func (_self_ *Queue) Reverse() () {
	C.g_queue_reverse((*C.GQueue)(_self_))
	return
}

func (_self_ *Queue) Sort(compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_queue_sort((*C.GQueue)(_self_), compare_func, user_data)
	return
}

func (_self_ *Queue) Unlink(link_ *C.GList) () {
	C.g_queue_unlink((*C.GQueue)(_self_), link_)
	return
}

func (_self_ *RWLock) Clear() () {
	C.g_rw_lock_clear((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) Init() () {
	C.g_rw_lock_init((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) ReaderLock() () {
	C.g_rw_lock_reader_lock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) ReaderTrylock() (_return_ C.gboolean) {
	_return_ = C.g_rw_lock_reader_trylock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) ReaderUnlock() () {
	C.g_rw_lock_reader_unlock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) WriterLock() () {
	C.g_rw_lock_writer_lock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) WriterTrylock() (_return_ C.gboolean) {
	_return_ = C.g_rw_lock_writer_trylock((*C.GRWLock)(_self_))
	return
}

func (_self_ *RWLock) WriterUnlock() () {
	C.g_rw_lock_writer_unlock((*C.GRWLock)(_self_))
	return
}

func RandNew() (_return_ *C.GRand) {
	_return_ = C.g_rand_new()
	return
}

func RandNewWithSeed(seed C.guint32) (_return_ *C.GRand) {
	_return_ = C.g_rand_new_with_seed(seed)
	return
}

func RandNewWithSeedArray(seed *C.guint32, seed_length C.guint) (_return_ *C.GRand) {
	_return_ = C._g_rand_new_with_seed_array(seed, seed_length)
	return
}

func (_self_ *Rand) Copy() (_return_ *C.GRand) {
	_return_ = C.g_rand_copy((*C.GRand)(_self_))
	return
}

func (_self_ *Rand) Double() (_return_ C.gdouble) {
	_return_ = C.g_rand_double((*C.GRand)(_self_))
	return
}

func (_self_ *Rand) DoubleRange(begin C.gdouble, end C.gdouble) (_return_ C.gdouble) {
	_return_ = C.g_rand_double_range((*C.GRand)(_self_), begin, end)
	return
}

func (_self_ *Rand) Free() () {
	C.g_rand_free((*C.GRand)(_self_))
	return
}

func (_self_ *Rand) Int() (_return_ C.guint32) {
	_return_ = C.g_rand_int((*C.GRand)(_self_))
	return
}

func (_self_ *Rand) IntRange(begin C.gint32, end C.gint32) (_return_ C.gint32) {
	_return_ = C.g_rand_int_range((*C.GRand)(_self_), begin, end)
	return
}

func (_self_ *Rand) SetSeed(seed C.guint32) () {
	C.g_rand_set_seed((*C.GRand)(_self_), seed)
	return
}

func (_self_ *Rand) SetSeedArray(seed *C.guint32, seed_length C.guint) () {
	C._g_rand_set_seed_array((*C.GRand)(_self_), seed, seed_length)
	return
}

func (_self_ *RecMutex) Clear() () {
	C.g_rec_mutex_clear((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Init() () {
	C.g_rec_mutex_init((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Lock() () {
	C.g_rec_mutex_lock((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Trylock() (_return_ C.gboolean) {
	_return_ = C.g_rec_mutex_trylock((*C.GRecMutex)(_self_))
	return
}

func (_self_ *RecMutex) Unlock() () {
	C.g_rec_mutex_unlock((*C.GRecMutex)(_self_))
	return
}

func RegexNew(pattern *C.gchar, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ *C.GRegex, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_new(pattern, compile_options, match_options, _error_)
	return
}

func RegexCheckReplacement(replacement *C.gchar) (_return_ C.gboolean, has_references *C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_check_replacement(replacement, has_references, _error_)
	return
}

func RegexErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_regex_error_quark()
	return
}

func RegexEscapeNul(string_ *C.gchar, length C.gint) (_return_ *C.gchar) {
	_return_ = C._g_regex_escape_nul(string_, length)
	return
}

func RegexEscapeString(string_ *C.gchar, length C.gint) (_return_ *C.gchar) {
	_return_ = C._g_regex_escape_string(string_, length)
	return
}

func RegexMatchSimple(pattern *C.gchar, string_ *C.gchar, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ C.gboolean) {
	_return_ = C._g_regex_match_simple(pattern, string_, compile_options, match_options)
	return
}

func RegexSplitSimple(pattern *C.gchar, string_ *C.gchar, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) (_return_ unsafe.Pointer) {
	_return_ = C._g_regex_split_simple(pattern, string_, compile_options, match_options)
	return
}

func (_self_ *Regex) GetCaptureCount() (_return_ C.gint) {
	_return_ = C._g_regex_get_capture_count((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetCompileFlags() (_return_ C.GRegexCompileFlags) {
	_return_ = C._g_regex_get_compile_flags((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetHasCrOrLf() (_return_ C.gboolean) {
	_return_ = C._g_regex_get_has_cr_or_lf((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetMatchFlags() (_return_ C.GRegexMatchFlags) {
	_return_ = C._g_regex_get_match_flags((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetMaxBackref() (_return_ C.gint) {
	_return_ = C._g_regex_get_max_backref((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetPattern() (_return_ *C.gchar) {
	_return_ = C._g_regex_get_pattern((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) GetStringNumber(name *C.gchar) (_return_ C.gint) {
	_return_ = C._g_regex_get_string_number((*C.GRegex)(_self_), name)
	return
}

func (_self_ *Regex) Match(string_ *C.gchar, match_options C.GRegexMatchFlags) (_return_ C.gboolean, match_info unsafe.Pointer) {
	_return_ = C._g_regex_match((*C.GRegex)(_self_), string_, match_options, match_info)
	return
}

func (_self_ *Regex) MatchAll(string_ *C.gchar, match_options C.GRegexMatchFlags) (_return_ C.gboolean, match_info unsafe.Pointer) {
	_return_ = C._g_regex_match_all((*C.GRegex)(_self_), string_, match_options, match_info)
	return
}

func (_self_ *Regex) MatchAllFull(string_ *C.gchar, string_len C.gssize, start_position C.gint, match_options C.GRegexMatchFlags) (_return_ C.gboolean, match_info unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_match_all_full((*C.GRegex)(_self_), string_, string_len, start_position, match_options, match_info, _error_)
	return
}

func (_self_ *Regex) MatchFull(string_ *C.gchar, string_len C.gssize, start_position C.gint, match_options C.GRegexMatchFlags) (_return_ C.gboolean, match_info unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_match_full((*C.GRegex)(_self_), string_, string_len, start_position, match_options, match_info, _error_)
	return
}

func (_self_ *Regex) Ref() (_return_ *C.GRegex) {
	_return_ = C.g_regex_ref((*C.GRegex)(_self_))
	return
}

func (_self_ *Regex) Replace(string_ *C.gchar, string_len C.gssize, start_position C.gint, replacement *C.gchar, match_options C.GRegexMatchFlags) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_replace((*C.GRegex)(_self_), string_, string_len, start_position, replacement, match_options, _error_)
	return
}

func (_self_ *Regex) ReplaceEval(string_ *C.gchar, string_len C.gssize, start_position C.gint, match_options C.GRegexMatchFlags, eval C.GRegexEvalCallback, user_data C.gpointer) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_replace_eval((*C.GRegex)(_self_), string_, string_len, start_position, match_options, eval, user_data, _error_)
	return
}

func (_self_ *Regex) ReplaceLiteral(string_ *C.gchar, string_len C.gssize, start_position C.gint, replacement *C.gchar, match_options C.GRegexMatchFlags) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_replace_literal((*C.GRegex)(_self_), string_, string_len, start_position, replacement, match_options, _error_)
	return
}

func (_self_ *Regex) Split(string_ *C.gchar, match_options C.GRegexMatchFlags) (_return_ unsafe.Pointer) {
	_return_ = C._g_regex_split((*C.GRegex)(_self_), string_, match_options)
	return
}

func (_self_ *Regex) SplitFull(string_ *C.gchar, string_len C.gssize, start_position C.gint, match_options C.GRegexMatchFlags, max_tokens C.gint) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_regex_split_full((*C.GRegex)(_self_), string_, string_len, start_position, match_options, max_tokens, _error_)
	return
}

func (_self_ *Regex) Unref() () {
	C.g_regex_unref((*C.GRegex)(_self_))
	return
}

func SListAlloc() (_return_ *C.GSList) {
	_return_ = C.g_slist_alloc()
	return
}

func SListAppend(list *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_append(list, data)
	return
}

func SListConcat(list1 *C.GSList, list2 *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_concat(list1, list2)
	return
}

func SListCopy(list *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_copy(list)
	return
}

func SListCopyDeep(list *C.GSList, func_ C.GCopyFunc, user_data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_copy_deep(list, func_, user_data)
	return
}

func SListDeleteLink(list *C.GSList, link_ *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_delete_link(list, link_)
	return
}

func SListFind(list *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C._g_slist_find(list, data)
	return
}

func SListFindCustom(list *C.GSList, data C.gpointer, func_ C.GCompareFunc) (_return_ *C.GSList) {
	_return_ = C._g_slist_find_custom(list, data, func_)
	return
}

func SListForeach(list *C.GSList, func_ C.GFunc, user_data C.gpointer) () {
	C.g_slist_foreach(list, func_, user_data)
	return
}

func SListFree(list *C.GSList) () {
	C.g_slist_free(list)
	return
}

func SListFree1(list *C.GSList) () {
	C.g_slist_free_1(list)
	return
}

func SListFreeFull(list *C.GSList, free_func C.GDestroyNotify) () {
	C.g_slist_free_full(list, free_func)
	return
}

func SListIndex(list *C.GSList, data C.gpointer) (_return_ C.gint) {
	_return_ = C._g_slist_index(list, data)
	return
}

func SListInsert(list *C.GSList, data C.gpointer, position C.gint) (_return_ *C.GSList) {
	_return_ = C.g_slist_insert(list, data, position)
	return
}

func SListInsertBefore(slist *C.GSList, sibling *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_insert_before(slist, sibling, data)
	return
}

func SListInsertSorted(list *C.GSList, data C.gpointer, func_ C.GCompareFunc) (_return_ *C.GSList) {
	_return_ = C.g_slist_insert_sorted(list, data, func_)
	return
}

func SListInsertSortedWithData(list *C.GSList, data C.gpointer, func_ C.GCompareDataFunc, user_data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_insert_sorted_with_data(list, data, func_, user_data)
	return
}

func SListLast(list *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_last(list)
	return
}

func SListLength(list *C.GSList) (_return_ C.guint) {
	_return_ = C.g_slist_length(list)
	return
}

func SListNth(list *C.GSList, n C.guint) (_return_ *C.GSList) {
	_return_ = C.g_slist_nth(list, n)
	return
}

func SListNthData(list *C.GSList, n C.guint) (_return_ C.gpointer) {
	_return_ = C.g_slist_nth_data(list, n)
	return
}

func SListPosition(list *C.GSList, llink *C.GSList) (_return_ C.gint) {
	_return_ = C.g_slist_position(list, llink)
	return
}

func SListPrepend(list *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_prepend(list, data)
	return
}

func SListRemove(list *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C._g_slist_remove(list, data)
	return
}

func SListRemoveAll(list *C.GSList, data C.gpointer) (_return_ *C.GSList) {
	_return_ = C._g_slist_remove_all(list, data)
	return
}

func SListRemoveLink(list *C.GSList, link_ *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_remove_link(list, link_)
	return
}

func SListReverse(list *C.GSList) (_return_ *C.GSList) {
	_return_ = C.g_slist_reverse(list)
	return
}

func SListSort(list *C.GSList, compare_func C.GCompareFunc) (_return_ *C.GSList) {
	_return_ = C.g_slist_sort(list, compare_func)
	return
}

func SListSortWithData(list *C.GSList, compare_func C.GCompareDataFunc, user_data C.gpointer) (_return_ *C.GSList) {
	_return_ = C.g_slist_sort_with_data(list, compare_func, user_data)
	return
}

func ScannerNew(config_templ *C.GScannerConfig) (_return_ *C.GScanner) {
	_return_ = C._g_scanner_new(config_templ)
	return
}

func (_self_ *Scanner) CurLine() (_return_ C.guint) {
	_return_ = C.g_scanner_cur_line((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) CurPosition() (_return_ C.guint) {
	_return_ = C.g_scanner_cur_position((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) CurToken() (_return_ C.GTokenType) {
	_return_ = C.g_scanner_cur_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) CurValue() (_return_ C.GTokenValue) {
	_return_ = C.g_scanner_cur_value((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) Destroy() () {
	C.g_scanner_destroy((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) Eof() (_return_ C.gboolean) {
	_return_ = C.g_scanner_eof((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) GetNextToken() (_return_ C.GTokenType) {
	_return_ = C.g_scanner_get_next_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) InputFile(input_fd C.gint) () {
	C.g_scanner_input_file((*C.GScanner)(_self_), input_fd)
	return
}

func (_self_ *Scanner) InputText(text *C.gchar, text_len C.guint) () {
	C._g_scanner_input_text((*C.GScanner)(_self_), text, text_len)
	return
}

func (_self_ *Scanner) LookupSymbol(symbol *C.gchar) (_return_ C.gpointer) {
	_return_ = C._g_scanner_lookup_symbol((*C.GScanner)(_self_), symbol)
	return
}

func (_self_ *Scanner) PeekNextToken() (_return_ C.GTokenType) {
	_return_ = C.g_scanner_peek_next_token((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) ScopeAddSymbol(scope_id C.guint, symbol *C.gchar, value C.gpointer) () {
	C._g_scanner_scope_add_symbol((*C.GScanner)(_self_), scope_id, symbol, value)
	return
}

func (_self_ *Scanner) ScopeForeachSymbol(scope_id C.guint, func_ C.GHFunc, user_data C.gpointer) () {
	C.g_scanner_scope_foreach_symbol((*C.GScanner)(_self_), scope_id, func_, user_data)
	return
}

func (_self_ *Scanner) ScopeLookupSymbol(scope_id C.guint, symbol *C.gchar) (_return_ C.gpointer) {
	_return_ = C._g_scanner_scope_lookup_symbol((*C.GScanner)(_self_), scope_id, symbol)
	return
}

func (_self_ *Scanner) ScopeRemoveSymbol(scope_id C.guint, symbol *C.gchar) () {
	C._g_scanner_scope_remove_symbol((*C.GScanner)(_self_), scope_id, symbol)
	return
}

func (_self_ *Scanner) SetScope(scope_id C.guint) (_return_ C.guint) {
	_return_ = C.g_scanner_set_scope((*C.GScanner)(_self_), scope_id)
	return
}

func (_self_ *Scanner) SyncFileOffset() () {
	C.g_scanner_sync_file_offset((*C.GScanner)(_self_))
	return
}

func (_self_ *Scanner) UnexpToken(expected_token C.GTokenType, identifier_spec *C.gchar, symbol_spec *C.gchar, symbol_name *C.gchar, message *C.gchar, is_error C.gint) () {
	C._g_scanner_unexp_token((*C.GScanner)(_self_), expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error)
	return
}

func SequenceForeachRange(begin *C.GSequenceIter, end *C.GSequenceIter, func_ C.GFunc, user_data C.gpointer) () {
	C.g_sequence_foreach_range(begin, end, func_, user_data)
	return
}

func SequenceGet(iter *C.GSequenceIter) (_return_ C.gpointer) {
	_return_ = C.g_sequence_get(iter)
	return
}

func SequenceInsertBefore(iter *C.GSequenceIter, data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_insert_before(iter, data)
	return
}

func SequenceMove(src *C.GSequenceIter, dest *C.GSequenceIter) () {
	C.g_sequence_move(src, dest)
	return
}

func SequenceMoveRange(dest *C.GSequenceIter, begin *C.GSequenceIter, end *C.GSequenceIter) () {
	C.g_sequence_move_range(dest, begin, end)
	return
}

func SequenceNew(data_destroy C.GDestroyNotify) (_return_ *C.GSequence) {
	_return_ = C.g_sequence_new(data_destroy)
	return
}

func SequenceRangeGetMidpoint(begin *C.GSequenceIter, end *C.GSequenceIter) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_range_get_midpoint(begin, end)
	return
}

func SequenceRemove(iter *C.GSequenceIter) () {
	C.g_sequence_remove(iter)
	return
}

func SequenceRemoveRange(begin *C.GSequenceIter, end *C.GSequenceIter) () {
	C.g_sequence_remove_range(begin, end)
	return
}

func SequenceSet(iter *C.GSequenceIter, data C.gpointer) () {
	C.g_sequence_set(iter, data)
	return
}

func SequenceSortChanged(iter *C.GSequenceIter, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) () {
	C.g_sequence_sort_changed(iter, cmp_func, cmp_data)
	return
}

func SequenceSortChangedIter(iter *C.GSequenceIter, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) () {
	C.g_sequence_sort_changed_iter(iter, iter_cmp, cmp_data)
	return
}

func SequenceSwap(a *C.GSequenceIter, b *C.GSequenceIter) () {
	C.g_sequence_swap(a, b)
	return
}

func (_self_ *Sequence) Append(data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_append((*C.GSequence)(_self_), data)
	return
}

func (_self_ *Sequence) Foreach(func_ C.GFunc, user_data C.gpointer) () {
	C.g_sequence_foreach((*C.GSequence)(_self_), func_, user_data)
	return
}

func (_self_ *Sequence) Free() () {
	C.g_sequence_free((*C.GSequence)(_self_))
	return
}

func (_self_ *Sequence) GetBeginIter() (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_get_begin_iter((*C.GSequence)(_self_))
	return
}

func (_self_ *Sequence) GetEndIter() (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_get_end_iter((*C.GSequence)(_self_))
	return
}

func (_self_ *Sequence) GetIterAtPos(pos C.gint) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_get_iter_at_pos((*C.GSequence)(_self_), pos)
	return
}

func (_self_ *Sequence) GetLength() (_return_ C.gint) {
	_return_ = C.g_sequence_get_length((*C.GSequence)(_self_))
	return
}

func (_self_ *Sequence) InsertSorted(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_insert_sorted((*C.GSequence)(_self_), data, cmp_func, cmp_data)
	return
}

func (_self_ *Sequence) InsertSortedIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_insert_sorted_iter((*C.GSequence)(_self_), data, iter_cmp, cmp_data)
	return
}

func (_self_ *Sequence) Lookup(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_lookup((*C.GSequence)(_self_), data, cmp_func, cmp_data)
	return
}

func (_self_ *Sequence) LookupIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_lookup_iter((*C.GSequence)(_self_), data, iter_cmp, cmp_data)
	return
}

func (_self_ *Sequence) Prepend(data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_prepend((*C.GSequence)(_self_), data)
	return
}

func (_self_ *Sequence) Search(data C.gpointer, cmp_func C.GCompareDataFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_search((*C.GSequence)(_self_), data, cmp_func, cmp_data)
	return
}

func (_self_ *Sequence) SearchIter(data C.gpointer, iter_cmp C.GSequenceIterCompareFunc, cmp_data C.gpointer) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_search_iter((*C.GSequence)(_self_), data, iter_cmp, cmp_data)
	return
}

func (_self_ *Sequence) Sort(cmp_func C.GCompareDataFunc, cmp_data C.gpointer) () {
	C.g_sequence_sort((*C.GSequence)(_self_), cmp_func, cmp_data)
	return
}

func (_self_ *Sequence) SortIter(cmp_func C.GSequenceIterCompareFunc, cmp_data C.gpointer) () {
	C.g_sequence_sort_iter((*C.GSequence)(_self_), cmp_func, cmp_data)
	return
}

func (_self_ *SequenceIter) Compare(b *C.GSequenceIter) (_return_ C.gint) {
	_return_ = C.g_sequence_iter_compare((*C.GSequenceIter)(_self_), b)
	return
}

func (_self_ *SequenceIter) GetPosition() (_return_ C.gint) {
	_return_ = C.g_sequence_iter_get_position((*C.GSequenceIter)(_self_))
	return
}

func (_self_ *SequenceIter) GetSequence() (_return_ *C.GSequence) {
	_return_ = C.g_sequence_iter_get_sequence((*C.GSequenceIter)(_self_))
	return
}

func (_self_ *SequenceIter) IsBegin() (_return_ C.gboolean) {
	_return_ = C.g_sequence_iter_is_begin((*C.GSequenceIter)(_self_))
	return
}

func (_self_ *SequenceIter) IsEnd() (_return_ C.gboolean) {
	_return_ = C.g_sequence_iter_is_end((*C.GSequenceIter)(_self_))
	return
}

func (_self_ *SequenceIter) Move(delta C.gint) (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_iter_move((*C.GSequenceIter)(_self_), delta)
	return
}

func (_self_ *SequenceIter) Next() (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_iter_next((*C.GSequenceIter)(_self_))
	return
}

func (_self_ *SequenceIter) Prev() (_return_ *C.GSequenceIter) {
	_return_ = C.g_sequence_iter_prev((*C.GSequenceIter)(_self_))
	return
}

func SourceNew(source_funcs *C.GSourceFuncs, struct_size C.guint) (_return_ *C.GSource) {
	_return_ = C.g_source_new(source_funcs, struct_size)
	return
}

func SourceRemove(tag C.guint) (_return_ C.gboolean) {
	_return_ = C.g_source_remove(tag)
	return
}

func SourceRemoveByFuncsUserData(funcs *C.GSourceFuncs, user_data C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_source_remove_by_funcs_user_data(funcs, user_data)
	return
}

func SourceRemoveByUserData(user_data C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_source_remove_by_user_data(user_data)
	return
}

func SourceSetNameById(tag C.guint, name *C.char) () {
	C._g_source_set_name_by_id(tag, name)
	return
}

func (_self_ *Source) AddChildSource(child_source *C.GSource) () {
	C.g_source_add_child_source((*C.GSource)(_self_), child_source)
	return
}

func (_self_ *Source) AddPoll(fd *C.GPollFD) () {
	C.g_source_add_poll((*C.GSource)(_self_), fd)
	return
}

func (_self_ *Source) Attach(context *C.GMainContext) (_return_ C.guint) {
	_return_ = C.g_source_attach((*C.GSource)(_self_), context)
	return
}

func (_self_ *Source) Destroy() () {
	C.g_source_destroy((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetCanRecurse() (_return_ C.gboolean) {
	_return_ = C.g_source_get_can_recurse((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetContext() (_return_ *C.GMainContext) {
	_return_ = C.g_source_get_context((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetId() (_return_ C.guint) {
	_return_ = C.g_source_get_id((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetName() (_return_ *C.char) {
	_return_ = C._g_source_get_name((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetPriority() (_return_ C.gint) {
	_return_ = C.g_source_get_priority((*C.GSource)(_self_))
	return
}

func (_self_ *Source) GetTime() (_return_ C.gint64) {
	_return_ = C.g_source_get_time((*C.GSource)(_self_))
	return
}

func (_self_ *Source) IsDestroyed() (_return_ C.gboolean) {
	_return_ = C.g_source_is_destroyed((*C.GSource)(_self_))
	return
}

func (_self_ *Source) Ref() (_return_ *C.GSource) {
	_return_ = C.g_source_ref((*C.GSource)(_self_))
	return
}

func (_self_ *Source) RemoveChildSource(child_source *C.GSource) () {
	C.g_source_remove_child_source((*C.GSource)(_self_), child_source)
	return
}

func (_self_ *Source) RemovePoll(fd *C.GPollFD) () {
	C.g_source_remove_poll((*C.GSource)(_self_), fd)
	return
}

func (_self_ *Source) SetCallback(func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.g_source_set_callback((*C.GSource)(_self_), func_, data, notify)
	return
}

func (_self_ *Source) SetCallbackIndirect(callback_data C.gpointer, callback_funcs *C.GSourceCallbackFuncs) () {
	C.g_source_set_callback_indirect((*C.GSource)(_self_), callback_data, callback_funcs)
	return
}

func (_self_ *Source) SetCanRecurse(can_recurse C.gboolean) () {
	C.g_source_set_can_recurse((*C.GSource)(_self_), can_recurse)
	return
}

func (_self_ *Source) SetFuncs(funcs *C.GSourceFuncs) () {
	C.g_source_set_funcs((*C.GSource)(_self_), funcs)
	return
}

func (_self_ *Source) SetName(name *C.char) () {
	C._g_source_set_name((*C.GSource)(_self_), name)
	return
}

func (_self_ *Source) SetPriority(priority C.gint) () {
	C.g_source_set_priority((*C.GSource)(_self_), priority)
	return
}

func (_self_ *Source) Unref() () {
	C.g_source_unref((*C.GSource)(_self_))
	return
}

func (_self_ *String) Append(val *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_append((*C.GString)(_self_), val)
	return
}

func (_self_ *String) AppendC(c C.gchar) (_return_ *C.GString) {
	_return_ = C.g_string_append_c((*C.GString)(_self_), c)
	return
}

func (_self_ *String) AppendLen(val *C.gchar, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C._g_string_append_len((*C.GString)(_self_), val, len_)
	return
}

func (_self_ *String) AppendUnichar(wc C.gunichar) (_return_ *C.GString) {
	_return_ = C.g_string_append_unichar((*C.GString)(_self_), wc)
	return
}

func (_self_ *String) AppendUriEscaped(unescaped *C.gchar, reserved_chars_allowed *C.gchar, allow_utf8 C.gboolean) (_return_ *C.GString) {
	_return_ = C._g_string_append_uri_escaped((*C.GString)(_self_), unescaped, reserved_chars_allowed, allow_utf8)
	return
}

func (_self_ *String) AsciiDown() (_return_ *C.GString) {
	_return_ = C.g_string_ascii_down((*C.GString)(_self_))
	return
}

func (_self_ *String) AsciiUp() (_return_ *C.GString) {
	_return_ = C.g_string_ascii_up((*C.GString)(_self_))
	return
}

func (_self_ *String) Assign(rval *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_assign((*C.GString)(_self_), rval)
	return
}

func (_self_ *String) Equal(v2 *C.GString) (_return_ C.gboolean) {
	_return_ = C._g_string_equal((*C.GString)(_self_), v2)
	return
}

func (_self_ *String) Erase(pos C.gssize, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C.g_string_erase((*C.GString)(_self_), pos, len_)
	return
}

func (_self_ *String) Free(free_segment C.gboolean) (_return_ *C.gchar) {
	_return_ = C.g_string_free((*C.GString)(_self_), free_segment)
	return
}

func (_self_ *String) FreeToBytes() (_return_ *C.GBytes) {
	_return_ = C.g_string_free_to_bytes((*C.GString)(_self_))
	return
}

func (_self_ *String) Hash() (_return_ C.guint) {
	_return_ = C._g_string_hash((*C.GString)(_self_))
	return
}

func (_self_ *String) Insert(pos C.gssize, val *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_insert((*C.GString)(_self_), pos, val)
	return
}

func (_self_ *String) InsertC(pos C.gssize, c C.gchar) (_return_ *C.GString) {
	_return_ = C.g_string_insert_c((*C.GString)(_self_), pos, c)
	return
}

func (_self_ *String) InsertLen(pos C.gssize, val *C.gchar, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C._g_string_insert_len((*C.GString)(_self_), pos, val, len_)
	return
}

func (_self_ *String) InsertUnichar(pos C.gssize, wc C.gunichar) (_return_ *C.GString) {
	_return_ = C.g_string_insert_unichar((*C.GString)(_self_), pos, wc)
	return
}

func (_self_ *String) Overwrite(pos C.gsize, val *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_overwrite((*C.GString)(_self_), pos, val)
	return
}

func (_self_ *String) OverwriteLen(pos C.gsize, val *C.gchar, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C._g_string_overwrite_len((*C.GString)(_self_), pos, val, len_)
	return
}

func (_self_ *String) Prepend(val *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_prepend((*C.GString)(_self_), val)
	return
}

func (_self_ *String) PrependC(c C.gchar) (_return_ *C.GString) {
	_return_ = C.g_string_prepend_c((*C.GString)(_self_), c)
	return
}

func (_self_ *String) PrependLen(val *C.gchar, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C._g_string_prepend_len((*C.GString)(_self_), val, len_)
	return
}

func (_self_ *String) PrependUnichar(wc C.gunichar) (_return_ *C.GString) {
	_return_ = C.g_string_prepend_unichar((*C.GString)(_self_), wc)
	return
}

func (_self_ *String) SetSize(len_ C.gsize) (_return_ *C.GString) {
	_return_ = C.g_string_set_size((*C.GString)(_self_), len_)
	return
}

func (_self_ *String) Truncate(len_ C.gsize) (_return_ *C.GString) {
	_return_ = C.g_string_truncate((*C.GString)(_self_), len_)
	return
}

func StringChunkNew(size C.gsize) (_return_ *C.GStringChunk) {
	_return_ = C.g_string_chunk_new(size)
	return
}

func (_self_ *StringChunk) Clear() () {
	C.g_string_chunk_clear((*C.GStringChunk)(_self_))
	return
}

func (_self_ *StringChunk) Free() () {
	C.g_string_chunk_free((*C.GStringChunk)(_self_))
	return
}

func (_self_ *StringChunk) Insert(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_string_chunk_insert((*C.GStringChunk)(_self_), string_)
	return
}

func (_self_ *StringChunk) InsertConst(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_string_chunk_insert_const((*C.GStringChunk)(_self_), string_)
	return
}

func (_self_ *StringChunk) InsertLen(string_ *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_string_chunk_insert_len((*C.GStringChunk)(_self_), string_, len_)
	return
}

func (_self_ *TestSuite) Add(test_case *C.GTestCase) () {
	C.g_test_suite_add((*C.GTestSuite)(_self_), test_case)
	return
}

func (_self_ *TestSuite) AddSuite(nestedsuite *C.GTestSuite) () {
	C.g_test_suite_add_suite((*C.GTestSuite)(_self_), nestedsuite)
	return
}

func ThreadNew(name *C.gchar, func_ C.GThreadFunc, data C.gpointer) (_return_ *C.GThread) {
	_return_ = C._g_thread_new(name, func_, data)
	return
}

func ThreadTryNew(name *C.gchar, func_ C.GThreadFunc, data C.gpointer) (_return_ *C.GThread, _error_ unsafe.Pointer) {
	_return_ = C._g_thread_try_new(name, func_, data, _error_)
	return
}

func ThreadErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_thread_error_quark()
	return
}

func ThreadExit(retval C.gpointer) () {
	C.g_thread_exit(retval)
	return
}

func ThreadSelf() (_return_ *C.GThread) {
	_return_ = C.g_thread_self()
	return
}

func ThreadYield() () {
	C.g_thread_yield()
	return
}

func (_self_ *Thread) Join() (_return_ C.gpointer) {
	_return_ = C.g_thread_join((*C.GThread)(_self_))
	return
}

func (_self_ *Thread) Ref() (_return_ *C.GThread) {
	_return_ = C.g_thread_ref((*C.GThread)(_self_))
	return
}

func (_self_ *Thread) Unref() () {
	C.g_thread_unref((*C.GThread)(_self_))
	return
}

func ThreadPoolGetMaxIdleTime() (_return_ C.guint) {
	_return_ = C.g_thread_pool_get_max_idle_time()
	return
}

func ThreadPoolGetMaxUnusedThreads() (_return_ C.gint) {
	_return_ = C.g_thread_pool_get_max_unused_threads()
	return
}

func ThreadPoolGetNumUnusedThreads() (_return_ C.guint) {
	_return_ = C.g_thread_pool_get_num_unused_threads()
	return
}

func ThreadPoolNew(func_ C.GFunc, user_data C.gpointer, max_threads C.gint, exclusive C.gboolean) (_return_ *C.GThreadPool, _error_ unsafe.Pointer) {
	_return_ = C._g_thread_pool_new(func_, user_data, max_threads, exclusive, _error_)
	return
}

func ThreadPoolSetMaxIdleTime(interval C.guint) () {
	C.g_thread_pool_set_max_idle_time(interval)
	return
}

func ThreadPoolSetMaxUnusedThreads(max_threads C.gint) () {
	C.g_thread_pool_set_max_unused_threads(max_threads)
	return
}

func ThreadPoolStopUnusedThreads() () {
	C.g_thread_pool_stop_unused_threads()
	return
}

func (_self_ *ThreadPool) Free(immediate C.gboolean, wait_ C.gboolean) () {
	C.g_thread_pool_free((*C.GThreadPool)(_self_), immediate, wait_)
	return
}

func (_self_ *ThreadPool) GetMaxThreads() (_return_ C.gint) {
	_return_ = C.g_thread_pool_get_max_threads((*C.GThreadPool)(_self_))
	return
}

func (_self_ *ThreadPool) GetNumThreads() (_return_ C.guint) {
	_return_ = C.g_thread_pool_get_num_threads((*C.GThreadPool)(_self_))
	return
}

func (_self_ *ThreadPool) Push(data C.gpointer) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_thread_pool_push((*C.GThreadPool)(_self_), data, _error_)
	return
}

func (_self_ *ThreadPool) SetMaxThreads(max_threads C.gint) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_thread_pool_set_max_threads((*C.GThreadPool)(_self_), max_threads, _error_)
	return
}

func (_self_ *ThreadPool) SetSortFunction(func_ C.GCompareDataFunc, user_data C.gpointer) () {
	C.g_thread_pool_set_sort_function((*C.GThreadPool)(_self_), func_, user_data)
	return
}

func (_self_ *ThreadPool) Unprocessed() (_return_ C.guint) {
	_return_ = C.g_thread_pool_unprocessed((*C.GThreadPool)(_self_))
	return
}

func TimeValFromIso8601(iso_date *C.gchar) (_return_ C.gboolean, time_ *C.GTimeVal) {
	_return_ = C._g_time_val_from_iso8601(iso_date, time_)
	return
}

func (_self_ *TimeVal) Add(microseconds C.glong) () {
	C.g_time_val_add((*C.GTimeVal)(_self_), microseconds)
	return
}

func (_self_ *TimeVal) ToIso8601() (_return_ *C.gchar) {
	_return_ = C.g_time_val_to_iso8601((*C.GTimeVal)(_self_))
	return
}

func TimeZoneNew(identifier *C.gchar) (_return_ *C.GTimeZone) {
	_return_ = C._g_time_zone_new(identifier)
	return
}

func TimeZoneNewLocal() (_return_ *C.GTimeZone) {
	_return_ = C.g_time_zone_new_local()
	return
}

func TimeZoneNewUtc() (_return_ *C.GTimeZone) {
	_return_ = C.g_time_zone_new_utc()
	return
}

func (_self_ *TimeZone) AdjustTime(type_ C.GTimeType, time_ *C.gint64) (_return_ C.gint) {
	_return_ = C.g_time_zone_adjust_time((*C.GTimeZone)(_self_), type_, time_)
	return
}

func (_self_ *TimeZone) FindInterval(type_ C.GTimeType, time_ C.gint64) (_return_ C.gint) {
	_return_ = C.g_time_zone_find_interval((*C.GTimeZone)(_self_), type_, time_)
	return
}

func (_self_ *TimeZone) GetAbbreviation(interval C.gint) (_return_ *C.gchar) {
	_return_ = C._g_time_zone_get_abbreviation((*C.GTimeZone)(_self_), interval)
	return
}

func (_self_ *TimeZone) GetOffset(interval C.gint) (_return_ C.gint32) {
	_return_ = C.g_time_zone_get_offset((*C.GTimeZone)(_self_), interval)
	return
}

func (_self_ *TimeZone) IsDst(interval C.gint) (_return_ C.gboolean) {
	_return_ = C.g_time_zone_is_dst((*C.GTimeZone)(_self_), interval)
	return
}

func (_self_ *TimeZone) Ref() (_return_ *C.GTimeZone) {
	_return_ = C.g_time_zone_ref((*C.GTimeZone)(_self_))
	return
}

func (_self_ *TimeZone) Unref() () {
	C.g_time_zone_unref((*C.GTimeZone)(_self_))
	return
}

func TimerNew() (_return_ *C.GTimer) {
	_return_ = C.g_timer_new()
	return
}

func (_self_ *Timer) Continue() () {
	C.g_timer_continue((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Destroy() () {
	C.g_timer_destroy((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Elapsed(microseconds *C.gulong) (_return_ C.gdouble) {
	_return_ = C.g_timer_elapsed((*C.GTimer)(_self_), microseconds)
	return
}

func (_self_ *Timer) Reset() () {
	C.g_timer_reset((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Start() () {
	C.g_timer_start((*C.GTimer)(_self_))
	return
}

func (_self_ *Timer) Stop() () {
	C.g_timer_stop((*C.GTimer)(_self_))
	return
}

func TrashStackHeight(stack_p unsafe.Pointer) (_return_ C.guint) {
	_return_ = C._g_trash_stack_height(stack_p)
	return
}

func TrashStackPeek(stack_p unsafe.Pointer) (_return_ C.gpointer) {
	_return_ = C._g_trash_stack_peek(stack_p)
	return
}

func TrashStackPop(stack_p unsafe.Pointer) (_return_ C.gpointer) {
	_return_ = C._g_trash_stack_pop(stack_p)
	return
}

func TrashStackPush(stack_p unsafe.Pointer, data_p C.gpointer) () {
	C._g_trash_stack_push(stack_p, data_p)
	return
}

func TreeNew(key_compare_func C.GCompareFunc) (_return_ *C.GTree) {
	_return_ = C.g_tree_new(key_compare_func)
	return
}

func TreeNewFull(key_compare_func C.GCompareDataFunc, key_compare_data C.gpointer, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) (_return_ *C.GTree) {
	_return_ = C.g_tree_new_full(key_compare_func, key_compare_data, key_destroy_func, value_destroy_func)
	return
}

func TreeNewWithData(key_compare_func C.GCompareDataFunc, key_compare_data C.gpointer) (_return_ *C.GTree) {
	_return_ = C.g_tree_new_with_data(key_compare_func, key_compare_data)
	return
}

func (_self_ *Tree) Destroy() () {
	C.g_tree_destroy((*C.GTree)(_self_))
	return
}

func (_self_ *Tree) Foreach(func_ C.GTraverseFunc, user_data C.gpointer) () {
	C.g_tree_foreach((*C.GTree)(_self_), func_, user_data)
	return
}

func (_self_ *Tree) Height() (_return_ C.gint) {
	_return_ = C.g_tree_height((*C.GTree)(_self_))
	return
}

func (_self_ *Tree) Insert(key C.gpointer, value C.gpointer) () {
	C.g_tree_insert((*C.GTree)(_self_), key, value)
	return
}

func (_self_ *Tree) Lookup(key C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_tree_lookup((*C.GTree)(_self_), key)
	return
}

func (_self_ *Tree) LookupExtended(lookup_key C.gpointer, orig_key *C.gpointer, value *C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_tree_lookup_extended((*C.GTree)(_self_), lookup_key, orig_key, value)
	return
}

func (_self_ *Tree) Nnodes() (_return_ C.gint) {
	_return_ = C.g_tree_nnodes((*C.GTree)(_self_))
	return
}

func (_self_ *Tree) Ref() (_return_ *C.GTree) {
	_return_ = C.g_tree_ref((*C.GTree)(_self_))
	return
}

func (_self_ *Tree) Remove(key C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_tree_remove((*C.GTree)(_self_), key)
	return
}

func (_self_ *Tree) Replace(key C.gpointer, value C.gpointer) () {
	C.g_tree_replace((*C.GTree)(_self_), key, value)
	return
}

func (_self_ *Tree) Search(search_func C.GCompareFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_tree_search((*C.GTree)(_self_), search_func, user_data)
	return
}

func (_self_ *Tree) Steal(key C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_tree_steal((*C.GTree)(_self_), key)
	return
}

func (_self_ *Tree) Unref() () {
	C.g_tree_unref((*C.GTree)(_self_))
	return
}

func VariantNewArray(child_type *C.GVariantType, children unsafe.Pointer, n_children C.gsize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_array(child_type, children, n_children)
	return
}

func VariantNewBoolean(value C.gboolean) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_boolean(value)
	return
}

func VariantNewByte(value C.guchar) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_byte(value)
	return
}

func VariantNewBytestring(string_ *C.gchar) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_bytestring(string_)
	return
}

func VariantNewBytestringArray(strv unsafe.Pointer, length C.gssize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_bytestring_array(strv, length)
	return
}

func VariantNewDictEntry(key *C.GVariant, value *C.GVariant) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_dict_entry(key, value)
	return
}

func VariantNewDouble(value C.gdouble) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_double(value)
	return
}

func VariantNewFixedArray(element_type *C.GVariantType, elements C.gpointer, n_elements C.gsize, element_size C.gsize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_fixed_array(element_type, elements, n_elements, element_size)
	return
}

func VariantNewFromBytes(type_ *C.GVariantType, bytes *C.GBytes, trusted C.gboolean) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_from_bytes(type_, bytes, trusted)
	return
}

func VariantNewFromData(type_ *C.GVariantType, data C.gpointer, size C.gsize, trusted C.gboolean, notify C.GDestroyNotify, user_data C.gpointer) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_from_data(type_, data, size, trusted, notify, user_data)
	return
}

func VariantNewHandle(value C.gint32) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_handle(value)
	return
}

func VariantNewInt16(value C.gint16) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_int16(value)
	return
}

func VariantNewInt32(value C.gint32) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_int32(value)
	return
}

func VariantNewInt64(value C.gint64) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_int64(value)
	return
}

func VariantNewMaybe(child_type *C.GVariantType, child *C.GVariant) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_maybe(child_type, child)
	return
}

func VariantNewObjectPath(object_path *C.gchar) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_object_path(object_path)
	return
}

func VariantNewObjv(strv unsafe.Pointer, length C.gssize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_objv(strv, length)
	return
}

func VariantNewSignature(signature *C.gchar) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_signature(signature)
	return
}

func VariantNewString(string_ *C.gchar) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_string(string_)
	return
}

func VariantNewStrv(strv unsafe.Pointer, length C.gssize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_strv(strv, length)
	return
}

func VariantNewTuple(children unsafe.Pointer, n_children C.gsize) (_return_ *C.GVariant) {
	_return_ = C._g_variant_new_tuple(children, n_children)
	return
}

func VariantNewUint16(value C.guint16) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_uint16(value)
	return
}

func VariantNewUint32(value C.guint32) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_uint32(value)
	return
}

func VariantNewUint64(value C.guint64) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_uint64(value)
	return
}

func VariantNewVariant(value *C.GVariant) (_return_ *C.GVariant) {
	_return_ = C.g_variant_new_variant(value)
	return
}

func VariantIsObjectPath(string_ *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_variant_is_object_path(string_)
	return
}

func VariantIsSignature(string_ *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_variant_is_signature(string_)
	return
}

func VariantParse(type_ *C.GVariantType, text *C.gchar, limit *C.gchar, endptr unsafe.Pointer) (_return_ *C.GVariant, _error_ unsafe.Pointer) {
	_return_ = C._g_variant_parse(type_, text, limit, endptr, _error_)
	return
}

func VariantParserGetErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_variant_parser_get_error_quark()
	return
}

func (_self_ *Variant) Byteswap() (_return_ *C.GVariant) {
	_return_ = C.g_variant_byteswap((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) CheckFormatString(format_string *C.gchar, copy_only C.gboolean) (_return_ C.gboolean) {
	_return_ = C._g_variant_check_format_string((*C.GVariant)(_self_), format_string, copy_only)
	return
}

func (_self_ *Variant) Classify() (_return_ C.GVariantClass) {
	_return_ = C.g_variant_classify((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Compare(two C.gpointer) (_return_ C.gint) {
	_return_ = C._g_variant_compare((*C.GVariant)(_self_), two)
	return
}

func (_self_ *Variant) DupBytestring() (_return_ *C.gchar, length *C.gsize) {
	_return_ = C.g_variant_dup_bytestring((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) DupBytestringArray() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_dup_bytestring_array((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) DupObjv() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_dup_objv((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) DupString() (_return_ *C.gchar, length *C.gsize) {
	_return_ = C.g_variant_dup_string((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) DupStrv() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_dup_strv((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) Equal(two C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_variant_equal((*C.GVariant)(_self_), two)
	return
}

func (_self_ *Variant) GetBoolean() (_return_ C.gboolean) {
	_return_ = C.g_variant_get_boolean((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetByte() (_return_ C.guchar) {
	_return_ = C.g_variant_get_byte((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetBytestring() (_return_ *C.gchar) {
	_return_ = C._g_variant_get_bytestring((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetBytestringArray() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_get_bytestring_array((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) GetChildValue(index_ C.gsize) (_return_ *C.GVariant) {
	_return_ = C.g_variant_get_child_value((*C.GVariant)(_self_), index_)
	return
}

func (_self_ *Variant) GetData() (_return_ C.gpointer) {
	_return_ = C._g_variant_get_data((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetDataAsBytes() (_return_ *C.GBytes) {
	_return_ = C.g_variant_get_data_as_bytes((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetDouble() (_return_ C.gdouble) {
	_return_ = C.g_variant_get_double((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetFixedArray(element_size C.gsize) (_return_ C.gpointer, n_elements *C.gsize) {
	_return_ = C._g_variant_get_fixed_array((*C.GVariant)(_self_), n_elements, element_size)
	return
}

func (_self_ *Variant) GetHandle() (_return_ C.gint32) {
	_return_ = C.g_variant_get_handle((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetInt16() (_return_ C.gint16) {
	_return_ = C.g_variant_get_int16((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetInt32() (_return_ C.gint32) {
	_return_ = C.g_variant_get_int32((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetInt64() (_return_ C.gint64) {
	_return_ = C.g_variant_get_int64((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetMaybe() (_return_ *C.GVariant) {
	_return_ = C.g_variant_get_maybe((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetNormalForm() (_return_ *C.GVariant) {
	_return_ = C.g_variant_get_normal_form((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetObjv() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_get_objv((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) GetSize() (_return_ C.gsize) {
	_return_ = C.g_variant_get_size((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetString() (_return_ *C.gchar, length *C.gsize) {
	_return_ = C._g_variant_get_string((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) GetStrv() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._g_variant_get_strv((*C.GVariant)(_self_), length)
	return
}

func (_self_ *Variant) GetType() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_get_type((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetTypeString() (_return_ *C.gchar) {
	_return_ = C._g_variant_get_type_string((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetUint16() (_return_ C.guint16) {
	_return_ = C.g_variant_get_uint16((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetUint32() (_return_ C.guint32) {
	_return_ = C.g_variant_get_uint32((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetUint64() (_return_ C.guint64) {
	_return_ = C.g_variant_get_uint64((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) GetVariant() (_return_ *C.GVariant) {
	_return_ = C.g_variant_get_variant((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Hash() (_return_ C.guint) {
	_return_ = C._g_variant_hash((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) IsContainer() (_return_ C.gboolean) {
	_return_ = C.g_variant_is_container((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) IsFloating() (_return_ C.gboolean) {
	_return_ = C.g_variant_is_floating((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) IsNormalForm() (_return_ C.gboolean) {
	_return_ = C.g_variant_is_normal_form((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) IsOfType(type_ *C.GVariantType) (_return_ C.gboolean) {
	_return_ = C._g_variant_is_of_type((*C.GVariant)(_self_), type_)
	return
}

func (_self_ *Variant) IterNew() (_return_ *C.GVariantIter) {
	_return_ = C.g_variant_iter_new((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) LookupValue(key *C.gchar, expected_type *C.GVariantType) (_return_ *C.GVariant) {
	_return_ = C._g_variant_lookup_value((*C.GVariant)(_self_), key, expected_type)
	return
}

func (_self_ *Variant) NChildren() (_return_ C.gsize) {
	_return_ = C.g_variant_n_children((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Print(type_annotate C.gboolean) (_return_ *C.gchar) {
	_return_ = C.g_variant_print((*C.GVariant)(_self_), type_annotate)
	return
}

func (_self_ *Variant) PrintString(string_ *C.GString, type_annotate C.gboolean) (_return_ *C.GString) {
	_return_ = C.g_variant_print_string((*C.GVariant)(_self_), string_, type_annotate)
	return
}

func (_self_ *Variant) Ref() (_return_ *C.GVariant) {
	_return_ = C.g_variant_ref((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) RefSink() (_return_ *C.GVariant) {
	_return_ = C.g_variant_ref_sink((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Store(data C.gpointer) () {
	C.g_variant_store((*C.GVariant)(_self_), data)
	return
}

func (_self_ *Variant) TakeRef() (_return_ *C.GVariant) {
	_return_ = C.g_variant_take_ref((*C.GVariant)(_self_))
	return
}

func (_self_ *Variant) Unref() () {
	C.g_variant_unref((*C.GVariant)(_self_))
	return
}

func VariantBuilderNew(type_ *C.GVariantType) (_return_ *C.GVariantBuilder) {
	_return_ = C._g_variant_builder_new(type_)
	return
}

func (_self_ *VariantBuilder) AddValue(value *C.GVariant) () {
	C.g_variant_builder_add_value((*C.GVariantBuilder)(_self_), value)
	return
}

func (_self_ *VariantBuilder) Clear() () {
	C.g_variant_builder_clear((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) Close() () {
	C.g_variant_builder_close((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) End() (_return_ *C.GVariant) {
	_return_ = C.g_variant_builder_end((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) Init(type_ *C.GVariantType) () {
	C._g_variant_builder_init((*C.GVariantBuilder)(_self_), type_)
	return
}

func (_self_ *VariantBuilder) Open(type_ *C.GVariantType) () {
	C._g_variant_builder_open((*C.GVariantBuilder)(_self_), type_)
	return
}

func (_self_ *VariantBuilder) Ref() (_return_ *C.GVariantBuilder) {
	_return_ = C.g_variant_builder_ref((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantBuilder) Unref() () {
	C.g_variant_builder_unref((*C.GVariantBuilder)(_self_))
	return
}

func (_self_ *VariantIter) Copy() (_return_ *C.GVariantIter) {
	_return_ = C.g_variant_iter_copy((*C.GVariantIter)(_self_))
	return
}

func (_self_ *VariantIter) Free() () {
	C.g_variant_iter_free((*C.GVariantIter)(_self_))
	return
}

func (_self_ *VariantIter) Init(value *C.GVariant) (_return_ C.gsize) {
	_return_ = C.g_variant_iter_init((*C.GVariantIter)(_self_), value)
	return
}

func (_self_ *VariantIter) NChildren() (_return_ C.gsize) {
	_return_ = C.g_variant_iter_n_children((*C.GVariantIter)(_self_))
	return
}

func (_self_ *VariantIter) NextValue() (_return_ *C.GVariant) {
	_return_ = C.g_variant_iter_next_value((*C.GVariantIter)(_self_))
	return
}

func VariantTypeNew(type_string *C.gchar) (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_new(type_string)
	return
}

func VariantTypeNewArray(element *C.GVariantType) (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_new_array(element)
	return
}

func VariantTypeNewDictEntry(key *C.GVariantType, value *C.GVariantType) (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_new_dict_entry(key, value)
	return
}

func VariantTypeNewMaybe(element *C.GVariantType) (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_new_maybe(element)
	return
}

func VariantTypeNewTuple(items unsafe.Pointer, length C.gint) (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_new_tuple(items, length)
	return
}

func VariantTypeStringIsValid(type_string *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_variant_type_string_is_valid(type_string)
	return
}

func VariantTypeStringScan(string_ *C.gchar, limit *C.gchar) (_return_ C.gboolean, endptr unsafe.Pointer) {
	_return_ = C._g_variant_type_string_scan(string_, limit, endptr)
	return
}

func (_self_ *VariantType) Copy() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_copy((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) DupString() (_return_ *C.gchar) {
	_return_ = C._g_variant_type_dup_string((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Element() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_element((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Equal(type2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_variant_type_equal((*C.GVariantType)(_self_), type2)
	return
}

func (_self_ *VariantType) First() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_first((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Free() () {
	C.g_variant_type_free((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) GetStringLength() (_return_ C.gsize) {
	_return_ = C._g_variant_type_get_string_length((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Hash() (_return_ C.guint) {
	_return_ = C._g_variant_type_hash((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsArray() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_array((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsBasic() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_basic((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsContainer() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_container((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsDefinite() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_definite((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsDictEntry() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_dict_entry((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsMaybe() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_maybe((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsSubtypeOf(supertype *C.GVariantType) (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_subtype_of((*C.GVariantType)(_self_), supertype)
	return
}

func (_self_ *VariantType) IsTuple() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_tuple((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) IsVariant() (_return_ C.gboolean) {
	_return_ = C._g_variant_type_is_variant((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Key() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_key((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) NItems() (_return_ C.gsize) {
	_return_ = C._g_variant_type_n_items((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Next() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_next((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) PeekString() (_return_ *C.gchar) {
	_return_ = C._g_variant_type_peek_string((*C.GVariantType)(_self_))
	return
}

func (_self_ *VariantType) Value() (_return_ *C.GVariantType) {
	_return_ = C._g_variant_type_value((*C.GVariantType)(_self_))
	return
}

func Access(filename *C.gchar, mode C.int) (_return_ C.int) {
	_return_ = C._g_access(filename, mode)
	return
}

func AsciiDigitValue(c C.gchar) (_return_ C.gint) {
	_return_ = C.g_ascii_digit_value(c)
	return
}

func AsciiDtostr(buffer *C.gchar, buf_len C.gint, d C.gdouble) (_return_ *C.gchar) {
	_return_ = C.g_ascii_dtostr(buffer, buf_len, d)
	return
}

func AsciiFormatd(buffer *C.gchar, buf_len C.gint, format *C.gchar, d C.gdouble) (_return_ *C.gchar) {
	_return_ = C._g_ascii_formatd(buffer, buf_len, format, d)
	return
}

func AsciiStrcasecmp(s1 *C.gchar, s2 *C.gchar) (_return_ C.gint) {
	_return_ = C._g_ascii_strcasecmp(s1, s2)
	return
}

func AsciiStrdown(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_ascii_strdown(str, len_)
	return
}

func AsciiStrncasecmp(s1 *C.gchar, s2 *C.gchar, n C.gsize) (_return_ C.gint) {
	_return_ = C._g_ascii_strncasecmp(s1, s2, n)
	return
}

func AsciiStrtod(nptr *C.gchar, endptr unsafe.Pointer) (_return_ C.gdouble) {
	_return_ = C._g_ascii_strtod(nptr, endptr)
	return
}

func AsciiStrtoll(nptr *C.gchar, endptr unsafe.Pointer, base C.guint) (_return_ C.gint64) {
	_return_ = C._g_ascii_strtoll(nptr, endptr, base)
	return
}

func AsciiStrtoull(nptr *C.gchar, endptr unsafe.Pointer, base C.guint) (_return_ C.guint64) {
	_return_ = C._g_ascii_strtoull(nptr, endptr, base)
	return
}

func AsciiStrup(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_ascii_strup(str, len_)
	return
}

func AsciiTolower(c C.gchar) (_return_ C.gchar) {
	_return_ = C.g_ascii_tolower(c)
	return
}

func AsciiToupper(c C.gchar) (_return_ C.gchar) {
	_return_ = C.g_ascii_toupper(c)
	return
}

func AsciiXdigitValue(c C.gchar) (_return_ C.gint) {
	_return_ = C.g_ascii_xdigit_value(c)
	return
}

func AssertionMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, message *C.char) () {
	C._g_assertion_message(domain, file, line, func_, message)
	return
}

func AssertionMessageCmpnum(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 C.double, cmp *C.char, arg2 C.double, numtype C.char) () {
	C._g_assertion_message_cmpnum(domain, file, line, func_, expr, arg1, cmp, arg2, numtype)
	return
}

func AssertionMessageCmpstr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 *C.char, cmp *C.char, arg2 *C.char) () {
	C._g_assertion_message_cmpstr(domain, file, line, func_, expr, arg1, cmp, arg2)
	return
}

func AssertionMessageError(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, error_ *C.GError, error_domain C.GQuark, error_code C.int) () {
	C._g_assertion_message_error(domain, file, line, func_, expr, error_, error_domain, error_code)
	return
}

func AssertionMessageExpr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char) () {
	C._g_assertion_message_expr(domain, file, line, func_, expr)
	return
}

func Base64Decode(text *C.gchar) (_return_ *C.guchar, out_len *C.gsize) {
	_return_ = C._g_base64_decode(text, out_len)
	return
}

func Base64Encode(data *C.guchar, len_ C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_base64_encode(data, len_)
	return
}

func BitLock(address *C. gint, lock_bit C.gint) () {
	C.g_bit_lock(address, lock_bit)
	return
}

func BitNthLsf(mask C.gulong, nth_bit C.gint) (_return_ C.gint) {
	_return_ = C.g_bit_nth_lsf(mask, nth_bit)
	return
}

func BitNthMsf(mask C.gulong, nth_bit C.gint) (_return_ C.gint) {
	_return_ = C.g_bit_nth_msf(mask, nth_bit)
	return
}

func BitStorage(number C.gulong) (_return_ C.guint) {
	_return_ = C.g_bit_storage(number)
	return
}

func BitTrylock(address *C. gint, lock_bit C.gint) (_return_ C.gboolean) {
	_return_ = C.g_bit_trylock(address, lock_bit)
	return
}

func BitUnlock(address *C. gint, lock_bit C.gint) () {
	C.g_bit_unlock(address, lock_bit)
	return
}

func BuildFilenamev(args unsafe.Pointer) (_return_ *C.gchar) {
	_return_ = C._g_build_filenamev(args)
	return
}

func BuildPathv(separator *C.gchar, args unsafe.Pointer) (_return_ *C.gchar) {
	_return_ = C._g_build_pathv(separator, args)
	return
}

func Chdir(path *C.gchar) (_return_ C.int) {
	_return_ = C._g_chdir(path)
	return
}

func CheckVersion(required_major C.guint, required_minor C.guint, required_micro C.guint) (_return_ *C.gchar) {
	_return_ = C._glib_check_version(required_major, required_minor, required_micro)
	return
}

func ChildWatchAdd(pid C.GPid, function C.GChildWatchFunc, data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_child_watch_add(pid, function, data)
	return
}

func ChildWatchAddFull(priority C.gint, pid C.GPid, function C.GChildWatchFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_child_watch_add_full(priority, pid, function, data, notify)
	return
}

func ChildWatchSourceNew(pid C.GPid) (_return_ *C.GSource) {
	_return_ = C.g_child_watch_source_new(pid)
	return
}

func ClearError() (_error_ unsafe.Pointer) {
	C._g_clear_error(_error_)
	return
}

func ComputeChecksumForBytes(checksum_type C.GChecksumType, data *C.GBytes) (_return_ *C.gchar) {
	_return_ = C.g_compute_checksum_for_bytes(checksum_type, data)
	return
}

func ComputeChecksumForData(checksum_type C.GChecksumType, data *C.guchar, length C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_compute_checksum_for_data(checksum_type, data, length)
	return
}

func ComputeChecksumForString(checksum_type C.GChecksumType, str *C.gchar, length C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_compute_checksum_for_string(checksum_type, str, length)
	return
}

func ComputeHmacForData(digest_type C.GChecksumType, key *C.guchar, key_len C.gsize, data *C.guchar, length C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_compute_hmac_for_data(digest_type, key, key_len, data, length)
	return
}

func ComputeHmacForString(digest_type C.GChecksumType, key *C.guchar, key_len C.gsize, str *C.gchar, length C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_compute_hmac_for_string(digest_type, key, key_len, str, length)
	return
}

func Convert(str *C.gchar, len_ C.gssize, to_codeset *C.gchar, from_codeset *C.gchar) (_return_ *C.gchar, bytes_read *C.gsize, bytes_written *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_convert(str, len_, to_codeset, from_codeset, bytes_read, bytes_written, _error_)
	return
}

func ConvertErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_convert_error_quark()
	return
}

func ConvertWithFallback(str *C.gchar, len_ C.gssize, to_codeset *C.gchar, from_codeset *C.gchar, fallback *C.gchar, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_convert_with_fallback(str, len_, to_codeset, from_codeset, fallback, bytes_read, bytes_written, _error_)
	return
}

func ConvertWithIconv(str *C.gchar, len_ C.gssize, converter C.GIConv, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_convert_with_iconv(str, len_, converter, bytes_read, bytes_written, _error_)
	return
}

func DatalistClear(datalist unsafe.Pointer) () {
	C._g_datalist_clear(datalist)
	return
}

func DatalistForeach(datalist unsafe.Pointer, func_ C.GDataForeachFunc, user_data C.gpointer) () {
	C._g_datalist_foreach(datalist, func_, user_data)
	return
}

func DatalistGetData(datalist unsafe.Pointer, key *C.gchar) (_return_ C.gpointer) {
	_return_ = C._g_datalist_get_data(datalist, key)
	return
}

func DatalistGetFlags(datalist unsafe.Pointer) (_return_ C.guint) {
	_return_ = C._g_datalist_get_flags(datalist)
	return
}

func DatalistIdDupData(datalist unsafe.Pointer, key_id C.GQuark, dup_func C.GDuplicateFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_dup_data(datalist, key_id, dup_func, user_data)
	return
}

func DatalistIdGetData(datalist unsafe.Pointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_get_data(datalist, key_id)
	return
}

func DatalistIdRemoveNoNotify(datalist unsafe.Pointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_datalist_id_remove_no_notify(datalist, key_id)
	return
}

func DatalistIdReplaceData(datalist unsafe.Pointer, key_id C.GQuark, oldval C.gpointer, newval C.gpointer, destroy C.GDestroyNotify, old_destroy *C.GDestroyNotify) (_return_ C.gboolean) {
	_return_ = C._g_datalist_id_replace_data(datalist, key_id, oldval, newval, destroy, old_destroy)
	return
}

func DatalistIdSetDataFull(datalist unsafe.Pointer, key_id C.GQuark, data C.gpointer, destroy_func C.GDestroyNotify) () {
	C._g_datalist_id_set_data_full(datalist, key_id, data, destroy_func)
	return
}

func DatalistInit(datalist unsafe.Pointer) () {
	C._g_datalist_init(datalist)
	return
}

func DatalistSetFlags(datalist unsafe.Pointer, flags C.guint) () {
	C._g_datalist_set_flags(datalist, flags)
	return
}

func DatalistUnsetFlags(datalist unsafe.Pointer, flags C.guint) () {
	C._g_datalist_unset_flags(datalist, flags)
	return
}

func DatasetDestroy(dataset_location C.gpointer) () {
	C._g_dataset_destroy(dataset_location)
	return
}

func DatasetForeach(dataset_location C.gpointer, func_ C.GDataForeachFunc, user_data C.gpointer) () {
	C._g_dataset_foreach(dataset_location, func_, user_data)
	return
}

func DatasetIdGetData(dataset_location C.gpointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_dataset_id_get_data(dataset_location, key_id)
	return
}

func DatasetIdRemoveNoNotify(dataset_location C.gpointer, key_id C.GQuark) (_return_ C.gpointer) {
	_return_ = C._g_dataset_id_remove_no_notify(dataset_location, key_id)
	return
}

func DatasetIdSetDataFull(dataset_location C.gpointer, key_id C.GQuark, data C.gpointer, destroy_func C.GDestroyNotify) () {
	C._g_dataset_id_set_data_full(dataset_location, key_id, data, destroy_func)
	return
}

func Dcgettext(domain *C.gchar, msgid *C.gchar, category C.gint) (_return_ *C.gchar) {
	_return_ = C._g_dcgettext(domain, msgid, category)
	return
}

func Dgettext(domain *C.gchar, msgid *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_dgettext(domain, msgid)
	return
}

func DirectEqual(v1 C.gpointer, v2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_direct_equal(v1, v2)
	return
}

func DirectHash(v C.gpointer) (_return_ C.guint) {
	_return_ = C._g_direct_hash(v)
	return
}

func Dngettext(domain *C.gchar, msgid *C.gchar, msgid_plural *C.gchar, n C.gulong) (_return_ *C.gchar) {
	_return_ = C._g_dngettext(domain, msgid, msgid_plural, n)
	return
}

func DoubleEqual(v1 C.gpointer, v2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_double_equal(v1, v2)
	return
}

func DoubleHash(v C.gpointer) (_return_ C.guint) {
	_return_ = C._g_double_hash(v)
	return
}

func Dpgettext(domain *C.gchar, msgctxtid *C.gchar, msgidoffset C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_dpgettext(domain, msgctxtid, msgidoffset)
	return
}

func Dpgettext2(domain *C.gchar, context *C.gchar, msgid *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_dpgettext2(domain, context, msgid)
	return
}

func EnvironGetenv(envp unsafe.Pointer, variable *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_environ_getenv(envp, variable)
	return
}

func EnvironSetenv(envp unsafe.Pointer, variable *C.gchar, value *C.gchar, overwrite C.gboolean) (_return_ unsafe.Pointer) {
	_return_ = C._g_environ_setenv(envp, variable, value, overwrite)
	return
}

func EnvironUnsetenv(envp unsafe.Pointer, variable *C.gchar) (_return_ unsafe.Pointer) {
	_return_ = C._g_environ_unsetenv(envp, variable)
	return
}

func FileErrorFromErrno(err_no C.gint) (_return_ C.GFileError) {
	_return_ = C.g_file_error_from_errno(err_no)
	return
}

func FileErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_file_error_quark()
	return
}

func FileGetContents(filename *C.gchar) (_return_ C.gboolean, contents unsafe.Pointer, length *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_file_get_contents(filename, contents, length, _error_)
	return
}

func FileOpenTmp(tmpl *C.gchar) (_return_ C.gint, name_used unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_file_open_tmp(tmpl, name_used, _error_)
	return
}

func FileReadLink(filename *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_file_read_link(filename, _error_)
	return
}

func FileSetContents(filename *C.gchar, contents *C.gchar, length C.gssize) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_file_set_contents(filename, contents, length, _error_)
	return
}

func FileTest(filename *C.gchar, test C.GFileTest) (_return_ C.gboolean) {
	_return_ = C._g_file_test(filename, test)
	return
}

func FilenameDisplayBasename(filename *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_filename_display_basename(filename)
	return
}

func FilenameDisplayName(filename *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_filename_display_name(filename)
	return
}

func FilenameFromUri(uri *C.gchar) (_return_ *C.gchar, hostname unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_filename_from_uri(uri, hostname, _error_)
	return
}

func FilenameFromUtf8(utf8string *C.gchar, len_ C.gssize) (_return_ *C.gchar, bytes_read *C.gsize, bytes_written *C.gsize, _error_ unsafe.Pointer) {
	_return_ = C._g_filename_from_utf8(utf8string, len_, bytes_read, bytes_written, _error_)
	return
}

func FilenameToUri(filename *C.gchar, hostname *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_filename_to_uri(filename, hostname, _error_)
	return
}

func FilenameToUtf8(opsysstring *C.gchar, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_filename_to_utf8(opsysstring, len_, bytes_read, bytes_written, _error_)
	return
}

func FindProgramInPath(program *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_find_program_in_path(program)
	return
}

func FormatSize(size C.guint64) (_return_ *C.gchar) {
	_return_ = C.g_format_size(size)
	return
}

func FormatSizeFull(size C.guint64, flags C.GFormatSizeFlags) (_return_ *C.gchar) {
	_return_ = C.g_format_size_full(size, flags)
	return
}

func Free(mem C.gpointer) () {
	C.g_free(mem)
	return
}

func GetApplicationName() (_return_ *C.gchar) {
	_return_ = C._g_get_application_name()
	return
}

func GetCharset(charset unsafe.Pointer) (_return_ C.gboolean) {
	_return_ = C._g_get_charset(charset)
	return
}

func GetCodeset() (_return_ *C.gchar) {
	_return_ = C.g_get_codeset()
	return
}

func GetCurrentDir() (_return_ *C.gchar) {
	_return_ = C.g_get_current_dir()
	return
}

func GetCurrentTime(result *C.GTimeVal) () {
	C.g_get_current_time(result)
	return
}

func GetEnviron() (_return_ unsafe.Pointer) {
	_return_ = C._g_get_environ()
	return
}

func GetFilenameCharsets(charsets unsafe.Pointer) (_return_ C.gboolean) {
	_return_ = C._g_get_filename_charsets(charsets)
	return
}

func GetHomeDir() (_return_ *C.gchar) {
	_return_ = C._g_get_home_dir()
	return
}

func GetHostName() (_return_ *C.gchar) {
	_return_ = C._g_get_host_name()
	return
}

func GetLanguageNames() (_return_ unsafe.Pointer) {
	_return_ = C._g_get_language_names()
	return
}

func GetLocaleVariants(locale *C.gchar) (_return_ unsafe.Pointer) {
	_return_ = C._g_get_locale_variants(locale)
	return
}

func GetMonotonicTime() (_return_ C.gint64) {
	_return_ = C.g_get_monotonic_time()
	return
}

func GetPrgname() (_return_ *C.gchar) {
	_return_ = C.g_get_prgname()
	return
}

func GetRealName() (_return_ *C.gchar) {
	_return_ = C._g_get_real_name()
	return
}

func GetRealTime() (_return_ C.gint64) {
	_return_ = C.g_get_real_time()
	return
}

func GetSystemConfigDirs() (_return_ unsafe.Pointer) {
	_return_ = C._g_get_system_config_dirs()
	return
}

func GetSystemDataDirs() (_return_ unsafe.Pointer) {
	_return_ = C._g_get_system_data_dirs()
	return
}

func GetTmpDir() (_return_ *C.gchar) {
	_return_ = C._g_get_tmp_dir()
	return
}

func GetUserCacheDir() (_return_ *C.gchar) {
	_return_ = C._g_get_user_cache_dir()
	return
}

func GetUserConfigDir() (_return_ *C.gchar) {
	_return_ = C._g_get_user_config_dir()
	return
}

func GetUserDataDir() (_return_ *C.gchar) {
	_return_ = C._g_get_user_data_dir()
	return
}

func GetUserName() (_return_ *C.gchar) {
	_return_ = C._g_get_user_name()
	return
}

func GetUserRuntimeDir() (_return_ *C.gchar) {
	_return_ = C._g_get_user_runtime_dir()
	return
}

func GetUserSpecialDir(directory C.GUserDirectory) (_return_ *C.gchar) {
	_return_ = C._g_get_user_special_dir(directory)
	return
}

func Getenv(variable *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_getenv(variable)
	return
}

func HostnameIsAsciiEncoded(hostname *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_hostname_is_ascii_encoded(hostname)
	return
}

func HostnameIsIpAddress(hostname *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_hostname_is_ip_address(hostname)
	return
}

func HostnameIsNonAscii(hostname *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_hostname_is_non_ascii(hostname)
	return
}

func HostnameToAscii(hostname *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_hostname_to_ascii(hostname)
	return
}

func HostnameToUnicode(hostname *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_hostname_to_unicode(hostname)
	return
}

func IdleAdd(function C.GSourceFunc, data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_idle_add(function, data)
	return
}

func IdleAddFull(priority C.gint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_idle_add_full(priority, function, data, notify)
	return
}

func IdleRemoveByData(data C.gpointer) (_return_ C.gboolean) {
	_return_ = C.g_idle_remove_by_data(data)
	return
}

func IdleSourceNew() (_return_ *C.GSource) {
	_return_ = C.g_idle_source_new()
	return
}

func Int64Equal(v1 C.gpointer, v2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_int64_equal(v1, v2)
	return
}

func Int64Hash(v C.gpointer) (_return_ C.guint) {
	_return_ = C._g_int64_hash(v)
	return
}

func IntEqual(v1 C.gpointer, v2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_int_equal(v1, v2)
	return
}

func IntHash(v C.gpointer) (_return_ C.guint) {
	_return_ = C._g_int_hash(v)
	return
}

func InternStaticString(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_intern_static_string(string_)
	return
}

func InternString(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_intern_string(string_)
	return
}

func IoAddWatch(channel *C.GIOChannel, condition C.GIOCondition, func_ C.GIOFunc, user_data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_io_add_watch(channel, condition, func_, user_data)
	return
}

func IoAddWatchFull(channel *C.GIOChannel, priority C.gint, condition C.GIOCondition, func_ C.GIOFunc, user_data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_io_add_watch_full(channel, priority, condition, func_, user_data, notify)
	return
}

func IoCreateWatch(channel *C.GIOChannel, condition C.GIOCondition) (_return_ *C.GSource) {
	_return_ = C.g_io_create_watch(channel, condition)
	return
}

func Listenv() (_return_ unsafe.Pointer) {
	_return_ = C._g_listenv()
	return
}

func LocaleFromUtf8(utf8string *C.gchar, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_locale_from_utf8(utf8string, len_, bytes_read, bytes_written, _error_)
	return
}

func LocaleToUtf8(opsysstring *C.gchar, len_ C.gssize, bytes_read *C.gsize, bytes_written *C.gsize) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_locale_to_utf8(opsysstring, len_, bytes_read, bytes_written, _error_)
	return
}

func LogDefaultHandler(log_domain *C.gchar, log_level C.GLogLevelFlags, message *C.gchar, unused_data C.gpointer) () {
	C._g_log_default_handler(log_domain, log_level, message, unused_data)
	return
}

func LogRemoveHandler(log_domain *C.gchar, handler_id C.guint) () {
	C._g_log_remove_handler(log_domain, handler_id)
	return
}

func LogSetAlwaysFatal(fatal_mask C.GLogLevelFlags) (_return_ C.GLogLevelFlags) {
	_return_ = C.g_log_set_always_fatal(fatal_mask)
	return
}

func LogSetDefaultHandler(log_func C.GLogFunc, user_data C.gpointer) (_return_ C.GLogFunc) {
	_return_ = C.g_log_set_default_handler(log_func, user_data)
	return
}

func LogSetFatalMask(log_domain *C.gchar, fatal_mask C.GLogLevelFlags) (_return_ C.GLogLevelFlags) {
	_return_ = C._g_log_set_fatal_mask(log_domain, fatal_mask)
	return
}

func LogSetHandler(log_domain *C.gchar, log_levels C.GLogLevelFlags, log_func C.GLogFunc, user_data C.gpointer) (_return_ C.guint) {
	_return_ = C._g_log_set_handler(log_domain, log_levels, log_func, user_data)
	return
}

func MainCurrentSource() (_return_ *C.GSource) {
	_return_ = C.g_main_current_source()
	return
}

func MainDepth() (_return_ C.gint) {
	_return_ = C.g_main_depth()
	return
}

func Malloc(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc(n_bytes)
	return
}

func Malloc0(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc0(n_bytes)
	return
}

func Malloc0N(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc0_n(n_blocks, n_block_bytes)
	return
}

func MallocN(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_malloc_n(n_blocks, n_block_bytes)
	return
}

func MarkupErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_markup_error_quark()
	return
}

func MarkupEscapeText(text *C.gchar, length C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_markup_escape_text(text, length)
	return
}

func MemIsSystemMalloc() (_return_ C.gboolean) {
	_return_ = C.g_mem_is_system_malloc()
	return
}

func MemProfile() () {
	C.g_mem_profile()
	return
}

func MemSetVtable(vtable *C.GMemVTable) () {
	C.g_mem_set_vtable(vtable)
	return
}

func Memdup(mem C.gpointer, byte_size C.guint) (_return_ C.gpointer) {
	_return_ = C._g_memdup(mem, byte_size)
	return
}

func MkdirWithParents(pathname *C.gchar, mode C.gint) (_return_ C.gint) {
	_return_ = C._g_mkdir_with_parents(pathname, mode)
	return
}

func Mkdtemp(tmpl *C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_mkdtemp(tmpl)
	return
}

func MkdtempFull(tmpl *C.gchar, mode C.gint) (_return_ *C.gchar) {
	_return_ = C.g_mkdtemp_full(tmpl, mode)
	return
}

func Mkstemp(tmpl *C.gchar) (_return_ C.gint) {
	_return_ = C.g_mkstemp(tmpl)
	return
}

func MkstempFull(tmpl *C.gchar, flags C.gint, mode C.gint) (_return_ C.gint) {
	_return_ = C.g_mkstemp_full(tmpl, flags, mode)
	return
}

func NullifyPointer(nullify_location *C.gpointer) () {
	C.g_nullify_pointer(nullify_location)
	return
}

func OnErrorQuery(prg_name *C.gchar) () {
	C._g_on_error_query(prg_name)
	return
}

func OnErrorStackTrace(prg_name *C.gchar) () {
	C._g_on_error_stack_trace(prg_name)
	return
}

func OptionErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_option_error_quark()
	return
}

func ParseDebugString(string_ *C.gchar, keys *C.GDebugKey, nkeys C.guint) (_return_ C.guint) {
	_return_ = C._g_parse_debug_string(string_, keys, nkeys)
	return
}

func PathGetBasename(file_name *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_path_get_basename(file_name)
	return
}

func PathGetDirname(file_name *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_path_get_dirname(file_name)
	return
}

func PathIsAbsolute(file_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_path_is_absolute(file_name)
	return
}

func PathSkipRoot(file_name *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_path_skip_root(file_name)
	return
}

func PatternMatch(pspec *C.GPatternSpec, string_length C.guint, string_ *C.gchar, string_reversed *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_pattern_match(pspec, string_length, string_, string_reversed)
	return
}

func PatternMatchSimple(pattern *C.gchar, string_ *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_pattern_match_simple(pattern, string_)
	return
}

func PatternMatchString(pspec *C.GPatternSpec, string_ *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_pattern_match_string(pspec, string_)
	return
}

func Poll(fds *C.GPollFD, nfds C.guint, timeout C.gint) (_return_ C.gint) {
	_return_ = C.g_poll(fds, nfds, timeout)
	return
}

func PropagateError(dest unsafe.Pointer, src *C.GError) () {
	C._g_propagate_error(dest, src)
	return
}

func QsortWithData(pbase C.gpointer, total_elems C.gint, size C.gsize, compare_func C.GCompareDataFunc, user_data C.gpointer) () {
	C._g_qsort_with_data(pbase, total_elems, size, compare_func, user_data)
	return
}

func QuarkFromStaticString(string_ *C.gchar) (_return_ C.GQuark) {
	_return_ = C._g_quark_from_static_string(string_)
	return
}

func QuarkFromString(string_ *C.gchar) (_return_ C.GQuark) {
	_return_ = C._g_quark_from_string(string_)
	return
}

func QuarkToString(quark C.GQuark) (_return_ *C.gchar) {
	_return_ = C._g_quark_to_string(quark)
	return
}

func QuarkTryString(string_ *C.gchar) (_return_ C.GQuark) {
	_return_ = C._g_quark_try_string(string_)
	return
}

func RandomDouble() (_return_ C.gdouble) {
	_return_ = C.g_random_double()
	return
}

func RandomDoubleRange(begin C.gdouble, end C.gdouble) (_return_ C.gdouble) {
	_return_ = C.g_random_double_range(begin, end)
	return
}

func RandomInt() (_return_ C.guint32) {
	_return_ = C.g_random_int()
	return
}

func RandomIntRange(begin C.gint32, end C.gint32) (_return_ C.gint32) {
	_return_ = C.g_random_int_range(begin, end)
	return
}

func RandomSetSeed(seed C.guint32) () {
	C.g_random_set_seed(seed)
	return
}

func Realloc(mem C.gpointer, n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_realloc(mem, n_bytes)
	return
}

func ReallocN(mem C.gpointer, n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_realloc_n(mem, n_blocks, n_block_bytes)
	return
}

func ReloadUserSpecialDirsCache() () {
	C.g_reload_user_special_dirs_cache()
	return
}

func ReturnIfFailWarning(log_domain *C.char, pretty_function *C.char, expression *C.char) () {
	C._g_return_if_fail_warning(log_domain, pretty_function, expression)
	return
}

func Rmdir(filename *C.gchar) (_return_ C.int) {
	_return_ = C._g_rmdir(filename)
	return
}

func SetApplicationName(application_name *C.gchar) () {
	C._g_set_application_name(application_name)
	return
}

func SetErrorLiteral(err unsafe.Pointer, domain C.GQuark, code C.gint, message *C.gchar) () {
	C._g_set_error_literal(err, domain, code, message)
	return
}

func SetPrgname(prgname *C.gchar) () {
	C._g_set_prgname(prgname)
	return
}

func SetPrintHandler(func_ C.GPrintFunc) (_return_ C.GPrintFunc) {
	_return_ = C.g_set_print_handler(func_)
	return
}

func SetPrinterrHandler(func_ C.GPrintFunc) (_return_ C.GPrintFunc) {
	_return_ = C.g_set_printerr_handler(func_)
	return
}

func Setenv(variable *C.gchar, value *C.gchar, overwrite C.gboolean) (_return_ C.gboolean) {
	_return_ = C._g_setenv(variable, value, overwrite)
	return
}

func ShellErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_shell_error_quark()
	return
}

func ShellParseArgv(command_line *C.gchar) (_return_ C.gboolean, argcp *C.gint, argvp unsafe.Pointer, _error_ unsafe.Pointer) {
	_return_ = C._g_shell_parse_argv(command_line, argcp, argvp, _error_)
	return
}

func ShellQuote(unquoted_string *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_shell_quote(unquoted_string)
	return
}

func ShellUnquote(quoted_string *C.gchar) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_shell_unquote(quoted_string, _error_)
	return
}

func SliceAlloc(block_size C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_slice_alloc(block_size)
	return
}

func SliceAlloc0(block_size C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_slice_alloc0(block_size)
	return
}

func SliceCopy(block_size C.gsize, mem_block C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_slice_copy(block_size, mem_block)
	return
}

func SliceFree1(block_size C.gsize, mem_block C.gpointer) () {
	C.g_slice_free1(block_size, mem_block)
	return
}

func SliceFreeChainWithOffset(block_size C.gsize, mem_chain C.gpointer, next_offset C.gsize) () {
	C.g_slice_free_chain_with_offset(block_size, mem_chain, next_offset)
	return
}

func SpacedPrimesClosest(num C.guint) (_return_ C.guint) {
	_return_ = C.g_spaced_primes_closest(num)
	return
}

func SpawnAsync(working_directory *C.gchar, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data C.gpointer) (_return_ C.gboolean, child_pid *C.GPid, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_async(working_directory, argv, envp, flags, child_setup, user_data, child_pid, _error_)
	return
}

func SpawnAsyncWithPipes(working_directory *C.gchar, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data C.gpointer) (_return_ C.gboolean, child_pid *C.GPid, standard_input *C.gint, standard_output *C.gint, standard_error *C.gint, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_async_with_pipes(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, _error_)
	return
}

func SpawnCheckExitStatus(exit_status C.gint) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_check_exit_status(exit_status, _error_)
	return
}

func SpawnClosePid(pid C.GPid) () {
	C.g_spawn_close_pid(pid)
	return
}

func SpawnCommandLineAsync(command_line *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_command_line_async(command_line, _error_)
	return
}

func SpawnCommandLineSync(command_line *C.gchar) (_return_ C.gboolean, standard_output unsafe.Pointer, standard_error unsafe.Pointer, exit_status *C.gint, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_command_line_sync(command_line, standard_output, standard_error, exit_status, _error_)
	return
}

func SpawnErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_spawn_error_quark()
	return
}

func SpawnExitErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_spawn_exit_error_quark()
	return
}

func SpawnSync(working_directory *C.gchar, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data C.gpointer) (_return_ C.gboolean, standard_output unsafe.Pointer, standard_error unsafe.Pointer, exit_status *C.gint, _error_ unsafe.Pointer) {
	_return_ = C._g_spawn_sync(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, exit_status, _error_)
	return
}

func Stpcpy(dest *C.gchar, src *C.char) (_return_ *C.gchar) {
	_return_ = C._g_stpcpy(dest, src)
	return
}

func StrEqual(v1 C.gpointer, v2 C.gpointer) (_return_ C.gboolean) {
	_return_ = C._g_str_equal(v1, v2)
	return
}

func StrHasPrefix(str *C.gchar, prefix *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_str_has_prefix(str, prefix)
	return
}

func StrHasSuffix(str *C.gchar, suffix *C.gchar) (_return_ C.gboolean) {
	_return_ = C._g_str_has_suffix(str, suffix)
	return
}

func StrHash(v C.gpointer) (_return_ C.guint) {
	_return_ = C._g_str_hash(v)
	return
}

func Strcanon(string_ *C.gchar, valid_chars *C.gchar, substitutor C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strcanon(string_, valid_chars, substitutor)
	return
}

func Strchomp(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_strchomp(string_)
	return
}

func Strchug(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_strchug(string_)
	return
}

func Strcmp0(str1 *C.char, str2 *C.char) (_return_ C.int) {
	_return_ = C._g_strcmp0(str1, str2)
	return
}

func Strcompress(source *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strcompress(source)
	return
}

func Strdelimit(string_ *C.gchar, delimiters *C.gchar, new_delimiter C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strdelimit(string_, delimiters, new_delimiter)
	return
}

func Strdup(str *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strdup(str)
	return
}

func Strdupv(str_array unsafe.Pointer) (_return_ unsafe.Pointer) {
	_return_ = C._g_strdupv(str_array)
	return
}

func Strerror(errnum C.gint) (_return_ *C.gchar) {
	_return_ = C._g_strerror(errnum)
	return
}

func Strescape(source *C.gchar, exceptions *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strescape(source, exceptions)
	return
}

func Strfreev(str_array unsafe.Pointer) () {
	C._g_strfreev(str_array)
	return
}

func StringNew(init *C.gchar) (_return_ *C.GString) {
	_return_ = C._g_string_new(init)
	return
}

func StringNewLen(init *C.gchar, len_ C.gssize) (_return_ *C.GString) {
	_return_ = C._g_string_new_len(init, len_)
	return
}

func StringSizedNew(dfl_size C.gsize) (_return_ *C.GString) {
	_return_ = C.g_string_sized_new(dfl_size)
	return
}

func StripContext(msgid *C.gchar, msgval *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strip_context(msgid, msgval)
	return
}

func Strjoinv(separator *C.gchar, str_array unsafe.Pointer) (_return_ *C.gchar) {
	_return_ = C._g_strjoinv(separator, str_array)
	return
}

func Strlcat(dest *C.gchar, src *C.gchar, dest_size C.gsize) (_return_ C.gsize) {
	_return_ = C._g_strlcat(dest, src, dest_size)
	return
}

func Strlcpy(dest *C.gchar, src *C.gchar, dest_size C.gsize) (_return_ C.gsize) {
	_return_ = C._g_strlcpy(dest, src, dest_size)
	return
}

func Strndup(str *C.gchar, n C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_strndup(str, n)
	return
}

func Strnfill(length C.gsize, fill_char C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_strnfill(length, fill_char)
	return
}

func Strreverse(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C.g_strreverse(string_)
	return
}

func Strrstr(haystack *C.gchar, needle *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strrstr(haystack, needle)
	return
}

func StrrstrLen(haystack *C.gchar, haystack_len C.gssize, needle *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strrstr_len(haystack, haystack_len, needle)
	return
}

func Strsignal(signum C.gint) (_return_ *C.gchar) {
	_return_ = C._g_strsignal(signum)
	return
}

func Strsplit(string_ *C.gchar, delimiter *C.gchar, max_tokens C.gint) (_return_ unsafe.Pointer) {
	_return_ = C._g_strsplit(string_, delimiter, max_tokens)
	return
}

func StrsplitSet(string_ *C.gchar, delimiters *C.gchar, max_tokens C.gint) (_return_ unsafe.Pointer) {
	_return_ = C._g_strsplit_set(string_, delimiters, max_tokens)
	return
}

func StrstrLen(haystack *C.gchar, haystack_len C.gssize, needle *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_strstr_len(haystack, haystack_len, needle)
	return
}

func Strtod(nptr *C.gchar, endptr unsafe.Pointer) (_return_ C.gdouble) {
	_return_ = C._g_strtod(nptr, endptr)
	return
}

func StrvGetType() (_return_ C.GType) {
	_return_ = C.g_strv_get_type()
	return
}

func StrvLength(str_array unsafe.Pointer) (_return_ C.guint) {
	_return_ = C._g_strv_length(str_array)
	return
}

func TestAddDataFunc(testpath *C.char, test_data C.gpointer, test_func C.GTestDataFunc) () {
	C._g_test_add_data_func(testpath, test_data, test_func)
	return
}

func TestAddDataFuncFull(testpath *C.char, test_data C.gpointer, test_func C.GTestDataFunc, data_free_func C.GDestroyNotify) () {
	C._g_test_add_data_func_full(testpath, test_data, test_func, data_free_func)
	return
}

func TestAddFunc(testpath *C.char, test_func C.GTestFunc) () {
	C._g_test_add_func(testpath, test_func)
	return
}

func TestAddVtable(testpath *C.char, data_size C.gsize, test_data C.gpointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) () {
	C._g_test_add_vtable(testpath, data_size, test_data, data_setup, data_test, data_teardown)
	return
}

func TestAssertExpectedMessagesInternal(domain *C.char, file *C.char, line C.int, func_ *C.char) () {
	C._g_test_assert_expected_messages_internal(domain, file, line, func_)
	return
}

func TestBug(bug_uri_snippet *C.char) () {
	C._g_test_bug(bug_uri_snippet)
	return
}

func TestBugBase(uri_pattern *C.char) () {
	C._g_test_bug_base(uri_pattern)
	return
}

func TestCreateCase(test_name *C.char, data_size C.gsize, test_data C.gpointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) (_return_ *C.GTestCase) {
	_return_ = C._g_test_create_case(test_name, data_size, test_data, data_setup, data_test, data_teardown)
	return
}

func TestCreateSuite(suite_name *C.char) (_return_ *C.GTestSuite) {
	_return_ = C._g_test_create_suite(suite_name)
	return
}

func TestExpectMessage(log_domain *C.gchar, log_level C.GLogLevelFlags, pattern *C.gchar) () {
	C._g_test_expect_message(log_domain, log_level, pattern)
	return
}

func TestFail() () {
	C.g_test_fail()
	return
}

func TestGetRoot() (_return_ *C.GTestSuite) {
	_return_ = C.g_test_get_root()
	return
}

func TestLogSetFatalHandler(log_func C.GTestLogFatalFunc, user_data C.gpointer) () {
	C.g_test_log_set_fatal_handler(log_func, user_data)
	return
}

func TestLogTypeName(log_type C.GTestLogType) (_return_ *C.char) {
	_return_ = C._g_test_log_type_name(log_type)
	return
}

func TestQueueDestroy(destroy_func C.GDestroyNotify, destroy_data C.gpointer) () {
	C.g_test_queue_destroy(destroy_func, destroy_data)
	return
}

func TestQueueFree(gfree_pointer C.gpointer) () {
	C.g_test_queue_free(gfree_pointer)
	return
}

func TestRandDouble() (_return_ C.double) {
	_return_ = C.g_test_rand_double()
	return
}

func TestRandDoubleRange(range_start C.double, range_end C.double) (_return_ C.double) {
	_return_ = C.g_test_rand_double_range(range_start, range_end)
	return
}

func TestRandInt() (_return_ C.gint32) {
	_return_ = C.g_test_rand_int()
	return
}

func TestRandIntRange(begin C.gint32, end C.gint32) (_return_ C.gint32) {
	_return_ = C.g_test_rand_int_range(begin, end)
	return
}

func TestRun() (_return_ C.int) {
	_return_ = C.g_test_run()
	return
}

func TestRunSuite(suite *C.GTestSuite) (_return_ C.int) {
	_return_ = C.g_test_run_suite(suite)
	return
}

func TestTimerElapsed() (_return_ C.double) {
	_return_ = C.g_test_timer_elapsed()
	return
}

func TestTimerLast() (_return_ C.double) {
	_return_ = C.g_test_timer_last()
	return
}

func TestTimerStart() () {
	C.g_test_timer_start()
	return
}

func TestTrapAssertions(domain *C.char, file *C.char, line C.int, func_ *C.char, assertion_flags C.guint64, pattern *C.char) () {
	C._g_test_trap_assertions(domain, file, line, func_, assertion_flags, pattern)
	return
}

func TestTrapFork(usec_timeout C.guint64, test_trap_flags C.GTestTrapFlags) (_return_ C.gboolean) {
	_return_ = C.g_test_trap_fork(usec_timeout, test_trap_flags)
	return
}

func TestTrapHasPassed() (_return_ C.gboolean) {
	_return_ = C.g_test_trap_has_passed()
	return
}

func TestTrapReachedTimeout() (_return_ C.gboolean) {
	_return_ = C.g_test_trap_reached_timeout()
	return
}

func TimeoutAdd(interval C.guint, function C.GSourceFunc, data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_timeout_add(interval, function, data)
	return
}

func TimeoutAddFull(priority C.gint, interval C.guint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_timeout_add_full(priority, interval, function, data, notify)
	return
}

func TimeoutAddSeconds(interval C.guint, function C.GSourceFunc, data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_timeout_add_seconds(interval, function, data)
	return
}

func TimeoutAddSecondsFull(priority C.gint, interval C.guint, function C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_timeout_add_seconds_full(priority, interval, function, data, notify)
	return
}

func TimeoutSourceNew(interval C.guint) (_return_ *C.GSource) {
	_return_ = C.g_timeout_source_new(interval)
	return
}

func TimeoutSourceNewSeconds(interval C.guint) (_return_ *C.GSource) {
	_return_ = C.g_timeout_source_new_seconds(interval)
	return
}

func TryMalloc(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc(n_bytes)
	return
}

func TryMalloc0(n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc0(n_bytes)
	return
}

func TryMalloc0N(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc0_n(n_blocks, n_block_bytes)
	return
}

func TryMallocN(n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_malloc_n(n_blocks, n_block_bytes)
	return
}

func TryRealloc(mem C.gpointer, n_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_realloc(mem, n_bytes)
	return
}

func TryReallocN(mem C.gpointer, n_blocks C.gsize, n_block_bytes C.gsize) (_return_ C.gpointer) {
	_return_ = C.g_try_realloc_n(mem, n_blocks, n_block_bytes)
	return
}

func Ucs4ToUtf16(str *C.gunichar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar2, _error_ unsafe.Pointer) {
	_return_ = C._g_ucs4_to_utf16(str, len_, items_read, items_written, _error_)
	return
}

func Ucs4ToUtf8(str *C.gunichar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_ucs4_to_utf8(str, len_, items_read, items_written, _error_)
	return
}

func UnicharBreakType(c C.gunichar) (_return_ C.GUnicodeBreakType) {
	_return_ = C.g_unichar_break_type(c)
	return
}

func UnicharCombiningClass(uc C.gunichar) (_return_ C.gint) {
	_return_ = C.g_unichar_combining_class(uc)
	return
}

func UnicharCompose(a C.gunichar, b C.gunichar, ch *C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_compose(a, b, ch)
	return
}

func UnicharDecompose(ch C.gunichar, a *C.gunichar, b *C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_decompose(ch, a, b)
	return
}

func UnicharDigitValue(c C.gunichar) (_return_ C.gint) {
	_return_ = C.g_unichar_digit_value(c)
	return
}

func UnicharFullyDecompose(ch C.gunichar, compat C.gboolean, result *C.gunichar, result_len C.gsize) (_return_ C.gsize) {
	_return_ = C.g_unichar_fully_decompose(ch, compat, result, result_len)
	return
}

func UnicharGetMirrorChar(ch C.gunichar, mirrored_ch *C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_get_mirror_char(ch, mirrored_ch)
	return
}

func UnicharGetScript(ch C.gunichar) (_return_ C.GUnicodeScript) {
	_return_ = C.g_unichar_get_script(ch)
	return
}

func UnicharIsalnum(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isalnum(c)
	return
}

func UnicharIsalpha(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isalpha(c)
	return
}

func UnicharIscntrl(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_iscntrl(c)
	return
}

func UnicharIsdefined(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isdefined(c)
	return
}

func UnicharIsdigit(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isdigit(c)
	return
}

func UnicharIsgraph(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isgraph(c)
	return
}

func UnicharIslower(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_islower(c)
	return
}

func UnicharIsmark(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_ismark(c)
	return
}

func UnicharIsprint(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isprint(c)
	return
}

func UnicharIspunct(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_ispunct(c)
	return
}

func UnicharIsspace(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isspace(c)
	return
}

func UnicharIstitle(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_istitle(c)
	return
}

func UnicharIsupper(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isupper(c)
	return
}

func UnicharIswide(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_iswide(c)
	return
}

func UnicharIswideCjk(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_iswide_cjk(c)
	return
}

func UnicharIsxdigit(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_isxdigit(c)
	return
}

func UnicharIszerowidth(c C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_iszerowidth(c)
	return
}

func UnicharToUtf8(c C.gunichar, outbuf *C.gchar) (_return_ C.gint) {
	_return_ = C.g_unichar_to_utf8(c, outbuf)
	return
}

func UnicharTolower(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_tolower(c)
	return
}

func UnicharTotitle(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_totitle(c)
	return
}

func UnicharToupper(c C.gunichar) (_return_ C.gunichar) {
	_return_ = C.g_unichar_toupper(c)
	return
}

func UnicharType(c C.gunichar) (_return_ C.GUnicodeType) {
	_return_ = C.g_unichar_type(c)
	return
}

func UnicharValidate(ch C.gunichar) (_return_ C.gboolean) {
	_return_ = C.g_unichar_validate(ch)
	return
}

func UnicharXdigitValue(c C.gunichar) (_return_ C.gint) {
	_return_ = C.g_unichar_xdigit_value(c)
	return
}

func UnicodeCanonicalOrdering(string_ *C.gunichar, len_ C.gsize) () {
	C.g_unicode_canonical_ordering(string_, len_)
	return
}

func UnicodeScriptFromIso15924(iso15924 C.guint32) (_return_ C.GUnicodeScript) {
	_return_ = C.g_unicode_script_from_iso15924(iso15924)
	return
}

func UnicodeScriptToIso15924(script C.GUnicodeScript) (_return_ C.guint32) {
	_return_ = C.g_unicode_script_to_iso15924(script)
	return
}

func UnixErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_unix_error_quark()
	return
}

func UnixOpenPipe(fds *C.gint, flags C.gint) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_unix_open_pipe(fds, flags, _error_)
	return
}

func UnixSetFdNonblocking(fd C.gint, nonblock C.gboolean) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._g_unix_set_fd_nonblocking(fd, nonblock, _error_)
	return
}

func UnixSignalAdd(signum C.gint, handler C.GSourceFunc, user_data C.gpointer) (_return_ C.guint) {
	_return_ = C.g_unix_signal_add(signum, handler, user_data)
	return
}

func UnixSignalAddFull(priority C.gint, signum C.gint, handler C.GSourceFunc, user_data C.gpointer, notify C.GDestroyNotify) (_return_ C.guint) {
	_return_ = C.g_unix_signal_add_full(priority, signum, handler, user_data, notify)
	return
}

func UnixSignalSourceNew(signum C.gint) (_return_ *C.GSource) {
	_return_ = C.g_unix_signal_source_new(signum)
	return
}

func Unlink(filename *C.gchar) (_return_ C.int) {
	_return_ = C._g_unlink(filename)
	return
}

func Unsetenv(variable *C.gchar) () {
	C._g_unsetenv(variable)
	return
}

func UriEscapeString(unescaped *C.char, reserved_chars_allowed *C.char, allow_utf8 C.gboolean) (_return_ *C.char) {
	_return_ = C._g_uri_escape_string(unescaped, reserved_chars_allowed, allow_utf8)
	return
}

func UriListExtractUris(uri_list *C.gchar) (_return_ unsafe.Pointer) {
	_return_ = C._g_uri_list_extract_uris(uri_list)
	return
}

func UriParseScheme(uri *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_parse_scheme(uri)
	return
}

func UriUnescapeSegment(escaped_string *C.char, escaped_string_end *C.char, illegal_characters *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_unescape_segment(escaped_string, escaped_string_end, illegal_characters)
	return
}

func UriUnescapeString(escaped_string *C.char, illegal_characters *C.char) (_return_ *C.char) {
	_return_ = C._g_uri_unescape_string(escaped_string, illegal_characters)
	return
}

func Usleep(microseconds C.gulong) () {
	C.g_usleep(microseconds)
	return
}

func Utf16ToUcs4(str *C.gunichar2, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar, _error_ unsafe.Pointer) {
	_return_ = C._g_utf16_to_ucs4(str, len_, items_read, items_written, _error_)
	return
}

func Utf16ToUtf8(str *C.gunichar2, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gchar, _error_ unsafe.Pointer) {
	_return_ = C._g_utf16_to_utf8(str, len_, items_read, items_written, _error_)
	return
}

func Utf8Casefold(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_casefold(str, len_)
	return
}

func Utf8Collate(str1 *C.gchar, str2 *C.gchar) (_return_ C.gint) {
	_return_ = C._g_utf8_collate(str1, str2)
	return
}

func Utf8CollateKey(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_collate_key(str, len_)
	return
}

func Utf8CollateKeyForFilename(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_collate_key_for_filename(str, len_)
	return
}

func Utf8FindNextChar(p *C.gchar, end *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_utf8_find_next_char(p, end)
	return
}

func Utf8FindPrevChar(str *C.gchar, p *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_utf8_find_prev_char(str, p)
	return
}

func Utf8GetChar(p *C.gchar) (_return_ C.gunichar) {
	_return_ = C._g_utf8_get_char(p)
	return
}

func Utf8GetCharValidated(p *C.gchar, max_len C.gssize) (_return_ C.gunichar) {
	_return_ = C._g_utf8_get_char_validated(p, max_len)
	return
}

func Utf8Normalize(str *C.gchar, len_ C.gssize, mode C.GNormalizeMode) (_return_ *C.gchar) {
	_return_ = C._g_utf8_normalize(str, len_, mode)
	return
}

func Utf8OffsetToPointer(str *C.gchar, offset C.glong) (_return_ *C.gchar) {
	_return_ = C._g_utf8_offset_to_pointer(str, offset)
	return
}

func Utf8PointerToOffset(str *C.gchar, pos *C.gchar) (_return_ C.glong) {
	_return_ = C._g_utf8_pointer_to_offset(str, pos)
	return
}

func Utf8PrevChar(p *C.gchar) (_return_ *C.gchar) {
	_return_ = C._g_utf8_prev_char(p)
	return
}

func Utf8Strchr(p *C.gchar, len_ C.gssize, c C.gunichar) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strchr(p, len_, c)
	return
}

func Utf8Strdown(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strdown(str, len_)
	return
}

func Utf8Strlen(p *C.gchar, max C.gssize) (_return_ C.glong) {
	_return_ = C._g_utf8_strlen(p, max)
	return
}

func Utf8Strncpy(dest *C.gchar, src *C.gchar, n C.gsize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strncpy(dest, src, n)
	return
}

func Utf8Strrchr(p *C.gchar, len_ C.gssize, c C.gunichar) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strrchr(p, len_, c)
	return
}

func Utf8Strreverse(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strreverse(str, len_)
	return
}

func Utf8Strup(str *C.gchar, len_ C.gssize) (_return_ *C.gchar) {
	_return_ = C._g_utf8_strup(str, len_)
	return
}

func Utf8Substring(str *C.gchar, start_pos C.glong, end_pos C.glong) (_return_ *C.gchar) {
	_return_ = C._g_utf8_substring(str, start_pos, end_pos)
	return
}

func Utf8ToUcs4(str *C.gchar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar, _error_ unsafe.Pointer) {
	_return_ = C._g_utf8_to_ucs4(str, len_, items_read, items_written, _error_)
	return
}

func Utf8ToUcs4Fast(str *C.gchar, len_ C.glong, items_written *C.glong) (_return_ *C.gunichar) {
	_return_ = C._g_utf8_to_ucs4_fast(str, len_, items_written)
	return
}

func Utf8ToUtf16(str *C.gchar, len_ C.glong, items_read *C.glong, items_written *C.glong) (_return_ *C.gunichar2, _error_ unsafe.Pointer) {
	_return_ = C._g_utf8_to_utf16(str, len_, items_read, items_written, _error_)
	return
}

func Utf8Validate(str *C.gchar, max_len C.gssize) (_return_ C.gboolean, end unsafe.Pointer) {
	_return_ = C._g_utf8_validate(str, max_len, end)
	return
}

func WarnMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, warnexpr *C.char) () {
	C._g_warn_message(domain, file, line, func_, warnexpr)
	return
}

const ASCII_ALNUM = C.G_ASCII_ALNUM
const ASCII_ALPHA = C.G_ASCII_ALPHA
const ASCII_CNTRL = C.G_ASCII_CNTRL
const ASCII_DIGIT = C.G_ASCII_DIGIT
const ASCII_GRAPH = C.G_ASCII_GRAPH
const ASCII_LOWER = C.G_ASCII_LOWER
const ASCII_PRINT = C.G_ASCII_PRINT
const ASCII_PUNCT = C.G_ASCII_PUNCT
const ASCII_SPACE = C.G_ASCII_SPACE
const ASCII_UPPER = C.G_ASCII_UPPER
const ASCII_XDIGIT = C.G_ASCII_XDIGIT
const BOOKMARK_FILE_ERROR_INVALID_URI = C.G_BOOKMARK_FILE_ERROR_INVALID_URI
const BOOKMARK_FILE_ERROR_INVALID_VALUE = C.G_BOOKMARK_FILE_ERROR_INVALID_VALUE
const BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = C.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED
const BOOKMARK_FILE_ERROR_URI_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND
const BOOKMARK_FILE_ERROR_READ = C.G_BOOKMARK_FILE_ERROR_READ
const BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = C.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING
const BOOKMARK_FILE_ERROR_WRITE = C.G_BOOKMARK_FILE_ERROR_WRITE
const BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
const CHECKSUM_MD5 = C.G_CHECKSUM_MD5
const CHECKSUM_SHA1 = C.G_CHECKSUM_SHA1
const CHECKSUM_SHA256 = C.G_CHECKSUM_SHA256
const CHECKSUM_SHA512 = C.G_CHECKSUM_SHA512
const CONVERT_ERROR_NO_CONVERSION = C.G_CONVERT_ERROR_NO_CONVERSION
const CONVERT_ERROR_ILLEGAL_SEQUENCE = C.G_CONVERT_ERROR_ILLEGAL_SEQUENCE
const CONVERT_ERROR_FAILED = C.G_CONVERT_ERROR_FAILED
const CONVERT_ERROR_PARTIAL_INPUT = C.G_CONVERT_ERROR_PARTIAL_INPUT
const CONVERT_ERROR_BAD_URI = C.G_CONVERT_ERROR_BAD_URI
const CONVERT_ERROR_NOT_ABSOLUTE_PATH = C.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
const DATE_DAY = C.G_DATE_DAY
const DATE_MONTH = C.G_DATE_MONTH
const DATE_YEAR = C.G_DATE_YEAR
const DATE_BAD_MONTH = C.G_DATE_BAD_MONTH
const DATE_JANUARY = C.G_DATE_JANUARY
const DATE_FEBRUARY = C.G_DATE_FEBRUARY
const DATE_MARCH = C.G_DATE_MARCH
const DATE_APRIL = C.G_DATE_APRIL
const DATE_MAY = C.G_DATE_MAY
const DATE_JUNE = C.G_DATE_JUNE
const DATE_JULY = C.G_DATE_JULY
const DATE_AUGUST = C.G_DATE_AUGUST
const DATE_SEPTEMBER = C.G_DATE_SEPTEMBER
const DATE_OCTOBER = C.G_DATE_OCTOBER
const DATE_NOVEMBER = C.G_DATE_NOVEMBER
const DATE_DECEMBER = C.G_DATE_DECEMBER
const DATE_BAD_WEEKDAY = C.G_DATE_BAD_WEEKDAY
const DATE_MONDAY = C.G_DATE_MONDAY
const DATE_TUESDAY = C.G_DATE_TUESDAY
const DATE_WEDNESDAY = C.G_DATE_WEDNESDAY
const DATE_THURSDAY = C.G_DATE_THURSDAY
const DATE_FRIDAY = C.G_DATE_FRIDAY
const DATE_SATURDAY = C.G_DATE_SATURDAY
const DATE_SUNDAY = C.G_DATE_SUNDAY
const ERR_UNKNOWN = C.G_ERR_UNKNOWN
const ERR_UNEXP_EOF = C.G_ERR_UNEXP_EOF
const ERR_UNEXP_EOF_IN_STRING = C.G_ERR_UNEXP_EOF_IN_STRING
const ERR_UNEXP_EOF_IN_COMMENT = C.G_ERR_UNEXP_EOF_IN_COMMENT
const ERR_NON_DIGIT_IN_CONST = C.G_ERR_NON_DIGIT_IN_CONST
const ERR_DIGIT_RADIX = C.G_ERR_DIGIT_RADIX
const ERR_FLOAT_RADIX = C.G_ERR_FLOAT_RADIX
const ERR_FLOAT_MALFORMED = C.G_ERR_FLOAT_MALFORMED
const FILE_ERROR_EXIST = C.G_FILE_ERROR_EXIST
const FILE_ERROR_ISDIR = C.G_FILE_ERROR_ISDIR
const FILE_ERROR_ACCES = C.G_FILE_ERROR_ACCES
const FILE_ERROR_NAMETOOLONG = C.G_FILE_ERROR_NAMETOOLONG
const FILE_ERROR_NOENT = C.G_FILE_ERROR_NOENT
const FILE_ERROR_NOTDIR = C.G_FILE_ERROR_NOTDIR
const FILE_ERROR_NXIO = C.G_FILE_ERROR_NXIO
const FILE_ERROR_NODEV = C.G_FILE_ERROR_NODEV
const FILE_ERROR_ROFS = C.G_FILE_ERROR_ROFS
const FILE_ERROR_TXTBSY = C.G_FILE_ERROR_TXTBSY
const FILE_ERROR_FAULT = C.G_FILE_ERROR_FAULT
const FILE_ERROR_LOOP = C.G_FILE_ERROR_LOOP
const FILE_ERROR_NOSPC = C.G_FILE_ERROR_NOSPC
const FILE_ERROR_NOMEM = C.G_FILE_ERROR_NOMEM
const FILE_ERROR_MFILE = C.G_FILE_ERROR_MFILE
const FILE_ERROR_NFILE = C.G_FILE_ERROR_NFILE
const FILE_ERROR_BADF = C.G_FILE_ERROR_BADF
const FILE_ERROR_INVAL = C.G_FILE_ERROR_INVAL
const FILE_ERROR_PIPE = C.G_FILE_ERROR_PIPE
const FILE_ERROR_AGAIN = C.G_FILE_ERROR_AGAIN
const FILE_ERROR_INTR = C.G_FILE_ERROR_INTR
const FILE_ERROR_IO = C.G_FILE_ERROR_IO
const FILE_ERROR_PERM = C.G_FILE_ERROR_PERM
const FILE_ERROR_NOSYS = C.G_FILE_ERROR_NOSYS
const FILE_ERROR_FAILED = C.G_FILE_ERROR_FAILED
const FILE_TEST_IS_REGULAR = C.G_FILE_TEST_IS_REGULAR
const FILE_TEST_IS_SYMLINK = C.G_FILE_TEST_IS_SYMLINK
const FILE_TEST_IS_DIR = C.G_FILE_TEST_IS_DIR
const FILE_TEST_IS_EXECUTABLE = C.G_FILE_TEST_IS_EXECUTABLE
const FILE_TEST_EXISTS = C.G_FILE_TEST_EXISTS
const FORMAT_SIZE_DEFAULT = C.G_FORMAT_SIZE_DEFAULT
const FORMAT_SIZE_LONG_FORMAT = C.G_FORMAT_SIZE_LONG_FORMAT
const FORMAT_SIZE_IEC_UNITS = C.G_FORMAT_SIZE_IEC_UNITS
const HOOK_FLAG_ACTIVE = C.G_HOOK_FLAG_ACTIVE
const HOOK_FLAG_IN_CALL = C.G_HOOK_FLAG_IN_CALL
const HOOK_FLAG_MASK = C.G_HOOK_FLAG_MASK
const IO_CHANNEL_ERROR_FBIG = C.G_IO_CHANNEL_ERROR_FBIG
const IO_CHANNEL_ERROR_INVAL = C.G_IO_CHANNEL_ERROR_INVAL
const IO_CHANNEL_ERROR_IO = C.G_IO_CHANNEL_ERROR_IO
const IO_CHANNEL_ERROR_ISDIR = C.G_IO_CHANNEL_ERROR_ISDIR
const IO_CHANNEL_ERROR_NOSPC = C.G_IO_CHANNEL_ERROR_NOSPC
const IO_CHANNEL_ERROR_NXIO = C.G_IO_CHANNEL_ERROR_NXIO
const IO_CHANNEL_ERROR_OVERFLOW = C.G_IO_CHANNEL_ERROR_OVERFLOW
const IO_CHANNEL_ERROR_PIPE = C.G_IO_CHANNEL_ERROR_PIPE
const IO_CHANNEL_ERROR_FAILED = C.G_IO_CHANNEL_ERROR_FAILED
const IO_IN = C.G_IO_IN
const IO_OUT = C.G_IO_OUT
const IO_PRI = C.G_IO_PRI
const IO_ERR = C.G_IO_ERR
const IO_HUP = C.G_IO_HUP
const IO_NVAL = C.G_IO_NVAL
const IO_ERROR_NONE = C.G_IO_ERROR_NONE
const IO_ERROR_AGAIN = C.G_IO_ERROR_AGAIN
const IO_ERROR_INVAL = C.G_IO_ERROR_INVAL
const IO_ERROR_UNKNOWN = C.G_IO_ERROR_UNKNOWN
const IO_FLAG_APPEND = C.G_IO_FLAG_APPEND
const IO_FLAG_NONBLOCK = C.G_IO_FLAG_NONBLOCK
const IO_FLAG_IS_READABLE = C.G_IO_FLAG_IS_READABLE
const IO_FLAG_IS_WRITABLE = C.G_IO_FLAG_IS_WRITABLE
const IO_FLAG_IS_SEEKABLE = C.G_IO_FLAG_IS_SEEKABLE
const IO_FLAG_MASK = C.G_IO_FLAG_MASK
const IO_FLAG_GET_MASK = C.G_IO_FLAG_GET_MASK
const IO_FLAG_SET_MASK = C.G_IO_FLAG_SET_MASK
const IO_STATUS_ERROR = C.G_IO_STATUS_ERROR
const IO_STATUS_NORMAL = C.G_IO_STATUS_NORMAL
const IO_STATUS_EOF = C.G_IO_STATUS_EOF
const IO_STATUS_AGAIN = C.G_IO_STATUS_AGAIN
const KEY_FILE_ERROR_UNKNOWN_ENCODING = C.G_KEY_FILE_ERROR_UNKNOWN_ENCODING
const KEY_FILE_ERROR_PARSE = C.G_KEY_FILE_ERROR_PARSE
const KEY_FILE_ERROR_NOT_FOUND = C.G_KEY_FILE_ERROR_NOT_FOUND
const KEY_FILE_ERROR_KEY_NOT_FOUND = C.G_KEY_FILE_ERROR_KEY_NOT_FOUND
const KEY_FILE_ERROR_GROUP_NOT_FOUND = C.G_KEY_FILE_ERROR_GROUP_NOT_FOUND
const KEY_FILE_ERROR_INVALID_VALUE = C.G_KEY_FILE_ERROR_INVALID_VALUE
const KEY_FILE_NONE = C.G_KEY_FILE_NONE
const KEY_FILE_KEEP_COMMENTS = C.G_KEY_FILE_KEEP_COMMENTS
const KEY_FILE_KEEP_TRANSLATIONS = C.G_KEY_FILE_KEEP_TRANSLATIONS
const LOG_FLAG_RECURSION = C.G_LOG_FLAG_RECURSION
const LOG_FLAG_FATAL = C.G_LOG_FLAG_FATAL
const LOG_LEVEL_ERROR = C.G_LOG_LEVEL_ERROR
const LOG_LEVEL_CRITICAL = C.G_LOG_LEVEL_CRITICAL
const LOG_LEVEL_WARNING = C.G_LOG_LEVEL_WARNING
const LOG_LEVEL_MESSAGE = C.G_LOG_LEVEL_MESSAGE
const LOG_LEVEL_INFO = C.G_LOG_LEVEL_INFO
const LOG_LEVEL_DEBUG = C.G_LOG_LEVEL_DEBUG
const LOG_LEVEL_MASK = C.G_LOG_LEVEL_MASK
const MARKUP_COLLECT_INVALID = C.G_MARKUP_COLLECT_INVALID
const MARKUP_COLLECT_STRING = C.G_MARKUP_COLLECT_STRING
const MARKUP_COLLECT_STRDUP = C.G_MARKUP_COLLECT_STRDUP
const MARKUP_COLLECT_BOOLEAN = C.G_MARKUP_COLLECT_BOOLEAN
const MARKUP_COLLECT_TRISTATE = C.G_MARKUP_COLLECT_TRISTATE
const MARKUP_COLLECT_OPTIONAL = C.G_MARKUP_COLLECT_OPTIONAL
const MARKUP_ERROR_BAD_UTF8 = C.G_MARKUP_ERROR_BAD_UTF8
const MARKUP_ERROR_EMPTY = C.G_MARKUP_ERROR_EMPTY
const MARKUP_ERROR_PARSE = C.G_MARKUP_ERROR_PARSE
const MARKUP_ERROR_UNKNOWN_ELEMENT = C.G_MARKUP_ERROR_UNKNOWN_ELEMENT
const MARKUP_ERROR_UNKNOWN_ATTRIBUTE = C.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE
const MARKUP_ERROR_INVALID_CONTENT = C.G_MARKUP_ERROR_INVALID_CONTENT
const MARKUP_ERROR_MISSING_ATTRIBUTE = C.G_MARKUP_ERROR_MISSING_ATTRIBUTE
const MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG = C.G_MARKUP_DO_NOT_USE_THIS_UNSUPPORTED_FLAG
const MARKUP_TREAT_CDATA_AS_TEXT = C.G_MARKUP_TREAT_CDATA_AS_TEXT
const MARKUP_PREFIX_ERROR_POSITION = C.G_MARKUP_PREFIX_ERROR_POSITION
const NORMALIZE_DEFAULT = C.G_NORMALIZE_DEFAULT
const NORMALIZE_NFD = C.G_NORMALIZE_NFD
const NORMALIZE_DEFAULT_COMPOSE = C.G_NORMALIZE_DEFAULT_COMPOSE
const NORMALIZE_NFC = C.G_NORMALIZE_NFC
const NORMALIZE_ALL = C.G_NORMALIZE_ALL
const NORMALIZE_NFKD = C.G_NORMALIZE_NFKD
const NORMALIZE_ALL_COMPOSE = C.G_NORMALIZE_ALL_COMPOSE
const NORMALIZE_NFKC = C.G_NORMALIZE_NFKC
const ONCE_STATUS_NOTCALLED = C.G_ONCE_STATUS_NOTCALLED
const ONCE_STATUS_PROGRESS = C.G_ONCE_STATUS_PROGRESS
const ONCE_STATUS_READY = C.G_ONCE_STATUS_READY
const OPTION_ARG_NONE = C.G_OPTION_ARG_NONE
const OPTION_ARG_STRING = C.G_OPTION_ARG_STRING
const OPTION_ARG_INT = C.G_OPTION_ARG_INT
const OPTION_ARG_CALLBACK = C.G_OPTION_ARG_CALLBACK
const OPTION_ARG_FILENAME = C.G_OPTION_ARG_FILENAME
const OPTION_ARG_STRING_ARRAY = C.G_OPTION_ARG_STRING_ARRAY
const OPTION_ARG_FILENAME_ARRAY = C.G_OPTION_ARG_FILENAME_ARRAY
const OPTION_ARG_DOUBLE = C.G_OPTION_ARG_DOUBLE
const OPTION_ARG_INT64 = C.G_OPTION_ARG_INT64
const OPTION_ERROR_UNKNOWN_OPTION = C.G_OPTION_ERROR_UNKNOWN_OPTION
const OPTION_ERROR_BAD_VALUE = C.G_OPTION_ERROR_BAD_VALUE
const OPTION_ERROR_FAILED = C.G_OPTION_ERROR_FAILED
const OPTION_FLAG_HIDDEN = C.G_OPTION_FLAG_HIDDEN
const OPTION_FLAG_IN_MAIN = C.G_OPTION_FLAG_IN_MAIN
const OPTION_FLAG_REVERSE = C.G_OPTION_FLAG_REVERSE
const OPTION_FLAG_NO_ARG = C.G_OPTION_FLAG_NO_ARG
const OPTION_FLAG_FILENAME = C.G_OPTION_FLAG_FILENAME
const OPTION_FLAG_OPTIONAL_ARG = C.G_OPTION_FLAG_OPTIONAL_ARG
const OPTION_FLAG_NOALIAS = C.G_OPTION_FLAG_NOALIAS
const REGEX_CASELESS = C.G_REGEX_CASELESS
const REGEX_MULTILINE = C.G_REGEX_MULTILINE
const REGEX_DOTALL = C.G_REGEX_DOTALL
const REGEX_EXTENDED = C.G_REGEX_EXTENDED
const REGEX_ANCHORED = C.G_REGEX_ANCHORED
const REGEX_DOLLAR_ENDONLY = C.G_REGEX_DOLLAR_ENDONLY
const REGEX_UNGREEDY = C.G_REGEX_UNGREEDY
const REGEX_RAW = C.G_REGEX_RAW
const REGEX_NO_AUTO_CAPTURE = C.G_REGEX_NO_AUTO_CAPTURE
const REGEX_OPTIMIZE = C.G_REGEX_OPTIMIZE
const REGEX_FIRSTLINE = C.G_REGEX_FIRSTLINE
const REGEX_DUPNAMES = C.G_REGEX_DUPNAMES
const REGEX_NEWLINE_CR = C.G_REGEX_NEWLINE_CR
const REGEX_NEWLINE_LF = C.G_REGEX_NEWLINE_LF
const REGEX_NEWLINE_CRLF = C.G_REGEX_NEWLINE_CRLF
const REGEX_NEWLINE_ANYCRLF = C.G_REGEX_NEWLINE_ANYCRLF
const REGEX_BSR_ANYCRLF = C.G_REGEX_BSR_ANYCRLF
const REGEX_JAVASCRIPT_COMPAT = C.G_REGEX_JAVASCRIPT_COMPAT
const REGEX_ERROR_COMPILE = C.G_REGEX_ERROR_COMPILE
const REGEX_ERROR_OPTIMIZE = C.G_REGEX_ERROR_OPTIMIZE
const REGEX_ERROR_REPLACE = C.G_REGEX_ERROR_REPLACE
const REGEX_ERROR_MATCH = C.G_REGEX_ERROR_MATCH
const REGEX_ERROR_INTERNAL = C.G_REGEX_ERROR_INTERNAL
const REGEX_ERROR_STRAY_BACKSLASH = C.G_REGEX_ERROR_STRAY_BACKSLASH
const REGEX_ERROR_MISSING_CONTROL_CHAR = C.G_REGEX_ERROR_MISSING_CONTROL_CHAR
const REGEX_ERROR_UNRECOGNIZED_ESCAPE = C.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE
const REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = C.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER
const REGEX_ERROR_QUANTIFIER_TOO_BIG = C.G_REGEX_ERROR_QUANTIFIER_TOO_BIG
const REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = C.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS
const REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = C.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS
const REGEX_ERROR_RANGE_OUT_OF_ORDER = C.G_REGEX_ERROR_RANGE_OUT_OF_ORDER
const REGEX_ERROR_NOTHING_TO_REPEAT = C.G_REGEX_ERROR_NOTHING_TO_REPEAT
const REGEX_ERROR_UNRECOGNIZED_CHARACTER = C.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER
const REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = C.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS
const REGEX_ERROR_UNMATCHED_PARENTHESIS = C.G_REGEX_ERROR_UNMATCHED_PARENTHESIS
const REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = C.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE
const REGEX_ERROR_UNTERMINATED_COMMENT = C.G_REGEX_ERROR_UNTERMINATED_COMMENT
const REGEX_ERROR_EXPRESSION_TOO_LARGE = C.G_REGEX_ERROR_EXPRESSION_TOO_LARGE
const REGEX_ERROR_MEMORY_ERROR = C.G_REGEX_ERROR_MEMORY_ERROR
const REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = C.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND
const REGEX_ERROR_MALFORMED_CONDITION = C.G_REGEX_ERROR_MALFORMED_CONDITION
const REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = C.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES
const REGEX_ERROR_ASSERTION_EXPECTED = C.G_REGEX_ERROR_ASSERTION_EXPECTED
const REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = C.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME
const REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = C.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED
const REGEX_ERROR_HEX_CODE_TOO_LARGE = C.G_REGEX_ERROR_HEX_CODE_TOO_LARGE
const REGEX_ERROR_INVALID_CONDITION = C.G_REGEX_ERROR_INVALID_CONDITION
const REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = C.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND
const REGEX_ERROR_INFINITE_LOOP = C.G_REGEX_ERROR_INFINITE_LOOP
const REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR
const REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = C.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME
const REGEX_ERROR_MALFORMED_PROPERTY = C.G_REGEX_ERROR_MALFORMED_PROPERTY
const REGEX_ERROR_UNKNOWN_PROPERTY = C.G_REGEX_ERROR_UNKNOWN_PROPERTY
const REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = C.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG
const REGEX_ERROR_TOO_MANY_SUBPATTERNS = C.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS
const REGEX_ERROR_INVALID_OCTAL_VALUE = C.G_REGEX_ERROR_INVALID_OCTAL_VALUE
const REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = C.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE
const REGEX_ERROR_DEFINE_REPETION = C.G_REGEX_ERROR_DEFINE_REPETION
const REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = C.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS
const REGEX_ERROR_MISSING_BACK_REFERENCE = C.G_REGEX_ERROR_MISSING_BACK_REFERENCE
const REGEX_ERROR_INVALID_RELATIVE_REFERENCE = C.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN
const REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = C.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB
const REGEX_ERROR_NUMBER_TOO_BIG = C.G_REGEX_ERROR_NUMBER_TOO_BIG
const REGEX_ERROR_MISSING_SUBPATTERN_NAME = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME
const REGEX_ERROR_MISSING_DIGIT = C.G_REGEX_ERROR_MISSING_DIGIT
const REGEX_ERROR_INVALID_DATA_CHARACTER = C.G_REGEX_ERROR_INVALID_DATA_CHARACTER
const REGEX_ERROR_EXTRA_SUBPATTERN_NAME = C.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED
const REGEX_ERROR_INVALID_CONTROL_CHAR = C.G_REGEX_ERROR_INVALID_CONTROL_CHAR
const REGEX_ERROR_MISSING_NAME = C.G_REGEX_ERROR_MISSING_NAME
const REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = C.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS
const REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = C.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES
const REGEX_ERROR_NAME_TOO_LONG = C.G_REGEX_ERROR_NAME_TOO_LONG
const REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = C.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE
const REGEX_MATCH_ANCHORED = C.G_REGEX_MATCH_ANCHORED
const REGEX_MATCH_NOTBOL = C.G_REGEX_MATCH_NOTBOL
const REGEX_MATCH_NOTEOL = C.G_REGEX_MATCH_NOTEOL
const REGEX_MATCH_NOTEMPTY = C.G_REGEX_MATCH_NOTEMPTY
const REGEX_MATCH_PARTIAL = C.G_REGEX_MATCH_PARTIAL
const REGEX_MATCH_NEWLINE_CR = C.G_REGEX_MATCH_NEWLINE_CR
const REGEX_MATCH_NEWLINE_LF = C.G_REGEX_MATCH_NEWLINE_LF
const REGEX_MATCH_NEWLINE_CRLF = C.G_REGEX_MATCH_NEWLINE_CRLF
const REGEX_MATCH_NEWLINE_ANY = C.G_REGEX_MATCH_NEWLINE_ANY
const REGEX_MATCH_NEWLINE_ANYCRLF = C.G_REGEX_MATCH_NEWLINE_ANYCRLF
const REGEX_MATCH_BSR_ANYCRLF = C.G_REGEX_MATCH_BSR_ANYCRLF
const REGEX_MATCH_BSR_ANY = C.G_REGEX_MATCH_BSR_ANY
const REGEX_MATCH_PARTIAL_SOFT = C.G_REGEX_MATCH_PARTIAL_SOFT
const REGEX_MATCH_PARTIAL_HARD = C.G_REGEX_MATCH_PARTIAL_HARD
const REGEX_MATCH_NOTEMPTY_ATSTART = C.G_REGEX_MATCH_NOTEMPTY_ATSTART
const SEEK_CUR = C.G_SEEK_CUR
const SEEK_SET = C.G_SEEK_SET
const SEEK_END = C.G_SEEK_END
const SHELL_ERROR_BAD_QUOTING = C.G_SHELL_ERROR_BAD_QUOTING
const SHELL_ERROR_EMPTY_STRING = C.G_SHELL_ERROR_EMPTY_STRING
const SHELL_ERROR_FAILED = C.G_SHELL_ERROR_FAILED
const SLICE_CONFIG_ALWAYS_MALLOC = C.G_SLICE_CONFIG_ALWAYS_MALLOC
const SLICE_CONFIG_BYPASS_MAGAZINES = C.G_SLICE_CONFIG_BYPASS_MAGAZINES
const SLICE_CONFIG_WORKING_SET_MSECS = C.G_SLICE_CONFIG_WORKING_SET_MSECS
const SLICE_CONFIG_COLOR_INCREMENT = C.G_SLICE_CONFIG_COLOR_INCREMENT
const SLICE_CONFIG_CHUNK_SIZES = C.G_SLICE_CONFIG_CHUNK_SIZES
const SLICE_CONFIG_CONTENTION_COUNTER = C.G_SLICE_CONFIG_CONTENTION_COUNTER
const SPAWN_ERROR_FORK = C.G_SPAWN_ERROR_FORK
const SPAWN_ERROR_READ = C.G_SPAWN_ERROR_READ
const SPAWN_ERROR_CHDIR = C.G_SPAWN_ERROR_CHDIR
const SPAWN_ERROR_ACCES = C.G_SPAWN_ERROR_ACCES
const SPAWN_ERROR_PERM = C.G_SPAWN_ERROR_PERM
const SPAWN_ERROR_TOO_BIG = C.G_SPAWN_ERROR_TOO_BIG
const SPAWN_ERROR_2BIG = C.G_SPAWN_ERROR_2BIG
const SPAWN_ERROR_NOEXEC = C.G_SPAWN_ERROR_NOEXEC
const SPAWN_ERROR_NAMETOOLONG = C.G_SPAWN_ERROR_NAMETOOLONG
const SPAWN_ERROR_NOENT = C.G_SPAWN_ERROR_NOENT
const SPAWN_ERROR_NOMEM = C.G_SPAWN_ERROR_NOMEM
const SPAWN_ERROR_NOTDIR = C.G_SPAWN_ERROR_NOTDIR
const SPAWN_ERROR_LOOP = C.G_SPAWN_ERROR_LOOP
const SPAWN_ERROR_TXTBUSY = C.G_SPAWN_ERROR_TXTBUSY
const SPAWN_ERROR_IO = C.G_SPAWN_ERROR_IO
const SPAWN_ERROR_NFILE = C.G_SPAWN_ERROR_NFILE
const SPAWN_ERROR_MFILE = C.G_SPAWN_ERROR_MFILE
const SPAWN_ERROR_INVAL = C.G_SPAWN_ERROR_INVAL
const SPAWN_ERROR_ISDIR = C.G_SPAWN_ERROR_ISDIR
const SPAWN_ERROR_LIBBAD = C.G_SPAWN_ERROR_LIBBAD
const SPAWN_ERROR_FAILED = C.G_SPAWN_ERROR_FAILED
const SPAWN_LEAVE_DESCRIPTORS_OPEN = C.G_SPAWN_LEAVE_DESCRIPTORS_OPEN
const SPAWN_DO_NOT_REAP_CHILD = C.G_SPAWN_DO_NOT_REAP_CHILD
const SPAWN_SEARCH_PATH = C.G_SPAWN_SEARCH_PATH
const SPAWN_STDOUT_TO_DEV_NULL = C.G_SPAWN_STDOUT_TO_DEV_NULL
const SPAWN_STDERR_TO_DEV_NULL = C.G_SPAWN_STDERR_TO_DEV_NULL
const SPAWN_CHILD_INHERITS_STDIN = C.G_SPAWN_CHILD_INHERITS_STDIN
const SPAWN_FILE_AND_ARGV_ZERO = C.G_SPAWN_FILE_AND_ARGV_ZERO
const SPAWN_SEARCH_PATH_FROM_ENVP = C.G_SPAWN_SEARCH_PATH_FROM_ENVP
const TEST_LOG_NONE = C.G_TEST_LOG_NONE
const TEST_LOG_ERROR = C.G_TEST_LOG_ERROR
const TEST_LOG_START_BINARY = C.G_TEST_LOG_START_BINARY
const TEST_LOG_LIST_CASE = C.G_TEST_LOG_LIST_CASE
const TEST_LOG_SKIP_CASE = C.G_TEST_LOG_SKIP_CASE
const TEST_LOG_START_CASE = C.G_TEST_LOG_START_CASE
const TEST_LOG_STOP_CASE = C.G_TEST_LOG_STOP_CASE
const TEST_LOG_MIN_RESULT = C.G_TEST_LOG_MIN_RESULT
const TEST_LOG_MAX_RESULT = C.G_TEST_LOG_MAX_RESULT
const TEST_LOG_MESSAGE = C.G_TEST_LOG_MESSAGE
const TEST_TRAP_SILENCE_STDOUT = C.G_TEST_TRAP_SILENCE_STDOUT
const TEST_TRAP_SILENCE_STDERR = C.G_TEST_TRAP_SILENCE_STDERR
const TEST_TRAP_INHERIT_STDIN = C.G_TEST_TRAP_INHERIT_STDIN
const THREAD_ERROR_AGAIN = C.G_THREAD_ERROR_AGAIN
const TIME_TYPE_STANDARD = C.G_TIME_TYPE_STANDARD
const TIME_TYPE_DAYLIGHT = C.G_TIME_TYPE_DAYLIGHT
const TIME_TYPE_UNIVERSAL = C.G_TIME_TYPE_UNIVERSAL
const TOKEN_EOF = C.G_TOKEN_EOF
const TOKEN_LEFT_PAREN = C.G_TOKEN_LEFT_PAREN
const TOKEN_RIGHT_PAREN = C.G_TOKEN_RIGHT_PAREN
const TOKEN_LEFT_CURLY = C.G_TOKEN_LEFT_CURLY
const TOKEN_RIGHT_CURLY = C.G_TOKEN_RIGHT_CURLY
const TOKEN_LEFT_BRACE = C.G_TOKEN_LEFT_BRACE
const TOKEN_RIGHT_BRACE = C.G_TOKEN_RIGHT_BRACE
const TOKEN_EQUAL_SIGN = C.G_TOKEN_EQUAL_SIGN
const TOKEN_COMMA = C.G_TOKEN_COMMA
const TOKEN_NONE = C.G_TOKEN_NONE
const TOKEN_ERROR = C.G_TOKEN_ERROR
const TOKEN_CHAR = C.G_TOKEN_CHAR
const TOKEN_BINARY = C.G_TOKEN_BINARY
const TOKEN_OCTAL = C.G_TOKEN_OCTAL
const TOKEN_INT = C.G_TOKEN_INT
const TOKEN_HEX = C.G_TOKEN_HEX
const TOKEN_FLOAT = C.G_TOKEN_FLOAT
const TOKEN_STRING = C.G_TOKEN_STRING
const TOKEN_SYMBOL = C.G_TOKEN_SYMBOL
const TOKEN_IDENTIFIER = C.G_TOKEN_IDENTIFIER
const TOKEN_IDENTIFIER_NULL = C.G_TOKEN_IDENTIFIER_NULL
const TOKEN_COMMENT_SINGLE = C.G_TOKEN_COMMENT_SINGLE
const TOKEN_COMMENT_MULTI = C.G_TOKEN_COMMENT_MULTI
const TRAVERSE_LEAVES = C.G_TRAVERSE_LEAVES
const TRAVERSE_NON_LEAVES = C.G_TRAVERSE_NON_LEAVES
const TRAVERSE_ALL = C.G_TRAVERSE_ALL
const TRAVERSE_MASK = C.G_TRAVERSE_MASK
const TRAVERSE_LEAFS = C.G_TRAVERSE_LEAFS
const TRAVERSE_NON_LEAFS = C.G_TRAVERSE_NON_LEAFS
const IN_ORDER = C.G_IN_ORDER
const PRE_ORDER = C.G_PRE_ORDER
const POST_ORDER = C.G_POST_ORDER
const LEVEL_ORDER = C.G_LEVEL_ORDER
const UNICODE_BREAK_MANDATORY = C.G_UNICODE_BREAK_MANDATORY
const UNICODE_BREAK_CARRIAGE_RETURN = C.G_UNICODE_BREAK_CARRIAGE_RETURN
const UNICODE_BREAK_LINE_FEED = C.G_UNICODE_BREAK_LINE_FEED
const UNICODE_BREAK_COMBINING_MARK = C.G_UNICODE_BREAK_COMBINING_MARK
const UNICODE_BREAK_SURROGATE = C.G_UNICODE_BREAK_SURROGATE
const UNICODE_BREAK_ZERO_WIDTH_SPACE = C.G_UNICODE_BREAK_ZERO_WIDTH_SPACE
const UNICODE_BREAK_INSEPARABLE = C.G_UNICODE_BREAK_INSEPARABLE
const UNICODE_BREAK_NON_BREAKING_GLUE = C.G_UNICODE_BREAK_NON_BREAKING_GLUE
const UNICODE_BREAK_CONTINGENT = C.G_UNICODE_BREAK_CONTINGENT
const UNICODE_BREAK_SPACE = C.G_UNICODE_BREAK_SPACE
const UNICODE_BREAK_AFTER = C.G_UNICODE_BREAK_AFTER
const UNICODE_BREAK_BEFORE = C.G_UNICODE_BREAK_BEFORE
const UNICODE_BREAK_BEFORE_AND_AFTER = C.G_UNICODE_BREAK_BEFORE_AND_AFTER
const UNICODE_BREAK_HYPHEN = C.G_UNICODE_BREAK_HYPHEN
const UNICODE_BREAK_NON_STARTER = C.G_UNICODE_BREAK_NON_STARTER
const UNICODE_BREAK_OPEN_PUNCTUATION = C.G_UNICODE_BREAK_OPEN_PUNCTUATION
const UNICODE_BREAK_CLOSE_PUNCTUATION = C.G_UNICODE_BREAK_CLOSE_PUNCTUATION
const UNICODE_BREAK_QUOTATION = C.G_UNICODE_BREAK_QUOTATION
const UNICODE_BREAK_EXCLAMATION = C.G_UNICODE_BREAK_EXCLAMATION
const UNICODE_BREAK_IDEOGRAPHIC = C.G_UNICODE_BREAK_IDEOGRAPHIC
const UNICODE_BREAK_NUMERIC = C.G_UNICODE_BREAK_NUMERIC
const UNICODE_BREAK_INFIX_SEPARATOR = C.G_UNICODE_BREAK_INFIX_SEPARATOR
const UNICODE_BREAK_SYMBOL = C.G_UNICODE_BREAK_SYMBOL
const UNICODE_BREAK_ALPHABETIC = C.G_UNICODE_BREAK_ALPHABETIC
const UNICODE_BREAK_PREFIX = C.G_UNICODE_BREAK_PREFIX
const UNICODE_BREAK_POSTFIX = C.G_UNICODE_BREAK_POSTFIX
const UNICODE_BREAK_COMPLEX_CONTEXT = C.G_UNICODE_BREAK_COMPLEX_CONTEXT
const UNICODE_BREAK_AMBIGUOUS = C.G_UNICODE_BREAK_AMBIGUOUS
const UNICODE_BREAK_UNKNOWN = C.G_UNICODE_BREAK_UNKNOWN
const UNICODE_BREAK_NEXT_LINE = C.G_UNICODE_BREAK_NEXT_LINE
const UNICODE_BREAK_WORD_JOINER = C.G_UNICODE_BREAK_WORD_JOINER
const UNICODE_BREAK_HANGUL_L_JAMO = C.G_UNICODE_BREAK_HANGUL_L_JAMO
const UNICODE_BREAK_HANGUL_V_JAMO = C.G_UNICODE_BREAK_HANGUL_V_JAMO
const UNICODE_BREAK_HANGUL_T_JAMO = C.G_UNICODE_BREAK_HANGUL_T_JAMO
const UNICODE_BREAK_HANGUL_LV_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE
const UNICODE_BREAK_HANGUL_LVT_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE
const UNICODE_BREAK_CLOSE_PARANTHESIS = C.G_UNICODE_BREAK_CLOSE_PARANTHESIS
const UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = C.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER
const UNICODE_BREAK_HEBREW_LETTER = C.G_UNICODE_BREAK_HEBREW_LETTER
const UNICODE_BREAK_REGIONAL_INDICATOR = C.G_UNICODE_BREAK_REGIONAL_INDICATOR
const UNICODE_SCRIPT_INVALID_CODE = C.G_UNICODE_SCRIPT_INVALID_CODE
const UNICODE_SCRIPT_COMMON = C.G_UNICODE_SCRIPT_COMMON
const UNICODE_SCRIPT_INHERITED = C.G_UNICODE_SCRIPT_INHERITED
const UNICODE_SCRIPT_ARABIC = C.G_UNICODE_SCRIPT_ARABIC
const UNICODE_SCRIPT_ARMENIAN = C.G_UNICODE_SCRIPT_ARMENIAN
const UNICODE_SCRIPT_BENGALI = C.G_UNICODE_SCRIPT_BENGALI
const UNICODE_SCRIPT_BOPOMOFO = C.G_UNICODE_SCRIPT_BOPOMOFO
const UNICODE_SCRIPT_CHEROKEE = C.G_UNICODE_SCRIPT_CHEROKEE
const UNICODE_SCRIPT_COPTIC = C.G_UNICODE_SCRIPT_COPTIC
const UNICODE_SCRIPT_CYRILLIC = C.G_UNICODE_SCRIPT_CYRILLIC
const UNICODE_SCRIPT_DESERET = C.G_UNICODE_SCRIPT_DESERET
const UNICODE_SCRIPT_DEVANAGARI = C.G_UNICODE_SCRIPT_DEVANAGARI
const UNICODE_SCRIPT_ETHIOPIC = C.G_UNICODE_SCRIPT_ETHIOPIC
const UNICODE_SCRIPT_GEORGIAN = C.G_UNICODE_SCRIPT_GEORGIAN
const UNICODE_SCRIPT_GOTHIC = C.G_UNICODE_SCRIPT_GOTHIC
const UNICODE_SCRIPT_GREEK = C.G_UNICODE_SCRIPT_GREEK
const UNICODE_SCRIPT_GUJARATI = C.G_UNICODE_SCRIPT_GUJARATI
const UNICODE_SCRIPT_GURMUKHI = C.G_UNICODE_SCRIPT_GURMUKHI
const UNICODE_SCRIPT_HAN = C.G_UNICODE_SCRIPT_HAN
const UNICODE_SCRIPT_HANGUL = C.G_UNICODE_SCRIPT_HANGUL
const UNICODE_SCRIPT_HEBREW = C.G_UNICODE_SCRIPT_HEBREW
const UNICODE_SCRIPT_HIRAGANA = C.G_UNICODE_SCRIPT_HIRAGANA
const UNICODE_SCRIPT_KANNADA = C.G_UNICODE_SCRIPT_KANNADA
const UNICODE_SCRIPT_KATAKANA = C.G_UNICODE_SCRIPT_KATAKANA
const UNICODE_SCRIPT_KHMER = C.G_UNICODE_SCRIPT_KHMER
const UNICODE_SCRIPT_LAO = C.G_UNICODE_SCRIPT_LAO
const UNICODE_SCRIPT_LATIN = C.G_UNICODE_SCRIPT_LATIN
const UNICODE_SCRIPT_MALAYALAM = C.G_UNICODE_SCRIPT_MALAYALAM
const UNICODE_SCRIPT_MONGOLIAN = C.G_UNICODE_SCRIPT_MONGOLIAN
const UNICODE_SCRIPT_MYANMAR = C.G_UNICODE_SCRIPT_MYANMAR
const UNICODE_SCRIPT_OGHAM = C.G_UNICODE_SCRIPT_OGHAM
const UNICODE_SCRIPT_OLD_ITALIC = C.G_UNICODE_SCRIPT_OLD_ITALIC
const UNICODE_SCRIPT_ORIYA = C.G_UNICODE_SCRIPT_ORIYA
const UNICODE_SCRIPT_RUNIC = C.G_UNICODE_SCRIPT_RUNIC
const UNICODE_SCRIPT_SINHALA = C.G_UNICODE_SCRIPT_SINHALA
const UNICODE_SCRIPT_SYRIAC = C.G_UNICODE_SCRIPT_SYRIAC
const UNICODE_SCRIPT_TAMIL = C.G_UNICODE_SCRIPT_TAMIL
const UNICODE_SCRIPT_TELUGU = C.G_UNICODE_SCRIPT_TELUGU
const UNICODE_SCRIPT_THAANA = C.G_UNICODE_SCRIPT_THAANA
const UNICODE_SCRIPT_THAI = C.G_UNICODE_SCRIPT_THAI
const UNICODE_SCRIPT_TIBETAN = C.G_UNICODE_SCRIPT_TIBETAN
const UNICODE_SCRIPT_CANADIAN_ABORIGINAL = C.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL
const UNICODE_SCRIPT_YI = C.G_UNICODE_SCRIPT_YI
const UNICODE_SCRIPT_TAGALOG = C.G_UNICODE_SCRIPT_TAGALOG
const UNICODE_SCRIPT_HANUNOO = C.G_UNICODE_SCRIPT_HANUNOO
const UNICODE_SCRIPT_BUHID = C.G_UNICODE_SCRIPT_BUHID
const UNICODE_SCRIPT_TAGBANWA = C.G_UNICODE_SCRIPT_TAGBANWA
const UNICODE_SCRIPT_BRAILLE = C.G_UNICODE_SCRIPT_BRAILLE
const UNICODE_SCRIPT_CYPRIOT = C.G_UNICODE_SCRIPT_CYPRIOT
const UNICODE_SCRIPT_LIMBU = C.G_UNICODE_SCRIPT_LIMBU
const UNICODE_SCRIPT_OSMANYA = C.G_UNICODE_SCRIPT_OSMANYA
const UNICODE_SCRIPT_SHAVIAN = C.G_UNICODE_SCRIPT_SHAVIAN
const UNICODE_SCRIPT_LINEAR_B = C.G_UNICODE_SCRIPT_LINEAR_B
const UNICODE_SCRIPT_TAI_LE = C.G_UNICODE_SCRIPT_TAI_LE
const UNICODE_SCRIPT_UGARITIC = C.G_UNICODE_SCRIPT_UGARITIC
const UNICODE_SCRIPT_NEW_TAI_LUE = C.G_UNICODE_SCRIPT_NEW_TAI_LUE
const UNICODE_SCRIPT_BUGINESE = C.G_UNICODE_SCRIPT_BUGINESE
const UNICODE_SCRIPT_GLAGOLITIC = C.G_UNICODE_SCRIPT_GLAGOLITIC
const UNICODE_SCRIPT_TIFINAGH = C.G_UNICODE_SCRIPT_TIFINAGH
const UNICODE_SCRIPT_SYLOTI_NAGRI = C.G_UNICODE_SCRIPT_SYLOTI_NAGRI
const UNICODE_SCRIPT_OLD_PERSIAN = C.G_UNICODE_SCRIPT_OLD_PERSIAN
const UNICODE_SCRIPT_KHAROSHTHI = C.G_UNICODE_SCRIPT_KHAROSHTHI
const UNICODE_SCRIPT_UNKNOWN = C.G_UNICODE_SCRIPT_UNKNOWN
const UNICODE_SCRIPT_BALINESE = C.G_UNICODE_SCRIPT_BALINESE
const UNICODE_SCRIPT_CUNEIFORM = C.G_UNICODE_SCRIPT_CUNEIFORM
const UNICODE_SCRIPT_PHOENICIAN = C.G_UNICODE_SCRIPT_PHOENICIAN
const UNICODE_SCRIPT_PHAGS_PA = C.G_UNICODE_SCRIPT_PHAGS_PA
const UNICODE_SCRIPT_NKO = C.G_UNICODE_SCRIPT_NKO
const UNICODE_SCRIPT_KAYAH_LI = C.G_UNICODE_SCRIPT_KAYAH_LI
const UNICODE_SCRIPT_LEPCHA = C.G_UNICODE_SCRIPT_LEPCHA
const UNICODE_SCRIPT_REJANG = C.G_UNICODE_SCRIPT_REJANG
const UNICODE_SCRIPT_SUNDANESE = C.G_UNICODE_SCRIPT_SUNDANESE
const UNICODE_SCRIPT_SAURASHTRA = C.G_UNICODE_SCRIPT_SAURASHTRA
const UNICODE_SCRIPT_CHAM = C.G_UNICODE_SCRIPT_CHAM
const UNICODE_SCRIPT_OL_CHIKI = C.G_UNICODE_SCRIPT_OL_CHIKI
const UNICODE_SCRIPT_VAI = C.G_UNICODE_SCRIPT_VAI
const UNICODE_SCRIPT_CARIAN = C.G_UNICODE_SCRIPT_CARIAN
const UNICODE_SCRIPT_LYCIAN = C.G_UNICODE_SCRIPT_LYCIAN
const UNICODE_SCRIPT_LYDIAN = C.G_UNICODE_SCRIPT_LYDIAN
const UNICODE_SCRIPT_AVESTAN = C.G_UNICODE_SCRIPT_AVESTAN
const UNICODE_SCRIPT_BAMUM = C.G_UNICODE_SCRIPT_BAMUM
const UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = C.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS
const UNICODE_SCRIPT_IMPERIAL_ARAMAIC = C.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC
const UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI
const UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN
const UNICODE_SCRIPT_JAVANESE = C.G_UNICODE_SCRIPT_JAVANESE
const UNICODE_SCRIPT_KAITHI = C.G_UNICODE_SCRIPT_KAITHI
const UNICODE_SCRIPT_LISU = C.G_UNICODE_SCRIPT_LISU
const UNICODE_SCRIPT_MEETEI_MAYEK = C.G_UNICODE_SCRIPT_MEETEI_MAYEK
const UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = C.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN
const UNICODE_SCRIPT_OLD_TURKIC = C.G_UNICODE_SCRIPT_OLD_TURKIC
const UNICODE_SCRIPT_SAMARITAN = C.G_UNICODE_SCRIPT_SAMARITAN
const UNICODE_SCRIPT_TAI_THAM = C.G_UNICODE_SCRIPT_TAI_THAM
const UNICODE_SCRIPT_TAI_VIET = C.G_UNICODE_SCRIPT_TAI_VIET
const UNICODE_SCRIPT_BATAK = C.G_UNICODE_SCRIPT_BATAK
const UNICODE_SCRIPT_BRAHMI = C.G_UNICODE_SCRIPT_BRAHMI
const UNICODE_SCRIPT_MANDAIC = C.G_UNICODE_SCRIPT_MANDAIC
const UNICODE_SCRIPT_CHAKMA = C.G_UNICODE_SCRIPT_CHAKMA
const UNICODE_SCRIPT_MEROITIC_CURSIVE = C.G_UNICODE_SCRIPT_MEROITIC_CURSIVE
const UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = C.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS
const UNICODE_SCRIPT_MIAO = C.G_UNICODE_SCRIPT_MIAO
const UNICODE_SCRIPT_SHARADA = C.G_UNICODE_SCRIPT_SHARADA
const UNICODE_SCRIPT_SORA_SOMPENG = C.G_UNICODE_SCRIPT_SORA_SOMPENG
const UNICODE_SCRIPT_TAKRI = C.G_UNICODE_SCRIPT_TAKRI
const UNICODE_CONTROL = C.G_UNICODE_CONTROL
const UNICODE_FORMAT = C.G_UNICODE_FORMAT
const UNICODE_UNASSIGNED = C.G_UNICODE_UNASSIGNED
const UNICODE_PRIVATE_USE = C.G_UNICODE_PRIVATE_USE
const UNICODE_SURROGATE = C.G_UNICODE_SURROGATE
const UNICODE_LOWERCASE_LETTER = C.G_UNICODE_LOWERCASE_LETTER
const UNICODE_MODIFIER_LETTER = C.G_UNICODE_MODIFIER_LETTER
const UNICODE_OTHER_LETTER = C.G_UNICODE_OTHER_LETTER
const UNICODE_TITLECASE_LETTER = C.G_UNICODE_TITLECASE_LETTER
const UNICODE_UPPERCASE_LETTER = C.G_UNICODE_UPPERCASE_LETTER
const UNICODE_SPACING_MARK = C.G_UNICODE_SPACING_MARK
const UNICODE_ENCLOSING_MARK = C.G_UNICODE_ENCLOSING_MARK
const UNICODE_NON_SPACING_MARK = C.G_UNICODE_NON_SPACING_MARK
const UNICODE_DECIMAL_NUMBER = C.G_UNICODE_DECIMAL_NUMBER
const UNICODE_LETTER_NUMBER = C.G_UNICODE_LETTER_NUMBER
const UNICODE_OTHER_NUMBER = C.G_UNICODE_OTHER_NUMBER
const UNICODE_CONNECT_PUNCTUATION = C.G_UNICODE_CONNECT_PUNCTUATION
const UNICODE_DASH_PUNCTUATION = C.G_UNICODE_DASH_PUNCTUATION
const UNICODE_CLOSE_PUNCTUATION = C.G_UNICODE_CLOSE_PUNCTUATION
const UNICODE_FINAL_PUNCTUATION = C.G_UNICODE_FINAL_PUNCTUATION
const UNICODE_INITIAL_PUNCTUATION = C.G_UNICODE_INITIAL_PUNCTUATION
const UNICODE_OTHER_PUNCTUATION = C.G_UNICODE_OTHER_PUNCTUATION
const UNICODE_OPEN_PUNCTUATION = C.G_UNICODE_OPEN_PUNCTUATION
const UNICODE_CURRENCY_SYMBOL = C.G_UNICODE_CURRENCY_SYMBOL
const UNICODE_MODIFIER_SYMBOL = C.G_UNICODE_MODIFIER_SYMBOL
const UNICODE_MATH_SYMBOL = C.G_UNICODE_MATH_SYMBOL
const UNICODE_OTHER_SYMBOL = C.G_UNICODE_OTHER_SYMBOL
const UNICODE_LINE_SEPARATOR = C.G_UNICODE_LINE_SEPARATOR
const UNICODE_PARAGRAPH_SEPARATOR = C.G_UNICODE_PARAGRAPH_SEPARATOR
const UNICODE_SPACE_SEPARATOR = C.G_UNICODE_SPACE_SEPARATOR
const USER_DIRECTORY_DESKTOP = C.G_USER_DIRECTORY_DESKTOP
const USER_DIRECTORY_DOCUMENTS = C.G_USER_DIRECTORY_DOCUMENTS
const USER_DIRECTORY_DOWNLOAD = C.G_USER_DIRECTORY_DOWNLOAD
const USER_DIRECTORY_MUSIC = C.G_USER_DIRECTORY_MUSIC
const USER_DIRECTORY_PICTURES = C.G_USER_DIRECTORY_PICTURES
const USER_DIRECTORY_PUBLIC_SHARE = C.G_USER_DIRECTORY_PUBLIC_SHARE
const USER_DIRECTORY_TEMPLATES = C.G_USER_DIRECTORY_TEMPLATES
const USER_DIRECTORY_VIDEOS = C.G_USER_DIRECTORY_VIDEOS
const USER_N_DIRECTORIES = C.G_USER_N_DIRECTORIES
const VARIANT_CLASS_BOOLEAN = C.G_VARIANT_CLASS_BOOLEAN
const VARIANT_CLASS_BYTE = C.G_VARIANT_CLASS_BYTE
const VARIANT_CLASS_INT16 = C.G_VARIANT_CLASS_INT16
const VARIANT_CLASS_UINT16 = C.G_VARIANT_CLASS_UINT16
const VARIANT_CLASS_INT32 = C.G_VARIANT_CLASS_INT32
const VARIANT_CLASS_UINT32 = C.G_VARIANT_CLASS_UINT32
const VARIANT_CLASS_INT64 = C.G_VARIANT_CLASS_INT64
const VARIANT_CLASS_UINT64 = C.G_VARIANT_CLASS_UINT64
const VARIANT_CLASS_HANDLE = C.G_VARIANT_CLASS_HANDLE
const VARIANT_CLASS_DOUBLE = C.G_VARIANT_CLASS_DOUBLE
const VARIANT_CLASS_STRING = C.G_VARIANT_CLASS_STRING
const VARIANT_CLASS_OBJECT_PATH = C.G_VARIANT_CLASS_OBJECT_PATH
const VARIANT_CLASS_SIGNATURE = C.G_VARIANT_CLASS_SIGNATURE
const VARIANT_CLASS_VARIANT = C.G_VARIANT_CLASS_VARIANT
const VARIANT_CLASS_MAYBE = C.G_VARIANT_CLASS_MAYBE
const VARIANT_CLASS_ARRAY = C.G_VARIANT_CLASS_ARRAY
const VARIANT_CLASS_TUPLE = C.G_VARIANT_CLASS_TUPLE
const VARIANT_CLASS_DICT_ENTRY = C.G_VARIANT_CLASS_DICT_ENTRY
const VARIANT_PARSE_ERROR_FAILED = C.G_VARIANT_PARSE_ERROR_FAILED
const VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = C.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE
const VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = C.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END
const VARIANT_PARSE_ERROR_INVALID_CHARACTER = C.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER
const VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING
const VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = C.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH
const VARIANT_PARSE_ERROR_INVALID_SIGNATURE = C.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE
const VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING
const VARIANT_PARSE_ERROR_NO_COMMON_TYPE = C.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE
const VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = C.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE
const VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = C.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG
const VARIANT_PARSE_ERROR_TYPE_ERROR = C.G_VARIANT_PARSE_ERROR_TYPE_ERROR
const VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = C.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN
const VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = C.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD
const VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = C.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT
const VARIANT_PARSE_ERROR_VALUE_EXPECTED = C.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED
const ASCII_DTOSTR_BUF_SIZE = C.G_ASCII_DTOSTR_BUF_SIZE
const BIG_ENDIAN = C.G_BIG_ENDIAN
const CAN_INLINE = C.G_CAN_INLINE
const CSET_A_2_Z = C.G_CSET_A_2_Z
const CSET_DIGITS = C.G_CSET_DIGITS
const CSET_a_2_z = C.G_CSET_a_2_z
const DATALIST_FLAGS_MASK = C.G_DATALIST_FLAGS_MASK
const DATE_BAD_DAY = C.G_DATE_BAD_DAY
const DATE_BAD_JULIAN = C.G_DATE_BAD_JULIAN
const DATE_BAD_YEAR = C.G_DATE_BAD_YEAR
const DIR_SEPARATOR = C.G_DIR_SEPARATOR
const DIR_SEPARATOR_S = C.G_DIR_SEPARATOR_S
const GINT16_FORMAT = C.G_GINT16_FORMAT
const GINT16_MODIFIER = C.G_GINT16_MODIFIER
const GINT32_FORMAT = C.G_GINT32_FORMAT
const GINT32_MODIFIER = C.G_GINT32_MODIFIER
const GINT64_FORMAT = C.G_GINT64_FORMAT
const GINT64_MODIFIER = C.G_GINT64_MODIFIER
const GINTPTR_FORMAT = C.G_GINTPTR_FORMAT
const GINTPTR_MODIFIER = C.G_GINTPTR_MODIFIER
const GNUC_FUNCTION = C.G_GNUC_FUNCTION
const GNUC_PRETTY_FUNCTION = C.G_GNUC_PRETTY_FUNCTION
const GSIZE_FORMAT = C.G_GSIZE_FORMAT
const GSIZE_MODIFIER = C.G_GSIZE_MODIFIER
const GSSIZE_FORMAT = C.G_GSSIZE_FORMAT
const GUINT16_FORMAT = C.G_GUINT16_FORMAT
const GUINT32_FORMAT = C.G_GUINT32_FORMAT
const GUINT64_FORMAT = C.G_GUINT64_FORMAT
const GUINTPTR_FORMAT = C.G_GUINTPTR_FORMAT
const HAVE_GINT64 = C.G_HAVE_GINT64
const HAVE_GNUC_VARARGS = C.G_HAVE_GNUC_VARARGS
const HAVE_GNUC_VISIBILITY = C.G_HAVE_GNUC_VISIBILITY
const HAVE_GROWING_STACK = C.G_HAVE_GROWING_STACK
const HAVE_INLINE = C.G_HAVE_INLINE
const HAVE_ISO_VARARGS = C.G_HAVE_ISO_VARARGS
const HAVE___INLINE = C.G_HAVE___INLINE
const HAVE___INLINE__ = C.G_HAVE___INLINE__
const HOOK_FLAG_USER_SHIFT = C.G_HOOK_FLAG_USER_SHIFT
const IEEE754_DOUBLE_BIAS = C.G_IEEE754_DOUBLE_BIAS
const IEEE754_FLOAT_BIAS = C.G_IEEE754_FLOAT_BIAS
const KEY_FILE_DESKTOP_GROUP = C.G_KEY_FILE_DESKTOP_GROUP
const KEY_FILE_DESKTOP_KEY_CATEGORIES = C.G_KEY_FILE_DESKTOP_KEY_CATEGORIES
const KEY_FILE_DESKTOP_KEY_COMMENT = C.G_KEY_FILE_DESKTOP_KEY_COMMENT
const KEY_FILE_DESKTOP_KEY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_EXEC
const KEY_FILE_DESKTOP_KEY_GENERIC_NAME = C.G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME
const KEY_FILE_DESKTOP_KEY_HIDDEN = C.G_KEY_FILE_DESKTOP_KEY_HIDDEN
const KEY_FILE_DESKTOP_KEY_ICON = C.G_KEY_FILE_DESKTOP_KEY_ICON
const KEY_FILE_DESKTOP_KEY_MIME_TYPE = C.G_KEY_FILE_DESKTOP_KEY_MIME_TYPE
const KEY_FILE_DESKTOP_KEY_NAME = C.G_KEY_FILE_DESKTOP_KEY_NAME
const KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN
const KEY_FILE_DESKTOP_KEY_NO_DISPLAY = C.G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY
const KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN
const KEY_FILE_DESKTOP_KEY_PATH = C.G_KEY_FILE_DESKTOP_KEY_PATH
const KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY
const KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS
const KEY_FILE_DESKTOP_KEY_TERMINAL = C.G_KEY_FILE_DESKTOP_KEY_TERMINAL
const KEY_FILE_DESKTOP_KEY_TRY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_TRY_EXEC
const KEY_FILE_DESKTOP_KEY_TYPE = C.G_KEY_FILE_DESKTOP_KEY_TYPE
const KEY_FILE_DESKTOP_KEY_URL = C.G_KEY_FILE_DESKTOP_KEY_URL
const KEY_FILE_DESKTOP_KEY_VERSION = C.G_KEY_FILE_DESKTOP_KEY_VERSION
const KEY_FILE_DESKTOP_TYPE_APPLICATION = C.G_KEY_FILE_DESKTOP_TYPE_APPLICATION
const KEY_FILE_DESKTOP_TYPE_DIRECTORY = C.G_KEY_FILE_DESKTOP_TYPE_DIRECTORY
const KEY_FILE_DESKTOP_TYPE_LINK = C.G_KEY_FILE_DESKTOP_TYPE_LINK
const LITTLE_ENDIAN = C.G_LITTLE_ENDIAN
const LOG_FATAL_MASK = C.G_LOG_FATAL_MASK
const LOG_LEVEL_USER_SHIFT = C.G_LOG_LEVEL_USER_SHIFT
const MAJOR_VERSION = C.GLIB_MAJOR_VERSION
const MAXINT16 = C.G_MAXINT16
const MAXINT32 = C.G_MAXINT32
const MAXINT64 = C.G_MAXINT64
const MAXINT8 = C.G_MAXINT8
const MAXUINT16 = C.G_MAXUINT16
const MAXUINT32 = C.G_MAXUINT32
const MAXUINT64 = C.G_MAXUINT64
const MAXUINT8 = C.G_MAXUINT8
const MICRO_VERSION = C.GLIB_MICRO_VERSION
const MININT16 = C.G_MININT16
const MININT32 = C.G_MININT32
const MININT64 = C.G_MININT64
const MININT8 = C.G_MININT8
const MINOR_VERSION = C.GLIB_MINOR_VERSION
const MODULE_SUFFIX = C.G_MODULE_SUFFIX
const OPTION_REMAINING = C.G_OPTION_REMAINING
const PDP_ENDIAN = C.G_PDP_ENDIAN
const POLLFD_FORMAT = C.G_POLLFD_FORMAT
const PRIORITY_DEFAULT = C.G_PRIORITY_DEFAULT
const PRIORITY_DEFAULT_IDLE = C.G_PRIORITY_DEFAULT_IDLE
const PRIORITY_HIGH = C.G_PRIORITY_HIGH
const PRIORITY_HIGH_IDLE = C.G_PRIORITY_HIGH_IDLE
const PRIORITY_LOW = C.G_PRIORITY_LOW
const SEARCHPATH_SEPARATOR = C.G_SEARCHPATH_SEPARATOR
const SEARCHPATH_SEPARATOR_S = C.G_SEARCHPATH_SEPARATOR_S
const SIZEOF_LONG = C.GLIB_SIZEOF_LONG
const SIZEOF_SIZE_T = C.GLIB_SIZEOF_SIZE_T
const SIZEOF_VOID_P = C.GLIB_SIZEOF_VOID_P
const STR_DELIMITERS = C.G_STR_DELIMITERS
const SYSDEF_AF_INET = C.GLIB_SYSDEF_AF_INET
const SYSDEF_AF_INET6 = C.GLIB_SYSDEF_AF_INET6
const SYSDEF_AF_UNIX = C.GLIB_SYSDEF_AF_UNIX
const SYSDEF_MSG_DONTROUTE = C.GLIB_SYSDEF_MSG_DONTROUTE
const SYSDEF_MSG_OOB = C.GLIB_SYSDEF_MSG_OOB
const SYSDEF_MSG_PEEK = C.GLIB_SYSDEF_MSG_PEEK
const TIME_SPAN_DAY = C.G_TIME_SPAN_DAY
const TIME_SPAN_HOUR = C.G_TIME_SPAN_HOUR
const TIME_SPAN_MILLISECOND = C.G_TIME_SPAN_MILLISECOND
const TIME_SPAN_MINUTE = C.G_TIME_SPAN_MINUTE
const TIME_SPAN_SECOND = C.G_TIME_SPAN_SECOND
const UNICHAR_MAX_DECOMPOSITION_LENGTH = C.G_UNICHAR_MAX_DECOMPOSITION_LENGTH
const URI_RESERVED_CHARS_GENERIC_DELIMITERS = C.G_URI_RESERVED_CHARS_GENERIC_DELIMITERS
const URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = C.G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS
const USEC_PER_SEC = C.G_USEC_PER_SEC
const VA_COPY_AS_ARRAY = C.G_VA_COPY_AS_ARRAY
const VERSION_MIN_REQUIRED = C.GLIB_VERSION_MIN_REQUIRED
