// this file is auto-generated by go-gi

package glib

// #cgo pkg-config: glib-2.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <glib.h>
/*
gboolean _true() { return TRUE; }
gboolean _false() { return FALSE; }
GByteArray* _g_byte_array_append(GByteArray* array, void* data, guint len_) {
	return g_byte_array_append(array, (const guint8*)(data), len_);
}
GByteArray* _g_byte_array_prepend(GByteArray* array, void* data, guint len_) {
	return g_byte_array_prepend(array, (const guint8*)(data), len_);
}
gsize _g_date_strftime(gchar* s, gsize slen, void* format, void* date) {
	return g_date_strftime(s, slen, (const gchar*)(format), (const GDate*)(date));
}
GDateTime* _g_date_time_new_from_timeval_local(void* tv) {
	return g_date_time_new_from_timeval_local((const GTimeVal*)(tv));
}
GDateTime* _g_date_time_new_from_timeval_utc(void* tv) {
	return g_date_time_new_from_timeval_utc((const GTimeVal*)(tv));
}
gchar* _g_dir_make_tmp(gchar* tmpl, void* err) {
	return g_dir_make_tmp(tmpl, (GError**)(err));
}
GDir* _g_dir_open(void* path, guint flags, void* err) {
	return g_dir_open((const gchar*)(path), flags, (GError**)(err));
}
GError* _g_error_new_literal(GQuark domain, gint code, void* message) {
	return g_error_new_literal(domain, code, (const gchar*)(message));
}
GIConv _g_iconv_open(void* to_codeset, void* from_codeset) {
	return g_iconv_open((const gchar*)(to_codeset), (const gchar*)(from_codeset));
}
GIOChannel* _g_io_channel_new_file(void* filename, void* mode, void* err) {
	return g_io_channel_new_file((const gchar*)(filename), (const gchar*)(mode), (GError**)(err));
}
GMappedFile* _g_mapped_file_new(void* filename, gboolean writable, void* err) {
	return g_mapped_file_new((const gchar*)(filename), writable, (GError**)(err));
}
GMappedFile* _g_mapped_file_new_from_fd(gint fd, gboolean writable, void* err) {
	return g_mapped_file_new_from_fd(fd, writable, (GError**)(err));
}
GMarkupParseContext* _g_markup_parse_context_new(void* parser, GMarkupParseFlags flags, gpointer user_data, GDestroyNotify user_data_dnotify) {
	return g_markup_parse_context_new((const GMarkupParser*)(parser), flags, user_data, user_data_dnotify);
}
GOptionContext* _g_option_context_new(void* parameter_string) {
	return g_option_context_new((const gchar*)(parameter_string));
}
GOptionGroup* _g_option_group_new(void* name, void* description, void* help_description, gpointer user_data, GDestroyNotify destroy) {
	return g_option_group_new((const gchar*)(name), (const gchar*)(description), (const gchar*)(help_description), user_data, destroy);
}
GPatternSpec* _g_pattern_spec_new(void* pattern) {
	return g_pattern_spec_new((const gchar*)(pattern));
}
GRand* _g_rand_new_with_seed_array(void* seed, guint seed_length) {
	return g_rand_new_with_seed_array((const guint32*)(seed), seed_length);
}
GRegex* _g_regex_new(void* pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, void* err) {
	return g_regex_new((const gchar*)(pattern), compile_options, match_options, (GError**)(err));
}
gboolean _g_regex_check_replacement(void* replacement, gboolean* has_references, void* err) {
	return g_regex_check_replacement((const gchar*)(replacement), has_references, (GError**)(err));
}
gchar* _g_regex_escape_nul(void* string_, gint length) {
	return g_regex_escape_nul((const gchar*)(string_), length);
}
gboolean _g_regex_match_simple(void* pattern, void* string_, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return g_regex_match_simple((const gchar*)(pattern), (const gchar*)(string_), compile_options, match_options);
}
gchar** _g_regex_split_simple(void* pattern, void* string_, GRegexCompileFlags compile_options, GRegexMatchFlags match_options) {
	return g_regex_split_simple((const gchar*)(pattern), (const gchar*)(string_), compile_options, match_options);
}
GScanner* _g_scanner_new(void* config_templ) {
	return g_scanner_new((const GScannerConfig*)(config_templ));
}
void _g_source_set_name_by_id(guint tag, void* name) {
	g_source_set_name_by_id(tag, (const char*)(name));
}
GThread* _g_thread_new(void* name, GThreadFunc func_, gpointer data) {
	return g_thread_new((const gchar*)(name), func_, data);
}
GThread* _g_thread_try_new(void* name, GThreadFunc func_, gpointer data, void* err) {
	return g_thread_try_new((const gchar*)(name), func_, data, (GError**)(err));
}
GThreadPool* _g_thread_pool_new(GFunc func_, gpointer user_data, gint max_threads, gboolean exclusive, void* err) {
	return g_thread_pool_new(func_, user_data, max_threads, exclusive, (GError**)(err));
}
gboolean _g_time_val_from_iso8601(void* iso_date, GTimeVal* time_) {
	return g_time_val_from_iso8601((const gchar*)(iso_date), time_);
}
GTimeZone* _g_time_zone_new(void* identifier) {
	return g_time_zone_new((const gchar*)(identifier));
}
guint _g_trash_stack_height(void* stack_p) {
	return g_trash_stack_height((GTrashStack**)(stack_p));
}
gpointer _g_trash_stack_peek(void* stack_p) {
	return g_trash_stack_peek((GTrashStack**)(stack_p));
}
gpointer _g_trash_stack_pop(void* stack_p) {
	return g_trash_stack_pop((GTrashStack**)(stack_p));
}
void _g_trash_stack_push(void* stack_p, gpointer data_p) {
	g_trash_stack_push((GTrashStack**)(stack_p), data_p);
}
GVariant* _g_variant_new_array(void* child_type, void* children, gsize n_children) {
	return g_variant_new_array((const GVariantType*)(child_type), (GVariant**)(children), n_children);
}
GVariant* _g_variant_new_fixed_array(void* element_type, gconstpointer elements, gsize n_elements, gsize element_size) {
	return g_variant_new_fixed_array((const GVariantType*)(element_type), elements, n_elements, element_size);
}
GVariant* _g_variant_new_from_bytes(void* type_, GBytes* bytes, gboolean trusted) {
	return g_variant_new_from_bytes((const GVariantType*)(type_), bytes, trusted);
}
GVariant* _g_variant_new_from_data(void* type_, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data) {
	return g_variant_new_from_data((const GVariantType*)(type_), data, size, trusted, notify, user_data);
}
GVariant* _g_variant_new_maybe(void* child_type, GVariant* child) {
	return g_variant_new_maybe((const GVariantType*)(child_type), child);
}
GVariant* _g_variant_new_object_path(void* object_path) {
	return g_variant_new_object_path((const gchar*)(object_path));
}
GVariant* _g_variant_new_parsed_va(void* format, va_list* app) {
	return g_variant_new_parsed_va((const gchar*)(format), app);
}
GVariant* _g_variant_new_signature(void* signature) {
	return g_variant_new_signature((const gchar*)(signature));
}
GVariant* _g_variant_new_string(void* string_) {
	return g_variant_new_string((const gchar*)(string_));
}
GVariant* _g_variant_new_tuple(void* children, gsize n_children) {
	return g_variant_new_tuple((GVariant**)(children), n_children);
}
GVariant* _g_variant_new_va(void* format_string, void* endptr, va_list* app) {
	return g_variant_new_va((const gchar*)(format_string), (const gchar**)(endptr), app);
}
gboolean _g_variant_is_object_path(void* string_) {
	return g_variant_is_object_path((const gchar*)(string_));
}
gboolean _g_variant_is_signature(void* string_) {
	return g_variant_is_signature((const gchar*)(string_));
}
GVariant* _g_variant_parse(void* type_, void* text, void* limit, void* endptr, void* err) {
	return g_variant_parse((const GVariantType*)(type_), (const gchar*)(text), (const gchar*)(limit), (const gchar**)(endptr), (GError**)(err));
}
GVariantBuilder* _g_variant_builder_new(void* type_) {
	return g_variant_builder_new((const GVariantType*)(type_));
}
GVariantType* _g_variant_type_new(void* type_string) {
	return g_variant_type_new((const gchar*)(type_string));
}
GVariantType* _g_variant_type_new_array(void* element) {
	return g_variant_type_new_array((const GVariantType*)(element));
}
GVariantType* _g_variant_type_new_dict_entry(void* key, void* value) {
	return g_variant_type_new_dict_entry((const GVariantType*)(key), (const GVariantType*)(value));
}
GVariantType* _g_variant_type_new_maybe(void* element) {
	return g_variant_type_new_maybe((const GVariantType*)(element));
}
const GVariantType* _g_variant_type_checked_(void* arg_0) {
	return g_variant_type_checked_((const gchar*)(arg_0));
}
gboolean _g_variant_type_string_is_valid(void* type_string) {
	return g_variant_type_string_is_valid((const gchar*)(type_string));
}
gboolean _g_variant_type_string_scan(void* string_, void* limit, void* endptr) {
	return g_variant_type_string_scan((const gchar*)(string_), (const gchar*)(limit), (const gchar**)(endptr));
}
int _g_access(void* filename, int mode) {
	return g_access((const gchar*)(filename), mode);
}
gchar* _g_ascii_formatd(gchar* buffer, gint buf_len, void* format, gdouble d) {
	return g_ascii_formatd(buffer, buf_len, (const gchar*)(format), d);
}
gint _g_ascii_strcasecmp(void* s1, void* s2) {
	return g_ascii_strcasecmp((const gchar*)(s1), (const gchar*)(s2));
}
gchar* _g_ascii_strdown(void* str, gssize len_) {
	return g_ascii_strdown((const gchar*)(str), len_);
}
gint _g_ascii_strncasecmp(void* s1, void* s2, gsize n) {
	return g_ascii_strncasecmp((const gchar*)(s1), (const gchar*)(s2), n);
}
gdouble _g_ascii_strtod(void* nptr, void* endptr) {
	return g_ascii_strtod((const gchar*)(nptr), (gchar**)(endptr));
}
gint64 _g_ascii_strtoll(void* nptr, void* endptr, guint base) {
	return g_ascii_strtoll((const gchar*)(nptr), (gchar**)(endptr), base);
}
guint64 _g_ascii_strtoull(void* nptr, void* endptr, guint base) {
	return g_ascii_strtoull((const gchar*)(nptr), (gchar**)(endptr), base);
}
gchar* _g_ascii_strup(void* str, gssize len_) {
	return g_ascii_strup((const gchar*)(str), len_);
}
void _g_assertion_message(void* domain, void* file, int line, void* func_, void* message) {
	g_assertion_message((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(message));
}
void _g_assertion_message_cmpnum(void* domain, void* file, int line, void* func_, void* expr, double arg1, void* cmp, double arg2, char numtype) {
	g_assertion_message_cmpnum((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(expr), (long double)(arg1), (const char*)(cmp), (long double)(arg2), numtype);
}
void _g_assertion_message_cmpstr(void* domain, void* file, int line, void* func_, void* expr, void* arg1, void* cmp, void* arg2) {
	g_assertion_message_cmpstr((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(expr), (const char*)(arg1), (const char*)(cmp), (const char*)(arg2));
}
void _g_assertion_message_error(void* domain, void* file, int line, void* func_, void* expr, void* error_, GQuark error_domain, int error_code) {
	g_assertion_message_error((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(expr), (const GError*)(error_), error_domain, error_code);
}
void _g_assertion_message_expr(void* domain, void* file, int line, void* func_, void* expr) {
	g_assertion_message_expr((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(expr));
}
guchar* _g_base64_decode(void* text, gsize* out_len) {
	return g_base64_decode((const gchar*)(text), out_len);
}
gchar* _g_build_filenamev(void* args) {
	return g_build_filenamev((gchar**)(args));
}
gchar* _g_build_pathv(void* separator, void* args) {
	return g_build_pathv((const gchar*)(separator), (gchar**)(args));
}
int _g_chdir(void* path) {
	return g_chdir((const gchar*)(path));
}
void _g_clear_error(void* err) {
	g_clear_error((GError**)(err));
}
gchar* _g_compute_checksum_for_data(GChecksumType checksum_type, void* data, gsize length) {
	return g_compute_checksum_for_data(checksum_type, (const guchar*)(data), length);
}
gchar* _g_compute_checksum_for_string(GChecksumType checksum_type, void* str, gssize length) {
	return g_compute_checksum_for_string(checksum_type, (const gchar*)(str), length);
}
gchar* _g_compute_hmac_for_data(GChecksumType digest_type, guchar* key, gsize key_len, void* data, gsize length) {
	return g_compute_hmac_for_data(digest_type, key, key_len, (const guchar*)(data), length);
}
gchar* _g_compute_hmac_for_string(GChecksumType digest_type, guchar* key, gsize key_len, void* str, gssize length) {
	return g_compute_hmac_for_string(digest_type, key, key_len, (const gchar*)(str), length);
}
gchar* _g_convert(void* str, gssize len_, void* to_codeset, void* from_codeset, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_convert((const gchar*)(str), len_, (const gchar*)(to_codeset), (const gchar*)(from_codeset), bytes_read, bytes_written, (GError**)(err));
}
gchar* _g_convert_with_fallback(void* str, gssize len_, void* to_codeset, void* from_codeset, void* fallback, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_convert_with_fallback((const gchar*)(str), len_, (const gchar*)(to_codeset), (const gchar*)(from_codeset), (const gchar*)(fallback), bytes_read, bytes_written, (GError**)(err));
}
gchar* _g_convert_with_iconv(void* str, gssize len_, GIConv converter, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_convert_with_iconv((const gchar*)(str), len_, converter, bytes_read, bytes_written, (GError**)(err));
}
void _g_datalist_clear(void* datalist) {
	g_datalist_clear((GData**)(datalist));
}
void _g_datalist_foreach(void* datalist, GDataForeachFunc func_, gpointer user_data) {
	g_datalist_foreach((GData**)(datalist), func_, user_data);
}
gpointer _g_datalist_get_data(void* datalist, void* key) {
	return g_datalist_get_data((GData**)(datalist), (const gchar*)(key));
}
guint _g_datalist_get_flags(void* datalist) {
	return g_datalist_get_flags((GData**)(datalist));
}
gpointer _g_datalist_id_dup_data(void* datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data) {
	return g_datalist_id_dup_data((GData**)(datalist), key_id, dup_func, user_data);
}
gpointer _g_datalist_id_get_data(void* datalist, GQuark key_id) {
	return g_datalist_id_get_data((GData**)(datalist), key_id);
}
gpointer _g_datalist_id_remove_no_notify(void* datalist, GQuark key_id) {
	return g_datalist_id_remove_no_notify((GData**)(datalist), key_id);
}
gboolean _g_datalist_id_replace_data(void* datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify* old_destroy) {
	return g_datalist_id_replace_data((GData**)(datalist), key_id, oldval, newval, destroy, old_destroy);
}
void _g_datalist_id_set_data_full(void* datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func) {
	g_datalist_id_set_data_full((GData**)(datalist), key_id, data, destroy_func);
}
void _g_datalist_init(void* datalist) {
	g_datalist_init((GData**)(datalist));
}
void _g_datalist_set_flags(void* datalist, guint flags) {
	g_datalist_set_flags((GData**)(datalist), flags);
}
void _g_datalist_unset_flags(void* datalist, guint flags) {
	g_datalist_unset_flags((GData**)(datalist), flags);
}
const gchar* _g_dcgettext(void* domain, void* msgid, gint category) {
	return g_dcgettext((const gchar*)(domain), (const gchar*)(msgid), category);
}
const gchar* _g_dgettext(void* domain, void* msgid) {
	return g_dgettext((const gchar*)(domain), (const gchar*)(msgid));
}
const gchar* _g_dngettext(void* domain, void* msgid, void* msgid_plural, gulong n) {
	return g_dngettext((const gchar*)(domain), (const gchar*)(msgid), (const gchar*)(msgid_plural), n);
}
const gchar* _g_dpgettext(void* domain, void* msgctxtid, gsize msgidoffset) {
	return g_dpgettext((const gchar*)(domain), (const gchar*)(msgctxtid), msgidoffset);
}
const gchar* _g_dpgettext2(void* domain, void* context, void* msgid) {
	return g_dpgettext2((const gchar*)(domain), (const gchar*)(context), (const gchar*)(msgid));
}
const gchar* _g_environ_getenv(void* envp, void* variable) {
	return g_environ_getenv((gchar**)(envp), (const gchar*)(variable));
}
gchar** _g_environ_setenv(void* envp, void* variable, void* value, gboolean overwrite) {
	return g_environ_setenv((gchar**)(envp), (const gchar*)(variable), (const gchar*)(value), overwrite);
}
gchar** _g_environ_unsetenv(void* envp, void* variable) {
	return g_environ_unsetenv((gchar**)(envp), (const gchar*)(variable));
}
gboolean _g_file_get_contents(gchar* filename, void* contents, gsize* length, void* err) {
	return g_file_get_contents(filename, (gchar**)(contents), length, (GError**)(err));
}
gint _g_file_open_tmp(gchar* tmpl, void* name_used, void* err) {
	return g_file_open_tmp(tmpl, (gchar**)(name_used), (GError**)(err));
}
gchar* _g_file_read_link(void* filename, void* err) {
	return g_file_read_link((const gchar*)(filename), (GError**)(err));
}
gboolean _g_file_set_contents(gchar* filename, gchar* contents, gssize length, void* err) {
	return g_file_set_contents(filename, contents, length, (GError**)(err));
}
gboolean _g_file_test(void* filename, GFileTest test) {
	return g_file_test((const gchar*)(filename), test);
}
gchar* _g_filename_display_basename(void* filename) {
	return g_filename_display_basename((const gchar*)(filename));
}
gchar* _g_filename_display_name(void* filename) {
	return g_filename_display_name((const gchar*)(filename));
}
gchar* _g_filename_from_uri(void* uri, void* hostname, void* err) {
	return g_filename_from_uri((const gchar*)(uri), (gchar**)(hostname), (GError**)(err));
}
gchar* _g_filename_from_utf8(void* utf8string, gssize len_, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_filename_from_utf8((const gchar*)(utf8string), len_, bytes_read, bytes_written, (GError**)(err));
}
gchar* _g_filename_to_uri(void* filename, void* hostname, void* err) {
	return g_filename_to_uri((const gchar*)(filename), (const gchar*)(hostname), (GError**)(err));
}
gchar* _g_filename_to_utf8(void* opsysstring, gssize len_, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_filename_to_utf8((const gchar*)(opsysstring), len_, bytes_read, bytes_written, (GError**)(err));
}
gchar* _g_find_program_in_path(void* program) {
	return g_find_program_in_path((const gchar*)(program));
}
gboolean _g_get_charset(void* charset) {
	return g_get_charset((const char**)(charset));
}
gboolean _g_get_filename_charsets(void* charsets) {
	return g_get_filename_charsets((const gchar***)(charsets));
}
gchar** _g_get_locale_variants(void* locale) {
	return g_get_locale_variants((const gchar*)(locale));
}
const gchar* _g_getenv(void* variable) {
	return g_getenv((const gchar*)(variable));
}
gboolean _g_hostname_is_ascii_encoded(void* hostname) {
	return g_hostname_is_ascii_encoded((const gchar*)(hostname));
}
gboolean _g_hostname_is_ip_address(void* hostname) {
	return g_hostname_is_ip_address((const gchar*)(hostname));
}
gboolean _g_hostname_is_non_ascii(void* hostname) {
	return g_hostname_is_non_ascii((const gchar*)(hostname));
}
gchar* _g_hostname_to_ascii(void* hostname) {
	return g_hostname_to_ascii((const gchar*)(hostname));
}
gchar* _g_hostname_to_unicode(void* hostname) {
	return g_hostname_to_unicode((const gchar*)(hostname));
}
const gchar* _g_intern_static_string(void* string_) {
	return g_intern_static_string((const gchar*)(string_));
}
const gchar* _g_intern_string(void* string_) {
	return g_intern_string((const gchar*)(string_));
}
gchar* _g_locale_from_utf8(void* utf8string, gssize len_, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_locale_from_utf8((const gchar*)(utf8string), len_, bytes_read, bytes_written, (GError**)(err));
}
gchar* _g_locale_to_utf8(void* opsysstring, gssize len_, gsize* bytes_read, gsize* bytes_written, void* err) {
	return g_locale_to_utf8((const gchar*)(opsysstring), len_, bytes_read, bytes_written, (GError**)(err));
}
void _g_log_default_handler(void* log_domain, GLogLevelFlags log_level, void* message, gpointer unused_data) {
	g_log_default_handler((const gchar*)(log_domain), log_level, (const gchar*)(message), unused_data);
}
void _g_log_remove_handler(void* log_domain, guint handler_id) {
	g_log_remove_handler((const gchar*)(log_domain), handler_id);
}
GLogLevelFlags _g_log_set_fatal_mask(void* log_domain, GLogLevelFlags fatal_mask) {
	return g_log_set_fatal_mask((const gchar*)(log_domain), fatal_mask);
}
guint _g_log_set_handler(void* log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data) {
	return g_log_set_handler((const gchar*)(log_domain), log_levels, log_func, user_data);
}
gchar* _g_markup_escape_text(void* text, gssize length) {
	return g_markup_escape_text((const gchar*)(text), length);
}
gint _g_mkdir_with_parents(void* pathname, gint mode) {
	return g_mkdir_with_parents((const gchar*)(pathname), mode);
}
void _g_on_error_query(void* prg_name) {
	g_on_error_query((const gchar*)(prg_name));
}
void _g_on_error_stack_trace(void* prg_name) {
	g_on_error_stack_trace((const gchar*)(prg_name));
}
guint _g_parse_debug_string(void* string_, GDebugKey* keys, guint nkeys) {
	return g_parse_debug_string((const gchar*)(string_), keys, nkeys);
}
gchar* _g_path_get_basename(void* file_name) {
	return g_path_get_basename((const gchar*)(file_name));
}
gchar* _g_path_get_dirname(void* file_name) {
	return g_path_get_dirname((const gchar*)(file_name));
}
gboolean _g_path_is_absolute(void* file_name) {
	return g_path_is_absolute((const gchar*)(file_name));
}
const gchar* _g_path_skip_root(void* file_name) {
	return g_path_skip_root((const gchar*)(file_name));
}
gboolean _g_pattern_match(GPatternSpec* pspec, guint string_length, void* string_, void* string_reversed) {
	return g_pattern_match(pspec, string_length, (const gchar*)(string_), (const gchar*)(string_reversed));
}
gboolean _g_pattern_match_simple(void* pattern, void* string_) {
	return g_pattern_match_simple((const gchar*)(pattern), (const gchar*)(string_));
}
gboolean _g_pattern_match_string(GPatternSpec* pspec, void* string_) {
	return g_pattern_match_string(pspec, (const gchar*)(string_));
}
void _g_propagate_error(void* dest, GError* src) {
	g_propagate_error((GError**)(dest), src);
}
GQuark _g_quark_from_static_string(void* string_) {
	return g_quark_from_static_string((const gchar*)(string_));
}
GQuark _g_quark_from_string(void* string_) {
	return g_quark_from_string((const gchar*)(string_));
}
GQuark _g_quark_try_string(void* string_) {
	return g_quark_try_string((const gchar*)(string_));
}
void _g_return_if_fail_warning(void* log_domain, void* pretty_function, void* expression) {
	g_return_if_fail_warning((const char*)(log_domain), (const char*)(pretty_function), (const char*)(expression));
}
int _g_rmdir(void* filename) {
	return g_rmdir((const gchar*)(filename));
}
void _g_set_application_name(void* application_name) {
	g_set_application_name((const gchar*)(application_name));
}
void _g_set_error_literal(void* err, GQuark domain, gint code, void* message) {
	g_set_error_literal((GError**)(err), domain, code, (const gchar*)(message));
}
void _g_set_prgname(void* prgname) {
	g_set_prgname((const gchar*)(prgname));
}
gboolean _g_setenv(void* variable, void* value, gboolean overwrite) {
	return g_setenv((const gchar*)(variable), (const gchar*)(value), overwrite);
}
gboolean _g_shell_parse_argv(void* command_line, gint* argcp, void* argvp, void* err) {
	return g_shell_parse_argv((const gchar*)(command_line), argcp, (gchar***)(argvp), (GError**)(err));
}
gchar* _g_shell_quote(void* unquoted_string) {
	return g_shell_quote((const gchar*)(unquoted_string));
}
gchar* _g_shell_unquote(void* quoted_string, void* err) {
	return g_shell_unquote((const gchar*)(quoted_string), (GError**)(err));
}
gboolean _g_spawn_async(void* working_directory, void* argv, void* envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, void* err) {
	return g_spawn_async((const gchar*)(working_directory), (gchar**)(argv), (gchar**)(envp), flags, child_setup, user_data, child_pid, (GError**)(err));
}
gboolean _g_spawn_async_with_pipes(void* working_directory, void* argv, void* envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid* child_pid, gint* standard_input, gint* standard_output, gint* standard_error, void* err) {
	return g_spawn_async_with_pipes((const gchar*)(working_directory), (gchar**)(argv), (gchar**)(envp), flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, (GError**)(err));
}
gboolean _g_spawn_check_exit_status(gint exit_status, void* err) {
	return g_spawn_check_exit_status(exit_status, (GError**)(err));
}
gboolean _g_spawn_command_line_async(void* command_line, void* err) {
	return g_spawn_command_line_async((const gchar*)(command_line), (GError**)(err));
}
gboolean _g_spawn_command_line_sync(void* command_line, void* standard_output, void* standard_error, gint* exit_status, void* err) {
	return g_spawn_command_line_sync((const gchar*)(command_line), (gchar**)(standard_output), (gchar**)(standard_error), exit_status, (GError**)(err));
}
gboolean _g_spawn_sync(void* working_directory, void* argv, void* envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, void* standard_output, void* standard_error, gint* exit_status, void* err) {
	return g_spawn_sync((const gchar*)(working_directory), (gchar**)(argv), (gchar**)(envp), flags, child_setup, user_data, (gchar**)(standard_output), (gchar**)(standard_error), exit_status, (GError**)(err));
}
gchar* _g_stpcpy(gchar* dest, void* src) {
	return g_stpcpy(dest, (const char*)(src));
}
gboolean _g_str_has_prefix(void* str, void* prefix) {
	return g_str_has_prefix((const gchar*)(str), (const gchar*)(prefix));
}
gboolean _g_str_has_suffix(void* str, void* suffix) {
	return g_str_has_suffix((const gchar*)(str), (const gchar*)(suffix));
}
gchar* _g_strcanon(gchar* string_, void* valid_chars, gchar substitutor) {
	return g_strcanon(string_, (const gchar*)(valid_chars), substitutor);
}
int _g_strcmp0(void* str1, void* str2) {
	return g_strcmp0((const char*)(str1), (const char*)(str2));
}
gchar* _g_strcompress(void* source) {
	return g_strcompress((const gchar*)(source));
}
gchar* _g_strdelimit(gchar* string_, void* delimiters, gchar new_delimiter) {
	return g_strdelimit(string_, (const gchar*)(delimiters), new_delimiter);
}
gchar* _g_strdup(void* str) {
	return g_strdup((const gchar*)(str));
}
gchar** _g_strdupv(void* str_array) {
	return g_strdupv((gchar**)(str_array));
}
gchar* _g_strescape(void* source, void* exceptions) {
	return g_strescape((const gchar*)(source), (const gchar*)(exceptions));
}
void _g_strfreev(void* str_array) {
	g_strfreev((gchar**)(str_array));
}
GString* _g_string_new(void* init) {
	return g_string_new((const gchar*)(init));
}
GString* _g_string_new_len(void* init, gssize len_) {
	return g_string_new_len((const gchar*)(init), len_);
}
const gchar* _g_strip_context(void* msgid, void* msgval) {
	return g_strip_context((const gchar*)(msgid), (const gchar*)(msgval));
}
gchar* _g_strjoinv(void* separator, void* str_array) {
	return g_strjoinv((const gchar*)(separator), (gchar**)(str_array));
}
gsize _g_strlcat(gchar* dest, void* src, gsize dest_size) {
	return g_strlcat(dest, (const gchar*)(src), dest_size);
}
gsize _g_strlcpy(gchar* dest, void* src, gsize dest_size) {
	return g_strlcpy(dest, (const gchar*)(src), dest_size);
}
gchar* _g_strndup(void* str, gsize n) {
	return g_strndup((const gchar*)(str), n);
}
gchar* _g_strrstr(void* haystack, void* needle) {
	return g_strrstr((const gchar*)(haystack), (const gchar*)(needle));
}
gchar* _g_strrstr_len(void* haystack, gssize haystack_len, void* needle) {
	return g_strrstr_len((const gchar*)(haystack), haystack_len, (const gchar*)(needle));
}
gchar** _g_strsplit(void* string_, void* delimiter, gint max_tokens) {
	return g_strsplit((const gchar*)(string_), (const gchar*)(delimiter), max_tokens);
}
gchar** _g_strsplit_set(void* string_, void* delimiters, gint max_tokens) {
	return g_strsplit_set((const gchar*)(string_), (const gchar*)(delimiters), max_tokens);
}
gchar* _g_strstr_len(void* haystack, gssize haystack_len, void* needle) {
	return g_strstr_len((const gchar*)(haystack), haystack_len, (const gchar*)(needle));
}
gdouble _g_strtod(void* nptr, void* endptr) {
	return g_strtod((const gchar*)(nptr), (gchar**)(endptr));
}
guint _g_strv_length(void* str_array) {
	return g_strv_length((gchar**)(str_array));
}
void _g_test_add_data_func(void* testpath, gconstpointer test_data, GTestDataFunc test_func) {
	g_test_add_data_func((const char*)(testpath), test_data, test_func);
}
void _g_test_add_data_func_full(void* testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func) {
	g_test_add_data_func_full((const char*)(testpath), test_data, test_func, data_free_func);
}
void _g_test_add_func(void* testpath, GTestFunc test_func) {
	g_test_add_func((const char*)(testpath), test_func);
}
void _g_test_add_vtable(void* testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	g_test_add_vtable((const char*)(testpath), data_size, test_data, data_setup, data_test, data_teardown);
}
void _g_test_assert_expected_messages_internal(void* domain, void* file, int line, void* func_) {
	g_test_assert_expected_messages_internal((const char*)(domain), (const char*)(file), line, (const char*)(func_));
}
void _g_test_bug(void* bug_uri_snippet) {
	g_test_bug((const char*)(bug_uri_snippet));
}
void _g_test_bug_base(void* uri_pattern) {
	g_test_bug_base((const char*)(uri_pattern));
}
GTestCase* _g_test_create_case(void* test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown) {
	return g_test_create_case((const char*)(test_name), data_size, test_data, data_setup, data_test, data_teardown);
}
GTestSuite* _g_test_create_suite(void* suite_name) {
	return g_test_create_suite((const char*)(suite_name));
}
void _g_test_expect_message(void* log_domain, GLogLevelFlags log_level, void* pattern) {
	g_test_expect_message((const gchar*)(log_domain), log_level, (const gchar*)(pattern));
}
void _g_test_trap_assertions(void* domain, void* file, int line, void* func_, guint64 assertion_flags, void* pattern) {
	g_test_trap_assertions((const char*)(domain), (const char*)(file), line, (const char*)(func_), assertion_flags, (const char*)(pattern));
}
gunichar2* _g_ucs4_to_utf16(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_ucs4_to_utf16((const gunichar*)(str), len_, items_read, items_written, (GError**)(err));
}
gchar* _g_ucs4_to_utf8(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_ucs4_to_utf8((const gunichar*)(str), len_, items_read, items_written, (GError**)(err));
}
gboolean _g_unix_open_pipe(gint* fds, gint flags, void* err) {
	return g_unix_open_pipe(fds, flags, (GError**)(err));
}
gboolean _g_unix_set_fd_nonblocking(gint fd, gboolean nonblock, void* err) {
	return g_unix_set_fd_nonblocking(fd, nonblock, (GError**)(err));
}
int _g_unlink(void* filename) {
	return g_unlink((const gchar*)(filename));
}
void _g_unsetenv(void* variable) {
	g_unsetenv((const gchar*)(variable));
}
char* _g_uri_escape_string(void* unescaped, void* reserved_chars_allowed, gboolean allow_utf8) {
	return g_uri_escape_string((const char*)(unescaped), (const char*)(reserved_chars_allowed), allow_utf8);
}
gchar** _g_uri_list_extract_uris(void* uri_list) {
	return g_uri_list_extract_uris((const gchar*)(uri_list));
}
char* _g_uri_parse_scheme(void* uri) {
	return g_uri_parse_scheme((const char*)(uri));
}
char* _g_uri_unescape_segment(void* escaped_string, void* escaped_string_end, void* illegal_characters) {
	return g_uri_unescape_segment((const char*)(escaped_string), (const char*)(escaped_string_end), (const char*)(illegal_characters));
}
char* _g_uri_unescape_string(void* escaped_string, void* illegal_characters) {
	return g_uri_unescape_string((const char*)(escaped_string), (const char*)(illegal_characters));
}
gunichar* _g_utf16_to_ucs4(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_utf16_to_ucs4((const gunichar2*)(str), len_, items_read, items_written, (GError**)(err));
}
gchar* _g_utf16_to_utf8(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_utf16_to_utf8((const gunichar2*)(str), len_, items_read, items_written, (GError**)(err));
}
gchar* _g_utf8_casefold(void* str, gssize len_) {
	return g_utf8_casefold((const gchar*)(str), len_);
}
gint _g_utf8_collate(void* str1, void* str2) {
	return g_utf8_collate((const gchar*)(str1), (const gchar*)(str2));
}
gchar* _g_utf8_collate_key(void* str, gssize len_) {
	return g_utf8_collate_key((const gchar*)(str), len_);
}
gchar* _g_utf8_collate_key_for_filename(void* str, gssize len_) {
	return g_utf8_collate_key_for_filename((const gchar*)(str), len_);
}
gchar* _g_utf8_find_next_char(void* p, void* end) {
	return g_utf8_find_next_char((const gchar*)(p), (const gchar*)(end));
}
gchar* _g_utf8_find_prev_char(void* str, void* p) {
	return g_utf8_find_prev_char((const gchar*)(str), (const gchar*)(p));
}
gunichar _g_utf8_get_char(void* p) {
	return g_utf8_get_char((const gchar*)(p));
}
gunichar _g_utf8_get_char_validated(void* p, gssize max_len) {
	return g_utf8_get_char_validated((const gchar*)(p), max_len);
}
gchar* _g_utf8_normalize(void* str, gssize len_, GNormalizeMode mode) {
	return g_utf8_normalize((const gchar*)(str), len_, mode);
}
gchar* _g_utf8_offset_to_pointer(void* str, glong offset) {
	return g_utf8_offset_to_pointer((const gchar*)(str), offset);
}
glong _g_utf8_pointer_to_offset(void* str, void* pos) {
	return g_utf8_pointer_to_offset((const gchar*)(str), (const gchar*)(pos));
}
gchar* _g_utf8_prev_char(void* p) {
	return g_utf8_prev_char((const gchar*)(p));
}
gchar* _g_utf8_strchr(void* p, gssize len_, gunichar c) {
	return g_utf8_strchr((const gchar*)(p), len_, c);
}
gchar* _g_utf8_strdown(void* str, gssize len_) {
	return g_utf8_strdown((const gchar*)(str), len_);
}
glong _g_utf8_strlen(void* p, gssize max) {
	return g_utf8_strlen((const gchar*)(p), max);
}
gchar* _g_utf8_strncpy(gchar* dest, void* src, gsize n) {
	return g_utf8_strncpy(dest, (const gchar*)(src), n);
}
gchar* _g_utf8_strrchr(void* p, gssize len_, gunichar c) {
	return g_utf8_strrchr((const gchar*)(p), len_, c);
}
gchar* _g_utf8_strreverse(void* str, gssize len_) {
	return g_utf8_strreverse((const gchar*)(str), len_);
}
gchar* _g_utf8_strup(void* str, gssize len_) {
	return g_utf8_strup((const gchar*)(str), len_);
}
gchar* _g_utf8_substring(void* str, glong start_pos, glong end_pos) {
	return g_utf8_substring((const gchar*)(str), start_pos, end_pos);
}
gunichar* _g_utf8_to_ucs4(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_utf8_to_ucs4((const gchar*)(str), len_, items_read, items_written, (GError**)(err));
}
gunichar* _g_utf8_to_ucs4_fast(void* str, glong len_, glong* items_written) {
	return g_utf8_to_ucs4_fast((const gchar*)(str), len_, items_written);
}
gunichar2* _g_utf8_to_utf16(void* str, glong len_, glong* items_read, glong* items_written, void* err) {
	return g_utf8_to_utf16((const gchar*)(str), len_, items_read, items_written, (GError**)(err));
}
gboolean _g_utf8_validate(gchar* str, gssize max_len, void* end) {
	return g_utf8_validate(str, max_len, (const gchar**)(end));
}
void _g_warn_message(void* domain, void* file, int line, void* func_, void* warnexpr) {
	g_warn_message((const char*)(domain), (const char*)(file), line, (const char*)(func_), (const char*)(warnexpr));
}
*/
import "C"
import (
	"unsafe"
	"runtime"
)

func ArrayAppendVals(array *Array, data unsafe.Pointer, len_ uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_gpointer_data := (C.gconstpointer)(data)
	_guint_len_ := C.guint(len_)
	_c_return_ := C.g_array_append_vals(_cp_array_, _gpointer_data, _guint_len_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayFree(array *Array, free_segment bool) string {
	_cp_array_ := (*C.GArray)(array)
	_gbool_free_segment := C._false()
	if free_segment { _gbool_free_segment = C._true() }
	return gcharp2string(C.g_array_free(_cp_array_, _gbool_free_segment))
}

func ArrayGetElementSize(array *Array) uint {
	_cp_array_ := (*C.GArray)(array)
	return guint2uint(C.g_array_get_element_size(_cp_array_))
}

func ArrayInsertVals(array *Array, index_ uint, data unsafe.Pointer, len_ uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_guint_index_ := C.guint(index_)
	_gpointer_data := (C.gconstpointer)(data)
	_guint_len_ := C.guint(len_)
	_c_return_ := C.g_array_insert_vals(_cp_array_, _guint_index_, _gpointer_data, _guint_len_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayNew(zero_terminated bool, clear_ bool, element_size uint) *Array {
	_gbool_zero_terminated := C._false()
	if zero_terminated { _gbool_zero_terminated = C._true() }
	_gbool_clear_ := C._false()
	if clear_ { _gbool_clear_ = C._true() }
	_guint_element_size := C.guint(element_size)
	_c_return_ := C.g_array_new(_gbool_zero_terminated, _gbool_clear_, _guint_element_size)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayPrependVals(array *Array, data unsafe.Pointer, len_ uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_gpointer_data := (C.gconstpointer)(data)
	_guint_len_ := C.guint(len_)
	_c_return_ := C.g_array_prepend_vals(_cp_array_, _gpointer_data, _guint_len_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayRef(array *Array) *Array {
	_cp_array_ := (*C.GArray)(array)
	_c_return_ := C.g_array_ref(_cp_array_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayRemoveIndex(array *Array, index_ uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_guint_index_ := C.guint(index_)
	_c_return_ := C.g_array_remove_index(_cp_array_, _guint_index_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayRemoveIndexFast(array *Array, index_ uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_guint_index_ := C.guint(index_)
	_c_return_ := C.g_array_remove_index_fast(_cp_array_, _guint_index_)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArrayRemoveRange(array *Array, index_ uint, length uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_guint_index_ := C.guint(index_)
	_guint_length := C.guint(length)
	_c_return_ := C.g_array_remove_range(_cp_array_, _guint_index_, _guint_length)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArraySetClearFunc(array *Array, clear_func C.GDestroyNotify) {
	_cp_array_ := (*C.GArray)(array)
	C.g_array_set_clear_func(_cp_array_, clear_func)
}

func ArraySetSize(array *Array, length uint) *Array {
	_cp_array_ := (*C.GArray)(array)
	_guint_length := C.guint(length)
	_c_return_ := C.g_array_set_size(_cp_array_, _guint_length)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArraySizedNew(zero_terminated bool, clear_ bool, element_size uint, reserved_size uint) *Array {
	_gbool_zero_terminated := C._false()
	if zero_terminated { _gbool_zero_terminated = C._true() }
	_gbool_clear_ := C._false()
	if clear_ { _gbool_clear_ = C._true() }
	_guint_element_size := C.guint(element_size)
	_guint_reserved_size := C.guint(reserved_size)
	_c_return_ := C.g_array_sized_new(_gbool_zero_terminated, _gbool_clear_, _guint_element_size, _guint_reserved_size)
	_go_return_ := (*Array)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Array) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ArraySort(array *Array, compare_func C.GCompareFunc) {
	_cp_array_ := (*C.GArray)(array)
	C.g_array_sort(_cp_array_, compare_func)
}

func ArraySortWithData(array *Array, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) {
	_cp_array_ := (*C.GArray)(array)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_array_sort_with_data(_cp_array_, compare_func, _gpointer_user_data)
}

func ArrayUnref(array *Array) {
	_cp_array_ := (*C.GArray)(array)
	C.g_array_unref(_cp_array_)
}

func AsyncQueueNew() *AsyncQueue {
	_c_return_ := C.g_async_queue_new()
	_go_return_ := (*AsyncQueue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **AsyncQueue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func AsyncQueueNewFull(item_free_func C.GDestroyNotify) *AsyncQueue {
	_c_return_ := C.g_async_queue_new_full(item_free_func)
	_go_return_ := (*AsyncQueue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **AsyncQueue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func BookmarkFileErrorQuark() C.GQuark {
	return C.g_bookmark_file_error_quark()
}

func BookmarkFileNew() *BookmarkFile {
	_c_return_ := C.g_bookmark_file_new()
	_go_return_ := (*BookmarkFile)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **BookmarkFile) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayAppend(array *ByteArray, data *uint8, len_ uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_c_guint8_data := C.guint8(*data)
	_cp_guint8_data := (*C.guint8)(&_c_guint8_data)
	_guint_len_ := C.guint(len_)
	_c_return_ := C._g_byte_array_append(_cp_array_, unsafe.Pointer(_cp_guint8_data), _guint_len_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayFree(array *ByteArray, free_segment bool) *uint8 {
	_cp_array_ := (*C.GByteArray)(array)
	_gbool_free_segment := C._false()
	if free_segment { _gbool_free_segment = C._true() }
	return guint8p2uint8p(C.g_byte_array_free(_cp_array_, _gbool_free_segment))
}

func ByteArrayFreeToBytes(array *ByteArray) *Bytes {
	_cp_array_ := (*C.GByteArray)(array)
	_c_return_ := C.g_byte_array_free_to_bytes(_cp_array_)
	_go_return_ := (*Bytes)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Bytes) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayNew() *ByteArray {
	_c_return_ := C.g_byte_array_new()
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayNewTake(data *uint8, len_ uint64) *ByteArray {
	_c_guint8_data := C.guint8(*data)
	_cp_guint8_data := (*C.guint8)(&_c_guint8_data)
	_gsize_len_ := C.gsize(len_)
	_c_return_ := C.g_byte_array_new_take(_cp_guint8_data, _gsize_len_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayPrepend(array *ByteArray, data *uint8, len_ uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_c_guint8_data := C.guint8(*data)
	_cp_guint8_data := (*C.guint8)(&_c_guint8_data)
	_guint_len_ := C.guint(len_)
	_c_return_ := C._g_byte_array_prepend(_cp_array_, unsafe.Pointer(_cp_guint8_data), _guint_len_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayRef(array *ByteArray) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_c_return_ := C.g_byte_array_ref(_cp_array_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayRemoveIndex(array *ByteArray, index_ uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_guint_index_ := C.guint(index_)
	_c_return_ := C.g_byte_array_remove_index(_cp_array_, _guint_index_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayRemoveIndexFast(array *ByteArray, index_ uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_guint_index_ := C.guint(index_)
	_c_return_ := C.g_byte_array_remove_index_fast(_cp_array_, _guint_index_)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArrayRemoveRange(array *ByteArray, index_ uint, length uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_guint_index_ := C.guint(index_)
	_guint_length := C.guint(length)
	_c_return_ := C.g_byte_array_remove_range(_cp_array_, _guint_index_, _guint_length)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArraySetSize(array *ByteArray, length uint) *ByteArray {
	_cp_array_ := (*C.GByteArray)(array)
	_guint_length := C.guint(length)
	_c_return_ := C.g_byte_array_set_size(_cp_array_, _guint_length)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArraySizedNew(reserved_size uint) *ByteArray {
	_guint_reserved_size := C.guint(reserved_size)
	_c_return_ := C.g_byte_array_sized_new(_guint_reserved_size)
	_go_return_ := (*ByteArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ByteArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ByteArraySort(array *ByteArray, compare_func C.GCompareFunc) {
	_cp_array_ := (*C.GByteArray)(array)
	C.g_byte_array_sort(_cp_array_, compare_func)
}

func ByteArraySortWithData(array *ByteArray, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) {
	_cp_array_ := (*C.GByteArray)(array)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_byte_array_sort_with_data(_cp_array_, compare_func, _gpointer_user_data)
}

func ByteArrayUnref(array *ByteArray) {
	_cp_array_ := (*C.GByteArray)(array)
	C.g_byte_array_unref(_cp_array_)
}

func BytesNew(data unsafe.Pointer, size uint64) *Bytes {
	_gpointer_data := (C.gconstpointer)(data)
	_gsize_size := C.gsize(size)
	_c_return_ := C.g_bytes_new(_gpointer_data, _gsize_size)
	_go_return_ := (*Bytes)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Bytes) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func BytesNewStatic(data unsafe.Pointer, size uint64) *Bytes {
	_gpointer_data := (C.gconstpointer)(data)
	_gsize_size := C.gsize(size)
	_c_return_ := C.g_bytes_new_static(_gpointer_data, _gsize_size)
	_go_return_ := (*Bytes)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Bytes) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func BytesNewTake(data unsafe.Pointer, size uint64) *Bytes {
	_gpointer_data := (C.gpointer)(data)
	_gsize_size := C.gsize(size)
	_c_return_ := C.g_bytes_new_take(_gpointer_data, _gsize_size)
	_go_return_ := (*Bytes)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Bytes) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func BytesNewWithFreeFunc(data unsafe.Pointer, size uint64, free_func C.GDestroyNotify, user_data unsafe.Pointer) *Bytes {
	_gpointer_data := (C.gconstpointer)(data)
	_gsize_size := C.gsize(size)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_bytes_new_with_free_func(_gpointer_data, _gsize_size, free_func, _gpointer_user_data)
	_go_return_ := (*Bytes)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Bytes) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ChecksumNew(checksum_type C.GChecksumType) *Checksum {
	_c_return_ := C.g_checksum_new(checksum_type)
	_go_return_ := (*Checksum)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Checksum) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ChecksumTypeGetLength(checksum_type C.GChecksumType) int64 {
	return gssize2int64(C.g_checksum_type_get_length(checksum_type))
}

func DateNew() *Date {
	_c_return_ := C.g_date_new()
	_go_return_ := (*Date)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Date) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateNewDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) *Date {
	_c_return_ := C.g_date_new_dmy(day, month, year)
	_go_return_ := (*Date)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Date) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateNewJulian(julian_day uint32) *Date {
	_guint32_julian_day := C.guint32(julian_day)
	_c_return_ := C.g_date_new_julian(_guint32_julian_day)
	_go_return_ := (*Date)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Date) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateGetDaysInMonth(month C.GDateMonth, year C.GDateYear) uint8 {
	return guint82uint8(C.g_date_get_days_in_month(month, year))
}

func DateGetMondayWeeksInYear(year C.GDateYear) uint8 {
	return guint82uint8(C.g_date_get_monday_weeks_in_year(year))
}

func DateGetSundayWeeksInYear(year C.GDateYear) uint8 {
	return guint82uint8(C.g_date_get_sunday_weeks_in_year(year))
}

func DateIsLeapYear(year C.GDateYear) bool {
	return gboolean2bool(C.g_date_is_leap_year(year))
}

func DateStrftime(s string, slen uint64, format string, date *Date) uint64 {
	_cstr_s := unsafe.Pointer(C.CString(s))
	defer C.free(_cstr_s)
	_gstr_s := (*C.gchar)(unsafe.Pointer(_cstr_s))
	_gsize_slen := C.gsize(slen)
	_cstr_format := unsafe.Pointer(C.CString(format))
	defer C.free(_cstr_format)
	_gstr_format := (*C.gchar)(unsafe.Pointer(_cstr_format))
	_cp_date_ := (*C.GDate)(date)
	return gsize2uint64(C._g_date_strftime(_gstr_s, _gsize_slen, unsafe.Pointer(_gstr_format), unsafe.Pointer(_cp_date_)))
}

func DateValidDay(day C.GDateDay) bool {
	return gboolean2bool(C.g_date_valid_day(day))
}

func DateValidDmy(day C.GDateDay, month C.GDateMonth, year C.GDateYear) bool {
	return gboolean2bool(C.g_date_valid_dmy(day, month, year))
}

func DateValidJulian(julian_date uint32) bool {
	_guint32_julian_date := C.guint32(julian_date)
	return gboolean2bool(C.g_date_valid_julian(_guint32_julian_date))
}

func DateValidMonth(month C.GDateMonth) bool {
	return gboolean2bool(C.g_date_valid_month(month))
}

func DateValidWeekday(weekday C.GDateWeekday) bool {
	return gboolean2bool(C.g_date_valid_weekday(weekday))
}

func DateValidYear(year C.GDateYear) bool {
	return gboolean2bool(C.g_date_valid_year(year))
}

func DateTimeNew(tz *TimeZone, year int, month int, day int, hour int, minute int, seconds float64) *DateTime {
	_cp_tz_ := (*C.GTimeZone)(tz)
	_gint_year := C.gint(year)
	_gint_month := C.gint(month)
	_gint_day := C.gint(day)
	_gint_hour := C.gint(hour)
	_gint_minute := C.gint(minute)
	_gdouble_seconds := C.gdouble(seconds)
	_c_return_ := C.g_date_time_new(_cp_tz_, _gint_year, _gint_month, _gint_day, _gint_hour, _gint_minute, _gdouble_seconds)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewFromTimevalLocal(tv *TimeVal) *DateTime {
	_cp_tv_ := (*C.GTimeVal)(tv)
	_c_return_ := C._g_date_time_new_from_timeval_local(unsafe.Pointer(_cp_tv_))
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewFromTimevalUtc(tv *TimeVal) *DateTime {
	_cp_tv_ := (*C.GTimeVal)(tv)
	_c_return_ := C._g_date_time_new_from_timeval_utc(unsafe.Pointer(_cp_tv_))
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewFromUnixLocal(t int64) *DateTime {
	_gint64_t := C.gint64(t)
	_c_return_ := C.g_date_time_new_from_unix_local(_gint64_t)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewFromUnixUtc(t int64) *DateTime {
	_gint64_t := C.gint64(t)
	_c_return_ := C.g_date_time_new_from_unix_utc(_gint64_t)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewLocal(year int, month int, day int, hour int, minute int, seconds float64) *DateTime {
	_gint_year := C.gint(year)
	_gint_month := C.gint(month)
	_gint_day := C.gint(day)
	_gint_hour := C.gint(hour)
	_gint_minute := C.gint(minute)
	_gdouble_seconds := C.gdouble(seconds)
	_c_return_ := C.g_date_time_new_local(_gint_year, _gint_month, _gint_day, _gint_hour, _gint_minute, _gdouble_seconds)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewNow(tz *TimeZone) *DateTime {
	_cp_tz_ := (*C.GTimeZone)(tz)
	_c_return_ := C.g_date_time_new_now(_cp_tz_)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewNowLocal() *DateTime {
	_c_return_ := C.g_date_time_new_now_local()
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewNowUtc() *DateTime {
	_c_return_ := C.g_date_time_new_now_utc()
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeNewUtc(year int, month int, day int, hour int, minute int, seconds float64) *DateTime {
	_gint_year := C.gint(year)
	_gint_month := C.gint(month)
	_gint_day := C.gint(day)
	_gint_hour := C.gint(hour)
	_gint_minute := C.gint(minute)
	_gdouble_seconds := C.gdouble(seconds)
	_c_return_ := C.g_date_time_new_utc(_gint_year, _gint_month, _gint_day, _gint_hour, _gint_minute, _gdouble_seconds)
	_go_return_ := (*DateTime)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DateTime) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func DateTimeCompare(dt1 unsafe.Pointer, dt2 unsafe.Pointer) int {
	_gpointer_dt1 := (C.gconstpointer)(dt1)
	_gpointer_dt2 := (C.gconstpointer)(dt2)
	return gint2int(C.g_date_time_compare(_gpointer_dt1, _gpointer_dt2))
}

func DateTimeEqual(dt1 unsafe.Pointer, dt2 unsafe.Pointer) bool {
	_gpointer_dt1 := (C.gconstpointer)(dt1)
	_gpointer_dt2 := (C.gconstpointer)(dt2)
	return gboolean2bool(C.g_date_time_equal(_gpointer_dt1, _gpointer_dt2))
}

func DateTimeHash(datetime unsafe.Pointer) uint {
	_gpointer_datetime := (C.gconstpointer)(datetime)
	return guint2uint(C.g_date_time_hash(_gpointer_datetime))
}

func DirMakeTmp(tmpl string, err unsafe.Pointer) string {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	return gcharp2string(C._g_dir_make_tmp(_gstr_tmpl, unsafe.Pointer(err)))
}

func DirOpen(path string, flags uint, err unsafe.Pointer) *Dir {
	_cstr_path := unsafe.Pointer(C.CString(path))
	defer C.free(_cstr_path)
	_gstr_path := (*C.gchar)(unsafe.Pointer(_cstr_path))
	_guint_flags := C.guint(flags)
	_c_return_ := C._g_dir_open(unsafe.Pointer(_gstr_path), _guint_flags, unsafe.Pointer(err))
	_go_return_ := (*Dir)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Dir) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//TODO g_error_new

func ErrorNewLiteral(domain C.GQuark, code int, message string) *Error {
	_gint_code := C.gint(code)
	_cstr_message := unsafe.Pointer(C.CString(message))
	defer C.free(_cstr_message)
	_gstr_message := (*C.gchar)(unsafe.Pointer(_cstr_message))
	_c_return_ := C._g_error_new_literal(domain, _gint_code, unsafe.Pointer(_gstr_message))
	_go_return_ := (*Error)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Error) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//TODO g_error_new_valist

func HashTableAdd(hash_table *HashTable, key unsafe.Pointer) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gpointer)(key)
	C.g_hash_table_add(_cp_hash_table_, _gpointer_key)
}

func HashTableContains(hash_table *HashTable, key unsafe.Pointer) bool {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gconstpointer)(key)
	return gboolean2bool(C.g_hash_table_contains(_cp_hash_table_, _gpointer_key))
}

func HashTableDestroy(hash_table *HashTable) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_destroy(_cp_hash_table_)
}

func HashTableFind(hash_table *HashTable, predicate C.GHRFunc, user_data unsafe.Pointer) unsafe.Pointer {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_user_data := (C.gpointer)(user_data)
	return unsafe.Pointer(C.g_hash_table_find(_cp_hash_table_, predicate, _gpointer_user_data))
}

func HashTableForeach(hash_table *HashTable, func_ C.GHFunc, user_data unsafe.Pointer) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_hash_table_foreach(_cp_hash_table_, func_, _gpointer_user_data)
}

func HashTableForeachRemove(hash_table *HashTable, func_ C.GHRFunc, user_data unsafe.Pointer) uint {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_hash_table_foreach_remove(_cp_hash_table_, func_, _gpointer_user_data))
}

func HashTableForeachSteal(hash_table *HashTable, func_ C.GHRFunc, user_data unsafe.Pointer) uint {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_hash_table_foreach_steal(_cp_hash_table_, func_, _gpointer_user_data))
}

func HashTableGetKeys(hash_table *HashTable) *List {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_c_return_ := C.g_hash_table_get_keys(_cp_hash_table_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HashTableGetValues(hash_table *HashTable) *List {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_c_return_ := C.g_hash_table_get_values(_cp_hash_table_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HashTableInsert(hash_table *HashTable, key unsafe.Pointer, value unsafe.Pointer) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gpointer)(key)
	_gpointer_value := (C.gpointer)(value)
	C.g_hash_table_insert(_cp_hash_table_, _gpointer_key, _gpointer_value)
}

func HashTableLookup(hash_table *HashTable, key unsafe.Pointer) unsafe.Pointer {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gconstpointer)(key)
	return unsafe.Pointer(C.g_hash_table_lookup(_cp_hash_table_, _gpointer_key))
}

func HashTableLookupExtended(hash_table *HashTable, lookup_key unsafe.Pointer, orig_key *C.gpointer, value *C.gpointer) bool {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_lookup_key := (C.gconstpointer)(lookup_key)
	return gboolean2bool(C.g_hash_table_lookup_extended(_cp_hash_table_, _gpointer_lookup_key, orig_key, value))
}

func HashTableNew(hash_func C.GHashFunc, key_equal_func C.GEqualFunc) *HashTable {
	_c_return_ := C.g_hash_table_new(hash_func, key_equal_func)
	_go_return_ := (*HashTable)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **HashTable) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HashTableNewFull(hash_func C.GHashFunc, key_equal_func C.GEqualFunc, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) *HashTable {
	_c_return_ := C.g_hash_table_new_full(hash_func, key_equal_func, key_destroy_func, value_destroy_func)
	_go_return_ := (*HashTable)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **HashTable) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HashTableRef(hash_table *HashTable) *HashTable {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_c_return_ := C.g_hash_table_ref(_cp_hash_table_)
	_go_return_ := (*HashTable)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **HashTable) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HashTableRemove(hash_table *HashTable, key unsafe.Pointer) bool {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gconstpointer)(key)
	return gboolean2bool(C.g_hash_table_remove(_cp_hash_table_, _gpointer_key))
}

func HashTableRemoveAll(hash_table *HashTable) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_remove_all(_cp_hash_table_)
}

func HashTableReplace(hash_table *HashTable, key unsafe.Pointer, value unsafe.Pointer) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gpointer)(key)
	_gpointer_value := (C.gpointer)(value)
	C.g_hash_table_replace(_cp_hash_table_, _gpointer_key, _gpointer_value)
}

func HashTableSize(hash_table *HashTable) uint {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	return guint2uint(C.g_hash_table_size(_cp_hash_table_))
}

func HashTableSteal(hash_table *HashTable, key unsafe.Pointer) bool {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	_gpointer_key := (C.gconstpointer)(key)
	return gboolean2bool(C.g_hash_table_steal(_cp_hash_table_, _gpointer_key))
}

func HashTableStealAll(hash_table *HashTable) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_steal_all(_cp_hash_table_)
}

func HashTableUnref(hash_table *HashTable) {
	_cp_hash_table_ := (*C.GHashTable)(hash_table)
	C.g_hash_table_unref(_cp_hash_table_)
}

func HmacNew(digest_type C.GChecksumType, key []byte, key_len uint64) *Hmac {
	_custr_key := unsafe.Pointer(C.CString(string(key)))
	defer C.free(_custr_key)
	_gustr_key := (*C.guchar)(unsafe.Pointer(_custr_key))
	_gsize_key_len := C.gsize(key_len)
	_c_return_ := C.g_hmac_new(digest_type, _gustr_key, _gsize_key_len)
	_go_return_ := (*Hmac)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hmac) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookAlloc(hook_list *HookList) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_c_return_ := C.g_hook_alloc(_cp_hook_list_)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookDestroy(hook_list *HookList, hook_id uint64) bool {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gulong_hook_id := C.gulong(hook_id)
	return gboolean2bool(C.g_hook_destroy(_cp_hook_list_, _gulong_hook_id))
}

func HookDestroyLink(hook_list *HookList, hook *Hook) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_destroy_link(_cp_hook_list_, _cp_hook_)
}

func HookFind(hook_list *HookList, need_valids bool, func_ C.GHookFindFunc, data unsafe.Pointer) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gbool_need_valids := C._false()
	if need_valids { _gbool_need_valids = C._true() }
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_hook_find(_cp_hook_list_, _gbool_need_valids, func_, _gpointer_data)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookFindData(hook_list *HookList, need_valids bool, data unsafe.Pointer) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gbool_need_valids := C._false()
	if need_valids { _gbool_need_valids = C._true() }
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_hook_find_data(_cp_hook_list_, _gbool_need_valids, _gpointer_data)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookFindFunc(hook_list *HookList, need_valids bool, func_ unsafe.Pointer) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gbool_need_valids := C._false()
	if need_valids { _gbool_need_valids = C._true() }
	_gpointer_func_ := (C.gpointer)(func_)
	_c_return_ := C.g_hook_find_func(_cp_hook_list_, _gbool_need_valids, _gpointer_func_)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookFindFuncData(hook_list *HookList, need_valids bool, func_ unsafe.Pointer, data unsafe.Pointer) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gbool_need_valids := C._false()
	if need_valids { _gbool_need_valids = C._true() }
	_gpointer_func_ := (C.gpointer)(func_)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_hook_find_func_data(_cp_hook_list_, _gbool_need_valids, _gpointer_func_, _gpointer_data)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookFirstValid(hook_list *HookList, may_be_in_call bool) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gbool_may_be_in_call := C._false()
	if may_be_in_call { _gbool_may_be_in_call = C._true() }
	_c_return_ := C.g_hook_first_valid(_cp_hook_list_, _gbool_may_be_in_call)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookFree(hook_list *HookList, hook *Hook) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_free(_cp_hook_list_, _cp_hook_)
}

func HookGet(hook_list *HookList, hook_id uint64) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_gulong_hook_id := C.gulong(hook_id)
	_c_return_ := C.g_hook_get(_cp_hook_list_, _gulong_hook_id)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookInsertBefore(hook_list *HookList, sibling *Hook, hook *Hook) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_sibling_ := (*C.GHook)(sibling)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_insert_before(_cp_hook_list_, _cp_sibling_, _cp_hook_)
}

func HookInsertSorted(hook_list *HookList, hook *Hook, func_ C.GHookCompareFunc) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_insert_sorted(_cp_hook_list_, _cp_hook_, func_)
}

func HookNextValid(hook_list *HookList, hook *Hook, may_be_in_call bool) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	_gbool_may_be_in_call := C._false()
	if may_be_in_call { _gbool_may_be_in_call = C._true() }
	_c_return_ := C.g_hook_next_valid(_cp_hook_list_, _cp_hook_, _gbool_may_be_in_call)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookPrepend(hook_list *HookList, hook *Hook) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_prepend(_cp_hook_list_, _cp_hook_)
}

func HookRef(hook_list *HookList, hook *Hook) *Hook {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	_c_return_ := C.g_hook_ref(_cp_hook_list_, _cp_hook_)
	_go_return_ := (*Hook)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Hook) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func HookUnref(hook_list *HookList, hook *Hook) {
	_cp_hook_list_ := (*C.GHookList)(hook_list)
	_cp_hook_ := (*C.GHook)(hook)
	C.g_hook_unref(_cp_hook_list_, _cp_hook_)
}

func IConvOpen(to_codeset string, from_codeset string) C.GIConv {
	_cstr_to_codeset := unsafe.Pointer(C.CString(to_codeset))
	defer C.free(_cstr_to_codeset)
	_gstr_to_codeset := (*C.gchar)(unsafe.Pointer(_cstr_to_codeset))
	_cstr_from_codeset := unsafe.Pointer(C.CString(from_codeset))
	defer C.free(_cstr_from_codeset)
	_gstr_from_codeset := (*C.gchar)(unsafe.Pointer(_cstr_from_codeset))
	return C._g_iconv_open(unsafe.Pointer(_gstr_to_codeset), unsafe.Pointer(_gstr_from_codeset))
}

func IOChannelNewFile(filename string, mode string, err unsafe.Pointer) *IOChannel {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_cstr_mode := unsafe.Pointer(C.CString(mode))
	defer C.free(_cstr_mode)
	_gstr_mode := (*C.gchar)(unsafe.Pointer(_cstr_mode))
	_c_return_ := C._g_io_channel_new_file(unsafe.Pointer(_gstr_filename), unsafe.Pointer(_gstr_mode), unsafe.Pointer(err))
	_go_return_ := (*IOChannel)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOChannel) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOChannelUnixNew(fd C.int) *IOChannel {
	_c_return_ := C.g_io_channel_unix_new(fd)
	_go_return_ := (*IOChannel)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOChannel) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOChannelErrorFromErrno(en int) C.GIOChannelError {
	_gint_en := C.gint(en)
	return C.g_io_channel_error_from_errno(_gint_en)
}

func IOChannelErrorQuark() C.GQuark {
	return C.g_io_channel_error_quark()
}

func KeyFileNew() *KeyFile {
	_c_return_ := C.g_key_file_new()
	_go_return_ := (*KeyFile)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **KeyFile) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func KeyFileErrorQuark() C.GQuark {
	return C.g_key_file_error_quark()
}

func ListAlloc() *List {
	_c_return_ := C.g_list_alloc()
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListAppend(list *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_list_append(_cp_list_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListConcat(list1 *List, list2 *List) *List {
	_cp_list1_ := (*C.GList)(list1)
	_cp_list2_ := (*C.GList)(list2)
	_c_return_ := C.g_list_concat(_cp_list1_, _cp_list2_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListCopy(list *List) *List {
	_cp_list_ := (*C.GList)(list)
	_c_return_ := C.g_list_copy(_cp_list_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListCopyDeep(list *List, func_ C.GCopyFunc, user_data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_list_copy_deep(_cp_list_, func_, _gpointer_user_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListDeleteLink(list *List, link_ *List) *List {
	_cp_list_ := (*C.GList)(list)
	_cp_link__ := (*C.GList)(link_)
	_c_return_ := C.g_list_delete_link(_cp_list_, _cp_link__)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListFind(list *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_list_find(_cp_list_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListFindCustom(list *List, data unsafe.Pointer, func_ C.GCompareFunc) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_list_find_custom(_cp_list_, _gpointer_data, func_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListFirst(list *List) *List {
	_cp_list_ := (*C.GList)(list)
	_c_return_ := C.g_list_first(_cp_list_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListForeach(list *List, func_ C.GFunc, user_data unsafe.Pointer) {
	_cp_list_ := (*C.GList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_list_foreach(_cp_list_, func_, _gpointer_user_data)
}

func ListFree(list *List) {
	_cp_list_ := (*C.GList)(list)
	C.g_list_free(_cp_list_)
}

func ListFree1(list *List) {
	_cp_list_ := (*C.GList)(list)
	C.g_list_free_1(_cp_list_)
}

func ListFreeFull(list *List, free_func C.GDestroyNotify) {
	_cp_list_ := (*C.GList)(list)
	C.g_list_free_full(_cp_list_, free_func)
}

func ListIndex(list *List, data unsafe.Pointer) int {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	return gint2int(C.g_list_index(_cp_list_, _gpointer_data))
}

func ListInsert(list *List, data unsafe.Pointer, position int) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gpointer)(data)
	_gint_position := C.gint(position)
	_c_return_ := C.g_list_insert(_cp_list_, _gpointer_data, _gint_position)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListInsertBefore(list *List, sibling *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_cp_sibling_ := (*C.GList)(sibling)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_list_insert_before(_cp_list_, _cp_sibling_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListInsertSorted(list *List, data unsafe.Pointer, func_ C.GCompareFunc) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_list_insert_sorted(_cp_list_, _gpointer_data, func_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListInsertSortedWithData(list *List, data unsafe.Pointer, func_ C.GCompareDataFunc, user_data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gpointer)(data)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_list_insert_sorted_with_data(_cp_list_, _gpointer_data, func_, _gpointer_user_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListLast(list *List) *List {
	_cp_list_ := (*C.GList)(list)
	_c_return_ := C.g_list_last(_cp_list_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListLength(list *List) uint {
	_cp_list_ := (*C.GList)(list)
	return guint2uint(C.g_list_length(_cp_list_))
}

func ListNth(list *List, n uint) *List {
	_cp_list_ := (*C.GList)(list)
	_guint_n := C.guint(n)
	_c_return_ := C.g_list_nth(_cp_list_, _guint_n)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListNthData(list *List, n uint) unsafe.Pointer {
	_cp_list_ := (*C.GList)(list)
	_guint_n := C.guint(n)
	return unsafe.Pointer(C.g_list_nth_data(_cp_list_, _guint_n))
}

func ListNthPrev(list *List, n uint) *List {
	_cp_list_ := (*C.GList)(list)
	_guint_n := C.guint(n)
	_c_return_ := C.g_list_nth_prev(_cp_list_, _guint_n)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListPosition(list *List, llink *List) int {
	_cp_list_ := (*C.GList)(list)
	_cp_llink_ := (*C.GList)(llink)
	return gint2int(C.g_list_position(_cp_list_, _cp_llink_))
}

func ListPrepend(list *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_list_prepend(_cp_list_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListRemove(list *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_list_remove(_cp_list_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListRemoveAll(list *List, data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_list_remove_all(_cp_list_, _gpointer_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListRemoveLink(list *List, llink *List) *List {
	_cp_list_ := (*C.GList)(list)
	_cp_llink_ := (*C.GList)(llink)
	_c_return_ := C.g_list_remove_link(_cp_list_, _cp_llink_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListReverse(list *List) *List {
	_cp_list_ := (*C.GList)(list)
	_c_return_ := C.g_list_reverse(_cp_list_)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListSort(list *List, compare_func C.GCompareFunc) *List {
	_cp_list_ := (*C.GList)(list)
	_c_return_ := C.g_list_sort(_cp_list_, compare_func)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ListSortWithData(list *List, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) *List {
	_cp_list_ := (*C.GList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_list_sort_with_data(_cp_list_, compare_func, _gpointer_user_data)
	_go_return_ := (*List)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **List) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainContextNew() *MainContext {
	_c_return_ := C.g_main_context_new()
	_go_return_ := (*MainContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MainContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainContextDefault() *MainContext {
	_c_return_ := C.g_main_context_default()
	_go_return_ := (*MainContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MainContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainContextGetThreadDefault() *MainContext {
	_c_return_ := C.g_main_context_get_thread_default()
	_go_return_ := (*MainContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MainContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainContextRefThreadDefault() *MainContext {
	_c_return_ := C.g_main_context_ref_thread_default()
	_go_return_ := (*MainContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MainContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainLoopNew(context *MainContext, is_running bool) *MainLoop {
	_cp_context_ := (*C.GMainContext)(context)
	_gbool_is_running := C._false()
	if is_running { _gbool_is_running = C._true() }
	_c_return_ := C.g_main_loop_new(_cp_context_, _gbool_is_running)
	_go_return_ := (*MainLoop)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MainLoop) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MappedFileNew(filename string, writable bool, err unsafe.Pointer) *MappedFile {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_gbool_writable := C._false()
	if writable { _gbool_writable = C._true() }
	_c_return_ := C._g_mapped_file_new(unsafe.Pointer(_gstr_filename), _gbool_writable, unsafe.Pointer(err))
	_go_return_ := (*MappedFile)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MappedFile) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MappedFileNewFromFd(fd int, writable bool, err unsafe.Pointer) *MappedFile {
	_gint_fd := C.gint(fd)
	_gbool_writable := C._false()
	if writable { _gbool_writable = C._true() }
	_c_return_ := C._g_mapped_file_new_from_fd(_gint_fd, _gbool_writable, unsafe.Pointer(err))
	_go_return_ := (*MappedFile)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MappedFile) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MarkupParseContextNew(parser *MarkupParser, flags C.GMarkupParseFlags, user_data unsafe.Pointer, user_data_dnotify C.GDestroyNotify) *MarkupParseContext {
	_cp_parser_ := (*C.GMarkupParser)(parser)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C._g_markup_parse_context_new(unsafe.Pointer(_cp_parser_), flags, _gpointer_user_data, user_data_dnotify)
	_go_return_ := (*MarkupParseContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **MarkupParseContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func NodeNew(data unsafe.Pointer) *Node {
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_node_new(_gpointer_data)
	_go_return_ := (*Node)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Node) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//Skipped g_once_init_enter

//Skipped g_once_init_leave

func OptionContextNew(parameter_string string) *OptionContext {
	_cstr_parameter_string := unsafe.Pointer(C.CString(parameter_string))
	defer C.free(_cstr_parameter_string)
	_gstr_parameter_string := (*C.gchar)(unsafe.Pointer(_cstr_parameter_string))
	_c_return_ := C._g_option_context_new(unsafe.Pointer(_gstr_parameter_string))
	_go_return_ := (*OptionContext)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **OptionContext) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func OptionGroupNew(name string, description string, help_description string, user_data unsafe.Pointer, destroy C.GDestroyNotify) *OptionGroup {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_description := unsafe.Pointer(C.CString(description))
	defer C.free(_cstr_description)
	_gstr_description := (*C.gchar)(unsafe.Pointer(_cstr_description))
	_cstr_help_description := unsafe.Pointer(C.CString(help_description))
	defer C.free(_cstr_help_description)
	_gstr_help_description := (*C.gchar)(unsafe.Pointer(_cstr_help_description))
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C._g_option_group_new(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_description), unsafe.Pointer(_gstr_help_description), _gpointer_user_data, destroy)
	_go_return_ := (*OptionGroup)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **OptionGroup) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PatternSpecNew(pattern string) *PatternSpec {
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	_c_return_ := C._g_pattern_spec_new(unsafe.Pointer(_gstr_pattern))
	_go_return_ := (*PatternSpec)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PatternSpec) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArrayAdd(array *PtrArray, data unsafe.Pointer) {
	_cp_array_ := (*C.GPtrArray)(array)
	_gpointer_data := (C.gpointer)(data)
	C.g_ptr_array_add(_cp_array_, _gpointer_data)
}

func PtrArrayForeach(array *PtrArray, func_ C.GFunc, user_data unsafe.Pointer) {
	_cp_array_ := (*C.GPtrArray)(array)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_ptr_array_foreach(_cp_array_, func_, _gpointer_user_data)
}

func PtrArrayFree(array *PtrArray, free_seg bool) *C.gpointer {
	_cp_array_ := (*C.GPtrArray)(array)
	_gbool_free_seg := C._false()
	if free_seg { _gbool_free_seg = C._true() }
	return C.g_ptr_array_free(_cp_array_, _gbool_free_seg)
}

func PtrArrayNew() *PtrArray {
	_c_return_ := C.g_ptr_array_new()
	_go_return_ := (*PtrArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PtrArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArrayNewFull(reserved_size uint, element_free_func C.GDestroyNotify) *PtrArray {
	_guint_reserved_size := C.guint(reserved_size)
	_c_return_ := C.g_ptr_array_new_full(_guint_reserved_size, element_free_func)
	_go_return_ := (*PtrArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PtrArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArrayNewWithFreeFunc(element_free_func C.GDestroyNotify) *PtrArray {
	_c_return_ := C.g_ptr_array_new_with_free_func(element_free_func)
	_go_return_ := (*PtrArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PtrArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArrayRef(array *PtrArray) *PtrArray {
	_cp_array_ := (*C.GPtrArray)(array)
	_c_return_ := C.g_ptr_array_ref(_cp_array_)
	_go_return_ := (*PtrArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PtrArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArrayRemove(array *PtrArray, data unsafe.Pointer) bool {
	_cp_array_ := (*C.GPtrArray)(array)
	_gpointer_data := (C.gpointer)(data)
	return gboolean2bool(C.g_ptr_array_remove(_cp_array_, _gpointer_data))
}

func PtrArrayRemoveFast(array *PtrArray, data unsafe.Pointer) bool {
	_cp_array_ := (*C.GPtrArray)(array)
	_gpointer_data := (C.gpointer)(data)
	return gboolean2bool(C.g_ptr_array_remove_fast(_cp_array_, _gpointer_data))
}

func PtrArrayRemoveIndex(array *PtrArray, index_ uint) unsafe.Pointer {
	_cp_array_ := (*C.GPtrArray)(array)
	_guint_index_ := C.guint(index_)
	return unsafe.Pointer(C.g_ptr_array_remove_index(_cp_array_, _guint_index_))
}

func PtrArrayRemoveIndexFast(array *PtrArray, index_ uint) unsafe.Pointer {
	_cp_array_ := (*C.GPtrArray)(array)
	_guint_index_ := C.guint(index_)
	return unsafe.Pointer(C.g_ptr_array_remove_index_fast(_cp_array_, _guint_index_))
}

func PtrArrayRemoveRange(array *PtrArray, index_ uint, length uint) {
	_cp_array_ := (*C.GPtrArray)(array)
	_guint_index_ := C.guint(index_)
	_guint_length := C.guint(length)
	C.g_ptr_array_remove_range(_cp_array_, _guint_index_, _guint_length)
}

func PtrArraySetFreeFunc(array *PtrArray, element_free_func C.GDestroyNotify) {
	_cp_array_ := (*C.GPtrArray)(array)
	C.g_ptr_array_set_free_func(_cp_array_, element_free_func)
}

func PtrArraySetSize(array *PtrArray, length int) {
	_cp_array_ := (*C.GPtrArray)(array)
	_gint_length := C.gint(length)
	C.g_ptr_array_set_size(_cp_array_, _gint_length)
}

func PtrArraySizedNew(reserved_size uint) *PtrArray {
	_guint_reserved_size := C.guint(reserved_size)
	_c_return_ := C.g_ptr_array_sized_new(_guint_reserved_size)
	_go_return_ := (*PtrArray)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **PtrArray) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func PtrArraySort(array *PtrArray, compare_func C.GCompareFunc) {
	_cp_array_ := (*C.GPtrArray)(array)
	C.g_ptr_array_sort(_cp_array_, compare_func)
}

func PtrArraySortWithData(array *PtrArray, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) {
	_cp_array_ := (*C.GPtrArray)(array)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_ptr_array_sort_with_data(_cp_array_, compare_func, _gpointer_user_data)
}

func PtrArrayUnref(array *PtrArray) {
	_cp_array_ := (*C.GPtrArray)(array)
	C.g_ptr_array_unref(_cp_array_)
}

func QueueNew() *Queue {
	_c_return_ := C.g_queue_new()
	_go_return_ := (*Queue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Queue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func RandNew() *Rand {
	_c_return_ := C.g_rand_new()
	_go_return_ := (*Rand)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Rand) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func RandNewWithSeed(seed uint32) *Rand {
	_guint32_seed := C.guint32(seed)
	_c_return_ := C.g_rand_new_with_seed(_guint32_seed)
	_go_return_ := (*Rand)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Rand) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func RandNewWithSeedArray(seed *uint32, seed_length uint) *Rand {
	_c_guint32_seed := C.guint32(*seed)
	_cp_guint32_seed := (*C.guint32)(&_c_guint32_seed)
	_guint_seed_length := C.guint(seed_length)
	_c_return_ := C._g_rand_new_with_seed_array(unsafe.Pointer(_cp_guint32_seed), _guint_seed_length)
	_go_return_ := (*Rand)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Rand) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func RegexNew(pattern string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags, err unsafe.Pointer) *Regex {
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	_c_return_ := C._g_regex_new(unsafe.Pointer(_gstr_pattern), compile_options, match_options, unsafe.Pointer(err))
	_go_return_ := (*Regex)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Regex) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func RegexCheckReplacement(replacement string, has_references *C.gboolean, err unsafe.Pointer) bool {
	_cstr_replacement := unsafe.Pointer(C.CString(replacement))
	defer C.free(_cstr_replacement)
	_gstr_replacement := (*C.gchar)(unsafe.Pointer(_cstr_replacement))
	return gboolean2bool(C._g_regex_check_replacement(unsafe.Pointer(_gstr_replacement), has_references, unsafe.Pointer(err)))
}

func RegexErrorQuark() C.GQuark {
	return C.g_regex_error_quark()
}

func RegexEscapeNul(string_ string, length int) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_gint_length := C.gint(length)
	return gcharp2string(C._g_regex_escape_nul(unsafe.Pointer(_gstr_string_), _gint_length))
}

func RegexEscapeString(string_ string, length int) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_gint_length := C.gint(length)
	return gcharp2string(C.g_regex_escape_string(_gstr_string_, _gint_length))
}

func RegexMatchSimple(pattern string, string_ string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) bool {
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_regex_match_simple(unsafe.Pointer(_gstr_pattern), unsafe.Pointer(_gstr_string_), compile_options, match_options))
}

func RegexSplitSimple(pattern string, string_ string, compile_options C.GRegexCompileFlags, match_options C.GRegexMatchFlags) unsafe.Pointer {
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return unsafe.Pointer(C._g_regex_split_simple(unsafe.Pointer(_gstr_pattern), unsafe.Pointer(_gstr_string_), compile_options, match_options))
}

func SListAlloc() *SList {
	_c_return_ := C.g_slist_alloc()
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListAppend(list *SList, data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_slist_append(_cp_list_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListConcat(list1 *SList, list2 *SList) *SList {
	_cp_list1_ := (*C.GSList)(list1)
	_cp_list2_ := (*C.GSList)(list2)
	_c_return_ := C.g_slist_concat(_cp_list1_, _cp_list2_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListCopy(list *SList) *SList {
	_cp_list_ := (*C.GSList)(list)
	_c_return_ := C.g_slist_copy(_cp_list_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListCopyDeep(list *SList, func_ C.GCopyFunc, user_data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_slist_copy_deep(_cp_list_, func_, _gpointer_user_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListDeleteLink(list *SList, link_ *SList) *SList {
	_cp_list_ := (*C.GSList)(list)
	_cp_link__ := (*C.GSList)(link_)
	_c_return_ := C.g_slist_delete_link(_cp_list_, _cp_link__)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListFind(list *SList, data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_slist_find(_cp_list_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListFindCustom(list *SList, data unsafe.Pointer, func_ C.GCompareFunc) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_slist_find_custom(_cp_list_, _gpointer_data, func_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListForeach(list *SList, func_ C.GFunc, user_data unsafe.Pointer) {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_slist_foreach(_cp_list_, func_, _gpointer_user_data)
}

func SListFree(list *SList) {
	_cp_list_ := (*C.GSList)(list)
	C.g_slist_free(_cp_list_)
}

func SListFree1(list *SList) {
	_cp_list_ := (*C.GSList)(list)
	C.g_slist_free_1(_cp_list_)
}

func SListFreeFull(list *SList, free_func C.GDestroyNotify) {
	_cp_list_ := (*C.GSList)(list)
	C.g_slist_free_full(_cp_list_, free_func)
}

func SListIndex(list *SList, data unsafe.Pointer) int {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	return gint2int(C.g_slist_index(_cp_list_, _gpointer_data))
}

func SListInsert(list *SList, data unsafe.Pointer, position int) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gpointer)(data)
	_gint_position := C.gint(position)
	_c_return_ := C.g_slist_insert(_cp_list_, _gpointer_data, _gint_position)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListInsertBefore(slist *SList, sibling *SList, data unsafe.Pointer) *SList {
	_cp_slist_ := (*C.GSList)(slist)
	_cp_sibling_ := (*C.GSList)(sibling)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_slist_insert_before(_cp_slist_, _cp_sibling_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListInsertSorted(list *SList, data unsafe.Pointer, func_ C.GCompareFunc) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_slist_insert_sorted(_cp_list_, _gpointer_data, func_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListInsertSortedWithData(list *SList, data unsafe.Pointer, func_ C.GCompareDataFunc, user_data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gpointer)(data)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_slist_insert_sorted_with_data(_cp_list_, _gpointer_data, func_, _gpointer_user_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListLast(list *SList) *SList {
	_cp_list_ := (*C.GSList)(list)
	_c_return_ := C.g_slist_last(_cp_list_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListLength(list *SList) uint {
	_cp_list_ := (*C.GSList)(list)
	return guint2uint(C.g_slist_length(_cp_list_))
}

func SListNth(list *SList, n uint) *SList {
	_cp_list_ := (*C.GSList)(list)
	_guint_n := C.guint(n)
	_c_return_ := C.g_slist_nth(_cp_list_, _guint_n)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListNthData(list *SList, n uint) unsafe.Pointer {
	_cp_list_ := (*C.GSList)(list)
	_guint_n := C.guint(n)
	return unsafe.Pointer(C.g_slist_nth_data(_cp_list_, _guint_n))
}

func SListPosition(list *SList, llink *SList) int {
	_cp_list_ := (*C.GSList)(list)
	_cp_llink_ := (*C.GSList)(llink)
	return gint2int(C.g_slist_position(_cp_list_, _cp_llink_))
}

func SListPrepend(list *SList, data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_slist_prepend(_cp_list_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListRemove(list *SList, data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_slist_remove(_cp_list_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListRemoveAll(list *SList, data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_data := (C.gconstpointer)(data)
	_c_return_ := C.g_slist_remove_all(_cp_list_, _gpointer_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListRemoveLink(list *SList, link_ *SList) *SList {
	_cp_list_ := (*C.GSList)(list)
	_cp_link__ := (*C.GSList)(link_)
	_c_return_ := C.g_slist_remove_link(_cp_list_, _cp_link__)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListReverse(list *SList) *SList {
	_cp_list_ := (*C.GSList)(list)
	_c_return_ := C.g_slist_reverse(_cp_list_)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListSort(list *SList, compare_func C.GCompareFunc) *SList {
	_cp_list_ := (*C.GSList)(list)
	_c_return_ := C.g_slist_sort(_cp_list_, compare_func)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SListSortWithData(list *SList, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) *SList {
	_cp_list_ := (*C.GSList)(list)
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_slist_sort_with_data(_cp_list_, compare_func, _gpointer_user_data)
	_go_return_ := (*SList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ScannerNew(config_templ *ScannerConfig) *Scanner {
	_cp_config_templ_ := (*C.GScannerConfig)(config_templ)
	_c_return_ := C._g_scanner_new(unsafe.Pointer(_cp_config_templ_))
	_go_return_ := (*Scanner)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Scanner) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SequenceForeachRange(begin *SequenceIter, end *SequenceIter, func_ C.GFunc, user_data unsafe.Pointer) {
	_cp_begin_ := (*C.GSequenceIter)(begin)
	_cp_end_ := (*C.GSequenceIter)(end)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_sequence_foreach_range(_cp_begin_, _cp_end_, func_, _gpointer_user_data)
}

func SequenceGet(iter *SequenceIter) unsafe.Pointer {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	return unsafe.Pointer(C.g_sequence_get(_cp_iter_))
}

func SequenceInsertBefore(iter *SequenceIter, data unsafe.Pointer) *SequenceIter {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_sequence_insert_before(_cp_iter_, _gpointer_data)
	_go_return_ := (*SequenceIter)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SequenceIter) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SequenceMove(src *SequenceIter, dest *SequenceIter) {
	_cp_src_ := (*C.GSequenceIter)(src)
	_cp_dest_ := (*C.GSequenceIter)(dest)
	C.g_sequence_move(_cp_src_, _cp_dest_)
}

func SequenceMoveRange(dest *SequenceIter, begin *SequenceIter, end *SequenceIter) {
	_cp_dest_ := (*C.GSequenceIter)(dest)
	_cp_begin_ := (*C.GSequenceIter)(begin)
	_cp_end_ := (*C.GSequenceIter)(end)
	C.g_sequence_move_range(_cp_dest_, _cp_begin_, _cp_end_)
}

func SequenceNew(data_destroy C.GDestroyNotify) *Sequence {
	_c_return_ := C.g_sequence_new(data_destroy)
	_go_return_ := (*Sequence)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Sequence) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SequenceRangeGetMidpoint(begin *SequenceIter, end *SequenceIter) *SequenceIter {
	_cp_begin_ := (*C.GSequenceIter)(begin)
	_cp_end_ := (*C.GSequenceIter)(end)
	_c_return_ := C.g_sequence_range_get_midpoint(_cp_begin_, _cp_end_)
	_go_return_ := (*SequenceIter)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SequenceIter) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SequenceRemove(iter *SequenceIter) {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	C.g_sequence_remove(_cp_iter_)
}

func SequenceRemoveRange(begin *SequenceIter, end *SequenceIter) {
	_cp_begin_ := (*C.GSequenceIter)(begin)
	_cp_end_ := (*C.GSequenceIter)(end)
	C.g_sequence_remove_range(_cp_begin_, _cp_end_)
}

func SequenceSet(iter *SequenceIter, data unsafe.Pointer) {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	_gpointer_data := (C.gpointer)(data)
	C.g_sequence_set(_cp_iter_, _gpointer_data)
}

func SequenceSortChanged(iter *SequenceIter, cmp_func C.GCompareDataFunc, cmp_data unsafe.Pointer) {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	_gpointer_cmp_data := (C.gpointer)(cmp_data)
	C.g_sequence_sort_changed(_cp_iter_, cmp_func, _gpointer_cmp_data)
}

func SequenceSortChangedIter(iter *SequenceIter, iter_cmp C.GSequenceIterCompareFunc, cmp_data unsafe.Pointer) {
	_cp_iter_ := (*C.GSequenceIter)(iter)
	_gpointer_cmp_data := (C.gpointer)(cmp_data)
	C.g_sequence_sort_changed_iter(_cp_iter_, iter_cmp, _gpointer_cmp_data)
}

func SequenceSwap(a *SequenceIter, b *SequenceIter) {
	_cp_a_ := (*C.GSequenceIter)(a)
	_cp_b_ := (*C.GSequenceIter)(b)
	C.g_sequence_swap(_cp_a_, _cp_b_)
}

func SourceNew(source_funcs *SourceFuncs, struct_size uint) *Source {
	_cp_source_funcs_ := (*C.GSourceFuncs)(source_funcs)
	_guint_struct_size := C.guint(struct_size)
	_c_return_ := C.g_source_new(_cp_source_funcs_, _guint_struct_size)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SourceRemove(tag uint) bool {
	_guint_tag := C.guint(tag)
	return gboolean2bool(C.g_source_remove(_guint_tag))
}

func SourceRemoveByFuncsUserData(funcs *SourceFuncs, user_data unsafe.Pointer) bool {
	_cp_funcs_ := (*C.GSourceFuncs)(funcs)
	_gpointer_user_data := (C.gpointer)(user_data)
	return gboolean2bool(C.g_source_remove_by_funcs_user_data(_cp_funcs_, _gpointer_user_data))
}

func SourceRemoveByUserData(user_data unsafe.Pointer) bool {
	_gpointer_user_data := (C.gpointer)(user_data)
	return gboolean2bool(C.g_source_remove_by_user_data(_gpointer_user_data))
}

func SourceSetNameById(tag uint, name *C.char) {
	_guint_tag := C.guint(tag)
	C._g_source_set_name_by_id(_guint_tag, unsafe.Pointer(name))
}

func StringChunkNew(size uint64) *StringChunk {
	_gsize_size := C.gsize(size)
	_c_return_ := C.g_string_chunk_new(_gsize_size)
	_go_return_ := (*StringChunk)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **StringChunk) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TestLogBufferNew() *TestLogBuffer {
	_c_return_ := C.g_test_log_buffer_new()
	_go_return_ := (*TestLogBuffer)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TestLogBuffer) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ThreadNew(name string, func_ C.GThreadFunc, data unsafe.Pointer) *Thread {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C._g_thread_new(unsafe.Pointer(_gstr_name), func_, _gpointer_data)
	_go_return_ := (*Thread)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Thread) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ThreadTryNew(name string, func_ C.GThreadFunc, data unsafe.Pointer, err unsafe.Pointer) *Thread {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C._g_thread_try_new(unsafe.Pointer(_gstr_name), func_, _gpointer_data, unsafe.Pointer(err))
	_go_return_ := (*Thread)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Thread) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ThreadErrorQuark() C.GQuark {
	return C.g_thread_error_quark()
}

func ThreadExit(retval unsafe.Pointer) {
	_gpointer_retval := (C.gpointer)(retval)
	C.g_thread_exit(_gpointer_retval)
}

func ThreadSelf() *Thread {
	_c_return_ := C.g_thread_self()
	_go_return_ := (*Thread)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Thread) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ThreadYield() {
	C.g_thread_yield()
}

func ThreadPoolGetMaxIdleTime() uint {
	return guint2uint(C.g_thread_pool_get_max_idle_time())
}

func ThreadPoolGetMaxUnusedThreads() int {
	return gint2int(C.g_thread_pool_get_max_unused_threads())
}

func ThreadPoolGetNumUnusedThreads() uint {
	return guint2uint(C.g_thread_pool_get_num_unused_threads())
}

func ThreadPoolNew(func_ C.GFunc, user_data unsafe.Pointer, max_threads int, exclusive bool, err unsafe.Pointer) *ThreadPool {
	_gpointer_user_data := (C.gpointer)(user_data)
	_gint_max_threads := C.gint(max_threads)
	_gbool_exclusive := C._false()
	if exclusive { _gbool_exclusive = C._true() }
	_c_return_ := C._g_thread_pool_new(func_, _gpointer_user_data, _gint_max_threads, _gbool_exclusive, unsafe.Pointer(err))
	_go_return_ := (*ThreadPool)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ThreadPool) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ThreadPoolSetMaxIdleTime(interval uint) {
	_guint_interval := C.guint(interval)
	C.g_thread_pool_set_max_idle_time(_guint_interval)
}

func ThreadPoolSetMaxUnusedThreads(max_threads int) {
	_gint_max_threads := C.gint(max_threads)
	C.g_thread_pool_set_max_unused_threads(_gint_max_threads)
}

func ThreadPoolStopUnusedThreads() {
	C.g_thread_pool_stop_unused_threads()
}

func TimeValFromIso8601(iso_date string, time_ *TimeVal) bool {
	_cstr_iso_date := unsafe.Pointer(C.CString(iso_date))
	defer C.free(_cstr_iso_date)
	_gstr_iso_date := (*C.gchar)(unsafe.Pointer(_cstr_iso_date))
	_cp_time__ := (*C.GTimeVal)(time_)
	return gboolean2bool(C._g_time_val_from_iso8601(unsafe.Pointer(_gstr_iso_date), _cp_time__))
}

func TimeZoneNew(identifier string) *TimeZone {
	_cstr_identifier := unsafe.Pointer(C.CString(identifier))
	defer C.free(_cstr_identifier)
	_gstr_identifier := (*C.gchar)(unsafe.Pointer(_cstr_identifier))
	_c_return_ := C._g_time_zone_new(unsafe.Pointer(_gstr_identifier))
	_go_return_ := (*TimeZone)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TimeZone) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TimeZoneNewLocal() *TimeZone {
	_c_return_ := C.g_time_zone_new_local()
	_go_return_ := (*TimeZone)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TimeZone) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TimeZoneNewUtc() *TimeZone {
	_c_return_ := C.g_time_zone_new_utc()
	_go_return_ := (*TimeZone)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TimeZone) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TimerNew() *Timer {
	_c_return_ := C.g_timer_new()
	_go_return_ := (*Timer)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Timer) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TrashStackHeight(stack_p unsafe.Pointer) uint {
	return guint2uint(C._g_trash_stack_height(unsafe.Pointer(stack_p)))
}

func TrashStackPeek(stack_p unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C._g_trash_stack_peek(unsafe.Pointer(stack_p)))
}

func TrashStackPop(stack_p unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C._g_trash_stack_pop(unsafe.Pointer(stack_p)))
}

func TrashStackPush(stack_p unsafe.Pointer, data_p unsafe.Pointer) {
	_gpointer_data_p := (C.gpointer)(data_p)
	C._g_trash_stack_push(unsafe.Pointer(stack_p), _gpointer_data_p)
}

func TreeNew(key_compare_func C.GCompareFunc) *Tree {
	_c_return_ := C.g_tree_new(key_compare_func)
	_go_return_ := (*Tree)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Tree) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TreeNewFull(key_compare_func C.GCompareDataFunc, key_compare_data unsafe.Pointer, key_destroy_func C.GDestroyNotify, value_destroy_func C.GDestroyNotify) *Tree {
	_gpointer_key_compare_data := (C.gpointer)(key_compare_data)
	_c_return_ := C.g_tree_new_full(key_compare_func, _gpointer_key_compare_data, key_destroy_func, value_destroy_func)
	_go_return_ := (*Tree)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Tree) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TreeNewWithData(key_compare_func C.GCompareDataFunc, key_compare_data unsafe.Pointer) *Tree {
	_gpointer_key_compare_data := (C.gpointer)(key_compare_data)
	_c_return_ := C.g_tree_new_with_data(key_compare_func, _gpointer_key_compare_data)
	_go_return_ := (*Tree)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Tree) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//TODO g_variant_new

func VariantNewArray(child_type *VariantType, children unsafe.Pointer, n_children uint64) *Variant {
	_cp_child_type_ := (*C.GVariantType)(child_type)
	_gsize_n_children := C.gsize(n_children)
	_c_return_ := C._g_variant_new_array(unsafe.Pointer(_cp_child_type_), unsafe.Pointer(children), _gsize_n_children)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewBoolean(value bool) *Variant {
	_gbool_value := C._false()
	if value { _gbool_value = C._true() }
	_c_return_ := C.g_variant_new_boolean(_gbool_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewByte(value byte) *Variant {
	_guchar_value := C.guchar(value)
	_c_return_ := C.g_variant_new_byte(_guchar_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewBytestring(string_ string) *Variant {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_c_return_ := C.g_variant_new_bytestring(_gstr_string_)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//Skipped g_variant_new_bytestring_array

func VariantNewDictEntry(key *Variant, value *Variant) *Variant {
	_cp_key_ := (*C.GVariant)(key)
	_cp_value_ := (*C.GVariant)(value)
	_c_return_ := C.g_variant_new_dict_entry(_cp_key_, _cp_value_)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewDouble(value float64) *Variant {
	_gdouble_value := C.gdouble(value)
	_c_return_ := C.g_variant_new_double(_gdouble_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewFixedArray(element_type *VariantType, elements unsafe.Pointer, n_elements uint64, element_size uint64) *Variant {
	_cp_element_type_ := (*C.GVariantType)(element_type)
	_gpointer_elements := (C.gconstpointer)(elements)
	_gsize_n_elements := C.gsize(n_elements)
	_gsize_element_size := C.gsize(element_size)
	_c_return_ := C._g_variant_new_fixed_array(unsafe.Pointer(_cp_element_type_), _gpointer_elements, _gsize_n_elements, _gsize_element_size)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewFromBytes(type_ *VariantType, bytes *Bytes, trusted bool) *Variant {
	_cp_type__ := (*C.GVariantType)(type_)
	_cp_bytes_ := (*C.GBytes)(bytes)
	_gbool_trusted := C._false()
	if trusted { _gbool_trusted = C._true() }
	_c_return_ := C._g_variant_new_from_bytes(unsafe.Pointer(_cp_type__), _cp_bytes_, _gbool_trusted)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewFromData(type_ *VariantType, data unsafe.Pointer, size uint64, trusted bool, notify C.GDestroyNotify, user_data unsafe.Pointer) *Variant {
	_cp_type__ := (*C.GVariantType)(type_)
	_gpointer_data := (C.gconstpointer)(data)
	_gsize_size := C.gsize(size)
	_gbool_trusted := C._false()
	if trusted { _gbool_trusted = C._true() }
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C._g_variant_new_from_data(unsafe.Pointer(_cp_type__), _gpointer_data, _gsize_size, _gbool_trusted, notify, _gpointer_user_data)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewHandle(value int32) *Variant {
	_gint32_value := C.gint32(value)
	_c_return_ := C.g_variant_new_handle(_gint32_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewInt16(value int16) *Variant {
	_gint16_value := C.gint16(value)
	_c_return_ := C.g_variant_new_int16(_gint16_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewInt32(value int32) *Variant {
	_gint32_value := C.gint32(value)
	_c_return_ := C.g_variant_new_int32(_gint32_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewInt64(value int64) *Variant {
	_gint64_value := C.gint64(value)
	_c_return_ := C.g_variant_new_int64(_gint64_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewMaybe(child_type *VariantType, child *Variant) *Variant {
	_cp_child_type_ := (*C.GVariantType)(child_type)
	_cp_child_ := (*C.GVariant)(child)
	_c_return_ := C._g_variant_new_maybe(unsafe.Pointer(_cp_child_type_), _cp_child_)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewObjectPath(object_path string) *Variant {
	_cstr_object_path := unsafe.Pointer(C.CString(object_path))
	defer C.free(_cstr_object_path)
	_gstr_object_path := (*C.gchar)(unsafe.Pointer(_cstr_object_path))
	_c_return_ := C._g_variant_new_object_path(unsafe.Pointer(_gstr_object_path))
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//Skipped g_variant_new_objv

//TODO g_variant_new_parsed

func VariantNewParsedVa(format string, app *C.va_list) *Variant {
	_cstr_format := unsafe.Pointer(C.CString(format))
	defer C.free(_cstr_format)
	_gstr_format := (*C.gchar)(unsafe.Pointer(_cstr_format))
	_c_return_ := C._g_variant_new_parsed_va(unsafe.Pointer(_gstr_format), app)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewSignature(signature string) *Variant {
	_cstr_signature := unsafe.Pointer(C.CString(signature))
	defer C.free(_cstr_signature)
	_gstr_signature := (*C.gchar)(unsafe.Pointer(_cstr_signature))
	_c_return_ := C._g_variant_new_signature(unsafe.Pointer(_gstr_signature))
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewString(string_ string) *Variant {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_c_return_ := C._g_variant_new_string(unsafe.Pointer(_gstr_string_))
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//Skipped g_variant_new_strv

func VariantNewTuple(children unsafe.Pointer, n_children uint64) *Variant {
	_gsize_n_children := C.gsize(n_children)
	_c_return_ := C._g_variant_new_tuple(unsafe.Pointer(children), _gsize_n_children)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewUint16(value uint16) *Variant {
	_guint16_value := C.guint16(value)
	_c_return_ := C.g_variant_new_uint16(_guint16_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewUint32(value uint32) *Variant {
	_guint32_value := C.guint32(value)
	_c_return_ := C.g_variant_new_uint32(_guint32_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewUint64(value uint64) *Variant {
	_guint64_value := C.guint64(value)
	_c_return_ := C.g_variant_new_uint64(_guint64_value)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewVa(format_string string, endptr unsafe.Pointer, app *C.va_list) *Variant {
	_cstr_format_string := unsafe.Pointer(C.CString(format_string))
	defer C.free(_cstr_format_string)
	_gstr_format_string := (*C.gchar)(unsafe.Pointer(_cstr_format_string))
	_c_return_ := C._g_variant_new_va(unsafe.Pointer(_gstr_format_string), unsafe.Pointer(endptr), app)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantNewVariant(value *Variant) *Variant {
	_cp_value_ := (*C.GVariant)(value)
	_c_return_ := C.g_variant_new_variant(_cp_value_)
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantIsObjectPath(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_variant_is_object_path(unsafe.Pointer(_gstr_string_)))
}

func VariantIsSignature(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_variant_is_signature(unsafe.Pointer(_gstr_string_)))
}

func VariantParse(type_ *VariantType, text string, limit string, endptr unsafe.Pointer, err unsafe.Pointer) *Variant {
	_cp_type__ := (*C.GVariantType)(type_)
	_cstr_text := unsafe.Pointer(C.CString(text))
	defer C.free(_cstr_text)
	_gstr_text := (*C.gchar)(unsafe.Pointer(_cstr_text))
	_cstr_limit := unsafe.Pointer(C.CString(limit))
	defer C.free(_cstr_limit)
	_gstr_limit := (*C.gchar)(unsafe.Pointer(_cstr_limit))
	_c_return_ := C._g_variant_parse(unsafe.Pointer(_cp_type__), unsafe.Pointer(_gstr_text), unsafe.Pointer(_gstr_limit), unsafe.Pointer(endptr), unsafe.Pointer(err))
	_go_return_ := (*Variant)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Variant) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantParserGetErrorQuark() C.GQuark {
	return C.g_variant_parser_get_error_quark()
}

func VariantBuilderNew(type_ *VariantType) *VariantBuilder {
	_cp_type__ := (*C.GVariantType)(type_)
	_c_return_ := C._g_variant_builder_new(unsafe.Pointer(_cp_type__))
	_go_return_ := (*VariantBuilder)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantBuilder) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantTypeNew(type_string string) *VariantType {
	_cstr_type_string := unsafe.Pointer(C.CString(type_string))
	defer C.free(_cstr_type_string)
	_gstr_type_string := (*C.gchar)(unsafe.Pointer(_cstr_type_string))
	_c_return_ := C._g_variant_type_new(unsafe.Pointer(_gstr_type_string))
	_go_return_ := (*VariantType)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantType) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantTypeNewArray(element *VariantType) *VariantType {
	_cp_element_ := (*C.GVariantType)(element)
	_c_return_ := C._g_variant_type_new_array(unsafe.Pointer(_cp_element_))
	_go_return_ := (*VariantType)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantType) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantTypeNewDictEntry(key *VariantType, value *VariantType) *VariantType {
	_cp_key_ := (*C.GVariantType)(key)
	_cp_value_ := (*C.GVariantType)(value)
	_c_return_ := C._g_variant_type_new_dict_entry(unsafe.Pointer(_cp_key_), unsafe.Pointer(_cp_value_))
	_go_return_ := (*VariantType)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantType) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantTypeNewMaybe(element *VariantType) *VariantType {
	_cp_element_ := (*C.GVariantType)(element)
	_c_return_ := C._g_variant_type_new_maybe(unsafe.Pointer(_cp_element_))
	_go_return_ := (*VariantType)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantType) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//Skipped g_variant_type_new_tuple

func VariantTypeChecked(arg_0 string) *VariantType {
	_cstr_arg_0 := unsafe.Pointer(C.CString(arg_0))
	defer C.free(_cstr_arg_0)
	_gstr_arg_0 := (*C.gchar)(unsafe.Pointer(_cstr_arg_0))
	_c_return_ := C._g_variant_type_checked_(unsafe.Pointer(_gstr_arg_0))
	_go_return_ := (*VariantType)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **VariantType) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func VariantTypeStringIsValid(type_string string) bool {
	_cstr_type_string := unsafe.Pointer(C.CString(type_string))
	defer C.free(_cstr_type_string)
	_gstr_type_string := (*C.gchar)(unsafe.Pointer(_cstr_type_string))
	return gboolean2bool(C._g_variant_type_string_is_valid(unsafe.Pointer(_gstr_type_string)))
}

func VariantTypeStringScan(string_ string, limit string, endptr unsafe.Pointer) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_limit := unsafe.Pointer(C.CString(limit))
	defer C.free(_cstr_limit)
	_gstr_limit := (*C.gchar)(unsafe.Pointer(_cstr_limit))
	return gboolean2bool(C._g_variant_type_string_scan(unsafe.Pointer(_gstr_string_), unsafe.Pointer(_gstr_limit), unsafe.Pointer(endptr)))
}

func Access(filename string, mode C.int) C.int {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return C._g_access(unsafe.Pointer(_gstr_filename), mode)
}

func AsciiDigitValue(c int8) int {
	_gchar_c := C.gchar(c)
	return gint2int(C.g_ascii_digit_value(_gchar_c))
}

func AsciiDtostr(buffer string, buf_len int, d float64) string {
	_cstr_buffer := unsafe.Pointer(C.CString(buffer))
	defer C.free(_cstr_buffer)
	_gstr_buffer := (*C.gchar)(unsafe.Pointer(_cstr_buffer))
	_gint_buf_len := C.gint(buf_len)
	_gdouble_d := C.gdouble(d)
	return gcharp2string(C.g_ascii_dtostr(_gstr_buffer, _gint_buf_len, _gdouble_d))
}

func AsciiFormatd(buffer string, buf_len int, format string, d float64) string {
	_cstr_buffer := unsafe.Pointer(C.CString(buffer))
	defer C.free(_cstr_buffer)
	_gstr_buffer := (*C.gchar)(unsafe.Pointer(_cstr_buffer))
	_gint_buf_len := C.gint(buf_len)
	_cstr_format := unsafe.Pointer(C.CString(format))
	defer C.free(_cstr_format)
	_gstr_format := (*C.gchar)(unsafe.Pointer(_cstr_format))
	_gdouble_d := C.gdouble(d)
	return gcharp2string(C._g_ascii_formatd(_gstr_buffer, _gint_buf_len, unsafe.Pointer(_gstr_format), _gdouble_d))
}

func AsciiStrcasecmp(s1 string, s2 string) int {
	_cstr_s1 := unsafe.Pointer(C.CString(s1))
	defer C.free(_cstr_s1)
	_gstr_s1 := (*C.gchar)(unsafe.Pointer(_cstr_s1))
	_cstr_s2 := unsafe.Pointer(C.CString(s2))
	defer C.free(_cstr_s2)
	_gstr_s2 := (*C.gchar)(unsafe.Pointer(_cstr_s2))
	return gint2int(C._g_ascii_strcasecmp(unsafe.Pointer(_gstr_s1), unsafe.Pointer(_gstr_s2)))
}

func AsciiStrdown(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_ascii_strdown(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func AsciiStrncasecmp(s1 string, s2 string, n uint64) int {
	_cstr_s1 := unsafe.Pointer(C.CString(s1))
	defer C.free(_cstr_s1)
	_gstr_s1 := (*C.gchar)(unsafe.Pointer(_cstr_s1))
	_cstr_s2 := unsafe.Pointer(C.CString(s2))
	defer C.free(_cstr_s2)
	_gstr_s2 := (*C.gchar)(unsafe.Pointer(_cstr_s2))
	_gsize_n := C.gsize(n)
	return gint2int(C._g_ascii_strncasecmp(unsafe.Pointer(_gstr_s1), unsafe.Pointer(_gstr_s2), _gsize_n))
}

func AsciiStrtod(nptr string, endptr unsafe.Pointer) float64 {
	_cstr_nptr := unsafe.Pointer(C.CString(nptr))
	defer C.free(_cstr_nptr)
	_gstr_nptr := (*C.gchar)(unsafe.Pointer(_cstr_nptr))
	return gdouble2float64(C._g_ascii_strtod(unsafe.Pointer(_gstr_nptr), unsafe.Pointer(endptr)))
}

func AsciiStrtoll(nptr string, endptr unsafe.Pointer, base uint) int64 {
	_cstr_nptr := unsafe.Pointer(C.CString(nptr))
	defer C.free(_cstr_nptr)
	_gstr_nptr := (*C.gchar)(unsafe.Pointer(_cstr_nptr))
	_guint_base := C.guint(base)
	return gint642int64(C._g_ascii_strtoll(unsafe.Pointer(_gstr_nptr), unsafe.Pointer(endptr), _guint_base))
}

func AsciiStrtoull(nptr string, endptr unsafe.Pointer, base uint) uint64 {
	_cstr_nptr := unsafe.Pointer(C.CString(nptr))
	defer C.free(_cstr_nptr)
	_gstr_nptr := (*C.gchar)(unsafe.Pointer(_cstr_nptr))
	_guint_base := C.guint(base)
	return guint642uint64(C._g_ascii_strtoull(unsafe.Pointer(_gstr_nptr), unsafe.Pointer(endptr), _guint_base))
}

func AsciiStrup(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_ascii_strup(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func AsciiTolower(c int8) int8 {
	_gchar_c := C.gchar(c)
	return gchar2int8(C.g_ascii_tolower(_gchar_c))
}

func AsciiToupper(c int8) int8 {
	_gchar_c := C.gchar(c)
	return gchar2int8(C.g_ascii_toupper(_gchar_c))
}

func AsciiXdigitValue(c int8) int {
	_gchar_c := C.gchar(c)
	return gint2int(C.g_ascii_xdigit_value(_gchar_c))
}

//Skipped g_assert_warning

func AssertionMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, message *C.char) {
	C._g_assertion_message(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(message))
}

func AssertionMessageCmpnum(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 float64, cmp *C.char, arg2 float64, numtype C.char) {
	_double_arg1 := C.double(arg1)
	_double_arg2 := C.double(arg2)
	C._g_assertion_message_cmpnum(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(expr), C.double(_double_arg1), unsafe.Pointer(cmp), C.double(_double_arg2), numtype)
}

func AssertionMessageCmpstr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, arg1 *C.char, cmp *C.char, arg2 *C.char) {
	C._g_assertion_message_cmpstr(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(expr), unsafe.Pointer(arg1), unsafe.Pointer(cmp), unsafe.Pointer(arg2))
}

func AssertionMessageError(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char, error_ *Error, error_domain C.GQuark, error_code C.int) {
	_cp_error__ := (*C.GError)(error_)
	C._g_assertion_message_error(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(expr), unsafe.Pointer(_cp_error__), error_domain, error_code)
}

func AssertionMessageExpr(domain *C.char, file *C.char, line C.int, func_ *C.char, expr *C.char) {
	C._g_assertion_message_expr(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(expr))
}

//Skipped g_atexit

//Skipped g_atomic_int_add

//Skipped g_atomic_int_and

//Skipped g_atomic_int_compare_and_exchange

//Skipped g_atomic_int_dec_and_test

//Skipped g_atomic_int_exchange_and_add

//Skipped g_atomic_int_get

//Skipped g_atomic_int_inc

//Skipped g_atomic_int_or

//Skipped g_atomic_int_set

//Skipped g_atomic_int_xor

//Skipped g_atomic_pointer_add

//Skipped g_atomic_pointer_and

//Skipped g_atomic_pointer_compare_and_exchange

//Skipped g_atomic_pointer_get

//Skipped g_atomic_pointer_or

//Skipped g_atomic_pointer_set

//Skipped g_atomic_pointer_xor

func Base64Decode(text string, out_len *uint64) []byte {
	_cstr_text := unsafe.Pointer(C.CString(text))
	defer C.free(_cstr_text)
	_gstr_text := (*C.gchar)(unsafe.Pointer(_cstr_text))
	_c_gsize_out_len := C.gsize(*out_len)
	_cp_gsize_out_len := (*C.gsize)(&_c_gsize_out_len)
	return gucharp2byteslice(C._g_base64_decode(unsafe.Pointer(_gstr_text), _cp_gsize_out_len))
}

func Base64DecodeInplace(text string, out_len *uint64) []byte {
	_cstr_text := unsafe.Pointer(C.CString(text))
	_gstr_text := (*C.gchar)(unsafe.Pointer(_cstr_text))
	_c_gsize_out_len := C.gsize(*out_len)
	_cp_gsize_out_len := (*C.gsize)(&_c_gsize_out_len)
	return gucharp2byteslice(C.g_base64_decode_inplace(_gstr_text, _cp_gsize_out_len))
}

func Base64DecodeStep(in string, len_ uint64, out []byte, state *int, save *uint) uint64 {
	_cstr_in := unsafe.Pointer(C.CString(in))
	defer C.free(_cstr_in)
	_gstr_in := (*C.gchar)(unsafe.Pointer(_cstr_in))
	_gsize_len_ := C.gsize(len_)
	_custr_out := unsafe.Pointer(C.CString(string(out)))
	_gustr_out := (*C.guchar)(unsafe.Pointer(_custr_out))
	_c_gint_state := C.gint(*state)
	_cp_gint_state := (*C.gint)(&_c_gint_state)
	_c_guint_save := C.guint(*save)
	_cp_guint_save := (*C.guint)(&_c_guint_save)
	return gsize2uint64(C.g_base64_decode_step(_gstr_in, _gsize_len_, _gustr_out, _cp_gint_state, _cp_guint_save))
}

func Base64Encode(data []byte, len_ uint64) string {
	_custr_data := unsafe.Pointer(C.CString(string(data)))
	defer C.free(_custr_data)
	_gustr_data := (*C.guchar)(unsafe.Pointer(_custr_data))
	_gsize_len_ := C.gsize(len_)
	return gcharp2string(C.g_base64_encode(_gustr_data, _gsize_len_))
}

func Base64EncodeClose(break_lines bool, out string, state *int, save *int) uint64 {
	_gbool_break_lines := C._false()
	if break_lines { _gbool_break_lines = C._true() }
	_cstr_out := unsafe.Pointer(C.CString(out))
	_gstr_out := (*C.gchar)(unsafe.Pointer(_cstr_out))
	_c_gint_state := C.gint(*state)
	_cp_gint_state := (*C.gint)(&_c_gint_state)
	_c_gint_save := C.gint(*save)
	_cp_gint_save := (*C.gint)(&_c_gint_save)
	return gsize2uint64(C.g_base64_encode_close(_gbool_break_lines, _gstr_out, _cp_gint_state, _cp_gint_save))
}

func Base64EncodeStep(in []byte, len_ uint64, break_lines bool, out string, state *int, save *int) uint64 {
	_custr_in := unsafe.Pointer(C.CString(string(in)))
	defer C.free(_custr_in)
	_gustr_in := (*C.guchar)(unsafe.Pointer(_custr_in))
	_gsize_len_ := C.gsize(len_)
	_gbool_break_lines := C._false()
	if break_lines { _gbool_break_lines = C._true() }
	_cstr_out := unsafe.Pointer(C.CString(out))
	_gstr_out := (*C.gchar)(unsafe.Pointer(_cstr_out))
	_c_gint_state := C.gint(*state)
	_cp_gint_state := (*C.gint)(&_c_gint_state)
	_c_gint_save := C.gint(*save)
	_cp_gint_save := (*C.gint)(&_c_gint_save)
	return gsize2uint64(C.g_base64_encode_step(_gustr_in, _gsize_len_, _gbool_break_lines, _gstr_out, _cp_gint_state, _cp_gint_save))
}

//Skipped g_basename

func BitLock(address *int, lock_bit int) {
	_c_gint_address := C.gint(*address)
	_cp_gint_address := (*C.gint)(&_c_gint_address)
	_gint_lock_bit := C.gint(lock_bit)
	C.g_bit_lock(_cp_gint_address, _gint_lock_bit)
}

func BitNthLsf(mask uint64, nth_bit int) int {
	_gulong_mask := C.gulong(mask)
	_gint_nth_bit := C.gint(nth_bit)
	return gint2int(C.g_bit_nth_lsf(_gulong_mask, _gint_nth_bit))
}

func BitNthMsf(mask uint64, nth_bit int) int {
	_gulong_mask := C.gulong(mask)
	_gint_nth_bit := C.gint(nth_bit)
	return gint2int(C.g_bit_nth_msf(_gulong_mask, _gint_nth_bit))
}

func BitStorage(number uint64) uint {
	_gulong_number := C.gulong(number)
	return guint2uint(C.g_bit_storage(_gulong_number))
}

func BitTrylock(address *int, lock_bit int) bool {
	_c_gint_address := C.gint(*address)
	_cp_gint_address := (*C.gint)(&_c_gint_address)
	_gint_lock_bit := C.gint(lock_bit)
	return gboolean2bool(C.g_bit_trylock(_cp_gint_address, _gint_lock_bit))
}

func BitUnlock(address *int, lock_bit int) {
	_c_gint_address := C.gint(*address)
	_cp_gint_address := (*C.gint)(&_c_gint_address)
	_gint_lock_bit := C.gint(lock_bit)
	C.g_bit_unlock(_cp_gint_address, _gint_lock_bit)
}

//TODO g_build_filename

func BuildFilenamev(args unsafe.Pointer) string {
	return gcharp2string(C._g_build_filenamev(unsafe.Pointer(args)))
}

//TODO g_build_path

func BuildPathv(separator string, args unsafe.Pointer) string {
	_cstr_separator := unsafe.Pointer(C.CString(separator))
	defer C.free(_cstr_separator)
	_gstr_separator := (*C.gchar)(unsafe.Pointer(_cstr_separator))
	return gcharp2string(C._g_build_pathv(unsafe.Pointer(_gstr_separator), unsafe.Pointer(args)))
}

func Chdir(path string) C.int {
	_cstr_path := unsafe.Pointer(C.CString(path))
	defer C.free(_cstr_path)
	_gstr_path := (*C.gchar)(unsafe.Pointer(_cstr_path))
	return C._g_chdir(unsafe.Pointer(_gstr_path))
}

func CheckVersion(required_major uint, required_minor uint, required_micro uint) string {
	_guint_required_major := C.guint(required_major)
	_guint_required_minor := C.guint(required_minor)
	_guint_required_micro := C.guint(required_micro)
	return gcharp2string(C.glib_check_version(_guint_required_major, _guint_required_minor, _guint_required_micro))
}

func ChildWatchAdd(pid C.GPid, function C.GChildWatchFunc, data unsafe.Pointer) uint {
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_child_watch_add(pid, function, _gpointer_data))
}

func ChildWatchAddFull(priority int, pid C.GPid, function C.GChildWatchFunc, data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_gint_priority := C.gint(priority)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_child_watch_add_full(_gint_priority, pid, function, _gpointer_data, notify))
}

func ChildWatchSourceNew(pid C.GPid) *Source {
	_c_return_ := C.g_child_watch_source_new(pid)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ClearError(err unsafe.Pointer) {
	C._g_clear_error(unsafe.Pointer(err))
}

//Skipped g_clear_pointer

func ComputeChecksumForBytes(checksum_type C.GChecksumType, data *Bytes) string {
	_cp_data_ := (*C.GBytes)(data)
	return gcharp2string(C.g_compute_checksum_for_bytes(checksum_type, _cp_data_))
}

func ComputeChecksumForData(checksum_type C.GChecksumType, data []byte, length uint64) string {
	_custr_data := unsafe.Pointer(C.CString(string(data)))
	defer C.free(_custr_data)
	_gustr_data := (*C.guchar)(unsafe.Pointer(_custr_data))
	_gsize_length := C.gsize(length)
	return gcharp2string(C._g_compute_checksum_for_data(checksum_type, unsafe.Pointer(_gustr_data), _gsize_length))
}

func ComputeChecksumForString(checksum_type C.GChecksumType, str string, length int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_length := C.gssize(length)
	return gcharp2string(C._g_compute_checksum_for_string(checksum_type, unsafe.Pointer(_gstr_str), _gssize_length))
}

func ComputeHmacForData(digest_type C.GChecksumType, key []byte, key_len uint64, data []byte, length uint64) string {
	_custr_key := unsafe.Pointer(C.CString(string(key)))
	defer C.free(_custr_key)
	_gustr_key := (*C.guchar)(unsafe.Pointer(_custr_key))
	_gsize_key_len := C.gsize(key_len)
	_custr_data := unsafe.Pointer(C.CString(string(data)))
	defer C.free(_custr_data)
	_gustr_data := (*C.guchar)(unsafe.Pointer(_custr_data))
	_gsize_length := C.gsize(length)
	return gcharp2string(C._g_compute_hmac_for_data(digest_type, _gustr_key, _gsize_key_len, unsafe.Pointer(_gustr_data), _gsize_length))
}

func ComputeHmacForString(digest_type C.GChecksumType, key []byte, key_len uint64, str string, length int64) string {
	_custr_key := unsafe.Pointer(C.CString(string(key)))
	defer C.free(_custr_key)
	_gustr_key := (*C.guchar)(unsafe.Pointer(_custr_key))
	_gsize_key_len := C.gsize(key_len)
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_length := C.gssize(length)
	return gcharp2string(C._g_compute_hmac_for_string(digest_type, _gustr_key, _gsize_key_len, unsafe.Pointer(_gstr_str), _gssize_length))
}

func Convert(str string, len_ int64, to_codeset string, from_codeset string, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	_cstr_to_codeset := unsafe.Pointer(C.CString(to_codeset))
	defer C.free(_cstr_to_codeset)
	_gstr_to_codeset := (*C.gchar)(unsafe.Pointer(_cstr_to_codeset))
	_cstr_from_codeset := unsafe.Pointer(C.CString(from_codeset))
	defer C.free(_cstr_from_codeset)
	_gstr_from_codeset := (*C.gchar)(unsafe.Pointer(_cstr_from_codeset))
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_convert(unsafe.Pointer(_gstr_str), _gssize_len_, unsafe.Pointer(_gstr_to_codeset), unsafe.Pointer(_gstr_from_codeset), _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func ConvertErrorQuark() C.GQuark {
	return C.g_convert_error_quark()
}

func ConvertWithFallback(str string, len_ int64, to_codeset string, from_codeset string, fallback string, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	_cstr_to_codeset := unsafe.Pointer(C.CString(to_codeset))
	defer C.free(_cstr_to_codeset)
	_gstr_to_codeset := (*C.gchar)(unsafe.Pointer(_cstr_to_codeset))
	_cstr_from_codeset := unsafe.Pointer(C.CString(from_codeset))
	defer C.free(_cstr_from_codeset)
	_gstr_from_codeset := (*C.gchar)(unsafe.Pointer(_cstr_from_codeset))
	_cstr_fallback := unsafe.Pointer(C.CString(fallback))
	defer C.free(_cstr_fallback)
	_gstr_fallback := (*C.gchar)(unsafe.Pointer(_cstr_fallback))
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_convert_with_fallback(unsafe.Pointer(_gstr_str), _gssize_len_, unsafe.Pointer(_gstr_to_codeset), unsafe.Pointer(_gstr_from_codeset), unsafe.Pointer(_gstr_fallback), _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func ConvertWithIconv(str string, len_ int64, converter C.GIConv, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_convert_with_iconv(unsafe.Pointer(_gstr_str), _gssize_len_, converter, _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func DatalistClear(datalist unsafe.Pointer) {
	C._g_datalist_clear(unsafe.Pointer(datalist))
}

func DatalistForeach(datalist unsafe.Pointer, func_ C.GDataForeachFunc, user_data unsafe.Pointer) {
	_gpointer_user_data := (C.gpointer)(user_data)
	C._g_datalist_foreach(unsafe.Pointer(datalist), func_, _gpointer_user_data)
}

func DatalistGetData(datalist unsafe.Pointer, key string) unsafe.Pointer {
	_cstr_key := unsafe.Pointer(C.CString(key))
	defer C.free(_cstr_key)
	_gstr_key := (*C.gchar)(unsafe.Pointer(_cstr_key))
	return unsafe.Pointer(C._g_datalist_get_data(unsafe.Pointer(datalist), unsafe.Pointer(_gstr_key)))
}

func DatalistGetFlags(datalist unsafe.Pointer) uint {
	return guint2uint(C._g_datalist_get_flags(unsafe.Pointer(datalist)))
}

func DatalistIdDupData(datalist unsafe.Pointer, key_id C.GQuark, dup_func C.GDuplicateFunc, user_data unsafe.Pointer) unsafe.Pointer {
	_gpointer_user_data := (C.gpointer)(user_data)
	return unsafe.Pointer(C._g_datalist_id_dup_data(unsafe.Pointer(datalist), key_id, dup_func, _gpointer_user_data))
}

func DatalistIdGetData(datalist unsafe.Pointer, key_id C.GQuark) unsafe.Pointer {
	return unsafe.Pointer(C._g_datalist_id_get_data(unsafe.Pointer(datalist), key_id))
}

func DatalistIdRemoveNoNotify(datalist unsafe.Pointer, key_id C.GQuark) unsafe.Pointer {
	return unsafe.Pointer(C._g_datalist_id_remove_no_notify(unsafe.Pointer(datalist), key_id))
}

func DatalistIdReplaceData(datalist unsafe.Pointer, key_id C.GQuark, oldval unsafe.Pointer, newval unsafe.Pointer, destroy C.GDestroyNotify, old_destroy *C.GDestroyNotify) bool {
	_gpointer_oldval := (C.gpointer)(oldval)
	_gpointer_newval := (C.gpointer)(newval)
	return gboolean2bool(C._g_datalist_id_replace_data(unsafe.Pointer(datalist), key_id, _gpointer_oldval, _gpointer_newval, destroy, old_destroy))
}

func DatalistIdSetDataFull(datalist unsafe.Pointer, key_id C.GQuark, data unsafe.Pointer, destroy_func C.GDestroyNotify) {
	_gpointer_data := (C.gpointer)(data)
	C._g_datalist_id_set_data_full(unsafe.Pointer(datalist), key_id, _gpointer_data, destroy_func)
}

func DatalistInit(datalist unsafe.Pointer) {
	C._g_datalist_init(unsafe.Pointer(datalist))
}

func DatalistSetFlags(datalist unsafe.Pointer, flags uint) {
	_guint_flags := C.guint(flags)
	C._g_datalist_set_flags(unsafe.Pointer(datalist), _guint_flags)
}

func DatalistUnsetFlags(datalist unsafe.Pointer, flags uint) {
	_guint_flags := C.guint(flags)
	C._g_datalist_unset_flags(unsafe.Pointer(datalist), _guint_flags)
}

func DatasetDestroy(dataset_location unsafe.Pointer) {
	_gpointer_dataset_location := (C.gconstpointer)(dataset_location)
	C.g_dataset_destroy(_gpointer_dataset_location)
}

func DatasetForeach(dataset_location unsafe.Pointer, func_ C.GDataForeachFunc, user_data unsafe.Pointer) {
	_gpointer_dataset_location := (C.gconstpointer)(dataset_location)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_dataset_foreach(_gpointer_dataset_location, func_, _gpointer_user_data)
}

func DatasetIdGetData(dataset_location unsafe.Pointer, key_id C.GQuark) unsafe.Pointer {
	_gpointer_dataset_location := (C.gconstpointer)(dataset_location)
	return unsafe.Pointer(C.g_dataset_id_get_data(_gpointer_dataset_location, key_id))
}

func DatasetIdRemoveNoNotify(dataset_location unsafe.Pointer, key_id C.GQuark) unsafe.Pointer {
	_gpointer_dataset_location := (C.gconstpointer)(dataset_location)
	return unsafe.Pointer(C.g_dataset_id_remove_no_notify(_gpointer_dataset_location, key_id))
}

func DatasetIdSetDataFull(dataset_location unsafe.Pointer, key_id C.GQuark, data unsafe.Pointer, destroy_func C.GDestroyNotify) {
	_gpointer_dataset_location := (C.gconstpointer)(dataset_location)
	_gpointer_data := (C.gpointer)(data)
	C.g_dataset_id_set_data_full(_gpointer_dataset_location, key_id, _gpointer_data, destroy_func)
}

func Dcgettext(domain string, msgid string, category int) string {
	_cstr_domain := unsafe.Pointer(C.CString(domain))
	defer C.free(_cstr_domain)
	_gstr_domain := (*C.gchar)(unsafe.Pointer(_cstr_domain))
	_cstr_msgid := unsafe.Pointer(C.CString(msgid))
	defer C.free(_cstr_msgid)
	_gstr_msgid := (*C.gchar)(unsafe.Pointer(_cstr_msgid))
	_gint_category := C.gint(category)
	return gcharp2string(C._g_dcgettext(unsafe.Pointer(_gstr_domain), unsafe.Pointer(_gstr_msgid), _gint_category))
}

func Dgettext(domain string, msgid string) string {
	_cstr_domain := unsafe.Pointer(C.CString(domain))
	defer C.free(_cstr_domain)
	_gstr_domain := (*C.gchar)(unsafe.Pointer(_cstr_domain))
	_cstr_msgid := unsafe.Pointer(C.CString(msgid))
	defer C.free(_cstr_msgid)
	_gstr_msgid := (*C.gchar)(unsafe.Pointer(_cstr_msgid))
	return gcharp2string(C._g_dgettext(unsafe.Pointer(_gstr_domain), unsafe.Pointer(_gstr_msgid)))
}

func DirectEqual(v1 unsafe.Pointer, v2 unsafe.Pointer) bool {
	_gpointer_v1 := (C.gconstpointer)(v1)
	_gpointer_v2 := (C.gconstpointer)(v2)
	return gboolean2bool(C.g_direct_equal(_gpointer_v1, _gpointer_v2))
}

func DirectHash(v unsafe.Pointer) uint {
	_gpointer_v := (C.gconstpointer)(v)
	return guint2uint(C.g_direct_hash(_gpointer_v))
}

func Dngettext(domain string, msgid string, msgid_plural string, n uint64) string {
	_cstr_domain := unsafe.Pointer(C.CString(domain))
	defer C.free(_cstr_domain)
	_gstr_domain := (*C.gchar)(unsafe.Pointer(_cstr_domain))
	_cstr_msgid := unsafe.Pointer(C.CString(msgid))
	defer C.free(_cstr_msgid)
	_gstr_msgid := (*C.gchar)(unsafe.Pointer(_cstr_msgid))
	_cstr_msgid_plural := unsafe.Pointer(C.CString(msgid_plural))
	defer C.free(_cstr_msgid_plural)
	_gstr_msgid_plural := (*C.gchar)(unsafe.Pointer(_cstr_msgid_plural))
	_gulong_n := C.gulong(n)
	return gcharp2string(C._g_dngettext(unsafe.Pointer(_gstr_domain), unsafe.Pointer(_gstr_msgid), unsafe.Pointer(_gstr_msgid_plural), _gulong_n))
}

func DoubleEqual(v1 unsafe.Pointer, v2 unsafe.Pointer) bool {
	_gpointer_v1 := (C.gconstpointer)(v1)
	_gpointer_v2 := (C.gconstpointer)(v2)
	return gboolean2bool(C.g_double_equal(_gpointer_v1, _gpointer_v2))
}

func DoubleHash(v unsafe.Pointer) uint {
	_gpointer_v := (C.gconstpointer)(v)
	return guint2uint(C.g_double_hash(_gpointer_v))
}

func Dpgettext(domain string, msgctxtid string, msgidoffset uint64) string {
	_cstr_domain := unsafe.Pointer(C.CString(domain))
	defer C.free(_cstr_domain)
	_gstr_domain := (*C.gchar)(unsafe.Pointer(_cstr_domain))
	_cstr_msgctxtid := unsafe.Pointer(C.CString(msgctxtid))
	defer C.free(_cstr_msgctxtid)
	_gstr_msgctxtid := (*C.gchar)(unsafe.Pointer(_cstr_msgctxtid))
	_gsize_msgidoffset := C.gsize(msgidoffset)
	return gcharp2string(C._g_dpgettext(unsafe.Pointer(_gstr_domain), unsafe.Pointer(_gstr_msgctxtid), _gsize_msgidoffset))
}

func Dpgettext2(domain string, context string, msgid string) string {
	_cstr_domain := unsafe.Pointer(C.CString(domain))
	defer C.free(_cstr_domain)
	_gstr_domain := (*C.gchar)(unsafe.Pointer(_cstr_domain))
	_cstr_context := unsafe.Pointer(C.CString(context))
	defer C.free(_cstr_context)
	_gstr_context := (*C.gchar)(unsafe.Pointer(_cstr_context))
	_cstr_msgid := unsafe.Pointer(C.CString(msgid))
	defer C.free(_cstr_msgid)
	_gstr_msgid := (*C.gchar)(unsafe.Pointer(_cstr_msgid))
	return gcharp2string(C._g_dpgettext2(unsafe.Pointer(_gstr_domain), unsafe.Pointer(_gstr_context), unsafe.Pointer(_gstr_msgid)))
}

func EnvironGetenv(envp unsafe.Pointer, variable string) string {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	return gcharp2string(C._g_environ_getenv(unsafe.Pointer(envp), unsafe.Pointer(_gstr_variable)))
}

func EnvironSetenv(envp unsafe.Pointer, variable string, value string, overwrite bool) unsafe.Pointer {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	_cstr_value := unsafe.Pointer(C.CString(value))
	defer C.free(_cstr_value)
	_gstr_value := (*C.gchar)(unsafe.Pointer(_cstr_value))
	_gbool_overwrite := C._false()
	if overwrite { _gbool_overwrite = C._true() }
	return unsafe.Pointer(C._g_environ_setenv(unsafe.Pointer(envp), unsafe.Pointer(_gstr_variable), unsafe.Pointer(_gstr_value), _gbool_overwrite))
}

func EnvironUnsetenv(envp unsafe.Pointer, variable string) unsafe.Pointer {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	return unsafe.Pointer(C._g_environ_unsetenv(unsafe.Pointer(envp), unsafe.Pointer(_gstr_variable)))
}

func FileErrorFromErrno(err_no int) C.GFileError {
	_gint_err_no := C.gint(err_no)
	return C.g_file_error_from_errno(_gint_err_no)
}

func FileErrorQuark() C.GQuark {
	return C.g_file_error_quark()
}

func FileGetContents(filename string, contents unsafe.Pointer, length *uint64, err unsafe.Pointer) bool {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_c_gsize_length := C.gsize(*length)
	_cp_gsize_length := (*C.gsize)(&_c_gsize_length)
	return gboolean2bool(C._g_file_get_contents(_gstr_filename, unsafe.Pointer(contents), _cp_gsize_length, unsafe.Pointer(err)))
}

func FileOpenTmp(tmpl string, name_used unsafe.Pointer, err unsafe.Pointer) int {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	return gint2int(C._g_file_open_tmp(_gstr_tmpl, unsafe.Pointer(name_used), unsafe.Pointer(err)))
}

func FileReadLink(filename string, err unsafe.Pointer) string {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return gcharp2string(C._g_file_read_link(unsafe.Pointer(_gstr_filename), unsafe.Pointer(err)))
}

func FileSetContents(filename string, contents string, length int64, err unsafe.Pointer) bool {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_cstr_contents := unsafe.Pointer(C.CString(contents))
	defer C.free(_cstr_contents)
	_gstr_contents := (*C.gchar)(unsafe.Pointer(_cstr_contents))
	_gssize_length := C.gssize(length)
	return gboolean2bool(C._g_file_set_contents(_gstr_filename, _gstr_contents, _gssize_length, unsafe.Pointer(err)))
}

func FileTest(filename string, test C.GFileTest) bool {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return gboolean2bool(C._g_file_test(unsafe.Pointer(_gstr_filename), test))
}

func FilenameDisplayBasename(filename string) string {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return gcharp2string(C._g_filename_display_basename(unsafe.Pointer(_gstr_filename)))
}

func FilenameDisplayName(filename string) string {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return gcharp2string(C._g_filename_display_name(unsafe.Pointer(_gstr_filename)))
}

func FilenameFromUri(uri string, hostname unsafe.Pointer, err unsafe.Pointer) string {
	_cstr_uri := unsafe.Pointer(C.CString(uri))
	defer C.free(_cstr_uri)
	_gstr_uri := (*C.gchar)(unsafe.Pointer(_cstr_uri))
	return gcharp2string(C._g_filename_from_uri(unsafe.Pointer(_gstr_uri), unsafe.Pointer(hostname), unsafe.Pointer(err)))
}

func FilenameFromUtf8(utf8string string, len_ int64, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_utf8string := unsafe.Pointer(C.CString(utf8string))
	defer C.free(_cstr_utf8string)
	_gstr_utf8string := (*C.gchar)(unsafe.Pointer(_cstr_utf8string))
	_gssize_len_ := C.gssize(len_)
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_filename_from_utf8(unsafe.Pointer(_gstr_utf8string), _gssize_len_, _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func FilenameToUri(filename string, hostname string, err unsafe.Pointer) string {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gcharp2string(C._g_filename_to_uri(unsafe.Pointer(_gstr_filename), unsafe.Pointer(_gstr_hostname), unsafe.Pointer(err)))
}

func FilenameToUtf8(opsysstring string, len_ int64, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_opsysstring := unsafe.Pointer(C.CString(opsysstring))
	defer C.free(_cstr_opsysstring)
	_gstr_opsysstring := (*C.gchar)(unsafe.Pointer(_cstr_opsysstring))
	_gssize_len_ := C.gssize(len_)
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_filename_to_utf8(unsafe.Pointer(_gstr_opsysstring), _gssize_len_, _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func FindProgramInPath(program string) string {
	_cstr_program := unsafe.Pointer(C.CString(program))
	defer C.free(_cstr_program)
	_gstr_program := (*C.gchar)(unsafe.Pointer(_cstr_program))
	return gcharp2string(C._g_find_program_in_path(unsafe.Pointer(_gstr_program)))
}

func FormatSize(size uint64) string {
	_guint64_size := C.guint64(size)
	return gcharp2string(C.g_format_size(_guint64_size))
}

//Skipped g_format_size_for_display

func FormatSizeFull(size uint64, flags C.GFormatSizeFlags) string {
	_guint64_size := C.guint64(size)
	return gcharp2string(C.g_format_size_full(_guint64_size, flags))
}

//TODO g_fprintf

func Free(mem unsafe.Pointer) {
	_gpointer_mem := (C.gpointer)(mem)
	C.g_free(_gpointer_mem)
}

func GetApplicationName() string {
	return gcharp2string(C.g_get_application_name())
}

func GetCharset(charset unsafe.Pointer) bool {
	return gboolean2bool(C._g_get_charset(unsafe.Pointer(charset)))
}

func GetCodeset() string {
	return gcharp2string(C.g_get_codeset())
}

func GetCurrentDir() string {
	return gcharp2string(C.g_get_current_dir())
}

func GetCurrentTime(result *TimeVal) {
	_cp_result_ := (*C.GTimeVal)(result)
	C.g_get_current_time(_cp_result_)
}

func GetEnviron() unsafe.Pointer {
	return unsafe.Pointer(C.g_get_environ())
}

func GetFilenameCharsets(charsets unsafe.Pointer) bool {
	return gboolean2bool(C._g_get_filename_charsets(unsafe.Pointer(charsets)))
}

func GetHomeDir() string {
	return gcharp2string(C.g_get_home_dir())
}

func GetHostName() string {
	return gcharp2string(C.g_get_host_name())
}

func GetLanguageNames() unsafe.Pointer {
	return unsafe.Pointer(C.g_get_language_names())
}

func GetLocaleVariants(locale string) unsafe.Pointer {
	_cstr_locale := unsafe.Pointer(C.CString(locale))
	defer C.free(_cstr_locale)
	_gstr_locale := (*C.gchar)(unsafe.Pointer(_cstr_locale))
	return unsafe.Pointer(C._g_get_locale_variants(unsafe.Pointer(_gstr_locale)))
}

func GetMonotonicTime() int64 {
	return gint642int64(C.g_get_monotonic_time())
}

func GetPrgname() string {
	return gcharp2string(C.g_get_prgname())
}

func GetRealName() string {
	return gcharp2string(C.g_get_real_name())
}

func GetRealTime() int64 {
	return gint642int64(C.g_get_real_time())
}

func GetSystemConfigDirs() unsafe.Pointer {
	return unsafe.Pointer(C.g_get_system_config_dirs())
}

func GetSystemDataDirs() unsafe.Pointer {
	return unsafe.Pointer(C.g_get_system_data_dirs())
}

func GetTmpDir() string {
	return gcharp2string(C.g_get_tmp_dir())
}

func GetUserCacheDir() string {
	return gcharp2string(C.g_get_user_cache_dir())
}

func GetUserConfigDir() string {
	return gcharp2string(C.g_get_user_config_dir())
}

func GetUserDataDir() string {
	return gcharp2string(C.g_get_user_data_dir())
}

func GetUserName() string {
	return gcharp2string(C.g_get_user_name())
}

func GetUserRuntimeDir() string {
	return gcharp2string(C.g_get_user_runtime_dir())
}

func GetUserSpecialDir(directory C.GUserDirectory) string {
	return gcharp2string(C.g_get_user_special_dir(directory))
}

func Getenv(variable string) string {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	return gcharp2string(C._g_getenv(unsafe.Pointer(_gstr_variable)))
}

func HostnameIsAsciiEncoded(hostname string) bool {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gboolean2bool(C._g_hostname_is_ascii_encoded(unsafe.Pointer(_gstr_hostname)))
}

func HostnameIsIpAddress(hostname string) bool {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gboolean2bool(C._g_hostname_is_ip_address(unsafe.Pointer(_gstr_hostname)))
}

func HostnameIsNonAscii(hostname string) bool {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gboolean2bool(C._g_hostname_is_non_ascii(unsafe.Pointer(_gstr_hostname)))
}

func HostnameToAscii(hostname string) string {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gcharp2string(C._g_hostname_to_ascii(unsafe.Pointer(_gstr_hostname)))
}

func HostnameToUnicode(hostname string) string {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	return gcharp2string(C._g_hostname_to_unicode(unsafe.Pointer(_gstr_hostname)))
}

func IdleAdd(function C.GSourceFunc, data unsafe.Pointer) uint {
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_idle_add(function, _gpointer_data))
}

func IdleAddFull(priority int, function C.GSourceFunc, data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_gint_priority := C.gint(priority)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_idle_add_full(_gint_priority, function, _gpointer_data, notify))
}

func IdleRemoveByData(data unsafe.Pointer) bool {
	_gpointer_data := (C.gpointer)(data)
	return gboolean2bool(C.g_idle_remove_by_data(_gpointer_data))
}

func IdleSourceNew() *Source {
	_c_return_ := C.g_idle_source_new()
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func Int64Equal(v1 unsafe.Pointer, v2 unsafe.Pointer) bool {
	_gpointer_v1 := (C.gconstpointer)(v1)
	_gpointer_v2 := (C.gconstpointer)(v2)
	return gboolean2bool(C.g_int64_equal(_gpointer_v1, _gpointer_v2))
}

func Int64Hash(v unsafe.Pointer) uint {
	_gpointer_v := (C.gconstpointer)(v)
	return guint2uint(C.g_int64_hash(_gpointer_v))
}

func IntEqual(v1 unsafe.Pointer, v2 unsafe.Pointer) bool {
	_gpointer_v1 := (C.gconstpointer)(v1)
	_gpointer_v2 := (C.gconstpointer)(v2)
	return gboolean2bool(C.g_int_equal(_gpointer_v1, _gpointer_v2))
}

func IntHash(v unsafe.Pointer) uint {
	_gpointer_v := (C.gconstpointer)(v)
	return guint2uint(C.g_int_hash(_gpointer_v))
}

func InternStaticString(string_ string) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gcharp2string(C._g_intern_static_string(unsafe.Pointer(_gstr_string_)))
}

func InternString(string_ string) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gcharp2string(C._g_intern_string(unsafe.Pointer(_gstr_string_)))
}

func IoAddWatch(channel *IOChannel, condition C.GIOCondition, func_ C.GIOFunc, user_data unsafe.Pointer) uint {
	_cp_channel_ := (*C.GIOChannel)(channel)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_io_add_watch(_cp_channel_, condition, func_, _gpointer_user_data))
}

func IoAddWatchFull(channel *IOChannel, priority int, condition C.GIOCondition, func_ C.GIOFunc, user_data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_cp_channel_ := (*C.GIOChannel)(channel)
	_gint_priority := C.gint(priority)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_io_add_watch_full(_cp_channel_, _gint_priority, condition, func_, _gpointer_user_data, notify))
}

func IoCreateWatch(channel *IOChannel, condition C.GIOCondition) *Source {
	_cp_channel_ := (*C.GIOChannel)(channel)
	_c_return_ := C.g_io_create_watch(_cp_channel_, condition)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func Listenv() unsafe.Pointer {
	return unsafe.Pointer(C.g_listenv())
}

func LocaleFromUtf8(utf8string string, len_ int64, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_utf8string := unsafe.Pointer(C.CString(utf8string))
	defer C.free(_cstr_utf8string)
	_gstr_utf8string := (*C.gchar)(unsafe.Pointer(_cstr_utf8string))
	_gssize_len_ := C.gssize(len_)
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_locale_from_utf8(unsafe.Pointer(_gstr_utf8string), _gssize_len_, _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

func LocaleToUtf8(opsysstring string, len_ int64, bytes_read *uint64, bytes_written *uint64, err unsafe.Pointer) string {
	_cstr_opsysstring := unsafe.Pointer(C.CString(opsysstring))
	defer C.free(_cstr_opsysstring)
	_gstr_opsysstring := (*C.gchar)(unsafe.Pointer(_cstr_opsysstring))
	_gssize_len_ := C.gssize(len_)
	_c_gsize_bytes_read := C.gsize(*bytes_read)
	_cp_gsize_bytes_read := (*C.gsize)(&_c_gsize_bytes_read)
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gcharp2string(C._g_locale_to_utf8(unsafe.Pointer(_gstr_opsysstring), _gssize_len_, _cp_gsize_bytes_read, _cp_gsize_bytes_written, unsafe.Pointer(err)))
}

//TODO g_log

func LogDefaultHandler(log_domain string, log_level C.GLogLevelFlags, message string, unused_data unsafe.Pointer) {
	_cstr_log_domain := unsafe.Pointer(C.CString(log_domain))
	defer C.free(_cstr_log_domain)
	_gstr_log_domain := (*C.gchar)(unsafe.Pointer(_cstr_log_domain))
	_cstr_message := unsafe.Pointer(C.CString(message))
	defer C.free(_cstr_message)
	_gstr_message := (*C.gchar)(unsafe.Pointer(_cstr_message))
	_gpointer_unused_data := (C.gpointer)(unused_data)
	C._g_log_default_handler(unsafe.Pointer(_gstr_log_domain), log_level, unsafe.Pointer(_gstr_message), _gpointer_unused_data)
}

func LogRemoveHandler(log_domain string, handler_id uint) {
	_cstr_log_domain := unsafe.Pointer(C.CString(log_domain))
	defer C.free(_cstr_log_domain)
	_gstr_log_domain := (*C.gchar)(unsafe.Pointer(_cstr_log_domain))
	_guint_handler_id := C.guint(handler_id)
	C._g_log_remove_handler(unsafe.Pointer(_gstr_log_domain), _guint_handler_id)
}

func LogSetAlwaysFatal(fatal_mask C.GLogLevelFlags) C.GLogLevelFlags {
	return C.g_log_set_always_fatal(fatal_mask)
}

func LogSetDefaultHandler(log_func C.GLogFunc, user_data unsafe.Pointer) C.GLogFunc {
	_gpointer_user_data := (C.gpointer)(user_data)
	return C.g_log_set_default_handler(log_func, _gpointer_user_data)
}

func LogSetFatalMask(log_domain string, fatal_mask C.GLogLevelFlags) C.GLogLevelFlags {
	_cstr_log_domain := unsafe.Pointer(C.CString(log_domain))
	defer C.free(_cstr_log_domain)
	_gstr_log_domain := (*C.gchar)(unsafe.Pointer(_cstr_log_domain))
	return C._g_log_set_fatal_mask(unsafe.Pointer(_gstr_log_domain), fatal_mask)
}

func LogSetHandler(log_domain string, log_levels C.GLogLevelFlags, log_func C.GLogFunc, user_data unsafe.Pointer) uint {
	_cstr_log_domain := unsafe.Pointer(C.CString(log_domain))
	defer C.free(_cstr_log_domain)
	_gstr_log_domain := (*C.gchar)(unsafe.Pointer(_cstr_log_domain))
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C._g_log_set_handler(unsafe.Pointer(_gstr_log_domain), log_levels, log_func, _gpointer_user_data))
}

//TODO g_logv

func MainCurrentSource() *Source {
	_c_return_ := C.g_main_current_source()
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func MainDepth() int {
	return gint2int(C.g_main_depth())
}

func Malloc(n_bytes uint64) unsafe.Pointer {
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_malloc(_gsize_n_bytes))
}

func Malloc0(n_bytes uint64) unsafe.Pointer {
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_malloc0(_gsize_n_bytes))
}

func Malloc0N(n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_malloc0_n(_gsize_n_blocks, _gsize_n_block_bytes))
}

func MallocN(n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_malloc_n(_gsize_n_blocks, _gsize_n_block_bytes))
}

//TODO g_markup_collect_attributes

func MarkupErrorQuark() C.GQuark {
	return C.g_markup_error_quark()
}

func MarkupEscapeText(text string, length int64) string {
	_cstr_text := unsafe.Pointer(C.CString(text))
	defer C.free(_cstr_text)
	_gstr_text := (*C.gchar)(unsafe.Pointer(_cstr_text))
	_gssize_length := C.gssize(length)
	return gcharp2string(C._g_markup_escape_text(unsafe.Pointer(_gstr_text), _gssize_length))
}

//TODO g_markup_printf_escaped

//TODO g_markup_vprintf_escaped

func MemIsSystemMalloc() bool {
	return gboolean2bool(C.g_mem_is_system_malloc())
}

func MemProfile() {
	C.g_mem_profile()
}

func MemSetVtable(vtable *MemVTable) {
	_cp_vtable_ := (*C.GMemVTable)(vtable)
	C.g_mem_set_vtable(_cp_vtable_)
}

func Memdup(mem unsafe.Pointer, byte_size uint) unsafe.Pointer {
	_gpointer_mem := (C.gconstpointer)(mem)
	_guint_byte_size := C.guint(byte_size)
	return unsafe.Pointer(C.g_memdup(_gpointer_mem, _guint_byte_size))
}

func MkdirWithParents(pathname string, mode int) int {
	_cstr_pathname := unsafe.Pointer(C.CString(pathname))
	defer C.free(_cstr_pathname)
	_gstr_pathname := (*C.gchar)(unsafe.Pointer(_cstr_pathname))
	_gint_mode := C.gint(mode)
	return gint2int(C._g_mkdir_with_parents(unsafe.Pointer(_gstr_pathname), _gint_mode))
}

func Mkdtemp(tmpl string) string {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	return gcharp2string(C.g_mkdtemp(_gstr_tmpl))
}

func MkdtempFull(tmpl string, mode int) string {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	_gint_mode := C.gint(mode)
	return gcharp2string(C.g_mkdtemp_full(_gstr_tmpl, _gint_mode))
}

func Mkstemp(tmpl string) int {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	return gint2int(C.g_mkstemp(_gstr_tmpl))
}

func MkstempFull(tmpl string, flags int, mode int) int {
	_cstr_tmpl := unsafe.Pointer(C.CString(tmpl))
	defer C.free(_cstr_tmpl)
	_gstr_tmpl := (*C.gchar)(unsafe.Pointer(_cstr_tmpl))
	_gint_flags := C.gint(flags)
	_gint_mode := C.gint(mode)
	return gint2int(C.g_mkstemp_full(_gstr_tmpl, _gint_flags, _gint_mode))
}

func NullifyPointer(nullify_location *C.gpointer) {
	C.g_nullify_pointer(nullify_location)
}

func OnErrorQuery(prg_name string) {
	_cstr_prg_name := unsafe.Pointer(C.CString(prg_name))
	defer C.free(_cstr_prg_name)
	_gstr_prg_name := (*C.gchar)(unsafe.Pointer(_cstr_prg_name))
	C._g_on_error_query(unsafe.Pointer(_gstr_prg_name))
}

func OnErrorStackTrace(prg_name string) {
	_cstr_prg_name := unsafe.Pointer(C.CString(prg_name))
	defer C.free(_cstr_prg_name)
	_gstr_prg_name := (*C.gchar)(unsafe.Pointer(_cstr_prg_name))
	C._g_on_error_stack_trace(unsafe.Pointer(_gstr_prg_name))
}

func OptionErrorQuark() C.GQuark {
	return C.g_option_error_quark()
}

func ParseDebugString(string_ string, keys *DebugKey, nkeys uint) uint {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cp_keys_ := (*C.GDebugKey)(keys)
	_guint_nkeys := C.guint(nkeys)
	return guint2uint(C._g_parse_debug_string(unsafe.Pointer(_gstr_string_), _cp_keys_, _guint_nkeys))
}

func PathGetBasename(file_name string) string {
	_cstr_file_name := unsafe.Pointer(C.CString(file_name))
	defer C.free(_cstr_file_name)
	_gstr_file_name := (*C.gchar)(unsafe.Pointer(_cstr_file_name))
	return gcharp2string(C._g_path_get_basename(unsafe.Pointer(_gstr_file_name)))
}

func PathGetDirname(file_name string) string {
	_cstr_file_name := unsafe.Pointer(C.CString(file_name))
	defer C.free(_cstr_file_name)
	_gstr_file_name := (*C.gchar)(unsafe.Pointer(_cstr_file_name))
	return gcharp2string(C._g_path_get_dirname(unsafe.Pointer(_gstr_file_name)))
}

func PathIsAbsolute(file_name string) bool {
	_cstr_file_name := unsafe.Pointer(C.CString(file_name))
	defer C.free(_cstr_file_name)
	_gstr_file_name := (*C.gchar)(unsafe.Pointer(_cstr_file_name))
	return gboolean2bool(C._g_path_is_absolute(unsafe.Pointer(_gstr_file_name)))
}

func PathSkipRoot(file_name string) string {
	_cstr_file_name := unsafe.Pointer(C.CString(file_name))
	defer C.free(_cstr_file_name)
	_gstr_file_name := (*C.gchar)(unsafe.Pointer(_cstr_file_name))
	return gcharp2string(C._g_path_skip_root(unsafe.Pointer(_gstr_file_name)))
}

func PatternMatch(pspec *PatternSpec, string_length uint, string_ string, string_reversed string) bool {
	_cp_pspec_ := (*C.GPatternSpec)(pspec)
	_guint_string_length := C.guint(string_length)
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_string_reversed := unsafe.Pointer(C.CString(string_reversed))
	defer C.free(_cstr_string_reversed)
	_gstr_string_reversed := (*C.gchar)(unsafe.Pointer(_cstr_string_reversed))
	return gboolean2bool(C._g_pattern_match(_cp_pspec_, _guint_string_length, unsafe.Pointer(_gstr_string_), unsafe.Pointer(_gstr_string_reversed)))
}

func PatternMatchSimple(pattern string, string_ string) bool {
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_pattern_match_simple(unsafe.Pointer(_gstr_pattern), unsafe.Pointer(_gstr_string_)))
}

func PatternMatchString(pspec *PatternSpec, string_ string) bool {
	_cp_pspec_ := (*C.GPatternSpec)(pspec)
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_pattern_match_string(_cp_pspec_, unsafe.Pointer(_gstr_string_)))
}

//Skipped g_pointer_bit_lock

//Skipped g_pointer_bit_trylock

//Skipped g_pointer_bit_unlock

func Poll(fds *PollFD, nfds uint, timeout int) int {
	_cp_fds_ := (*C.GPollFD)(fds)
	_guint_nfds := C.guint(nfds)
	_gint_timeout := C.gint(timeout)
	return gint2int(C.g_poll(_cp_fds_, _guint_nfds, _gint_timeout))
}

//TODO g_prefix_error

//TODO g_print

//TODO g_printerr

//TODO g_printf

//TODO g_printf_string_upper_bound

func PropagateError(dest unsafe.Pointer, src *Error) {
	_cp_src_ := (*C.GError)(src)
	C._g_propagate_error(unsafe.Pointer(dest), _cp_src_)
}

//TODO g_propagate_prefixed_error

func QsortWithData(pbase unsafe.Pointer, total_elems int, size uint64, compare_func C.GCompareDataFunc, user_data unsafe.Pointer) {
	_gpointer_pbase := (C.gconstpointer)(pbase)
	_gint_total_elems := C.gint(total_elems)
	_gsize_size := C.gsize(size)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_qsort_with_data(_gpointer_pbase, _gint_total_elems, _gsize_size, compare_func, _gpointer_user_data)
}

func QuarkFromStaticString(string_ string) C.GQuark {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return C._g_quark_from_static_string(unsafe.Pointer(_gstr_string_))
}

func QuarkFromString(string_ string) C.GQuark {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return C._g_quark_from_string(unsafe.Pointer(_gstr_string_))
}

func QuarkToString(quark C.GQuark) string {
	return gcharp2string(C.g_quark_to_string(quark))
}

func QuarkTryString(string_ string) C.GQuark {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return C._g_quark_try_string(unsafe.Pointer(_gstr_string_))
}

func RandomDouble() float64 {
	return gdouble2float64(C.g_random_double())
}

func RandomDoubleRange(begin float64, end float64) float64 {
	_gdouble_begin := C.gdouble(begin)
	_gdouble_end := C.gdouble(end)
	return gdouble2float64(C.g_random_double_range(_gdouble_begin, _gdouble_end))
}

func RandomInt() uint32 {
	return guint322uint32(C.g_random_int())
}

func RandomIntRange(begin int32, end int32) int32 {
	_gint32_begin := C.gint32(begin)
	_gint32_end := C.gint32(end)
	return gint322int32(C.g_random_int_range(_gint32_begin, _gint32_end))
}

func RandomSetSeed(seed uint32) {
	_guint32_seed := C.guint32(seed)
	C.g_random_set_seed(_guint32_seed)
}

func Realloc(mem unsafe.Pointer, n_bytes uint64) unsafe.Pointer {
	_gpointer_mem := (C.gpointer)(mem)
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_realloc(_gpointer_mem, _gsize_n_bytes))
}

func ReallocN(mem unsafe.Pointer, n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gpointer_mem := (C.gpointer)(mem)
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_realloc_n(_gpointer_mem, _gsize_n_blocks, _gsize_n_block_bytes))
}

func ReloadUserSpecialDirsCache() {
	C.g_reload_user_special_dirs_cache()
}

func ReturnIfFailWarning(log_domain *C.char, pretty_function *C.char, expression *C.char) {
	C._g_return_if_fail_warning(unsafe.Pointer(log_domain), unsafe.Pointer(pretty_function), unsafe.Pointer(expression))
}

func Rmdir(filename string) C.int {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return C._g_rmdir(unsafe.Pointer(_gstr_filename))
}

func SetApplicationName(application_name string) {
	_cstr_application_name := unsafe.Pointer(C.CString(application_name))
	defer C.free(_cstr_application_name)
	_gstr_application_name := (*C.gchar)(unsafe.Pointer(_cstr_application_name))
	C._g_set_application_name(unsafe.Pointer(_gstr_application_name))
}

//TODO g_set_error

func SetErrorLiteral(err unsafe.Pointer, domain C.GQuark, code int, message string) {
	_gint_code := C.gint(code)
	_cstr_message := unsafe.Pointer(C.CString(message))
	defer C.free(_cstr_message)
	_gstr_message := (*C.gchar)(unsafe.Pointer(_cstr_message))
	C._g_set_error_literal(unsafe.Pointer(err), domain, _gint_code, unsafe.Pointer(_gstr_message))
}

func SetPrgname(prgname string) {
	_cstr_prgname := unsafe.Pointer(C.CString(prgname))
	defer C.free(_cstr_prgname)
	_gstr_prgname := (*C.gchar)(unsafe.Pointer(_cstr_prgname))
	C._g_set_prgname(unsafe.Pointer(_gstr_prgname))
}

func SetPrintHandler(func_ C.GPrintFunc) C.GPrintFunc {
	return C.g_set_print_handler(func_)
}

func SetPrinterrHandler(func_ C.GPrintFunc) C.GPrintFunc {
	return C.g_set_printerr_handler(func_)
}

func Setenv(variable string, value string, overwrite bool) bool {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	_cstr_value := unsafe.Pointer(C.CString(value))
	defer C.free(_cstr_value)
	_gstr_value := (*C.gchar)(unsafe.Pointer(_cstr_value))
	_gbool_overwrite := C._false()
	if overwrite { _gbool_overwrite = C._true() }
	return gboolean2bool(C._g_setenv(unsafe.Pointer(_gstr_variable), unsafe.Pointer(_gstr_value), _gbool_overwrite))
}

func ShellErrorQuark() C.GQuark {
	return C.g_shell_error_quark()
}

func ShellParseArgv(command_line string, argcp *int, argvp unsafe.Pointer, err unsafe.Pointer) bool {
	_cstr_command_line := unsafe.Pointer(C.CString(command_line))
	defer C.free(_cstr_command_line)
	_gstr_command_line := (*C.gchar)(unsafe.Pointer(_cstr_command_line))
	_c_gint_argcp := C.gint(*argcp)
	_cp_gint_argcp := (*C.gint)(&_c_gint_argcp)
	return gboolean2bool(C._g_shell_parse_argv(unsafe.Pointer(_gstr_command_line), _cp_gint_argcp, unsafe.Pointer(argvp), unsafe.Pointer(err)))
}

func ShellQuote(unquoted_string string) string {
	_cstr_unquoted_string := unsafe.Pointer(C.CString(unquoted_string))
	defer C.free(_cstr_unquoted_string)
	_gstr_unquoted_string := (*C.gchar)(unsafe.Pointer(_cstr_unquoted_string))
	return gcharp2string(C._g_shell_quote(unsafe.Pointer(_gstr_unquoted_string)))
}

func ShellUnquote(quoted_string string, err unsafe.Pointer) string {
	_cstr_quoted_string := unsafe.Pointer(C.CString(quoted_string))
	defer C.free(_cstr_quoted_string)
	_gstr_quoted_string := (*C.gchar)(unsafe.Pointer(_cstr_quoted_string))
	return gcharp2string(C._g_shell_unquote(unsafe.Pointer(_gstr_quoted_string), unsafe.Pointer(err)))
}

func SliceAlloc(block_size uint64) unsafe.Pointer {
	_gsize_block_size := C.gsize(block_size)
	return unsafe.Pointer(C.g_slice_alloc(_gsize_block_size))
}

func SliceAlloc0(block_size uint64) unsafe.Pointer {
	_gsize_block_size := C.gsize(block_size)
	return unsafe.Pointer(C.g_slice_alloc0(_gsize_block_size))
}

func SliceCopy(block_size uint64, mem_block unsafe.Pointer) unsafe.Pointer {
	_gsize_block_size := C.gsize(block_size)
	_gpointer_mem_block := (C.gconstpointer)(mem_block)
	return unsafe.Pointer(C.g_slice_copy(_gsize_block_size, _gpointer_mem_block))
}

func SliceFree1(block_size uint64, mem_block unsafe.Pointer) {
	_gsize_block_size := C.gsize(block_size)
	_gpointer_mem_block := (C.gpointer)(mem_block)
	C.g_slice_free1(_gsize_block_size, _gpointer_mem_block)
}

func SliceFreeChainWithOffset(block_size uint64, mem_chain unsafe.Pointer, next_offset uint64) {
	_gsize_block_size := C.gsize(block_size)
	_gpointer_mem_chain := (C.gpointer)(mem_chain)
	_gsize_next_offset := C.gsize(next_offset)
	C.g_slice_free_chain_with_offset(_gsize_block_size, _gpointer_mem_chain, _gsize_next_offset)
}

//Skipped g_slice_get_config

//Skipped g_slice_get_config_state

//Skipped g_slice_set_config

//TODO g_snprintf

func SpacedPrimesClosest(num uint) uint {
	_guint_num := C.guint(num)
	return guint2uint(C.g_spaced_primes_closest(_guint_num))
}

func SpawnAsync(working_directory string, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data unsafe.Pointer, child_pid *C.GPid, err unsafe.Pointer) bool {
	_cstr_working_directory := unsafe.Pointer(C.CString(working_directory))
	defer C.free(_cstr_working_directory)
	_gstr_working_directory := (*C.gchar)(unsafe.Pointer(_cstr_working_directory))
	_gpointer_user_data := (C.gpointer)(user_data)
	return gboolean2bool(C._g_spawn_async(unsafe.Pointer(_gstr_working_directory), unsafe.Pointer(argv), unsafe.Pointer(envp), flags, child_setup, _gpointer_user_data, child_pid, unsafe.Pointer(err)))
}

func SpawnAsyncWithPipes(working_directory string, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data unsafe.Pointer, child_pid *C.GPid, standard_input *int, standard_output *int, standard_error *int, err unsafe.Pointer) bool {
	_cstr_working_directory := unsafe.Pointer(C.CString(working_directory))
	defer C.free(_cstr_working_directory)
	_gstr_working_directory := (*C.gchar)(unsafe.Pointer(_cstr_working_directory))
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_gint_standard_input := C.gint(*standard_input)
	_cp_gint_standard_input := (*C.gint)(&_c_gint_standard_input)
	_c_gint_standard_output := C.gint(*standard_output)
	_cp_gint_standard_output := (*C.gint)(&_c_gint_standard_output)
	_c_gint_standard_error := C.gint(*standard_error)
	_cp_gint_standard_error := (*C.gint)(&_c_gint_standard_error)
	return gboolean2bool(C._g_spawn_async_with_pipes(unsafe.Pointer(_gstr_working_directory), unsafe.Pointer(argv), unsafe.Pointer(envp), flags, child_setup, _gpointer_user_data, child_pid, _cp_gint_standard_input, _cp_gint_standard_output, _cp_gint_standard_error, unsafe.Pointer(err)))
}

func SpawnCheckExitStatus(exit_status int, err unsafe.Pointer) bool {
	_gint_exit_status := C.gint(exit_status)
	return gboolean2bool(C._g_spawn_check_exit_status(_gint_exit_status, unsafe.Pointer(err)))
}

func SpawnClosePid(pid C.GPid) {
	C.g_spawn_close_pid(pid)
}

func SpawnCommandLineAsync(command_line string, err unsafe.Pointer) bool {
	_cstr_command_line := unsafe.Pointer(C.CString(command_line))
	defer C.free(_cstr_command_line)
	_gstr_command_line := (*C.gchar)(unsafe.Pointer(_cstr_command_line))
	return gboolean2bool(C._g_spawn_command_line_async(unsafe.Pointer(_gstr_command_line), unsafe.Pointer(err)))
}

func SpawnCommandLineSync(command_line string, standard_output unsafe.Pointer, standard_error unsafe.Pointer, exit_status *int, err unsafe.Pointer) bool {
	_cstr_command_line := unsafe.Pointer(C.CString(command_line))
	defer C.free(_cstr_command_line)
	_gstr_command_line := (*C.gchar)(unsafe.Pointer(_cstr_command_line))
	_c_gint_exit_status := C.gint(*exit_status)
	_cp_gint_exit_status := (*C.gint)(&_c_gint_exit_status)
	return gboolean2bool(C._g_spawn_command_line_sync(unsafe.Pointer(_gstr_command_line), unsafe.Pointer(standard_output), unsafe.Pointer(standard_error), _cp_gint_exit_status, unsafe.Pointer(err)))
}

func SpawnErrorQuark() C.GQuark {
	return C.g_spawn_error_quark()
}

func SpawnExitErrorQuark() C.GQuark {
	return C.g_spawn_exit_error_quark()
}

func SpawnSync(working_directory string, argv unsafe.Pointer, envp unsafe.Pointer, flags C.GSpawnFlags, child_setup C.GSpawnChildSetupFunc, user_data unsafe.Pointer, standard_output unsafe.Pointer, standard_error unsafe.Pointer, exit_status *int, err unsafe.Pointer) bool {
	_cstr_working_directory := unsafe.Pointer(C.CString(working_directory))
	defer C.free(_cstr_working_directory)
	_gstr_working_directory := (*C.gchar)(unsafe.Pointer(_cstr_working_directory))
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_gint_exit_status := C.gint(*exit_status)
	_cp_gint_exit_status := (*C.gint)(&_c_gint_exit_status)
	return gboolean2bool(C._g_spawn_sync(unsafe.Pointer(_gstr_working_directory), unsafe.Pointer(argv), unsafe.Pointer(envp), flags, child_setup, _gpointer_user_data, unsafe.Pointer(standard_output), unsafe.Pointer(standard_error), _cp_gint_exit_status, unsafe.Pointer(err)))
}

//TODO g_sprintf

func Stpcpy(dest string, src *C.char) string {
	_cstr_dest := unsafe.Pointer(C.CString(dest))
	defer C.free(_cstr_dest)
	_gstr_dest := (*C.gchar)(unsafe.Pointer(_cstr_dest))
	return gcharp2string(C._g_stpcpy(_gstr_dest, unsafe.Pointer(src)))
}

func StrEqual(v1 unsafe.Pointer, v2 unsafe.Pointer) bool {
	_gpointer_v1 := (C.gconstpointer)(v1)
	_gpointer_v2 := (C.gconstpointer)(v2)
	return gboolean2bool(C.g_str_equal(_gpointer_v1, _gpointer_v2))
}

func StrHasPrefix(str string, prefix string) bool {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_cstr_prefix := unsafe.Pointer(C.CString(prefix))
	defer C.free(_cstr_prefix)
	_gstr_prefix := (*C.gchar)(unsafe.Pointer(_cstr_prefix))
	return gboolean2bool(C._g_str_has_prefix(unsafe.Pointer(_gstr_str), unsafe.Pointer(_gstr_prefix)))
}

func StrHasSuffix(str string, suffix string) bool {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_cstr_suffix := unsafe.Pointer(C.CString(suffix))
	defer C.free(_cstr_suffix)
	_gstr_suffix := (*C.gchar)(unsafe.Pointer(_cstr_suffix))
	return gboolean2bool(C._g_str_has_suffix(unsafe.Pointer(_gstr_str), unsafe.Pointer(_gstr_suffix)))
}

func StrHash(v unsafe.Pointer) uint {
	_gpointer_v := (C.gconstpointer)(v)
	return guint2uint(C.g_str_hash(_gpointer_v))
}

func Strcanon(string_ string, valid_chars string, substitutor int8) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_valid_chars := unsafe.Pointer(C.CString(valid_chars))
	defer C.free(_cstr_valid_chars)
	_gstr_valid_chars := (*C.gchar)(unsafe.Pointer(_cstr_valid_chars))
	_gchar_substitutor := C.gchar(substitutor)
	return gcharp2string(C._g_strcanon(_gstr_string_, unsafe.Pointer(_gstr_valid_chars), _gchar_substitutor))
}

//Skipped g_strcasecmp

func Strchomp(string_ string) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gcharp2string(C.g_strchomp(_gstr_string_))
}

func Strchug(string_ string) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gcharp2string(C.g_strchug(_gstr_string_))
}

func Strcmp0(str1 *C.char, str2 *C.char) C.int {
	return C._g_strcmp0(unsafe.Pointer(str1), unsafe.Pointer(str2))
}

func Strcompress(source string) string {
	_cstr_source := unsafe.Pointer(C.CString(source))
	defer C.free(_cstr_source)
	_gstr_source := (*C.gchar)(unsafe.Pointer(_cstr_source))
	return gcharp2string(C._g_strcompress(unsafe.Pointer(_gstr_source)))
}

//TODO g_strconcat

func Strdelimit(string_ string, delimiters string, new_delimiter int8) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_delimiters := unsafe.Pointer(C.CString(delimiters))
	defer C.free(_cstr_delimiters)
	_gstr_delimiters := (*C.gchar)(unsafe.Pointer(_cstr_delimiters))
	_gchar_new_delimiter := C.gchar(new_delimiter)
	return gcharp2string(C._g_strdelimit(_gstr_string_, unsafe.Pointer(_gstr_delimiters), _gchar_new_delimiter))
}

//Skipped g_strdown

func Strdup(str string) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	return gcharp2string(C._g_strdup(unsafe.Pointer(_gstr_str)))
}

//TODO g_strdup_printf

//TODO g_strdup_vprintf

func Strdupv(str_array unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C._g_strdupv(unsafe.Pointer(str_array)))
}

func Strerror(errnum int) string {
	_gint_errnum := C.gint(errnum)
	return gcharp2string(C.g_strerror(_gint_errnum))
}

func Strescape(source string, exceptions string) string {
	_cstr_source := unsafe.Pointer(C.CString(source))
	defer C.free(_cstr_source)
	_gstr_source := (*C.gchar)(unsafe.Pointer(_cstr_source))
	_cstr_exceptions := unsafe.Pointer(C.CString(exceptions))
	defer C.free(_cstr_exceptions)
	_gstr_exceptions := (*C.gchar)(unsafe.Pointer(_cstr_exceptions))
	return gcharp2string(C._g_strescape(unsafe.Pointer(_gstr_source), unsafe.Pointer(_gstr_exceptions)))
}

func Strfreev(str_array unsafe.Pointer) {
	C._g_strfreev(unsafe.Pointer(str_array))
}

func StringNew(init string) *String {
	_cstr_init := unsafe.Pointer(C.CString(init))
	defer C.free(_cstr_init)
	_gstr_init := (*C.gchar)(unsafe.Pointer(_cstr_init))
	_c_return_ := C._g_string_new(unsafe.Pointer(_gstr_init))
	_go_return_ := (*String)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **String) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func StringNewLen(init string, len_ int64) *String {
	_cstr_init := unsafe.Pointer(C.CString(init))
	defer C.free(_cstr_init)
	_gstr_init := (*C.gchar)(unsafe.Pointer(_cstr_init))
	_gssize_len_ := C.gssize(len_)
	_c_return_ := C._g_string_new_len(unsafe.Pointer(_gstr_init), _gssize_len_)
	_go_return_ := (*String)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **String) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func StringSizedNew(dfl_size uint64) *String {
	_gsize_dfl_size := C.gsize(dfl_size)
	_c_return_ := C.g_string_sized_new(_gsize_dfl_size)
	_go_return_ := (*String)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **String) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func StripContext(msgid string, msgval string) string {
	_cstr_msgid := unsafe.Pointer(C.CString(msgid))
	defer C.free(_cstr_msgid)
	_gstr_msgid := (*C.gchar)(unsafe.Pointer(_cstr_msgid))
	_cstr_msgval := unsafe.Pointer(C.CString(msgval))
	defer C.free(_cstr_msgval)
	_gstr_msgval := (*C.gchar)(unsafe.Pointer(_cstr_msgval))
	return gcharp2string(C._g_strip_context(unsafe.Pointer(_gstr_msgid), unsafe.Pointer(_gstr_msgval)))
}

//TODO g_strjoin

func Strjoinv(separator string, str_array unsafe.Pointer) string {
	_cstr_separator := unsafe.Pointer(C.CString(separator))
	defer C.free(_cstr_separator)
	_gstr_separator := (*C.gchar)(unsafe.Pointer(_cstr_separator))
	return gcharp2string(C._g_strjoinv(unsafe.Pointer(_gstr_separator), unsafe.Pointer(str_array)))
}

func Strlcat(dest string, src string, dest_size uint64) uint64 {
	_cstr_dest := unsafe.Pointer(C.CString(dest))
	defer C.free(_cstr_dest)
	_gstr_dest := (*C.gchar)(unsafe.Pointer(_cstr_dest))
	_cstr_src := unsafe.Pointer(C.CString(src))
	defer C.free(_cstr_src)
	_gstr_src := (*C.gchar)(unsafe.Pointer(_cstr_src))
	_gsize_dest_size := C.gsize(dest_size)
	return gsize2uint64(C._g_strlcat(_gstr_dest, unsafe.Pointer(_gstr_src), _gsize_dest_size))
}

func Strlcpy(dest string, src string, dest_size uint64) uint64 {
	_cstr_dest := unsafe.Pointer(C.CString(dest))
	defer C.free(_cstr_dest)
	_gstr_dest := (*C.gchar)(unsafe.Pointer(_cstr_dest))
	_cstr_src := unsafe.Pointer(C.CString(src))
	defer C.free(_cstr_src)
	_gstr_src := (*C.gchar)(unsafe.Pointer(_cstr_src))
	_gsize_dest_size := C.gsize(dest_size)
	return gsize2uint64(C._g_strlcpy(_gstr_dest, unsafe.Pointer(_gstr_src), _gsize_dest_size))
}

//Skipped g_strncasecmp

func Strndup(str string, n uint64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gsize_n := C.gsize(n)
	return gcharp2string(C._g_strndup(unsafe.Pointer(_gstr_str), _gsize_n))
}

func Strnfill(length uint64, fill_char int8) string {
	_gsize_length := C.gsize(length)
	_gchar_fill_char := C.gchar(fill_char)
	return gcharp2string(C.g_strnfill(_gsize_length, _gchar_fill_char))
}

func Strreverse(string_ string) string {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gcharp2string(C.g_strreverse(_gstr_string_))
}

func Strrstr(haystack string, needle string) string {
	_cstr_haystack := unsafe.Pointer(C.CString(haystack))
	defer C.free(_cstr_haystack)
	_gstr_haystack := (*C.gchar)(unsafe.Pointer(_cstr_haystack))
	_cstr_needle := unsafe.Pointer(C.CString(needle))
	defer C.free(_cstr_needle)
	_gstr_needle := (*C.gchar)(unsafe.Pointer(_cstr_needle))
	return gcharp2string(C._g_strrstr(unsafe.Pointer(_gstr_haystack), unsafe.Pointer(_gstr_needle)))
}

func StrrstrLen(haystack string, haystack_len int64, needle string) string {
	_cstr_haystack := unsafe.Pointer(C.CString(haystack))
	defer C.free(_cstr_haystack)
	_gstr_haystack := (*C.gchar)(unsafe.Pointer(_cstr_haystack))
	_gssize_haystack_len := C.gssize(haystack_len)
	_cstr_needle := unsafe.Pointer(C.CString(needle))
	defer C.free(_cstr_needle)
	_gstr_needle := (*C.gchar)(unsafe.Pointer(_cstr_needle))
	return gcharp2string(C._g_strrstr_len(unsafe.Pointer(_gstr_haystack), _gssize_haystack_len, unsafe.Pointer(_gstr_needle)))
}

func Strsignal(signum int) string {
	_gint_signum := C.gint(signum)
	return gcharp2string(C.g_strsignal(_gint_signum))
}

func Strsplit(string_ string, delimiter string, max_tokens int) unsafe.Pointer {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_delimiter := unsafe.Pointer(C.CString(delimiter))
	defer C.free(_cstr_delimiter)
	_gstr_delimiter := (*C.gchar)(unsafe.Pointer(_cstr_delimiter))
	_gint_max_tokens := C.gint(max_tokens)
	return unsafe.Pointer(C._g_strsplit(unsafe.Pointer(_gstr_string_), unsafe.Pointer(_gstr_delimiter), _gint_max_tokens))
}

func StrsplitSet(string_ string, delimiters string, max_tokens int) unsafe.Pointer {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	_cstr_delimiters := unsafe.Pointer(C.CString(delimiters))
	defer C.free(_cstr_delimiters)
	_gstr_delimiters := (*C.gchar)(unsafe.Pointer(_cstr_delimiters))
	_gint_max_tokens := C.gint(max_tokens)
	return unsafe.Pointer(C._g_strsplit_set(unsafe.Pointer(_gstr_string_), unsafe.Pointer(_gstr_delimiters), _gint_max_tokens))
}

func StrstrLen(haystack string, haystack_len int64, needle string) string {
	_cstr_haystack := unsafe.Pointer(C.CString(haystack))
	defer C.free(_cstr_haystack)
	_gstr_haystack := (*C.gchar)(unsafe.Pointer(_cstr_haystack))
	_gssize_haystack_len := C.gssize(haystack_len)
	_cstr_needle := unsafe.Pointer(C.CString(needle))
	defer C.free(_cstr_needle)
	_gstr_needle := (*C.gchar)(unsafe.Pointer(_cstr_needle))
	return gcharp2string(C._g_strstr_len(unsafe.Pointer(_gstr_haystack), _gssize_haystack_len, unsafe.Pointer(_gstr_needle)))
}

func Strtod(nptr string, endptr unsafe.Pointer) float64 {
	_cstr_nptr := unsafe.Pointer(C.CString(nptr))
	defer C.free(_cstr_nptr)
	_gstr_nptr := (*C.gchar)(unsafe.Pointer(_cstr_nptr))
	return gdouble2float64(C._g_strtod(unsafe.Pointer(_gstr_nptr), unsafe.Pointer(endptr)))
}

//Skipped g_strup

func StrvGetType() C.GType {
	return C.g_strv_get_type()
}

func StrvLength(str_array unsafe.Pointer) uint {
	return guint2uint(C._g_strv_length(unsafe.Pointer(str_array)))
}

func TestAddDataFunc(testpath *C.char, test_data unsafe.Pointer, test_func C.GTestDataFunc) {
	_gpointer_test_data := (C.gconstpointer)(test_data)
	C._g_test_add_data_func(unsafe.Pointer(testpath), _gpointer_test_data, test_func)
}

func TestAddDataFuncFull(testpath *C.char, test_data unsafe.Pointer, test_func C.GTestDataFunc, data_free_func C.GDestroyNotify) {
	_gpointer_test_data := (C.gpointer)(test_data)
	C._g_test_add_data_func_full(unsafe.Pointer(testpath), _gpointer_test_data, test_func, data_free_func)
}

func TestAddFunc(testpath *C.char, test_func C.GTestFunc) {
	C._g_test_add_func(unsafe.Pointer(testpath), test_func)
}

func TestAddVtable(testpath *C.char, data_size uint64, test_data unsafe.Pointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) {
	_gsize_data_size := C.gsize(data_size)
	_gpointer_test_data := (C.gconstpointer)(test_data)
	C._g_test_add_vtable(unsafe.Pointer(testpath), _gsize_data_size, _gpointer_test_data, data_setup, data_test, data_teardown)
}

func TestAssertExpectedMessagesInternal(domain *C.char, file *C.char, line C.int, func_ *C.char) {
	C._g_test_assert_expected_messages_internal(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_))
}

func TestBug(bug_uri_snippet *C.char) {
	C._g_test_bug(unsafe.Pointer(bug_uri_snippet))
}

func TestBugBase(uri_pattern *C.char) {
	C._g_test_bug_base(unsafe.Pointer(uri_pattern))
}

func TestCreateCase(test_name *C.char, data_size uint64, test_data unsafe.Pointer, data_setup C.GTestFixtureFunc, data_test C.GTestFixtureFunc, data_teardown C.GTestFixtureFunc) *TestCase {
	_gsize_data_size := C.gsize(data_size)
	_gpointer_test_data := (C.gconstpointer)(test_data)
	_c_return_ := C._g_test_create_case(unsafe.Pointer(test_name), _gsize_data_size, _gpointer_test_data, data_setup, data_test, data_teardown)
	_go_return_ := (*TestCase)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TestCase) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TestCreateSuite(suite_name *C.char) *TestSuite {
	_c_return_ := C._g_test_create_suite(unsafe.Pointer(suite_name))
	_go_return_ := (*TestSuite)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TestSuite) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TestExpectMessage(log_domain string, log_level C.GLogLevelFlags, pattern string) {
	_cstr_log_domain := unsafe.Pointer(C.CString(log_domain))
	defer C.free(_cstr_log_domain)
	_gstr_log_domain := (*C.gchar)(unsafe.Pointer(_cstr_log_domain))
	_cstr_pattern := unsafe.Pointer(C.CString(pattern))
	defer C.free(_cstr_pattern)
	_gstr_pattern := (*C.gchar)(unsafe.Pointer(_cstr_pattern))
	C._g_test_expect_message(unsafe.Pointer(_gstr_log_domain), log_level, unsafe.Pointer(_gstr_pattern))
}

func TestFail() {
	C.g_test_fail()
}

func TestGetRoot() *TestSuite {
	_c_return_ := C.g_test_get_root()
	_go_return_ := (*TestSuite)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TestSuite) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

//TODO g_test_init

func TestLogSetFatalHandler(log_func C.GTestLogFatalFunc, user_data unsafe.Pointer) {
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_test_log_set_fatal_handler(log_func, _gpointer_user_data)
}

func TestLogTypeName(log_type C.GTestLogType) *C.char {
	return C.g_test_log_type_name(log_type)
}

//TODO g_test_maximized_result

//TODO g_test_message

//TODO g_test_minimized_result

func TestQueueDestroy(destroy_func C.GDestroyNotify, destroy_data unsafe.Pointer) {
	_gpointer_destroy_data := (C.gpointer)(destroy_data)
	C.g_test_queue_destroy(destroy_func, _gpointer_destroy_data)
}

func TestQueueFree(gfree_pointer unsafe.Pointer) {
	_gpointer_gfree_pointer := (C.gpointer)(gfree_pointer)
	C.g_test_queue_free(_gpointer_gfree_pointer)
}

func TestRandDouble() float64 {
	return double2float64(C.g_test_rand_double())
}

func TestRandDoubleRange(range_start float64, range_end float64) float64 {
	_double_range_start := C.double(range_start)
	_double_range_end := C.double(range_end)
	return double2float64(C.g_test_rand_double_range(_double_range_start, _double_range_end))
}

func TestRandInt() int32 {
	return gint322int32(C.g_test_rand_int())
}

func TestRandIntRange(begin int32, end int32) int32 {
	_gint32_begin := C.gint32(begin)
	_gint32_end := C.gint32(end)
	return gint322int32(C.g_test_rand_int_range(_gint32_begin, _gint32_end))
}

func TestRun() C.int {
	return C.g_test_run()
}

func TestRunSuite(suite *TestSuite) C.int {
	_cp_suite_ := (*C.GTestSuite)(suite)
	return C.g_test_run_suite(_cp_suite_)
}

func TestTimerElapsed() float64 {
	return double2float64(C.g_test_timer_elapsed())
}

func TestTimerLast() float64 {
	return double2float64(C.g_test_timer_last())
}

func TestTimerStart() {
	C.g_test_timer_start()
}

func TestTrapAssertions(domain *C.char, file *C.char, line C.int, func_ *C.char, assertion_flags uint64, pattern *C.char) {
	_guint64_assertion_flags := C.guint64(assertion_flags)
	C._g_test_trap_assertions(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), _guint64_assertion_flags, unsafe.Pointer(pattern))
}

func TestTrapFork(usec_timeout uint64, test_trap_flags C.GTestTrapFlags) bool {
	_guint64_usec_timeout := C.guint64(usec_timeout)
	return gboolean2bool(C.g_test_trap_fork(_guint64_usec_timeout, test_trap_flags))
}

func TestTrapHasPassed() bool {
	return gboolean2bool(C.g_test_trap_has_passed())
}

func TestTrapReachedTimeout() bool {
	return gboolean2bool(C.g_test_trap_reached_timeout())
}

func TimeoutAdd(interval uint, function C.GSourceFunc, data unsafe.Pointer) uint {
	_guint_interval := C.guint(interval)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_timeout_add(_guint_interval, function, _gpointer_data))
}

func TimeoutAddFull(priority int, interval uint, function C.GSourceFunc, data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_gint_priority := C.gint(priority)
	_guint_interval := C.guint(interval)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_timeout_add_full(_gint_priority, _guint_interval, function, _gpointer_data, notify))
}

func TimeoutAddSeconds(interval uint, function C.GSourceFunc, data unsafe.Pointer) uint {
	_guint_interval := C.guint(interval)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_timeout_add_seconds(_guint_interval, function, _gpointer_data))
}

func TimeoutAddSecondsFull(priority int, interval uint, function C.GSourceFunc, data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_gint_priority := C.gint(priority)
	_guint_interval := C.guint(interval)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_timeout_add_seconds_full(_gint_priority, _guint_interval, function, _gpointer_data, notify))
}

func TimeoutSourceNew(interval uint) *Source {
	_guint_interval := C.guint(interval)
	_c_return_ := C.g_timeout_source_new(_guint_interval)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TimeoutSourceNewSeconds(interval uint) *Source {
	_guint_interval := C.guint(interval)
	_c_return_ := C.g_timeout_source_new_seconds(_guint_interval)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TryMalloc(n_bytes uint64) unsafe.Pointer {
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_try_malloc(_gsize_n_bytes))
}

func TryMalloc0(n_bytes uint64) unsafe.Pointer {
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_try_malloc0(_gsize_n_bytes))
}

func TryMalloc0N(n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_try_malloc0_n(_gsize_n_blocks, _gsize_n_block_bytes))
}

func TryMallocN(n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_try_malloc_n(_gsize_n_blocks, _gsize_n_block_bytes))
}

func TryRealloc(mem unsafe.Pointer, n_bytes uint64) unsafe.Pointer {
	_gpointer_mem := (C.gpointer)(mem)
	_gsize_n_bytes := C.gsize(n_bytes)
	return unsafe.Pointer(C.g_try_realloc(_gpointer_mem, _gsize_n_bytes))
}

func TryReallocN(mem unsafe.Pointer, n_blocks uint64, n_block_bytes uint64) unsafe.Pointer {
	_gpointer_mem := (C.gpointer)(mem)
	_gsize_n_blocks := C.gsize(n_blocks)
	_gsize_n_block_bytes := C.gsize(n_block_bytes)
	return unsafe.Pointer(C.g_try_realloc_n(_gpointer_mem, _gsize_n_blocks, _gsize_n_block_bytes))
}

func Ucs4ToUtf16(str *C.gunichar, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) *C.gunichar2 {
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return C._g_ucs4_to_utf16(unsafe.Pointer(str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err))
}

func Ucs4ToUtf8(str *C.gunichar, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) string {
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return gcharp2string(C._g_ucs4_to_utf8(unsafe.Pointer(str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err)))
}

func UnicharBreakType(c C.gunichar) C.GUnicodeBreakType {
	return C.g_unichar_break_type(c)
}

func UnicharCombiningClass(uc C.gunichar) int {
	return gint2int(C.g_unichar_combining_class(uc))
}

func UnicharCompose(a C.gunichar, b C.gunichar, ch *C.gunichar) bool {
	return gboolean2bool(C.g_unichar_compose(a, b, ch))
}

func UnicharDecompose(ch C.gunichar, a *C.gunichar, b *C.gunichar) bool {
	return gboolean2bool(C.g_unichar_decompose(ch, a, b))
}

func UnicharDigitValue(c C.gunichar) int {
	return gint2int(C.g_unichar_digit_value(c))
}

func UnicharFullyDecompose(ch C.gunichar, compat bool, result *C.gunichar, result_len uint64) uint64 {
	_gbool_compat := C._false()
	if compat { _gbool_compat = C._true() }
	_gsize_result_len := C.gsize(result_len)
	return gsize2uint64(C.g_unichar_fully_decompose(ch, _gbool_compat, result, _gsize_result_len))
}

func UnicharGetMirrorChar(ch C.gunichar, mirrored_ch *C.gunichar) bool {
	return gboolean2bool(C.g_unichar_get_mirror_char(ch, mirrored_ch))
}

func UnicharGetScript(ch C.gunichar) C.GUnicodeScript {
	return C.g_unichar_get_script(ch)
}

func UnicharIsalnum(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isalnum(c))
}

func UnicharIsalpha(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isalpha(c))
}

func UnicharIscntrl(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_iscntrl(c))
}

func UnicharIsdefined(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isdefined(c))
}

func UnicharIsdigit(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isdigit(c))
}

func UnicharIsgraph(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isgraph(c))
}

func UnicharIslower(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_islower(c))
}

func UnicharIsmark(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_ismark(c))
}

func UnicharIsprint(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isprint(c))
}

func UnicharIspunct(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_ispunct(c))
}

func UnicharIsspace(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isspace(c))
}

func UnicharIstitle(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_istitle(c))
}

func UnicharIsupper(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isupper(c))
}

func UnicharIswide(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_iswide(c))
}

func UnicharIswideCjk(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_iswide_cjk(c))
}

func UnicharIsxdigit(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_isxdigit(c))
}

func UnicharIszerowidth(c C.gunichar) bool {
	return gboolean2bool(C.g_unichar_iszerowidth(c))
}

func UnicharToUtf8(c C.gunichar, outbuf string) int {
	_cstr_outbuf := unsafe.Pointer(C.CString(outbuf))
	defer C.free(_cstr_outbuf)
	_gstr_outbuf := (*C.gchar)(unsafe.Pointer(_cstr_outbuf))
	return gint2int(C.g_unichar_to_utf8(c, _gstr_outbuf))
}

func UnicharTolower(c C.gunichar) C.gunichar {
	return C.g_unichar_tolower(c)
}

func UnicharTotitle(c C.gunichar) C.gunichar {
	return C.g_unichar_totitle(c)
}

func UnicharToupper(c C.gunichar) C.gunichar {
	return C.g_unichar_toupper(c)
}

func UnicharType(c C.gunichar) C.GUnicodeType {
	return C.g_unichar_type(c)
}

func UnicharValidate(ch C.gunichar) bool {
	return gboolean2bool(C.g_unichar_validate(ch))
}

func UnicharXdigitValue(c C.gunichar) int {
	return gint2int(C.g_unichar_xdigit_value(c))
}

//Skipped g_unicode_canonical_decomposition

func UnicodeCanonicalOrdering(string_ *C.gunichar, len_ uint64) {
	_gsize_len_ := C.gsize(len_)
	C.g_unicode_canonical_ordering(string_, _gsize_len_)
}

func UnicodeScriptFromIso15924(iso15924 uint32) C.GUnicodeScript {
	_guint32_iso15924 := C.guint32(iso15924)
	return C.g_unicode_script_from_iso15924(_guint32_iso15924)
}

func UnicodeScriptToIso15924(script C.GUnicodeScript) uint32 {
	return guint322uint32(C.g_unicode_script_to_iso15924(script))
}

func UnixErrorQuark() C.GQuark {
	return C.g_unix_error_quark()
}

func UnixOpenPipe(fds *int, flags int, err unsafe.Pointer) bool {
	_c_gint_fds := C.gint(*fds)
	_cp_gint_fds := (*C.gint)(&_c_gint_fds)
	_gint_flags := C.gint(flags)
	return gboolean2bool(C._g_unix_open_pipe(_cp_gint_fds, _gint_flags, unsafe.Pointer(err)))
}

func UnixSetFdNonblocking(fd int, nonblock bool, err unsafe.Pointer) bool {
	_gint_fd := C.gint(fd)
	_gbool_nonblock := C._false()
	if nonblock { _gbool_nonblock = C._true() }
	return gboolean2bool(C._g_unix_set_fd_nonblocking(_gint_fd, _gbool_nonblock, unsafe.Pointer(err)))
}

func UnixSignalAdd(signum int, handler C.GSourceFunc, user_data unsafe.Pointer) uint {
	_gint_signum := C.gint(signum)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_unix_signal_add(_gint_signum, handler, _gpointer_user_data))
}

func UnixSignalAddFull(priority int, signum int, handler C.GSourceFunc, user_data unsafe.Pointer, notify C.GDestroyNotify) uint {
	_gint_priority := C.gint(priority)
	_gint_signum := C.gint(signum)
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C.g_unix_signal_add_full(_gint_priority, _gint_signum, handler, _gpointer_user_data, notify))
}

func UnixSignalSourceNew(signum int) *Source {
	_gint_signum := C.gint(signum)
	_c_return_ := C.g_unix_signal_source_new(_gint_signum)
	_go_return_ := (*Source)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Source) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func Unlink(filename string) C.int {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	return C._g_unlink(unsafe.Pointer(_gstr_filename))
}

func Unsetenv(variable string) {
	_cstr_variable := unsafe.Pointer(C.CString(variable))
	defer C.free(_cstr_variable)
	_gstr_variable := (*C.gchar)(unsafe.Pointer(_cstr_variable))
	C._g_unsetenv(unsafe.Pointer(_gstr_variable))
}

func UriEscapeString(unescaped *C.char, reserved_chars_allowed *C.char, allow_utf8 bool) *C.char {
	_gbool_allow_utf8 := C._false()
	if allow_utf8 { _gbool_allow_utf8 = C._true() }
	return C._g_uri_escape_string(unsafe.Pointer(unescaped), unsafe.Pointer(reserved_chars_allowed), _gbool_allow_utf8)
}

func UriListExtractUris(uri_list string) unsafe.Pointer {
	_cstr_uri_list := unsafe.Pointer(C.CString(uri_list))
	defer C.free(_cstr_uri_list)
	_gstr_uri_list := (*C.gchar)(unsafe.Pointer(_cstr_uri_list))
	return unsafe.Pointer(C._g_uri_list_extract_uris(unsafe.Pointer(_gstr_uri_list)))
}

func UriParseScheme(uri *C.char) *C.char {
	return C._g_uri_parse_scheme(unsafe.Pointer(uri))
}

func UriUnescapeSegment(escaped_string *C.char, escaped_string_end *C.char, illegal_characters *C.char) *C.char {
	return C._g_uri_unescape_segment(unsafe.Pointer(escaped_string), unsafe.Pointer(escaped_string_end), unsafe.Pointer(illegal_characters))
}

func UriUnescapeString(escaped_string *C.char, illegal_characters *C.char) *C.char {
	return C._g_uri_unescape_string(unsafe.Pointer(escaped_string), unsafe.Pointer(illegal_characters))
}

func Usleep(microseconds uint64) {
	_gulong_microseconds := C.gulong(microseconds)
	C.g_usleep(_gulong_microseconds)
}

func Utf16ToUcs4(str *C.gunichar2, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) *C.gunichar {
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return C._g_utf16_to_ucs4(unsafe.Pointer(str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err))
}

func Utf16ToUtf8(str *C.gunichar2, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) string {
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return gcharp2string(C._g_utf16_to_utf8(unsafe.Pointer(str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err)))
}

func Utf8Casefold(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_casefold(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8Collate(str1 string, str2 string) int {
	_cstr_str1 := unsafe.Pointer(C.CString(str1))
	defer C.free(_cstr_str1)
	_gstr_str1 := (*C.gchar)(unsafe.Pointer(_cstr_str1))
	_cstr_str2 := unsafe.Pointer(C.CString(str2))
	defer C.free(_cstr_str2)
	_gstr_str2 := (*C.gchar)(unsafe.Pointer(_cstr_str2))
	return gint2int(C._g_utf8_collate(unsafe.Pointer(_gstr_str1), unsafe.Pointer(_gstr_str2)))
}

func Utf8CollateKey(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_collate_key(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8CollateKeyForFilename(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_collate_key_for_filename(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8FindNextChar(p string, end string) string {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	_cstr_end := unsafe.Pointer(C.CString(end))
	defer C.free(_cstr_end)
	_gstr_end := (*C.gchar)(unsafe.Pointer(_cstr_end))
	return gcharp2string(C._g_utf8_find_next_char(unsafe.Pointer(_gstr_p), unsafe.Pointer(_gstr_end)))
}

func Utf8FindPrevChar(str string, p string) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	return gcharp2string(C._g_utf8_find_prev_char(unsafe.Pointer(_gstr_str), unsafe.Pointer(_gstr_p)))
}

func Utf8GetChar(p string) C.gunichar {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	return C._g_utf8_get_char(unsafe.Pointer(_gstr_p))
}

func Utf8GetCharValidated(p string, max_len int64) C.gunichar {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	_gssize_max_len := C.gssize(max_len)
	return C._g_utf8_get_char_validated(unsafe.Pointer(_gstr_p), _gssize_max_len)
}

func Utf8Normalize(str string, len_ int64, mode C.GNormalizeMode) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_normalize(unsafe.Pointer(_gstr_str), _gssize_len_, mode))
}

func Utf8OffsetToPointer(str string, offset int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_glong_offset := C.glong(offset)
	return gcharp2string(C._g_utf8_offset_to_pointer(unsafe.Pointer(_gstr_str), _glong_offset))
}

func Utf8PointerToOffset(str string, pos string) int64 {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_cstr_pos := unsafe.Pointer(C.CString(pos))
	defer C.free(_cstr_pos)
	_gstr_pos := (*C.gchar)(unsafe.Pointer(_cstr_pos))
	return glong2int64(C._g_utf8_pointer_to_offset(unsafe.Pointer(_gstr_str), unsafe.Pointer(_gstr_pos)))
}

func Utf8PrevChar(p string) string {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	return gcharp2string(C._g_utf8_prev_char(unsafe.Pointer(_gstr_p)))
}

func Utf8Strchr(p string, len_ int64, c C.gunichar) string {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_strchr(unsafe.Pointer(_gstr_p), _gssize_len_, c))
}

func Utf8Strdown(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_strdown(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8Strlen(p string, max int64) int64 {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	_gssize_max := C.gssize(max)
	return glong2int64(C._g_utf8_strlen(unsafe.Pointer(_gstr_p), _gssize_max))
}

func Utf8Strncpy(dest string, src string, n uint64) string {
	_cstr_dest := unsafe.Pointer(C.CString(dest))
	defer C.free(_cstr_dest)
	_gstr_dest := (*C.gchar)(unsafe.Pointer(_cstr_dest))
	_cstr_src := unsafe.Pointer(C.CString(src))
	defer C.free(_cstr_src)
	_gstr_src := (*C.gchar)(unsafe.Pointer(_cstr_src))
	_gsize_n := C.gsize(n)
	return gcharp2string(C._g_utf8_strncpy(_gstr_dest, unsafe.Pointer(_gstr_src), _gsize_n))
}

func Utf8Strrchr(p string, len_ int64, c C.gunichar) string {
	_cstr_p := unsafe.Pointer(C.CString(p))
	defer C.free(_cstr_p)
	_gstr_p := (*C.gchar)(unsafe.Pointer(_cstr_p))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_strrchr(unsafe.Pointer(_gstr_p), _gssize_len_, c))
}

func Utf8Strreverse(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_strreverse(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8Strup(str string, len_ int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_len_ := C.gssize(len_)
	return gcharp2string(C._g_utf8_strup(unsafe.Pointer(_gstr_str), _gssize_len_))
}

func Utf8Substring(str string, start_pos int64, end_pos int64) string {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_glong_start_pos := C.glong(start_pos)
	_glong_end_pos := C.glong(end_pos)
	return gcharp2string(C._g_utf8_substring(unsafe.Pointer(_gstr_str), _glong_start_pos, _glong_end_pos))
}

func Utf8ToUcs4(str string, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) *C.gunichar {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return C._g_utf8_to_ucs4(unsafe.Pointer(_gstr_str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err))
}

func Utf8ToUcs4Fast(str string, len_ int64, items_written *int64) *C.gunichar {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_glong_len_ := C.glong(len_)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return C._g_utf8_to_ucs4_fast(unsafe.Pointer(_gstr_str), _glong_len_, _cp_glong_items_written)
}

func Utf8ToUtf16(str string, len_ int64, items_read *int64, items_written *int64, err unsafe.Pointer) *C.gunichar2 {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_glong_len_ := C.glong(len_)
	_c_glong_items_read := C.glong(*items_read)
	_cp_glong_items_read := (*C.glong)(&_c_glong_items_read)
	_c_glong_items_written := C.glong(*items_written)
	_cp_glong_items_written := (*C.glong)(&_c_glong_items_written)
	return C._g_utf8_to_utf16(unsafe.Pointer(_gstr_str), _glong_len_, _cp_glong_items_read, _cp_glong_items_written, unsafe.Pointer(err))
}

func Utf8Validate(str string, max_len int64, end unsafe.Pointer) bool {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	_gssize_max_len := C.gssize(max_len)
	return gboolean2bool(C._g_utf8_validate(_gstr_str, _gssize_max_len, unsafe.Pointer(end)))
}

//Skipped g_variant_get_gtype

//TODO g_vasprintf

//TODO g_vfprintf

//TODO g_vprintf

//TODO g_vsnprintf

//TODO g_vsprintf

func WarnMessage(domain *C.char, file *C.char, line C.int, func_ *C.char, warnexpr *C.char) {
	C._g_warn_message(unsafe.Pointer(domain), unsafe.Pointer(file), line, unsafe.Pointer(func_), unsafe.Pointer(warnexpr))
}

const BOOKMARK_FILE_ERROR_INVALID_URI = C.G_BOOKMARK_FILE_ERROR_INVALID_URI
const BOOKMARK_FILE_ERROR_INVALID_VALUE = C.G_BOOKMARK_FILE_ERROR_INVALID_VALUE
const BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = C.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED
const BOOKMARK_FILE_ERROR_URI_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND
const BOOKMARK_FILE_ERROR_READ = C.G_BOOKMARK_FILE_ERROR_READ
const BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = C.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING
const BOOKMARK_FILE_ERROR_WRITE = C.G_BOOKMARK_FILE_ERROR_WRITE
const BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = C.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND
const CHECKSUM_MD5 = C.G_CHECKSUM_MD5
const CHECKSUM_SHA1 = C.G_CHECKSUM_SHA1
const CHECKSUM_SHA256 = C.G_CHECKSUM_SHA256
const CHECKSUM_SHA512 = C.G_CHECKSUM_SHA512
const CONVERT_ERROR_NO_CONVERSION = C.G_CONVERT_ERROR_NO_CONVERSION
const CONVERT_ERROR_ILLEGAL_SEQUENCE = C.G_CONVERT_ERROR_ILLEGAL_SEQUENCE
const CONVERT_ERROR_FAILED = C.G_CONVERT_ERROR_FAILED
const CONVERT_ERROR_PARTIAL_INPUT = C.G_CONVERT_ERROR_PARTIAL_INPUT
const CONVERT_ERROR_BAD_URI = C.G_CONVERT_ERROR_BAD_URI
const CONVERT_ERROR_NOT_ABSOLUTE_PATH = C.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH
const DATE_DAY = C.G_DATE_DAY
const DATE_MONTH = C.G_DATE_MONTH
const DATE_YEAR = C.G_DATE_YEAR
const DATE_BAD_MONTH = C.G_DATE_BAD_MONTH
const DATE_JANUARY = C.G_DATE_JANUARY
const DATE_FEBRUARY = C.G_DATE_FEBRUARY
const DATE_MARCH = C.G_DATE_MARCH
const DATE_APRIL = C.G_DATE_APRIL
const DATE_MAY = C.G_DATE_MAY
const DATE_JUNE = C.G_DATE_JUNE
const DATE_JULY = C.G_DATE_JULY
const DATE_AUGUST = C.G_DATE_AUGUST
const DATE_SEPTEMBER = C.G_DATE_SEPTEMBER
const DATE_OCTOBER = C.G_DATE_OCTOBER
const DATE_NOVEMBER = C.G_DATE_NOVEMBER
const DATE_DECEMBER = C.G_DATE_DECEMBER
const DATE_BAD_WEEKDAY = C.G_DATE_BAD_WEEKDAY
const DATE_MONDAY = C.G_DATE_MONDAY
const DATE_TUESDAY = C.G_DATE_TUESDAY
const DATE_WEDNESDAY = C.G_DATE_WEDNESDAY
const DATE_THURSDAY = C.G_DATE_THURSDAY
const DATE_FRIDAY = C.G_DATE_FRIDAY
const DATE_SATURDAY = C.G_DATE_SATURDAY
const DATE_SUNDAY = C.G_DATE_SUNDAY
const ERR_UNKNOWN = C.G_ERR_UNKNOWN
const ERR_UNEXP_EOF = C.G_ERR_UNEXP_EOF
const ERR_UNEXP_EOF_IN_STRING = C.G_ERR_UNEXP_EOF_IN_STRING
const ERR_UNEXP_EOF_IN_COMMENT = C.G_ERR_UNEXP_EOF_IN_COMMENT
const ERR_NON_DIGIT_IN_CONST = C.G_ERR_NON_DIGIT_IN_CONST
const ERR_DIGIT_RADIX = C.G_ERR_DIGIT_RADIX
const ERR_FLOAT_RADIX = C.G_ERR_FLOAT_RADIX
const ERR_FLOAT_MALFORMED = C.G_ERR_FLOAT_MALFORMED
const FILE_ERROR_EXIST = C.G_FILE_ERROR_EXIST
const FILE_ERROR_ISDIR = C.G_FILE_ERROR_ISDIR
const FILE_ERROR_ACCES = C.G_FILE_ERROR_ACCES
const FILE_ERROR_NAMETOOLONG = C.G_FILE_ERROR_NAMETOOLONG
const FILE_ERROR_NOENT = C.G_FILE_ERROR_NOENT
const FILE_ERROR_NOTDIR = C.G_FILE_ERROR_NOTDIR
const FILE_ERROR_NXIO = C.G_FILE_ERROR_NXIO
const FILE_ERROR_NODEV = C.G_FILE_ERROR_NODEV
const FILE_ERROR_ROFS = C.G_FILE_ERROR_ROFS
const FILE_ERROR_TXTBSY = C.G_FILE_ERROR_TXTBSY
const FILE_ERROR_FAULT = C.G_FILE_ERROR_FAULT
const FILE_ERROR_LOOP = C.G_FILE_ERROR_LOOP
const FILE_ERROR_NOSPC = C.G_FILE_ERROR_NOSPC
const FILE_ERROR_NOMEM = C.G_FILE_ERROR_NOMEM
const FILE_ERROR_MFILE = C.G_FILE_ERROR_MFILE
const FILE_ERROR_NFILE = C.G_FILE_ERROR_NFILE
const FILE_ERROR_BADF = C.G_FILE_ERROR_BADF
const FILE_ERROR_INVAL = C.G_FILE_ERROR_INVAL
const FILE_ERROR_PIPE = C.G_FILE_ERROR_PIPE
const FILE_ERROR_AGAIN = C.G_FILE_ERROR_AGAIN
const FILE_ERROR_INTR = C.G_FILE_ERROR_INTR
const FILE_ERROR_IO = C.G_FILE_ERROR_IO
const FILE_ERROR_PERM = C.G_FILE_ERROR_PERM
const FILE_ERROR_NOSYS = C.G_FILE_ERROR_NOSYS
const FILE_ERROR_FAILED = C.G_FILE_ERROR_FAILED
const IO_CHANNEL_ERROR_FBIG = C.G_IO_CHANNEL_ERROR_FBIG
const IO_CHANNEL_ERROR_INVAL = C.G_IO_CHANNEL_ERROR_INVAL
const IO_CHANNEL_ERROR_IO = C.G_IO_CHANNEL_ERROR_IO
const IO_CHANNEL_ERROR_ISDIR = C.G_IO_CHANNEL_ERROR_ISDIR
const IO_CHANNEL_ERROR_NOSPC = C.G_IO_CHANNEL_ERROR_NOSPC
const IO_CHANNEL_ERROR_NXIO = C.G_IO_CHANNEL_ERROR_NXIO
const IO_CHANNEL_ERROR_OVERFLOW = C.G_IO_CHANNEL_ERROR_OVERFLOW
const IO_CHANNEL_ERROR_PIPE = C.G_IO_CHANNEL_ERROR_PIPE
const IO_CHANNEL_ERROR_FAILED = C.G_IO_CHANNEL_ERROR_FAILED
const IO_ERROR_NONE = C.G_IO_ERROR_NONE
const IO_ERROR_AGAIN = C.G_IO_ERROR_AGAIN
const IO_ERROR_INVAL = C.G_IO_ERROR_INVAL
const IO_ERROR_UNKNOWN = C.G_IO_ERROR_UNKNOWN
const IO_STATUS_ERROR = C.G_IO_STATUS_ERROR
const IO_STATUS_NORMAL = C.G_IO_STATUS_NORMAL
const IO_STATUS_EOF = C.G_IO_STATUS_EOF
const IO_STATUS_AGAIN = C.G_IO_STATUS_AGAIN
const KEY_FILE_ERROR_UNKNOWN_ENCODING = C.G_KEY_FILE_ERROR_UNKNOWN_ENCODING
const KEY_FILE_ERROR_PARSE = C.G_KEY_FILE_ERROR_PARSE
const KEY_FILE_ERROR_NOT_FOUND = C.G_KEY_FILE_ERROR_NOT_FOUND
const KEY_FILE_ERROR_KEY_NOT_FOUND = C.G_KEY_FILE_ERROR_KEY_NOT_FOUND
const KEY_FILE_ERROR_GROUP_NOT_FOUND = C.G_KEY_FILE_ERROR_GROUP_NOT_FOUND
const KEY_FILE_ERROR_INVALID_VALUE = C.G_KEY_FILE_ERROR_INVALID_VALUE
const MARKUP_ERROR_BAD_UTF8 = C.G_MARKUP_ERROR_BAD_UTF8
const MARKUP_ERROR_EMPTY = C.G_MARKUP_ERROR_EMPTY
const MARKUP_ERROR_PARSE = C.G_MARKUP_ERROR_PARSE
const MARKUP_ERROR_UNKNOWN_ELEMENT = C.G_MARKUP_ERROR_UNKNOWN_ELEMENT
const MARKUP_ERROR_UNKNOWN_ATTRIBUTE = C.G_MARKUP_ERROR_UNKNOWN_ATTRIBUTE
const MARKUP_ERROR_INVALID_CONTENT = C.G_MARKUP_ERROR_INVALID_CONTENT
const MARKUP_ERROR_MISSING_ATTRIBUTE = C.G_MARKUP_ERROR_MISSING_ATTRIBUTE
const NORMALIZE_DEFAULT = C.G_NORMALIZE_DEFAULT
const NORMALIZE_NFD = C.G_NORMALIZE_NFD
const NORMALIZE_DEFAULT_COMPOSE = C.G_NORMALIZE_DEFAULT_COMPOSE
const NORMALIZE_NFC = C.G_NORMALIZE_NFC
const NORMALIZE_ALL = C.G_NORMALIZE_ALL
const NORMALIZE_NFKD = C.G_NORMALIZE_NFKD
const NORMALIZE_ALL_COMPOSE = C.G_NORMALIZE_ALL_COMPOSE
const NORMALIZE_NFKC = C.G_NORMALIZE_NFKC
const ONCE_STATUS_NOTCALLED = C.G_ONCE_STATUS_NOTCALLED
const ONCE_STATUS_PROGRESS = C.G_ONCE_STATUS_PROGRESS
const ONCE_STATUS_READY = C.G_ONCE_STATUS_READY
const OPTION_ARG_NONE = C.G_OPTION_ARG_NONE
const OPTION_ARG_STRING = C.G_OPTION_ARG_STRING
const OPTION_ARG_INT = C.G_OPTION_ARG_INT
const OPTION_ARG_CALLBACK = C.G_OPTION_ARG_CALLBACK
const OPTION_ARG_FILENAME = C.G_OPTION_ARG_FILENAME
const OPTION_ARG_STRING_ARRAY = C.G_OPTION_ARG_STRING_ARRAY
const OPTION_ARG_FILENAME_ARRAY = C.G_OPTION_ARG_FILENAME_ARRAY
const OPTION_ARG_DOUBLE = C.G_OPTION_ARG_DOUBLE
const OPTION_ARG_INT64 = C.G_OPTION_ARG_INT64
const OPTION_ERROR_UNKNOWN_OPTION = C.G_OPTION_ERROR_UNKNOWN_OPTION
const OPTION_ERROR_BAD_VALUE = C.G_OPTION_ERROR_BAD_VALUE
const OPTION_ERROR_FAILED = C.G_OPTION_ERROR_FAILED
const REGEX_ERROR_COMPILE = C.G_REGEX_ERROR_COMPILE
const REGEX_ERROR_OPTIMIZE = C.G_REGEX_ERROR_OPTIMIZE
const REGEX_ERROR_REPLACE = C.G_REGEX_ERROR_REPLACE
const REGEX_ERROR_MATCH = C.G_REGEX_ERROR_MATCH
const REGEX_ERROR_INTERNAL = C.G_REGEX_ERROR_INTERNAL
const REGEX_ERROR_STRAY_BACKSLASH = C.G_REGEX_ERROR_STRAY_BACKSLASH
const REGEX_ERROR_MISSING_CONTROL_CHAR = C.G_REGEX_ERROR_MISSING_CONTROL_CHAR
const REGEX_ERROR_UNRECOGNIZED_ESCAPE = C.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE
const REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = C.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER
const REGEX_ERROR_QUANTIFIER_TOO_BIG = C.G_REGEX_ERROR_QUANTIFIER_TOO_BIG
const REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = C.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS
const REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = C.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS
const REGEX_ERROR_RANGE_OUT_OF_ORDER = C.G_REGEX_ERROR_RANGE_OUT_OF_ORDER
const REGEX_ERROR_NOTHING_TO_REPEAT = C.G_REGEX_ERROR_NOTHING_TO_REPEAT
const REGEX_ERROR_UNRECOGNIZED_CHARACTER = C.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER
const REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = C.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS
const REGEX_ERROR_UNMATCHED_PARENTHESIS = C.G_REGEX_ERROR_UNMATCHED_PARENTHESIS
const REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = C.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE
const REGEX_ERROR_UNTERMINATED_COMMENT = C.G_REGEX_ERROR_UNTERMINATED_COMMENT
const REGEX_ERROR_EXPRESSION_TOO_LARGE = C.G_REGEX_ERROR_EXPRESSION_TOO_LARGE
const REGEX_ERROR_MEMORY_ERROR = C.G_REGEX_ERROR_MEMORY_ERROR
const REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = C.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND
const REGEX_ERROR_MALFORMED_CONDITION = C.G_REGEX_ERROR_MALFORMED_CONDITION
const REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = C.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES
const REGEX_ERROR_ASSERTION_EXPECTED = C.G_REGEX_ERROR_ASSERTION_EXPECTED
const REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = C.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME
const REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = C.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED
const REGEX_ERROR_HEX_CODE_TOO_LARGE = C.G_REGEX_ERROR_HEX_CODE_TOO_LARGE
const REGEX_ERROR_INVALID_CONDITION = C.G_REGEX_ERROR_INVALID_CONDITION
const REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = C.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND
const REGEX_ERROR_INFINITE_LOOP = C.G_REGEX_ERROR_INFINITE_LOOP
const REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR
const REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = C.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME
const REGEX_ERROR_MALFORMED_PROPERTY = C.G_REGEX_ERROR_MALFORMED_PROPERTY
const REGEX_ERROR_UNKNOWN_PROPERTY = C.G_REGEX_ERROR_UNKNOWN_PROPERTY
const REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = C.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG
const REGEX_ERROR_TOO_MANY_SUBPATTERNS = C.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS
const REGEX_ERROR_INVALID_OCTAL_VALUE = C.G_REGEX_ERROR_INVALID_OCTAL_VALUE
const REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = C.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE
const REGEX_ERROR_DEFINE_REPETION = C.G_REGEX_ERROR_DEFINE_REPETION
const REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = C.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS
const REGEX_ERROR_MISSING_BACK_REFERENCE = C.G_REGEX_ERROR_MISSING_BACK_REFERENCE
const REGEX_ERROR_INVALID_RELATIVE_REFERENCE = C.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN
const REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = C.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB
const REGEX_ERROR_NUMBER_TOO_BIG = C.G_REGEX_ERROR_NUMBER_TOO_BIG
const REGEX_ERROR_MISSING_SUBPATTERN_NAME = C.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME
const REGEX_ERROR_MISSING_DIGIT = C.G_REGEX_ERROR_MISSING_DIGIT
const REGEX_ERROR_INVALID_DATA_CHARACTER = C.G_REGEX_ERROR_INVALID_DATA_CHARACTER
const REGEX_ERROR_EXTRA_SUBPATTERN_NAME = C.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME
const REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = C.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED
const REGEX_ERROR_INVALID_CONTROL_CHAR = C.G_REGEX_ERROR_INVALID_CONTROL_CHAR
const REGEX_ERROR_MISSING_NAME = C.G_REGEX_ERROR_MISSING_NAME
const REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = C.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS
const REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = C.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES
const REGEX_ERROR_NAME_TOO_LONG = C.G_REGEX_ERROR_NAME_TOO_LONG
const REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = C.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE
const SEEK_CUR = C.G_SEEK_CUR
const SEEK_SET = C.G_SEEK_SET
const SEEK_END = C.G_SEEK_END
const SHELL_ERROR_BAD_QUOTING = C.G_SHELL_ERROR_BAD_QUOTING
const SHELL_ERROR_EMPTY_STRING = C.G_SHELL_ERROR_EMPTY_STRING
const SHELL_ERROR_FAILED = C.G_SHELL_ERROR_FAILED
const SLICE_CONFIG_ALWAYS_MALLOC = C.G_SLICE_CONFIG_ALWAYS_MALLOC
const SLICE_CONFIG_BYPASS_MAGAZINES = C.G_SLICE_CONFIG_BYPASS_MAGAZINES
const SLICE_CONFIG_WORKING_SET_MSECS = C.G_SLICE_CONFIG_WORKING_SET_MSECS
const SLICE_CONFIG_COLOR_INCREMENT = C.G_SLICE_CONFIG_COLOR_INCREMENT
const SLICE_CONFIG_CHUNK_SIZES = C.G_SLICE_CONFIG_CHUNK_SIZES
const SLICE_CONFIG_CONTENTION_COUNTER = C.G_SLICE_CONFIG_CONTENTION_COUNTER
const SPAWN_ERROR_FORK = C.G_SPAWN_ERROR_FORK
const SPAWN_ERROR_READ = C.G_SPAWN_ERROR_READ
const SPAWN_ERROR_CHDIR = C.G_SPAWN_ERROR_CHDIR
const SPAWN_ERROR_ACCES = C.G_SPAWN_ERROR_ACCES
const SPAWN_ERROR_PERM = C.G_SPAWN_ERROR_PERM
const SPAWN_ERROR_TOO_BIG = C.G_SPAWN_ERROR_TOO_BIG
const SPAWN_ERROR_2BIG = C.G_SPAWN_ERROR_2BIG
const SPAWN_ERROR_NOEXEC = C.G_SPAWN_ERROR_NOEXEC
const SPAWN_ERROR_NAMETOOLONG = C.G_SPAWN_ERROR_NAMETOOLONG
const SPAWN_ERROR_NOENT = C.G_SPAWN_ERROR_NOENT
const SPAWN_ERROR_NOMEM = C.G_SPAWN_ERROR_NOMEM
const SPAWN_ERROR_NOTDIR = C.G_SPAWN_ERROR_NOTDIR
const SPAWN_ERROR_LOOP = C.G_SPAWN_ERROR_LOOP
const SPAWN_ERROR_TXTBUSY = C.G_SPAWN_ERROR_TXTBUSY
const SPAWN_ERROR_IO = C.G_SPAWN_ERROR_IO
const SPAWN_ERROR_NFILE = C.G_SPAWN_ERROR_NFILE
const SPAWN_ERROR_MFILE = C.G_SPAWN_ERROR_MFILE
const SPAWN_ERROR_INVAL = C.G_SPAWN_ERROR_INVAL
const SPAWN_ERROR_ISDIR = C.G_SPAWN_ERROR_ISDIR
const SPAWN_ERROR_LIBBAD = C.G_SPAWN_ERROR_LIBBAD
const SPAWN_ERROR_FAILED = C.G_SPAWN_ERROR_FAILED
const TEST_LOG_NONE = C.G_TEST_LOG_NONE
const TEST_LOG_ERROR = C.G_TEST_LOG_ERROR
const TEST_LOG_START_BINARY = C.G_TEST_LOG_START_BINARY
const TEST_LOG_LIST_CASE = C.G_TEST_LOG_LIST_CASE
const TEST_LOG_SKIP_CASE = C.G_TEST_LOG_SKIP_CASE
const TEST_LOG_START_CASE = C.G_TEST_LOG_START_CASE
const TEST_LOG_STOP_CASE = C.G_TEST_LOG_STOP_CASE
const TEST_LOG_MIN_RESULT = C.G_TEST_LOG_MIN_RESULT
const TEST_LOG_MAX_RESULT = C.G_TEST_LOG_MAX_RESULT
const TEST_LOG_MESSAGE = C.G_TEST_LOG_MESSAGE
const THREAD_ERROR_AGAIN = C.G_THREAD_ERROR_AGAIN
const TIME_TYPE_STANDARD = C.G_TIME_TYPE_STANDARD
const TIME_TYPE_DAYLIGHT = C.G_TIME_TYPE_DAYLIGHT
const TIME_TYPE_UNIVERSAL = C.G_TIME_TYPE_UNIVERSAL
const TOKEN_EOF = C.G_TOKEN_EOF
const TOKEN_LEFT_PAREN = C.G_TOKEN_LEFT_PAREN
const TOKEN_RIGHT_PAREN = C.G_TOKEN_RIGHT_PAREN
const TOKEN_LEFT_CURLY = C.G_TOKEN_LEFT_CURLY
const TOKEN_RIGHT_CURLY = C.G_TOKEN_RIGHT_CURLY
const TOKEN_LEFT_BRACE = C.G_TOKEN_LEFT_BRACE
const TOKEN_RIGHT_BRACE = C.G_TOKEN_RIGHT_BRACE
const TOKEN_EQUAL_SIGN = C.G_TOKEN_EQUAL_SIGN
const TOKEN_COMMA = C.G_TOKEN_COMMA
const TOKEN_NONE = C.G_TOKEN_NONE
const TOKEN_ERROR = C.G_TOKEN_ERROR
const TOKEN_CHAR = C.G_TOKEN_CHAR
const TOKEN_BINARY = C.G_TOKEN_BINARY
const TOKEN_OCTAL = C.G_TOKEN_OCTAL
const TOKEN_INT = C.G_TOKEN_INT
const TOKEN_HEX = C.G_TOKEN_HEX
const TOKEN_FLOAT = C.G_TOKEN_FLOAT
const TOKEN_STRING = C.G_TOKEN_STRING
const TOKEN_SYMBOL = C.G_TOKEN_SYMBOL
const TOKEN_IDENTIFIER = C.G_TOKEN_IDENTIFIER
const TOKEN_IDENTIFIER_NULL = C.G_TOKEN_IDENTIFIER_NULL
const TOKEN_COMMENT_SINGLE = C.G_TOKEN_COMMENT_SINGLE
const TOKEN_COMMENT_MULTI = C.G_TOKEN_COMMENT_MULTI
const IN_ORDER = C.G_IN_ORDER
const PRE_ORDER = C.G_PRE_ORDER
const POST_ORDER = C.G_POST_ORDER
const LEVEL_ORDER = C.G_LEVEL_ORDER
const UNICODE_BREAK_MANDATORY = C.G_UNICODE_BREAK_MANDATORY
const UNICODE_BREAK_CARRIAGE_RETURN = C.G_UNICODE_BREAK_CARRIAGE_RETURN
const UNICODE_BREAK_LINE_FEED = C.G_UNICODE_BREAK_LINE_FEED
const UNICODE_BREAK_COMBINING_MARK = C.G_UNICODE_BREAK_COMBINING_MARK
const UNICODE_BREAK_SURROGATE = C.G_UNICODE_BREAK_SURROGATE
const UNICODE_BREAK_ZERO_WIDTH_SPACE = C.G_UNICODE_BREAK_ZERO_WIDTH_SPACE
const UNICODE_BREAK_INSEPARABLE = C.G_UNICODE_BREAK_INSEPARABLE
const UNICODE_BREAK_NON_BREAKING_GLUE = C.G_UNICODE_BREAK_NON_BREAKING_GLUE
const UNICODE_BREAK_CONTINGENT = C.G_UNICODE_BREAK_CONTINGENT
const UNICODE_BREAK_SPACE = C.G_UNICODE_BREAK_SPACE
const UNICODE_BREAK_AFTER = C.G_UNICODE_BREAK_AFTER
const UNICODE_BREAK_BEFORE = C.G_UNICODE_BREAK_BEFORE
const UNICODE_BREAK_BEFORE_AND_AFTER = C.G_UNICODE_BREAK_BEFORE_AND_AFTER
const UNICODE_BREAK_HYPHEN = C.G_UNICODE_BREAK_HYPHEN
const UNICODE_BREAK_NON_STARTER = C.G_UNICODE_BREAK_NON_STARTER
const UNICODE_BREAK_OPEN_PUNCTUATION = C.G_UNICODE_BREAK_OPEN_PUNCTUATION
const UNICODE_BREAK_CLOSE_PUNCTUATION = C.G_UNICODE_BREAK_CLOSE_PUNCTUATION
const UNICODE_BREAK_QUOTATION = C.G_UNICODE_BREAK_QUOTATION
const UNICODE_BREAK_EXCLAMATION = C.G_UNICODE_BREAK_EXCLAMATION
const UNICODE_BREAK_IDEOGRAPHIC = C.G_UNICODE_BREAK_IDEOGRAPHIC
const UNICODE_BREAK_NUMERIC = C.G_UNICODE_BREAK_NUMERIC
const UNICODE_BREAK_INFIX_SEPARATOR = C.G_UNICODE_BREAK_INFIX_SEPARATOR
const UNICODE_BREAK_SYMBOL = C.G_UNICODE_BREAK_SYMBOL
const UNICODE_BREAK_ALPHABETIC = C.G_UNICODE_BREAK_ALPHABETIC
const UNICODE_BREAK_PREFIX = C.G_UNICODE_BREAK_PREFIX
const UNICODE_BREAK_POSTFIX = C.G_UNICODE_BREAK_POSTFIX
const UNICODE_BREAK_COMPLEX_CONTEXT = C.G_UNICODE_BREAK_COMPLEX_CONTEXT
const UNICODE_BREAK_AMBIGUOUS = C.G_UNICODE_BREAK_AMBIGUOUS
const UNICODE_BREAK_UNKNOWN = C.G_UNICODE_BREAK_UNKNOWN
const UNICODE_BREAK_NEXT_LINE = C.G_UNICODE_BREAK_NEXT_LINE
const UNICODE_BREAK_WORD_JOINER = C.G_UNICODE_BREAK_WORD_JOINER
const UNICODE_BREAK_HANGUL_L_JAMO = C.G_UNICODE_BREAK_HANGUL_L_JAMO
const UNICODE_BREAK_HANGUL_V_JAMO = C.G_UNICODE_BREAK_HANGUL_V_JAMO
const UNICODE_BREAK_HANGUL_T_JAMO = C.G_UNICODE_BREAK_HANGUL_T_JAMO
const UNICODE_BREAK_HANGUL_LV_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LV_SYLLABLE
const UNICODE_BREAK_HANGUL_LVT_SYLLABLE = C.G_UNICODE_BREAK_HANGUL_LVT_SYLLABLE
const UNICODE_BREAK_CLOSE_PARANTHESIS = C.G_UNICODE_BREAK_CLOSE_PARANTHESIS
const UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER = C.G_UNICODE_BREAK_CONDITIONAL_JAPANESE_STARTER
const UNICODE_BREAK_HEBREW_LETTER = C.G_UNICODE_BREAK_HEBREW_LETTER
const UNICODE_BREAK_REGIONAL_INDICATOR = C.G_UNICODE_BREAK_REGIONAL_INDICATOR
const UNICODE_SCRIPT_INVALID_CODE = C.G_UNICODE_SCRIPT_INVALID_CODE
const UNICODE_SCRIPT_COMMON = C.G_UNICODE_SCRIPT_COMMON
const UNICODE_SCRIPT_INHERITED = C.G_UNICODE_SCRIPT_INHERITED
const UNICODE_SCRIPT_ARABIC = C.G_UNICODE_SCRIPT_ARABIC
const UNICODE_SCRIPT_ARMENIAN = C.G_UNICODE_SCRIPT_ARMENIAN
const UNICODE_SCRIPT_BENGALI = C.G_UNICODE_SCRIPT_BENGALI
const UNICODE_SCRIPT_BOPOMOFO = C.G_UNICODE_SCRIPT_BOPOMOFO
const UNICODE_SCRIPT_CHEROKEE = C.G_UNICODE_SCRIPT_CHEROKEE
const UNICODE_SCRIPT_COPTIC = C.G_UNICODE_SCRIPT_COPTIC
const UNICODE_SCRIPT_CYRILLIC = C.G_UNICODE_SCRIPT_CYRILLIC
const UNICODE_SCRIPT_DESERET = C.G_UNICODE_SCRIPT_DESERET
const UNICODE_SCRIPT_DEVANAGARI = C.G_UNICODE_SCRIPT_DEVANAGARI
const UNICODE_SCRIPT_ETHIOPIC = C.G_UNICODE_SCRIPT_ETHIOPIC
const UNICODE_SCRIPT_GEORGIAN = C.G_UNICODE_SCRIPT_GEORGIAN
const UNICODE_SCRIPT_GOTHIC = C.G_UNICODE_SCRIPT_GOTHIC
const UNICODE_SCRIPT_GREEK = C.G_UNICODE_SCRIPT_GREEK
const UNICODE_SCRIPT_GUJARATI = C.G_UNICODE_SCRIPT_GUJARATI
const UNICODE_SCRIPT_GURMUKHI = C.G_UNICODE_SCRIPT_GURMUKHI
const UNICODE_SCRIPT_HAN = C.G_UNICODE_SCRIPT_HAN
const UNICODE_SCRIPT_HANGUL = C.G_UNICODE_SCRIPT_HANGUL
const UNICODE_SCRIPT_HEBREW = C.G_UNICODE_SCRIPT_HEBREW
const UNICODE_SCRIPT_HIRAGANA = C.G_UNICODE_SCRIPT_HIRAGANA
const UNICODE_SCRIPT_KANNADA = C.G_UNICODE_SCRIPT_KANNADA
const UNICODE_SCRIPT_KATAKANA = C.G_UNICODE_SCRIPT_KATAKANA
const UNICODE_SCRIPT_KHMER = C.G_UNICODE_SCRIPT_KHMER
const UNICODE_SCRIPT_LAO = C.G_UNICODE_SCRIPT_LAO
const UNICODE_SCRIPT_LATIN = C.G_UNICODE_SCRIPT_LATIN
const UNICODE_SCRIPT_MALAYALAM = C.G_UNICODE_SCRIPT_MALAYALAM
const UNICODE_SCRIPT_MONGOLIAN = C.G_UNICODE_SCRIPT_MONGOLIAN
const UNICODE_SCRIPT_MYANMAR = C.G_UNICODE_SCRIPT_MYANMAR
const UNICODE_SCRIPT_OGHAM = C.G_UNICODE_SCRIPT_OGHAM
const UNICODE_SCRIPT_OLD_ITALIC = C.G_UNICODE_SCRIPT_OLD_ITALIC
const UNICODE_SCRIPT_ORIYA = C.G_UNICODE_SCRIPT_ORIYA
const UNICODE_SCRIPT_RUNIC = C.G_UNICODE_SCRIPT_RUNIC
const UNICODE_SCRIPT_SINHALA = C.G_UNICODE_SCRIPT_SINHALA
const UNICODE_SCRIPT_SYRIAC = C.G_UNICODE_SCRIPT_SYRIAC
const UNICODE_SCRIPT_TAMIL = C.G_UNICODE_SCRIPT_TAMIL
const UNICODE_SCRIPT_TELUGU = C.G_UNICODE_SCRIPT_TELUGU
const UNICODE_SCRIPT_THAANA = C.G_UNICODE_SCRIPT_THAANA
const UNICODE_SCRIPT_THAI = C.G_UNICODE_SCRIPT_THAI
const UNICODE_SCRIPT_TIBETAN = C.G_UNICODE_SCRIPT_TIBETAN
const UNICODE_SCRIPT_CANADIAN_ABORIGINAL = C.G_UNICODE_SCRIPT_CANADIAN_ABORIGINAL
const UNICODE_SCRIPT_YI = C.G_UNICODE_SCRIPT_YI
const UNICODE_SCRIPT_TAGALOG = C.G_UNICODE_SCRIPT_TAGALOG
const UNICODE_SCRIPT_HANUNOO = C.G_UNICODE_SCRIPT_HANUNOO
const UNICODE_SCRIPT_BUHID = C.G_UNICODE_SCRIPT_BUHID
const UNICODE_SCRIPT_TAGBANWA = C.G_UNICODE_SCRIPT_TAGBANWA
const UNICODE_SCRIPT_BRAILLE = C.G_UNICODE_SCRIPT_BRAILLE
const UNICODE_SCRIPT_CYPRIOT = C.G_UNICODE_SCRIPT_CYPRIOT
const UNICODE_SCRIPT_LIMBU = C.G_UNICODE_SCRIPT_LIMBU
const UNICODE_SCRIPT_OSMANYA = C.G_UNICODE_SCRIPT_OSMANYA
const UNICODE_SCRIPT_SHAVIAN = C.G_UNICODE_SCRIPT_SHAVIAN
const UNICODE_SCRIPT_LINEAR_B = C.G_UNICODE_SCRIPT_LINEAR_B
const UNICODE_SCRIPT_TAI_LE = C.G_UNICODE_SCRIPT_TAI_LE
const UNICODE_SCRIPT_UGARITIC = C.G_UNICODE_SCRIPT_UGARITIC
const UNICODE_SCRIPT_NEW_TAI_LUE = C.G_UNICODE_SCRIPT_NEW_TAI_LUE
const UNICODE_SCRIPT_BUGINESE = C.G_UNICODE_SCRIPT_BUGINESE
const UNICODE_SCRIPT_GLAGOLITIC = C.G_UNICODE_SCRIPT_GLAGOLITIC
const UNICODE_SCRIPT_TIFINAGH = C.G_UNICODE_SCRIPT_TIFINAGH
const UNICODE_SCRIPT_SYLOTI_NAGRI = C.G_UNICODE_SCRIPT_SYLOTI_NAGRI
const UNICODE_SCRIPT_OLD_PERSIAN = C.G_UNICODE_SCRIPT_OLD_PERSIAN
const UNICODE_SCRIPT_KHAROSHTHI = C.G_UNICODE_SCRIPT_KHAROSHTHI
const UNICODE_SCRIPT_UNKNOWN = C.G_UNICODE_SCRIPT_UNKNOWN
const UNICODE_SCRIPT_BALINESE = C.G_UNICODE_SCRIPT_BALINESE
const UNICODE_SCRIPT_CUNEIFORM = C.G_UNICODE_SCRIPT_CUNEIFORM
const UNICODE_SCRIPT_PHOENICIAN = C.G_UNICODE_SCRIPT_PHOENICIAN
const UNICODE_SCRIPT_PHAGS_PA = C.G_UNICODE_SCRIPT_PHAGS_PA
const UNICODE_SCRIPT_NKO = C.G_UNICODE_SCRIPT_NKO
const UNICODE_SCRIPT_KAYAH_LI = C.G_UNICODE_SCRIPT_KAYAH_LI
const UNICODE_SCRIPT_LEPCHA = C.G_UNICODE_SCRIPT_LEPCHA
const UNICODE_SCRIPT_REJANG = C.G_UNICODE_SCRIPT_REJANG
const UNICODE_SCRIPT_SUNDANESE = C.G_UNICODE_SCRIPT_SUNDANESE
const UNICODE_SCRIPT_SAURASHTRA = C.G_UNICODE_SCRIPT_SAURASHTRA
const UNICODE_SCRIPT_CHAM = C.G_UNICODE_SCRIPT_CHAM
const UNICODE_SCRIPT_OL_CHIKI = C.G_UNICODE_SCRIPT_OL_CHIKI
const UNICODE_SCRIPT_VAI = C.G_UNICODE_SCRIPT_VAI
const UNICODE_SCRIPT_CARIAN = C.G_UNICODE_SCRIPT_CARIAN
const UNICODE_SCRIPT_LYCIAN = C.G_UNICODE_SCRIPT_LYCIAN
const UNICODE_SCRIPT_LYDIAN = C.G_UNICODE_SCRIPT_LYDIAN
const UNICODE_SCRIPT_AVESTAN = C.G_UNICODE_SCRIPT_AVESTAN
const UNICODE_SCRIPT_BAMUM = C.G_UNICODE_SCRIPT_BAMUM
const UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS = C.G_UNICODE_SCRIPT_EGYPTIAN_HIEROGLYPHS
const UNICODE_SCRIPT_IMPERIAL_ARAMAIC = C.G_UNICODE_SCRIPT_IMPERIAL_ARAMAIC
const UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PAHLAVI
const UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN = C.G_UNICODE_SCRIPT_INSCRIPTIONAL_PARTHIAN
const UNICODE_SCRIPT_JAVANESE = C.G_UNICODE_SCRIPT_JAVANESE
const UNICODE_SCRIPT_KAITHI = C.G_UNICODE_SCRIPT_KAITHI
const UNICODE_SCRIPT_LISU = C.G_UNICODE_SCRIPT_LISU
const UNICODE_SCRIPT_MEETEI_MAYEK = C.G_UNICODE_SCRIPT_MEETEI_MAYEK
const UNICODE_SCRIPT_OLD_SOUTH_ARABIAN = C.G_UNICODE_SCRIPT_OLD_SOUTH_ARABIAN
const UNICODE_SCRIPT_OLD_TURKIC = C.G_UNICODE_SCRIPT_OLD_TURKIC
const UNICODE_SCRIPT_SAMARITAN = C.G_UNICODE_SCRIPT_SAMARITAN
const UNICODE_SCRIPT_TAI_THAM = C.G_UNICODE_SCRIPT_TAI_THAM
const UNICODE_SCRIPT_TAI_VIET = C.G_UNICODE_SCRIPT_TAI_VIET
const UNICODE_SCRIPT_BATAK = C.G_UNICODE_SCRIPT_BATAK
const UNICODE_SCRIPT_BRAHMI = C.G_UNICODE_SCRIPT_BRAHMI
const UNICODE_SCRIPT_MANDAIC = C.G_UNICODE_SCRIPT_MANDAIC
const UNICODE_SCRIPT_CHAKMA = C.G_UNICODE_SCRIPT_CHAKMA
const UNICODE_SCRIPT_MEROITIC_CURSIVE = C.G_UNICODE_SCRIPT_MEROITIC_CURSIVE
const UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS = C.G_UNICODE_SCRIPT_MEROITIC_HIEROGLYPHS
const UNICODE_SCRIPT_MIAO = C.G_UNICODE_SCRIPT_MIAO
const UNICODE_SCRIPT_SHARADA = C.G_UNICODE_SCRIPT_SHARADA
const UNICODE_SCRIPT_SORA_SOMPENG = C.G_UNICODE_SCRIPT_SORA_SOMPENG
const UNICODE_SCRIPT_TAKRI = C.G_UNICODE_SCRIPT_TAKRI
const UNICODE_CONTROL = C.G_UNICODE_CONTROL
const UNICODE_FORMAT = C.G_UNICODE_FORMAT
const UNICODE_UNASSIGNED = C.G_UNICODE_UNASSIGNED
const UNICODE_PRIVATE_USE = C.G_UNICODE_PRIVATE_USE
const UNICODE_SURROGATE = C.G_UNICODE_SURROGATE
const UNICODE_LOWERCASE_LETTER = C.G_UNICODE_LOWERCASE_LETTER
const UNICODE_MODIFIER_LETTER = C.G_UNICODE_MODIFIER_LETTER
const UNICODE_OTHER_LETTER = C.G_UNICODE_OTHER_LETTER
const UNICODE_TITLECASE_LETTER = C.G_UNICODE_TITLECASE_LETTER
const UNICODE_UPPERCASE_LETTER = C.G_UNICODE_UPPERCASE_LETTER
const UNICODE_SPACING_MARK = C.G_UNICODE_SPACING_MARK
const UNICODE_ENCLOSING_MARK = C.G_UNICODE_ENCLOSING_MARK
const UNICODE_NON_SPACING_MARK = C.G_UNICODE_NON_SPACING_MARK
const UNICODE_DECIMAL_NUMBER = C.G_UNICODE_DECIMAL_NUMBER
const UNICODE_LETTER_NUMBER = C.G_UNICODE_LETTER_NUMBER
const UNICODE_OTHER_NUMBER = C.G_UNICODE_OTHER_NUMBER
const UNICODE_CONNECT_PUNCTUATION = C.G_UNICODE_CONNECT_PUNCTUATION
const UNICODE_DASH_PUNCTUATION = C.G_UNICODE_DASH_PUNCTUATION
const UNICODE_CLOSE_PUNCTUATION = C.G_UNICODE_CLOSE_PUNCTUATION
const UNICODE_FINAL_PUNCTUATION = C.G_UNICODE_FINAL_PUNCTUATION
const UNICODE_INITIAL_PUNCTUATION = C.G_UNICODE_INITIAL_PUNCTUATION
const UNICODE_OTHER_PUNCTUATION = C.G_UNICODE_OTHER_PUNCTUATION
const UNICODE_OPEN_PUNCTUATION = C.G_UNICODE_OPEN_PUNCTUATION
const UNICODE_CURRENCY_SYMBOL = C.G_UNICODE_CURRENCY_SYMBOL
const UNICODE_MODIFIER_SYMBOL = C.G_UNICODE_MODIFIER_SYMBOL
const UNICODE_MATH_SYMBOL = C.G_UNICODE_MATH_SYMBOL
const UNICODE_OTHER_SYMBOL = C.G_UNICODE_OTHER_SYMBOL
const UNICODE_LINE_SEPARATOR = C.G_UNICODE_LINE_SEPARATOR
const UNICODE_PARAGRAPH_SEPARATOR = C.G_UNICODE_PARAGRAPH_SEPARATOR
const UNICODE_SPACE_SEPARATOR = C.G_UNICODE_SPACE_SEPARATOR
const USER_DIRECTORY_DESKTOP = C.G_USER_DIRECTORY_DESKTOP
const USER_DIRECTORY_DOCUMENTS = C.G_USER_DIRECTORY_DOCUMENTS
const USER_DIRECTORY_DOWNLOAD = C.G_USER_DIRECTORY_DOWNLOAD
const USER_DIRECTORY_MUSIC = C.G_USER_DIRECTORY_MUSIC
const USER_DIRECTORY_PICTURES = C.G_USER_DIRECTORY_PICTURES
const USER_DIRECTORY_PUBLIC_SHARE = C.G_USER_DIRECTORY_PUBLIC_SHARE
const USER_DIRECTORY_TEMPLATES = C.G_USER_DIRECTORY_TEMPLATES
const USER_DIRECTORY_VIDEOS = C.G_USER_DIRECTORY_VIDEOS
const USER_N_DIRECTORIES = C.G_USER_N_DIRECTORIES
const VARIANT_CLASS_BOOLEAN = C.G_VARIANT_CLASS_BOOLEAN
const VARIANT_CLASS_BYTE = C.G_VARIANT_CLASS_BYTE
const VARIANT_CLASS_INT16 = C.G_VARIANT_CLASS_INT16
const VARIANT_CLASS_UINT16 = C.G_VARIANT_CLASS_UINT16
const VARIANT_CLASS_INT32 = C.G_VARIANT_CLASS_INT32
const VARIANT_CLASS_UINT32 = C.G_VARIANT_CLASS_UINT32
const VARIANT_CLASS_INT64 = C.G_VARIANT_CLASS_INT64
const VARIANT_CLASS_UINT64 = C.G_VARIANT_CLASS_UINT64
const VARIANT_CLASS_HANDLE = C.G_VARIANT_CLASS_HANDLE
const VARIANT_CLASS_DOUBLE = C.G_VARIANT_CLASS_DOUBLE
const VARIANT_CLASS_STRING = C.G_VARIANT_CLASS_STRING
const VARIANT_CLASS_OBJECT_PATH = C.G_VARIANT_CLASS_OBJECT_PATH
const VARIANT_CLASS_SIGNATURE = C.G_VARIANT_CLASS_SIGNATURE
const VARIANT_CLASS_VARIANT = C.G_VARIANT_CLASS_VARIANT
const VARIANT_CLASS_MAYBE = C.G_VARIANT_CLASS_MAYBE
const VARIANT_CLASS_ARRAY = C.G_VARIANT_CLASS_ARRAY
const VARIANT_CLASS_TUPLE = C.G_VARIANT_CLASS_TUPLE
const VARIANT_CLASS_DICT_ENTRY = C.G_VARIANT_CLASS_DICT_ENTRY
const VARIANT_PARSE_ERROR_FAILED = C.G_VARIANT_PARSE_ERROR_FAILED
const VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = C.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE
const VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = C.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED
const VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = C.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END
const VARIANT_PARSE_ERROR_INVALID_CHARACTER = C.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER
const VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING
const VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = C.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH
const VARIANT_PARSE_ERROR_INVALID_SIGNATURE = C.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE
const VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = C.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING
const VARIANT_PARSE_ERROR_NO_COMMON_TYPE = C.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE
const VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = C.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE
const VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = C.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG
const VARIANT_PARSE_ERROR_TYPE_ERROR = C.G_VARIANT_PARSE_ERROR_TYPE_ERROR
const VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = C.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN
const VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = C.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD
const VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = C.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT
const VARIANT_PARSE_ERROR_VALUE_EXPECTED = C.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED
const ASCII_DTOSTR_BUF_SIZE = C.G_ASCII_DTOSTR_BUF_SIZE
const BIG_ENDIAN = C.G_BIG_ENDIAN
const CAN_INLINE = C.G_CAN_INLINE
const CSET_A_2_Z = C.G_CSET_A_2_Z
const CSET_DIGITS = C.G_CSET_DIGITS
const CSET_a_2_z = C.G_CSET_a_2_z
const DATALIST_FLAGS_MASK = C.G_DATALIST_FLAGS_MASK
const DATE_BAD_DAY = C.G_DATE_BAD_DAY
const DATE_BAD_JULIAN = C.G_DATE_BAD_JULIAN
const DATE_BAD_YEAR = C.G_DATE_BAD_YEAR
const DIR_SEPARATOR = C.G_DIR_SEPARATOR
const DIR_SEPARATOR_S = C.G_DIR_SEPARATOR_S
const GINT16_FORMAT = C.G_GINT16_FORMAT
const GINT16_MODIFIER = C.G_GINT16_MODIFIER
const GINT32_FORMAT = C.G_GINT32_FORMAT
const GINT32_MODIFIER = C.G_GINT32_MODIFIER
const GINT64_FORMAT = C.G_GINT64_FORMAT
const GINT64_MODIFIER = C.G_GINT64_MODIFIER
const GINTPTR_FORMAT = C.G_GINTPTR_FORMAT
const GINTPTR_MODIFIER = C.G_GINTPTR_MODIFIER
const GNUC_FUNCTION = C.G_GNUC_FUNCTION
const GNUC_PRETTY_FUNCTION = C.G_GNUC_PRETTY_FUNCTION
const GSIZE_FORMAT = C.G_GSIZE_FORMAT
const GSIZE_MODIFIER = C.G_GSIZE_MODIFIER
const GSSIZE_FORMAT = C.G_GSSIZE_FORMAT
const GUINT16_FORMAT = C.G_GUINT16_FORMAT
const GUINT32_FORMAT = C.G_GUINT32_FORMAT
const GUINT64_FORMAT = C.G_GUINT64_FORMAT
const GUINTPTR_FORMAT = C.G_GUINTPTR_FORMAT
const HAVE_GINT64 = C.G_HAVE_GINT64
const HAVE_GNUC_VARARGS = C.G_HAVE_GNUC_VARARGS
const HAVE_GNUC_VISIBILITY = C.G_HAVE_GNUC_VISIBILITY
const HAVE_GROWING_STACK = C.G_HAVE_GROWING_STACK
const HAVE_INLINE = C.G_HAVE_INLINE
const HAVE_ISO_VARARGS = C.G_HAVE_ISO_VARARGS
const HAVE___INLINE = C.G_HAVE___INLINE
const HAVE___INLINE__ = C.G_HAVE___INLINE__
const HOOK_FLAG_USER_SHIFT = C.G_HOOK_FLAG_USER_SHIFT
const IEEE754_DOUBLE_BIAS = C.G_IEEE754_DOUBLE_BIAS
const IEEE754_FLOAT_BIAS = C.G_IEEE754_FLOAT_BIAS
const KEY_FILE_DESKTOP_GROUP = C.G_KEY_FILE_DESKTOP_GROUP
const KEY_FILE_DESKTOP_KEY_CATEGORIES = C.G_KEY_FILE_DESKTOP_KEY_CATEGORIES
const KEY_FILE_DESKTOP_KEY_COMMENT = C.G_KEY_FILE_DESKTOP_KEY_COMMENT
const KEY_FILE_DESKTOP_KEY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_EXEC
const KEY_FILE_DESKTOP_KEY_GENERIC_NAME = C.G_KEY_FILE_DESKTOP_KEY_GENERIC_NAME
const KEY_FILE_DESKTOP_KEY_HIDDEN = C.G_KEY_FILE_DESKTOP_KEY_HIDDEN
const KEY_FILE_DESKTOP_KEY_ICON = C.G_KEY_FILE_DESKTOP_KEY_ICON
const KEY_FILE_DESKTOP_KEY_MIME_TYPE = C.G_KEY_FILE_DESKTOP_KEY_MIME_TYPE
const KEY_FILE_DESKTOP_KEY_NAME = C.G_KEY_FILE_DESKTOP_KEY_NAME
const KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_NOT_SHOW_IN
const KEY_FILE_DESKTOP_KEY_NO_DISPLAY = C.G_KEY_FILE_DESKTOP_KEY_NO_DISPLAY
const KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN = C.G_KEY_FILE_DESKTOP_KEY_ONLY_SHOW_IN
const KEY_FILE_DESKTOP_KEY_PATH = C.G_KEY_FILE_DESKTOP_KEY_PATH
const KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_NOTIFY
const KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS = C.G_KEY_FILE_DESKTOP_KEY_STARTUP_WM_CLASS
const KEY_FILE_DESKTOP_KEY_TERMINAL = C.G_KEY_FILE_DESKTOP_KEY_TERMINAL
const KEY_FILE_DESKTOP_KEY_TRY_EXEC = C.G_KEY_FILE_DESKTOP_KEY_TRY_EXEC
const KEY_FILE_DESKTOP_KEY_TYPE = C.G_KEY_FILE_DESKTOP_KEY_TYPE
const KEY_FILE_DESKTOP_KEY_URL = C.G_KEY_FILE_DESKTOP_KEY_URL
const KEY_FILE_DESKTOP_KEY_VERSION = C.G_KEY_FILE_DESKTOP_KEY_VERSION
const KEY_FILE_DESKTOP_TYPE_APPLICATION = C.G_KEY_FILE_DESKTOP_TYPE_APPLICATION
const KEY_FILE_DESKTOP_TYPE_DIRECTORY = C.G_KEY_FILE_DESKTOP_TYPE_DIRECTORY
const KEY_FILE_DESKTOP_TYPE_LINK = C.G_KEY_FILE_DESKTOP_TYPE_LINK
const LITTLE_ENDIAN = C.G_LITTLE_ENDIAN
const LOG_FATAL_MASK = C.G_LOG_FATAL_MASK
const LOG_LEVEL_USER_SHIFT = C.G_LOG_LEVEL_USER_SHIFT
const MAJOR_VERSION = C.GLIB_MAJOR_VERSION
const MAXINT16 = C.G_MAXINT16
const MAXINT32 = C.G_MAXINT32
const MAXINT64 = C.G_MAXINT64
const MAXINT8 = C.G_MAXINT8
const MAXUINT16 = C.G_MAXUINT16
const MAXUINT32 = C.G_MAXUINT32
const MAXUINT64 = C.G_MAXUINT64
const MAXUINT8 = C.G_MAXUINT8
const MICRO_VERSION = C.GLIB_MICRO_VERSION
const MININT16 = C.G_MININT16
const MININT32 = C.G_MININT32
const MININT64 = C.G_MININT64
const MININT8 = C.G_MININT8
const MINOR_VERSION = C.GLIB_MINOR_VERSION
const MODULE_SUFFIX = C.G_MODULE_SUFFIX
const OPTION_REMAINING = C.G_OPTION_REMAINING
const PDP_ENDIAN = C.G_PDP_ENDIAN
const POLLFD_FORMAT = C.G_POLLFD_FORMAT
const PRIORITY_DEFAULT = C.G_PRIORITY_DEFAULT
const PRIORITY_DEFAULT_IDLE = C.G_PRIORITY_DEFAULT_IDLE
const PRIORITY_HIGH = C.G_PRIORITY_HIGH
const PRIORITY_HIGH_IDLE = C.G_PRIORITY_HIGH_IDLE
const PRIORITY_LOW = C.G_PRIORITY_LOW
const SEARCHPATH_SEPARATOR = C.G_SEARCHPATH_SEPARATOR
const SEARCHPATH_SEPARATOR_S = C.G_SEARCHPATH_SEPARATOR_S
const SIZEOF_LONG = C.GLIB_SIZEOF_LONG
const SIZEOF_SIZE_T = C.GLIB_SIZEOF_SIZE_T
const SIZEOF_VOID_P = C.GLIB_SIZEOF_VOID_P
const STR_DELIMITERS = C.G_STR_DELIMITERS
const SYSDEF_AF_INET = C.GLIB_SYSDEF_AF_INET
const SYSDEF_AF_INET6 = C.GLIB_SYSDEF_AF_INET6
const SYSDEF_AF_UNIX = C.GLIB_SYSDEF_AF_UNIX
const SYSDEF_MSG_DONTROUTE = C.GLIB_SYSDEF_MSG_DONTROUTE
const SYSDEF_MSG_OOB = C.GLIB_SYSDEF_MSG_OOB
const SYSDEF_MSG_PEEK = C.GLIB_SYSDEF_MSG_PEEK
const TIME_SPAN_DAY = C.G_TIME_SPAN_DAY
const TIME_SPAN_HOUR = C.G_TIME_SPAN_HOUR
const TIME_SPAN_MILLISECOND = C.G_TIME_SPAN_MILLISECOND
const TIME_SPAN_MINUTE = C.G_TIME_SPAN_MINUTE
const TIME_SPAN_SECOND = C.G_TIME_SPAN_SECOND
const UNICHAR_MAX_DECOMPOSITION_LENGTH = C.G_UNICHAR_MAX_DECOMPOSITION_LENGTH
const URI_RESERVED_CHARS_GENERIC_DELIMITERS = C.G_URI_RESERVED_CHARS_GENERIC_DELIMITERS
const URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS = C.G_URI_RESERVED_CHARS_SUBCOMPONENT_DELIMITERS
const USEC_PER_SEC = C.G_USEC_PER_SEC
const VA_COPY_AS_ARRAY = C.G_VA_COPY_AS_ARRAY
const VERSION_MIN_REQUIRED = C.GLIB_VERSION_MIN_REQUIRED
func gboolean2bool(b C.gboolean) bool {
  return b == C._true()
}
func gdouble2float64(i C.gdouble) float64 {
  return float64(i)
}
func gint322int32(i C.gint32) int32 {
  return int32(i)
}
func glong2int64(i C.glong) int64 {
  return int64(i)
}
func gssize2int64(i C.gssize) int64 {
  return int64(i)
}
func gint2int(i C.gint) int {
  return int(i)
}
func guint8p2uint8p(p *C.guint8) *uint8 {
  i := uint8(*p)
  return &i
}
func gchar2int8(i C.gchar) int8 {
  return int8(i)
}
func gint642int64(i C.gint64) int64 {
  return int64(i)
}
func gucharp2byteslice(str *C.guchar) []byte {
  return C.GoBytes(unsafe.Pointer(str), C.int(C.strlen((*C.char)(unsafe.Pointer(str)))))
}
func guint322uint32(i C.guint32) uint32 {
  return uint32(i)
}
func guint642uint64(i C.guint64) uint64 {
  return uint64(i)
}
func gcharp2string(str *C.gchar) string {
  return C.GoString((*C.char)(str))
}
func guint2uint(i C.guint) uint {
  return uint(i)
}
func gsize2uint64(i C.gsize) uint64 {
  return uint64(i)
}
func guint82uint8(i C.guint8) uint8 {
  return uint8(i)
}
func double2float64(i C.double) float64 {
  return float64(i)
}
type SList C.GSList
type Cond C.GCond
type Timer C.GTimer
type List C.GList
type Source C.GSource
type Rand C.GRand
type SourcePrivate C.GSourcePrivate
type PtrArray C.GPtrArray
type BookmarkFile C.GBookmarkFile
type IConv C.GIConv
type MainLoop C.GMainLoop
type MemVTable C.GMemVTable
type VariantType C.GVariantType
type OptionContext C.GOptionContext
type KeyFile C.GKeyFile
type Hook C.GHook
type StatBuf C.GStatBuf
type Dir C.GDir
type Regex C.GRegex
type OptionGroup C.GOptionGroup
type Tree C.GTree
type IOFuncs C.GIOFuncs
type ScannerConfig C.GScannerConfig
type SourceCallbackFuncs C.GSourceCallbackFuncs
type RecMutex C.GRecMutex
type SourceFuncs C.GSourceFuncs
type TestConfig C.GTestConfig
type Data C.GData
type AsyncQueue C.GAsyncQueue
type MatchInfo C.GMatchInfo
type Array C.GArray
type Thread C.GThread
type DebugKey C.GDebugKey
type Sequence C.GSequence
type TestSuite C.GTestSuite
type Scanner C.GScanner
type PatternSpec C.GPatternSpec
type String C.GString
type Private C.GPrivate
type TestLogBuffer C.GTestLogBuffer
type VariantBuilder C.GVariantBuilder
type Date C.GDate
type HookList C.GHookList
type Variant C.GVariant
type Hmac C.GHmac
type OptionEntry C.GOptionEntry
type MainContext C.GMainContext
type VariantIter C.GVariantIter
type HashTableIter C.GHashTableIter
type ThreadPool C.GThreadPool
type Error C.GError
type TrashStack C.GTrashStack
type MarkupParser C.GMarkupParser
type IOChannel C.GIOChannel
type RWLock C.GRWLock
type Node C.GNode
type Queue C.GQueue
type Checksum C.GChecksum
type Bytes C.GBytes
type Once C.GOnce
type TimeZone C.GTimeZone
type StringChunk C.GStringChunk
type TimeVal C.GTimeVal
type PollFD C.GPollFD
type SequenceIter C.GSequenceIter
type MarkupParseContext C.GMarkupParseContext
type DateTime C.GDateTime
type ByteArray C.GByteArray
type MappedFile C.GMappedFile
type TestCase C.GTestCase
type HashTable C.GHashTable
