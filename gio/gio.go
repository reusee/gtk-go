// this file is auto-generated by go-gi

package gio

// #cgo pkg-config: gio-unix-2.0 gio-2.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include </usr/include/gio-unix-2.0/gio/gdesktopappinfo.h>
// #include </usr/include/gio-unix-2.0/gio/gfiledescriptorbased.h>
// #include </usr/include/gio-unix-2.0/gio/gunixconnection.h>
// #include </usr/include/gio-unix-2.0/gio/gunixmounts.h>
// #include </usr/include/gio-unix-2.0/gio/gunixfdlist.h>
// #include <gio/gio.h>
// #include </usr/include/gio-unix-2.0/gio/gunixcredentialsmessage.h>
// #include </usr/include/gio-unix-2.0/gio/gunixfdmessage.h>
// #include </usr/include/gio-unix-2.0/gio/gunixoutputstream.h>
// #include </usr/include/gio-unix-2.0/gio/gunixsocketaddress.h>
// #include </usr/include/gio-unix-2.0/gio/gunixinputstream.h>
/*
typedef long double longdouble;
gboolean _true() { return TRUE; }
gboolean _false() { return FALSE; }
const gchar* _g_dbus_annotation_info_lookup(void* annotations, void* name) {
	return g_dbus_annotation_info_lookup((GDBusAnnotationInfo**)(annotations), (const gchar*)(name));
}
GDBusNodeInfo* _g_dbus_node_info_new_for_xml(void* xml_data, void* err) {
	return g_dbus_node_info_new_for_xml((const gchar*)(xml_data), (GError**)(err));
}
GFileAttributeMatcher* _g_file_attribute_matcher_new(void* attributes) {
	return g_file_attribute_matcher_new((const char*)(attributes));
}
GIOExtension* _g_io_extension_point_implement(void* extension_point_name, GType type_, void* extension_name, gint priority) {
	return g_io_extension_point_implement((const char*)(extension_point_name), type_, (const char*)(extension_name), priority);
}
GIOExtensionPoint* _g_io_extension_point_lookup(void* name) {
	return g_io_extension_point_lookup((const char*)(name));
}
GIOExtensionPoint* _g_io_extension_point_register(void* name) {
	return g_io_extension_point_register((const char*)(name));
}
GResource* _g_resource_new_from_data(GBytes* data, void* err) {
	return g_resource_new_from_data(data, (GError**)(err));
}
GResource* _g_resource_load(gchar* filename, void* err) {
	return g_resource_load(filename, (GError**)(err));
}
GSettingsSchemaSource* _g_settings_schema_source_new_from_directory(void* directory, GSettingsSchemaSource* parent, gboolean trusted, void* err) {
	return g_settings_schema_source_new_from_directory((const gchar*)(directory), parent, trusted, (GError**)(err));
}
GSrvTarget* _g_srv_target_new(void* hostname, guint16 port, guint16 priority, guint16 weight) {
	return g_srv_target_new((const gchar*)(hostname), port, priority, weight);
}
GAppInfo* _g_app_info_create_from_commandline(void* commandline, void* application_name, GAppInfoCreateFlags flags, void* err) {
	return g_app_info_create_from_commandline((const char*)(commandline), (const char*)(application_name), flags, (GError**)(err));
}
GList* _g_app_info_get_all_for_type(void* content_type) {
	return g_app_info_get_all_for_type((const char*)(content_type));
}
GAppInfo* _g_app_info_get_default_for_type(void* content_type, gboolean must_support_uris) {
	return g_app_info_get_default_for_type((const char*)(content_type), must_support_uris);
}
GAppInfo* _g_app_info_get_default_for_uri_scheme(void* uri_scheme) {
	return g_app_info_get_default_for_uri_scheme((const char*)(uri_scheme));
}
GList* _g_app_info_get_fallback_for_type(void* content_type) {
	return g_app_info_get_fallback_for_type((const gchar*)(content_type));
}
GList* _g_app_info_get_recommended_for_type(void* content_type) {
	return g_app_info_get_recommended_for_type((const gchar*)(content_type));
}
gboolean _g_app_info_launch_default_for_uri(void* uri, GAppLaunchContext* launch_context, void* err) {
	return g_app_info_launch_default_for_uri((const char*)(uri), launch_context, (GError**)(err));
}
void _g_app_info_reset_type_associations(void* content_type) {
	g_app_info_reset_type_associations((const char*)(content_type));
}
GDBusConnection* _g_bus_get_finish(GAsyncResult* res, void* err) {
	return g_bus_get_finish(res, (GError**)(err));
}
GDBusConnection* _g_bus_get_sync(GBusType bus_type, GCancellable* cancellable, void* err) {
	return g_bus_get_sync(bus_type, cancellable, (GError**)(err));
}
guint _g_bus_own_name(GBusType bus_type, void* name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return g_bus_own_name(bus_type, (const gchar*)(name), flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
}
guint _g_bus_own_name_on_connection(GDBusConnection* connection, void* name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return g_bus_own_name_on_connection(connection, (const gchar*)(name), flags, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
}
guint _g_bus_own_name_on_connection_with_closures(GDBusConnection* connection, void* name, GBusNameOwnerFlags flags, GClosure* name_acquired_closure, GClosure* name_lost_closure) {
	return g_bus_own_name_on_connection_with_closures(connection, (const gchar*)(name), flags, name_acquired_closure, name_lost_closure);
}
guint _g_bus_own_name_with_closures(GBusType bus_type, void* name, GBusNameOwnerFlags flags, GClosure* bus_acquired_closure, GClosure* name_acquired_closure, GClosure* name_lost_closure) {
	return g_bus_own_name_with_closures(bus_type, (const gchar*)(name), flags, bus_acquired_closure, name_acquired_closure, name_lost_closure);
}
guint _g_bus_watch_name(GBusType bus_type, void* name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return g_bus_watch_name(bus_type, (const gchar*)(name), flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
}
guint _g_bus_watch_name_on_connection(GDBusConnection* connection, void* name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return g_bus_watch_name_on_connection(connection, (const gchar*)(name), flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
}
guint _g_bus_watch_name_on_connection_with_closures(GDBusConnection* connection, void* name, GBusNameWatcherFlags flags, GClosure* name_appeared_closure, GClosure* name_vanished_closure) {
	return g_bus_watch_name_on_connection_with_closures(connection, (const gchar*)(name), flags, name_appeared_closure, name_vanished_closure);
}
guint _g_bus_watch_name_with_closures(GBusType bus_type, void* name, GBusNameWatcherFlags flags, GClosure* name_appeared_closure, GClosure* name_vanished_closure) {
	return g_bus_watch_name_with_closures(bus_type, (const gchar*)(name), flags, name_appeared_closure, name_vanished_closure);
}
gboolean _g_content_type_can_be_executable(void* type_) {
	return g_content_type_can_be_executable((const gchar*)(type_));
}
gboolean _g_content_type_equals(void* type1, void* type2) {
	return g_content_type_equals((const gchar*)(type1), (const gchar*)(type2));
}
gchar* _g_content_type_from_mime_type(void* mime_type) {
	return g_content_type_from_mime_type((const gchar*)(mime_type));
}
gchar* _g_content_type_get_description(void* type_) {
	return g_content_type_get_description((const gchar*)(type_));
}
gchar* _g_content_type_get_generic_icon_name(void* type_) {
	return g_content_type_get_generic_icon_name((const gchar*)(type_));
}
GIcon* _g_content_type_get_icon(void* type_) {
	return g_content_type_get_icon((const gchar*)(type_));
}
gchar* _g_content_type_get_mime_type(void* type_) {
	return g_content_type_get_mime_type((const gchar*)(type_));
}
GIcon* _g_content_type_get_symbolic_icon(void* type_) {
	return g_content_type_get_symbolic_icon((const gchar*)(type_));
}
gchar* _g_content_type_guess(void* filename, guchar* data, gsize data_size, gboolean* result_uncertain) {
	return g_content_type_guess((const gchar*)(filename), data, data_size, result_uncertain);
}
gboolean _g_content_type_is_a(void* type_, void* supertype) {
	return g_content_type_is_a((const gchar*)(type_), (const gchar*)(supertype));
}
gboolean _g_content_type_is_unknown(void* type_) {
	return g_content_type_is_unknown((const gchar*)(type_));
}
gchar* _g_dbus_address_get_for_bus_sync(GBusType bus_type, GCancellable* cancellable, void* err) {
	return g_dbus_address_get_for_bus_sync(bus_type, cancellable, (GError**)(err));
}
void _g_dbus_address_get_stream(void* address, GCancellable* cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	g_dbus_address_get_stream((const gchar*)(address), cancellable, callback, user_data);
}
GIOStream* _g_dbus_address_get_stream_finish(GAsyncResult* res, void* out_guid, void* err) {
	return g_dbus_address_get_stream_finish(res, (gchar**)(out_guid), (GError**)(err));
}
GIOStream* _g_dbus_address_get_stream_sync(void* address, void* out_guid, GCancellable* cancellable, void* err) {
	return g_dbus_address_get_stream_sync((const gchar*)(address), (gchar**)(out_guid), cancellable, (GError**)(err));
}
gchar* _g_dbus_error_encode_gerror(void* error_) {
	return g_dbus_error_encode_gerror((const GError*)(error_));
}
gchar* _g_dbus_error_get_remote_error(void* error_) {
	return g_dbus_error_get_remote_error((const GError*)(error_));
}
gboolean _g_dbus_error_is_remote_error(void* error_) {
	return g_dbus_error_is_remote_error((const GError*)(error_));
}
GError* _g_dbus_error_new_for_dbus_error(void* dbus_error_name, void* dbus_error_message) {
	return g_dbus_error_new_for_dbus_error((const gchar*)(dbus_error_name), (const gchar*)(dbus_error_message));
}
gboolean _g_dbus_error_register_error(GQuark error_domain, gint error_code, void* dbus_error_name) {
	return g_dbus_error_register_error(error_domain, error_code, (const gchar*)(dbus_error_name));
}
void _g_dbus_error_register_error_domain(void* error_domain_quark_name, volatile gsize* quark_volatile, void* entries, guint num_entries) {
	g_dbus_error_register_error_domain((const gchar*)(error_domain_quark_name), quark_volatile, (const GDBusErrorEntry*)(entries), num_entries);
}
gboolean _g_dbus_error_unregister_error(GQuark error_domain, gint error_code, void* dbus_error_name) {
	return g_dbus_error_unregister_error(error_domain, error_code, (const gchar*)(dbus_error_name));
}
GVariant* _g_dbus_gvalue_to_gvariant(void* gvalue, void* type_) {
	return g_dbus_gvalue_to_gvariant((const GValue*)(gvalue), (const GVariantType*)(type_));
}
gboolean _g_dbus_is_address(void* string_) {
	return g_dbus_is_address((const gchar*)(string_));
}
gboolean _g_dbus_is_guid(void* string_) {
	return g_dbus_is_guid((const gchar*)(string_));
}
gboolean _g_dbus_is_interface_name(void* string_) {
	return g_dbus_is_interface_name((const gchar*)(string_));
}
gboolean _g_dbus_is_member_name(void* string_) {
	return g_dbus_is_member_name((const gchar*)(string_));
}
gboolean _g_dbus_is_name(void* string_) {
	return g_dbus_is_name((const gchar*)(string_));
}
gboolean _g_dbus_is_supported_address(void* string_, void* err) {
	return g_dbus_is_supported_address((const gchar*)(string_), (GError**)(err));
}
gboolean _g_dbus_is_unique_name(void* string_) {
	return g_dbus_is_unique_name((const gchar*)(string_));
}
GFile* _g_file_new_for_commandline_arg(void* arg) {
	return g_file_new_for_commandline_arg((const char*)(arg));
}
GFile* _g_file_new_for_path(void* path) {
	return g_file_new_for_path((const char*)(path));
}
GFile* _g_file_new_for_uri(void* uri) {
	return g_file_new_for_uri((const char*)(uri));
}
GFile* _g_file_new_tmp(char* tmpl, void* iostream, void* err) {
	return g_file_new_tmp(tmpl, (GFileIOStream**)(iostream), (GError**)(err));
}
GFile* _g_file_parse_name(void* parse_name) {
	return g_file_parse_name((const char*)(parse_name));
}
GIcon* _g_icon_new_for_string(void* str, void* err) {
	return g_icon_new_for_string((const gchar*)(str), (GError**)(err));
}
gpointer _g_initable_newv(GType object_type, guint n_parameters, GParameter* parameters, GCancellable* cancellable, void* err) {
	return g_initable_newv(object_type, n_parameters, parameters, cancellable, (GError**)(err));
}
GList* _g_io_modules_load_all_in_directory(void* dirname) {
	return g_io_modules_load_all_in_directory((const gchar*)(dirname));
}
GList* _g_io_modules_load_all_in_directory_with_scope(void* dirname, GIOModuleScope* scope) {
	return g_io_modules_load_all_in_directory_with_scope((const gchar*)(dirname), scope);
}
void _g_io_modules_scan_all_in_directory(void* dirname) {
	g_io_modules_scan_all_in_directory((const char*)(dirname));
}
void _g_io_modules_scan_all_in_directory_with_scope(void* dirname, GIOModuleScope* scope) {
	g_io_modules_scan_all_in_directory_with_scope((const gchar*)(dirname), scope);
}
gssize _g_pollable_stream_read(GInputStream* stream, void* buffer, gsize count, gboolean blocking, GCancellable* cancellable, void* err) {
	return g_pollable_stream_read(stream, buffer, count, blocking, cancellable, (GError**)(err));
}
gssize _g_pollable_stream_write(GOutputStream* stream, void* buffer, gsize count, gboolean blocking, GCancellable* cancellable, void* err) {
	return g_pollable_stream_write(stream, buffer, count, blocking, cancellable, (GError**)(err));
}
gboolean _g_pollable_stream_write_all(GOutputStream* stream, void* buffer, gsize count, gboolean blocking, gsize* bytes_written, GCancellable* cancellable, void* err) {
	return g_pollable_stream_write_all(stream, buffer, count, blocking, bytes_written, cancellable, (GError**)(err));
}
GProxy* _g_proxy_get_default_for_protocol(void* protocol) {
	return g_proxy_get_default_for_protocol((const gchar*)(protocol));
}
char** _g_resources_enumerate_children(void* path, GResourceLookupFlags lookup_flags, void* err) {
	return g_resources_enumerate_children((const char*)(path), lookup_flags, (GError**)(err));
}
gboolean _g_resources_get_info(void* path, GResourceLookupFlags lookup_flags, gsize* size, guint32* flags, void* err) {
	return g_resources_get_info((const char*)(path), lookup_flags, size, flags, (GError**)(err));
}
GBytes* _g_resources_lookup_data(void* path, GResourceLookupFlags lookup_flags, void* err) {
	return g_resources_lookup_data((const char*)(path), lookup_flags, (GError**)(err));
}
GInputStream* _g_resources_open_stream(void* path, GResourceLookupFlags lookup_flags, void* err) {
	return g_resources_open_stream((const char*)(path), lookup_flags, (GError**)(err));
}
void _g_simple_async_report_gerror_in_idle(GObject* object, GAsyncReadyCallback callback, gpointer user_data, void* error_) {
	g_simple_async_report_gerror_in_idle(object, callback, user_data, (const GError*)(error_));
}
GIOStream* _g_tls_client_connection_new(GIOStream* base_io_stream, GSocketConnectable* server_identity, void* err) {
	return g_tls_client_connection_new(base_io_stream, server_identity, (GError**)(err));
}
GTlsDatabase* _g_tls_file_database_new(void* anchors, void* err) {
	return g_tls_file_database_new((const gchar*)(anchors), (GError**)(err));
}
GIOStream* _g_tls_server_connection_new(GIOStream* base_io_stream, GTlsCertificate* certificate, void* err) {
	return g_tls_server_connection_new(base_io_stream, certificate, (GError**)(err));
}
gboolean _g_unix_is_mount_path_system_internal(void* mount_path) {
	return g_unix_is_mount_path_system_internal((const char*)(mount_path));
}
GUnixMountEntry* _g_unix_mount_at(void* mount_path, guint64* time_read) {
	return g_unix_mount_at((const char*)(mount_path), time_read);
}
*/
import "C"
import (
	"unsafe"
	"runtime"
)

func DBusAnnotationInfoLookup(annotations unsafe.Pointer, name string) string {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return gcharp2string(C._g_dbus_annotation_info_lookup(unsafe.Pointer(annotations), unsafe.Pointer(_gstr_name)))
}

func DBusNodeInfoNewForXml(xml_data string, err unsafe.Pointer) *DBusNodeInfo {
	_cstr_xml_data := unsafe.Pointer(C.CString(xml_data))
	defer C.free(_cstr_xml_data)
	_gstr_xml_data := (*C.gchar)(unsafe.Pointer(_cstr_xml_data))
	_c_return_ := C._g_dbus_node_info_new_for_xml(unsafe.Pointer(_gstr_xml_data), unsafe.Pointer(err))
	_go_return_ := (*DBusNodeInfo)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **DBusNodeInfo) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func FileAttributeInfoListNew() *FileAttributeInfoList {
	_c_return_ := C.g_file_attribute_info_list_new()
	_go_return_ := (*FileAttributeInfoList)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **FileAttributeInfoList) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func FileAttributeMatcherNew(attributes *C.char) *FileAttributeMatcher {
	_c_return_ := C._g_file_attribute_matcher_new(unsafe.Pointer(attributes))
	_go_return_ := (*FileAttributeMatcher)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **FileAttributeMatcher) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOExtensionPointImplement(extension_point_name *C.char, type_ C.GType, extension_name *C.char, priority int) *IOExtension {
	_gint_priority := C.gint(priority)
	_c_return_ := C._g_io_extension_point_implement(unsafe.Pointer(extension_point_name), type_, unsafe.Pointer(extension_name), _gint_priority)
	_go_return_ := (*IOExtension)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOExtension) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOExtensionPointLookup(name *C.char) *IOExtensionPoint {
	_c_return_ := C._g_io_extension_point_lookup(unsafe.Pointer(name))
	_go_return_ := (*IOExtensionPoint)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOExtensionPoint) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOExtensionPointRegister(name *C.char) *IOExtensionPoint {
	_c_return_ := C._g_io_extension_point_register(unsafe.Pointer(name))
	_go_return_ := (*IOExtensionPoint)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOExtensionPoint) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func IOModuleScopeNew(flags C.GIOModuleScopeFlags) *IOModuleScope {
	_c_return_ := C.g_io_module_scope_new(flags)
	_go_return_ := (*IOModuleScope)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **IOModuleScope) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ResourceNewFromData(data *C.GBytes, err unsafe.Pointer) *Resource {
	_c_return_ := C._g_resource_new_from_data(data, unsafe.Pointer(err))
	_go_return_ := (*Resource)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Resource) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ResourceLoad(filename string, err unsafe.Pointer) *Resource {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_c_return_ := C._g_resource_load(_gstr_filename, unsafe.Pointer(err))
	_go_return_ := (*Resource)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Resource) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SettingsSchemaSourceNewFromDirectory(directory string, parent *SettingsSchemaSource, trusted bool, err unsafe.Pointer) *SettingsSchemaSource {
	_cstr_directory := unsafe.Pointer(C.CString(directory))
	defer C.free(_cstr_directory)
	_gstr_directory := (*C.gchar)(unsafe.Pointer(_cstr_directory))
	_cp_parent_ := (*C.GSettingsSchemaSource)(parent)
	_gbool_trusted := C._false()
	if trusted { _gbool_trusted = C._true() }
	_c_return_ := C._g_settings_schema_source_new_from_directory(unsafe.Pointer(_gstr_directory), _cp_parent_, _gbool_trusted, unsafe.Pointer(err))
	_go_return_ := (*SettingsSchemaSource)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SettingsSchemaSource) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SettingsSchemaSourceGetDefault() *SettingsSchemaSource {
	_c_return_ := C.g_settings_schema_source_get_default()
	_go_return_ := (*SettingsSchemaSource)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SettingsSchemaSource) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SrvTargetNew(hostname string, port uint16, priority uint16, weight uint16) *SrvTarget {
	_cstr_hostname := unsafe.Pointer(C.CString(hostname))
	defer C.free(_cstr_hostname)
	_gstr_hostname := (*C.gchar)(unsafe.Pointer(_cstr_hostname))
	_guint16_port := C.guint16(port)
	_guint16_priority := C.guint16(priority)
	_guint16_weight := C.guint16(weight)
	_c_return_ := C._g_srv_target_new(unsafe.Pointer(_gstr_hostname), _guint16_port, _guint16_priority, _guint16_weight)
	_go_return_ := (*SrvTarget)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SrvTarget) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SrvTargetListSort(targets *C.GList) *C.GList {
	return C.g_srv_target_list_sort(targets)
}

func AppInfoCreateFromCommandline(commandline *C.char, application_name *C.char, flags C.GAppInfoCreateFlags, err unsafe.Pointer) *C.GAppInfo {
	return C._g_app_info_create_from_commandline(unsafe.Pointer(commandline), unsafe.Pointer(application_name), flags, unsafe.Pointer(err))
}

func AppInfoGetAll() *C.GList {
	return C.g_app_info_get_all()
}

func AppInfoGetAllForType(content_type *C.char) *C.GList {
	return C._g_app_info_get_all_for_type(unsafe.Pointer(content_type))
}

func AppInfoGetDefaultForType(content_type *C.char, must_support_uris bool) *C.GAppInfo {
	_gbool_must_support_uris := C._false()
	if must_support_uris { _gbool_must_support_uris = C._true() }
	return C._g_app_info_get_default_for_type(unsafe.Pointer(content_type), _gbool_must_support_uris)
}

func AppInfoGetDefaultForUriScheme(uri_scheme *C.char) *C.GAppInfo {
	return C._g_app_info_get_default_for_uri_scheme(unsafe.Pointer(uri_scheme))
}

func AppInfoGetFallbackForType(content_type string) *C.GList {
	_cstr_content_type := unsafe.Pointer(C.CString(content_type))
	defer C.free(_cstr_content_type)
	_gstr_content_type := (*C.gchar)(unsafe.Pointer(_cstr_content_type))
	return C._g_app_info_get_fallback_for_type(unsafe.Pointer(_gstr_content_type))
}

func AppInfoGetRecommendedForType(content_type string) *C.GList {
	_cstr_content_type := unsafe.Pointer(C.CString(content_type))
	defer C.free(_cstr_content_type)
	_gstr_content_type := (*C.gchar)(unsafe.Pointer(_cstr_content_type))
	return C._g_app_info_get_recommended_for_type(unsafe.Pointer(_gstr_content_type))
}

func AppInfoLaunchDefaultForUri(uri *C.char, launch_context *C.GAppLaunchContext, err unsafe.Pointer) bool {
	return gboolean2bool(C._g_app_info_launch_default_for_uri(unsafe.Pointer(uri), launch_context, unsafe.Pointer(err)))
}

func AppInfoResetTypeAssociations(content_type *C.char) {
	C._g_app_info_reset_type_associations(unsafe.Pointer(content_type))
}

func AsyncInitableNewvAsync(object_type C.GType, n_parameters uint, parameters *C.GParameter, io_priority C.int, cancellable *C.GCancellable, callback C.GAsyncReadyCallback, user_data unsafe.Pointer) {
	_guint_n_parameters := C.guint(n_parameters)
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_async_initable_newv_async(object_type, _guint_n_parameters, parameters, io_priority, cancellable, callback, _gpointer_user_data)
}

func BusGet(bus_type C.GBusType, cancellable *C.GCancellable, callback C.GAsyncReadyCallback, user_data unsafe.Pointer) {
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_bus_get(bus_type, cancellable, callback, _gpointer_user_data)
}

func BusGetFinish(res *C.GAsyncResult, err unsafe.Pointer) *C.GDBusConnection {
	return C._g_bus_get_finish(res, unsafe.Pointer(err))
}

func BusGetSync(bus_type C.GBusType, cancellable *C.GCancellable, err unsafe.Pointer) *C.GDBusConnection {
	return C._g_bus_get_sync(bus_type, cancellable, unsafe.Pointer(err))
}

func BusOwnName(bus_type C.GBusType, name string, flags C.GBusNameOwnerFlags, bus_acquired_handler C.GBusAcquiredCallback, name_acquired_handler C.GBusNameAcquiredCallback, name_lost_handler C.GBusNameLostCallback, user_data unsafe.Pointer, user_data_free_func C.GDestroyNotify) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C._g_bus_own_name(bus_type, unsafe.Pointer(_gstr_name), flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, _gpointer_user_data, user_data_free_func))
}

func BusOwnNameOnConnection(connection *C.GDBusConnection, name string, flags C.GBusNameOwnerFlags, name_acquired_handler C.GBusNameAcquiredCallback, name_lost_handler C.GBusNameLostCallback, user_data unsafe.Pointer, user_data_free_func C.GDestroyNotify) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C._g_bus_own_name_on_connection(connection, unsafe.Pointer(_gstr_name), flags, name_acquired_handler, name_lost_handler, _gpointer_user_data, user_data_free_func))
}

func BusOwnNameOnConnectionWithClosures(connection *C.GDBusConnection, name string, flags C.GBusNameOwnerFlags, name_acquired_closure *C.GClosure, name_lost_closure *C.GClosure) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return guint2uint(C._g_bus_own_name_on_connection_with_closures(connection, unsafe.Pointer(_gstr_name), flags, name_acquired_closure, name_lost_closure))
}

func BusOwnNameWithClosures(bus_type C.GBusType, name string, flags C.GBusNameOwnerFlags, bus_acquired_closure *C.GClosure, name_acquired_closure *C.GClosure, name_lost_closure *C.GClosure) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return guint2uint(C._g_bus_own_name_with_closures(bus_type, unsafe.Pointer(_gstr_name), flags, bus_acquired_closure, name_acquired_closure, name_lost_closure))
}

func BusUnownName(owner_id uint) {
	_guint_owner_id := C.guint(owner_id)
	C.g_bus_unown_name(_guint_owner_id)
}

func BusUnwatchName(watcher_id uint) {
	_guint_watcher_id := C.guint(watcher_id)
	C.g_bus_unwatch_name(_guint_watcher_id)
}

func BusWatchName(bus_type C.GBusType, name string, flags C.GBusNameWatcherFlags, name_appeared_handler C.GBusNameAppearedCallback, name_vanished_handler C.GBusNameVanishedCallback, user_data unsafe.Pointer, user_data_free_func C.GDestroyNotify) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C._g_bus_watch_name(bus_type, unsafe.Pointer(_gstr_name), flags, name_appeared_handler, name_vanished_handler, _gpointer_user_data, user_data_free_func))
}

func BusWatchNameOnConnection(connection *C.GDBusConnection, name string, flags C.GBusNameWatcherFlags, name_appeared_handler C.GBusNameAppearedCallback, name_vanished_handler C.GBusNameVanishedCallback, user_data unsafe.Pointer, user_data_free_func C.GDestroyNotify) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_gpointer_user_data := (C.gpointer)(user_data)
	return guint2uint(C._g_bus_watch_name_on_connection(connection, unsafe.Pointer(_gstr_name), flags, name_appeared_handler, name_vanished_handler, _gpointer_user_data, user_data_free_func))
}

func BusWatchNameOnConnectionWithClosures(connection *C.GDBusConnection, name string, flags C.GBusNameWatcherFlags, name_appeared_closure *C.GClosure, name_vanished_closure *C.GClosure) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return guint2uint(C._g_bus_watch_name_on_connection_with_closures(connection, unsafe.Pointer(_gstr_name), flags, name_appeared_closure, name_vanished_closure))
}

func BusWatchNameWithClosures(bus_type C.GBusType, name string, flags C.GBusNameWatcherFlags, name_appeared_closure *C.GClosure, name_vanished_closure *C.GClosure) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return guint2uint(C._g_bus_watch_name_with_closures(bus_type, unsafe.Pointer(_gstr_name), flags, name_appeared_closure, name_vanished_closure))
}

func ContentTypeCanBeExecutable(type_ string) bool {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return gboolean2bool(C._g_content_type_can_be_executable(unsafe.Pointer(_gstr_type_)))
}

func ContentTypeEquals(type1 string, type2 string) bool {
	_cstr_type1 := unsafe.Pointer(C.CString(type1))
	defer C.free(_cstr_type1)
	_gstr_type1 := (*C.gchar)(unsafe.Pointer(_cstr_type1))
	_cstr_type2 := unsafe.Pointer(C.CString(type2))
	defer C.free(_cstr_type2)
	_gstr_type2 := (*C.gchar)(unsafe.Pointer(_cstr_type2))
	return gboolean2bool(C._g_content_type_equals(unsafe.Pointer(_gstr_type1), unsafe.Pointer(_gstr_type2)))
}

func ContentTypeFromMimeType(mime_type string) string {
	_cstr_mime_type := unsafe.Pointer(C.CString(mime_type))
	defer C.free(_cstr_mime_type)
	_gstr_mime_type := (*C.gchar)(unsafe.Pointer(_cstr_mime_type))
	return gcharp2string(C._g_content_type_from_mime_type(unsafe.Pointer(_gstr_mime_type)))
}

func ContentTypeGetDescription(type_ string) string {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return gcharp2string(C._g_content_type_get_description(unsafe.Pointer(_gstr_type_)))
}

func ContentTypeGetGenericIconName(type_ string) string {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return gcharp2string(C._g_content_type_get_generic_icon_name(unsafe.Pointer(_gstr_type_)))
}

func ContentTypeGetIcon(type_ string) *C.GIcon {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return C._g_content_type_get_icon(unsafe.Pointer(_gstr_type_))
}

func ContentTypeGetMimeType(type_ string) string {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return gcharp2string(C._g_content_type_get_mime_type(unsafe.Pointer(_gstr_type_)))
}

func ContentTypeGetSymbolicIcon(type_ string) *C.GIcon {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return C._g_content_type_get_symbolic_icon(unsafe.Pointer(_gstr_type_))
}

func ContentTypeGuess(filename string, data []byte, data_size uint64, result_uncertain *C.gboolean) string {
	_cstr_filename := unsafe.Pointer(C.CString(filename))
	defer C.free(_cstr_filename)
	_gstr_filename := (*C.gchar)(unsafe.Pointer(_cstr_filename))
	_custr_data := unsafe.Pointer(C.CString(string(data)))
	defer C.free(_custr_data)
	_gustr_data := (*C.guchar)(unsafe.Pointer(_custr_data))
	_gsize_data_size := C.gsize(data_size)
	return gcharp2string(C._g_content_type_guess(unsafe.Pointer(_gstr_filename), _gustr_data, _gsize_data_size, result_uncertain))
}

func ContentTypeGuessForTree(root *C.GFile) unsafe.Pointer {
	return unsafe.Pointer(C.g_content_type_guess_for_tree(root))
}

func ContentTypeIsA(type_ string, supertype string) bool {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	_cstr_supertype := unsafe.Pointer(C.CString(supertype))
	defer C.free(_cstr_supertype)
	_gstr_supertype := (*C.gchar)(unsafe.Pointer(_cstr_supertype))
	return gboolean2bool(C._g_content_type_is_a(unsafe.Pointer(_gstr_type_), unsafe.Pointer(_gstr_supertype)))
}

func ContentTypeIsUnknown(type_ string) bool {
	_cstr_type_ := unsafe.Pointer(C.CString(type_))
	defer C.free(_cstr_type_)
	_gstr_type_ := (*C.gchar)(unsafe.Pointer(_cstr_type_))
	return gboolean2bool(C._g_content_type_is_unknown(unsafe.Pointer(_gstr_type_)))
}

func ContentTypesGetRegistered() *C.GList {
	return C.g_content_types_get_registered()
}

func DbusAddressGetForBusSync(bus_type C.GBusType, cancellable *C.GCancellable, err unsafe.Pointer) string {
	return gcharp2string(C._g_dbus_address_get_for_bus_sync(bus_type, cancellable, unsafe.Pointer(err)))
}

func DbusAddressGetStream(address string, cancellable *C.GCancellable, callback C.GAsyncReadyCallback, user_data unsafe.Pointer) {
	_cstr_address := unsafe.Pointer(C.CString(address))
	defer C.free(_cstr_address)
	_gstr_address := (*C.gchar)(unsafe.Pointer(_cstr_address))
	_gpointer_user_data := (C.gpointer)(user_data)
	C._g_dbus_address_get_stream(unsafe.Pointer(_gstr_address), cancellable, callback, _gpointer_user_data)
}

func DbusAddressGetStreamFinish(res *C.GAsyncResult, out_guid unsafe.Pointer, err unsafe.Pointer) *C.GIOStream {
	return C._g_dbus_address_get_stream_finish(res, unsafe.Pointer(out_guid), unsafe.Pointer(err))
}

func DbusAddressGetStreamSync(address string, out_guid unsafe.Pointer, cancellable *C.GCancellable, err unsafe.Pointer) *C.GIOStream {
	_cstr_address := unsafe.Pointer(C.CString(address))
	defer C.free(_cstr_address)
	_gstr_address := (*C.gchar)(unsafe.Pointer(_cstr_address))
	return C._g_dbus_address_get_stream_sync(unsafe.Pointer(_gstr_address), unsafe.Pointer(out_guid), cancellable, unsafe.Pointer(err))
}

func DbusErrorEncodeGerror(error_ *C.GError) string {
	return gcharp2string(C._g_dbus_error_encode_gerror(unsafe.Pointer(error_)))
}

func DbusErrorGetRemoteError(error_ *C.GError) string {
	return gcharp2string(C._g_dbus_error_get_remote_error(unsafe.Pointer(error_)))
}

func DbusErrorIsRemoteError(error_ *C.GError) bool {
	return gboolean2bool(C._g_dbus_error_is_remote_error(unsafe.Pointer(error_)))
}

func DbusErrorNewForDbusError(dbus_error_name string, dbus_error_message string) *C.GError {
	_cstr_dbus_error_name := unsafe.Pointer(C.CString(dbus_error_name))
	defer C.free(_cstr_dbus_error_name)
	_gstr_dbus_error_name := (*C.gchar)(unsafe.Pointer(_cstr_dbus_error_name))
	_cstr_dbus_error_message := unsafe.Pointer(C.CString(dbus_error_message))
	defer C.free(_cstr_dbus_error_message)
	_gstr_dbus_error_message := (*C.gchar)(unsafe.Pointer(_cstr_dbus_error_message))
	return C._g_dbus_error_new_for_dbus_error(unsafe.Pointer(_gstr_dbus_error_name), unsafe.Pointer(_gstr_dbus_error_message))
}

func DbusErrorQuark() C.GQuark {
	return C.g_dbus_error_quark()
}

func DbusErrorRegisterError(error_domain C.GQuark, error_code int, dbus_error_name string) bool {
	_gint_error_code := C.gint(error_code)
	_cstr_dbus_error_name := unsafe.Pointer(C.CString(dbus_error_name))
	defer C.free(_cstr_dbus_error_name)
	_gstr_dbus_error_name := (*C.gchar)(unsafe.Pointer(_cstr_dbus_error_name))
	return gboolean2bool(C._g_dbus_error_register_error(error_domain, _gint_error_code, unsafe.Pointer(_gstr_dbus_error_name)))
}

func DbusErrorRegisterErrorDomain(error_domain_quark_name string, quark_volatile *uint64, entries *DBusErrorEntry, num_entries uint) {
	_cstr_error_domain_quark_name := unsafe.Pointer(C.CString(error_domain_quark_name))
	defer C.free(_cstr_error_domain_quark_name)
	_gstr_error_domain_quark_name := (*C.gchar)(unsafe.Pointer(_cstr_error_domain_quark_name))
	_c_gsize_quark_volatile := C.gsize(*quark_volatile)
	_cp_gsize_quark_volatile := (*C.gsize)(&_c_gsize_quark_volatile)
	_cp_entries_ := (*C.GDBusErrorEntry)(entries)
	_guint_num_entries := C.guint(num_entries)
	C._g_dbus_error_register_error_domain(unsafe.Pointer(_gstr_error_domain_quark_name), _cp_gsize_quark_volatile, unsafe.Pointer(_cp_entries_), _guint_num_entries)
}

func DbusErrorStripRemoteError(error_ *C.GError) bool {
	return gboolean2bool(C.g_dbus_error_strip_remote_error(error_))
}

func DbusErrorUnregisterError(error_domain C.GQuark, error_code int, dbus_error_name string) bool {
	_gint_error_code := C.gint(error_code)
	_cstr_dbus_error_name := unsafe.Pointer(C.CString(dbus_error_name))
	defer C.free(_cstr_dbus_error_name)
	_gstr_dbus_error_name := (*C.gchar)(unsafe.Pointer(_cstr_dbus_error_name))
	return gboolean2bool(C._g_dbus_error_unregister_error(error_domain, _gint_error_code, unsafe.Pointer(_gstr_dbus_error_name)))
}

func DbusGenerateGuid() string {
	return gcharp2string(C.g_dbus_generate_guid())
}

func DbusGvalueToGvariant(gvalue *C.GValue, type_ *C.GVariantType) *C.GVariant {
	return C._g_dbus_gvalue_to_gvariant(unsafe.Pointer(gvalue), unsafe.Pointer(type_))
}

func DbusGvariantToGvalue(value *C.GVariant, out_gvalue *C.GValue) {
	C.g_dbus_gvariant_to_gvalue(value, out_gvalue)
}

func DbusIsAddress(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_address(unsafe.Pointer(_gstr_string_)))
}

func DbusIsGuid(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_guid(unsafe.Pointer(_gstr_string_)))
}

func DbusIsInterfaceName(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_interface_name(unsafe.Pointer(_gstr_string_)))
}

func DbusIsMemberName(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_member_name(unsafe.Pointer(_gstr_string_)))
}

func DbusIsName(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_name(unsafe.Pointer(_gstr_string_)))
}

func DbusIsSupportedAddress(string_ string, err unsafe.Pointer) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_supported_address(unsafe.Pointer(_gstr_string_), unsafe.Pointer(err)))
}

func DbusIsUniqueName(string_ string) bool {
	_cstr_string_ := unsafe.Pointer(C.CString(string_))
	defer C.free(_cstr_string_)
	_gstr_string_ := (*C.gchar)(unsafe.Pointer(_cstr_string_))
	return gboolean2bool(C._g_dbus_is_unique_name(unsafe.Pointer(_gstr_string_)))
}

func FileNewForCommandlineArg(arg *C.char) *C.GFile {
	return C._g_file_new_for_commandline_arg(unsafe.Pointer(arg))
}

func FileNewForPath(path *C.char) *C.GFile {
	return C._g_file_new_for_path(unsafe.Pointer(path))
}

func FileNewForUri(uri *C.char) *C.GFile {
	return C._g_file_new_for_uri(unsafe.Pointer(uri))
}

func FileNewTmp(tmpl *C.char, iostream unsafe.Pointer, err unsafe.Pointer) *C.GFile {
	return C._g_file_new_tmp(tmpl, unsafe.Pointer(iostream), unsafe.Pointer(err))
}

func FileParseName(parse_name *C.char) *C.GFile {
	return C._g_file_parse_name(unsafe.Pointer(parse_name))
}

func IconHash(icon unsafe.Pointer) uint {
	_gpointer_icon := (C.gconstpointer)(icon)
	return guint2uint(C.g_icon_hash(_gpointer_icon))
}

func IconNewForString(str string, err unsafe.Pointer) *C.GIcon {
	_cstr_str := unsafe.Pointer(C.CString(str))
	defer C.free(_cstr_str)
	_gstr_str := (*C.gchar)(unsafe.Pointer(_cstr_str))
	return C._g_icon_new_for_string(unsafe.Pointer(_gstr_str), unsafe.Pointer(err))
}

func InitableNewv(object_type C.GType, n_parameters uint, parameters *C.GParameter, cancellable *C.GCancellable, err unsafe.Pointer) unsafe.Pointer {
	_guint_n_parameters := C.guint(n_parameters)
	return unsafe.Pointer(C._g_initable_newv(object_type, _guint_n_parameters, parameters, cancellable, unsafe.Pointer(err)))
}

func IoErrorFromErrno(err_no int) C.GIOErrorEnum {
	_gint_err_no := C.gint(err_no)
	return C.g_io_error_from_errno(_gint_err_no)
}

func IoErrorQuark() C.GQuark {
	return C.g_io_error_quark()
}

func IoModulesLoadAllInDirectory(dirname string) *C.GList {
	_cstr_dirname := unsafe.Pointer(C.CString(dirname))
	defer C.free(_cstr_dirname)
	_gstr_dirname := (*C.gchar)(unsafe.Pointer(_cstr_dirname))
	return C._g_io_modules_load_all_in_directory(unsafe.Pointer(_gstr_dirname))
}

func IoModulesLoadAllInDirectoryWithScope(dirname string, scope *IOModuleScope) *C.GList {
	_cstr_dirname := unsafe.Pointer(C.CString(dirname))
	defer C.free(_cstr_dirname)
	_gstr_dirname := (*C.gchar)(unsafe.Pointer(_cstr_dirname))
	_cp_scope_ := (*C.GIOModuleScope)(scope)
	return C._g_io_modules_load_all_in_directory_with_scope(unsafe.Pointer(_gstr_dirname), _cp_scope_)
}

func IoModulesScanAllInDirectory(dirname *C.char) {
	C._g_io_modules_scan_all_in_directory(unsafe.Pointer(dirname))
}

func IoModulesScanAllInDirectoryWithScope(dirname string, scope *IOModuleScope) {
	_cstr_dirname := unsafe.Pointer(C.CString(dirname))
	defer C.free(_cstr_dirname)
	_gstr_dirname := (*C.gchar)(unsafe.Pointer(_cstr_dirname))
	_cp_scope_ := (*C.GIOModuleScope)(scope)
	C._g_io_modules_scan_all_in_directory_with_scope(unsafe.Pointer(_gstr_dirname), _cp_scope_)
}

//Skipped g_io_scheduler_cancel_all_jobs

//Skipped g_io_scheduler_push_job

func NetworkMonitorGetDefault() *C.GNetworkMonitor {
	return C.g_network_monitor_get_default()
}

func PollableSourceNew(pollable_stream *C.GObject) *C.GSource {
	return C.g_pollable_source_new(pollable_stream)
}

func PollableSourceNewFull(pollable_stream unsafe.Pointer, child_source *C.GSource, cancellable *C.GCancellable) *C.GSource {
	_gpointer_pollable_stream := (C.gpointer)(pollable_stream)
	return C.g_pollable_source_new_full(_gpointer_pollable_stream, child_source, cancellable)
}

func PollableStreamRead(stream *C.GInputStream, buffer *C.void, count uint64, blocking bool, cancellable *C.GCancellable, err unsafe.Pointer) int64 {
	_gsize_count := C.gsize(count)
	_gbool_blocking := C._false()
	if blocking { _gbool_blocking = C._true() }
	return gssize2int64(C._g_pollable_stream_read(stream, buffer, _gsize_count, _gbool_blocking, cancellable, unsafe.Pointer(err)))
}

func PollableStreamWrite(stream *C.GOutputStream, buffer *C.void, count uint64, blocking bool, cancellable *C.GCancellable, err unsafe.Pointer) int64 {
	_gsize_count := C.gsize(count)
	_gbool_blocking := C._false()
	if blocking { _gbool_blocking = C._true() }
	return gssize2int64(C._g_pollable_stream_write(stream, buffer, _gsize_count, _gbool_blocking, cancellable, unsafe.Pointer(err)))
}

func PollableStreamWriteAll(stream *C.GOutputStream, buffer *C.void, count uint64, blocking bool, bytes_written *uint64, cancellable *C.GCancellable, err unsafe.Pointer) bool {
	_gsize_count := C.gsize(count)
	_gbool_blocking := C._false()
	if blocking { _gbool_blocking = C._true() }
	_c_gsize_bytes_written := C.gsize(*bytes_written)
	_cp_gsize_bytes_written := (*C.gsize)(&_c_gsize_bytes_written)
	return gboolean2bool(C._g_pollable_stream_write_all(stream, buffer, _gsize_count, _gbool_blocking, _cp_gsize_bytes_written, cancellable, unsafe.Pointer(err)))
}

func ProxyGetDefaultForProtocol(protocol string) *C.GProxy {
	_cstr_protocol := unsafe.Pointer(C.CString(protocol))
	defer C.free(_cstr_protocol)
	_gstr_protocol := (*C.gchar)(unsafe.Pointer(_cstr_protocol))
	return C._g_proxy_get_default_for_protocol(unsafe.Pointer(_gstr_protocol))
}

func ProxyResolverGetDefault() *C.GProxyResolver {
	return C.g_proxy_resolver_get_default()
}

func ResolverErrorQuark() C.GQuark {
	return C.g_resolver_error_quark()
}

func ResourceErrorQuark() C.GQuark {
	return C.g_resource_error_quark()
}

func ResourcesEnumerateChildren(path *C.char, lookup_flags C.GResourceLookupFlags, err unsafe.Pointer) unsafe.Pointer {
	return unsafe.Pointer(C._g_resources_enumerate_children(unsafe.Pointer(path), lookup_flags, unsafe.Pointer(err)))
}

func ResourcesGetInfo(path *C.char, lookup_flags C.GResourceLookupFlags, size *uint64, flags *uint32, err unsafe.Pointer) bool {
	_c_gsize_size := C.gsize(*size)
	_cp_gsize_size := (*C.gsize)(&_c_gsize_size)
	_c_guint32_flags := C.guint32(*flags)
	_cp_guint32_flags := (*C.guint32)(&_c_guint32_flags)
	return gboolean2bool(C._g_resources_get_info(unsafe.Pointer(path), lookup_flags, _cp_gsize_size, _cp_guint32_flags, unsafe.Pointer(err)))
}

func ResourcesLookupData(path *C.char, lookup_flags C.GResourceLookupFlags, err unsafe.Pointer) *C.GBytes {
	return C._g_resources_lookup_data(unsafe.Pointer(path), lookup_flags, unsafe.Pointer(err))
}

func ResourcesOpenStream(path *C.char, lookup_flags C.GResourceLookupFlags, err unsafe.Pointer) *C.GInputStream {
	return C._g_resources_open_stream(unsafe.Pointer(path), lookup_flags, unsafe.Pointer(err))
}

//TODO g_simple_async_report_error_in_idle

func SimpleAsyncReportGerrorInIdle(object *C.GObject, callback C.GAsyncReadyCallback, user_data unsafe.Pointer, error_ *C.GError) {
	_gpointer_user_data := (C.gpointer)(user_data)
	C._g_simple_async_report_gerror_in_idle(object, callback, _gpointer_user_data, unsafe.Pointer(error_))
}

func SimpleAsyncReportTakeGerrorInIdle(object *C.GObject, callback C.GAsyncReadyCallback, user_data unsafe.Pointer, error_ *C.GError) {
	_gpointer_user_data := (C.gpointer)(user_data)
	C.g_simple_async_report_take_gerror_in_idle(object, callback, _gpointer_user_data, error_)
}

func TlsBackendGetDefault() *C.GTlsBackend {
	return C.g_tls_backend_get_default()
}

func TlsClientConnectionNew(base_io_stream *C.GIOStream, server_identity *C.GSocketConnectable, err unsafe.Pointer) *C.GIOStream {
	return C._g_tls_client_connection_new(base_io_stream, server_identity, unsafe.Pointer(err))
}

func TlsErrorQuark() C.GQuark {
	return C.g_tls_error_quark()
}

func TlsFileDatabaseNew(anchors string, err unsafe.Pointer) *C.GTlsDatabase {
	_cstr_anchors := unsafe.Pointer(C.CString(anchors))
	defer C.free(_cstr_anchors)
	_gstr_anchors := (*C.gchar)(unsafe.Pointer(_cstr_anchors))
	return C._g_tls_file_database_new(unsafe.Pointer(_gstr_anchors), unsafe.Pointer(err))
}

func TlsServerConnectionNew(base_io_stream *C.GIOStream, certificate *C.GTlsCertificate, err unsafe.Pointer) *C.GIOStream {
	return C._g_tls_server_connection_new(base_io_stream, certificate, unsafe.Pointer(err))
}

func UnixIsMountPathSystemInternal(mount_path *C.char) bool {
	return gboolean2bool(C._g_unix_is_mount_path_system_internal(unsafe.Pointer(mount_path)))
}

func UnixMountAt(mount_path *C.char, time_read *uint64) *UnixMountEntry {
	_c_guint64_time_read := C.guint64(*time_read)
	_cp_guint64_time_read := (*C.guint64)(&_c_guint64_time_read)
	_c_return_ := C._g_unix_mount_at(unsafe.Pointer(mount_path), _cp_guint64_time_read)
	_go_return_ := (*UnixMountEntry)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **UnixMountEntry) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func UnixMountCompare(mount1 *UnixMountEntry, mount2 *UnixMountEntry) int {
	_cp_mount1_ := (*C.GUnixMountEntry)(mount1)
	_cp_mount2_ := (*C.GUnixMountEntry)(mount2)
	return gint2int(C.g_unix_mount_compare(_cp_mount1_, _cp_mount2_))
}

func UnixMountFree(mount_entry *UnixMountEntry) {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	C.g_unix_mount_free(_cp_mount_entry_)
}

func UnixMountGetDevicePath(mount_entry *UnixMountEntry) *C.char {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_get_device_path(_cp_mount_entry_)
}

func UnixMountGetFsType(mount_entry *UnixMountEntry) *C.char {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_get_fs_type(_cp_mount_entry_)
}

func UnixMountGetMountPath(mount_entry *UnixMountEntry) *C.char {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_get_mount_path(_cp_mount_entry_)
}

func UnixMountGuessCanEject(mount_entry *UnixMountEntry) bool {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return gboolean2bool(C.g_unix_mount_guess_can_eject(_cp_mount_entry_))
}

func UnixMountGuessIcon(mount_entry *UnixMountEntry) *C.GIcon {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_guess_icon(_cp_mount_entry_)
}

func UnixMountGuessName(mount_entry *UnixMountEntry) *C.char {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_guess_name(_cp_mount_entry_)
}

func UnixMountGuessShouldDisplay(mount_entry *UnixMountEntry) bool {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return gboolean2bool(C.g_unix_mount_guess_should_display(_cp_mount_entry_))
}

func UnixMountGuessSymbolicIcon(mount_entry *UnixMountEntry) *C.GIcon {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return C.g_unix_mount_guess_symbolic_icon(_cp_mount_entry_)
}

func UnixMountIsReadonly(mount_entry *UnixMountEntry) bool {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return gboolean2bool(C.g_unix_mount_is_readonly(_cp_mount_entry_))
}

func UnixMountIsSystemInternal(mount_entry *UnixMountEntry) bool {
	_cp_mount_entry_ := (*C.GUnixMountEntry)(mount_entry)
	return gboolean2bool(C.g_unix_mount_is_system_internal(_cp_mount_entry_))
}

func UnixMountPointsChangedSince(time uint64) bool {
	_guint64_time := C.guint64(time)
	return gboolean2bool(C.g_unix_mount_points_changed_since(_guint64_time))
}

func UnixMountPointsGet(time_read *uint64) *C.GList {
	_c_guint64_time_read := C.guint64(*time_read)
	_cp_guint64_time_read := (*C.guint64)(&_c_guint64_time_read)
	return C.g_unix_mount_points_get(_cp_guint64_time_read)
}

func UnixMountsChangedSince(time uint64) bool {
	_guint64_time := C.guint64(time)
	return gboolean2bool(C.g_unix_mounts_changed_since(_guint64_time))
}

func UnixMountsGet(time_read *uint64) *C.GList {
	_c_guint64_time_read := C.guint64(*time_read)
	_cp_guint64_time_read := (*C.guint64)(&_c_guint64_time_read)
	return C.g_unix_mounts_get(_cp_guint64_time_read)
}

const BUS_TYPE_STARTER = C.G_BUS_TYPE_STARTER
const BUS_TYPE_NONE = C.G_BUS_TYPE_NONE
const BUS_TYPE_SYSTEM = C.G_BUS_TYPE_SYSTEM
const BUS_TYPE_SESSION = C.G_BUS_TYPE_SESSION
const CONVERTER_ERROR = C.G_CONVERTER_ERROR
const CONVERTER_CONVERTED = C.G_CONVERTER_CONVERTED
const CONVERTER_FINISHED = C.G_CONVERTER_FINISHED
const CONVERTER_FLUSHED = C.G_CONVERTER_FLUSHED
const CREDENTIALS_TYPE_INVALID = C.G_CREDENTIALS_TYPE_INVALID
const CREDENTIALS_TYPE_LINUX_UCRED = C.G_CREDENTIALS_TYPE_LINUX_UCRED
const CREDENTIALS_TYPE_FREEBSD_CMSGCRED = C.G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED
const CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = C.G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED
const DBUS_ERROR_FAILED = C.G_DBUS_ERROR_FAILED
const DBUS_ERROR_NO_MEMORY = C.G_DBUS_ERROR_NO_MEMORY
const DBUS_ERROR_SERVICE_UNKNOWN = C.G_DBUS_ERROR_SERVICE_UNKNOWN
const DBUS_ERROR_NAME_HAS_NO_OWNER = C.G_DBUS_ERROR_NAME_HAS_NO_OWNER
const DBUS_ERROR_NO_REPLY = C.G_DBUS_ERROR_NO_REPLY
const DBUS_ERROR_IO_ERROR = C.G_DBUS_ERROR_IO_ERROR
const DBUS_ERROR_BAD_ADDRESS = C.G_DBUS_ERROR_BAD_ADDRESS
const DBUS_ERROR_NOT_SUPPORTED = C.G_DBUS_ERROR_NOT_SUPPORTED
const DBUS_ERROR_LIMITS_EXCEEDED = C.G_DBUS_ERROR_LIMITS_EXCEEDED
const DBUS_ERROR_ACCESS_DENIED = C.G_DBUS_ERROR_ACCESS_DENIED
const DBUS_ERROR_AUTH_FAILED = C.G_DBUS_ERROR_AUTH_FAILED
const DBUS_ERROR_NO_SERVER = C.G_DBUS_ERROR_NO_SERVER
const DBUS_ERROR_TIMEOUT = C.G_DBUS_ERROR_TIMEOUT
const DBUS_ERROR_NO_NETWORK = C.G_DBUS_ERROR_NO_NETWORK
const DBUS_ERROR_ADDRESS_IN_USE = C.G_DBUS_ERROR_ADDRESS_IN_USE
const DBUS_ERROR_DISCONNECTED = C.G_DBUS_ERROR_DISCONNECTED
const DBUS_ERROR_INVALID_ARGS = C.G_DBUS_ERROR_INVALID_ARGS
const DBUS_ERROR_FILE_NOT_FOUND = C.G_DBUS_ERROR_FILE_NOT_FOUND
const DBUS_ERROR_FILE_EXISTS = C.G_DBUS_ERROR_FILE_EXISTS
const DBUS_ERROR_UNKNOWN_METHOD = C.G_DBUS_ERROR_UNKNOWN_METHOD
const DBUS_ERROR_TIMED_OUT = C.G_DBUS_ERROR_TIMED_OUT
const DBUS_ERROR_MATCH_RULE_NOT_FOUND = C.G_DBUS_ERROR_MATCH_RULE_NOT_FOUND
const DBUS_ERROR_MATCH_RULE_INVALID = C.G_DBUS_ERROR_MATCH_RULE_INVALID
const DBUS_ERROR_SPAWN_EXEC_FAILED = C.G_DBUS_ERROR_SPAWN_EXEC_FAILED
const DBUS_ERROR_SPAWN_FORK_FAILED = C.G_DBUS_ERROR_SPAWN_FORK_FAILED
const DBUS_ERROR_SPAWN_CHILD_EXITED = C.G_DBUS_ERROR_SPAWN_CHILD_EXITED
const DBUS_ERROR_SPAWN_CHILD_SIGNALED = C.G_DBUS_ERROR_SPAWN_CHILD_SIGNALED
const DBUS_ERROR_SPAWN_FAILED = C.G_DBUS_ERROR_SPAWN_FAILED
const DBUS_ERROR_SPAWN_SETUP_FAILED = C.G_DBUS_ERROR_SPAWN_SETUP_FAILED
const DBUS_ERROR_SPAWN_CONFIG_INVALID = C.G_DBUS_ERROR_SPAWN_CONFIG_INVALID
const DBUS_ERROR_SPAWN_SERVICE_INVALID = C.G_DBUS_ERROR_SPAWN_SERVICE_INVALID
const DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = C.G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND
const DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = C.G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID
const DBUS_ERROR_SPAWN_FILE_INVALID = C.G_DBUS_ERROR_SPAWN_FILE_INVALID
const DBUS_ERROR_SPAWN_NO_MEMORY = C.G_DBUS_ERROR_SPAWN_NO_MEMORY
const DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = C.G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN
const DBUS_ERROR_INVALID_SIGNATURE = C.G_DBUS_ERROR_INVALID_SIGNATURE
const DBUS_ERROR_INVALID_FILE_CONTENT = C.G_DBUS_ERROR_INVALID_FILE_CONTENT
const DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = C.G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN
const DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = C.G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN
const DBUS_ERROR_OBJECT_PATH_IN_USE = C.G_DBUS_ERROR_OBJECT_PATH_IN_USE
const DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = C.G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN
const DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = C.G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN
const DBUS_MESSAGE_HEADER_FIELD_INVALID = C.G_DBUS_MESSAGE_HEADER_FIELD_INVALID
const DBUS_MESSAGE_HEADER_FIELD_PATH = C.G_DBUS_MESSAGE_HEADER_FIELD_PATH
const DBUS_MESSAGE_HEADER_FIELD_INTERFACE = C.G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE
const DBUS_MESSAGE_HEADER_FIELD_MEMBER = C.G_DBUS_MESSAGE_HEADER_FIELD_MEMBER
const DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = C.G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME
const DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = C.G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL
const DBUS_MESSAGE_HEADER_FIELD_DESTINATION = C.G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION
const DBUS_MESSAGE_HEADER_FIELD_SENDER = C.G_DBUS_MESSAGE_HEADER_FIELD_SENDER
const DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = C.G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE
const DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = C.G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
const DBUS_MESSAGE_TYPE_INVALID = C.G_DBUS_MESSAGE_TYPE_INVALID
const DBUS_MESSAGE_TYPE_METHOD_CALL = C.G_DBUS_MESSAGE_TYPE_METHOD_CALL
const DBUS_MESSAGE_TYPE_METHOD_RETURN = C.G_DBUS_MESSAGE_TYPE_METHOD_RETURN
const DBUS_MESSAGE_TYPE_ERROR = C.G_DBUS_MESSAGE_TYPE_ERROR
const DBUS_MESSAGE_TYPE_SIGNAL = C.G_DBUS_MESSAGE_TYPE_SIGNAL
const DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN
const DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN
const DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
const DATA_STREAM_NEWLINE_TYPE_LF = C.G_DATA_STREAM_NEWLINE_TYPE_LF
const DATA_STREAM_NEWLINE_TYPE_CR = C.G_DATA_STREAM_NEWLINE_TYPE_CR
const DATA_STREAM_NEWLINE_TYPE_CR_LF = C.G_DATA_STREAM_NEWLINE_TYPE_CR_LF
const DATA_STREAM_NEWLINE_TYPE_ANY = C.G_DATA_STREAM_NEWLINE_TYPE_ANY
const DRIVE_START_STOP_TYPE_UNKNOWN = C.G_DRIVE_START_STOP_TYPE_UNKNOWN
const DRIVE_START_STOP_TYPE_SHUTDOWN = C.G_DRIVE_START_STOP_TYPE_SHUTDOWN
const DRIVE_START_STOP_TYPE_NETWORK = C.G_DRIVE_START_STOP_TYPE_NETWORK
const DRIVE_START_STOP_TYPE_MULTIDISK = C.G_DRIVE_START_STOP_TYPE_MULTIDISK
const DRIVE_START_STOP_TYPE_PASSWORD = C.G_DRIVE_START_STOP_TYPE_PASSWORD
const EMBLEM_ORIGIN_UNKNOWN = C.G_EMBLEM_ORIGIN_UNKNOWN
const EMBLEM_ORIGIN_DEVICE = C.G_EMBLEM_ORIGIN_DEVICE
const EMBLEM_ORIGIN_LIVEMETADATA = C.G_EMBLEM_ORIGIN_LIVEMETADATA
const EMBLEM_ORIGIN_TAG = C.G_EMBLEM_ORIGIN_TAG
const FILE_ATTRIBUTE_STATUS_UNSET = C.G_FILE_ATTRIBUTE_STATUS_UNSET
const FILE_ATTRIBUTE_STATUS_SET = C.G_FILE_ATTRIBUTE_STATUS_SET
const FILE_ATTRIBUTE_STATUS_ERROR_SETTING = C.G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
const FILE_ATTRIBUTE_TYPE_INVALID = C.G_FILE_ATTRIBUTE_TYPE_INVALID
const FILE_ATTRIBUTE_TYPE_STRING = C.G_FILE_ATTRIBUTE_TYPE_STRING
const FILE_ATTRIBUTE_TYPE_BYTE_STRING = C.G_FILE_ATTRIBUTE_TYPE_BYTE_STRING
const FILE_ATTRIBUTE_TYPE_BOOLEAN = C.G_FILE_ATTRIBUTE_TYPE_BOOLEAN
const FILE_ATTRIBUTE_TYPE_UINT32 = C.G_FILE_ATTRIBUTE_TYPE_UINT32
const FILE_ATTRIBUTE_TYPE_INT32 = C.G_FILE_ATTRIBUTE_TYPE_INT32
const FILE_ATTRIBUTE_TYPE_UINT64 = C.G_FILE_ATTRIBUTE_TYPE_UINT64
const FILE_ATTRIBUTE_TYPE_INT64 = C.G_FILE_ATTRIBUTE_TYPE_INT64
const FILE_ATTRIBUTE_TYPE_OBJECT = C.G_FILE_ATTRIBUTE_TYPE_OBJECT
const FILE_ATTRIBUTE_TYPE_STRINGV = C.G_FILE_ATTRIBUTE_TYPE_STRINGV
const FILE_MONITOR_EVENT_CHANGED = C.G_FILE_MONITOR_EVENT_CHANGED
const FILE_MONITOR_EVENT_CHANGES_DONE_HINT = C.G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT
const FILE_MONITOR_EVENT_DELETED = C.G_FILE_MONITOR_EVENT_DELETED
const FILE_MONITOR_EVENT_CREATED = C.G_FILE_MONITOR_EVENT_CREATED
const FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = C.G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED
const FILE_MONITOR_EVENT_PRE_UNMOUNT = C.G_FILE_MONITOR_EVENT_PRE_UNMOUNT
const FILE_MONITOR_EVENT_UNMOUNTED = C.G_FILE_MONITOR_EVENT_UNMOUNTED
const FILE_MONITOR_EVENT_MOVED = C.G_FILE_MONITOR_EVENT_MOVED
const FILE_TYPE_UNKNOWN = C.G_FILE_TYPE_UNKNOWN
const FILE_TYPE_REGULAR = C.G_FILE_TYPE_REGULAR
const FILE_TYPE_DIRECTORY = C.G_FILE_TYPE_DIRECTORY
const FILE_TYPE_SYMBOLIC_LINK = C.G_FILE_TYPE_SYMBOLIC_LINK
const FILE_TYPE_SPECIAL = C.G_FILE_TYPE_SPECIAL
const FILE_TYPE_SHORTCUT = C.G_FILE_TYPE_SHORTCUT
const FILE_TYPE_MOUNTABLE = C.G_FILE_TYPE_MOUNTABLE
const FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = C.G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS
const FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = C.G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL
const FILESYSTEM_PREVIEW_TYPE_NEVER = C.G_FILESYSTEM_PREVIEW_TYPE_NEVER
const IO_ERROR_FAILED = C.G_IO_ERROR_FAILED
const IO_ERROR_NOT_FOUND = C.G_IO_ERROR_NOT_FOUND
const IO_ERROR_EXISTS = C.G_IO_ERROR_EXISTS
const IO_ERROR_IS_DIRECTORY = C.G_IO_ERROR_IS_DIRECTORY
const IO_ERROR_NOT_DIRECTORY = C.G_IO_ERROR_NOT_DIRECTORY
const IO_ERROR_NOT_EMPTY = C.G_IO_ERROR_NOT_EMPTY
const IO_ERROR_NOT_REGULAR_FILE = C.G_IO_ERROR_NOT_REGULAR_FILE
const IO_ERROR_NOT_SYMBOLIC_LINK = C.G_IO_ERROR_NOT_SYMBOLIC_LINK
const IO_ERROR_NOT_MOUNTABLE_FILE = C.G_IO_ERROR_NOT_MOUNTABLE_FILE
const IO_ERROR_FILENAME_TOO_LONG = C.G_IO_ERROR_FILENAME_TOO_LONG
const IO_ERROR_INVALID_FILENAME = C.G_IO_ERROR_INVALID_FILENAME
const IO_ERROR_TOO_MANY_LINKS = C.G_IO_ERROR_TOO_MANY_LINKS
const IO_ERROR_NO_SPACE = C.G_IO_ERROR_NO_SPACE
const IO_ERROR_INVALID_ARGUMENT = C.G_IO_ERROR_INVALID_ARGUMENT
const IO_ERROR_PERMISSION_DENIED = C.G_IO_ERROR_PERMISSION_DENIED
const IO_ERROR_NOT_SUPPORTED = C.G_IO_ERROR_NOT_SUPPORTED
const IO_ERROR_NOT_MOUNTED = C.G_IO_ERROR_NOT_MOUNTED
const IO_ERROR_ALREADY_MOUNTED = C.G_IO_ERROR_ALREADY_MOUNTED
const IO_ERROR_CLOSED = C.G_IO_ERROR_CLOSED
const IO_ERROR_CANCELLED = C.G_IO_ERROR_CANCELLED
const IO_ERROR_PENDING = C.G_IO_ERROR_PENDING
const IO_ERROR_READ_ONLY = C.G_IO_ERROR_READ_ONLY
const IO_ERROR_CANT_CREATE_BACKUP = C.G_IO_ERROR_CANT_CREATE_BACKUP
const IO_ERROR_WRONG_ETAG = C.G_IO_ERROR_WRONG_ETAG
const IO_ERROR_TIMED_OUT = C.G_IO_ERROR_TIMED_OUT
const IO_ERROR_WOULD_RECURSE = C.G_IO_ERROR_WOULD_RECURSE
const IO_ERROR_BUSY = C.G_IO_ERROR_BUSY
const IO_ERROR_WOULD_BLOCK = C.G_IO_ERROR_WOULD_BLOCK
const IO_ERROR_HOST_NOT_FOUND = C.G_IO_ERROR_HOST_NOT_FOUND
const IO_ERROR_WOULD_MERGE = C.G_IO_ERROR_WOULD_MERGE
const IO_ERROR_FAILED_HANDLED = C.G_IO_ERROR_FAILED_HANDLED
const IO_ERROR_TOO_MANY_OPEN_FILES = C.G_IO_ERROR_TOO_MANY_OPEN_FILES
const IO_ERROR_NOT_INITIALIZED = C.G_IO_ERROR_NOT_INITIALIZED
const IO_ERROR_ADDRESS_IN_USE = C.G_IO_ERROR_ADDRESS_IN_USE
const IO_ERROR_PARTIAL_INPUT = C.G_IO_ERROR_PARTIAL_INPUT
const IO_ERROR_INVALID_DATA = C.G_IO_ERROR_INVALID_DATA
const IO_ERROR_DBUS_ERROR = C.G_IO_ERROR_DBUS_ERROR
const IO_ERROR_HOST_UNREACHABLE = C.G_IO_ERROR_HOST_UNREACHABLE
const IO_ERROR_NETWORK_UNREACHABLE = C.G_IO_ERROR_NETWORK_UNREACHABLE
const IO_ERROR_CONNECTION_REFUSED = C.G_IO_ERROR_CONNECTION_REFUSED
const IO_ERROR_PROXY_FAILED = C.G_IO_ERROR_PROXY_FAILED
const IO_ERROR_PROXY_AUTH_FAILED = C.G_IO_ERROR_PROXY_AUTH_FAILED
const IO_ERROR_PROXY_NEED_AUTH = C.G_IO_ERROR_PROXY_NEED_AUTH
const IO_ERROR_PROXY_NOT_ALLOWED = C.G_IO_ERROR_PROXY_NOT_ALLOWED
const IO_MODULE_SCOPE_NONE = C.G_IO_MODULE_SCOPE_NONE
const IO_MODULE_SCOPE_BLOCK_DUPLICATES = C.G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
const MOUNT_OPERATION_HANDLED = C.G_MOUNT_OPERATION_HANDLED
const MOUNT_OPERATION_ABORTED = C.G_MOUNT_OPERATION_ABORTED
const MOUNT_OPERATION_UNHANDLED = C.G_MOUNT_OPERATION_UNHANDLED
const PASSWORD_SAVE_NEVER = C.G_PASSWORD_SAVE_NEVER
const PASSWORD_SAVE_FOR_SESSION = C.G_PASSWORD_SAVE_FOR_SESSION
const PASSWORD_SAVE_PERMANENTLY = C.G_PASSWORD_SAVE_PERMANENTLY
const RESOLVER_ERROR_NOT_FOUND = C.G_RESOLVER_ERROR_NOT_FOUND
const RESOLVER_ERROR_TEMPORARY_FAILURE = C.G_RESOLVER_ERROR_TEMPORARY_FAILURE
const RESOLVER_ERROR_INTERNAL = C.G_RESOLVER_ERROR_INTERNAL
const RESOLVER_RECORD_SRV = C.G_RESOLVER_RECORD_SRV
const RESOLVER_RECORD_MX = C.G_RESOLVER_RECORD_MX
const RESOLVER_RECORD_TXT = C.G_RESOLVER_RECORD_TXT
const RESOLVER_RECORD_SOA = C.G_RESOLVER_RECORD_SOA
const RESOLVER_RECORD_NS = C.G_RESOLVER_RECORD_NS
const RESOURCE_ERROR_NOT_FOUND = C.G_RESOURCE_ERROR_NOT_FOUND
const RESOURCE_ERROR_INTERNAL = C.G_RESOURCE_ERROR_INTERNAL
const SOCKET_CLIENT_RESOLVING = C.G_SOCKET_CLIENT_RESOLVING
const SOCKET_CLIENT_RESOLVED = C.G_SOCKET_CLIENT_RESOLVED
const SOCKET_CLIENT_CONNECTING = C.G_SOCKET_CLIENT_CONNECTING
const SOCKET_CLIENT_CONNECTED = C.G_SOCKET_CLIENT_CONNECTED
const SOCKET_CLIENT_PROXY_NEGOTIATING = C.G_SOCKET_CLIENT_PROXY_NEGOTIATING
const SOCKET_CLIENT_PROXY_NEGOTIATED = C.G_SOCKET_CLIENT_PROXY_NEGOTIATED
const SOCKET_CLIENT_TLS_HANDSHAKING = C.G_SOCKET_CLIENT_TLS_HANDSHAKING
const SOCKET_CLIENT_TLS_HANDSHAKED = C.G_SOCKET_CLIENT_TLS_HANDSHAKED
const SOCKET_CLIENT_COMPLETE = C.G_SOCKET_CLIENT_COMPLETE
const SOCKET_FAMILY_INVALID = C.G_SOCKET_FAMILY_INVALID
const SOCKET_FAMILY_UNIX = C.G_SOCKET_FAMILY_UNIX
const SOCKET_FAMILY_IPV4 = C.G_SOCKET_FAMILY_IPV4
const SOCKET_FAMILY_IPV6 = C.G_SOCKET_FAMILY_IPV6
const SOCKET_PROTOCOL_UNKNOWN = C.G_SOCKET_PROTOCOL_UNKNOWN
const SOCKET_PROTOCOL_DEFAULT = C.G_SOCKET_PROTOCOL_DEFAULT
const SOCKET_PROTOCOL_TCP = C.G_SOCKET_PROTOCOL_TCP
const SOCKET_PROTOCOL_UDP = C.G_SOCKET_PROTOCOL_UDP
const SOCKET_PROTOCOL_SCTP = C.G_SOCKET_PROTOCOL_SCTP
const SOCKET_TYPE_INVALID = C.G_SOCKET_TYPE_INVALID
const SOCKET_TYPE_STREAM = C.G_SOCKET_TYPE_STREAM
const SOCKET_TYPE_DATAGRAM = C.G_SOCKET_TYPE_DATAGRAM
const SOCKET_TYPE_SEQPACKET = C.G_SOCKET_TYPE_SEQPACKET
const TLS_AUTHENTICATION_NONE = C.G_TLS_AUTHENTICATION_NONE
const TLS_AUTHENTICATION_REQUESTED = C.G_TLS_AUTHENTICATION_REQUESTED
const TLS_AUTHENTICATION_REQUIRED = C.G_TLS_AUTHENTICATION_REQUIRED
const TLS_DATABASE_LOOKUP_NONE = C.G_TLS_DATABASE_LOOKUP_NONE
const TLS_DATABASE_LOOKUP_KEYPAIR = C.G_TLS_DATABASE_LOOKUP_KEYPAIR
const TLS_ERROR_UNAVAILABLE = C.G_TLS_ERROR_UNAVAILABLE
const TLS_ERROR_MISC = C.G_TLS_ERROR_MISC
const TLS_ERROR_BAD_CERTIFICATE = C.G_TLS_ERROR_BAD_CERTIFICATE
const TLS_ERROR_NOT_TLS = C.G_TLS_ERROR_NOT_TLS
const TLS_ERROR_HANDSHAKE = C.G_TLS_ERROR_HANDSHAKE
const TLS_ERROR_CERTIFICATE_REQUIRED = C.G_TLS_ERROR_CERTIFICATE_REQUIRED
const TLS_ERROR_EOF = C.G_TLS_ERROR_EOF
const TLS_INTERACTION_UNHANDLED = C.G_TLS_INTERACTION_UNHANDLED
const TLS_INTERACTION_HANDLED = C.G_TLS_INTERACTION_HANDLED
const TLS_INTERACTION_FAILED = C.G_TLS_INTERACTION_FAILED
const TLS_REHANDSHAKE_NEVER = C.G_TLS_REHANDSHAKE_NEVER
const TLS_REHANDSHAKE_SAFELY = C.G_TLS_REHANDSHAKE_SAFELY
const TLS_REHANDSHAKE_UNSAFELY = C.G_TLS_REHANDSHAKE_UNSAFELY
const UNIX_SOCKET_ADDRESS_INVALID = C.G_UNIX_SOCKET_ADDRESS_INVALID
const UNIX_SOCKET_ADDRESS_ANONYMOUS = C.G_UNIX_SOCKET_ADDRESS_ANONYMOUS
const UNIX_SOCKET_ADDRESS_PATH = C.G_UNIX_SOCKET_ADDRESS_PATH
const UNIX_SOCKET_ADDRESS_ABSTRACT = C.G_UNIX_SOCKET_ADDRESS_ABSTRACT
const UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = C.G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
const ZLIB_COMPRESSOR_FORMAT_ZLIB = C.G_ZLIB_COMPRESSOR_FORMAT_ZLIB
const ZLIB_COMPRESSOR_FORMAT_GZIP = C.G_ZLIB_COMPRESSOR_FORMAT_GZIP
const ZLIB_COMPRESSOR_FORMAT_RAW = C.G_ZLIB_COMPRESSOR_FORMAT_RAW
const DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = C.G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME
const FILE_ATTRIBUTE_ACCESS_CAN_DELETE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE
const FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE
const FILE_ATTRIBUTE_ACCESS_CAN_READ = C.G_FILE_ATTRIBUTE_ACCESS_CAN_READ
const FILE_ATTRIBUTE_ACCESS_CAN_RENAME = C.G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME
const FILE_ATTRIBUTE_ACCESS_CAN_TRASH = C.G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH
const FILE_ATTRIBUTE_ACCESS_CAN_WRITE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE
const FILE_ATTRIBUTE_DOS_IS_ARCHIVE = C.G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE
const FILE_ATTRIBUTE_DOS_IS_SYSTEM = C.G_FILE_ATTRIBUTE_DOS_IS_SYSTEM
const FILE_ATTRIBUTE_ETAG_VALUE = C.G_FILE_ATTRIBUTE_ETAG_VALUE
const FILE_ATTRIBUTE_FILESYSTEM_FREE = C.G_FILE_ATTRIBUTE_FILESYSTEM_FREE
const FILE_ATTRIBUTE_FILESYSTEM_READONLY = C.G_FILE_ATTRIBUTE_FILESYSTEM_READONLY
const FILE_ATTRIBUTE_FILESYSTEM_SIZE = C.G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
const FILE_ATTRIBUTE_FILESYSTEM_TYPE = C.G_FILE_ATTRIBUTE_FILESYSTEM_TYPE
const FILE_ATTRIBUTE_FILESYSTEM_USED = C.G_FILE_ATTRIBUTE_FILESYSTEM_USED
const FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = C.G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW
const FILE_ATTRIBUTE_GVFS_BACKEND = C.G_FILE_ATTRIBUTE_GVFS_BACKEND
const FILE_ATTRIBUTE_ID_FILE = C.G_FILE_ATTRIBUTE_ID_FILE
const FILE_ATTRIBUTE_ID_FILESYSTEM = C.G_FILE_ATTRIBUTE_ID_FILESYSTEM
const FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT
const FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT
const FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL
const FILE_ATTRIBUTE_MOUNTABLE_CAN_START = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START
const FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED
const FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP
const FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT
const FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = C.G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI
const FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = C.G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC
const FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = C.G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE
const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = C.G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE
const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = C.G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE
const FILE_ATTRIBUTE_OWNER_GROUP = C.G_FILE_ATTRIBUTE_OWNER_GROUP
const FILE_ATTRIBUTE_OWNER_USER = C.G_FILE_ATTRIBUTE_OWNER_USER
const FILE_ATTRIBUTE_OWNER_USER_REAL = C.G_FILE_ATTRIBUTE_OWNER_USER_REAL
const FILE_ATTRIBUTE_PREVIEW_ICON = C.G_FILE_ATTRIBUTE_PREVIEW_ICON
const FILE_ATTRIBUTE_SELINUX_CONTEXT = C.G_FILE_ATTRIBUTE_SELINUX_CONTEXT
const FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = C.G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE
const FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE
const FILE_ATTRIBUTE_STANDARD_COPY_NAME = C.G_FILE_ATTRIBUTE_STANDARD_COPY_NAME
const FILE_ATTRIBUTE_STANDARD_DESCRIPTION = C.G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION
const FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = C.G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
const FILE_ATTRIBUTE_STANDARD_EDIT_NAME = C.G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME
const FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE
const FILE_ATTRIBUTE_STANDARD_ICON = C.G_FILE_ATTRIBUTE_STANDARD_ICON
const FILE_ATTRIBUTE_STANDARD_IS_BACKUP = C.G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP
const FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = C.G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN
const FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = C.G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK
const FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = C.G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL
const FILE_ATTRIBUTE_STANDARD_NAME = C.G_FILE_ATTRIBUTE_STANDARD_NAME
const FILE_ATTRIBUTE_STANDARD_SIZE = C.G_FILE_ATTRIBUTE_STANDARD_SIZE
const FILE_ATTRIBUTE_STANDARD_SORT_ORDER = C.G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER
const FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = C.G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON
const FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = C.G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET
const FILE_ATTRIBUTE_STANDARD_TARGET_URI = C.G_FILE_ATTRIBUTE_STANDARD_TARGET_URI
const FILE_ATTRIBUTE_STANDARD_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_TYPE
const FILE_ATTRIBUTE_THUMBNAILING_FAILED = C.G_FILE_ATTRIBUTE_THUMBNAILING_FAILED
const FILE_ATTRIBUTE_THUMBNAIL_PATH = C.G_FILE_ATTRIBUTE_THUMBNAIL_PATH
const FILE_ATTRIBUTE_TIME_ACCESS = C.G_FILE_ATTRIBUTE_TIME_ACCESS
const FILE_ATTRIBUTE_TIME_ACCESS_USEC = C.G_FILE_ATTRIBUTE_TIME_ACCESS_USEC
const FILE_ATTRIBUTE_TIME_CHANGED = C.G_FILE_ATTRIBUTE_TIME_CHANGED
const FILE_ATTRIBUTE_TIME_CHANGED_USEC = C.G_FILE_ATTRIBUTE_TIME_CHANGED_USEC
const FILE_ATTRIBUTE_TIME_CREATED = C.G_FILE_ATTRIBUTE_TIME_CREATED
const FILE_ATTRIBUTE_TIME_CREATED_USEC = C.G_FILE_ATTRIBUTE_TIME_CREATED_USEC
const FILE_ATTRIBUTE_TIME_MODIFIED = C.G_FILE_ATTRIBUTE_TIME_MODIFIED
const FILE_ATTRIBUTE_TIME_MODIFIED_USEC = C.G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC
const FILE_ATTRIBUTE_TRASH_DELETION_DATE = C.G_FILE_ATTRIBUTE_TRASH_DELETION_DATE
const FILE_ATTRIBUTE_TRASH_ITEM_COUNT = C.G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT
const FILE_ATTRIBUTE_TRASH_ORIG_PATH = C.G_FILE_ATTRIBUTE_TRASH_ORIG_PATH
const FILE_ATTRIBUTE_UNIX_BLOCKS = C.G_FILE_ATTRIBUTE_UNIX_BLOCKS
const FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = C.G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE
const FILE_ATTRIBUTE_UNIX_DEVICE = C.G_FILE_ATTRIBUTE_UNIX_DEVICE
const FILE_ATTRIBUTE_UNIX_GID = C.G_FILE_ATTRIBUTE_UNIX_GID
const FILE_ATTRIBUTE_UNIX_INODE = C.G_FILE_ATTRIBUTE_UNIX_INODE
const FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = C.G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT
const FILE_ATTRIBUTE_UNIX_MODE = C.G_FILE_ATTRIBUTE_UNIX_MODE
const FILE_ATTRIBUTE_UNIX_NLINK = C.G_FILE_ATTRIBUTE_UNIX_NLINK
const FILE_ATTRIBUTE_UNIX_RDEV = C.G_FILE_ATTRIBUTE_UNIX_RDEV
const FILE_ATTRIBUTE_UNIX_UID = C.G_FILE_ATTRIBUTE_UNIX_UID
const MENU_ATTRIBUTE_ACTION = C.G_MENU_ATTRIBUTE_ACTION
const MENU_ATTRIBUTE_LABEL = C.G_MENU_ATTRIBUTE_LABEL
const MENU_ATTRIBUTE_TARGET = C.G_MENU_ATTRIBUTE_TARGET
const MENU_LINK_SECTION = C.G_MENU_LINK_SECTION
const MENU_LINK_SUBMENU = C.G_MENU_LINK_SUBMENU
const NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = C.G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME
const NETWORK_MONITOR_EXTENSION_POINT_NAME = C.G_NETWORK_MONITOR_EXTENSION_POINT_NAME
const PROXY_EXTENSION_POINT_NAME = C.G_PROXY_EXTENSION_POINT_NAME
const PROXY_RESOLVER_EXTENSION_POINT_NAME = C.G_PROXY_RESOLVER_EXTENSION_POINT_NAME
const TLS_BACKEND_EXTENSION_POINT_NAME = C.G_TLS_BACKEND_EXTENSION_POINT_NAME
const TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = C.G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT
const TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = C.G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
const VFS_EXTENSION_POINT_NAME = C.G_VFS_EXTENSION_POINT_NAME
const VOLUME_IDENTIFIER_KIND_CLASS = C.G_VOLUME_IDENTIFIER_KIND_CLASS
const VOLUME_IDENTIFIER_KIND_HAL_UDI = C.G_VOLUME_IDENTIFIER_KIND_HAL_UDI
const VOLUME_IDENTIFIER_KIND_LABEL = C.G_VOLUME_IDENTIFIER_KIND_LABEL
const VOLUME_IDENTIFIER_KIND_NFS_MOUNT = C.G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT
const VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = C.G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
const VOLUME_IDENTIFIER_KIND_UUID = C.G_VOLUME_IDENTIFIER_KIND_UUID
const VOLUME_MONITOR_EXTENSION_POINT_NAME = C.G_VOLUME_MONITOR_EXTENSION_POINT_NAME
func gcharp2string(str *C.gchar) string {
  return C.GoString((*C.char)(str))
}
func gboolean2bool(b C.gboolean) bool {
  return b == C._true()
}
func gssize2int64(i C.gssize) int64 {
  return int64(i)
}
func gint2int(i C.gint) int {
  return int(i)
}
func guint2uint(i C.guint) uint {
  return uint(i)
}
type FileIconClass C.GFileIconClass
type ApplicationPrivate C.GApplicationPrivate
type UnixMountMonitorClass C.GUnixMountMonitorClass
type SimpleActionGroupPrivate C.GSimpleActionGroupPrivate
type TlsPasswordPrivate C.GTlsPasswordPrivate
type IOStreamClass C.GIOStreamClass
type SettingsClass C.GSettingsClass
type FileIface C.GFileIface
type SocketListenerClass C.GSocketListenerClass
type DBusPropertyInfo C.GDBusPropertyInfo
type FileDescriptorBasedIface C.GFileDescriptorBasedIface
type SocketListenerPrivate C.GSocketListenerPrivate
type TlsServerConnectionInterface C.GTlsServerConnectionInterface
type FileAttributeInfo C.GFileAttributeInfo
type FilenameCompleterClass C.GFilenameCompleterClass
type DBusErrorEntry C.GDBusErrorEntry
type VolumeMonitorClass C.GVolumeMonitorClass
type FilterOutputStreamClass C.GFilterOutputStreamClass
type CancellablePrivate C.GCancellablePrivate
type OutputStreamClass C.GOutputStreamClass
type AppInfoIface C.GAppInfoIface
type AppLaunchContextClass C.GAppLaunchContextClass
type DBusObjectManagerServerClass C.GDBusObjectManagerServerClass
type ProxyAddressEnumeratorClass C.GProxyAddressEnumeratorClass
type FileOutputStreamClass C.GFileOutputStreamClass
type FileInfoClass C.GFileInfoClass
type UnixSocketAddressPrivate C.GUnixSocketAddressPrivate
type IOModuleClass C.GIOModuleClass
type NetworkServicePrivate C.GNetworkServicePrivate
type IconIface C.GIconIface
type ApplicationClass C.GApplicationClass
type UnixInputStreamClass C.GUnixInputStreamClass
type DBusInterfaceSkeletonPrivate C.GDBusInterfaceSkeletonPrivate
type DataOutputStreamClass C.GDataOutputStreamClass
type ActionInterface C.GActionInterface
type SocketServiceClass C.GSocketServiceClass
type MenuModelClass C.GMenuModelClass
type SocketClientClass C.GSocketClientClass
type PermissionPrivate C.GPermissionPrivate
type MenuAttributeIterClass C.GMenuAttributeIterClass
type TcpConnectionPrivate C.GTcpConnectionPrivate
type TlsClientConnectionInterface C.GTlsClientConnectionInterface
type CredentialsClass C.GCredentialsClass
type SettingsSchemaSource C.GSettingsSchemaSource
type RemoteActionGroupInterface C.GRemoteActionGroupInterface
type IOExtension C.GIOExtension
type FileMonitorClass C.GFileMonitorClass
type PollableOutputStreamInterface C.GPollableOutputStreamInterface
type StaticResource C.GStaticResource
type InputStreamClass C.GInputStreamClass
type MemoryOutputStreamClass C.GMemoryOutputStreamClass
type DBusObjectManagerIface C.GDBusObjectManagerIface
type UnixCredentialsMessagePrivate C.GUnixCredentialsMessagePrivate
type FileIOStreamPrivate C.GFileIOStreamPrivate
type InputStreamPrivate C.GInputStreamPrivate
type SocketControlMessagePrivate C.GSocketControlMessagePrivate
type MemoryInputStreamPrivate C.GMemoryInputStreamPrivate
type DBusSignalInfo C.GDBusSignalInfo
type UnixFDListPrivate C.GUnixFDListPrivate
type UnixFDListClass C.GUnixFDListClass
type IOStreamAdapter C.GIOStreamAdapter
type TlsDatabasePrivate C.GTlsDatabasePrivate
type MenuModelPrivate C.GMenuModelPrivate
type NetworkAddressPrivate C.GNetworkAddressPrivate
type ApplicationCommandLineClass C.GApplicationCommandLineClass
type ProxyResolverInterface C.GProxyResolverInterface
type FileEnumeratorPrivate C.GFileEnumeratorPrivate
type DBusObjectSkeletonClass C.GDBusObjectSkeletonClass
type MemoryInputStreamClass C.GMemoryInputStreamClass
type SimpleAsyncResultClass C.GSimpleAsyncResultClass
type UnixConnectionPrivate C.GUnixConnectionPrivate
type FileIOStreamClass C.GFileIOStreamClass
type UnixOutputStreamPrivate C.GUnixOutputStreamPrivate
type BufferedOutputStreamPrivate C.GBufferedOutputStreamPrivate
type ConverterOutputStreamClass C.GConverterOutputStreamClass
type FileMonitorPrivate C.GFileMonitorPrivate
type InetAddressMaskClass C.GInetAddressMaskClass
type FileOutputStreamPrivate C.GFileOutputStreamPrivate
type UnixMountEntry C.GUnixMountEntry
type DBusObjectManagerClientClass C.GDBusObjectManagerClientClass
type DBusObjectProxyPrivate C.GDBusObjectProxyPrivate
type UnixCredentialsMessageClass C.GUnixCredentialsMessageClass
type EmblemClass C.GEmblemClass
type TlsBackendInterface C.GTlsBackendInterface
type SocketConnectableIface C.GSocketConnectableIface
type OutputVector C.GOutputVector
type MountOperationClass C.GMountOperationClass
type SocketConnectionClass C.GSocketConnectionClass
type ProxyAddressPrivate C.GProxyAddressPrivate
type UnixSocketAddressClass C.GUnixSocketAddressClass
type VolumeIface C.GVolumeIface
type IOSchedulerJob C.GIOSchedulerJob
type ResolverClass C.GResolverClass
type TlsConnectionClass C.GTlsConnectionClass
type EmblemedIconPrivate C.GEmblemedIconPrivate
type SocketControlMessageClass C.GSocketControlMessageClass
type TcpWrapperConnectionClass C.GTcpWrapperConnectionClass
type ConverterIface C.GConverterIface
type FilterInputStreamClass C.GFilterInputStreamClass
type DBusInterfaceSkeletonClass C.GDBusInterfaceSkeletonClass
type ThemedIconClass C.GThemedIconClass
type DesktopAppInfoClass C.GDesktopAppInfoClass
type UnixConnectionClass C.GUnixConnectionClass
type InetAddressClass C.GInetAddressClass
type DataInputStreamPrivate C.GDataInputStreamPrivate
type PermissionClass C.GPermissionClass
type CharsetConverterClass C.GCharsetConverterClass
type Resource C.GResource
type UnixInputStreamPrivate C.GUnixInputStreamPrivate
type TlsFileDatabaseInterface C.GTlsFileDatabaseInterface
type DesktopAppInfoLookupIface C.GDesktopAppInfoLookupIface
type TaskClass C.GTaskClass
type SocketAddressClass C.GSocketAddressClass
type MenuLinkIterClass C.GMenuLinkIterClass
type DBusSubtreeVTable C.GDBusSubtreeVTable
type UnixOutputStreamClass C.GUnixOutputStreamClass
type ProxyInterface C.GProxyInterface
type DBusInterfaceVTable C.GDBusInterfaceVTable
type SimpleActionGroupClass C.GSimpleActionGroupClass
type NetworkAddressClass C.GNetworkAddressClass
type ZlibDecompressorClass C.GZlibDecompressorClass
type DBusObjectManagerServerPrivate C.GDBusObjectManagerServerPrivate
type DBusObjectManagerClientPrivate C.GDBusObjectManagerClientPrivate
type VfsClass C.GVfsClass
type TlsPasswordClass C.GTlsPasswordClass
type ConverterInputStreamClass C.GConverterInputStreamClass
type FileInputStreamPrivate C.GFileInputStreamPrivate
type InputVector C.GInputVector
type MountIface C.GMountIface
type SocketServicePrivate C.GSocketServicePrivate
type ActionGroupInterface C.GActionGroupInterface
type AsyncResultIface C.GAsyncResultIface
type DataInputStreamClass C.GDataInputStreamClass
type FileAttributeInfoList C.GFileAttributeInfoList
type MenuLinkIterPrivate C.GMenuLinkIterPrivate
type InetSocketAddressPrivate C.GInetSocketAddressPrivate
type AppLaunchContextPrivate C.GAppLaunchContextPrivate
type PollableInputStreamInterface C.GPollableInputStreamInterface
type ThreadedSocketServiceClass C.GThreadedSocketServiceClass
type SeekableIface C.GSeekableIface
type DBusArgInfo C.GDBusArgInfo
type BufferedInputStreamPrivate C.GBufferedInputStreamPrivate
type DBusMethodInfo C.GDBusMethodInfo
type MenuAttributeIterPrivate C.GMenuAttributeIterPrivate
type InitableIface C.GInitableIface
type SocketClientPrivate C.GSocketClientPrivate
type ActionEntry C.GActionEntry
type AsyncInitableIface C.GAsyncInitableIface
type IOExtensionPoint C.GIOExtensionPoint
type DriveIface C.GDriveIface
type BufferedInputStreamClass C.GBufferedInputStreamClass
type UnixFDMessagePrivate C.GUnixFDMessagePrivate
type SocketAddressEnumeratorClass C.GSocketAddressEnumeratorClass
type DBusProxyPrivate C.GDBusProxyPrivate
type SettingsSchema C.GSettingsSchema
type TcpConnectionClass C.GTcpConnectionClass
type InetAddressMaskPrivate C.GInetAddressMaskPrivate
type DBusObjectProxyClass C.GDBusObjectProxyClass
type DBusInterfaceInfo C.GDBusInterfaceInfo
type OutputStreamPrivate C.GOutputStreamPrivate
type DBusInterfaceIface C.GDBusInterfaceIface
type ConverterOutputStreamPrivate C.GConverterOutputStreamPrivate
type SocketClass C.GSocketClass
type EmblemedIconClass C.GEmblemedIconClass
type TlsInteractionPrivate C.GTlsInteractionPrivate
type NetworkServiceClass C.GNetworkServiceClass
type InetAddressPrivate C.GInetAddressPrivate
type DBusObjectIface C.GDBusObjectIface
type ThreadedSocketServicePrivate C.GThreadedSocketServicePrivate
type MemoryOutputStreamPrivate C.GMemoryOutputStreamPrivate
type ZlibCompressorClass C.GZlibCompressorClass
type NativeVolumeMonitorClass C.GNativeVolumeMonitorClass
type CancellableClass C.GCancellableClass
type SocketConnectionPrivate C.GSocketConnectionPrivate
type DBusObjectSkeletonPrivate C.GDBusObjectSkeletonPrivate
type ActionMapInterface C.GActionMapInterface
type IOStreamPrivate C.GIOStreamPrivate
type FileInputStreamClass C.GFileInputStreamClass
type BufferedOutputStreamClass C.GBufferedOutputStreamClass
type DBusNodeInfo C.GDBusNodeInfo
type ApplicationCommandLinePrivate C.GApplicationCommandLinePrivate
type TlsInteractionClass C.GTlsInteractionClass
type ResolverPrivate C.GResolverPrivate
type SrvTarget C.GSrvTarget
type TlsDatabaseClass C.GTlsDatabaseClass
type SocketPrivate C.GSocketPrivate
type DBusProxyClass C.GDBusProxyClass
type DBusAnnotationInfo C.GDBusAnnotationInfo
type SettingsBackend C.GSettingsBackend
type ProxyAddressEnumeratorPrivate C.GProxyAddressEnumeratorPrivate
type NetworkMonitorInterface C.GNetworkMonitorInterface
type ProxyAddressClass C.GProxyAddressClass
type TlsCertificatePrivate C.GTlsCertificatePrivate
type InetSocketAddressClass C.GInetSocketAddressClass
type UnixFDMessageClass C.GUnixFDMessageClass
type LoadableIconIface C.GLoadableIconIface
type MountOperationPrivate C.GMountOperationPrivate
type ConverterInputStreamPrivate C.GConverterInputStreamPrivate
type FileEnumeratorClass C.GFileEnumeratorClass
type IOModuleScope C.GIOModuleScope
type DataOutputStreamPrivate C.GDataOutputStreamPrivate
type TcpWrapperConnectionPrivate C.GTcpWrapperConnectionPrivate
type TlsConnectionPrivate C.GTlsConnectionPrivate
type TlsCertificateClass C.GTlsCertificateClass
type FileAttributeMatcher C.GFileAttributeMatcher
type SettingsPrivate C.GSettingsPrivate
type UnixMountPoint C.GUnixMountPoint
