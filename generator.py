import StringIO
import platform
import time
from mapping import RETURN_MAPPINGS, PARAM_MAPPINGS, Mapping

class Generator:
  def __init__(self, parser):
    self.parser = parser
    self.out = StringIO.StringIO()

    self.to_go_type_funcs = set()

  def generate(self):
    # package name
    print >>self.out, "// this file is auto-generated by gtk-go\n"
    print >>self.out, "package %s\n" % self.parser.package_name
    # pkg-config packages
    if 'gobject-2.0' not in self.parser.pkgconfig_packages:
      self.parser.pkgconfig_packages.append('gobject-2.0')
    print >>self.out, "// #cgo pkg-config: %s" % ' '.join(self.parser.pkgconfig_packages)
    # basic includes
    print >>self.out, "// #include <string.h>"
    print >>self.out, "// #include <glib-object.h>"
    print >>self.out, "// #include <glib/gstdio.h>"
    # platform specific includes
    system = platform.system()
    if system == 'Linux':
      print >>self.out, "// #include <glib-unix.h>"
    # includes
    for include in self.parser.includes:
      print >>self.out, "// #include <%s>" % include
    print >>self.out, "/*"
    # c functions
    for generator in self.parser.functions:
      if generator.has_c_func:
        print >>self.out, generator.generate_c_func()
    # helper functions
    print >>self.out, 'gboolean glibtrue() { return TRUE; }'
    print >>self.out, 'gboolean glibfalse() { return FALSE; }'
    print >>self.out, "*/"
    # cgo
    print >>self.out, 'import "C"'
    # imports
    print >>self.out, 'import ('
    print >>self.out, '\t"unsafe"'
    #print >>self.out, '\t"runtime"'
    print >>self.out, ')\n'

    self.generate_record_types()
    for generator in self.parser.functions:
      print >>self.out, generator.generate_go_func()
    self.generate_enum_symbols()
    self.generate_const_symbols()

  def write(self, f):
    output_file = open(f, 'w')
    output_file.write(self.out.getvalue())
    output_file.close()

  def generate_enum_symbols(self):
    for symbol in self.parser.enum_symbols:
      go_name = symbol
      for prefix in self.parser.prefixes:
        if symbol.startswith(prefix.upper()):
          go_name = symbol[len(prefix) + 1:]
      print >>self.out, "const %s = C.%s" % (go_name, symbol)

  def generate_const_symbols(self):
    for symbol in self.parser.const_symbols:
      go_name = symbol
      for prefix in self.parser.prefixes:
        if symbol.startswith(prefix.upper()):
          go_name = symbol[len(prefix) + 1:]
      print >>self.out, "const %s = C.%s" % (go_name, symbol)

  def generate_record_types(self):
    for name, c_type in self.parser.gi_types:
      if c_type in self.parser.skip_symbols:
        continue
      print >>self.out, "type %s C.%s" % (name, c_type)
