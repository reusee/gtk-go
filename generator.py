import StringIO
import platform
import time

class Generator:
  def __init__(self, parser):
    self.parser = parser
    self.out = StringIO.StringIO()

    self.to_go_type_funcs = set()

  def generate(self):
    # package name
    print >>self.out, "// this file is auto-generated by gobject-go\n"
    print >>self.out, "package %s\n" % self.parser.package_name
    # pkg-config packages
    if 'gobject-2.0' not in self.parser.pkgconfig_packages:
      self.parser.pkgconfig_packages.append('gobject-2.0')
    print >>self.out, "// #cgo pkg-config: %s" % ' '.join(self.parser.pkgconfig_packages)
    # basic includes
    print >>self.out, "// #include <string.h>"
    print >>self.out, "// #include <glib-object.h>"
    print >>self.out, "// #include <glib/gstdio.h>"
    # platform specific includes
    system = platform.system()
    if system == 'Linux':
      print >>self.out, "// #include <glib-unix.h>"
    # includes
    for include in self.parser.includes:
      print >>self.out, "// #include <%s>" % include
    print >>self.out, "/*"
    # wrappers
    for func in self.parser.functions:
      if func.skip: continue
      if not func.need_helper: continue
      self.generate_helper(func)
    print >>self.out, "*/"
    # cgo
    print >>self.out, 'import "C"'
    # imports
    print >>self.out, 'import ('
    #print >>self.out, '\t"unsafe"'
    #print >>self.out, '\t"runtime"'
    print >>self.out, ')\n'

    #for func in self.parser.functions:
    #  self.generate_function(func)
    self.generate_enum_symbols()
    self.generate_const_symbols()
    self.generate_record_types()

  def write(self, f):
    output_file = open(f, 'w')
    output_file.write(self.out.getvalue())
    output_file.close()

  def generate_function(self, func):
    # not support yet or has problem
    if func.skip:
      self.out.write('//Skipped %s\n\n' % func.c_name)
      return
    elif func.not_implement:
      self.out.write('//FIXME %s\n\n' % func.c_name)
      return

    out = []

    # signature
    if func.is_method:
      out.append('func (self *%s) %s(' % (func.cls, func.go_name))
    else:
      out.append('func %s(' % func.go_name)

    # parameter
    for i, param in enumerate(func.parameters):
      if i > 0: out.append(', ')
      out.append('%s %s' % (param.name, param.go_type))
    out.append(')')

    # return type
    for i, ret in enumerate(func.returns):
      if ret.c_type == 'void':
        if i > 0: out.append(') {\n')
        break
      if i == 0: out.append(' (')
      else: out.append(', ')
      out.append('%s %s' % (ret.name, ret.go_type))
      if i == len(func.returns) - 1:
        out.append(') {\n')

    # return expression
    return_expression = []

    if func.need_helper:
      return_expression.append('C._%s(' % func.c_name)
    else:
      return_expression.append('C.%s(' % func.c_name)

    for i, param in enumerate(func.origin_params):
      if i > 0: return_expression.append(', ')
      return_expression.append(param.name)
    return_expression.append(')')

    if func.void_return:
      out.append('\t%s\n' % ''.join(return_expression))
    else:
      out.append('\t__return__ = %s\n' % ''.join(return_expression))

    out.append('\treturn\n}\n\n')
    self.out.write(''.join(out))

  def generate_helper(self, func):
    out = []
    spec = self.parser.func_spec[func.c_name]

    # return type and function name
    out.append('%s %s(' % (
      spec.return_type,
      '_' + func.c_name,
      ))

    # parameters
    for i, param in enumerate(func.c_parameters):
      if i > 0: out.append(', ')
      out.append(param.c_type + ' ' + param.name)
    out.append(') {\n\t')

    # body
    if spec.return_type != 'void':
      out.append('return ')
    out.append('%s(' % func.c_name)
    for i, param in enumerate(func.c_parameters):
      if i > 0: out.append(', ')
      if spec.arg_types[i] != param.c_type:
        out.append('(%s)(%s)' % (spec.arg_types[i], param.name))
      else:
        out.append(param.name)
    out.append(');\n}\n')
    self.out.write(''.join(out))

  def generate_enum_symbols(self):
    for symbol in self.parser.enum_symbols:
      go_name = symbol
      for prefix in self.parser.prefixes:
        if symbol.startswith(prefix.upper()):
          go_name = symbol[len(prefix) + 1:]
      print >>self.out, "const %s = C.%s" % (go_name, symbol)

  def generate_const_symbols(self):
    for symbol in self.parser.const_symbols:
      go_name = symbol
      for prefix in self.parser.prefixes:
        if symbol.startswith(prefix.upper()):
          go_name = symbol[len(prefix) + 1:]
      print >>self.out, "const %s = C.%s" % (go_name, symbol)

  def generate_macro_helpers(self):
    print >>self.out, "gboolean _true() { return TRUE; }"
    print >>self.out, "gboolean _false() { return FALSE; }"

  def generate_record_types(self):
    for name, c_type in self.parser.construct_records:
      if c_type in self.parser.skip_symbols:
        continue
      print >>self.out, "type %s C.%s" % (name, c_type)
