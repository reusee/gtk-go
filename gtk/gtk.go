// this file is auto-generated by gtk-go

package gtk

// #cgo pkg-config: gtk+-3.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <gtk/gtkx.h>
/*
void _gtk_about_dialog_add_credit_section(GtkAboutDialog * _self_, gchar * section_name, void * people) {
	(void)gtk_about_dialog_add_credit_section(_self_, (const gchar *)(section_name), (const gchar **)(people));
}
void * _gtk_about_dialog_get_artists(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_artists(_self_);
}
void * _gtk_about_dialog_get_authors(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_authors(_self_);
}
gchar * _gtk_about_dialog_get_comments(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_comments(_self_);
}
gchar * _gtk_about_dialog_get_copyright(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_copyright(_self_);
}
void * _gtk_about_dialog_get_documenters(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_documenters(_self_);
}
gchar * _gtk_about_dialog_get_license(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_license(_self_);
}
gchar * _gtk_about_dialog_get_logo_icon_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_logo_icon_name(_self_);
}
gchar * _gtk_about_dialog_get_program_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_program_name(_self_);
}
gchar * _gtk_about_dialog_get_translator_credits(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_translator_credits(_self_);
}
gchar * _gtk_about_dialog_get_version(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_version(_self_);
}
gchar * _gtk_about_dialog_get_website(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website(_self_);
}
gchar * _gtk_about_dialog_get_website_label(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website_label(_self_);
}
void _gtk_about_dialog_set_comments(GtkAboutDialog * _self_, gchar * comments) {
	(void)gtk_about_dialog_set_comments(_self_, (const gchar *)(comments));
}
void _gtk_about_dialog_set_copyright(GtkAboutDialog * _self_, gchar * copyright) {
	(void)gtk_about_dialog_set_copyright(_self_, (const gchar *)(copyright));
}
void _gtk_about_dialog_set_license(GtkAboutDialog * _self_, gchar * license) {
	(void)gtk_about_dialog_set_license(_self_, (const gchar *)(license));
}
void _gtk_about_dialog_set_logo_icon_name(GtkAboutDialog * _self_, gchar * icon_name) {
	(void)gtk_about_dialog_set_logo_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_about_dialog_set_program_name(GtkAboutDialog * _self_, gchar * name) {
	(void)gtk_about_dialog_set_program_name(_self_, (const gchar *)(name));
}
void _gtk_about_dialog_set_translator_credits(GtkAboutDialog * _self_, gchar * translator_credits) {
	(void)gtk_about_dialog_set_translator_credits(_self_, (const gchar *)(translator_credits));
}
void _gtk_about_dialog_set_version(GtkAboutDialog * _self_, gchar * version) {
	(void)gtk_about_dialog_set_version(_self_, (const gchar *)(version));
}
void _gtk_about_dialog_set_website(GtkAboutDialog * _self_, gchar * website) {
	(void)gtk_about_dialog_set_website(_self_, (const gchar *)(website));
}
void _gtk_about_dialog_set_website_label(GtkAboutDialog * _self_, gchar * website_label) {
	(void)gtk_about_dialog_set_website_label(_self_, (const gchar *)(website_label));
}
void _gtk_accel_group_connect_by_path(GtkAccelGroup * _self_, gchar * accel_path, GClosure * closure) {
	(void)gtk_accel_group_connect_by_path(_self_, (const gchar *)(accel_path), closure);
}
GtkWidget * _gtk_accel_label_new(gchar * string) {
	return (GtkWidget *)gtk_accel_label_new((const gchar *)(string));
}
void _gtk_accel_map_add_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods) {
	(void)gtk_accel_map_add_entry((const gchar *)(accel_path), accel_key, accel_mods);
}
void _gtk_accel_map_add_filter(gchar * filter_pattern) {
	(void)gtk_accel_map_add_filter((const gchar *)(filter_pattern));
}
gboolean _gtk_accel_map_change_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace) {
	return (gboolean)gtk_accel_map_change_entry((const gchar *)(accel_path), accel_key, accel_mods, replace);
}
void _gtk_accel_map_load(gchar * file_name) {
	(void)gtk_accel_map_load((const gchar *)(file_name));
}
void _gtk_accel_map_lock_path(gchar * accel_path) {
	(void)gtk_accel_map_lock_path((const gchar *)(accel_path));
}
gboolean _gtk_accel_map_lookup_entry(gchar * accel_path, GtkAccelKey * key) {
	return (gboolean)gtk_accel_map_lookup_entry((const gchar *)(accel_path), key);
}
void _gtk_accel_map_save(gchar * file_name) {
	(void)gtk_accel_map_save((const gchar *)(file_name));
}
void _gtk_accel_map_unlock_path(gchar * accel_path) {
	(void)gtk_accel_map_unlock_path((const gchar *)(accel_path));
}
GtkAction * _gtk_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
gchar * _gtk_action_get_accel_path(GtkAction * _self_) {
	return (gchar *)gtk_action_get_accel_path(_self_);
}
gchar * _gtk_action_get_icon_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_icon_name(_self_);
}
gchar * _gtk_action_get_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_label(_self_);
}
gchar * _gtk_action_get_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_name(_self_);
}
gchar * _gtk_action_get_short_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_short_label(_self_);
}
gchar * _gtk_action_get_stock_id(GtkAction * _self_) {
	return (gchar *)gtk_action_get_stock_id(_self_);
}
gchar * _gtk_action_get_tooltip(GtkAction * _self_) {
	return (gchar *)gtk_action_get_tooltip(_self_);
}
void _gtk_action_set_accel_path(GtkAction * _self_, gchar * accel_path) {
	(void)gtk_action_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_action_set_icon_name(GtkAction * _self_, gchar * icon_name) {
	(void)gtk_action_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_action_set_label(GtkAction * _self_, gchar * label) {
	(void)gtk_action_set_label(_self_, (const gchar *)(label));
}
void _gtk_action_set_short_label(GtkAction * _self_, gchar * short_label) {
	(void)gtk_action_set_short_label(_self_, (const gchar *)(short_label));
}
void _gtk_action_set_stock_id(GtkAction * _self_, gchar * stock_id) {
	(void)gtk_action_set_stock_id(_self_, (const gchar *)(stock_id));
}
void _gtk_action_set_tooltip(GtkAction * _self_, gchar * tooltip) {
	(void)gtk_action_set_tooltip(_self_, (const gchar *)(tooltip));
}
GtkActionGroup * _gtk_action_group_new(gchar * name) {
	return (GtkActionGroup *)gtk_action_group_new((const gchar *)(name));
}
void _gtk_action_group_add_action_with_accel(GtkActionGroup * _self_, GtkAction * action, gchar * accelerator) {
	(void)gtk_action_group_add_action_with_accel(_self_, action, (const gchar *)(accelerator));
}
GtkAction * _gtk_action_group_get_action(GtkActionGroup * _self_, gchar * action_name) {
	return (GtkAction *)gtk_action_group_get_action(_self_, (const gchar *)(action_name));
}
gchar * _gtk_action_group_get_name(GtkActionGroup * _self_) {
	return (gchar *)gtk_action_group_get_name(_self_);
}
void _gtk_action_group_set_translation_domain(GtkActionGroup * _self_, gchar * domain) {
	(void)gtk_action_group_set_translation_domain(_self_, (const gchar *)(domain));
}
gchar * _gtk_action_group_translate_string(GtkActionGroup * _self_, gchar * string) {
	return (gchar *)gtk_action_group_translate_string(_self_, (const gchar *)(string));
}
GtkWidget * _gtk_app_chooser_button_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_button_new((const gchar *)(content_type));
}
void _gtk_app_chooser_button_append_custom_item(GtkAppChooserButton * _self_, gchar * name, gchar * label, GIcon * icon) {
	(void)gtk_app_chooser_button_append_custom_item(_self_, (const gchar *)(name), (const gchar *)(label), icon);
}
gchar * _gtk_app_chooser_button_get_heading(GtkAppChooserButton * _self_) {
	return (gchar *)gtk_app_chooser_button_get_heading(_self_);
}
void _gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton * _self_, gchar * name) {
	(void)gtk_app_chooser_button_set_active_custom_item(_self_, (const gchar *)(name));
}
void _gtk_app_chooser_button_set_heading(GtkAppChooserButton * _self_, gchar * heading) {
	(void)gtk_app_chooser_button_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_dialog_new_for_content_type(GtkWindow * parent, GtkDialogFlags flags, gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_dialog_new_for_content_type(parent, flags, (const gchar *)(content_type));
}
gchar * _gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog * _self_) {
	return (gchar *)gtk_app_chooser_dialog_get_heading(_self_);
}
void _gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog * _self_, gchar * heading) {
	(void)gtk_app_chooser_dialog_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_widget_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_widget_new((const gchar *)(content_type));
}
gchar * _gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget * _self_) {
	return (gchar *)gtk_app_chooser_widget_get_default_text(_self_);
}
void _gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget * _self_, gchar * text) {
	(void)gtk_app_chooser_widget_set_default_text(_self_, (const gchar *)(text));
}
GtkApplication * _gtk_application_new(gchar * application_id, GApplicationFlags flags) {
	return (GtkApplication *)gtk_application_new((const gchar *)(application_id), flags);
}
void _gtk_application_add_accelerator(GtkApplication * _self_, gchar * accelerator, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_add_accelerator(_self_, (const gchar *)(accelerator), (const gchar *)(action_name), parameter);
}
guint _gtk_application_inhibit(GtkApplication * _self_, GtkWindow * window, GtkApplicationInhibitFlags flags, gchar * reason) {
	return (guint)gtk_application_inhibit(_self_, window, flags, (const gchar *)(reason));
}
void _gtk_application_remove_accelerator(GtkApplication * _self_, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_remove_accelerator(_self_, (const gchar *)(action_name), parameter);
}
GtkWidget * _gtk_aspect_frame_new(gchar * label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) {
	return (GtkWidget *)gtk_aspect_frame_new((const gchar *)(label), xalign, yalign, ratio, obey_child);
}
gchar * _gtk_assistant_get_page_title(GtkAssistant * _self_, GtkWidget * page) {
	return (gchar *)gtk_assistant_get_page_title(_self_, page);
}
void _gtk_assistant_set_page_title(GtkAssistant * _self_, GtkWidget * page, gchar * title) {
	(void)gtk_assistant_set_page_title(_self_, page, (const gchar *)(title));
}
GTokenType _gtk_binding_entry_add_signal_from_string(GtkBindingSet * binding_set, gchar * signal_desc) {
	return (GTokenType)gtk_binding_entry_add_signal_from_string(binding_set, (const gchar *)(signal_desc));
}
void _gtk_binding_entry_add_signall(GtkBindingSet * binding_set, guint keyval, GdkModifierType modifiers, gchar * signal_name, GSList * binding_args) {
	(void)gtk_binding_entry_add_signall(binding_set, keyval, modifiers, (const gchar *)(signal_name), binding_args);
}
GtkBindingSet * _gtk_binding_set_find(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_find((const gchar *)(set_name));
}
GtkBindingSet * _gtk_binding_set_new(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_new((const gchar *)(set_name));
}
GtkBorder * _gtk_border_copy(GtkBorder * _self_) {
	return (GtkBorder *)gtk_border_copy((const GtkBorder *)(_self_));
}
guint _gtk_builder_add_from_file(GtkBuilder * _self_, gchar * filename, void * error) {
	return (guint)gtk_builder_add_from_file(_self_, (const gchar *)(filename), (GError **)(error));
}
guint _gtk_builder_add_from_resource(GtkBuilder * _self_, gchar * resource_path, void * error) {
	return (guint)gtk_builder_add_from_resource(_self_, (const gchar *)(resource_path), (GError **)(error));
}
guint _gtk_builder_add_from_string(GtkBuilder * _self_, gchar * buffer, gsize length, void * error) {
	return (guint)gtk_builder_add_from_string(_self_, (const gchar *)(buffer), length, (GError **)(error));
}
GObject * _gtk_builder_get_object(GtkBuilder * _self_, gchar * name) {
	return (GObject *)gtk_builder_get_object(_self_, (const gchar *)(name));
}
gchar * _gtk_builder_get_translation_domain(GtkBuilder * _self_) {
	return (gchar *)gtk_builder_get_translation_domain(_self_);
}
GType _gtk_builder_get_type_from_name(GtkBuilder * _self_, char * type_name) {
	return (GType)gtk_builder_get_type_from_name(_self_, (const char *)(type_name));
}
void _gtk_builder_set_translation_domain(GtkBuilder * _self_, gchar * domain) {
	(void)gtk_builder_set_translation_domain(_self_, (const gchar *)(domain));
}
gboolean _gtk_builder_value_from_string(GtkBuilder * _self_, GParamSpec * pspec, gchar * string, GValue * value, void * error) {
	return (gboolean)gtk_builder_value_from_string(_self_, pspec, (const gchar *)(string), value, (GError **)(error));
}
gboolean _gtk_builder_value_from_string_type(GtkBuilder * _self_, GType type, gchar * string, GValue * value, void * error) {
	return (gboolean)gtk_builder_value_from_string_type(_self_, type, (const gchar *)(string), value, (GError **)(error));
}
GtkWidget * _gtk_button_new_from_stock(gchar * stock_id) {
	return (GtkWidget *)gtk_button_new_from_stock((const gchar *)(stock_id));
}
GtkWidget * _gtk_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_button_get_label(GtkButton * _self_) {
	return (gchar *)gtk_button_get_label(_self_);
}
void _gtk_button_set_label(GtkButton * _self_, gchar * label) {
	(void)gtk_button_set_label(_self_, (const gchar *)(label));
}
gboolean _gtk_cell_area_activate(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean edit_only) {
	return (gboolean)gtk_cell_area_activate(_self_, context, widget, (const GdkRectangle *)(cell_area), flags, edit_only);
}
gboolean _gtk_cell_area_activate_cell(GtkCellArea * _self_, GtkWidget * widget, GtkCellRenderer * renderer, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_area_activate_cell(_self_, widget, renderer, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_attribute_connect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute, gint column) {
	(void)gtk_cell_area_attribute_connect(_self_, renderer, (const gchar *)(attribute), column);
}
void _gtk_cell_area_attribute_disconnect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute) {
	(void)gtk_cell_area_attribute_disconnect(_self_, renderer, (const gchar *)(attribute));
}
void _gtk_cell_area_cell_get_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_get_property(_self_, renderer, (const gchar *)(property_name), value);
}
void _gtk_cell_area_cell_set_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_set_property(_self_, renderer, (const gchar *)(property_name), (const GValue *)(value));
}
gint _gtk_cell_area_event(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gint)gtk_cell_area_event(_self_, context, widget, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_foreach_alloc(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * background_area, GtkCellAllocCallback callback, gpointer callback_data) {
	(void)gtk_cell_area_foreach_alloc(_self_, context, widget, (const GdkRectangle *)(cell_area), (const GdkRectangle *)(background_area), callback, callback_data);
}
void _gtk_cell_area_get_cell_allocation(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GtkCellRenderer * renderer, GdkRectangle * cell_area, GdkRectangle * allocation) {
	(void)gtk_cell_area_get_cell_allocation(_self_, context, widget, renderer, (const GdkRectangle *)(cell_area), allocation);
}
GtkCellRenderer * _gtk_cell_area_get_cell_at_position(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, gint x, gint y, GdkRectangle * alloc_area) {
	return (GtkCellRenderer *)gtk_cell_area_get_cell_at_position(_self_, context, widget, (const GdkRectangle *)(cell_area), x, y, alloc_area);
}
gchar * _gtk_cell_area_get_current_path_string(GtkCellArea * _self_) {
	return (gchar *)gtk_cell_area_get_current_path_string(_self_);
}
GList * _gtk_cell_area_get_focus_siblings(GtkCellArea * _self_, GtkCellRenderer * renderer) {
	return (GList *)gtk_cell_area_get_focus_siblings(_self_, renderer);
}
void _gtk_cell_area_inner_cell_area(GtkCellArea * _self_, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * inner_area) {
	(void)gtk_cell_area_inner_cell_area(_self_, widget, (const GdkRectangle *)(cell_area), inner_area);
}
void _gtk_cell_area_render(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, cairo_t * cr, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean paint_focus) {
	(void)gtk_cell_area_render(_self_, context, widget, cr, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags, paint_focus);
}
GParamSpec * _gtk_cell_area_class_find_cell_property(GtkCellAreaClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_cell_area_class_find_cell_property(_self_, (const gchar *)(property_name));
}
void * _gtk_cell_area_class_list_cell_properties(GtkCellAreaClass * _self_, guint * n_properties) {
	return (void *)gtk_cell_area_class_list_cell_properties(_self_, n_properties);
}
gboolean _gtk_cell_renderer_activate(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_renderer_activate(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_get_aligned_area(GtkCellRenderer * _self_, GtkWidget * widget, GtkCellRendererState flags, GdkRectangle * cell_area, GdkRectangle * aligned_area) {
	(void)gtk_cell_renderer_get_aligned_area(_self_, widget, flags, (const GdkRectangle *)(cell_area), aligned_area);
}
void _gtk_cell_renderer_render(GtkCellRenderer * _self_, cairo_t * cr, GtkWidget * widget, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	(void)gtk_cell_renderer_render(_self_, cr, widget, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkCellEditable * _gtk_cell_renderer_start_editing(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (GtkCellEditable *)gtk_cell_renderer_start_editing(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkWidget * _gtk_cell_view_new_with_markup(gchar * markup) {
	return (GtkWidget *)gtk_cell_view_new_with_markup((const gchar *)(markup));
}
GtkWidget * _gtk_cell_view_new_with_text(gchar * text) {
	return (GtkWidget *)gtk_cell_view_new_with_text((const gchar *)(text));
}
void _gtk_cell_view_set_background_rgba(GtkCellView * _self_, GdkRGBA * rgba) {
	(void)gtk_cell_view_set_background_rgba(_self_, (const GdkRGBA *)(rgba));
}
GtkWidget * _gtk_check_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_mnemonic((const gchar *)(label));
}
void _gtk_clipboard_set_text(GtkClipboard * _self_, gchar * text, gint len) {
	(void)gtk_clipboard_set_text(_self_, (const gchar *)(text), len);
}
void * _gtk_clipboard_wait_for_uris(GtkClipboard * _self_) {
	return (void *)gtk_clipboard_wait_for_uris(_self_);
}
GtkWidget * _gtk_color_button_new_with_rgba(GdkRGBA * rgba) {
	return (GtkWidget *)gtk_color_button_new_with_rgba((const GdkRGBA *)(rgba));
}
gchar * _gtk_color_button_get_title(GtkColorButton * _self_) {
	return (gchar *)gtk_color_button_get_title(_self_);
}
void _gtk_color_button_set_title(GtkColorButton * _self_, gchar * title) {
	(void)gtk_color_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_color_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_color_chooser_dialog_new((const gchar *)(title), parent);
}
gchar * _gtk_combo_box_get_active_id(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_active_id(_self_);
}
gchar * _gtk_combo_box_get_title(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_title(_self_);
}
gboolean _gtk_combo_box_set_active_id(GtkComboBox * _self_, gchar * active_id) {
	return (gboolean)gtk_combo_box_set_active_id(_self_, (const gchar *)(active_id));
}
void _gtk_combo_box_set_title(GtkComboBox * _self_, gchar * title) {
	(void)gtk_combo_box_set_title(_self_, (const gchar *)(title));
}
void _gtk_combo_box_text_append(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_append(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_append_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_append_text(_self_, (const gchar *)(text));
}
void _gtk_combo_box_text_insert(GtkComboBoxText * _self_, gint position, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_insert(_self_, position, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_insert_text(GtkComboBoxText * _self_, gint position, gchar * text) {
	(void)gtk_combo_box_text_insert_text(_self_, position, (const gchar *)(text));
}
void _gtk_combo_box_text_prepend(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_prepend(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_prepend_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_prepend_text(_self_, (const gchar *)(text));
}
void _gtk_container_child_get_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_get_property(_self_, child, (const gchar *)(property_name), value);
}
void _gtk_container_child_notify(GtkContainer * _self_, GtkWidget * child, gchar * child_property) {
	(void)gtk_container_child_notify(_self_, child, (const gchar *)(child_property));
}
void _gtk_container_child_set_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_set_property(_self_, child, (const gchar *)(property_name), (const GValue *)(value));
}
gboolean _gtk_container_get_focus_chain(GtkContainer * _self_, void * focusable_widgets) {
	return (gboolean)gtk_container_get_focus_chain(_self_, (GList **)(focusable_widgets));
}
GParamSpec * _gtk_container_class_find_child_property(GtkContainerClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_container_class_find_child_property((GObjectClass *)(_self_), (const gchar *)(property_name));
}
void * _gtk_container_class_list_child_properties(GtkContainerClass * _self_, guint * n_properties) {
	return (void *)gtk_container_class_list_child_properties((GObjectClass *)(_self_), n_properties);
}
GtkCssProvider * _gtk_css_provider_get_named(gchar * name, gchar * variant) {
	return (GtkCssProvider *)gtk_css_provider_get_named((const gchar *)(name), (const gchar *)(variant));
}
gboolean _gtk_css_provider_load_from_file(GtkCssProvider * _self_, GFile * file, void * error) {
	return (gboolean)gtk_css_provider_load_from_file(_self_, file, (GError **)(error));
}
gboolean _gtk_css_provider_load_from_path(GtkCssProvider * _self_, gchar * path, void * error) {
	return (gboolean)gtk_css_provider_load_from_path(_self_, (const gchar *)(path), (GError **)(error));
}
guint _gtk_css_section_get_end_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_end_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_position((const GtkCssSection *)(_self_));
}
GFile * _gtk_css_section_get_file(GtkCssSection * _self_) {
	return (GFile *)gtk_css_section_get_file((const GtkCssSection *)(_self_));
}
GtkCssSection * _gtk_css_section_get_parent(GtkCssSection * _self_) {
	return (GtkCssSection *)gtk_css_section_get_parent((const GtkCssSection *)(_self_));
}
GtkCssSectionType _gtk_css_section_get_section_type(GtkCssSection * _self_) {
	return (GtkCssSectionType)gtk_css_section_get_section_type((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_position((const GtkCssSection *)(_self_));
}
GtkWidget * _gtk_dialog_add_button(GtkDialog * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_dialog_add_button(_self_, (const gchar *)(button_text), response_id);
}
gchar * _gtk_entry_get_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_name(_self_, icon_pos);
}
gchar * _gtk_entry_get_icon_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_stock(_self_, icon_pos);
}
gchar * _gtk_entry_get_placeholder_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_placeholder_text(_self_);
}
gchar * _gtk_entry_get_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_text(_self_);
}
void _gtk_entry_set_icon_from_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * icon_name) {
	(void)gtk_entry_set_icon_from_icon_name(_self_, icon_pos, (const gchar *)(icon_name));
}
void _gtk_entry_set_icon_from_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * stock_id) {
	(void)gtk_entry_set_icon_from_stock(_self_, icon_pos, (const gchar *)(stock_id));
}
void _gtk_entry_set_icon_tooltip_markup(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_markup(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_icon_tooltip_text(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_text(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_placeholder_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_placeholder_text(_self_, (const gchar *)(text));
}
void _gtk_entry_set_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_text(_self_, (const gchar *)(text));
}
GtkEntryBuffer * _gtk_entry_buffer_new(gchar * initial_chars, gint n_initial_chars) {
	return (GtkEntryBuffer *)gtk_entry_buffer_new((const gchar *)(initial_chars), n_initial_chars);
}
void _gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer * _self_, guint position, gchar * chars, guint n_chars) {
	(void)gtk_entry_buffer_emit_inserted_text(_self_, position, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_buffer_get_text(GtkEntryBuffer * _self_) {
	return (gchar *)gtk_entry_buffer_get_text(_self_);
}
guint _gtk_entry_buffer_insert_text(GtkEntryBuffer * _self_, guint position, gchar * chars, gint n_chars) {
	return (guint)gtk_entry_buffer_insert_text(_self_, position, (const gchar *)(chars), n_chars);
}
void _gtk_entry_buffer_set_text(GtkEntryBuffer * _self_, gchar * chars, gint n_chars) {
	(void)gtk_entry_buffer_set_text(_self_, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_completion_compute_prefix(GtkEntryCompletion * _self_, char * key) {
	return (gchar *)gtk_entry_completion_compute_prefix(_self_, (const char *)(key));
}
gchar * _gtk_entry_completion_get_completion_prefix(GtkEntryCompletion * _self_) {
	return (gchar *)gtk_entry_completion_get_completion_prefix(_self_);
}
void _gtk_entry_completion_insert_action_markup(GtkEntryCompletion * _self_, gint index_, gchar * markup) {
	(void)gtk_entry_completion_insert_action_markup(_self_, index_, (const gchar *)(markup));
}
void _gtk_entry_completion_insert_action_text(GtkEntryCompletion * _self_, gint index_, gchar * text) {
	(void)gtk_entry_completion_insert_action_text(_self_, index_, (const gchar *)(text));
}
GtkWidget * _gtk_expander_new(gchar * label) {
	return (GtkWidget *)gtk_expander_new((const gchar *)(label));
}
GtkWidget * _gtk_expander_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_expander_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_expander_get_label(GtkExpander * _self_) {
	return (gchar *)gtk_expander_get_label(_self_);
}
void _gtk_expander_set_label(GtkExpander * _self_, gchar * label) {
	(void)gtk_expander_set_label(_self_, (const gchar *)(label));
}
GtkWidget * _gtk_file_chooser_button_new(gchar * title, GtkFileChooserAction action) {
	return (GtkWidget *)gtk_file_chooser_button_new((const gchar *)(title), action);
}
gchar * _gtk_file_chooser_button_get_title(GtkFileChooserButton * _self_) {
	return (gchar *)gtk_file_chooser_button_get_title(_self_);
}
void _gtk_file_chooser_button_set_title(GtkFileChooserButton * _self_, gchar * title) {
	(void)gtk_file_chooser_button_set_title(_self_, (const gchar *)(title));
}
void _gtk_file_filter_add_mime_type(GtkFileFilter * _self_, gchar * mime_type) {
	(void)gtk_file_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_file_filter_add_pattern(GtkFileFilter * _self_, gchar * pattern) {
	(void)gtk_file_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_file_filter_filter(GtkFileFilter * _self_, GtkFileFilterInfo * filter_info) {
	return (gboolean)gtk_file_filter_filter(_self_, (const GtkFileFilterInfo *)(filter_info));
}
gchar * _gtk_file_filter_get_name(GtkFileFilter * _self_) {
	return (gchar *)gtk_file_filter_get_name(_self_);
}
void _gtk_file_filter_set_name(GtkFileFilter * _self_, gchar * name) {
	(void)gtk_file_filter_set_name(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_font_button_new_with_font(gchar * fontname) {
	return (GtkWidget *)gtk_font_button_new_with_font((const gchar *)(fontname));
}
gchar * _gtk_font_button_get_font_name(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_font_name(_self_);
}
gchar * _gtk_font_button_get_title(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_title(_self_);
}
gboolean _gtk_font_button_set_font_name(GtkFontButton * _self_, gchar * fontname) {
	return (gboolean)gtk_font_button_set_font_name(_self_, (const gchar *)(fontname));
}
void _gtk_font_button_set_title(GtkFontButton * _self_, gchar * title) {
	(void)gtk_font_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_font_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_font_chooser_dialog_new((const gchar *)(title), parent);
}
GtkWidget * _gtk_frame_new(gchar * label) {
	return (GtkWidget *)gtk_frame_new((const gchar *)(label));
}
gchar * _gtk_frame_get_label(GtkFrame * _self_) {
	return (gchar *)gtk_frame_get_label(_self_);
}
void _gtk_frame_set_label(GtkFrame * _self_, gchar * label) {
	(void)gtk_frame_set_label(_self_, (const gchar *)(label));
}
gboolean _gtk_gradient_resolve(GtkGradient * _self_, GtkStyleProperties * props, void * resolved_gradient) {
	return (gboolean)gtk_gradient_resolve(_self_, props, (cairo_pattern_t **)(resolved_gradient));
}
void _gtk_im_context_get_preedit_string(GtkIMContext * _self_, void * str, void * attrs, gint * cursor_pos) {
	(void)gtk_im_context_get_preedit_string(_self_, (gchar **)(str), (PangoAttrList **)(attrs), cursor_pos);
}
gboolean _gtk_im_context_get_surrounding(GtkIMContext * _self_, void * text, gint * cursor_index) {
	return (gboolean)gtk_im_context_get_surrounding(_self_, (gchar **)(text), cursor_index);
}
void _gtk_im_context_set_cursor_location(GtkIMContext * _self_, GdkRectangle * area) {
	(void)gtk_im_context_set_cursor_location(_self_, (const GdkRectangle *)(area));
}
void _gtk_im_context_set_surrounding(GtkIMContext * _self_, gchar * text, gint len, gint cursor_index) {
	(void)gtk_im_context_set_surrounding(_self_, (const gchar *)(text), len, cursor_index);
}
char * _gtk_im_multicontext_get_context_id(GtkIMMulticontext * _self_) {
	return (char *)gtk_im_multicontext_get_context_id(_self_);
}
void _gtk_im_multicontext_set_context_id(GtkIMMulticontext * _self_, char * context_id) {
	(void)gtk_im_multicontext_set_context_id(_self_, (const char *)(context_id));
}
GtkIconSet * _gtk_icon_factory_lookup_default(gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup_default((const gchar *)(stock_id));
}
void _gtk_icon_factory_add(GtkIconFactory * _self_, gchar * stock_id, GtkIconSet * icon_set) {
	(void)gtk_icon_factory_add(_self_, (const gchar *)(stock_id), icon_set);
}
GtkIconSet * _gtk_icon_factory_lookup(GtkIconFactory * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup(_self_, (const gchar *)(stock_id));
}
gchar * _gtk_icon_info_get_display_name(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_display_name(_self_);
}
gchar * _gtk_icon_info_get_filename(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_filename(_self_);
}
GdkPixbuf * _gtk_icon_info_load_icon(GtkIconInfo * _self_, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_icon(_self_, (GError **)(error));
}
GdkPixbuf * _gtk_icon_info_load_symbolic(GtkIconInfo * _self_, GdkRGBA * fg, GdkRGBA * success_color, GdkRGBA * warning_color, GdkRGBA * error_color, gboolean * was_symbolic, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic(_self_, (const GdkRGBA *)(fg), (const GdkRGBA *)(success_color), (const GdkRGBA *)(warning_color), (const GdkRGBA *)(error_color), was_symbolic, (GError **)(error));
}
GdkPixbuf * _gtk_icon_info_load_symbolic_for_context(GtkIconInfo * _self_, GtkStyleContext * context, gboolean * was_symbolic, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic_for_context(_self_, context, was_symbolic, (GError **)(error));
}
void _gtk_icon_set_add_source(GtkIconSet * _self_, GtkIconSource * source) {
	(void)gtk_icon_set_add_source(_self_, (const GtkIconSource *)(source));
}
GtkIconSource * _gtk_icon_source_copy(GtkIconSource * _self_) {
	return (GtkIconSource *)gtk_icon_source_copy((const GtkIconSource *)(_self_));
}
GtkTextDirection _gtk_icon_source_get_direction(GtkIconSource * _self_) {
	return (GtkTextDirection)gtk_icon_source_get_direction((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_direction_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_direction_wildcarded((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_filename(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_filename((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_icon_name(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_icon_name((const GtkIconSource *)(_self_));
}
GdkPixbuf * _gtk_icon_source_get_pixbuf(GtkIconSource * _self_) {
	return (GdkPixbuf *)gtk_icon_source_get_pixbuf((const GtkIconSource *)(_self_));
}
GtkIconSize _gtk_icon_source_get_size(GtkIconSource * _self_) {
	return (GtkIconSize)gtk_icon_source_get_size((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_size_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_size_wildcarded((const GtkIconSource *)(_self_));
}
GtkStateType _gtk_icon_source_get_state(GtkIconSource * _self_) {
	return (GtkStateType)gtk_icon_source_get_state((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_state_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_state_wildcarded((const GtkIconSource *)(_self_));
}
void _gtk_icon_source_set_filename(GtkIconSource * _self_, gchar * filename) {
	(void)gtk_icon_source_set_filename(_self_, (const gchar *)(filename));
}
void _gtk_icon_source_set_icon_name(GtkIconSource * _self_, gchar * icon_name) {
	(void)gtk_icon_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_icon_theme_add_builtin_icon(gchar * icon_name, gint size, GdkPixbuf * pixbuf) {
	(void)gtk_icon_theme_add_builtin_icon((const gchar *)(icon_name), size, pixbuf);
}
void _gtk_icon_theme_append_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_append_search_path(_self_, (const gchar *)(path));
}
gint * _gtk_icon_theme_get_icon_sizes(GtkIconTheme * _self_, gchar * icon_name) {
	return (gint *)gtk_icon_theme_get_icon_sizes(_self_, (const gchar *)(icon_name));
}
gboolean _gtk_icon_theme_has_icon(GtkIconTheme * _self_, gchar * icon_name) {
	return (gboolean)gtk_icon_theme_has_icon(_self_, (const gchar *)(icon_name));
}
GList * _gtk_icon_theme_list_icons(GtkIconTheme * _self_, gchar * context) {
	return (GList *)gtk_icon_theme_list_icons(_self_, (const gchar *)(context));
}
GdkPixbuf * _gtk_icon_theme_load_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags, void * error) {
	return (GdkPixbuf *)gtk_icon_theme_load_icon(_self_, (const gchar *)(icon_name), size, flags, (GError **)(error));
}
GtkIconInfo * _gtk_icon_theme_lookup_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags) {
	return (GtkIconInfo *)gtk_icon_theme_lookup_icon(_self_, (const gchar *)(icon_name), size, flags);
}
void _gtk_icon_theme_prepend_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_prepend_search_path(_self_, (const gchar *)(path));
}
void _gtk_icon_theme_set_custom_theme(GtkIconTheme * _self_, gchar * theme_name) {
	(void)gtk_icon_theme_set_custom_theme(_self_, (const gchar *)(theme_name));
}
gboolean _gtk_icon_view_get_cursor(GtkIconView * _self_, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_dest_item_at_pos(GtkIconView * _self_, gint drag_x, gint drag_y, void * path, GtkIconViewDropPosition * pos) {
	return (gboolean)gtk_icon_view_get_dest_item_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_icon_view_get_drag_dest_item(GtkIconView * _self_, void * path, GtkIconViewDropPosition * pos) {
	(void)gtk_icon_view_get_drag_dest_item(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_icon_view_get_item_at_pos(GtkIconView * _self_, gint x, gint y, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_item_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_visible_range(GtkIconView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_icon_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
GtkWidget * _gtk_image_new_from_file(gchar * filename) {
	return (GtkWidget *)gtk_image_new_from_file((const gchar *)(filename));
}
GtkWidget * _gtk_image_new_from_icon_name(gchar * icon_name, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_icon_name((const gchar *)(icon_name), size);
}
GtkWidget * _gtk_image_new_from_resource(gchar * resource_path) {
	return (GtkWidget *)gtk_image_new_from_resource((const gchar *)(resource_path));
}
GtkWidget * _gtk_image_new_from_stock(gchar * stock_id, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_stock((const gchar *)(stock_id), size);
}
void _gtk_image_get_gicon(GtkImage * _self_, void * gicon, GtkIconSize * size) {
	(void)gtk_image_get_gicon(_self_, (GIcon **)(gicon), size);
}
void _gtk_image_get_icon_name(GtkImage * _self_, void * icon_name, GtkIconSize * size) {
	(void)gtk_image_get_icon_name(_self_, (const gchar **)(icon_name), size);
}
void _gtk_image_get_icon_set(GtkImage * _self_, void * icon_set, GtkIconSize * size) {
	(void)gtk_image_get_icon_set(_self_, (GtkIconSet **)(icon_set), size);
}
void _gtk_image_get_stock(GtkImage * _self_, void * stock_id, GtkIconSize * size) {
	(void)gtk_image_get_stock(_self_, (gchar **)(stock_id), size);
}
void _gtk_image_set_from_file(GtkImage * _self_, gchar * filename) {
	(void)gtk_image_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_image_set_from_icon_name(GtkImage * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_image_set_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_image_set_from_resource(GtkImage * _self_, gchar * resource_path) {
	(void)gtk_image_set_from_resource(_self_, (const gchar *)(resource_path));
}
void _gtk_image_set_from_stock(GtkImage * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_image_set_from_stock(_self_, (const gchar *)(stock_id), size);
}
GtkWidget * _gtk_image_menu_item_new_from_stock(gchar * stock_id, GtkAccelGroup * accel_group) {
	return (GtkWidget *)gtk_image_menu_item_new_from_stock((const gchar *)(stock_id), accel_group);
}
GtkWidget * _gtk_image_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_image_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_info_bar_add_button(GtkInfoBar * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_info_bar_add_button(_self_, (const gchar *)(button_text), response_id);
}
GtkWidget * _gtk_label_new(gchar * str) {
	return (GtkWidget *)gtk_label_new((const gchar *)(str));
}
GtkWidget * _gtk_label_new_with_mnemonic(gchar * str) {
	return (GtkWidget *)gtk_label_new_with_mnemonic((const gchar *)(str));
}
gchar * _gtk_label_get_current_uri(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_current_uri(_self_);
}
gchar * _gtk_label_get_label(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_label(_self_);
}
gchar * _gtk_label_get_text(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_text(_self_);
}
void _gtk_label_set_label(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_label(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_label_set_pattern(GtkLabel * _self_, gchar * pattern) {
	(void)gtk_label_set_pattern(_self_, (const gchar *)(pattern));
}
void _gtk_label_set_text(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text(_self_, (const gchar *)(str));
}
void _gtk_label_set_text_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_level_bar_add_offset_value(GtkLevelBar * _self_, gchar * name, gdouble value) {
	(void)gtk_level_bar_add_offset_value(_self_, (const gchar *)(name), value);
}
gboolean _gtk_level_bar_get_offset_value(GtkLevelBar * _self_, gchar * name, gdouble * value) {
	return (gboolean)gtk_level_bar_get_offset_value(_self_, (const gchar *)(name), value);
}
void _gtk_level_bar_remove_offset_value(GtkLevelBar * _self_, gchar * name) {
	(void)gtk_level_bar_remove_offset_value(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_link_button_new(gchar * uri) {
	return (GtkWidget *)gtk_link_button_new((const gchar *)(uri));
}
GtkWidget * _gtk_link_button_new_with_label(gchar * uri, gchar * label) {
	return (GtkWidget *)gtk_link_button_new_with_label((const gchar *)(uri), (const gchar *)(label));
}
gchar * _gtk_link_button_get_uri(GtkLinkButton * _self_) {
	return (gchar *)gtk_link_button_get_uri(_self_);
}
void _gtk_link_button_set_uri(GtkLinkButton * _self_, gchar * uri) {
	(void)gtk_link_button_set_uri(_self_, (const gchar *)(uri));
}
gchar * _gtk_menu_get_accel_path(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_accel_path(_self_);
}
gchar * _gtk_menu_get_title(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_title(_self_);
}
void _gtk_menu_set_accel_path(GtkMenu * _self_, gchar * accel_path) {
	(void)gtk_menu_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_set_title(GtkMenu * _self_, gchar * title) {
	(void)gtk_menu_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_menu_item_get_accel_path(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_accel_path(_self_);
}
gchar * _gtk_menu_item_get_label(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_label(_self_);
}
void _gtk_menu_item_set_accel_path(GtkMenuItem * _self_, gchar * accel_path) {
	(void)gtk_menu_item_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_item_set_label(GtkMenuItem * _self_, gchar * label) {
	(void)gtk_menu_item_set_label(_self_, (const gchar *)(label));
}
void _gtk_menu_shell_bind_model(GtkMenuShell * _self_, GMenuModel * model, gchar * action_namespace, gboolean with_separators) {
	(void)gtk_menu_shell_bind_model(_self_, model, (const gchar *)(action_namespace), with_separators);
}
GtkToolItem * _gtk_menu_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_menu_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_menu_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_menu_tool_button_new_from_stock((const gchar *)(stock_id));
}
void _gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton * _self_, gchar * markup) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton * _self_, gchar * text) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_message_dialog_set_markup(GtkMessageDialog * _self_, gchar * str) {
	(void)gtk_message_dialog_set_markup(_self_, (const gchar *)(str));
}
gchar * _gtk_notebook_get_group_name(GtkNotebook * _self_) {
	return (gchar *)gtk_notebook_get_group_name(_self_);
}
gchar * _gtk_notebook_get_menu_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_menu_label_text(_self_, child);
}
gchar * _gtk_notebook_get_tab_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_tab_label_text(_self_, child);
}
void _gtk_notebook_set_group_name(GtkNotebook * _self_, gchar * group_name) {
	(void)gtk_notebook_set_group_name(_self_, (const gchar *)(group_name));
}
void _gtk_notebook_set_menu_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * menu_text) {
	(void)gtk_notebook_set_menu_label_text(_self_, child, (const gchar *)(menu_text));
}
void _gtk_notebook_set_tab_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * tab_text) {
	(void)gtk_notebook_set_tab_label_text(_self_, child, (const gchar *)(tab_text));
}
gchar * _gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_background_icon_name(_self_);
}
gchar * _gtk_numerable_icon_get_label(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_label(_self_);
}
void _gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon * _self_, gchar * icon_name) {
	(void)gtk_numerable_icon_set_background_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_numerable_icon_set_label(GtkNumerableIcon * _self_, gchar * label) {
	(void)gtk_numerable_icon_set_label(_self_, (const gchar *)(label));
}
GtkPageSetup * _gtk_page_setup_new_from_file(gchar * file_name, void * error) {
	return (GtkPageSetup *)gtk_page_setup_new_from_file((const gchar *)(file_name), (GError **)(error));
}
GtkPageSetup * _gtk_page_setup_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPageSetup *)gtk_page_setup_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
gboolean _gtk_page_setup_load_file(GtkPageSetup * _self_, char * file_name, void * error) {
	return (gboolean)gtk_page_setup_load_file(_self_, (const char *)(file_name), (GError **)(error));
}
gboolean _gtk_page_setup_load_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name, void * error) {
	return (gboolean)gtk_page_setup_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(error));
}
gboolean _gtk_page_setup_to_file(GtkPageSetup * _self_, char * file_name, void * error) {
	return (gboolean)gtk_page_setup_to_file(_self_, (const char *)(file_name), (GError **)(error));
}
void _gtk_page_setup_to_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_page_setup_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
GtkPaperSize * _gtk_paper_size_new(gchar * name) {
	return (GtkPaperSize *)gtk_paper_size_new((const gchar *)(name));
}
GtkPaperSize * _gtk_paper_size_new_custom(gchar * name, gchar * display_name, gdouble width, gdouble height, GtkUnit unit) {
	return (GtkPaperSize *)gtk_paper_size_new_custom((const gchar *)(name), (const gchar *)(display_name), width, height, unit);
}
GtkPaperSize * _gtk_paper_size_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPaperSize *)gtk_paper_size_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
GtkPaperSize * _gtk_paper_size_new_from_ppd(gchar * ppd_name, gchar * ppd_display_name, gdouble width, gdouble height) {
	return (GtkPaperSize *)gtk_paper_size_new_from_ppd((const gchar *)(ppd_name), (const gchar *)(ppd_display_name), width, height);
}
gchar * _gtk_paper_size_get_default() {
	return (gchar *)gtk_paper_size_get_default();
}
gchar * _gtk_paper_size_get_display_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_display_name(_self_);
}
gchar * _gtk_paper_size_get_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_name(_self_);
}
gchar * _gtk_paper_size_get_ppd_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_ppd_name(_self_);
}
void _gtk_paper_size_to_key_file(GtkPaperSize * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_paper_size_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_operation_get_error(GtkPrintOperation * _self_, void * error) {
	(void)gtk_print_operation_get_error(_self_, (GError **)(error));
}
gchar * _gtk_print_operation_get_status_string(GtkPrintOperation * _self_) {
	return (gchar *)gtk_print_operation_get_status_string(_self_);
}
GtkPrintOperationResult _gtk_print_operation_run(GtkPrintOperation * _self_, GtkPrintOperationAction action, GtkWindow * parent, void * error) {
	return (GtkPrintOperationResult)gtk_print_operation_run(_self_, action, parent, (GError **)(error));
}
void _gtk_print_operation_set_custom_tab_label(GtkPrintOperation * _self_, gchar * label) {
	(void)gtk_print_operation_set_custom_tab_label(_self_, (const gchar *)(label));
}
void _gtk_print_operation_set_export_filename(GtkPrintOperation * _self_, gchar * filename) {
	(void)gtk_print_operation_set_export_filename(_self_, (const gchar *)(filename));
}
void _gtk_print_operation_set_job_name(GtkPrintOperation * _self_, gchar * job_name) {
	(void)gtk_print_operation_set_job_name(_self_, (const gchar *)(job_name));
}
GtkPrintSettings * _gtk_print_settings_new_from_file(gchar * file_name, void * error) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_file((const gchar *)(file_name), (GError **)(error));
}
GtkPrintSettings * _gtk_print_settings_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
gchar * _gtk_print_settings_get(GtkPrintSettings * _self_, gchar * key) {
	return (gchar *)gtk_print_settings_get(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_get_bool(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_get_bool(_self_, (const gchar *)(key));
}
gchar * _gtk_print_settings_get_default_source(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_default_source(_self_);
}
gchar * _gtk_print_settings_get_dither(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_dither(_self_);
}
gdouble _gtk_print_settings_get_double(GtkPrintSettings * _self_, gchar * key) {
	return (gdouble)gtk_print_settings_get_double(_self_, (const gchar *)(key));
}
gdouble _gtk_print_settings_get_double_with_default(GtkPrintSettings * _self_, gchar * key, gdouble def) {
	return (gdouble)gtk_print_settings_get_double_with_default(_self_, (const gchar *)(key), def);
}
gchar * _gtk_print_settings_get_finishings(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_finishings(_self_);
}
gint _gtk_print_settings_get_int(GtkPrintSettings * _self_, gchar * key) {
	return (gint)gtk_print_settings_get_int(_self_, (const gchar *)(key));
}
gint _gtk_print_settings_get_int_with_default(GtkPrintSettings * _self_, gchar * key, gint def) {
	return (gint)gtk_print_settings_get_int_with_default(_self_, (const gchar *)(key), def);
}
gdouble _gtk_print_settings_get_length(GtkPrintSettings * _self_, gchar * key, GtkUnit unit) {
	return (gdouble)gtk_print_settings_get_length(_self_, (const gchar *)(key), unit);
}
gchar * _gtk_print_settings_get_media_type(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_media_type(_self_);
}
gchar * _gtk_print_settings_get_output_bin(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_output_bin(_self_);
}
gchar * _gtk_print_settings_get_printer(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_printer(_self_);
}
gboolean _gtk_print_settings_has_key(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_has_key(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_load_file(GtkPrintSettings * _self_, gchar * file_name, void * error) {
	return (gboolean)gtk_print_settings_load_file(_self_, (const gchar *)(file_name), (GError **)(error));
}
gboolean _gtk_print_settings_load_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name, void * error) {
	return (gboolean)gtk_print_settings_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(error));
}
void _gtk_print_settings_set(GtkPrintSettings * _self_, gchar * key, gchar * value) {
	(void)gtk_print_settings_set(_self_, (const gchar *)(key), (const gchar *)(value));
}
void _gtk_print_settings_set_bool(GtkPrintSettings * _self_, gchar * key, gboolean value) {
	(void)gtk_print_settings_set_bool(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_default_source(GtkPrintSettings * _self_, gchar * default_source) {
	(void)gtk_print_settings_set_default_source(_self_, (const gchar *)(default_source));
}
void _gtk_print_settings_set_dither(GtkPrintSettings * _self_, gchar * dither) {
	(void)gtk_print_settings_set_dither(_self_, (const gchar *)(dither));
}
void _gtk_print_settings_set_double(GtkPrintSettings * _self_, gchar * key, gdouble value) {
	(void)gtk_print_settings_set_double(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_finishings(GtkPrintSettings * _self_, gchar * finishings) {
	(void)gtk_print_settings_set_finishings(_self_, (const gchar *)(finishings));
}
void _gtk_print_settings_set_int(GtkPrintSettings * _self_, gchar * key, gint value) {
	(void)gtk_print_settings_set_int(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_length(GtkPrintSettings * _self_, gchar * key, gdouble value, GtkUnit unit) {
	(void)gtk_print_settings_set_length(_self_, (const gchar *)(key), value, unit);
}
void _gtk_print_settings_set_media_type(GtkPrintSettings * _self_, gchar * media_type) {
	(void)gtk_print_settings_set_media_type(_self_, (const gchar *)(media_type));
}
void _gtk_print_settings_set_output_bin(GtkPrintSettings * _self_, gchar * output_bin) {
	(void)gtk_print_settings_set_output_bin(_self_, (const gchar *)(output_bin));
}
void _gtk_print_settings_set_printer(GtkPrintSettings * _self_, gchar * printer) {
	(void)gtk_print_settings_set_printer(_self_, (const gchar *)(printer));
}
gboolean _gtk_print_settings_to_file(GtkPrintSettings * _self_, gchar * file_name, void * error) {
	return (gboolean)gtk_print_settings_to_file(_self_, (const gchar *)(file_name), (GError **)(error));
}
void _gtk_print_settings_to_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_print_settings_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_settings_unset(GtkPrintSettings * _self_, gchar * key) {
	(void)gtk_print_settings_unset(_self_, (const gchar *)(key));
}
gchar * _gtk_progress_bar_get_text(GtkProgressBar * _self_) {
	return (gchar *)gtk_progress_bar_get_text(_self_);
}
void _gtk_progress_bar_set_text(GtkProgressBar * _self_, gchar * text) {
	(void)gtk_progress_bar_set_text(_self_, (const gchar *)(text));
}
GtkRadioAction * _gtk_radio_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, gint value) {
	return (GtkRadioAction *)gtk_radio_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), value);
}
GtkWidget * _gtk_radio_button_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_label_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label_from_widget(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic_from_widget(group, (const gchar *)(label));
}
GtkToolItem * _gtk_radio_tool_button_new_from_stock(GSList * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_from_stock(group, (const gchar *)(stock_id));
}
GtkToolItem * _gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_with_stock_from_widget(group, (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_recent_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new_for_manager(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, GtkRecentManager * manager) {
	return (GtkAction *)gtk_recent_action_new_for_manager((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), manager);
}
void _gtk_recent_filter_add_application(GtkRecentFilter * _self_, gchar * application) {
	(void)gtk_recent_filter_add_application(_self_, (const gchar *)(application));
}
void _gtk_recent_filter_add_group(GtkRecentFilter * _self_, gchar * group) {
	(void)gtk_recent_filter_add_group(_self_, (const gchar *)(group));
}
void _gtk_recent_filter_add_mime_type(GtkRecentFilter * _self_, gchar * mime_type) {
	(void)gtk_recent_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_recent_filter_add_pattern(GtkRecentFilter * _self_, gchar * pattern) {
	(void)gtk_recent_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_recent_filter_filter(GtkRecentFilter * _self_, GtkRecentFilterInfo * filter_info) {
	return (gboolean)gtk_recent_filter_filter(_self_, (const GtkRecentFilterInfo *)(filter_info));
}
gchar * _gtk_recent_filter_get_name(GtkRecentFilter * _self_) {
	return (gchar *)gtk_recent_filter_get_name(_self_);
}
void _gtk_recent_filter_set_name(GtkRecentFilter * _self_, gchar * name) {
	(void)gtk_recent_filter_set_name(_self_, (const gchar *)(name));
}
GAppInfo * _gtk_recent_info_create_app_info(GtkRecentInfo * _self_, gchar * app_name, void * error) {
	return (GAppInfo *)gtk_recent_info_create_app_info(_self_, (const gchar *)(app_name), (GError **)(error));
}
gboolean _gtk_recent_info_get_application_info(GtkRecentInfo * _self_, gchar * app_name, void * app_exec, guint * count, time_t * time_) {
	return (gboolean)gtk_recent_info_get_application_info(_self_, (const gchar *)(app_name), (const gchar **)(app_exec), count, time_);
}
void * _gtk_recent_info_get_applications(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_applications(_self_, length);
}
gchar * _gtk_recent_info_get_description(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_description(_self_);
}
gchar * _gtk_recent_info_get_display_name(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_display_name(_self_);
}
void * _gtk_recent_info_get_groups(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_groups(_self_, length);
}
gchar * _gtk_recent_info_get_mime_type(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_mime_type(_self_);
}
gchar * _gtk_recent_info_get_uri(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_uri(_self_);
}
gboolean _gtk_recent_info_has_application(GtkRecentInfo * _self_, gchar * app_name) {
	return (gboolean)gtk_recent_info_has_application(_self_, (const gchar *)(app_name));
}
gboolean _gtk_recent_info_has_group(GtkRecentInfo * _self_, gchar * group_name) {
	return (gboolean)gtk_recent_info_has_group(_self_, (const gchar *)(group_name));
}
gboolean _gtk_recent_manager_add_full(GtkRecentManager * _self_, gchar * uri, GtkRecentData * recent_data) {
	return (gboolean)gtk_recent_manager_add_full(_self_, (const gchar *)(uri), (const GtkRecentData *)(recent_data));
}
gboolean _gtk_recent_manager_add_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_add_item(_self_, (const gchar *)(uri));
}
gboolean _gtk_recent_manager_has_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_has_item(_self_, (const gchar *)(uri));
}
GtkRecentInfo * _gtk_recent_manager_lookup_item(GtkRecentManager * _self_, gchar * uri, void * error) {
	return (GtkRecentInfo *)gtk_recent_manager_lookup_item(_self_, (const gchar *)(uri), (GError **)(error));
}
gboolean _gtk_recent_manager_move_item(GtkRecentManager * _self_, gchar * uri, gchar * new_uri, void * error) {
	return (gboolean)gtk_recent_manager_move_item(_self_, (const gchar *)(uri), (const gchar *)(new_uri), (GError **)(error));
}
gint _gtk_recent_manager_purge_items(GtkRecentManager * _self_, void * error) {
	return (gint)gtk_recent_manager_purge_items(_self_, (GError **)(error));
}
gboolean _gtk_recent_manager_remove_item(GtkRecentManager * _self_, gchar * uri, void * error) {
	return (gboolean)gtk_recent_manager_remove_item(_self_, (const gchar *)(uri), (GError **)(error));
}
GtkRequisition * _gtk_requisition_copy(GtkRequisition * _self_) {
	return (GtkRequisition *)gtk_requisition_copy((const GtkRequisition *)(_self_));
}
void _gtk_scale_add_mark(GtkScale * _self_, gdouble value, GtkPositionType position, gchar * markup) {
	(void)gtk_scale_add_mark(_self_, value, position, (const gchar *)(markup));
}
GtkSelectionData * _gtk_selection_data_copy(GtkSelectionData * _self_) {
	return (GtkSelectionData *)gtk_selection_data_copy((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_data((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_data_type(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_data_type((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data_with_length(GtkSelectionData * _self_, gint * length) {
	return (guchar *)gtk_selection_data_get_data_with_length((const GtkSelectionData *)(_self_), length);
}
GdkDisplay * _gtk_selection_data_get_display(GtkSelectionData * _self_) {
	return (GdkDisplay *)gtk_selection_data_get_display((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_format(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_format((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_length(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_length((const GtkSelectionData *)(_self_));
}
GdkPixbuf * _gtk_selection_data_get_pixbuf(GtkSelectionData * _self_) {
	return (GdkPixbuf *)gtk_selection_data_get_pixbuf((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_selection(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_selection((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_target(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_target((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_text(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_text((const GtkSelectionData *)(_self_));
}
void * _gtk_selection_data_get_uris(GtkSelectionData * _self_) {
	return (void *)gtk_selection_data_get_uris((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_set_text(GtkSelectionData * _self_, gchar * str, gint len) {
	return (gboolean)gtk_selection_data_set_text(_self_, (const gchar *)(str), len);
}
gboolean _gtk_selection_data_targets_include_image(GtkSelectionData * _self_, gboolean writable) {
	return (gboolean)gtk_selection_data_targets_include_image((const GtkSelectionData *)(_self_), writable);
}
gboolean _gtk_selection_data_targets_include_rich_text(GtkSelectionData * _self_, GtkTextBuffer * buffer) {
	return (gboolean)gtk_selection_data_targets_include_rich_text((const GtkSelectionData *)(_self_), buffer);
}
gboolean _gtk_selection_data_targets_include_text(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_text((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_targets_include_uri(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_uri((const GtkSelectionData *)(_self_));
}
void _gtk_settings_set_double_property(GtkSettings * _self_, gchar * name, gdouble v_double, gchar * origin) {
	(void)gtk_settings_set_double_property(_self_, (const gchar *)(name), v_double, (const gchar *)(origin));
}
void _gtk_settings_set_long_property(GtkSettings * _self_, gchar * name, glong v_long, gchar * origin) {
	(void)gtk_settings_set_long_property(_self_, (const gchar *)(name), v_long, (const gchar *)(origin));
}
void _gtk_settings_set_property_value(GtkSettings * _self_, gchar * name, GtkSettingsValue * svalue) {
	(void)gtk_settings_set_property_value(_self_, (const gchar *)(name), (const GtkSettingsValue *)(svalue));
}
void _gtk_settings_set_string_property(GtkSettings * _self_, gchar * name, gchar * v_string, gchar * origin) {
	(void)gtk_settings_set_string_property(_self_, (const gchar *)(name), (const gchar *)(v_string), (const gchar *)(origin));
}
GtkStatusIcon * _gtk_status_icon_new_from_file(gchar * filename) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_file((const gchar *)(filename));
}
GtkStatusIcon * _gtk_status_icon_new_from_icon_name(gchar * icon_name) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_icon_name((const gchar *)(icon_name));
}
GtkStatusIcon * _gtk_status_icon_new_from_stock(gchar * stock_id) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_stock((const gchar *)(stock_id));
}
gboolean _gtk_status_icon_get_geometry(GtkStatusIcon * _self_, void * screen, GdkRectangle * area, GtkOrientation * orientation) {
	return (gboolean)gtk_status_icon_get_geometry(_self_, (GdkScreen **)(screen), area, orientation);
}
gchar * _gtk_status_icon_get_icon_name(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_icon_name(_self_);
}
gchar * _gtk_status_icon_get_stock(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_stock(_self_);
}
gchar * _gtk_status_icon_get_title(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_title(_self_);
}
void _gtk_status_icon_set_from_file(GtkStatusIcon * _self_, gchar * filename) {
	(void)gtk_status_icon_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_status_icon_set_from_icon_name(GtkStatusIcon * _self_, gchar * icon_name) {
	(void)gtk_status_icon_set_from_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_status_icon_set_from_stock(GtkStatusIcon * _self_, gchar * stock_id) {
	(void)gtk_status_icon_set_from_stock(_self_, (const gchar *)(stock_id));
}
void _gtk_status_icon_set_name(GtkStatusIcon * _self_, gchar * name) {
	(void)gtk_status_icon_set_name(_self_, (const gchar *)(name));
}
void _gtk_status_icon_set_title(GtkStatusIcon * _self_, gchar * title) {
	(void)gtk_status_icon_set_title(_self_, (const gchar *)(title));
}
void _gtk_status_icon_set_tooltip_markup(GtkStatusIcon * _self_, gchar * markup) {
	(void)gtk_status_icon_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_status_icon_set_tooltip_text(GtkStatusIcon * _self_, gchar * text) {
	(void)gtk_status_icon_set_tooltip_text(_self_, (const gchar *)(text));
}
guint _gtk_statusbar_get_context_id(GtkStatusbar * _self_, gchar * context_description) {
	return (guint)gtk_statusbar_get_context_id(_self_, (const gchar *)(context_description));
}
guint _gtk_statusbar_push(GtkStatusbar * _self_, guint context_id, gchar * text) {
	return (guint)gtk_statusbar_push(_self_, context_id, (const gchar *)(text));
}
GtkStockItem * _gtk_stock_item_copy(GtkStockItem * _self_) {
	return (GtkStockItem *)gtk_stock_item_copy((const GtkStockItem *)(_self_));
}
void _gtk_style_context_add_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_add_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_add_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags flags) {
	(void)gtk_style_context_add_region(_self_, (const gchar *)(region_name), flags);
}
PangoFontDescription * _gtk_style_context_get_font(GtkStyleContext * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_style_context_get_font(_self_, state);
}
GtkWidgetPath * _gtk_style_context_get_path(GtkStyleContext * _self_) {
	return (GtkWidgetPath *)gtk_style_context_get_path(_self_);
}
void _gtk_style_context_get_property(GtkStyleContext * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_context_get_property(_self_, (const gchar *)(property), state, value);
}
GtkCssSection * _gtk_style_context_get_section(GtkStyleContext * _self_, gchar * property) {
	return (GtkCssSection *)gtk_style_context_get_section(_self_, (const gchar *)(property));
}
void _gtk_style_context_get_style_property(GtkStyleContext * _self_, gchar * property_name, GValue * value) {
	(void)gtk_style_context_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_style_context_has_class(GtkStyleContext * _self_, gchar * class_name) {
	return (gboolean)gtk_style_context_has_class(_self_, (const gchar *)(class_name));
}
gboolean _gtk_style_context_has_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags * flags_return) {
	return (gboolean)gtk_style_context_has_region(_self_, (const gchar *)(region_name), flags_return);
}
gboolean _gtk_style_context_lookup_color(GtkStyleContext * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_style_context_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkIconSet * _gtk_style_context_lookup_icon_set(GtkStyleContext * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_style_context_lookup_icon_set(_self_, (const gchar *)(stock_id));
}
void _gtk_style_context_remove_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_remove_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_remove_region(GtkStyleContext * _self_, gchar * region_name) {
	(void)gtk_style_context_remove_region(_self_, (const gchar *)(region_name));
}
gboolean _gtk_style_properties_lookup_property(gchar * property_name, GtkStylePropertyParser * parse_func, void * pspec) {
	return (gboolean)gtk_style_properties_lookup_property((const gchar *)(property_name), parse_func, (GParamSpec **)(pspec));
}
gboolean _gtk_style_properties_get_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	return (gboolean)gtk_style_properties_get_property(_self_, (const gchar *)(property), state, value);
}
GtkSymbolicColor * _gtk_style_properties_lookup_color(GtkStyleProperties * _self_, gchar * name) {
	return (GtkSymbolicColor *)gtk_style_properties_lookup_color(_self_, (const gchar *)(name));
}
void _gtk_style_properties_map_color(GtkStyleProperties * _self_, gchar * name, GtkSymbolicColor * color) {
	(void)gtk_style_properties_map_color(_self_, (const gchar *)(name), color);
}
void _gtk_style_properties_merge(GtkStyleProperties * _self_, GtkStyleProperties * props_to_merge, gboolean replace) {
	(void)gtk_style_properties_merge(_self_, (const GtkStyleProperties *)(props_to_merge), replace);
}
void _gtk_style_properties_set_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_properties_set_property(_self_, (const gchar *)(property), state, (const GValue *)(value));
}
void _gtk_style_properties_unset_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state) {
	(void)gtk_style_properties_unset_property(_self_, (const gchar *)(property), state);
}
GtkSymbolicColor * _gtk_symbolic_color_new_literal(GdkRGBA * color) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_literal((const GdkRGBA *)(color));
}
GtkSymbolicColor * _gtk_symbolic_color_new_name(gchar * name) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_name((const gchar *)(name));
}
GtkSymbolicColor * _gtk_symbolic_color_new_win32(gchar * theme_class, gint id) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_win32((const gchar *)(theme_class), id);
}
GtkTargetEntry * _gtk_target_entry_new(gchar * target, guint flags, guint info) {
	return (GtkTargetEntry *)gtk_target_entry_new((const gchar *)(target), flags, info);
}
void _gtk_text_buffer_add_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_add_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_apply_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_apply_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
GtkTextMark * _gtk_text_buffer_create_mark(GtkTextBuffer * _self_, gchar * mark_name, GtkTextIter * where, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_buffer_create_mark(_self_, (const gchar *)(mark_name), (const GtkTextIter *)(where), left_gravity);
}
void _gtk_text_buffer_delete_mark_by_name(GtkTextBuffer * _self_, gchar * name) {
	(void)gtk_text_buffer_delete_mark_by_name(_self_, (const gchar *)(name));
}
GtkTextMark * _gtk_text_buffer_get_mark(GtkTextBuffer * _self_, gchar * name) {
	return (GtkTextMark *)gtk_text_buffer_get_mark(_self_, (const gchar *)(name));
}
gchar * _gtk_text_buffer_get_slice(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_slice(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
gchar * _gtk_text_buffer_get_text(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_text(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
void _gtk_text_buffer_insert(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len) {
	(void)gtk_text_buffer_insert(_self_, iter, (const gchar *)(text), len);
}
void _gtk_text_buffer_insert_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_insert_at_cursor(_self_, (const gchar *)(text), len);
}
gboolean _gtk_text_buffer_insert_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive(_self_, iter, (const gchar *)(text), len, default_editable);
}
gboolean _gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive_at_cursor(_self_, (const gchar *)(text), len, default_editable);
}
void _gtk_text_buffer_insert_range(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_insert_range(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_insert_range_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_range_interactive(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end), default_editable);
}
void _gtk_text_buffer_move_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_move_mark_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_place_cursor(GtkTextBuffer * _self_, GtkTextIter * where) {
	(void)gtk_text_buffer_place_cursor(_self_, (const GtkTextIter *)(where));
}
GdkAtom _gtk_text_buffer_register_deserialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_tagset(_self_, (const gchar *)(tagset_name));
}
GdkAtom _gtk_text_buffer_register_serialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_serialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_serialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_serialize_tagset(_self_, (const gchar *)(tagset_name));
}
void _gtk_text_buffer_remove_all_tags(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_all_tags(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_select_range(GtkTextBuffer * _self_, GtkTextIter * ins, GtkTextIter * bound) {
	(void)gtk_text_buffer_select_range(_self_, (const GtkTextIter *)(ins), (const GtkTextIter *)(bound));
}
guint8 * _gtk_text_buffer_serialize(GtkTextBuffer * _self_, GtkTextBuffer * content_buffer, GdkAtom format, GtkTextIter * start, GtkTextIter * end, gsize * length) {
	return (guint8 *)gtk_text_buffer_serialize(_self_, content_buffer, format, (const GtkTextIter *)(start), (const GtkTextIter *)(end), length);
}
void _gtk_text_buffer_set_text(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_set_text(_self_, (const gchar *)(text), len);
}
void _gtk_text_iter_assign(GtkTextIter * _self_, GtkTextIter * other) {
	(void)gtk_text_iter_assign(_self_, (const GtkTextIter *)(other));
}
gboolean _gtk_text_iter_backward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_backward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_begins_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_begins_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_can_insert(GtkTextIter * _self_, gboolean default_editability) {
	return (gboolean)gtk_text_iter_can_insert((const GtkTextIter *)(_self_), default_editability);
}
gint _gtk_text_iter_compare(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gint)gtk_text_iter_compare((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
GtkTextIter * _gtk_text_iter_copy(GtkTextIter * _self_) {
	return (GtkTextIter *)gtk_text_iter_copy((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_editable(GtkTextIter * _self_, gboolean default_setting) {
	return (gboolean)gtk_text_iter_editable((const GtkTextIter *)(_self_), default_setting);
}
gboolean _gtk_text_iter_ends_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_ends_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_ends_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_equal(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gboolean)gtk_text_iter_equal((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
gboolean _gtk_text_iter_forward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_forward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_get_attributes(GtkTextIter * _self_, GtkTextAttributes * values) {
	return (gboolean)gtk_text_iter_get_attributes((const GtkTextIter *)(_self_), values);
}
GtkTextBuffer * _gtk_text_iter_get_buffer(GtkTextIter * _self_) {
	return (GtkTextBuffer *)gtk_text_iter_get_buffer((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_bytes_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_bytes_in_line((const GtkTextIter *)(_self_));
}
gunichar _gtk_text_iter_get_char(GtkTextIter * _self_) {
	return (gunichar)gtk_text_iter_get_char((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_chars_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_chars_in_line((const GtkTextIter *)(_self_));
}
GtkTextChildAnchor * _gtk_text_iter_get_child_anchor(GtkTextIter * _self_) {
	return (GtkTextChildAnchor *)gtk_text_iter_get_child_anchor((const GtkTextIter *)(_self_));
}
PangoLanguage * _gtk_text_iter_get_language(GtkTextIter * _self_) {
	return (PangoLanguage *)gtk_text_iter_get_language((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_offset((const GtkTextIter *)(_self_));
}
GSList * _gtk_text_iter_get_marks(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_marks((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_offset((const GtkTextIter *)(_self_));
}
GdkPixbuf * _gtk_text_iter_get_pixbuf(GtkTextIter * _self_) {
	return (GdkPixbuf *)gtk_text_iter_get_pixbuf((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_tags(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_tags((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_toggled_tags(GtkTextIter * _self_, gboolean toggled_on) {
	return (GSList *)gtk_text_iter_get_toggled_tags((const GtkTextIter *)(_self_), toggled_on);
}
gint _gtk_text_iter_get_visible_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_visible_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_offset((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_visible_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gchar * _gtk_text_iter_get_visible_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_has_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_has_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_in_range(GtkTextIter * _self_, GtkTextIter * start, GtkTextIter * end) {
	return (gboolean)gtk_text_iter_in_range((const GtkTextIter *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_inside_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_inside_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_cursor_position(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_cursor_position((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_end(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_end((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_start(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_start((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_toggles_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_toggles_tag((const GtkTextIter *)(_self_), tag);
}
GtkTextMark * _gtk_text_mark_new(gchar * name, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_mark_new((const gchar *)(name), left_gravity);
}
gchar * _gtk_text_mark_get_name(GtkTextMark * _self_) {
	return (gchar *)gtk_text_mark_get_name(_self_);
}
GtkTextTag * _gtk_text_tag_new(gchar * name) {
	return (GtkTextTag *)gtk_text_tag_new((const gchar *)(name));
}
gboolean _gtk_text_tag_event(GtkTextTag * _self_, GObject * event_object, GdkEvent * event, GtkTextIter * iter) {
	return (gboolean)gtk_text_tag_event(_self_, event_object, event, (const GtkTextIter *)(iter));
}
GtkTextTag * _gtk_text_tag_table_lookup(GtkTextTagTable * _self_, gchar * name) {
	return (GtkTextTag *)gtk_text_tag_table_lookup(_self_, (const gchar *)(name));
}
void _gtk_text_view_get_cursor_locations(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * strong, GdkRectangle * weak) {
	(void)gtk_text_view_get_cursor_locations(_self_, (const GtkTextIter *)(iter), strong, weak);
}
void _gtk_text_view_get_iter_location(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * location) {
	(void)gtk_text_view_get_iter_location(_self_, (const GtkTextIter *)(iter), location);
}
void _gtk_text_view_get_line_yrange(GtkTextView * _self_, GtkTextIter * iter, gint * y, gint * height) {
	(void)gtk_text_view_get_line_yrange(_self_, (const GtkTextIter *)(iter), y, height);
}
gboolean _gtk_text_view_starts_display_line(GtkTextView * _self_, GtkTextIter * iter) {
	return (gboolean)gtk_text_view_starts_display_line(_self_, (const GtkTextIter *)(iter));
}
GtkThemingEngine * _gtk_theming_engine_load(gchar * name) {
	return (GtkThemingEngine *)gtk_theming_engine_load((const gchar *)(name));
}
void _gtk_theming_engine_register_property(gchar * name_space, GtkStylePropertyParser parse_func, GParamSpec * pspec) {
	(void)gtk_theming_engine_register_property((const gchar *)(name_space), parse_func, pspec);
}
PangoFontDescription * _gtk_theming_engine_get_font(GtkThemingEngine * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_theming_engine_get_font(_self_, state);
}
GtkWidgetPath * _gtk_theming_engine_get_path(GtkThemingEngine * _self_) {
	return (GtkWidgetPath *)gtk_theming_engine_get_path(_self_);
}
void _gtk_theming_engine_get_property(GtkThemingEngine * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_theming_engine_get_property(_self_, (const gchar *)(property), state, value);
}
void _gtk_theming_engine_get_style_property(GtkThemingEngine * _self_, gchar * property_name, GValue * value) {
	(void)gtk_theming_engine_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_theming_engine_has_class(GtkThemingEngine * _self_, gchar * style_class) {
	return (gboolean)gtk_theming_engine_has_class(_self_, (const gchar *)(style_class));
}
gboolean _gtk_theming_engine_has_region(GtkThemingEngine * _self_, gchar * style_region, GtkRegionFlags * flags) {
	return (gboolean)gtk_theming_engine_has_region(_self_, (const gchar *)(style_region), flags);
}
gboolean _gtk_theming_engine_lookup_color(GtkThemingEngine * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_theming_engine_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkToggleAction * _gtk_toggle_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkToggleAction *)gtk_toggle_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkWidget * _gtk_toggle_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_toggle_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_mnemonic((const gchar *)(label));
}
GtkToolItem * _gtk_toggle_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_toggle_tool_button_new_from_stock((const gchar *)(stock_id));
}
GtkToolItem * _gtk_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_tool_button_new_from_stock((const gchar *)(stock_id));
}
gchar * _gtk_tool_button_get_icon_name(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_icon_name(_self_);
}
gchar * _gtk_tool_button_get_label(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_label(_self_);
}
gchar * _gtk_tool_button_get_stock_id(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_stock_id(_self_);
}
void _gtk_tool_button_set_icon_name(GtkToolButton * _self_, gchar * icon_name) {
	(void)gtk_tool_button_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_tool_button_set_label(GtkToolButton * _self_, gchar * label) {
	(void)gtk_tool_button_set_label(_self_, (const gchar *)(label));
}
void _gtk_tool_button_set_stock_id(GtkToolButton * _self_, gchar * stock_id) {
	(void)gtk_tool_button_set_stock_id(_self_, (const gchar *)(stock_id));
}
GtkWidget * _gtk_tool_item_get_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id) {
	return (GtkWidget *)gtk_tool_item_get_proxy_menu_item(_self_, (const gchar *)(menu_item_id));
}
void _gtk_tool_item_set_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id, GtkWidget * menu_item) {
	(void)gtk_tool_item_set_proxy_menu_item(_self_, (const gchar *)(menu_item_id), menu_item);
}
void _gtk_tool_item_set_tooltip_markup(GtkToolItem * _self_, gchar * markup) {
	(void)gtk_tool_item_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_tool_item_set_tooltip_text(GtkToolItem * _self_, gchar * text) {
	(void)gtk_tool_item_set_tooltip_text(_self_, (const gchar *)(text));
}
GtkWidget * _gtk_tool_item_group_new(gchar * label) {
	return (GtkWidget *)gtk_tool_item_group_new((const gchar *)(label));
}
gchar * _gtk_tool_item_group_get_label(GtkToolItemGroup * _self_) {
	return (gchar *)gtk_tool_item_group_get_label(_self_);
}
void _gtk_tool_item_group_set_label(GtkToolItemGroup * _self_, gchar * label) {
	(void)gtk_tool_item_group_set_label(_self_, (const gchar *)(label));
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_group() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_group();
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_item() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_item();
}
GtkWidget * _gtk_tool_palette_get_drag_item(GtkToolPalette * _self_, GtkSelectionData * selection) {
	return (GtkWidget *)gtk_tool_palette_get_drag_item(_self_, (const GtkSelectionData *)(selection));
}
void _gtk_tooltip_set_icon_from_icon_name(GtkTooltip * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_tooltip_set_icon_from_stock(GtkTooltip * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_stock(_self_, (const gchar *)(stock_id), size);
}
void _gtk_tooltip_set_markup(GtkTooltip * _self_, gchar * markup) {
	(void)gtk_tooltip_set_markup(_self_, (const gchar *)(markup));
}
void _gtk_tooltip_set_text(GtkTooltip * _self_, gchar * text) {
	(void)gtk_tooltip_set_text(_self_, (const gchar *)(text));
}
void _gtk_tooltip_set_tip_area(GtkTooltip * _self_, GdkRectangle * rect) {
	(void)gtk_tooltip_set_tip_area(_self_, (const GdkRectangle *)(rect));
}
GtkTreePath * _gtk_tree_path_new_from_string(gchar * path) {
	return (GtkTreePath *)gtk_tree_path_new_from_string((const gchar *)(path));
}
gint _gtk_tree_path_compare(GtkTreePath * _self_, GtkTreePath * b) {
	return (gint)gtk_tree_path_compare((const GtkTreePath *)(_self_), (const GtkTreePath *)(b));
}
GtkTreePath * _gtk_tree_path_copy(GtkTreePath * _self_) {
	return (GtkTreePath *)gtk_tree_path_copy((const GtkTreePath *)(_self_));
}
gboolean _gtk_tree_selection_get_selected(GtkTreeSelection * _self_, void * model, GtkTreeIter * iter) {
	return (gboolean)gtk_tree_selection_get_selected(_self_, (GtkTreeModel **)(model), iter);
}
GList * _gtk_tree_selection_get_selected_rows(GtkTreeSelection * _self_, void * model) {
	return (GList *)gtk_tree_selection_get_selected_rows(_self_, (GtkTreeModel **)(model));
}
void _gtk_tree_view_get_cursor(GtkTreeView * _self_, void * path, void * focus_column) {
	(void)gtk_tree_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkTreeViewColumn **)(focus_column));
}
gboolean _gtk_tree_view_get_dest_row_at_pos(GtkTreeView * _self_, gint drag_x, gint drag_y, void * path, GtkTreeViewDropPosition * pos) {
	return (gboolean)gtk_tree_view_get_dest_row_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_tree_view_get_drag_dest_row(GtkTreeView * _self_, void * path, GtkTreeViewDropPosition * pos) {
	(void)gtk_tree_view_get_drag_dest_row(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_tree_view_get_path_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_get_path_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
gboolean _gtk_tree_view_get_visible_range(GtkTreeView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_tree_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
gint _gtk_tree_view_insert_column_with_data_func(GtkTreeView * _self_, gint position, gchar * title, GtkCellRenderer * cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify) {
	return (gint)gtk_tree_view_insert_column_with_data_func(_self_, position, (const gchar *)(title), cell, func, data, dnotify);
}
gboolean _gtk_tree_view_is_blank_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_is_blank_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
void _gtk_tree_view_column_add_attribute(GtkTreeViewColumn * _self_, GtkCellRenderer * cell_renderer, gchar * attribute, gint column) {
	(void)gtk_tree_view_column_add_attribute(_self_, cell_renderer, (const gchar *)(attribute), column);
}
void _gtk_tree_view_column_cell_get_size(GtkTreeViewColumn * _self_, GdkRectangle * cell_area, gint * x_offset, gint * y_offset, gint * width, gint * height) {
	(void)gtk_tree_view_column_cell_get_size(_self_, (const GdkRectangle *)(cell_area), x_offset, y_offset, width, height);
}
gchar * _gtk_tree_view_column_get_title(GtkTreeViewColumn * _self_) {
	return (gchar *)gtk_tree_view_column_get_title(_self_);
}
void _gtk_tree_view_column_set_title(GtkTreeViewColumn * _self_, gchar * title) {
	(void)gtk_tree_view_column_set_title(_self_, (const gchar *)(title));
}
void _gtk_ui_manager_add_ui(GtkUIManager * _self_, guint merge_id, gchar * path, gchar * name, gchar * action, GtkUIManagerItemType type, gboolean top) {
	(void)gtk_ui_manager_add_ui(_self_, merge_id, (const gchar *)(path), (const gchar *)(name), (const gchar *)(action), type, top);
}
guint _gtk_ui_manager_add_ui_from_file(GtkUIManager * _self_, gchar * filename, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_file(_self_, (const gchar *)(filename), (GError **)(error));
}
guint _gtk_ui_manager_add_ui_from_resource(GtkUIManager * _self_, gchar * resource_path, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_resource(_self_, (const gchar *)(resource_path), (GError **)(error));
}
guint _gtk_ui_manager_add_ui_from_string(GtkUIManager * _self_, gchar * buffer, gssize length, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_string(_self_, (const gchar *)(buffer), length, (GError **)(error));
}
GtkAction * _gtk_ui_manager_get_action(GtkUIManager * _self_, gchar * path) {
	return (GtkAction *)gtk_ui_manager_get_action(_self_, (const gchar *)(path));
}
GtkWidget * _gtk_ui_manager_get_widget(GtkUIManager * _self_, gchar * path) {
	return (GtkWidget *)gtk_ui_manager_get_widget(_self_, (const gchar *)(path));
}
void _gtk_widget_add_accelerator(GtkWidget * _self_, gchar * accel_signal, GtkAccelGroup * accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags) {
	(void)gtk_widget_add_accelerator(_self_, (const gchar *)(accel_signal), accel_group, accel_key, accel_mods, accel_flags);
}
void _gtk_widget_child_notify(GtkWidget * _self_, gchar * child_property) {
	(void)gtk_widget_child_notify(_self_, (const gchar *)(child_property));
}
PangoLayout * _gtk_widget_create_pango_layout(GtkWidget * _self_, gchar * text) {
	return (PangoLayout *)gtk_widget_create_pango_layout(_self_, (const gchar *)(text));
}
void _gtk_drag_source_set_icon_name(GtkWidget * _self_, gchar * icon_name) {
	(void)gtk_drag_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_drag_source_set_icon_stock(GtkWidget * _self_, gchar * stock_id) {
	(void)gtk_drag_source_set_icon_stock(_self_, (const gchar *)(stock_id));
}
gchar * _gtk_widget_get_name(GtkWidget * _self_) {
	return (gchar *)gtk_widget_get_name(_self_);
}
void _gtk_widget_insert_action_group(GtkWidget * _self_, gchar * name, GActionGroup * group) {
	(void)gtk_widget_insert_action_group(_self_, (const gchar *)(name), group);
}
gboolean _gtk_widget_intersect(GtkWidget * _self_, GdkRectangle * area, GdkRectangle * intersection) {
	return (gboolean)gtk_widget_intersect(_self_, (const GdkRectangle *)(area), intersection);
}
void _gtk_widget_override_background_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_background_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_cursor(GtkWidget * _self_, GdkRGBA * cursor, GdkRGBA * secondary_cursor) {
	(void)gtk_widget_override_cursor(_self_, (const GdkRGBA *)(cursor), (const GdkRGBA *)(secondary_cursor));
}
void _gtk_widget_override_font(GtkWidget * _self_, PangoFontDescription * font_desc) {
	(void)gtk_widget_override_font(_self_, (const PangoFontDescription *)(font_desc));
}
void _gtk_widget_override_symbolic_color(GtkWidget * _self_, gchar * name, GdkRGBA * color) {
	(void)gtk_widget_override_symbolic_color(_self_, (const gchar *)(name), (const GdkRGBA *)(color));
}
void _gtk_widget_queue_draw_region(GtkWidget * _self_, cairo_region_t * region) {
	(void)gtk_widget_queue_draw_region(_self_, (const cairo_region_t *)(region));
}
cairo_region_t * _gtk_widget_region_intersect(GtkWidget * _self_, cairo_region_t * region) {
	return (cairo_region_t *)gtk_widget_region_intersect(_self_, (const cairo_region_t *)(region));
}
GdkPixbuf * _gtk_widget_render_icon_pixbuf(GtkWidget * _self_, gchar * stock_id, GtkIconSize size) {
	return (GdkPixbuf *)gtk_widget_render_icon_pixbuf(_self_, (const gchar *)(stock_id), size);
}
void _gtk_widget_set_accel_path(GtkWidget * _self_, gchar * accel_path, GtkAccelGroup * accel_group) {
	(void)gtk_widget_set_accel_path(_self_, (const gchar *)(accel_path), accel_group);
}
void _gtk_widget_set_allocation(GtkWidget * _self_, GtkAllocation * allocation) {
	(void)gtk_widget_set_allocation(_self_, (const GtkAllocation *)(allocation));
}
void _gtk_widget_set_composite_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_composite_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_tooltip_markup(GtkWidget * _self_, gchar * markup) {
	(void)gtk_widget_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_widget_set_tooltip_text(GtkWidget * _self_, gchar * text) {
	(void)gtk_widget_set_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_widget_style_get_property(GtkWidget * _self_, gchar * property_name, GValue * value) {
	(void)gtk_widget_style_get_property(_self_, (const gchar *)(property_name), value);
}
GParamSpec * _gtk_widget_class_find_style_property(GtkWidgetClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_widget_class_find_style_property(_self_, (const gchar *)(property_name));
}
void * _gtk_widget_class_list_style_properties(GtkWidgetClass * _self_, guint * n_properties) {
	return (void *)gtk_widget_class_list_style_properties(_self_, n_properties);
}
GtkWidgetPath * _gtk_widget_path_copy(GtkWidgetPath * _self_) {
	return (GtkWidgetPath *)gtk_widget_path_copy((const GtkWidgetPath *)(_self_));
}
GType _gtk_widget_path_get_object_type(GtkWidgetPath * _self_) {
	return (GType)gtk_widget_path_get_object_type((const GtkWidgetPath *)(_self_));
}
gboolean _gtk_widget_path_has_parent(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_has_parent((const GtkWidgetPath *)(_self_), type);
}
gboolean _gtk_widget_path_is_type(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_is_type((const GtkWidgetPath *)(_self_), type);
}
void _gtk_widget_path_iter_add_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_add_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_add_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags flags) {
	(void)gtk_widget_path_iter_add_region(_self_, pos, (const gchar *)(name), flags);
}
gchar * _gtk_widget_path_iter_get_name(GtkWidgetPath * _self_, gint pos) {
	return (gchar *)gtk_widget_path_iter_get_name((const GtkWidgetPath *)(_self_), pos);
}
GType _gtk_widget_path_iter_get_object_type(GtkWidgetPath * _self_, gint pos) {
	return (GType)gtk_widget_path_iter_get_object_type((const GtkWidgetPath *)(_self_), pos);
}
guint _gtk_widget_path_iter_get_sibling_index(GtkWidgetPath * _self_, gint pos) {
	return (guint)gtk_widget_path_iter_get_sibling_index((const GtkWidgetPath *)(_self_), pos);
}
GtkWidgetPath * _gtk_widget_path_iter_get_siblings(GtkWidgetPath * _self_, gint pos) {
	return (GtkWidgetPath *)gtk_widget_path_iter_get_siblings((const GtkWidgetPath *)(_self_), pos);
}
gboolean _gtk_widget_path_iter_has_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_class((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_name((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_qclass(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qclass((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qname(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qname((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qregion(GtkWidgetPath * _self_, gint pos, GQuark qname, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_qregion((const GtkWidgetPath *)(_self_), pos, qname, flags);
}
gboolean _gtk_widget_path_iter_has_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_region((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name), flags);
}
GSList * _gtk_widget_path_iter_list_classes(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_classes((const GtkWidgetPath *)(_self_), pos);
}
GSList * _gtk_widget_path_iter_list_regions(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_regions((const GtkWidgetPath *)(_self_), pos);
}
void _gtk_widget_path_iter_remove_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_remove_region(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_region(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_set_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_set_name(_self_, pos, (const gchar *)(name));
}
gint _gtk_widget_path_length(GtkWidgetPath * _self_) {
	return (gint)gtk_widget_path_length((const GtkWidgetPath *)(_self_));
}
char * _gtk_widget_path_to_string(GtkWidgetPath * _self_) {
	return (char *)gtk_widget_path_to_string((const GtkWidgetPath *)(_self_));
}
gchar * _gtk_window_get_default_icon_name() {
	return (gchar *)gtk_window_get_default_icon_name();
}
gboolean _gtk_window_set_default_icon_from_file(gchar * filename, void * err) {
	return (gboolean)gtk_window_set_default_icon_from_file((const gchar *)(filename), (GError **)(err));
}
void _gtk_window_set_default_icon_name(gchar * name) {
	(void)gtk_window_set_default_icon_name((const gchar *)(name));
}
gchar * _gtk_window_get_icon_name(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_icon_name(_self_);
}
gchar * _gtk_window_get_role(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_role(_self_);
}
gchar * _gtk_window_get_title(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_title(_self_);
}
gboolean _gtk_window_parse_geometry(GtkWindow * _self_, gchar * geometry) {
	return (gboolean)gtk_window_parse_geometry(_self_, (const gchar *)(geometry));
}
gboolean _gtk_window_set_icon_from_file(GtkWindow * _self_, gchar * filename, void * err) {
	return (gboolean)gtk_window_set_icon_from_file(_self_, (const gchar *)(filename), (GError **)(err));
}
void _gtk_window_set_icon_name(GtkWindow * _self_, gchar * name) {
	(void)gtk_window_set_icon_name(_self_, (const gchar *)(name));
}
void _gtk_window_set_role(GtkWindow * _self_, gchar * role) {
	(void)gtk_window_set_role(_self_, (const gchar *)(role));
}
void _gtk_window_set_startup_id(GtkWindow * _self_, gchar * startup_id) {
	(void)gtk_window_set_startup_id(_self_, (const gchar *)(startup_id));
}
void _gtk_window_set_title(GtkWindow * _self_, gchar * title) {
	(void)gtk_window_set_title(_self_, (const gchar *)(title));
}
void _gtk_window_set_wmclass(GtkWindow * _self_, gchar * wmclass_name, gchar * wmclass_class) {
	(void)gtk_window_set_wmclass(_self_, (const gchar *)(wmclass_name), (const gchar *)(wmclass_class));
}
void _gtk_accelerator_parse(gchar * accelerator, guint * accelerator_key, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse((const gchar *)(accelerator), accelerator_key, accelerator_mods);
}
void _gtk_accelerator_parse_with_keycode(gchar * accelerator, guint * accelerator_key, void * accelerator_codes, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse_with_keycode((const gchar *)(accelerator), accelerator_key, (guint **)(accelerator_codes), accelerator_mods);
}
gchar * _gtk_check_version(guint required_major, guint required_minor, guint required_micro) {
	return (gchar *)gtk_check_version(required_major, required_minor, required_micro);
}
void _gtk_drag_set_icon_name(GdkDragContext * context, gchar * icon_name, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_name(context, (const gchar *)(icon_name), hot_x, hot_y);
}
void _gtk_drag_set_icon_stock(GdkDragContext * context, gchar * stock_id, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_stock(context, (const gchar *)(stock_id), hot_x, hot_y);
}
GtkIconSize _gtk_icon_size_from_name(gchar * name) {
	return (GtkIconSize)gtk_icon_size_from_name((const gchar *)(name));
}
gchar * _gtk_icon_size_get_name(GtkIconSize size) {
	return (gchar *)gtk_icon_size_get_name(size);
}
GtkIconSize _gtk_icon_size_register(gchar * name, gint width, gint height) {
	return (GtkIconSize)gtk_icon_size_register((const gchar *)(name), width, height);
}
void _gtk_icon_size_register_alias(gchar * alias, GtkIconSize target) {
	(void)gtk_icon_size_register_alias((const gchar *)(alias), target);
}
gboolean _gtk_rc_property_parse_border(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_border((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_color(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_color((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_enum(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_enum((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_flags(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_flags((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_requisition(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_requisition((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
GdkPixbuf * _gtk_render_icon_pixbuf(GtkStyleContext * context, GtkIconSource * source, GtkIconSize size) {
	return (GdkPixbuf *)gtk_render_icon_pixbuf(context, (const GtkIconSource *)(source), size);
}
gboolean _gtk_show_uri(GdkScreen * screen, gchar * uri, guint32 timestamp, void * error) {
	return (gboolean)gtk_show_uri(screen, (const gchar *)(uri), timestamp, (GError **)(error));
}
gboolean _gtk_stock_lookup(gchar * stock_id, GtkStockItem * item) {
	return (gboolean)gtk_stock_lookup((const gchar *)(stock_id), item);
}
void _gtk_stock_set_translate_func(gchar * domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify) {
	(void)gtk_stock_set_translate_func((const gchar *)(domain), func, data, notify);
}
GtkWidget * _gtk_test_create_simple_window(gchar * window_title, gchar * dialog_text) {
	return (GtkWidget *)gtk_test_create_simple_window((const gchar *)(window_title), (const gchar *)(dialog_text));
}
GtkWidget * _gtk_test_find_label(GtkWidget * widget, gchar * label_pattern) {
	return (GtkWidget *)gtk_test_find_label(widget, (const gchar *)(label_pattern));
}
GtkWidget * _gtk_test_find_widget(GtkWidget * widget, gchar * label_pattern, GType widget_type) {
	return (GtkWidget *)gtk_test_find_widget(widget, (const gchar *)(label_pattern), widget_type);
}
GType * _gtk_test_list_all_types(guint * n_types) {
	return (GType *)gtk_test_list_all_types(n_types);
}
void _gtk_test_text_set(GtkWidget * widget, gchar * string) {
	(void)gtk_test_text_set(widget, (const gchar *)(string));
}
gboolean _gtk_tree_get_row_drag_data(GtkSelectionData * selection_data, void * tree_model, void * path) {
	return (gboolean)gtk_tree_get_row_drag_data(selection_data, (GtkTreeModel **)(tree_model), (GtkTreePath **)(path));
}
gboolean glibtrue() { return TRUE; }
gboolean glibfalse() { return FALSE; }
*/
import "C"
import (
	"unsafe"
)

type PathPriorityType C.GtkPathPriorityType
type ToolbarClass C.GtkToolbarClass
type ListStoreClass C.GtkListStoreClass
type CellRendererPrivate C.GtkCellRendererPrivate
type Viewport C.GtkViewport
type WindowPosition C.GtkWindowPosition
type InfoBarPrivate C.GtkInfoBarPrivate
type Toolbar C.GtkToolbar
type StyleContextPrivate C.GtkStyleContextPrivate
type TextBufferTargetInfo C.GtkTextBufferTargetInfo
type CellRendererSpinnerPrivate C.GtkCellRendererSpinnerPrivate
type IconViewDropPosition C.GtkIconViewDropPosition
type CellRendererClass C.GtkCellRendererClass
type RadioMenuItemClass C.GtkRadioMenuItemClass
type OverlayClass C.GtkOverlayClass
type FixedClass C.GtkFixedClass
type ToolPalettePrivate C.GtkToolPalettePrivate
type FramePrivate C.GtkFramePrivate
type ActionGroup C.GtkActionGroup
type SizeGroup C.GtkSizeGroup
type ScaleButtonClass C.GtkScaleButtonClass
type TextAttributes C.GtkTextAttributes
type Window C.GtkWindow
type SelectionData C.GtkSelectionData
type MenuItemClass C.GtkMenuItemClass
type ToggleButton C.GtkToggleButton
type Widget C.GtkWidget
type ToggleActionClass C.GtkToggleActionClass
type TreeDestroyCountFunc C.GtkTreeDestroyCountFunc
type Align C.GtkAlign
type Container C.GtkContainer
type CheckMenuItem C.GtkCheckMenuItem
type CellLayoutIface C.GtkCellLayoutIface
type TreeModelForeachFunc C.GtkTreeModelForeachFunc
type RecentChooserError C.GtkRecentChooserError
type RecentChooserWidget C.GtkRecentChooserWidget
type ToolItemGroupPrivate C.GtkToolItemGroupPrivate
type ApplicationWindow C.GtkApplicationWindow
type FileChooserDialogPrivate C.GtkFileChooserDialogPrivate
type FontChooserDialogPrivate C.GtkFontChooserDialogPrivate
type TreeSelection C.GtkTreeSelection
type TextSearchFlags C.GtkTextSearchFlags
type HSVPrivate C.GtkHSVPrivate
type ActionableInterface C.GtkActionableInterface
type HScrollbar C.GtkHScrollbar
type InvisibleClass C.GtkInvisibleClass
type TearoffMenuItemPrivate C.GtkTearoffMenuItemPrivate
type TextBufferSerializeFunc C.GtkTextBufferSerializeFunc
type FontSelectionDialogPrivate C.GtkFontSelectionDialogPrivate
type PageSetupDoneFunc C.GtkPageSetupDoneFunc
type RecentManager C.GtkRecentManager
type ComboBoxPrivate C.GtkComboBoxPrivate
type ToolButton C.GtkToolButton
type License C.GtkLicense
type RcStyle C.GtkRcStyle
type ColorButton C.GtkColorButton
type Switch C.GtkSwitch
type StatusbarPrivate C.GtkStatusbarPrivate
type ColorButtonPrivate C.GtkColorButtonPrivate
type CellRendererSpinClass C.GtkCellRendererSpinClass
type RecentChooserWidgetPrivate C.GtkRecentChooserWidgetPrivate
type TextView C.GtkTextView
type ComboBoxTextPrivate C.GtkComboBoxTextPrivate
type CellRendererMode C.GtkCellRendererMode
type ColorChooserWidget C.GtkColorChooserWidget
type FileFilterFlags C.GtkFileFilterFlags
type ButtonsType C.GtkButtonsType
type CellRendererPixbufPrivate C.GtkCellRendererPixbufPrivate
type TextTag C.GtkTextTag
type TreeViewRowSeparatorFunc C.GtkTreeViewRowSeparatorFunc
type FileChooserDialog C.GtkFileChooserDialog
type ScrollType C.GtkScrollType
type RangePrivate C.GtkRangePrivate
type HSV C.GtkHSV
type ColorSelectionDialogClass C.GtkColorSelectionDialogClass
type FontSelectionClass C.GtkFontSelectionClass
type RecentManagerError C.GtkRecentManagerError
type CalendarDetailFunc C.GtkCalendarDetailFunc
type ModuleDisplayInitFunc C.GtkModuleDisplayInitFunc
type StylePropertyParser C.GtkStylePropertyParser
type Socket C.GtkSocket
type FontChooserDialog C.GtkFontChooserDialog
type ToggleActionPrivate C.GtkToggleActionPrivate
type StatusIconPrivate C.GtkStatusIconPrivate
type CellRendererClassPrivate C.GtkCellRendererClassPrivate
type DialogPrivate C.GtkDialogPrivate
type LevelBarPrivate C.GtkLevelBarPrivate
type Style C.GtkStyle
type AccelMap C.GtkAccelMap
type AssistantPageFunc C.GtkAssistantPageFunc
type IconFactory C.GtkIconFactory
type TableChild C.GtkTableChild
type EntryClass C.GtkEntryClass
type Assistant C.GtkAssistant
type ColorChooserDialogPrivate C.GtkColorChooserDialogPrivate
type VScale C.GtkVScale
type ScalePrivate C.GtkScalePrivate
type RadioActionPrivate C.GtkRadioActionPrivate
type HButtonBox C.GtkHButtonBox
type EntryCompletionClass C.GtkEntryCompletionClass
type BoxClass C.GtkBoxClass
type TreeStoreClass C.GtkTreeStoreClass
type CellRendererAccelPrivate C.GtkCellRendererAccelPrivate
type MenuShell C.GtkMenuShell
type SettingsPrivate C.GtkSettingsPrivate
type Paned C.GtkPaned
type LabelPrivate C.GtkLabelPrivate
type AboutDialogPrivate C.GtkAboutDialogPrivate
type ClipboardGetFunc C.GtkClipboardGetFunc
type ApplicationWindowPrivate C.GtkApplicationWindowPrivate
type VScaleClass C.GtkVScaleClass
type RecentSortType C.GtkRecentSortType
type IconViewForeachFunc C.GtkIconViewForeachFunc
type MenuToolButtonClass C.GtkMenuToolButtonClass
type LevelBarMode C.GtkLevelBarMode
type OffscreenWindow C.GtkOffscreenWindow
type ToolButtonClass C.GtkToolButtonClass
type ToolItemGroupClass C.GtkToolItemGroupClass
type OverlayPrivate C.GtkOverlayPrivate
type HandleBoxPrivate C.GtkHandleBoxPrivate
type PaperSize C.GtkPaperSize
type ColorSelectionPrivate C.GtkColorSelectionPrivate
type Builder C.GtkBuilder
type Accessible C.GtkAccessible
type VPaned C.GtkVPaned
type AppChooserButtonPrivate C.GtkAppChooserButtonPrivate
type Arrow C.GtkArrow
type CellViewClass C.GtkCellViewClass
type InputPurpose C.GtkInputPurpose
type TextTagTable C.GtkTextTagTable
type NotebookPrivate C.GtkNotebookPrivate
type TextTagClass C.GtkTextTagClass
type ImagePrivate C.GtkImagePrivate
type PrintPages C.GtkPrintPages
type IconFactoryClass C.GtkIconFactoryClass
type CellRendererCombo C.GtkCellRendererCombo
type TextViewClass C.GtkTextViewClass
type CellRendererState C.GtkCellRendererState
type IconSet C.GtkIconSet
type TargetList C.GtkTargetList
type NumerableIcon C.GtkNumerableIcon
type ToggleButtonClass C.GtkToggleButtonClass
type FontSelectionDialog C.GtkFontSelectionDialog
type SeparatorClass C.GtkSeparatorClass
type NumerableIconClass C.GtkNumerableIconClass
type ExpanderClass C.GtkExpanderClass
type FileChooserAction C.GtkFileChooserAction
type Calendar C.GtkCalendar
type CellArea C.GtkCellArea
type PrintOperationPreviewIface C.GtkPrintOperationPreviewIface
type Frame C.GtkFrame
type SettingsValue C.GtkSettingsValue
type EntryBuffer C.GtkEntryBuffer
type TextBufferPrivate C.GtkTextBufferPrivate
type ColorChooserInterface C.GtkColorChooserInterface
type PrintOperationResult C.GtkPrintOperationResult
type EventBoxClass C.GtkEventBoxClass
type Unit C.GtkUnit
type BinClass C.GtkBinClass
type PrintOperationPrivate C.GtkPrintOperationPrivate
type SeparatorMenuItemClass C.GtkSeparatorMenuItemClass
type ActionEntry C.GtkActionEntry
type SeparatorToolItemPrivate C.GtkSeparatorToolItemPrivate
type DragResult C.GtkDragResult
type TextChildAnchorClass C.GtkTextChildAnchorClass
type CssProvider C.GtkCssProvider
type TreeViewColumnDropFunc C.GtkTreeViewColumnDropFunc
type HScaleClass C.GtkHScaleClass
type SpinType C.GtkSpinType
type ContainerClass C.GtkContainerClass
type FontChooserWidgetClass C.GtkFontChooserWidgetClass
type CheckMenuItemClass C.GtkCheckMenuItemClass
type MessageDialogPrivate C.GtkMessageDialogPrivate
type IconView C.GtkIconView
type EventBoxPrivate C.GtkEventBoxPrivate
type LevelBarClass C.GtkLevelBarClass
type ActionGroupPrivate C.GtkActionGroupPrivate
type RecentActionPrivate C.GtkRecentActionPrivate
type CellCallback C.GtkCellCallback
type Separator C.GtkSeparator
type LockButtonClass C.GtkLockButtonClass
type AppChooserButton C.GtkAppChooserButton
type UIManagerClass C.GtkUIManagerClass
type Fixed C.GtkFixed
type CellAreaBoxClass C.GtkCellAreaBoxClass
type MessageType C.GtkMessageType
type ScaleClass C.GtkScaleClass
type StatusIconClass C.GtkStatusIconClass
type Expander C.GtkExpander
type Grid C.GtkGrid
type CellRendererSpinPrivate C.GtkCellRendererSpinPrivate
type SelectionMode C.GtkSelectionMode
type RecentChooserMenuPrivate C.GtkRecentChooserMenuPrivate
type MenuDirectionType C.GtkMenuDirectionType
type WidgetClassPrivate C.GtkWidgetClassPrivate
type SpinnerClass C.GtkSpinnerClass
type LinkButton C.GtkLinkButton
type ClipboardReceivedFunc C.GtkClipboardReceivedFunc
type CellRendererTogglePrivate C.GtkCellRendererTogglePrivate
type ComboBox C.GtkComboBox
type ArrowPrivate C.GtkArrowPrivate
type IconTheme C.GtkIconTheme
type ToggleToolButtonPrivate C.GtkToggleToolButtonPrivate
type Scrollbar C.GtkScrollbar
type RegionFlags C.GtkRegionFlags
type AccelGroup C.GtkAccelGroup
type VPanedClass C.GtkVPanedClass
type Border C.GtkBorder
type FontButton C.GtkFontButton
type TargetFlags C.GtkTargetFlags
type CellRendererTextPrivate C.GtkCellRendererTextPrivate
type FontFilterFunc C.GtkFontFilterFunc
type PrintOperationAction C.GtkPrintOperationAction
type MenuShellPrivate C.GtkMenuShellPrivate
type DebugFlag C.GtkDebugFlag
type PrintStatus C.GtkPrintStatus
type BinPrivate C.GtkBinPrivate
type IMContextInfo C.GtkIMContextInfo
type WindowGroupPrivate C.GtkWindowGroupPrivate
type CellViewPrivate C.GtkCellViewPrivate
type DrawingArea C.GtkDrawingArea
type SpinButtonPrivate C.GtkSpinButtonPrivate
type LockButton C.GtkLockButton
type IconViewPrivate C.GtkIconViewPrivate
type Scale C.GtkScale
type AppChooserWidget C.GtkAppChooserWidget
type WindowGroup C.GtkWindowGroup
type ColorChooserDialogClass C.GtkColorChooserDialogClass
type IMMulticontextPrivate C.GtkIMMulticontextPrivate
type VScrollbarClass C.GtkVScrollbarClass
type ArrowType C.GtkArrowType
type TreeViewSearchEqualFunc C.GtkTreeViewSearchEqualFunc
type FileChooserWidgetClass C.GtkFileChooserWidgetClass
type ApplicationInhibitFlags C.GtkApplicationInhibitFlags
type TreeView C.GtkTreeView
type PackType C.GtkPackType
type FontSelectionPrivate C.GtkFontSelectionPrivate
type ColorChooserWidgetPrivate C.GtkColorChooserWidgetPrivate
type IconThemePrivate C.GtkIconThemePrivate
type VSeparatorClass C.GtkVSeparatorClass
type RecentFilterInfo C.GtkRecentFilterInfo
type WindowType C.GtkWindowType
type AccelFlags C.GtkAccelFlags
type PrintContext C.GtkPrintContext
type TextAppearance C.GtkTextAppearance
type Entry C.GtkEntry
type Range C.GtkRange
type CellRendererPixbufClass C.GtkCellRendererPixbufClass
type MountOperationPrivate C.GtkMountOperationPrivate
type VolumeButtonClass C.GtkVolumeButtonClass
type ButtonBox C.GtkButtonBox
type SizeGroupClass C.GtkSizeGroupClass
type TreeModelFilterPrivate C.GtkTreeModelFilterPrivate
type AccelKey C.GtkAccelKey
type LabelSelectionInfo C.GtkLabelSelectionInfo
type HScale C.GtkHScale
type PrintOperationClass C.GtkPrintOperationClass
type ScrollablePolicy C.GtkScrollablePolicy
type TextTagPrivate C.GtkTextTagPrivate
type TreeSortableIface C.GtkTreeSortableIface
type ImageMenuItem C.GtkImageMenuItem
type LinkButtonPrivate C.GtkLinkButtonPrivate
type BindingEntry C.GtkBindingEntry
type AlignmentClass C.GtkAlignmentClass
type FontChooserWidgetPrivate C.GtkFontChooserWidgetPrivate
type CornerType C.GtkCornerType
type RcContext C.GtkRcContext
type DestDefaults C.GtkDestDefaults
type TreeViewClass C.GtkTreeViewClass
type IMContextSimplePrivate C.GtkIMContextSimplePrivate
type WrapMode C.GtkWrapMode
type RecentFilter C.GtkRecentFilter
type CellRendererComboPrivate C.GtkCellRendererComboPrivate
type SocketClass C.GtkSocketClass
type ToggleToolButtonClass C.GtkToggleToolButtonClass
type TreeViewMappingFunc C.GtkTreeViewMappingFunc
type AccelMapForeach C.GtkAccelMapForeach
type AppChooserWidgetClass C.GtkAppChooserWidgetClass
type ToggleActionEntry C.GtkToggleActionEntry
type WindowGroupClass C.GtkWindowGroupClass
type PrintSettings C.GtkPrintSettings
type HPaned C.GtkHPaned
type RcPropertyParser C.GtkRcPropertyParser
type RecentActionClass C.GtkRecentActionClass
type IconViewClass C.GtkIconViewClass
type FontButtonClass C.GtkFontButtonClass
type CalendarPrivate C.GtkCalendarPrivate
type SeparatorToolItemClass C.GtkSeparatorToolItemClass
type HPanedClass C.GtkHPanedClass
type RadioButtonClass C.GtkRadioButtonClass
type ToolbarSpaceStyle C.GtkToolbarSpaceStyle
type CalendarClass C.GtkCalendarClass
type MenuToolButton C.GtkMenuToolButton
type AccelGroupActivate C.GtkAccelGroupActivate
type FontButtonPrivate C.GtkFontButtonPrivate
type AccessiblePrivate C.GtkAccessiblePrivate
type TreeSelectionClass C.GtkTreeSelectionClass
type EntryCompletion C.GtkEntryCompletion
type MenuItem C.GtkMenuItem
type TranslateFunc C.GtkTranslateFunc
type ToolItemClass C.GtkToolItemClass
type IconSize C.GtkIconSize
type CssSectionType C.GtkCssSectionType
type ToolPalette C.GtkToolPalette
type LevelBar C.GtkLevelBar
type ImageMenuItemClass C.GtkImageMenuItemClass
type MenuButtonPrivate C.GtkMenuButtonPrivate
type RadioActionClass C.GtkRadioActionClass
type SpinnerPrivate C.GtkSpinnerPrivate
type TextWindowType C.GtkTextWindowType
type ToolShellIface C.GtkToolShellIface
type AccelMapClass C.GtkAccelMapClass
type SensitivityType C.GtkSensitivityType
type TreeModelSortClass C.GtkTreeModelSortClass
type Justification C.GtkJustification
type AboutDialogClass C.GtkAboutDialogClass
type TreeSelectionFunc C.GtkTreeSelectionFunc
type Settings C.GtkSettings
type TextCharPredicate C.GtkTextCharPredicate
type EntryBufferClass C.GtkEntryBufferClass
type TextIter C.GtkTextIter
type MenuBarClass C.GtkMenuBarClass
type ViewportPrivate C.GtkViewportPrivate
type AppChooserDialogPrivate C.GtkAppChooserDialogPrivate
type StateFlags C.GtkStateFlags
type LabelClass C.GtkLabelClass
type EntryCompletionPrivate C.GtkEntryCompletionPrivate
type SwitchPrivate C.GtkSwitchPrivate
type SeparatorPrivate C.GtkSeparatorPrivate
type Callback C.GtkCallback
type MessageDialog C.GtkMessageDialog
type AccelGroupPrivate C.GtkAccelGroupPrivate
type PositionType C.GtkPositionType
type TreeModelFilter C.GtkTreeModelFilter
type FileFilter C.GtkFileFilter
type TreeModelFilterVisibleFunc C.GtkTreeModelFilterVisibleFunc
type CssSection C.GtkCssSection
type MenuItemPrivate C.GtkMenuItemPrivate
type ColorSelectionClass C.GtkColorSelectionClass
type TextTagTablePrivate C.GtkTextTagTablePrivate
type CellLayoutDataFunc C.GtkCellLayoutDataFunc
type FileChooserDialogClass C.GtkFileChooserDialogClass
type ColorSelectionChangePaletteWithScreenFunc C.GtkColorSelectionChangePaletteWithScreenFunc
type ListStore C.GtkListStore
type PageSet C.GtkPageSet
type EntryCompletionMatchFunc C.GtkEntryCompletionMatchFunc
type ThemeEngine C.GtkThemeEngine
type CellAreaContextClass C.GtkCellAreaContextClass
type Overlay C.GtkOverlay
type AppChooserButtonClass C.GtkAppChooserButtonClass
type Dialog C.GtkDialog
type HandleBox C.GtkHandleBox
type CellRendererProgressClass C.GtkCellRendererProgressClass
type AccelGroupEntry C.GtkAccelGroupEntry
type ClipboardRichTextReceivedFunc C.GtkClipboardRichTextReceivedFunc
type ContainerPrivate C.GtkContainerPrivate
type ToolButtonPrivate C.GtkToolButtonPrivate
type ComboBoxText C.GtkComboBoxText
type IMMulticontext C.GtkIMMulticontext
type ColorButtonClass C.GtkColorButtonClass
type ButtonPrivate C.GtkButtonPrivate
type ActionClass C.GtkActionClass
type ActionPrivate C.GtkActionPrivate
type CellRendererAccelMode C.GtkCellRendererAccelMode
type IconLookupFlags C.GtkIconLookupFlags
type MiscPrivate C.GtkMiscPrivate
type IMContextSimple C.GtkIMContextSimple
type BuilderPrivate C.GtkBuilderPrivate
type ExpanderStyle C.GtkExpanderStyle
type ProgressBarPrivate C.GtkProgressBarPrivate
type ClipboardImageReceivedFunc C.GtkClipboardImageReceivedFunc
type ClipboardURIReceivedFunc C.GtkClipboardURIReceivedFunc
type Application C.GtkApplication
type ToolbarPrivate C.GtkToolbarPrivate
type TreeModelFilterClass C.GtkTreeModelFilterClass
type RangeClass C.GtkRangeClass
type RcStyleClass C.GtkRcStyleClass
type AppChooserWidgetPrivate C.GtkAppChooserWidgetPrivate
type RecentData C.GtkRecentData
type KeySnoopFunc C.GtkKeySnoopFunc
type CellAreaBoxPrivate C.GtkCellAreaBoxPrivate
type TableRowCol C.GtkTableRowCol
type FontSelection C.GtkFontSelection
type FileChooserButtonPrivate C.GtkFileChooserButtonPrivate
type RadioToolButton C.GtkRadioToolButton
type RecentFilterFlags C.GtkRecentFilterFlags
type HSVClass C.GtkHSVClass
type TextChildAnchor C.GtkTextChildAnchor
type SortType C.GtkSortType
type StylePropertiesPrivate C.GtkStylePropertiesPrivate
type InputHints C.GtkInputHints
type CheckMenuItemPrivate C.GtkCheckMenuItemPrivate
type VolumeButton C.GtkVolumeButton
type FixedPrivate C.GtkFixedPrivate
type IMMulticontextClass C.GtkIMMulticontextClass
type TextBufferClass C.GtkTextBufferClass
type TextTagTableForeach C.GtkTextTagTableForeach
type FixedChild C.GtkFixedChild
type Requisition C.GtkRequisition
type AccelLabelClass C.GtkAccelLabelClass
type AdjustmentClass C.GtkAdjustmentClass
type TreeModelFlags C.GtkTreeModelFlags
type TreeViewColumnClass C.GtkTreeViewColumnClass
type FileChooserConfirmation C.GtkFileChooserConfirmation
type EventBox C.GtkEventBox
type TreeViewColumnPrivate C.GtkTreeViewColumnPrivate
type VBoxClass C.GtkVBoxClass
type CheckButton C.GtkCheckButton
type MenuShellClass C.GtkMenuShellClass
type HSeparatorClass C.GtkHSeparatorClass
type MenuBar C.GtkMenuBar
type ClipboardClearFunc C.GtkClipboardClearFunc
type WindowClass C.GtkWindowClass
type UIManager C.GtkUIManager
type VButtonBoxClass C.GtkVButtonBoxClass
type BindingSet C.GtkBindingSet
type BuildableIface C.GtkBuildableIface
type ResponseType C.GtkResponseType
type NumerableIconPrivate C.GtkNumerableIconPrivate
type ColorChooserWidgetClass C.GtkColorChooserWidgetClass
type WidgetPrivate C.GtkWidgetPrivate
type Bin C.GtkBin
type UIManagerPrivate C.GtkUIManagerPrivate
type TreeModelFilterModifyFunc C.GtkTreeModelFilterModifyFunc
type FontChooserWidget C.GtkFontChooserWidget
type ApplicationClass C.GtkApplicationClass
type BuilderClass C.GtkBuilderClass
type ToolPaletteDragTargets C.GtkToolPaletteDragTargets
type CheckButtonClass C.GtkCheckButtonClass
type ComboBoxClass C.GtkComboBoxClass
type FileChooserButton C.GtkFileChooserButton
type FileFilterFunc C.GtkFileFilterFunc
type IMContext C.GtkIMContext
type EditableInterface C.GtkEditableInterface
type Misc C.GtkMisc
type ProgressBar C.GtkProgressBar
type MenuToolButtonPrivate C.GtkMenuToolButtonPrivate
type ToggleToolButton C.GtkToggleToolButton
type AspectFrameClass C.GtkAspectFrameClass
type TreeModelSort C.GtkTreeModelSort
type FontChooserDialogClass C.GtkFontChooserDialogClass
type CellRenderer C.GtkCellRenderer
type StyleContext C.GtkStyleContext
type FileChooserWidget C.GtkFileChooserWidget
type ClipboardTextReceivedFunc C.GtkClipboardTextReceivedFunc
type AccelGroupFindFunc C.GtkAccelGroupFindFunc
type RecentSortFunc C.GtkRecentSortFunc
type OffscreenWindowClass C.GtkOffscreenWindowClass
type WidgetPath C.GtkWidgetPath
type ThemingEngineClass C.GtkThemingEngineClass
type MountOperation C.GtkMountOperation
type ToolbarStyle C.GtkToolbarStyle
type TearoffMenuItem C.GtkTearoffMenuItem
type PackDirection C.GtkPackDirection
type MenuDetachFunc C.GtkMenuDetachFunc
type TextMarkClass C.GtkTextMarkClass
type Statusbar C.GtkStatusbar
type FileChooserError C.GtkFileChooserError
type RadioButtonPrivate C.GtkRadioButtonPrivate
type ScaleButtonPrivate C.GtkScaleButtonPrivate
type FileFilterInfo C.GtkFileFilterInfo
type GridPrivate C.GtkGridPrivate
type IconFactoryPrivate C.GtkIconFactoryPrivate
type PageRange C.GtkPageRange
type Menu C.GtkMenu
type IMContextClass C.GtkIMContextClass
type ScrollStep C.GtkScrollStep
type RadioMenuItemPrivate C.GtkRadioMenuItemPrivate
type LockButtonPrivate C.GtkLockButtonPrivate
type MovementStep C.GtkMovementStep
type CellRendererText C.GtkCellRendererText
type TreeDragDestIface C.GtkTreeDragDestIface
type Notebook C.GtkNotebook
type RecentManagerPrivate C.GtkRecentManagerPrivate
type TextBufferDeserializeFunc C.GtkTextBufferDeserializeFunc
type MountOperationClass C.GtkMountOperationClass
type VBox C.GtkVBox
type ModuleInitFunc C.GtkModuleInitFunc
type JunctionSides C.GtkJunctionSides
type ClipboardTargetsReceivedFunc C.GtkClipboardTargetsReceivedFunc
type RecentInfo C.GtkRecentInfo
type FrameClass C.GtkFrameClass
type CellRendererAccelClass C.GtkCellRendererAccelClass
type StylePropertiesClass C.GtkStylePropertiesClass
type Table C.GtkTable
type ColorSelectionDialog C.GtkColorSelectionDialog
type ToolItemPrivate C.GtkToolItemPrivate
type SpinButtonClass C.GtkSpinButtonClass
type TearoffMenuItemClass C.GtkTearoffMenuItemClass
type TreeCellDataFunc C.GtkTreeCellDataFunc
type Invisible C.GtkInvisible
type ScrolledWindow C.GtkScrolledWindow
type Orientation C.GtkOrientation
type RadioToolButtonClass C.GtkRadioToolButtonClass
type Layout C.GtkLayout
type RadioMenuItem C.GtkRadioMenuItem
type PageSetup C.GtkPageSetup
type CellRendererSpin C.GtkCellRendererSpin
type VSeparator C.GtkVSeparator
type CellAreaPrivate C.GtkCellAreaPrivate
type TreeViewPrivate C.GtkTreeViewPrivate
type ToggleButtonPrivate C.GtkToggleButtonPrivate
type PanedClass C.GtkPanedClass
type BorderStyle C.GtkBorderStyle
type NotebookTab C.GtkNotebookTab
type IconInfo C.GtkIconInfo
type ResizeMode C.GtkResizeMode
type Clipboard C.GtkClipboard
type StateType C.GtkStateType
type ProgressBarClass C.GtkProgressBarClass
type TreeStore C.GtkTreeStore
type UIManagerItemType C.GtkUIManagerItemType
type AccelLabel C.GtkAccelLabel
type FontSelectionDialogClass C.GtkFontSelectionDialogClass
type InfoBar C.GtkInfoBar
type HSeparator C.GtkHSeparator
type MenuBarPrivate C.GtkMenuBarPrivate
type SettingsClass C.GtkSettingsClass
type TreeViewSearchPositionFunc C.GtkTreeViewSearchPositionFunc
type CellEditableIface C.GtkCellEditableIface
type Alignment C.GtkAlignment
type MessageDialogClass C.GtkMessageDialogClass
type AdjustmentPrivate C.GtkAdjustmentPrivate
type TreePath C.GtkTreePath
type ActivatableIface C.GtkActivatableIface
type ScrolledWindowClass C.GtkScrolledWindowClass
type LayoutClass C.GtkLayoutClass
type NotebookClass C.GtkNotebookClass
type HBoxClass C.GtkHBoxClass
type LayoutPrivate C.GtkLayoutPrivate
type Spinner C.GtkSpinner
type MiscClass C.GtkMiscClass
type AccelLabelPrivate C.GtkAccelLabelPrivate
type PrintOperation C.GtkPrintOperation
type TreeIter C.GtkTreeIter
type PolicyType C.GtkPolicyType
type ToolPaletteClass C.GtkToolPaletteClass
type Gradient C.GtkGradient
type CellRendererComboClass C.GtkCellRendererComboClass
type EntryIconPosition C.GtkEntryIconPosition
type CellView C.GtkCellView
type FontChooserIface C.GtkFontChooserIface
type CellRendererTextClass C.GtkCellRendererTextClass
type SizeGroupPrivate C.GtkSizeGroupPrivate
type IconSource C.GtkIconSource
type WindowPrivate C.GtkWindowPrivate
type TreeViewGridLines C.GtkTreeViewGridLines
type CssProviderClass C.GtkCssProviderClass
type CellRendererAccel C.GtkCellRendererAccel
type FileChooserButtonClass C.GtkFileChooserButtonClass
type CellRendererSpinner C.GtkCellRendererSpinner
type IMStatusStyle C.GtkIMStatusStyle
type ColorChooserDialog C.GtkColorChooserDialog
type HScrollbarClass C.GtkHScrollbarClass
type CellRendererToggle C.GtkCellRendererToggle
type Label C.GtkLabel
type TextMark C.GtkTextMark
type VButtonBox C.GtkVButtonBox
type ColorSelectionChangePaletteFunc C.GtkColorSelectionChangePaletteFunc
type ButtonClass C.GtkButtonClass
type CellAreaContextPrivate C.GtkCellAreaContextPrivate
type OrientableIface C.GtkOrientableIface
type SearchEntryClass C.GtkSearchEntryClass
type CellAreaBox C.GtkCellAreaBox
type MenuPositionFunc C.GtkMenuPositionFunc
type ThemingEnginePrivate C.GtkThemingEnginePrivate
type CssProviderPrivate C.GtkCssProviderPrivate
type ImageClass C.GtkImageClass
type SearchEntry C.GtkSearchEntry
type SizeRequestMode C.GtkSizeRequestMode
type Allocation C.GtkAllocation
type SpinButtonUpdatePolicy C.GtkSpinButtonUpdatePolicy
type MenuButton C.GtkMenuButton
type ThemingEngine C.GtkThemingEngine
type RecentAction C.GtkRecentAction
type CellRendererSpinnerClass C.GtkCellRendererSpinnerClass
type BuilderError C.GtkBuilderError
type StyleClass C.GtkStyleClass
type Button C.GtkButton
type PageOrientation C.GtkPageOrientation
type ArrowClass C.GtkArrowClass
type CellAllocCallback C.GtkCellAllocCallback
type WidgetHelpType C.GtkWidgetHelpType
type AboutDialog C.GtkAboutDialog
type ViewportClass C.GtkViewportClass
type PrintQuality C.GtkPrintQuality
type CellAreaClass C.GtkCellAreaClass
type MenuPrivate C.GtkMenuPrivate
type RecentFilterFunc C.GtkRecentFilterFunc
type CssProviderError C.GtkCssProviderError
type DeleteType C.GtkDeleteType
type RcTokenType C.GtkRcTokenType
type SeparatorToolItem C.GtkSeparatorToolItem
type AssistantPrivate C.GtkAssistantPrivate
type RecentChooserDialog C.GtkRecentChooserDialog
type BuilderConnectFunc C.GtkBuilderConnectFunc
type ExpanderPrivate C.GtkExpanderPrivate
type SpinButton C.GtkSpinButton
type ScaleButton C.GtkScaleButton
type TreeViewColumn C.GtkTreeViewColumn
type RadioButton C.GtkRadioButton
type ImageMenuItemPrivate C.GtkImageMenuItemPrivate
type RecentChooserMenu C.GtkRecentChooserMenu
type CalendarDisplayOptions C.GtkCalendarDisplayOptions
type CellRendererPixbuf C.GtkCellRendererPixbuf
type WidgetClass C.GtkWidgetClass
type InvisiblePrivate C.GtkInvisiblePrivate
type RadioAction C.GtkRadioAction
type RecentChooserDialogClass C.GtkRecentChooserDialogClass
type AppChooserDialogClass C.GtkAppChooserDialogClass
type SeparatorMenuItem C.GtkSeparatorMenuItem
type TreeSelectionPrivate C.GtkTreeSelectionPrivate
type PrintDuplex C.GtkPrintDuplex
type RcFlags C.GtkRcFlags
type IMContextSimpleClass C.GtkIMContextSimpleClass
type SymbolicColor C.GtkSymbolicColor
type TreeModelSortPrivate C.GtkTreeModelSortPrivate
type ComboBoxTextClass C.GtkComboBoxTextClass
type TextBuffer C.GtkTextBuffer
type TextDirection C.GtkTextDirection
type SocketPrivate C.GtkSocketPrivate
type MenuClass C.GtkMenuClass
type IconThemeError C.GtkIconThemeError
type TreeStorePrivate C.GtkTreeStorePrivate
type PanedPrivate C.GtkPanedPrivate
type CellRendererProgress C.GtkCellRendererProgress
type AccelGroupClass C.GtkAccelGroupClass
type TextBTree C.GtkTextBTree
type TreeViewDropPosition C.GtkTreeViewDropPosition
type TreeViewColumnSizing C.GtkTreeViewColumnSizing
type PrintSettingsFunc C.GtkPrintSettingsFunc
type ScrollableInterface C.GtkScrollableInterface
type ToolItemGroup C.GtkToolItemGroup
type PathType C.GtkPathType
type ReliefStyle C.GtkReliefStyle
type TreeModelIface C.GtkTreeModelIface
type SwitchClass C.GtkSwitchClass
type RadioActionEntry C.GtkRadioActionEntry
type RecentChooserWidgetClass C.GtkRecentChooserWidgetClass
type GridClass C.GtkGridClass
type PlugPrivate C.GtkPlugPrivate
type AlignmentPrivate C.GtkAlignmentPrivate
type VScrollbar C.GtkVScrollbar
type TextTagTableClass C.GtkTextTagTableClass
type ButtonBoxStyle C.GtkButtonBoxStyle
type CellRendererProgressPrivate C.GtkCellRendererProgressPrivate
type BindingSignal C.GtkBindingSignal
type Image C.GtkImage
type TreeRowReference C.GtkTreeRowReference
type LinkButtonClass C.GtkLinkButtonClass
type WidgetAuxInfo C.GtkWidgetAuxInfo
type TargetEntry C.GtkTargetEntry
type PrintError C.GtkPrintError
type ButtonBoxClass C.GtkButtonBoxClass
type TableClass C.GtkTableClass
type StyleContextClass C.GtkStyleContextClass
type ScrollbarClass C.GtkScrollbarClass
type EntryPrivate C.GtkEntryPrivate
type IMPreeditStyle C.GtkIMPreeditStyle
type StatusIcon C.GtkStatusIcon
type Tooltip C.GtkTooltip
type BindingArg C.GtkBindingArg
type ButtonBoxPrivate C.GtkButtonBoxPrivate
type RecentChooserDialogPrivate C.GtkRecentChooserDialogPrivate
type WindowGeometryInfo C.GtkWindowGeometryInfo
type ToggleAction C.GtkToggleAction
type InfoBarClass C.GtkInfoBarClass
type TreeIterCompareFunc C.GtkTreeIterCompareFunc
type AspectFrame C.GtkAspectFrame
type FileChooserWidgetPrivate C.GtkFileChooserWidgetPrivate
type DialogFlags C.GtkDialogFlags
type AssistantClass C.GtkAssistantClass
type SizeGroupMode C.GtkSizeGroupMode
type ApplicationWindowClass C.GtkApplicationWindowClass
type AttachOptions C.GtkAttachOptions
type RecentChooserMenuClass C.GtkRecentChooserMenuClass
type RecentChooserIface C.GtkRecentChooserIface
type AssistantPageType C.GtkAssistantPageType
type ListStorePrivate C.GtkListStorePrivate
type TreeDragSourceIface C.GtkTreeDragSourceIface
type ToolItem C.GtkToolItem
type HandleBoxClass C.GtkHandleBoxClass
type ScrolledWindowPrivate C.GtkScrolledWindowPrivate
type CellRendererToggleClass C.GtkCellRendererToggleClass
type Action C.GtkAction
type RecentManagerClass C.GtkRecentManagerClass
type Plug C.GtkPlug
type StatusbarClass C.GtkStatusbarClass
type AccessibleClass C.GtkAccessibleClass
type TextViewPrivate C.GtkTextViewPrivate
type StockItem C.GtkStockItem
type MenuButtonClass C.GtkMenuButtonClass
type ShadowType C.GtkShadowType
type ColorSelectionDialogPrivate C.GtkColorSelectionDialogPrivate
type DirectionType C.GtkDirectionType
type HBox C.GtkHBox
type ApplicationPrivate C.GtkApplicationPrivate
type CellAreaContext C.GtkCellAreaContext
type DrawingAreaClass C.GtkDrawingAreaClass
type EntryBufferPrivate C.GtkEntryBufferPrivate
type AppChooserDialog C.GtkAppChooserDialog
type DialogClass C.GtkDialogClass
type RequestedSize C.GtkRequestedSize
type HButtonBoxClass C.GtkHButtonBoxClass
type AspectFramePrivate C.GtkAspectFramePrivate
type StyleProperties C.GtkStyleProperties
type IconThemeClass C.GtkIconThemeClass
type TreeSelectionForeachFunc C.GtkTreeSelectionForeachFunc
type PlugClass C.GtkPlugClass
type ActionGroupClass C.GtkActionGroupClass
type TablePrivate C.GtkTablePrivate
type BoxPrivate C.GtkBoxPrivate
type Adjustment C.GtkAdjustment
type StyleProviderIface C.GtkStyleProviderIface
type ImageType C.GtkImageType
type ArrowPlacement C.GtkArrowPlacement
type Box C.GtkBox
type NumberUpLayout C.GtkNumberUpLayout
func AboutDialogNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_about_dialog_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AboutDialog) AddCreditSection(section_name string, people string) () {
	_cstring_section_name_ := C.CString(section_name)
	_cgo_section_name_ := (*C.gchar)(unsafe.Pointer(_cstring_section_name_))
	defer C.free(unsafe.Pointer(_cstring_section_name_))
	_cstring_people_ := C.CString(people)
	_cgo_people_ := (unsafe.Pointer)(unsafe.Pointer(_cstring_people_))
	defer C.free(unsafe.Pointer(_cstring_people_))
	C._gtk_about_dialog_add_credit_section((*C.GtkAboutDialog)(_self_), _cgo_section_name_, _cgo_people_)
	return
}

func (_self_ *AboutDialog) GetArtists() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_artists((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetAuthors() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_authors((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetComments() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_comments((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetCopyright() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_copyright((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetDocumenters() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_documenters((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLicense() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_license((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetLicenseType() (_return_ C.GtkLicense) {
	_return_ = C.gtk_about_dialog_get_license_type((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogo() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_about_dialog_get_logo((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogoIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_logo_icon_name((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetProgramName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_program_name((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetTranslatorCredits() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_translator_credits((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_version((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetWebsite() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_website((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetWebsiteLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_website_label((*C.GtkAboutDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AboutDialog) GetWrapLicense() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_about_dialog_get_wrap_license((*C.GtkAboutDialog)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AboutDialog) SetComments(comments string) () {
	_cstring_comments_ := C.CString(comments)
	_cgo_comments_ := (*C.gchar)(unsafe.Pointer(_cstring_comments_))
	defer C.free(unsafe.Pointer(_cstring_comments_))
	C._gtk_about_dialog_set_comments((*C.GtkAboutDialog)(_self_), _cgo_comments_)
	return
}

func (_self_ *AboutDialog) SetCopyright(copyright string) () {
	_cstring_copyright_ := C.CString(copyright)
	_cgo_copyright_ := (*C.gchar)(unsafe.Pointer(_cstring_copyright_))
	defer C.free(unsafe.Pointer(_cstring_copyright_))
	C._gtk_about_dialog_set_copyright((*C.GtkAboutDialog)(_self_), _cgo_copyright_)
	return
}

func (_self_ *AboutDialog) SetLicense(license string) () {
	_cstring_license_ := C.CString(license)
	_cgo_license_ := (*C.gchar)(unsafe.Pointer(_cstring_license_))
	defer C.free(unsafe.Pointer(_cstring_license_))
	C._gtk_about_dialog_set_license((*C.GtkAboutDialog)(_self_), _cgo_license_)
	return
}

func (_self_ *AboutDialog) SetLicenseType(license_type C.GtkLicense) () {
	C.gtk_about_dialog_set_license_type((*C.GtkAboutDialog)(_self_), license_type)
	return
}

func (_self_ *AboutDialog) SetLogo(logo *C.GdkPixbuf) () {
	C.gtk_about_dialog_set_logo((*C.GtkAboutDialog)(_self_), logo)
	return
}

func (_self_ *AboutDialog) SetLogoIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_about_dialog_set_logo_icon_name((*C.GtkAboutDialog)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *AboutDialog) SetProgramName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_about_dialog_set_program_name((*C.GtkAboutDialog)(_self_), _cgo_name_)
	return
}

func (_self_ *AboutDialog) SetTranslatorCredits(translator_credits string) () {
	_cstring_translator_credits_ := C.CString(translator_credits)
	_cgo_translator_credits_ := (*C.gchar)(unsafe.Pointer(_cstring_translator_credits_))
	defer C.free(unsafe.Pointer(_cstring_translator_credits_))
	C._gtk_about_dialog_set_translator_credits((*C.GtkAboutDialog)(_self_), _cgo_translator_credits_)
	return
}

func (_self_ *AboutDialog) SetVersion(version string) () {
	_cstring_version_ := C.CString(version)
	_cgo_version_ := (*C.gchar)(unsafe.Pointer(_cstring_version_))
	defer C.free(unsafe.Pointer(_cstring_version_))
	C._gtk_about_dialog_set_version((*C.GtkAboutDialog)(_self_), _cgo_version_)
	return
}

func (_self_ *AboutDialog) SetWebsite(website string) () {
	_cstring_website_ := C.CString(website)
	_cgo_website_ := (*C.gchar)(unsafe.Pointer(_cstring_website_))
	defer C.free(unsafe.Pointer(_cstring_website_))
	C._gtk_about_dialog_set_website((*C.GtkAboutDialog)(_self_), _cgo_website_)
	return
}

func (_self_ *AboutDialog) SetWebsiteLabel(website_label string) () {
	_cstring_website_label_ := C.CString(website_label)
	_cgo_website_label_ := (*C.gchar)(unsafe.Pointer(_cstring_website_label_))
	defer C.free(unsafe.Pointer(_cstring_website_label_))
	C._gtk_about_dialog_set_website_label((*C.GtkAboutDialog)(_self_), _cgo_website_label_)
	return
}

func (_self_ *AboutDialog) SetWrapLicense(wrap_license bool) () {
	_cgo_wrap_license_ := C.glibfalse()
	if wrap_license { _cgo_wrap_license_ = C.glibtrue() }
	C.gtk_about_dialog_set_wrap_license((*C.GtkAboutDialog)(_self_), _cgo_wrap_license_)
	return
}

func AccelGroupNew() (_go__return__ *AccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_accel_group_new()
	_go__return__ = (*AccelGroup)(unsafe.Pointer(_return_))
	return
}

func AccelGroupFromAccelClosure(closure *C.GClosure) (_go__return__ *AccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_accel_group_from_accel_closure(closure)
	_go__return__ = (*AccelGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AccelGroup) Activate(accel_quark C.GQuark, acceleratable *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_activate((*C.GtkAccelGroup)(_self_), accel_quark, acceleratable, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) Connect(accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags, closure *C.GClosure) () {
	_cgo_accel_key_ := (C.guint)(accel_key)
	C.gtk_accel_group_connect((*C.GtkAccelGroup)(_self_), _cgo_accel_key_, accel_mods, accel_flags, closure)
	return
}

func (_self_ *AccelGroup) ConnectByPath(accel_path string, closure *C.GClosure) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_group_connect_by_path((*C.GtkAccelGroup)(_self_), _cgo_accel_path_, closure)
	return
}

func (_self_ *AccelGroup) Disconnect(closure *C.GClosure) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_disconnect((*C.GtkAccelGroup)(_self_), closure)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) DisconnectKey(accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_disconnect_key((*C.GtkAccelGroup)(_self_), _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) Find(find_func C.GtkAccelGroupFindFunc, data C.gpointer) (_go__return__ *AccelKey) {
	var _return_ *C.GtkAccelKey
	_return_ = C.gtk_accel_group_find((*C.GtkAccelGroup)(_self_), find_func, data)
	_go__return__ = (*AccelKey)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AccelGroup) GetIsLocked() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_get_is_locked((*C.GtkAccelGroup)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) GetModifierMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accel_group_get_modifier_mask((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Lock() () {
	C.gtk_accel_group_lock((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Query(accel_key uint, accel_mods C.GdkModifierType) (_return_ *C.GtkAccelGroupEntry, _go_n_entries_ uint) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var n_entries C.guint
	_return_ = C.gtk_accel_group_query((*C.GtkAccelGroup)(_self_), _cgo_accel_key_, accel_mods, &n_entries)
	_go_n_entries_ = (uint)(n_entries)
	return
}

func (_self_ *AccelGroup) Unlock() () {
	C.gtk_accel_group_unlock((*C.GtkAccelGroup)(_self_))
	return
}

func AccelLabelNew(string_ string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	_return_ = C._gtk_accel_label_new(_cgo_string__)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AccelLabel) GetAccelWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_accel_label_get_accel_widget((*C.GtkAccelLabel)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AccelLabel) GetAccelWidth() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_accel_label_get_accel_width((*C.GtkAccelLabel)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *AccelLabel) Refetch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_label_refetch((*C.GtkAccelLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AccelLabel) SetAccel(accelerator_key uint, accelerator_mods C.GdkModifierType) () {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	C.gtk_accel_label_set_accel((*C.GtkAccelLabel)(_self_), _cgo_accelerator_key_, accelerator_mods)
	return
}

func (_self_ *AccelLabel) SetAccelClosure(accel_closure *C.GClosure) () {
	C.gtk_accel_label_set_accel_closure((*C.GtkAccelLabel)(_self_), accel_closure)
	return
}

func (_self_ *AccelLabel) SetAccelWidget(accel_widget *Widget) () {
	_cgo_accel_widget_ := (*C.GtkWidget)(unsafe.Pointer(accel_widget))
	C.gtk_accel_label_set_accel_widget((*C.GtkAccelLabel)(_self_), _cgo_accel_widget_)
	return
}

func AccelMapAddEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType) () {
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_add_entry(_cgo_accel_path_, _cgo_accel_key_, accel_mods)
	return
}

func AccelMapAddFilter(filter_pattern string) () {
	_cstring_filter_pattern_ := C.CString(filter_pattern)
	_cgo_filter_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_filter_pattern_))
	defer C.free(unsafe.Pointer(_cstring_filter_pattern_))
	C._gtk_accel_map_add_filter(_cgo_filter_pattern_)
	return
}

func AccelMapChangeEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType, replace bool) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	_cgo_replace_ := C.glibfalse()
	if replace { _cgo_replace_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_accel_map_change_entry(_cgo_accel_path_, _cgo_accel_key_, accel_mods, _cgo_replace_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func AccelMapForeachUnfiltered(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach_unfiltered(data, foreach_func)
	return
}

func AccelMapGet() (_go__return__ *AccelMap) {
	var _return_ *C.GtkAccelMap
	_return_ = C.gtk_accel_map_get()
	_go__return__ = (*AccelMap)(unsafe.Pointer(_return_))
	return
}

func AccelMapLoad(file_name string) () {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	C._gtk_accel_map_load(_cgo_file_name_)
	return
}

func AccelMapLoadFd(fd int) () {
	_cgo_fd_ := (C.gint)(fd)
	C.gtk_accel_map_load_fd(_cgo_fd_)
	return
}

func AccelMapLoadScanner(scanner *C.GScanner) () {
	C.gtk_accel_map_load_scanner(scanner)
	return
}

func AccelMapLockPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_lock_path(_cgo_accel_path_)
	return
}

func AccelMapLookupEntry(accel_path string) (_go__return__ bool, key *AccelKey) {
	var _allocated_key_ C.GtkAccelKey
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_accel_map_lookup_entry(_cgo_accel_path_, &_allocated_key_)
	key = (*AccelKey)(unsafe.Pointer(&_allocated_key_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func AccelMapSave(file_name string) () {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	C._gtk_accel_map_save(_cgo_file_name_)
	return
}

func AccelMapSaveFd(fd int) () {
	_cgo_fd_ := (C.gint)(fd)
	C.gtk_accel_map_save_fd(_cgo_fd_)
	return
}

func AccelMapUnlockPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_unlock_path(_cgo_accel_path_)
	return
}

func (_self_ *Accessible) GetWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_accessible_get_widget((*C.GtkAccessible)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Accessible) SetWidget(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_accessible_set_widget((*C.GtkAccessible)(_self_), _cgo_widget_)
	return
}

func ActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ *Action) {
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = (*Action)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Action) Activate() () {
	C.gtk_action_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) BlockActivate() () {
	C.gtk_action_block_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) ConnectAccelerator() () {
	C.gtk_action_connect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) CreateIcon(icon_size C.GtkIconSize) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_icon((*C.GtkAction)(_self_), icon_size)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Action) CreateMenu() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_menu((*C.GtkAction)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Action) CreateMenuItem() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_menu_item((*C.GtkAction)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Action) CreateToolItem() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_tool_item((*C.GtkAction)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Action) DisconnectAccelerator() () {
	C.gtk_action_disconnect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelClosure() (_return_ *C.GClosure) {
	_return_ = C.gtk_action_get_accel_closure((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_accel_path((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_always_show_image((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_action_get_gicon((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_icon_name((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetIsImportant() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_is_important((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_label((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_name((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetProxies() (_return_ *C.GSList) {
	_return_ = C.gtk_action_get_proxies((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_sensitive((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) GetShortLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_short_label((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetStockId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_stock_id((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetTooltip() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_tooltip((*C.GtkAction)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Action) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) GetVisibleHorizontal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible_horizontal((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) GetVisibleVertical() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible_vertical((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) IsSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_is_sensitive((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) IsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_is_visible((*C.GtkAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Action) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_action_set_accel_group((*C.GtkAction)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *Action) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_action_set_accel_path((*C.GtkAction)(_self_), _cgo_accel_path_)
	return
}

func (_self_ *Action) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := C.glibfalse()
	if always_show { _cgo_always_show_ = C.glibtrue() }
	C.gtk_action_set_always_show_image((*C.GtkAction)(_self_), _cgo_always_show_)
	return
}

func (_self_ *Action) SetGicon(icon *C.GIcon) () {
	C.gtk_action_set_gicon((*C.GtkAction)(_self_), icon)
	return
}

func (_self_ *Action) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_action_set_icon_name((*C.GtkAction)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *Action) SetIsImportant(is_important bool) () {
	_cgo_is_important_ := C.glibfalse()
	if is_important { _cgo_is_important_ = C.glibtrue() }
	C.gtk_action_set_is_important((*C.GtkAction)(_self_), _cgo_is_important_)
	return
}

func (_self_ *Action) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_action_set_label((*C.GtkAction)(_self_), _cgo_label_)
	return
}

func (_self_ *Action) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := C.glibfalse()
	if sensitive { _cgo_sensitive_ = C.glibtrue() }
	C.gtk_action_set_sensitive((*C.GtkAction)(_self_), _cgo_sensitive_)
	return
}

func (_self_ *Action) SetShortLabel(short_label string) () {
	_cstring_short_label_ := C.CString(short_label)
	_cgo_short_label_ := (*C.gchar)(unsafe.Pointer(_cstring_short_label_))
	defer C.free(unsafe.Pointer(_cstring_short_label_))
	C._gtk_action_set_short_label((*C.GtkAction)(_self_), _cgo_short_label_)
	return
}

func (_self_ *Action) SetStockId(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_action_set_stock_id((*C.GtkAction)(_self_), _cgo_stock_id_)
	return
}

func (_self_ *Action) SetTooltip(tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_action_set_tooltip((*C.GtkAction)(_self_), _cgo_tooltip_)
	return
}

func (_self_ *Action) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_action_set_visible((*C.GtkAction)(_self_), _cgo_visible_)
	return
}

func (_self_ *Action) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_visible_horizontal_ := C.glibfalse()
	if visible_horizontal { _cgo_visible_horizontal_ = C.glibtrue() }
	C.gtk_action_set_visible_horizontal((*C.GtkAction)(_self_), _cgo_visible_horizontal_)
	return
}

func (_self_ *Action) SetVisibleVertical(visible_vertical bool) () {
	_cgo_visible_vertical_ := C.glibfalse()
	if visible_vertical { _cgo_visible_vertical_ = C.glibtrue() }
	C.gtk_action_set_visible_vertical((*C.GtkAction)(_self_), _cgo_visible_vertical_)
	return
}

func (_self_ *Action) UnblockActivate() () {
	C.gtk_action_unblock_activate((*C.GtkAction)(_self_))
	return
}

func ActionGroupNew(name string) (_go__return__ *ActionGroup) {
	var _return_ *C.GtkActionGroup
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_action_group_new(_cgo_name_)
	_go__return__ = (*ActionGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActionGroup) AddAction(action *Action) () {
	_cgo_action_ := (*C.GtkAction)(unsafe.Pointer(action))
	C.gtk_action_group_add_action((*C.GtkActionGroup)(_self_), _cgo_action_)
	return
}

func (_self_ *ActionGroup) AddActionWithAccel(action *Action, accelerator string) () {
	_cgo_action_ := (*C.GtkAction)(unsafe.Pointer(action))
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_action_group_add_action_with_accel((*C.GtkActionGroup)(_self_), _cgo_action_, _cgo_accelerator_)
	return
}

func (_self_ *ActionGroup) GetAccelGroup() (_go__return__ *AccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_action_group_get_accel_group((*C.GtkActionGroup)(_self_))
	_go__return__ = (*AccelGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActionGroup) GetAction(action_name string) (_go__return__ *Action) {
	var _return_ *C.GtkAction
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	_return_ = C._gtk_action_group_get_action((*C.GtkActionGroup)(_self_), _cgo_action_name_)
	_go__return__ = (*Action)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActionGroup) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_group_get_name((*C.GtkActionGroup)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ActionGroup) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_group_get_sensitive((*C.GtkActionGroup)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ActionGroup) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_group_get_visible((*C.GtkActionGroup)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ActionGroup) ListActions() (_return_ *C.GList) {
	_return_ = C.gtk_action_group_list_actions((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) RemoveAction(action *Action) () {
	_cgo_action_ := (*C.GtkAction)(unsafe.Pointer(action))
	C.gtk_action_group_remove_action((*C.GtkActionGroup)(_self_), _cgo_action_)
	return
}

func (_self_ *ActionGroup) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_action_group_set_accel_group((*C.GtkActionGroup)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *ActionGroup) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := C.glibfalse()
	if sensitive { _cgo_sensitive_ = C.glibtrue() }
	C.gtk_action_group_set_sensitive((*C.GtkActionGroup)(_self_), _cgo_sensitive_)
	return
}

func (_self_ *ActionGroup) SetTranslateFunc(func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_action_group_set_translate_func((*C.GtkActionGroup)(_self_), func_, data, notify)
	return
}

func (_self_ *ActionGroup) SetTranslationDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_action_group_set_translation_domain((*C.GtkActionGroup)(_self_), _cgo_domain_)
	return
}

func (_self_ *ActionGroup) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_action_group_set_visible((*C.GtkActionGroup)(_self_), _cgo_visible_)
	return
}

func (_self_ *ActionGroup) TranslateString(string_ string) (_go__return__ string) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ *C.gchar
	_return_ = C._gtk_action_group_translate_string((*C.GtkActionGroup)(_self_), _cgo_string__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AdjustmentNew(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_cgo_value_ := (C.gdouble)(value)
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	_cgo_page_size_ := (C.gdouble)(page_size)
	_return_ = C.gtk_adjustment_new(_cgo_value_, _cgo_lower_, _cgo_upper_, _cgo_step_increment_, _cgo_page_increment_, _cgo_page_size_)
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Adjustment) Changed() () {
	C.gtk_adjustment_changed((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) ClampPage(lower float64, upper float64) () {
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	C.gtk_adjustment_clamp_page((*C.GtkAdjustment)(_self_), _cgo_lower_, _cgo_upper_)
	return
}

func (_self_ *Adjustment) Configure(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	_cgo_page_size_ := (C.gdouble)(page_size)
	C.gtk_adjustment_configure((*C.GtkAdjustment)(_self_), _cgo_value_, _cgo_lower_, _cgo_upper_, _cgo_step_increment_, _cgo_page_increment_, _cgo_page_size_)
	return
}

func (_self_ *Adjustment) GetLower() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_lower((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetMinimumIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_minimum_increment((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetPageIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_page_increment((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetPageSize() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_page_size((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetStepIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_step_increment((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetUpper() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_upper((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_value((*C.GtkAdjustment)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Adjustment) SetLower(lower float64) () {
	_cgo_lower_ := (C.gdouble)(lower)
	C.gtk_adjustment_set_lower((*C.GtkAdjustment)(_self_), _cgo_lower_)
	return
}

func (_self_ *Adjustment) SetPageIncrement(page_increment float64) () {
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	C.gtk_adjustment_set_page_increment((*C.GtkAdjustment)(_self_), _cgo_page_increment_)
	return
}

func (_self_ *Adjustment) SetPageSize(page_size float64) () {
	_cgo_page_size_ := (C.gdouble)(page_size)
	C.gtk_adjustment_set_page_size((*C.GtkAdjustment)(_self_), _cgo_page_size_)
	return
}

func (_self_ *Adjustment) SetStepIncrement(step_increment float64) () {
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	C.gtk_adjustment_set_step_increment((*C.GtkAdjustment)(_self_), _cgo_step_increment_)
	return
}

func (_self_ *Adjustment) SetUpper(upper float64) () {
	_cgo_upper_ := (C.gdouble)(upper)
	C.gtk_adjustment_set_upper((*C.GtkAdjustment)(_self_), _cgo_upper_)
	return
}

func (_self_ *Adjustment) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_adjustment_set_value((*C.GtkAdjustment)(_self_), _cgo_value_)
	return
}

func (_self_ *Adjustment) ValueChanged() () {
	C.gtk_adjustment_value_changed((*C.GtkAdjustment)(_self_))
	return
}

func AlignmentNew(xalign float64, yalign float64, xscale float64, yscale float64) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_xscale_ := (C.gfloat)(xscale)
	_cgo_yscale_ := (C.gfloat)(yscale)
	_return_ = C.gtk_alignment_new(_cgo_xalign_, _cgo_yalign_, _cgo_xscale_, _cgo_yscale_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Alignment) GetPadding() (_go_padding_top_ uint, _go_padding_bottom_ uint, _go_padding_left_ uint, _go_padding_right_ uint) {
	var padding_top C.guint
	var padding_bottom C.guint
	var padding_left C.guint
	var padding_right C.guint
	C.gtk_alignment_get_padding((*C.GtkAlignment)(_self_), &padding_top, &padding_bottom, &padding_left, &padding_right)
	_go_padding_top_ = (uint)(padding_top)
	_go_padding_bottom_ = (uint)(padding_bottom)
	_go_padding_left_ = (uint)(padding_left)
	_go_padding_right_ = (uint)(padding_right)
	return
}

func (_self_ *Alignment) Set(xalign float64, yalign float64, xscale float64, yscale float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_xscale_ := (C.gfloat)(xscale)
	_cgo_yscale_ := (C.gfloat)(yscale)
	C.gtk_alignment_set((*C.GtkAlignment)(_self_), _cgo_xalign_, _cgo_yalign_, _cgo_xscale_, _cgo_yscale_)
	return
}

func (_self_ *Alignment) SetPadding(padding_top uint, padding_bottom uint, padding_left uint, padding_right uint) () {
	_cgo_padding_top_ := (C.guint)(padding_top)
	_cgo_padding_bottom_ := (C.guint)(padding_bottom)
	_cgo_padding_left_ := (C.guint)(padding_left)
	_cgo_padding_right_ := (C.guint)(padding_right)
	C.gtk_alignment_set_padding((*C.GtkAlignment)(_self_), _cgo_padding_top_, _cgo_padding_bottom_, _cgo_padding_left_, _cgo_padding_right_)
	return
}

func AppChooserButtonNew(content_type string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_button_new(_cgo_content_type_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AppChooserButton) AppendCustomItem(name string, label string, icon *C.GIcon) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_app_chooser_button_append_custom_item((*C.GtkAppChooserButton)(_self_), _cgo_name_, _cgo_label_, icon)
	return
}

func (_self_ *AppChooserButton) AppendSeparator() () {
	C.gtk_app_chooser_button_append_separator((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) GetHeading() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_button_get_heading((*C.GtkAppChooserButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AppChooserButton) GetShowDefaultItem() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_button_get_show_default_item((*C.GtkAppChooserButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserButton) GetShowDialogItem() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_button_get_show_dialog_item((*C.GtkAppChooserButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserButton) SetActiveCustomItem(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_app_chooser_button_set_active_custom_item((*C.GtkAppChooserButton)(_self_), _cgo_name_)
	return
}

func (_self_ *AppChooserButton) SetHeading(heading string) () {
	_cstring_heading_ := C.CString(heading)
	_cgo_heading_ := (*C.gchar)(unsafe.Pointer(_cstring_heading_))
	defer C.free(unsafe.Pointer(_cstring_heading_))
	C._gtk_app_chooser_button_set_heading((*C.GtkAppChooserButton)(_self_), _cgo_heading_)
	return
}

func (_self_ *AppChooserButton) SetShowDefaultItem(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_button_set_show_default_item((*C.GtkAppChooserButton)(_self_), _cgo_setting_)
	return
}

func (_self_ *AppChooserButton) SetShowDialogItem(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_button_set_show_dialog_item((*C.GtkAppChooserButton)(_self_), _cgo_setting_)
	return
}

func AppChooserDialogNew(parent *Window, flags C.GtkDialogFlags, file *C.GFile) (_go__return__ *Widget) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_app_chooser_dialog_new(_cgo_parent_, flags, file)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func AppChooserDialogNewForContentType(parent *Window, flags C.GtkDialogFlags, content_type string) (_go__return__ *Widget) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_dialog_new_for_content_type(_cgo_parent_, flags, _cgo_content_type_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AppChooserDialog) GetHeading() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_dialog_get_heading((*C.GtkAppChooserDialog)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AppChooserDialog) GetWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_app_chooser_dialog_get_widget((*C.GtkAppChooserDialog)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AppChooserDialog) SetHeading(heading string) () {
	_cstring_heading_ := C.CString(heading)
	_cgo_heading_ := (*C.gchar)(unsafe.Pointer(_cstring_heading_))
	defer C.free(unsafe.Pointer(_cstring_heading_))
	C._gtk_app_chooser_dialog_set_heading((*C.GtkAppChooserDialog)(_self_), _cgo_heading_)
	return
}

func AppChooserWidgetNew(content_type string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_widget_new(_cgo_content_type_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AppChooserWidget) GetDefaultText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_widget_get_default_text((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AppChooserWidget) GetShowAll() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_all((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_default((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowFallback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_fallback((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowOther() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_other((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowRecommended() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_recommended((*C.GtkAppChooserWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) SetDefaultText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_app_chooser_widget_set_default_text((*C.GtkAppChooserWidget)(_self_), _cgo_text_)
	return
}

func (_self_ *AppChooserWidget) SetShowAll(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_widget_set_show_all((*C.GtkAppChooserWidget)(_self_), _cgo_setting_)
	return
}

func (_self_ *AppChooserWidget) SetShowDefault(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_widget_set_show_default((*C.GtkAppChooserWidget)(_self_), _cgo_setting_)
	return
}

func (_self_ *AppChooserWidget) SetShowFallback(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_widget_set_show_fallback((*C.GtkAppChooserWidget)(_self_), _cgo_setting_)
	return
}

func (_self_ *AppChooserWidget) SetShowOther(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_widget_set_show_other((*C.GtkAppChooserWidget)(_self_), _cgo_setting_)
	return
}

func (_self_ *AppChooserWidget) SetShowRecommended(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_app_chooser_widget_set_show_recommended((*C.GtkAppChooserWidget)(_self_), _cgo_setting_)
	return
}

func ApplicationNew(application_id string, flags C.GApplicationFlags) (_go__return__ *Application) {
	var _return_ *C.GtkApplication
	_cstring_application_id_ := C.CString(application_id)
	_cgo_application_id_ := (*C.gchar)(unsafe.Pointer(_cstring_application_id_))
	defer C.free(unsafe.Pointer(_cstring_application_id_))
	_return_ = C._gtk_application_new(_cgo_application_id_, flags)
	_go__return__ = (*Application)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Application) AddAccelerator(accelerator string, action_name string, parameter *C.GVariant) () {
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._gtk_application_add_accelerator((*C.GtkApplication)(_self_), _cgo_accelerator_, _cgo_action_name_, parameter)
	return
}

func (_self_ *Application) AddWindow(window *Window) () {
	_cgo_window_ := (*C.GtkWindow)(unsafe.Pointer(window))
	C.gtk_application_add_window((*C.GtkApplication)(_self_), _cgo_window_)
	return
}

func (_self_ *Application) GetActiveWindow() (_go__return__ *Window) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_application_get_active_window((*C.GtkApplication)(_self_))
	_go__return__ = (*Window)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Application) GetAppMenu() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_app_menu((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetMenubar() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_menubar((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetWindowById(id uint) (_go__return__ *Window) {
	var _return_ *C.GtkWindow
	_cgo_id_ := (C.guint)(id)
	_return_ = C.gtk_application_get_window_by_id((*C.GtkApplication)(_self_), _cgo_id_)
	_go__return__ = (*Window)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Application) GetWindows() (_return_ *C.GList) {
	_return_ = C.gtk_application_get_windows((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) Inhibit(window *Window, flags C.GtkApplicationInhibitFlags, reason string) (_go__return__ uint) {
	_cgo_window_ := (*C.GtkWindow)(unsafe.Pointer(window))
	var _return_ C.guint
	_cstring_reason_ := C.CString(reason)
	_cgo_reason_ := (*C.gchar)(unsafe.Pointer(_cstring_reason_))
	defer C.free(unsafe.Pointer(_cstring_reason_))
	_return_ = C._gtk_application_inhibit((*C.GtkApplication)(_self_), _cgo_window_, flags, _cgo_reason_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Application) IsInhibited(flags C.GtkApplicationInhibitFlags) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_application_is_inhibited((*C.GtkApplication)(_self_), flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Application) RemoveAccelerator(action_name string, parameter *C.GVariant) () {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._gtk_application_remove_accelerator((*C.GtkApplication)(_self_), _cgo_action_name_, parameter)
	return
}

func (_self_ *Application) RemoveWindow(window *Window) () {
	_cgo_window_ := (*C.GtkWindow)(unsafe.Pointer(window))
	C.gtk_application_remove_window((*C.GtkApplication)(_self_), _cgo_window_)
	return
}

func (_self_ *Application) SetAppMenu(app_menu *C.GMenuModel) () {
	C.gtk_application_set_app_menu((*C.GtkApplication)(_self_), app_menu)
	return
}

func (_self_ *Application) SetMenubar(menubar *C.GMenuModel) () {
	C.gtk_application_set_menubar((*C.GtkApplication)(_self_), menubar)
	return
}

func (_self_ *Application) Uninhibit(cookie uint) () {
	_cgo_cookie_ := (C.guint)(cookie)
	C.gtk_application_uninhibit((*C.GtkApplication)(_self_), _cgo_cookie_)
	return
}

func ApplicationWindowNew(application *Application) (_go__return__ *Widget) {
	_cgo_application_ := (*C.GtkApplication)(unsafe.Pointer(application))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_application_window_new(_cgo_application_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ApplicationWindow) GetId() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_application_window_get_id((*C.GtkApplicationWindow)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ApplicationWindow) GetShowMenubar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_application_window_get_show_menubar((*C.GtkApplicationWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ApplicationWindow) SetShowMenubar(show_menubar bool) () {
	_cgo_show_menubar_ := C.glibfalse()
	if show_menubar { _cgo_show_menubar_ = C.glibtrue() }
	C.gtk_application_window_set_show_menubar((*C.GtkApplicationWindow)(_self_), _cgo_show_menubar_)
	return
}

func ArrowNew(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_arrow_new(arrow_type, shadow_type)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Arrow) Set(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) () {
	C.gtk_arrow_set((*C.GtkArrow)(_self_), arrow_type, shadow_type)
	return
}

func AspectFrameNew(label string, xalign float64, yalign float64, ratio float64, obey_child bool) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_ratio_ := (C.gfloat)(ratio)
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cgo_obey_child_ := C.glibfalse()
	if obey_child { _cgo_obey_child_ = C.glibtrue() }
	_return_ = C._gtk_aspect_frame_new(_cgo_label_, _cgo_xalign_, _cgo_yalign_, _cgo_ratio_, _cgo_obey_child_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *AspectFrame) Set(xalign float64, yalign float64, ratio float64, obey_child bool) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_ratio_ := (C.gfloat)(ratio)
	_cgo_obey_child_ := C.glibfalse()
	if obey_child { _cgo_obey_child_ = C.glibtrue() }
	C.gtk_aspect_frame_set((*C.GtkAspectFrame)(_self_), _cgo_xalign_, _cgo_yalign_, _cgo_ratio_, _cgo_obey_child_)
	return
}

func AssistantNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_assistant_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Assistant) AddActionWidget(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_assistant_add_action_widget((*C.GtkAssistant)(_self_), _cgo_child_)
	return
}

func (_self_ *Assistant) AppendPage(page *Widget) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	var _return_ C.gint
	_return_ = C.gtk_assistant_append_page((*C.GtkAssistant)(_self_), _cgo_page_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Assistant) Commit() () {
	C.gtk_assistant_commit((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) GetCurrentPage() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_assistant_get_current_page((*C.GtkAssistant)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Assistant) GetNPages() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_assistant_get_n_pages((*C.GtkAssistant)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Assistant) GetNthPage(page_num int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_page_num_ := (C.gint)(page_num)
	_return_ = C.gtk_assistant_get_nth_page((*C.GtkAssistant)(_self_), _cgo_page_num_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Assistant) GetPageComplete(page *Widget) (_go__return__ bool) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	var _return_ C.gboolean
	_return_ = C.gtk_assistant_get_page_complete((*C.GtkAssistant)(_self_), _cgo_page_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Assistant) GetPageTitle(page *Widget) (_go__return__ string) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	var _return_ *C.gchar
	_return_ = C._gtk_assistant_get_page_title((*C.GtkAssistant)(_self_), _cgo_page_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Assistant) GetPageType(page *Widget) (_return_ C.GtkAssistantPageType) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	_return_ = C.gtk_assistant_get_page_type((*C.GtkAssistant)(_self_), _cgo_page_)
	return
}

func (_self_ *Assistant) InsertPage(page *Widget, position int) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_assistant_insert_page((*C.GtkAssistant)(_self_), _cgo_page_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Assistant) NextPage() () {
	C.gtk_assistant_next_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) PrependPage(page *Widget) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	var _return_ C.gint
	_return_ = C.gtk_assistant_prepend_page((*C.GtkAssistant)(_self_), _cgo_page_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Assistant) PreviousPage() () {
	C.gtk_assistant_previous_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) RemoveActionWidget(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_assistant_remove_action_widget((*C.GtkAssistant)(_self_), _cgo_child_)
	return
}

func (_self_ *Assistant) RemovePage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_assistant_remove_page((*C.GtkAssistant)(_self_), _cgo_page_num_)
	return
}

func (_self_ *Assistant) SetCurrentPage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_assistant_set_current_page((*C.GtkAssistant)(_self_), _cgo_page_num_)
	return
}

func (_self_ *Assistant) SetForwardPageFunc(page_func C.GtkAssistantPageFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_assistant_set_forward_page_func((*C.GtkAssistant)(_self_), page_func, data, destroy)
	return
}

func (_self_ *Assistant) SetPageComplete(page *Widget, complete bool) () {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	_cgo_complete_ := C.glibfalse()
	if complete { _cgo_complete_ = C.glibtrue() }
	C.gtk_assistant_set_page_complete((*C.GtkAssistant)(_self_), _cgo_page_, _cgo_complete_)
	return
}

func (_self_ *Assistant) SetPageTitle(page *Widget, title string) () {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_assistant_set_page_title((*C.GtkAssistant)(_self_), _cgo_page_, _cgo_title_)
	return
}

func (_self_ *Assistant) SetPageType(page *Widget, type_ C.GtkAssistantPageType) () {
	_cgo_page_ := (*C.GtkWidget)(unsafe.Pointer(page))
	C.gtk_assistant_set_page_type((*C.GtkAssistant)(_self_), _cgo_page_, type_)
	return
}

func (_self_ *Assistant) UpdateButtonsState() () {
	C.gtk_assistant_update_buttons_state((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Bin) GetChild() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_bin_get_child((*C.GtkBin)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func BindingEntryAddSignalFromString(binding_set *BindingSet, signal_desc string) (_return_ C.GTokenType) {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cstring_signal_desc_ := C.CString(signal_desc)
	_cgo_signal_desc_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_desc_))
	defer C.free(unsafe.Pointer(_cstring_signal_desc_))
	_return_ = C._gtk_binding_entry_add_signal_from_string(_cgo_binding_set_, _cgo_signal_desc_)
	return
}

func BindingEntryAddSignall(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType, signal_name string, binding_args *C.GSList) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	_cstring_signal_name_ := C.CString(signal_name)
	_cgo_signal_name_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_name_))
	defer C.free(unsafe.Pointer(_cstring_signal_name_))
	C._gtk_binding_entry_add_signall(_cgo_binding_set_, _cgo_keyval_, modifiers, _cgo_signal_name_, binding_args)
	return
}

func BindingEntryRemove(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_remove(_cgo_binding_set_, _cgo_keyval_, modifiers)
	return
}

func BindingEntrySkip(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_skip(_cgo_binding_set_, _cgo_keyval_, modifiers)
	return
}

func BindingSetByClass(object_class C.gpointer) (_go__return__ *BindingSet) {
	var _return_ *C.GtkBindingSet
	_return_ = C.gtk_binding_set_by_class(object_class)
	_go__return__ = (*BindingSet)(unsafe.Pointer(_return_))
	return
}

func BindingSetFind(set_name string) (_go__return__ *BindingSet) {
	var _return_ *C.GtkBindingSet
	_cstring_set_name_ := C.CString(set_name)
	_cgo_set_name_ := (*C.gchar)(unsafe.Pointer(_cstring_set_name_))
	defer C.free(unsafe.Pointer(_cstring_set_name_))
	_return_ = C._gtk_binding_set_find(_cgo_set_name_)
	_go__return__ = (*BindingSet)(unsafe.Pointer(_return_))
	return
}

func BindingSetNew(set_name string) (_go__return__ *BindingSet) {
	var _return_ *C.GtkBindingSet
	_cstring_set_name_ := C.CString(set_name)
	_cgo_set_name_ := (*C.gchar)(unsafe.Pointer(_cstring_set_name_))
	defer C.free(unsafe.Pointer(_cstring_set_name_))
	_return_ = C._gtk_binding_set_new(_cgo_set_name_)
	_go__return__ = (*BindingSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *BindingSet) Activate(keyval uint, modifiers C.GdkModifierType, object *C.GObject) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_binding_set_activate((*C.GtkBindingSet)(_self_), _cgo_keyval_, modifiers, object)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func BorderNew() (_go__return__ *Border) {
	var _return_ *C.GtkBorder
	_return_ = C.gtk_border_new()
	_go__return__ = (*Border)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Border) Copy() (_go__return__ *Border) {
	var _return_ *C.GtkBorder
	_return_ = C._gtk_border_copy((*C.GtkBorder)(_self_))
	_go__return__ = (*Border)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Border) Free() () {
	C.gtk_border_free((*C.GtkBorder)(_self_))
	return
}

func BoxNew(orientation C.GtkOrientation, spacing int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_spacing_ := (C.gint)(spacing)
	_return_ = C.gtk_box_new(orientation, _cgo_spacing_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Box) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_box_get_homogeneous((*C.GtkBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Box) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_box_get_spacing((*C.GtkBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Box) PackEnd(child *Widget, expand bool, fill bool, padding uint) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	_cgo_fill_ := C.glibfalse()
	if fill { _cgo_fill_ = C.glibtrue() }
	C.gtk_box_pack_end((*C.GtkBox)(_self_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_)
	return
}

func (_self_ *Box) PackStart(child *Widget, expand bool, fill bool, padding uint) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	_cgo_fill_ := C.glibfalse()
	if fill { _cgo_fill_ = C.glibtrue() }
	C.gtk_box_pack_start((*C.GtkBox)(_self_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_)
	return
}

func (_self_ *Box) QueryChildPacking(child *Widget) (_go_expand_ bool, _go_fill_ bool, _go_padding_ uint, pack_type *C.GtkPackType) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var padding C.guint
	var expand C.gboolean
	var fill C.gboolean
	C.gtk_box_query_child_packing((*C.GtkBox)(_self_), _cgo_child_, &expand, &fill, &padding, pack_type)
	_go_padding_ = (uint)(padding)
	_go_expand_ = expand == C.glibtrue()
	_go_fill_ = fill == C.glibtrue()
	return
}

func (_self_ *Box) ReorderChild(child *Widget, position int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_position_ := (C.gint)(position)
	C.gtk_box_reorder_child((*C.GtkBox)(_self_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *Box) SetChildPacking(child *Widget, expand bool, fill bool, padding uint, pack_type C.GtkPackType) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	_cgo_fill_ := C.glibfalse()
	if fill { _cgo_fill_ = C.glibtrue() }
	C.gtk_box_set_child_packing((*C.GtkBox)(_self_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_, pack_type)
	return
}

func (_self_ *Box) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := C.glibfalse()
	if homogeneous { _cgo_homogeneous_ = C.glibtrue() }
	C.gtk_box_set_homogeneous((*C.GtkBox)(_self_), _cgo_homogeneous_)
	return
}

func (_self_ *Box) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_box_set_spacing((*C.GtkBox)(_self_), _cgo_spacing_)
	return
}

func BuilderNew() (_go__return__ *Builder) {
	var _return_ *C.GtkBuilder
	_return_ = C.gtk_builder_new()
	_go__return__ = (*Builder)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Builder) AddFromFile(filename string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_builder_add_from_file((*C.GtkBuilder)(_self_), _cgo_filename_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Builder) AddFromResource(resource_path string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_builder_add_from_resource((*C.GtkBuilder)(_self_), _cgo_resource_path_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Builder) AddFromString(buffer string, length uint64) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_length_ := (C.gsize)(length)
	var _return_ C.guint
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_return_ = C._gtk_builder_add_from_string((*C.GtkBuilder)(_self_), _cgo_buffer_, _cgo_length_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Builder) ConnectSignals(user_data C.gpointer) () {
	C.gtk_builder_connect_signals((*C.GtkBuilder)(_self_), user_data)
	return
}

func (_self_ *Builder) ConnectSignalsFull(func_ C.GtkBuilderConnectFunc, user_data C.gpointer) () {
	C.gtk_builder_connect_signals_full((*C.GtkBuilder)(_self_), func_, user_data)
	return
}

func (_self_ *Builder) GetObject(name string) (_return_ *C.GObject) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_builder_get_object((*C.GtkBuilder)(_self_), _cgo_name_)
	return
}

func (_self_ *Builder) GetObjects() (_return_ *C.GSList) {
	_return_ = C.gtk_builder_get_objects((*C.GtkBuilder)(_self_))
	return
}

func (_self_ *Builder) GetTranslationDomain() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_builder_get_translation_domain((*C.GtkBuilder)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Builder) GetTypeFromName(type_name string) (_return_ C.GType) {
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.char)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._gtk_builder_get_type_from_name((*C.GtkBuilder)(_self_), _cgo_type_name_)
	return
}

func (_self_ *Builder) SetTranslationDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_builder_set_translation_domain((*C.GtkBuilder)(_self_), _cgo_domain_)
	return
}

func (_self_ *Builder) ValueFromString(pspec *C.GParamSpec, string_ string) (_go__return__ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._gtk_builder_value_from_string((*C.GtkBuilder)(_self_), pspec, _cgo_string__, value, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Builder) ValueFromStringType(type_ C.GType, string_ string) (_go__return__ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._gtk_builder_value_from_string_type((*C.GtkBuilder)(_self_), type_, _cgo_string__, value, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func ButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ButtonNewFromStock(stock_id string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ButtonNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_button_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ButtonNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Button) Clicked() () {
	C.gtk_button_clicked((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_button_get_alignment((*C.GtkButton)(_self_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *Button) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_always_show_image((*C.GtkButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Button) GetEventWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_button_get_event_window((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_focus_on_click((*C.GtkButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Button) GetImage() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_get_image((*C.GtkButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Button) GetImagePosition() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_button_get_image_position((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_button_get_label((*C.GtkButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Button) GetRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_button_get_relief((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetUseStock() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_use_stock((*C.GtkButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Button) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_use_underline((*C.GtkButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Button) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_button_set_alignment((*C.GtkButton)(_self_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *Button) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := C.glibfalse()
	if always_show { _cgo_always_show_ = C.glibtrue() }
	C.gtk_button_set_always_show_image((*C.GtkButton)(_self_), _cgo_always_show_)
	return
}

func (_self_ *Button) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := C.glibfalse()
	if focus_on_click { _cgo_focus_on_click_ = C.glibtrue() }
	C.gtk_button_set_focus_on_click((*C.GtkButton)(_self_), _cgo_focus_on_click_)
	return
}

func (_self_ *Button) SetImage(image *Widget) () {
	_cgo_image_ := (*C.GtkWidget)(unsafe.Pointer(image))
	C.gtk_button_set_image((*C.GtkButton)(_self_), _cgo_image_)
	return
}

func (_self_ *Button) SetImagePosition(position C.GtkPositionType) () {
	C.gtk_button_set_image_position((*C.GtkButton)(_self_), position)
	return
}

func (_self_ *Button) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_button_set_label((*C.GtkButton)(_self_), _cgo_label_)
	return
}

func (_self_ *Button) SetRelief(newstyle C.GtkReliefStyle) () {
	C.gtk_button_set_relief((*C.GtkButton)(_self_), newstyle)
	return
}

func (_self_ *Button) SetUseStock(use_stock bool) () {
	_cgo_use_stock_ := C.glibfalse()
	if use_stock { _cgo_use_stock_ = C.glibtrue() }
	C.gtk_button_set_use_stock((*C.GtkButton)(_self_), _cgo_use_stock_)
	return
}

func (_self_ *Button) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := C.glibfalse()
	if use_underline { _cgo_use_underline_ = C.glibtrue() }
	C.gtk_button_set_use_underline((*C.GtkButton)(_self_), _cgo_use_underline_)
	return
}

func ButtonBoxNew(orientation C.GtkOrientation) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_box_new(orientation)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ButtonBox) GetChildNonHomogeneous(child *Widget) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ C.gboolean
	_return_ = C.gtk_button_box_get_child_non_homogeneous((*C.GtkButtonBox)(_self_), _cgo_child_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ButtonBox) GetChildSecondary(child *Widget) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ C.gboolean
	_return_ = C.gtk_button_box_get_child_secondary((*C.GtkButtonBox)(_self_), _cgo_child_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ButtonBox) GetLayout() (_return_ C.GtkButtonBoxStyle) {
	_return_ = C.gtk_button_box_get_layout((*C.GtkButtonBox)(_self_))
	return
}

func (_self_ *ButtonBox) SetChildNonHomogeneous(child *Widget, non_homogeneous bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_non_homogeneous_ := C.glibfalse()
	if non_homogeneous { _cgo_non_homogeneous_ = C.glibtrue() }
	C.gtk_button_box_set_child_non_homogeneous((*C.GtkButtonBox)(_self_), _cgo_child_, _cgo_non_homogeneous_)
	return
}

func (_self_ *ButtonBox) SetChildSecondary(child *Widget, is_secondary bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_is_secondary_ := C.glibfalse()
	if is_secondary { _cgo_is_secondary_ = C.glibtrue() }
	C.gtk_button_box_set_child_secondary((*C.GtkButtonBox)(_self_), _cgo_child_, _cgo_is_secondary_)
	return
}

func (_self_ *ButtonBox) SetLayout(layout_style C.GtkButtonBoxStyle) () {
	C.gtk_button_box_set_layout((*C.GtkButtonBox)(_self_), layout_style)
	return
}

func CalendarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_calendar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Calendar) ClearMarks() () {
	C.gtk_calendar_clear_marks((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) GetDate() (_go_year_ uint, _go_month_ uint, _go_day_ uint) {
	var year C.guint
	var month C.guint
	var day C.guint
	C.gtk_calendar_get_date((*C.GtkCalendar)(_self_), &year, &month, &day)
	_go_year_ = (uint)(year)
	_go_month_ = (uint)(month)
	_go_day_ = (uint)(day)
	return
}

func (_self_ *Calendar) GetDayIsMarked(day uint) (_go__return__ bool) {
	_cgo_day_ := (C.guint)(day)
	var _return_ C.gboolean
	_return_ = C.gtk_calendar_get_day_is_marked((*C.GtkCalendar)(_self_), _cgo_day_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Calendar) GetDetailHeightRows() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_calendar_get_detail_height_rows((*C.GtkCalendar)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Calendar) GetDetailWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_calendar_get_detail_width_chars((*C.GtkCalendar)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Calendar) GetDisplayOptions() (_return_ C.GtkCalendarDisplayOptions) {
	_return_ = C.gtk_calendar_get_display_options((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) MarkDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_mark_day((*C.GtkCalendar)(_self_), _cgo_day_)
	return
}

func (_self_ *Calendar) SelectDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_select_day((*C.GtkCalendar)(_self_), _cgo_day_)
	return
}

func (_self_ *Calendar) SelectMonth(month uint, year uint) () {
	_cgo_month_ := (C.guint)(month)
	_cgo_year_ := (C.guint)(year)
	C.gtk_calendar_select_month((*C.GtkCalendar)(_self_), _cgo_month_, _cgo_year_)
	return
}

func (_self_ *Calendar) SetDetailFunc(func_ C.GtkCalendarDetailFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_calendar_set_detail_func((*C.GtkCalendar)(_self_), func_, data, destroy)
	return
}

func (_self_ *Calendar) SetDetailHeightRows(rows int) () {
	_cgo_rows_ := (C.gint)(rows)
	C.gtk_calendar_set_detail_height_rows((*C.GtkCalendar)(_self_), _cgo_rows_)
	return
}

func (_self_ *Calendar) SetDetailWidthChars(chars int) () {
	_cgo_chars_ := (C.gint)(chars)
	C.gtk_calendar_set_detail_width_chars((*C.GtkCalendar)(_self_), _cgo_chars_)
	return
}

func (_self_ *Calendar) SetDisplayOptions(flags C.GtkCalendarDisplayOptions) () {
	C.gtk_calendar_set_display_options((*C.GtkCalendar)(_self_), flags)
	return
}

func (_self_ *Calendar) UnmarkDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_unmark_day((*C.GtkCalendar)(_self_), _cgo_day_)
	return
}

func (_self_ *CellArea) Activate(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, edit_only bool) (_go__return__ bool) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_edit_only_ := C.glibfalse()
	if edit_only { _cgo_edit_only_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_cell_area_activate((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, cell_area, flags, _cgo_edit_only_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) ActivateCell(widget *Widget, renderer *CellRenderer, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	var _return_ C.gboolean
	_return_ = C._gtk_cell_area_activate_cell((*C.GtkCellArea)(_self_), _cgo_widget_, _cgo_renderer_, event, cell_area, flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) Add(renderer *CellRenderer) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	C.gtk_cell_area_add((*C.GtkCellArea)(_self_), _cgo_renderer_)
	return
}

func (_self_ *CellArea) AddFocusSibling(renderer *CellRenderer, sibling *CellRenderer) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_sibling_ := (*C.GtkCellRenderer)(unsafe.Pointer(sibling))
	C.gtk_cell_area_add_focus_sibling((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_sibling_)
	return
}

func (_self_ *CellArea) ApplyAttributes(tree_model *C.GtkTreeModel, iter *TreeIter, is_expander bool, is_expanded bool) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_is_expander_ := C.glibfalse()
	if is_expander { _cgo_is_expander_ = C.glibtrue() }
	_cgo_is_expanded_ := C.glibfalse()
	if is_expanded { _cgo_is_expanded_ = C.glibtrue() }
	C.gtk_cell_area_apply_attributes((*C.GtkCellArea)(_self_), tree_model, _cgo_iter_, _cgo_is_expander_, _cgo_is_expanded_)
	return
}

func (_self_ *CellArea) AttributeConnect(renderer *CellRenderer, attribute string, column int) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_column_ := (C.gint)(column)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_cell_area_attribute_connect((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_attribute_, _cgo_column_)
	return
}

func (_self_ *CellArea) AttributeDisconnect(renderer *CellRenderer, attribute string) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_cell_area_attribute_disconnect((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_attribute_)
	return
}

func (_self_ *CellArea) CellGetProperty(renderer *CellRenderer, property_name string, value *C.GValue) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_cell_area_cell_get_property((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_property_name_, value)
	return
}

func (_self_ *CellArea) CellSetProperty(renderer *CellRenderer, property_name string, value *C.GValue) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_cell_area_cell_set_property((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_property_name_, value)
	return
}

func (_self_ *CellArea) CopyContext(context *CellAreaContext) (_go__return__ *CellAreaContext) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	var _return_ *C.GtkCellAreaContext
	_return_ = C.gtk_cell_area_copy_context((*C.GtkCellArea)(_self_), _cgo_context_)
	_go__return__ = (*CellAreaContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) CreateContext() (_go__return__ *CellAreaContext) {
	var _return_ *C.GtkCellAreaContext
	_return_ = C.gtk_cell_area_create_context((*C.GtkCellArea)(_self_))
	_go__return__ = (*CellAreaContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) Event(context *CellAreaContext, widget *Widget, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ C.gint
	_return_ = C._gtk_cell_area_event((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, event, cell_area, flags)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *CellArea) Focus(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_focus((*C.GtkCellArea)(_self_), direction)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) Foreach(callback C.GtkCellCallback, callback_data C.gpointer) () {
	C.gtk_cell_area_foreach((*C.GtkCellArea)(_self_), callback, callback_data)
	return
}

func (_self_ *CellArea) ForeachAlloc(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, background_area *C.GdkRectangle, callback C.GtkCellAllocCallback, callback_data C.gpointer) () {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C._gtk_cell_area_foreach_alloc((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, cell_area, background_area, callback, callback_data)
	return
}

func (_self_ *CellArea) GetCellAllocation(context *CellAreaContext, widget *Widget, renderer *CellRenderer, cell_area *C.GdkRectangle) (allocation *C.GdkRectangle) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	C._gtk_cell_area_get_cell_allocation((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, _cgo_renderer_, cell_area, allocation)
	return
}

func (_self_ *CellArea) GetCellAtPosition(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, x int, y int) (_go__return__ *CellRenderer, alloc_area *C.GdkRectangle) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ *C.GtkCellRenderer
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C._gtk_cell_area_get_cell_at_position((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, cell_area, _cgo_x_, _cgo_y_, alloc_area)
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) GetCurrentPathString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_cell_area_get_current_path_string((*C.GtkCellArea)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *CellArea) GetEditWidget() (_return_ *C.GtkCellEditable) {
	_return_ = C.gtk_cell_area_get_edit_widget((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetEditedCell() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_edited_cell((*C.GtkCellArea)(_self_))
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) GetFocusCell() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_focus_cell((*C.GtkCellArea)(_self_))
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) GetFocusFromSibling(renderer *CellRenderer) (_go__return__ *CellRenderer) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_focus_from_sibling((*C.GtkCellArea)(_self_), _cgo_renderer_)
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellArea) GetFocusSiblings(renderer *CellRenderer) (_return_ *C.GList) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_return_ = C._gtk_cell_area_get_focus_siblings((*C.GtkCellArea)(_self_), _cgo_renderer_)
	return
}

func (_self_ *CellArea) GetPreferredHeight(context *CellAreaContext, widget *Widget) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_get_preferred_height((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *CellArea) GetPreferredHeightForWidth(context *CellAreaContext, widget *Widget, width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_get_preferred_height_for_width((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *CellArea) GetPreferredWidth(context *CellAreaContext, widget *Widget) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_get_preferred_width((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *CellArea) GetPreferredWidthForHeight(context *CellAreaContext, widget *Widget, height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_get_preferred_width_for_height((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *CellArea) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_area_get_request_mode((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) HasRenderer(renderer *CellRenderer) (_go__return__ bool) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_has_renderer((*C.GtkCellArea)(_self_), _cgo_renderer_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) InnerCellArea(widget *Widget, cell_area *C.GdkRectangle) (inner_area *C.GdkRectangle) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C._gtk_cell_area_inner_cell_area((*C.GtkCellArea)(_self_), _cgo_widget_, cell_area, inner_area)
	return
}

func (_self_ *CellArea) IsActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_is_activatable((*C.GtkCellArea)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) IsFocusSibling(renderer *CellRenderer, sibling *CellRenderer) (_go__return__ bool) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_sibling_ := (*C.GtkCellRenderer)(unsafe.Pointer(sibling))
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_is_focus_sibling((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_sibling_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellArea) Remove(renderer *CellRenderer) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	C.gtk_cell_area_remove((*C.GtkCellArea)(_self_), _cgo_renderer_)
	return
}

func (_self_ *CellArea) RemoveFocusSibling(renderer *CellRenderer, sibling *CellRenderer) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_sibling_ := (*C.GtkCellRenderer)(unsafe.Pointer(sibling))
	C.gtk_cell_area_remove_focus_sibling((*C.GtkCellArea)(_self_), _cgo_renderer_, _cgo_sibling_)
	return
}

func (_self_ *CellArea) Render(context *CellAreaContext, widget *Widget, cr *C.cairo_t, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, paint_focus bool) () {
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_paint_focus_ := C.glibfalse()
	if paint_focus { _cgo_paint_focus_ = C.glibtrue() }
	C._gtk_cell_area_render((*C.GtkCellArea)(_self_), _cgo_context_, _cgo_widget_, cr, background_area, cell_area, flags, _cgo_paint_focus_)
	return
}

func (_self_ *CellArea) RequestRenderer(renderer *CellRenderer, orientation C.GtkOrientation, widget *Widget, for_size int) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_for_size_ := (C.gint)(for_size)
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_area_request_renderer((*C.GtkCellArea)(_self_), _cgo_renderer_, orientation, _cgo_widget_, _cgo_for_size_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *CellArea) SetFocusCell(renderer *CellRenderer) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	C.gtk_cell_area_set_focus_cell((*C.GtkCellArea)(_self_), _cgo_renderer_)
	return
}

func (_self_ *CellArea) StopEditing(canceled bool) () {
	_cgo_canceled_ := C.glibfalse()
	if canceled { _cgo_canceled_ = C.glibtrue() }
	C.gtk_cell_area_stop_editing((*C.GtkCellArea)(_self_), _cgo_canceled_)
	return
}

func CellAreaBoxNew() (_go__return__ *CellArea) {
	var _return_ *C.GtkCellArea
	_return_ = C.gtk_cell_area_box_new()
	_go__return__ = (*CellArea)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellAreaBox) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_cell_area_box_get_spacing((*C.GtkCellAreaBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *CellAreaBox) PackEnd(renderer *CellRenderer, expand bool, align bool, fixed bool) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	_cgo_align_ := C.glibfalse()
	if align { _cgo_align_ = C.glibtrue() }
	_cgo_fixed_ := C.glibfalse()
	if fixed { _cgo_fixed_ = C.glibtrue() }
	C.gtk_cell_area_box_pack_end((*C.GtkCellAreaBox)(_self_), _cgo_renderer_, _cgo_expand_, _cgo_align_, _cgo_fixed_)
	return
}

func (_self_ *CellAreaBox) PackStart(renderer *CellRenderer, expand bool, align bool, fixed bool) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(renderer))
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	_cgo_align_ := C.glibfalse()
	if align { _cgo_align_ = C.glibtrue() }
	_cgo_fixed_ := C.glibfalse()
	if fixed { _cgo_fixed_ = C.glibtrue() }
	C.gtk_cell_area_box_pack_start((*C.GtkCellAreaBox)(_self_), _cgo_renderer_, _cgo_expand_, _cgo_align_, _cgo_fixed_)
	return
}

func (_self_ *CellAreaBox) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_cell_area_box_set_spacing((*C.GtkCellAreaBox)(_self_), _cgo_spacing_)
	return
}

func (_self_ *CellAreaClass) FindCellProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_cell_area_class_find_cell_property((*C.GtkCellAreaClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *CellAreaClass) InstallCellProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_property_id_ := (C.guint)(property_id)
	C.gtk_cell_area_class_install_cell_property((*C.GtkCellAreaClass)(_self_), _cgo_property_id_, pspec)
	return
}

func (_self_ *CellAreaClass) ListCellProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_cell_area_class_list_cell_properties((*C.GtkCellAreaClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *CellAreaContext) Allocate(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_cell_area_context_allocate((*C.GtkCellAreaContext)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *CellAreaContext) GetAllocation() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_cell_area_context_get_allocation((*C.GtkCellAreaContext)(_self_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *CellAreaContext) GetArea() (_go__return__ *CellArea) {
	var _return_ *C.GtkCellArea
	_return_ = C.gtk_cell_area_context_get_area((*C.GtkCellAreaContext)(_self_))
	_go__return__ = (*CellArea)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellAreaContext) GetPreferredHeight() (_go_minimum_height_ int, _go_natural_height_ int) {
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_context_get_preferred_height((*C.GtkCellAreaContext)(_self_), &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *CellAreaContext) GetPreferredHeightForWidth(width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_context_get_preferred_height_for_width((*C.GtkCellAreaContext)(_self_), _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidth() (_go_minimum_width_ int, _go_natural_width_ int) {
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_context_get_preferred_width((*C.GtkCellAreaContext)(_self_), &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidthForHeight(height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_context_get_preferred_width_for_height((*C.GtkCellAreaContext)(_self_), _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *CellAreaContext) PushPreferredHeight(minimum_height int, natural_height int) () {
	_cgo_minimum_height_ := (C.gint)(minimum_height)
	_cgo_natural_height_ := (C.gint)(natural_height)
	C.gtk_cell_area_context_push_preferred_height((*C.GtkCellAreaContext)(_self_), _cgo_minimum_height_, _cgo_natural_height_)
	return
}

func (_self_ *CellAreaContext) PushPreferredWidth(minimum_width int, natural_width int) () {
	_cgo_minimum_width_ := (C.gint)(minimum_width)
	_cgo_natural_width_ := (C.gint)(natural_width)
	C.gtk_cell_area_context_push_preferred_width((*C.GtkCellAreaContext)(_self_), _cgo_minimum_width_, _cgo_natural_width_)
	return
}

func (_self_ *CellAreaContext) Reset() () {
	C.gtk_cell_area_context_reset((*C.GtkCellAreaContext)(_self_))
	return
}

func (_self_ *CellRenderer) Activate(event *C.GdkEvent, widget *Widget, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_cell_renderer_activate((*C.GtkCellRenderer)(_self_), event, _cgo_widget_, _cgo_path_, background_area, cell_area, flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) GetAlignedArea(widget *Widget, flags C.GtkCellRendererState, cell_area *C.GdkRectangle) (aligned_area *C.GdkRectangle) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C._gtk_cell_renderer_get_aligned_area((*C.GtkCellRenderer)(_self_), _cgo_widget_, flags, cell_area, aligned_area)
	return
}

func (_self_ *CellRenderer) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_cell_renderer_get_alignment((*C.GtkCellRenderer)(_self_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *CellRenderer) GetFixedSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_cell_renderer_get_fixed_size((*C.GtkCellRenderer)(_self_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *CellRenderer) GetPadding() (_go_xpad_ int, _go_ypad_ int) {
	var xpad C.gint
	var ypad C.gint
	C.gtk_cell_renderer_get_padding((*C.GtkCellRenderer)(_self_), &xpad, &ypad)
	_go_xpad_ = (int)(xpad)
	_go_ypad_ = (int)(ypad)
	return
}

func (_self_ *CellRenderer) GetPreferredHeight(widget *Widget) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_renderer_get_preferred_height((*C.GtkCellRenderer)(_self_), _cgo_widget_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *CellRenderer) GetPreferredHeightForWidth(widget *Widget, width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_renderer_get_preferred_height_for_width((*C.GtkCellRenderer)(_self_), _cgo_widget_, _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *CellRenderer) GetPreferredSize(widget *Widget) (minimum_size *Requisition, natural_size *Requisition) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C.gtk_cell_renderer_get_preferred_size((*C.GtkCellRenderer)(_self_), _cgo_widget_, &_allocated_minimum_size_, &_allocated_natural_size_)
	minimum_size = (*Requisition)(unsafe.Pointer(&_allocated_minimum_size_))
	natural_size = (*Requisition)(unsafe.Pointer(&_allocated_natural_size_))
	return
}

func (_self_ *CellRenderer) GetPreferredWidth(widget *Widget) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_renderer_get_preferred_width((*C.GtkCellRenderer)(_self_), _cgo_widget_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *CellRenderer) GetPreferredWidthForHeight(widget *Widget, height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_renderer_get_preferred_width_for_height((*C.GtkCellRenderer)(_self_), _cgo_widget_, _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *CellRenderer) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_renderer_get_request_mode((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_get_sensitive((*C.GtkCellRenderer)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) GetState(widget *Widget, cell_state C.GtkCellRendererState) (_return_ C.GtkStateFlags) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_return_ = C.gtk_cell_renderer_get_state((*C.GtkCellRenderer)(_self_), _cgo_widget_, cell_state)
	return
}

func (_self_ *CellRenderer) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_get_visible((*C.GtkCellRenderer)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) IsActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_is_activatable((*C.GtkCellRenderer)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) Render(cr *C.cairo_t, widget *Widget, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C._gtk_cell_renderer_render((*C.GtkCellRenderer)(_self_), cr, _cgo_widget_, background_area, cell_area, flags)
	return
}

func (_self_ *CellRenderer) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_cell_renderer_set_alignment((*C.GtkCellRenderer)(_self_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *CellRenderer) SetFixedSize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_cell_renderer_set_fixed_size((*C.GtkCellRenderer)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *CellRenderer) SetPadding(xpad int, ypad int) () {
	_cgo_xpad_ := (C.gint)(xpad)
	_cgo_ypad_ := (C.gint)(ypad)
	C.gtk_cell_renderer_set_padding((*C.GtkCellRenderer)(_self_), _cgo_xpad_, _cgo_ypad_)
	return
}

func (_self_ *CellRenderer) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := C.glibfalse()
	if sensitive { _cgo_sensitive_ = C.glibtrue() }
	C.gtk_cell_renderer_set_sensitive((*C.GtkCellRenderer)(_self_), _cgo_sensitive_)
	return
}

func (_self_ *CellRenderer) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_cell_renderer_set_visible((*C.GtkCellRenderer)(_self_), _cgo_visible_)
	return
}

func (_self_ *CellRenderer) StartEditing(event *C.GdkEvent, widget *Widget, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ *C.GtkCellEditable) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_cell_renderer_start_editing((*C.GtkCellRenderer)(_self_), event, _cgo_widget_, _cgo_path_, background_area, cell_area, flags)
	return
}

func (_self_ *CellRenderer) StopEditing(canceled bool) () {
	_cgo_canceled_ := C.glibfalse()
	if canceled { _cgo_canceled_ = C.glibtrue() }
	C.gtk_cell_renderer_stop_editing((*C.GtkCellRenderer)(_self_), _cgo_canceled_)
	return
}

func CellRendererAccelNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_accel_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererComboNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_combo_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererPixbufNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_pixbuf_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererProgressNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_progress_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererSpinNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_spin_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererSpinnerNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_spinner_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func CellRendererTextNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_text_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellRendererText) SetFixedHeightFromFont(number_of_rows int) () {
	_cgo_number_of_rows_ := (C.gint)(number_of_rows)
	C.gtk_cell_renderer_text_set_fixed_height_from_font((*C.GtkCellRendererText)(_self_), _cgo_number_of_rows_)
	return
}

func CellRendererToggleNew() (_go__return__ *CellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_toggle_new()
	_go__return__ = (*CellRenderer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellRendererToggle) GetActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_activatable((*C.GtkCellRendererToggle)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_active((*C.GtkCellRendererToggle)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) GetRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_radio((*C.GtkCellRendererToggle)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) SetActivatable(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_cell_renderer_toggle_set_activatable((*C.GtkCellRendererToggle)(_self_), _cgo_setting_)
	return
}

func (_self_ *CellRendererToggle) SetActive(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_cell_renderer_toggle_set_active((*C.GtkCellRendererToggle)(_self_), _cgo_setting_)
	return
}

func (_self_ *CellRendererToggle) SetRadio(radio bool) () {
	_cgo_radio_ := C.glibfalse()
	if radio { _cgo_radio_ = C.glibtrue() }
	C.gtk_cell_renderer_toggle_set_radio((*C.GtkCellRendererToggle)(_self_), _cgo_radio_)
	return
}

func CellViewNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithContext(area *CellArea, context *CellAreaContext) (_go__return__ *Widget) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	_cgo_context_ := (*C.GtkCellAreaContext)(unsafe.Pointer(context))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new_with_context(_cgo_area_, _cgo_context_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithMarkup(markup string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	_return_ = C._gtk_cell_view_new_with_markup(_cgo_markup_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new_with_pixbuf(pixbuf)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithText(text string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_cell_view_new_with_text(_cgo_text_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellView) GetDisplayedRow() (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_cell_view_get_displayed_row((*C.GtkCellView)(_self_))
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CellView) GetDrawSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_view_get_draw_sensitive((*C.GtkCellView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellView) GetFitModel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_view_get_fit_model((*C.GtkCellView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CellView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_cell_view_get_model((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) SetBackgroundRgba(rgba *C.GdkRGBA) () {
	C._gtk_cell_view_set_background_rgba((*C.GtkCellView)(_self_), rgba)
	return
}

func (_self_ *CellView) SetDisplayedRow(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_cell_view_set_displayed_row((*C.GtkCellView)(_self_), _cgo_path_)
	return
}

func (_self_ *CellView) SetDrawSensitive(draw_sensitive bool) () {
	_cgo_draw_sensitive_ := C.glibfalse()
	if draw_sensitive { _cgo_draw_sensitive_ = C.glibtrue() }
	C.gtk_cell_view_set_draw_sensitive((*C.GtkCellView)(_self_), _cgo_draw_sensitive_)
	return
}

func (_self_ *CellView) SetFitModel(fit_model bool) () {
	_cgo_fit_model_ := C.glibfalse()
	if fit_model { _cgo_fit_model_ = C.glibtrue() }
	C.gtk_cell_view_set_fit_model((*C.GtkCellView)(_self_), _cgo_fit_model_)
	return
}

func (_self_ *CellView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_cell_view_set_model((*C.GtkCellView)(_self_), model)
	return
}

func CheckButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_check_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CheckButtonNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_button_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CheckButtonNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_check_menu_item_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_menu_item_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CheckMenuItem) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_active((*C.GtkCheckMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) GetDrawAsRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_draw_as_radio((*C.GtkCheckMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) GetInconsistent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_inconsistent((*C.GtkCheckMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) SetActive(is_active bool) () {
	_cgo_is_active_ := C.glibfalse()
	if is_active { _cgo_is_active_ = C.glibtrue() }
	C.gtk_check_menu_item_set_active((*C.GtkCheckMenuItem)(_self_), _cgo_is_active_)
	return
}

func (_self_ *CheckMenuItem) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_draw_as_radio_ := C.glibfalse()
	if draw_as_radio { _cgo_draw_as_radio_ = C.glibtrue() }
	C.gtk_check_menu_item_set_draw_as_radio((*C.GtkCheckMenuItem)(_self_), _cgo_draw_as_radio_)
	return
}

func (_self_ *CheckMenuItem) SetInconsistent(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_check_menu_item_set_inconsistent((*C.GtkCheckMenuItem)(_self_), _cgo_setting_)
	return
}

func (_self_ *CheckMenuItem) Toggled() () {
	C.gtk_check_menu_item_toggled((*C.GtkCheckMenuItem)(_self_))
	return
}

func ClipboardGet(selection C.GdkAtom) (_go__return__ *Clipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_clipboard_get(selection)
	_go__return__ = (*Clipboard)(unsafe.Pointer(_return_))
	return
}

func ClipboardGetForDisplay(display *C.GdkDisplay, selection C.GdkAtom) (_go__return__ *Clipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_clipboard_get_for_display(display, selection)
	_go__return__ = (*Clipboard)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Clipboard) Clear() () {
	C.gtk_clipboard_clear((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_clipboard_get_display((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetOwner() (_return_ *C.GObject) {
	_return_ = C.gtk_clipboard_get_owner((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) RequestContents(target C.GdkAtom, callback C.GtkClipboardReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_contents((*C.GtkClipboard)(_self_), target, callback, user_data)
	return
}

func (_self_ *Clipboard) RequestImage(callback C.GtkClipboardImageReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_image((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestRichText(buffer *TextBuffer, callback C.GtkClipboardRichTextReceivedFunc, user_data C.gpointer) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	C.gtk_clipboard_request_rich_text((*C.GtkClipboard)(_self_), _cgo_buffer_, callback, user_data)
	return
}

func (_self_ *Clipboard) RequestTargets(callback C.GtkClipboardTargetsReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_targets((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestText(callback C.GtkClipboardTextReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_text((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestUris(callback C.GtkClipboardURIReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_uris((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) SetImage(pixbuf *C.GdkPixbuf) () {
	C.gtk_clipboard_set_image((*C.GtkClipboard)(_self_), pixbuf)
	return
}

func (_self_ *Clipboard) SetText(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_clipboard_set_text((*C.GtkClipboard)(_self_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *Clipboard) Store() () {
	C.gtk_clipboard_store((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForContents(target C.GdkAtom) (_go__return__ *SelectionData) {
	var _return_ *C.GtkSelectionData
	_return_ = C.gtk_clipboard_wait_for_contents((*C.GtkClipboard)(_self_), target)
	_go__return__ = (*SelectionData)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Clipboard) WaitForImage() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_clipboard_wait_for_image((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForRichText(buffer *TextBuffer) (_return_ *C.guint8, format *C.GdkAtom, _go_length_ uint64) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	var length C.gsize
	_return_ = C.gtk_clipboard_wait_for_rich_text((*C.GtkClipboard)(_self_), _cgo_buffer_, format, &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *Clipboard) WaitForText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_clipboard_wait_for_text((*C.GtkClipboard)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Clipboard) WaitForUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_clipboard_wait_for_uris((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitIsImageAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_image_available((*C.GtkClipboard)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsRichTextAvailable(buffer *TextBuffer) (_go__return__ bool) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_rich_text_available((*C.GtkClipboard)(_self_), _cgo_buffer_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsTargetAvailable(target C.GdkAtom) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_target_available((*C.GtkClipboard)(_self_), target)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsTextAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_text_available((*C.GtkClipboard)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsUrisAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_uris_available((*C.GtkClipboard)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func ColorButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_color_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ColorButtonNewWithRgba(rgba *C.GdkRGBA) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C._gtk_color_button_new_with_rgba(rgba)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ColorButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_color_button_get_title((*C.GtkColorButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ColorButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_color_button_set_title((*C.GtkColorButton)(_self_), _cgo_title_)
	return
}

func ColorChooserDialogNew(title string, parent *Window) (_go__return__ *Widget) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_color_chooser_dialog_new(_cgo_title_, _cgo_parent_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ColorChooserWidgetNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_color_chooser_widget_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithArea(area *CellArea) (_go__return__ *Widget) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_area(_cgo_area_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithAreaAndEntry(area *CellArea) (_go__return__ *Widget) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_area_and_entry(_cgo_area_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithEntry() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_entry()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithModel(model *C.GtkTreeModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_model(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithModelAndEntry(model *C.GtkTreeModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_model_and_entry(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ComboBox) GetActive() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_active((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) GetActiveId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_combo_box_get_active_id((*C.GtkComboBox)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ComboBox) GetActiveIter() (_go__return__ bool, iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_active_iter((*C.GtkComboBox)(_self_), &_allocated_iter_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetAddTearoffs() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_add_tearoffs((*C.GtkComboBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetButtonSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_combo_box_get_button_sensitivity((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetColumnSpanColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_column_span_column((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) GetEntryTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_entry_text_column((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_focus_on_click((*C.GtkComboBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetHasEntry() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_has_entry((*C.GtkComboBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetIdColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_id_column((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_combo_box_get_model((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_combo_box_get_popup_accessible((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupFixedWidth() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_popup_fixed_width((*C.GtkComboBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_combo_box_get_row_separator_func((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetRowSpanColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_row_span_column((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_combo_box_get_title((*C.GtkComboBox)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ComboBox) GetWrapWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_wrap_width((*C.GtkComboBox)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ComboBox) Popdown() () {
	C.gtk_combo_box_popdown((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) Popup() () {
	C.gtk_combo_box_popup((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) PopupForDevice(device *C.GdkDevice) () {
	C.gtk_combo_box_popup_for_device((*C.GtkComboBox)(_self_), device)
	return
}

func (_self_ *ComboBox) SetActive(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_combo_box_set_active((*C.GtkComboBox)(_self_), _cgo_index__)
	return
}

func (_self_ *ComboBox) SetActiveId(active_id string) (_go__return__ bool) {
	_cstring_active_id_ := C.CString(active_id)
	_cgo_active_id_ := (*C.gchar)(unsafe.Pointer(_cstring_active_id_))
	defer C.free(unsafe.Pointer(_cstring_active_id_))
	var _return_ C.gboolean
	_return_ = C._gtk_combo_box_set_active_id((*C.GtkComboBox)(_self_), _cgo_active_id_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ComboBox) SetActiveIter(iter *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_combo_box_set_active_iter((*C.GtkComboBox)(_self_), _cgo_iter_)
	return
}

func (_self_ *ComboBox) SetAddTearoffs(add_tearoffs bool) () {
	_cgo_add_tearoffs_ := C.glibfalse()
	if add_tearoffs { _cgo_add_tearoffs_ = C.glibtrue() }
	C.gtk_combo_box_set_add_tearoffs((*C.GtkComboBox)(_self_), _cgo_add_tearoffs_)
	return
}

func (_self_ *ComboBox) SetButtonSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_combo_box_set_button_sensitivity((*C.GtkComboBox)(_self_), sensitivity)
	return
}

func (_self_ *ComboBox) SetColumnSpanColumn(column_span int) () {
	_cgo_column_span_ := (C.gint)(column_span)
	C.gtk_combo_box_set_column_span_column((*C.GtkComboBox)(_self_), _cgo_column_span_)
	return
}

func (_self_ *ComboBox) SetEntryTextColumn(text_column int) () {
	_cgo_text_column_ := (C.gint)(text_column)
	C.gtk_combo_box_set_entry_text_column((*C.GtkComboBox)(_self_), _cgo_text_column_)
	return
}

func (_self_ *ComboBox) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := C.glibfalse()
	if focus_on_click { _cgo_focus_on_click_ = C.glibtrue() }
	C.gtk_combo_box_set_focus_on_click((*C.GtkComboBox)(_self_), _cgo_focus_on_click_)
	return
}

func (_self_ *ComboBox) SetIdColumn(id_column int) () {
	_cgo_id_column_ := (C.gint)(id_column)
	C.gtk_combo_box_set_id_column((*C.GtkComboBox)(_self_), _cgo_id_column_)
	return
}

func (_self_ *ComboBox) SetModel(model *C.GtkTreeModel) () {
	C.gtk_combo_box_set_model((*C.GtkComboBox)(_self_), model)
	return
}

func (_self_ *ComboBox) SetPopupFixedWidth(fixed bool) () {
	_cgo_fixed_ := C.glibfalse()
	if fixed { _cgo_fixed_ = C.glibtrue() }
	C.gtk_combo_box_set_popup_fixed_width((*C.GtkComboBox)(_self_), _cgo_fixed_)
	return
}

func (_self_ *ComboBox) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_combo_box_set_row_separator_func((*C.GtkComboBox)(_self_), func_, data, destroy)
	return
}

func (_self_ *ComboBox) SetRowSpanColumn(row_span int) () {
	_cgo_row_span_ := (C.gint)(row_span)
	C.gtk_combo_box_set_row_span_column((*C.GtkComboBox)(_self_), _cgo_row_span_)
	return
}

func (_self_ *ComboBox) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_combo_box_set_title((*C.GtkComboBox)(_self_), _cgo_title_)
	return
}

func (_self_ *ComboBox) SetWrapWidth(width int) () {
	_cgo_width_ := (C.gint)(width)
	C.gtk_combo_box_set_wrap_width((*C.GtkComboBox)(_self_), _cgo_width_)
	return
}

func ComboBoxTextNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_text_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ComboBoxTextNewWithEntry() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_text_new_with_entry()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ComboBoxText) Append(id string, text string) () {
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_append((*C.GtkComboBoxText)(_self_), _cgo_id_, _cgo_text_)
	return
}

func (_self_ *ComboBoxText) AppendText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_append_text((*C.GtkComboBoxText)(_self_), _cgo_text_)
	return
}

func (_self_ *ComboBoxText) GetActiveText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_combo_box_text_get_active_text((*C.GtkComboBoxText)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ComboBoxText) Insert(position int, id string, text string) () {
	_cgo_position_ := (C.gint)(position)
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_insert((*C.GtkComboBoxText)(_self_), _cgo_position_, _cgo_id_, _cgo_text_)
	return
}

func (_self_ *ComboBoxText) InsertText(position int, text string) () {
	_cgo_position_ := (C.gint)(position)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_insert_text((*C.GtkComboBoxText)(_self_), _cgo_position_, _cgo_text_)
	return
}

func (_self_ *ComboBoxText) Prepend(id string, text string) () {
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_prepend((*C.GtkComboBoxText)(_self_), _cgo_id_, _cgo_text_)
	return
}

func (_self_ *ComboBoxText) PrependText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_prepend_text((*C.GtkComboBoxText)(_self_), _cgo_text_)
	return
}

func (_self_ *ComboBoxText) Remove(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_combo_box_text_remove((*C.GtkComboBoxText)(_self_), _cgo_position_)
	return
}

func (_self_ *ComboBoxText) RemoveAll() () {
	C.gtk_combo_box_text_remove_all((*C.GtkComboBoxText)(_self_))
	return
}

func (_self_ *Container) Add(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_container_add((*C.GtkContainer)(_self_), _cgo_widget_)
	return
}

func (_self_ *Container) CheckResize() () {
	C.gtk_container_check_resize((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) ChildGetProperty(child *Widget, property_name string, value *C.GValue) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_container_child_get_property((*C.GtkContainer)(_self_), _cgo_child_, _cgo_property_name_, value)
	return
}

func (_self_ *Container) ChildNotify(child *Widget, child_property string) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cstring_child_property_ := C.CString(child_property)
	_cgo_child_property_ := (*C.gchar)(unsafe.Pointer(_cstring_child_property_))
	defer C.free(unsafe.Pointer(_cstring_child_property_))
	C._gtk_container_child_notify((*C.GtkContainer)(_self_), _cgo_child_, _cgo_child_property_)
	return
}

func (_self_ *Container) ChildSetProperty(child *Widget, property_name string, value *C.GValue) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_container_child_set_property((*C.GtkContainer)(_self_), _cgo_child_, _cgo_property_name_, value)
	return
}

func (_self_ *Container) ChildType() (_return_ C.GType) {
	_return_ = C.gtk_container_child_type((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) Forall(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_forall((*C.GtkContainer)(_self_), callback, callback_data)
	return
}

func (_self_ *Container) Foreach(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_foreach((*C.GtkContainer)(_self_), callback, callback_data)
	return
}

func (_self_ *Container) GetBorderWidth() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_container_get_border_width((*C.GtkContainer)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Container) GetChildren() (_return_ *C.GList) {
	_return_ = C.gtk_container_get_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetFocusChain() (_go__return__ bool, focusable_widgets unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._gtk_container_get_focus_chain((*C.GtkContainer)(_self_), focusable_widgets)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Container) GetFocusChild() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_container_get_focus_child((*C.GtkContainer)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Container) GetFocusHadjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_container_get_focus_hadjustment((*C.GtkContainer)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Container) GetFocusVadjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_container_get_focus_vadjustment((*C.GtkContainer)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Container) GetPathForChild(child *Widget) (_go__return__ *WidgetPath) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_container_get_path_for_child((*C.GtkContainer)(_self_), _cgo_child_)
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Container) GetResizeMode() (_return_ C.GtkResizeMode) {
	_return_ = C.gtk_container_get_resize_mode((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) PropagateDraw(child *Widget, cr *C.cairo_t) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_container_propagate_draw((*C.GtkContainer)(_self_), _cgo_child_, cr)
	return
}

func (_self_ *Container) Remove(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_container_remove((*C.GtkContainer)(_self_), _cgo_widget_)
	return
}

func (_self_ *Container) ResizeChildren() () {
	C.gtk_container_resize_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) SetBorderWidth(border_width uint) () {
	_cgo_border_width_ := (C.guint)(border_width)
	C.gtk_container_set_border_width((*C.GtkContainer)(_self_), _cgo_border_width_)
	return
}

func (_self_ *Container) SetFocusChain(focusable_widgets *C.GList) () {
	C.gtk_container_set_focus_chain((*C.GtkContainer)(_self_), focusable_widgets)
	return
}

func (_self_ *Container) SetFocusChild(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_container_set_focus_child((*C.GtkContainer)(_self_), _cgo_child_)
	return
}

func (_self_ *Container) SetFocusHadjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_container_set_focus_hadjustment((*C.GtkContainer)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *Container) SetFocusVadjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_container_set_focus_vadjustment((*C.GtkContainer)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *Container) SetReallocateRedraws(needs_redraws bool) () {
	_cgo_needs_redraws_ := C.glibfalse()
	if needs_redraws { _cgo_needs_redraws_ = C.glibtrue() }
	C.gtk_container_set_reallocate_redraws((*C.GtkContainer)(_self_), _cgo_needs_redraws_)
	return
}

func (_self_ *Container) SetResizeMode(resize_mode C.GtkResizeMode) () {
	C.gtk_container_set_resize_mode((*C.GtkContainer)(_self_), resize_mode)
	return
}

func (_self_ *Container) UnsetFocusChain() () {
	C.gtk_container_unset_focus_chain((*C.GtkContainer)(_self_))
	return
}

func (_self_ *ContainerClass) FindChildProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_container_class_find_child_property((*C.GtkContainerClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *ContainerClass) HandleBorderWidth() () {
	C.gtk_container_class_handle_border_width((*C.GtkContainerClass)(_self_))
	return
}

func (_self_ *ContainerClass) InstallChildProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_property_id_ := (C.guint)(property_id)
	C.gtk_container_class_install_child_property((*C.GtkContainerClass)(_self_), _cgo_property_id_, pspec)
	return
}

func (_self_ *ContainerClass) ListChildProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_container_class_list_child_properties((*C.GtkContainerClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func CssProviderNew() (_go__return__ *CssProvider) {
	var _return_ *C.GtkCssProvider
	_return_ = C.gtk_css_provider_new()
	_go__return__ = (*CssProvider)(unsafe.Pointer(_return_))
	return
}

func CssProviderGetDefault() (_go__return__ *CssProvider) {
	var _return_ *C.GtkCssProvider
	_return_ = C.gtk_css_provider_get_default()
	_go__return__ = (*CssProvider)(unsafe.Pointer(_return_))
	return
}

func CssProviderGetNamed(name string, variant string) (_go__return__ *CssProvider) {
	var _return_ *C.GtkCssProvider
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_variant_ := C.CString(variant)
	_cgo_variant_ := (*C.gchar)(unsafe.Pointer(_cstring_variant_))
	defer C.free(unsafe.Pointer(_cstring_variant_))
	_return_ = C._gtk_css_provider_get_named(_cgo_name_, _cgo_variant_)
	_go__return__ = (*CssProvider)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CssProvider) LoadFromFile(file *C.GFile) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._gtk_css_provider_load_from_file((*C.GtkCssProvider)(_self_), file, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CssProvider) LoadFromPath(path string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_css_provider_load_from_path((*C.GtkCssProvider)(_self_), _cgo_path_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *CssProvider) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_css_provider_to_string((*C.GtkCssProvider)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *CssSection) GetEndLine() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_end_line((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CssSection) GetEndPosition() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_end_position((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CssSection) GetFile() (_return_ *C.GFile) {
	_return_ = C._gtk_css_section_get_file((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetParent() (_go__return__ *CssSection) {
	var _return_ *C.GtkCssSection
	_return_ = C._gtk_css_section_get_parent((*C.GtkCssSection)(_self_))
	_go__return__ = (*CssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CssSection) GetSectionType() (_return_ C.GtkCssSectionType) {
	_return_ = C._gtk_css_section_get_section_type((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetStartLine() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_start_line((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CssSection) GetStartPosition() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_start_position((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CssSection) Ref() (_go__return__ *CssSection) {
	var _return_ *C.GtkCssSection
	_return_ = C.gtk_css_section_ref((*C.GtkCssSection)(_self_))
	_go__return__ = (*CssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CssSection) Unref() () {
	C.gtk_css_section_unref((*C.GtkCssSection)(_self_))
	return
}

func DialogNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Dialog) AddActionWidget(child *Widget, response_id int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_add_action_widget((*C.GtkDialog)(_self_), _cgo_child_, _cgo_response_id_)
	return
}

func (_self_ *Dialog) AddButton(button_text string, response_id int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_cstring_button_text_ := C.CString(button_text)
	_cgo_button_text_ := (*C.gchar)(unsafe.Pointer(_cstring_button_text_))
	defer C.free(unsafe.Pointer(_cstring_button_text_))
	_return_ = C._gtk_dialog_add_button((*C.GtkDialog)(_self_), _cgo_button_text_, _cgo_response_id_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Dialog) GetActionArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_get_action_area((*C.GtkDialog)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Dialog) GetContentArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_get_content_area((*C.GtkDialog)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Dialog) GetResponseForWidget(widget *Widget) (_go__return__ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ C.gint
	_return_ = C.gtk_dialog_get_response_for_widget((*C.GtkDialog)(_self_), _cgo_widget_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Dialog) GetWidgetForResponse(response_id int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_return_ = C.gtk_dialog_get_widget_for_response((*C.GtkDialog)(_self_), _cgo_response_id_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Dialog) Response(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_response((*C.GtkDialog)(_self_), _cgo_response_id_)
	return
}

func (_self_ *Dialog) Run() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_dialog_run((*C.GtkDialog)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Dialog) SetDefaultResponse(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_set_default_response((*C.GtkDialog)(_self_), _cgo_response_id_)
	return
}

func (_self_ *Dialog) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_response_id_ := (C.gint)(response_id)
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_dialog_set_response_sensitive((*C.GtkDialog)(_self_), _cgo_response_id_, _cgo_setting_)
	return
}

func DrawingAreaNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_drawing_area_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func EntryNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func EntryNewWithBuffer(buffer *EntryBuffer) (_go__return__ *Widget) {
	_cgo_buffer_ := (*C.GtkEntryBuffer)(unsafe.Pointer(buffer))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_new_with_buffer(_cgo_buffer_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Entry) GetActivatesDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_activates_default((*C.GtkEntry)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_entry_get_alignment((*C.GtkEntry)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Entry) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_entry_get_attributes((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetBuffer() (_go__return__ *EntryBuffer) {
	var _return_ *C.GtkEntryBuffer
	_return_ = C.gtk_entry_get_buffer((*C.GtkEntry)(_self_))
	_go__return__ = (*EntryBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Entry) GetCompletion() (_go__return__ *EntryCompletion) {
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_get_completion((*C.GtkEntry)(_self_))
	_go__return__ = (*EntryCompletion)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Entry) GetCurrentIconDragSource() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_current_icon_drag_source((*C.GtkEntry)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) GetCursorHadjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_entry_get_cursor_hadjustment((*C.GtkEntry)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Entry) GetHasFrame() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_has_frame((*C.GtkEntry)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconActivatable(icon_pos C.GtkEntryIconPosition) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_icon_activatable((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconArea(icon_pos C.GtkEntryIconPosition) (icon_area *C.GdkRectangle) {
	C.gtk_entry_get_icon_area((*C.GtkEntry)(_self_), icon_pos, icon_area)
	return
}

func (_self_ *Entry) GetIconAtPos(x int, y int) (_go__return__ int) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gint
	_return_ = C.gtk_entry_get_icon_at_pos((*C.GtkEntry)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) GetIconGicon(icon_pos C.GtkEntryIconPosition) (_return_ *C.GIcon) {
	_return_ = C.gtk_entry_get_icon_gicon((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconName(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_icon_name((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetIconPixbuf(icon_pos C.GtkEntryIconPosition) (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_entry_get_icon_pixbuf((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconSensitive(icon_pos C.GtkEntryIconPosition) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_icon_sensitive((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconStock(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_icon_stock((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetIconStorageType(icon_pos C.GtkEntryIconPosition) (_return_ C.GtkImageType) {
	_return_ = C.gtk_entry_get_icon_storage_type((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_entry_get_icon_tooltip_markup((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetIconTooltipText(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_entry_get_icon_tooltip_text((*C.GtkEntry)(_self_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_entry_get_input_hints((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_entry_get_input_purpose((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInvisibleChar() (_return_ C.gunichar) {
	_return_ = C.gtk_entry_get_invisible_char((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_entry_get_layout((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_entry_get_layout_offsets((*C.GtkEntry)(_self_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *Entry) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_max_length((*C.GtkEntry)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) GetOverwriteMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_overwrite_mode((*C.GtkEntry)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetPlaceholderText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_placeholder_text((*C.GtkEntry)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetProgressFraction() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_entry_get_progress_fraction((*C.GtkEntry)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Entry) GetProgressPulseStep() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_entry_get_progress_pulse_step((*C.GtkEntry)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Entry) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_text((*C.GtkEntry)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Entry) GetTextArea() (text_area *C.GdkRectangle) {
	C.gtk_entry_get_text_area((*C.GtkEntry)(_self_), text_area)
	return
}

func (_self_ *Entry) GetTextLength() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.gtk_entry_get_text_length((*C.GtkEntry)(_self_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *Entry) GetVisibility() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_visibility((*C.GtkEntry)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_width_chars((*C.GtkEntry)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) ImContextFilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_im_context_filter_keypress((*C.GtkEntry)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Entry) LayoutIndexToTextIndex(layout_index int) (_go__return__ int) {
	_cgo_layout_index_ := (C.gint)(layout_index)
	var _return_ C.gint
	_return_ = C.gtk_entry_layout_index_to_text_index((*C.GtkEntry)(_self_), _cgo_layout_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) ProgressPulse() () {
	C.gtk_entry_progress_pulse((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) ResetImContext() () {
	C.gtk_entry_reset_im_context((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) SetActivatesDefault(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_entry_set_activates_default((*C.GtkEntry)(_self_), _cgo_setting_)
	return
}

func (_self_ *Entry) SetAlignment(xalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	C.gtk_entry_set_alignment((*C.GtkEntry)(_self_), _cgo_xalign_)
	return
}

func (_self_ *Entry) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_entry_set_attributes((*C.GtkEntry)(_self_), attrs)
	return
}

func (_self_ *Entry) SetBuffer(buffer *EntryBuffer) () {
	_cgo_buffer_ := (*C.GtkEntryBuffer)(unsafe.Pointer(buffer))
	C.gtk_entry_set_buffer((*C.GtkEntry)(_self_), _cgo_buffer_)
	return
}

func (_self_ *Entry) SetCompletion(completion *EntryCompletion) () {
	_cgo_completion_ := (*C.GtkEntryCompletion)(unsafe.Pointer(completion))
	C.gtk_entry_set_completion((*C.GtkEntry)(_self_), _cgo_completion_)
	return
}

func (_self_ *Entry) SetCursorHadjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_entry_set_cursor_hadjustment((*C.GtkEntry)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *Entry) SetHasFrame(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_entry_set_has_frame((*C.GtkEntry)(_self_), _cgo_setting_)
	return
}

func (_self_ *Entry) SetIconActivatable(icon_pos C.GtkEntryIconPosition, activatable bool) () {
	_cgo_activatable_ := C.glibfalse()
	if activatable { _cgo_activatable_ = C.glibtrue() }
	C.gtk_entry_set_icon_activatable((*C.GtkEntry)(_self_), icon_pos, _cgo_activatable_)
	return
}

func (_self_ *Entry) SetIconDragSource(icon_pos C.GtkEntryIconPosition, target_list *TargetList, actions C.GdkDragAction) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_entry_set_icon_drag_source((*C.GtkEntry)(_self_), icon_pos, _cgo_target_list_, actions)
	return
}

func (_self_ *Entry) SetIconFromGicon(icon_pos C.GtkEntryIconPosition, icon *C.GIcon) () {
	C.gtk_entry_set_icon_from_gicon((*C.GtkEntry)(_self_), icon_pos, icon)
	return
}

func (_self_ *Entry) SetIconFromIconName(icon_pos C.GtkEntryIconPosition, icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_entry_set_icon_from_icon_name((*C.GtkEntry)(_self_), icon_pos, _cgo_icon_name_)
	return
}

func (_self_ *Entry) SetIconFromPixbuf(icon_pos C.GtkEntryIconPosition, pixbuf *C.GdkPixbuf) () {
	C.gtk_entry_set_icon_from_pixbuf((*C.GtkEntry)(_self_), icon_pos, pixbuf)
	return
}

func (_self_ *Entry) SetIconFromStock(icon_pos C.GtkEntryIconPosition, stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_entry_set_icon_from_stock((*C.GtkEntry)(_self_), icon_pos, _cgo_stock_id_)
	return
}

func (_self_ *Entry) SetIconSensitive(icon_pos C.GtkEntryIconPosition, sensitive bool) () {
	_cgo_sensitive_ := C.glibfalse()
	if sensitive { _cgo_sensitive_ = C.glibtrue() }
	C.gtk_entry_set_icon_sensitive((*C.GtkEntry)(_self_), icon_pos, _cgo_sensitive_)
	return
}

func (_self_ *Entry) SetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_entry_set_icon_tooltip_markup((*C.GtkEntry)(_self_), icon_pos, _cgo_tooltip_)
	return
}

func (_self_ *Entry) SetIconTooltipText(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_entry_set_icon_tooltip_text((*C.GtkEntry)(_self_), icon_pos, _cgo_tooltip_)
	return
}

func (_self_ *Entry) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_entry_set_input_hints((*C.GtkEntry)(_self_), hints)
	return
}

func (_self_ *Entry) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_entry_set_input_purpose((*C.GtkEntry)(_self_), purpose)
	return
}

func (_self_ *Entry) SetInvisibleChar(ch C.gunichar) () {
	C.gtk_entry_set_invisible_char((*C.GtkEntry)(_self_), ch)
	return
}

func (_self_ *Entry) SetMaxLength(max int) () {
	_cgo_max_ := (C.gint)(max)
	C.gtk_entry_set_max_length((*C.GtkEntry)(_self_), _cgo_max_)
	return
}

func (_self_ *Entry) SetOverwriteMode(overwrite bool) () {
	_cgo_overwrite_ := C.glibfalse()
	if overwrite { _cgo_overwrite_ = C.glibtrue() }
	C.gtk_entry_set_overwrite_mode((*C.GtkEntry)(_self_), _cgo_overwrite_)
	return
}

func (_self_ *Entry) SetPlaceholderText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_set_placeholder_text((*C.GtkEntry)(_self_), _cgo_text_)
	return
}

func (_self_ *Entry) SetProgressFraction(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_entry_set_progress_fraction((*C.GtkEntry)(_self_), _cgo_fraction_)
	return
}

func (_self_ *Entry) SetProgressPulseStep(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_entry_set_progress_pulse_step((*C.GtkEntry)(_self_), _cgo_fraction_)
	return
}

func (_self_ *Entry) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_set_text((*C.GtkEntry)(_self_), _cgo_text_)
	return
}

func (_self_ *Entry) SetVisibility(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_entry_set_visibility((*C.GtkEntry)(_self_), _cgo_visible_)
	return
}

func (_self_ *Entry) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_entry_set_width_chars((*C.GtkEntry)(_self_), _cgo_n_chars_)
	return
}

func (_self_ *Entry) TextIndexToLayoutIndex(text_index int) (_go__return__ int) {
	_cgo_text_index_ := (C.gint)(text_index)
	var _return_ C.gint
	_return_ = C.gtk_entry_text_index_to_layout_index((*C.GtkEntry)(_self_), _cgo_text_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Entry) UnsetInvisibleChar() () {
	C.gtk_entry_unset_invisible_char((*C.GtkEntry)(_self_))
	return
}

func EntryBufferNew(initial_chars string, n_initial_chars int) (_go__return__ *EntryBuffer) {
	var _return_ *C.GtkEntryBuffer
	_cgo_n_initial_chars_ := (C.gint)(n_initial_chars)
	_cstring_initial_chars_ := C.CString(initial_chars)
	_cgo_initial_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_initial_chars_))
	defer C.free(unsafe.Pointer(_cstring_initial_chars_))
	_return_ = C._gtk_entry_buffer_new(_cgo_initial_chars_, _cgo_n_initial_chars_)
	_go__return__ = (*EntryBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *EntryBuffer) DeleteText(position uint, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_return_ = C.gtk_entry_buffer_delete_text((*C.GtkEntryBuffer)(_self_), _cgo_position_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *EntryBuffer) EmitDeletedText(position uint, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	C.gtk_entry_buffer_emit_deleted_text((*C.GtkEntryBuffer)(_self_), _cgo_position_, _cgo_n_chars_)
	return
}

func (_self_ *EntryBuffer) EmitInsertedText(position uint, chars string, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._gtk_entry_buffer_emit_inserted_text((*C.GtkEntryBuffer)(_self_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	return
}

func (_self_ *EntryBuffer) GetBytes() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.gtk_entry_buffer_get_bytes((*C.GtkEntryBuffer)(_self_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *EntryBuffer) GetLength() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_entry_buffer_get_length((*C.GtkEntryBuffer)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *EntryBuffer) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_buffer_get_max_length((*C.GtkEntryBuffer)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *EntryBuffer) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_buffer_get_text((*C.GtkEntryBuffer)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *EntryBuffer) InsertText(position uint, chars string, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	_return_ = C._gtk_entry_buffer_insert_text((*C.GtkEntryBuffer)(_self_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *EntryBuffer) SetMaxLength(max_length int) () {
	_cgo_max_length_ := (C.gint)(max_length)
	C.gtk_entry_buffer_set_max_length((*C.GtkEntryBuffer)(_self_), _cgo_max_length_)
	return
}

func (_self_ *EntryBuffer) SetText(chars string, n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._gtk_entry_buffer_set_text((*C.GtkEntryBuffer)(_self_), _cgo_chars_, _cgo_n_chars_)
	return
}

func EntryCompletionNew() (_go__return__ *EntryCompletion) {
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_completion_new()
	_go__return__ = (*EntryCompletion)(unsafe.Pointer(_return_))
	return
}

func EntryCompletionNewWithArea(area *CellArea) (_go__return__ *EntryCompletion) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_completion_new_with_area(_cgo_area_)
	_go__return__ = (*EntryCompletion)(unsafe.Pointer(_return_))
	return
}

func (_self_ *EntryCompletion) Complete() () {
	C.gtk_entry_completion_complete((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) ComputePrefix(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.char)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.gchar
	_return_ = C._gtk_entry_completion_compute_prefix((*C.GtkEntryCompletion)(_self_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *EntryCompletion) DeleteAction(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_entry_completion_delete_action((*C.GtkEntryCompletion)(_self_), _cgo_index__)
	return
}

func (_self_ *EntryCompletion) GetCompletionPrefix() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_completion_get_completion_prefix((*C.GtkEntryCompletion)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *EntryCompletion) GetEntry() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_completion_get_entry((*C.GtkEntryCompletion)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *EntryCompletion) GetInlineCompletion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_inline_completion((*C.GtkEntryCompletion)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetInlineSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_inline_selection((*C.GtkEntryCompletion)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetMinimumKeyLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_completion_get_minimum_key_length((*C.GtkEntryCompletion)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *EntryCompletion) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_entry_completion_get_model((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetPopupCompletion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_completion((*C.GtkEntryCompletion)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetPopupSetWidth() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_set_width((*C.GtkEntryCompletion)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetPopupSingleMatch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_single_match((*C.GtkEntryCompletion)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_completion_get_text_column((*C.GtkEntryCompletion)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *EntryCompletion) InsertActionMarkup(index_ int, markup string) () {
	_cgo_index__ := (C.gint)(index_)
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_entry_completion_insert_action_markup((*C.GtkEntryCompletion)(_self_), _cgo_index__, _cgo_markup_)
	return
}

func (_self_ *EntryCompletion) InsertActionText(index_ int, text string) () {
	_cgo_index__ := (C.gint)(index_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_completion_insert_action_text((*C.GtkEntryCompletion)(_self_), _cgo_index__, _cgo_text_)
	return
}

func (_self_ *EntryCompletion) InsertPrefix() () {
	C.gtk_entry_completion_insert_prefix((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) SetInlineCompletion(inline_completion bool) () {
	_cgo_inline_completion_ := C.glibfalse()
	if inline_completion { _cgo_inline_completion_ = C.glibtrue() }
	C.gtk_entry_completion_set_inline_completion((*C.GtkEntryCompletion)(_self_), _cgo_inline_completion_)
	return
}

func (_self_ *EntryCompletion) SetInlineSelection(inline_selection bool) () {
	_cgo_inline_selection_ := C.glibfalse()
	if inline_selection { _cgo_inline_selection_ = C.glibtrue() }
	C.gtk_entry_completion_set_inline_selection((*C.GtkEntryCompletion)(_self_), _cgo_inline_selection_)
	return
}

func (_self_ *EntryCompletion) SetMatchFunc(func_ C.GtkEntryCompletionMatchFunc, func_data C.gpointer, func_notify C.GDestroyNotify) () {
	C.gtk_entry_completion_set_match_func((*C.GtkEntryCompletion)(_self_), func_, func_data, func_notify)
	return
}

func (_self_ *EntryCompletion) SetMinimumKeyLength(length int) () {
	_cgo_length_ := (C.gint)(length)
	C.gtk_entry_completion_set_minimum_key_length((*C.GtkEntryCompletion)(_self_), _cgo_length_)
	return
}

func (_self_ *EntryCompletion) SetModel(model *C.GtkTreeModel) () {
	C.gtk_entry_completion_set_model((*C.GtkEntryCompletion)(_self_), model)
	return
}

func (_self_ *EntryCompletion) SetPopupCompletion(popup_completion bool) () {
	_cgo_popup_completion_ := C.glibfalse()
	if popup_completion { _cgo_popup_completion_ = C.glibtrue() }
	C.gtk_entry_completion_set_popup_completion((*C.GtkEntryCompletion)(_self_), _cgo_popup_completion_)
	return
}

func (_self_ *EntryCompletion) SetPopupSetWidth(popup_set_width bool) () {
	_cgo_popup_set_width_ := C.glibfalse()
	if popup_set_width { _cgo_popup_set_width_ = C.glibtrue() }
	C.gtk_entry_completion_set_popup_set_width((*C.GtkEntryCompletion)(_self_), _cgo_popup_set_width_)
	return
}

func (_self_ *EntryCompletion) SetPopupSingleMatch(popup_single_match bool) () {
	_cgo_popup_single_match_ := C.glibfalse()
	if popup_single_match { _cgo_popup_single_match_ = C.glibtrue() }
	C.gtk_entry_completion_set_popup_single_match((*C.GtkEntryCompletion)(_self_), _cgo_popup_single_match_)
	return
}

func (_self_ *EntryCompletion) SetTextColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_entry_completion_set_text_column((*C.GtkEntryCompletion)(_self_), _cgo_column_)
	return
}

func EventBoxNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_event_box_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *EventBox) GetAboveChild() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_event_box_get_above_child((*C.GtkEventBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EventBox) GetVisibleWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_event_box_get_visible_window((*C.GtkEventBox)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *EventBox) SetAboveChild(above_child bool) () {
	_cgo_above_child_ := C.glibfalse()
	if above_child { _cgo_above_child_ = C.glibtrue() }
	C.gtk_event_box_set_above_child((*C.GtkEventBox)(_self_), _cgo_above_child_)
	return
}

func (_self_ *EventBox) SetVisibleWindow(visible_window bool) () {
	_cgo_visible_window_ := C.glibfalse()
	if visible_window { _cgo_visible_window_ = C.glibtrue() }
	C.gtk_event_box_set_visible_window((*C.GtkEventBox)(_self_), _cgo_visible_window_)
	return
}

func ExpanderNew(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_expander_new(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ExpanderNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_expander_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Expander) GetExpanded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_expanded((*C.GtkExpander)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Expander) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_expander_get_label((*C.GtkExpander)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Expander) GetLabelFill() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_label_fill((*C.GtkExpander)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Expander) GetLabelWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_expander_get_label_widget((*C.GtkExpander)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Expander) GetResizeToplevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_resize_toplevel((*C.GtkExpander)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Expander) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_expander_get_spacing((*C.GtkExpander)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Expander) GetUseMarkup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_use_markup((*C.GtkExpander)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Expander) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_use_underline((*C.GtkExpander)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Expander) SetExpanded(expanded bool) () {
	_cgo_expanded_ := C.glibfalse()
	if expanded { _cgo_expanded_ = C.glibtrue() }
	C.gtk_expander_set_expanded((*C.GtkExpander)(_self_), _cgo_expanded_)
	return
}

func (_self_ *Expander) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_expander_set_label((*C.GtkExpander)(_self_), _cgo_label_)
	return
}

func (_self_ *Expander) SetLabelFill(label_fill bool) () {
	_cgo_label_fill_ := C.glibfalse()
	if label_fill { _cgo_label_fill_ = C.glibtrue() }
	C.gtk_expander_set_label_fill((*C.GtkExpander)(_self_), _cgo_label_fill_)
	return
}

func (_self_ *Expander) SetLabelWidget(label_widget *Widget) () {
	_cgo_label_widget_ := (*C.GtkWidget)(unsafe.Pointer(label_widget))
	C.gtk_expander_set_label_widget((*C.GtkExpander)(_self_), _cgo_label_widget_)
	return
}

func (_self_ *Expander) SetResizeToplevel(resize_toplevel bool) () {
	_cgo_resize_toplevel_ := C.glibfalse()
	if resize_toplevel { _cgo_resize_toplevel_ = C.glibtrue() }
	C.gtk_expander_set_resize_toplevel((*C.GtkExpander)(_self_), _cgo_resize_toplevel_)
	return
}

func (_self_ *Expander) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_expander_set_spacing((*C.GtkExpander)(_self_), _cgo_spacing_)
	return
}

func (_self_ *Expander) SetUseMarkup(use_markup bool) () {
	_cgo_use_markup_ := C.glibfalse()
	if use_markup { _cgo_use_markup_ = C.glibtrue() }
	C.gtk_expander_set_use_markup((*C.GtkExpander)(_self_), _cgo_use_markup_)
	return
}

func (_self_ *Expander) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := C.glibfalse()
	if use_underline { _cgo_use_underline_ = C.glibtrue() }
	C.gtk_expander_set_use_underline((*C.GtkExpander)(_self_), _cgo_use_underline_)
	return
}

func FileChooserButtonNew(title string, action C.GtkFileChooserAction) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_file_chooser_button_new(_cgo_title_, action)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func FileChooserButtonNewWithDialog(dialog *Widget) (_go__return__ *Widget) {
	_cgo_dialog_ := (*C.GtkWidget)(unsafe.Pointer(dialog))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_file_chooser_button_new_with_dialog(_cgo_dialog_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileChooserButton) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_file_chooser_button_get_focus_on_click((*C.GtkFileChooserButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FileChooserButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_file_chooser_button_get_title((*C.GtkFileChooserButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileChooserButton) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_file_chooser_button_get_width_chars((*C.GtkFileChooserButton)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *FileChooserButton) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := C.glibfalse()
	if focus_on_click { _cgo_focus_on_click_ = C.glibtrue() }
	C.gtk_file_chooser_button_set_focus_on_click((*C.GtkFileChooserButton)(_self_), _cgo_focus_on_click_)
	return
}

func (_self_ *FileChooserButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_file_chooser_button_set_title((*C.GtkFileChooserButton)(_self_), _cgo_title_)
	return
}

func (_self_ *FileChooserButton) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_file_chooser_button_set_width_chars((*C.GtkFileChooserButton)(_self_), _cgo_n_chars_)
	return
}

func FileChooserWidgetNew(action C.GtkFileChooserAction) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_file_chooser_widget_new(action)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func FileFilterNew() (_go__return__ *FileFilter) {
	var _return_ *C.GtkFileFilter
	_return_ = C.gtk_file_filter_new()
	_go__return__ = (*FileFilter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileFilter) AddCustom(needed C.GtkFileFilterFlags, func_ C.GtkFileFilterFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_file_filter_add_custom((*C.GtkFileFilter)(_self_), needed, func_, data, notify)
	return
}

func (_self_ *FileFilter) AddMimeType(mime_type string) () {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	C._gtk_file_filter_add_mime_type((*C.GtkFileFilter)(_self_), _cgo_mime_type_)
	return
}

func (_self_ *FileFilter) AddPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_file_filter_add_pattern((*C.GtkFileFilter)(_self_), _cgo_pattern_)
	return
}

func (_self_ *FileFilter) AddPixbufFormats() () {
	C.gtk_file_filter_add_pixbuf_formats((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) Filter(filter_info *FileFilterInfo) (_go__return__ bool) {
	_cgo_filter_info_ := (*C.GtkFileFilterInfo)(unsafe.Pointer(filter_info))
	var _return_ C.gboolean
	_return_ = C._gtk_file_filter_filter((*C.GtkFileFilter)(_self_), _cgo_filter_info_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FileFilter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_file_filter_get_name((*C.GtkFileFilter)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileFilter) GetNeeded() (_return_ C.GtkFileFilterFlags) {
	_return_ = C.gtk_file_filter_get_needed((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_file_filter_set_name((*C.GtkFileFilter)(_self_), _cgo_name_)
	return
}

func FixedNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_fixed_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Fixed) Move(widget *Widget, x int, y int) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_fixed_move((*C.GtkFixed)(_self_), _cgo_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *Fixed) Put(widget *Widget, x int, y int) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_fixed_put((*C.GtkFixed)(_self_), _cgo_widget_, _cgo_x_, _cgo_y_)
	return
}

func FontButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_font_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func FontButtonNewWithFont(fontname string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_fontname_ := C.CString(fontname)
	_cgo_fontname_ := (*C.gchar)(unsafe.Pointer(_cstring_fontname_))
	defer C.free(unsafe.Pointer(_cstring_fontname_))
	_return_ = C._gtk_font_button_new_with_font(_cgo_fontname_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FontButton) GetFontName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_font_button_get_font_name((*C.GtkFontButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FontButton) GetShowSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_show_size((*C.GtkFontButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetShowStyle() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_show_style((*C.GtkFontButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_font_button_get_title((*C.GtkFontButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FontButton) GetUseFont() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_use_font((*C.GtkFontButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetUseSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_use_size((*C.GtkFontButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FontButton) SetFontName(fontname string) (_go__return__ bool) {
	_cstring_fontname_ := C.CString(fontname)
	_cgo_fontname_ := (*C.gchar)(unsafe.Pointer(_cstring_fontname_))
	defer C.free(unsafe.Pointer(_cstring_fontname_))
	var _return_ C.gboolean
	_return_ = C._gtk_font_button_set_font_name((*C.GtkFontButton)(_self_), _cgo_fontname_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *FontButton) SetShowSize(show_size bool) () {
	_cgo_show_size_ := C.glibfalse()
	if show_size { _cgo_show_size_ = C.glibtrue() }
	C.gtk_font_button_set_show_size((*C.GtkFontButton)(_self_), _cgo_show_size_)
	return
}

func (_self_ *FontButton) SetShowStyle(show_style bool) () {
	_cgo_show_style_ := C.glibfalse()
	if show_style { _cgo_show_style_ = C.glibtrue() }
	C.gtk_font_button_set_show_style((*C.GtkFontButton)(_self_), _cgo_show_style_)
	return
}

func (_self_ *FontButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_font_button_set_title((*C.GtkFontButton)(_self_), _cgo_title_)
	return
}

func (_self_ *FontButton) SetUseFont(use_font bool) () {
	_cgo_use_font_ := C.glibfalse()
	if use_font { _cgo_use_font_ = C.glibtrue() }
	C.gtk_font_button_set_use_font((*C.GtkFontButton)(_self_), _cgo_use_font_)
	return
}

func (_self_ *FontButton) SetUseSize(use_size bool) () {
	_cgo_use_size_ := C.glibfalse()
	if use_size { _cgo_use_size_ = C.glibtrue() }
	C.gtk_font_button_set_use_size((*C.GtkFontButton)(_self_), _cgo_use_size_)
	return
}

func FontChooserDialogNew(title string, parent *Window) (_go__return__ *Widget) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_font_chooser_dialog_new(_cgo_title_, _cgo_parent_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func FontChooserWidgetNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_font_chooser_widget_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func FrameNew(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_frame_new(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Frame) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_frame_get_label((*C.GtkFrame)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Frame) GetLabelAlign() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_frame_get_label_align((*C.GtkFrame)(_self_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *Frame) GetLabelWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_frame_get_label_widget((*C.GtkFrame)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Frame) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_frame_get_shadow_type((*C.GtkFrame)(_self_))
	return
}

func (_self_ *Frame) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_frame_set_label((*C.GtkFrame)(_self_), _cgo_label_)
	return
}

func (_self_ *Frame) SetLabelAlign(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_frame_set_label_align((*C.GtkFrame)(_self_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *Frame) SetLabelWidget(label_widget *Widget) () {
	_cgo_label_widget_ := (*C.GtkWidget)(unsafe.Pointer(label_widget))
	C.gtk_frame_set_label_widget((*C.GtkFrame)(_self_), _cgo_label_widget_)
	return
}

func (_self_ *Frame) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_frame_set_shadow_type((*C.GtkFrame)(_self_), type_)
	return
}

func GradientNewLinear(x0 float64, y0 float64, x1 float64, y1 float64) (_go__return__ *Gradient) {
	var _return_ *C.GtkGradient
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	_return_ = C.gtk_gradient_new_linear(_cgo_x0_, _cgo_y0_, _cgo_x1_, _cgo_y1_)
	_go__return__ = (*Gradient)(unsafe.Pointer(_return_))
	return
}

func GradientNewRadial(x0 float64, y0 float64, radius0 float64, x1 float64, y1 float64, radius1 float64) (_go__return__ *Gradient) {
	var _return_ *C.GtkGradient
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_radius0_ := (C.gdouble)(radius0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	_cgo_radius1_ := (C.gdouble)(radius1)
	_return_ = C.gtk_gradient_new_radial(_cgo_x0_, _cgo_y0_, _cgo_radius0_, _cgo_x1_, _cgo_y1_, _cgo_radius1_)
	_go__return__ = (*Gradient)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Gradient) AddColorStop(offset float64, color *SymbolicColor) () {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	_cgo_offset_ := (C.gdouble)(offset)
	C.gtk_gradient_add_color_stop((*C.GtkGradient)(_self_), _cgo_offset_, _cgo_color_)
	return
}

func (_self_ *Gradient) Ref() (_go__return__ *Gradient) {
	var _return_ *C.GtkGradient
	_return_ = C.gtk_gradient_ref((*C.GtkGradient)(_self_))
	_go__return__ = (*Gradient)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Gradient) Resolve(props *StyleProperties) (_go__return__ bool, resolved_gradient unsafe.Pointer) {
	_cgo_props_ := (*C.GtkStyleProperties)(unsafe.Pointer(props))
	var _return_ C.gboolean
	_return_ = C._gtk_gradient_resolve((*C.GtkGradient)(_self_), _cgo_props_, resolved_gradient)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Gradient) ResolveForContext(context *StyleContext) (_return_ *C.cairo_pattern_t) {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_return_ = C.gtk_gradient_resolve_for_context((*C.GtkGradient)(_self_), _cgo_context_)
	return
}

func (_self_ *Gradient) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_gradient_to_string((*C.GtkGradient)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Gradient) Unref() () {
	C.gtk_gradient_unref((*C.GtkGradient)(_self_))
	return
}

func GridNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_grid_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Grid) Attach(child *Widget, left int, top int, width int, height int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_grid_attach((*C.GtkGrid)(_self_), _cgo_child_, _cgo_left_, _cgo_top_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Grid) AttachNextTo(child *Widget, sibling *Widget, side C.GtkPositionType, width int, height int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_sibling_ := (*C.GtkWidget)(unsafe.Pointer(sibling))
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_grid_attach_next_to((*C.GtkGrid)(_self_), _cgo_child_, _cgo_sibling_, side, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Grid) GetChildAt(left int, top int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_return_ = C.gtk_grid_get_child_at((*C.GtkGrid)(_self_), _cgo_left_, _cgo_top_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Grid) GetColumnHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_grid_get_column_homogeneous((*C.GtkGrid)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Grid) GetColumnSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_grid_get_column_spacing((*C.GtkGrid)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Grid) GetRowHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_grid_get_row_homogeneous((*C.GtkGrid)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Grid) GetRowSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_grid_get_row_spacing((*C.GtkGrid)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Grid) InsertColumn(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_grid_insert_column((*C.GtkGrid)(_self_), _cgo_position_)
	return
}

func (_self_ *Grid) InsertNextTo(sibling *Widget, side C.GtkPositionType) () {
	_cgo_sibling_ := (*C.GtkWidget)(unsafe.Pointer(sibling))
	C.gtk_grid_insert_next_to((*C.GtkGrid)(_self_), _cgo_sibling_, side)
	return
}

func (_self_ *Grid) InsertRow(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_grid_insert_row((*C.GtkGrid)(_self_), _cgo_position_)
	return
}

func (_self_ *Grid) SetColumnHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := C.glibfalse()
	if homogeneous { _cgo_homogeneous_ = C.glibtrue() }
	C.gtk_grid_set_column_homogeneous((*C.GtkGrid)(_self_), _cgo_homogeneous_)
	return
}

func (_self_ *Grid) SetColumnSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.gtk_grid_set_column_spacing((*C.GtkGrid)(_self_), _cgo_spacing_)
	return
}

func (_self_ *Grid) SetRowHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := C.glibfalse()
	if homogeneous { _cgo_homogeneous_ = C.glibtrue() }
	C.gtk_grid_set_row_homogeneous((*C.GtkGrid)(_self_), _cgo_homogeneous_)
	return
}

func (_self_ *Grid) SetRowSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.gtk_grid_set_row_spacing((*C.GtkGrid)(_self_), _cgo_spacing_)
	return
}

func HSVToRgb(h float64, s float64, v float64) (_go_r_ float64, _go_g_ float64, _go_b_ float64) {
	_cgo_h_ := (C.gdouble)(h)
	_cgo_s_ := (C.gdouble)(s)
	_cgo_v_ := (C.gdouble)(v)
	var r C.gdouble
	var g C.gdouble
	var b C.gdouble
	C.gtk_hsv_to_rgb(_cgo_h_, _cgo_s_, _cgo_v_, &r, &g, &b)
	_go_r_ = (float64)(r)
	_go_g_ = (float64)(g)
	_go_b_ = (float64)(b)
	return
}

func (_self_ *IMContext) DeleteSurrounding(offset int, n_chars int) (_go__return__ bool) {
	_cgo_offset_ := (C.gint)(offset)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.gboolean
	_return_ = C.gtk_im_context_delete_surrounding((*C.GtkIMContext)(_self_), _cgo_offset_, _cgo_n_chars_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IMContext) FilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_im_context_filter_keypress((*C.GtkIMContext)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IMContext) FocusIn() () {
	C.gtk_im_context_focus_in((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) FocusOut() () {
	C.gtk_im_context_focus_out((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) GetPreeditString() (str unsafe.Pointer, attrs unsafe.Pointer, _go_cursor_pos_ int) {
	var cursor_pos C.gint
	C._gtk_im_context_get_preedit_string((*C.GtkIMContext)(_self_), str, attrs, &cursor_pos)
	_go_cursor_pos_ = (int)(cursor_pos)
	return
}

func (_self_ *IMContext) GetSurrounding() (_go__return__ bool, text unsafe.Pointer, _go_cursor_index_ int) {
	var cursor_index C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_im_context_get_surrounding((*C.GtkIMContext)(_self_), text, &cursor_index)
	_go_cursor_index_ = (int)(cursor_index)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IMContext) Reset() () {
	C.gtk_im_context_reset((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) SetClientWindow(window *C.GdkWindow) () {
	C.gtk_im_context_set_client_window((*C.GtkIMContext)(_self_), window)
	return
}

func (_self_ *IMContext) SetCursorLocation(area *C.GdkRectangle) () {
	C._gtk_im_context_set_cursor_location((*C.GtkIMContext)(_self_), area)
	return
}

func (_self_ *IMContext) SetSurrounding(text string, len_ int, cursor_index int) () {
	_cgo_len__ := (C.gint)(len_)
	_cgo_cursor_index_ := (C.gint)(cursor_index)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_im_context_set_surrounding((*C.GtkIMContext)(_self_), _cgo_text_, _cgo_len__, _cgo_cursor_index_)
	return
}

func (_self_ *IMContext) SetUsePreedit(use_preedit bool) () {
	_cgo_use_preedit_ := C.glibfalse()
	if use_preedit { _cgo_use_preedit_ = C.glibtrue() }
	C.gtk_im_context_set_use_preedit((*C.GtkIMContext)(_self_), _cgo_use_preedit_)
	return
}

func IMContextSimpleNew() (_go__return__ *IMContext) {
	var _return_ *C.GtkIMContext
	_return_ = C.gtk_im_context_simple_new()
	_go__return__ = (*IMContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IMContextSimple) AddTable(data *C.guint16, max_seq_len int, n_seqs int) () {
	_cgo_max_seq_len_ := (C.gint)(max_seq_len)
	_cgo_n_seqs_ := (C.gint)(n_seqs)
	C.gtk_im_context_simple_add_table((*C.GtkIMContextSimple)(_self_), data, _cgo_max_seq_len_, _cgo_n_seqs_)
	return
}

func IMMulticontextNew() (_go__return__ *IMContext) {
	var _return_ *C.GtkIMContext
	_return_ = C.gtk_im_multicontext_new()
	_go__return__ = (*IMContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IMMulticontext) AppendMenuitems(menushell *MenuShell) () {
	_cgo_menushell_ := (*C.GtkMenuShell)(unsafe.Pointer(menushell))
	C.gtk_im_multicontext_append_menuitems((*C.GtkIMMulticontext)(_self_), _cgo_menushell_)
	return
}

func (_self_ *IMMulticontext) GetContextId() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._gtk_im_multicontext_get_context_id((*C.GtkIMMulticontext)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IMMulticontext) SetContextId(context_id string) () {
	_cstring_context_id_ := C.CString(context_id)
	_cgo_context_id_ := (*C.char)(unsafe.Pointer(_cstring_context_id_))
	defer C.free(unsafe.Pointer(_cstring_context_id_))
	C._gtk_im_multicontext_set_context_id((*C.GtkIMMulticontext)(_self_), _cgo_context_id_)
	return
}

func IconFactoryNew() (_go__return__ *IconFactory) {
	var _return_ *C.GtkIconFactory
	_return_ = C.gtk_icon_factory_new()
	_go__return__ = (*IconFactory)(unsafe.Pointer(_return_))
	return
}

func IconFactoryLookupDefault(stock_id string) (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_icon_factory_lookup_default(_cgo_stock_id_)
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconFactory) Add(stock_id string, icon_set *IconSet) () {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_icon_factory_add((*C.GtkIconFactory)(_self_), _cgo_stock_id_, _cgo_icon_set_)
	return
}

func (_self_ *IconFactory) AddDefault() () {
	C.gtk_icon_factory_add_default((*C.GtkIconFactory)(_self_))
	return
}

func (_self_ *IconFactory) Lookup(stock_id string) (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_icon_factory_lookup((*C.GtkIconFactory)(_self_), _cgo_stock_id_)
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconFactory) RemoveDefault() () {
	C.gtk_icon_factory_remove_default((*C.GtkIconFactory)(_self_))
	return
}

func IconInfoNewForPixbuf(icon_theme *IconTheme, pixbuf *C.GdkPixbuf) (_go__return__ *IconInfo) {
	_cgo_icon_theme_ := (*C.GtkIconTheme)(unsafe.Pointer(icon_theme))
	var _return_ *C.GtkIconInfo
	_return_ = C.gtk_icon_info_new_for_pixbuf(_cgo_icon_theme_, pixbuf)
	_go__return__ = (*IconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconInfo) Copy() (_go__return__ *IconInfo) {
	var _return_ *C.GtkIconInfo
	_return_ = C.gtk_icon_info_copy((*C.GtkIconInfo)(_self_))
	_go__return__ = (*IconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconInfo) Free() () {
	C.gtk_icon_info_free((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetBaseSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_info_get_base_size((*C.GtkIconInfo)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconInfo) GetBuiltinPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_icon_info_get_builtin_pixbuf((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_info_get_display_name((*C.GtkIconInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IconInfo) GetEmbeddedRect() (_go__return__ bool, rectangle *C.GdkRectangle) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_info_get_embedded_rect((*C.GtkIconInfo)(_self_), rectangle)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconInfo) GetFilename() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_info_get_filename((*C.GtkIconInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IconInfo) LoadIcon() (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_icon((*C.GtkIconInfo)(_self_), _error_)
	return
}

func (_self_ *IconInfo) LoadSymbolic(fg *C.GdkRGBA, success_color *C.GdkRGBA, warning_color *C.GdkRGBA, error_color *C.GdkRGBA) (_return_ *C.GdkPixbuf, _go_was_symbolic_ bool, _error_ unsafe.Pointer) {
	var was_symbolic C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic((*C.GtkIconInfo)(_self_), fg, success_color, warning_color, error_color, &was_symbolic, _error_)
	_go_was_symbolic_ = was_symbolic == C.glibtrue()
	return
}

func (_self_ *IconInfo) LoadSymbolicForContext(context *StyleContext) (_return_ *C.GdkPixbuf, _go_was_symbolic_ bool, _error_ unsafe.Pointer) {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	var was_symbolic C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic_for_context((*C.GtkIconInfo)(_self_), _cgo_context_, &was_symbolic, _error_)
	_go_was_symbolic_ = was_symbolic == C.glibtrue()
	return
}

func (_self_ *IconInfo) SetRawCoordinates(raw_coordinates bool) () {
	_cgo_raw_coordinates_ := C.glibfalse()
	if raw_coordinates { _cgo_raw_coordinates_ = C.glibtrue() }
	C.gtk_icon_info_set_raw_coordinates((*C.GtkIconInfo)(_self_), _cgo_raw_coordinates_)
	return
}

func IconSetNew() (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_new()
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func IconSetNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_new_from_pixbuf(pixbuf)
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconSet) AddSource(source *IconSource) () {
	_cgo_source_ := (*C.GtkIconSource)(unsafe.Pointer(source))
	C._gtk_icon_set_add_source((*C.GtkIconSet)(_self_), _cgo_source_)
	return
}

func (_self_ *IconSet) Copy() (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_copy((*C.GtkIconSet)(_self_))
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconSet) Ref() (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_ref((*C.GtkIconSet)(_self_))
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconSet) RenderIconPixbuf(context *StyleContext, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_return_ = C.gtk_icon_set_render_icon_pixbuf((*C.GtkIconSet)(_self_), _cgo_context_, size)
	return
}

func (_self_ *IconSet) Unref() () {
	C.gtk_icon_set_unref((*C.GtkIconSet)(_self_))
	return
}

func IconSourceNew() (_go__return__ *IconSource) {
	var _return_ *C.GtkIconSource
	_return_ = C.gtk_icon_source_new()
	_go__return__ = (*IconSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconSource) Copy() (_go__return__ *IconSource) {
	var _return_ *C.GtkIconSource
	_return_ = C._gtk_icon_source_copy((*C.GtkIconSource)(_self_))
	_go__return__ = (*IconSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconSource) Free() () {
	C.gtk_icon_source_free((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_icon_source_get_direction((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirectionWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_direction_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconSource) GetFilename() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_source_get_filename((*C.GtkIconSource)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IconSource) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_source_get_icon_name((*C.GtkIconSource)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IconSource) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_icon_source_get_pixbuf((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_source_get_size((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSizeWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_size_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconSource) GetState() (_return_ C.GtkStateType) {
	_return_ = C._gtk_icon_source_get_state((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetStateWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_state_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconSource) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_icon_source_set_direction((*C.GtkIconSource)(_self_), direction)
	return
}

func (_self_ *IconSource) SetDirectionWildcarded(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_icon_source_set_direction_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func (_self_ *IconSource) SetFilename(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_icon_source_set_filename((*C.GtkIconSource)(_self_), _cgo_filename_)
	return
}

func (_self_ *IconSource) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_icon_source_set_icon_name((*C.GtkIconSource)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *IconSource) SetPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_icon_source_set_pixbuf((*C.GtkIconSource)(_self_), pixbuf)
	return
}

func (_self_ *IconSource) SetSize(size C.GtkIconSize) () {
	C.gtk_icon_source_set_size((*C.GtkIconSource)(_self_), size)
	return
}

func (_self_ *IconSource) SetSizeWildcarded(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_icon_source_set_size_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func (_self_ *IconSource) SetState(state C.GtkStateType) () {
	C.gtk_icon_source_set_state((*C.GtkIconSource)(_self_), state)
	return
}

func (_self_ *IconSource) SetStateWildcarded(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_icon_source_set_state_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func IconThemeNew() (_go__return__ *IconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_new()
	_go__return__ = (*IconTheme)(unsafe.Pointer(_return_))
	return
}

func IconThemeAddBuiltinIcon(icon_name string, size int, pixbuf *C.GdkPixbuf) () {
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_icon_theme_add_builtin_icon(_cgo_icon_name_, _cgo_size_, pixbuf)
	return
}

func IconThemeGetDefault() (_go__return__ *IconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_get_default()
	_go__return__ = (*IconTheme)(unsafe.Pointer(_return_))
	return
}

func IconThemeGetForScreen(screen *C.GdkScreen) (_go__return__ *IconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_get_for_screen(screen)
	_go__return__ = (*IconTheme)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconTheme) AppendSearchPath(path string) () {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	C._gtk_icon_theme_append_search_path((*C.GtkIconTheme)(_self_), _cgo_path_)
	return
}

func (_self_ *IconTheme) GetExampleIconName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_icon_theme_get_example_icon_name((*C.GtkIconTheme)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IconTheme) GetIconSizes(icon_name string) (_return_ *C.gint) {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_get_icon_sizes((*C.GtkIconTheme)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *IconTheme) HasIcon(icon_name string) (_go__return__ bool) {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_icon_theme_has_icon((*C.GtkIconTheme)(_self_), _cgo_icon_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconTheme) ListContexts() (_return_ *C.GList) {
	_return_ = C.gtk_icon_theme_list_contexts((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) ListIcons(context string) (_return_ *C.GList) {
	_cstring_context_ := C.CString(context)
	_cgo_context_ := (*C.gchar)(unsafe.Pointer(_cstring_context_))
	defer C.free(unsafe.Pointer(_cstring_context_))
	_return_ = C._gtk_icon_theme_list_icons((*C.GtkIconTheme)(_self_), _cgo_context_)
	return
}

func (_self_ *IconTheme) LoadIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_load_icon((*C.GtkIconTheme)(_self_), _cgo_icon_name_, _cgo_size_, flags, _error_)
	return
}

func (_self_ *IconTheme) LookupByGicon(icon *C.GIcon, size int, flags C.GtkIconLookupFlags) (_go__return__ *IconInfo) {
	var _return_ *C.GtkIconInfo
	_cgo_size_ := (C.gint)(size)
	_return_ = C.gtk_icon_theme_lookup_by_gicon((*C.GtkIconTheme)(_self_), icon, _cgo_size_, flags)
	_go__return__ = (*IconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconTheme) LookupIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_go__return__ *IconInfo) {
	var _return_ *C.GtkIconInfo
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_lookup_icon((*C.GtkIconTheme)(_self_), _cgo_icon_name_, _cgo_size_, flags)
	_go__return__ = (*IconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconTheme) PrependSearchPath(path string) () {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	C._gtk_icon_theme_prepend_search_path((*C.GtkIconTheme)(_self_), _cgo_path_)
	return
}

func (_self_ *IconTheme) RescanIfNeeded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_theme_rescan_if_needed((*C.GtkIconTheme)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconTheme) SetCustomTheme(theme_name string) () {
	_cstring_theme_name_ := C.CString(theme_name)
	_cgo_theme_name_ := (*C.gchar)(unsafe.Pointer(_cstring_theme_name_))
	defer C.free(unsafe.Pointer(_cstring_theme_name_))
	C._gtk_icon_theme_set_custom_theme((*C.GtkIconTheme)(_self_), _cgo_theme_name_)
	return
}

func (_self_ *IconTheme) SetScreen(screen *C.GdkScreen) () {
	C.gtk_icon_theme_set_screen((*C.GtkIconTheme)(_self_), screen)
	return
}

func IconViewNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func IconViewNewWithArea(area *CellArea) (_go__return__ *Widget) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new_with_area(_cgo_area_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func IconViewNewWithModel(model *C.GtkTreeModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new_with_model(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconView) ConvertWidgetToBinWindowCoords(wx int, wy int) (_go_bx_ int, _go_by_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var bx C.gint
	var by C.gint
	C.gtk_icon_view_convert_widget_to_bin_window_coords((*C.GtkIconView)(_self_), _cgo_wx_, _cgo_wy_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *IconView) CreateDragIcon(path *TreePath) (_return_ *C.cairo_surface_t) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_return_ = C.gtk_icon_view_create_drag_icon((*C.GtkIconView)(_self_), _cgo_path_)
	return
}

func (_self_ *IconView) GetCellRect(path *TreePath, cell *CellRenderer) (_go__return__ bool, rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_get_cell_rect((*C.GtkIconView)(_self_), _cgo_path_, _cgo_cell_, rect)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) GetColumnSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_column_spacing((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetColumns() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_columns((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetCursor() (_go__return__ bool, path *TreePath, cell *CellRenderer) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_cell_ *C.GtkCellRenderer
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_cursor((*C.GtkIconView)(_self_), unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_cell_))
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	cell = (*CellRenderer)(unsafe.Pointer(_allocated_cell_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) GetDestItemAtPos(drag_x int, drag_y int) (_go__return__ bool, path *TreePath, pos *C.GtkIconViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	_cgo_drag_x_ := (C.gint)(drag_x)
	_cgo_drag_y_ := (C.gint)(drag_y)
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_dest_item_at_pos((*C.GtkIconView)(_self_), _cgo_drag_x_, _cgo_drag_y_, unsafe.Pointer(&_allocated_path_), pos)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) GetDragDestItem() (path *TreePath, pos *C.GtkIconViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	C._gtk_icon_view_get_drag_dest_item((*C.GtkIconView)(_self_), unsafe.Pointer(&_allocated_path_), pos)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	return
}

func (_self_ *IconView) GetItemAtPos(x int, y int) (_go__return__ bool, path *TreePath, cell *CellRenderer) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_cell_ *C.GtkCellRenderer
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_item_at_pos((*C.GtkIconView)(_self_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_cell_))
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	cell = (*CellRenderer)(unsafe.Pointer(_allocated_cell_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) GetItemColumn(path *TreePath) (_go__return__ int) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_column((*C.GtkIconView)(_self_), _cgo_path_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetItemOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_icon_view_get_item_orientation((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetItemPadding() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_padding((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetItemRow(path *TreePath) (_go__return__ int) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_row((*C.GtkIconView)(_self_), _cgo_path_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetItemWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_width((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_margin((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetMarkupColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_markup_column((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_icon_view_get_model((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetPathAtPos(x int, y int) (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_icon_view_get_path_at_pos((*C.GtkIconView)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IconView) GetPixbufColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_pixbuf_column((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_get_reorderable((*C.GtkIconView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) GetRowSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_row_spacing((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetSelectedItems() (_return_ *C.GList) {
	_return_ = C.gtk_icon_view_get_selected_items((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSelectionMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_icon_view_get_selection_mode((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_spacing((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_text_column((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetTooltipColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_tooltip_column((*C.GtkIconView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IconView) GetVisibleRange() (_go__return__ bool, start_path *TreePath, end_path *TreePath) {
	var _allocated_start_path_ *C.GtkTreePath
	var _allocated_end_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_visible_range((*C.GtkIconView)(_self_), unsafe.Pointer(&_allocated_start_path_), unsafe.Pointer(&_allocated_end_path_))
	start_path = (*TreePath)(unsafe.Pointer(_allocated_start_path_))
	end_path = (*TreePath)(unsafe.Pointer(_allocated_end_path_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) ItemActivated(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_item_activated((*C.GtkIconView)(_self_), _cgo_path_)
	return
}

func (_self_ *IconView) PathIsSelected(path *TreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_path_is_selected((*C.GtkIconView)(_self_), _cgo_path_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *IconView) ScrollToPath(path *TreePath, use_align bool, row_align float64, col_align float64) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_row_align_ := (C.gfloat)(row_align)
	_cgo_col_align_ := (C.gfloat)(col_align)
	_cgo_use_align_ := C.glibfalse()
	if use_align { _cgo_use_align_ = C.glibtrue() }
	C.gtk_icon_view_scroll_to_path((*C.GtkIconView)(_self_), _cgo_path_, _cgo_use_align_, _cgo_row_align_, _cgo_col_align_)
	return
}

func (_self_ *IconView) SelectAll() () {
	C.gtk_icon_view_select_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) SelectPath(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_select_path((*C.GtkIconView)(_self_), _cgo_path_)
	return
}

func (_self_ *IconView) SelectedForeach(func_ C.GtkIconViewForeachFunc, data C.gpointer) () {
	C.gtk_icon_view_selected_foreach((*C.GtkIconView)(_self_), func_, data)
	return
}

func (_self_ *IconView) SetColumnSpacing(column_spacing int) () {
	_cgo_column_spacing_ := (C.gint)(column_spacing)
	C.gtk_icon_view_set_column_spacing((*C.GtkIconView)(_self_), _cgo_column_spacing_)
	return
}

func (_self_ *IconView) SetColumns(columns int) () {
	_cgo_columns_ := (C.gint)(columns)
	C.gtk_icon_view_set_columns((*C.GtkIconView)(_self_), _cgo_columns_)
	return
}

func (_self_ *IconView) SetCursor(path *TreePath, cell *CellRenderer, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	_cgo_start_editing_ := C.glibfalse()
	if start_editing { _cgo_start_editing_ = C.glibtrue() }
	C.gtk_icon_view_set_cursor((*C.GtkIconView)(_self_), _cgo_path_, _cgo_cell_, _cgo_start_editing_)
	return
}

func (_self_ *IconView) SetDragDestItem(path *TreePath, pos C.GtkIconViewDropPosition) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_set_drag_dest_item((*C.GtkIconView)(_self_), _cgo_path_, pos)
	return
}

func (_self_ *IconView) SetItemOrientation(orientation C.GtkOrientation) () {
	C.gtk_icon_view_set_item_orientation((*C.GtkIconView)(_self_), orientation)
	return
}

func (_self_ *IconView) SetItemPadding(item_padding int) () {
	_cgo_item_padding_ := (C.gint)(item_padding)
	C.gtk_icon_view_set_item_padding((*C.GtkIconView)(_self_), _cgo_item_padding_)
	return
}

func (_self_ *IconView) SetItemWidth(item_width int) () {
	_cgo_item_width_ := (C.gint)(item_width)
	C.gtk_icon_view_set_item_width((*C.GtkIconView)(_self_), _cgo_item_width_)
	return
}

func (_self_ *IconView) SetMargin(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_icon_view_set_margin((*C.GtkIconView)(_self_), _cgo_margin_)
	return
}

func (_self_ *IconView) SetMarkupColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_markup_column((*C.GtkIconView)(_self_), _cgo_column_)
	return
}

func (_self_ *IconView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_icon_view_set_model((*C.GtkIconView)(_self_), model)
	return
}

func (_self_ *IconView) SetPixbufColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_pixbuf_column((*C.GtkIconView)(_self_), _cgo_column_)
	return
}

func (_self_ *IconView) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := C.glibfalse()
	if reorderable { _cgo_reorderable_ = C.glibtrue() }
	C.gtk_icon_view_set_reorderable((*C.GtkIconView)(_self_), _cgo_reorderable_)
	return
}

func (_self_ *IconView) SetRowSpacing(row_spacing int) () {
	_cgo_row_spacing_ := (C.gint)(row_spacing)
	C.gtk_icon_view_set_row_spacing((*C.GtkIconView)(_self_), _cgo_row_spacing_)
	return
}

func (_self_ *IconView) SetSelectionMode(mode C.GtkSelectionMode) () {
	C.gtk_icon_view_set_selection_mode((*C.GtkIconView)(_self_), mode)
	return
}

func (_self_ *IconView) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_icon_view_set_spacing((*C.GtkIconView)(_self_), _cgo_spacing_)
	return
}

func (_self_ *IconView) SetTextColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_text_column((*C.GtkIconView)(_self_), _cgo_column_)
	return
}

func (_self_ *IconView) SetTooltipCell(tooltip *Tooltip, path *TreePath, cell *CellRenderer) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(unsafe.Pointer(tooltip))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	C.gtk_icon_view_set_tooltip_cell((*C.GtkIconView)(_self_), _cgo_tooltip_, _cgo_path_, _cgo_cell_)
	return
}

func (_self_ *IconView) SetTooltipColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_tooltip_column((*C.GtkIconView)(_self_), _cgo_column_)
	return
}

func (_self_ *IconView) SetTooltipItem(tooltip *Tooltip, path *TreePath) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(unsafe.Pointer(tooltip))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_set_tooltip_item((*C.GtkIconView)(_self_), _cgo_tooltip_, _cgo_path_)
	return
}

func (_self_ *IconView) UnselectAll() () {
	C.gtk_icon_view_unselect_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnselectPath(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_unselect_path((*C.GtkIconView)(_self_), _cgo_path_)
	return
}

func (_self_ *IconView) UnsetModelDragDest() () {
	C.gtk_icon_view_unset_model_drag_dest((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnsetModelDragSource() () {
	C.gtk_icon_view_unset_model_drag_source((*C.GtkIconView)(_self_))
	return
}

func ImageNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromAnimation(animation *C.GdkPixbufAnimation) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_animation(animation)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromFile(filename string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_image_new_from_file(_cgo_filename_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromGicon(icon *C.GIcon, size C.GtkIconSize) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_gicon(icon, size)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromIconName(icon_name string, size C.GtkIconSize) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_image_new_from_icon_name(_cgo_icon_name_, size)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromIconSet(icon_set *IconSet, size C.GtkIconSize) (_go__return__ *Widget) {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_icon_set(_cgo_icon_set_, size)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_pixbuf(pixbuf)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromResource(resource_path string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_image_new_from_resource(_cgo_resource_path_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageNewFromStock(stock_id string, size C.GtkIconSize) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_image_new_from_stock(_cgo_stock_id_, size)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Image) Clear() () {
	C.gtk_image_clear((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetAnimation() (_return_ *C.GdkPixbufAnimation) {
	_return_ = C.gtk_image_get_animation((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetGicon() (gicon unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_gicon((*C.GtkImage)(_self_), gicon, &size)
	return
}

func (_self_ *Image) GetIconName() (icon_name unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_icon_name((*C.GtkImage)(_self_), icon_name, &size)
	return
}

func (_self_ *Image) GetIconSet() (icon_set *IconSet, size C.GtkIconSize) {
	var _allocated_icon_set_ *C.GtkIconSet
	C._gtk_image_get_icon_set((*C.GtkImage)(_self_), unsafe.Pointer(&_allocated_icon_set_), &size)
	icon_set = (*IconSet)(unsafe.Pointer(_allocated_icon_set_))
	return
}

func (_self_ *Image) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_image_get_pixbuf((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetPixelSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_image_get_pixel_size((*C.GtkImage)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Image) GetStock() (stock_id unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_stock((*C.GtkImage)(_self_), stock_id, &size)
	return
}

func (_self_ *Image) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_image_get_storage_type((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) SetFromAnimation(animation *C.GdkPixbufAnimation) () {
	C.gtk_image_set_from_animation((*C.GtkImage)(_self_), animation)
	return
}

func (_self_ *Image) SetFromFile(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_image_set_from_file((*C.GtkImage)(_self_), _cgo_filename_)
	return
}

func (_self_ *Image) SetFromGicon(icon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_image_set_from_gicon((*C.GtkImage)(_self_), icon, size)
	return
}

func (_self_ *Image) SetFromIconName(icon_name string, size C.GtkIconSize) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_image_set_from_icon_name((*C.GtkImage)(_self_), _cgo_icon_name_, size)
	return
}

func (_self_ *Image) SetFromIconSet(icon_set *IconSet, size C.GtkIconSize) () {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	C.gtk_image_set_from_icon_set((*C.GtkImage)(_self_), _cgo_icon_set_, size)
	return
}

func (_self_ *Image) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_image_set_from_pixbuf((*C.GtkImage)(_self_), pixbuf)
	return
}

func (_self_ *Image) SetFromResource(resource_path string) () {
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	C._gtk_image_set_from_resource((*C.GtkImage)(_self_), _cgo_resource_path_)
	return
}

func (_self_ *Image) SetFromStock(stock_id string, size C.GtkIconSize) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_image_set_from_stock((*C.GtkImage)(_self_), _cgo_stock_id_, size)
	return
}

func (_self_ *Image) SetPixelSize(pixel_size int) () {
	_cgo_pixel_size_ := (C.gint)(pixel_size)
	C.gtk_image_set_pixel_size((*C.GtkImage)(_self_), _cgo_pixel_size_)
	return
}

func ImageMenuItemNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_menu_item_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewFromStock(stock_id string, accel_group *AccelGroup) (_go__return__ *Widget) {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_image_menu_item_new_from_stock(_cgo_stock_id_, _cgo_accel_group_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_image_menu_item_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_image_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ImageMenuItem) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_image_menu_item_get_always_show_image((*C.GtkImageMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ImageMenuItem) GetImage() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_menu_item_get_image((*C.GtkImageMenuItem)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ImageMenuItem) GetUseStock() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_image_menu_item_get_use_stock((*C.GtkImageMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ImageMenuItem) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_image_menu_item_set_accel_group((*C.GtkImageMenuItem)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *ImageMenuItem) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := C.glibfalse()
	if always_show { _cgo_always_show_ = C.glibtrue() }
	C.gtk_image_menu_item_set_always_show_image((*C.GtkImageMenuItem)(_self_), _cgo_always_show_)
	return
}

func (_self_ *ImageMenuItem) SetImage(image *Widget) () {
	_cgo_image_ := (*C.GtkWidget)(unsafe.Pointer(image))
	C.gtk_image_menu_item_set_image((*C.GtkImageMenuItem)(_self_), _cgo_image_)
	return
}

func (_self_ *ImageMenuItem) SetUseStock(use_stock bool) () {
	_cgo_use_stock_ := C.glibfalse()
	if use_stock { _cgo_use_stock_ = C.glibtrue() }
	C.gtk_image_menu_item_set_use_stock((*C.GtkImageMenuItem)(_self_), _cgo_use_stock_)
	return
}

func InfoBarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *InfoBar) AddActionWidget(child *Widget, response_id int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_add_action_widget((*C.GtkInfoBar)(_self_), _cgo_child_, _cgo_response_id_)
	return
}

func (_self_ *InfoBar) AddButton(button_text string, response_id int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_cstring_button_text_ := C.CString(button_text)
	_cgo_button_text_ := (*C.gchar)(unsafe.Pointer(_cstring_button_text_))
	defer C.free(unsafe.Pointer(_cstring_button_text_))
	_return_ = C._gtk_info_bar_add_button((*C.GtkInfoBar)(_self_), _cgo_button_text_, _cgo_response_id_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *InfoBar) GetActionArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_get_action_area((*C.GtkInfoBar)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *InfoBar) GetContentArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_get_content_area((*C.GtkInfoBar)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *InfoBar) GetMessageType() (_return_ C.GtkMessageType) {
	_return_ = C.gtk_info_bar_get_message_type((*C.GtkInfoBar)(_self_))
	return
}

func (_self_ *InfoBar) Response(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_response((*C.GtkInfoBar)(_self_), _cgo_response_id_)
	return
}

func (_self_ *InfoBar) SetDefaultResponse(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_set_default_response((*C.GtkInfoBar)(_self_), _cgo_response_id_)
	return
}

func (_self_ *InfoBar) SetMessageType(message_type C.GtkMessageType) () {
	C.gtk_info_bar_set_message_type((*C.GtkInfoBar)(_self_), message_type)
	return
}

func (_self_ *InfoBar) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_response_id_ := (C.gint)(response_id)
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_info_bar_set_response_sensitive((*C.GtkInfoBar)(_self_), _cgo_response_id_, _cgo_setting_)
	return
}

func InvisibleNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_invisible_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func InvisibleNewForScreen(screen *C.GdkScreen) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_invisible_new_for_screen(screen)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Invisible) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_invisible_get_screen((*C.GtkInvisible)(_self_))
	return
}

func (_self_ *Invisible) SetScreen(screen *C.GdkScreen) () {
	C.gtk_invisible_set_screen((*C.GtkInvisible)(_self_), screen)
	return
}

func LabelNew(str string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	_return_ = C._gtk_label_new(_cgo_str_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func LabelNewWithMnemonic(str string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	_return_ = C._gtk_label_new_with_mnemonic(_cgo_str_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Label) GetAngle() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_label_get_angle((*C.GtkLabel)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Label) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_label_get_attributes((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetCurrentUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_current_uri((*C.GtkLabel)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Label) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_label_get_ellipsize((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetJustify() (_return_ C.GtkJustification) {
	_return_ = C.gtk_label_get_justify((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_label((*C.GtkLabel)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Label) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_label_get_layout((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_label_get_layout_offsets((*C.GtkLabel)(_self_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *Label) GetLineWrap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_line_wrap((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetLineWrapMode() (_return_ C.PangoWrapMode) {
	_return_ = C.gtk_label_get_line_wrap_mode((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetMaxWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_label_get_max_width_chars((*C.GtkLabel)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Label) GetMnemonicKeyval() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_label_get_mnemonic_keyval((*C.GtkLabel)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Label) GetMnemonicWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_label_get_mnemonic_widget((*C.GtkLabel)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Label) GetSelectable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_selectable((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetSelectionBounds() (_go__return__ bool, _go_start_ int, _go_end_ int) {
	var start C.gint
	var end C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_selection_bounds((*C.GtkLabel)(_self_), &start, &end)
	_go_start_ = (int)(start)
	_go_end_ = (int)(end)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetSingleLineMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_single_line_mode((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_text((*C.GtkLabel)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Label) GetTrackVisitedLinks() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_track_visited_links((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetUseMarkup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_use_markup((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_use_underline((*C.GtkLabel)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Label) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_label_get_width_chars((*C.GtkLabel)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Label) SelectRegion(start_offset int, end_offset int) () {
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	C.gtk_label_select_region((*C.GtkLabel)(_self_), _cgo_start_offset_, _cgo_end_offset_)
	return
}

func (_self_ *Label) SetAngle(angle float64) () {
	_cgo_angle_ := (C.gdouble)(angle)
	C.gtk_label_set_angle((*C.GtkLabel)(_self_), _cgo_angle_)
	return
}

func (_self_ *Label) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_label_set_attributes((*C.GtkLabel)(_self_), attrs)
	return
}

func (_self_ *Label) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_label_set_ellipsize((*C.GtkLabel)(_self_), mode)
	return
}

func (_self_ *Label) SetJustify(jtype C.GtkJustification) () {
	C.gtk_label_set_justify((*C.GtkLabel)(_self_), jtype)
	return
}

func (_self_ *Label) SetLabel(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_label((*C.GtkLabel)(_self_), _cgo_str_)
	return
}

func (_self_ *Label) SetLineWrap(wrap bool) () {
	_cgo_wrap_ := C.glibfalse()
	if wrap { _cgo_wrap_ = C.glibtrue() }
	C.gtk_label_set_line_wrap((*C.GtkLabel)(_self_), _cgo_wrap_)
	return
}

func (_self_ *Label) SetLineWrapMode(wrap_mode C.PangoWrapMode) () {
	C.gtk_label_set_line_wrap_mode((*C.GtkLabel)(_self_), wrap_mode)
	return
}

func (_self_ *Label) SetMarkup(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_markup((*C.GtkLabel)(_self_), _cgo_str_)
	return
}

func (_self_ *Label) SetMarkupWithMnemonic(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_markup_with_mnemonic((*C.GtkLabel)(_self_), _cgo_str_)
	return
}

func (_self_ *Label) SetMaxWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_label_set_max_width_chars((*C.GtkLabel)(_self_), _cgo_n_chars_)
	return
}

func (_self_ *Label) SetMnemonicWidget(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_label_set_mnemonic_widget((*C.GtkLabel)(_self_), _cgo_widget_)
	return
}

func (_self_ *Label) SetPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_label_set_pattern((*C.GtkLabel)(_self_), _cgo_pattern_)
	return
}

func (_self_ *Label) SetSelectable(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_label_set_selectable((*C.GtkLabel)(_self_), _cgo_setting_)
	return
}

func (_self_ *Label) SetSingleLineMode(single_line_mode bool) () {
	_cgo_single_line_mode_ := C.glibfalse()
	if single_line_mode { _cgo_single_line_mode_ = C.glibtrue() }
	C.gtk_label_set_single_line_mode((*C.GtkLabel)(_self_), _cgo_single_line_mode_)
	return
}

func (_self_ *Label) SetText(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_text((*C.GtkLabel)(_self_), _cgo_str_)
	return
}

func (_self_ *Label) SetTextWithMnemonic(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_text_with_mnemonic((*C.GtkLabel)(_self_), _cgo_str_)
	return
}

func (_self_ *Label) SetTrackVisitedLinks(track_links bool) () {
	_cgo_track_links_ := C.glibfalse()
	if track_links { _cgo_track_links_ = C.glibtrue() }
	C.gtk_label_set_track_visited_links((*C.GtkLabel)(_self_), _cgo_track_links_)
	return
}

func (_self_ *Label) SetUseMarkup(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_label_set_use_markup((*C.GtkLabel)(_self_), _cgo_setting_)
	return
}

func (_self_ *Label) SetUseUnderline(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_label_set_use_underline((*C.GtkLabel)(_self_), _cgo_setting_)
	return
}

func (_self_ *Label) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_label_set_width_chars((*C.GtkLabel)(_self_), _cgo_n_chars_)
	return
}

func LayoutNew(hadjustment *Adjustment, vadjustment *Adjustment) (_go__return__ *Widget) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(hadjustment))
	_cgo_vadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(vadjustment))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_layout_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Layout) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_layout_get_bin_window((*C.GtkLayout)(_self_))
	return
}

func (_self_ *Layout) GetSize() (_go_width_ uint, _go_height_ uint) {
	var width C.guint
	var height C.guint
	C.gtk_layout_get_size((*C.GtkLayout)(_self_), &width, &height)
	_go_width_ = (uint)(width)
	_go_height_ = (uint)(height)
	return
}

func (_self_ *Layout) Move(child_widget *Widget, x int, y int) () {
	_cgo_child_widget_ := (*C.GtkWidget)(unsafe.Pointer(child_widget))
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_layout_move((*C.GtkLayout)(_self_), _cgo_child_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *Layout) Put(child_widget *Widget, x int, y int) () {
	_cgo_child_widget_ := (*C.GtkWidget)(unsafe.Pointer(child_widget))
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_layout_put((*C.GtkLayout)(_self_), _cgo_child_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *Layout) SetSize(width uint, height uint) () {
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	C.gtk_layout_set_size((*C.GtkLayout)(_self_), _cgo_width_, _cgo_height_)
	return
}

func LevelBarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_level_bar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func LevelBarNewForInterval(min_value float64, max_value float64) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_min_value_ := (C.gdouble)(min_value)
	_cgo_max_value_ := (C.gdouble)(max_value)
	_return_ = C.gtk_level_bar_new_for_interval(_cgo_min_value_, _cgo_max_value_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *LevelBar) AddOffsetValue(name string, value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_level_bar_add_offset_value((*C.GtkLevelBar)(_self_), _cgo_name_, _cgo_value_)
	return
}

func (_self_ *LevelBar) GetMaxValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_max_value((*C.GtkLevelBar)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *LevelBar) GetMinValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_min_value((*C.GtkLevelBar)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *LevelBar) GetMode() (_return_ C.GtkLevelBarMode) {
	_return_ = C.gtk_level_bar_get_mode((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) GetOffsetValue(name string) (_go__return__ bool, _go_value_ float64) {
	var value C.gdouble
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_level_bar_get_offset_value((*C.GtkLevelBar)(_self_), _cgo_name_, &value)
	_go_value_ = (float64)(value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *LevelBar) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_value((*C.GtkLevelBar)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *LevelBar) RemoveOffsetValue(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_level_bar_remove_offset_value((*C.GtkLevelBar)(_self_), _cgo_name_)
	return
}

func (_self_ *LevelBar) SetMaxValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_max_value((*C.GtkLevelBar)(_self_), _cgo_value_)
	return
}

func (_self_ *LevelBar) SetMinValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_min_value((*C.GtkLevelBar)(_self_), _cgo_value_)
	return
}

func (_self_ *LevelBar) SetMode(mode C.GtkLevelBarMode) () {
	C.gtk_level_bar_set_mode((*C.GtkLevelBar)(_self_), mode)
	return
}

func (_self_ *LevelBar) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_value((*C.GtkLevelBar)(_self_), _cgo_value_)
	return
}

func LinkButtonNew(uri string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._gtk_link_button_new(_cgo_uri_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func LinkButtonNewWithLabel(uri string, label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_link_button_new_with_label(_cgo_uri_, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *LinkButton) GetUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_link_button_get_uri((*C.GtkLinkButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *LinkButton) GetVisited() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_link_button_get_visited((*C.GtkLinkButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *LinkButton) SetUri(uri string) () {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	C._gtk_link_button_set_uri((*C.GtkLinkButton)(_self_), _cgo_uri_)
	return
}

func (_self_ *LinkButton) SetVisited(visited bool) () {
	_cgo_visited_ := C.glibfalse()
	if visited { _cgo_visited_ = C.glibtrue() }
	C.gtk_link_button_set_visited((*C.GtkLinkButton)(_self_), _cgo_visited_)
	return
}

func (_self_ *ListStore) Append() (iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_append((*C.GtkListStore)(_self_), &_allocated_iter_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *ListStore) Clear() () {
	C.gtk_list_store_clear((*C.GtkListStore)(_self_))
	return
}

func (_self_ *ListStore) Insert(position int) (iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	_cgo_position_ := (C.gint)(position)
	C.gtk_list_store_insert((*C.GtkListStore)(_self_), &_allocated_iter_, _cgo_position_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *ListStore) InsertAfter(sibling *TreeIter) (iter *TreeIter) {
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_insert_after((*C.GtkListStore)(_self_), &_allocated_iter_, _cgo_sibling_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *ListStore) InsertBefore(sibling *TreeIter) (iter *TreeIter) {
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_insert_before((*C.GtkListStore)(_self_), &_allocated_iter_, _cgo_sibling_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *ListStore) IterIsValid(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_list_store_iter_is_valid((*C.GtkListStore)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ListStore) MoveAfter(iter *TreeIter, position *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_list_store_move_after((*C.GtkListStore)(_self_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *ListStore) MoveBefore(iter *TreeIter, position *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_list_store_move_before((*C.GtkListStore)(_self_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *ListStore) Prepend() (iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_prepend((*C.GtkListStore)(_self_), &_allocated_iter_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *ListStore) Remove(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_list_store_remove((*C.GtkListStore)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ListStore) SetValue(iter *TreeIter, column int, value *C.GValue) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_column_ := (C.gint)(column)
	C.gtk_list_store_set_value((*C.GtkListStore)(_self_), _cgo_iter_, _cgo_column_, value)
	return
}

func (_self_ *ListStore) Swap(a *TreeIter, b *TreeIter) () {
	_cgo_a_ := (*C.GtkTreeIter)(unsafe.Pointer(a))
	_cgo_b_ := (*C.GtkTreeIter)(unsafe.Pointer(b))
	C.gtk_list_store_swap((*C.GtkListStore)(_self_), _cgo_a_, _cgo_b_)
	return
}

func LockButtonNew(permission *C.GPermission) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_lock_button_new(permission)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *LockButton) GetPermission() (_return_ *C.GPermission) {
	_return_ = C.gtk_lock_button_get_permission((*C.GtkLockButton)(_self_))
	return
}

func (_self_ *LockButton) SetPermission(permission *C.GPermission) () {
	C.gtk_lock_button_set_permission((*C.GtkLockButton)(_self_), permission)
	return
}

func MenuNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func MenuNewFromModel(model *C.GMenuModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_new_from_model(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func MenuGetForAttachWidget(widget *Widget) (_return_ *C.GList) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_return_ = C.gtk_menu_get_for_attach_widget(_cgo_widget_)
	return
}

func (_self_ *Menu) Attach(child *Widget, left_attach uint, right_attach uint, top_attach uint, bottom_attach uint) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_left_attach_ := (C.guint)(left_attach)
	_cgo_right_attach_ := (C.guint)(right_attach)
	_cgo_top_attach_ := (C.guint)(top_attach)
	_cgo_bottom_attach_ := (C.guint)(bottom_attach)
	C.gtk_menu_attach((*C.GtkMenu)(_self_), _cgo_child_, _cgo_left_attach_, _cgo_right_attach_, _cgo_top_attach_, _cgo_bottom_attach_)
	return
}

func (_self_ *Menu) AttachToWidget(attach_widget *Widget, detacher C.GtkMenuDetachFunc) () {
	_cgo_attach_widget_ := (*C.GtkWidget)(unsafe.Pointer(attach_widget))
	C.gtk_menu_attach_to_widget((*C.GtkMenu)(_self_), _cgo_attach_widget_, detacher)
	return
}

func (_self_ *Menu) Detach() () {
	C.gtk_menu_detach((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetAccelGroup() (_go__return__ *AccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_menu_get_accel_group((*C.GtkMenu)(_self_))
	_go__return__ = (*AccelGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Menu) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_get_accel_path((*C.GtkMenu)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Menu) GetActive() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_get_active((*C.GtkMenu)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Menu) GetAttachWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_get_attach_widget((*C.GtkMenu)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Menu) GetMonitor() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_menu_get_monitor((*C.GtkMenu)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Menu) GetReserveToggleSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_get_reserve_toggle_size((*C.GtkMenu)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Menu) GetTearoffState() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_get_tearoff_state((*C.GtkMenu)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Menu) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_get_title((*C.GtkMenu)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Menu) Popdown() () {
	C.gtk_menu_popdown((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) Popup(parent_menu_shell *Widget, parent_menu_item *Widget, func_ C.GtkMenuPositionFunc, data C.gpointer, button uint, activate_time uint32) () {
	_cgo_parent_menu_shell_ := (*C.GtkWidget)(unsafe.Pointer(parent_menu_shell))
	_cgo_parent_menu_item_ := (*C.GtkWidget)(unsafe.Pointer(parent_menu_item))
	_cgo_button_ := (C.guint)(button)
	_cgo_activate_time_ := (C.guint32)(activate_time)
	C.gtk_menu_popup((*C.GtkMenu)(_self_), _cgo_parent_menu_shell_, _cgo_parent_menu_item_, func_, data, _cgo_button_, _cgo_activate_time_)
	return
}

func (_self_ *Menu) PopupForDevice(device *C.GdkDevice, parent_menu_shell *Widget, parent_menu_item *Widget, func_ C.GtkMenuPositionFunc, data C.gpointer, destroy C.GDestroyNotify, button uint, activate_time uint32) () {
	_cgo_parent_menu_shell_ := (*C.GtkWidget)(unsafe.Pointer(parent_menu_shell))
	_cgo_parent_menu_item_ := (*C.GtkWidget)(unsafe.Pointer(parent_menu_item))
	_cgo_button_ := (C.guint)(button)
	_cgo_activate_time_ := (C.guint32)(activate_time)
	C.gtk_menu_popup_for_device((*C.GtkMenu)(_self_), device, _cgo_parent_menu_shell_, _cgo_parent_menu_item_, func_, data, destroy, _cgo_button_, _cgo_activate_time_)
	return
}

func (_self_ *Menu) ReorderChild(child *Widget, position int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_position_ := (C.gint)(position)
	C.gtk_menu_reorder_child((*C.GtkMenu)(_self_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *Menu) Reposition() () {
	C.gtk_menu_reposition((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_menu_set_accel_group((*C.GtkMenu)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *Menu) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_menu_set_accel_path((*C.GtkMenu)(_self_), _cgo_accel_path_)
	return
}

func (_self_ *Menu) SetActive(index uint) () {
	_cgo_index_ := (C.guint)(index)
	C.gtk_menu_set_active((*C.GtkMenu)(_self_), _cgo_index_)
	return
}

func (_self_ *Menu) SetMonitor(monitor_num int) () {
	_cgo_monitor_num_ := (C.gint)(monitor_num)
	C.gtk_menu_set_monitor((*C.GtkMenu)(_self_), _cgo_monitor_num_)
	return
}

func (_self_ *Menu) SetReserveToggleSize(reserve_toggle_size bool) () {
	_cgo_reserve_toggle_size_ := C.glibfalse()
	if reserve_toggle_size { _cgo_reserve_toggle_size_ = C.glibtrue() }
	C.gtk_menu_set_reserve_toggle_size((*C.GtkMenu)(_self_), _cgo_reserve_toggle_size_)
	return
}

func (_self_ *Menu) SetScreen(screen *C.GdkScreen) () {
	C.gtk_menu_set_screen((*C.GtkMenu)(_self_), screen)
	return
}

func (_self_ *Menu) SetTearoffState(torn_off bool) () {
	_cgo_torn_off_ := C.glibfalse()
	if torn_off { _cgo_torn_off_ = C.glibtrue() }
	C.gtk_menu_set_tearoff_state((*C.GtkMenu)(_self_), _cgo_torn_off_)
	return
}

func (_self_ *Menu) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_menu_set_title((*C.GtkMenu)(_self_), _cgo_title_)
	return
}

func MenuBarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_bar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func MenuBarNewFromModel(model *C.GMenuModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_bar_new_from_model(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuBar) GetChildPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_child_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) GetPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) SetChildPackDirection(child_pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_child_pack_direction((*C.GtkMenuBar)(_self_), child_pack_dir)
	return
}

func (_self_ *MenuBar) SetPackDirection(pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_pack_direction((*C.GtkMenuBar)(_self_), pack_dir)
	return
}

func MenuButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuButton) GetAlignWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_button_get_align_widget((*C.GtkMenuButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuButton) GetDirection() (_return_ C.GtkArrowType) {
	_return_ = C.gtk_menu_button_get_direction((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetMenuModel() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_menu_button_get_menu_model((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetPopup() (_go__return__ *Menu) {
	var _return_ *C.GtkMenu
	_return_ = C.gtk_menu_button_get_popup((*C.GtkMenuButton)(_self_))
	_go__return__ = (*Menu)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuButton) SetAlignWidget(align_widget *Widget) () {
	_cgo_align_widget_ := (*C.GtkWidget)(unsafe.Pointer(align_widget))
	C.gtk_menu_button_set_align_widget((*C.GtkMenuButton)(_self_), _cgo_align_widget_)
	return
}

func (_self_ *MenuButton) SetDirection(direction C.GtkArrowType) () {
	C.gtk_menu_button_set_direction((*C.GtkMenuButton)(_self_), direction)
	return
}

func (_self_ *MenuButton) SetMenuModel(menu_model *C.GMenuModel) () {
	C.gtk_menu_button_set_menu_model((*C.GtkMenuButton)(_self_), menu_model)
	return
}

func (_self_ *MenuButton) SetPopup(popup *Widget) () {
	_cgo_popup_ := (*C.GtkWidget)(unsafe.Pointer(popup))
	C.gtk_menu_button_set_popup((*C.GtkMenuButton)(_self_), _cgo_popup_)
	return
}

func MenuItemNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_item_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func MenuItemNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_item_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func MenuItemNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuItem) Activate() () {
	C.gtk_menu_item_activate((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) Deselect() () {
	C.gtk_menu_item_deselect((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_item_get_accel_path((*C.GtkMenuItem)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *MenuItem) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_item_get_label((*C.GtkMenuItem)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *MenuItem) GetReserveIndicator() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_item_get_reserve_indicator((*C.GtkMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *MenuItem) GetSubmenu() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_item_get_submenu((*C.GtkMenuItem)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuItem) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_item_get_use_underline((*C.GtkMenuItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *MenuItem) Select() () {
	C.gtk_menu_item_select((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_menu_item_set_accel_path((*C.GtkMenuItem)(_self_), _cgo_accel_path_)
	return
}

func (_self_ *MenuItem) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_menu_item_set_label((*C.GtkMenuItem)(_self_), _cgo_label_)
	return
}

func (_self_ *MenuItem) SetReserveIndicator(reserve bool) () {
	_cgo_reserve_ := C.glibfalse()
	if reserve { _cgo_reserve_ = C.glibtrue() }
	C.gtk_menu_item_set_reserve_indicator((*C.GtkMenuItem)(_self_), _cgo_reserve_)
	return
}

func (_self_ *MenuItem) SetSubmenu(submenu *Widget) () {
	_cgo_submenu_ := (*C.GtkWidget)(unsafe.Pointer(submenu))
	C.gtk_menu_item_set_submenu((*C.GtkMenuItem)(_self_), _cgo_submenu_)
	return
}

func (_self_ *MenuItem) SetUseUnderline(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_menu_item_set_use_underline((*C.GtkMenuItem)(_self_), _cgo_setting_)
	return
}

func (_self_ *MenuItem) ToggleSizeAllocate(allocation int) () {
	_cgo_allocation_ := (C.gint)(allocation)
	C.gtk_menu_item_toggle_size_allocate((*C.GtkMenuItem)(_self_), _cgo_allocation_)
	return
}

func (_self_ *MenuItem) ToggleSizeRequest(requisition *C.gint) () {
	C.gtk_menu_item_toggle_size_request((*C.GtkMenuItem)(_self_), requisition)
	return
}

func (_self_ *MenuShell) ActivateItem(menu_item *Widget, force_deactivate bool) () {
	_cgo_menu_item_ := (*C.GtkWidget)(unsafe.Pointer(menu_item))
	_cgo_force_deactivate_ := C.glibfalse()
	if force_deactivate { _cgo_force_deactivate_ = C.glibtrue() }
	C.gtk_menu_shell_activate_item((*C.GtkMenuShell)(_self_), _cgo_menu_item_, _cgo_force_deactivate_)
	return
}

func (_self_ *MenuShell) Append(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_menu_shell_append((*C.GtkMenuShell)(_self_), _cgo_child_)
	return
}

func (_self_ *MenuShell) BindModel(model *C.GMenuModel, action_namespace string, with_separators bool) () {
	_cstring_action_namespace_ := C.CString(action_namespace)
	_cgo_action_namespace_ := (*C.gchar)(unsafe.Pointer(_cstring_action_namespace_))
	defer C.free(unsafe.Pointer(_cstring_action_namespace_))
	_cgo_with_separators_ := C.glibfalse()
	if with_separators { _cgo_with_separators_ = C.glibtrue() }
	C._gtk_menu_shell_bind_model((*C.GtkMenuShell)(_self_), model, _cgo_action_namespace_, _cgo_with_separators_)
	return
}

func (_self_ *MenuShell) Cancel() () {
	C.gtk_menu_shell_cancel((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deactivate() () {
	C.gtk_menu_shell_deactivate((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deselect() () {
	C.gtk_menu_shell_deselect((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) GetParentShell() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_shell_get_parent_shell((*C.GtkMenuShell)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuShell) GetSelectedItem() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_shell_get_selected_item((*C.GtkMenuShell)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuShell) GetTakeFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_shell_get_take_focus((*C.GtkMenuShell)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *MenuShell) Insert(child *Widget, position int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_position_ := (C.gint)(position)
	C.gtk_menu_shell_insert((*C.GtkMenuShell)(_self_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *MenuShell) Prepend(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_menu_shell_prepend((*C.GtkMenuShell)(_self_), _cgo_child_)
	return
}

func (_self_ *MenuShell) SelectFirst(search_sensitive bool) () {
	_cgo_search_sensitive_ := C.glibfalse()
	if search_sensitive { _cgo_search_sensitive_ = C.glibtrue() }
	C.gtk_menu_shell_select_first((*C.GtkMenuShell)(_self_), _cgo_search_sensitive_)
	return
}

func (_self_ *MenuShell) SelectItem(menu_item *Widget) () {
	_cgo_menu_item_ := (*C.GtkWidget)(unsafe.Pointer(menu_item))
	C.gtk_menu_shell_select_item((*C.GtkMenuShell)(_self_), _cgo_menu_item_)
	return
}

func (_self_ *MenuShell) SetTakeFocus(take_focus bool) () {
	_cgo_take_focus_ := C.glibfalse()
	if take_focus { _cgo_take_focus_ = C.glibtrue() }
	C.gtk_menu_shell_set_take_focus((*C.GtkMenuShell)(_self_), _cgo_take_focus_)
	return
}

func MenuToolButtonNew(icon_widget *Widget, label string) (_go__return__ *ToolItem) {
	_cgo_icon_widget_ := (*C.GtkWidget)(unsafe.Pointer(icon_widget))
	var _return_ *C.GtkToolItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_tool_button_new(_cgo_icon_widget_, _cgo_label_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func MenuToolButtonNewFromStock(stock_id string) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_menu_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuToolButton) GetMenu() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_tool_button_get_menu((*C.GtkMenuToolButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_menu_tool_button_set_arrow_tooltip_markup((*C.GtkMenuToolButton)(_self_), _cgo_markup_)
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_menu_tool_button_set_arrow_tooltip_text((*C.GtkMenuToolButton)(_self_), _cgo_text_)
	return
}

func (_self_ *MenuToolButton) SetMenu(menu *Widget) () {
	_cgo_menu_ := (*C.GtkWidget)(unsafe.Pointer(menu))
	C.gtk_menu_tool_button_set_menu((*C.GtkMenuToolButton)(_self_), _cgo_menu_)
	return
}

func (_self_ *MessageDialog) GetImage() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_message_dialog_get_image((*C.GtkMessageDialog)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MessageDialog) GetMessageArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_message_dialog_get_message_area((*C.GtkMessageDialog)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MessageDialog) SetImage(image *Widget) () {
	_cgo_image_ := (*C.GtkWidget)(unsafe.Pointer(image))
	C.gtk_message_dialog_set_image((*C.GtkMessageDialog)(_self_), _cgo_image_)
	return
}

func (_self_ *MessageDialog) SetMarkup(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_message_dialog_set_markup((*C.GtkMessageDialog)(_self_), _cgo_str_)
	return
}

func (_self_ *Misc) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_misc_get_alignment((*C.GtkMisc)(_self_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *Misc) GetPadding() (_go_xpad_ int, _go_ypad_ int) {
	var xpad C.gint
	var ypad C.gint
	C.gtk_misc_get_padding((*C.GtkMisc)(_self_), &xpad, &ypad)
	_go_xpad_ = (int)(xpad)
	_go_ypad_ = (int)(ypad)
	return
}

func (_self_ *Misc) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_misc_set_alignment((*C.GtkMisc)(_self_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *Misc) SetPadding(xpad int, ypad int) () {
	_cgo_xpad_ := (C.gint)(xpad)
	_cgo_ypad_ := (C.gint)(ypad)
	C.gtk_misc_set_padding((*C.GtkMisc)(_self_), _cgo_xpad_, _cgo_ypad_)
	return
}

func MountOperationNew(parent *Window) (_return_ *C.GMountOperation) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	_return_ = C.gtk_mount_operation_new(_cgo_parent_)
	return
}

func (_self_ *MountOperation) GetParent() (_go__return__ *Window) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_mount_operation_get_parent((*C.GtkMountOperation)(_self_))
	_go__return__ = (*Window)(unsafe.Pointer(_return_))
	return
}

func (_self_ *MountOperation) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_mount_operation_get_screen((*C.GtkMountOperation)(_self_))
	return
}

func (_self_ *MountOperation) IsShowing() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_mount_operation_is_showing((*C.GtkMountOperation)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *MountOperation) SetParent(parent *Window) () {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	C.gtk_mount_operation_set_parent((*C.GtkMountOperation)(_self_), _cgo_parent_)
	return
}

func (_self_ *MountOperation) SetScreen(screen *C.GdkScreen) () {
	C.gtk_mount_operation_set_screen((*C.GtkMountOperation)(_self_), screen)
	return
}

func NotebookNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Notebook) AppendPage(child *Widget, tab_label *Widget) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	var _return_ C.gint
	_return_ = C.gtk_notebook_append_page((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) AppendPageMenu(child *Widget, tab_label *Widget, menu_label *Widget) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	_cgo_menu_label_ := (*C.GtkWidget)(unsafe.Pointer(menu_label))
	var _return_ C.gint
	_return_ = C.gtk_notebook_append_page_menu((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) GetActionWidget(pack_type C.GtkPackType) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_action_widget((*C.GtkNotebook)(_self_), pack_type)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Notebook) GetCurrentPage() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_notebook_get_current_page((*C.GtkNotebook)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) GetGroupName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_group_name((*C.GtkNotebook)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Notebook) GetMenuLabel(child *Widget) (_go__return__ *Widget) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_menu_label((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Notebook) GetMenuLabelText(child *Widget) (_go__return__ string) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_menu_label_text((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Notebook) GetNPages() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_notebook_get_n_pages((*C.GtkNotebook)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) GetNthPage(page_num int) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_page_num_ := (C.gint)(page_num)
	_return_ = C.gtk_notebook_get_nth_page((*C.GtkNotebook)(_self_), _cgo_page_num_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Notebook) GetScrollable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_scrollable((*C.GtkNotebook)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetShowBorder() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_show_border((*C.GtkNotebook)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetShowTabs() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_show_tabs((*C.GtkNotebook)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetTabDetachable(child *Widget) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_tab_detachable((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetTabLabel(child *Widget) (_go__return__ *Widget) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_tab_label((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Notebook) GetTabLabelText(child *Widget) (_go__return__ string) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_tab_label_text((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Notebook) GetTabPos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_notebook_get_tab_pos((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetTabReorderable(child *Widget) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_tab_reorderable((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Notebook) InsertPage(child *Widget, tab_label *Widget, position int) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_notebook_insert_page((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) InsertPageMenu(child *Widget, tab_label *Widget, menu_label *Widget, position int) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	_cgo_menu_label_ := (*C.GtkWidget)(unsafe.Pointer(menu_label))
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_notebook_insert_page_menu((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) NextPage() () {
	C.gtk_notebook_next_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PageNum(child *Widget) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	var _return_ C.gint
	_return_ = C.gtk_notebook_page_num((*C.GtkNotebook)(_self_), _cgo_child_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) PopupDisable() () {
	C.gtk_notebook_popup_disable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PopupEnable() () {
	C.gtk_notebook_popup_enable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PrependPage(child *Widget, tab_label *Widget) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	var _return_ C.gint
	_return_ = C.gtk_notebook_prepend_page((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) PrependPageMenu(child *Widget, tab_label *Widget, menu_label *Widget) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	_cgo_menu_label_ := (*C.GtkWidget)(unsafe.Pointer(menu_label))
	var _return_ C.gint
	_return_ = C.gtk_notebook_prepend_page_menu((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Notebook) PrevPage() () {
	C.gtk_notebook_prev_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) RemovePage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_notebook_remove_page((*C.GtkNotebook)(_self_), _cgo_page_num_)
	return
}

func (_self_ *Notebook) ReorderChild(child *Widget, position int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_position_ := (C.gint)(position)
	C.gtk_notebook_reorder_child((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *Notebook) SetActionWidget(widget *Widget, pack_type C.GtkPackType) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_notebook_set_action_widget((*C.GtkNotebook)(_self_), _cgo_widget_, pack_type)
	return
}

func (_self_ *Notebook) SetCurrentPage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_notebook_set_current_page((*C.GtkNotebook)(_self_), _cgo_page_num_)
	return
}

func (_self_ *Notebook) SetGroupName(group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_notebook_set_group_name((*C.GtkNotebook)(_self_), _cgo_group_name_)
	return
}

func (_self_ *Notebook) SetMenuLabel(child *Widget, menu_label *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_menu_label_ := (*C.GtkWidget)(unsafe.Pointer(menu_label))
	C.gtk_notebook_set_menu_label((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_menu_label_)
	return
}

func (_self_ *Notebook) SetMenuLabelText(child *Widget, menu_text string) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cstring_menu_text_ := C.CString(menu_text)
	_cgo_menu_text_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_text_))
	defer C.free(unsafe.Pointer(_cstring_menu_text_))
	C._gtk_notebook_set_menu_label_text((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_menu_text_)
	return
}

func (_self_ *Notebook) SetScrollable(scrollable bool) () {
	_cgo_scrollable_ := C.glibfalse()
	if scrollable { _cgo_scrollable_ = C.glibtrue() }
	C.gtk_notebook_set_scrollable((*C.GtkNotebook)(_self_), _cgo_scrollable_)
	return
}

func (_self_ *Notebook) SetShowBorder(show_border bool) () {
	_cgo_show_border_ := C.glibfalse()
	if show_border { _cgo_show_border_ = C.glibtrue() }
	C.gtk_notebook_set_show_border((*C.GtkNotebook)(_self_), _cgo_show_border_)
	return
}

func (_self_ *Notebook) SetShowTabs(show_tabs bool) () {
	_cgo_show_tabs_ := C.glibfalse()
	if show_tabs { _cgo_show_tabs_ = C.glibtrue() }
	C.gtk_notebook_set_show_tabs((*C.GtkNotebook)(_self_), _cgo_show_tabs_)
	return
}

func (_self_ *Notebook) SetTabDetachable(child *Widget, detachable bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_detachable_ := C.glibfalse()
	if detachable { _cgo_detachable_ = C.glibtrue() }
	C.gtk_notebook_set_tab_detachable((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_detachable_)
	return
}

func (_self_ *Notebook) SetTabLabel(child *Widget, tab_label *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_tab_label_ := (*C.GtkWidget)(unsafe.Pointer(tab_label))
	C.gtk_notebook_set_tab_label((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_label_)
	return
}

func (_self_ *Notebook) SetTabLabelText(child *Widget, tab_text string) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cstring_tab_text_ := C.CString(tab_text)
	_cgo_tab_text_ := (*C.gchar)(unsafe.Pointer(_cstring_tab_text_))
	defer C.free(unsafe.Pointer(_cstring_tab_text_))
	C._gtk_notebook_set_tab_label_text((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_tab_text_)
	return
}

func (_self_ *Notebook) SetTabPos(pos C.GtkPositionType) () {
	C.gtk_notebook_set_tab_pos((*C.GtkNotebook)(_self_), pos)
	return
}

func (_self_ *Notebook) SetTabReorderable(child *Widget, reorderable bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_reorderable_ := C.glibfalse()
	if reorderable { _cgo_reorderable_ = C.glibtrue() }
	C.gtk_notebook_set_tab_reorderable((*C.GtkNotebook)(_self_), _cgo_child_, _cgo_reorderable_)
	return
}

func NumerableIconNew(base_icon *C.GIcon) (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_new(base_icon)
	return
}

func NumerableIconNewWithStyleContext(base_icon *C.GIcon, context *StyleContext) (_return_ *C.GIcon) {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_return_ = C.gtk_numerable_icon_new_with_style_context(base_icon, _cgo_context_)
	return
}

func (_self_ *NumerableIcon) GetBackgroundGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_get_background_gicon((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetBackgroundIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_numerable_icon_get_background_icon_name((*C.GtkNumerableIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NumerableIcon) GetCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_numerable_icon_get_count((*C.GtkNumerableIcon)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *NumerableIcon) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_numerable_icon_get_label((*C.GtkNumerableIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NumerableIcon) GetStyleContext() (_go__return__ *StyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_numerable_icon_get_style_context((*C.GtkNumerableIcon)(_self_))
	_go__return__ = (*StyleContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *NumerableIcon) SetBackgroundGicon(icon *C.GIcon) () {
	C.gtk_numerable_icon_set_background_gicon((*C.GtkNumerableIcon)(_self_), icon)
	return
}

func (_self_ *NumerableIcon) SetBackgroundIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_numerable_icon_set_background_icon_name((*C.GtkNumerableIcon)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *NumerableIcon) SetCount(count int) () {
	_cgo_count_ := (C.gint)(count)
	C.gtk_numerable_icon_set_count((*C.GtkNumerableIcon)(_self_), _cgo_count_)
	return
}

func (_self_ *NumerableIcon) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_numerable_icon_set_label((*C.GtkNumerableIcon)(_self_), _cgo_label_)
	return
}

func (_self_ *NumerableIcon) SetStyleContext(style *StyleContext) () {
	_cgo_style_ := (*C.GtkStyleContext)(unsafe.Pointer(style))
	C.gtk_numerable_icon_set_style_context((*C.GtkNumerableIcon)(_self_), _cgo_style_)
	return
}

func OffscreenWindowNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_offscreen_window_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *OffscreenWindow) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_offscreen_window_get_pixbuf((*C.GtkOffscreenWindow)(_self_))
	return
}

func (_self_ *OffscreenWindow) GetSurface() (_return_ *C.cairo_surface_t) {
	_return_ = C.gtk_offscreen_window_get_surface((*C.GtkOffscreenWindow)(_self_))
	return
}

func OverlayNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_overlay_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Overlay) AddOverlay(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_overlay_add_overlay((*C.GtkOverlay)(_self_), _cgo_widget_)
	return
}

func PageSetupNew() (_go__return__ *PageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_page_setup_new()
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func PageSetupNewFromFile(file_name string) (_go__return__ *PageSetup, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPageSetup
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	_return_ = C._gtk_page_setup_new_from_file(_cgo_file_name_, _error_)
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func PageSetupNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ *PageSetup, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPageSetup
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_page_setup_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PageSetup) Copy() (_go__return__ *PageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_page_setup_copy((*C.GtkPageSetup)(_self_))
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PageSetup) GetBottomMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_bottom_margin((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetLeftMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_left_margin((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_page_setup_get_orientation((*C.GtkPageSetup)(_self_))
	return
}

func (_self_ *PageSetup) GetPageHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_page_height((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetPageWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_page_width((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetPaperHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_paper_height((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetPaperSize() (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_page_setup_get_paper_size((*C.GtkPageSetup)(_self_))
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PageSetup) GetPaperWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_paper_width((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetRightMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_right_margin((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) GetTopMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_top_margin((*C.GtkPageSetup)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageSetup) LoadFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.char)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_load_file((*C.GtkPageSetup)(_self_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PageSetup) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_load_key_file((*C.GtkPageSetup)(_self_), key_file, _cgo_group_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PageSetup) SetBottomMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_bottom_margin((*C.GtkPageSetup)(_self_), _cgo_margin_, unit)
	return
}

func (_self_ *PageSetup) SetLeftMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_left_margin((*C.GtkPageSetup)(_self_), _cgo_margin_, unit)
	return
}

func (_self_ *PageSetup) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_page_setup_set_orientation((*C.GtkPageSetup)(_self_), orientation)
	return
}

func (_self_ *PageSetup) SetPaperSize(size *PaperSize) () {
	_cgo_size_ := (*C.GtkPaperSize)(unsafe.Pointer(size))
	C.gtk_page_setup_set_paper_size((*C.GtkPageSetup)(_self_), _cgo_size_)
	return
}

func (_self_ *PageSetup) SetPaperSizeAndDefaultMargins(size *PaperSize) () {
	_cgo_size_ := (*C.GtkPaperSize)(unsafe.Pointer(size))
	C.gtk_page_setup_set_paper_size_and_default_margins((*C.GtkPageSetup)(_self_), _cgo_size_)
	return
}

func (_self_ *PageSetup) SetRightMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_right_margin((*C.GtkPageSetup)(_self_), _cgo_margin_, unit)
	return
}

func (_self_ *PageSetup) SetTopMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_top_margin((*C.GtkPageSetup)(_self_), _cgo_margin_, unit)
	return
}

func (_self_ *PageSetup) ToFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.char)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_to_file((*C.GtkPageSetup)(_self_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PageSetup) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_page_setup_to_key_file((*C.GtkPageSetup)(_self_), key_file, _cgo_group_name_)
	return
}

func PanedNew(orientation C.GtkOrientation) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_new(orientation)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Paned) Add1(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_paned_add1((*C.GtkPaned)(_self_), _cgo_child_)
	return
}

func (_self_ *Paned) Add2(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_paned_add2((*C.GtkPaned)(_self_), _cgo_child_)
	return
}

func (_self_ *Paned) GetChild1() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_get_child1((*C.GtkPaned)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Paned) GetChild2() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_get_child2((*C.GtkPaned)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Paned) GetHandleWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_paned_get_handle_window((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) GetPosition() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_paned_get_position((*C.GtkPaned)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Paned) Pack1(child *Widget, resize bool, shrink bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_resize_ := C.glibfalse()
	if resize { _cgo_resize_ = C.glibtrue() }
	_cgo_shrink_ := C.glibfalse()
	if shrink { _cgo_shrink_ = C.glibtrue() }
	C.gtk_paned_pack1((*C.GtkPaned)(_self_), _cgo_child_, _cgo_resize_, _cgo_shrink_)
	return
}

func (_self_ *Paned) Pack2(child *Widget, resize bool, shrink bool) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_resize_ := C.glibfalse()
	if resize { _cgo_resize_ = C.glibtrue() }
	_cgo_shrink_ := C.glibfalse()
	if shrink { _cgo_shrink_ = C.glibtrue() }
	C.gtk_paned_pack2((*C.GtkPaned)(_self_), _cgo_child_, _cgo_resize_, _cgo_shrink_)
	return
}

func (_self_ *Paned) SetPosition(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_paned_set_position((*C.GtkPaned)(_self_), _cgo_position_)
	return
}

func PaperSizeNew(name string) (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_paper_size_new(_cgo_name_)
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewCustom(name string, display_name string, width float64, height float64, unit C.GtkUnit) (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_display_name_ := C.CString(display_name)
	_cgo_display_name_ := (*C.gchar)(unsafe.Pointer(_cstring_display_name_))
	defer C.free(unsafe.Pointer(_cstring_display_name_))
	_return_ = C._gtk_paper_size_new_custom(_cgo_name_, _cgo_display_name_, _cgo_width_, _cgo_height_, unit)
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ *PaperSize, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPaperSize
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_paper_size_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewFromPpd(ppd_name string, ppd_display_name string, width float64, height float64) (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cstring_ppd_name_ := C.CString(ppd_name)
	_cgo_ppd_name_ := (*C.gchar)(unsafe.Pointer(_cstring_ppd_name_))
	defer C.free(unsafe.Pointer(_cstring_ppd_name_))
	_cstring_ppd_display_name_ := C.CString(ppd_display_name)
	_cgo_ppd_display_name_ := (*C.gchar)(unsafe.Pointer(_cstring_ppd_display_name_))
	defer C.free(unsafe.Pointer(_cstring_ppd_display_name_))
	_return_ = C._gtk_paper_size_new_from_ppd(_cgo_ppd_name_, _cgo_ppd_display_name_, _cgo_width_, _cgo_height_)
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeGetDefault() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_default()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func PaperSizeGetPaperSizes(include_custom bool) (_return_ *C.GList) {
	_cgo_include_custom_ := C.glibfalse()
	if include_custom { _cgo_include_custom_ = C.glibtrue() }
	_return_ = C.gtk_paper_size_get_paper_sizes(_cgo_include_custom_)
	return
}

func (_self_ *PaperSize) Copy() (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_paper_size_copy((*C.GtkPaperSize)(_self_))
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PaperSize) Free() () {
	C.gtk_paper_size_free((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetDefaultBottomMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_bottom_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) GetDefaultLeftMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_left_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) GetDefaultRightMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_right_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) GetDefaultTopMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_top_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_display_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PaperSize) GetHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_height((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PaperSize) GetPpdName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_ppd_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PaperSize) GetWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_width((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaperSize) IsCustom() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_paper_size_is_custom((*C.GtkPaperSize)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PaperSize) IsEqual(size2 *PaperSize) (_go__return__ bool) {
	_cgo_size2_ := (*C.GtkPaperSize)(unsafe.Pointer(size2))
	var _return_ C.gboolean
	_return_ = C.gtk_paper_size_is_equal((*C.GtkPaperSize)(_self_), _cgo_size2_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PaperSize) SetSize(width float64, height float64, unit C.GtkUnit) () {
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_paper_size_set_size((*C.GtkPaperSize)(_self_), _cgo_width_, _cgo_height_, unit)
	return
}

func (_self_ *PaperSize) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_paper_size_to_key_file((*C.GtkPaperSize)(_self_), key_file, _cgo_group_name_)
	return
}

func PlugNew(socket_id C.Window) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_plug_new(socket_id)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func PlugNewForDisplay(display *C.GdkDisplay, socket_id C.Window) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_plug_new_for_display(display, socket_id)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Plug) Construct(socket_id C.Window) () {
	C.gtk_plug_construct((*C.GtkPlug)(_self_), socket_id)
	return
}

func (_self_ *Plug) ConstructForDisplay(display *C.GdkDisplay, socket_id C.Window) () {
	C.gtk_plug_construct_for_display((*C.GtkPlug)(_self_), display, socket_id)
	return
}

func (_self_ *Plug) GetEmbedded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_plug_get_embedded((*C.GtkPlug)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Plug) GetId() (_return_ C.Window) {
	_return_ = C.gtk_plug_get_id((*C.GtkPlug)(_self_))
	return
}

func (_self_ *Plug) GetSocketWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_plug_get_socket_window((*C.GtkPlug)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_print_context_create_pango_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_print_context_create_pango_layout((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetCairoContext() (_return_ *C.cairo_t) {
	_return_ = C.gtk_print_context_get_cairo_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetDpiX() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_dpi_x((*C.GtkPrintContext)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintContext) GetDpiY() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_dpi_y((*C.GtkPrintContext)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintContext) GetHardMargins() (_go__return__ bool, _go_top_ float64, _go_bottom_ float64, _go_left_ float64, _go_right_ float64) {
	var top C.gdouble
	var bottom C.gdouble
	var left C.gdouble
	var right C.gdouble
	var _return_ C.gboolean
	_return_ = C.gtk_print_context_get_hard_margins((*C.GtkPrintContext)(_self_), &top, &bottom, &left, &right)
	_go_top_ = (float64)(top)
	_go_bottom_ = (float64)(bottom)
	_go_left_ = (float64)(left)
	_go_right_ = (float64)(right)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintContext) GetHeight() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_height((*C.GtkPrintContext)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintContext) GetPageSetup() (_go__return__ *PageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_context_get_page_setup((*C.GtkPrintContext)(_self_))
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintContext) GetPangoFontmap() (_return_ *C.PangoFontMap) {
	_return_ = C.gtk_print_context_get_pango_fontmap((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetWidth() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_width((*C.GtkPrintContext)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintContext) SetCairoContext(cr *C.cairo_t, dpi_x C.double, dpi_y C.double) () {
	C.gtk_print_context_set_cairo_context((*C.GtkPrintContext)(_self_), cr, dpi_x, dpi_y)
	return
}

func PrintOperationNew() (_go__return__ *PrintOperation) {
	var _return_ *C.GtkPrintOperation
	_return_ = C.gtk_print_operation_new()
	_go__return__ = (*PrintOperation)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintOperation) Cancel() () {
	C.gtk_print_operation_cancel((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) DrawPageFinish() () {
	C.gtk_print_operation_draw_page_finish((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetDefaultPageSetup() (_go__return__ *PageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_operation_get_default_page_setup((*C.GtkPrintOperation)(_self_))
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintOperation) GetEmbedPageSetup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_embed_page_setup((*C.GtkPrintOperation)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) GetError() (_error_ unsafe.Pointer) {
	C._gtk_print_operation_get_error((*C.GtkPrintOperation)(_self_), _error_)
	return
}

func (_self_ *PrintOperation) GetHasSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_has_selection((*C.GtkPrintOperation)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) GetNPagesToPrint() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_operation_get_n_pages_to_print((*C.GtkPrintOperation)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintOperation) GetPrintSettings() (_go__return__ *PrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_operation_get_print_settings((*C.GtkPrintOperation)(_self_))
	_go__return__ = (*PrintSettings)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintOperation) GetStatus() (_return_ C.GtkPrintStatus) {
	_return_ = C.gtk_print_operation_get_status((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetStatusString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_operation_get_status_string((*C.GtkPrintOperation)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintOperation) GetSupportSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_support_selection((*C.GtkPrintOperation)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) IsFinished() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_is_finished((*C.GtkPrintOperation)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) Run(action C.GtkPrintOperationAction, parent *Window) (_return_ C.GtkPrintOperationResult, _error_ unsafe.Pointer) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	_return_ = C._gtk_print_operation_run((*C.GtkPrintOperation)(_self_), action, _cgo_parent_, _error_)
	return
}

func (_self_ *PrintOperation) SetAllowAsync(allow_async bool) () {
	_cgo_allow_async_ := C.glibfalse()
	if allow_async { _cgo_allow_async_ = C.glibtrue() }
	C.gtk_print_operation_set_allow_async((*C.GtkPrintOperation)(_self_), _cgo_allow_async_)
	return
}

func (_self_ *PrintOperation) SetCurrentPage(current_page int) () {
	_cgo_current_page_ := (C.gint)(current_page)
	C.gtk_print_operation_set_current_page((*C.GtkPrintOperation)(_self_), _cgo_current_page_)
	return
}

func (_self_ *PrintOperation) SetCustomTabLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_print_operation_set_custom_tab_label((*C.GtkPrintOperation)(_self_), _cgo_label_)
	return
}

func (_self_ *PrintOperation) SetDefaultPageSetup(default_page_setup *PageSetup) () {
	_cgo_default_page_setup_ := (*C.GtkPageSetup)(unsafe.Pointer(default_page_setup))
	C.gtk_print_operation_set_default_page_setup((*C.GtkPrintOperation)(_self_), _cgo_default_page_setup_)
	return
}

func (_self_ *PrintOperation) SetDeferDrawing() () {
	C.gtk_print_operation_set_defer_drawing((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) SetEmbedPageSetup(embed bool) () {
	_cgo_embed_ := C.glibfalse()
	if embed { _cgo_embed_ = C.glibtrue() }
	C.gtk_print_operation_set_embed_page_setup((*C.GtkPrintOperation)(_self_), _cgo_embed_)
	return
}

func (_self_ *PrintOperation) SetExportFilename(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_print_operation_set_export_filename((*C.GtkPrintOperation)(_self_), _cgo_filename_)
	return
}

func (_self_ *PrintOperation) SetHasSelection(has_selection bool) () {
	_cgo_has_selection_ := C.glibfalse()
	if has_selection { _cgo_has_selection_ = C.glibtrue() }
	C.gtk_print_operation_set_has_selection((*C.GtkPrintOperation)(_self_), _cgo_has_selection_)
	return
}

func (_self_ *PrintOperation) SetJobName(job_name string) () {
	_cstring_job_name_ := C.CString(job_name)
	_cgo_job_name_ := (*C.gchar)(unsafe.Pointer(_cstring_job_name_))
	defer C.free(unsafe.Pointer(_cstring_job_name_))
	C._gtk_print_operation_set_job_name((*C.GtkPrintOperation)(_self_), _cgo_job_name_)
	return
}

func (_self_ *PrintOperation) SetNPages(n_pages int) () {
	_cgo_n_pages_ := (C.gint)(n_pages)
	C.gtk_print_operation_set_n_pages((*C.GtkPrintOperation)(_self_), _cgo_n_pages_)
	return
}

func (_self_ *PrintOperation) SetPrintSettings(print_settings *PrintSettings) () {
	_cgo_print_settings_ := (*C.GtkPrintSettings)(unsafe.Pointer(print_settings))
	C.gtk_print_operation_set_print_settings((*C.GtkPrintOperation)(_self_), _cgo_print_settings_)
	return
}

func (_self_ *PrintOperation) SetShowProgress(show_progress bool) () {
	_cgo_show_progress_ := C.glibfalse()
	if show_progress { _cgo_show_progress_ = C.glibtrue() }
	C.gtk_print_operation_set_show_progress((*C.GtkPrintOperation)(_self_), _cgo_show_progress_)
	return
}

func (_self_ *PrintOperation) SetSupportSelection(support_selection bool) () {
	_cgo_support_selection_ := C.glibfalse()
	if support_selection { _cgo_support_selection_ = C.glibtrue() }
	C.gtk_print_operation_set_support_selection((*C.GtkPrintOperation)(_self_), _cgo_support_selection_)
	return
}

func (_self_ *PrintOperation) SetTrackPrintStatus(track_status bool) () {
	_cgo_track_status_ := C.glibfalse()
	if track_status { _cgo_track_status_ = C.glibtrue() }
	C.gtk_print_operation_set_track_print_status((*C.GtkPrintOperation)(_self_), _cgo_track_status_)
	return
}

func (_self_ *PrintOperation) SetUnit(unit C.GtkUnit) () {
	C.gtk_print_operation_set_unit((*C.GtkPrintOperation)(_self_), unit)
	return
}

func (_self_ *PrintOperation) SetUseFullPage(full_page bool) () {
	_cgo_full_page_ := C.glibfalse()
	if full_page { _cgo_full_page_ = C.glibtrue() }
	C.gtk_print_operation_set_use_full_page((*C.GtkPrintOperation)(_self_), _cgo_full_page_)
	return
}

func PrintSettingsNew() (_go__return__ *PrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_settings_new()
	_go__return__ = (*PrintSettings)(unsafe.Pointer(_return_))
	return
}

func PrintSettingsNewFromFile(file_name string) (_go__return__ *PrintSettings, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPrintSettings
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	_return_ = C._gtk_print_settings_new_from_file(_cgo_file_name_, _error_)
	_go__return__ = (*PrintSettings)(unsafe.Pointer(_return_))
	return
}

func PrintSettingsNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ *PrintSettings, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPrintSettings
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_print_settings_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = (*PrintSettings)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintSettings) Copy() (_go__return__ *PrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_settings_copy((*C.GtkPrintSettings)(_self_))
	_go__return__ = (*PrintSettings)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintSettings) Foreach(func_ C.GtkPrintSettingsFunc, user_data C.gpointer) () {
	C.gtk_print_settings_foreach((*C.GtkPrintSettings)(_self_), func_, user_data)
	return
}

func (_self_ *PrintSettings) Get(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get((*C.GtkPrintSettings)(_self_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetBool(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_get_bool((*C.GtkPrintSettings)(_self_), _cgo_key_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetCollate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_collate((*C.GtkPrintSettings)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetDefaultSource() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_default_source((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetDither() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_dither((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetDouble(key string) (_go__return__ float64) {
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_double((*C.GtkPrintSettings)(_self_), _cgo_key_)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetDoubleWithDefault(key string, def float64) (_go__return__ float64) {
	_cgo_def_ := (C.gdouble)(def)
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_double_with_default((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_def_)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetDuplex() (_return_ C.GtkPrintDuplex) {
	_return_ = C.gtk_print_settings_get_duplex((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetFinishings() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_finishings((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetInt(key string) (_go__return__ int) {
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_int((*C.GtkPrintSettings)(_self_), _cgo_key_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetIntWithDefault(key string, def int) (_go__return__ int) {
	_cgo_def_ := (C.gint)(def)
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_int_with_default((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_def_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetLength(key string, unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_length((*C.GtkPrintSettings)(_self_), _cgo_key_, unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetMediaType() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_media_type((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetNCopies() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_n_copies((*C.GtkPrintSettings)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetNumberUp() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_number_up((*C.GtkPrintSettings)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetNumberUpLayout() (_return_ C.GtkNumberUpLayout) {
	_return_ = C.gtk_print_settings_get_number_up_layout((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_print_settings_get_orientation((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOutputBin() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_output_bin((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetPageRanges() (_return_ *C.GtkPageRange, _go_num_ranges_ int) {
	var num_ranges C.gint
	_return_ = C.gtk_print_settings_get_page_ranges((*C.GtkPrintSettings)(_self_), &num_ranges)
	_go_num_ranges_ = (int)(num_ranges)
	return
}

func (_self_ *PrintSettings) GetPageSet() (_return_ C.GtkPageSet) {
	_return_ = C.gtk_print_settings_get_page_set((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPaperHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_paper_height((*C.GtkPrintSettings)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetPaperSize() (_go__return__ *PaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_print_settings_get_paper_size((*C.GtkPrintSettings)(_self_))
	_go__return__ = (*PaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PrintSettings) GetPaperWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_paper_width((*C.GtkPrintSettings)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetPrintPages() (_return_ C.GtkPrintPages) {
	_return_ = C.gtk_print_settings_get_print_pages((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPrinter() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_printer((*C.GtkPrintSettings)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PrintSettings) GetPrinterLpi() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_printer_lpi((*C.GtkPrintSettings)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetQuality() (_return_ C.GtkPrintQuality) {
	_return_ = C.gtk_print_settings_get_quality((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetResolution() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution((*C.GtkPrintSettings)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetResolutionX() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution_x((*C.GtkPrintSettings)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetResolutionY() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution_y((*C.GtkPrintSettings)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *PrintSettings) GetReverse() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_reverse((*C.GtkPrintSettings)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetScale() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_scale((*C.GtkPrintSettings)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PrintSettings) GetUseColor() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_use_color((*C.GtkPrintSettings)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) HasKey(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_has_key((*C.GtkPrintSettings)(_self_), _cgo_key_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) LoadFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_load_file((*C.GtkPrintSettings)(_self_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_load_key_file((*C.GtkPrintSettings)(_self_), key_file, _cgo_group_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) Set(key string, value string) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._gtk_print_settings_set((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *PrintSettings) SetBool(key string, value bool) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cgo_value_ := C.glibfalse()
	if value { _cgo_value_ = C.glibtrue() }
	C._gtk_print_settings_set_bool((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *PrintSettings) SetCollate(collate bool) () {
	_cgo_collate_ := C.glibfalse()
	if collate { _cgo_collate_ = C.glibtrue() }
	C.gtk_print_settings_set_collate((*C.GtkPrintSettings)(_self_), _cgo_collate_)
	return
}

func (_self_ *PrintSettings) SetDefaultSource(default_source string) () {
	_cstring_default_source_ := C.CString(default_source)
	_cgo_default_source_ := (*C.gchar)(unsafe.Pointer(_cstring_default_source_))
	defer C.free(unsafe.Pointer(_cstring_default_source_))
	C._gtk_print_settings_set_default_source((*C.GtkPrintSettings)(_self_), _cgo_default_source_)
	return
}

func (_self_ *PrintSettings) SetDither(dither string) () {
	_cstring_dither_ := C.CString(dither)
	_cgo_dither_ := (*C.gchar)(unsafe.Pointer(_cstring_dither_))
	defer C.free(unsafe.Pointer(_cstring_dither_))
	C._gtk_print_settings_set_dither((*C.GtkPrintSettings)(_self_), _cgo_dither_)
	return
}

func (_self_ *PrintSettings) SetDouble(key string, value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_double((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *PrintSettings) SetDuplex(duplex C.GtkPrintDuplex) () {
	C.gtk_print_settings_set_duplex((*C.GtkPrintSettings)(_self_), duplex)
	return
}

func (_self_ *PrintSettings) SetFinishings(finishings string) () {
	_cstring_finishings_ := C.CString(finishings)
	_cgo_finishings_ := (*C.gchar)(unsafe.Pointer(_cstring_finishings_))
	defer C.free(unsafe.Pointer(_cstring_finishings_))
	C._gtk_print_settings_set_finishings((*C.GtkPrintSettings)(_self_), _cgo_finishings_)
	return
}

func (_self_ *PrintSettings) SetInt(key string, value int) () {
	_cgo_value_ := (C.gint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_int((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *PrintSettings) SetLength(key string, value float64, unit C.GtkUnit) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_length((*C.GtkPrintSettings)(_self_), _cgo_key_, _cgo_value_, unit)
	return
}

func (_self_ *PrintSettings) SetMediaType(media_type string) () {
	_cstring_media_type_ := C.CString(media_type)
	_cgo_media_type_ := (*C.gchar)(unsafe.Pointer(_cstring_media_type_))
	defer C.free(unsafe.Pointer(_cstring_media_type_))
	C._gtk_print_settings_set_media_type((*C.GtkPrintSettings)(_self_), _cgo_media_type_)
	return
}

func (_self_ *PrintSettings) SetNCopies(num_copies int) () {
	_cgo_num_copies_ := (C.gint)(num_copies)
	C.gtk_print_settings_set_n_copies((*C.GtkPrintSettings)(_self_), _cgo_num_copies_)
	return
}

func (_self_ *PrintSettings) SetNumberUp(number_up int) () {
	_cgo_number_up_ := (C.gint)(number_up)
	C.gtk_print_settings_set_number_up((*C.GtkPrintSettings)(_self_), _cgo_number_up_)
	return
}

func (_self_ *PrintSettings) SetNumberUpLayout(number_up_layout C.GtkNumberUpLayout) () {
	C.gtk_print_settings_set_number_up_layout((*C.GtkPrintSettings)(_self_), number_up_layout)
	return
}

func (_self_ *PrintSettings) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_print_settings_set_orientation((*C.GtkPrintSettings)(_self_), orientation)
	return
}

func (_self_ *PrintSettings) SetOutputBin(output_bin string) () {
	_cstring_output_bin_ := C.CString(output_bin)
	_cgo_output_bin_ := (*C.gchar)(unsafe.Pointer(_cstring_output_bin_))
	defer C.free(unsafe.Pointer(_cstring_output_bin_))
	C._gtk_print_settings_set_output_bin((*C.GtkPrintSettings)(_self_), _cgo_output_bin_)
	return
}

func (_self_ *PrintSettings) SetPageSet(page_set C.GtkPageSet) () {
	C.gtk_print_settings_set_page_set((*C.GtkPrintSettings)(_self_), page_set)
	return
}

func (_self_ *PrintSettings) SetPaperHeight(height float64, unit C.GtkUnit) () {
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_print_settings_set_paper_height((*C.GtkPrintSettings)(_self_), _cgo_height_, unit)
	return
}

func (_self_ *PrintSettings) SetPaperSize(paper_size *PaperSize) () {
	_cgo_paper_size_ := (*C.GtkPaperSize)(unsafe.Pointer(paper_size))
	C.gtk_print_settings_set_paper_size((*C.GtkPrintSettings)(_self_), _cgo_paper_size_)
	return
}

func (_self_ *PrintSettings) SetPaperWidth(width float64, unit C.GtkUnit) () {
	_cgo_width_ := (C.gdouble)(width)
	C.gtk_print_settings_set_paper_width((*C.GtkPrintSettings)(_self_), _cgo_width_, unit)
	return
}

func (_self_ *PrintSettings) SetPrintPages(pages C.GtkPrintPages) () {
	C.gtk_print_settings_set_print_pages((*C.GtkPrintSettings)(_self_), pages)
	return
}

func (_self_ *PrintSettings) SetPrinter(printer string) () {
	_cstring_printer_ := C.CString(printer)
	_cgo_printer_ := (*C.gchar)(unsafe.Pointer(_cstring_printer_))
	defer C.free(unsafe.Pointer(_cstring_printer_))
	C._gtk_print_settings_set_printer((*C.GtkPrintSettings)(_self_), _cgo_printer_)
	return
}

func (_self_ *PrintSettings) SetPrinterLpi(lpi float64) () {
	_cgo_lpi_ := (C.gdouble)(lpi)
	C.gtk_print_settings_set_printer_lpi((*C.GtkPrintSettings)(_self_), _cgo_lpi_)
	return
}

func (_self_ *PrintSettings) SetQuality(quality C.GtkPrintQuality) () {
	C.gtk_print_settings_set_quality((*C.GtkPrintSettings)(_self_), quality)
	return
}

func (_self_ *PrintSettings) SetResolution(resolution int) () {
	_cgo_resolution_ := (C.gint)(resolution)
	C.gtk_print_settings_set_resolution((*C.GtkPrintSettings)(_self_), _cgo_resolution_)
	return
}

func (_self_ *PrintSettings) SetResolutionXy(resolution_x int, resolution_y int) () {
	_cgo_resolution_x_ := (C.gint)(resolution_x)
	_cgo_resolution_y_ := (C.gint)(resolution_y)
	C.gtk_print_settings_set_resolution_xy((*C.GtkPrintSettings)(_self_), _cgo_resolution_x_, _cgo_resolution_y_)
	return
}

func (_self_ *PrintSettings) SetReverse(reverse bool) () {
	_cgo_reverse_ := C.glibfalse()
	if reverse { _cgo_reverse_ = C.glibtrue() }
	C.gtk_print_settings_set_reverse((*C.GtkPrintSettings)(_self_), _cgo_reverse_)
	return
}

func (_self_ *PrintSettings) SetScale(scale float64) () {
	_cgo_scale_ := (C.gdouble)(scale)
	C.gtk_print_settings_set_scale((*C.GtkPrintSettings)(_self_), _cgo_scale_)
	return
}

func (_self_ *PrintSettings) SetUseColor(use_color bool) () {
	_cgo_use_color_ := C.glibfalse()
	if use_color { _cgo_use_color_ = C.glibtrue() }
	C.gtk_print_settings_set_use_color((*C.GtkPrintSettings)(_self_), _cgo_use_color_)
	return
}

func (_self_ *PrintSettings) ToFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_to_file((*C.GtkPrintSettings)(_self_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_print_settings_to_key_file((*C.GtkPrintSettings)(_self_), key_file, _cgo_group_name_)
	return
}

func (_self_ *PrintSettings) Unset(key string) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_unset((*C.GtkPrintSettings)(_self_), _cgo_key_)
	return
}

func ProgressBarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_progress_bar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ProgressBar) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_progress_bar_get_ellipsize((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetFraction() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_progress_bar_get_fraction((*C.GtkProgressBar)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ProgressBar) GetInverted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_progress_bar_get_inverted((*C.GtkProgressBar)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ProgressBar) GetPulseStep() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_progress_bar_get_pulse_step((*C.GtkProgressBar)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ProgressBar) GetShowText() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_progress_bar_get_show_text((*C.GtkProgressBar)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ProgressBar) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_progress_bar_get_text((*C.GtkProgressBar)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProgressBar) Pulse() () {
	C.gtk_progress_bar_pulse((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_progress_bar_set_ellipsize((*C.GtkProgressBar)(_self_), mode)
	return
}

func (_self_ *ProgressBar) SetFraction(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_progress_bar_set_fraction((*C.GtkProgressBar)(_self_), _cgo_fraction_)
	return
}

func (_self_ *ProgressBar) SetInverted(inverted bool) () {
	_cgo_inverted_ := C.glibfalse()
	if inverted { _cgo_inverted_ = C.glibtrue() }
	C.gtk_progress_bar_set_inverted((*C.GtkProgressBar)(_self_), _cgo_inverted_)
	return
}

func (_self_ *ProgressBar) SetPulseStep(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_progress_bar_set_pulse_step((*C.GtkProgressBar)(_self_), _cgo_fraction_)
	return
}

func (_self_ *ProgressBar) SetShowText(show_text bool) () {
	_cgo_show_text_ := C.glibfalse()
	if show_text { _cgo_show_text_ = C.glibtrue() }
	C.gtk_progress_bar_set_show_text((*C.GtkProgressBar)(_self_), _cgo_show_text_)
	return
}

func (_self_ *ProgressBar) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_progress_bar_set_text((*C.GtkProgressBar)(_self_), _cgo_text_)
	return
}

func RadioActionNew(name string, label string, tooltip string, stock_id string, value int) (_go__return__ *RadioAction) {
	var _return_ *C.GtkRadioAction
	_cgo_value_ := (C.gint)(value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_, _cgo_value_)
	_go__return__ = (*RadioAction)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RadioAction) GetCurrentValue() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_radio_action_get_current_value((*C.GtkRadioAction)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *RadioAction) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_action_get_group((*C.GtkRadioAction)(_self_))
	return
}

func (_self_ *RadioAction) JoinGroup(group_source *RadioAction) () {
	_cgo_group_source_ := (*C.GtkRadioAction)(unsafe.Pointer(group_source))
	C.gtk_radio_action_join_group((*C.GtkRadioAction)(_self_), _cgo_group_source_)
	return
}

func (_self_ *RadioAction) SetCurrentValue(current_value int) () {
	_cgo_current_value_ := (C.gint)(current_value)
	C.gtk_radio_action_set_current_value((*C.GtkRadioAction)(_self_), _cgo_current_value_)
	return
}

func (_self_ *RadioAction) SetGroup(group *C.GSList) () {
	C.gtk_radio_action_set_group((*C.GtkRadioAction)(_self_), group)
	return
}

func RadioButtonNew(group *C.GSList) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_button_new(group)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewFromWidget(radio_group_member *RadioButton) (_go__return__ *Widget) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(unsafe.Pointer(radio_group_member))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_button_new_from_widget(_cgo_radio_group_member_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithLabel(group *C.GSList, label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_label(group, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithLabelFromWidget(radio_group_member *RadioButton, label string) (_go__return__ *Widget) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(unsafe.Pointer(radio_group_member))
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_label_from_widget(_cgo_radio_group_member_, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithMnemonic(group *C.GSList, label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_mnemonic(group, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithMnemonicFromWidget(radio_group_member *RadioButton, label string) (_go__return__ *Widget) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(unsafe.Pointer(radio_group_member))
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_mnemonic_from_widget(_cgo_radio_group_member_, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RadioButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_button_get_group((*C.GtkRadioButton)(_self_))
	return
}

func (_self_ *RadioButton) JoinGroup(group_source *RadioButton) () {
	_cgo_group_source_ := (*C.GtkRadioButton)(unsafe.Pointer(group_source))
	C.gtk_radio_button_join_group((*C.GtkRadioButton)(_self_), _cgo_group_source_)
	return
}

func (_self_ *RadioButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_button_set_group((*C.GtkRadioButton)(_self_), group)
	return
}

func RadioMenuItemNew(group *C.GSList) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_menu_item_new(group)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewFromWidget(group *RadioMenuItem) (_go__return__ *Widget) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(unsafe.Pointer(group))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_menu_item_new_from_widget(_cgo_group_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithLabel(group *C.GSList, label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_label(group, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithLabelFromWidget(group *RadioMenuItem, label string) (_go__return__ *Widget) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(unsafe.Pointer(group))
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_label_from_widget(_cgo_group_, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithMnemonic(group *C.GSList, label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic(group, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithMnemonicFromWidget(group *RadioMenuItem, label string) (_go__return__ *Widget) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(unsafe.Pointer(group))
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic_from_widget(_cgo_group_, _cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RadioMenuItem) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_menu_item_get_group((*C.GtkRadioMenuItem)(_self_))
	return
}

func (_self_ *RadioMenuItem) SetGroup(group *C.GSList) () {
	C.gtk_radio_menu_item_set_group((*C.GtkRadioMenuItem)(_self_), group)
	return
}

func RadioToolButtonNew(group *C.GSList) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_radio_tool_button_new(group)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewFromStock(group *C.GSList, stock_id string) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_tool_button_new_from_stock(group, _cgo_stock_id_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewFromWidget(group *RadioToolButton) (_go__return__ *ToolItem) {
	_cgo_group_ := (*C.GtkRadioToolButton)(unsafe.Pointer(group))
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_radio_tool_button_new_from_widget(_cgo_group_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewWithStockFromWidget(group *RadioToolButton, stock_id string) (_go__return__ *ToolItem) {
	_cgo_group_ := (*C.GtkRadioToolButton)(unsafe.Pointer(group))
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_tool_button_new_with_stock_from_widget(_cgo_group_, _cgo_stock_id_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RadioToolButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_tool_button_get_group((*C.GtkRadioToolButton)(_self_))
	return
}

func (_self_ *RadioToolButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_tool_button_set_group((*C.GtkRadioToolButton)(_self_), group)
	return
}

func (_self_ *Range) GetAdjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_range_get_adjustment((*C.GtkRange)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Range) GetFillLevel() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_range_get_fill_level((*C.GtkRange)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Range) GetFlippable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_flippable((*C.GtkRange)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Range) GetInverted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_inverted((*C.GtkRange)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Range) GetLowerStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_lower_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetMinSliderSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_range_get_min_slider_size((*C.GtkRange)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Range) GetRangeRect() (range_rect *C.GdkRectangle) {
	C.gtk_range_get_range_rect((*C.GtkRange)(_self_), range_rect)
	return
}

func (_self_ *Range) GetRestrictToFillLevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_restrict_to_fill_level((*C.GtkRange)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Range) GetRoundDigits() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_range_get_round_digits((*C.GtkRange)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Range) GetShowFillLevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_show_fill_level((*C.GtkRange)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Range) GetSliderRange() (_go_slider_start_ int, _go_slider_end_ int) {
	var slider_start C.gint
	var slider_end C.gint
	C.gtk_range_get_slider_range((*C.GtkRange)(_self_), &slider_start, &slider_end)
	_go_slider_start_ = (int)(slider_start)
	_go_slider_end_ = (int)(slider_end)
	return
}

func (_self_ *Range) GetSliderSizeFixed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_slider_size_fixed((*C.GtkRange)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Range) GetUpperStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_upper_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_range_get_value((*C.GtkRange)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Range) SetAdjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_range_set_adjustment((*C.GtkRange)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *Range) SetFillLevel(fill_level float64) () {
	_cgo_fill_level_ := (C.gdouble)(fill_level)
	C.gtk_range_set_fill_level((*C.GtkRange)(_self_), _cgo_fill_level_)
	return
}

func (_self_ *Range) SetFlippable(flippable bool) () {
	_cgo_flippable_ := C.glibfalse()
	if flippable { _cgo_flippable_ = C.glibtrue() }
	C.gtk_range_set_flippable((*C.GtkRange)(_self_), _cgo_flippable_)
	return
}

func (_self_ *Range) SetIncrements(step float64, page float64) () {
	_cgo_step_ := (C.gdouble)(step)
	_cgo_page_ := (C.gdouble)(page)
	C.gtk_range_set_increments((*C.GtkRange)(_self_), _cgo_step_, _cgo_page_)
	return
}

func (_self_ *Range) SetInverted(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_range_set_inverted((*C.GtkRange)(_self_), _cgo_setting_)
	return
}

func (_self_ *Range) SetLowerStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_lower_stepper_sensitivity((*C.GtkRange)(_self_), sensitivity)
	return
}

func (_self_ *Range) SetMinSliderSize(min_size int) () {
	_cgo_min_size_ := (C.gint)(min_size)
	C.gtk_range_set_min_slider_size((*C.GtkRange)(_self_), _cgo_min_size_)
	return
}

func (_self_ *Range) SetRange(min float64, max float64) () {
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	C.gtk_range_set_range((*C.GtkRange)(_self_), _cgo_min_, _cgo_max_)
	return
}

func (_self_ *Range) SetRestrictToFillLevel(restrict_to_fill_level bool) () {
	_cgo_restrict_to_fill_level_ := C.glibfalse()
	if restrict_to_fill_level { _cgo_restrict_to_fill_level_ = C.glibtrue() }
	C.gtk_range_set_restrict_to_fill_level((*C.GtkRange)(_self_), _cgo_restrict_to_fill_level_)
	return
}

func (_self_ *Range) SetRoundDigits(round_digits int) () {
	_cgo_round_digits_ := (C.gint)(round_digits)
	C.gtk_range_set_round_digits((*C.GtkRange)(_self_), _cgo_round_digits_)
	return
}

func (_self_ *Range) SetShowFillLevel(show_fill_level bool) () {
	_cgo_show_fill_level_ := C.glibfalse()
	if show_fill_level { _cgo_show_fill_level_ = C.glibtrue() }
	C.gtk_range_set_show_fill_level((*C.GtkRange)(_self_), _cgo_show_fill_level_)
	return
}

func (_self_ *Range) SetSliderSizeFixed(size_fixed bool) () {
	_cgo_size_fixed_ := C.glibfalse()
	if size_fixed { _cgo_size_fixed_ = C.glibtrue() }
	C.gtk_range_set_slider_size_fixed((*C.GtkRange)(_self_), _cgo_size_fixed_)
	return
}

func (_self_ *Range) SetUpperStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_upper_stepper_sensitivity((*C.GtkRange)(_self_), sensitivity)
	return
}

func (_self_ *Range) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_range_set_value((*C.GtkRange)(_self_), _cgo_value_)
	return
}

func RecentActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ *Action) {
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_recent_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = (*Action)(unsafe.Pointer(_return_))
	return
}

func RecentActionNewForManager(name string, label string, tooltip string, stock_id string, manager *RecentManager) (_go__return__ *Action) {
	_cgo_manager_ := (*C.GtkRecentManager)(unsafe.Pointer(manager))
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_recent_action_new_for_manager(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_, _cgo_manager_)
	_go__return__ = (*Action)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentAction) GetShowNumbers() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_action_get_show_numbers((*C.GtkRecentAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentAction) SetShowNumbers(show_numbers bool) () {
	_cgo_show_numbers_ := C.glibfalse()
	if show_numbers { _cgo_show_numbers_ = C.glibtrue() }
	C.gtk_recent_action_set_show_numbers((*C.GtkRecentAction)(_self_), _cgo_show_numbers_)
	return
}

func RecentChooserMenuNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_menu_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RecentChooserMenuNewForManager(manager *RecentManager) (_go__return__ *Widget) {
	_cgo_manager_ := (*C.GtkRecentManager)(unsafe.Pointer(manager))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_menu_new_for_manager(_cgo_manager_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentChooserMenu) GetShowNumbers() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_chooser_menu_get_show_numbers((*C.GtkRecentChooserMenu)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentChooserMenu) SetShowNumbers(show_numbers bool) () {
	_cgo_show_numbers_ := C.glibfalse()
	if show_numbers { _cgo_show_numbers_ = C.glibtrue() }
	C.gtk_recent_chooser_menu_set_show_numbers((*C.GtkRecentChooserMenu)(_self_), _cgo_show_numbers_)
	return
}

func RecentChooserWidgetNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_widget_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RecentChooserWidgetNewForManager(manager *RecentManager) (_go__return__ *Widget) {
	_cgo_manager_ := (*C.GtkRecentManager)(unsafe.Pointer(manager))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_widget_new_for_manager(_cgo_manager_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func RecentFilterNew() (_go__return__ *RecentFilter) {
	var _return_ *C.GtkRecentFilter
	_return_ = C.gtk_recent_filter_new()
	_go__return__ = (*RecentFilter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentFilter) AddAge(days int) () {
	_cgo_days_ := (C.gint)(days)
	C.gtk_recent_filter_add_age((*C.GtkRecentFilter)(_self_), _cgo_days_)
	return
}

func (_self_ *RecentFilter) AddApplication(application string) () {
	_cstring_application_ := C.CString(application)
	_cgo_application_ := (*C.gchar)(unsafe.Pointer(_cstring_application_))
	defer C.free(unsafe.Pointer(_cstring_application_))
	C._gtk_recent_filter_add_application((*C.GtkRecentFilter)(_self_), _cgo_application_)
	return
}

func (_self_ *RecentFilter) AddCustom(needed C.GtkRecentFilterFlags, func_ C.GtkRecentFilterFunc, data C.gpointer, data_destroy C.GDestroyNotify) () {
	C.gtk_recent_filter_add_custom((*C.GtkRecentFilter)(_self_), needed, func_, data, data_destroy)
	return
}

func (_self_ *RecentFilter) AddGroup(group string) () {
	_cstring_group_ := C.CString(group)
	_cgo_group_ := (*C.gchar)(unsafe.Pointer(_cstring_group_))
	defer C.free(unsafe.Pointer(_cstring_group_))
	C._gtk_recent_filter_add_group((*C.GtkRecentFilter)(_self_), _cgo_group_)
	return
}

func (_self_ *RecentFilter) AddMimeType(mime_type string) () {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	C._gtk_recent_filter_add_mime_type((*C.GtkRecentFilter)(_self_), _cgo_mime_type_)
	return
}

func (_self_ *RecentFilter) AddPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_recent_filter_add_pattern((*C.GtkRecentFilter)(_self_), _cgo_pattern_)
	return
}

func (_self_ *RecentFilter) AddPixbufFormats() () {
	C.gtk_recent_filter_add_pixbuf_formats((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) Filter(filter_info *RecentFilterInfo) (_go__return__ bool) {
	_cgo_filter_info_ := (*C.GtkRecentFilterInfo)(unsafe.Pointer(filter_info))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_filter_filter((*C.GtkRecentFilter)(_self_), _cgo_filter_info_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentFilter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_filter_get_name((*C.GtkRecentFilter)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentFilter) GetNeeded() (_return_ C.GtkRecentFilterFlags) {
	_return_ = C.gtk_recent_filter_get_needed((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_recent_filter_set_name((*C.GtkRecentFilter)(_self_), _cgo_name_)
	return
}

func (_self_ *RecentInfo) CreateAppInfo(app_name string) (_return_ *C.GAppInfo, _error_ unsafe.Pointer) {
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	_return_ = C._gtk_recent_info_create_app_info((*C.GtkRecentInfo)(_self_), _cgo_app_name_, _error_)
	return
}

func (_self_ *RecentInfo) Exists() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_exists((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) GetAdded() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_added((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetAge() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_recent_info_get_age((*C.GtkRecentInfo)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *RecentInfo) GetApplicationInfo(app_name string) (_go__return__ bool, app_exec unsafe.Pointer, _go_count_ uint, time_ C.time_t) {
	var count C.guint
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_get_application_info((*C.GtkRecentInfo)(_self_), _cgo_app_name_, app_exec, &count, &time_)
	_go_count_ = (uint)(count)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) GetApplications() (_return_ unsafe.Pointer, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._gtk_recent_info_get_applications((*C.GtkRecentInfo)(_self_), &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *RecentInfo) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_description((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_display_name((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_recent_info_get_gicon((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetGroups() (_return_ unsafe.Pointer, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._gtk_recent_info_get_groups((*C.GtkRecentInfo)(_self_), &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *RecentInfo) GetIcon(size int) (_return_ *C.GdkPixbuf) {
	_cgo_size_ := (C.gint)(size)
	_return_ = C.gtk_recent_info_get_icon((*C.GtkRecentInfo)(_self_), _cgo_size_)
	return
}

func (_self_ *RecentInfo) GetMimeType() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_mime_type((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetModified() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_modified((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetPrivateHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_get_private_hint((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) GetShortName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_get_short_name((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_uri((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetUriDisplay() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_get_uri_display((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) GetVisited() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_visited((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) HasApplication(app_name string) (_go__return__ bool) {
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_has_application((*C.GtkRecentInfo)(_self_), _cgo_app_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) HasGroup(group_name string) (_go__return__ bool) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_has_group((*C.GtkRecentInfo)(_self_), _cgo_group_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) IsLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_is_local((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) LastApplication() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_last_application((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *RecentInfo) Match(info_b *RecentInfo) (_go__return__ bool) {
	_cgo_info_b_ := (*C.GtkRecentInfo)(unsafe.Pointer(info_b))
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_match((*C.GtkRecentInfo)(_self_), _cgo_info_b_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) Ref() (_go__return__ *RecentInfo) {
	var _return_ *C.GtkRecentInfo
	_return_ = C.gtk_recent_info_ref((*C.GtkRecentInfo)(_self_))
	_go__return__ = (*RecentInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentInfo) Unref() () {
	C.gtk_recent_info_unref((*C.GtkRecentInfo)(_self_))
	return
}

func RecentManagerNew() (_go__return__ *RecentManager) {
	var _return_ *C.GtkRecentManager
	_return_ = C.gtk_recent_manager_new()
	_go__return__ = (*RecentManager)(unsafe.Pointer(_return_))
	return
}

func RecentManagerGetDefault() (_go__return__ *RecentManager) {
	var _return_ *C.GtkRecentManager
	_return_ = C.gtk_recent_manager_get_default()
	_go__return__ = (*RecentManager)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentManager) AddFull(uri string, recent_data *RecentData) (_go__return__ bool) {
	_cgo_recent_data_ := (*C.GtkRecentData)(unsafe.Pointer(recent_data))
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_add_full((*C.GtkRecentManager)(_self_), _cgo_uri_, _cgo_recent_data_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentManager) AddItem(uri string) (_go__return__ bool) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_add_item((*C.GtkRecentManager)(_self_), _cgo_uri_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentManager) GetItems() (_return_ *C.GList) {
	_return_ = C.gtk_recent_manager_get_items((*C.GtkRecentManager)(_self_))
	return
}

func (_self_ *RecentManager) HasItem(uri string) (_go__return__ bool) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_has_item((*C.GtkRecentManager)(_self_), _cgo_uri_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentManager) LookupItem(uri string) (_go__return__ *RecentInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GtkRecentInfo
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._gtk_recent_manager_lookup_item((*C.GtkRecentManager)(_self_), _cgo_uri_, _error_)
	_go__return__ = (*RecentInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *RecentManager) MoveItem(uri string, new_uri string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_cstring_new_uri_ := C.CString(new_uri)
	_cgo_new_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_new_uri_))
	defer C.free(unsafe.Pointer(_cstring_new_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_move_item((*C.GtkRecentManager)(_self_), _cgo_uri_, _cgo_new_uri_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *RecentManager) PurgeItems() (_go__return__ int, _error_ unsafe.Pointer) {
	var _return_ C.gint
	_return_ = C._gtk_recent_manager_purge_items((*C.GtkRecentManager)(_self_), _error_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *RecentManager) RemoveItem(uri string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_remove_item((*C.GtkRecentManager)(_self_), _cgo_uri_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RequisitionNew() (_go__return__ *Requisition) {
	var _return_ *C.GtkRequisition
	_return_ = C.gtk_requisition_new()
	_go__return__ = (*Requisition)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Requisition) Copy() (_go__return__ *Requisition) {
	var _return_ *C.GtkRequisition
	_return_ = C._gtk_requisition_copy((*C.GtkRequisition)(_self_))
	_go__return__ = (*Requisition)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Requisition) Free() () {
	C.gtk_requisition_free((*C.GtkRequisition)(_self_))
	return
}

func ScaleNew(orientation C.GtkOrientation, adjustment *Adjustment) (_go__return__ *Widget) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_new(orientation, _cgo_adjustment_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ScaleNewWithRange(orientation C.GtkOrientation, min float64, max float64, step float64) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	_cgo_step_ := (C.gdouble)(step)
	_return_ = C.gtk_scale_new_with_range(orientation, _cgo_min_, _cgo_max_, _cgo_step_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Scale) AddMark(value float64, position C.GtkPositionType, markup string) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_scale_add_mark((*C.GtkScale)(_self_), _cgo_value_, position, _cgo_markup_)
	return
}

func (_self_ *Scale) ClearMarks() () {
	C.gtk_scale_clear_marks((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetDigits() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scale_get_digits((*C.GtkScale)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Scale) GetDrawValue() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scale_get_draw_value((*C.GtkScale)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Scale) GetHasOrigin() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scale_get_has_origin((*C.GtkScale)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Scale) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_scale_get_layout((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_scale_get_layout_offsets((*C.GtkScale)(_self_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *Scale) GetValuePos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_scale_get_value_pos((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) SetDigits(digits int) () {
	_cgo_digits_ := (C.gint)(digits)
	C.gtk_scale_set_digits((*C.GtkScale)(_self_), _cgo_digits_)
	return
}

func (_self_ *Scale) SetDrawValue(draw_value bool) () {
	_cgo_draw_value_ := C.glibfalse()
	if draw_value { _cgo_draw_value_ = C.glibtrue() }
	C.gtk_scale_set_draw_value((*C.GtkScale)(_self_), _cgo_draw_value_)
	return
}

func (_self_ *Scale) SetHasOrigin(has_origin bool) () {
	_cgo_has_origin_ := C.glibfalse()
	if has_origin { _cgo_has_origin_ = C.glibtrue() }
	C.gtk_scale_set_has_origin((*C.GtkScale)(_self_), _cgo_has_origin_)
	return
}

func (_self_ *Scale) SetValuePos(pos C.GtkPositionType) () {
	C.gtk_scale_set_value_pos((*C.GtkScale)(_self_), pos)
	return
}

func (_self_ *ScaleButton) GetAdjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scale_button_get_adjustment((*C.GtkScaleButton)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScaleButton) GetMinusButton() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_minus_button((*C.GtkScaleButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScaleButton) GetPlusButton() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_plus_button((*C.GtkScaleButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScaleButton) GetPopup() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_popup((*C.GtkScaleButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScaleButton) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_scale_button_get_value((*C.GtkScaleButton)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ScaleButton) SetAdjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_scale_button_set_adjustment((*C.GtkScaleButton)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *ScaleButton) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_scale_button_set_value((*C.GtkScaleButton)(_self_), _cgo_value_)
	return
}

func ScrollbarNew(orientation C.GtkOrientation, adjustment *Adjustment) (_go__return__ *Widget) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrollbar_new(orientation, _cgo_adjustment_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ScrolledWindowNew(hadjustment *Adjustment, vadjustment *Adjustment) (_go__return__ *Widget) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(hadjustment))
	_cgo_vadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(vadjustment))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrolledWindow) AddWithViewport(child *Widget) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	C.gtk_scrolled_window_add_with_viewport((*C.GtkScrolledWindow)(_self_), _cgo_child_)
	return
}

func (_self_ *ScrolledWindow) GetCaptureButtonPress() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scrolled_window_get_capture_button_press((*C.GtkScrolledWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ScrolledWindow) GetHadjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scrolled_window_get_hadjustment((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrolledWindow) GetHscrollbar() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_get_hscrollbar((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrolledWindow) GetKineticScrolling() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scrolled_window_get_kinetic_scrolling((*C.GtkScrolledWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ScrolledWindow) GetMinContentHeight() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scrolled_window_get_min_content_height((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ScrolledWindow) GetMinContentWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scrolled_window_get_min_content_width((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ScrolledWindow) GetPlacement() (_return_ C.GtkCornerType) {
	_return_ = C.gtk_scrolled_window_get_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetPolicy() (hscrollbar_policy *C.GtkPolicyType, vscrollbar_policy *C.GtkPolicyType) {
	C.gtk_scrolled_window_get_policy((*C.GtkScrolledWindow)(_self_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *ScrolledWindow) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_scrolled_window_get_shadow_type((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetVadjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scrolled_window_get_vadjustment((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrolledWindow) GetVscrollbar() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_get_vscrollbar((*C.GtkScrolledWindow)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrolledWindow) SetCaptureButtonPress(capture_button_press bool) () {
	_cgo_capture_button_press_ := C.glibfalse()
	if capture_button_press { _cgo_capture_button_press_ = C.glibtrue() }
	C.gtk_scrolled_window_set_capture_button_press((*C.GtkScrolledWindow)(_self_), _cgo_capture_button_press_)
	return
}

func (_self_ *ScrolledWindow) SetHadjustment(hadjustment *Adjustment) () {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(hadjustment))
	C.gtk_scrolled_window_set_hadjustment((*C.GtkScrolledWindow)(_self_), _cgo_hadjustment_)
	return
}

func (_self_ *ScrolledWindow) SetKineticScrolling(kinetic_scrolling bool) () {
	_cgo_kinetic_scrolling_ := C.glibfalse()
	if kinetic_scrolling { _cgo_kinetic_scrolling_ = C.glibtrue() }
	C.gtk_scrolled_window_set_kinetic_scrolling((*C.GtkScrolledWindow)(_self_), _cgo_kinetic_scrolling_)
	return
}

func (_self_ *ScrolledWindow) SetMinContentHeight(height int) () {
	_cgo_height_ := (C.gint)(height)
	C.gtk_scrolled_window_set_min_content_height((*C.GtkScrolledWindow)(_self_), _cgo_height_)
	return
}

func (_self_ *ScrolledWindow) SetMinContentWidth(width int) () {
	_cgo_width_ := (C.gint)(width)
	C.gtk_scrolled_window_set_min_content_width((*C.GtkScrolledWindow)(_self_), _cgo_width_)
	return
}

func (_self_ *ScrolledWindow) SetPlacement(window_placement C.GtkCornerType) () {
	C.gtk_scrolled_window_set_placement((*C.GtkScrolledWindow)(_self_), window_placement)
	return
}

func (_self_ *ScrolledWindow) SetPolicy(hscrollbar_policy C.GtkPolicyType, vscrollbar_policy C.GtkPolicyType) () {
	C.gtk_scrolled_window_set_policy((*C.GtkScrolledWindow)(_self_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *ScrolledWindow) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_scrolled_window_set_shadow_type((*C.GtkScrolledWindow)(_self_), type_)
	return
}

func (_self_ *ScrolledWindow) SetVadjustment(vadjustment *Adjustment) () {
	_cgo_vadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(vadjustment))
	C.gtk_scrolled_window_set_vadjustment((*C.GtkScrolledWindow)(_self_), _cgo_vadjustment_)
	return
}

func (_self_ *ScrolledWindow) UnsetPlacement() () {
	C.gtk_scrolled_window_unset_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func SearchEntryNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_search_entry_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SelectionData) Copy() (_go__return__ *SelectionData) {
	var _return_ *C.GtkSelectionData
	_return_ = C._gtk_selection_data_copy((*C.GtkSelectionData)(_self_))
	_go__return__ = (*SelectionData)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SelectionData) Free() () {
	C.gtk_selection_data_free((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetData() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_data((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataType() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_data_type((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataWithLength() (_return_ *C.guchar, _go_length_ int) {
	var length C.gint
	_return_ = C._gtk_selection_data_get_data_with_length((*C.GtkSelectionData)(_self_), &length)
	_go_length_ = (int)(length)
	return
}

func (_self_ *SelectionData) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_selection_data_get_display((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetFormat() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_selection_data_get_format((*C.GtkSelectionData)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *SelectionData) GetLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_selection_data_get_length((*C.GtkSelectionData)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *SelectionData) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_selection_data_get_pixbuf((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetSelection() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_selection((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetTarget() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_target((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetText() (_go__return__ string) {
	var _return_ *C.guchar
	_return_ = C._gtk_selection_data_get_text((*C.GtkSelectionData)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *SelectionData) GetUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_selection_data_get_uris((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) SetPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_selection_data_set_pixbuf((*C.GtkSelectionData)(_self_), pixbuf)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SelectionData) SetText(str string, len_ int) (_go__return__ bool) {
	_cgo_len__ := (C.gint)(len_)
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_set_text((*C.GtkSelectionData)(_self_), _cgo_str_, _cgo_len__)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeImage(writable bool) (_go__return__ bool) {
	_cgo_writable_ := C.glibfalse()
	if writable { _cgo_writable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_image((*C.GtkSelectionData)(_self_), _cgo_writable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeRichText(buffer *TextBuffer) (_go__return__ bool) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_rich_text((*C.GtkSelectionData)(_self_), _cgo_buffer_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeText() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_text((*C.GtkSelectionData)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeUri() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_uri((*C.GtkSelectionData)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func SeparatorNew(orientation C.GtkOrientation) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_separator_new(orientation)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func SeparatorMenuItemNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_separator_menu_item_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func SeparatorToolItemNew() (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_separator_tool_item_new()
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SeparatorToolItem) GetDraw() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_separator_tool_item_get_draw((*C.GtkSeparatorToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SeparatorToolItem) SetDraw(draw bool) () {
	_cgo_draw_ := C.glibfalse()
	if draw { _cgo_draw_ = C.glibtrue() }
	C.gtk_separator_tool_item_set_draw((*C.GtkSeparatorToolItem)(_self_), _cgo_draw_)
	return
}

func SettingsGetDefault() (_go__return__ *Settings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_settings_get_default()
	_go__return__ = (*Settings)(unsafe.Pointer(_return_))
	return
}

func SettingsGetForScreen(screen *C.GdkScreen) (_go__return__ *Settings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_settings_get_for_screen(screen)
	_go__return__ = (*Settings)(unsafe.Pointer(_return_))
	return
}

func SettingsInstallProperty(pspec *C.GParamSpec) () {
	C.gtk_settings_install_property(pspec)
	return
}

func SettingsInstallPropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_settings_install_property_parser(pspec, parser)
	return
}

func (_self_ *Settings) SetDoubleProperty(name string, v_double float64, origin string) () {
	_cgo_v_double_ := (C.gdouble)(v_double)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_double_property((*C.GtkSettings)(_self_), _cgo_name_, _cgo_v_double_, _cgo_origin_)
	return
}

func (_self_ *Settings) SetLongProperty(name string, v_long int64, origin string) () {
	_cgo_v_long_ := (C.glong)(v_long)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_long_property((*C.GtkSettings)(_self_), _cgo_name_, _cgo_v_long_, _cgo_origin_)
	return
}

func (_self_ *Settings) SetPropertyValue(name string, svalue *SettingsValue) () {
	_cgo_svalue_ := (*C.GtkSettingsValue)(unsafe.Pointer(svalue))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_settings_set_property_value((*C.GtkSettings)(_self_), _cgo_name_, _cgo_svalue_)
	return
}

func (_self_ *Settings) SetStringProperty(name string, v_string string, origin string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_v_string_ := C.CString(v_string)
	_cgo_v_string_ := (*C.gchar)(unsafe.Pointer(_cstring_v_string_))
	defer C.free(unsafe.Pointer(_cstring_v_string_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_string_property((*C.GtkSettings)(_self_), _cgo_name_, _cgo_v_string_, _cgo_origin_)
	return
}

func SizeGroupNew(mode C.GtkSizeGroupMode) (_go__return__ *SizeGroup) {
	var _return_ *C.GtkSizeGroup
	_return_ = C.gtk_size_group_new(mode)
	_go__return__ = (*SizeGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SizeGroup) AddWidget(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_size_group_add_widget((*C.GtkSizeGroup)(_self_), _cgo_widget_)
	return
}

func (_self_ *SizeGroup) GetIgnoreHidden() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_size_group_get_ignore_hidden((*C.GtkSizeGroup)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SizeGroup) GetMode() (_return_ C.GtkSizeGroupMode) {
	_return_ = C.gtk_size_group_get_mode((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) GetWidgets() (_return_ *C.GSList) {
	_return_ = C.gtk_size_group_get_widgets((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) RemoveWidget(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_size_group_remove_widget((*C.GtkSizeGroup)(_self_), _cgo_widget_)
	return
}

func (_self_ *SizeGroup) SetIgnoreHidden(ignore_hidden bool) () {
	_cgo_ignore_hidden_ := C.glibfalse()
	if ignore_hidden { _cgo_ignore_hidden_ = C.glibtrue() }
	C.gtk_size_group_set_ignore_hidden((*C.GtkSizeGroup)(_self_), _cgo_ignore_hidden_)
	return
}

func (_self_ *SizeGroup) SetMode(mode C.GtkSizeGroupMode) () {
	C.gtk_size_group_set_mode((*C.GtkSizeGroup)(_self_), mode)
	return
}

func SocketNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_socket_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Socket) AddId(window C.Window) () {
	C.gtk_socket_add_id((*C.GtkSocket)(_self_), window)
	return
}

func (_self_ *Socket) GetId() (_return_ C.Window) {
	_return_ = C.gtk_socket_get_id((*C.GtkSocket)(_self_))
	return
}

func (_self_ *Socket) GetPlugWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_socket_get_plug_window((*C.GtkSocket)(_self_))
	return
}

func SpinButtonNew(adjustment *Adjustment, climb_rate float64, digits uint) (_go__return__ *Widget) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	var _return_ *C.GtkWidget
	_cgo_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_digits_ := (C.guint)(digits)
	_return_ = C.gtk_spin_button_new(_cgo_adjustment_, _cgo_climb_rate_, _cgo_digits_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func SpinButtonNewWithRange(min float64, max float64, step float64) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	_cgo_step_ := (C.gdouble)(step)
	_return_ = C.gtk_spin_button_new_with_range(_cgo_min_, _cgo_max_, _cgo_step_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SpinButton) Configure(adjustment *Adjustment, climb_rate float64, digits uint) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	_cgo_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_digits_ := (C.guint)(digits)
	C.gtk_spin_button_configure((*C.GtkSpinButton)(_self_), _cgo_adjustment_, _cgo_climb_rate_, _cgo_digits_)
	return
}

func (_self_ *SpinButton) GetAdjustment() (_go__return__ *Adjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_spin_button_get_adjustment((*C.GtkSpinButton)(_self_))
	_go__return__ = (*Adjustment)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SpinButton) GetDigits() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_spin_button_get_digits((*C.GtkSpinButton)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *SpinButton) GetIncrements() (_go_step_ float64, _go_page_ float64) {
	var step C.gdouble
	var page C.gdouble
	C.gtk_spin_button_get_increments((*C.GtkSpinButton)(_self_), &step, &page)
	_go_step_ = (float64)(step)
	_go_page_ = (float64)(page)
	return
}

func (_self_ *SpinButton) GetNumeric() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_numeric((*C.GtkSpinButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SpinButton) GetRange() (_go_min_ float64, _go_max_ float64) {
	var min C.gdouble
	var max C.gdouble
	C.gtk_spin_button_get_range((*C.GtkSpinButton)(_self_), &min, &max)
	_go_min_ = (float64)(min)
	_go_max_ = (float64)(max)
	return
}

func (_self_ *SpinButton) GetSnapToTicks() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_snap_to_ticks((*C.GtkSpinButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SpinButton) GetUpdatePolicy() (_return_ C.GtkSpinButtonUpdatePolicy) {
	_return_ = C.gtk_spin_button_get_update_policy((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_spin_button_get_value((*C.GtkSpinButton)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *SpinButton) GetValueAsInt() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_spin_button_get_value_as_int((*C.GtkSpinButton)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *SpinButton) GetWrap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_wrap((*C.GtkSpinButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SpinButton) SetAdjustment(adjustment *Adjustment) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(adjustment))
	C.gtk_spin_button_set_adjustment((*C.GtkSpinButton)(_self_), _cgo_adjustment_)
	return
}

func (_self_ *SpinButton) SetDigits(digits uint) () {
	_cgo_digits_ := (C.guint)(digits)
	C.gtk_spin_button_set_digits((*C.GtkSpinButton)(_self_), _cgo_digits_)
	return
}

func (_self_ *SpinButton) SetIncrements(step float64, page float64) () {
	_cgo_step_ := (C.gdouble)(step)
	_cgo_page_ := (C.gdouble)(page)
	C.gtk_spin_button_set_increments((*C.GtkSpinButton)(_self_), _cgo_step_, _cgo_page_)
	return
}

func (_self_ *SpinButton) SetNumeric(numeric bool) () {
	_cgo_numeric_ := C.glibfalse()
	if numeric { _cgo_numeric_ = C.glibtrue() }
	C.gtk_spin_button_set_numeric((*C.GtkSpinButton)(_self_), _cgo_numeric_)
	return
}

func (_self_ *SpinButton) SetRange(min float64, max float64) () {
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	C.gtk_spin_button_set_range((*C.GtkSpinButton)(_self_), _cgo_min_, _cgo_max_)
	return
}

func (_self_ *SpinButton) SetSnapToTicks(snap_to_ticks bool) () {
	_cgo_snap_to_ticks_ := C.glibfalse()
	if snap_to_ticks { _cgo_snap_to_ticks_ = C.glibtrue() }
	C.gtk_spin_button_set_snap_to_ticks((*C.GtkSpinButton)(_self_), _cgo_snap_to_ticks_)
	return
}

func (_self_ *SpinButton) SetUpdatePolicy(policy C.GtkSpinButtonUpdatePolicy) () {
	C.gtk_spin_button_set_update_policy((*C.GtkSpinButton)(_self_), policy)
	return
}

func (_self_ *SpinButton) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_spin_button_set_value((*C.GtkSpinButton)(_self_), _cgo_value_)
	return
}

func (_self_ *SpinButton) SetWrap(wrap bool) () {
	_cgo_wrap_ := C.glibfalse()
	if wrap { _cgo_wrap_ = C.glibtrue() }
	C.gtk_spin_button_set_wrap((*C.GtkSpinButton)(_self_), _cgo_wrap_)
	return
}

func (_self_ *SpinButton) Spin(direction C.GtkSpinType, increment float64) () {
	_cgo_increment_ := (C.gdouble)(increment)
	C.gtk_spin_button_spin((*C.GtkSpinButton)(_self_), direction, _cgo_increment_)
	return
}

func (_self_ *SpinButton) Update() () {
	C.gtk_spin_button_update((*C.GtkSpinButton)(_self_))
	return
}

func SpinnerNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_spinner_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Spinner) Start() () {
	C.gtk_spinner_start((*C.GtkSpinner)(_self_))
	return
}

func (_self_ *Spinner) Stop() () {
	C.gtk_spinner_stop((*C.GtkSpinner)(_self_))
	return
}

func StatusIconNew() (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new()
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromFile(filename string) (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_status_icon_new_from_file(_cgo_filename_)
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromGicon(icon *C.GIcon) (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new_from_gicon(icon)
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromIconName(icon_name string) (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_status_icon_new_from_icon_name(_cgo_icon_name_)
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new_from_pixbuf(pixbuf)
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromStock(stock_id string) (_go__return__ *StatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_status_icon_new_from_stock(_cgo_stock_id_)
	_go__return__ = (*StatusIcon)(unsafe.Pointer(_return_))
	return
}

func StatusIconPositionMenu(menu *Menu, user_data *StatusIcon) (_go_x_ int, _go_y_ int, _go_push_in_ bool) {
	_cgo_menu_ := (*C.GtkMenu)(unsafe.Pointer(menu))
	_cgo_user_data_ := (C.gpointer)(unsafe.Pointer(user_data))
	var x C.gint
	var y C.gint
	var push_in C.gboolean
	C.gtk_status_icon_position_menu(_cgo_menu_, &x, &y, &push_in, _cgo_user_data_)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	_go_push_in_ = push_in == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetGeometry() (_go__return__ bool, screen unsafe.Pointer, area *C.GdkRectangle, orientation *C.GtkOrientation) {
	var _return_ C.gboolean
	_return_ = C._gtk_status_icon_get_geometry((*C.GtkStatusIcon)(_self_), screen, area, orientation)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_status_icon_get_gicon((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetHasTooltip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_get_has_tooltip((*C.GtkStatusIcon)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_icon_name((*C.GtkStatusIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StatusIcon) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_status_icon_get_pixbuf((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_status_icon_get_screen((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_status_icon_get_size((*C.GtkStatusIcon)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *StatusIcon) GetStock() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_stock((*C.GtkStatusIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StatusIcon) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_status_icon_get_storage_type((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_title((*C.GtkStatusIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StatusIcon) GetTooltipMarkup() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_status_icon_get_tooltip_markup((*C.GtkStatusIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StatusIcon) GetTooltipText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_status_icon_get_tooltip_text((*C.GtkStatusIcon)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *StatusIcon) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_get_visible((*C.GtkStatusIcon)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetX11WindowId() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.gtk_status_icon_get_x11_window_id((*C.GtkStatusIcon)(_self_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *StatusIcon) IsEmbedded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_is_embedded((*C.GtkStatusIcon)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) SetFromFile(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_status_icon_set_from_file((*C.GtkStatusIcon)(_self_), _cgo_filename_)
	return
}

func (_self_ *StatusIcon) SetFromGicon(icon *C.GIcon) () {
	C.gtk_status_icon_set_from_gicon((*C.GtkStatusIcon)(_self_), icon)
	return
}

func (_self_ *StatusIcon) SetFromIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_status_icon_set_from_icon_name((*C.GtkStatusIcon)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *StatusIcon) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_status_icon_set_from_pixbuf((*C.GtkStatusIcon)(_self_), pixbuf)
	return
}

func (_self_ *StatusIcon) SetFromStock(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_status_icon_set_from_stock((*C.GtkStatusIcon)(_self_), _cgo_stock_id_)
	return
}

func (_self_ *StatusIcon) SetHasTooltip(has_tooltip bool) () {
	_cgo_has_tooltip_ := C.glibfalse()
	if has_tooltip { _cgo_has_tooltip_ = C.glibtrue() }
	C.gtk_status_icon_set_has_tooltip((*C.GtkStatusIcon)(_self_), _cgo_has_tooltip_)
	return
}

func (_self_ *StatusIcon) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_status_icon_set_name((*C.GtkStatusIcon)(_self_), _cgo_name_)
	return
}

func (_self_ *StatusIcon) SetScreen(screen *C.GdkScreen) () {
	C.gtk_status_icon_set_screen((*C.GtkStatusIcon)(_self_), screen)
	return
}

func (_self_ *StatusIcon) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_status_icon_set_title((*C.GtkStatusIcon)(_self_), _cgo_title_)
	return
}

func (_self_ *StatusIcon) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_status_icon_set_tooltip_markup((*C.GtkStatusIcon)(_self_), _cgo_markup_)
	return
}

func (_self_ *StatusIcon) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_status_icon_set_tooltip_text((*C.GtkStatusIcon)(_self_), _cgo_text_)
	return
}

func (_self_ *StatusIcon) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_status_icon_set_visible((*C.GtkStatusIcon)(_self_), _cgo_visible_)
	return
}

func StatusbarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_statusbar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Statusbar) GetContextId(context_description string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_context_description_ := C.CString(context_description)
	_cgo_context_description_ := (*C.gchar)(unsafe.Pointer(_cstring_context_description_))
	defer C.free(unsafe.Pointer(_cstring_context_description_))
	_return_ = C._gtk_statusbar_get_context_id((*C.GtkStatusbar)(_self_), _cgo_context_description_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Statusbar) GetMessageArea() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_statusbar_get_message_area((*C.GtkStatusbar)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Statusbar) Pop(context_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	C.gtk_statusbar_pop((*C.GtkStatusbar)(_self_), _cgo_context_id_)
	return
}

func (_self_ *Statusbar) Push(context_id uint, text string) (_go__return__ uint) {
	_cgo_context_id_ := (C.guint)(context_id)
	var _return_ C.guint
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_statusbar_push((*C.GtkStatusbar)(_self_), _cgo_context_id_, _cgo_text_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Statusbar) Remove(context_id uint, message_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	_cgo_message_id_ := (C.guint)(message_id)
	C.gtk_statusbar_remove((*C.GtkStatusbar)(_self_), _cgo_context_id_, _cgo_message_id_)
	return
}

func (_self_ *Statusbar) RemoveAll(context_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	C.gtk_statusbar_remove_all((*C.GtkStatusbar)(_self_), _cgo_context_id_)
	return
}

func (_self_ *StockItem) Copy() (_go__return__ *StockItem) {
	var _return_ *C.GtkStockItem
	_return_ = C._gtk_stock_item_copy((*C.GtkStockItem)(_self_))
	_go__return__ = (*StockItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StockItem) Free() () {
	C.gtk_stock_item_free((*C.GtkStockItem)(_self_))
	return
}

func (_self_ *Style) HasContext() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_style_has_context((*C.GtkStyle)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func StyleContextNew() (_go__return__ *StyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_style_context_new()
	_go__return__ = (*StyleContext)(unsafe.Pointer(_return_))
	return
}

func StyleContextAddProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider, priority uint) () {
	_cgo_priority_ := (C.guint)(priority)
	C.gtk_style_context_add_provider_for_screen(screen, provider, _cgo_priority_)
	return
}

func StyleContextRemoveProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider_for_screen(screen, provider)
	return
}

func StyleContextResetWidgets(screen *C.GdkScreen) () {
	C.gtk_style_context_reset_widgets(screen)
	return
}

func (_self_ *StyleContext) AddClass(class_name string) () {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	C._gtk_style_context_add_class((*C.GtkStyleContext)(_self_), _cgo_class_name_)
	return
}

func (_self_ *StyleContext) AddProvider(provider *C.GtkStyleProvider, priority uint) () {
	_cgo_priority_ := (C.guint)(priority)
	C.gtk_style_context_add_provider((*C.GtkStyleContext)(_self_), provider, _cgo_priority_)
	return
}

func (_self_ *StyleContext) AddRegion(region_name string, flags C.GtkRegionFlags) () {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	C._gtk_style_context_add_region((*C.GtkStyleContext)(_self_), _cgo_region_name_, flags)
	return
}

func (_self_ *StyleContext) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_background_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetBorder(state C.GtkStateFlags) (border *Border) {
	var _allocated_border_ C.GtkBorder
	C.gtk_style_context_get_border((*C.GtkStyleContext)(_self_), state, &_allocated_border_)
	border = (*Border)(unsafe.Pointer(&_allocated_border_))
	return
}

func (_self_ *StyleContext) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_border_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_style_context_get_direction((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_style_context_get_font((*C.GtkStyleContext)(_self_), state)
	return
}

func (_self_ *StyleContext) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_style_context_get_junction_sides((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetMargin(state C.GtkStateFlags) (margin *Border) {
	var _allocated_margin_ C.GtkBorder
	C.gtk_style_context_get_margin((*C.GtkStyleContext)(_self_), state, &_allocated_margin_)
	margin = (*Border)(unsafe.Pointer(&_allocated_margin_))
	return
}

func (_self_ *StyleContext) GetPadding(state C.GtkStateFlags) (padding *Border) {
	var _allocated_padding_ C.GtkBorder
	C.gtk_style_context_get_padding((*C.GtkStyleContext)(_self_), state, &_allocated_padding_)
	padding = (*Border)(unsafe.Pointer(&_allocated_padding_))
	return
}

func (_self_ *StyleContext) GetParent() (_go__return__ *StyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_style_context_get_parent((*C.GtkStyleContext)(_self_))
	_go__return__ = (*StyleContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StyleContext) GetPath() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_style_context_get_path((*C.GtkStyleContext)(_self_))
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StyleContext) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_context_get_property((*C.GtkStyleContext)(_self_), _cgo_property_, state, value)
	return
}

func (_self_ *StyleContext) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_style_context_get_screen((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetSection(property string) (_go__return__ *CssSection) {
	var _return_ *C.GtkCssSection
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	_return_ = C._gtk_style_context_get_section((*C.GtkStyleContext)(_self_), _cgo_property_)
	_go__return__ = (*CssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StyleContext) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_style_context_get_state((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetStyleProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_style_context_get_style_property((*C.GtkStyleContext)(_self_), _cgo_property_name_, value)
	return
}

func (_self_ *StyleContext) HasClass(class_name string) (_go__return__ bool) {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_has_class((*C.GtkStyleContext)(_self_), _cgo_class_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StyleContext) HasRegion(region_name string) (_go__return__ bool, flags_return *C.GtkRegionFlags) {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_has_region((*C.GtkStyleContext)(_self_), _cgo_region_name_, flags_return)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StyleContext) Invalidate() () {
	C.gtk_style_context_invalidate((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListClasses() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_classes((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListRegions() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_regions((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) LookupColor(color_name string) (_go__return__ bool, color *C.GdkRGBA) {
	_cstring_color_name_ := C.CString(color_name)
	_cgo_color_name_ := (*C.gchar)(unsafe.Pointer(_cstring_color_name_))
	defer C.free(unsafe.Pointer(_cstring_color_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_lookup_color((*C.GtkStyleContext)(_self_), _cgo_color_name_, color)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StyleContext) LookupIconSet(stock_id string) (_go__return__ *IconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_style_context_lookup_icon_set((*C.GtkStyleContext)(_self_), _cgo_stock_id_)
	_go__return__ = (*IconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StyleContext) RemoveClass(class_name string) () {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	C._gtk_style_context_remove_class((*C.GtkStyleContext)(_self_), _cgo_class_name_)
	return
}

func (_self_ *StyleContext) RemoveProvider(provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider((*C.GtkStyleContext)(_self_), provider)
	return
}

func (_self_ *StyleContext) RemoveRegion(region_name string) () {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	C._gtk_style_context_remove_region((*C.GtkStyleContext)(_self_), _cgo_region_name_)
	return
}

func (_self_ *StyleContext) Restore() () {
	C.gtk_style_context_restore((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) Save() () {
	C.gtk_style_context_save((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) SetBackground(window *C.GdkWindow) () {
	C.gtk_style_context_set_background((*C.GtkStyleContext)(_self_), window)
	return
}

func (_self_ *StyleContext) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_style_context_set_direction((*C.GtkStyleContext)(_self_), direction)
	return
}

func (_self_ *StyleContext) SetJunctionSides(sides C.GtkJunctionSides) () {
	C.gtk_style_context_set_junction_sides((*C.GtkStyleContext)(_self_), sides)
	return
}

func (_self_ *StyleContext) SetParent(parent *StyleContext) () {
	_cgo_parent_ := (*C.GtkStyleContext)(unsafe.Pointer(parent))
	C.gtk_style_context_set_parent((*C.GtkStyleContext)(_self_), _cgo_parent_)
	return
}

func (_self_ *StyleContext) SetPath(path *WidgetPath) () {
	_cgo_path_ := (*C.GtkWidgetPath)(unsafe.Pointer(path))
	C.gtk_style_context_set_path((*C.GtkStyleContext)(_self_), _cgo_path_)
	return
}

func (_self_ *StyleContext) SetScreen(screen *C.GdkScreen) () {
	C.gtk_style_context_set_screen((*C.GtkStyleContext)(_self_), screen)
	return
}

func (_self_ *StyleContext) SetState(flags C.GtkStateFlags) () {
	C.gtk_style_context_set_state((*C.GtkStyleContext)(_self_), flags)
	return
}

func StylePropertiesNew() (_go__return__ *StyleProperties) {
	var _return_ *C.GtkStyleProperties
	_return_ = C.gtk_style_properties_new()
	_go__return__ = (*StyleProperties)(unsafe.Pointer(_return_))
	return
}

func StylePropertiesLookupProperty(property_name string) (_go__return__ bool, parse_func *C.GtkStylePropertyParser, pspec unsafe.Pointer) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_properties_lookup_property(_cgo_property_name_, parse_func, pspec)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func StylePropertiesRegisterProperty(parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	C.gtk_style_properties_register_property(parse_func, pspec)
	return
}

func (_self_ *StyleProperties) Clear() () {
	C.gtk_style_properties_clear((*C.GtkStyleProperties)(_self_))
	return
}

func (_self_ *StyleProperties) GetProperty(property string, state C.GtkStateFlags) (_go__return__ bool, value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_properties_get_property((*C.GtkStyleProperties)(_self_), _cgo_property_, state, value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *StyleProperties) LookupColor(name string) (_go__return__ *SymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_style_properties_lookup_color((*C.GtkStyleProperties)(_self_), _cgo_name_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StyleProperties) MapColor(name string, color *SymbolicColor) () {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_style_properties_map_color((*C.GtkStyleProperties)(_self_), _cgo_name_, _cgo_color_)
	return
}

func (_self_ *StyleProperties) Merge(props_to_merge *StyleProperties, replace bool) () {
	_cgo_props_to_merge_ := (*C.GtkStyleProperties)(unsafe.Pointer(props_to_merge))
	_cgo_replace_ := C.glibfalse()
	if replace { _cgo_replace_ = C.glibtrue() }
	C._gtk_style_properties_merge((*C.GtkStyleProperties)(_self_), _cgo_props_to_merge_, _cgo_replace_)
	return
}

func (_self_ *StyleProperties) SetProperty(property string, state C.GtkStateFlags, value *C.GValue) () {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_properties_set_property((*C.GtkStyleProperties)(_self_), _cgo_property_, state, value)
	return
}

func (_self_ *StyleProperties) UnsetProperty(property string, state C.GtkStateFlags) () {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_properties_unset_property((*C.GtkStyleProperties)(_self_), _cgo_property_, state)
	return
}

func SwitchNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_switch_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Switch) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_switch_get_active((*C.GtkSwitch)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Switch) SetActive(is_active bool) () {
	_cgo_is_active_ := C.glibfalse()
	if is_active { _cgo_is_active_ = C.glibtrue() }
	C.gtk_switch_set_active((*C.GtkSwitch)(_self_), _cgo_is_active_)
	return
}

func SymbolicColorNewAlpha(color *SymbolicColor, factor float64) (_go__return__ *SymbolicColor) {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_alpha(_cgo_color_, _cgo_factor_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewLiteral(color *C.GdkRGBA) (_go__return__ *SymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_return_ = C._gtk_symbolic_color_new_literal(color)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewMix(color1 *SymbolicColor, color2 *SymbolicColor, factor float64) (_go__return__ *SymbolicColor) {
	_cgo_color1_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color1))
	_cgo_color2_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color2))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_mix(_cgo_color1_, _cgo_color2_, _cgo_factor_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewName(name string) (_go__return__ *SymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_symbolic_color_new_name(_cgo_name_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewShade(color *SymbolicColor, factor float64) (_go__return__ *SymbolicColor) {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_shade(_cgo_color_, _cgo_factor_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewWin32(theme_class string, id int) (_go__return__ *SymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cgo_id_ := (C.gint)(id)
	_cstring_theme_class_ := C.CString(theme_class)
	_cgo_theme_class_ := (*C.gchar)(unsafe.Pointer(_cstring_theme_class_))
	defer C.free(unsafe.Pointer(_cstring_theme_class_))
	_return_ = C._gtk_symbolic_color_new_win32(_cgo_theme_class_, _cgo_id_)
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SymbolicColor) Ref() (_go__return__ *SymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_return_ = C.gtk_symbolic_color_ref((*C.GtkSymbolicColor)(_self_))
	_go__return__ = (*SymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SymbolicColor) Resolve(props *StyleProperties) (_go__return__ bool, resolved_color *C.GdkRGBA) {
	_cgo_props_ := (*C.GtkStyleProperties)(unsafe.Pointer(props))
	var _return_ C.gboolean
	_return_ = C.gtk_symbolic_color_resolve((*C.GtkSymbolicColor)(_self_), _cgo_props_, resolved_color)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *SymbolicColor) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_symbolic_color_to_string((*C.GtkSymbolicColor)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *SymbolicColor) Unref() () {
	C.gtk_symbolic_color_unref((*C.GtkSymbolicColor)(_self_))
	return
}

func TargetEntryNew(target string, flags uint, info uint) (_go__return__ *TargetEntry) {
	var _return_ *C.GtkTargetEntry
	_cgo_flags_ := (C.guint)(flags)
	_cgo_info_ := (C.guint)(info)
	_cstring_target_ := C.CString(target)
	_cgo_target_ := (*C.gchar)(unsafe.Pointer(_cstring_target_))
	defer C.free(unsafe.Pointer(_cstring_target_))
	_return_ = C._gtk_target_entry_new(_cgo_target_, _cgo_flags_, _cgo_info_)
	_go__return__ = (*TargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TargetEntry) Copy() (_go__return__ *TargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C.gtk_target_entry_copy((*C.GtkTargetEntry)(_self_))
	_go__return__ = (*TargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TargetEntry) Free() () {
	C.gtk_target_entry_free((*C.GtkTargetEntry)(_self_))
	return
}

func (_self_ *TargetList) Add(target C.GdkAtom, flags uint, info uint) () {
	_cgo_flags_ := (C.guint)(flags)
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add((*C.GtkTargetList)(_self_), target, _cgo_flags_, _cgo_info_)
	return
}

func (_self_ *TargetList) AddImageTargets(info uint, writable bool) () {
	_cgo_info_ := (C.guint)(info)
	_cgo_writable_ := C.glibfalse()
	if writable { _cgo_writable_ = C.glibtrue() }
	C.gtk_target_list_add_image_targets((*C.GtkTargetList)(_self_), _cgo_info_, _cgo_writable_)
	return
}

func (_self_ *TargetList) AddRichTextTargets(info uint, deserializable bool, buffer *TextBuffer) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	_cgo_info_ := (C.guint)(info)
	_cgo_deserializable_ := C.glibfalse()
	if deserializable { _cgo_deserializable_ = C.glibtrue() }
	C.gtk_target_list_add_rich_text_targets((*C.GtkTargetList)(_self_), _cgo_info_, _cgo_deserializable_, _cgo_buffer_)
	return
}

func (_self_ *TargetList) AddTextTargets(info uint) () {
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add_text_targets((*C.GtkTargetList)(_self_), _cgo_info_)
	return
}

func (_self_ *TargetList) AddUriTargets(info uint) () {
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add_uri_targets((*C.GtkTargetList)(_self_), _cgo_info_)
	return
}

func (_self_ *TargetList) Find(target C.GdkAtom, info *C.guint) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_target_list_find((*C.GtkTargetList)(_self_), target, info)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TargetList) Ref() (_go__return__ *TargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_target_list_ref((*C.GtkTargetList)(_self_))
	_go__return__ = (*TargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TargetList) Remove(target C.GdkAtom) () {
	C.gtk_target_list_remove((*C.GtkTargetList)(_self_), target)
	return
}

func (_self_ *TargetList) Unref() () {
	C.gtk_target_list_unref((*C.GtkTargetList)(_self_))
	return
}

func TextAttributesNew() (_go__return__ *TextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_new()
	_go__return__ = (*TextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextAttributes) Copy() (_go__return__ *TextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_copy((*C.GtkTextAttributes)(_self_))
	_go__return__ = (*TextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextAttributes) CopyValues(dest *TextAttributes) () {
	_cgo_dest_ := (*C.GtkTextAttributes)(unsafe.Pointer(dest))
	C.gtk_text_attributes_copy_values((*C.GtkTextAttributes)(_self_), _cgo_dest_)
	return
}

func (_self_ *TextAttributes) Ref() (_go__return__ *TextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_ref((*C.GtkTextAttributes)(_self_))
	_go__return__ = (*TextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextAttributes) Unref() () {
	C.gtk_text_attributes_unref((*C.GtkTextAttributes)(_self_))
	return
}

func TextBufferNew(table *TextTagTable) (_go__return__ *TextBuffer) {
	_cgo_table_ := (*C.GtkTextTagTable)(unsafe.Pointer(table))
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_buffer_new(_cgo_table_)
	_go__return__ = (*TextBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) AddMark(mark *TextMark, where *TextIter) () {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_add_mark((*C.GtkTextBuffer)(_self_), _cgo_mark_, _cgo_where_)
	return
}

func (_self_ *TextBuffer) AddSelectionClipboard(clipboard *Clipboard) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(unsafe.Pointer(clipboard))
	C.gtk_text_buffer_add_selection_clipboard((*C.GtkTextBuffer)(_self_), _cgo_clipboard_)
	return
}

func (_self_ *TextBuffer) ApplyTag(tag *TextTag, start *TextIter, end *TextIter) () {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_apply_tag((*C.GtkTextBuffer)(_self_), _cgo_tag_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) ApplyTagByName(name string, start *TextIter, end *TextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_apply_tag_by_name((*C.GtkTextBuffer)(_self_), _cgo_name_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) Backspace(iter *TextIter, interactive bool, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_interactive_ := C.glibfalse()
	if interactive { _cgo_interactive_ = C.glibtrue() }
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_backspace((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_interactive_, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) BeginUserAction() () {
	C.gtk_text_buffer_begin_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) CopyClipboard(clipboard *Clipboard) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(unsafe.Pointer(clipboard))
	C.gtk_text_buffer_copy_clipboard((*C.GtkTextBuffer)(_self_), _cgo_clipboard_)
	return
}

func (_self_ *TextBuffer) CreateChildAnchor(iter *TextIter) (_go__return__ *TextChildAnchor) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ *C.GtkTextChildAnchor
	_return_ = C.gtk_text_buffer_create_child_anchor((*C.GtkTextBuffer)(_self_), _cgo_iter_)
	_go__return__ = (*TextChildAnchor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) CreateMark(mark_name string, where *TextIter, left_gravity bool) (_go__return__ *TextMark) {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	var _return_ *C.GtkTextMark
	_cstring_mark_name_ := C.CString(mark_name)
	_cgo_mark_name_ := (*C.gchar)(unsafe.Pointer(_cstring_mark_name_))
	defer C.free(unsafe.Pointer(_cstring_mark_name_))
	_cgo_left_gravity_ := C.glibfalse()
	if left_gravity { _cgo_left_gravity_ = C.glibtrue() }
	_return_ = C._gtk_text_buffer_create_mark((*C.GtkTextBuffer)(_self_), _cgo_mark_name_, _cgo_where_, _cgo_left_gravity_)
	_go__return__ = (*TextMark)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) CutClipboard(clipboard *Clipboard, default_editable bool) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(unsafe.Pointer(clipboard))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	C.gtk_text_buffer_cut_clipboard((*C.GtkTextBuffer)(_self_), _cgo_clipboard_, _cgo_default_editable_)
	return
}

func (_self_ *TextBuffer) Delete(start *TextIter, end *TextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C.gtk_text_buffer_delete((*C.GtkTextBuffer)(_self_), _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) DeleteInteractive(start_iter *TextIter, end_iter *TextIter, default_editable bool) (_go__return__ bool) {
	_cgo_start_iter_ := (*C.GtkTextIter)(unsafe.Pointer(start_iter))
	_cgo_end_iter_ := (*C.GtkTextIter)(unsafe.Pointer(end_iter))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_delete_interactive((*C.GtkTextBuffer)(_self_), _cgo_start_iter_, _cgo_end_iter_, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeleteMark(mark *TextMark) () {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	C.gtk_text_buffer_delete_mark((*C.GtkTextBuffer)(_self_), _cgo_mark_)
	return
}

func (_self_ *TextBuffer) DeleteMarkByName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_delete_mark_by_name((*C.GtkTextBuffer)(_self_), _cgo_name_)
	return
}

func (_self_ *TextBuffer) DeleteSelection(interactive bool, default_editable bool) (_go__return__ bool) {
	_cgo_interactive_ := C.glibfalse()
	if interactive { _cgo_interactive_ = C.glibtrue() }
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_delete_selection((*C.GtkTextBuffer)(_self_), _cgo_interactive_, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeserializeGetCanCreateTags(format C.GdkAtom) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_deserialize_get_can_create_tags((*C.GtkTextBuffer)(_self_), format)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeserializeSetCanCreateTags(format C.GdkAtom, can_create_tags bool) () {
	_cgo_can_create_tags_ := C.glibfalse()
	if can_create_tags { _cgo_can_create_tags_ = C.glibtrue() }
	C.gtk_text_buffer_deserialize_set_can_create_tags((*C.GtkTextBuffer)(_self_), format, _cgo_can_create_tags_)
	return
}

func (_self_ *TextBuffer) EndUserAction() () {
	C.gtk_text_buffer_end_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetBounds() (start *TextIter, end *TextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	C.gtk_text_buffer_get_bounds((*C.GtkTextBuffer)(_self_), &_allocated_start_, &_allocated_end_)
	start = (*TextIter)(unsafe.Pointer(&_allocated_start_))
	end = (*TextIter)(unsafe.Pointer(&_allocated_end_))
	return
}

func (_self_ *TextBuffer) GetCharCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_buffer_get_char_count((*C.GtkTextBuffer)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextBuffer) GetCopyTargetList() (_go__return__ *TargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_text_buffer_get_copy_target_list((*C.GtkTextBuffer)(_self_))
	_go__return__ = (*TargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetDeserializeFormats() (_return_ *C.GdkAtom, _go_n_formats_ int) {
	var n_formats C.gint
	_return_ = C.gtk_text_buffer_get_deserialize_formats((*C.GtkTextBuffer)(_self_), &n_formats)
	_go_n_formats_ = (int)(n_formats)
	return
}

func (_self_ *TextBuffer) GetEndIter() (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_end_iter((*C.GtkTextBuffer)(_self_), &_allocated_iter_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetHasSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_has_selection((*C.GtkTextBuffer)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) GetInsert() (_go__return__ *TextMark) {
	var _return_ *C.GtkTextMark
	_return_ = C.gtk_text_buffer_get_insert((*C.GtkTextBuffer)(_self_))
	_go__return__ = (*TextMark)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetIterAtChildAnchor(anchor *TextChildAnchor) (iter *TextIter) {
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(unsafe.Pointer(anchor))
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_iter_at_child_anchor((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_anchor_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetIterAtLine(line_number int) (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	C.gtk_text_buffer_get_iter_at_line((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_line_number_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetIterAtLineIndex(line_number int, byte_index int) (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	_cgo_byte_index_ := (C.gint)(byte_index)
	C.gtk_text_buffer_get_iter_at_line_index((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_line_number_, _cgo_byte_index_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetIterAtLineOffset(line_number int, char_offset int) (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_buffer_get_iter_at_line_offset((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_line_number_, _cgo_char_offset_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetIterAtMark(mark *TextMark) (iter *TextIter) {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_iter_at_mark((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_mark_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetIterAtOffset(char_offset int) (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_buffer_get_iter_at_offset((*C.GtkTextBuffer)(_self_), &_allocated_iter_, _cgo_char_offset_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetLineCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_buffer_get_line_count((*C.GtkTextBuffer)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextBuffer) GetMark(name string) (_go__return__ *TextMark) {
	var _return_ *C.GtkTextMark
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_buffer_get_mark((*C.GtkTextBuffer)(_self_), _cgo_name_)
	_go__return__ = (*TextMark)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetModified() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_modified((*C.GtkTextBuffer)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) GetPasteTargetList() (_go__return__ *TargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_text_buffer_get_paste_target_list((*C.GtkTextBuffer)(_self_))
	_go__return__ = (*TargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetSelectionBound() (_go__return__ *TextMark) {
	var _return_ *C.GtkTextMark
	_return_ = C.gtk_text_buffer_get_selection_bound((*C.GtkTextBuffer)(_self_))
	_go__return__ = (*TextMark)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetSelectionBounds() (_go__return__ bool, start *TextIter, end *TextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_selection_bounds((*C.GtkTextBuffer)(_self_), &_allocated_start_, &_allocated_end_)
	start = (*TextIter)(unsafe.Pointer(&_allocated_start_))
	end = (*TextIter)(unsafe.Pointer(&_allocated_end_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) GetSerializeFormats() (_return_ *C.GdkAtom, _go_n_formats_ int) {
	var n_formats C.gint
	_return_ = C.gtk_text_buffer_get_serialize_formats((*C.GtkTextBuffer)(_self_), &n_formats)
	_go_n_formats_ = (int)(n_formats)
	return
}

func (_self_ *TextBuffer) GetSlice(start *TextIter, end *TextIter, include_hidden_chars bool) (_go__return__ string) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_cgo_include_hidden_chars_ := C.glibfalse()
	if include_hidden_chars { _cgo_include_hidden_chars_ = C.glibtrue() }
	_return_ = C._gtk_text_buffer_get_slice((*C.GtkTextBuffer)(_self_), _cgo_start_, _cgo_end_, _cgo_include_hidden_chars_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextBuffer) GetStartIter() (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_start_iter((*C.GtkTextBuffer)(_self_), &_allocated_iter_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextBuffer) GetTagTable() (_go__return__ *TextTagTable) {
	var _return_ *C.GtkTextTagTable
	_return_ = C.gtk_text_buffer_get_tag_table((*C.GtkTextBuffer)(_self_))
	_go__return__ = (*TextTagTable)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) GetText(start *TextIter, end *TextIter, include_hidden_chars bool) (_go__return__ string) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_cgo_include_hidden_chars_ := C.glibfalse()
	if include_hidden_chars { _cgo_include_hidden_chars_ = C.glibtrue() }
	_return_ = C._gtk_text_buffer_get_text((*C.GtkTextBuffer)(_self_), _cgo_start_, _cgo_end_, _cgo_include_hidden_chars_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextBuffer) Insert(iter *TextIter, text string, len_ int) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_insert((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_text_, _cgo_len__)
	return
}

func (_self_ *TextBuffer) InsertAtCursor(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_insert_at_cursor((*C.GtkTextBuffer)(_self_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *TextBuffer) InsertChildAnchor(iter *TextIter, anchor *TextChildAnchor) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(unsafe.Pointer(anchor))
	C.gtk_text_buffer_insert_child_anchor((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_anchor_)
	return
}

func (_self_ *TextBuffer) InsertInteractive(iter *TextIter, text string, len_ int, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_interactive((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_text_, _cgo_len__, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) InsertInteractiveAtCursor(text string, len_ int, default_editable bool) (_go__return__ bool) {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_interactive_at_cursor((*C.GtkTextBuffer)(_self_), _cgo_text_, _cgo_len__, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) InsertPixbuf(iter *TextIter, pixbuf *C.GdkPixbuf) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C.gtk_text_buffer_insert_pixbuf((*C.GtkTextBuffer)(_self_), _cgo_iter_, pixbuf)
	return
}

func (_self_ *TextBuffer) InsertRange(iter *TextIter, start *TextIter, end *TextIter) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_insert_range((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) InsertRangeInteractive(iter *TextIter, start *TextIter, end *TextIter, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_range_interactive((*C.GtkTextBuffer)(_self_), _cgo_iter_, _cgo_start_, _cgo_end_, _cgo_default_editable_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) MoveMark(mark *TextMark, where *TextIter) () {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_move_mark((*C.GtkTextBuffer)(_self_), _cgo_mark_, _cgo_where_)
	return
}

func (_self_ *TextBuffer) MoveMarkByName(name string, where *TextIter) () {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_move_mark_by_name((*C.GtkTextBuffer)(_self_), _cgo_name_, _cgo_where_)
	return
}

func (_self_ *TextBuffer) PasteClipboard(clipboard *Clipboard, override_location *TextIter, default_editable bool) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(unsafe.Pointer(clipboard))
	_cgo_override_location_ := (*C.GtkTextIter)(unsafe.Pointer(override_location))
	_cgo_default_editable_ := C.glibfalse()
	if default_editable { _cgo_default_editable_ = C.glibtrue() }
	C.gtk_text_buffer_paste_clipboard((*C.GtkTextBuffer)(_self_), _cgo_clipboard_, _cgo_override_location_, _cgo_default_editable_)
	return
}

func (_self_ *TextBuffer) PlaceCursor(where *TextIter) () {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_place_cursor((*C.GtkTextBuffer)(_self_), _cgo_where_)
	return
}

func (_self_ *TextBuffer) RegisterDeserializeFormat(mime_type string, function C.GtkTextBufferDeserializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	_return_ = C._gtk_text_buffer_register_deserialize_format((*C.GtkTextBuffer)(_self_), _cgo_mime_type_, function, user_data, user_data_destroy)
	return
}

func (_self_ *TextBuffer) RegisterDeserializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cstring_tagset_name_ := C.CString(tagset_name)
	_cgo_tagset_name_ := (*C.gchar)(unsafe.Pointer(_cstring_tagset_name_))
	defer C.free(unsafe.Pointer(_cstring_tagset_name_))
	_return_ = C._gtk_text_buffer_register_deserialize_tagset((*C.GtkTextBuffer)(_self_), _cgo_tagset_name_)
	return
}

func (_self_ *TextBuffer) RegisterSerializeFormat(mime_type string, function C.GtkTextBufferSerializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	_return_ = C._gtk_text_buffer_register_serialize_format((*C.GtkTextBuffer)(_self_), _cgo_mime_type_, function, user_data, user_data_destroy)
	return
}

func (_self_ *TextBuffer) RegisterSerializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cstring_tagset_name_ := C.CString(tagset_name)
	_cgo_tagset_name_ := (*C.gchar)(unsafe.Pointer(_cstring_tagset_name_))
	defer C.free(unsafe.Pointer(_cstring_tagset_name_))
	_return_ = C._gtk_text_buffer_register_serialize_tagset((*C.GtkTextBuffer)(_self_), _cgo_tagset_name_)
	return
}

func (_self_ *TextBuffer) RemoveAllTags(start *TextIter, end *TextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_remove_all_tags((*C.GtkTextBuffer)(_self_), _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) RemoveSelectionClipboard(clipboard *Clipboard) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(unsafe.Pointer(clipboard))
	C.gtk_text_buffer_remove_selection_clipboard((*C.GtkTextBuffer)(_self_), _cgo_clipboard_)
	return
}

func (_self_ *TextBuffer) RemoveTag(tag *TextTag, start *TextIter, end *TextIter) () {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_remove_tag((*C.GtkTextBuffer)(_self_), _cgo_tag_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) RemoveTagByName(name string, start *TextIter, end *TextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_remove_tag_by_name((*C.GtkTextBuffer)(_self_), _cgo_name_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *TextBuffer) SelectRange(ins *TextIter, bound *TextIter) () {
	_cgo_ins_ := (*C.GtkTextIter)(unsafe.Pointer(ins))
	_cgo_bound_ := (*C.GtkTextIter)(unsafe.Pointer(bound))
	C._gtk_text_buffer_select_range((*C.GtkTextBuffer)(_self_), _cgo_ins_, _cgo_bound_)
	return
}

func (_self_ *TextBuffer) Serialize(content_buffer *TextBuffer, format C.GdkAtom, start *TextIter, end *TextIter) (_return_ *C.guint8, _go_length_ uint64) {
	_cgo_content_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(content_buffer))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var length C.gsize
	_return_ = C._gtk_text_buffer_serialize((*C.GtkTextBuffer)(_self_), _cgo_content_buffer_, format, _cgo_start_, _cgo_end_, &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *TextBuffer) SetModified(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_text_buffer_set_modified((*C.GtkTextBuffer)(_self_), _cgo_setting_)
	return
}

func (_self_ *TextBuffer) SetText(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_set_text((*C.GtkTextBuffer)(_self_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *TextBuffer) UnregisterDeserializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_deserialize_format((*C.GtkTextBuffer)(_self_), format)
	return
}

func (_self_ *TextBuffer) UnregisterSerializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_serialize_format((*C.GtkTextBuffer)(_self_), format)
	return
}

func TextChildAnchorNew() (_go__return__ *TextChildAnchor) {
	var _return_ *C.GtkTextChildAnchor
	_return_ = C.gtk_text_child_anchor_new()
	_go__return__ = (*TextChildAnchor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextChildAnchor) GetDeleted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_child_anchor_get_deleted((*C.GtkTextChildAnchor)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextChildAnchor) GetWidgets() (_return_ *C.GList) {
	_return_ = C.gtk_text_child_anchor_get_widgets((*C.GtkTextChildAnchor)(_self_))
	return
}

func (_self_ *TextIter) Assign(other *TextIter) () {
	_cgo_other_ := (*C.GtkTextIter)(unsafe.Pointer(other))
	C._gtk_text_iter_assign((*C.GtkTextIter)(_self_), _cgo_other_)
	return
}

func (_self_ *TextIter) BackwardChar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_char((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardChars(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_chars((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *TextIter) (_go__return__ bool) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_backward_find_char((*C.GtkTextIter)(_self_), pred, user_data, _cgo_limit_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardSearch(str string, flags C.GtkTextSearchFlags, limit *TextIter) (_go__return__ bool, match_start *TextIter, match_end *TextIter) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_backward_search((*C.GtkTextIter)(_self_), _cgo_str_, flags, &_allocated_match_start_, &_allocated_match_end_, _cgo_limit_)
	match_start = (*TextIter)(unsafe.Pointer(&_allocated_match_start_))
	match_end = (*TextIter)(unsafe.Pointer(&_allocated_match_end_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardSentenceStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_sentence_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardSentenceStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_sentence_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardToTagToggle(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_to_tag_toggle((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleWordStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_word_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleWordStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_word_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardWordStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_word_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardWordStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_word_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) BeginsTag(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_begins_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) CanInsert(default_editability bool) (_go__return__ bool) {
	_cgo_default_editability_ := C.glibfalse()
	if default_editability { _cgo_default_editability_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_can_insert((*C.GtkTextIter)(_self_), _cgo_default_editability_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) Compare(rhs *TextIter) (_go__return__ int) {
	_cgo_rhs_ := (*C.GtkTextIter)(unsafe.Pointer(rhs))
	var _return_ C.gint
	_return_ = C._gtk_text_iter_compare((*C.GtkTextIter)(_self_), _cgo_rhs_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) Copy() (_go__return__ *TextIter) {
	var _return_ *C.GtkTextIter
	_return_ = C._gtk_text_iter_copy((*C.GtkTextIter)(_self_))
	_go__return__ = (*TextIter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextIter) Editable(default_setting bool) (_go__return__ bool) {
	_cgo_default_setting_ := C.glibfalse()
	if default_setting { _cgo_default_setting_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_editable((*C.GtkTextIter)(_self_), _cgo_default_setting_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsTag(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) Equal(rhs *TextIter) (_go__return__ bool) {
	_cgo_rhs_ := (*C.GtkTextIter)(unsafe.Pointer(rhs))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_equal((*C.GtkTextIter)(_self_), _cgo_rhs_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardChar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_char((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardChars(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_chars((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *TextIter) (_go__return__ bool) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_forward_find_char((*C.GtkTextIter)(_self_), pred, user_data, _cgo_limit_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardSearch(str string, flags C.GtkTextSearchFlags, limit *TextIter) (_go__return__ bool, match_start *TextIter, match_end *TextIter) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_forward_search((*C.GtkTextIter)(_self_), _cgo_str_, flags, &_allocated_match_start_, &_allocated_match_end_, _cgo_limit_)
	match_start = (*TextIter)(unsafe.Pointer(&_allocated_match_start_))
	match_end = (*TextIter)(unsafe.Pointer(&_allocated_match_end_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardSentenceEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_sentence_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardSentenceEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_sentence_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardToEnd() () {
	C.gtk_text_iter_forward_to_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardToLineEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_to_line_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardToTagToggle(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_to_tag_toggle((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_word_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_word_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardWordEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_word_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardWordEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_word_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) Free() () {
	C.gtk_text_iter_free((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetAttributes() (_go__return__ bool, values *TextAttributes) {
	var _allocated_values_ C.GtkTextAttributes
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_get_attributes((*C.GtkTextIter)(_self_), &_allocated_values_)
	values = (*TextAttributes)(unsafe.Pointer(&_allocated_values_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) GetBuffer() (_go__return__ *TextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C._gtk_text_iter_get_buffer((*C.GtkTextIter)(_self_))
	_go__return__ = (*TextBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextIter) GetBytesInLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_bytes_in_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetChar() (_return_ C.gunichar) {
	_return_ = C._gtk_text_iter_get_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetCharsInLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_chars_in_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetChildAnchor() (_go__return__ *TextChildAnchor) {
	var _return_ *C.GtkTextChildAnchor
	_return_ = C._gtk_text_iter_get_child_anchor((*C.GtkTextIter)(_self_))
	_go__return__ = (*TextChildAnchor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextIter) GetLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C._gtk_text_iter_get_language((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetLineIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line_index((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetLineOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetMarks() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_marks((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_text_iter_get_pixbuf((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetSlice(end *TextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_slice((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextIter) GetTags() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_tags((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetText(end *TextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_text((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextIter) GetToggledTags(toggled_on bool) (_return_ *C.GSList) {
	_cgo_toggled_on_ := C.glibfalse()
	if toggled_on { _cgo_toggled_on_ = C.glibtrue() }
	_return_ = C._gtk_text_iter_get_toggled_tags((*C.GtkTextIter)(_self_), _cgo_toggled_on_)
	return
}

func (_self_ *TextIter) GetVisibleLineIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_visible_line_index((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetVisibleLineOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_visible_line_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextIter) GetVisibleSlice(end *TextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_visible_slice((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextIter) GetVisibleText(end *TextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_visible_text((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextIter) HasTag(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_has_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) InRange(start *TextIter, end *TextIter) (_go__return__ bool) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_in_range((*C.GtkTextIter)(_self_), _cgo_start_, _cgo_end_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) InsideSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_inside_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) InsideWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_inside_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) Order(second *TextIter) () {
	_cgo_second_ := (*C.GtkTextIter)(unsafe.Pointer(second))
	C.gtk_text_iter_order((*C.GtkTextIter)(_self_), _cgo_second_)
	return
}

func (_self_ *TextIter) SetLine(line_number int) () {
	_cgo_line_number_ := (C.gint)(line_number)
	C.gtk_text_iter_set_line((*C.GtkTextIter)(_self_), _cgo_line_number_)
	return
}

func (_self_ *TextIter) SetLineIndex(byte_on_line int) () {
	_cgo_byte_on_line_ := (C.gint)(byte_on_line)
	C.gtk_text_iter_set_line_index((*C.GtkTextIter)(_self_), _cgo_byte_on_line_)
	return
}

func (_self_ *TextIter) SetLineOffset(char_on_line int) () {
	_cgo_char_on_line_ := (C.gint)(char_on_line)
	C.gtk_text_iter_set_line_offset((*C.GtkTextIter)(_self_), _cgo_char_on_line_)
	return
}

func (_self_ *TextIter) SetOffset(char_offset int) () {
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_iter_set_offset((*C.GtkTextIter)(_self_), _cgo_char_offset_)
	return
}

func (_self_ *TextIter) SetVisibleLineIndex(byte_on_line int) () {
	_cgo_byte_on_line_ := (C.gint)(byte_on_line)
	C.gtk_text_iter_set_visible_line_index((*C.GtkTextIter)(_self_), _cgo_byte_on_line_)
	return
}

func (_self_ *TextIter) SetVisibleLineOffset(char_on_line int) () {
	_cgo_char_on_line_ := (C.gint)(char_on_line)
	C.gtk_text_iter_set_visible_line_offset((*C.GtkTextIter)(_self_), _cgo_char_on_line_)
	return
}

func (_self_ *TextIter) StartsLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) StartsSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) StartsWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextIter) TogglesTag(tag *TextTag) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_toggles_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TextMarkNew(name string, left_gravity bool) (_go__return__ *TextMark) {
	var _return_ *C.GtkTextMark
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cgo_left_gravity_ := C.glibfalse()
	if left_gravity { _cgo_left_gravity_ = C.glibtrue() }
	_return_ = C._gtk_text_mark_new(_cgo_name_, _cgo_left_gravity_)
	_go__return__ = (*TextMark)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextMark) GetBuffer() (_go__return__ *TextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_mark_get_buffer((*C.GtkTextMark)(_self_))
	_go__return__ = (*TextBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextMark) GetDeleted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_deleted((*C.GtkTextMark)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextMark) GetLeftGravity() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_left_gravity((*C.GtkTextMark)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextMark) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_text_mark_get_name((*C.GtkTextMark)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextMark) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_visible((*C.GtkTextMark)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextMark) SetVisible(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_text_mark_set_visible((*C.GtkTextMark)(_self_), _cgo_setting_)
	return
}

func TextTagNew(name string) (_go__return__ *TextTag) {
	var _return_ *C.GtkTextTag
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_tag_new(_cgo_name_)
	_go__return__ = (*TextTag)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextTag) Event(event_object *C.GObject, event *C.GdkEvent, iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C._gtk_text_tag_event((*C.GtkTextTag)(_self_), event_object, event, _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextTag) GetPriority() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_tag_get_priority((*C.GtkTextTag)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextTag) SetPriority(priority int) () {
	_cgo_priority_ := (C.gint)(priority)
	C.gtk_text_tag_set_priority((*C.GtkTextTag)(_self_), _cgo_priority_)
	return
}

func TextTagTableNew() (_go__return__ *TextTagTable) {
	var _return_ *C.GtkTextTagTable
	_return_ = C.gtk_text_tag_table_new()
	_go__return__ = (*TextTagTable)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextTagTable) Add(tag *TextTag) () {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	C.gtk_text_tag_table_add((*C.GtkTextTagTable)(_self_), _cgo_tag_)
	return
}

func (_self_ *TextTagTable) Foreach(func_ C.GtkTextTagTableForeach, data C.gpointer) () {
	C.gtk_text_tag_table_foreach((*C.GtkTextTagTable)(_self_), func_, data)
	return
}

func (_self_ *TextTagTable) GetSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_tag_table_get_size((*C.GtkTextTagTable)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextTagTable) Lookup(name string) (_go__return__ *TextTag) {
	var _return_ *C.GtkTextTag
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_tag_table_lookup((*C.GtkTextTagTable)(_self_), _cgo_name_)
	_go__return__ = (*TextTag)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextTagTable) Remove(tag *TextTag) () {
	_cgo_tag_ := (*C.GtkTextTag)(unsafe.Pointer(tag))
	C.gtk_text_tag_table_remove((*C.GtkTextTagTable)(_self_), _cgo_tag_)
	return
}

func TextViewNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_text_view_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TextViewNewWithBuffer(buffer *TextBuffer) (_go__return__ *Widget) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_text_view_new_with_buffer(_cgo_buffer_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextView) AddChildAtAnchor(child *Widget, anchor *TextChildAnchor) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(unsafe.Pointer(anchor))
	C.gtk_text_view_add_child_at_anchor((*C.GtkTextView)(_self_), _cgo_child_, _cgo_anchor_)
	return
}

func (_self_ *TextView) AddChildInWindow(child *Widget, which_window C.GtkTextWindowType, xpos int, ypos int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_xpos_ := (C.gint)(xpos)
	_cgo_ypos_ := (C.gint)(ypos)
	C.gtk_text_view_add_child_in_window((*C.GtkTextView)(_self_), _cgo_child_, which_window, _cgo_xpos_, _cgo_ypos_)
	return
}

func (_self_ *TextView) BackwardDisplayLine(iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_backward_display_line((*C.GtkTextView)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) BackwardDisplayLineStart(iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_backward_display_line_start((*C.GtkTextView)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) BufferToWindowCoords(win C.GtkTextWindowType, buffer_x int, buffer_y int) (_go_window_x_ int, _go_window_y_ int) {
	_cgo_buffer_x_ := (C.gint)(buffer_x)
	_cgo_buffer_y_ := (C.gint)(buffer_y)
	var window_x C.gint
	var window_y C.gint
	C.gtk_text_view_buffer_to_window_coords((*C.GtkTextView)(_self_), win, _cgo_buffer_x_, _cgo_buffer_y_, &window_x, &window_y)
	_go_window_x_ = (int)(window_x)
	_go_window_y_ = (int)(window_y)
	return
}

func (_self_ *TextView) ForwardDisplayLine(iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_forward_display_line((*C.GtkTextView)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) ForwardDisplayLineEnd(iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_forward_display_line_end((*C.GtkTextView)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) GetAcceptsTab() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_accepts_tab((*C.GtkTextView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) GetBorderWindowSize(type_ C.GtkTextWindowType) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_border_window_size((*C.GtkTextView)(_self_), type_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetBuffer() (_go__return__ *TextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_view_get_buffer((*C.GtkTextView)(_self_))
	_go__return__ = (*TextBuffer)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextView) GetCursorLocations(iter *TextIter) (strong *C.GdkRectangle, weak *C.GdkRectangle) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C._gtk_text_view_get_cursor_locations((*C.GtkTextView)(_self_), _cgo_iter_, strong, weak)
	return
}

func (_self_ *TextView) GetCursorVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_cursor_visible((*C.GtkTextView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) GetDefaultAttributes() (_go__return__ *TextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_view_get_default_attributes((*C.GtkTextView)(_self_))
	_go__return__ = (*TextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextView) GetEditable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_editable((*C.GtkTextView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) GetIndent() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_indent((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_text_view_get_input_hints((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_text_view_get_input_purpose((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetIterAtLocation(x int, y int) (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_text_view_get_iter_at_location((*C.GtkTextView)(_self_), &_allocated_iter_, _cgo_x_, _cgo_y_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TextView) GetIterAtPosition(x int, y int) (iter *TextIter, _go_trailing_ int) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var trailing C.gint
	C.gtk_text_view_get_iter_at_position((*C.GtkTextView)(_self_), &_allocated_iter_, &trailing, _cgo_x_, _cgo_y_)
	iter = (*TextIter)(unsafe.Pointer(&_allocated_iter_))
	_go_trailing_ = (int)(trailing)
	return
}

func (_self_ *TextView) GetIterLocation(iter *TextIter) (location *C.GdkRectangle) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C._gtk_text_view_get_iter_location((*C.GtkTextView)(_self_), _cgo_iter_, location)
	return
}

func (_self_ *TextView) GetJustification() (_return_ C.GtkJustification) {
	_return_ = C.gtk_text_view_get_justification((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetLeftMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_left_margin((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetLineAtY(y int) (target_iter *TextIter, _go_line_top_ int) {
	var _allocated_target_iter_ C.GtkTextIter
	_cgo_y_ := (C.gint)(y)
	var line_top C.gint
	C.gtk_text_view_get_line_at_y((*C.GtkTextView)(_self_), &_allocated_target_iter_, _cgo_y_, &line_top)
	target_iter = (*TextIter)(unsafe.Pointer(&_allocated_target_iter_))
	_go_line_top_ = (int)(line_top)
	return
}

func (_self_ *TextView) GetLineYrange(iter *TextIter) (_go_y_ int, _go_height_ int) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var y C.gint
	var height C.gint
	C._gtk_text_view_get_line_yrange((*C.GtkTextView)(_self_), _cgo_iter_, &y, &height)
	_go_y_ = (int)(y)
	_go_height_ = (int)(height)
	return
}

func (_self_ *TextView) GetOverwrite() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_overwrite((*C.GtkTextView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) GetPixelsAboveLines() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_above_lines((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetPixelsBelowLines() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_below_lines((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetPixelsInsideWrap() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_inside_wrap((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetRightMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_right_margin((*C.GtkTextView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextView) GetTabs() (_return_ *C.PangoTabArray) {
	_return_ = C.gtk_text_view_get_tabs((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_text_view_get_visible_rect((*C.GtkTextView)(_self_), visible_rect)
	return
}

func (_self_ *TextView) GetWindow(win C.GtkTextWindowType) (_return_ *C.GdkWindow) {
	_return_ = C.gtk_text_view_get_window((*C.GtkTextView)(_self_), win)
	return
}

func (_self_ *TextView) GetWindowType(window *C.GdkWindow) (_return_ C.GtkTextWindowType) {
	_return_ = C.gtk_text_view_get_window_type((*C.GtkTextView)(_self_), window)
	return
}

func (_self_ *TextView) GetWrapMode() (_return_ C.GtkWrapMode) {
	_return_ = C.gtk_text_view_get_wrap_mode((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ImContextFilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_im_context_filter_keypress((*C.GtkTextView)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) MoveChild(child *Widget, xpos int, ypos int) () {
	_cgo_child_ := (*C.GtkWidget)(unsafe.Pointer(child))
	_cgo_xpos_ := (C.gint)(xpos)
	_cgo_ypos_ := (C.gint)(ypos)
	C.gtk_text_view_move_child((*C.GtkTextView)(_self_), _cgo_child_, _cgo_xpos_, _cgo_ypos_)
	return
}

func (_self_ *TextView) MoveMarkOnscreen(mark *TextMark) (_go__return__ bool) {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_move_mark_onscreen((*C.GtkTextView)(_self_), _cgo_mark_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) MoveVisually(iter *TextIter, count int) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_move_visually((*C.GtkTextView)(_self_), _cgo_iter_, _cgo_count_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) PlaceCursorOnscreen() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_place_cursor_onscreen((*C.GtkTextView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) ResetImContext() () {
	C.gtk_text_view_reset_im_context((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ScrollMarkOnscreen(mark *TextMark) () {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	C.gtk_text_view_scroll_mark_onscreen((*C.GtkTextView)(_self_), _cgo_mark_)
	return
}

func (_self_ *TextView) ScrollToIter(iter *TextIter, within_margin float64, use_align bool, xalign float64, yalign float64) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_within_margin_ := (C.gdouble)(within_margin)
	_cgo_xalign_ := (C.gdouble)(xalign)
	_cgo_yalign_ := (C.gdouble)(yalign)
	_cgo_use_align_ := C.glibfalse()
	if use_align { _cgo_use_align_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_scroll_to_iter((*C.GtkTextView)(_self_), _cgo_iter_, _cgo_within_margin_, _cgo_use_align_, _cgo_xalign_, _cgo_yalign_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) ScrollToMark(mark *TextMark, within_margin float64, use_align bool, xalign float64, yalign float64) () {
	_cgo_mark_ := (*C.GtkTextMark)(unsafe.Pointer(mark))
	_cgo_within_margin_ := (C.gdouble)(within_margin)
	_cgo_xalign_ := (C.gdouble)(xalign)
	_cgo_yalign_ := (C.gdouble)(yalign)
	_cgo_use_align_ := C.glibfalse()
	if use_align { _cgo_use_align_ = C.glibtrue() }
	C.gtk_text_view_scroll_to_mark((*C.GtkTextView)(_self_), _cgo_mark_, _cgo_within_margin_, _cgo_use_align_, _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *TextView) SetAcceptsTab(accepts_tab bool) () {
	_cgo_accepts_tab_ := C.glibfalse()
	if accepts_tab { _cgo_accepts_tab_ = C.glibtrue() }
	C.gtk_text_view_set_accepts_tab((*C.GtkTextView)(_self_), _cgo_accepts_tab_)
	return
}

func (_self_ *TextView) SetBorderWindowSize(type_ C.GtkTextWindowType, size int) () {
	_cgo_size_ := (C.gint)(size)
	C.gtk_text_view_set_border_window_size((*C.GtkTextView)(_self_), type_, _cgo_size_)
	return
}

func (_self_ *TextView) SetBuffer(buffer *TextBuffer) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(unsafe.Pointer(buffer))
	C.gtk_text_view_set_buffer((*C.GtkTextView)(_self_), _cgo_buffer_)
	return
}

func (_self_ *TextView) SetCursorVisible(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_text_view_set_cursor_visible((*C.GtkTextView)(_self_), _cgo_setting_)
	return
}

func (_self_ *TextView) SetEditable(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_text_view_set_editable((*C.GtkTextView)(_self_), _cgo_setting_)
	return
}

func (_self_ *TextView) SetIndent(indent int) () {
	_cgo_indent_ := (C.gint)(indent)
	C.gtk_text_view_set_indent((*C.GtkTextView)(_self_), _cgo_indent_)
	return
}

func (_self_ *TextView) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_text_view_set_input_hints((*C.GtkTextView)(_self_), hints)
	return
}

func (_self_ *TextView) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_text_view_set_input_purpose((*C.GtkTextView)(_self_), purpose)
	return
}

func (_self_ *TextView) SetJustification(justification C.GtkJustification) () {
	C.gtk_text_view_set_justification((*C.GtkTextView)(_self_), justification)
	return
}

func (_self_ *TextView) SetLeftMargin(left_margin int) () {
	_cgo_left_margin_ := (C.gint)(left_margin)
	C.gtk_text_view_set_left_margin((*C.GtkTextView)(_self_), _cgo_left_margin_)
	return
}

func (_self_ *TextView) SetOverwrite(overwrite bool) () {
	_cgo_overwrite_ := C.glibfalse()
	if overwrite { _cgo_overwrite_ = C.glibtrue() }
	C.gtk_text_view_set_overwrite((*C.GtkTextView)(_self_), _cgo_overwrite_)
	return
}

func (_self_ *TextView) SetPixelsAboveLines(pixels_above_lines int) () {
	_cgo_pixels_above_lines_ := (C.gint)(pixels_above_lines)
	C.gtk_text_view_set_pixels_above_lines((*C.GtkTextView)(_self_), _cgo_pixels_above_lines_)
	return
}

func (_self_ *TextView) SetPixelsBelowLines(pixels_below_lines int) () {
	_cgo_pixels_below_lines_ := (C.gint)(pixels_below_lines)
	C.gtk_text_view_set_pixels_below_lines((*C.GtkTextView)(_self_), _cgo_pixels_below_lines_)
	return
}

func (_self_ *TextView) SetPixelsInsideWrap(pixels_inside_wrap int) () {
	_cgo_pixels_inside_wrap_ := (C.gint)(pixels_inside_wrap)
	C.gtk_text_view_set_pixels_inside_wrap((*C.GtkTextView)(_self_), _cgo_pixels_inside_wrap_)
	return
}

func (_self_ *TextView) SetRightMargin(right_margin int) () {
	_cgo_right_margin_ := (C.gint)(right_margin)
	C.gtk_text_view_set_right_margin((*C.GtkTextView)(_self_), _cgo_right_margin_)
	return
}

func (_self_ *TextView) SetTabs(tabs *C.PangoTabArray) () {
	C.gtk_text_view_set_tabs((*C.GtkTextView)(_self_), tabs)
	return
}

func (_self_ *TextView) SetWrapMode(wrap_mode C.GtkWrapMode) () {
	C.gtk_text_view_set_wrap_mode((*C.GtkTextView)(_self_), wrap_mode)
	return
}

func (_self_ *TextView) StartsDisplayLine(iter *TextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C._gtk_text_view_starts_display_line((*C.GtkTextView)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TextView) WindowToBufferCoords(win C.GtkTextWindowType, window_x int, window_y int) (_go_buffer_x_ int, _go_buffer_y_ int) {
	_cgo_window_x_ := (C.gint)(window_x)
	_cgo_window_y_ := (C.gint)(window_y)
	var buffer_x C.gint
	var buffer_y C.gint
	C.gtk_text_view_window_to_buffer_coords((*C.GtkTextView)(_self_), win, _cgo_window_x_, _cgo_window_y_, &buffer_x, &buffer_y)
	_go_buffer_x_ = (int)(buffer_x)
	_go_buffer_y_ = (int)(buffer_y)
	return
}

func ThemingEngineLoad(name string) (_go__return__ *ThemingEngine) {
	var _return_ *C.GtkThemingEngine
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_theming_engine_load(_cgo_name_)
	_go__return__ = (*ThemingEngine)(unsafe.Pointer(_return_))
	return
}

func ThemingEngineRegisterProperty(name_space string, parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	_cstring_name_space_ := C.CString(name_space)
	_cgo_name_space_ := (*C.gchar)(unsafe.Pointer(_cstring_name_space_))
	defer C.free(unsafe.Pointer(_cstring_name_space_))
	C._gtk_theming_engine_register_property(_cgo_name_space_, parse_func, pspec)
	return
}

func (_self_ *ThemingEngine) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_background_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetBorder(state C.GtkStateFlags) (border *Border) {
	var _allocated_border_ C.GtkBorder
	C.gtk_theming_engine_get_border((*C.GtkThemingEngine)(_self_), state, &_allocated_border_)
	border = (*Border)(unsafe.Pointer(&_allocated_border_))
	return
}

func (_self_ *ThemingEngine) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_border_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_theming_engine_get_direction((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_theming_engine_get_font((*C.GtkThemingEngine)(_self_), state)
	return
}

func (_self_ *ThemingEngine) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_theming_engine_get_junction_sides((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetMargin(state C.GtkStateFlags) (margin *Border) {
	var _allocated_margin_ C.GtkBorder
	C.gtk_theming_engine_get_margin((*C.GtkThemingEngine)(_self_), state, &_allocated_margin_)
	margin = (*Border)(unsafe.Pointer(&_allocated_margin_))
	return
}

func (_self_ *ThemingEngine) GetPadding(state C.GtkStateFlags) (padding *Border) {
	var _allocated_padding_ C.GtkBorder
	C.gtk_theming_engine_get_padding((*C.GtkThemingEngine)(_self_), state, &_allocated_padding_)
	padding = (*Border)(unsafe.Pointer(&_allocated_padding_))
	return
}

func (_self_ *ThemingEngine) GetPath() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_theming_engine_get_path((*C.GtkThemingEngine)(_self_))
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ThemingEngine) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_theming_engine_get_property((*C.GtkThemingEngine)(_self_), _cgo_property_, state, value)
	return
}

func (_self_ *ThemingEngine) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_theming_engine_get_screen((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_theming_engine_get_state((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetStyleProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_theming_engine_get_style_property((*C.GtkThemingEngine)(_self_), _cgo_property_name_, value)
	return
}

func (_self_ *ThemingEngine) HasClass(style_class string) (_go__return__ bool) {
	_cstring_style_class_ := C.CString(style_class)
	_cgo_style_class_ := (*C.gchar)(unsafe.Pointer(_cstring_style_class_))
	defer C.free(unsafe.Pointer(_cstring_style_class_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_has_class((*C.GtkThemingEngine)(_self_), _cgo_style_class_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ThemingEngine) HasRegion(style_region string) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cstring_style_region_ := C.CString(style_region)
	_cgo_style_region_ := (*C.gchar)(unsafe.Pointer(_cstring_style_region_))
	defer C.free(unsafe.Pointer(_cstring_style_region_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_has_region((*C.GtkThemingEngine)(_self_), _cgo_style_region_, flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ThemingEngine) LookupColor(color_name string) (_go__return__ bool, color *C.GdkRGBA) {
	_cstring_color_name_ := C.CString(color_name)
	_cgo_color_name_ := (*C.gchar)(unsafe.Pointer(_cstring_color_name_))
	defer C.free(unsafe.Pointer(_cstring_color_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_lookup_color((*C.GtkThemingEngine)(_self_), _cgo_color_name_, color)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func ToggleActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ *ToggleAction) {
	var _return_ *C.GtkToggleAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_toggle_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = (*ToggleAction)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToggleAction) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_action_get_active((*C.GtkToggleAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleAction) GetDrawAsRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_action_get_draw_as_radio((*C.GtkToggleAction)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleAction) SetActive(is_active bool) () {
	_cgo_is_active_ := C.glibfalse()
	if is_active { _cgo_is_active_ = C.glibtrue() }
	C.gtk_toggle_action_set_active((*C.GtkToggleAction)(_self_), _cgo_is_active_)
	return
}

func (_self_ *ToggleAction) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_draw_as_radio_ := C.glibfalse()
	if draw_as_radio { _cgo_draw_as_radio_ = C.glibtrue() }
	C.gtk_toggle_action_set_draw_as_radio((*C.GtkToggleAction)(_self_), _cgo_draw_as_radio_)
	return
}

func (_self_ *ToggleAction) Toggled() () {
	C.gtk_toggle_action_toggled((*C.GtkToggleAction)(_self_))
	return
}

func ToggleButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_toggle_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ToggleButtonNewWithLabel(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_toggle_button_new_with_label(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ToggleButtonNewWithMnemonic(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_toggle_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToggleButton) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_active((*C.GtkToggleButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) GetInconsistent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_inconsistent((*C.GtkToggleButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) GetMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_mode((*C.GtkToggleButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) SetActive(is_active bool) () {
	_cgo_is_active_ := C.glibfalse()
	if is_active { _cgo_is_active_ = C.glibtrue() }
	C.gtk_toggle_button_set_active((*C.GtkToggleButton)(_self_), _cgo_is_active_)
	return
}

func (_self_ *ToggleButton) SetInconsistent(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_toggle_button_set_inconsistent((*C.GtkToggleButton)(_self_), _cgo_setting_)
	return
}

func (_self_ *ToggleButton) SetMode(draw_indicator bool) () {
	_cgo_draw_indicator_ := C.glibfalse()
	if draw_indicator { _cgo_draw_indicator_ = C.glibtrue() }
	C.gtk_toggle_button_set_mode((*C.GtkToggleButton)(_self_), _cgo_draw_indicator_)
	return
}

func (_self_ *ToggleButton) Toggled() () {
	C.gtk_toggle_button_toggled((*C.GtkToggleButton)(_self_))
	return
}

func ToggleToolButtonNew() (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_toggle_tool_button_new()
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func ToggleToolButtonNewFromStock(stock_id string) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_toggle_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToggleToolButton) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_tool_button_get_active((*C.GtkToggleToolButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToggleToolButton) SetActive(is_active bool) () {
	_cgo_is_active_ := C.glibfalse()
	if is_active { _cgo_is_active_ = C.glibtrue() }
	C.gtk_toggle_tool_button_set_active((*C.GtkToggleToolButton)(_self_), _cgo_is_active_)
	return
}

func ToolButtonNew(icon_widget *Widget, label string) (_go__return__ *ToolItem) {
	_cgo_icon_widget_ := (*C.GtkWidget)(unsafe.Pointer(icon_widget))
	var _return_ *C.GtkToolItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_tool_button_new(_cgo_icon_widget_, _cgo_label_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func ToolButtonNewFromStock(stock_id string) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolButton) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_icon_name((*C.GtkToolButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ToolButton) GetIconWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_button_get_icon_widget((*C.GtkToolButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolButton) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_label((*C.GtkToolButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ToolButton) GetLabelWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_button_get_label_widget((*C.GtkToolButton)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolButton) GetStockId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_stock_id((*C.GtkToolButton)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ToolButton) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_button_get_use_underline((*C.GtkToolButton)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolButton) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_tool_button_set_icon_name((*C.GtkToolButton)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *ToolButton) SetIconWidget(icon_widget *Widget) () {
	_cgo_icon_widget_ := (*C.GtkWidget)(unsafe.Pointer(icon_widget))
	C.gtk_tool_button_set_icon_widget((*C.GtkToolButton)(_self_), _cgo_icon_widget_)
	return
}

func (_self_ *ToolButton) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_tool_button_set_label((*C.GtkToolButton)(_self_), _cgo_label_)
	return
}

func (_self_ *ToolButton) SetLabelWidget(label_widget *Widget) () {
	_cgo_label_widget_ := (*C.GtkWidget)(unsafe.Pointer(label_widget))
	C.gtk_tool_button_set_label_widget((*C.GtkToolButton)(_self_), _cgo_label_widget_)
	return
}

func (_self_ *ToolButton) SetStockId(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_tool_button_set_stock_id((*C.GtkToolButton)(_self_), _cgo_stock_id_)
	return
}

func (_self_ *ToolButton) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := C.glibfalse()
	if use_underline { _cgo_use_underline_ = C.glibtrue() }
	C.gtk_tool_button_set_use_underline((*C.GtkToolButton)(_self_), _cgo_use_underline_)
	return
}

func ToolItemNew() (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_tool_item_new()
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItem) GetEllipsizeMode() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_get_ellipsize_mode((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_expand((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_homogeneous((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_item_get_icon_size((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetIsImportant() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_is_important((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetProxyMenuItem(menu_item_id string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_menu_item_id_ := C.CString(menu_item_id)
	_cgo_menu_item_id_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_item_id_))
	defer C.free(unsafe.Pointer(_cstring_menu_item_id_))
	_return_ = C._gtk_tool_item_get_proxy_menu_item((*C.GtkToolItem)(_self_), _cgo_menu_item_id_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItem) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_get_relief_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_tool_item_get_text_alignment((*C.GtkToolItem)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ToolItem) GetTextOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_text_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextSizeGroup() (_go__return__ *SizeGroup) {
	var _return_ *C.GtkSizeGroup
	_return_ = C.gtk_tool_item_get_text_size_group((*C.GtkToolItem)(_self_))
	_go__return__ = (*SizeGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItem) GetToolbarStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_item_get_toolbar_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetUseDragWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_use_drag_window((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetVisibleHorizontal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_visible_horizontal((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetVisibleVertical() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_visible_vertical((*C.GtkToolItem)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItem) RebuildMenu() () {
	C.gtk_tool_item_rebuild_menu((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) RetrieveProxyMenuItem() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_item_retrieve_proxy_menu_item((*C.GtkToolItem)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItem) SetExpand(expand bool) () {
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tool_item_set_expand((*C.GtkToolItem)(_self_), _cgo_expand_)
	return
}

func (_self_ *ToolItem) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := C.glibfalse()
	if homogeneous { _cgo_homogeneous_ = C.glibtrue() }
	C.gtk_tool_item_set_homogeneous((*C.GtkToolItem)(_self_), _cgo_homogeneous_)
	return
}

func (_self_ *ToolItem) SetIsImportant(is_important bool) () {
	_cgo_is_important_ := C.glibfalse()
	if is_important { _cgo_is_important_ = C.glibtrue() }
	C.gtk_tool_item_set_is_important((*C.GtkToolItem)(_self_), _cgo_is_important_)
	return
}

func (_self_ *ToolItem) SetProxyMenuItem(menu_item_id string, menu_item *Widget) () {
	_cgo_menu_item_ := (*C.GtkWidget)(unsafe.Pointer(menu_item))
	_cstring_menu_item_id_ := C.CString(menu_item_id)
	_cgo_menu_item_id_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_item_id_))
	defer C.free(unsafe.Pointer(_cstring_menu_item_id_))
	C._gtk_tool_item_set_proxy_menu_item((*C.GtkToolItem)(_self_), _cgo_menu_item_id_, _cgo_menu_item_)
	return
}

func (_self_ *ToolItem) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_tool_item_set_tooltip_markup((*C.GtkToolItem)(_self_), _cgo_markup_)
	return
}

func (_self_ *ToolItem) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_tool_item_set_tooltip_text((*C.GtkToolItem)(_self_), _cgo_text_)
	return
}

func (_self_ *ToolItem) SetUseDragWindow(use_drag_window bool) () {
	_cgo_use_drag_window_ := C.glibfalse()
	if use_drag_window { _cgo_use_drag_window_ = C.glibtrue() }
	C.gtk_tool_item_set_use_drag_window((*C.GtkToolItem)(_self_), _cgo_use_drag_window_)
	return
}

func (_self_ *ToolItem) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_visible_horizontal_ := C.glibfalse()
	if visible_horizontal { _cgo_visible_horizontal_ = C.glibtrue() }
	C.gtk_tool_item_set_visible_horizontal((*C.GtkToolItem)(_self_), _cgo_visible_horizontal_)
	return
}

func (_self_ *ToolItem) SetVisibleVertical(visible_vertical bool) () {
	_cgo_visible_vertical_ := C.glibfalse()
	if visible_vertical { _cgo_visible_vertical_ = C.glibtrue() }
	C.gtk_tool_item_set_visible_vertical((*C.GtkToolItem)(_self_), _cgo_visible_vertical_)
	return
}

func (_self_ *ToolItem) ToolbarReconfigured() () {
	C.gtk_tool_item_toolbar_reconfigured((*C.GtkToolItem)(_self_))
	return
}

func ToolItemGroupNew(label string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_tool_item_group_new(_cgo_label_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItemGroup) GetCollapsed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_group_get_collapsed((*C.GtkToolItemGroup)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolItemGroup) GetDropItem(x int, y int) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_item_group_get_drop_item((*C.GtkToolItemGroup)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItemGroup) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_group_get_ellipsize((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetHeaderRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_group_get_header_relief((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetItemPosition(item *ToolItem) (_go__return__ int) {
	_cgo_item_ := (*C.GtkToolItem)(unsafe.Pointer(item))
	var _return_ C.gint
	_return_ = C.gtk_tool_item_group_get_item_position((*C.GtkToolItemGroup)(_self_), _cgo_item_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ToolItemGroup) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_item_group_get_label((*C.GtkToolItemGroup)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ToolItemGroup) GetLabelWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_item_group_get_label_widget((*C.GtkToolItemGroup)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItemGroup) GetNItems() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_tool_item_group_get_n_items((*C.GtkToolItemGroup)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ToolItemGroup) GetNthItem(index uint) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_index_ := (C.guint)(index)
	_return_ = C.gtk_tool_item_group_get_nth_item((*C.GtkToolItemGroup)(_self_), _cgo_index_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolItemGroup) Insert(item *ToolItem, position int) () {
	_cgo_item_ := (*C.GtkToolItem)(unsafe.Pointer(item))
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_item_group_insert((*C.GtkToolItemGroup)(_self_), _cgo_item_, _cgo_position_)
	return
}

func (_self_ *ToolItemGroup) SetCollapsed(collapsed bool) () {
	_cgo_collapsed_ := C.glibfalse()
	if collapsed { _cgo_collapsed_ = C.glibtrue() }
	C.gtk_tool_item_group_set_collapsed((*C.GtkToolItemGroup)(_self_), _cgo_collapsed_)
	return
}

func (_self_ *ToolItemGroup) SetEllipsize(ellipsize C.PangoEllipsizeMode) () {
	C.gtk_tool_item_group_set_ellipsize((*C.GtkToolItemGroup)(_self_), ellipsize)
	return
}

func (_self_ *ToolItemGroup) SetHeaderRelief(style C.GtkReliefStyle) () {
	C.gtk_tool_item_group_set_header_relief((*C.GtkToolItemGroup)(_self_), style)
	return
}

func (_self_ *ToolItemGroup) SetItemPosition(item *ToolItem, position int) () {
	_cgo_item_ := (*C.GtkToolItem)(unsafe.Pointer(item))
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_item_group_set_item_position((*C.GtkToolItemGroup)(_self_), _cgo_item_, _cgo_position_)
	return
}

func (_self_ *ToolItemGroup) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_tool_item_group_set_label((*C.GtkToolItemGroup)(_self_), _cgo_label_)
	return
}

func (_self_ *ToolItemGroup) SetLabelWidget(label_widget *Widget) () {
	_cgo_label_widget_ := (*C.GtkWidget)(unsafe.Pointer(label_widget))
	C.gtk_tool_item_group_set_label_widget((*C.GtkToolItemGroup)(_self_), _cgo_label_widget_)
	return
}

func ToolPaletteNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_palette_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func ToolPaletteGetDragTargetGroup() (_go__return__ *TargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C._gtk_tool_palette_get_drag_target_group()
	_go__return__ = (*TargetEntry)(unsafe.Pointer(_return_))
	return
}

func ToolPaletteGetDragTargetItem() (_go__return__ *TargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C._gtk_tool_palette_get_drag_target_item()
	_go__return__ = (*TargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolPalette) AddDragDest(widget *Widget, flags C.GtkDestDefaults, targets C.GtkToolPaletteDragTargets, actions C.GdkDragAction) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_tool_palette_add_drag_dest((*C.GtkToolPalette)(_self_), _cgo_widget_, flags, targets, actions)
	return
}

func (_self_ *ToolPalette) GetDragItem(selection *SelectionData) (_go__return__ *Widget) {
	_cgo_selection_ := (*C.GtkSelectionData)(unsafe.Pointer(selection))
	var _return_ *C.GtkWidget
	_return_ = C._gtk_tool_palette_get_drag_item((*C.GtkToolPalette)(_self_), _cgo_selection_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolPalette) GetDropGroup(x int, y int) (_go__return__ *ToolItemGroup) {
	var _return_ *C.GtkToolItemGroup
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_palette_get_drop_group((*C.GtkToolPalette)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (*ToolItemGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolPalette) GetDropItem(x int, y int) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_palette_get_drop_item((*C.GtkToolPalette)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ToolPalette) GetExclusive(group *ToolItemGroup) (_go__return__ bool) {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	var _return_ C.gboolean
	_return_ = C.gtk_tool_palette_get_exclusive((*C.GtkToolPalette)(_self_), _cgo_group_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolPalette) GetExpand(group *ToolItemGroup) (_go__return__ bool) {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	var _return_ C.gboolean
	_return_ = C.gtk_tool_palette_get_expand((*C.GtkToolPalette)(_self_), _cgo_group_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *ToolPalette) GetGroupPosition(group *ToolItemGroup) (_go__return__ int) {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	var _return_ C.gint
	_return_ = C.gtk_tool_palette_get_group_position((*C.GtkToolPalette)(_self_), _cgo_group_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ToolPalette) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_palette_get_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_palette_get_style((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) SetDragSource(targets C.GtkToolPaletteDragTargets) () {
	C.gtk_tool_palette_set_drag_source((*C.GtkToolPalette)(_self_), targets)
	return
}

func (_self_ *ToolPalette) SetExclusive(group *ToolItemGroup, exclusive bool) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	_cgo_exclusive_ := C.glibfalse()
	if exclusive { _cgo_exclusive_ = C.glibtrue() }
	C.gtk_tool_palette_set_exclusive((*C.GtkToolPalette)(_self_), _cgo_group_, _cgo_exclusive_)
	return
}

func (_self_ *ToolPalette) SetExpand(group *ToolItemGroup, expand bool) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tool_palette_set_expand((*C.GtkToolPalette)(_self_), _cgo_group_, _cgo_expand_)
	return
}

func (_self_ *ToolPalette) SetGroupPosition(group *ToolItemGroup, position int) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(unsafe.Pointer(group))
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_palette_set_group_position((*C.GtkToolPalette)(_self_), _cgo_group_, _cgo_position_)
	return
}

func (_self_ *ToolPalette) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_tool_palette_set_icon_size((*C.GtkToolPalette)(_self_), icon_size)
	return
}

func (_self_ *ToolPalette) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_tool_palette_set_style((*C.GtkToolPalette)(_self_), style)
	return
}

func (_self_ *ToolPalette) UnsetIconSize() () {
	C.gtk_tool_palette_unset_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) UnsetStyle() () {
	C.gtk_tool_palette_unset_style((*C.GtkToolPalette)(_self_))
	return
}

func ToolbarNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_toolbar_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Toolbar) GetDropIndex(x int, y int) (_go__return__ int) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_drop_index((*C.GtkToolbar)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Toolbar) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_toolbar_get_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetItemIndex(item *ToolItem) (_go__return__ int) {
	_cgo_item_ := (*C.GtkToolItem)(unsafe.Pointer(item))
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_item_index((*C.GtkToolbar)(_self_), _cgo_item_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Toolbar) GetNItems() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_n_items((*C.GtkToolbar)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Toolbar) GetNthItem(n int) (_go__return__ *ToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_n_ := (C.gint)(n)
	_return_ = C.gtk_toolbar_get_nth_item((*C.GtkToolbar)(_self_), _cgo_n_)
	_go__return__ = (*ToolItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Toolbar) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_toolbar_get_relief_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetShowArrow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toolbar_get_show_arrow((*C.GtkToolbar)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Toolbar) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_toolbar_get_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) Insert(item *ToolItem, pos int) () {
	_cgo_item_ := (*C.GtkToolItem)(unsafe.Pointer(item))
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_toolbar_insert((*C.GtkToolbar)(_self_), _cgo_item_, _cgo_pos_)
	return
}

func (_self_ *Toolbar) SetDropHighlightItem(tool_item *ToolItem, index_ int) () {
	_cgo_tool_item_ := (*C.GtkToolItem)(unsafe.Pointer(tool_item))
	_cgo_index__ := (C.gint)(index_)
	C.gtk_toolbar_set_drop_highlight_item((*C.GtkToolbar)(_self_), _cgo_tool_item_, _cgo_index__)
	return
}

func (_self_ *Toolbar) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_toolbar_set_icon_size((*C.GtkToolbar)(_self_), icon_size)
	return
}

func (_self_ *Toolbar) SetShowArrow(show_arrow bool) () {
	_cgo_show_arrow_ := C.glibfalse()
	if show_arrow { _cgo_show_arrow_ = C.glibtrue() }
	C.gtk_toolbar_set_show_arrow((*C.GtkToolbar)(_self_), _cgo_show_arrow_)
	return
}

func (_self_ *Toolbar) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_toolbar_set_style((*C.GtkToolbar)(_self_), style)
	return
}

func (_self_ *Toolbar) UnsetIconSize() () {
	C.gtk_toolbar_unset_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) UnsetStyle() () {
	C.gtk_toolbar_unset_style((*C.GtkToolbar)(_self_))
	return
}

func TooltipTriggerTooltipQuery(display *C.GdkDisplay) () {
	C.gtk_tooltip_trigger_tooltip_query(display)
	return
}

func (_self_ *Tooltip) SetCustom(custom_widget *Widget) () {
	_cgo_custom_widget_ := (*C.GtkWidget)(unsafe.Pointer(custom_widget))
	C.gtk_tooltip_set_custom((*C.GtkTooltip)(_self_), _cgo_custom_widget_)
	return
}

func (_self_ *Tooltip) SetIcon(pixbuf *C.GdkPixbuf) () {
	C.gtk_tooltip_set_icon((*C.GtkTooltip)(_self_), pixbuf)
	return
}

func (_self_ *Tooltip) SetIconFromGicon(gicon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_tooltip_set_icon_from_gicon((*C.GtkTooltip)(_self_), gicon, size)
	return
}

func (_self_ *Tooltip) SetIconFromIconName(icon_name string, size C.GtkIconSize) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_tooltip_set_icon_from_icon_name((*C.GtkTooltip)(_self_), _cgo_icon_name_, size)
	return
}

func (_self_ *Tooltip) SetIconFromStock(stock_id string, size C.GtkIconSize) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_tooltip_set_icon_from_stock((*C.GtkTooltip)(_self_), _cgo_stock_id_, size)
	return
}

func (_self_ *Tooltip) SetMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_tooltip_set_markup((*C.GtkTooltip)(_self_), _cgo_markup_)
	return
}

func (_self_ *Tooltip) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_tooltip_set_text((*C.GtkTooltip)(_self_), _cgo_text_)
	return
}

func (_self_ *Tooltip) SetTipArea(rect *C.GdkRectangle) () {
	C._gtk_tooltip_set_tip_area((*C.GtkTooltip)(_self_), rect)
	return
}

func (_self_ *TreeIter) Copy() (_go__return__ *TreeIter) {
	var _return_ *C.GtkTreeIter
	_return_ = C.gtk_tree_iter_copy((*C.GtkTreeIter)(_self_))
	_go__return__ = (*TreeIter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeIter) Free() () {
	C.gtk_tree_iter_free((*C.GtkTreeIter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ClearCache() () {
	C.gtk_tree_model_filter_clear_cache((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ConvertChildIterToIter(child_iter *TreeIter) (_go__return__ bool, filter_iter *TreeIter) {
	_cgo_child_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(child_iter))
	var _allocated_filter_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_filter_convert_child_iter_to_iter((*C.GtkTreeModelFilter)(_self_), &_allocated_filter_iter_, _cgo_child_iter_)
	filter_iter = (*TreeIter)(unsafe.Pointer(&_allocated_filter_iter_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeModelFilter) ConvertChildPathToPath(child_path *TreePath) (_go__return__ *TreePath) {
	_cgo_child_path_ := (*C.GtkTreePath)(unsafe.Pointer(child_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_filter_convert_child_path_to_path((*C.GtkTreeModelFilter)(_self_), _cgo_child_path_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeModelFilter) ConvertIterToChildIter(filter_iter *TreeIter) (child_iter *TreeIter) {
	_cgo_filter_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(filter_iter))
	var _allocated_child_iter_ C.GtkTreeIter
	C.gtk_tree_model_filter_convert_iter_to_child_iter((*C.GtkTreeModelFilter)(_self_), &_allocated_child_iter_, _cgo_filter_iter_)
	child_iter = (*TreeIter)(unsafe.Pointer(&_allocated_child_iter_))
	return
}

func (_self_ *TreeModelFilter) ConvertPathToChildPath(filter_path *TreePath) (_go__return__ *TreePath) {
	_cgo_filter_path_ := (*C.GtkTreePath)(unsafe.Pointer(filter_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_filter_convert_path_to_child_path((*C.GtkTreeModelFilter)(_self_), _cgo_filter_path_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeModelFilter) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_filter_get_model((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) Refilter() () {
	C.gtk_tree_model_filter_refilter((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) SetVisibleColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_model_filter_set_visible_column((*C.GtkTreeModelFilter)(_self_), _cgo_column_)
	return
}

func (_self_ *TreeModelFilter) SetVisibleFunc(func_ C.GtkTreeModelFilterVisibleFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_model_filter_set_visible_func((*C.GtkTreeModelFilter)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeModelSort) ClearCache() () {
	C.gtk_tree_model_sort_clear_cache((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) ConvertChildIterToIter(child_iter *TreeIter) (_go__return__ bool, sort_iter *TreeIter) {
	_cgo_child_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(child_iter))
	var _allocated_sort_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_sort_convert_child_iter_to_iter((*C.GtkTreeModelSort)(_self_), &_allocated_sort_iter_, _cgo_child_iter_)
	sort_iter = (*TreeIter)(unsafe.Pointer(&_allocated_sort_iter_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeModelSort) ConvertChildPathToPath(child_path *TreePath) (_go__return__ *TreePath) {
	_cgo_child_path_ := (*C.GtkTreePath)(unsafe.Pointer(child_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_sort_convert_child_path_to_path((*C.GtkTreeModelSort)(_self_), _cgo_child_path_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeModelSort) ConvertIterToChildIter(sorted_iter *TreeIter) (child_iter *TreeIter) {
	_cgo_sorted_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(sorted_iter))
	var _allocated_child_iter_ C.GtkTreeIter
	C.gtk_tree_model_sort_convert_iter_to_child_iter((*C.GtkTreeModelSort)(_self_), &_allocated_child_iter_, _cgo_sorted_iter_)
	child_iter = (*TreeIter)(unsafe.Pointer(&_allocated_child_iter_))
	return
}

func (_self_ *TreeModelSort) ConvertPathToChildPath(sorted_path *TreePath) (_go__return__ *TreePath) {
	_cgo_sorted_path_ := (*C.GtkTreePath)(unsafe.Pointer(sorted_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_sort_convert_path_to_child_path((*C.GtkTreeModelSort)(_self_), _cgo_sorted_path_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeModelSort) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_sort_get_model((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) IterIsValid(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_sort_iter_is_valid((*C.GtkTreeModelSort)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeModelSort) ResetDefaultSortFunc() () {
	C.gtk_tree_model_sort_reset_default_sort_func((*C.GtkTreeModelSort)(_self_))
	return
}

func TreePathNew() (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_path_new()
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func TreePathNewFirst() (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_path_new_first()
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func TreePathNewFromString(path string) (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_tree_path_new_from_string(_cgo_path_)
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreePath) AppendIndex(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_tree_path_append_index((*C.GtkTreePath)(_self_), _cgo_index__)
	return
}

func (_self_ *TreePath) Compare(b *TreePath) (_go__return__ int) {
	_cgo_b_ := (*C.GtkTreePath)(unsafe.Pointer(b))
	var _return_ C.gint
	_return_ = C._gtk_tree_path_compare((*C.GtkTreePath)(_self_), _cgo_b_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreePath) Copy() (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C._gtk_tree_path_copy((*C.GtkTreePath)(_self_))
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreePath) Down() () {
	C.gtk_tree_path_down((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) Free() () {
	C.gtk_tree_path_free((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetDepth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_path_get_depth((*C.GtkTreePath)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreePath) GetIndices() (_return_ *C.gint) {
	_return_ = C.gtk_tree_path_get_indices((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetIndicesWithDepth() (_return_ *C.gint, _go_depth_ int) {
	var depth C.gint
	_return_ = C.gtk_tree_path_get_indices_with_depth((*C.GtkTreePath)(_self_), &depth)
	_go_depth_ = (int)(depth)
	return
}

func (_self_ *TreePath) IsAncestor(descendant *TreePath) (_go__return__ bool) {
	_cgo_descendant_ := (*C.GtkTreePath)(unsafe.Pointer(descendant))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_is_ancestor((*C.GtkTreePath)(_self_), _cgo_descendant_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreePath) IsDescendant(ancestor *TreePath) (_go__return__ bool) {
	_cgo_ancestor_ := (*C.GtkTreePath)(unsafe.Pointer(ancestor))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_is_descendant((*C.GtkTreePath)(_self_), _cgo_ancestor_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreePath) Next() () {
	C.gtk_tree_path_next((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) PrependIndex(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_tree_path_prepend_index((*C.GtkTreePath)(_self_), _cgo_index__)
	return
}

func (_self_ *TreePath) Prev() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_prev((*C.GtkTreePath)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreePath) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_tree_path_to_string((*C.GtkTreePath)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TreePath) Up() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_up((*C.GtkTreePath)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TreeRowReferenceNew(model *C.GtkTreeModel, path *TreePath) (_go__return__ *TreeRowReference) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_new(model, _cgo_path_)
	_go__return__ = (*TreeRowReference)(unsafe.Pointer(_return_))
	return
}

func TreeRowReferenceNewProxy(proxy *C.GObject, model *C.GtkTreeModel, path *TreePath) (_go__return__ *TreeRowReference) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_new_proxy(proxy, model, _cgo_path_)
	_go__return__ = (*TreeRowReference)(unsafe.Pointer(_return_))
	return
}

func TreeRowReferenceDeleted(proxy *C.GObject, path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_row_reference_deleted(proxy, _cgo_path_)
	return
}

func TreeRowReferenceInserted(proxy *C.GObject, path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_row_reference_inserted(proxy, _cgo_path_)
	return
}

func TreeRowReferenceReordered(proxy *C.GObject, path *TreePath, iter *TreeIter, new_order *C.gint) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_row_reference_reordered(proxy, _cgo_path_, _cgo_iter_, new_order)
	return
}

func (_self_ *TreeRowReference) Copy() (_go__return__ *TreeRowReference) {
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_copy((*C.GtkTreeRowReference)(_self_))
	_go__return__ = (*TreeRowReference)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeRowReference) Free() () {
	C.gtk_tree_row_reference_free((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_row_reference_get_model((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetPath() (_go__return__ *TreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_row_reference_get_path((*C.GtkTreeRowReference)(_self_))
	_go__return__ = (*TreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeRowReference) Valid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_row_reference_valid((*C.GtkTreeRowReference)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) CountSelectedRows() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_selection_count_selected_rows((*C.GtkTreeSelection)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeSelection) GetMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_tree_selection_get_mode((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelectFunction() (_return_ C.GtkTreeSelectionFunc) {
	_return_ = C.gtk_tree_selection_get_select_function((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelected() (_go__return__ bool, model unsafe.Pointer, iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C._gtk_tree_selection_get_selected((*C.GtkTreeSelection)(_self_), model, &_allocated_iter_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) GetSelectedRows() (_return_ *C.GList, model unsafe.Pointer) {
	_return_ = C._gtk_tree_selection_get_selected_rows((*C.GtkTreeSelection)(_self_), model)
	return
}

func (_self_ *TreeSelection) GetTreeView() (_go__return__ *TreeView) {
	var _return_ *C.GtkTreeView
	_return_ = C.gtk_tree_selection_get_tree_view((*C.GtkTreeSelection)(_self_))
	_go__return__ = (*TreeView)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeSelection) GetUserData() (_return_ C.gpointer) {
	_return_ = C.gtk_tree_selection_get_user_data((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) IterIsSelected(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_selection_iter_is_selected((*C.GtkTreeSelection)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) PathIsSelected(path *TreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_selection_path_is_selected((*C.GtkTreeSelection)(_self_), _cgo_path_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) SelectAll() () {
	C.gtk_tree_selection_select_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) SelectIter(iter *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_selection_select_iter((*C.GtkTreeSelection)(_self_), _cgo_iter_)
	return
}

func (_self_ *TreeSelection) SelectPath(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_selection_select_path((*C.GtkTreeSelection)(_self_), _cgo_path_)
	return
}

func (_self_ *TreeSelection) SelectRange(start_path *TreePath, end_path *TreePath) () {
	_cgo_start_path_ := (*C.GtkTreePath)(unsafe.Pointer(start_path))
	_cgo_end_path_ := (*C.GtkTreePath)(unsafe.Pointer(end_path))
	C.gtk_tree_selection_select_range((*C.GtkTreeSelection)(_self_), _cgo_start_path_, _cgo_end_path_)
	return
}

func (_self_ *TreeSelection) SelectedForeach(func_ C.GtkTreeSelectionForeachFunc, data C.gpointer) () {
	C.gtk_tree_selection_selected_foreach((*C.GtkTreeSelection)(_self_), func_, data)
	return
}

func (_self_ *TreeSelection) SetMode(type_ C.GtkSelectionMode) () {
	C.gtk_tree_selection_set_mode((*C.GtkTreeSelection)(_self_), type_)
	return
}

func (_self_ *TreeSelection) SetSelectFunction(func_ C.GtkTreeSelectionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_selection_set_select_function((*C.GtkTreeSelection)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeSelection) UnselectAll() () {
	C.gtk_tree_selection_unselect_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) UnselectIter(iter *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_selection_unselect_iter((*C.GtkTreeSelection)(_self_), _cgo_iter_)
	return
}

func (_self_ *TreeSelection) UnselectPath(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_selection_unselect_path((*C.GtkTreeSelection)(_self_), _cgo_path_)
	return
}

func (_self_ *TreeSelection) UnselectRange(start_path *TreePath, end_path *TreePath) () {
	_cgo_start_path_ := (*C.GtkTreePath)(unsafe.Pointer(start_path))
	_cgo_end_path_ := (*C.GtkTreePath)(unsafe.Pointer(end_path))
	C.gtk_tree_selection_unselect_range((*C.GtkTreeSelection)(_self_), _cgo_start_path_, _cgo_end_path_)
	return
}

func (_self_ *TreeStore) Append(parent *TreeIter) (iter *TreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_append((*C.GtkTreeStore)(_self_), &_allocated_iter_, _cgo_parent_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TreeStore) Clear() () {
	C.gtk_tree_store_clear((*C.GtkTreeStore)(_self_))
	return
}

func (_self_ *TreeStore) Insert(parent *TreeIter, position int) (iter *TreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	_cgo_position_ := (C.gint)(position)
	C.gtk_tree_store_insert((*C.GtkTreeStore)(_self_), &_allocated_iter_, _cgo_parent_, _cgo_position_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TreeStore) InsertAfter(parent *TreeIter, sibling *TreeIter) (iter *TreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_insert_after((*C.GtkTreeStore)(_self_), &_allocated_iter_, _cgo_parent_, _cgo_sibling_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TreeStore) InsertBefore(parent *TreeIter, sibling *TreeIter) (iter *TreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_insert_before((*C.GtkTreeStore)(_self_), &_allocated_iter_, _cgo_parent_, _cgo_sibling_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TreeStore) IsAncestor(iter *TreeIter, descendant *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_descendant_ := (*C.GtkTreeIter)(unsafe.Pointer(descendant))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_is_ancestor((*C.GtkTreeStore)(_self_), _cgo_iter_, _cgo_descendant_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeStore) IterDepth(iter *TreeIter) (_go__return__ int) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gint
	_return_ = C.gtk_tree_store_iter_depth((*C.GtkTreeStore)(_self_), _cgo_iter_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeStore) IterIsValid(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_iter_is_valid((*C.GtkTreeStore)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeStore) MoveAfter(iter *TreeIter, position *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_tree_store_move_after((*C.GtkTreeStore)(_self_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *TreeStore) MoveBefore(iter *TreeIter, position *TreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_tree_store_move_before((*C.GtkTreeStore)(_self_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *TreeStore) Prepend(parent *TreeIter) (iter *TreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_prepend((*C.GtkTreeStore)(_self_), &_allocated_iter_, _cgo_parent_)
	iter = (*TreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *TreeStore) Remove(iter *TreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_remove((*C.GtkTreeStore)(_self_), _cgo_iter_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeStore) SetValue(iter *TreeIter, column int, value *C.GValue) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_store_set_value((*C.GtkTreeStore)(_self_), _cgo_iter_, _cgo_column_, value)
	return
}

func (_self_ *TreeStore) Swap(a *TreeIter, b *TreeIter) () {
	_cgo_a_ := (*C.GtkTreeIter)(unsafe.Pointer(a))
	_cgo_b_ := (*C.GtkTreeIter)(unsafe.Pointer(b))
	C.gtk_tree_store_swap((*C.GtkTreeStore)(_self_), _cgo_a_, _cgo_b_)
	return
}

func TreeViewNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TreeViewNewWithModel(model *C.GtkTreeModel) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_new_with_model(model)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeView) AppendColumn(column *TreeViewColumn) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	var _return_ C.gint
	_return_ = C.gtk_tree_view_append_column((*C.GtkTreeView)(_self_), _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) CollapseAll() () {
	C.gtk_tree_view_collapse_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) CollapseRow(path *TreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_collapse_row((*C.GtkTreeView)(_self_), _cgo_path_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) ColumnsAutosize() () {
	C.gtk_tree_view_columns_autosize((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ConvertBinWindowToTreeCoords(bx int, by int) (_go_tx_ int, _go_ty_ int) {
	_cgo_bx_ := (C.gint)(bx)
	_cgo_by_ := (C.gint)(by)
	var tx C.gint
	var ty C.gint
	C.gtk_tree_view_convert_bin_window_to_tree_coords((*C.GtkTreeView)(_self_), _cgo_bx_, _cgo_by_, &tx, &ty)
	_go_tx_ = (int)(tx)
	_go_ty_ = (int)(ty)
	return
}

func (_self_ *TreeView) ConvertBinWindowToWidgetCoords(bx int, by int) (_go_wx_ int, _go_wy_ int) {
	_cgo_bx_ := (C.gint)(bx)
	_cgo_by_ := (C.gint)(by)
	var wx C.gint
	var wy C.gint
	C.gtk_tree_view_convert_bin_window_to_widget_coords((*C.GtkTreeView)(_self_), _cgo_bx_, _cgo_by_, &wx, &wy)
	_go_wx_ = (int)(wx)
	_go_wy_ = (int)(wy)
	return
}

func (_self_ *TreeView) ConvertTreeToBinWindowCoords(tx int, ty int) (_go_bx_ int, _go_by_ int) {
	_cgo_tx_ := (C.gint)(tx)
	_cgo_ty_ := (C.gint)(ty)
	var bx C.gint
	var by C.gint
	C.gtk_tree_view_convert_tree_to_bin_window_coords((*C.GtkTreeView)(_self_), _cgo_tx_, _cgo_ty_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *TreeView) ConvertTreeToWidgetCoords(tx int, ty int) (_go_wx_ int, _go_wy_ int) {
	_cgo_tx_ := (C.gint)(tx)
	_cgo_ty_ := (C.gint)(ty)
	var wx C.gint
	var wy C.gint
	C.gtk_tree_view_convert_tree_to_widget_coords((*C.GtkTreeView)(_self_), _cgo_tx_, _cgo_ty_, &wx, &wy)
	_go_wx_ = (int)(wx)
	_go_wy_ = (int)(wy)
	return
}

func (_self_ *TreeView) ConvertWidgetToBinWindowCoords(wx int, wy int) (_go_bx_ int, _go_by_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var bx C.gint
	var by C.gint
	C.gtk_tree_view_convert_widget_to_bin_window_coords((*C.GtkTreeView)(_self_), _cgo_wx_, _cgo_wy_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *TreeView) ConvertWidgetToTreeCoords(wx int, wy int) (_go_tx_ int, _go_ty_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var tx C.gint
	var ty C.gint
	C.gtk_tree_view_convert_widget_to_tree_coords((*C.GtkTreeView)(_self_), _cgo_wx_, _cgo_wy_, &tx, &ty)
	_go_tx_ = (int)(tx)
	_go_ty_ = (int)(ty)
	return
}

func (_self_ *TreeView) CreateRowDragIcon(path *TreePath) (_return_ *C.cairo_surface_t) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_return_ = C.gtk_tree_view_create_row_drag_icon((*C.GtkTreeView)(_self_), _cgo_path_)
	return
}

func (_self_ *TreeView) ExpandAll() () {
	C.gtk_tree_view_expand_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ExpandRow(path *TreePath, open_all bool) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_open_all_ := C.glibfalse()
	if open_all { _cgo_open_all_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_expand_row((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_open_all_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) ExpandToPath(path *TreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_expand_to_path((*C.GtkTreeView)(_self_), _cgo_path_)
	return
}

func (_self_ *TreeView) GetBackgroundArea(path *TreePath, column *TreeViewColumn) (rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	C.gtk_tree_view_get_background_area((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_column_, rect)
	return
}

func (_self_ *TreeView) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_tree_view_get_bin_window((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCellArea(path *TreePath, column *TreeViewColumn) (rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	C.gtk_tree_view_get_cell_area((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_column_, rect)
	return
}

func (_self_ *TreeView) GetColumn(n int) (_go__return__ *TreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_cgo_n_ := (C.gint)(n)
	_return_ = C.gtk_tree_view_get_column((*C.GtkTreeView)(_self_), _cgo_n_)
	_go__return__ = (*TreeViewColumn)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeView) GetColumns() (_return_ *C.GList) {
	_return_ = C.gtk_tree_view_get_columns((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCursor() (path *TreePath, focus_column *TreeViewColumn) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_focus_column_ *C.GtkTreeViewColumn
	C._gtk_tree_view_get_cursor((*C.GtkTreeView)(_self_), unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_focus_column_))
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	focus_column = (*TreeViewColumn)(unsafe.Pointer(_allocated_focus_column_))
	return
}

func (_self_ *TreeView) GetDestRowAtPos(drag_x int, drag_y int) (_go__return__ bool, path *TreePath, pos *C.GtkTreeViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	_cgo_drag_x_ := (C.gint)(drag_x)
	_cgo_drag_y_ := (C.gint)(drag_y)
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_dest_row_at_pos((*C.GtkTreeView)(_self_), _cgo_drag_x_, _cgo_drag_y_, unsafe.Pointer(&_allocated_path_), pos)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetDragDestRow() (path *TreePath, pos *C.GtkTreeViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	C._gtk_tree_view_get_drag_dest_row((*C.GtkTreeView)(_self_), unsafe.Pointer(&_allocated_path_), pos)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	return
}

func (_self_ *TreeView) GetEnableSearch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_enable_search((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetEnableTreeLines() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_enable_tree_lines((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetExpanderColumn() (_go__return__ *TreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_get_expander_column((*C.GtkTreeView)(_self_))
	_go__return__ = (*TreeViewColumn)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeView) GetFixedHeightMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_fixed_height_mode((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetGridLines() (_return_ C.GtkTreeViewGridLines) {
	_return_ = C.gtk_tree_view_get_grid_lines((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHeadersClickable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_headers_clickable((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHeadersVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_headers_visible((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHoverExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_hover_expand((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHoverSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_hover_selection((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetLevelIndentation() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_level_indentation((*C.GtkTreeView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_view_get_model((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetNColumns() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_tree_view_get_n_columns((*C.GtkTreeView)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TreeView) GetPathAtPos(x int, y int) (_go__return__ bool, path *TreePath, column *TreeViewColumn, _go_cell_x_ int, _go_cell_y_ int) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_column_ *C.GtkTreeViewColumn
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var cell_x C.gint
	var cell_y C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_path_at_pos((*C.GtkTreeView)(_self_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_column_), &cell_x, &cell_y)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	column = (*TreeViewColumn)(unsafe.Pointer(_allocated_column_))
	_go_cell_x_ = (int)(cell_x)
	_go_cell_y_ = (int)(cell_y)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_reorderable((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_tree_view_get_row_separator_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetRubberBanding() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_rubber_banding((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetRulesHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_rules_hint((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetSearchColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_search_column((*C.GtkTreeView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) GetSearchEntry() (_go__return__ *Entry) {
	var _return_ *C.GtkEntry
	_return_ = C.gtk_tree_view_get_search_entry((*C.GtkTreeView)(_self_))
	_go__return__ = (*Entry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeView) GetSearchEqualFunc() (_return_ C.GtkTreeViewSearchEqualFunc) {
	_return_ = C.gtk_tree_view_get_search_equal_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchPositionFunc() (_return_ C.GtkTreeViewSearchPositionFunc) {
	_return_ = C.gtk_tree_view_get_search_position_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSelection() (_go__return__ *TreeSelection) {
	var _return_ *C.GtkTreeSelection
	_return_ = C.gtk_tree_view_get_selection((*C.GtkTreeView)(_self_))
	_go__return__ = (*TreeSelection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeView) GetShowExpanders() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_show_expanders((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetTooltipColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_tooltip_column((*C.GtkTreeView)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) GetVisibleRange() (_go__return__ bool, start_path *TreePath, end_path *TreePath) {
	var _allocated_start_path_ *C.GtkTreePath
	var _allocated_end_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_visible_range((*C.GtkTreeView)(_self_), unsafe.Pointer(&_allocated_start_path_), unsafe.Pointer(&_allocated_end_path_))
	start_path = (*TreePath)(unsafe.Pointer(_allocated_start_path_))
	end_path = (*TreePath)(unsafe.Pointer(_allocated_end_path_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_tree_view_get_visible_rect((*C.GtkTreeView)(_self_), visible_rect)
	return
}

func (_self_ *TreeView) InsertColumn(column *TreeViewColumn, position int) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_tree_view_insert_column((*C.GtkTreeView)(_self_), _cgo_column_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) InsertColumnWithDataFunc(position int, title string, cell *CellRenderer, func_ C.GtkTreeCellDataFunc, data C.gpointer, dnotify C.GDestroyNotify) (_go__return__ int) {
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_tree_view_insert_column_with_data_func((*C.GtkTreeView)(_self_), _cgo_position_, _cgo_title_, _cgo_cell_, func_, data, dnotify)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) IsBlankAtPos(x int, y int) (_go__return__ bool, path *TreePath, column *TreeViewColumn, _go_cell_x_ int, _go_cell_y_ int) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_column_ *C.GtkTreeViewColumn
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var cell_x C.gint
	var cell_y C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_is_blank_at_pos((*C.GtkTreeView)(_self_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_column_), &cell_x, &cell_y)
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	column = (*TreeViewColumn)(unsafe.Pointer(_allocated_column_))
	_go_cell_x_ = (int)(cell_x)
	_go_cell_y_ = (int)(cell_y)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) IsRubberBandingActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_is_rubber_banding_active((*C.GtkTreeView)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) MapExpandedRows(func_ C.GtkTreeViewMappingFunc, data C.gpointer) () {
	C.gtk_tree_view_map_expanded_rows((*C.GtkTreeView)(_self_), func_, data)
	return
}

func (_self_ *TreeView) MoveColumnAfter(column *TreeViewColumn, base_column *TreeViewColumn) () {
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	_cgo_base_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(base_column))
	C.gtk_tree_view_move_column_after((*C.GtkTreeView)(_self_), _cgo_column_, _cgo_base_column_)
	return
}

func (_self_ *TreeView) RemoveColumn(column *TreeViewColumn) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	var _return_ C.gint
	_return_ = C.gtk_tree_view_remove_column((*C.GtkTreeView)(_self_), _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeView) RowActivated(path *TreePath, column *TreeViewColumn) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	C.gtk_tree_view_row_activated((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_column_)
	return
}

func (_self_ *TreeView) RowExpanded(path *TreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_row_expanded((*C.GtkTreeView)(_self_), _cgo_path_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeView) ScrollToCell(path *TreePath, column *TreeViewColumn, use_align bool, row_align float64, col_align float64) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	_cgo_row_align_ := (C.gfloat)(row_align)
	_cgo_col_align_ := (C.gfloat)(col_align)
	_cgo_use_align_ := C.glibfalse()
	if use_align { _cgo_use_align_ = C.glibtrue() }
	C.gtk_tree_view_scroll_to_cell((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_column_, _cgo_use_align_, _cgo_row_align_, _cgo_col_align_)
	return
}

func (_self_ *TreeView) ScrollToPoint(tree_x int, tree_y int) () {
	_cgo_tree_x_ := (C.gint)(tree_x)
	_cgo_tree_y_ := (C.gint)(tree_y)
	C.gtk_tree_view_scroll_to_point((*C.GtkTreeView)(_self_), _cgo_tree_x_, _cgo_tree_y_)
	return
}

func (_self_ *TreeView) SetColumnDragFunction(func_ C.GtkTreeViewColumnDropFunc, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_column_drag_function((*C.GtkTreeView)(_self_), func_, user_data, destroy)
	return
}

func (_self_ *TreeView) SetCursor(path *TreePath, focus_column *TreeViewColumn, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_focus_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(focus_column))
	_cgo_start_editing_ := C.glibfalse()
	if start_editing { _cgo_start_editing_ = C.glibtrue() }
	C.gtk_tree_view_set_cursor((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_focus_column_, _cgo_start_editing_)
	return
}

func (_self_ *TreeView) SetCursorOnCell(path *TreePath, focus_column *TreeViewColumn, focus_cell *CellRenderer, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_focus_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(focus_column))
	_cgo_focus_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(focus_cell))
	_cgo_start_editing_ := C.glibfalse()
	if start_editing { _cgo_start_editing_ = C.glibtrue() }
	C.gtk_tree_view_set_cursor_on_cell((*C.GtkTreeView)(_self_), _cgo_path_, _cgo_focus_column_, _cgo_focus_cell_, _cgo_start_editing_)
	return
}

func (_self_ *TreeView) SetDragDestRow(path *TreePath, pos C.GtkTreeViewDropPosition) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_set_drag_dest_row((*C.GtkTreeView)(_self_), _cgo_path_, pos)
	return
}

func (_self_ *TreeView) SetEnableSearch(enable_search bool) () {
	_cgo_enable_search_ := C.glibfalse()
	if enable_search { _cgo_enable_search_ = C.glibtrue() }
	C.gtk_tree_view_set_enable_search((*C.GtkTreeView)(_self_), _cgo_enable_search_)
	return
}

func (_self_ *TreeView) SetEnableTreeLines(enabled bool) () {
	_cgo_enabled_ := C.glibfalse()
	if enabled { _cgo_enabled_ = C.glibtrue() }
	C.gtk_tree_view_set_enable_tree_lines((*C.GtkTreeView)(_self_), _cgo_enabled_)
	return
}

func (_self_ *TreeView) SetExpanderColumn(column *TreeViewColumn) () {
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	C.gtk_tree_view_set_expander_column((*C.GtkTreeView)(_self_), _cgo_column_)
	return
}

func (_self_ *TreeView) SetFixedHeightMode(enable bool) () {
	_cgo_enable_ := C.glibfalse()
	if enable { _cgo_enable_ = C.glibtrue() }
	C.gtk_tree_view_set_fixed_height_mode((*C.GtkTreeView)(_self_), _cgo_enable_)
	return
}

func (_self_ *TreeView) SetGridLines(grid_lines C.GtkTreeViewGridLines) () {
	C.gtk_tree_view_set_grid_lines((*C.GtkTreeView)(_self_), grid_lines)
	return
}

func (_self_ *TreeView) SetHeadersClickable(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_tree_view_set_headers_clickable((*C.GtkTreeView)(_self_), _cgo_setting_)
	return
}

func (_self_ *TreeView) SetHeadersVisible(headers_visible bool) () {
	_cgo_headers_visible_ := C.glibfalse()
	if headers_visible { _cgo_headers_visible_ = C.glibtrue() }
	C.gtk_tree_view_set_headers_visible((*C.GtkTreeView)(_self_), _cgo_headers_visible_)
	return
}

func (_self_ *TreeView) SetHoverExpand(expand bool) () {
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tree_view_set_hover_expand((*C.GtkTreeView)(_self_), _cgo_expand_)
	return
}

func (_self_ *TreeView) SetHoverSelection(hover bool) () {
	_cgo_hover_ := C.glibfalse()
	if hover { _cgo_hover_ = C.glibtrue() }
	C.gtk_tree_view_set_hover_selection((*C.GtkTreeView)(_self_), _cgo_hover_)
	return
}

func (_self_ *TreeView) SetLevelIndentation(indentation int) () {
	_cgo_indentation_ := (C.gint)(indentation)
	C.gtk_tree_view_set_level_indentation((*C.GtkTreeView)(_self_), _cgo_indentation_)
	return
}

func (_self_ *TreeView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_tree_view_set_model((*C.GtkTreeView)(_self_), model)
	return
}

func (_self_ *TreeView) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := C.glibfalse()
	if reorderable { _cgo_reorderable_ = C.glibtrue() }
	C.gtk_tree_view_set_reorderable((*C.GtkTreeView)(_self_), _cgo_reorderable_)
	return
}

func (_self_ *TreeView) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_row_separator_func((*C.GtkTreeView)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeView) SetRubberBanding(enable bool) () {
	_cgo_enable_ := C.glibfalse()
	if enable { _cgo_enable_ = C.glibtrue() }
	C.gtk_tree_view_set_rubber_banding((*C.GtkTreeView)(_self_), _cgo_enable_)
	return
}

func (_self_ *TreeView) SetRulesHint(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_tree_view_set_rules_hint((*C.GtkTreeView)(_self_), _cgo_setting_)
	return
}

func (_self_ *TreeView) SetSearchColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_view_set_search_column((*C.GtkTreeView)(_self_), _cgo_column_)
	return
}

func (_self_ *TreeView) SetSearchEntry(entry *Entry) () {
	_cgo_entry_ := (*C.GtkEntry)(unsafe.Pointer(entry))
	C.gtk_tree_view_set_search_entry((*C.GtkTreeView)(_self_), _cgo_entry_)
	return
}

func (_self_ *TreeView) SetSearchEqualFunc(search_equal_func C.GtkTreeViewSearchEqualFunc, search_user_data C.gpointer, search_destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_equal_func((*C.GtkTreeView)(_self_), search_equal_func, search_user_data, search_destroy)
	return
}

func (_self_ *TreeView) SetSearchPositionFunc(func_ C.GtkTreeViewSearchPositionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_position_func((*C.GtkTreeView)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeView) SetShowExpanders(enabled bool) () {
	_cgo_enabled_ := C.glibfalse()
	if enabled { _cgo_enabled_ = C.glibtrue() }
	C.gtk_tree_view_set_show_expanders((*C.GtkTreeView)(_self_), _cgo_enabled_)
	return
}

func (_self_ *TreeView) SetTooltipCell(tooltip *Tooltip, path *TreePath, column *TreeViewColumn, cell *CellRenderer) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(unsafe.Pointer(tooltip))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(unsafe.Pointer(column))
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	C.gtk_tree_view_set_tooltip_cell((*C.GtkTreeView)(_self_), _cgo_tooltip_, _cgo_path_, _cgo_column_, _cgo_cell_)
	return
}

func (_self_ *TreeView) SetTooltipColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_view_set_tooltip_column((*C.GtkTreeView)(_self_), _cgo_column_)
	return
}

func (_self_ *TreeView) SetTooltipRow(tooltip *Tooltip, path *TreePath) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(unsafe.Pointer(tooltip))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_set_tooltip_row((*C.GtkTreeView)(_self_), _cgo_tooltip_, _cgo_path_)
	return
}

func (_self_ *TreeView) UnsetRowsDragDest() () {
	C.gtk_tree_view_unset_rows_drag_dest((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) UnsetRowsDragSource() () {
	C.gtk_tree_view_unset_rows_drag_source((*C.GtkTreeView)(_self_))
	return
}

func TreeViewColumnNew() (_go__return__ *TreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_column_new()
	_go__return__ = (*TreeViewColumn)(unsafe.Pointer(_return_))
	return
}

func TreeViewColumnNewWithArea(area *CellArea) (_go__return__ *TreeViewColumn) {
	_cgo_area_ := (*C.GtkCellArea)(unsafe.Pointer(area))
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_column_new_with_area(_cgo_area_)
	_go__return__ = (*TreeViewColumn)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeViewColumn) AddAttribute(cell_renderer *CellRenderer, attribute string, column int) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell_renderer))
	_cgo_column_ := (C.gint)(column)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_tree_view_column_add_attribute((*C.GtkTreeViewColumn)(_self_), _cgo_cell_renderer_, _cgo_attribute_, _cgo_column_)
	return
}

func (_self_ *TreeViewColumn) CellGetPosition(cell_renderer *CellRenderer) (_go__return__ bool, _go_x_offset_ int, _go_width_ int) {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell_renderer))
	var x_offset C.gint
	var width C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_cell_get_position((*C.GtkTreeViewColumn)(_self_), _cgo_cell_renderer_, &x_offset, &width)
	_go_x_offset_ = (int)(x_offset)
	_go_width_ = (int)(width)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) CellGetSize(cell_area *C.GdkRectangle) (_go_x_offset_ int, _go_y_offset_ int, _go_width_ int, _go_height_ int) {
	var x_offset C.gint
	var y_offset C.gint
	var width C.gint
	var height C.gint
	C._gtk_tree_view_column_cell_get_size((*C.GtkTreeViewColumn)(_self_), cell_area, &x_offset, &y_offset, &width, &height)
	_go_x_offset_ = (int)(x_offset)
	_go_y_offset_ = (int)(y_offset)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *TreeViewColumn) CellIsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_cell_is_visible((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) CellSetCellData(tree_model *C.GtkTreeModel, iter *TreeIter, is_expander bool, is_expanded bool) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_is_expander_ := C.glibfalse()
	if is_expander { _cgo_is_expander_ = C.glibtrue() }
	_cgo_is_expanded_ := C.glibfalse()
	if is_expanded { _cgo_is_expanded_ = C.glibtrue() }
	C.gtk_tree_view_column_cell_set_cell_data((*C.GtkTreeViewColumn)(_self_), tree_model, _cgo_iter_, _cgo_is_expander_, _cgo_is_expanded_)
	return
}

func (_self_ *TreeViewColumn) Clear() () {
	C.gtk_tree_view_column_clear((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) ClearAttributes(cell_renderer *CellRenderer) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell_renderer))
	C.gtk_tree_view_column_clear_attributes((*C.GtkTreeViewColumn)(_self_), _cgo_cell_renderer_)
	return
}

func (_self_ *TreeViewColumn) Clicked() () {
	C.gtk_tree_view_column_clicked((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) FocusCell(cell *CellRenderer) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	C.gtk_tree_view_column_focus_cell((*C.GtkTreeViewColumn)(_self_), _cgo_cell_)
	return
}

func (_self_ *TreeViewColumn) GetAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_tree_view_column_get_alignment((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetButton() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_button((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeViewColumn) GetClickable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_clickable((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_expand((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetFixedWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_fixed_width((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetMaxWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_max_width((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetMinWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_min_width((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_reorderable((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetResizable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_resizable((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetSizing() (_return_ C.GtkTreeViewColumnSizing) {
	_return_ = C.gtk_tree_view_column_get_sizing((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSortColumnId() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_sort_column_id((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetSortIndicator() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_sort_indicator((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetSortOrder() (_return_ C.GtkSortType) {
	_return_ = C.gtk_tree_view_column_get_sort_order((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_spacing((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tree_view_column_get_title((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TreeViewColumn) GetTreeView() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_tree_view((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeViewColumn) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_visible((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_widget((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TreeViewColumn) GetWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_width((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) GetXOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_x_offset((*C.GtkTreeViewColumn)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TreeViewColumn) PackEnd(cell *CellRenderer, expand bool) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tree_view_column_pack_end((*C.GtkTreeViewColumn)(_self_), _cgo_cell_, _cgo_expand_)
	return
}

func (_self_ *TreeViewColumn) PackStart(cell *CellRenderer, expand bool) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell))
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tree_view_column_pack_start((*C.GtkTreeViewColumn)(_self_), _cgo_cell_, _cgo_expand_)
	return
}

func (_self_ *TreeViewColumn) QueueResize() () {
	C.gtk_tree_view_column_queue_resize((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) SetAlignment(xalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	C.gtk_tree_view_column_set_alignment((*C.GtkTreeViewColumn)(_self_), _cgo_xalign_)
	return
}

func (_self_ *TreeViewColumn) SetCellDataFunc(cell_renderer *CellRenderer, func_ C.GtkTreeCellDataFunc, func_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(unsafe.Pointer(cell_renderer))
	C.gtk_tree_view_column_set_cell_data_func((*C.GtkTreeViewColumn)(_self_), _cgo_cell_renderer_, func_, func_data, destroy)
	return
}

func (_self_ *TreeViewColumn) SetClickable(clickable bool) () {
	_cgo_clickable_ := C.glibfalse()
	if clickable { _cgo_clickable_ = C.glibtrue() }
	C.gtk_tree_view_column_set_clickable((*C.GtkTreeViewColumn)(_self_), _cgo_clickable_)
	return
}

func (_self_ *TreeViewColumn) SetExpand(expand bool) () {
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_tree_view_column_set_expand((*C.GtkTreeViewColumn)(_self_), _cgo_expand_)
	return
}

func (_self_ *TreeViewColumn) SetFixedWidth(fixed_width int) () {
	_cgo_fixed_width_ := (C.gint)(fixed_width)
	C.gtk_tree_view_column_set_fixed_width((*C.GtkTreeViewColumn)(_self_), _cgo_fixed_width_)
	return
}

func (_self_ *TreeViewColumn) SetMaxWidth(max_width int) () {
	_cgo_max_width_ := (C.gint)(max_width)
	C.gtk_tree_view_column_set_max_width((*C.GtkTreeViewColumn)(_self_), _cgo_max_width_)
	return
}

func (_self_ *TreeViewColumn) SetMinWidth(min_width int) () {
	_cgo_min_width_ := (C.gint)(min_width)
	C.gtk_tree_view_column_set_min_width((*C.GtkTreeViewColumn)(_self_), _cgo_min_width_)
	return
}

func (_self_ *TreeViewColumn) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := C.glibfalse()
	if reorderable { _cgo_reorderable_ = C.glibtrue() }
	C.gtk_tree_view_column_set_reorderable((*C.GtkTreeViewColumn)(_self_), _cgo_reorderable_)
	return
}

func (_self_ *TreeViewColumn) SetResizable(resizable bool) () {
	_cgo_resizable_ := C.glibfalse()
	if resizable { _cgo_resizable_ = C.glibtrue() }
	C.gtk_tree_view_column_set_resizable((*C.GtkTreeViewColumn)(_self_), _cgo_resizable_)
	return
}

func (_self_ *TreeViewColumn) SetSizing(type_ C.GtkTreeViewColumnSizing) () {
	C.gtk_tree_view_column_set_sizing((*C.GtkTreeViewColumn)(_self_), type_)
	return
}

func (_self_ *TreeViewColumn) SetSortColumnId(sort_column_id int) () {
	_cgo_sort_column_id_ := (C.gint)(sort_column_id)
	C.gtk_tree_view_column_set_sort_column_id((*C.GtkTreeViewColumn)(_self_), _cgo_sort_column_id_)
	return
}

func (_self_ *TreeViewColumn) SetSortIndicator(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_tree_view_column_set_sort_indicator((*C.GtkTreeViewColumn)(_self_), _cgo_setting_)
	return
}

func (_self_ *TreeViewColumn) SetSortOrder(order C.GtkSortType) () {
	C.gtk_tree_view_column_set_sort_order((*C.GtkTreeViewColumn)(_self_), order)
	return
}

func (_self_ *TreeViewColumn) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_tree_view_column_set_spacing((*C.GtkTreeViewColumn)(_self_), _cgo_spacing_)
	return
}

func (_self_ *TreeViewColumn) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_tree_view_column_set_title((*C.GtkTreeViewColumn)(_self_), _cgo_title_)
	return
}

func (_self_ *TreeViewColumn) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_tree_view_column_set_visible((*C.GtkTreeViewColumn)(_self_), _cgo_visible_)
	return
}

func (_self_ *TreeViewColumn) SetWidget(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_tree_view_column_set_widget((*C.GtkTreeViewColumn)(_self_), _cgo_widget_)
	return
}

func UIManagerNew() (_go__return__ *UIManager) {
	var _return_ *C.GtkUIManager
	_return_ = C.gtk_ui_manager_new()
	_go__return__ = (*UIManager)(unsafe.Pointer(_return_))
	return
}

func (_self_ *UIManager) AddUi(merge_id uint, path string, name string, action string, type_ C.GtkUIManagerItemType, top bool) () {
	_cgo_merge_id_ := (C.guint)(merge_id)
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_action_ := C.CString(action)
	_cgo_action_ := (*C.gchar)(unsafe.Pointer(_cstring_action_))
	defer C.free(unsafe.Pointer(_cstring_action_))
	_cgo_top_ := C.glibfalse()
	if top { _cgo_top_ = C.glibtrue() }
	C._gtk_ui_manager_add_ui((*C.GtkUIManager)(_self_), _cgo_merge_id_, _cgo_path_, _cgo_name_, _cgo_action_, type_, _cgo_top_)
	return
}

func (_self_ *UIManager) AddUiFromFile(filename string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_ui_manager_add_ui_from_file((*C.GtkUIManager)(_self_), _cgo_filename_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *UIManager) AddUiFromResource(resource_path string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_ui_manager_add_ui_from_resource((*C.GtkUIManager)(_self_), _cgo_resource_path_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *UIManager) AddUiFromString(buffer string, length int64) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_length_ := (C.gssize)(length)
	var _return_ C.guint
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_return_ = C._gtk_ui_manager_add_ui_from_string((*C.GtkUIManager)(_self_), _cgo_buffer_, _cgo_length_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *UIManager) EnsureUpdate() () {
	C.gtk_ui_manager_ensure_update((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetAccelGroup() (_go__return__ *AccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_ui_manager_get_accel_group((*C.GtkUIManager)(_self_))
	_go__return__ = (*AccelGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *UIManager) GetAction(path string) (_go__return__ *Action) {
	var _return_ *C.GtkAction
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_ui_manager_get_action((*C.GtkUIManager)(_self_), _cgo_path_)
	_go__return__ = (*Action)(unsafe.Pointer(_return_))
	return
}

func (_self_ *UIManager) GetActionGroups() (_return_ *C.GList) {
	_return_ = C.gtk_ui_manager_get_action_groups((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetToplevels(types C.GtkUIManagerItemType) (_return_ *C.GSList) {
	_return_ = C.gtk_ui_manager_get_toplevels((*C.GtkUIManager)(_self_), types)
	return
}

func (_self_ *UIManager) GetUi() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_ui_manager_get_ui((*C.GtkUIManager)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UIManager) GetWidget(path string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_ui_manager_get_widget((*C.GtkUIManager)(_self_), _cgo_path_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *UIManager) InsertActionGroup(action_group *ActionGroup, pos int) () {
	_cgo_action_group_ := (*C.GtkActionGroup)(unsafe.Pointer(action_group))
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_ui_manager_insert_action_group((*C.GtkUIManager)(_self_), _cgo_action_group_, _cgo_pos_)
	return
}

func (_self_ *UIManager) NewMergeId() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_ui_manager_new_merge_id((*C.GtkUIManager)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *UIManager) RemoveActionGroup(action_group *ActionGroup) () {
	_cgo_action_group_ := (*C.GtkActionGroup)(unsafe.Pointer(action_group))
	C.gtk_ui_manager_remove_action_group((*C.GtkUIManager)(_self_), _cgo_action_group_)
	return
}

func (_self_ *UIManager) RemoveUi(merge_id uint) () {
	_cgo_merge_id_ := (C.guint)(merge_id)
	C.gtk_ui_manager_remove_ui((*C.GtkUIManager)(_self_), _cgo_merge_id_)
	return
}

func ViewportNew(hadjustment *Adjustment, vadjustment *Adjustment) (_go__return__ *Widget) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(hadjustment))
	_cgo_vadjustment_ := (*C.GtkAdjustment)(unsafe.Pointer(vadjustment))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_viewport_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Viewport) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_bin_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_viewport_get_shadow_type((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetViewWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_view_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_viewport_set_shadow_type((*C.GtkViewport)(_self_), type_)
	return
}

func VolumeButtonNew() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_volume_button_new()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func WidgetGetDefaultDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_default_direction()
	return
}

func WidgetPopCompositeChild() () {
	C.gtk_widget_pop_composite_child()
	return
}

func WidgetPushCompositeChild() () {
	C.gtk_widget_push_composite_child()
	return
}

func WidgetSetDefaultDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_default_direction(dir)
	return
}

func (_self_ *Widget) Activate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_activate((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) AddAccelerator(accel_signal string, accel_group *AccelGroup, accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_signal_ := C.CString(accel_signal)
	_cgo_accel_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_signal_))
	defer C.free(unsafe.Pointer(_cstring_accel_signal_))
	C._gtk_widget_add_accelerator((*C.GtkWidget)(_self_), _cgo_accel_signal_, _cgo_accel_group_, _cgo_accel_key_, accel_mods, accel_flags)
	return
}

func (_self_ *Widget) AddDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_add_device_events((*C.GtkWidget)(_self_), device, events)
	return
}

func (_self_ *Widget) AddEvents(events int) () {
	_cgo_events_ := (C.gint)(events)
	C.gtk_widget_add_events((*C.GtkWidget)(_self_), _cgo_events_)
	return
}

func (_self_ *Widget) AddMnemonicLabel(label *Widget) () {
	_cgo_label_ := (*C.GtkWidget)(unsafe.Pointer(label))
	C.gtk_widget_add_mnemonic_label((*C.GtkWidget)(_self_), _cgo_label_)
	return
}

func (_self_ *Widget) CanActivateAccel(signal_id uint) (_go__return__ bool) {
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.gboolean
	_return_ = C.gtk_widget_can_activate_accel((*C.GtkWidget)(_self_), _cgo_signal_id_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) ChildFocus(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_child_focus((*C.GtkWidget)(_self_), direction)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) ChildNotify(child_property string) () {
	_cstring_child_property_ := C.CString(child_property)
	_cgo_child_property_ := (*C.gchar)(unsafe.Pointer(_cstring_child_property_))
	defer C.free(unsafe.Pointer(_cstring_child_property_))
	C._gtk_widget_child_notify((*C.GtkWidget)(_self_), _cgo_child_property_)
	return
}

func (_self_ *Widget) ComputeExpand(orientation C.GtkOrientation) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_compute_expand((*C.GtkWidget)(_self_), orientation)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_create_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) CreatePangoLayout(text string) (_return_ *C.PangoLayout) {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_widget_create_pango_layout((*C.GtkWidget)(_self_), _cgo_text_)
	return
}

func (_self_ *Widget) Destroy() () {
	C.gtk_widget_destroy((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DeviceIsShadowed(device *C.GdkDevice) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_device_is_shadowed((*C.GtkWidget)(_self_), device)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) DragBegin(targets *TargetList, actions C.GdkDragAction, button int, event *C.GdkEvent) (_return_ *C.GdkDragContext) {
	_cgo_targets_ := (*C.GtkTargetList)(unsafe.Pointer(targets))
	_cgo_button_ := (C.gint)(button)
	_return_ = C.gtk_drag_begin((*C.GtkWidget)(_self_), _cgo_targets_, actions, _cgo_button_, event)
	return
}

func (_self_ *Widget) DragCheckThreshold(start_x int, start_y int, current_x int, current_y int) (_go__return__ bool) {
	_cgo_start_x_ := (C.gint)(start_x)
	_cgo_start_y_ := (C.gint)(start_y)
	_cgo_current_x_ := (C.gint)(current_x)
	_cgo_current_y_ := (C.gint)(current_y)
	var _return_ C.gboolean
	_return_ = C.gtk_drag_check_threshold((*C.GtkWidget)(_self_), _cgo_start_x_, _cgo_start_y_, _cgo_current_x_, _cgo_current_y_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) DragDestAddImageTargets() () {
	C.gtk_drag_dest_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddTextTargets() () {
	C.gtk_drag_dest_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddUriTargets() () {
	C.gtk_drag_dest_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestFindTarget(context *C.GdkDragContext, target_list *TargetList) (_return_ C.GdkAtom) {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	_return_ = C.gtk_drag_dest_find_target((*C.GtkWidget)(_self_), context, _cgo_target_list_)
	return
}

func (_self_ *Widget) DragDestGetTargetList() (_go__return__ *TargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_drag_dest_get_target_list((*C.GtkWidget)(_self_))
	_go__return__ = (*TargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) DragDestGetTrackMotion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_drag_dest_get_track_motion((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) DragDestSetProxy(proxy_window *C.GdkWindow, protocol C.GdkDragProtocol, use_coordinates bool) () {
	_cgo_use_coordinates_ := C.glibfalse()
	if use_coordinates { _cgo_use_coordinates_ = C.glibtrue() }
	C.gtk_drag_dest_set_proxy((*C.GtkWidget)(_self_), proxy_window, protocol, _cgo_use_coordinates_)
	return
}

func (_self_ *Widget) DragDestSetTargetList(target_list *TargetList) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_drag_dest_set_target_list((*C.GtkWidget)(_self_), _cgo_target_list_)
	return
}

func (_self_ *Widget) DragDestSetTrackMotion(track_motion bool) () {
	_cgo_track_motion_ := C.glibfalse()
	if track_motion { _cgo_track_motion_ = C.glibtrue() }
	C.gtk_drag_dest_set_track_motion((*C.GtkWidget)(_self_), _cgo_track_motion_)
	return
}

func (_self_ *Widget) DragDestUnset() () {
	C.gtk_drag_dest_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragGetData(context *C.GdkDragContext, target C.GdkAtom, time_ uint32) () {
	_cgo_time__ := (C.guint32)(time_)
	C.gtk_drag_get_data((*C.GtkWidget)(_self_), context, target, _cgo_time__)
	return
}

func (_self_ *Widget) DragHighlight() () {
	C.gtk_drag_highlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddImageTargets() () {
	C.gtk_drag_source_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddTextTargets() () {
	C.gtk_drag_source_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddUriTargets() () {
	C.gtk_drag_source_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceGetTargetList() (_go__return__ *TargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_drag_source_get_target_list((*C.GtkWidget)(_self_))
	_go__return__ = (*TargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) DragSourceSetIconGicon(icon *C.GIcon) () {
	C.gtk_drag_source_set_icon_gicon((*C.GtkWidget)(_self_), icon)
	return
}

func (_self_ *Widget) DragSourceSetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_drag_source_set_icon_name((*C.GtkWidget)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *Widget) DragSourceSetIconPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_drag_source_set_icon_pixbuf((*C.GtkWidget)(_self_), pixbuf)
	return
}

func (_self_ *Widget) DragSourceSetIconStock(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_drag_source_set_icon_stock((*C.GtkWidget)(_self_), _cgo_stock_id_)
	return
}

func (_self_ *Widget) DragSourceSetTargetList(target_list *TargetList) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_drag_source_set_target_list((*C.GtkWidget)(_self_), _cgo_target_list_)
	return
}

func (_self_ *Widget) DragSourceUnset() () {
	C.gtk_drag_source_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragUnhighlight() () {
	C.gtk_drag_unhighlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Draw(cr *C.cairo_t) () {
	C.gtk_widget_draw((*C.GtkWidget)(_self_), cr)
	return
}

func (_self_ *Widget) ErrorBell() () {
	C.gtk_widget_error_bell((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Event(event *C.GdkEvent) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_event((*C.GtkWidget)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) FreezeChildNotify() () {
	C.gtk_widget_freeze_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_widget_get_accessible((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedHeight() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_height((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedWidth() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_width((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocation() (allocation *C.GtkAllocation) {
	C.gtk_widget_get_allocation((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) GetAncestor(widget_type C.GType) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_ancestor((*C.GtkWidget)(_self_), widget_type)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetAppPaintable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_app_paintable((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetCanDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_can_default((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetCanFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_can_focus((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetChildVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_child_visible((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetClipboard(selection C.GdkAtom) (_go__return__ *Clipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_widget_get_clipboard((*C.GtkWidget)(_self_), selection)
	_go__return__ = (*Clipboard)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetCompositeName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_composite_name((*C.GtkWidget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Widget) GetDeviceEnabled(device *C.GdkDevice) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_device_enabled((*C.GtkWidget)(_self_), device)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetDeviceEvents(device *C.GdkDevice) (_return_ C.GdkEventMask) {
	_return_ = C.gtk_widget_get_device_events((*C.GtkWidget)(_self_), device)
	return
}

func (_self_ *Widget) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_direction((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_widget_get_display((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDoubleBuffered() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_double_buffered((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetEvents() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_events((*C.GtkWidget)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) GetHalign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_halign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHasTooltip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_has_tooltip((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHasWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_has_window((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHexpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_hexpand((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHexpandSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_hexpand_set((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetMapped() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_mapped((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetMarginBottom() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_bottom((*C.GtkWidget)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) GetMarginLeft() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_left((*C.GtkWidget)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) GetMarginRight() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_right((*C.GtkWidget)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) GetMarginTop() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_top((*C.GtkWidget)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) GetModifierMask(intent C.GdkModifierIntent) (_return_ C.GdkModifierType) {
	_return_ = C.gtk_widget_get_modifier_mask((*C.GtkWidget)(_self_), intent)
	return
}

func (_self_ *Widget) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_widget_get_name((*C.GtkWidget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Widget) GetNoShowAll() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_no_show_all((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetPangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_get_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetParent() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_parent((*C.GtkWidget)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetParentWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_parent_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetPath() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_get_path((*C.GtkWidget)(_self_))
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetPreferredHeight() (_go_minimum_height_ int, _go_natural_height_ int) {
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_widget_get_preferred_height((*C.GtkWidget)(_self_), &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *Widget) GetPreferredHeightForWidth(width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_widget_get_preferred_height_for_width((*C.GtkWidget)(_self_), _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *Widget) GetPreferredSize() (minimum_size *Requisition, natural_size *Requisition) {
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C.gtk_widget_get_preferred_size((*C.GtkWidget)(_self_), &_allocated_minimum_size_, &_allocated_natural_size_)
	minimum_size = (*Requisition)(unsafe.Pointer(&_allocated_minimum_size_))
	natural_size = (*Requisition)(unsafe.Pointer(&_allocated_natural_size_))
	return
}

func (_self_ *Widget) GetPreferredWidth() (_go_minimum_width_ int, _go_natural_width_ int) {
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_widget_get_preferred_width((*C.GtkWidget)(_self_), &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *Widget) GetPreferredWidthForHeight(height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_widget_get_preferred_width_for_height((*C.GtkWidget)(_self_), _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *Widget) GetRealized() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_realized((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetReceivesDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_receives_default((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_widget_get_request_mode((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetRootWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_root_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_widget_get_screen((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_sensitive((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetSettings() (_go__return__ *Settings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_widget_get_settings((*C.GtkWidget)(_self_))
	_go__return__ = (*Settings)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetSizeRequest() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_widget_get_size_request((*C.GtkWidget)(_self_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *Widget) GetStateFlags() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_widget_get_state_flags((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetStyleContext() (_go__return__ *StyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_widget_get_style_context((*C.GtkWidget)(_self_))
	_go__return__ = (*StyleContext)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetSupportMultidevice() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_support_multidevice((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetTooltipMarkup() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_tooltip_markup((*C.GtkWidget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Widget) GetTooltipText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_tooltip_text((*C.GtkWidget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Widget) GetTooltipWindow() (_go__return__ *Window) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_widget_get_tooltip_window((*C.GtkWidget)(_self_))
	_go__return__ = (*Window)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetToplevel() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_toplevel((*C.GtkWidget)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Widget) GetValign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_valign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVexpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_vexpand((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVexpandSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_vexpand_set((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_visible((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVisual() (_return_ *C.GdkVisual) {
	_return_ = C.gtk_widget_get_visual((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabAdd() () {
	C.gtk_grab_add((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabDefault() () {
	C.gtk_widget_grab_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabFocus() () {
	C.gtk_widget_grab_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabRemove() () {
	C.gtk_grab_remove((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_default((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) HasFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_focus((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) HasGrab() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_grab((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) HasScreen() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_screen((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) HasVisibleFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_visible_focus((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) Hide() () {
	C.gtk_widget_hide((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HideOnDelete() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_hide_on_delete((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) InDestruction() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_in_destruction((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) InputShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_input_shape_combine_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) InsertActionGroup(name string, group *C.GActionGroup) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_insert_action_group((*C.GtkWidget)(_self_), _cgo_name_, group)
	return
}

func (_self_ *Widget) Intersect(area *C.GdkRectangle, intersection *C.GdkRectangle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_intersect((*C.GtkWidget)(_self_), area, intersection)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsAncestor(ancestor *Widget) (_go__return__ bool) {
	_cgo_ancestor_ := (*C.GtkWidget)(unsafe.Pointer(ancestor))
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_ancestor((*C.GtkWidget)(_self_), _cgo_ancestor_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsComposited() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_composited((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsDrawable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_drawable((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_focus((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_sensitive((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) IsToplevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_toplevel((*C.GtkWidget)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) KeynavFailed(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_keynav_failed((*C.GtkWidget)(_self_), direction)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) ListAccelClosures() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_accel_closures((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ListMnemonicLabels() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_mnemonic_labels((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Map() () {
	C.gtk_widget_map((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) MnemonicActivate(group_cycling bool) (_go__return__ bool) {
	_cgo_group_cycling_ := C.glibfalse()
	if group_cycling { _cgo_group_cycling_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_widget_mnemonic_activate((*C.GtkWidget)(_self_), _cgo_group_cycling_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) OverrideBackgroundColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_background_color((*C.GtkWidget)(_self_), state, color)
	return
}

func (_self_ *Widget) OverrideColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_color((*C.GtkWidget)(_self_), state, color)
	return
}

func (_self_ *Widget) OverrideCursor(cursor *C.GdkRGBA, secondary_cursor *C.GdkRGBA) () {
	C._gtk_widget_override_cursor((*C.GtkWidget)(_self_), cursor, secondary_cursor)
	return
}

func (_self_ *Widget) OverrideFont(font_desc *C.PangoFontDescription) () {
	C._gtk_widget_override_font((*C.GtkWidget)(_self_), font_desc)
	return
}

func (_self_ *Widget) OverrideSymbolicColor(name string, color *C.GdkRGBA) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_override_symbolic_color((*C.GtkWidget)(_self_), _cgo_name_, color)
	return
}

func (_self_ *Widget) QueueComputeExpand() () {
	C.gtk_widget_queue_compute_expand((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDraw() () {
	C.gtk_widget_queue_draw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDrawArea(x int, y int, width int, height int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_widget_queue_draw_area((*C.GtkWidget)(_self_), _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Widget) QueueDrawRegion(region *C.cairo_region_t) () {
	C._gtk_widget_queue_draw_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) QueueResize() () {
	C.gtk_widget_queue_resize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueResizeNoRedraw() () {
	C.gtk_widget_queue_resize_no_redraw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Realize() () {
	C.gtk_widget_realize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) RegionIntersect(region *C.cairo_region_t) (_return_ *C.cairo_region_t) {
	_return_ = C._gtk_widget_region_intersect((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) RemoveAccelerator(accel_group *AccelGroup, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_widget_remove_accelerator((*C.GtkWidget)(_self_), _cgo_accel_group_, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) RemoveMnemonicLabel(label *Widget) () {
	_cgo_label_ := (*C.GtkWidget)(unsafe.Pointer(label))
	C.gtk_widget_remove_mnemonic_label((*C.GtkWidget)(_self_), _cgo_label_)
	return
}

func (_self_ *Widget) RenderIconPixbuf(stock_id string, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_widget_render_icon_pixbuf((*C.GtkWidget)(_self_), _cgo_stock_id_, size)
	return
}

func (_self_ *Widget) Reparent(new_parent *Widget) () {
	_cgo_new_parent_ := (*C.GtkWidget)(unsafe.Pointer(new_parent))
	C.gtk_widget_reparent((*C.GtkWidget)(_self_), _cgo_new_parent_)
	return
}

func (_self_ *Widget) ResetStyle() () {
	C.gtk_widget_reset_style((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SendExpose(event *C.GdkEvent) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_send_expose((*C.GtkWidget)(_self_), event)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Widget) SendFocusChange(event *C.GdkEvent) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_send_focus_change((*C.GtkWidget)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) SetAccelPath(accel_path string, accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_widget_set_accel_path((*C.GtkWidget)(_self_), _cgo_accel_path_, _cgo_accel_group_)
	return
}

func (_self_ *Widget) SetAllocation(allocation *C.GtkAllocation) () {
	C._gtk_widget_set_allocation((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) SetAppPaintable(app_paintable bool) () {
	_cgo_app_paintable_ := C.glibfalse()
	if app_paintable { _cgo_app_paintable_ = C.glibtrue() }
	C.gtk_widget_set_app_paintable((*C.GtkWidget)(_self_), _cgo_app_paintable_)
	return
}

func (_self_ *Widget) SetCanDefault(can_default bool) () {
	_cgo_can_default_ := C.glibfalse()
	if can_default { _cgo_can_default_ = C.glibtrue() }
	C.gtk_widget_set_can_default((*C.GtkWidget)(_self_), _cgo_can_default_)
	return
}

func (_self_ *Widget) SetCanFocus(can_focus bool) () {
	_cgo_can_focus_ := C.glibfalse()
	if can_focus { _cgo_can_focus_ = C.glibtrue() }
	C.gtk_widget_set_can_focus((*C.GtkWidget)(_self_), _cgo_can_focus_)
	return
}

func (_self_ *Widget) SetChildVisible(is_visible bool) () {
	_cgo_is_visible_ := C.glibfalse()
	if is_visible { _cgo_is_visible_ = C.glibtrue() }
	C.gtk_widget_set_child_visible((*C.GtkWidget)(_self_), _cgo_is_visible_)
	return
}

func (_self_ *Widget) SetCompositeName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_set_composite_name((*C.GtkWidget)(_self_), _cgo_name_)
	return
}

func (_self_ *Widget) SetDeviceEnabled(device *C.GdkDevice, enabled bool) () {
	_cgo_enabled_ := C.glibfalse()
	if enabled { _cgo_enabled_ = C.glibtrue() }
	C.gtk_widget_set_device_enabled((*C.GtkWidget)(_self_), device, _cgo_enabled_)
	return
}

func (_self_ *Widget) SetDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_set_device_events((*C.GtkWidget)(_self_), device, events)
	return
}

func (_self_ *Widget) SetDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_direction((*C.GtkWidget)(_self_), dir)
	return
}

func (_self_ *Widget) SetDoubleBuffered(double_buffered bool) () {
	_cgo_double_buffered_ := C.glibfalse()
	if double_buffered { _cgo_double_buffered_ = C.glibtrue() }
	C.gtk_widget_set_double_buffered((*C.GtkWidget)(_self_), _cgo_double_buffered_)
	return
}

func (_self_ *Widget) SetEvents(events int) () {
	_cgo_events_ := (C.gint)(events)
	C.gtk_widget_set_events((*C.GtkWidget)(_self_), _cgo_events_)
	return
}

func (_self_ *Widget) SetHalign(align C.GtkAlign) () {
	C.gtk_widget_set_halign((*C.GtkWidget)(_self_), align)
	return
}

func (_self_ *Widget) SetHasTooltip(has_tooltip bool) () {
	_cgo_has_tooltip_ := C.glibfalse()
	if has_tooltip { _cgo_has_tooltip_ = C.glibtrue() }
	C.gtk_widget_set_has_tooltip((*C.GtkWidget)(_self_), _cgo_has_tooltip_)
	return
}

func (_self_ *Widget) SetHasWindow(has_window bool) () {
	_cgo_has_window_ := C.glibfalse()
	if has_window { _cgo_has_window_ = C.glibtrue() }
	C.gtk_widget_set_has_window((*C.GtkWidget)(_self_), _cgo_has_window_)
	return
}

func (_self_ *Widget) SetHexpand(expand bool) () {
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_widget_set_hexpand((*C.GtkWidget)(_self_), _cgo_expand_)
	return
}

func (_self_ *Widget) SetHexpandSet(set bool) () {
	_cgo_set_ := C.glibfalse()
	if set { _cgo_set_ = C.glibtrue() }
	C.gtk_widget_set_hexpand_set((*C.GtkWidget)(_self_), _cgo_set_)
	return
}

func (_self_ *Widget) SetMapped(mapped bool) () {
	_cgo_mapped_ := C.glibfalse()
	if mapped { _cgo_mapped_ = C.glibtrue() }
	C.gtk_widget_set_mapped((*C.GtkWidget)(_self_), _cgo_mapped_)
	return
}

func (_self_ *Widget) SetMarginBottom(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_bottom((*C.GtkWidget)(_self_), _cgo_margin_)
	return
}

func (_self_ *Widget) SetMarginLeft(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_left((*C.GtkWidget)(_self_), _cgo_margin_)
	return
}

func (_self_ *Widget) SetMarginRight(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_right((*C.GtkWidget)(_self_), _cgo_margin_)
	return
}

func (_self_ *Widget) SetMarginTop(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_top((*C.GtkWidget)(_self_), _cgo_margin_)
	return
}

func (_self_ *Widget) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_set_name((*C.GtkWidget)(_self_), _cgo_name_)
	return
}

func (_self_ *Widget) SetNoShowAll(no_show_all bool) () {
	_cgo_no_show_all_ := C.glibfalse()
	if no_show_all { _cgo_no_show_all_ = C.glibtrue() }
	C.gtk_widget_set_no_show_all((*C.GtkWidget)(_self_), _cgo_no_show_all_)
	return
}

func (_self_ *Widget) SetParent(parent *Widget) () {
	_cgo_parent_ := (*C.GtkWidget)(unsafe.Pointer(parent))
	C.gtk_widget_set_parent((*C.GtkWidget)(_self_), _cgo_parent_)
	return
}

func (_self_ *Widget) SetParentWindow(parent_window *C.GdkWindow) () {
	C.gtk_widget_set_parent_window((*C.GtkWidget)(_self_), parent_window)
	return
}

func (_self_ *Widget) SetRealized(realized bool) () {
	_cgo_realized_ := C.glibfalse()
	if realized { _cgo_realized_ = C.glibtrue() }
	C.gtk_widget_set_realized((*C.GtkWidget)(_self_), _cgo_realized_)
	return
}

func (_self_ *Widget) SetReceivesDefault(receives_default bool) () {
	_cgo_receives_default_ := C.glibfalse()
	if receives_default { _cgo_receives_default_ = C.glibtrue() }
	C.gtk_widget_set_receives_default((*C.GtkWidget)(_self_), _cgo_receives_default_)
	return
}

func (_self_ *Widget) SetRedrawOnAllocate(redraw_on_allocate bool) () {
	_cgo_redraw_on_allocate_ := C.glibfalse()
	if redraw_on_allocate { _cgo_redraw_on_allocate_ = C.glibtrue() }
	C.gtk_widget_set_redraw_on_allocate((*C.GtkWidget)(_self_), _cgo_redraw_on_allocate_)
	return
}

func (_self_ *Widget) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := C.glibfalse()
	if sensitive { _cgo_sensitive_ = C.glibtrue() }
	C.gtk_widget_set_sensitive((*C.GtkWidget)(_self_), _cgo_sensitive_)
	return
}

func (_self_ *Widget) SetSizeRequest(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_widget_set_size_request((*C.GtkWidget)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Widget) SetStateFlags(flags C.GtkStateFlags, clear bool) () {
	_cgo_clear_ := C.glibfalse()
	if clear { _cgo_clear_ = C.glibtrue() }
	C.gtk_widget_set_state_flags((*C.GtkWidget)(_self_), flags, _cgo_clear_)
	return
}

func (_self_ *Widget) SetSupportMultidevice(support_multidevice bool) () {
	_cgo_support_multidevice_ := C.glibfalse()
	if support_multidevice { _cgo_support_multidevice_ = C.glibtrue() }
	C.gtk_widget_set_support_multidevice((*C.GtkWidget)(_self_), _cgo_support_multidevice_)
	return
}

func (_self_ *Widget) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_widget_set_tooltip_markup((*C.GtkWidget)(_self_), _cgo_markup_)
	return
}

func (_self_ *Widget) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_widget_set_tooltip_text((*C.GtkWidget)(_self_), _cgo_text_)
	return
}

func (_self_ *Widget) SetTooltipWindow(custom_window *Window) () {
	_cgo_custom_window_ := (*C.GtkWindow)(unsafe.Pointer(custom_window))
	C.gtk_widget_set_tooltip_window((*C.GtkWidget)(_self_), _cgo_custom_window_)
	return
}

func (_self_ *Widget) SetValign(align C.GtkAlign) () {
	C.gtk_widget_set_valign((*C.GtkWidget)(_self_), align)
	return
}

func (_self_ *Widget) SetVexpand(expand bool) () {
	_cgo_expand_ := C.glibfalse()
	if expand { _cgo_expand_ = C.glibtrue() }
	C.gtk_widget_set_vexpand((*C.GtkWidget)(_self_), _cgo_expand_)
	return
}

func (_self_ *Widget) SetVexpandSet(set bool) () {
	_cgo_set_ := C.glibfalse()
	if set { _cgo_set_ = C.glibtrue() }
	C.gtk_widget_set_vexpand_set((*C.GtkWidget)(_self_), _cgo_set_)
	return
}

func (_self_ *Widget) SetVisible(visible bool) () {
	_cgo_visible_ := C.glibfalse()
	if visible { _cgo_visible_ = C.glibtrue() }
	C.gtk_widget_set_visible((*C.GtkWidget)(_self_), _cgo_visible_)
	return
}

func (_self_ *Widget) SetVisual(visual *C.GdkVisual) () {
	C.gtk_widget_set_visual((*C.GtkWidget)(_self_), visual)
	return
}

func (_self_ *Widget) SetWindow(window *C.GdkWindow) () {
	C.gtk_widget_set_window((*C.GtkWidget)(_self_), window)
	return
}

func (_self_ *Widget) ShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_shape_combine_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) Show() () {
	C.gtk_widget_show((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowAll() () {
	C.gtk_widget_show_all((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowNow() () {
	C.gtk_widget_show_now((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SizeAllocate(allocation *C.GtkAllocation) () {
	C.gtk_widget_size_allocate((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) StyleGetProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_widget_style_get_property((*C.GtkWidget)(_self_), _cgo_property_name_, value)
	return
}

func (_self_ *Widget) ThawChildNotify() () {
	C.gtk_widget_thaw_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) TranslateCoordinates(dest_widget *Widget, src_x int, src_y int) (_go__return__ bool, _go_dest_x_ int, _go_dest_y_ int) {
	_cgo_dest_widget_ := (*C.GtkWidget)(unsafe.Pointer(dest_widget))
	_cgo_src_x_ := (C.gint)(src_x)
	_cgo_src_y_ := (C.gint)(src_y)
	var dest_x C.gint
	var dest_y C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_widget_translate_coordinates((*C.GtkWidget)(_self_), _cgo_dest_widget_, _cgo_src_x_, _cgo_src_y_, &dest_x, &dest_y)
	_go_dest_x_ = (int)(dest_x)
	_go_dest_y_ = (int)(dest_y)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Widget) TriggerTooltipQuery() () {
	C.gtk_widget_trigger_tooltip_query((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unmap() () {
	C.gtk_widget_unmap((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unparent() () {
	C.gtk_widget_unparent((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unrealize() () {
	C.gtk_widget_unrealize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) UnsetStateFlags(flags C.GtkStateFlags) () {
	C.gtk_widget_unset_state_flags((*C.GtkWidget)(_self_), flags)
	return
}

func (_self_ *WidgetClass) FindStyleProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_widget_class_find_style_property((*C.GtkWidgetClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *WidgetClass) InstallStyleProperty(pspec *C.GParamSpec) () {
	C.gtk_widget_class_install_style_property((*C.GtkWidgetClass)(_self_), pspec)
	return
}

func (_self_ *WidgetClass) InstallStylePropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_widget_class_install_style_property_parser((*C.GtkWidgetClass)(_self_), pspec, parser)
	return
}

func (_self_ *WidgetClass) ListStyleProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_widget_class_list_style_properties((*C.GtkWidgetClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *WidgetClass) SetAccessibleRole(role C.AtkRole) () {
	C.gtk_widget_class_set_accessible_role((*C.GtkWidgetClass)(_self_), role)
	return
}

func (_self_ *WidgetClass) SetAccessibleType(type_ C.GType) () {
	C.gtk_widget_class_set_accessible_type((*C.GtkWidgetClass)(_self_), type_)
	return
}

func WidgetPathNew() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_path_new()
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WidgetPath) AppendForWidget(widget *Widget) (_go__return__ int) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_for_widget((*C.GtkWidgetPath)(_self_), _cgo_widget_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *WidgetPath) AppendType(type_ C.GType) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_type((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *WidgetPath) AppendWithSiblings(siblings *WidgetPath, sibling_index uint) (_go__return__ int) {
	_cgo_siblings_ := (*C.GtkWidgetPath)(unsafe.Pointer(siblings))
	_cgo_sibling_index_ := (C.guint)(sibling_index)
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_with_siblings((*C.GtkWidgetPath)(_self_), _cgo_siblings_, _cgo_sibling_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *WidgetPath) Copy() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_widget_path_copy((*C.GtkWidgetPath)(_self_))
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WidgetPath) Free() () {
	C.gtk_widget_path_free((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) GetObjectType() (_return_ C.GType) {
	_return_ = C._gtk_widget_path_get_object_type((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) HasParent(type_ C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_has_parent((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IsType(type_ C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_is_type((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterAddClass(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_add_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *WidgetPath) IterAddRegion(pos int, name string, flags C.GtkRegionFlags) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_add_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_, flags)
	return
}

func (_self_ *WidgetPath) IterClearClasses(pos int) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_clear_classes((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *WidgetPath) IterClearRegions(pos int) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_clear_regions((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *WidgetPath) IterGetName(pos int) (_go__return__ string) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ *C.gchar
	_return_ = C._gtk_widget_path_iter_get_name((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *WidgetPath) IterGetObjectType(pos int) (_return_ C.GType) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_get_object_type((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *WidgetPath) IterGetSiblingIndex(pos int) (_go__return__ uint) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.guint
	_return_ = C._gtk_widget_path_iter_get_sibling_index((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *WidgetPath) IterGetSiblings(pos int) (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_get_siblings((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WidgetPath) IterHasClass(pos int, name string) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasName(pos int, name string) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_name((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQclass(pos int, qname C.GQuark) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qclass((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQname(pos int, qname C.GQuark) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qname((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQregion(pos int, qname C.GQuark) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qregion((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname, flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasRegion(pos int, name string) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_, flags)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterListClasses(pos int) (_return_ *C.GSList) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_classes((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *WidgetPath) IterListRegions(pos int) (_return_ *C.GSList) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_regions((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *WidgetPath) IterRemoveClass(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_remove_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *WidgetPath) IterRemoveRegion(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_remove_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *WidgetPath) IterSetName(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_set_name((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *WidgetPath) IterSetObjectType(pos int, type_ C.GType) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_set_object_type((*C.GtkWidgetPath)(_self_), _cgo_pos_, type_)
	return
}

func (_self_ *WidgetPath) Length() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_widget_path_length((*C.GtkWidgetPath)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *WidgetPath) PrependType(type_ C.GType) () {
	C.gtk_widget_path_prepend_type((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *WidgetPath) Ref() (_go__return__ *WidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_path_ref((*C.GtkWidgetPath)(_self_))
	_go__return__ = (*WidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WidgetPath) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._gtk_widget_path_to_string((*C.GtkWidgetPath)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *WidgetPath) Unref() () {
	C.gtk_widget_path_unref((*C.GtkWidgetPath)(_self_))
	return
}

func WindowNew(type_ C.GtkWindowType) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_new(type_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func WindowGetDefaultIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_default_icon_list()
	return
}

func WindowGetDefaultIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_default_icon_name()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func WindowListToplevels() (_return_ *C.GList) {
	_return_ = C.gtk_window_list_toplevels()
	return
}

func WindowSetAutoStartupNotification(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_auto_startup_notification(_cgo_setting_)
	return
}

func WindowSetDefaultIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_default_icon(icon)
	return
}

func WindowSetDefaultIconFromFile(filename string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_set_default_icon_from_file(_cgo_filename_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func WindowSetDefaultIconList(list *C.GList) () {
	C.gtk_window_set_default_icon_list(list)
	return
}

func WindowSetDefaultIconName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_window_set_default_icon_name(_cgo_name_)
	return
}

func (_self_ *Window) ActivateDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_default((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) ActivateFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_focus((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) ActivateKey(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_key((*C.GtkWindow)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) AddAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_window_add_accel_group((*C.GtkWindow)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *Window) AddMnemonic(keyval uint, target *Widget) () {
	_cgo_target_ := (*C.GtkWidget)(unsafe.Pointer(target))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_window_add_mnemonic((*C.GtkWindow)(_self_), _cgo_keyval_, _cgo_target_)
	return
}

func (_self_ *Window) BeginMoveDrag(button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_button_ := (C.gint)(button)
	_cgo_root_x_ := (C.gint)(root_x)
	_cgo_root_y_ := (C.gint)(root_y)
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_begin_move_drag((*C.GtkWindow)(_self_), _cgo_button_, _cgo_root_x_, _cgo_root_y_, _cgo_timestamp_)
	return
}

func (_self_ *Window) BeginResizeDrag(edge C.GdkWindowEdge, button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_button_ := (C.gint)(button)
	_cgo_root_x_ := (C.gint)(root_x)
	_cgo_root_y_ := (C.gint)(root_y)
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_begin_resize_drag((*C.GtkWindow)(_self_), edge, _cgo_button_, _cgo_root_x_, _cgo_root_y_, _cgo_timestamp_)
	return
}

func (_self_ *Window) Deiconify() () {
	C.gtk_window_deiconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Fullscreen() () {
	C.gtk_window_fullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetAcceptFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_accept_focus((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetApplication() (_go__return__ *Application) {
	var _return_ *C.GtkApplication
	_return_ = C.gtk_window_get_application((*C.GtkWindow)(_self_))
	_go__return__ = (*Application)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetAttachedTo() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_attached_to((*C.GtkWindow)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetDecorated() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_decorated((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetDefaultSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_window_get_default_size((*C.GtkWindow)(_self_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *Window) GetDefaultWidget() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_default_widget((*C.GtkWindow)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetDeletable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_deletable((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetDestroyWithParent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_destroy_with_parent((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetFocus() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_focus((*C.GtkWindow)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetFocusOnMap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_focus_on_map((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetFocusVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_focus_visible((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetGravity() (_return_ C.GdkGravity) {
	_return_ = C.gtk_window_get_gravity((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetGroup() (_go__return__ *WindowGroup) {
	var _return_ *C.GtkWindowGroup
	_return_ = C.gtk_window_get_group((*C.GtkWindow)(_self_))
	_go__return__ = (*WindowGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetHasResizeGrip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_has_resize_grip((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetHideTitlebarWhenMaximized() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_hide_titlebar_when_maximized((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetIcon() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_window_get_icon((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_icon_list((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_icon_name((*C.GtkWindow)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Window) GetMnemonicModifier() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_window_get_mnemonic_modifier((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetMnemonicsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_mnemonics_visible((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetModal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_modal((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetOpacity() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_window_get_opacity((*C.GtkWindow)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Window) GetPosition() (_go_root_x_ int, _go_root_y_ int) {
	var root_x C.gint
	var root_y C.gint
	C.gtk_window_get_position((*C.GtkWindow)(_self_), &root_x, &root_y)
	_go_root_x_ = (int)(root_x)
	_go_root_y_ = (int)(root_y)
	return
}

func (_self_ *Window) GetResizable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_resizable((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetResizeGripArea() (_go__return__ bool, rect *C.GdkRectangle) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_resize_grip_area((*C.GtkWindow)(_self_), rect)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetRole() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_role((*C.GtkWindow)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Window) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_window_get_screen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_window_get_size((*C.GtkWindow)(_self_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *Window) GetSkipPagerHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_skip_pager_hint((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetSkipTaskbarHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_skip_taskbar_hint((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_title((*C.GtkWindow)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Window) GetTransientFor() (_go__return__ *Window) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_window_get_transient_for((*C.GtkWindow)(_self_))
	_go__return__ = (*Window)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Window) GetTypeHint() (_return_ C.GdkWindowTypeHint) {
	_return_ = C.gtk_window_get_type_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetUrgencyHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_urgency_hint((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) GetWindowType() (_return_ C.GtkWindowType) {
	_return_ = C.gtk_window_get_window_type((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) HasGroup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_has_group((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) HasToplevelFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_has_toplevel_focus((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) Iconify() () {
	C.gtk_window_iconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) IsActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_is_active((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) Maximize() () {
	C.gtk_window_maximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) MnemonicActivate(keyval uint, modifier C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_window_mnemonic_activate((*C.GtkWindow)(_self_), _cgo_keyval_, modifier)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) Move(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_window_move((*C.GtkWindow)(_self_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *Window) ParseGeometry(geometry string) (_go__return__ bool) {
	_cstring_geometry_ := C.CString(geometry)
	_cgo_geometry_ := (*C.gchar)(unsafe.Pointer(_cstring_geometry_))
	defer C.free(unsafe.Pointer(_cstring_geometry_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_parse_geometry((*C.GtkWindow)(_self_), _cgo_geometry_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) Present() () {
	C.gtk_window_present((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) PresentWithTime(timestamp uint32) () {
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_present_with_time((*C.GtkWindow)(_self_), _cgo_timestamp_)
	return
}

func (_self_ *Window) PropagateKeyEvent(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_propagate_key_event((*C.GtkWindow)(_self_), event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) RemoveAccelGroup(accel_group *AccelGroup) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(unsafe.Pointer(accel_group))
	C.gtk_window_remove_accel_group((*C.GtkWindow)(_self_), _cgo_accel_group_)
	return
}

func (_self_ *Window) RemoveMnemonic(keyval uint, target *Widget) () {
	_cgo_target_ := (*C.GtkWidget)(unsafe.Pointer(target))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_window_remove_mnemonic((*C.GtkWindow)(_self_), _cgo_keyval_, _cgo_target_)
	return
}

func (_self_ *Window) ReshowWithInitialSize() () {
	C.gtk_window_reshow_with_initial_size((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Resize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_resize((*C.GtkWindow)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Window) ResizeGripIsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_resize_grip_is_visible((*C.GtkWindow)(_self_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) ResizeToGeometry(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_resize_to_geometry((*C.GtkWindow)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Window) SetAcceptFocus(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_accept_focus((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetApplication(application *Application) () {
	_cgo_application_ := (*C.GtkApplication)(unsafe.Pointer(application))
	C.gtk_window_set_application((*C.GtkWindow)(_self_), _cgo_application_)
	return
}

func (_self_ *Window) SetAttachedTo(attach_widget *Widget) () {
	_cgo_attach_widget_ := (*C.GtkWidget)(unsafe.Pointer(attach_widget))
	C.gtk_window_set_attached_to((*C.GtkWindow)(_self_), _cgo_attach_widget_)
	return
}

func (_self_ *Window) SetDecorated(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_decorated((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetDefault(default_widget *Widget) () {
	_cgo_default_widget_ := (*C.GtkWidget)(unsafe.Pointer(default_widget))
	C.gtk_window_set_default((*C.GtkWindow)(_self_), _cgo_default_widget_)
	return
}

func (_self_ *Window) SetDefaultGeometry(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_set_default_geometry((*C.GtkWindow)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Window) SetDefaultSize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_set_default_size((*C.GtkWindow)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Window) SetDeletable(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_deletable((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetDestroyWithParent(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_destroy_with_parent((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetFocus(focus *Widget) () {
	_cgo_focus_ := (*C.GtkWidget)(unsafe.Pointer(focus))
	C.gtk_window_set_focus((*C.GtkWindow)(_self_), _cgo_focus_)
	return
}

func (_self_ *Window) SetFocusOnMap(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_focus_on_map((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetFocusVisible(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_focus_visible((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetGeometryHints(geometry_widget *Widget, geometry *C.GdkGeometry, geom_mask C.GdkWindowHints) () {
	_cgo_geometry_widget_ := (*C.GtkWidget)(unsafe.Pointer(geometry_widget))
	C.gtk_window_set_geometry_hints((*C.GtkWindow)(_self_), _cgo_geometry_widget_, geometry, geom_mask)
	return
}

func (_self_ *Window) SetGravity(gravity C.GdkGravity) () {
	C.gtk_window_set_gravity((*C.GtkWindow)(_self_), gravity)
	return
}

func (_self_ *Window) SetHasResizeGrip(value bool) () {
	_cgo_value_ := C.glibfalse()
	if value { _cgo_value_ = C.glibtrue() }
	C.gtk_window_set_has_resize_grip((*C.GtkWindow)(_self_), _cgo_value_)
	return
}

func (_self_ *Window) SetHasUserRefCount(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_has_user_ref_count((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetHideTitlebarWhenMaximized(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_hide_titlebar_when_maximized((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_icon((*C.GtkWindow)(_self_), icon)
	return
}

func (_self_ *Window) SetIconFromFile(filename string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_set_icon_from_file((*C.GtkWindow)(_self_), _cgo_filename_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func (_self_ *Window) SetIconList(list *C.GList) () {
	C.gtk_window_set_icon_list((*C.GtkWindow)(_self_), list)
	return
}

func (_self_ *Window) SetIconName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_window_set_icon_name((*C.GtkWindow)(_self_), _cgo_name_)
	return
}

func (_self_ *Window) SetKeepAbove(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_keep_above((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetKeepBelow(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_keep_below((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetMnemonicModifier(modifier C.GdkModifierType) () {
	C.gtk_window_set_mnemonic_modifier((*C.GtkWindow)(_self_), modifier)
	return
}

func (_self_ *Window) SetMnemonicsVisible(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_mnemonics_visible((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetModal(modal bool) () {
	_cgo_modal_ := C.glibfalse()
	if modal { _cgo_modal_ = C.glibtrue() }
	C.gtk_window_set_modal((*C.GtkWindow)(_self_), _cgo_modal_)
	return
}

func (_self_ *Window) SetOpacity(opacity float64) () {
	_cgo_opacity_ := (C.gdouble)(opacity)
	C.gtk_window_set_opacity((*C.GtkWindow)(_self_), _cgo_opacity_)
	return
}

func (_self_ *Window) SetPosition(position C.GtkWindowPosition) () {
	C.gtk_window_set_position((*C.GtkWindow)(_self_), position)
	return
}

func (_self_ *Window) SetResizable(resizable bool) () {
	_cgo_resizable_ := C.glibfalse()
	if resizable { _cgo_resizable_ = C.glibtrue() }
	C.gtk_window_set_resizable((*C.GtkWindow)(_self_), _cgo_resizable_)
	return
}

func (_self_ *Window) SetRole(role string) () {
	_cstring_role_ := C.CString(role)
	_cgo_role_ := (*C.gchar)(unsafe.Pointer(_cstring_role_))
	defer C.free(unsafe.Pointer(_cstring_role_))
	C._gtk_window_set_role((*C.GtkWindow)(_self_), _cgo_role_)
	return
}

func (_self_ *Window) SetScreen(screen *C.GdkScreen) () {
	C.gtk_window_set_screen((*C.GtkWindow)(_self_), screen)
	return
}

func (_self_ *Window) SetSkipPagerHint(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_skip_pager_hint((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetSkipTaskbarHint(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_skip_taskbar_hint((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetStartupId(startup_id string) () {
	_cstring_startup_id_ := C.CString(startup_id)
	_cgo_startup_id_ := (*C.gchar)(unsafe.Pointer(_cstring_startup_id_))
	defer C.free(unsafe.Pointer(_cstring_startup_id_))
	C._gtk_window_set_startup_id((*C.GtkWindow)(_self_), _cgo_startup_id_)
	return
}

func (_self_ *Window) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_window_set_title((*C.GtkWindow)(_self_), _cgo_title_)
	return
}

func (_self_ *Window) SetTransientFor(parent *Window) () {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	C.gtk_window_set_transient_for((*C.GtkWindow)(_self_), _cgo_parent_)
	return
}

func (_self_ *Window) SetTypeHint(hint C.GdkWindowTypeHint) () {
	C.gtk_window_set_type_hint((*C.GtkWindow)(_self_), hint)
	return
}

func (_self_ *Window) SetUrgencyHint(setting bool) () {
	_cgo_setting_ := C.glibfalse()
	if setting { _cgo_setting_ = C.glibtrue() }
	C.gtk_window_set_urgency_hint((*C.GtkWindow)(_self_), _cgo_setting_)
	return
}

func (_self_ *Window) SetWmclass(wmclass_name string, wmclass_class string) () {
	_cstring_wmclass_name_ := C.CString(wmclass_name)
	_cgo_wmclass_name_ := (*C.gchar)(unsafe.Pointer(_cstring_wmclass_name_))
	defer C.free(unsafe.Pointer(_cstring_wmclass_name_))
	_cstring_wmclass_class_ := C.CString(wmclass_class)
	_cgo_wmclass_class_ := (*C.gchar)(unsafe.Pointer(_cstring_wmclass_class_))
	defer C.free(unsafe.Pointer(_cstring_wmclass_class_))
	C._gtk_window_set_wmclass((*C.GtkWindow)(_self_), _cgo_wmclass_name_, _cgo_wmclass_class_)
	return
}

func (_self_ *Window) Stick() () {
	C.gtk_window_stick((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unfullscreen() () {
	C.gtk_window_unfullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unmaximize() () {
	C.gtk_window_unmaximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unstick() () {
	C.gtk_window_unstick((*C.GtkWindow)(_self_))
	return
}

func WindowGroupNew() (_go__return__ *WindowGroup) {
	var _return_ *C.GtkWindowGroup
	_return_ = C.gtk_window_group_new()
	_go__return__ = (*WindowGroup)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WindowGroup) AddWindow(window *Window) () {
	_cgo_window_ := (*C.GtkWindow)(unsafe.Pointer(window))
	C.gtk_window_group_add_window((*C.GtkWindowGroup)(_self_), _cgo_window_)
	return
}

func (_self_ *WindowGroup) GetCurrentDeviceGrab(device *C.GdkDevice) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_group_get_current_device_grab((*C.GtkWindowGroup)(_self_), device)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WindowGroup) GetCurrentGrab() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_group_get_current_grab((*C.GtkWindowGroup)(_self_))
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *WindowGroup) ListWindows() (_return_ *C.GList) {
	_return_ = C.gtk_window_group_list_windows((*C.GtkWindowGroup)(_self_))
	return
}

func (_self_ *WindowGroup) RemoveWindow(window *Window) () {
	_cgo_window_ := (*C.GtkWindow)(unsafe.Pointer(window))
	C.gtk_window_group_remove_window((*C.GtkWindowGroup)(_self_), _cgo_window_)
	return
}

func AccelGroupsActivate(object *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_groups_activate(object, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func AccelGroupsFromObject(object *C.GObject) (_return_ *C.GSList) {
	_return_ = C.gtk_accel_groups_from_object(object)
	return
}

func AcceleratorGetDefaultModMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accelerator_get_default_mod_mask()
	return
}

func AcceleratorGetLabel(accelerator_key uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_get_label(_cgo_accelerator_key_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorGetLabelWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_keycode_ := (C.guint)(keycode)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_get_label_with_keycode(display, _cgo_accelerator_key_, _cgo_keycode_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorName(accelerator_key uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_name(_cgo_accelerator_key_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorNameWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_keycode_ := (C.guint)(keycode)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_name_with_keycode(display, _cgo_accelerator_key_, _cgo_keycode_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorParse(accelerator string) (_go_accelerator_key_ uint, accelerator_mods *C.GdkModifierType) {
	var accelerator_key C.guint
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_accelerator_parse(_cgo_accelerator_, &accelerator_key, accelerator_mods)
	_go_accelerator_key_ = (uint)(accelerator_key)
	return
}

func AcceleratorParseWithKeycode(accelerator string) (_go_accelerator_key_ uint, accelerator_codes unsafe.Pointer, accelerator_mods *C.GdkModifierType) {
	var accelerator_key C.guint
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_accelerator_parse_with_keycode(_cgo_accelerator_, &accelerator_key, accelerator_codes, accelerator_mods)
	_go_accelerator_key_ = (uint)(accelerator_key)
	return
}

func AcceleratorSetDefaultModMask(default_mod_mask C.GdkModifierType) () {
	C.gtk_accelerator_set_default_mod_mask(default_mod_mask)
	return
}

func AcceleratorValid(keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_accelerator_valid(_cgo_keyval_, modifiers)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func AlternativeDialogButtonOrder(screen *C.GdkScreen) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_alternative_dialog_button_order(screen)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func BindingsActivate(object *C.GObject, keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_bindings_activate(object, _cgo_keyval_, modifiers)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func BindingsActivateEvent(object *C.GObject, event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_bindings_activate_event(object, event)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func BuilderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_builder_error_quark()
	return
}

func CairoShouldDrawWindow(cr *C.cairo_t, window *C.GdkWindow) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cairo_should_draw_window(cr, window)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func CairoTransformToWindow(cr *C.cairo_t, widget *Widget, window *C.GdkWindow) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_cairo_transform_to_window(cr, _cgo_widget_, window)
	return
}

func CheckVersion(required_major uint, required_minor uint, required_micro uint) (_go__return__ string) {
	_cgo_required_major_ := (C.guint)(required_major)
	_cgo_required_minor_ := (C.guint)(required_minor)
	_cgo_required_micro_ := (C.guint)(required_micro)
	var _return_ *C.gchar
	_return_ = C._gtk_check_version(_cgo_required_major_, _cgo_required_minor_, _cgo_required_micro_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func CssProviderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_css_provider_error_quark()
	return
}

func DeviceGrabAdd(widget *Widget, device *C.GdkDevice, block_others bool) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_block_others_ := C.glibfalse()
	if block_others { _cgo_block_others_ = C.glibtrue() }
	C.gtk_device_grab_add(_cgo_widget_, device, _cgo_block_others_)
	return
}

func DeviceGrabRemove(widget *Widget, device *C.GdkDevice) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_device_grab_remove(_cgo_widget_, device)
	return
}

func DisableSetlocale() () {
	C.gtk_disable_setlocale()
	return
}

func DistributeNaturalAllocation(extra_space int, n_requested_sizes uint, sizes *RequestedSize) (_go__return__ int) {
	_cgo_sizes_ := (*C.GtkRequestedSize)(unsafe.Pointer(sizes))
	_cgo_extra_space_ := (C.gint)(extra_space)
	_cgo_n_requested_sizes_ := (C.guint)(n_requested_sizes)
	var _return_ C.gint
	_return_ = C.gtk_distribute_natural_allocation(_cgo_extra_space_, _cgo_n_requested_sizes_, _cgo_sizes_)
	_go__return__ = (int)(_return_)
	return
}

func DragFinish(context *C.GdkDragContext, success bool, del bool, time_ uint32) () {
	_cgo_time__ := (C.guint32)(time_)
	_cgo_success_ := C.glibfalse()
	if success { _cgo_success_ = C.glibtrue() }
	_cgo_del_ := C.glibfalse()
	if del { _cgo_del_ = C.glibtrue() }
	C.gtk_drag_finish(context, _cgo_success_, _cgo_del_, _cgo_time__)
	return
}

func DragGetSourceWidget(context *C.GdkDragContext) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_drag_get_source_widget(context)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func DragSetIconDefault(context *C.GdkDragContext) () {
	C.gtk_drag_set_icon_default(context)
	return
}

func DragSetIconGicon(context *C.GdkDragContext, icon *C.GIcon, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_gicon(context, icon, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconName(context *C.GdkDragContext, icon_name string, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_drag_set_icon_name(context, _cgo_icon_name_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconPixbuf(context *C.GdkDragContext, pixbuf *C.GdkPixbuf, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_pixbuf(context, pixbuf, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconStock(context *C.GdkDragContext, stock_id string, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_drag_set_icon_stock(context, _cgo_stock_id_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconSurface(context *C.GdkDragContext, surface *C.cairo_surface_t) () {
	C.gtk_drag_set_icon_surface(context, surface)
	return
}

func DragSetIconWidget(context *C.GdkDragContext, widget *Widget, hot_x int, hot_y int) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_widget(context, _cgo_widget_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func EventsPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_events_pending()
	_go__return__ = _return_ == C.glibtrue()
	return
}

func False() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_false()
	_go__return__ = _return_ == C.glibtrue()
	return
}

func FileChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_file_chooser_error_quark()
	return
}

func GetBinaryAge() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_binary_age()
	_go__return__ = (uint)(_return_)
	return
}

func GetCurrentEvent() (_return_ *C.GdkEvent) {
	_return_ = C.gtk_get_current_event()
	return
}

func GetCurrentEventDevice() (_return_ *C.GdkDevice) {
	_return_ = C.gtk_get_current_event_device()
	return
}

func GetCurrentEventState() (_go__return__ bool, state *C.GdkModifierType) {
	var _return_ C.gboolean
	_return_ = C.gtk_get_current_event_state(state)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func GetCurrentEventTime() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.gtk_get_current_event_time()
	_go__return__ = (uint32)(_return_)
	return
}

func GetDebugFlags() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_debug_flags()
	_go__return__ = (uint)(_return_)
	return
}

func GetDefaultLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C.gtk_get_default_language()
	return
}

func GetEventWidget(event *C.GdkEvent) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_get_event_widget(event)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func GetInterfaceAge() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_interface_age()
	_go__return__ = (uint)(_return_)
	return
}

func GetMajorVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_major_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetMicroVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_micro_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetMinorVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_minor_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetOptionGroup(open_default_display bool) (_return_ *C.GOptionGroup) {
	_cgo_open_default_display_ := C.glibfalse()
	if open_default_display { _cgo_open_default_display_ = C.glibtrue() }
	_return_ = C.gtk_get_option_group(_cgo_open_default_display_)
	return
}

func GrabGetCurrent() (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_grab_get_current()
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func IconSizeFromName(name string) (_return_ C.GtkIconSize) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_icon_size_from_name(_cgo_name_)
	return
}

func IconSizeGetName(size C.GtkIconSize) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_size_get_name(size)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func IconSizeLookup(size C.GtkIconSize) (_go__return__ bool, _go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_icon_size_lookup(size, &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func IconSizeLookupForSettings(settings *Settings, size C.GtkIconSize) (_go__return__ bool, _go_width_ int, _go_height_ int) {
	_cgo_settings_ := (*C.GtkSettings)(unsafe.Pointer(settings))
	var width C.gint
	var height C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_icon_size_lookup_for_settings(_cgo_settings_, size, &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func IconSizeRegister(name string, width int, height int) (_return_ C.GtkIconSize) {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_icon_size_register(_cgo_name_, _cgo_width_, _cgo_height_)
	return
}

func IconSizeRegisterAlias(alias string, target C.GtkIconSize) () {
	_cstring_alias_ := C.CString(alias)
	_cgo_alias_ := (*C.gchar)(unsafe.Pointer(_cstring_alias_))
	defer C.free(unsafe.Pointer(_cstring_alias_))
	C._gtk_icon_size_register_alias(_cgo_alias_, target)
	return
}

func IconThemeErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_icon_theme_error_quark()
	return
}

func Main() () {
	C.gtk_main()
	return
}

func MainDoEvent(event *C.GdkEvent) () {
	C.gtk_main_do_event(event)
	return
}

func MainIteration() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_main_iteration()
	_go__return__ = _return_ == C.glibtrue()
	return
}

func MainIterationDo(blocking bool) (_go__return__ bool) {
	_cgo_blocking_ := C.glibfalse()
	if blocking { _cgo_blocking_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_main_iteration_do(_cgo_blocking_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func MainLevel() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_main_level()
	_go__return__ = (uint)(_return_)
	return
}

func MainQuit() () {
	C.gtk_main_quit()
	return
}

func PrintErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_print_error_quark()
	return
}

func PrintRunPageSetupDialog(parent *Window, page_setup *PageSetup, settings *PrintSettings) (_go__return__ *PageSetup) {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	_cgo_page_setup_ := (*C.GtkPageSetup)(unsafe.Pointer(page_setup))
	_cgo_settings_ := (*C.GtkPrintSettings)(unsafe.Pointer(settings))
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_run_page_setup_dialog(_cgo_parent_, _cgo_page_setup_, _cgo_settings_)
	_go__return__ = (*PageSetup)(unsafe.Pointer(_return_))
	return
}

func PrintRunPageSetupDialogAsync(parent *Window, page_setup *PageSetup, settings *PrintSettings, done_cb C.GtkPageSetupDoneFunc, data C.gpointer) () {
	_cgo_parent_ := (*C.GtkWindow)(unsafe.Pointer(parent))
	_cgo_page_setup_ := (*C.GtkPageSetup)(unsafe.Pointer(page_setup))
	_cgo_settings_ := (*C.GtkPrintSettings)(unsafe.Pointer(settings))
	C.gtk_print_run_page_setup_dialog_async(_cgo_parent_, _cgo_page_setup_, _cgo_settings_, done_cb, data)
	return
}

func PropagateEvent(widget *Widget, event *C.GdkEvent) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_propagate_event(_cgo_widget_, event)
	return
}

func RcPropertyParseBorder(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_border(pspec, gstring, property_value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RcPropertyParseColor(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_color(pspec, gstring, property_value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RcPropertyParseEnum(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_enum(pspec, gstring, property_value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RcPropertyParseFlags(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_flags(pspec, gstring, property_value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RcPropertyParseRequisition(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_requisition(pspec, gstring, property_value)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func RecentChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_chooser_error_quark()
	return
}

func RecentManagerErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_manager_error_quark()
	return
}

func RenderActivity(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_activity(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderArrow(context *StyleContext, cr *C.cairo_t, angle float64, x float64, y float64, size float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_angle_ := (C.gdouble)(angle)
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_size_ := (C.gdouble)(size)
	C.gtk_render_arrow(_cgo_context_, cr, _cgo_angle_, _cgo_x_, _cgo_y_, _cgo_size_)
	return
}

func RenderBackground(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_background(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderCheck(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_check(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderExpander(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_expander(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderExtension(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_extension(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, gap_side)
	return
}

func RenderFocus(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_focus(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderFrame(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_frame(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderFrameGap(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType, xy0_gap float64, xy1_gap float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cgo_xy0_gap_ := (C.gdouble)(xy0_gap)
	_cgo_xy1_gap_ := (C.gdouble)(xy1_gap)
	C.gtk_render_frame_gap(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, gap_side, _cgo_xy0_gap_, _cgo_xy1_gap_)
	return
}

func RenderHandle(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_handle(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderIcon(context *StyleContext, cr *C.cairo_t, pixbuf *C.GdkPixbuf, x float64, y float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_icon(_cgo_context_, cr, pixbuf, _cgo_x_, _cgo_y_)
	return
}

func RenderIconPixbuf(context *StyleContext, source *IconSource, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_source_ := (*C.GtkIconSource)(unsafe.Pointer(source))
	_return_ = C._gtk_render_icon_pixbuf(_cgo_context_, _cgo_source_, size)
	return
}

func RenderInsertionCursor(context *StyleContext, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout, index C.int, direction C.PangoDirection) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_insertion_cursor(_cgo_context_, cr, _cgo_x_, _cgo_y_, layout, index, direction)
	return
}

func RenderLayout(context *StyleContext, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_layout(_cgo_context_, cr, _cgo_x_, _cgo_y_, layout)
	return
}

func RenderLine(context *StyleContext, cr *C.cairo_t, x0 float64, y0 float64, x1 float64, y1 float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	C.gtk_render_line(_cgo_context_, cr, _cgo_x0_, _cgo_y0_, _cgo_x1_, _cgo_y1_)
	return
}

func RenderOption(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_option(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderSlider(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, orientation C.GtkOrientation) () {
	_cgo_context_ := (*C.GtkStyleContext)(unsafe.Pointer(context))
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_slider(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, orientation)
	return
}

func RgbToHsv(r float64, g float64, b float64) (_go_h_ float64, _go_s_ float64, _go_v_ float64) {
	_cgo_r_ := (C.gdouble)(r)
	_cgo_g_ := (C.gdouble)(g)
	_cgo_b_ := (C.gdouble)(b)
	var h C.gdouble
	var s C.gdouble
	var v C.gdouble
	C.gtk_rgb_to_hsv(_cgo_r_, _cgo_g_, _cgo_b_, &h, &s, &v)
	_go_h_ = (float64)(h)
	_go_s_ = (float64)(s)
	_go_v_ = (float64)(v)
	return
}

func SelectionAddTarget(widget *Widget, selection C.GdkAtom, target C.GdkAtom, info uint) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_info_ := (C.guint)(info)
	C.gtk_selection_add_target(_cgo_widget_, selection, target, _cgo_info_)
	return
}

func SelectionClearTargets(widget *Widget, selection C.GdkAtom) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_selection_clear_targets(_cgo_widget_, selection)
	return
}

func SelectionConvert(widget *Widget, selection C.GdkAtom, target C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_convert(_cgo_widget_, selection, target, _cgo_time__)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func SelectionOwnerSet(widget *Widget, selection C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_owner_set(_cgo_widget_, selection, _cgo_time__)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func SelectionOwnerSetForDisplay(display *C.GdkDisplay, widget *Widget, selection C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_owner_set_for_display(display, _cgo_widget_, selection, _cgo_time__)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func SelectionRemoveAll(widget *Widget) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_selection_remove_all(_cgo_widget_)
	return
}

func SetDebugFlags(flags uint) () {
	_cgo_flags_ := (C.guint)(flags)
	C.gtk_set_debug_flags(_cgo_flags_)
	return
}

func ShowUri(screen *C.GdkScreen, uri string, timestamp uint32) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_timestamp_ := (C.guint32)(timestamp)
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_show_uri(screen, _cgo_uri_, _cgo_timestamp_, _error_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func StockListIds() (_return_ *C.GSList) {
	_return_ = C.gtk_stock_list_ids()
	return
}

func StockLookup(stock_id string) (_go__return__ bool, item *StockItem) {
	var _allocated_item_ C.GtkStockItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	var _return_ C.gboolean
	_return_ = C._gtk_stock_lookup(_cgo_stock_id_, &_allocated_item_)
	item = (*StockItem)(unsafe.Pointer(&_allocated_item_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func StockSetTranslateFunc(domain string, func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_stock_set_translate_func(_cgo_domain_, func_, data, notify)
	return
}

func TargetTableNewFromList(list *TargetList) (_return_ *C.GtkTargetEntry, _go_n_targets_ int) {
	_cgo_list_ := (*C.GtkTargetList)(unsafe.Pointer(list))
	var n_targets C.gint
	_return_ = C.gtk_target_table_new_from_list(_cgo_list_, &n_targets)
	_go_n_targets_ = (int)(n_targets)
	return
}

func TestCreateSimpleWindow(window_title string, dialog_text string) (_go__return__ *Widget) {
	var _return_ *C.GtkWidget
	_cstring_window_title_ := C.CString(window_title)
	_cgo_window_title_ := (*C.gchar)(unsafe.Pointer(_cstring_window_title_))
	defer C.free(unsafe.Pointer(_cstring_window_title_))
	_cstring_dialog_text_ := C.CString(dialog_text)
	_cgo_dialog_text_ := (*C.gchar)(unsafe.Pointer(_cstring_dialog_text_))
	defer C.free(unsafe.Pointer(_cstring_dialog_text_))
	_return_ = C._gtk_test_create_simple_window(_cgo_window_title_, _cgo_dialog_text_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TestFindLabel(widget *Widget, label_pattern string) (_go__return__ *Widget) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ *C.GtkWidget
	_cstring_label_pattern_ := C.CString(label_pattern)
	_cgo_label_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_label_pattern_))
	defer C.free(unsafe.Pointer(_cstring_label_pattern_))
	_return_ = C._gtk_test_find_label(_cgo_widget_, _cgo_label_pattern_)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TestFindSibling(base_widget *Widget, widget_type C.GType) (_go__return__ *Widget) {
	_cgo_base_widget_ := (*C.GtkWidget)(unsafe.Pointer(base_widget))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_test_find_sibling(_cgo_base_widget_, widget_type)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TestFindWidget(widget *Widget, label_pattern string, widget_type C.GType) (_go__return__ *Widget) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ *C.GtkWidget
	_cstring_label_pattern_ := C.CString(label_pattern)
	_cgo_label_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_label_pattern_))
	defer C.free(unsafe.Pointer(_cstring_label_pattern_))
	_return_ = C._gtk_test_find_widget(_cgo_widget_, _cgo_label_pattern_, widget_type)
	_go__return__ = (*Widget)(unsafe.Pointer(_return_))
	return
}

func TestListAllTypes() (_return_ *C.GType, _go_n_types_ uint) {
	var n_types C.guint
	_return_ = C._gtk_test_list_all_types(&n_types)
	_go_n_types_ = (uint)(n_types)
	return
}

func TestRegisterAllTypes() () {
	C.gtk_test_register_all_types()
	return
}

func TestSliderGetValue(widget *Widget) (_return_ C.double) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_return_ = C.gtk_test_slider_get_value(_cgo_widget_)
	return
}

func TestSliderSetPerc(widget *Widget, percentage C.double) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	C.gtk_test_slider_set_perc(_cgo_widget_, percentage)
	return
}

func TestSpinButtonClick(spinner *SpinButton, button uint, upwards bool) (_go__return__ bool) {
	_cgo_spinner_ := (*C.GtkSpinButton)(unsafe.Pointer(spinner))
	_cgo_button_ := (C.guint)(button)
	_cgo_upwards_ := C.glibfalse()
	if upwards { _cgo_upwards_ = C.glibtrue() }
	var _return_ C.gboolean
	_return_ = C.gtk_test_spin_button_click(_cgo_spinner_, _cgo_button_, _cgo_upwards_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TestTextGet(widget *Widget) (_go__return__ string) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	var _return_ *C.gchar
	_return_ = C.gtk_test_text_get(_cgo_widget_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TestTextSet(widget *Widget, string_ string) () {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	C._gtk_test_text_set(_cgo_widget_, _cgo_string__)
	return
}

func TestWidgetClick(widget *Widget, button uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_button_ := (C.guint)(button)
	var _return_ C.gboolean
	_return_ = C.gtk_test_widget_click(_cgo_widget_, _cgo_button_, modifiers)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TestWidgetSendKey(widget *Widget, keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(unsafe.Pointer(widget))
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_test_widget_send_key(_cgo_widget_, _cgo_keyval_, modifiers)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TreeGetRowDragData(selection_data *SelectionData) (_go__return__ bool, tree_model unsafe.Pointer, path *TreePath) {
	_cgo_selection_data_ := (*C.GtkSelectionData)(unsafe.Pointer(selection_data))
	var _allocated_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_tree_get_row_drag_data(_cgo_selection_data_, tree_model, unsafe.Pointer(&_allocated_path_))
	path = (*TreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == C.glibtrue()
	return
}

func TreeSetRowDragData(selection_data *SelectionData, tree_model *C.GtkTreeModel, path *TreePath) (_go__return__ bool) {
	_cgo_selection_data_ := (*C.GtkSelectionData)(unsafe.Pointer(selection_data))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_set_row_drag_data(_cgo_selection_data_, tree_model, _cgo_path_)
	_go__return__ = _return_ == C.glibtrue()
	return
}

func True() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_true()
	_go__return__ = _return_ == C.glibtrue()
	return
}

const ACCEL_VISIBLE = C.GTK_ACCEL_VISIBLE
const ACCEL_LOCKED = C.GTK_ACCEL_LOCKED
const ACCEL_MASK = C.GTK_ACCEL_MASK
const ALIGN_FILL = C.GTK_ALIGN_FILL
const ALIGN_START = C.GTK_ALIGN_START
const ALIGN_END = C.GTK_ALIGN_END
const ALIGN_CENTER = C.GTK_ALIGN_CENTER
const APPLICATION_INHIBIT_LOGOUT = C.GTK_APPLICATION_INHIBIT_LOGOUT
const APPLICATION_INHIBIT_SWITCH = C.GTK_APPLICATION_INHIBIT_SWITCH
const APPLICATION_INHIBIT_SUSPEND = C.GTK_APPLICATION_INHIBIT_SUSPEND
const APPLICATION_INHIBIT_IDLE = C.GTK_APPLICATION_INHIBIT_IDLE
const ARROWS_BOTH = C.GTK_ARROWS_BOTH
const ARROWS_START = C.GTK_ARROWS_START
const ARROWS_END = C.GTK_ARROWS_END
const ARROW_UP = C.GTK_ARROW_UP
const ARROW_DOWN = C.GTK_ARROW_DOWN
const ARROW_LEFT = C.GTK_ARROW_LEFT
const ARROW_RIGHT = C.GTK_ARROW_RIGHT
const ARROW_NONE = C.GTK_ARROW_NONE
const ASSISTANT_PAGE_CONTENT = C.GTK_ASSISTANT_PAGE_CONTENT
const ASSISTANT_PAGE_INTRO = C.GTK_ASSISTANT_PAGE_INTRO
const ASSISTANT_PAGE_CONFIRM = C.GTK_ASSISTANT_PAGE_CONFIRM
const ASSISTANT_PAGE_SUMMARY = C.GTK_ASSISTANT_PAGE_SUMMARY
const ASSISTANT_PAGE_PROGRESS = C.GTK_ASSISTANT_PAGE_PROGRESS
const ASSISTANT_PAGE_CUSTOM = C.GTK_ASSISTANT_PAGE_CUSTOM
const EXPAND = C.GTK_EXPAND
const SHRINK = C.GTK_SHRINK
const FILL = C.GTK_FILL
const BORDER_STYLE_NONE = C.GTK_BORDER_STYLE_NONE
const BORDER_STYLE_SOLID = C.GTK_BORDER_STYLE_SOLID
const BORDER_STYLE_INSET = C.GTK_BORDER_STYLE_INSET
const BORDER_STYLE_OUTSET = C.GTK_BORDER_STYLE_OUTSET
const BORDER_STYLE_HIDDEN = C.GTK_BORDER_STYLE_HIDDEN
const BORDER_STYLE_DOTTED = C.GTK_BORDER_STYLE_DOTTED
const BORDER_STYLE_DASHED = C.GTK_BORDER_STYLE_DASHED
const BORDER_STYLE_DOUBLE = C.GTK_BORDER_STYLE_DOUBLE
const BORDER_STYLE_GROOVE = C.GTK_BORDER_STYLE_GROOVE
const BORDER_STYLE_RIDGE = C.GTK_BORDER_STYLE_RIDGE
const BUILDER_ERROR_INVALID_TYPE_FUNCTION = C.GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
const BUILDER_ERROR_UNHANDLED_TAG = C.GTK_BUILDER_ERROR_UNHANDLED_TAG
const BUILDER_ERROR_MISSING_ATTRIBUTE = C.GTK_BUILDER_ERROR_MISSING_ATTRIBUTE
const BUILDER_ERROR_INVALID_ATTRIBUTE = C.GTK_BUILDER_ERROR_INVALID_ATTRIBUTE
const BUILDER_ERROR_INVALID_TAG = C.GTK_BUILDER_ERROR_INVALID_TAG
const BUILDER_ERROR_MISSING_PROPERTY_VALUE = C.GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
const BUILDER_ERROR_INVALID_VALUE = C.GTK_BUILDER_ERROR_INVALID_VALUE
const BUILDER_ERROR_VERSION_MISMATCH = C.GTK_BUILDER_ERROR_VERSION_MISMATCH
const BUILDER_ERROR_DUPLICATE_ID = C.GTK_BUILDER_ERROR_DUPLICATE_ID
const BUTTONBOX_SPREAD = C.GTK_BUTTONBOX_SPREAD
const BUTTONBOX_EDGE = C.GTK_BUTTONBOX_EDGE
const BUTTONBOX_START = C.GTK_BUTTONBOX_START
const BUTTONBOX_END = C.GTK_BUTTONBOX_END
const BUTTONBOX_CENTER = C.GTK_BUTTONBOX_CENTER
const BUTTONS_NONE = C.GTK_BUTTONS_NONE
const BUTTONS_OK = C.GTK_BUTTONS_OK
const BUTTONS_CLOSE = C.GTK_BUTTONS_CLOSE
const BUTTONS_CANCEL = C.GTK_BUTTONS_CANCEL
const BUTTONS_YES_NO = C.GTK_BUTTONS_YES_NO
const BUTTONS_OK_CANCEL = C.GTK_BUTTONS_OK_CANCEL
const CALENDAR_SHOW_HEADING = C.GTK_CALENDAR_SHOW_HEADING
const CALENDAR_SHOW_DAY_NAMES = C.GTK_CALENDAR_SHOW_DAY_NAMES
const CALENDAR_NO_MONTH_CHANGE = C.GTK_CALENDAR_NO_MONTH_CHANGE
const CALENDAR_SHOW_WEEK_NUMBERS = C.GTK_CALENDAR_SHOW_WEEK_NUMBERS
const CALENDAR_SHOW_DETAILS = C.GTK_CALENDAR_SHOW_DETAILS
const CELL_RENDERER_ACCEL_MODE_GTK = C.GTK_CELL_RENDERER_ACCEL_MODE_GTK
const CELL_RENDERER_ACCEL_MODE_OTHER = C.GTK_CELL_RENDERER_ACCEL_MODE_OTHER
const CELL_RENDERER_MODE_INERT = C.GTK_CELL_RENDERER_MODE_INERT
const CELL_RENDERER_MODE_ACTIVATABLE = C.GTK_CELL_RENDERER_MODE_ACTIVATABLE
const CELL_RENDERER_MODE_EDITABLE = C.GTK_CELL_RENDERER_MODE_EDITABLE
const CELL_RENDERER_SELECTED = C.GTK_CELL_RENDERER_SELECTED
const CELL_RENDERER_PRELIT = C.GTK_CELL_RENDERER_PRELIT
const CELL_RENDERER_INSENSITIVE = C.GTK_CELL_RENDERER_INSENSITIVE
const CELL_RENDERER_SORTED = C.GTK_CELL_RENDERER_SORTED
const CELL_RENDERER_FOCUSED = C.GTK_CELL_RENDERER_FOCUSED
const CELL_RENDERER_EXPANDABLE = C.GTK_CELL_RENDERER_EXPANDABLE
const CELL_RENDERER_EXPANDED = C.GTK_CELL_RENDERER_EXPANDED
const CORNER_TOP_LEFT = C.GTK_CORNER_TOP_LEFT
const CORNER_BOTTOM_LEFT = C.GTK_CORNER_BOTTOM_LEFT
const CORNER_TOP_RIGHT = C.GTK_CORNER_TOP_RIGHT
const CORNER_BOTTOM_RIGHT = C.GTK_CORNER_BOTTOM_RIGHT
const CSS_PROVIDER_ERROR_FAILED = C.GTK_CSS_PROVIDER_ERROR_FAILED
const CSS_PROVIDER_ERROR_SYNTAX = C.GTK_CSS_PROVIDER_ERROR_SYNTAX
const CSS_PROVIDER_ERROR_IMPORT = C.GTK_CSS_PROVIDER_ERROR_IMPORT
const CSS_PROVIDER_ERROR_NAME = C.GTK_CSS_PROVIDER_ERROR_NAME
const CSS_PROVIDER_ERROR_DEPRECATED = C.GTK_CSS_PROVIDER_ERROR_DEPRECATED
const CSS_PROVIDER_ERROR_UNKNOWN_VALUE = C.GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
const CSS_SECTION_DOCUMENT = C.GTK_CSS_SECTION_DOCUMENT
const CSS_SECTION_IMPORT = C.GTK_CSS_SECTION_IMPORT
const CSS_SECTION_COLOR_DEFINITION = C.GTK_CSS_SECTION_COLOR_DEFINITION
const CSS_SECTION_BINDING_SET = C.GTK_CSS_SECTION_BINDING_SET
const CSS_SECTION_RULESET = C.GTK_CSS_SECTION_RULESET
const CSS_SECTION_SELECTOR = C.GTK_CSS_SECTION_SELECTOR
const CSS_SECTION_DECLARATION = C.GTK_CSS_SECTION_DECLARATION
const CSS_SECTION_VALUE = C.GTK_CSS_SECTION_VALUE
const CSS_SECTION_KEYFRAMES = C.GTK_CSS_SECTION_KEYFRAMES
const DEBUG_MISC = C.GTK_DEBUG_MISC
const DEBUG_PLUGSOCKET = C.GTK_DEBUG_PLUGSOCKET
const DEBUG_TEXT = C.GTK_DEBUG_TEXT
const DEBUG_TREE = C.GTK_DEBUG_TREE
const DEBUG_UPDATES = C.GTK_DEBUG_UPDATES
const DEBUG_KEYBINDINGS = C.GTK_DEBUG_KEYBINDINGS
const DEBUG_MULTIHEAD = C.GTK_DEBUG_MULTIHEAD
const DEBUG_MODULES = C.GTK_DEBUG_MODULES
const DEBUG_GEOMETRY = C.GTK_DEBUG_GEOMETRY
const DEBUG_ICONTHEME = C.GTK_DEBUG_ICONTHEME
const DEBUG_PRINTING = C.GTK_DEBUG_PRINTING
const DEBUG_BUILDER = C.GTK_DEBUG_BUILDER
const DEBUG_SIZE_REQUEST = C.GTK_DEBUG_SIZE_REQUEST
const DEBUG_NO_CSS_CACHE = C.GTK_DEBUG_NO_CSS_CACHE
const DELETE_CHARS = C.GTK_DELETE_CHARS
const DELETE_WORD_ENDS = C.GTK_DELETE_WORD_ENDS
const DELETE_WORDS = C.GTK_DELETE_WORDS
const DELETE_DISPLAY_LINES = C.GTK_DELETE_DISPLAY_LINES
const DELETE_DISPLAY_LINE_ENDS = C.GTK_DELETE_DISPLAY_LINE_ENDS
const DELETE_PARAGRAPH_ENDS = C.GTK_DELETE_PARAGRAPH_ENDS
const DELETE_PARAGRAPHS = C.GTK_DELETE_PARAGRAPHS
const DELETE_WHITESPACE = C.GTK_DELETE_WHITESPACE
const DEST_DEFAULT_MOTION = C.GTK_DEST_DEFAULT_MOTION
const DEST_DEFAULT_HIGHLIGHT = C.GTK_DEST_DEFAULT_HIGHLIGHT
const DEST_DEFAULT_DROP = C.GTK_DEST_DEFAULT_DROP
const DEST_DEFAULT_ALL = C.GTK_DEST_DEFAULT_ALL
const DIALOG_MODAL = C.GTK_DIALOG_MODAL
const DIALOG_DESTROY_WITH_PARENT = C.GTK_DIALOG_DESTROY_WITH_PARENT
const DIR_TAB_FORWARD = C.GTK_DIR_TAB_FORWARD
const DIR_TAB_BACKWARD = C.GTK_DIR_TAB_BACKWARD
const DIR_UP = C.GTK_DIR_UP
const DIR_DOWN = C.GTK_DIR_DOWN
const DIR_LEFT = C.GTK_DIR_LEFT
const DIR_RIGHT = C.GTK_DIR_RIGHT
const DRAG_RESULT_SUCCESS = C.GTK_DRAG_RESULT_SUCCESS
const DRAG_RESULT_NO_TARGET = C.GTK_DRAG_RESULT_NO_TARGET
const DRAG_RESULT_USER_CANCELLED = C.GTK_DRAG_RESULT_USER_CANCELLED
const DRAG_RESULT_TIMEOUT_EXPIRED = C.GTK_DRAG_RESULT_TIMEOUT_EXPIRED
const DRAG_RESULT_GRAB_BROKEN = C.GTK_DRAG_RESULT_GRAB_BROKEN
const DRAG_RESULT_ERROR = C.GTK_DRAG_RESULT_ERROR
const ENTRY_ICON_PRIMARY = C.GTK_ENTRY_ICON_PRIMARY
const ENTRY_ICON_SECONDARY = C.GTK_ENTRY_ICON_SECONDARY
const EXPANDER_COLLAPSED = C.GTK_EXPANDER_COLLAPSED
const EXPANDER_SEMI_COLLAPSED = C.GTK_EXPANDER_SEMI_COLLAPSED
const EXPANDER_SEMI_EXPANDED = C.GTK_EXPANDER_SEMI_EXPANDED
const EXPANDER_EXPANDED = C.GTK_EXPANDER_EXPANDED
const FILE_CHOOSER_ACTION_OPEN = C.GTK_FILE_CHOOSER_ACTION_OPEN
const FILE_CHOOSER_ACTION_SAVE = C.GTK_FILE_CHOOSER_ACTION_SAVE
const FILE_CHOOSER_ACTION_SELECT_FOLDER = C.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
const FILE_CHOOSER_ACTION_CREATE_FOLDER = C.GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
const FILE_CHOOSER_CONFIRMATION_CONFIRM = C.GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM
const FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = C.GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME
const FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = C.GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
const FILE_CHOOSER_ERROR_NONEXISTENT = C.GTK_FILE_CHOOSER_ERROR_NONEXISTENT
const FILE_CHOOSER_ERROR_BAD_FILENAME = C.GTK_FILE_CHOOSER_ERROR_BAD_FILENAME
const FILE_CHOOSER_ERROR_ALREADY_EXISTS = C.GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS
const FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = C.GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
const FILE_FILTER_FILENAME = C.GTK_FILE_FILTER_FILENAME
const FILE_FILTER_URI = C.GTK_FILE_FILTER_URI
const FILE_FILTER_DISPLAY_NAME = C.GTK_FILE_FILTER_DISPLAY_NAME
const FILE_FILTER_MIME_TYPE = C.GTK_FILE_FILTER_MIME_TYPE
const IM_PREEDIT_NOTHING = C.GTK_IM_PREEDIT_NOTHING
const IM_PREEDIT_CALLBACK = C.GTK_IM_PREEDIT_CALLBACK
const IM_PREEDIT_NONE = C.GTK_IM_PREEDIT_NONE
const IM_STATUS_NOTHING = C.GTK_IM_STATUS_NOTHING
const IM_STATUS_CALLBACK = C.GTK_IM_STATUS_CALLBACK
const IM_STATUS_NONE = C.GTK_IM_STATUS_NONE
const ICON_LOOKUP_NO_SVG = C.GTK_ICON_LOOKUP_NO_SVG
const ICON_LOOKUP_FORCE_SVG = C.GTK_ICON_LOOKUP_FORCE_SVG
const ICON_LOOKUP_USE_BUILTIN = C.GTK_ICON_LOOKUP_USE_BUILTIN
const ICON_LOOKUP_GENERIC_FALLBACK = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
const ICON_LOOKUP_FORCE_SIZE = C.GTK_ICON_LOOKUP_FORCE_SIZE
const ICON_SIZE_INVALID = C.GTK_ICON_SIZE_INVALID
const ICON_SIZE_MENU = C.GTK_ICON_SIZE_MENU
const ICON_SIZE_SMALL_TOOLBAR = C.GTK_ICON_SIZE_SMALL_TOOLBAR
const ICON_SIZE_LARGE_TOOLBAR = C.GTK_ICON_SIZE_LARGE_TOOLBAR
const ICON_SIZE_BUTTON = C.GTK_ICON_SIZE_BUTTON
const ICON_SIZE_DND = C.GTK_ICON_SIZE_DND
const ICON_SIZE_DIALOG = C.GTK_ICON_SIZE_DIALOG
const ICON_THEME_NOT_FOUND = C.GTK_ICON_THEME_NOT_FOUND
const ICON_THEME_FAILED = C.GTK_ICON_THEME_FAILED
const ICON_VIEW_NO_DROP = C.GTK_ICON_VIEW_NO_DROP
const ICON_VIEW_DROP_INTO = C.GTK_ICON_VIEW_DROP_INTO
const ICON_VIEW_DROP_LEFT = C.GTK_ICON_VIEW_DROP_LEFT
const ICON_VIEW_DROP_RIGHT = C.GTK_ICON_VIEW_DROP_RIGHT
const ICON_VIEW_DROP_ABOVE = C.GTK_ICON_VIEW_DROP_ABOVE
const ICON_VIEW_DROP_BELOW = C.GTK_ICON_VIEW_DROP_BELOW
const IMAGE_EMPTY = C.GTK_IMAGE_EMPTY
const IMAGE_PIXBUF = C.GTK_IMAGE_PIXBUF
const IMAGE_STOCK = C.GTK_IMAGE_STOCK
const IMAGE_ICON_SET = C.GTK_IMAGE_ICON_SET
const IMAGE_ANIMATION = C.GTK_IMAGE_ANIMATION
const IMAGE_ICON_NAME = C.GTK_IMAGE_ICON_NAME
const IMAGE_GICON = C.GTK_IMAGE_GICON
const INPUT_HINT_NONE = C.GTK_INPUT_HINT_NONE
const INPUT_HINT_SPELLCHECK = C.GTK_INPUT_HINT_SPELLCHECK
const INPUT_HINT_NO_SPELLCHECK = C.GTK_INPUT_HINT_NO_SPELLCHECK
const INPUT_HINT_WORD_COMPLETION = C.GTK_INPUT_HINT_WORD_COMPLETION
const INPUT_HINT_LOWERCASE = C.GTK_INPUT_HINT_LOWERCASE
const INPUT_HINT_UPPERCASE_CHARS = C.GTK_INPUT_HINT_UPPERCASE_CHARS
const INPUT_HINT_UPPERCASE_WORDS = C.GTK_INPUT_HINT_UPPERCASE_WORDS
const INPUT_HINT_UPPERCASE_SENTENCES = C.GTK_INPUT_HINT_UPPERCASE_SENTENCES
const INPUT_HINT_INHIBIT_OSK = C.GTK_INPUT_HINT_INHIBIT_OSK
const INPUT_PURPOSE_FREE_FORM = C.GTK_INPUT_PURPOSE_FREE_FORM
const INPUT_PURPOSE_ALPHA = C.GTK_INPUT_PURPOSE_ALPHA
const INPUT_PURPOSE_DIGITS = C.GTK_INPUT_PURPOSE_DIGITS
const INPUT_PURPOSE_NUMBER = C.GTK_INPUT_PURPOSE_NUMBER
const INPUT_PURPOSE_PHONE = C.GTK_INPUT_PURPOSE_PHONE
const INPUT_PURPOSE_URL = C.GTK_INPUT_PURPOSE_URL
const INPUT_PURPOSE_EMAIL = C.GTK_INPUT_PURPOSE_EMAIL
const INPUT_PURPOSE_NAME = C.GTK_INPUT_PURPOSE_NAME
const INPUT_PURPOSE_PASSWORD = C.GTK_INPUT_PURPOSE_PASSWORD
const INPUT_PURPOSE_PIN = C.GTK_INPUT_PURPOSE_PIN
const JUNCTION_NONE = C.GTK_JUNCTION_NONE
const JUNCTION_CORNER_TOPLEFT = C.GTK_JUNCTION_CORNER_TOPLEFT
const JUNCTION_CORNER_TOPRIGHT = C.GTK_JUNCTION_CORNER_TOPRIGHT
const JUNCTION_CORNER_BOTTOMLEFT = C.GTK_JUNCTION_CORNER_BOTTOMLEFT
const JUNCTION_CORNER_BOTTOMRIGHT = C.GTK_JUNCTION_CORNER_BOTTOMRIGHT
const JUNCTION_TOP = C.GTK_JUNCTION_TOP
const JUNCTION_BOTTOM = C.GTK_JUNCTION_BOTTOM
const JUNCTION_LEFT = C.GTK_JUNCTION_LEFT
const JUNCTION_RIGHT = C.GTK_JUNCTION_RIGHT
const JUSTIFY_LEFT = C.GTK_JUSTIFY_LEFT
const JUSTIFY_RIGHT = C.GTK_JUSTIFY_RIGHT
const JUSTIFY_CENTER = C.GTK_JUSTIFY_CENTER
const JUSTIFY_FILL = C.GTK_JUSTIFY_FILL
const LEVEL_BAR_MODE_CONTINUOUS = C.GTK_LEVEL_BAR_MODE_CONTINUOUS
const LEVEL_BAR_MODE_DISCRETE = C.GTK_LEVEL_BAR_MODE_DISCRETE
const LICENSE_UNKNOWN = C.GTK_LICENSE_UNKNOWN
const LICENSE_CUSTOM = C.GTK_LICENSE_CUSTOM
const LICENSE_GPL_2_0 = C.GTK_LICENSE_GPL_2_0
const LICENSE_GPL_3_0 = C.GTK_LICENSE_GPL_3_0
const LICENSE_LGPL_2_1 = C.GTK_LICENSE_LGPL_2_1
const LICENSE_LGPL_3_0 = C.GTK_LICENSE_LGPL_3_0
const LICENSE_BSD = C.GTK_LICENSE_BSD
const LICENSE_MIT_X11 = C.GTK_LICENSE_MIT_X11
const LICENSE_ARTISTIC = C.GTK_LICENSE_ARTISTIC
const MENU_DIR_PARENT = C.GTK_MENU_DIR_PARENT
const MENU_DIR_CHILD = C.GTK_MENU_DIR_CHILD
const MENU_DIR_NEXT = C.GTK_MENU_DIR_NEXT
const MENU_DIR_PREV = C.GTK_MENU_DIR_PREV
const MESSAGE_INFO = C.GTK_MESSAGE_INFO
const MESSAGE_WARNING = C.GTK_MESSAGE_WARNING
const MESSAGE_QUESTION = C.GTK_MESSAGE_QUESTION
const MESSAGE_ERROR = C.GTK_MESSAGE_ERROR
const MESSAGE_OTHER = C.GTK_MESSAGE_OTHER
const MOVEMENT_LOGICAL_POSITIONS = C.GTK_MOVEMENT_LOGICAL_POSITIONS
const MOVEMENT_VISUAL_POSITIONS = C.GTK_MOVEMENT_VISUAL_POSITIONS
const MOVEMENT_WORDS = C.GTK_MOVEMENT_WORDS
const MOVEMENT_DISPLAY_LINES = C.GTK_MOVEMENT_DISPLAY_LINES
const MOVEMENT_DISPLAY_LINE_ENDS = C.GTK_MOVEMENT_DISPLAY_LINE_ENDS
const MOVEMENT_PARAGRAPHS = C.GTK_MOVEMENT_PARAGRAPHS
const MOVEMENT_PARAGRAPH_ENDS = C.GTK_MOVEMENT_PARAGRAPH_ENDS
const MOVEMENT_PAGES = C.GTK_MOVEMENT_PAGES
const MOVEMENT_BUFFER_ENDS = C.GTK_MOVEMENT_BUFFER_ENDS
const MOVEMENT_HORIZONTAL_PAGES = C.GTK_MOVEMENT_HORIZONTAL_PAGES
const NOTEBOOK_TAB_FIRST = C.GTK_NOTEBOOK_TAB_FIRST
const NOTEBOOK_TAB_LAST = C.GTK_NOTEBOOK_TAB_LAST
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
const ORIENTATION_HORIZONTAL = C.GTK_ORIENTATION_HORIZONTAL
const ORIENTATION_VERTICAL = C.GTK_ORIENTATION_VERTICAL
const PACK_DIRECTION_LTR = C.GTK_PACK_DIRECTION_LTR
const PACK_DIRECTION_RTL = C.GTK_PACK_DIRECTION_RTL
const PACK_DIRECTION_TTB = C.GTK_PACK_DIRECTION_TTB
const PACK_DIRECTION_BTT = C.GTK_PACK_DIRECTION_BTT
const PACK_START = C.GTK_PACK_START
const PACK_END = C.GTK_PACK_END
const PAGE_ORIENTATION_PORTRAIT = C.GTK_PAGE_ORIENTATION_PORTRAIT
const PAGE_ORIENTATION_LANDSCAPE = C.GTK_PAGE_ORIENTATION_LANDSCAPE
const PAGE_ORIENTATION_REVERSE_PORTRAIT = C.GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT
const PAGE_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
const PAGE_SET_ALL = C.GTK_PAGE_SET_ALL
const PAGE_SET_EVEN = C.GTK_PAGE_SET_EVEN
const PAGE_SET_ODD = C.GTK_PAGE_SET_ODD
const PATH_PRIO_LOWEST = C.GTK_PATH_PRIO_LOWEST
const PATH_PRIO_GTK = C.GTK_PATH_PRIO_GTK
const PATH_PRIO_APPLICATION = C.GTK_PATH_PRIO_APPLICATION
const PATH_PRIO_THEME = C.GTK_PATH_PRIO_THEME
const PATH_PRIO_RC = C.GTK_PATH_PRIO_RC
const PATH_PRIO_HIGHEST = C.GTK_PATH_PRIO_HIGHEST
const PATH_WIDGET = C.GTK_PATH_WIDGET
const PATH_WIDGET_CLASS = C.GTK_PATH_WIDGET_CLASS
const PATH_CLASS = C.GTK_PATH_CLASS
const POLICY_ALWAYS = C.GTK_POLICY_ALWAYS
const POLICY_AUTOMATIC = C.GTK_POLICY_AUTOMATIC
const POLICY_NEVER = C.GTK_POLICY_NEVER
const POS_LEFT = C.GTK_POS_LEFT
const POS_RIGHT = C.GTK_POS_RIGHT
const POS_TOP = C.GTK_POS_TOP
const POS_BOTTOM = C.GTK_POS_BOTTOM
const PRINT_DUPLEX_SIMPLEX = C.GTK_PRINT_DUPLEX_SIMPLEX
const PRINT_DUPLEX_HORIZONTAL = C.GTK_PRINT_DUPLEX_HORIZONTAL
const PRINT_DUPLEX_VERTICAL = C.GTK_PRINT_DUPLEX_VERTICAL
const PRINT_ERROR_GENERAL = C.GTK_PRINT_ERROR_GENERAL
const PRINT_ERROR_INTERNAL_ERROR = C.GTK_PRINT_ERROR_INTERNAL_ERROR
const PRINT_ERROR_NOMEM = C.GTK_PRINT_ERROR_NOMEM
const PRINT_ERROR_INVALID_FILE = C.GTK_PRINT_ERROR_INVALID_FILE
const PRINT_OPERATION_ACTION_PRINT_DIALOG = C.GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
const PRINT_OPERATION_ACTION_PRINT = C.GTK_PRINT_OPERATION_ACTION_PRINT
const PRINT_OPERATION_ACTION_PREVIEW = C.GTK_PRINT_OPERATION_ACTION_PREVIEW
const PRINT_OPERATION_ACTION_EXPORT = C.GTK_PRINT_OPERATION_ACTION_EXPORT
const PRINT_OPERATION_RESULT_ERROR = C.GTK_PRINT_OPERATION_RESULT_ERROR
const PRINT_OPERATION_RESULT_APPLY = C.GTK_PRINT_OPERATION_RESULT_APPLY
const PRINT_OPERATION_RESULT_CANCEL = C.GTK_PRINT_OPERATION_RESULT_CANCEL
const PRINT_OPERATION_RESULT_IN_PROGRESS = C.GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
const PRINT_PAGES_ALL = C.GTK_PRINT_PAGES_ALL
const PRINT_PAGES_CURRENT = C.GTK_PRINT_PAGES_CURRENT
const PRINT_PAGES_RANGES = C.GTK_PRINT_PAGES_RANGES
const PRINT_PAGES_SELECTION = C.GTK_PRINT_PAGES_SELECTION
const PRINT_QUALITY_LOW = C.GTK_PRINT_QUALITY_LOW
const PRINT_QUALITY_NORMAL = C.GTK_PRINT_QUALITY_NORMAL
const PRINT_QUALITY_HIGH = C.GTK_PRINT_QUALITY_HIGH
const PRINT_QUALITY_DRAFT = C.GTK_PRINT_QUALITY_DRAFT
const PRINT_STATUS_INITIAL = C.GTK_PRINT_STATUS_INITIAL
const PRINT_STATUS_PREPARING = C.GTK_PRINT_STATUS_PREPARING
const PRINT_STATUS_GENERATING_DATA = C.GTK_PRINT_STATUS_GENERATING_DATA
const PRINT_STATUS_SENDING_DATA = C.GTK_PRINT_STATUS_SENDING_DATA
const PRINT_STATUS_PENDING = C.GTK_PRINT_STATUS_PENDING
const PRINT_STATUS_PENDING_ISSUE = C.GTK_PRINT_STATUS_PENDING_ISSUE
const PRINT_STATUS_PRINTING = C.GTK_PRINT_STATUS_PRINTING
const PRINT_STATUS_FINISHED = C.GTK_PRINT_STATUS_FINISHED
const PRINT_STATUS_FINISHED_ABORTED = C.GTK_PRINT_STATUS_FINISHED_ABORTED
const RC_FG = C.GTK_RC_FG
const RC_BG = C.GTK_RC_BG
const RC_TEXT = C.GTK_RC_TEXT
const RC_BASE = C.GTK_RC_BASE
const RC_TOKEN_INVALID = C.GTK_RC_TOKEN_INVALID
const RC_TOKEN_INCLUDE = C.GTK_RC_TOKEN_INCLUDE
const RC_TOKEN_NORMAL = C.GTK_RC_TOKEN_NORMAL
const RC_TOKEN_ACTIVE = C.GTK_RC_TOKEN_ACTIVE
const RC_TOKEN_PRELIGHT = C.GTK_RC_TOKEN_PRELIGHT
const RC_TOKEN_SELECTED = C.GTK_RC_TOKEN_SELECTED
const RC_TOKEN_INSENSITIVE = C.GTK_RC_TOKEN_INSENSITIVE
const RC_TOKEN_FG = C.GTK_RC_TOKEN_FG
const RC_TOKEN_BG = C.GTK_RC_TOKEN_BG
const RC_TOKEN_TEXT = C.GTK_RC_TOKEN_TEXT
const RC_TOKEN_BASE = C.GTK_RC_TOKEN_BASE
const RC_TOKEN_XTHICKNESS = C.GTK_RC_TOKEN_XTHICKNESS
const RC_TOKEN_YTHICKNESS = C.GTK_RC_TOKEN_YTHICKNESS
const RC_TOKEN_FONT = C.GTK_RC_TOKEN_FONT
const RC_TOKEN_FONTSET = C.GTK_RC_TOKEN_FONTSET
const RC_TOKEN_FONT_NAME = C.GTK_RC_TOKEN_FONT_NAME
const RC_TOKEN_BG_PIXMAP = C.GTK_RC_TOKEN_BG_PIXMAP
const RC_TOKEN_PIXMAP_PATH = C.GTK_RC_TOKEN_PIXMAP_PATH
const RC_TOKEN_STYLE = C.GTK_RC_TOKEN_STYLE
const RC_TOKEN_BINDING = C.GTK_RC_TOKEN_BINDING
const RC_TOKEN_BIND = C.GTK_RC_TOKEN_BIND
const RC_TOKEN_WIDGET = C.GTK_RC_TOKEN_WIDGET
const RC_TOKEN_WIDGET_CLASS = C.GTK_RC_TOKEN_WIDGET_CLASS
const RC_TOKEN_CLASS = C.GTK_RC_TOKEN_CLASS
const RC_TOKEN_LOWEST = C.GTK_RC_TOKEN_LOWEST
const RC_TOKEN_GTK = C.GTK_RC_TOKEN_GTK
const RC_TOKEN_APPLICATION = C.GTK_RC_TOKEN_APPLICATION
const RC_TOKEN_THEME = C.GTK_RC_TOKEN_THEME
const RC_TOKEN_RC = C.GTK_RC_TOKEN_RC
const RC_TOKEN_HIGHEST = C.GTK_RC_TOKEN_HIGHEST
const RC_TOKEN_ENGINE = C.GTK_RC_TOKEN_ENGINE
const RC_TOKEN_MODULE_PATH = C.GTK_RC_TOKEN_MODULE_PATH
const RC_TOKEN_IM_MODULE_PATH = C.GTK_RC_TOKEN_IM_MODULE_PATH
const RC_TOKEN_IM_MODULE_FILE = C.GTK_RC_TOKEN_IM_MODULE_FILE
const RC_TOKEN_STOCK = C.GTK_RC_TOKEN_STOCK
const RC_TOKEN_LTR = C.GTK_RC_TOKEN_LTR
const RC_TOKEN_RTL = C.GTK_RC_TOKEN_RTL
const RC_TOKEN_COLOR = C.GTK_RC_TOKEN_COLOR
const RC_TOKEN_UNBIND = C.GTK_RC_TOKEN_UNBIND
const RC_TOKEN_LAST = C.GTK_RC_TOKEN_LAST
const RECENT_CHOOSER_ERROR_NOT_FOUND = C.GTK_RECENT_CHOOSER_ERROR_NOT_FOUND
const RECENT_CHOOSER_ERROR_INVALID_URI = C.GTK_RECENT_CHOOSER_ERROR_INVALID_URI
const RECENT_FILTER_URI = C.GTK_RECENT_FILTER_URI
const RECENT_FILTER_DISPLAY_NAME = C.GTK_RECENT_FILTER_DISPLAY_NAME
const RECENT_FILTER_MIME_TYPE = C.GTK_RECENT_FILTER_MIME_TYPE
const RECENT_FILTER_APPLICATION = C.GTK_RECENT_FILTER_APPLICATION
const RECENT_FILTER_GROUP = C.GTK_RECENT_FILTER_GROUP
const RECENT_FILTER_AGE = C.GTK_RECENT_FILTER_AGE
const RECENT_MANAGER_ERROR_NOT_FOUND = C.GTK_RECENT_MANAGER_ERROR_NOT_FOUND
const RECENT_MANAGER_ERROR_INVALID_URI = C.GTK_RECENT_MANAGER_ERROR_INVALID_URI
const RECENT_MANAGER_ERROR_INVALID_ENCODING = C.GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING
const RECENT_MANAGER_ERROR_NOT_REGISTERED = C.GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED
const RECENT_MANAGER_ERROR_READ = C.GTK_RECENT_MANAGER_ERROR_READ
const RECENT_MANAGER_ERROR_WRITE = C.GTK_RECENT_MANAGER_ERROR_WRITE
const RECENT_MANAGER_ERROR_UNKNOWN = C.GTK_RECENT_MANAGER_ERROR_UNKNOWN
const RECENT_SORT_NONE = C.GTK_RECENT_SORT_NONE
const RECENT_SORT_MRU = C.GTK_RECENT_SORT_MRU
const RECENT_SORT_LRU = C.GTK_RECENT_SORT_LRU
const RECENT_SORT_CUSTOM = C.GTK_RECENT_SORT_CUSTOM
const REGION_EVEN = C.GTK_REGION_EVEN
const REGION_ODD = C.GTK_REGION_ODD
const REGION_FIRST = C.GTK_REGION_FIRST
const REGION_LAST = C.GTK_REGION_LAST
const REGION_ONLY = C.GTK_REGION_ONLY
const REGION_SORTED = C.GTK_REGION_SORTED
const RELIEF_NORMAL = C.GTK_RELIEF_NORMAL
const RELIEF_HALF = C.GTK_RELIEF_HALF
const RELIEF_NONE = C.GTK_RELIEF_NONE
const RESIZE_PARENT = C.GTK_RESIZE_PARENT
const RESIZE_QUEUE = C.GTK_RESIZE_QUEUE
const RESIZE_IMMEDIATE = C.GTK_RESIZE_IMMEDIATE
const RESPONSE_NONE = C.GTK_RESPONSE_NONE
const RESPONSE_REJECT = C.GTK_RESPONSE_REJECT
const RESPONSE_ACCEPT = C.GTK_RESPONSE_ACCEPT
const RESPONSE_DELETE_EVENT = C.GTK_RESPONSE_DELETE_EVENT
const RESPONSE_OK = C.GTK_RESPONSE_OK
const RESPONSE_CANCEL = C.GTK_RESPONSE_CANCEL
const RESPONSE_CLOSE = C.GTK_RESPONSE_CLOSE
const RESPONSE_YES = C.GTK_RESPONSE_YES
const RESPONSE_NO = C.GTK_RESPONSE_NO
const RESPONSE_APPLY = C.GTK_RESPONSE_APPLY
const RESPONSE_HELP = C.GTK_RESPONSE_HELP
const SCROLL_STEPS = C.GTK_SCROLL_STEPS
const SCROLL_PAGES = C.GTK_SCROLL_PAGES
const SCROLL_ENDS = C.GTK_SCROLL_ENDS
const SCROLL_HORIZONTAL_STEPS = C.GTK_SCROLL_HORIZONTAL_STEPS
const SCROLL_HORIZONTAL_PAGES = C.GTK_SCROLL_HORIZONTAL_PAGES
const SCROLL_HORIZONTAL_ENDS = C.GTK_SCROLL_HORIZONTAL_ENDS
const SCROLL_NONE = C.GTK_SCROLL_NONE
const SCROLL_JUMP = C.GTK_SCROLL_JUMP
const SCROLL_STEP_BACKWARD = C.GTK_SCROLL_STEP_BACKWARD
const SCROLL_STEP_FORWARD = C.GTK_SCROLL_STEP_FORWARD
const SCROLL_PAGE_BACKWARD = C.GTK_SCROLL_PAGE_BACKWARD
const SCROLL_PAGE_FORWARD = C.GTK_SCROLL_PAGE_FORWARD
const SCROLL_STEP_UP = C.GTK_SCROLL_STEP_UP
const SCROLL_STEP_DOWN = C.GTK_SCROLL_STEP_DOWN
const SCROLL_PAGE_UP = C.GTK_SCROLL_PAGE_UP
const SCROLL_PAGE_DOWN = C.GTK_SCROLL_PAGE_DOWN
const SCROLL_STEP_LEFT = C.GTK_SCROLL_STEP_LEFT
const SCROLL_STEP_RIGHT = C.GTK_SCROLL_STEP_RIGHT
const SCROLL_PAGE_LEFT = C.GTK_SCROLL_PAGE_LEFT
const SCROLL_PAGE_RIGHT = C.GTK_SCROLL_PAGE_RIGHT
const SCROLL_START = C.GTK_SCROLL_START
const SCROLL_END = C.GTK_SCROLL_END
const SCROLL_MINIMUM = C.GTK_SCROLL_MINIMUM
const SCROLL_NATURAL = C.GTK_SCROLL_NATURAL
const SELECTION_NONE = C.GTK_SELECTION_NONE
const SELECTION_SINGLE = C.GTK_SELECTION_SINGLE
const SELECTION_BROWSE = C.GTK_SELECTION_BROWSE
const SELECTION_MULTIPLE = C.GTK_SELECTION_MULTIPLE
const SENSITIVITY_AUTO = C.GTK_SENSITIVITY_AUTO
const SENSITIVITY_ON = C.GTK_SENSITIVITY_ON
const SENSITIVITY_OFF = C.GTK_SENSITIVITY_OFF
const SHADOW_NONE = C.GTK_SHADOW_NONE
const SHADOW_IN = C.GTK_SHADOW_IN
const SHADOW_OUT = C.GTK_SHADOW_OUT
const SHADOW_ETCHED_IN = C.GTK_SHADOW_ETCHED_IN
const SHADOW_ETCHED_OUT = C.GTK_SHADOW_ETCHED_OUT
const SIZE_GROUP_NONE = C.GTK_SIZE_GROUP_NONE
const SIZE_GROUP_HORIZONTAL = C.GTK_SIZE_GROUP_HORIZONTAL
const SIZE_GROUP_VERTICAL = C.GTK_SIZE_GROUP_VERTICAL
const SIZE_GROUP_BOTH = C.GTK_SIZE_GROUP_BOTH
const SIZE_REQUEST_HEIGHT_FOR_WIDTH = C.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
const SIZE_REQUEST_WIDTH_FOR_HEIGHT = C.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT
const SIZE_REQUEST_CONSTANT_SIZE = C.GTK_SIZE_REQUEST_CONSTANT_SIZE
const SORT_ASCENDING = C.GTK_SORT_ASCENDING
const SORT_DESCENDING = C.GTK_SORT_DESCENDING
const UPDATE_ALWAYS = C.GTK_UPDATE_ALWAYS
const UPDATE_IF_VALID = C.GTK_UPDATE_IF_VALID
const SPIN_STEP_FORWARD = C.GTK_SPIN_STEP_FORWARD
const SPIN_STEP_BACKWARD = C.GTK_SPIN_STEP_BACKWARD
const SPIN_PAGE_FORWARD = C.GTK_SPIN_PAGE_FORWARD
const SPIN_PAGE_BACKWARD = C.GTK_SPIN_PAGE_BACKWARD
const SPIN_HOME = C.GTK_SPIN_HOME
const SPIN_END = C.GTK_SPIN_END
const SPIN_USER_DEFINED = C.GTK_SPIN_USER_DEFINED
const STATE_FLAG_NORMAL = C.GTK_STATE_FLAG_NORMAL
const STATE_FLAG_ACTIVE = C.GTK_STATE_FLAG_ACTIVE
const STATE_FLAG_PRELIGHT = C.GTK_STATE_FLAG_PRELIGHT
const STATE_FLAG_SELECTED = C.GTK_STATE_FLAG_SELECTED
const STATE_FLAG_INSENSITIVE = C.GTK_STATE_FLAG_INSENSITIVE
const STATE_FLAG_INCONSISTENT = C.GTK_STATE_FLAG_INCONSISTENT
const STATE_FLAG_FOCUSED = C.GTK_STATE_FLAG_FOCUSED
const STATE_FLAG_BACKDROP = C.GTK_STATE_FLAG_BACKDROP
const STATE_NORMAL = C.GTK_STATE_NORMAL
const STATE_ACTIVE = C.GTK_STATE_ACTIVE
const STATE_PRELIGHT = C.GTK_STATE_PRELIGHT
const STATE_SELECTED = C.GTK_STATE_SELECTED
const STATE_INSENSITIVE = C.GTK_STATE_INSENSITIVE
const STATE_INCONSISTENT = C.GTK_STATE_INCONSISTENT
const STATE_FOCUSED = C.GTK_STATE_FOCUSED
const TARGET_SAME_APP = C.GTK_TARGET_SAME_APP
const TARGET_SAME_WIDGET = C.GTK_TARGET_SAME_WIDGET
const TARGET_OTHER_APP = C.GTK_TARGET_OTHER_APP
const TARGET_OTHER_WIDGET = C.GTK_TARGET_OTHER_WIDGET
const TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = C.GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS
const TEXT_BUFFER_TARGET_INFO_RICH_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT
const TEXT_BUFFER_TARGET_INFO_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_TEXT
const TEXT_DIR_NONE = C.GTK_TEXT_DIR_NONE
const TEXT_DIR_LTR = C.GTK_TEXT_DIR_LTR
const TEXT_DIR_RTL = C.GTK_TEXT_DIR_RTL
const TEXT_SEARCH_VISIBLE_ONLY = C.GTK_TEXT_SEARCH_VISIBLE_ONLY
const TEXT_SEARCH_TEXT_ONLY = C.GTK_TEXT_SEARCH_TEXT_ONLY
const TEXT_SEARCH_CASE_INSENSITIVE = C.GTK_TEXT_SEARCH_CASE_INSENSITIVE
const TEXT_WINDOW_PRIVATE = C.GTK_TEXT_WINDOW_PRIVATE
const TEXT_WINDOW_WIDGET = C.GTK_TEXT_WINDOW_WIDGET
const TEXT_WINDOW_TEXT = C.GTK_TEXT_WINDOW_TEXT
const TEXT_WINDOW_LEFT = C.GTK_TEXT_WINDOW_LEFT
const TEXT_WINDOW_RIGHT = C.GTK_TEXT_WINDOW_RIGHT
const TEXT_WINDOW_TOP = C.GTK_TEXT_WINDOW_TOP
const TEXT_WINDOW_BOTTOM = C.GTK_TEXT_WINDOW_BOTTOM
const TOOL_PALETTE_DRAG_ITEMS = C.GTK_TOOL_PALETTE_DRAG_ITEMS
const TOOL_PALETTE_DRAG_GROUPS = C.GTK_TOOL_PALETTE_DRAG_GROUPS
const TOOLBAR_SPACE_EMPTY = C.GTK_TOOLBAR_SPACE_EMPTY
const TOOLBAR_SPACE_LINE = C.GTK_TOOLBAR_SPACE_LINE
const TOOLBAR_ICONS = C.GTK_TOOLBAR_ICONS
const TOOLBAR_TEXT = C.GTK_TOOLBAR_TEXT
const TOOLBAR_BOTH = C.GTK_TOOLBAR_BOTH
const TOOLBAR_BOTH_HORIZ = C.GTK_TOOLBAR_BOTH_HORIZ
const TREE_MODEL_ITERS_PERSIST = C.GTK_TREE_MODEL_ITERS_PERSIST
const TREE_MODEL_LIST_ONLY = C.GTK_TREE_MODEL_LIST_ONLY
const TREE_VIEW_COLUMN_GROW_ONLY = C.GTK_TREE_VIEW_COLUMN_GROW_ONLY
const TREE_VIEW_COLUMN_AUTOSIZE = C.GTK_TREE_VIEW_COLUMN_AUTOSIZE
const TREE_VIEW_COLUMN_FIXED = C.GTK_TREE_VIEW_COLUMN_FIXED
const TREE_VIEW_DROP_BEFORE = C.GTK_TREE_VIEW_DROP_BEFORE
const TREE_VIEW_DROP_AFTER = C.GTK_TREE_VIEW_DROP_AFTER
const TREE_VIEW_DROP_INTO_OR_BEFORE = C.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
const TREE_VIEW_DROP_INTO_OR_AFTER = C.GTK_TREE_VIEW_DROP_INTO_OR_AFTER
const TREE_VIEW_GRID_LINES_NONE = C.GTK_TREE_VIEW_GRID_LINES_NONE
const TREE_VIEW_GRID_LINES_HORIZONTAL = C.GTK_TREE_VIEW_GRID_LINES_HORIZONTAL
const TREE_VIEW_GRID_LINES_VERTICAL = C.GTK_TREE_VIEW_GRID_LINES_VERTICAL
const TREE_VIEW_GRID_LINES_BOTH = C.GTK_TREE_VIEW_GRID_LINES_BOTH
const UI_MANAGER_AUTO = C.GTK_UI_MANAGER_AUTO
const UI_MANAGER_MENUBAR = C.GTK_UI_MANAGER_MENUBAR
const UI_MANAGER_MENU = C.GTK_UI_MANAGER_MENU
const UI_MANAGER_TOOLBAR = C.GTK_UI_MANAGER_TOOLBAR
const UI_MANAGER_PLACEHOLDER = C.GTK_UI_MANAGER_PLACEHOLDER
const UI_MANAGER_POPUP = C.GTK_UI_MANAGER_POPUP
const UI_MANAGER_MENUITEM = C.GTK_UI_MANAGER_MENUITEM
const UI_MANAGER_TOOLITEM = C.GTK_UI_MANAGER_TOOLITEM
const UI_MANAGER_SEPARATOR = C.GTK_UI_MANAGER_SEPARATOR
const UI_MANAGER_ACCELERATOR = C.GTK_UI_MANAGER_ACCELERATOR
const UI_MANAGER_POPUP_WITH_ACCELS = C.GTK_UI_MANAGER_POPUP_WITH_ACCELS
const UNIT_NONE = C.GTK_UNIT_NONE
const UNIT_POINTS = C.GTK_UNIT_POINTS
const UNIT_INCH = C.GTK_UNIT_INCH
const UNIT_MM = C.GTK_UNIT_MM
const WIDGET_HELP_TOOLTIP = C.GTK_WIDGET_HELP_TOOLTIP
const WIDGET_HELP_WHATS_THIS = C.GTK_WIDGET_HELP_WHATS_THIS
const WIN_POS_NONE = C.GTK_WIN_POS_NONE
const WIN_POS_CENTER = C.GTK_WIN_POS_CENTER
const WIN_POS_MOUSE = C.GTK_WIN_POS_MOUSE
const WIN_POS_CENTER_ALWAYS = C.GTK_WIN_POS_CENTER_ALWAYS
const WIN_POS_CENTER_ON_PARENT = C.GTK_WIN_POS_CENTER_ON_PARENT
const WINDOW_TOPLEVEL = C.GTK_WINDOW_TOPLEVEL
const WINDOW_POPUP = C.GTK_WINDOW_POPUP
const WRAP_NONE = C.GTK_WRAP_NONE
const WRAP_CHAR = C.GTK_WRAP_CHAR
const WRAP_WORD = C.GTK_WRAP_WORD
const WRAP_WORD_CHAR = C.GTK_WRAP_WORD_CHAR
const BINARY_AGE = C.GTK_BINARY_AGE
const INPUT_ERROR = C.GTK_INPUT_ERROR
const INTERFACE_AGE = C.GTK_INTERFACE_AGE
const LEVEL_BAR_OFFSET_HIGH = C.GTK_LEVEL_BAR_OFFSET_HIGH
const LEVEL_BAR_OFFSET_LOW = C.GTK_LEVEL_BAR_OFFSET_LOW
const MAJOR_VERSION = C.GTK_MAJOR_VERSION
const MAX_COMPOSE_LEN = C.GTK_MAX_COMPOSE_LEN
const MICRO_VERSION = C.GTK_MICRO_VERSION
const MINOR_VERSION = C.GTK_MINOR_VERSION
const PAPER_NAME_A3 = C.GTK_PAPER_NAME_A3
const PAPER_NAME_A4 = C.GTK_PAPER_NAME_A4
const PAPER_NAME_A5 = C.GTK_PAPER_NAME_A5
const PAPER_NAME_B5 = C.GTK_PAPER_NAME_B5
const PAPER_NAME_EXECUTIVE = C.GTK_PAPER_NAME_EXECUTIVE
const PAPER_NAME_LEGAL = C.GTK_PAPER_NAME_LEGAL
const PAPER_NAME_LETTER = C.GTK_PAPER_NAME_LETTER
const PATH_PRIO_MASK = C.GTK_PATH_PRIO_MASK
const PRINT_SETTINGS_COLLATE = C.GTK_PRINT_SETTINGS_COLLATE
const PRINT_SETTINGS_DEFAULT_SOURCE = C.GTK_PRINT_SETTINGS_DEFAULT_SOURCE
const PRINT_SETTINGS_DITHER = C.GTK_PRINT_SETTINGS_DITHER
const PRINT_SETTINGS_DUPLEX = C.GTK_PRINT_SETTINGS_DUPLEX
const PRINT_SETTINGS_FINISHINGS = C.GTK_PRINT_SETTINGS_FINISHINGS
const PRINT_SETTINGS_MEDIA_TYPE = C.GTK_PRINT_SETTINGS_MEDIA_TYPE
const PRINT_SETTINGS_NUMBER_UP = C.GTK_PRINT_SETTINGS_NUMBER_UP
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = C.GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT
const PRINT_SETTINGS_N_COPIES = C.GTK_PRINT_SETTINGS_N_COPIES
const PRINT_SETTINGS_ORIENTATION = C.GTK_PRINT_SETTINGS_ORIENTATION
const PRINT_SETTINGS_OUTPUT_BASENAME = C.GTK_PRINT_SETTINGS_OUTPUT_BASENAME
const PRINT_SETTINGS_OUTPUT_BIN = C.GTK_PRINT_SETTINGS_OUTPUT_BIN
const PRINT_SETTINGS_OUTPUT_DIR = C.GTK_PRINT_SETTINGS_OUTPUT_DIR
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = C.GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT
const PRINT_SETTINGS_OUTPUT_URI = C.GTK_PRINT_SETTINGS_OUTPUT_URI
const PRINT_SETTINGS_PAGE_RANGES = C.GTK_PRINT_SETTINGS_PAGE_RANGES
const PRINT_SETTINGS_PAGE_SET = C.GTK_PRINT_SETTINGS_PAGE_SET
const PRINT_SETTINGS_PAPER_FORMAT = C.GTK_PRINT_SETTINGS_PAPER_FORMAT
const PRINT_SETTINGS_PAPER_HEIGHT = C.GTK_PRINT_SETTINGS_PAPER_HEIGHT
const PRINT_SETTINGS_PAPER_WIDTH = C.GTK_PRINT_SETTINGS_PAPER_WIDTH
const PRINT_SETTINGS_PRINTER = C.GTK_PRINT_SETTINGS_PRINTER
const PRINT_SETTINGS_PRINTER_LPI = C.GTK_PRINT_SETTINGS_PRINTER_LPI
const PRINT_SETTINGS_PRINT_PAGES = C.GTK_PRINT_SETTINGS_PRINT_PAGES
const PRINT_SETTINGS_QUALITY = C.GTK_PRINT_SETTINGS_QUALITY
const PRINT_SETTINGS_RESOLUTION = C.GTK_PRINT_SETTINGS_RESOLUTION
const PRINT_SETTINGS_RESOLUTION_X = C.GTK_PRINT_SETTINGS_RESOLUTION_X
const PRINT_SETTINGS_RESOLUTION_Y = C.GTK_PRINT_SETTINGS_RESOLUTION_Y
const PRINT_SETTINGS_REVERSE = C.GTK_PRINT_SETTINGS_REVERSE
const PRINT_SETTINGS_SCALE = C.GTK_PRINT_SETTINGS_SCALE
const PRINT_SETTINGS_USE_COLOR = C.GTK_PRINT_SETTINGS_USE_COLOR
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION
const PRIORITY_RESIZE = C.GTK_PRIORITY_RESIZE
const STOCK_ABOUT = C.GTK_STOCK_ABOUT
const STOCK_ADD = C.GTK_STOCK_ADD
const STOCK_APPLY = C.GTK_STOCK_APPLY
const STOCK_BOLD = C.GTK_STOCK_BOLD
const STOCK_CANCEL = C.GTK_STOCK_CANCEL
const STOCK_CAPS_LOCK_WARNING = C.GTK_STOCK_CAPS_LOCK_WARNING
const STOCK_CDROM = C.GTK_STOCK_CDROM
const STOCK_CLEAR = C.GTK_STOCK_CLEAR
const STOCK_CLOSE = C.GTK_STOCK_CLOSE
const STOCK_COLOR_PICKER = C.GTK_STOCK_COLOR_PICKER
const STOCK_CONNECT = C.GTK_STOCK_CONNECT
const STOCK_CONVERT = C.GTK_STOCK_CONVERT
const STOCK_COPY = C.GTK_STOCK_COPY
const STOCK_CUT = C.GTK_STOCK_CUT
const STOCK_DELETE = C.GTK_STOCK_DELETE
const STOCK_DIALOG_AUTHENTICATION = C.GTK_STOCK_DIALOG_AUTHENTICATION
const STOCK_DIALOG_ERROR = C.GTK_STOCK_DIALOG_ERROR
const STOCK_DIALOG_INFO = C.GTK_STOCK_DIALOG_INFO
const STOCK_DIALOG_QUESTION = C.GTK_STOCK_DIALOG_QUESTION
const STOCK_DIALOG_WARNING = C.GTK_STOCK_DIALOG_WARNING
const STOCK_DIRECTORY = C.GTK_STOCK_DIRECTORY
const STOCK_DISCARD = C.GTK_STOCK_DISCARD
const STOCK_DISCONNECT = C.GTK_STOCK_DISCONNECT
const STOCK_DND = C.GTK_STOCK_DND
const STOCK_DND_MULTIPLE = C.GTK_STOCK_DND_MULTIPLE
const STOCK_EDIT = C.GTK_STOCK_EDIT
const STOCK_EXECUTE = C.GTK_STOCK_EXECUTE
const STOCK_FILE = C.GTK_STOCK_FILE
const STOCK_FIND = C.GTK_STOCK_FIND
const STOCK_FIND_AND_REPLACE = C.GTK_STOCK_FIND_AND_REPLACE
const STOCK_FLOPPY = C.GTK_STOCK_FLOPPY
const STOCK_FULLSCREEN = C.GTK_STOCK_FULLSCREEN
const STOCK_GOTO_BOTTOM = C.GTK_STOCK_GOTO_BOTTOM
const STOCK_GOTO_FIRST = C.GTK_STOCK_GOTO_FIRST
const STOCK_GOTO_LAST = C.GTK_STOCK_GOTO_LAST
const STOCK_GOTO_TOP = C.GTK_STOCK_GOTO_TOP
const STOCK_GO_BACK = C.GTK_STOCK_GO_BACK
const STOCK_GO_DOWN = C.GTK_STOCK_GO_DOWN
const STOCK_GO_FORWARD = C.GTK_STOCK_GO_FORWARD
const STOCK_GO_UP = C.GTK_STOCK_GO_UP
const STOCK_HARDDISK = C.GTK_STOCK_HARDDISK
const STOCK_HELP = C.GTK_STOCK_HELP
const STOCK_HOME = C.GTK_STOCK_HOME
const STOCK_INDENT = C.GTK_STOCK_INDENT
const STOCK_INDEX = C.GTK_STOCK_INDEX
const STOCK_INFO = C.GTK_STOCK_INFO
const STOCK_ITALIC = C.GTK_STOCK_ITALIC
const STOCK_JUMP_TO = C.GTK_STOCK_JUMP_TO
const STOCK_JUSTIFY_CENTER = C.GTK_STOCK_JUSTIFY_CENTER
const STOCK_JUSTIFY_FILL = C.GTK_STOCK_JUSTIFY_FILL
const STOCK_JUSTIFY_LEFT = C.GTK_STOCK_JUSTIFY_LEFT
const STOCK_JUSTIFY_RIGHT = C.GTK_STOCK_JUSTIFY_RIGHT
const STOCK_LEAVE_FULLSCREEN = C.GTK_STOCK_LEAVE_FULLSCREEN
const STOCK_MEDIA_FORWARD = C.GTK_STOCK_MEDIA_FORWARD
const STOCK_MEDIA_NEXT = C.GTK_STOCK_MEDIA_NEXT
const STOCK_MEDIA_PAUSE = C.GTK_STOCK_MEDIA_PAUSE
const STOCK_MEDIA_PLAY = C.GTK_STOCK_MEDIA_PLAY
const STOCK_MEDIA_PREVIOUS = C.GTK_STOCK_MEDIA_PREVIOUS
const STOCK_MEDIA_RECORD = C.GTK_STOCK_MEDIA_RECORD
const STOCK_MEDIA_REWIND = C.GTK_STOCK_MEDIA_REWIND
const STOCK_MEDIA_STOP = C.GTK_STOCK_MEDIA_STOP
const STOCK_MISSING_IMAGE = C.GTK_STOCK_MISSING_IMAGE
const STOCK_NETWORK = C.GTK_STOCK_NETWORK
const STOCK_NEW = C.GTK_STOCK_NEW
const STOCK_NO = C.GTK_STOCK_NO
const STOCK_OK = C.GTK_STOCK_OK
const STOCK_OPEN = C.GTK_STOCK_OPEN
const STOCK_ORIENTATION_LANDSCAPE = C.GTK_STOCK_ORIENTATION_LANDSCAPE
const STOCK_ORIENTATION_PORTRAIT = C.GTK_STOCK_ORIENTATION_PORTRAIT
const STOCK_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
const STOCK_ORIENTATION_REVERSE_PORTRAIT = C.GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
const STOCK_PAGE_SETUP = C.GTK_STOCK_PAGE_SETUP
const STOCK_PASTE = C.GTK_STOCK_PASTE
const STOCK_PREFERENCES = C.GTK_STOCK_PREFERENCES
const STOCK_PRINT = C.GTK_STOCK_PRINT
const STOCK_PRINT_ERROR = C.GTK_STOCK_PRINT_ERROR
const STOCK_PRINT_PAUSED = C.GTK_STOCK_PRINT_PAUSED
const STOCK_PRINT_PREVIEW = C.GTK_STOCK_PRINT_PREVIEW
const STOCK_PRINT_REPORT = C.GTK_STOCK_PRINT_REPORT
const STOCK_PRINT_WARNING = C.GTK_STOCK_PRINT_WARNING
const STOCK_PROPERTIES = C.GTK_STOCK_PROPERTIES
const STOCK_QUIT = C.GTK_STOCK_QUIT
const STOCK_REDO = C.GTK_STOCK_REDO
const STOCK_REFRESH = C.GTK_STOCK_REFRESH
const STOCK_REMOVE = C.GTK_STOCK_REMOVE
const STOCK_REVERT_TO_SAVED = C.GTK_STOCK_REVERT_TO_SAVED
const STOCK_SAVE = C.GTK_STOCK_SAVE
const STOCK_SAVE_AS = C.GTK_STOCK_SAVE_AS
const STOCK_SELECT_ALL = C.GTK_STOCK_SELECT_ALL
const STOCK_SELECT_COLOR = C.GTK_STOCK_SELECT_COLOR
const STOCK_SELECT_FONT = C.GTK_STOCK_SELECT_FONT
const STOCK_SORT_ASCENDING = C.GTK_STOCK_SORT_ASCENDING
const STOCK_SORT_DESCENDING = C.GTK_STOCK_SORT_DESCENDING
const STOCK_SPELL_CHECK = C.GTK_STOCK_SPELL_CHECK
const STOCK_STOP = C.GTK_STOCK_STOP
const STOCK_STRIKETHROUGH = C.GTK_STOCK_STRIKETHROUGH
const STOCK_UNDELETE = C.GTK_STOCK_UNDELETE
const STOCK_UNDERLINE = C.GTK_STOCK_UNDERLINE
const STOCK_UNDO = C.GTK_STOCK_UNDO
const STOCK_UNINDENT = C.GTK_STOCK_UNINDENT
const STOCK_YES = C.GTK_STOCK_YES
const STOCK_ZOOM_100 = C.GTK_STOCK_ZOOM_100
const STOCK_ZOOM_FIT = C.GTK_STOCK_ZOOM_FIT
const STOCK_ZOOM_IN = C.GTK_STOCK_ZOOM_IN
const STOCK_ZOOM_OUT = C.GTK_STOCK_ZOOM_OUT
const STYLE_CLASS_ACCELERATOR = C.GTK_STYLE_CLASS_ACCELERATOR
const STYLE_CLASS_ARROW = C.GTK_STYLE_CLASS_ARROW
const STYLE_CLASS_BACKGROUND = C.GTK_STYLE_CLASS_BACKGROUND
const STYLE_CLASS_BOTTOM = C.GTK_STYLE_CLASS_BOTTOM
const STYLE_CLASS_BUTTON = C.GTK_STYLE_CLASS_BUTTON
const STYLE_CLASS_CALENDAR = C.GTK_STYLE_CLASS_CALENDAR
const STYLE_CLASS_CELL = C.GTK_STYLE_CLASS_CELL
const STYLE_CLASS_CHECK = C.GTK_STYLE_CLASS_CHECK
const STYLE_CLASS_COMBOBOX_ENTRY = C.GTK_STYLE_CLASS_COMBOBOX_ENTRY
const STYLE_CLASS_CURSOR_HANDLE = C.GTK_STYLE_CLASS_CURSOR_HANDLE
const STYLE_CLASS_DEFAULT = C.GTK_STYLE_CLASS_DEFAULT
const STYLE_CLASS_DIM_LABEL = C.GTK_STYLE_CLASS_DIM_LABEL
const STYLE_CLASS_DND = C.GTK_STYLE_CLASS_DND
const STYLE_CLASS_DOCK = C.GTK_STYLE_CLASS_DOCK
const STYLE_CLASS_ENTRY = C.GTK_STYLE_CLASS_ENTRY
const STYLE_CLASS_ERROR = C.GTK_STYLE_CLASS_ERROR
const STYLE_CLASS_EXPANDER = C.GTK_STYLE_CLASS_EXPANDER
const STYLE_CLASS_FRAME = C.GTK_STYLE_CLASS_FRAME
const STYLE_CLASS_GRIP = C.GTK_STYLE_CLASS_GRIP
const STYLE_CLASS_HEADER = C.GTK_STYLE_CLASS_HEADER
const STYLE_CLASS_HIGHLIGHT = C.GTK_STYLE_CLASS_HIGHLIGHT
const STYLE_CLASS_HORIZONTAL = C.GTK_STYLE_CLASS_HORIZONTAL
const STYLE_CLASS_IMAGE = C.GTK_STYLE_CLASS_IMAGE
const STYLE_CLASS_INFO = C.GTK_STYLE_CLASS_INFO
const STYLE_CLASS_INLINE_TOOLBAR = C.GTK_STYLE_CLASS_INLINE_TOOLBAR
const STYLE_CLASS_LEFT = C.GTK_STYLE_CLASS_LEFT
const STYLE_CLASS_LEVEL_BAR = C.GTK_STYLE_CLASS_LEVEL_BAR
const STYLE_CLASS_LINKED = C.GTK_STYLE_CLASS_LINKED
const STYLE_CLASS_MARK = C.GTK_STYLE_CLASS_MARK
const STYLE_CLASS_MENU = C.GTK_STYLE_CLASS_MENU
const STYLE_CLASS_MENUBAR = C.GTK_STYLE_CLASS_MENUBAR
const STYLE_CLASS_MENUITEM = C.GTK_STYLE_CLASS_MENUITEM
const STYLE_CLASS_NOTEBOOK = C.GTK_STYLE_CLASS_NOTEBOOK
const STYLE_CLASS_OSD = C.GTK_STYLE_CLASS_OSD
const STYLE_CLASS_PANE_SEPARATOR = C.GTK_STYLE_CLASS_PANE_SEPARATOR
const STYLE_CLASS_PRIMARY_TOOLBAR = C.GTK_STYLE_CLASS_PRIMARY_TOOLBAR
const STYLE_CLASS_PROGRESSBAR = C.GTK_STYLE_CLASS_PROGRESSBAR
const STYLE_CLASS_PULSE = C.GTK_STYLE_CLASS_PULSE
const STYLE_CLASS_QUESTION = C.GTK_STYLE_CLASS_QUESTION
const STYLE_CLASS_RADIO = C.GTK_STYLE_CLASS_RADIO
const STYLE_CLASS_RAISED = C.GTK_STYLE_CLASS_RAISED
const STYLE_CLASS_RIGHT = C.GTK_STYLE_CLASS_RIGHT
const STYLE_CLASS_RUBBERBAND = C.GTK_STYLE_CLASS_RUBBERBAND
const STYLE_CLASS_SCALE = C.GTK_STYLE_CLASS_SCALE
const STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE
const STYLE_CLASS_SCALE_HAS_MARKS_BELOW = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW
const STYLE_CLASS_SCROLLBAR = C.GTK_STYLE_CLASS_SCROLLBAR
const STYLE_CLASS_SCROLLBARS_JUNCTION = C.GTK_STYLE_CLASS_SCROLLBARS_JUNCTION
const STYLE_CLASS_SEPARATOR = C.GTK_STYLE_CLASS_SEPARATOR
const STYLE_CLASS_SIDEBAR = C.GTK_STYLE_CLASS_SIDEBAR
const STYLE_CLASS_SLIDER = C.GTK_STYLE_CLASS_SLIDER
const STYLE_CLASS_SPINBUTTON = C.GTK_STYLE_CLASS_SPINBUTTON
const STYLE_CLASS_SPINNER = C.GTK_STYLE_CLASS_SPINNER
const STYLE_CLASS_TOOLBAR = C.GTK_STYLE_CLASS_TOOLBAR
const STYLE_CLASS_TOOLTIP = C.GTK_STYLE_CLASS_TOOLTIP
const STYLE_CLASS_TOP = C.GTK_STYLE_CLASS_TOP
const STYLE_CLASS_TROUGH = C.GTK_STYLE_CLASS_TROUGH
const STYLE_CLASS_VERTICAL = C.GTK_STYLE_CLASS_VERTICAL
const STYLE_CLASS_VIEW = C.GTK_STYLE_CLASS_VIEW
const STYLE_CLASS_WARNING = C.GTK_STYLE_CLASS_WARNING
const STYLE_PROPERTY_BACKGROUND_COLOR = C.GTK_STYLE_PROPERTY_BACKGROUND_COLOR
const STYLE_PROPERTY_BACKGROUND_IMAGE = C.GTK_STYLE_PROPERTY_BACKGROUND_IMAGE
const STYLE_PROPERTY_BORDER_COLOR = C.GTK_STYLE_PROPERTY_BORDER_COLOR
const STYLE_PROPERTY_BORDER_RADIUS = C.GTK_STYLE_PROPERTY_BORDER_RADIUS
const STYLE_PROPERTY_BORDER_STYLE = C.GTK_STYLE_PROPERTY_BORDER_STYLE
const STYLE_PROPERTY_BORDER_WIDTH = C.GTK_STYLE_PROPERTY_BORDER_WIDTH
const STYLE_PROPERTY_COLOR = C.GTK_STYLE_PROPERTY_COLOR
const STYLE_PROPERTY_FONT = C.GTK_STYLE_PROPERTY_FONT
const STYLE_PROPERTY_MARGIN = C.GTK_STYLE_PROPERTY_MARGIN
const STYLE_PROPERTY_PADDING = C.GTK_STYLE_PROPERTY_PADDING
const STYLE_PROVIDER_PRIORITY_APPLICATION = C.GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
const STYLE_PROVIDER_PRIORITY_FALLBACK = C.GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
const STYLE_PROVIDER_PRIORITY_SETTINGS = C.GTK_STYLE_PROVIDER_PRIORITY_SETTINGS
const STYLE_PROVIDER_PRIORITY_THEME = C.GTK_STYLE_PROVIDER_PRIORITY_THEME
const STYLE_PROVIDER_PRIORITY_USER = C.GTK_STYLE_PROVIDER_PRIORITY_USER
const STYLE_REGION_COLUMN = C.GTK_STYLE_REGION_COLUMN
const STYLE_REGION_COLUMN_HEADER = C.GTK_STYLE_REGION_COLUMN_HEADER
const STYLE_REGION_ROW = C.GTK_STYLE_REGION_ROW
const STYLE_REGION_TAB = C.GTK_STYLE_REGION_TAB
const TEXT_VIEW_PRIORITY_VALIDATE = C.GTK_TEXT_VIEW_PRIORITY_VALIDATE
