// this file is auto-generated by gobject-go

package gtk

// #cgo pkg-config: gtk+-3.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <gtk/gtkx.h>
/*
void _gtk_about_dialog_add_credit_section(GtkAboutDialog* _self_, gchar* section_name, void* people) {
	gtk_about_dialog_add_credit_section((GtkAboutDialog *)(_self_), (const gchar *)(section_name), (const gchar **)(people));
}
const gchar *const * _gtk_about_dialog_get_artists(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_artists((GtkAboutDialog *)(_self_));
}
const gchar *const * _gtk_about_dialog_get_authors(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_authors((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_comments(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_comments((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_copyright(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_copyright((GtkAboutDialog *)(_self_));
}
const gchar *const * _gtk_about_dialog_get_documenters(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_documenters((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_license(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_license((GtkAboutDialog *)(_self_));
}
GtkLicense _gtk_about_dialog_get_license_type(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_license_type((GtkAboutDialog *)(_self_));
}
GdkPixbuf * _gtk_about_dialog_get_logo(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_logo((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_logo_icon_name(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_logo_icon_name((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_program_name(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_program_name((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_translator_credits(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_translator_credits((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_version(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_version((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_website(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_website((GtkAboutDialog *)(_self_));
}
const gchar * _gtk_about_dialog_get_website_label(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_website_label((GtkAboutDialog *)(_self_));
}
gboolean _gtk_about_dialog_get_wrap_license(GtkAboutDialog* _self_) {
	return gtk_about_dialog_get_wrap_license((GtkAboutDialog *)(_self_));
}
void _gtk_about_dialog_set_artists(GtkAboutDialog* _self_, void* artists) {
	gtk_about_dialog_set_artists((GtkAboutDialog *)(_self_), (const gchar **)(artists));
}
void _gtk_about_dialog_set_authors(GtkAboutDialog* _self_, void* authors) {
	gtk_about_dialog_set_authors((GtkAboutDialog *)(_self_), (const gchar **)(authors));
}
void _gtk_about_dialog_set_comments(GtkAboutDialog* _self_, gchar* comments) {
	gtk_about_dialog_set_comments((GtkAboutDialog *)(_self_), (const gchar *)(comments));
}
void _gtk_about_dialog_set_copyright(GtkAboutDialog* _self_, gchar* copyright) {
	gtk_about_dialog_set_copyright((GtkAboutDialog *)(_self_), (const gchar *)(copyright));
}
void _gtk_about_dialog_set_documenters(GtkAboutDialog* _self_, void* documenters) {
	gtk_about_dialog_set_documenters((GtkAboutDialog *)(_self_), (const gchar **)(documenters));
}
void _gtk_about_dialog_set_license(GtkAboutDialog* _self_, gchar* license) {
	gtk_about_dialog_set_license((GtkAboutDialog *)(_self_), (const gchar *)(license));
}
void _gtk_about_dialog_set_license_type(GtkAboutDialog* _self_, GtkLicense license_type) {
	gtk_about_dialog_set_license_type((GtkAboutDialog *)(_self_), license_type);
}
void _gtk_about_dialog_set_logo(GtkAboutDialog* _self_, GdkPixbuf* logo) {
	gtk_about_dialog_set_logo((GtkAboutDialog *)(_self_), (GdkPixbuf *)(logo));
}
void _gtk_about_dialog_set_logo_icon_name(GtkAboutDialog* _self_, gchar* icon_name) {
	gtk_about_dialog_set_logo_icon_name((GtkAboutDialog *)(_self_), (const gchar *)(icon_name));
}
void _gtk_about_dialog_set_program_name(GtkAboutDialog* _self_, gchar* name) {
	gtk_about_dialog_set_program_name((GtkAboutDialog *)(_self_), (const gchar *)(name));
}
void _gtk_about_dialog_set_translator_credits(GtkAboutDialog* _self_, gchar* translator_credits) {
	gtk_about_dialog_set_translator_credits((GtkAboutDialog *)(_self_), (const gchar *)(translator_credits));
}
void _gtk_about_dialog_set_version(GtkAboutDialog* _self_, gchar* version) {
	gtk_about_dialog_set_version((GtkAboutDialog *)(_self_), (const gchar *)(version));
}
void _gtk_about_dialog_set_website(GtkAboutDialog* _self_, gchar* website) {
	gtk_about_dialog_set_website((GtkAboutDialog *)(_self_), (const gchar *)(website));
}
void _gtk_about_dialog_set_website_label(GtkAboutDialog* _self_, gchar* website_label) {
	gtk_about_dialog_set_website_label((GtkAboutDialog *)(_self_), (const gchar *)(website_label));
}
void _gtk_about_dialog_set_wrap_license(GtkAboutDialog* _self_, gboolean wrap_license) {
	gtk_about_dialog_set_wrap_license((GtkAboutDialog *)(_self_), wrap_license);
}
gboolean _gtk_accel_group_activate(GtkAccelGroup* _self_, GQuark accel_quark, GObject* acceleratable, guint accel_key, GdkModifierType accel_mods) {
	return gtk_accel_group_activate((GtkAccelGroup *)(_self_), accel_quark, (GObject *)(acceleratable), accel_key, accel_mods);
}
void _gtk_accel_group_connect(GtkAccelGroup* _self_, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure* closure) {
	gtk_accel_group_connect((GtkAccelGroup *)(_self_), accel_key, accel_mods, accel_flags, (GClosure *)(closure));
}
void _gtk_accel_group_connect_by_path(GtkAccelGroup* _self_, gchar* accel_path, GClosure* closure) {
	gtk_accel_group_connect_by_path((GtkAccelGroup *)(_self_), (const gchar *)(accel_path), (GClosure *)(closure));
}
gboolean _gtk_accel_group_disconnect(GtkAccelGroup* _self_, GClosure* closure) {
	return gtk_accel_group_disconnect((GtkAccelGroup *)(_self_), (GClosure *)(closure));
}
gboolean _gtk_accel_group_disconnect_key(GtkAccelGroup* _self_, guint accel_key, GdkModifierType accel_mods) {
	return gtk_accel_group_disconnect_key((GtkAccelGroup *)(_self_), accel_key, accel_mods);
}
GtkAccelKey * _gtk_accel_group_find(GtkAccelGroup* _self_, GtkAccelGroupFindFunc find_func, gpointer data) {
	return gtk_accel_group_find((GtkAccelGroup *)(_self_), find_func, data);
}
gboolean _gtk_accel_group_get_is_locked(GtkAccelGroup* _self_) {
	return gtk_accel_group_get_is_locked((GtkAccelGroup *)(_self_));
}
GdkModifierType _gtk_accel_group_get_modifier_mask(GtkAccelGroup* _self_) {
	return gtk_accel_group_get_modifier_mask((GtkAccelGroup *)(_self_));
}
void _gtk_accel_group_lock(GtkAccelGroup* _self_) {
	gtk_accel_group_lock((GtkAccelGroup *)(_self_));
}
GtkAccelGroupEntry * _gtk_accel_group_query(GtkAccelGroup* _self_, guint accel_key, GdkModifierType accel_mods, guint* n_entries) {
	return gtk_accel_group_query((GtkAccelGroup *)(_self_), accel_key, accel_mods, (guint *)(n_entries));
}
void _gtk_accel_group_unlock(GtkAccelGroup* _self_) {
	gtk_accel_group_unlock((GtkAccelGroup *)(_self_));
}
GtkWidget * _gtk_accel_label_new(gchar* string_) {
	return gtk_accel_label_new((const gchar *)(string_));
}
GtkWidget * _gtk_accel_label_get_accel_widget(GtkAccelLabel* _self_) {
	return gtk_accel_label_get_accel_widget((GtkAccelLabel *)(_self_));
}
guint _gtk_accel_label_get_accel_width(GtkAccelLabel* _self_) {
	return gtk_accel_label_get_accel_width((GtkAccelLabel *)(_self_));
}
gboolean _gtk_accel_label_refetch(GtkAccelLabel* _self_) {
	return gtk_accel_label_refetch((GtkAccelLabel *)(_self_));
}
void _gtk_accel_label_set_accel(GtkAccelLabel* _self_, guint accelerator_key, GdkModifierType accelerator_mods) {
	gtk_accel_label_set_accel((GtkAccelLabel *)(_self_), accelerator_key, accelerator_mods);
}
void _gtk_accel_label_set_accel_closure(GtkAccelLabel* _self_, GClosure* accel_closure) {
	gtk_accel_label_set_accel_closure((GtkAccelLabel *)(_self_), (GClosure *)(accel_closure));
}
void _gtk_accel_label_set_accel_widget(GtkAccelLabel* _self_, GtkWidget* accel_widget) {
	gtk_accel_label_set_accel_widget((GtkAccelLabel *)(_self_), (GtkWidget *)(accel_widget));
}
void _gtk_accel_map_add_entry(gchar* accel_path, guint accel_key, GdkModifierType accel_mods) {
	gtk_accel_map_add_entry((const gchar *)(accel_path), accel_key, accel_mods);
}
void _gtk_accel_map_add_filter(gchar* filter_pattern) {
	gtk_accel_map_add_filter((const gchar *)(filter_pattern));
}
gboolean _gtk_accel_map_change_entry(gchar* accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace) {
	return gtk_accel_map_change_entry((const gchar *)(accel_path), accel_key, accel_mods, replace);
}
void _gtk_accel_map_lock_path(gchar* accel_path) {
	gtk_accel_map_lock_path((const gchar *)(accel_path));
}
gboolean _gtk_accel_map_lookup_entry(gchar* accel_path, GtkAccelKey* key) {
	return gtk_accel_map_lookup_entry((const gchar *)(accel_path), (GtkAccelKey *)(key));
}
void _gtk_accel_map_unlock_path(gchar* accel_path) {
	gtk_accel_map_unlock_path((const gchar *)(accel_path));
}
GtkWidget * _gtk_accessible_get_widget(GtkAccessible* _self_) {
	return gtk_accessible_get_widget((GtkAccessible *)(_self_));
}
void _gtk_accessible_set_widget(GtkAccessible* _self_, GtkWidget* widget) {
	gtk_accessible_set_widget((GtkAccessible *)(_self_), (GtkWidget *)(widget));
}
GtkAction * _gtk_action_new(gchar* name, gchar* label, gchar* tooltip, gchar* stock_id) {
	return gtk_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
void _gtk_action_activate(GtkAction* _self_) {
	gtk_action_activate((GtkAction *)(_self_));
}
void _gtk_action_block_activate(GtkAction* _self_) {
	gtk_action_block_activate((GtkAction *)(_self_));
}
void _gtk_action_connect_accelerator(GtkAction* _self_) {
	gtk_action_connect_accelerator((GtkAction *)(_self_));
}
GtkWidget * _gtk_action_create_icon(GtkAction* _self_, GtkIconSize icon_size) {
	return gtk_action_create_icon((GtkAction *)(_self_), icon_size);
}
GtkWidget * _gtk_action_create_menu(GtkAction* _self_) {
	return gtk_action_create_menu((GtkAction *)(_self_));
}
GtkWidget * _gtk_action_create_menu_item(GtkAction* _self_) {
	return gtk_action_create_menu_item((GtkAction *)(_self_));
}
GtkWidget * _gtk_action_create_tool_item(GtkAction* _self_) {
	return gtk_action_create_tool_item((GtkAction *)(_self_));
}
void _gtk_action_disconnect_accelerator(GtkAction* _self_) {
	gtk_action_disconnect_accelerator((GtkAction *)(_self_));
}
GClosure * _gtk_action_get_accel_closure(GtkAction* _self_) {
	return gtk_action_get_accel_closure((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_accel_path(GtkAction* _self_) {
	return gtk_action_get_accel_path((GtkAction *)(_self_));
}
gboolean _gtk_action_get_always_show_image(GtkAction* _self_) {
	return gtk_action_get_always_show_image((GtkAction *)(_self_));
}
GIcon * _gtk_action_get_gicon(GtkAction* _self_) {
	return gtk_action_get_gicon((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_icon_name(GtkAction* _self_) {
	return gtk_action_get_icon_name((GtkAction *)(_self_));
}
gboolean _gtk_action_get_is_important(GtkAction* _self_) {
	return gtk_action_get_is_important((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_label(GtkAction* _self_) {
	return gtk_action_get_label((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_name(GtkAction* _self_) {
	return gtk_action_get_name((GtkAction *)(_self_));
}
GSList * _gtk_action_get_proxies(GtkAction* _self_) {
	return gtk_action_get_proxies((GtkAction *)(_self_));
}
gboolean _gtk_action_get_sensitive(GtkAction* _self_) {
	return gtk_action_get_sensitive((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_short_label(GtkAction* _self_) {
	return gtk_action_get_short_label((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_stock_id(GtkAction* _self_) {
	return gtk_action_get_stock_id((GtkAction *)(_self_));
}
const gchar * _gtk_action_get_tooltip(GtkAction* _self_) {
	return gtk_action_get_tooltip((GtkAction *)(_self_));
}
gboolean _gtk_action_get_visible(GtkAction* _self_) {
	return gtk_action_get_visible((GtkAction *)(_self_));
}
gboolean _gtk_action_get_visible_horizontal(GtkAction* _self_) {
	return gtk_action_get_visible_horizontal((GtkAction *)(_self_));
}
gboolean _gtk_action_get_visible_vertical(GtkAction* _self_) {
	return gtk_action_get_visible_vertical((GtkAction *)(_self_));
}
gboolean _gtk_action_is_sensitive(GtkAction* _self_) {
	return gtk_action_is_sensitive((GtkAction *)(_self_));
}
gboolean _gtk_action_is_visible(GtkAction* _self_) {
	return gtk_action_is_visible((GtkAction *)(_self_));
}
void _gtk_action_set_accel_group(GtkAction* _self_, GtkAccelGroup* accel_group) {
	gtk_action_set_accel_group((GtkAction *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_action_set_accel_path(GtkAction* _self_, gchar* accel_path) {
	gtk_action_set_accel_path((GtkAction *)(_self_), (const gchar *)(accel_path));
}
void _gtk_action_set_always_show_image(GtkAction* _self_, gboolean always_show) {
	gtk_action_set_always_show_image((GtkAction *)(_self_), always_show);
}
void _gtk_action_set_gicon(GtkAction* _self_, GIcon* icon) {
	gtk_action_set_gicon((GtkAction *)(_self_), (GIcon *)(icon));
}
void _gtk_action_set_icon_name(GtkAction* _self_, gchar* icon_name) {
	gtk_action_set_icon_name((GtkAction *)(_self_), (const gchar *)(icon_name));
}
void _gtk_action_set_is_important(GtkAction* _self_, gboolean is_important) {
	gtk_action_set_is_important((GtkAction *)(_self_), is_important);
}
void _gtk_action_set_label(GtkAction* _self_, gchar* label) {
	gtk_action_set_label((GtkAction *)(_self_), (const gchar *)(label));
}
void _gtk_action_set_sensitive(GtkAction* _self_, gboolean sensitive) {
	gtk_action_set_sensitive((GtkAction *)(_self_), sensitive);
}
void _gtk_action_set_short_label(GtkAction* _self_, gchar* short_label) {
	gtk_action_set_short_label((GtkAction *)(_self_), (const gchar *)(short_label));
}
void _gtk_action_set_stock_id(GtkAction* _self_, gchar* stock_id) {
	gtk_action_set_stock_id((GtkAction *)(_self_), (const gchar *)(stock_id));
}
void _gtk_action_set_tooltip(GtkAction* _self_, gchar* tooltip) {
	gtk_action_set_tooltip((GtkAction *)(_self_), (const gchar *)(tooltip));
}
void _gtk_action_set_visible(GtkAction* _self_, gboolean visible) {
	gtk_action_set_visible((GtkAction *)(_self_), visible);
}
void _gtk_action_set_visible_horizontal(GtkAction* _self_, gboolean visible_horizontal) {
	gtk_action_set_visible_horizontal((GtkAction *)(_self_), visible_horizontal);
}
void _gtk_action_set_visible_vertical(GtkAction* _self_, gboolean visible_vertical) {
	gtk_action_set_visible_vertical((GtkAction *)(_self_), visible_vertical);
}
void _gtk_action_unblock_activate(GtkAction* _self_) {
	gtk_action_unblock_activate((GtkAction *)(_self_));
}
GtkActionGroup * _gtk_action_group_new(gchar* name) {
	return gtk_action_group_new((const gchar *)(name));
}
void _gtk_action_group_add_action(GtkActionGroup* _self_, GtkAction* action) {
	gtk_action_group_add_action((GtkActionGroup *)(_self_), (GtkAction *)(action));
}
void _gtk_action_group_add_action_with_accel(GtkActionGroup* _self_, GtkAction* action, gchar* accelerator) {
	gtk_action_group_add_action_with_accel((GtkActionGroup *)(_self_), (GtkAction *)(action), (const gchar *)(accelerator));
}
void _gtk_action_group_add_actions(GtkActionGroup* _self_, GtkActionEntry* entries, guint n_entries, gpointer user_data) {
	gtk_action_group_add_actions((GtkActionGroup *)(_self_), (const GtkActionEntry *)(entries), n_entries, user_data);
}
void _gtk_action_group_add_actions_full(GtkActionGroup* _self_, GtkActionEntry* entries, guint n_entries, gpointer user_data, GDestroyNotify destroy) {
	gtk_action_group_add_actions_full((GtkActionGroup *)(_self_), (const GtkActionEntry *)(entries), n_entries, user_data, destroy);
}
void _gtk_action_group_add_radio_actions(GtkActionGroup* _self_, GtkRadioActionEntry* entries, guint n_entries, gint value, GCallback on_change, gpointer user_data) {
	gtk_action_group_add_radio_actions((GtkActionGroup *)(_self_), (const GtkRadioActionEntry *)(entries), n_entries, value, on_change, user_data);
}
void _gtk_action_group_add_radio_actions_full(GtkActionGroup* _self_, GtkRadioActionEntry* entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy) {
	gtk_action_group_add_radio_actions_full((GtkActionGroup *)(_self_), (const GtkRadioActionEntry *)(entries), n_entries, value, on_change, user_data, destroy);
}
void _gtk_action_group_add_toggle_actions(GtkActionGroup* _self_, GtkToggleActionEntry* entries, guint n_entries, gpointer user_data) {
	gtk_action_group_add_toggle_actions((GtkActionGroup *)(_self_), (const GtkToggleActionEntry *)(entries), n_entries, user_data);
}
void _gtk_action_group_add_toggle_actions_full(GtkActionGroup* _self_, GtkToggleActionEntry* entries, guint n_entries, gpointer user_data, GDestroyNotify destroy) {
	gtk_action_group_add_toggle_actions_full((GtkActionGroup *)(_self_), (const GtkToggleActionEntry *)(entries), n_entries, user_data, destroy);
}
GtkAccelGroup * _gtk_action_group_get_accel_group(GtkActionGroup* _self_) {
	return gtk_action_group_get_accel_group((GtkActionGroup *)(_self_));
}
GtkAction * _gtk_action_group_get_action(GtkActionGroup* _self_, gchar* action_name) {
	return gtk_action_group_get_action((GtkActionGroup *)(_self_), (const gchar *)(action_name));
}
const gchar * _gtk_action_group_get_name(GtkActionGroup* _self_) {
	return gtk_action_group_get_name((GtkActionGroup *)(_self_));
}
gboolean _gtk_action_group_get_sensitive(GtkActionGroup* _self_) {
	return gtk_action_group_get_sensitive((GtkActionGroup *)(_self_));
}
gboolean _gtk_action_group_get_visible(GtkActionGroup* _self_) {
	return gtk_action_group_get_visible((GtkActionGroup *)(_self_));
}
GList * _gtk_action_group_list_actions(GtkActionGroup* _self_) {
	return gtk_action_group_list_actions((GtkActionGroup *)(_self_));
}
void _gtk_action_group_remove_action(GtkActionGroup* _self_, GtkAction* action) {
	gtk_action_group_remove_action((GtkActionGroup *)(_self_), (GtkAction *)(action));
}
void _gtk_action_group_set_accel_group(GtkActionGroup* _self_, GtkAccelGroup* accel_group) {
	gtk_action_group_set_accel_group((GtkActionGroup *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_action_group_set_sensitive(GtkActionGroup* _self_, gboolean sensitive) {
	gtk_action_group_set_sensitive((GtkActionGroup *)(_self_), sensitive);
}
void _gtk_action_group_set_translate_func(GtkActionGroup* _self_, GtkTranslateFunc func_, gpointer data, GDestroyNotify notify) {
	gtk_action_group_set_translate_func((GtkActionGroup *)(_self_), func_, data, notify);
}
void _gtk_action_group_set_translation_domain(GtkActionGroup* _self_, gchar* domain) {
	gtk_action_group_set_translation_domain((GtkActionGroup *)(_self_), (const gchar *)(domain));
}
void _gtk_action_group_set_visible(GtkActionGroup* _self_, gboolean visible) {
	gtk_action_group_set_visible((GtkActionGroup *)(_self_), visible);
}
const gchar * _gtk_action_group_translate_string(GtkActionGroup* _self_, gchar* string_) {
	return gtk_action_group_translate_string((GtkActionGroup *)(_self_), (const gchar *)(string_));
}
void _gtk_adjustment_changed(GtkAdjustment* _self_) {
	gtk_adjustment_changed((GtkAdjustment *)(_self_));
}
void _gtk_adjustment_clamp_page(GtkAdjustment* _self_, gdouble lower, gdouble upper) {
	gtk_adjustment_clamp_page((GtkAdjustment *)(_self_), lower, upper);
}
void _gtk_adjustment_configure(GtkAdjustment* _self_, gdouble value, gdouble lower, gdouble upper, gdouble step_increment, gdouble page_increment, gdouble page_size) {
	gtk_adjustment_configure((GtkAdjustment *)(_self_), value, lower, upper, step_increment, page_increment, page_size);
}
gdouble _gtk_adjustment_get_lower(GtkAdjustment* _self_) {
	return gtk_adjustment_get_lower((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_minimum_increment(GtkAdjustment* _self_) {
	return gtk_adjustment_get_minimum_increment((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_page_increment(GtkAdjustment* _self_) {
	return gtk_adjustment_get_page_increment((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_page_size(GtkAdjustment* _self_) {
	return gtk_adjustment_get_page_size((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_step_increment(GtkAdjustment* _self_) {
	return gtk_adjustment_get_step_increment((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_upper(GtkAdjustment* _self_) {
	return gtk_adjustment_get_upper((GtkAdjustment *)(_self_));
}
gdouble _gtk_adjustment_get_value(GtkAdjustment* _self_) {
	return gtk_adjustment_get_value((GtkAdjustment *)(_self_));
}
void _gtk_adjustment_set_lower(GtkAdjustment* _self_, gdouble lower) {
	gtk_adjustment_set_lower((GtkAdjustment *)(_self_), lower);
}
void _gtk_adjustment_set_page_increment(GtkAdjustment* _self_, gdouble page_increment) {
	gtk_adjustment_set_page_increment((GtkAdjustment *)(_self_), page_increment);
}
void _gtk_adjustment_set_page_size(GtkAdjustment* _self_, gdouble page_size) {
	gtk_adjustment_set_page_size((GtkAdjustment *)(_self_), page_size);
}
void _gtk_adjustment_set_step_increment(GtkAdjustment* _self_, gdouble step_increment) {
	gtk_adjustment_set_step_increment((GtkAdjustment *)(_self_), step_increment);
}
void _gtk_adjustment_set_upper(GtkAdjustment* _self_, gdouble upper) {
	gtk_adjustment_set_upper((GtkAdjustment *)(_self_), upper);
}
void _gtk_adjustment_set_value(GtkAdjustment* _self_, gdouble value) {
	gtk_adjustment_set_value((GtkAdjustment *)(_self_), value);
}
void _gtk_adjustment_value_changed(GtkAdjustment* _self_) {
	gtk_adjustment_value_changed((GtkAdjustment *)(_self_));
}
void _gtk_alignment_get_padding(GtkAlignment* _self_, guint* padding_top, guint* padding_bottom, guint* padding_left, guint* padding_right) {
	gtk_alignment_get_padding((GtkAlignment *)(_self_), (guint *)(padding_top), (guint *)(padding_bottom), (guint *)(padding_left), (guint *)(padding_right));
}
void _gtk_alignment_set(GtkAlignment* _self_, gfloat xalign, gfloat yalign, gfloat xscale, gfloat yscale) {
	gtk_alignment_set((GtkAlignment *)(_self_), xalign, yalign, xscale, yscale);
}
void _gtk_alignment_set_padding(GtkAlignment* _self_, guint padding_top, guint padding_bottom, guint padding_left, guint padding_right) {
	gtk_alignment_set_padding((GtkAlignment *)(_self_), padding_top, padding_bottom, padding_left, padding_right);
}
GtkWidget * _gtk_app_chooser_button_new(gchar* content_type) {
	return gtk_app_chooser_button_new((const gchar *)(content_type));
}
void _gtk_app_chooser_button_append_custom_item(GtkAppChooserButton* _self_, gchar* name, gchar* label, GIcon* icon) {
	gtk_app_chooser_button_append_custom_item((GtkAppChooserButton *)(_self_), (const gchar *)(name), (const gchar *)(label), (GIcon *)(icon));
}
void _gtk_app_chooser_button_append_separator(GtkAppChooserButton* _self_) {
	gtk_app_chooser_button_append_separator((GtkAppChooserButton *)(_self_));
}
const gchar * _gtk_app_chooser_button_get_heading(GtkAppChooserButton* _self_) {
	return gtk_app_chooser_button_get_heading((GtkAppChooserButton *)(_self_));
}
gboolean _gtk_app_chooser_button_get_show_default_item(GtkAppChooserButton* _self_) {
	return gtk_app_chooser_button_get_show_default_item((GtkAppChooserButton *)(_self_));
}
gboolean _gtk_app_chooser_button_get_show_dialog_item(GtkAppChooserButton* _self_) {
	return gtk_app_chooser_button_get_show_dialog_item((GtkAppChooserButton *)(_self_));
}
void _gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton* _self_, gchar* name) {
	gtk_app_chooser_button_set_active_custom_item((GtkAppChooserButton *)(_self_), (const gchar *)(name));
}
void _gtk_app_chooser_button_set_heading(GtkAppChooserButton* _self_, gchar* heading) {
	gtk_app_chooser_button_set_heading((GtkAppChooserButton *)(_self_), (const gchar *)(heading));
}
void _gtk_app_chooser_button_set_show_default_item(GtkAppChooserButton* _self_, gboolean setting) {
	gtk_app_chooser_button_set_show_default_item((GtkAppChooserButton *)(_self_), setting);
}
void _gtk_app_chooser_button_set_show_dialog_item(GtkAppChooserButton* _self_, gboolean setting) {
	gtk_app_chooser_button_set_show_dialog_item((GtkAppChooserButton *)(_self_), setting);
}
GtkWidget * _gtk_app_chooser_dialog_new_for_content_type(GtkWindow* parent, GtkDialogFlags flags, gchar* content_type) {
	return gtk_app_chooser_dialog_new_for_content_type((GtkWindow *)(parent), flags, (const gchar *)(content_type));
}
const gchar * _gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog* _self_) {
	return gtk_app_chooser_dialog_get_heading((GtkAppChooserDialog *)(_self_));
}
GtkWidget * _gtk_app_chooser_dialog_get_widget(GtkAppChooserDialog* _self_) {
	return gtk_app_chooser_dialog_get_widget((GtkAppChooserDialog *)(_self_));
}
void _gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog* _self_, gchar* heading) {
	gtk_app_chooser_dialog_set_heading((GtkAppChooserDialog *)(_self_), (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_widget_new(gchar* content_type) {
	return gtk_app_chooser_widget_new((const gchar *)(content_type));
}
const gchar * _gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_default_text((GtkAppChooserWidget *)(_self_));
}
gboolean _gtk_app_chooser_widget_get_show_all(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_show_all((GtkAppChooserWidget *)(_self_));
}
gboolean _gtk_app_chooser_widget_get_show_default(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_show_default((GtkAppChooserWidget *)(_self_));
}
gboolean _gtk_app_chooser_widget_get_show_fallback(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_show_fallback((GtkAppChooserWidget *)(_self_));
}
gboolean _gtk_app_chooser_widget_get_show_other(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_show_other((GtkAppChooserWidget *)(_self_));
}
gboolean _gtk_app_chooser_widget_get_show_recommended(GtkAppChooserWidget* _self_) {
	return gtk_app_chooser_widget_get_show_recommended((GtkAppChooserWidget *)(_self_));
}
void _gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget* _self_, gchar* text) {
	gtk_app_chooser_widget_set_default_text((GtkAppChooserWidget *)(_self_), (const gchar *)(text));
}
void _gtk_app_chooser_widget_set_show_all(GtkAppChooserWidget* _self_, gboolean setting) {
	gtk_app_chooser_widget_set_show_all((GtkAppChooserWidget *)(_self_), setting);
}
void _gtk_app_chooser_widget_set_show_default(GtkAppChooserWidget* _self_, gboolean setting) {
	gtk_app_chooser_widget_set_show_default((GtkAppChooserWidget *)(_self_), setting);
}
void _gtk_app_chooser_widget_set_show_fallback(GtkAppChooserWidget* _self_, gboolean setting) {
	gtk_app_chooser_widget_set_show_fallback((GtkAppChooserWidget *)(_self_), setting);
}
void _gtk_app_chooser_widget_set_show_other(GtkAppChooserWidget* _self_, gboolean setting) {
	gtk_app_chooser_widget_set_show_other((GtkAppChooserWidget *)(_self_), setting);
}
void _gtk_app_chooser_widget_set_show_recommended(GtkAppChooserWidget* _self_, gboolean setting) {
	gtk_app_chooser_widget_set_show_recommended((GtkAppChooserWidget *)(_self_), setting);
}
GtkApplication * _gtk_application_new(gchar* application_id, GApplicationFlags flags) {
	return gtk_application_new((const gchar *)(application_id), flags);
}
void _gtk_application_add_accelerator(GtkApplication* _self_, gchar* accelerator, gchar* action_name, GVariant* parameter) {
	gtk_application_add_accelerator((GtkApplication *)(_self_), (const gchar *)(accelerator), (const gchar *)(action_name), (GVariant *)(parameter));
}
void _gtk_application_add_window(GtkApplication* _self_, GtkWindow* window) {
	gtk_application_add_window((GtkApplication *)(_self_), (GtkWindow *)(window));
}
GtkWindow * _gtk_application_get_active_window(GtkApplication* _self_) {
	return gtk_application_get_active_window((GtkApplication *)(_self_));
}
GMenuModel * _gtk_application_get_app_menu(GtkApplication* _self_) {
	return gtk_application_get_app_menu((GtkApplication *)(_self_));
}
GMenuModel * _gtk_application_get_menubar(GtkApplication* _self_) {
	return gtk_application_get_menubar((GtkApplication *)(_self_));
}
GtkWindow * _gtk_application_get_window_by_id(GtkApplication* _self_, guint id) {
	return gtk_application_get_window_by_id((GtkApplication *)(_self_), id);
}
GList * _gtk_application_get_windows(GtkApplication* _self_) {
	return gtk_application_get_windows((GtkApplication *)(_self_));
}
guint _gtk_application_inhibit(GtkApplication* _self_, GtkWindow* window, GtkApplicationInhibitFlags flags, gchar* reason) {
	return gtk_application_inhibit((GtkApplication *)(_self_), (GtkWindow *)(window), flags, (const gchar *)(reason));
}
gboolean _gtk_application_is_inhibited(GtkApplication* _self_, GtkApplicationInhibitFlags flags) {
	return gtk_application_is_inhibited((GtkApplication *)(_self_), flags);
}
void _gtk_application_remove_accelerator(GtkApplication* _self_, gchar* action_name, GVariant* parameter) {
	gtk_application_remove_accelerator((GtkApplication *)(_self_), (const gchar *)(action_name), (GVariant *)(parameter));
}
void _gtk_application_remove_window(GtkApplication* _self_, GtkWindow* window) {
	gtk_application_remove_window((GtkApplication *)(_self_), (GtkWindow *)(window));
}
void _gtk_application_set_app_menu(GtkApplication* _self_, GMenuModel* app_menu) {
	gtk_application_set_app_menu((GtkApplication *)(_self_), (GMenuModel *)(app_menu));
}
void _gtk_application_set_menubar(GtkApplication* _self_, GMenuModel* menubar) {
	gtk_application_set_menubar((GtkApplication *)(_self_), (GMenuModel *)(menubar));
}
void _gtk_application_uninhibit(GtkApplication* _self_, guint cookie) {
	gtk_application_uninhibit((GtkApplication *)(_self_), cookie);
}
guint _gtk_application_window_get_id(GtkApplicationWindow* _self_) {
	return gtk_application_window_get_id((GtkApplicationWindow *)(_self_));
}
gboolean _gtk_application_window_get_show_menubar(GtkApplicationWindow* _self_) {
	return gtk_application_window_get_show_menubar((GtkApplicationWindow *)(_self_));
}
void _gtk_application_window_set_show_menubar(GtkApplicationWindow* _self_, gboolean show_menubar) {
	gtk_application_window_set_show_menubar((GtkApplicationWindow *)(_self_), show_menubar);
}
void _gtk_arrow_set(GtkArrow* _self_, GtkArrowType arrow_type, GtkShadowType shadow_type) {
	gtk_arrow_set((GtkArrow *)(_self_), arrow_type, shadow_type);
}
GtkWidget * _gtk_aspect_frame_new(gchar* label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) {
	return gtk_aspect_frame_new((const gchar *)(label), xalign, yalign, ratio, obey_child);
}
void _gtk_aspect_frame_set(GtkAspectFrame* _self_, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) {
	gtk_aspect_frame_set((GtkAspectFrame *)(_self_), xalign, yalign, ratio, obey_child);
}
void _gtk_assistant_add_action_widget(GtkAssistant* _self_, GtkWidget* child) {
	gtk_assistant_add_action_widget((GtkAssistant *)(_self_), (GtkWidget *)(child));
}
gint _gtk_assistant_append_page(GtkAssistant* _self_, GtkWidget* page) {
	return gtk_assistant_append_page((GtkAssistant *)(_self_), (GtkWidget *)(page));
}
void _gtk_assistant_commit(GtkAssistant* _self_) {
	gtk_assistant_commit((GtkAssistant *)(_self_));
}
gint _gtk_assistant_get_current_page(GtkAssistant* _self_) {
	return gtk_assistant_get_current_page((GtkAssistant *)(_self_));
}
gint _gtk_assistant_get_n_pages(GtkAssistant* _self_) {
	return gtk_assistant_get_n_pages((GtkAssistant *)(_self_));
}
GtkWidget * _gtk_assistant_get_nth_page(GtkAssistant* _self_, gint page_num) {
	return gtk_assistant_get_nth_page((GtkAssistant *)(_self_), page_num);
}
gboolean _gtk_assistant_get_page_complete(GtkAssistant* _self_, GtkWidget* page) {
	return gtk_assistant_get_page_complete((GtkAssistant *)(_self_), (GtkWidget *)(page));
}
const gchar * _gtk_assistant_get_page_title(GtkAssistant* _self_, GtkWidget* page) {
	return gtk_assistant_get_page_title((GtkAssistant *)(_self_), (GtkWidget *)(page));
}
GtkAssistantPageType _gtk_assistant_get_page_type(GtkAssistant* _self_, GtkWidget* page) {
	return gtk_assistant_get_page_type((GtkAssistant *)(_self_), (GtkWidget *)(page));
}
gint _gtk_assistant_insert_page(GtkAssistant* _self_, GtkWidget* page, gint position) {
	return gtk_assistant_insert_page((GtkAssistant *)(_self_), (GtkWidget *)(page), position);
}
void _gtk_assistant_next_page(GtkAssistant* _self_) {
	gtk_assistant_next_page((GtkAssistant *)(_self_));
}
gint _gtk_assistant_prepend_page(GtkAssistant* _self_, GtkWidget* page) {
	return gtk_assistant_prepend_page((GtkAssistant *)(_self_), (GtkWidget *)(page));
}
void _gtk_assistant_previous_page(GtkAssistant* _self_) {
	gtk_assistant_previous_page((GtkAssistant *)(_self_));
}
void _gtk_assistant_remove_action_widget(GtkAssistant* _self_, GtkWidget* child) {
	gtk_assistant_remove_action_widget((GtkAssistant *)(_self_), (GtkWidget *)(child));
}
void _gtk_assistant_remove_page(GtkAssistant* _self_, gint page_num) {
	gtk_assistant_remove_page((GtkAssistant *)(_self_), page_num);
}
void _gtk_assistant_set_current_page(GtkAssistant* _self_, gint page_num) {
	gtk_assistant_set_current_page((GtkAssistant *)(_self_), page_num);
}
void _gtk_assistant_set_forward_page_func(GtkAssistant* _self_, GtkAssistantPageFunc page_func, gpointer data, GDestroyNotify destroy) {
	gtk_assistant_set_forward_page_func((GtkAssistant *)(_self_), page_func, data, destroy);
}
void _gtk_assistant_set_page_complete(GtkAssistant* _self_, GtkWidget* page, gboolean complete) {
	gtk_assistant_set_page_complete((GtkAssistant *)(_self_), (GtkWidget *)(page), complete);
}
void _gtk_assistant_set_page_title(GtkAssistant* _self_, GtkWidget* page, gchar* title) {
	gtk_assistant_set_page_title((GtkAssistant *)(_self_), (GtkWidget *)(page), (const gchar *)(title));
}
void _gtk_assistant_set_page_type(GtkAssistant* _self_, GtkWidget* page, GtkAssistantPageType type_) {
	gtk_assistant_set_page_type((GtkAssistant *)(_self_), (GtkWidget *)(page), type_);
}
void _gtk_assistant_update_buttons_state(GtkAssistant* _self_) {
	gtk_assistant_update_buttons_state((GtkAssistant *)(_self_));
}
GtkWidget * _gtk_bin_get_child(GtkBin* _self_) {
	return gtk_bin_get_child((GtkBin *)(_self_));
}
GTokenType _gtk_binding_entry_add_signal_from_string(GtkBindingSet* binding_set, gchar* signal_desc) {
	return gtk_binding_entry_add_signal_from_string((GtkBindingSet *)(binding_set), (const gchar *)(signal_desc));
}
void _gtk_binding_entry_add_signall(GtkBindingSet* binding_set, guint keyval, GdkModifierType modifiers, gchar* signal_name, GSList* binding_args) {
	gtk_binding_entry_add_signall((GtkBindingSet *)(binding_set), keyval, modifiers, (const gchar *)(signal_name), (GSList *)(binding_args));
}
GtkBindingSet * _gtk_binding_set_find(gchar* set_name) {
	return gtk_binding_set_find((const gchar *)(set_name));
}
GtkBindingSet * _gtk_binding_set_new(gchar* set_name) {
	return gtk_binding_set_new((const gchar *)(set_name));
}
gboolean _gtk_binding_set_activate(GtkBindingSet* _self_, guint keyval, GdkModifierType modifiers, GObject* object) {
	return gtk_binding_set_activate((GtkBindingSet *)(_self_), keyval, modifiers, (GObject *)(object));
}
GtkBorder * _gtk_border_copy(GtkBorder* _self_) {
	return gtk_border_copy((const GtkBorder *)(_self_));
}
void _gtk_border_free(GtkBorder* _self_) {
	gtk_border_free((GtkBorder *)(_self_));
}
gboolean _gtk_box_get_homogeneous(GtkBox* _self_) {
	return gtk_box_get_homogeneous((GtkBox *)(_self_));
}
gint _gtk_box_get_spacing(GtkBox* _self_) {
	return gtk_box_get_spacing((GtkBox *)(_self_));
}
void _gtk_box_pack_end(GtkBox* _self_, GtkWidget* child, gboolean expand, gboolean fill, guint padding) {
	gtk_box_pack_end((GtkBox *)(_self_), (GtkWidget *)(child), expand, fill, padding);
}
void _gtk_box_pack_start(GtkBox* _self_, GtkWidget* child, gboolean expand, gboolean fill, guint padding) {
	gtk_box_pack_start((GtkBox *)(_self_), (GtkWidget *)(child), expand, fill, padding);
}
void _gtk_box_query_child_packing(GtkBox* _self_, GtkWidget* child, gboolean* expand, gboolean* fill, guint* padding, GtkPackType* pack_type) {
	gtk_box_query_child_packing((GtkBox *)(_self_), (GtkWidget *)(child), (gboolean *)(expand), (gboolean *)(fill), (guint *)(padding), (GtkPackType *)(pack_type));
}
void _gtk_box_reorder_child(GtkBox* _self_, GtkWidget* child, gint position) {
	gtk_box_reorder_child((GtkBox *)(_self_), (GtkWidget *)(child), position);
}
void _gtk_box_set_child_packing(GtkBox* _self_, GtkWidget* child, gboolean expand, gboolean fill, guint padding, GtkPackType pack_type) {
	gtk_box_set_child_packing((GtkBox *)(_self_), (GtkWidget *)(child), expand, fill, padding, pack_type);
}
void _gtk_box_set_homogeneous(GtkBox* _self_, gboolean homogeneous) {
	gtk_box_set_homogeneous((GtkBox *)(_self_), homogeneous);
}
void _gtk_box_set_spacing(GtkBox* _self_, gint spacing) {
	gtk_box_set_spacing((GtkBox *)(_self_), spacing);
}
guint _gtk_builder_add_from_file(GtkBuilder* _self_, gchar* filename, void* _error_) {
	return gtk_builder_add_from_file((GtkBuilder *)(_self_), (const gchar *)(filename), (GError **)(_error_));
}
guint _gtk_builder_add_from_resource(GtkBuilder* _self_, gchar* resource_path, void* _error_) {
	return gtk_builder_add_from_resource((GtkBuilder *)(_self_), (const gchar *)(resource_path), (GError **)(_error_));
}
guint _gtk_builder_add_from_string(GtkBuilder* _self_, gchar* buffer, gsize length, void* _error_) {
	return gtk_builder_add_from_string((GtkBuilder *)(_self_), (const gchar *)(buffer), length, (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_file(GtkBuilder* _self_, gchar* filename, void* object_ids, void* _error_) {
	return gtk_builder_add_objects_from_file((GtkBuilder *)(_self_), (const gchar *)(filename), (gchar **)(object_ids), (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_resource(GtkBuilder* _self_, gchar* resource_path, void* object_ids, void* _error_) {
	return gtk_builder_add_objects_from_resource((GtkBuilder *)(_self_), (const gchar *)(resource_path), (gchar **)(object_ids), (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_string(GtkBuilder* _self_, gchar* buffer, gsize length, void* object_ids, void* _error_) {
	return gtk_builder_add_objects_from_string((GtkBuilder *)(_self_), (const gchar *)(buffer), length, (gchar **)(object_ids), (GError **)(_error_));
}
void _gtk_builder_connect_signals(GtkBuilder* _self_, gpointer user_data) {
	gtk_builder_connect_signals((GtkBuilder *)(_self_), user_data);
}
void _gtk_builder_connect_signals_full(GtkBuilder* _self_, GtkBuilderConnectFunc func_, gpointer user_data) {
	gtk_builder_connect_signals_full((GtkBuilder *)(_self_), func_, user_data);
}
GObject * _gtk_builder_get_object(GtkBuilder* _self_, gchar* name) {
	return gtk_builder_get_object((GtkBuilder *)(_self_), (const gchar *)(name));
}
GSList * _gtk_builder_get_objects(GtkBuilder* _self_) {
	return gtk_builder_get_objects((GtkBuilder *)(_self_));
}
const gchar * _gtk_builder_get_translation_domain(GtkBuilder* _self_) {
	return gtk_builder_get_translation_domain((GtkBuilder *)(_self_));
}
GType _gtk_builder_get_type_from_name(GtkBuilder* _self_, char* type_name) {
	return gtk_builder_get_type_from_name((GtkBuilder *)(_self_), (const char *)(type_name));
}
void _gtk_builder_set_translation_domain(GtkBuilder* _self_, gchar* domain) {
	gtk_builder_set_translation_domain((GtkBuilder *)(_self_), (const gchar *)(domain));
}
gboolean _gtk_builder_value_from_string(GtkBuilder* _self_, GParamSpec* pspec, gchar* string_, GValue* value, void* _error_) {
	return gtk_builder_value_from_string((GtkBuilder *)(_self_), (GParamSpec *)(pspec), (const gchar *)(string_), (GValue *)(value), (GError **)(_error_));
}
gboolean _gtk_builder_value_from_string_type(GtkBuilder* _self_, GType type_, gchar* string_, GValue* value, void* _error_) {
	return gtk_builder_value_from_string_type((GtkBuilder *)(_self_), type_, (const gchar *)(string_), (GValue *)(value), (GError **)(_error_));
}
GtkWidget * _gtk_button_new_from_stock(gchar* stock_id) {
	return gtk_button_new_from_stock((const gchar *)(stock_id));
}
GtkWidget * _gtk_button_new_with_label(gchar* label) {
	return gtk_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_button_new_with_mnemonic(gchar* label) {
	return gtk_button_new_with_mnemonic((const gchar *)(label));
}
void _gtk_button_clicked(GtkButton* _self_) {
	gtk_button_clicked((GtkButton *)(_self_));
}
void _gtk_button_get_alignment(GtkButton* _self_, gfloat* xalign, gfloat* yalign) {
	gtk_button_get_alignment((GtkButton *)(_self_), (gfloat *)(xalign), (gfloat *)(yalign));
}
gboolean _gtk_button_get_always_show_image(GtkButton* _self_) {
	return gtk_button_get_always_show_image((GtkButton *)(_self_));
}
GdkWindow * _gtk_button_get_event_window(GtkButton* _self_) {
	return gtk_button_get_event_window((GtkButton *)(_self_));
}
gboolean _gtk_button_get_focus_on_click(GtkButton* _self_) {
	return gtk_button_get_focus_on_click((GtkButton *)(_self_));
}
GtkWidget * _gtk_button_get_image(GtkButton* _self_) {
	return gtk_button_get_image((GtkButton *)(_self_));
}
GtkPositionType _gtk_button_get_image_position(GtkButton* _self_) {
	return gtk_button_get_image_position((GtkButton *)(_self_));
}
const gchar * _gtk_button_get_label(GtkButton* _self_) {
	return gtk_button_get_label((GtkButton *)(_self_));
}
GtkReliefStyle _gtk_button_get_relief(GtkButton* _self_) {
	return gtk_button_get_relief((GtkButton *)(_self_));
}
gboolean _gtk_button_get_use_stock(GtkButton* _self_) {
	return gtk_button_get_use_stock((GtkButton *)(_self_));
}
gboolean _gtk_button_get_use_underline(GtkButton* _self_) {
	return gtk_button_get_use_underline((GtkButton *)(_self_));
}
void _gtk_button_set_alignment(GtkButton* _self_, gfloat xalign, gfloat yalign) {
	gtk_button_set_alignment((GtkButton *)(_self_), xalign, yalign);
}
void _gtk_button_set_always_show_image(GtkButton* _self_, gboolean always_show) {
	gtk_button_set_always_show_image((GtkButton *)(_self_), always_show);
}
void _gtk_button_set_focus_on_click(GtkButton* _self_, gboolean focus_on_click) {
	gtk_button_set_focus_on_click((GtkButton *)(_self_), focus_on_click);
}
void _gtk_button_set_image(GtkButton* _self_, GtkWidget* image) {
	gtk_button_set_image((GtkButton *)(_self_), (GtkWidget *)(image));
}
void _gtk_button_set_image_position(GtkButton* _self_, GtkPositionType position) {
	gtk_button_set_image_position((GtkButton *)(_self_), position);
}
void _gtk_button_set_label(GtkButton* _self_, gchar* label) {
	gtk_button_set_label((GtkButton *)(_self_), (const gchar *)(label));
}
void _gtk_button_set_relief(GtkButton* _self_, GtkReliefStyle newstyle) {
	gtk_button_set_relief((GtkButton *)(_self_), newstyle);
}
void _gtk_button_set_use_stock(GtkButton* _self_, gboolean use_stock) {
	gtk_button_set_use_stock((GtkButton *)(_self_), use_stock);
}
void _gtk_button_set_use_underline(GtkButton* _self_, gboolean use_underline) {
	gtk_button_set_use_underline((GtkButton *)(_self_), use_underline);
}
gboolean _gtk_button_box_get_child_non_homogeneous(GtkButtonBox* _self_, GtkWidget* child) {
	return gtk_button_box_get_child_non_homogeneous((GtkButtonBox *)(_self_), (GtkWidget *)(child));
}
gboolean _gtk_button_box_get_child_secondary(GtkButtonBox* _self_, GtkWidget* child) {
	return gtk_button_box_get_child_secondary((GtkButtonBox *)(_self_), (GtkWidget *)(child));
}
GtkButtonBoxStyle _gtk_button_box_get_layout(GtkButtonBox* _self_) {
	return gtk_button_box_get_layout((GtkButtonBox *)(_self_));
}
void _gtk_button_box_set_child_non_homogeneous(GtkButtonBox* _self_, GtkWidget* child, gboolean non_homogeneous) {
	gtk_button_box_set_child_non_homogeneous((GtkButtonBox *)(_self_), (GtkWidget *)(child), non_homogeneous);
}
void _gtk_button_box_set_child_secondary(GtkButtonBox* _self_, GtkWidget* child, gboolean is_secondary) {
	gtk_button_box_set_child_secondary((GtkButtonBox *)(_self_), (GtkWidget *)(child), is_secondary);
}
void _gtk_button_box_set_layout(GtkButtonBox* _self_, GtkButtonBoxStyle layout_style) {
	gtk_button_box_set_layout((GtkButtonBox *)(_self_), layout_style);
}
void _gtk_calendar_clear_marks(GtkCalendar* _self_) {
	gtk_calendar_clear_marks((GtkCalendar *)(_self_));
}
void _gtk_calendar_get_date(GtkCalendar* _self_, guint* year, guint* month, guint* day) {
	gtk_calendar_get_date((GtkCalendar *)(_self_), (guint *)(year), (guint *)(month), (guint *)(day));
}
gboolean _gtk_calendar_get_day_is_marked(GtkCalendar* _self_, guint day) {
	return gtk_calendar_get_day_is_marked((GtkCalendar *)(_self_), day);
}
gint _gtk_calendar_get_detail_height_rows(GtkCalendar* _self_) {
	return gtk_calendar_get_detail_height_rows((GtkCalendar *)(_self_));
}
gint _gtk_calendar_get_detail_width_chars(GtkCalendar* _self_) {
	return gtk_calendar_get_detail_width_chars((GtkCalendar *)(_self_));
}
GtkCalendarDisplayOptions _gtk_calendar_get_display_options(GtkCalendar* _self_) {
	return gtk_calendar_get_display_options((GtkCalendar *)(_self_));
}
void _gtk_calendar_mark_day(GtkCalendar* _self_, guint day) {
	gtk_calendar_mark_day((GtkCalendar *)(_self_), day);
}
void _gtk_calendar_select_day(GtkCalendar* _self_, guint day) {
	gtk_calendar_select_day((GtkCalendar *)(_self_), day);
}
void _gtk_calendar_select_month(GtkCalendar* _self_, guint month, guint year) {
	gtk_calendar_select_month((GtkCalendar *)(_self_), month, year);
}
void _gtk_calendar_set_detail_func(GtkCalendar* _self_, GtkCalendarDetailFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_calendar_set_detail_func((GtkCalendar *)(_self_), func_, data, destroy);
}
void _gtk_calendar_set_detail_height_rows(GtkCalendar* _self_, gint rows) {
	gtk_calendar_set_detail_height_rows((GtkCalendar *)(_self_), rows);
}
void _gtk_calendar_set_detail_width_chars(GtkCalendar* _self_, gint chars) {
	gtk_calendar_set_detail_width_chars((GtkCalendar *)(_self_), chars);
}
void _gtk_calendar_set_display_options(GtkCalendar* _self_, GtkCalendarDisplayOptions flags) {
	gtk_calendar_set_display_options((GtkCalendar *)(_self_), flags);
}
void _gtk_calendar_unmark_day(GtkCalendar* _self_, guint day) {
	gtk_calendar_unmark_day((GtkCalendar *)(_self_), day);
}
gboolean _gtk_cell_area_activate(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cell_area, GtkCellRendererState flags, gboolean edit_only) {
	return gtk_cell_area_activate((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (const GdkRectangle *)(cell_area), flags, edit_only);
}
gboolean _gtk_cell_area_activate_cell(GtkCellArea* _self_, GtkWidget* widget, GtkCellRenderer* renderer, GdkEvent* event, GdkRectangle* cell_area, GtkCellRendererState flags) {
	return gtk_cell_area_activate_cell((GtkCellArea *)(_self_), (GtkWidget *)(widget), (GtkCellRenderer *)(renderer), (GdkEvent *)(event), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_add(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	gtk_cell_area_add((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
void _gtk_cell_area_add_focus_sibling(GtkCellArea* _self_, GtkCellRenderer* renderer, GtkCellRenderer* sibling) {
	gtk_cell_area_add_focus_sibling((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (GtkCellRenderer *)(sibling));
}
void _gtk_cell_area_apply_attributes(GtkCellArea* _self_, GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean is_expander, gboolean is_expanded) {
	gtk_cell_area_apply_attributes((GtkCellArea *)(_self_), (GtkTreeModel *)(tree_model), (GtkTreeIter *)(iter), is_expander, is_expanded);
}
void _gtk_cell_area_attribute_connect(GtkCellArea* _self_, GtkCellRenderer* renderer, gchar* attribute, gint column) {
	gtk_cell_area_attribute_connect((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (const gchar *)(attribute), column);
}
void _gtk_cell_area_attribute_disconnect(GtkCellArea* _self_, GtkCellRenderer* renderer, gchar* attribute) {
	gtk_cell_area_attribute_disconnect((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (const gchar *)(attribute));
}
void _gtk_cell_area_cell_get_property(GtkCellArea* _self_, GtkCellRenderer* renderer, gchar* property_name, GValue* value) {
	gtk_cell_area_cell_get_property((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (const gchar *)(property_name), (GValue *)(value));
}
void _gtk_cell_area_cell_set_property(GtkCellArea* _self_, GtkCellRenderer* renderer, gchar* property_name, GValue* value) {
	gtk_cell_area_cell_set_property((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (const gchar *)(property_name), (const GValue *)(value));
}
GtkCellAreaContext * _gtk_cell_area_copy_context(GtkCellArea* _self_, GtkCellAreaContext* context) {
	return gtk_cell_area_copy_context((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context));
}
GtkCellAreaContext * _gtk_cell_area_create_context(GtkCellArea* _self_) {
	return gtk_cell_area_create_context((GtkCellArea *)(_self_));
}
gint _gtk_cell_area_event(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, GdkEvent* event, GdkRectangle* cell_area, GtkCellRendererState flags) {
	return gtk_cell_area_event((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (GdkEvent *)(event), (const GdkRectangle *)(cell_area), flags);
}
gboolean _gtk_cell_area_focus(GtkCellArea* _self_, GtkDirectionType direction) {
	return gtk_cell_area_focus((GtkCellArea *)(_self_), direction);
}
void _gtk_cell_area_foreach(GtkCellArea* _self_, GtkCellCallback callback, gpointer callback_data) {
	gtk_cell_area_foreach((GtkCellArea *)(_self_), callback, callback_data);
}
void _gtk_cell_area_foreach_alloc(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cell_area, GdkRectangle* background_area, GtkCellAllocCallback callback, gpointer callback_data) {
	gtk_cell_area_foreach_alloc((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (const GdkRectangle *)(cell_area), (const GdkRectangle *)(background_area), callback, callback_data);
}
void _gtk_cell_area_get_cell_allocation(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, GtkCellRenderer* renderer, GdkRectangle* cell_area, GdkRectangle* allocation) {
	gtk_cell_area_get_cell_allocation((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (GtkCellRenderer *)(renderer), (const GdkRectangle *)(cell_area), (GdkRectangle *)(allocation));
}
GtkCellRenderer * _gtk_cell_area_get_cell_at_position(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, GdkRectangle* cell_area, gint x, gint y, GdkRectangle* alloc_area) {
	return gtk_cell_area_get_cell_at_position((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (const GdkRectangle *)(cell_area), x, y, (GdkRectangle *)(alloc_area));
}
const gchar * _gtk_cell_area_get_current_path_string(GtkCellArea* _self_) {
	return gtk_cell_area_get_current_path_string((GtkCellArea *)(_self_));
}
GtkCellEditable * _gtk_cell_area_get_edit_widget(GtkCellArea* _self_) {
	return gtk_cell_area_get_edit_widget((GtkCellArea *)(_self_));
}
GtkCellRenderer * _gtk_cell_area_get_edited_cell(GtkCellArea* _self_) {
	return gtk_cell_area_get_edited_cell((GtkCellArea *)(_self_));
}
GtkCellRenderer * _gtk_cell_area_get_focus_cell(GtkCellArea* _self_) {
	return gtk_cell_area_get_focus_cell((GtkCellArea *)(_self_));
}
GtkCellRenderer * _gtk_cell_area_get_focus_from_sibling(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	return gtk_cell_area_get_focus_from_sibling((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
const GList * _gtk_cell_area_get_focus_siblings(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	return gtk_cell_area_get_focus_siblings((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
void _gtk_cell_area_get_preferred_height(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, gint* minimum_height, gint* natural_height) {
	gtk_cell_area_get_preferred_height((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_cell_area_get_preferred_height_for_width(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, gint width, gint* minimum_height, gint* natural_height) {
	gtk_cell_area_get_preferred_height_for_width((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), width, (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_cell_area_get_preferred_width(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, gint* minimum_width, gint* natural_width) {
	gtk_cell_area_get_preferred_width((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (gint *)(minimum_width), (gint *)(natural_width));
}
void _gtk_cell_area_get_preferred_width_for_height(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, gint height, gint* minimum_width, gint* natural_width) {
	gtk_cell_area_get_preferred_width_for_height((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), height, (gint *)(minimum_width), (gint *)(natural_width));
}
GtkSizeRequestMode _gtk_cell_area_get_request_mode(GtkCellArea* _self_) {
	return gtk_cell_area_get_request_mode((GtkCellArea *)(_self_));
}
gboolean _gtk_cell_area_has_renderer(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	return gtk_cell_area_has_renderer((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
void _gtk_cell_area_inner_cell_area(GtkCellArea* _self_, GtkWidget* widget, GdkRectangle* cell_area, GdkRectangle* inner_area) {
	gtk_cell_area_inner_cell_area((GtkCellArea *)(_self_), (GtkWidget *)(widget), (const GdkRectangle *)(cell_area), (GdkRectangle *)(inner_area));
}
gboolean _gtk_cell_area_is_activatable(GtkCellArea* _self_) {
	return gtk_cell_area_is_activatable((GtkCellArea *)(_self_));
}
gboolean _gtk_cell_area_is_focus_sibling(GtkCellArea* _self_, GtkCellRenderer* renderer, GtkCellRenderer* sibling) {
	return gtk_cell_area_is_focus_sibling((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (GtkCellRenderer *)(sibling));
}
void _gtk_cell_area_remove(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	gtk_cell_area_remove((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
void _gtk_cell_area_remove_focus_sibling(GtkCellArea* _self_, GtkCellRenderer* renderer, GtkCellRenderer* sibling) {
	gtk_cell_area_remove_focus_sibling((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), (GtkCellRenderer *)(sibling));
}
void _gtk_cell_area_render(GtkCellArea* _self_, GtkCellAreaContext* context, GtkWidget* widget, cairo_t* cr, GdkRectangle* background_area, GdkRectangle* cell_area, GtkCellRendererState flags, gboolean paint_focus) {
	gtk_cell_area_render((GtkCellArea *)(_self_), (GtkCellAreaContext *)(context), (GtkWidget *)(widget), (cairo_t *)(cr), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags, paint_focus);
}
void _gtk_cell_area_request_renderer(GtkCellArea* _self_, GtkCellRenderer* renderer, GtkOrientation orientation, GtkWidget* widget, gint for_size, gint* minimum_size, gint* natural_size) {
	gtk_cell_area_request_renderer((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer), orientation, (GtkWidget *)(widget), for_size, (gint *)(minimum_size), (gint *)(natural_size));
}
void _gtk_cell_area_set_focus_cell(GtkCellArea* _self_, GtkCellRenderer* renderer) {
	gtk_cell_area_set_focus_cell((GtkCellArea *)(_self_), (GtkCellRenderer *)(renderer));
}
void _gtk_cell_area_stop_editing(GtkCellArea* _self_, gboolean canceled) {
	gtk_cell_area_stop_editing((GtkCellArea *)(_self_), canceled);
}
gint _gtk_cell_area_box_get_spacing(GtkCellAreaBox* _self_) {
	return gtk_cell_area_box_get_spacing((GtkCellAreaBox *)(_self_));
}
void _gtk_cell_area_box_pack_end(GtkCellAreaBox* _self_, GtkCellRenderer* renderer, gboolean expand, gboolean align, gboolean fixed) {
	gtk_cell_area_box_pack_end((GtkCellAreaBox *)(_self_), (GtkCellRenderer *)(renderer), expand, align, fixed);
}
void _gtk_cell_area_box_pack_start(GtkCellAreaBox* _self_, GtkCellRenderer* renderer, gboolean expand, gboolean align, gboolean fixed) {
	gtk_cell_area_box_pack_start((GtkCellAreaBox *)(_self_), (GtkCellRenderer *)(renderer), expand, align, fixed);
}
void _gtk_cell_area_box_set_spacing(GtkCellAreaBox* _self_, gint spacing) {
	gtk_cell_area_box_set_spacing((GtkCellAreaBox *)(_self_), spacing);
}
GParamSpec * _gtk_cell_area_class_find_cell_property(GtkCellAreaClass* _self_, gchar* property_name) {
	return gtk_cell_area_class_find_cell_property((GtkCellAreaClass *)(_self_), (const gchar *)(property_name));
}
void _gtk_cell_area_class_install_cell_property(GtkCellAreaClass* _self_, guint property_id, GParamSpec* pspec) {
	gtk_cell_area_class_install_cell_property((GtkCellAreaClass *)(_self_), property_id, (GParamSpec *)(pspec));
}
GParamSpec ** _gtk_cell_area_class_list_cell_properties(GtkCellAreaClass* _self_, guint* n_properties) {
	return gtk_cell_area_class_list_cell_properties((GtkCellAreaClass *)(_self_), (guint *)(n_properties));
}
void _gtk_cell_area_context_allocate(GtkCellAreaContext* _self_, gint width, gint height) {
	gtk_cell_area_context_allocate((GtkCellAreaContext *)(_self_), width, height);
}
void _gtk_cell_area_context_get_allocation(GtkCellAreaContext* _self_, gint* width, gint* height) {
	gtk_cell_area_context_get_allocation((GtkCellAreaContext *)(_self_), (gint *)(width), (gint *)(height));
}
GtkCellArea * _gtk_cell_area_context_get_area(GtkCellAreaContext* _self_) {
	return gtk_cell_area_context_get_area((GtkCellAreaContext *)(_self_));
}
void _gtk_cell_area_context_get_preferred_height(GtkCellAreaContext* _self_, gint* minimum_height, gint* natural_height) {
	gtk_cell_area_context_get_preferred_height((GtkCellAreaContext *)(_self_), (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_cell_area_context_get_preferred_height_for_width(GtkCellAreaContext* _self_, gint width, gint* minimum_height, gint* natural_height) {
	gtk_cell_area_context_get_preferred_height_for_width((GtkCellAreaContext *)(_self_), width, (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_cell_area_context_get_preferred_width(GtkCellAreaContext* _self_, gint* minimum_width, gint* natural_width) {
	gtk_cell_area_context_get_preferred_width((GtkCellAreaContext *)(_self_), (gint *)(minimum_width), (gint *)(natural_width));
}
void _gtk_cell_area_context_get_preferred_width_for_height(GtkCellAreaContext* _self_, gint height, gint* minimum_width, gint* natural_width) {
	gtk_cell_area_context_get_preferred_width_for_height((GtkCellAreaContext *)(_self_), height, (gint *)(minimum_width), (gint *)(natural_width));
}
void _gtk_cell_area_context_push_preferred_height(GtkCellAreaContext* _self_, gint minimum_height, gint natural_height) {
	gtk_cell_area_context_push_preferred_height((GtkCellAreaContext *)(_self_), minimum_height, natural_height);
}
void _gtk_cell_area_context_push_preferred_width(GtkCellAreaContext* _self_, gint minimum_width, gint natural_width) {
	gtk_cell_area_context_push_preferred_width((GtkCellAreaContext *)(_self_), minimum_width, natural_width);
}
void _gtk_cell_area_context_reset(GtkCellAreaContext* _self_) {
	gtk_cell_area_context_reset((GtkCellAreaContext *)(_self_));
}
gboolean _gtk_cell_renderer_activate(GtkCellRenderer* _self_, GdkEvent* event, GtkWidget* widget, gchar* path, GdkRectangle* background_area, GdkRectangle* cell_area, GtkCellRendererState flags) {
	return gtk_cell_renderer_activate((GtkCellRenderer *)(_self_), (GdkEvent *)(event), (GtkWidget *)(widget), (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_get_aligned_area(GtkCellRenderer* _self_, GtkWidget* widget, GtkCellRendererState flags, GdkRectangle* cell_area, GdkRectangle* aligned_area) {
	gtk_cell_renderer_get_aligned_area((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), flags, (const GdkRectangle *)(cell_area), (GdkRectangle *)(aligned_area));
}
void _gtk_cell_renderer_get_alignment(GtkCellRenderer* _self_, gfloat* xalign, gfloat* yalign) {
	gtk_cell_renderer_get_alignment((GtkCellRenderer *)(_self_), (gfloat *)(xalign), (gfloat *)(yalign));
}
void _gtk_cell_renderer_get_fixed_size(GtkCellRenderer* _self_, gint* width, gint* height) {
	gtk_cell_renderer_get_fixed_size((GtkCellRenderer *)(_self_), (gint *)(width), (gint *)(height));
}
void _gtk_cell_renderer_get_padding(GtkCellRenderer* _self_, gint* xpad, gint* ypad) {
	gtk_cell_renderer_get_padding((GtkCellRenderer *)(_self_), (gint *)(xpad), (gint *)(ypad));
}
void _gtk_cell_renderer_get_preferred_height(GtkCellRenderer* _self_, GtkWidget* widget, gint* minimum_size, gint* natural_size) {
	gtk_cell_renderer_get_preferred_height((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), (gint *)(minimum_size), (gint *)(natural_size));
}
void _gtk_cell_renderer_get_preferred_height_for_width(GtkCellRenderer* _self_, GtkWidget* widget, gint width, gint* minimum_height, gint* natural_height) {
	gtk_cell_renderer_get_preferred_height_for_width((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), width, (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_cell_renderer_get_preferred_size(GtkCellRenderer* _self_, GtkWidget* widget, GtkRequisition* minimum_size, GtkRequisition* natural_size) {
	gtk_cell_renderer_get_preferred_size((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), (GtkRequisition *)(minimum_size), (GtkRequisition *)(natural_size));
}
void _gtk_cell_renderer_get_preferred_width(GtkCellRenderer* _self_, GtkWidget* widget, gint* minimum_size, gint* natural_size) {
	gtk_cell_renderer_get_preferred_width((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), (gint *)(minimum_size), (gint *)(natural_size));
}
void _gtk_cell_renderer_get_preferred_width_for_height(GtkCellRenderer* _self_, GtkWidget* widget, gint height, gint* minimum_width, gint* natural_width) {
	gtk_cell_renderer_get_preferred_width_for_height((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), height, (gint *)(minimum_width), (gint *)(natural_width));
}
GtkSizeRequestMode _gtk_cell_renderer_get_request_mode(GtkCellRenderer* _self_) {
	return gtk_cell_renderer_get_request_mode((GtkCellRenderer *)(_self_));
}
gboolean _gtk_cell_renderer_get_sensitive(GtkCellRenderer* _self_) {
	return gtk_cell_renderer_get_sensitive((GtkCellRenderer *)(_self_));
}
GtkStateFlags _gtk_cell_renderer_get_state(GtkCellRenderer* _self_, GtkWidget* widget, GtkCellRendererState cell_state) {
	return gtk_cell_renderer_get_state((GtkCellRenderer *)(_self_), (GtkWidget *)(widget), cell_state);
}
gboolean _gtk_cell_renderer_get_visible(GtkCellRenderer* _self_) {
	return gtk_cell_renderer_get_visible((GtkCellRenderer *)(_self_));
}
gboolean _gtk_cell_renderer_is_activatable(GtkCellRenderer* _self_) {
	return gtk_cell_renderer_is_activatable((GtkCellRenderer *)(_self_));
}
void _gtk_cell_renderer_render(GtkCellRenderer* _self_, cairo_t* cr, GtkWidget* widget, GdkRectangle* background_area, GdkRectangle* cell_area, GtkCellRendererState flags) {
	gtk_cell_renderer_render((GtkCellRenderer *)(_self_), (cairo_t *)(cr), (GtkWidget *)(widget), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_set_alignment(GtkCellRenderer* _self_, gfloat xalign, gfloat yalign) {
	gtk_cell_renderer_set_alignment((GtkCellRenderer *)(_self_), xalign, yalign);
}
void _gtk_cell_renderer_set_fixed_size(GtkCellRenderer* _self_, gint width, gint height) {
	gtk_cell_renderer_set_fixed_size((GtkCellRenderer *)(_self_), width, height);
}
void _gtk_cell_renderer_set_padding(GtkCellRenderer* _self_, gint xpad, gint ypad) {
	gtk_cell_renderer_set_padding((GtkCellRenderer *)(_self_), xpad, ypad);
}
void _gtk_cell_renderer_set_sensitive(GtkCellRenderer* _self_, gboolean sensitive) {
	gtk_cell_renderer_set_sensitive((GtkCellRenderer *)(_self_), sensitive);
}
void _gtk_cell_renderer_set_visible(GtkCellRenderer* _self_, gboolean visible) {
	gtk_cell_renderer_set_visible((GtkCellRenderer *)(_self_), visible);
}
GtkCellEditable * _gtk_cell_renderer_start_editing(GtkCellRenderer* _self_, GdkEvent* event, GtkWidget* widget, gchar* path, GdkRectangle* background_area, GdkRectangle* cell_area, GtkCellRendererState flags) {
	return gtk_cell_renderer_start_editing((GtkCellRenderer *)(_self_), (GdkEvent *)(event), (GtkWidget *)(widget), (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_stop_editing(GtkCellRenderer* _self_, gboolean canceled) {
	gtk_cell_renderer_stop_editing((GtkCellRenderer *)(_self_), canceled);
}
void _gtk_cell_renderer_text_set_fixed_height_from_font(GtkCellRendererText* _self_, gint number_of_rows) {
	gtk_cell_renderer_text_set_fixed_height_from_font((GtkCellRendererText *)(_self_), number_of_rows);
}
gboolean _gtk_cell_renderer_toggle_get_activatable(GtkCellRendererToggle* _self_) {
	return gtk_cell_renderer_toggle_get_activatable((GtkCellRendererToggle *)(_self_));
}
gboolean _gtk_cell_renderer_toggle_get_active(GtkCellRendererToggle* _self_) {
	return gtk_cell_renderer_toggle_get_active((GtkCellRendererToggle *)(_self_));
}
gboolean _gtk_cell_renderer_toggle_get_radio(GtkCellRendererToggle* _self_) {
	return gtk_cell_renderer_toggle_get_radio((GtkCellRendererToggle *)(_self_));
}
void _gtk_cell_renderer_toggle_set_activatable(GtkCellRendererToggle* _self_, gboolean setting) {
	gtk_cell_renderer_toggle_set_activatable((GtkCellRendererToggle *)(_self_), setting);
}
void _gtk_cell_renderer_toggle_set_active(GtkCellRendererToggle* _self_, gboolean setting) {
	gtk_cell_renderer_toggle_set_active((GtkCellRendererToggle *)(_self_), setting);
}
void _gtk_cell_renderer_toggle_set_radio(GtkCellRendererToggle* _self_, gboolean radio) {
	gtk_cell_renderer_toggle_set_radio((GtkCellRendererToggle *)(_self_), radio);
}
GtkWidget * _gtk_cell_view_new_with_markup(gchar* markup) {
	return gtk_cell_view_new_with_markup((const gchar *)(markup));
}
GtkWidget * _gtk_cell_view_new_with_text(gchar* text) {
	return gtk_cell_view_new_with_text((const gchar *)(text));
}
GtkTreePath * _gtk_cell_view_get_displayed_row(GtkCellView* _self_) {
	return gtk_cell_view_get_displayed_row((GtkCellView *)(_self_));
}
gboolean _gtk_cell_view_get_draw_sensitive(GtkCellView* _self_) {
	return gtk_cell_view_get_draw_sensitive((GtkCellView *)(_self_));
}
gboolean _gtk_cell_view_get_fit_model(GtkCellView* _self_) {
	return gtk_cell_view_get_fit_model((GtkCellView *)(_self_));
}
GtkTreeModel * _gtk_cell_view_get_model(GtkCellView* _self_) {
	return gtk_cell_view_get_model((GtkCellView *)(_self_));
}
void _gtk_cell_view_set_background_rgba(GtkCellView* _self_, GdkRGBA* rgba) {
	gtk_cell_view_set_background_rgba((GtkCellView *)(_self_), (const GdkRGBA *)(rgba));
}
void _gtk_cell_view_set_displayed_row(GtkCellView* _self_, GtkTreePath* path) {
	gtk_cell_view_set_displayed_row((GtkCellView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_cell_view_set_draw_sensitive(GtkCellView* _self_, gboolean draw_sensitive) {
	gtk_cell_view_set_draw_sensitive((GtkCellView *)(_self_), draw_sensitive);
}
void _gtk_cell_view_set_fit_model(GtkCellView* _self_, gboolean fit_model) {
	gtk_cell_view_set_fit_model((GtkCellView *)(_self_), fit_model);
}
void _gtk_cell_view_set_model(GtkCellView* _self_, GtkTreeModel* model) {
	gtk_cell_view_set_model((GtkCellView *)(_self_), (GtkTreeModel *)(model));
}
GtkWidget * _gtk_check_button_new_with_label(gchar* label) {
	return gtk_check_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_button_new_with_mnemonic(gchar* label) {
	return gtk_check_button_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_label(gchar* label) {
	return gtk_check_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_mnemonic(gchar* label) {
	return gtk_check_menu_item_new_with_mnemonic((const gchar *)(label));
}
gboolean _gtk_check_menu_item_get_active(GtkCheckMenuItem* _self_) {
	return gtk_check_menu_item_get_active((GtkCheckMenuItem *)(_self_));
}
gboolean _gtk_check_menu_item_get_draw_as_radio(GtkCheckMenuItem* _self_) {
	return gtk_check_menu_item_get_draw_as_radio((GtkCheckMenuItem *)(_self_));
}
gboolean _gtk_check_menu_item_get_inconsistent(GtkCheckMenuItem* _self_) {
	return gtk_check_menu_item_get_inconsistent((GtkCheckMenuItem *)(_self_));
}
void _gtk_check_menu_item_set_active(GtkCheckMenuItem* _self_, gboolean is_active) {
	gtk_check_menu_item_set_active((GtkCheckMenuItem *)(_self_), is_active);
}
void _gtk_check_menu_item_set_draw_as_radio(GtkCheckMenuItem* _self_, gboolean draw_as_radio) {
	gtk_check_menu_item_set_draw_as_radio((GtkCheckMenuItem *)(_self_), draw_as_radio);
}
void _gtk_check_menu_item_set_inconsistent(GtkCheckMenuItem* _self_, gboolean setting) {
	gtk_check_menu_item_set_inconsistent((GtkCheckMenuItem *)(_self_), setting);
}
void _gtk_check_menu_item_toggled(GtkCheckMenuItem* _self_) {
	gtk_check_menu_item_toggled((GtkCheckMenuItem *)(_self_));
}
void _gtk_clipboard_clear(GtkClipboard* _self_) {
	gtk_clipboard_clear((GtkClipboard *)(_self_));
}
GdkDisplay * _gtk_clipboard_get_display(GtkClipboard* _self_) {
	return gtk_clipboard_get_display((GtkClipboard *)(_self_));
}
GObject * _gtk_clipboard_get_owner(GtkClipboard* _self_) {
	return gtk_clipboard_get_owner((GtkClipboard *)(_self_));
}
void _gtk_clipboard_request_contents(GtkClipboard* _self_, GdkAtom target, GtkClipboardReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_contents((GtkClipboard *)(_self_), target, callback, user_data);
}
void _gtk_clipboard_request_image(GtkClipboard* _self_, GtkClipboardImageReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_image((GtkClipboard *)(_self_), callback, user_data);
}
void _gtk_clipboard_request_rich_text(GtkClipboard* _self_, GtkTextBuffer* buffer, GtkClipboardRichTextReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_rich_text((GtkClipboard *)(_self_), (GtkTextBuffer *)(buffer), callback, user_data);
}
void _gtk_clipboard_request_targets(GtkClipboard* _self_, GtkClipboardTargetsReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_targets((GtkClipboard *)(_self_), callback, user_data);
}
void _gtk_clipboard_request_text(GtkClipboard* _self_, GtkClipboardTextReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_text((GtkClipboard *)(_self_), callback, user_data);
}
void _gtk_clipboard_request_uris(GtkClipboard* _self_, GtkClipboardURIReceivedFunc callback, gpointer user_data) {
	gtk_clipboard_request_uris((GtkClipboard *)(_self_), callback, user_data);
}
void _gtk_clipboard_set_can_store(GtkClipboard* _self_, GtkTargetEntry* targets, gint n_targets) {
	gtk_clipboard_set_can_store((GtkClipboard *)(_self_), (const GtkTargetEntry *)(targets), n_targets);
}
void _gtk_clipboard_set_image(GtkClipboard* _self_, GdkPixbuf* pixbuf) {
	gtk_clipboard_set_image((GtkClipboard *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_clipboard_set_text(GtkClipboard* _self_, gchar* text, gint len_) {
	gtk_clipboard_set_text((GtkClipboard *)(_self_), (const gchar *)(text), len_);
}
gboolean _gtk_clipboard_set_with_data(GtkClipboard* _self_, GtkTargetEntry* targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data) {
	return gtk_clipboard_set_with_data((GtkClipboard *)(_self_), (const GtkTargetEntry *)(targets), n_targets, get_func, clear_func, user_data);
}
gboolean _gtk_clipboard_set_with_owner(GtkClipboard* _self_, GtkTargetEntry* targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject* owner) {
	return gtk_clipboard_set_with_owner((GtkClipboard *)(_self_), (const GtkTargetEntry *)(targets), n_targets, get_func, clear_func, (GObject *)(owner));
}
void _gtk_clipboard_store(GtkClipboard* _self_) {
	gtk_clipboard_store((GtkClipboard *)(_self_));
}
GtkSelectionData * _gtk_clipboard_wait_for_contents(GtkClipboard* _self_, GdkAtom target) {
	return gtk_clipboard_wait_for_contents((GtkClipboard *)(_self_), target);
}
GdkPixbuf * _gtk_clipboard_wait_for_image(GtkClipboard* _self_) {
	return gtk_clipboard_wait_for_image((GtkClipboard *)(_self_));
}
guint8 * _gtk_clipboard_wait_for_rich_text(GtkClipboard* _self_, GtkTextBuffer* buffer, GdkAtom* format, gsize* length) {
	return gtk_clipboard_wait_for_rich_text((GtkClipboard *)(_self_), (GtkTextBuffer *)(buffer), (GdkAtom *)(format), (gsize *)(length));
}
gboolean _gtk_clipboard_wait_for_targets(GtkClipboard* _self_, void* targets, gint* n_targets) {
	return gtk_clipboard_wait_for_targets((GtkClipboard *)(_self_), (GdkAtom **)(targets), (gint *)(n_targets));
}
gchar * _gtk_clipboard_wait_for_text(GtkClipboard* _self_) {
	return gtk_clipboard_wait_for_text((GtkClipboard *)(_self_));
}
gchar ** _gtk_clipboard_wait_for_uris(GtkClipboard* _self_) {
	return gtk_clipboard_wait_for_uris((GtkClipboard *)(_self_));
}
gboolean _gtk_clipboard_wait_is_image_available(GtkClipboard* _self_) {
	return gtk_clipboard_wait_is_image_available((GtkClipboard *)(_self_));
}
gboolean _gtk_clipboard_wait_is_rich_text_available(GtkClipboard* _self_, GtkTextBuffer* buffer) {
	return gtk_clipboard_wait_is_rich_text_available((GtkClipboard *)(_self_), (GtkTextBuffer *)(buffer));
}
gboolean _gtk_clipboard_wait_is_target_available(GtkClipboard* _self_, GdkAtom target) {
	return gtk_clipboard_wait_is_target_available((GtkClipboard *)(_self_), target);
}
gboolean _gtk_clipboard_wait_is_text_available(GtkClipboard* _self_) {
	return gtk_clipboard_wait_is_text_available((GtkClipboard *)(_self_));
}
gboolean _gtk_clipboard_wait_is_uris_available(GtkClipboard* _self_) {
	return gtk_clipboard_wait_is_uris_available((GtkClipboard *)(_self_));
}
GtkWidget * _gtk_color_button_new_with_rgba(GdkRGBA* rgba) {
	return gtk_color_button_new_with_rgba((const GdkRGBA *)(rgba));
}
const gchar * _gtk_color_button_get_title(GtkColorButton* _self_) {
	return gtk_color_button_get_title((GtkColorButton *)(_self_));
}
void _gtk_color_button_set_title(GtkColorButton* _self_, gchar* title) {
	gtk_color_button_set_title((GtkColorButton *)(_self_), (const gchar *)(title));
}
GtkWidget * _gtk_color_chooser_dialog_new(gchar* title, GtkWindow* parent) {
	return gtk_color_chooser_dialog_new((const gchar *)(title), (GtkWindow *)(parent));
}
gint _gtk_combo_box_get_active(GtkComboBox* _self_) {
	return gtk_combo_box_get_active((GtkComboBox *)(_self_));
}
const gchar * _gtk_combo_box_get_active_id(GtkComboBox* _self_) {
	return gtk_combo_box_get_active_id((GtkComboBox *)(_self_));
}
gboolean _gtk_combo_box_get_active_iter(GtkComboBox* _self_, GtkTreeIter* iter) {
	return gtk_combo_box_get_active_iter((GtkComboBox *)(_self_), (GtkTreeIter *)(iter));
}
gboolean _gtk_combo_box_get_add_tearoffs(GtkComboBox* _self_) {
	return gtk_combo_box_get_add_tearoffs((GtkComboBox *)(_self_));
}
GtkSensitivityType _gtk_combo_box_get_button_sensitivity(GtkComboBox* _self_) {
	return gtk_combo_box_get_button_sensitivity((GtkComboBox *)(_self_));
}
gint _gtk_combo_box_get_column_span_column(GtkComboBox* _self_) {
	return gtk_combo_box_get_column_span_column((GtkComboBox *)(_self_));
}
gint _gtk_combo_box_get_entry_text_column(GtkComboBox* _self_) {
	return gtk_combo_box_get_entry_text_column((GtkComboBox *)(_self_));
}
gboolean _gtk_combo_box_get_focus_on_click(GtkComboBox* _self_) {
	return gtk_combo_box_get_focus_on_click((GtkComboBox *)(_self_));
}
gboolean _gtk_combo_box_get_has_entry(GtkComboBox* _self_) {
	return gtk_combo_box_get_has_entry((GtkComboBox *)(_self_));
}
gint _gtk_combo_box_get_id_column(GtkComboBox* _self_) {
	return gtk_combo_box_get_id_column((GtkComboBox *)(_self_));
}
GtkTreeModel * _gtk_combo_box_get_model(GtkComboBox* _self_) {
	return gtk_combo_box_get_model((GtkComboBox *)(_self_));
}
AtkObject * _gtk_combo_box_get_popup_accessible(GtkComboBox* _self_) {
	return gtk_combo_box_get_popup_accessible((GtkComboBox *)(_self_));
}
gboolean _gtk_combo_box_get_popup_fixed_width(GtkComboBox* _self_) {
	return gtk_combo_box_get_popup_fixed_width((GtkComboBox *)(_self_));
}
GtkTreeViewRowSeparatorFunc _gtk_combo_box_get_row_separator_func(GtkComboBox* _self_) {
	return gtk_combo_box_get_row_separator_func((GtkComboBox *)(_self_));
}
gint _gtk_combo_box_get_row_span_column(GtkComboBox* _self_) {
	return gtk_combo_box_get_row_span_column((GtkComboBox *)(_self_));
}
const gchar * _gtk_combo_box_get_title(GtkComboBox* _self_) {
	return gtk_combo_box_get_title((GtkComboBox *)(_self_));
}
gint _gtk_combo_box_get_wrap_width(GtkComboBox* _self_) {
	return gtk_combo_box_get_wrap_width((GtkComboBox *)(_self_));
}
void _gtk_combo_box_popdown(GtkComboBox* _self_) {
	gtk_combo_box_popdown((GtkComboBox *)(_self_));
}
void _gtk_combo_box_popup(GtkComboBox* _self_) {
	gtk_combo_box_popup((GtkComboBox *)(_self_));
}
void _gtk_combo_box_popup_for_device(GtkComboBox* _self_, GdkDevice* device) {
	gtk_combo_box_popup_for_device((GtkComboBox *)(_self_), (GdkDevice *)(device));
}
void _gtk_combo_box_set_active(GtkComboBox* _self_, gint index_) {
	gtk_combo_box_set_active((GtkComboBox *)(_self_), index_);
}
gboolean _gtk_combo_box_set_active_id(GtkComboBox* _self_, gchar* active_id) {
	return gtk_combo_box_set_active_id((GtkComboBox *)(_self_), (const gchar *)(active_id));
}
void _gtk_combo_box_set_active_iter(GtkComboBox* _self_, GtkTreeIter* iter) {
	gtk_combo_box_set_active_iter((GtkComboBox *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_combo_box_set_add_tearoffs(GtkComboBox* _self_, gboolean add_tearoffs) {
	gtk_combo_box_set_add_tearoffs((GtkComboBox *)(_self_), add_tearoffs);
}
void _gtk_combo_box_set_button_sensitivity(GtkComboBox* _self_, GtkSensitivityType sensitivity) {
	gtk_combo_box_set_button_sensitivity((GtkComboBox *)(_self_), sensitivity);
}
void _gtk_combo_box_set_column_span_column(GtkComboBox* _self_, gint column_span) {
	gtk_combo_box_set_column_span_column((GtkComboBox *)(_self_), column_span);
}
void _gtk_combo_box_set_entry_text_column(GtkComboBox* _self_, gint text_column) {
	gtk_combo_box_set_entry_text_column((GtkComboBox *)(_self_), text_column);
}
void _gtk_combo_box_set_focus_on_click(GtkComboBox* _self_, gboolean focus_on_click) {
	gtk_combo_box_set_focus_on_click((GtkComboBox *)(_self_), focus_on_click);
}
void _gtk_combo_box_set_id_column(GtkComboBox* _self_, gint id_column) {
	gtk_combo_box_set_id_column((GtkComboBox *)(_self_), id_column);
}
void _gtk_combo_box_set_model(GtkComboBox* _self_, GtkTreeModel* model) {
	gtk_combo_box_set_model((GtkComboBox *)(_self_), (GtkTreeModel *)(model));
}
void _gtk_combo_box_set_popup_fixed_width(GtkComboBox* _self_, gboolean fixed) {
	gtk_combo_box_set_popup_fixed_width((GtkComboBox *)(_self_), fixed);
}
void _gtk_combo_box_set_row_separator_func(GtkComboBox* _self_, GtkTreeViewRowSeparatorFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_combo_box_set_row_separator_func((GtkComboBox *)(_self_), func_, data, destroy);
}
void _gtk_combo_box_set_row_span_column(GtkComboBox* _self_, gint row_span) {
	gtk_combo_box_set_row_span_column((GtkComboBox *)(_self_), row_span);
}
void _gtk_combo_box_set_title(GtkComboBox* _self_, gchar* title) {
	gtk_combo_box_set_title((GtkComboBox *)(_self_), (const gchar *)(title));
}
void _gtk_combo_box_set_wrap_width(GtkComboBox* _self_, gint width) {
	gtk_combo_box_set_wrap_width((GtkComboBox *)(_self_), width);
}
void _gtk_combo_box_text_append(GtkComboBoxText* _self_, gchar* id, gchar* text) {
	gtk_combo_box_text_append((GtkComboBoxText *)(_self_), (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_append_text(GtkComboBoxText* _self_, gchar* text) {
	gtk_combo_box_text_append_text((GtkComboBoxText *)(_self_), (const gchar *)(text));
}
gchar * _gtk_combo_box_text_get_active_text(GtkComboBoxText* _self_) {
	return gtk_combo_box_text_get_active_text((GtkComboBoxText *)(_self_));
}
void _gtk_combo_box_text_insert(GtkComboBoxText* _self_, gint position, gchar* id, gchar* text) {
	gtk_combo_box_text_insert((GtkComboBoxText *)(_self_), position, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_insert_text(GtkComboBoxText* _self_, gint position, gchar* text) {
	gtk_combo_box_text_insert_text((GtkComboBoxText *)(_self_), position, (const gchar *)(text));
}
void _gtk_combo_box_text_prepend(GtkComboBoxText* _self_, gchar* id, gchar* text) {
	gtk_combo_box_text_prepend((GtkComboBoxText *)(_self_), (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_prepend_text(GtkComboBoxText* _self_, gchar* text) {
	gtk_combo_box_text_prepend_text((GtkComboBoxText *)(_self_), (const gchar *)(text));
}
void _gtk_combo_box_text_remove(GtkComboBoxText* _self_, gint position) {
	gtk_combo_box_text_remove((GtkComboBoxText *)(_self_), position);
}
void _gtk_combo_box_text_remove_all(GtkComboBoxText* _self_) {
	gtk_combo_box_text_remove_all((GtkComboBoxText *)(_self_));
}
void _gtk_container_add(GtkContainer* _self_, GtkWidget* widget) {
	gtk_container_add((GtkContainer *)(_self_), (GtkWidget *)(widget));
}
void _gtk_container_check_resize(GtkContainer* _self_) {
	gtk_container_check_resize((GtkContainer *)(_self_));
}
void _gtk_container_child_get_property(GtkContainer* _self_, GtkWidget* child, gchar* property_name, GValue* value) {
	gtk_container_child_get_property((GtkContainer *)(_self_), (GtkWidget *)(child), (const gchar *)(property_name), (GValue *)(value));
}
void _gtk_container_child_notify(GtkContainer* _self_, GtkWidget* child, gchar* child_property) {
	gtk_container_child_notify((GtkContainer *)(_self_), (GtkWidget *)(child), (const gchar *)(child_property));
}
void _gtk_container_child_set_property(GtkContainer* _self_, GtkWidget* child, gchar* property_name, GValue* value) {
	gtk_container_child_set_property((GtkContainer *)(_self_), (GtkWidget *)(child), (const gchar *)(property_name), (const GValue *)(value));
}
GType _gtk_container_child_type(GtkContainer* _self_) {
	return gtk_container_child_type((GtkContainer *)(_self_));
}
void _gtk_container_forall(GtkContainer* _self_, GtkCallback callback, gpointer callback_data) {
	gtk_container_forall((GtkContainer *)(_self_), callback, callback_data);
}
void _gtk_container_foreach(GtkContainer* _self_, GtkCallback callback, gpointer callback_data) {
	gtk_container_foreach((GtkContainer *)(_self_), callback, callback_data);
}
guint _gtk_container_get_border_width(GtkContainer* _self_) {
	return gtk_container_get_border_width((GtkContainer *)(_self_));
}
GList * _gtk_container_get_children(GtkContainer* _self_) {
	return gtk_container_get_children((GtkContainer *)(_self_));
}
gboolean _gtk_container_get_focus_chain(GtkContainer* _self_, void* focusable_widgets) {
	return gtk_container_get_focus_chain((GtkContainer *)(_self_), (GList **)(focusable_widgets));
}
GtkWidget * _gtk_container_get_focus_child(GtkContainer* _self_) {
	return gtk_container_get_focus_child((GtkContainer *)(_self_));
}
GtkAdjustment * _gtk_container_get_focus_hadjustment(GtkContainer* _self_) {
	return gtk_container_get_focus_hadjustment((GtkContainer *)(_self_));
}
GtkAdjustment * _gtk_container_get_focus_vadjustment(GtkContainer* _self_) {
	return gtk_container_get_focus_vadjustment((GtkContainer *)(_self_));
}
GtkWidgetPath * _gtk_container_get_path_for_child(GtkContainer* _self_, GtkWidget* child) {
	return gtk_container_get_path_for_child((GtkContainer *)(_self_), (GtkWidget *)(child));
}
GtkResizeMode _gtk_container_get_resize_mode(GtkContainer* _self_) {
	return gtk_container_get_resize_mode((GtkContainer *)(_self_));
}
void _gtk_container_propagate_draw(GtkContainer* _self_, GtkWidget* child, cairo_t* cr) {
	gtk_container_propagate_draw((GtkContainer *)(_self_), (GtkWidget *)(child), (cairo_t *)(cr));
}
void _gtk_container_remove(GtkContainer* _self_, GtkWidget* widget) {
	gtk_container_remove((GtkContainer *)(_self_), (GtkWidget *)(widget));
}
void _gtk_container_resize_children(GtkContainer* _self_) {
	gtk_container_resize_children((GtkContainer *)(_self_));
}
void _gtk_container_set_border_width(GtkContainer* _self_, guint border_width) {
	gtk_container_set_border_width((GtkContainer *)(_self_), border_width);
}
void _gtk_container_set_focus_chain(GtkContainer* _self_, GList* focusable_widgets) {
	gtk_container_set_focus_chain((GtkContainer *)(_self_), (GList *)(focusable_widgets));
}
void _gtk_container_set_focus_child(GtkContainer* _self_, GtkWidget* child) {
	gtk_container_set_focus_child((GtkContainer *)(_self_), (GtkWidget *)(child));
}
void _gtk_container_set_focus_hadjustment(GtkContainer* _self_, GtkAdjustment* adjustment) {
	gtk_container_set_focus_hadjustment((GtkContainer *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_container_set_focus_vadjustment(GtkContainer* _self_, GtkAdjustment* adjustment) {
	gtk_container_set_focus_vadjustment((GtkContainer *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_container_set_reallocate_redraws(GtkContainer* _self_, gboolean needs_redraws) {
	gtk_container_set_reallocate_redraws((GtkContainer *)(_self_), needs_redraws);
}
void _gtk_container_set_resize_mode(GtkContainer* _self_, GtkResizeMode resize_mode) {
	gtk_container_set_resize_mode((GtkContainer *)(_self_), resize_mode);
}
void _gtk_container_unset_focus_chain(GtkContainer* _self_) {
	gtk_container_unset_focus_chain((GtkContainer *)(_self_));
}
GParamSpec * _gtk_container_class_find_child_property(GtkContainerClass* _self_, gchar* property_name) {
	return gtk_container_class_find_child_property((GObjectClass *)(_self_), (const gchar *)(property_name));
}
void _gtk_container_class_handle_border_width(GtkContainerClass* _self_) {
	gtk_container_class_handle_border_width((GtkContainerClass *)(_self_));
}
void _gtk_container_class_install_child_property(GtkContainerClass* _self_, guint property_id, GParamSpec* pspec) {
	gtk_container_class_install_child_property((GtkContainerClass *)(_self_), property_id, (GParamSpec *)(pspec));
}
GParamSpec ** _gtk_container_class_list_child_properties(GtkContainerClass* _self_, guint* n_properties) {
	return gtk_container_class_list_child_properties((GObjectClass *)(_self_), (guint *)(n_properties));
}
GtkCssProvider * _gtk_css_provider_get_named(gchar* name, gchar* variant) {
	return gtk_css_provider_get_named((const gchar *)(name), (const gchar *)(variant));
}
gboolean _gtk_css_provider_load_from_data(GtkCssProvider* _self_, gchar* data, gssize length, void* _error_) {
	return gtk_css_provider_load_from_data((GtkCssProvider *)(_self_), (const gchar *)(data), length, (GError **)(_error_));
}
gboolean _gtk_css_provider_load_from_file(GtkCssProvider* _self_, GFile* file, void* _error_) {
	return gtk_css_provider_load_from_file((GtkCssProvider *)(_self_), (GFile *)(file), (GError **)(_error_));
}
gboolean _gtk_css_provider_load_from_path(GtkCssProvider* _self_, gchar* path, void* _error_) {
	return gtk_css_provider_load_from_path((GtkCssProvider *)(_self_), (const gchar *)(path), (GError **)(_error_));
}
char * _gtk_css_provider_to_string(GtkCssProvider* _self_) {
	return gtk_css_provider_to_string((GtkCssProvider *)(_self_));
}
guint _gtk_css_section_get_end_line(GtkCssSection* _self_) {
	return gtk_css_section_get_end_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_end_position(GtkCssSection* _self_) {
	return gtk_css_section_get_end_position((const GtkCssSection *)(_self_));
}
GFile * _gtk_css_section_get_file(GtkCssSection* _self_) {
	return gtk_css_section_get_file((const GtkCssSection *)(_self_));
}
GtkCssSection * _gtk_css_section_get_parent(GtkCssSection* _self_) {
	return gtk_css_section_get_parent((const GtkCssSection *)(_self_));
}
GtkCssSectionType _gtk_css_section_get_section_type(GtkCssSection* _self_) {
	return gtk_css_section_get_section_type((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_line(GtkCssSection* _self_) {
	return gtk_css_section_get_start_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_position(GtkCssSection* _self_) {
	return gtk_css_section_get_start_position((const GtkCssSection *)(_self_));
}
GtkCssSection * _gtk_css_section_ref(GtkCssSection* _self_) {
	return gtk_css_section_ref((GtkCssSection *)(_self_));
}
void _gtk_css_section_unref(GtkCssSection* _self_) {
	gtk_css_section_unref((GtkCssSection *)(_self_));
}
void _gtk_dialog_add_action_widget(GtkDialog* _self_, GtkWidget* child, gint response_id) {
	gtk_dialog_add_action_widget((GtkDialog *)(_self_), (GtkWidget *)(child), response_id);
}
GtkWidget * _gtk_dialog_add_button(GtkDialog* _self_, gchar* button_text, gint response_id) {
	return gtk_dialog_add_button((GtkDialog *)(_self_), (const gchar *)(button_text), response_id);
}
GtkWidget * _gtk_dialog_get_action_area(GtkDialog* _self_) {
	return gtk_dialog_get_action_area((GtkDialog *)(_self_));
}
GtkWidget * _gtk_dialog_get_content_area(GtkDialog* _self_) {
	return gtk_dialog_get_content_area((GtkDialog *)(_self_));
}
gint _gtk_dialog_get_response_for_widget(GtkDialog* _self_, GtkWidget* widget) {
	return gtk_dialog_get_response_for_widget((GtkDialog *)(_self_), (GtkWidget *)(widget));
}
GtkWidget * _gtk_dialog_get_widget_for_response(GtkDialog* _self_, gint response_id) {
	return gtk_dialog_get_widget_for_response((GtkDialog *)(_self_), response_id);
}
void _gtk_dialog_response(GtkDialog* _self_, gint response_id) {
	gtk_dialog_response((GtkDialog *)(_self_), response_id);
}
gint _gtk_dialog_run(GtkDialog* _self_) {
	return gtk_dialog_run((GtkDialog *)(_self_));
}
void _gtk_dialog_set_alternative_button_order_from_array(GtkDialog* _self_, gint n_params, gint* new_order) {
	gtk_dialog_set_alternative_button_order_from_array((GtkDialog *)(_self_), n_params, (gint *)(new_order));
}
void _gtk_dialog_set_default_response(GtkDialog* _self_, gint response_id) {
	gtk_dialog_set_default_response((GtkDialog *)(_self_), response_id);
}
void _gtk_dialog_set_response_sensitive(GtkDialog* _self_, gint response_id, gboolean setting) {
	gtk_dialog_set_response_sensitive((GtkDialog *)(_self_), response_id, setting);
}
gboolean _gtk_entry_get_activates_default(GtkEntry* _self_) {
	return gtk_entry_get_activates_default((GtkEntry *)(_self_));
}
gfloat _gtk_entry_get_alignment(GtkEntry* _self_) {
	return gtk_entry_get_alignment((GtkEntry *)(_self_));
}
PangoAttrList * _gtk_entry_get_attributes(GtkEntry* _self_) {
	return gtk_entry_get_attributes((GtkEntry *)(_self_));
}
GtkEntryBuffer * _gtk_entry_get_buffer(GtkEntry* _self_) {
	return gtk_entry_get_buffer((GtkEntry *)(_self_));
}
GtkEntryCompletion * _gtk_entry_get_completion(GtkEntry* _self_) {
	return gtk_entry_get_completion((GtkEntry *)(_self_));
}
gint _gtk_entry_get_current_icon_drag_source(GtkEntry* _self_) {
	return gtk_entry_get_current_icon_drag_source((GtkEntry *)(_self_));
}
GtkAdjustment * _gtk_entry_get_cursor_hadjustment(GtkEntry* _self_) {
	return gtk_entry_get_cursor_hadjustment((GtkEntry *)(_self_));
}
gboolean _gtk_entry_get_has_frame(GtkEntry* _self_) {
	return gtk_entry_get_has_frame((GtkEntry *)(_self_));
}
gboolean _gtk_entry_get_icon_activatable(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_activatable((GtkEntry *)(_self_), icon_pos);
}
void _gtk_entry_get_icon_area(GtkEntry* _self_, GtkEntryIconPosition icon_pos, GdkRectangle* icon_area) {
	gtk_entry_get_icon_area((GtkEntry *)(_self_), icon_pos, (GdkRectangle *)(icon_area));
}
gint _gtk_entry_get_icon_at_pos(GtkEntry* _self_, gint x, gint y) {
	return gtk_entry_get_icon_at_pos((GtkEntry *)(_self_), x, y);
}
GIcon * _gtk_entry_get_icon_gicon(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_gicon((GtkEntry *)(_self_), icon_pos);
}
const gchar * _gtk_entry_get_icon_name(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_name((GtkEntry *)(_self_), icon_pos);
}
GdkPixbuf * _gtk_entry_get_icon_pixbuf(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_pixbuf((GtkEntry *)(_self_), icon_pos);
}
gboolean _gtk_entry_get_icon_sensitive(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_sensitive((GtkEntry *)(_self_), icon_pos);
}
const gchar * _gtk_entry_get_icon_stock(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_stock((GtkEntry *)(_self_), icon_pos);
}
GtkImageType _gtk_entry_get_icon_storage_type(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_storage_type((GtkEntry *)(_self_), icon_pos);
}
gchar * _gtk_entry_get_icon_tooltip_markup(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_tooltip_markup((GtkEntry *)(_self_), icon_pos);
}
gchar * _gtk_entry_get_icon_tooltip_text(GtkEntry* _self_, GtkEntryIconPosition icon_pos) {
	return gtk_entry_get_icon_tooltip_text((GtkEntry *)(_self_), icon_pos);
}
GtkInputHints _gtk_entry_get_input_hints(GtkEntry* _self_) {
	return gtk_entry_get_input_hints((GtkEntry *)(_self_));
}
GtkInputPurpose _gtk_entry_get_input_purpose(GtkEntry* _self_) {
	return gtk_entry_get_input_purpose((GtkEntry *)(_self_));
}
gunichar _gtk_entry_get_invisible_char(GtkEntry* _self_) {
	return gtk_entry_get_invisible_char((GtkEntry *)(_self_));
}
PangoLayout * _gtk_entry_get_layout(GtkEntry* _self_) {
	return gtk_entry_get_layout((GtkEntry *)(_self_));
}
void _gtk_entry_get_layout_offsets(GtkEntry* _self_, gint* x, gint* y) {
	gtk_entry_get_layout_offsets((GtkEntry *)(_self_), (gint *)(x), (gint *)(y));
}
gint _gtk_entry_get_max_length(GtkEntry* _self_) {
	return gtk_entry_get_max_length((GtkEntry *)(_self_));
}
gboolean _gtk_entry_get_overwrite_mode(GtkEntry* _self_) {
	return gtk_entry_get_overwrite_mode((GtkEntry *)(_self_));
}
const gchar * _gtk_entry_get_placeholder_text(GtkEntry* _self_) {
	return gtk_entry_get_placeholder_text((GtkEntry *)(_self_));
}
gdouble _gtk_entry_get_progress_fraction(GtkEntry* _self_) {
	return gtk_entry_get_progress_fraction((GtkEntry *)(_self_));
}
gdouble _gtk_entry_get_progress_pulse_step(GtkEntry* _self_) {
	return gtk_entry_get_progress_pulse_step((GtkEntry *)(_self_));
}
const gchar * _gtk_entry_get_text(GtkEntry* _self_) {
	return gtk_entry_get_text((GtkEntry *)(_self_));
}
void _gtk_entry_get_text_area(GtkEntry* _self_, GdkRectangle* text_area) {
	gtk_entry_get_text_area((GtkEntry *)(_self_), (GdkRectangle *)(text_area));
}
guint16 _gtk_entry_get_text_length(GtkEntry* _self_) {
	return gtk_entry_get_text_length((GtkEntry *)(_self_));
}
gboolean _gtk_entry_get_visibility(GtkEntry* _self_) {
	return gtk_entry_get_visibility((GtkEntry *)(_self_));
}
gint _gtk_entry_get_width_chars(GtkEntry* _self_) {
	return gtk_entry_get_width_chars((GtkEntry *)(_self_));
}
gboolean _gtk_entry_im_context_filter_keypress(GtkEntry* _self_, GdkEventKey* event) {
	return gtk_entry_im_context_filter_keypress((GtkEntry *)(_self_), (GdkEventKey *)(event));
}
gint _gtk_entry_layout_index_to_text_index(GtkEntry* _self_, gint layout_index) {
	return gtk_entry_layout_index_to_text_index((GtkEntry *)(_self_), layout_index);
}
void _gtk_entry_progress_pulse(GtkEntry* _self_) {
	gtk_entry_progress_pulse((GtkEntry *)(_self_));
}
void _gtk_entry_reset_im_context(GtkEntry* _self_) {
	gtk_entry_reset_im_context((GtkEntry *)(_self_));
}
void _gtk_entry_set_activates_default(GtkEntry* _self_, gboolean setting) {
	gtk_entry_set_activates_default((GtkEntry *)(_self_), setting);
}
void _gtk_entry_set_alignment(GtkEntry* _self_, gfloat xalign) {
	gtk_entry_set_alignment((GtkEntry *)(_self_), xalign);
}
void _gtk_entry_set_attributes(GtkEntry* _self_, PangoAttrList* attrs) {
	gtk_entry_set_attributes((GtkEntry *)(_self_), (PangoAttrList *)(attrs));
}
void _gtk_entry_set_buffer(GtkEntry* _self_, GtkEntryBuffer* buffer) {
	gtk_entry_set_buffer((GtkEntry *)(_self_), (GtkEntryBuffer *)(buffer));
}
void _gtk_entry_set_completion(GtkEntry* _self_, GtkEntryCompletion* completion) {
	gtk_entry_set_completion((GtkEntry *)(_self_), (GtkEntryCompletion *)(completion));
}
void _gtk_entry_set_cursor_hadjustment(GtkEntry* _self_, GtkAdjustment* adjustment) {
	gtk_entry_set_cursor_hadjustment((GtkEntry *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_entry_set_has_frame(GtkEntry* _self_, gboolean setting) {
	gtk_entry_set_has_frame((GtkEntry *)(_self_), setting);
}
void _gtk_entry_set_icon_activatable(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gboolean activatable) {
	gtk_entry_set_icon_activatable((GtkEntry *)(_self_), icon_pos, activatable);
}
void _gtk_entry_set_icon_drag_source(GtkEntry* _self_, GtkEntryIconPosition icon_pos, GtkTargetList* target_list, GdkDragAction actions) {
	gtk_entry_set_icon_drag_source((GtkEntry *)(_self_), icon_pos, (GtkTargetList *)(target_list), actions);
}
void _gtk_entry_set_icon_from_gicon(GtkEntry* _self_, GtkEntryIconPosition icon_pos, GIcon* icon) {
	gtk_entry_set_icon_from_gicon((GtkEntry *)(_self_), icon_pos, (GIcon *)(icon));
}
void _gtk_entry_set_icon_from_icon_name(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gchar* icon_name) {
	gtk_entry_set_icon_from_icon_name((GtkEntry *)(_self_), icon_pos, (const gchar *)(icon_name));
}
void _gtk_entry_set_icon_from_pixbuf(GtkEntry* _self_, GtkEntryIconPosition icon_pos, GdkPixbuf* pixbuf) {
	gtk_entry_set_icon_from_pixbuf((GtkEntry *)(_self_), icon_pos, (GdkPixbuf *)(pixbuf));
}
void _gtk_entry_set_icon_from_stock(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gchar* stock_id) {
	gtk_entry_set_icon_from_stock((GtkEntry *)(_self_), icon_pos, (const gchar *)(stock_id));
}
void _gtk_entry_set_icon_sensitive(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gboolean sensitive) {
	gtk_entry_set_icon_sensitive((GtkEntry *)(_self_), icon_pos, sensitive);
}
void _gtk_entry_set_icon_tooltip_markup(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gchar* tooltip) {
	gtk_entry_set_icon_tooltip_markup((GtkEntry *)(_self_), icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_icon_tooltip_text(GtkEntry* _self_, GtkEntryIconPosition icon_pos, gchar* tooltip) {
	gtk_entry_set_icon_tooltip_text((GtkEntry *)(_self_), icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_input_hints(GtkEntry* _self_, GtkInputHints hints) {
	gtk_entry_set_input_hints((GtkEntry *)(_self_), hints);
}
void _gtk_entry_set_input_purpose(GtkEntry* _self_, GtkInputPurpose purpose) {
	gtk_entry_set_input_purpose((GtkEntry *)(_self_), purpose);
}
void _gtk_entry_set_invisible_char(GtkEntry* _self_, gunichar ch) {
	gtk_entry_set_invisible_char((GtkEntry *)(_self_), ch);
}
void _gtk_entry_set_max_length(GtkEntry* _self_, gint max) {
	gtk_entry_set_max_length((GtkEntry *)(_self_), max);
}
void _gtk_entry_set_overwrite_mode(GtkEntry* _self_, gboolean overwrite) {
	gtk_entry_set_overwrite_mode((GtkEntry *)(_self_), overwrite);
}
void _gtk_entry_set_placeholder_text(GtkEntry* _self_, gchar* text) {
	gtk_entry_set_placeholder_text((GtkEntry *)(_self_), (const gchar *)(text));
}
void _gtk_entry_set_progress_fraction(GtkEntry* _self_, gdouble fraction) {
	gtk_entry_set_progress_fraction((GtkEntry *)(_self_), fraction);
}
void _gtk_entry_set_progress_pulse_step(GtkEntry* _self_, gdouble fraction) {
	gtk_entry_set_progress_pulse_step((GtkEntry *)(_self_), fraction);
}
void _gtk_entry_set_text(GtkEntry* _self_, gchar* text) {
	gtk_entry_set_text((GtkEntry *)(_self_), (const gchar *)(text));
}
void _gtk_entry_set_visibility(GtkEntry* _self_, gboolean visible) {
	gtk_entry_set_visibility((GtkEntry *)(_self_), visible);
}
void _gtk_entry_set_width_chars(GtkEntry* _self_, gint n_chars) {
	gtk_entry_set_width_chars((GtkEntry *)(_self_), n_chars);
}
gint _gtk_entry_text_index_to_layout_index(GtkEntry* _self_, gint text_index) {
	return gtk_entry_text_index_to_layout_index((GtkEntry *)(_self_), text_index);
}
void _gtk_entry_unset_invisible_char(GtkEntry* _self_) {
	gtk_entry_unset_invisible_char((GtkEntry *)(_self_));
}
GtkEntryBuffer * _gtk_entry_buffer_new(gchar* initial_chars, gint n_initial_chars) {
	return gtk_entry_buffer_new((const gchar *)(initial_chars), n_initial_chars);
}
guint _gtk_entry_buffer_delete_text(GtkEntryBuffer* _self_, guint position, gint n_chars) {
	return gtk_entry_buffer_delete_text((GtkEntryBuffer *)(_self_), position, n_chars);
}
void _gtk_entry_buffer_emit_deleted_text(GtkEntryBuffer* _self_, guint position, guint n_chars) {
	gtk_entry_buffer_emit_deleted_text((GtkEntryBuffer *)(_self_), position, n_chars);
}
void _gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer* _self_, guint position, gchar* chars, guint n_chars) {
	gtk_entry_buffer_emit_inserted_text((GtkEntryBuffer *)(_self_), position, (const gchar *)(chars), n_chars);
}
gsize _gtk_entry_buffer_get_bytes(GtkEntryBuffer* _self_) {
	return gtk_entry_buffer_get_bytes((GtkEntryBuffer *)(_self_));
}
guint _gtk_entry_buffer_get_length(GtkEntryBuffer* _self_) {
	return gtk_entry_buffer_get_length((GtkEntryBuffer *)(_self_));
}
gint _gtk_entry_buffer_get_max_length(GtkEntryBuffer* _self_) {
	return gtk_entry_buffer_get_max_length((GtkEntryBuffer *)(_self_));
}
const gchar * _gtk_entry_buffer_get_text(GtkEntryBuffer* _self_) {
	return gtk_entry_buffer_get_text((GtkEntryBuffer *)(_self_));
}
guint _gtk_entry_buffer_insert_text(GtkEntryBuffer* _self_, guint position, gchar* chars, gint n_chars) {
	return gtk_entry_buffer_insert_text((GtkEntryBuffer *)(_self_), position, (const gchar *)(chars), n_chars);
}
void _gtk_entry_buffer_set_max_length(GtkEntryBuffer* _self_, gint max_length) {
	gtk_entry_buffer_set_max_length((GtkEntryBuffer *)(_self_), max_length);
}
void _gtk_entry_buffer_set_text(GtkEntryBuffer* _self_, gchar* chars, gint n_chars) {
	gtk_entry_buffer_set_text((GtkEntryBuffer *)(_self_), (const gchar *)(chars), n_chars);
}
void _gtk_entry_completion_complete(GtkEntryCompletion* _self_) {
	gtk_entry_completion_complete((GtkEntryCompletion *)(_self_));
}
gchar * _gtk_entry_completion_compute_prefix(GtkEntryCompletion* _self_, char* key) {
	return gtk_entry_completion_compute_prefix((GtkEntryCompletion *)(_self_), (const char *)(key));
}
void _gtk_entry_completion_delete_action(GtkEntryCompletion* _self_, gint index_) {
	gtk_entry_completion_delete_action((GtkEntryCompletion *)(_self_), index_);
}
const gchar * _gtk_entry_completion_get_completion_prefix(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_completion_prefix((GtkEntryCompletion *)(_self_));
}
GtkWidget * _gtk_entry_completion_get_entry(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_entry((GtkEntryCompletion *)(_self_));
}
gboolean _gtk_entry_completion_get_inline_completion(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_inline_completion((GtkEntryCompletion *)(_self_));
}
gboolean _gtk_entry_completion_get_inline_selection(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_inline_selection((GtkEntryCompletion *)(_self_));
}
gint _gtk_entry_completion_get_minimum_key_length(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_minimum_key_length((GtkEntryCompletion *)(_self_));
}
GtkTreeModel * _gtk_entry_completion_get_model(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_model((GtkEntryCompletion *)(_self_));
}
gboolean _gtk_entry_completion_get_popup_completion(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_popup_completion((GtkEntryCompletion *)(_self_));
}
gboolean _gtk_entry_completion_get_popup_set_width(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_popup_set_width((GtkEntryCompletion *)(_self_));
}
gboolean _gtk_entry_completion_get_popup_single_match(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_popup_single_match((GtkEntryCompletion *)(_self_));
}
gint _gtk_entry_completion_get_text_column(GtkEntryCompletion* _self_) {
	return gtk_entry_completion_get_text_column((GtkEntryCompletion *)(_self_));
}
void _gtk_entry_completion_insert_action_markup(GtkEntryCompletion* _self_, gint index_, gchar* markup) {
	gtk_entry_completion_insert_action_markup((GtkEntryCompletion *)(_self_), index_, (const gchar *)(markup));
}
void _gtk_entry_completion_insert_action_text(GtkEntryCompletion* _self_, gint index_, gchar* text) {
	gtk_entry_completion_insert_action_text((GtkEntryCompletion *)(_self_), index_, (const gchar *)(text));
}
void _gtk_entry_completion_insert_prefix(GtkEntryCompletion* _self_) {
	gtk_entry_completion_insert_prefix((GtkEntryCompletion *)(_self_));
}
void _gtk_entry_completion_set_inline_completion(GtkEntryCompletion* _self_, gboolean inline_completion) {
	gtk_entry_completion_set_inline_completion((GtkEntryCompletion *)(_self_), inline_completion);
}
void _gtk_entry_completion_set_inline_selection(GtkEntryCompletion* _self_, gboolean inline_selection) {
	gtk_entry_completion_set_inline_selection((GtkEntryCompletion *)(_self_), inline_selection);
}
void _gtk_entry_completion_set_match_func(GtkEntryCompletion* _self_, GtkEntryCompletionMatchFunc func_, gpointer func_data, GDestroyNotify func_notify) {
	gtk_entry_completion_set_match_func((GtkEntryCompletion *)(_self_), func_, func_data, func_notify);
}
void _gtk_entry_completion_set_minimum_key_length(GtkEntryCompletion* _self_, gint length) {
	gtk_entry_completion_set_minimum_key_length((GtkEntryCompletion *)(_self_), length);
}
void _gtk_entry_completion_set_model(GtkEntryCompletion* _self_, GtkTreeModel* model) {
	gtk_entry_completion_set_model((GtkEntryCompletion *)(_self_), (GtkTreeModel *)(model));
}
void _gtk_entry_completion_set_popup_completion(GtkEntryCompletion* _self_, gboolean popup_completion) {
	gtk_entry_completion_set_popup_completion((GtkEntryCompletion *)(_self_), popup_completion);
}
void _gtk_entry_completion_set_popup_set_width(GtkEntryCompletion* _self_, gboolean popup_set_width) {
	gtk_entry_completion_set_popup_set_width((GtkEntryCompletion *)(_self_), popup_set_width);
}
void _gtk_entry_completion_set_popup_single_match(GtkEntryCompletion* _self_, gboolean popup_single_match) {
	gtk_entry_completion_set_popup_single_match((GtkEntryCompletion *)(_self_), popup_single_match);
}
void _gtk_entry_completion_set_text_column(GtkEntryCompletion* _self_, gint column) {
	gtk_entry_completion_set_text_column((GtkEntryCompletion *)(_self_), column);
}
gboolean _gtk_event_box_get_above_child(GtkEventBox* _self_) {
	return gtk_event_box_get_above_child((GtkEventBox *)(_self_));
}
gboolean _gtk_event_box_get_visible_window(GtkEventBox* _self_) {
	return gtk_event_box_get_visible_window((GtkEventBox *)(_self_));
}
void _gtk_event_box_set_above_child(GtkEventBox* _self_, gboolean above_child) {
	gtk_event_box_set_above_child((GtkEventBox *)(_self_), above_child);
}
void _gtk_event_box_set_visible_window(GtkEventBox* _self_, gboolean visible_window) {
	gtk_event_box_set_visible_window((GtkEventBox *)(_self_), visible_window);
}
GtkWidget * _gtk_expander_new(gchar* label) {
	return gtk_expander_new((const gchar *)(label));
}
GtkWidget * _gtk_expander_new_with_mnemonic(gchar* label) {
	return gtk_expander_new_with_mnemonic((const gchar *)(label));
}
gboolean _gtk_expander_get_expanded(GtkExpander* _self_) {
	return gtk_expander_get_expanded((GtkExpander *)(_self_));
}
const gchar * _gtk_expander_get_label(GtkExpander* _self_) {
	return gtk_expander_get_label((GtkExpander *)(_self_));
}
gboolean _gtk_expander_get_label_fill(GtkExpander* _self_) {
	return gtk_expander_get_label_fill((GtkExpander *)(_self_));
}
GtkWidget * _gtk_expander_get_label_widget(GtkExpander* _self_) {
	return gtk_expander_get_label_widget((GtkExpander *)(_self_));
}
gboolean _gtk_expander_get_resize_toplevel(GtkExpander* _self_) {
	return gtk_expander_get_resize_toplevel((GtkExpander *)(_self_));
}
gint _gtk_expander_get_spacing(GtkExpander* _self_) {
	return gtk_expander_get_spacing((GtkExpander *)(_self_));
}
gboolean _gtk_expander_get_use_markup(GtkExpander* _self_) {
	return gtk_expander_get_use_markup((GtkExpander *)(_self_));
}
gboolean _gtk_expander_get_use_underline(GtkExpander* _self_) {
	return gtk_expander_get_use_underline((GtkExpander *)(_self_));
}
void _gtk_expander_set_expanded(GtkExpander* _self_, gboolean expanded) {
	gtk_expander_set_expanded((GtkExpander *)(_self_), expanded);
}
void _gtk_expander_set_label(GtkExpander* _self_, gchar* label) {
	gtk_expander_set_label((GtkExpander *)(_self_), (const gchar *)(label));
}
void _gtk_expander_set_label_fill(GtkExpander* _self_, gboolean label_fill) {
	gtk_expander_set_label_fill((GtkExpander *)(_self_), label_fill);
}
void _gtk_expander_set_label_widget(GtkExpander* _self_, GtkWidget* label_widget) {
	gtk_expander_set_label_widget((GtkExpander *)(_self_), (GtkWidget *)(label_widget));
}
void _gtk_expander_set_resize_toplevel(GtkExpander* _self_, gboolean resize_toplevel) {
	gtk_expander_set_resize_toplevel((GtkExpander *)(_self_), resize_toplevel);
}
void _gtk_expander_set_spacing(GtkExpander* _self_, gint spacing) {
	gtk_expander_set_spacing((GtkExpander *)(_self_), spacing);
}
void _gtk_expander_set_use_markup(GtkExpander* _self_, gboolean use_markup) {
	gtk_expander_set_use_markup((GtkExpander *)(_self_), use_markup);
}
void _gtk_expander_set_use_underline(GtkExpander* _self_, gboolean use_underline) {
	gtk_expander_set_use_underline((GtkExpander *)(_self_), use_underline);
}
GtkWidget * _gtk_file_chooser_button_new(gchar* title, GtkFileChooserAction action) {
	return gtk_file_chooser_button_new((const gchar *)(title), action);
}
gboolean _gtk_file_chooser_button_get_focus_on_click(GtkFileChooserButton* _self_) {
	return gtk_file_chooser_button_get_focus_on_click((GtkFileChooserButton *)(_self_));
}
const gchar * _gtk_file_chooser_button_get_title(GtkFileChooserButton* _self_) {
	return gtk_file_chooser_button_get_title((GtkFileChooserButton *)(_self_));
}
gint _gtk_file_chooser_button_get_width_chars(GtkFileChooserButton* _self_) {
	return gtk_file_chooser_button_get_width_chars((GtkFileChooserButton *)(_self_));
}
void _gtk_file_chooser_button_set_focus_on_click(GtkFileChooserButton* _self_, gboolean focus_on_click) {
	gtk_file_chooser_button_set_focus_on_click((GtkFileChooserButton *)(_self_), focus_on_click);
}
void _gtk_file_chooser_button_set_title(GtkFileChooserButton* _self_, gchar* title) {
	gtk_file_chooser_button_set_title((GtkFileChooserButton *)(_self_), (const gchar *)(title));
}
void _gtk_file_chooser_button_set_width_chars(GtkFileChooserButton* _self_, gint n_chars) {
	gtk_file_chooser_button_set_width_chars((GtkFileChooserButton *)(_self_), n_chars);
}
void _gtk_file_filter_add_custom(GtkFileFilter* _self_, GtkFileFilterFlags needed, GtkFileFilterFunc func_, gpointer data, GDestroyNotify notify) {
	gtk_file_filter_add_custom((GtkFileFilter *)(_self_), needed, func_, data, notify);
}
void _gtk_file_filter_add_mime_type(GtkFileFilter* _self_, gchar* mime_type) {
	gtk_file_filter_add_mime_type((GtkFileFilter *)(_self_), (const gchar *)(mime_type));
}
void _gtk_file_filter_add_pattern(GtkFileFilter* _self_, gchar* pattern) {
	gtk_file_filter_add_pattern((GtkFileFilter *)(_self_), (const gchar *)(pattern));
}
void _gtk_file_filter_add_pixbuf_formats(GtkFileFilter* _self_) {
	gtk_file_filter_add_pixbuf_formats((GtkFileFilter *)(_self_));
}
gboolean _gtk_file_filter_filter(GtkFileFilter* _self_, GtkFileFilterInfo* filter_info) {
	return gtk_file_filter_filter((GtkFileFilter *)(_self_), (const GtkFileFilterInfo *)(filter_info));
}
const gchar * _gtk_file_filter_get_name(GtkFileFilter* _self_) {
	return gtk_file_filter_get_name((GtkFileFilter *)(_self_));
}
GtkFileFilterFlags _gtk_file_filter_get_needed(GtkFileFilter* _self_) {
	return gtk_file_filter_get_needed((GtkFileFilter *)(_self_));
}
void _gtk_file_filter_set_name(GtkFileFilter* _self_, gchar* name) {
	gtk_file_filter_set_name((GtkFileFilter *)(_self_), (const gchar *)(name));
}
void _gtk_fixed_move(GtkFixed* _self_, GtkWidget* widget, gint x, gint y) {
	gtk_fixed_move((GtkFixed *)(_self_), (GtkWidget *)(widget), x, y);
}
void _gtk_fixed_put(GtkFixed* _self_, GtkWidget* widget, gint x, gint y) {
	gtk_fixed_put((GtkFixed *)(_self_), (GtkWidget *)(widget), x, y);
}
GtkWidget * _gtk_font_button_new_with_font(gchar* fontname) {
	return gtk_font_button_new_with_font((const gchar *)(fontname));
}
const gchar * _gtk_font_button_get_font_name(GtkFontButton* _self_) {
	return gtk_font_button_get_font_name((GtkFontButton *)(_self_));
}
gboolean _gtk_font_button_get_show_size(GtkFontButton* _self_) {
	return gtk_font_button_get_show_size((GtkFontButton *)(_self_));
}
gboolean _gtk_font_button_get_show_style(GtkFontButton* _self_) {
	return gtk_font_button_get_show_style((GtkFontButton *)(_self_));
}
const gchar * _gtk_font_button_get_title(GtkFontButton* _self_) {
	return gtk_font_button_get_title((GtkFontButton *)(_self_));
}
gboolean _gtk_font_button_get_use_font(GtkFontButton* _self_) {
	return gtk_font_button_get_use_font((GtkFontButton *)(_self_));
}
gboolean _gtk_font_button_get_use_size(GtkFontButton* _self_) {
	return gtk_font_button_get_use_size((GtkFontButton *)(_self_));
}
gboolean _gtk_font_button_set_font_name(GtkFontButton* _self_, gchar* fontname) {
	return gtk_font_button_set_font_name((GtkFontButton *)(_self_), (const gchar *)(fontname));
}
void _gtk_font_button_set_show_size(GtkFontButton* _self_, gboolean show_size) {
	gtk_font_button_set_show_size((GtkFontButton *)(_self_), show_size);
}
void _gtk_font_button_set_show_style(GtkFontButton* _self_, gboolean show_style) {
	gtk_font_button_set_show_style((GtkFontButton *)(_self_), show_style);
}
void _gtk_font_button_set_title(GtkFontButton* _self_, gchar* title) {
	gtk_font_button_set_title((GtkFontButton *)(_self_), (const gchar *)(title));
}
void _gtk_font_button_set_use_font(GtkFontButton* _self_, gboolean use_font) {
	gtk_font_button_set_use_font((GtkFontButton *)(_self_), use_font);
}
void _gtk_font_button_set_use_size(GtkFontButton* _self_, gboolean use_size) {
	gtk_font_button_set_use_size((GtkFontButton *)(_self_), use_size);
}
GtkWidget * _gtk_font_chooser_dialog_new(gchar* title, GtkWindow* parent) {
	return gtk_font_chooser_dialog_new((const gchar *)(title), (GtkWindow *)(parent));
}
GtkWidget * _gtk_frame_new(gchar* label) {
	return gtk_frame_new((const gchar *)(label));
}
const gchar * _gtk_frame_get_label(GtkFrame* _self_) {
	return gtk_frame_get_label((GtkFrame *)(_self_));
}
void _gtk_frame_get_label_align(GtkFrame* _self_, gfloat* xalign, gfloat* yalign) {
	gtk_frame_get_label_align((GtkFrame *)(_self_), (gfloat *)(xalign), (gfloat *)(yalign));
}
GtkWidget * _gtk_frame_get_label_widget(GtkFrame* _self_) {
	return gtk_frame_get_label_widget((GtkFrame *)(_self_));
}
GtkShadowType _gtk_frame_get_shadow_type(GtkFrame* _self_) {
	return gtk_frame_get_shadow_type((GtkFrame *)(_self_));
}
void _gtk_frame_set_label(GtkFrame* _self_, gchar* label) {
	gtk_frame_set_label((GtkFrame *)(_self_), (const gchar *)(label));
}
void _gtk_frame_set_label_align(GtkFrame* _self_, gfloat xalign, gfloat yalign) {
	gtk_frame_set_label_align((GtkFrame *)(_self_), xalign, yalign);
}
void _gtk_frame_set_label_widget(GtkFrame* _self_, GtkWidget* label_widget) {
	gtk_frame_set_label_widget((GtkFrame *)(_self_), (GtkWidget *)(label_widget));
}
void _gtk_frame_set_shadow_type(GtkFrame* _self_, GtkShadowType type_) {
	gtk_frame_set_shadow_type((GtkFrame *)(_self_), type_);
}
void _gtk_gradient_add_color_stop(GtkGradient* _self_, gdouble offset, GtkSymbolicColor* color) {
	gtk_gradient_add_color_stop((GtkGradient *)(_self_), offset, (GtkSymbolicColor *)(color));
}
GtkGradient * _gtk_gradient_ref(GtkGradient* _self_) {
	return gtk_gradient_ref((GtkGradient *)(_self_));
}
gboolean _gtk_gradient_resolve(GtkGradient* _self_, GtkStyleProperties* props, void* resolved_gradient) {
	return gtk_gradient_resolve((GtkGradient *)(_self_), (GtkStyleProperties *)(props), (cairo_pattern_t **)(resolved_gradient));
}
cairo_pattern_t * _gtk_gradient_resolve_for_context(GtkGradient* _self_, GtkStyleContext* context) {
	return gtk_gradient_resolve_for_context((GtkGradient *)(_self_), (GtkStyleContext *)(context));
}
char * _gtk_gradient_to_string(GtkGradient* _self_) {
	return gtk_gradient_to_string((GtkGradient *)(_self_));
}
void _gtk_gradient_unref(GtkGradient* _self_) {
	gtk_gradient_unref((GtkGradient *)(_self_));
}
void _gtk_grid_attach(GtkGrid* _self_, GtkWidget* child, gint left, gint top, gint width, gint height) {
	gtk_grid_attach((GtkGrid *)(_self_), (GtkWidget *)(child), left, top, width, height);
}
void _gtk_grid_attach_next_to(GtkGrid* _self_, GtkWidget* child, GtkWidget* sibling, GtkPositionType side, gint width, gint height) {
	gtk_grid_attach_next_to((GtkGrid *)(_self_), (GtkWidget *)(child), (GtkWidget *)(sibling), side, width, height);
}
GtkWidget * _gtk_grid_get_child_at(GtkGrid* _self_, gint left, gint top) {
	return gtk_grid_get_child_at((GtkGrid *)(_self_), left, top);
}
gboolean _gtk_grid_get_column_homogeneous(GtkGrid* _self_) {
	return gtk_grid_get_column_homogeneous((GtkGrid *)(_self_));
}
guint _gtk_grid_get_column_spacing(GtkGrid* _self_) {
	return gtk_grid_get_column_spacing((GtkGrid *)(_self_));
}
gboolean _gtk_grid_get_row_homogeneous(GtkGrid* _self_) {
	return gtk_grid_get_row_homogeneous((GtkGrid *)(_self_));
}
guint _gtk_grid_get_row_spacing(GtkGrid* _self_) {
	return gtk_grid_get_row_spacing((GtkGrid *)(_self_));
}
void _gtk_grid_insert_column(GtkGrid* _self_, gint position) {
	gtk_grid_insert_column((GtkGrid *)(_self_), position);
}
void _gtk_grid_insert_next_to(GtkGrid* _self_, GtkWidget* sibling, GtkPositionType side) {
	gtk_grid_insert_next_to((GtkGrid *)(_self_), (GtkWidget *)(sibling), side);
}
void _gtk_grid_insert_row(GtkGrid* _self_, gint position) {
	gtk_grid_insert_row((GtkGrid *)(_self_), position);
}
void _gtk_grid_set_column_homogeneous(GtkGrid* _self_, gboolean homogeneous) {
	gtk_grid_set_column_homogeneous((GtkGrid *)(_self_), homogeneous);
}
void _gtk_grid_set_column_spacing(GtkGrid* _self_, guint spacing) {
	gtk_grid_set_column_spacing((GtkGrid *)(_self_), spacing);
}
void _gtk_grid_set_row_homogeneous(GtkGrid* _self_, gboolean homogeneous) {
	gtk_grid_set_row_homogeneous((GtkGrid *)(_self_), homogeneous);
}
void _gtk_grid_set_row_spacing(GtkGrid* _self_, guint spacing) {
	gtk_grid_set_row_spacing((GtkGrid *)(_self_), spacing);
}
gboolean _gtk_im_context_delete_surrounding(GtkIMContext* _self_, gint offset, gint n_chars) {
	return gtk_im_context_delete_surrounding((GtkIMContext *)(_self_), offset, n_chars);
}
gboolean _gtk_im_context_filter_keypress(GtkIMContext* _self_, GdkEventKey* event) {
	return gtk_im_context_filter_keypress((GtkIMContext *)(_self_), (GdkEventKey *)(event));
}
void _gtk_im_context_focus_in(GtkIMContext* _self_) {
	gtk_im_context_focus_in((GtkIMContext *)(_self_));
}
void _gtk_im_context_focus_out(GtkIMContext* _self_) {
	gtk_im_context_focus_out((GtkIMContext *)(_self_));
}
void _gtk_im_context_get_preedit_string(GtkIMContext* _self_, void* str, void* attrs, gint* cursor_pos) {
	gtk_im_context_get_preedit_string((GtkIMContext *)(_self_), (gchar **)(str), (PangoAttrList **)(attrs), (gint *)(cursor_pos));
}
gboolean _gtk_im_context_get_surrounding(GtkIMContext* _self_, void* text, gint* cursor_index) {
	return gtk_im_context_get_surrounding((GtkIMContext *)(_self_), (gchar **)(text), (gint *)(cursor_index));
}
void _gtk_im_context_reset(GtkIMContext* _self_) {
	gtk_im_context_reset((GtkIMContext *)(_self_));
}
void _gtk_im_context_set_client_window(GtkIMContext* _self_, GdkWindow* window) {
	gtk_im_context_set_client_window((GtkIMContext *)(_self_), (GdkWindow *)(window));
}
void _gtk_im_context_set_cursor_location(GtkIMContext* _self_, GdkRectangle* area) {
	gtk_im_context_set_cursor_location((GtkIMContext *)(_self_), (const GdkRectangle *)(area));
}
void _gtk_im_context_set_surrounding(GtkIMContext* _self_, gchar* text, gint len_, gint cursor_index) {
	gtk_im_context_set_surrounding((GtkIMContext *)(_self_), (const gchar *)(text), len_, cursor_index);
}
void _gtk_im_context_set_use_preedit(GtkIMContext* _self_, gboolean use_preedit) {
	gtk_im_context_set_use_preedit((GtkIMContext *)(_self_), use_preedit);
}
void _gtk_im_context_simple_add_table(GtkIMContextSimple* _self_, guint16* data, gint max_seq_len, gint n_seqs) {
	gtk_im_context_simple_add_table((GtkIMContextSimple *)(_self_), (guint16 *)(data), max_seq_len, n_seqs);
}
void _gtk_im_multicontext_append_menuitems(GtkIMMulticontext* _self_, GtkMenuShell* menushell) {
	gtk_im_multicontext_append_menuitems((GtkIMMulticontext *)(_self_), (GtkMenuShell *)(menushell));
}
const char * _gtk_im_multicontext_get_context_id(GtkIMMulticontext* _self_) {
	return gtk_im_multicontext_get_context_id((GtkIMMulticontext *)(_self_));
}
void _gtk_im_multicontext_set_context_id(GtkIMMulticontext* _self_, char* context_id) {
	gtk_im_multicontext_set_context_id((GtkIMMulticontext *)(_self_), (const char *)(context_id));
}
GtkIconSet * _gtk_icon_factory_lookup_default(gchar* stock_id) {
	return gtk_icon_factory_lookup_default((const gchar *)(stock_id));
}
void _gtk_icon_factory_add(GtkIconFactory* _self_, gchar* stock_id, GtkIconSet* icon_set) {
	gtk_icon_factory_add((GtkIconFactory *)(_self_), (const gchar *)(stock_id), (GtkIconSet *)(icon_set));
}
void _gtk_icon_factory_add_default(GtkIconFactory* _self_) {
	gtk_icon_factory_add_default((GtkIconFactory *)(_self_));
}
GtkIconSet * _gtk_icon_factory_lookup(GtkIconFactory* _self_, gchar* stock_id) {
	return gtk_icon_factory_lookup((GtkIconFactory *)(_self_), (const gchar *)(stock_id));
}
void _gtk_icon_factory_remove_default(GtkIconFactory* _self_) {
	gtk_icon_factory_remove_default((GtkIconFactory *)(_self_));
}
GtkIconInfo * _gtk_icon_info_copy(GtkIconInfo* _self_) {
	return gtk_icon_info_copy((GtkIconInfo *)(_self_));
}
void _gtk_icon_info_free(GtkIconInfo* _self_) {
	gtk_icon_info_free((GtkIconInfo *)(_self_));
}
gboolean _gtk_icon_info_get_attach_points(GtkIconInfo* _self_, void* points, gint* n_points) {
	return gtk_icon_info_get_attach_points((GtkIconInfo *)(_self_), (GdkPoint **)(points), (gint *)(n_points));
}
gint _gtk_icon_info_get_base_size(GtkIconInfo* _self_) {
	return gtk_icon_info_get_base_size((GtkIconInfo *)(_self_));
}
GdkPixbuf * _gtk_icon_info_get_builtin_pixbuf(GtkIconInfo* _self_) {
	return gtk_icon_info_get_builtin_pixbuf((GtkIconInfo *)(_self_));
}
const gchar * _gtk_icon_info_get_display_name(GtkIconInfo* _self_) {
	return gtk_icon_info_get_display_name((GtkIconInfo *)(_self_));
}
gboolean _gtk_icon_info_get_embedded_rect(GtkIconInfo* _self_, GdkRectangle* rectangle) {
	return gtk_icon_info_get_embedded_rect((GtkIconInfo *)(_self_), (GdkRectangle *)(rectangle));
}
const gchar * _gtk_icon_info_get_filename(GtkIconInfo* _self_) {
	return gtk_icon_info_get_filename((GtkIconInfo *)(_self_));
}
GdkPixbuf * _gtk_icon_info_load_icon(GtkIconInfo* _self_, void* _error_) {
	return gtk_icon_info_load_icon((GtkIconInfo *)(_self_), (GError **)(_error_));
}
GdkPixbuf * _gtk_icon_info_load_symbolic(GtkIconInfo* _self_, GdkRGBA* fg, GdkRGBA* success_color, GdkRGBA* warning_color, GdkRGBA* error_color, gboolean* was_symbolic, void* _error_) {
	return gtk_icon_info_load_symbolic((GtkIconInfo *)(_self_), (const GdkRGBA *)(fg), (const GdkRGBA *)(success_color), (const GdkRGBA *)(warning_color), (const GdkRGBA *)(error_color), (gboolean *)(was_symbolic), (GError **)(_error_));
}
GdkPixbuf * _gtk_icon_info_load_symbolic_for_context(GtkIconInfo* _self_, GtkStyleContext* context, gboolean* was_symbolic, void* _error_) {
	return gtk_icon_info_load_symbolic_for_context((GtkIconInfo *)(_self_), (GtkStyleContext *)(context), (gboolean *)(was_symbolic), (GError **)(_error_));
}
void _gtk_icon_info_set_raw_coordinates(GtkIconInfo* _self_, gboolean raw_coordinates) {
	gtk_icon_info_set_raw_coordinates((GtkIconInfo *)(_self_), raw_coordinates);
}
void _gtk_icon_set_add_source(GtkIconSet* _self_, GtkIconSource* source) {
	gtk_icon_set_add_source((GtkIconSet *)(_self_), (const GtkIconSource *)(source));
}
GtkIconSet * _gtk_icon_set_copy(GtkIconSet* _self_) {
	return gtk_icon_set_copy((GtkIconSet *)(_self_));
}
void _gtk_icon_set_get_sizes(GtkIconSet* _self_, void* sizes, gint* n_sizes) {
	gtk_icon_set_get_sizes((GtkIconSet *)(_self_), (GtkIconSize **)(sizes), (gint *)(n_sizes));
}
GtkIconSet * _gtk_icon_set_ref(GtkIconSet* _self_) {
	return gtk_icon_set_ref((GtkIconSet *)(_self_));
}
GdkPixbuf * _gtk_icon_set_render_icon_pixbuf(GtkIconSet* _self_, GtkStyleContext* context, GtkIconSize size) {
	return gtk_icon_set_render_icon_pixbuf((GtkIconSet *)(_self_), (GtkStyleContext *)(context), size);
}
void _gtk_icon_set_unref(GtkIconSet* _self_) {
	gtk_icon_set_unref((GtkIconSet *)(_self_));
}
GtkIconSource * _gtk_icon_source_copy(GtkIconSource* _self_) {
	return gtk_icon_source_copy((const GtkIconSource *)(_self_));
}
void _gtk_icon_source_free(GtkIconSource* _self_) {
	gtk_icon_source_free((GtkIconSource *)(_self_));
}
GtkTextDirection _gtk_icon_source_get_direction(GtkIconSource* _self_) {
	return gtk_icon_source_get_direction((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_direction_wildcarded(GtkIconSource* _self_) {
	return gtk_icon_source_get_direction_wildcarded((const GtkIconSource *)(_self_));
}
const gchar * _gtk_icon_source_get_filename(GtkIconSource* _self_) {
	return gtk_icon_source_get_filename((const GtkIconSource *)(_self_));
}
const gchar * _gtk_icon_source_get_icon_name(GtkIconSource* _self_) {
	return gtk_icon_source_get_icon_name((const GtkIconSource *)(_self_));
}
GdkPixbuf * _gtk_icon_source_get_pixbuf(GtkIconSource* _self_) {
	return gtk_icon_source_get_pixbuf((const GtkIconSource *)(_self_));
}
GtkIconSize _gtk_icon_source_get_size(GtkIconSource* _self_) {
	return gtk_icon_source_get_size((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_size_wildcarded(GtkIconSource* _self_) {
	return gtk_icon_source_get_size_wildcarded((const GtkIconSource *)(_self_));
}
GtkStateType _gtk_icon_source_get_state(GtkIconSource* _self_) {
	return gtk_icon_source_get_state((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_state_wildcarded(GtkIconSource* _self_) {
	return gtk_icon_source_get_state_wildcarded((const GtkIconSource *)(_self_));
}
void _gtk_icon_source_set_direction(GtkIconSource* _self_, GtkTextDirection direction) {
	gtk_icon_source_set_direction((GtkIconSource *)(_self_), direction);
}
void _gtk_icon_source_set_direction_wildcarded(GtkIconSource* _self_, gboolean setting) {
	gtk_icon_source_set_direction_wildcarded((GtkIconSource *)(_self_), setting);
}
void _gtk_icon_source_set_filename(GtkIconSource* _self_, gchar* filename) {
	gtk_icon_source_set_filename((GtkIconSource *)(_self_), (const gchar *)(filename));
}
void _gtk_icon_source_set_icon_name(GtkIconSource* _self_, gchar* icon_name) {
	gtk_icon_source_set_icon_name((GtkIconSource *)(_self_), (const gchar *)(icon_name));
}
void _gtk_icon_source_set_pixbuf(GtkIconSource* _self_, GdkPixbuf* pixbuf) {
	gtk_icon_source_set_pixbuf((GtkIconSource *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_icon_source_set_size(GtkIconSource* _self_, GtkIconSize size) {
	gtk_icon_source_set_size((GtkIconSource *)(_self_), size);
}
void _gtk_icon_source_set_size_wildcarded(GtkIconSource* _self_, gboolean setting) {
	gtk_icon_source_set_size_wildcarded((GtkIconSource *)(_self_), setting);
}
void _gtk_icon_source_set_state(GtkIconSource* _self_, GtkStateType state) {
	gtk_icon_source_set_state((GtkIconSource *)(_self_), state);
}
void _gtk_icon_source_set_state_wildcarded(GtkIconSource* _self_, gboolean setting) {
	gtk_icon_source_set_state_wildcarded((GtkIconSource *)(_self_), setting);
}
void _gtk_icon_theme_add_builtin_icon(gchar* icon_name, gint size, GdkPixbuf* pixbuf) {
	gtk_icon_theme_add_builtin_icon((const gchar *)(icon_name), size, (GdkPixbuf *)(pixbuf));
}
void _gtk_icon_theme_append_search_path(GtkIconTheme* _self_, gchar* path) {
	gtk_icon_theme_append_search_path((GtkIconTheme *)(_self_), (const gchar *)(path));
}
GtkIconInfo * _gtk_icon_theme_choose_icon(GtkIconTheme* _self_, gchar* icon_names, gint size, GtkIconLookupFlags flags) {
	return gtk_icon_theme_choose_icon((GtkIconTheme *)(_self_), (const gchar **)(icon_names), size, flags);
}
char * _gtk_icon_theme_get_example_icon_name(GtkIconTheme* _self_) {
	return gtk_icon_theme_get_example_icon_name((GtkIconTheme *)(_self_));
}
gint * _gtk_icon_theme_get_icon_sizes(GtkIconTheme* _self_, gchar* icon_name) {
	return gtk_icon_theme_get_icon_sizes((GtkIconTheme *)(_self_), (const gchar *)(icon_name));
}
void _gtk_icon_theme_get_search_path(GtkIconTheme* _self_, void* path, gint* n_elements) {
	gtk_icon_theme_get_search_path((GtkIconTheme *)(_self_), (gchar ***)(path), (gint *)(n_elements));
}
gboolean _gtk_icon_theme_has_icon(GtkIconTheme* _self_, gchar* icon_name) {
	return gtk_icon_theme_has_icon((GtkIconTheme *)(_self_), (const gchar *)(icon_name));
}
GList * _gtk_icon_theme_list_contexts(GtkIconTheme* _self_) {
	return gtk_icon_theme_list_contexts((GtkIconTheme *)(_self_));
}
GList * _gtk_icon_theme_list_icons(GtkIconTheme* _self_, gchar* context) {
	return gtk_icon_theme_list_icons((GtkIconTheme *)(_self_), (const gchar *)(context));
}
GdkPixbuf * _gtk_icon_theme_load_icon(GtkIconTheme* _self_, gchar* icon_name, gint size, GtkIconLookupFlags flags, void* _error_) {
	return gtk_icon_theme_load_icon((GtkIconTheme *)(_self_), (const gchar *)(icon_name), size, flags, (GError **)(_error_));
}
GtkIconInfo * _gtk_icon_theme_lookup_by_gicon(GtkIconTheme* _self_, GIcon* icon, gint size, GtkIconLookupFlags flags) {
	return gtk_icon_theme_lookup_by_gicon((GtkIconTheme *)(_self_), (GIcon *)(icon), size, flags);
}
GtkIconInfo * _gtk_icon_theme_lookup_icon(GtkIconTheme* _self_, gchar* icon_name, gint size, GtkIconLookupFlags flags) {
	return gtk_icon_theme_lookup_icon((GtkIconTheme *)(_self_), (const gchar *)(icon_name), size, flags);
}
void _gtk_icon_theme_prepend_search_path(GtkIconTheme* _self_, gchar* path) {
	gtk_icon_theme_prepend_search_path((GtkIconTheme *)(_self_), (const gchar *)(path));
}
gboolean _gtk_icon_theme_rescan_if_needed(GtkIconTheme* _self_) {
	return gtk_icon_theme_rescan_if_needed((GtkIconTheme *)(_self_));
}
void _gtk_icon_theme_set_custom_theme(GtkIconTheme* _self_, gchar* theme_name) {
	gtk_icon_theme_set_custom_theme((GtkIconTheme *)(_self_), (const gchar *)(theme_name));
}
void _gtk_icon_theme_set_screen(GtkIconTheme* _self_, GdkScreen* screen) {
	gtk_icon_theme_set_screen((GtkIconTheme *)(_self_), (GdkScreen *)(screen));
}
void _gtk_icon_theme_set_search_path(GtkIconTheme* _self_, gchar* path, gint n_elements) {
	gtk_icon_theme_set_search_path((GtkIconTheme *)(_self_), (const gchar **)(path), n_elements);
}
void _gtk_icon_view_convert_widget_to_bin_window_coords(GtkIconView* _self_, gint wx, gint wy, gint* bx, gint* by) {
	gtk_icon_view_convert_widget_to_bin_window_coords((GtkIconView *)(_self_), wx, wy, (gint *)(bx), (gint *)(by));
}
cairo_surface_t * _gtk_icon_view_create_drag_icon(GtkIconView* _self_, GtkTreePath* path) {
	return gtk_icon_view_create_drag_icon((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_icon_view_enable_model_drag_dest(GtkIconView* _self_, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_icon_view_enable_model_drag_dest((GtkIconView *)(_self_), (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_icon_view_enable_model_drag_source(GtkIconView* _self_, GdkModifierType start_button_mask, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_icon_view_enable_model_drag_source((GtkIconView *)(_self_), start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
gboolean _gtk_icon_view_get_cell_rect(GtkIconView* _self_, GtkTreePath* path, GtkCellRenderer* cell, GdkRectangle* rect) {
	return gtk_icon_view_get_cell_rect((GtkIconView *)(_self_), (GtkTreePath *)(path), (GtkCellRenderer *)(cell), (GdkRectangle *)(rect));
}
gint _gtk_icon_view_get_column_spacing(GtkIconView* _self_) {
	return gtk_icon_view_get_column_spacing((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_columns(GtkIconView* _self_) {
	return gtk_icon_view_get_columns((GtkIconView *)(_self_));
}
gboolean _gtk_icon_view_get_cursor(GtkIconView* _self_, void* path, void* cell) {
	return gtk_icon_view_get_cursor((GtkIconView *)(_self_), (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_dest_item_at_pos(GtkIconView* _self_, gint drag_x, gint drag_y, void* path, GtkIconViewDropPosition* pos) {
	return gtk_icon_view_get_dest_item_at_pos((GtkIconView *)(_self_), drag_x, drag_y, (GtkTreePath **)(path), (GtkIconViewDropPosition *)(pos));
}
void _gtk_icon_view_get_drag_dest_item(GtkIconView* _self_, void* path, GtkIconViewDropPosition* pos) {
	gtk_icon_view_get_drag_dest_item((GtkIconView *)(_self_), (GtkTreePath **)(path), (GtkIconViewDropPosition *)(pos));
}
gboolean _gtk_icon_view_get_item_at_pos(GtkIconView* _self_, gint x, gint y, void* path, void* cell) {
	return gtk_icon_view_get_item_at_pos((GtkIconView *)(_self_), x, y, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gint _gtk_icon_view_get_item_column(GtkIconView* _self_, GtkTreePath* path) {
	return gtk_icon_view_get_item_column((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
GtkOrientation _gtk_icon_view_get_item_orientation(GtkIconView* _self_) {
	return gtk_icon_view_get_item_orientation((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_item_padding(GtkIconView* _self_) {
	return gtk_icon_view_get_item_padding((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_item_row(GtkIconView* _self_, GtkTreePath* path) {
	return gtk_icon_view_get_item_row((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
gint _gtk_icon_view_get_item_width(GtkIconView* _self_) {
	return gtk_icon_view_get_item_width((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_margin(GtkIconView* _self_) {
	return gtk_icon_view_get_margin((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_markup_column(GtkIconView* _self_) {
	return gtk_icon_view_get_markup_column((GtkIconView *)(_self_));
}
GtkTreeModel * _gtk_icon_view_get_model(GtkIconView* _self_) {
	return gtk_icon_view_get_model((GtkIconView *)(_self_));
}
GtkTreePath * _gtk_icon_view_get_path_at_pos(GtkIconView* _self_, gint x, gint y) {
	return gtk_icon_view_get_path_at_pos((GtkIconView *)(_self_), x, y);
}
gint _gtk_icon_view_get_pixbuf_column(GtkIconView* _self_) {
	return gtk_icon_view_get_pixbuf_column((GtkIconView *)(_self_));
}
gboolean _gtk_icon_view_get_reorderable(GtkIconView* _self_) {
	return gtk_icon_view_get_reorderable((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_row_spacing(GtkIconView* _self_) {
	return gtk_icon_view_get_row_spacing((GtkIconView *)(_self_));
}
GList * _gtk_icon_view_get_selected_items(GtkIconView* _self_) {
	return gtk_icon_view_get_selected_items((GtkIconView *)(_self_));
}
GtkSelectionMode _gtk_icon_view_get_selection_mode(GtkIconView* _self_) {
	return gtk_icon_view_get_selection_mode((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_spacing(GtkIconView* _self_) {
	return gtk_icon_view_get_spacing((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_text_column(GtkIconView* _self_) {
	return gtk_icon_view_get_text_column((GtkIconView *)(_self_));
}
gint _gtk_icon_view_get_tooltip_column(GtkIconView* _self_) {
	return gtk_icon_view_get_tooltip_column((GtkIconView *)(_self_));
}
gboolean _gtk_icon_view_get_visible_range(GtkIconView* _self_, void* start_path, void* end_path) {
	return gtk_icon_view_get_visible_range((GtkIconView *)(_self_), (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
void _gtk_icon_view_item_activated(GtkIconView* _self_, GtkTreePath* path) {
	gtk_icon_view_item_activated((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
gboolean _gtk_icon_view_path_is_selected(GtkIconView* _self_, GtkTreePath* path) {
	return gtk_icon_view_path_is_selected((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_icon_view_scroll_to_path(GtkIconView* _self_, GtkTreePath* path, gboolean use_align, gfloat row_align, gfloat col_align) {
	gtk_icon_view_scroll_to_path((GtkIconView *)(_self_), (GtkTreePath *)(path), use_align, row_align, col_align);
}
void _gtk_icon_view_select_all(GtkIconView* _self_) {
	gtk_icon_view_select_all((GtkIconView *)(_self_));
}
void _gtk_icon_view_select_path(GtkIconView* _self_, GtkTreePath* path) {
	gtk_icon_view_select_path((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_icon_view_selected_foreach(GtkIconView* _self_, GtkIconViewForeachFunc func_, gpointer data) {
	gtk_icon_view_selected_foreach((GtkIconView *)(_self_), func_, data);
}
void _gtk_icon_view_set_column_spacing(GtkIconView* _self_, gint column_spacing) {
	gtk_icon_view_set_column_spacing((GtkIconView *)(_self_), column_spacing);
}
void _gtk_icon_view_set_columns(GtkIconView* _self_, gint columns) {
	gtk_icon_view_set_columns((GtkIconView *)(_self_), columns);
}
void _gtk_icon_view_set_cursor(GtkIconView* _self_, GtkTreePath* path, GtkCellRenderer* cell, gboolean start_editing) {
	gtk_icon_view_set_cursor((GtkIconView *)(_self_), (GtkTreePath *)(path), (GtkCellRenderer *)(cell), start_editing);
}
void _gtk_icon_view_set_drag_dest_item(GtkIconView* _self_, GtkTreePath* path, GtkIconViewDropPosition pos) {
	gtk_icon_view_set_drag_dest_item((GtkIconView *)(_self_), (GtkTreePath *)(path), pos);
}
void _gtk_icon_view_set_item_orientation(GtkIconView* _self_, GtkOrientation orientation) {
	gtk_icon_view_set_item_orientation((GtkIconView *)(_self_), orientation);
}
void _gtk_icon_view_set_item_padding(GtkIconView* _self_, gint item_padding) {
	gtk_icon_view_set_item_padding((GtkIconView *)(_self_), item_padding);
}
void _gtk_icon_view_set_item_width(GtkIconView* _self_, gint item_width) {
	gtk_icon_view_set_item_width((GtkIconView *)(_self_), item_width);
}
void _gtk_icon_view_set_margin(GtkIconView* _self_, gint margin) {
	gtk_icon_view_set_margin((GtkIconView *)(_self_), margin);
}
void _gtk_icon_view_set_markup_column(GtkIconView* _self_, gint column) {
	gtk_icon_view_set_markup_column((GtkIconView *)(_self_), column);
}
void _gtk_icon_view_set_model(GtkIconView* _self_, GtkTreeModel* model) {
	gtk_icon_view_set_model((GtkIconView *)(_self_), (GtkTreeModel *)(model));
}
void _gtk_icon_view_set_pixbuf_column(GtkIconView* _self_, gint column) {
	gtk_icon_view_set_pixbuf_column((GtkIconView *)(_self_), column);
}
void _gtk_icon_view_set_reorderable(GtkIconView* _self_, gboolean reorderable) {
	gtk_icon_view_set_reorderable((GtkIconView *)(_self_), reorderable);
}
void _gtk_icon_view_set_row_spacing(GtkIconView* _self_, gint row_spacing) {
	gtk_icon_view_set_row_spacing((GtkIconView *)(_self_), row_spacing);
}
void _gtk_icon_view_set_selection_mode(GtkIconView* _self_, GtkSelectionMode mode) {
	gtk_icon_view_set_selection_mode((GtkIconView *)(_self_), mode);
}
void _gtk_icon_view_set_spacing(GtkIconView* _self_, gint spacing) {
	gtk_icon_view_set_spacing((GtkIconView *)(_self_), spacing);
}
void _gtk_icon_view_set_text_column(GtkIconView* _self_, gint column) {
	gtk_icon_view_set_text_column((GtkIconView *)(_self_), column);
}
void _gtk_icon_view_set_tooltip_cell(GtkIconView* _self_, GtkTooltip* tooltip, GtkTreePath* path, GtkCellRenderer* cell) {
	gtk_icon_view_set_tooltip_cell((GtkIconView *)(_self_), (GtkTooltip *)(tooltip), (GtkTreePath *)(path), (GtkCellRenderer *)(cell));
}
void _gtk_icon_view_set_tooltip_column(GtkIconView* _self_, gint column) {
	gtk_icon_view_set_tooltip_column((GtkIconView *)(_self_), column);
}
void _gtk_icon_view_set_tooltip_item(GtkIconView* _self_, GtkTooltip* tooltip, GtkTreePath* path) {
	gtk_icon_view_set_tooltip_item((GtkIconView *)(_self_), (GtkTooltip *)(tooltip), (GtkTreePath *)(path));
}
void _gtk_icon_view_unselect_all(GtkIconView* _self_) {
	gtk_icon_view_unselect_all((GtkIconView *)(_self_));
}
void _gtk_icon_view_unselect_path(GtkIconView* _self_, GtkTreePath* path) {
	gtk_icon_view_unselect_path((GtkIconView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_icon_view_unset_model_drag_dest(GtkIconView* _self_) {
	gtk_icon_view_unset_model_drag_dest((GtkIconView *)(_self_));
}
void _gtk_icon_view_unset_model_drag_source(GtkIconView* _self_) {
	gtk_icon_view_unset_model_drag_source((GtkIconView *)(_self_));
}
GtkWidget * _gtk_image_new_from_icon_name(gchar* icon_name, GtkIconSize size) {
	return gtk_image_new_from_icon_name((const gchar *)(icon_name), size);
}
GtkWidget * _gtk_image_new_from_resource(gchar* resource_path) {
	return gtk_image_new_from_resource((const gchar *)(resource_path));
}
GtkWidget * _gtk_image_new_from_stock(gchar* stock_id, GtkIconSize size) {
	return gtk_image_new_from_stock((const gchar *)(stock_id), size);
}
void _gtk_image_clear(GtkImage* _self_) {
	gtk_image_clear((GtkImage *)(_self_));
}
GdkPixbufAnimation * _gtk_image_get_animation(GtkImage* _self_) {
	return gtk_image_get_animation((GtkImage *)(_self_));
}
void _gtk_image_get_gicon(GtkImage* _self_, void* gicon, GtkIconSize* size) {
	gtk_image_get_gicon((GtkImage *)(_self_), (GIcon **)(gicon), (GtkIconSize *)(size));
}
void _gtk_image_get_icon_name(GtkImage* _self_, void* icon_name, GtkIconSize* size) {
	gtk_image_get_icon_name((GtkImage *)(_self_), (const gchar **)(icon_name), (GtkIconSize *)(size));
}
void _gtk_image_get_icon_set(GtkImage* _self_, void* icon_set, GtkIconSize* size) {
	gtk_image_get_icon_set((GtkImage *)(_self_), (GtkIconSet **)(icon_set), (GtkIconSize *)(size));
}
GdkPixbuf * _gtk_image_get_pixbuf(GtkImage* _self_) {
	return gtk_image_get_pixbuf((GtkImage *)(_self_));
}
gint _gtk_image_get_pixel_size(GtkImage* _self_) {
	return gtk_image_get_pixel_size((GtkImage *)(_self_));
}
void _gtk_image_get_stock(GtkImage* _self_, void* stock_id, GtkIconSize* size) {
	gtk_image_get_stock((GtkImage *)(_self_), (gchar **)(stock_id), (GtkIconSize *)(size));
}
GtkImageType _gtk_image_get_storage_type(GtkImage* _self_) {
	return gtk_image_get_storage_type((GtkImage *)(_self_));
}
void _gtk_image_set_from_animation(GtkImage* _self_, GdkPixbufAnimation* animation) {
	gtk_image_set_from_animation((GtkImage *)(_self_), (GdkPixbufAnimation *)(animation));
}
void _gtk_image_set_from_file(GtkImage* _self_, gchar* filename) {
	gtk_image_set_from_file((GtkImage *)(_self_), (const gchar *)(filename));
}
void _gtk_image_set_from_gicon(GtkImage* _self_, GIcon* icon, GtkIconSize size) {
	gtk_image_set_from_gicon((GtkImage *)(_self_), (GIcon *)(icon), size);
}
void _gtk_image_set_from_icon_name(GtkImage* _self_, gchar* icon_name, GtkIconSize size) {
	gtk_image_set_from_icon_name((GtkImage *)(_self_), (const gchar *)(icon_name), size);
}
void _gtk_image_set_from_icon_set(GtkImage* _self_, GtkIconSet* icon_set, GtkIconSize size) {
	gtk_image_set_from_icon_set((GtkImage *)(_self_), (GtkIconSet *)(icon_set), size);
}
void _gtk_image_set_from_pixbuf(GtkImage* _self_, GdkPixbuf* pixbuf) {
	gtk_image_set_from_pixbuf((GtkImage *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_image_set_from_resource(GtkImage* _self_, gchar* resource_path) {
	gtk_image_set_from_resource((GtkImage *)(_self_), (const gchar *)(resource_path));
}
void _gtk_image_set_from_stock(GtkImage* _self_, gchar* stock_id, GtkIconSize size) {
	gtk_image_set_from_stock((GtkImage *)(_self_), (const gchar *)(stock_id), size);
}
void _gtk_image_set_pixel_size(GtkImage* _self_, gint pixel_size) {
	gtk_image_set_pixel_size((GtkImage *)(_self_), pixel_size);
}
GtkWidget * _gtk_image_menu_item_new_from_stock(gchar* stock_id, GtkAccelGroup* accel_group) {
	return gtk_image_menu_item_new_from_stock((const gchar *)(stock_id), (GtkAccelGroup *)(accel_group));
}
GtkWidget * _gtk_image_menu_item_new_with_label(gchar* label) {
	return gtk_image_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_image_menu_item_new_with_mnemonic(gchar* label) {
	return gtk_image_menu_item_new_with_mnemonic((const gchar *)(label));
}
gboolean _gtk_image_menu_item_get_always_show_image(GtkImageMenuItem* _self_) {
	return gtk_image_menu_item_get_always_show_image((GtkImageMenuItem *)(_self_));
}
GtkWidget * _gtk_image_menu_item_get_image(GtkImageMenuItem* _self_) {
	return gtk_image_menu_item_get_image((GtkImageMenuItem *)(_self_));
}
gboolean _gtk_image_menu_item_get_use_stock(GtkImageMenuItem* _self_) {
	return gtk_image_menu_item_get_use_stock((GtkImageMenuItem *)(_self_));
}
void _gtk_image_menu_item_set_accel_group(GtkImageMenuItem* _self_, GtkAccelGroup* accel_group) {
	gtk_image_menu_item_set_accel_group((GtkImageMenuItem *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_image_menu_item_set_always_show_image(GtkImageMenuItem* _self_, gboolean always_show) {
	gtk_image_menu_item_set_always_show_image((GtkImageMenuItem *)(_self_), always_show);
}
void _gtk_image_menu_item_set_image(GtkImageMenuItem* _self_, GtkWidget* image) {
	gtk_image_menu_item_set_image((GtkImageMenuItem *)(_self_), (GtkWidget *)(image));
}
void _gtk_image_menu_item_set_use_stock(GtkImageMenuItem* _self_, gboolean use_stock) {
	gtk_image_menu_item_set_use_stock((GtkImageMenuItem *)(_self_), use_stock);
}
void _gtk_info_bar_add_action_widget(GtkInfoBar* _self_, GtkWidget* child, gint response_id) {
	gtk_info_bar_add_action_widget((GtkInfoBar *)(_self_), (GtkWidget *)(child), response_id);
}
GtkWidget * _gtk_info_bar_add_button(GtkInfoBar* _self_, gchar* button_text, gint response_id) {
	return gtk_info_bar_add_button((GtkInfoBar *)(_self_), (const gchar *)(button_text), response_id);
}
GtkWidget * _gtk_info_bar_get_action_area(GtkInfoBar* _self_) {
	return gtk_info_bar_get_action_area((GtkInfoBar *)(_self_));
}
GtkWidget * _gtk_info_bar_get_content_area(GtkInfoBar* _self_) {
	return gtk_info_bar_get_content_area((GtkInfoBar *)(_self_));
}
GtkMessageType _gtk_info_bar_get_message_type(GtkInfoBar* _self_) {
	return gtk_info_bar_get_message_type((GtkInfoBar *)(_self_));
}
void _gtk_info_bar_response(GtkInfoBar* _self_, gint response_id) {
	gtk_info_bar_response((GtkInfoBar *)(_self_), response_id);
}
void _gtk_info_bar_set_default_response(GtkInfoBar* _self_, gint response_id) {
	gtk_info_bar_set_default_response((GtkInfoBar *)(_self_), response_id);
}
void _gtk_info_bar_set_message_type(GtkInfoBar* _self_, GtkMessageType message_type) {
	gtk_info_bar_set_message_type((GtkInfoBar *)(_self_), message_type);
}
void _gtk_info_bar_set_response_sensitive(GtkInfoBar* _self_, gint response_id, gboolean setting) {
	gtk_info_bar_set_response_sensitive((GtkInfoBar *)(_self_), response_id, setting);
}
GdkScreen * _gtk_invisible_get_screen(GtkInvisible* _self_) {
	return gtk_invisible_get_screen((GtkInvisible *)(_self_));
}
void _gtk_invisible_set_screen(GtkInvisible* _self_, GdkScreen* screen) {
	gtk_invisible_set_screen((GtkInvisible *)(_self_), (GdkScreen *)(screen));
}
GtkWidget * _gtk_label_new(gchar* str) {
	return gtk_label_new((const gchar *)(str));
}
GtkWidget * _gtk_label_new_with_mnemonic(gchar* str) {
	return gtk_label_new_with_mnemonic((const gchar *)(str));
}
gdouble _gtk_label_get_angle(GtkLabel* _self_) {
	return gtk_label_get_angle((GtkLabel *)(_self_));
}
PangoAttrList * _gtk_label_get_attributes(GtkLabel* _self_) {
	return gtk_label_get_attributes((GtkLabel *)(_self_));
}
const gchar * _gtk_label_get_current_uri(GtkLabel* _self_) {
	return gtk_label_get_current_uri((GtkLabel *)(_self_));
}
PangoEllipsizeMode _gtk_label_get_ellipsize(GtkLabel* _self_) {
	return gtk_label_get_ellipsize((GtkLabel *)(_self_));
}
GtkJustification _gtk_label_get_justify(GtkLabel* _self_) {
	return gtk_label_get_justify((GtkLabel *)(_self_));
}
const gchar * _gtk_label_get_label(GtkLabel* _self_) {
	return gtk_label_get_label((GtkLabel *)(_self_));
}
PangoLayout * _gtk_label_get_layout(GtkLabel* _self_) {
	return gtk_label_get_layout((GtkLabel *)(_self_));
}
void _gtk_label_get_layout_offsets(GtkLabel* _self_, gint* x, gint* y) {
	gtk_label_get_layout_offsets((GtkLabel *)(_self_), (gint *)(x), (gint *)(y));
}
gboolean _gtk_label_get_line_wrap(GtkLabel* _self_) {
	return gtk_label_get_line_wrap((GtkLabel *)(_self_));
}
PangoWrapMode _gtk_label_get_line_wrap_mode(GtkLabel* _self_) {
	return gtk_label_get_line_wrap_mode((GtkLabel *)(_self_));
}
gint _gtk_label_get_max_width_chars(GtkLabel* _self_) {
	return gtk_label_get_max_width_chars((GtkLabel *)(_self_));
}
guint _gtk_label_get_mnemonic_keyval(GtkLabel* _self_) {
	return gtk_label_get_mnemonic_keyval((GtkLabel *)(_self_));
}
GtkWidget * _gtk_label_get_mnemonic_widget(GtkLabel* _self_) {
	return gtk_label_get_mnemonic_widget((GtkLabel *)(_self_));
}
gboolean _gtk_label_get_selectable(GtkLabel* _self_) {
	return gtk_label_get_selectable((GtkLabel *)(_self_));
}
gboolean _gtk_label_get_selection_bounds(GtkLabel* _self_, gint* start, gint* end) {
	return gtk_label_get_selection_bounds((GtkLabel *)(_self_), (gint *)(start), (gint *)(end));
}
gboolean _gtk_label_get_single_line_mode(GtkLabel* _self_) {
	return gtk_label_get_single_line_mode((GtkLabel *)(_self_));
}
const gchar * _gtk_label_get_text(GtkLabel* _self_) {
	return gtk_label_get_text((GtkLabel *)(_self_));
}
gboolean _gtk_label_get_track_visited_links(GtkLabel* _self_) {
	return gtk_label_get_track_visited_links((GtkLabel *)(_self_));
}
gboolean _gtk_label_get_use_markup(GtkLabel* _self_) {
	return gtk_label_get_use_markup((GtkLabel *)(_self_));
}
gboolean _gtk_label_get_use_underline(GtkLabel* _self_) {
	return gtk_label_get_use_underline((GtkLabel *)(_self_));
}
gint _gtk_label_get_width_chars(GtkLabel* _self_) {
	return gtk_label_get_width_chars((GtkLabel *)(_self_));
}
void _gtk_label_select_region(GtkLabel* _self_, gint start_offset, gint end_offset) {
	gtk_label_select_region((GtkLabel *)(_self_), start_offset, end_offset);
}
void _gtk_label_set_angle(GtkLabel* _self_, gdouble angle) {
	gtk_label_set_angle((GtkLabel *)(_self_), angle);
}
void _gtk_label_set_attributes(GtkLabel* _self_, PangoAttrList* attrs) {
	gtk_label_set_attributes((GtkLabel *)(_self_), (PangoAttrList *)(attrs));
}
void _gtk_label_set_ellipsize(GtkLabel* _self_, PangoEllipsizeMode mode) {
	gtk_label_set_ellipsize((GtkLabel *)(_self_), mode);
}
void _gtk_label_set_justify(GtkLabel* _self_, GtkJustification jtype) {
	gtk_label_set_justify((GtkLabel *)(_self_), jtype);
}
void _gtk_label_set_label(GtkLabel* _self_, gchar* str) {
	gtk_label_set_label((GtkLabel *)(_self_), (const gchar *)(str));
}
void _gtk_label_set_line_wrap(GtkLabel* _self_, gboolean wrap) {
	gtk_label_set_line_wrap((GtkLabel *)(_self_), wrap);
}
void _gtk_label_set_line_wrap_mode(GtkLabel* _self_, PangoWrapMode wrap_mode) {
	gtk_label_set_line_wrap_mode((GtkLabel *)(_self_), wrap_mode);
}
void _gtk_label_set_markup(GtkLabel* _self_, gchar* str) {
	gtk_label_set_markup((GtkLabel *)(_self_), (const gchar *)(str));
}
void _gtk_label_set_markup_with_mnemonic(GtkLabel* _self_, gchar* str) {
	gtk_label_set_markup_with_mnemonic((GtkLabel *)(_self_), (const gchar *)(str));
}
void _gtk_label_set_max_width_chars(GtkLabel* _self_, gint n_chars) {
	gtk_label_set_max_width_chars((GtkLabel *)(_self_), n_chars);
}
void _gtk_label_set_mnemonic_widget(GtkLabel* _self_, GtkWidget* widget) {
	gtk_label_set_mnemonic_widget((GtkLabel *)(_self_), (GtkWidget *)(widget));
}
void _gtk_label_set_pattern(GtkLabel* _self_, gchar* pattern) {
	gtk_label_set_pattern((GtkLabel *)(_self_), (const gchar *)(pattern));
}
void _gtk_label_set_selectable(GtkLabel* _self_, gboolean setting) {
	gtk_label_set_selectable((GtkLabel *)(_self_), setting);
}
void _gtk_label_set_single_line_mode(GtkLabel* _self_, gboolean single_line_mode) {
	gtk_label_set_single_line_mode((GtkLabel *)(_self_), single_line_mode);
}
void _gtk_label_set_text(GtkLabel* _self_, gchar* str) {
	gtk_label_set_text((GtkLabel *)(_self_), (const gchar *)(str));
}
void _gtk_label_set_text_with_mnemonic(GtkLabel* _self_, gchar* str) {
	gtk_label_set_text_with_mnemonic((GtkLabel *)(_self_), (const gchar *)(str));
}
void _gtk_label_set_track_visited_links(GtkLabel* _self_, gboolean track_links) {
	gtk_label_set_track_visited_links((GtkLabel *)(_self_), track_links);
}
void _gtk_label_set_use_markup(GtkLabel* _self_, gboolean setting) {
	gtk_label_set_use_markup((GtkLabel *)(_self_), setting);
}
void _gtk_label_set_use_underline(GtkLabel* _self_, gboolean setting) {
	gtk_label_set_use_underline((GtkLabel *)(_self_), setting);
}
void _gtk_label_set_width_chars(GtkLabel* _self_, gint n_chars) {
	gtk_label_set_width_chars((GtkLabel *)(_self_), n_chars);
}
GdkWindow * _gtk_layout_get_bin_window(GtkLayout* _self_) {
	return gtk_layout_get_bin_window((GtkLayout *)(_self_));
}
void _gtk_layout_get_size(GtkLayout* _self_, guint* width, guint* height) {
	gtk_layout_get_size((GtkLayout *)(_self_), (guint *)(width), (guint *)(height));
}
void _gtk_layout_move(GtkLayout* _self_, GtkWidget* child_widget, gint x, gint y) {
	gtk_layout_move((GtkLayout *)(_self_), (GtkWidget *)(child_widget), x, y);
}
void _gtk_layout_put(GtkLayout* _self_, GtkWidget* child_widget, gint x, gint y) {
	gtk_layout_put((GtkLayout *)(_self_), (GtkWidget *)(child_widget), x, y);
}
void _gtk_layout_set_size(GtkLayout* _self_, guint width, guint height) {
	gtk_layout_set_size((GtkLayout *)(_self_), width, height);
}
void _gtk_level_bar_add_offset_value(GtkLevelBar* _self_, gchar* name, gdouble value) {
	gtk_level_bar_add_offset_value((GtkLevelBar *)(_self_), (const gchar *)(name), value);
}
gdouble _gtk_level_bar_get_max_value(GtkLevelBar* _self_) {
	return gtk_level_bar_get_max_value((GtkLevelBar *)(_self_));
}
gdouble _gtk_level_bar_get_min_value(GtkLevelBar* _self_) {
	return gtk_level_bar_get_min_value((GtkLevelBar *)(_self_));
}
GtkLevelBarMode _gtk_level_bar_get_mode(GtkLevelBar* _self_) {
	return gtk_level_bar_get_mode((GtkLevelBar *)(_self_));
}
gboolean _gtk_level_bar_get_offset_value(GtkLevelBar* _self_, gchar* name, gdouble* value) {
	return gtk_level_bar_get_offset_value((GtkLevelBar *)(_self_), (const gchar *)(name), (gdouble *)(value));
}
gdouble _gtk_level_bar_get_value(GtkLevelBar* _self_) {
	return gtk_level_bar_get_value((GtkLevelBar *)(_self_));
}
void _gtk_level_bar_remove_offset_value(GtkLevelBar* _self_, gchar* name) {
	gtk_level_bar_remove_offset_value((GtkLevelBar *)(_self_), (const gchar *)(name));
}
void _gtk_level_bar_set_max_value(GtkLevelBar* _self_, gdouble value) {
	gtk_level_bar_set_max_value((GtkLevelBar *)(_self_), value);
}
void _gtk_level_bar_set_min_value(GtkLevelBar* _self_, gdouble value) {
	gtk_level_bar_set_min_value((GtkLevelBar *)(_self_), value);
}
void _gtk_level_bar_set_mode(GtkLevelBar* _self_, GtkLevelBarMode mode) {
	gtk_level_bar_set_mode((GtkLevelBar *)(_self_), mode);
}
void _gtk_level_bar_set_value(GtkLevelBar* _self_, gdouble value) {
	gtk_level_bar_set_value((GtkLevelBar *)(_self_), value);
}
GtkWidget * _gtk_link_button_new(gchar* uri) {
	return gtk_link_button_new((const gchar *)(uri));
}
GtkWidget * _gtk_link_button_new_with_label(gchar* uri, gchar* label) {
	return gtk_link_button_new_with_label((const gchar *)(uri), (const gchar *)(label));
}
const gchar * _gtk_link_button_get_uri(GtkLinkButton* _self_) {
	return gtk_link_button_get_uri((GtkLinkButton *)(_self_));
}
gboolean _gtk_link_button_get_visited(GtkLinkButton* _self_) {
	return gtk_link_button_get_visited((GtkLinkButton *)(_self_));
}
void _gtk_link_button_set_uri(GtkLinkButton* _self_, gchar* uri) {
	gtk_link_button_set_uri((GtkLinkButton *)(_self_), (const gchar *)(uri));
}
void _gtk_link_button_set_visited(GtkLinkButton* _self_, gboolean visited) {
	gtk_link_button_set_visited((GtkLinkButton *)(_self_), visited);
}
void _gtk_list_store_append(GtkListStore* _self_, GtkTreeIter* iter) {
	gtk_list_store_append((GtkListStore *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_list_store_clear(GtkListStore* _self_) {
	gtk_list_store_clear((GtkListStore *)(_self_));
}
void _gtk_list_store_insert(GtkListStore* _self_, GtkTreeIter* iter, gint position) {
	gtk_list_store_insert((GtkListStore *)(_self_), (GtkTreeIter *)(iter), position);
}
void _gtk_list_store_insert_after(GtkListStore* _self_, GtkTreeIter* iter, GtkTreeIter* sibling) {
	gtk_list_store_insert_after((GtkListStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(sibling));
}
void _gtk_list_store_insert_before(GtkListStore* _self_, GtkTreeIter* iter, GtkTreeIter* sibling) {
	gtk_list_store_insert_before((GtkListStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(sibling));
}
void _gtk_list_store_insert_with_valuesv(GtkListStore* _self_, GtkTreeIter* iter, gint position, gint* columns, GValue* values, gint n_values) {
	gtk_list_store_insert_with_valuesv((GtkListStore *)(_self_), (GtkTreeIter *)(iter), position, (gint *)(columns), (GValue *)(values), n_values);
}
gboolean _gtk_list_store_iter_is_valid(GtkListStore* _self_, GtkTreeIter* iter) {
	return gtk_list_store_iter_is_valid((GtkListStore *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_list_store_move_after(GtkListStore* _self_, GtkTreeIter* iter, GtkTreeIter* position) {
	gtk_list_store_move_after((GtkListStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(position));
}
void _gtk_list_store_move_before(GtkListStore* _self_, GtkTreeIter* iter, GtkTreeIter* position) {
	gtk_list_store_move_before((GtkListStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(position));
}
void _gtk_list_store_prepend(GtkListStore* _self_, GtkTreeIter* iter) {
	gtk_list_store_prepend((GtkListStore *)(_self_), (GtkTreeIter *)(iter));
}
gboolean _gtk_list_store_remove(GtkListStore* _self_, GtkTreeIter* iter) {
	return gtk_list_store_remove((GtkListStore *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_list_store_reorder(GtkListStore* _self_, gint* new_order) {
	gtk_list_store_reorder((GtkListStore *)(_self_), (gint *)(new_order));
}
void _gtk_list_store_set_column_types(GtkListStore* _self_, gint n_columns, GType* types) {
	gtk_list_store_set_column_types((GtkListStore *)(_self_), n_columns, (GType *)(types));
}
void _gtk_list_store_set_value(GtkListStore* _self_, GtkTreeIter* iter, gint column, GValue* value) {
	gtk_list_store_set_value((GtkListStore *)(_self_), (GtkTreeIter *)(iter), column, (GValue *)(value));
}
void _gtk_list_store_set_valuesv(GtkListStore* _self_, GtkTreeIter* iter, gint* columns, GValue* values, gint n_values) {
	gtk_list_store_set_valuesv((GtkListStore *)(_self_), (GtkTreeIter *)(iter), (gint *)(columns), (GValue *)(values), n_values);
}
void _gtk_list_store_swap(GtkListStore* _self_, GtkTreeIter* a, GtkTreeIter* b) {
	gtk_list_store_swap((GtkListStore *)(_self_), (GtkTreeIter *)(a), (GtkTreeIter *)(b));
}
GPermission * _gtk_lock_button_get_permission(GtkLockButton* _self_) {
	return gtk_lock_button_get_permission((GtkLockButton *)(_self_));
}
void _gtk_lock_button_set_permission(GtkLockButton* _self_, GPermission* permission) {
	gtk_lock_button_set_permission((GtkLockButton *)(_self_), (GPermission *)(permission));
}
void _gtk_menu_attach(GtkMenu* _self_, GtkWidget* child, guint left_attach, guint right_attach, guint top_attach, guint bottom_attach) {
	gtk_menu_attach((GtkMenu *)(_self_), (GtkWidget *)(child), left_attach, right_attach, top_attach, bottom_attach);
}
void _gtk_menu_attach_to_widget(GtkMenu* _self_, GtkWidget* attach_widget, GtkMenuDetachFunc detacher) {
	gtk_menu_attach_to_widget((GtkMenu *)(_self_), (GtkWidget *)(attach_widget), detacher);
}
void _gtk_menu_detach(GtkMenu* _self_) {
	gtk_menu_detach((GtkMenu *)(_self_));
}
GtkAccelGroup * _gtk_menu_get_accel_group(GtkMenu* _self_) {
	return gtk_menu_get_accel_group((GtkMenu *)(_self_));
}
const gchar * _gtk_menu_get_accel_path(GtkMenu* _self_) {
	return gtk_menu_get_accel_path((GtkMenu *)(_self_));
}
GtkWidget * _gtk_menu_get_active(GtkMenu* _self_) {
	return gtk_menu_get_active((GtkMenu *)(_self_));
}
GtkWidget * _gtk_menu_get_attach_widget(GtkMenu* _self_) {
	return gtk_menu_get_attach_widget((GtkMenu *)(_self_));
}
gint _gtk_menu_get_monitor(GtkMenu* _self_) {
	return gtk_menu_get_monitor((GtkMenu *)(_self_));
}
gboolean _gtk_menu_get_reserve_toggle_size(GtkMenu* _self_) {
	return gtk_menu_get_reserve_toggle_size((GtkMenu *)(_self_));
}
gboolean _gtk_menu_get_tearoff_state(GtkMenu* _self_) {
	return gtk_menu_get_tearoff_state((GtkMenu *)(_self_));
}
const gchar * _gtk_menu_get_title(GtkMenu* _self_) {
	return gtk_menu_get_title((GtkMenu *)(_self_));
}
void _gtk_menu_popdown(GtkMenu* _self_) {
	gtk_menu_popdown((GtkMenu *)(_self_));
}
void _gtk_menu_popup(GtkMenu* _self_, GtkWidget* parent_menu_shell, GtkWidget* parent_menu_item, GtkMenuPositionFunc func_, gpointer data, guint button, guint32 activate_time) {
	gtk_menu_popup((GtkMenu *)(_self_), (GtkWidget *)(parent_menu_shell), (GtkWidget *)(parent_menu_item), func_, data, button, activate_time);
}
void _gtk_menu_popup_for_device(GtkMenu* _self_, GdkDevice* device, GtkWidget* parent_menu_shell, GtkWidget* parent_menu_item, GtkMenuPositionFunc func_, gpointer data, GDestroyNotify destroy, guint button, guint32 activate_time) {
	gtk_menu_popup_for_device((GtkMenu *)(_self_), (GdkDevice *)(device), (GtkWidget *)(parent_menu_shell), (GtkWidget *)(parent_menu_item), func_, data, destroy, button, activate_time);
}
void _gtk_menu_reorder_child(GtkMenu* _self_, GtkWidget* child, gint position) {
	gtk_menu_reorder_child((GtkMenu *)(_self_), (GtkWidget *)(child), position);
}
void _gtk_menu_reposition(GtkMenu* _self_) {
	gtk_menu_reposition((GtkMenu *)(_self_));
}
void _gtk_menu_set_accel_group(GtkMenu* _self_, GtkAccelGroup* accel_group) {
	gtk_menu_set_accel_group((GtkMenu *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_menu_set_accel_path(GtkMenu* _self_, gchar* accel_path) {
	gtk_menu_set_accel_path((GtkMenu *)(_self_), (const gchar *)(accel_path));
}
void _gtk_menu_set_active(GtkMenu* _self_, guint index) {
	gtk_menu_set_active((GtkMenu *)(_self_), index);
}
void _gtk_menu_set_monitor(GtkMenu* _self_, gint monitor_num) {
	gtk_menu_set_monitor((GtkMenu *)(_self_), monitor_num);
}
void _gtk_menu_set_reserve_toggle_size(GtkMenu* _self_, gboolean reserve_toggle_size) {
	gtk_menu_set_reserve_toggle_size((GtkMenu *)(_self_), reserve_toggle_size);
}
void _gtk_menu_set_screen(GtkMenu* _self_, GdkScreen* screen) {
	gtk_menu_set_screen((GtkMenu *)(_self_), (GdkScreen *)(screen));
}
void _gtk_menu_set_tearoff_state(GtkMenu* _self_, gboolean torn_off) {
	gtk_menu_set_tearoff_state((GtkMenu *)(_self_), torn_off);
}
void _gtk_menu_set_title(GtkMenu* _self_, gchar* title) {
	gtk_menu_set_title((GtkMenu *)(_self_), (const gchar *)(title));
}
GtkPackDirection _gtk_menu_bar_get_child_pack_direction(GtkMenuBar* _self_) {
	return gtk_menu_bar_get_child_pack_direction((GtkMenuBar *)(_self_));
}
GtkPackDirection _gtk_menu_bar_get_pack_direction(GtkMenuBar* _self_) {
	return gtk_menu_bar_get_pack_direction((GtkMenuBar *)(_self_));
}
void _gtk_menu_bar_set_child_pack_direction(GtkMenuBar* _self_, GtkPackDirection child_pack_dir) {
	gtk_menu_bar_set_child_pack_direction((GtkMenuBar *)(_self_), child_pack_dir);
}
void _gtk_menu_bar_set_pack_direction(GtkMenuBar* _self_, GtkPackDirection pack_dir) {
	gtk_menu_bar_set_pack_direction((GtkMenuBar *)(_self_), pack_dir);
}
GtkWidget * _gtk_menu_button_get_align_widget(GtkMenuButton* _self_) {
	return gtk_menu_button_get_align_widget((GtkMenuButton *)(_self_));
}
GtkArrowType _gtk_menu_button_get_direction(GtkMenuButton* _self_) {
	return gtk_menu_button_get_direction((GtkMenuButton *)(_self_));
}
GMenuModel * _gtk_menu_button_get_menu_model(GtkMenuButton* _self_) {
	return gtk_menu_button_get_menu_model((GtkMenuButton *)(_self_));
}
GtkMenu * _gtk_menu_button_get_popup(GtkMenuButton* _self_) {
	return gtk_menu_button_get_popup((GtkMenuButton *)(_self_));
}
void _gtk_menu_button_set_align_widget(GtkMenuButton* _self_, GtkWidget* align_widget) {
	gtk_menu_button_set_align_widget((GtkMenuButton *)(_self_), (GtkWidget *)(align_widget));
}
void _gtk_menu_button_set_direction(GtkMenuButton* _self_, GtkArrowType direction) {
	gtk_menu_button_set_direction((GtkMenuButton *)(_self_), direction);
}
void _gtk_menu_button_set_menu_model(GtkMenuButton* _self_, GMenuModel* menu_model) {
	gtk_menu_button_set_menu_model((GtkMenuButton *)(_self_), (GMenuModel *)(menu_model));
}
void _gtk_menu_button_set_popup(GtkMenuButton* _self_, GtkWidget* popup) {
	gtk_menu_button_set_popup((GtkMenuButton *)(_self_), (GtkWidget *)(popup));
}
GtkWidget * _gtk_menu_item_new_with_label(gchar* label) {
	return gtk_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_menu_item_new_with_mnemonic(gchar* label) {
	return gtk_menu_item_new_with_mnemonic((const gchar *)(label));
}
void _gtk_menu_item_activate(GtkMenuItem* _self_) {
	gtk_menu_item_activate((GtkMenuItem *)(_self_));
}
void _gtk_menu_item_deselect(GtkMenuItem* _self_) {
	gtk_menu_item_deselect((GtkMenuItem *)(_self_));
}
const gchar * _gtk_menu_item_get_accel_path(GtkMenuItem* _self_) {
	return gtk_menu_item_get_accel_path((GtkMenuItem *)(_self_));
}
const gchar * _gtk_menu_item_get_label(GtkMenuItem* _self_) {
	return gtk_menu_item_get_label((GtkMenuItem *)(_self_));
}
gboolean _gtk_menu_item_get_reserve_indicator(GtkMenuItem* _self_) {
	return gtk_menu_item_get_reserve_indicator((GtkMenuItem *)(_self_));
}
GtkWidget * _gtk_menu_item_get_submenu(GtkMenuItem* _self_) {
	return gtk_menu_item_get_submenu((GtkMenuItem *)(_self_));
}
gboolean _gtk_menu_item_get_use_underline(GtkMenuItem* _self_) {
	return gtk_menu_item_get_use_underline((GtkMenuItem *)(_self_));
}
void _gtk_menu_item_select(GtkMenuItem* _self_) {
	gtk_menu_item_select((GtkMenuItem *)(_self_));
}
void _gtk_menu_item_set_accel_path(GtkMenuItem* _self_, gchar* accel_path) {
	gtk_menu_item_set_accel_path((GtkMenuItem *)(_self_), (const gchar *)(accel_path));
}
void _gtk_menu_item_set_label(GtkMenuItem* _self_, gchar* label) {
	gtk_menu_item_set_label((GtkMenuItem *)(_self_), (const gchar *)(label));
}
void _gtk_menu_item_set_reserve_indicator(GtkMenuItem* _self_, gboolean reserve) {
	gtk_menu_item_set_reserve_indicator((GtkMenuItem *)(_self_), reserve);
}
void _gtk_menu_item_set_submenu(GtkMenuItem* _self_, GtkWidget* submenu) {
	gtk_menu_item_set_submenu((GtkMenuItem *)(_self_), (GtkWidget *)(submenu));
}
void _gtk_menu_item_set_use_underline(GtkMenuItem* _self_, gboolean setting) {
	gtk_menu_item_set_use_underline((GtkMenuItem *)(_self_), setting);
}
void _gtk_menu_item_toggle_size_allocate(GtkMenuItem* _self_, gint allocation) {
	gtk_menu_item_toggle_size_allocate((GtkMenuItem *)(_self_), allocation);
}
void _gtk_menu_item_toggle_size_request(GtkMenuItem* _self_, gint* requisition) {
	gtk_menu_item_toggle_size_request((GtkMenuItem *)(_self_), (gint *)(requisition));
}
void _gtk_menu_shell_activate_item(GtkMenuShell* _self_, GtkWidget* menu_item, gboolean force_deactivate) {
	gtk_menu_shell_activate_item((GtkMenuShell *)(_self_), (GtkWidget *)(menu_item), force_deactivate);
}
void _gtk_menu_shell_append(GtkMenuShell* _self_, GtkWidget* child) {
	gtk_menu_shell_append((GtkMenuShell *)(_self_), (GtkWidget *)(child));
}
void _gtk_menu_shell_bind_model(GtkMenuShell* _self_, GMenuModel* model, gchar* action_namespace, gboolean with_separators) {
	gtk_menu_shell_bind_model((GtkMenuShell *)(_self_), (GMenuModel *)(model), (const gchar *)(action_namespace), with_separators);
}
void _gtk_menu_shell_cancel(GtkMenuShell* _self_) {
	gtk_menu_shell_cancel((GtkMenuShell *)(_self_));
}
void _gtk_menu_shell_deactivate(GtkMenuShell* _self_) {
	gtk_menu_shell_deactivate((GtkMenuShell *)(_self_));
}
void _gtk_menu_shell_deselect(GtkMenuShell* _self_) {
	gtk_menu_shell_deselect((GtkMenuShell *)(_self_));
}
GtkWidget * _gtk_menu_shell_get_parent_shell(GtkMenuShell* _self_) {
	return gtk_menu_shell_get_parent_shell((GtkMenuShell *)(_self_));
}
GtkWidget * _gtk_menu_shell_get_selected_item(GtkMenuShell* _self_) {
	return gtk_menu_shell_get_selected_item((GtkMenuShell *)(_self_));
}
gboolean _gtk_menu_shell_get_take_focus(GtkMenuShell* _self_) {
	return gtk_menu_shell_get_take_focus((GtkMenuShell *)(_self_));
}
void _gtk_menu_shell_insert(GtkMenuShell* _self_, GtkWidget* child, gint position) {
	gtk_menu_shell_insert((GtkMenuShell *)(_self_), (GtkWidget *)(child), position);
}
void _gtk_menu_shell_prepend(GtkMenuShell* _self_, GtkWidget* child) {
	gtk_menu_shell_prepend((GtkMenuShell *)(_self_), (GtkWidget *)(child));
}
void _gtk_menu_shell_select_first(GtkMenuShell* _self_, gboolean search_sensitive) {
	gtk_menu_shell_select_first((GtkMenuShell *)(_self_), search_sensitive);
}
void _gtk_menu_shell_select_item(GtkMenuShell* _self_, GtkWidget* menu_item) {
	gtk_menu_shell_select_item((GtkMenuShell *)(_self_), (GtkWidget *)(menu_item));
}
void _gtk_menu_shell_set_take_focus(GtkMenuShell* _self_, gboolean take_focus) {
	gtk_menu_shell_set_take_focus((GtkMenuShell *)(_self_), take_focus);
}
GtkToolItem * _gtk_menu_tool_button_new(GtkWidget* icon_widget, gchar* label) {
	return gtk_menu_tool_button_new((GtkWidget *)(icon_widget), (const gchar *)(label));
}
GtkToolItem * _gtk_menu_tool_button_new_from_stock(gchar* stock_id) {
	return gtk_menu_tool_button_new_from_stock((const gchar *)(stock_id));
}
GtkWidget * _gtk_menu_tool_button_get_menu(GtkMenuToolButton* _self_) {
	return gtk_menu_tool_button_get_menu((GtkMenuToolButton *)(_self_));
}
void _gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton* _self_, gchar* markup) {
	gtk_menu_tool_button_set_arrow_tooltip_markup((GtkMenuToolButton *)(_self_), (const gchar *)(markup));
}
void _gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton* _self_, gchar* text) {
	gtk_menu_tool_button_set_arrow_tooltip_text((GtkMenuToolButton *)(_self_), (const gchar *)(text));
}
void _gtk_menu_tool_button_set_menu(GtkMenuToolButton* _self_, GtkWidget* menu) {
	gtk_menu_tool_button_set_menu((GtkMenuToolButton *)(_self_), (GtkWidget *)(menu));
}
GtkWidget * _gtk_message_dialog_get_image(GtkMessageDialog* _self_) {
	return gtk_message_dialog_get_image((GtkMessageDialog *)(_self_));
}
GtkWidget * _gtk_message_dialog_get_message_area(GtkMessageDialog* _self_) {
	return gtk_message_dialog_get_message_area((GtkMessageDialog *)(_self_));
}
void _gtk_message_dialog_set_image(GtkMessageDialog* _self_, GtkWidget* image) {
	gtk_message_dialog_set_image((GtkMessageDialog *)(_self_), (GtkWidget *)(image));
}
void _gtk_message_dialog_set_markup(GtkMessageDialog* _self_, gchar* str) {
	gtk_message_dialog_set_markup((GtkMessageDialog *)(_self_), (const gchar *)(str));
}
void _gtk_misc_get_alignment(GtkMisc* _self_, gfloat* xalign, gfloat* yalign) {
	gtk_misc_get_alignment((GtkMisc *)(_self_), (gfloat *)(xalign), (gfloat *)(yalign));
}
void _gtk_misc_get_padding(GtkMisc* _self_, gint* xpad, gint* ypad) {
	gtk_misc_get_padding((GtkMisc *)(_self_), (gint *)(xpad), (gint *)(ypad));
}
void _gtk_misc_set_alignment(GtkMisc* _self_, gfloat xalign, gfloat yalign) {
	gtk_misc_set_alignment((GtkMisc *)(_self_), xalign, yalign);
}
void _gtk_misc_set_padding(GtkMisc* _self_, gint xpad, gint ypad) {
	gtk_misc_set_padding((GtkMisc *)(_self_), xpad, ypad);
}
GtkWindow * _gtk_mount_operation_get_parent(GtkMountOperation* _self_) {
	return gtk_mount_operation_get_parent((GtkMountOperation *)(_self_));
}
GdkScreen * _gtk_mount_operation_get_screen(GtkMountOperation* _self_) {
	return gtk_mount_operation_get_screen((GtkMountOperation *)(_self_));
}
gboolean _gtk_mount_operation_is_showing(GtkMountOperation* _self_) {
	return gtk_mount_operation_is_showing((GtkMountOperation *)(_self_));
}
void _gtk_mount_operation_set_parent(GtkMountOperation* _self_, GtkWindow* parent) {
	gtk_mount_operation_set_parent((GtkMountOperation *)(_self_), (GtkWindow *)(parent));
}
void _gtk_mount_operation_set_screen(GtkMountOperation* _self_, GdkScreen* screen) {
	gtk_mount_operation_set_screen((GtkMountOperation *)(_self_), (GdkScreen *)(screen));
}
gint _gtk_notebook_append_page(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label) {
	return gtk_notebook_append_page((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label));
}
gint _gtk_notebook_append_page_menu(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) {
	return gtk_notebook_append_page_menu((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label), (GtkWidget *)(menu_label));
}
GtkWidget * _gtk_notebook_get_action_widget(GtkNotebook* _self_, GtkPackType pack_type) {
	return gtk_notebook_get_action_widget((GtkNotebook *)(_self_), pack_type);
}
gint _gtk_notebook_get_current_page(GtkNotebook* _self_) {
	return gtk_notebook_get_current_page((GtkNotebook *)(_self_));
}
const gchar * _gtk_notebook_get_group_name(GtkNotebook* _self_) {
	return gtk_notebook_get_group_name((GtkNotebook *)(_self_));
}
GtkWidget * _gtk_notebook_get_menu_label(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_menu_label((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
const gchar * _gtk_notebook_get_menu_label_text(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_menu_label_text((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
gint _gtk_notebook_get_n_pages(GtkNotebook* _self_) {
	return gtk_notebook_get_n_pages((GtkNotebook *)(_self_));
}
GtkWidget * _gtk_notebook_get_nth_page(GtkNotebook* _self_, gint page_num) {
	return gtk_notebook_get_nth_page((GtkNotebook *)(_self_), page_num);
}
gboolean _gtk_notebook_get_scrollable(GtkNotebook* _self_) {
	return gtk_notebook_get_scrollable((GtkNotebook *)(_self_));
}
gboolean _gtk_notebook_get_show_border(GtkNotebook* _self_) {
	return gtk_notebook_get_show_border((GtkNotebook *)(_self_));
}
gboolean _gtk_notebook_get_show_tabs(GtkNotebook* _self_) {
	return gtk_notebook_get_show_tabs((GtkNotebook *)(_self_));
}
gboolean _gtk_notebook_get_tab_detachable(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_tab_detachable((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
GtkWidget * _gtk_notebook_get_tab_label(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_tab_label((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
const gchar * _gtk_notebook_get_tab_label_text(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_tab_label_text((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
GtkPositionType _gtk_notebook_get_tab_pos(GtkNotebook* _self_) {
	return gtk_notebook_get_tab_pos((GtkNotebook *)(_self_));
}
gboolean _gtk_notebook_get_tab_reorderable(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_get_tab_reorderable((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
gint _gtk_notebook_insert_page(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label, gint position) {
	return gtk_notebook_insert_page((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label), position);
}
gint _gtk_notebook_insert_page_menu(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label, gint position) {
	return gtk_notebook_insert_page_menu((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label), (GtkWidget *)(menu_label), position);
}
void _gtk_notebook_next_page(GtkNotebook* _self_) {
	gtk_notebook_next_page((GtkNotebook *)(_self_));
}
gint _gtk_notebook_page_num(GtkNotebook* _self_, GtkWidget* child) {
	return gtk_notebook_page_num((GtkNotebook *)(_self_), (GtkWidget *)(child));
}
void _gtk_notebook_popup_disable(GtkNotebook* _self_) {
	gtk_notebook_popup_disable((GtkNotebook *)(_self_));
}
void _gtk_notebook_popup_enable(GtkNotebook* _self_) {
	gtk_notebook_popup_enable((GtkNotebook *)(_self_));
}
gint _gtk_notebook_prepend_page(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label) {
	return gtk_notebook_prepend_page((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label));
}
gint _gtk_notebook_prepend_page_menu(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label, GtkWidget* menu_label) {
	return gtk_notebook_prepend_page_menu((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label), (GtkWidget *)(menu_label));
}
void _gtk_notebook_prev_page(GtkNotebook* _self_) {
	gtk_notebook_prev_page((GtkNotebook *)(_self_));
}
void _gtk_notebook_remove_page(GtkNotebook* _self_, gint page_num) {
	gtk_notebook_remove_page((GtkNotebook *)(_self_), page_num);
}
void _gtk_notebook_reorder_child(GtkNotebook* _self_, GtkWidget* child, gint position) {
	gtk_notebook_reorder_child((GtkNotebook *)(_self_), (GtkWidget *)(child), position);
}
void _gtk_notebook_set_action_widget(GtkNotebook* _self_, GtkWidget* widget, GtkPackType pack_type) {
	gtk_notebook_set_action_widget((GtkNotebook *)(_self_), (GtkWidget *)(widget), pack_type);
}
void _gtk_notebook_set_current_page(GtkNotebook* _self_, gint page_num) {
	gtk_notebook_set_current_page((GtkNotebook *)(_self_), page_num);
}
void _gtk_notebook_set_group_name(GtkNotebook* _self_, gchar* group_name) {
	gtk_notebook_set_group_name((GtkNotebook *)(_self_), (const gchar *)(group_name));
}
void _gtk_notebook_set_menu_label(GtkNotebook* _self_, GtkWidget* child, GtkWidget* menu_label) {
	gtk_notebook_set_menu_label((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(menu_label));
}
void _gtk_notebook_set_menu_label_text(GtkNotebook* _self_, GtkWidget* child, gchar* menu_text) {
	gtk_notebook_set_menu_label_text((GtkNotebook *)(_self_), (GtkWidget *)(child), (const gchar *)(menu_text));
}
void _gtk_notebook_set_scrollable(GtkNotebook* _self_, gboolean scrollable) {
	gtk_notebook_set_scrollable((GtkNotebook *)(_self_), scrollable);
}
void _gtk_notebook_set_show_border(GtkNotebook* _self_, gboolean show_border) {
	gtk_notebook_set_show_border((GtkNotebook *)(_self_), show_border);
}
void _gtk_notebook_set_show_tabs(GtkNotebook* _self_, gboolean show_tabs) {
	gtk_notebook_set_show_tabs((GtkNotebook *)(_self_), show_tabs);
}
void _gtk_notebook_set_tab_detachable(GtkNotebook* _self_, GtkWidget* child, gboolean detachable) {
	gtk_notebook_set_tab_detachable((GtkNotebook *)(_self_), (GtkWidget *)(child), detachable);
}
void _gtk_notebook_set_tab_label(GtkNotebook* _self_, GtkWidget* child, GtkWidget* tab_label) {
	gtk_notebook_set_tab_label((GtkNotebook *)(_self_), (GtkWidget *)(child), (GtkWidget *)(tab_label));
}
void _gtk_notebook_set_tab_label_text(GtkNotebook* _self_, GtkWidget* child, gchar* tab_text) {
	gtk_notebook_set_tab_label_text((GtkNotebook *)(_self_), (GtkWidget *)(child), (const gchar *)(tab_text));
}
void _gtk_notebook_set_tab_pos(GtkNotebook* _self_, GtkPositionType pos) {
	gtk_notebook_set_tab_pos((GtkNotebook *)(_self_), pos);
}
void _gtk_notebook_set_tab_reorderable(GtkNotebook* _self_, GtkWidget* child, gboolean reorderable) {
	gtk_notebook_set_tab_reorderable((GtkNotebook *)(_self_), (GtkWidget *)(child), reorderable);
}
GIcon * _gtk_numerable_icon_get_background_gicon(GtkNumerableIcon* _self_) {
	return gtk_numerable_icon_get_background_gicon((GtkNumerableIcon *)(_self_));
}
const gchar * _gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon* _self_) {
	return gtk_numerable_icon_get_background_icon_name((GtkNumerableIcon *)(_self_));
}
gint _gtk_numerable_icon_get_count(GtkNumerableIcon* _self_) {
	return gtk_numerable_icon_get_count((GtkNumerableIcon *)(_self_));
}
const gchar * _gtk_numerable_icon_get_label(GtkNumerableIcon* _self_) {
	return gtk_numerable_icon_get_label((GtkNumerableIcon *)(_self_));
}
GtkStyleContext * _gtk_numerable_icon_get_style_context(GtkNumerableIcon* _self_) {
	return gtk_numerable_icon_get_style_context((GtkNumerableIcon *)(_self_));
}
void _gtk_numerable_icon_set_background_gicon(GtkNumerableIcon* _self_, GIcon* icon) {
	gtk_numerable_icon_set_background_gicon((GtkNumerableIcon *)(_self_), (GIcon *)(icon));
}
void _gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon* _self_, gchar* icon_name) {
	gtk_numerable_icon_set_background_icon_name((GtkNumerableIcon *)(_self_), (const gchar *)(icon_name));
}
void _gtk_numerable_icon_set_count(GtkNumerableIcon* _self_, gint count) {
	gtk_numerable_icon_set_count((GtkNumerableIcon *)(_self_), count);
}
void _gtk_numerable_icon_set_label(GtkNumerableIcon* _self_, gchar* label) {
	gtk_numerable_icon_set_label((GtkNumerableIcon *)(_self_), (const gchar *)(label));
}
void _gtk_numerable_icon_set_style_context(GtkNumerableIcon* _self_, GtkStyleContext* style) {
	gtk_numerable_icon_set_style_context((GtkNumerableIcon *)(_self_), (GtkStyleContext *)(style));
}
GdkPixbuf * _gtk_offscreen_window_get_pixbuf(GtkOffscreenWindow* _self_) {
	return gtk_offscreen_window_get_pixbuf((GtkOffscreenWindow *)(_self_));
}
cairo_surface_t * _gtk_offscreen_window_get_surface(GtkOffscreenWindow* _self_) {
	return gtk_offscreen_window_get_surface((GtkOffscreenWindow *)(_self_));
}
void _gtk_overlay_add_overlay(GtkOverlay* _self_, GtkWidget* widget) {
	gtk_overlay_add_overlay((GtkOverlay *)(_self_), (GtkWidget *)(widget));
}
GtkPageSetup * _gtk_page_setup_new_from_file(gchar* file_name, void* _error_) {
	return gtk_page_setup_new_from_file((const gchar *)(file_name), (GError **)(_error_));
}
GtkPageSetup * _gtk_page_setup_new_from_key_file(GKeyFile* key_file, gchar* group_name, void* _error_) {
	return gtk_page_setup_new_from_key_file((GKeyFile *)(key_file), (const gchar *)(group_name), (GError **)(_error_));
}
GtkPageSetup * _gtk_page_setup_copy(GtkPageSetup* _self_) {
	return gtk_page_setup_copy((GtkPageSetup *)(_self_));
}
gdouble _gtk_page_setup_get_bottom_margin(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_bottom_margin((GtkPageSetup *)(_self_), unit);
}
gdouble _gtk_page_setup_get_left_margin(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_left_margin((GtkPageSetup *)(_self_), unit);
}
GtkPageOrientation _gtk_page_setup_get_orientation(GtkPageSetup* _self_) {
	return gtk_page_setup_get_orientation((GtkPageSetup *)(_self_));
}
gdouble _gtk_page_setup_get_page_height(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_page_height((GtkPageSetup *)(_self_), unit);
}
gdouble _gtk_page_setup_get_page_width(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_page_width((GtkPageSetup *)(_self_), unit);
}
gdouble _gtk_page_setup_get_paper_height(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_paper_height((GtkPageSetup *)(_self_), unit);
}
GtkPaperSize * _gtk_page_setup_get_paper_size(GtkPageSetup* _self_) {
	return gtk_page_setup_get_paper_size((GtkPageSetup *)(_self_));
}
gdouble _gtk_page_setup_get_paper_width(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_paper_width((GtkPageSetup *)(_self_), unit);
}
gdouble _gtk_page_setup_get_right_margin(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_right_margin((GtkPageSetup *)(_self_), unit);
}
gdouble _gtk_page_setup_get_top_margin(GtkPageSetup* _self_, GtkUnit unit) {
	return gtk_page_setup_get_top_margin((GtkPageSetup *)(_self_), unit);
}
gboolean _gtk_page_setup_load_file(GtkPageSetup* _self_, char* file_name, void* _error_) {
	return gtk_page_setup_load_file((GtkPageSetup *)(_self_), (const char *)(file_name), (GError **)(_error_));
}
gboolean _gtk_page_setup_load_key_file(GtkPageSetup* _self_, GKeyFile* key_file, gchar* group_name, void* _error_) {
	return gtk_page_setup_load_key_file((GtkPageSetup *)(_self_), (GKeyFile *)(key_file), (const gchar *)(group_name), (GError **)(_error_));
}
void _gtk_page_setup_set_bottom_margin(GtkPageSetup* _self_, gdouble margin, GtkUnit unit) {
	gtk_page_setup_set_bottom_margin((GtkPageSetup *)(_self_), margin, unit);
}
void _gtk_page_setup_set_left_margin(GtkPageSetup* _self_, gdouble margin, GtkUnit unit) {
	gtk_page_setup_set_left_margin((GtkPageSetup *)(_self_), margin, unit);
}
void _gtk_page_setup_set_orientation(GtkPageSetup* _self_, GtkPageOrientation orientation) {
	gtk_page_setup_set_orientation((GtkPageSetup *)(_self_), orientation);
}
void _gtk_page_setup_set_paper_size(GtkPageSetup* _self_, GtkPaperSize* size) {
	gtk_page_setup_set_paper_size((GtkPageSetup *)(_self_), (GtkPaperSize *)(size));
}
void _gtk_page_setup_set_paper_size_and_default_margins(GtkPageSetup* _self_, GtkPaperSize* size) {
	gtk_page_setup_set_paper_size_and_default_margins((GtkPageSetup *)(_self_), (GtkPaperSize *)(size));
}
void _gtk_page_setup_set_right_margin(GtkPageSetup* _self_, gdouble margin, GtkUnit unit) {
	gtk_page_setup_set_right_margin((GtkPageSetup *)(_self_), margin, unit);
}
void _gtk_page_setup_set_top_margin(GtkPageSetup* _self_, gdouble margin, GtkUnit unit) {
	gtk_page_setup_set_top_margin((GtkPageSetup *)(_self_), margin, unit);
}
gboolean _gtk_page_setup_to_file(GtkPageSetup* _self_, char* file_name, void* _error_) {
	return gtk_page_setup_to_file((GtkPageSetup *)(_self_), (const char *)(file_name), (GError **)(_error_));
}
void _gtk_page_setup_to_key_file(GtkPageSetup* _self_, GKeyFile* key_file, gchar* group_name) {
	gtk_page_setup_to_key_file((GtkPageSetup *)(_self_), (GKeyFile *)(key_file), (const gchar *)(group_name));
}
void _gtk_paned_add1(GtkPaned* _self_, GtkWidget* child) {
	gtk_paned_add1((GtkPaned *)(_self_), (GtkWidget *)(child));
}
void _gtk_paned_add2(GtkPaned* _self_, GtkWidget* child) {
	gtk_paned_add2((GtkPaned *)(_self_), (GtkWidget *)(child));
}
GtkWidget * _gtk_paned_get_child1(GtkPaned* _self_) {
	return gtk_paned_get_child1((GtkPaned *)(_self_));
}
GtkWidget * _gtk_paned_get_child2(GtkPaned* _self_) {
	return gtk_paned_get_child2((GtkPaned *)(_self_));
}
GdkWindow * _gtk_paned_get_handle_window(GtkPaned* _self_) {
	return gtk_paned_get_handle_window((GtkPaned *)(_self_));
}
gint _gtk_paned_get_position(GtkPaned* _self_) {
	return gtk_paned_get_position((GtkPaned *)(_self_));
}
void _gtk_paned_pack1(GtkPaned* _self_, GtkWidget* child, gboolean resize, gboolean shrink) {
	gtk_paned_pack1((GtkPaned *)(_self_), (GtkWidget *)(child), resize, shrink);
}
void _gtk_paned_pack2(GtkPaned* _self_, GtkWidget* child, gboolean resize, gboolean shrink) {
	gtk_paned_pack2((GtkPaned *)(_self_), (GtkWidget *)(child), resize, shrink);
}
void _gtk_paned_set_position(GtkPaned* _self_, gint position) {
	gtk_paned_set_position((GtkPaned *)(_self_), position);
}
GtkPaperSize * _gtk_paper_size_new(gchar* name) {
	return gtk_paper_size_new((const gchar *)(name));
}
GtkPaperSize * _gtk_paper_size_new_custom(gchar* name, gchar* display_name, gdouble width, gdouble height, GtkUnit unit) {
	return gtk_paper_size_new_custom((const gchar *)(name), (const gchar *)(display_name), width, height, unit);
}
GtkPaperSize * _gtk_paper_size_new_from_key_file(GKeyFile* key_file, gchar* group_name, void* _error_) {
	return gtk_paper_size_new_from_key_file((GKeyFile *)(key_file), (const gchar *)(group_name), (GError **)(_error_));
}
GtkPaperSize * _gtk_paper_size_new_from_ppd(gchar* ppd_name, gchar* ppd_display_name, gdouble width, gdouble height) {
	return gtk_paper_size_new_from_ppd((const gchar *)(ppd_name), (const gchar *)(ppd_display_name), width, height);
}
GtkPaperSize * _gtk_paper_size_copy(GtkPaperSize* _self_) {
	return gtk_paper_size_copy((GtkPaperSize *)(_self_));
}
void _gtk_paper_size_free(GtkPaperSize* _self_) {
	gtk_paper_size_free((GtkPaperSize *)(_self_));
}
gdouble _gtk_paper_size_get_default_bottom_margin(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_default_bottom_margin((GtkPaperSize *)(_self_), unit);
}
gdouble _gtk_paper_size_get_default_left_margin(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_default_left_margin((GtkPaperSize *)(_self_), unit);
}
gdouble _gtk_paper_size_get_default_right_margin(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_default_right_margin((GtkPaperSize *)(_self_), unit);
}
gdouble _gtk_paper_size_get_default_top_margin(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_default_top_margin((GtkPaperSize *)(_self_), unit);
}
const gchar * _gtk_paper_size_get_display_name(GtkPaperSize* _self_) {
	return gtk_paper_size_get_display_name((GtkPaperSize *)(_self_));
}
gdouble _gtk_paper_size_get_height(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_height((GtkPaperSize *)(_self_), unit);
}
const gchar * _gtk_paper_size_get_name(GtkPaperSize* _self_) {
	return gtk_paper_size_get_name((GtkPaperSize *)(_self_));
}
const gchar * _gtk_paper_size_get_ppd_name(GtkPaperSize* _self_) {
	return gtk_paper_size_get_ppd_name((GtkPaperSize *)(_self_));
}
gdouble _gtk_paper_size_get_width(GtkPaperSize* _self_, GtkUnit unit) {
	return gtk_paper_size_get_width((GtkPaperSize *)(_self_), unit);
}
gboolean _gtk_paper_size_is_custom(GtkPaperSize* _self_) {
	return gtk_paper_size_is_custom((GtkPaperSize *)(_self_));
}
gboolean _gtk_paper_size_is_equal(GtkPaperSize* _self_, GtkPaperSize* size2) {
	return gtk_paper_size_is_equal((GtkPaperSize *)(_self_), (GtkPaperSize *)(size2));
}
void _gtk_paper_size_set_size(GtkPaperSize* _self_, gdouble width, gdouble height, GtkUnit unit) {
	gtk_paper_size_set_size((GtkPaperSize *)(_self_), width, height, unit);
}
void _gtk_paper_size_to_key_file(GtkPaperSize* _self_, GKeyFile* key_file, gchar* group_name) {
	gtk_paper_size_to_key_file((GtkPaperSize *)(_self_), (GKeyFile *)(key_file), (const gchar *)(group_name));
}
void _gtk_plug_construct(GtkPlug* _self_, Window socket_id) {
	gtk_plug_construct((GtkPlug *)(_self_), socket_id);
}
void _gtk_plug_construct_for_display(GtkPlug* _self_, GdkDisplay* display, Window socket_id) {
	gtk_plug_construct_for_display((GtkPlug *)(_self_), (GdkDisplay *)(display), socket_id);
}
gboolean _gtk_plug_get_embedded(GtkPlug* _self_) {
	return gtk_plug_get_embedded((GtkPlug *)(_self_));
}
Window _gtk_plug_get_id(GtkPlug* _self_) {
	return gtk_plug_get_id((GtkPlug *)(_self_));
}
GdkWindow * _gtk_plug_get_socket_window(GtkPlug* _self_) {
	return gtk_plug_get_socket_window((GtkPlug *)(_self_));
}
PangoContext * _gtk_print_context_create_pango_context(GtkPrintContext* _self_) {
	return gtk_print_context_create_pango_context((GtkPrintContext *)(_self_));
}
PangoLayout * _gtk_print_context_create_pango_layout(GtkPrintContext* _self_) {
	return gtk_print_context_create_pango_layout((GtkPrintContext *)(_self_));
}
cairo_t * _gtk_print_context_get_cairo_context(GtkPrintContext* _self_) {
	return gtk_print_context_get_cairo_context((GtkPrintContext *)(_self_));
}
gdouble _gtk_print_context_get_dpi_x(GtkPrintContext* _self_) {
	return gtk_print_context_get_dpi_x((GtkPrintContext *)(_self_));
}
gdouble _gtk_print_context_get_dpi_y(GtkPrintContext* _self_) {
	return gtk_print_context_get_dpi_y((GtkPrintContext *)(_self_));
}
gboolean _gtk_print_context_get_hard_margins(GtkPrintContext* _self_, gdouble* top, gdouble* bottom, gdouble* left, gdouble* right) {
	return gtk_print_context_get_hard_margins((GtkPrintContext *)(_self_), (gdouble *)(top), (gdouble *)(bottom), (gdouble *)(left), (gdouble *)(right));
}
gdouble _gtk_print_context_get_height(GtkPrintContext* _self_) {
	return gtk_print_context_get_height((GtkPrintContext *)(_self_));
}
GtkPageSetup * _gtk_print_context_get_page_setup(GtkPrintContext* _self_) {
	return gtk_print_context_get_page_setup((GtkPrintContext *)(_self_));
}
PangoFontMap * _gtk_print_context_get_pango_fontmap(GtkPrintContext* _self_) {
	return gtk_print_context_get_pango_fontmap((GtkPrintContext *)(_self_));
}
gdouble _gtk_print_context_get_width(GtkPrintContext* _self_) {
	return gtk_print_context_get_width((GtkPrintContext *)(_self_));
}
void _gtk_print_context_set_cairo_context(GtkPrintContext* _self_, cairo_t* cr, double dpi_x, double dpi_y) {
	gtk_print_context_set_cairo_context((GtkPrintContext *)(_self_), (cairo_t *)(cr), dpi_x, dpi_y);
}
void _gtk_print_operation_cancel(GtkPrintOperation* _self_) {
	gtk_print_operation_cancel((GtkPrintOperation *)(_self_));
}
void _gtk_print_operation_draw_page_finish(GtkPrintOperation* _self_) {
	gtk_print_operation_draw_page_finish((GtkPrintOperation *)(_self_));
}
GtkPageSetup * _gtk_print_operation_get_default_page_setup(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_default_page_setup((GtkPrintOperation *)(_self_));
}
gboolean _gtk_print_operation_get_embed_page_setup(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_embed_page_setup((GtkPrintOperation *)(_self_));
}
void _gtk_print_operation_get_error(GtkPrintOperation* _self_, void* _error_) {
	gtk_print_operation_get_error((GtkPrintOperation *)(_self_), (GError **)(_error_));
}
gboolean _gtk_print_operation_get_has_selection(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_has_selection((GtkPrintOperation *)(_self_));
}
gint _gtk_print_operation_get_n_pages_to_print(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_n_pages_to_print((GtkPrintOperation *)(_self_));
}
GtkPrintSettings * _gtk_print_operation_get_print_settings(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_print_settings((GtkPrintOperation *)(_self_));
}
GtkPrintStatus _gtk_print_operation_get_status(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_status((GtkPrintOperation *)(_self_));
}
const gchar * _gtk_print_operation_get_status_string(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_status_string((GtkPrintOperation *)(_self_));
}
gboolean _gtk_print_operation_get_support_selection(GtkPrintOperation* _self_) {
	return gtk_print_operation_get_support_selection((GtkPrintOperation *)(_self_));
}
gboolean _gtk_print_operation_is_finished(GtkPrintOperation* _self_) {
	return gtk_print_operation_is_finished((GtkPrintOperation *)(_self_));
}
GtkPrintOperationResult _gtk_print_operation_run(GtkPrintOperation* _self_, GtkPrintOperationAction action, GtkWindow* parent, void* _error_) {
	return gtk_print_operation_run((GtkPrintOperation *)(_self_), action, (GtkWindow *)(parent), (GError **)(_error_));
}
void _gtk_print_operation_set_allow_async(GtkPrintOperation* _self_, gboolean allow_async) {
	gtk_print_operation_set_allow_async((GtkPrintOperation *)(_self_), allow_async);
}
void _gtk_print_operation_set_current_page(GtkPrintOperation* _self_, gint current_page) {
	gtk_print_operation_set_current_page((GtkPrintOperation *)(_self_), current_page);
}
void _gtk_print_operation_set_custom_tab_label(GtkPrintOperation* _self_, gchar* label) {
	gtk_print_operation_set_custom_tab_label((GtkPrintOperation *)(_self_), (const gchar *)(label));
}
void _gtk_print_operation_set_default_page_setup(GtkPrintOperation* _self_, GtkPageSetup* default_page_setup) {
	gtk_print_operation_set_default_page_setup((GtkPrintOperation *)(_self_), (GtkPageSetup *)(default_page_setup));
}
void _gtk_print_operation_set_defer_drawing(GtkPrintOperation* _self_) {
	gtk_print_operation_set_defer_drawing((GtkPrintOperation *)(_self_));
}
void _gtk_print_operation_set_embed_page_setup(GtkPrintOperation* _self_, gboolean embed) {
	gtk_print_operation_set_embed_page_setup((GtkPrintOperation *)(_self_), embed);
}
void _gtk_print_operation_set_export_filename(GtkPrintOperation* _self_, gchar* filename) {
	gtk_print_operation_set_export_filename((GtkPrintOperation *)(_self_), (const gchar *)(filename));
}
void _gtk_print_operation_set_has_selection(GtkPrintOperation* _self_, gboolean has_selection) {
	gtk_print_operation_set_has_selection((GtkPrintOperation *)(_self_), has_selection);
}
void _gtk_print_operation_set_job_name(GtkPrintOperation* _self_, gchar* job_name) {
	gtk_print_operation_set_job_name((GtkPrintOperation *)(_self_), (const gchar *)(job_name));
}
void _gtk_print_operation_set_n_pages(GtkPrintOperation* _self_, gint n_pages) {
	gtk_print_operation_set_n_pages((GtkPrintOperation *)(_self_), n_pages);
}
void _gtk_print_operation_set_print_settings(GtkPrintOperation* _self_, GtkPrintSettings* print_settings) {
	gtk_print_operation_set_print_settings((GtkPrintOperation *)(_self_), (GtkPrintSettings *)(print_settings));
}
void _gtk_print_operation_set_show_progress(GtkPrintOperation* _self_, gboolean show_progress) {
	gtk_print_operation_set_show_progress((GtkPrintOperation *)(_self_), show_progress);
}
void _gtk_print_operation_set_support_selection(GtkPrintOperation* _self_, gboolean support_selection) {
	gtk_print_operation_set_support_selection((GtkPrintOperation *)(_self_), support_selection);
}
void _gtk_print_operation_set_track_print_status(GtkPrintOperation* _self_, gboolean track_status) {
	gtk_print_operation_set_track_print_status((GtkPrintOperation *)(_self_), track_status);
}
void _gtk_print_operation_set_unit(GtkPrintOperation* _self_, GtkUnit unit) {
	gtk_print_operation_set_unit((GtkPrintOperation *)(_self_), unit);
}
void _gtk_print_operation_set_use_full_page(GtkPrintOperation* _self_, gboolean full_page) {
	gtk_print_operation_set_use_full_page((GtkPrintOperation *)(_self_), full_page);
}
GtkPrintSettings * _gtk_print_settings_new_from_file(gchar* file_name, void* _error_) {
	return gtk_print_settings_new_from_file((const gchar *)(file_name), (GError **)(_error_));
}
GtkPrintSettings * _gtk_print_settings_new_from_key_file(GKeyFile* key_file, gchar* group_name, void* _error_) {
	return gtk_print_settings_new_from_key_file((GKeyFile *)(key_file), (const gchar *)(group_name), (GError **)(_error_));
}
GtkPrintSettings * _gtk_print_settings_copy(GtkPrintSettings* _self_) {
	return gtk_print_settings_copy((GtkPrintSettings *)(_self_));
}
void _gtk_print_settings_foreach(GtkPrintSettings* _self_, GtkPrintSettingsFunc func_, gpointer user_data) {
	gtk_print_settings_foreach((GtkPrintSettings *)(_self_), func_, user_data);
}
const gchar * _gtk_print_settings_get(GtkPrintSettings* _self_, gchar* key) {
	return gtk_print_settings_get((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
gboolean _gtk_print_settings_get_bool(GtkPrintSettings* _self_, gchar* key) {
	return gtk_print_settings_get_bool((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
gboolean _gtk_print_settings_get_collate(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_collate((GtkPrintSettings *)(_self_));
}
const gchar * _gtk_print_settings_get_default_source(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_default_source((GtkPrintSettings *)(_self_));
}
const gchar * _gtk_print_settings_get_dither(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_dither((GtkPrintSettings *)(_self_));
}
gdouble _gtk_print_settings_get_double(GtkPrintSettings* _self_, gchar* key) {
	return gtk_print_settings_get_double((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
gdouble _gtk_print_settings_get_double_with_default(GtkPrintSettings* _self_, gchar* key, gdouble def) {
	return gtk_print_settings_get_double_with_default((GtkPrintSettings *)(_self_), (const gchar *)(key), def);
}
GtkPrintDuplex _gtk_print_settings_get_duplex(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_duplex((GtkPrintSettings *)(_self_));
}
const gchar * _gtk_print_settings_get_finishings(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_finishings((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_int(GtkPrintSettings* _self_, gchar* key) {
	return gtk_print_settings_get_int((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
gint _gtk_print_settings_get_int_with_default(GtkPrintSettings* _self_, gchar* key, gint def) {
	return gtk_print_settings_get_int_with_default((GtkPrintSettings *)(_self_), (const gchar *)(key), def);
}
gdouble _gtk_print_settings_get_length(GtkPrintSettings* _self_, gchar* key, GtkUnit unit) {
	return gtk_print_settings_get_length((GtkPrintSettings *)(_self_), (const gchar *)(key), unit);
}
const gchar * _gtk_print_settings_get_media_type(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_media_type((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_n_copies(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_n_copies((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_number_up(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_number_up((GtkPrintSettings *)(_self_));
}
GtkNumberUpLayout _gtk_print_settings_get_number_up_layout(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_number_up_layout((GtkPrintSettings *)(_self_));
}
GtkPageOrientation _gtk_print_settings_get_orientation(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_orientation((GtkPrintSettings *)(_self_));
}
const gchar * _gtk_print_settings_get_output_bin(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_output_bin((GtkPrintSettings *)(_self_));
}
GtkPageRange * _gtk_print_settings_get_page_ranges(GtkPrintSettings* _self_, gint* num_ranges) {
	return gtk_print_settings_get_page_ranges((GtkPrintSettings *)(_self_), (gint *)(num_ranges));
}
GtkPageSet _gtk_print_settings_get_page_set(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_page_set((GtkPrintSettings *)(_self_));
}
gdouble _gtk_print_settings_get_paper_height(GtkPrintSettings* _self_, GtkUnit unit) {
	return gtk_print_settings_get_paper_height((GtkPrintSettings *)(_self_), unit);
}
GtkPaperSize * _gtk_print_settings_get_paper_size(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_paper_size((GtkPrintSettings *)(_self_));
}
gdouble _gtk_print_settings_get_paper_width(GtkPrintSettings* _self_, GtkUnit unit) {
	return gtk_print_settings_get_paper_width((GtkPrintSettings *)(_self_), unit);
}
GtkPrintPages _gtk_print_settings_get_print_pages(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_print_pages((GtkPrintSettings *)(_self_));
}
const gchar * _gtk_print_settings_get_printer(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_printer((GtkPrintSettings *)(_self_));
}
gdouble _gtk_print_settings_get_printer_lpi(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_printer_lpi((GtkPrintSettings *)(_self_));
}
GtkPrintQuality _gtk_print_settings_get_quality(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_quality((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_resolution(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_resolution((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_resolution_x(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_resolution_x((GtkPrintSettings *)(_self_));
}
gint _gtk_print_settings_get_resolution_y(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_resolution_y((GtkPrintSettings *)(_self_));
}
gboolean _gtk_print_settings_get_reverse(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_reverse((GtkPrintSettings *)(_self_));
}
gdouble _gtk_print_settings_get_scale(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_scale((GtkPrintSettings *)(_self_));
}
gboolean _gtk_print_settings_get_use_color(GtkPrintSettings* _self_) {
	return gtk_print_settings_get_use_color((GtkPrintSettings *)(_self_));
}
gboolean _gtk_print_settings_has_key(GtkPrintSettings* _self_, gchar* key) {
	return gtk_print_settings_has_key((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
gboolean _gtk_print_settings_load_file(GtkPrintSettings* _self_, gchar* file_name, void* _error_) {
	return gtk_print_settings_load_file((GtkPrintSettings *)(_self_), (const gchar *)(file_name), (GError **)(_error_));
}
gboolean _gtk_print_settings_load_key_file(GtkPrintSettings* _self_, GKeyFile* key_file, gchar* group_name, void* _error_) {
	return gtk_print_settings_load_key_file((GtkPrintSettings *)(_self_), (GKeyFile *)(key_file), (const gchar *)(group_name), (GError **)(_error_));
}
void _gtk_print_settings_set(GtkPrintSettings* _self_, gchar* key, gchar* value) {
	gtk_print_settings_set((GtkPrintSettings *)(_self_), (const gchar *)(key), (const gchar *)(value));
}
void _gtk_print_settings_set_bool(GtkPrintSettings* _self_, gchar* key, gboolean value) {
	gtk_print_settings_set_bool((GtkPrintSettings *)(_self_), (const gchar *)(key), value);
}
void _gtk_print_settings_set_collate(GtkPrintSettings* _self_, gboolean collate) {
	gtk_print_settings_set_collate((GtkPrintSettings *)(_self_), collate);
}
void _gtk_print_settings_set_default_source(GtkPrintSettings* _self_, gchar* default_source) {
	gtk_print_settings_set_default_source((GtkPrintSettings *)(_self_), (const gchar *)(default_source));
}
void _gtk_print_settings_set_dither(GtkPrintSettings* _self_, gchar* dither) {
	gtk_print_settings_set_dither((GtkPrintSettings *)(_self_), (const gchar *)(dither));
}
void _gtk_print_settings_set_double(GtkPrintSettings* _self_, gchar* key, gdouble value) {
	gtk_print_settings_set_double((GtkPrintSettings *)(_self_), (const gchar *)(key), value);
}
void _gtk_print_settings_set_duplex(GtkPrintSettings* _self_, GtkPrintDuplex duplex) {
	gtk_print_settings_set_duplex((GtkPrintSettings *)(_self_), duplex);
}
void _gtk_print_settings_set_finishings(GtkPrintSettings* _self_, gchar* finishings) {
	gtk_print_settings_set_finishings((GtkPrintSettings *)(_self_), (const gchar *)(finishings));
}
void _gtk_print_settings_set_int(GtkPrintSettings* _self_, gchar* key, gint value) {
	gtk_print_settings_set_int((GtkPrintSettings *)(_self_), (const gchar *)(key), value);
}
void _gtk_print_settings_set_length(GtkPrintSettings* _self_, gchar* key, gdouble value, GtkUnit unit) {
	gtk_print_settings_set_length((GtkPrintSettings *)(_self_), (const gchar *)(key), value, unit);
}
void _gtk_print_settings_set_media_type(GtkPrintSettings* _self_, gchar* media_type) {
	gtk_print_settings_set_media_type((GtkPrintSettings *)(_self_), (const gchar *)(media_type));
}
void _gtk_print_settings_set_n_copies(GtkPrintSettings* _self_, gint num_copies) {
	gtk_print_settings_set_n_copies((GtkPrintSettings *)(_self_), num_copies);
}
void _gtk_print_settings_set_number_up(GtkPrintSettings* _self_, gint number_up) {
	gtk_print_settings_set_number_up((GtkPrintSettings *)(_self_), number_up);
}
void _gtk_print_settings_set_number_up_layout(GtkPrintSettings* _self_, GtkNumberUpLayout number_up_layout) {
	gtk_print_settings_set_number_up_layout((GtkPrintSettings *)(_self_), number_up_layout);
}
void _gtk_print_settings_set_orientation(GtkPrintSettings* _self_, GtkPageOrientation orientation) {
	gtk_print_settings_set_orientation((GtkPrintSettings *)(_self_), orientation);
}
void _gtk_print_settings_set_output_bin(GtkPrintSettings* _self_, gchar* output_bin) {
	gtk_print_settings_set_output_bin((GtkPrintSettings *)(_self_), (const gchar *)(output_bin));
}
void _gtk_print_settings_set_page_ranges(GtkPrintSettings* _self_, GtkPageRange* page_ranges, gint num_ranges) {
	gtk_print_settings_set_page_ranges((GtkPrintSettings *)(_self_), (GtkPageRange *)(page_ranges), num_ranges);
}
void _gtk_print_settings_set_page_set(GtkPrintSettings* _self_, GtkPageSet page_set) {
	gtk_print_settings_set_page_set((GtkPrintSettings *)(_self_), page_set);
}
void _gtk_print_settings_set_paper_height(GtkPrintSettings* _self_, gdouble height, GtkUnit unit) {
	gtk_print_settings_set_paper_height((GtkPrintSettings *)(_self_), height, unit);
}
void _gtk_print_settings_set_paper_size(GtkPrintSettings* _self_, GtkPaperSize* paper_size) {
	gtk_print_settings_set_paper_size((GtkPrintSettings *)(_self_), (GtkPaperSize *)(paper_size));
}
void _gtk_print_settings_set_paper_width(GtkPrintSettings* _self_, gdouble width, GtkUnit unit) {
	gtk_print_settings_set_paper_width((GtkPrintSettings *)(_self_), width, unit);
}
void _gtk_print_settings_set_print_pages(GtkPrintSettings* _self_, GtkPrintPages pages) {
	gtk_print_settings_set_print_pages((GtkPrintSettings *)(_self_), pages);
}
void _gtk_print_settings_set_printer(GtkPrintSettings* _self_, gchar* printer) {
	gtk_print_settings_set_printer((GtkPrintSettings *)(_self_), (const gchar *)(printer));
}
void _gtk_print_settings_set_printer_lpi(GtkPrintSettings* _self_, gdouble lpi) {
	gtk_print_settings_set_printer_lpi((GtkPrintSettings *)(_self_), lpi);
}
void _gtk_print_settings_set_quality(GtkPrintSettings* _self_, GtkPrintQuality quality) {
	gtk_print_settings_set_quality((GtkPrintSettings *)(_self_), quality);
}
void _gtk_print_settings_set_resolution(GtkPrintSettings* _self_, gint resolution) {
	gtk_print_settings_set_resolution((GtkPrintSettings *)(_self_), resolution);
}
void _gtk_print_settings_set_resolution_xy(GtkPrintSettings* _self_, gint resolution_x, gint resolution_y) {
	gtk_print_settings_set_resolution_xy((GtkPrintSettings *)(_self_), resolution_x, resolution_y);
}
void _gtk_print_settings_set_reverse(GtkPrintSettings* _self_, gboolean reverse) {
	gtk_print_settings_set_reverse((GtkPrintSettings *)(_self_), reverse);
}
void _gtk_print_settings_set_scale(GtkPrintSettings* _self_, gdouble scale) {
	gtk_print_settings_set_scale((GtkPrintSettings *)(_self_), scale);
}
void _gtk_print_settings_set_use_color(GtkPrintSettings* _self_, gboolean use_color) {
	gtk_print_settings_set_use_color((GtkPrintSettings *)(_self_), use_color);
}
gboolean _gtk_print_settings_to_file(GtkPrintSettings* _self_, gchar* file_name, void* _error_) {
	return gtk_print_settings_to_file((GtkPrintSettings *)(_self_), (const gchar *)(file_name), (GError **)(_error_));
}
void _gtk_print_settings_to_key_file(GtkPrintSettings* _self_, GKeyFile* key_file, gchar* group_name) {
	gtk_print_settings_to_key_file((GtkPrintSettings *)(_self_), (GKeyFile *)(key_file), (const gchar *)(group_name));
}
void _gtk_print_settings_unset(GtkPrintSettings* _self_, gchar* key) {
	gtk_print_settings_unset((GtkPrintSettings *)(_self_), (const gchar *)(key));
}
PangoEllipsizeMode _gtk_progress_bar_get_ellipsize(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_ellipsize((GtkProgressBar *)(_self_));
}
gdouble _gtk_progress_bar_get_fraction(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_fraction((GtkProgressBar *)(_self_));
}
gboolean _gtk_progress_bar_get_inverted(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_inverted((GtkProgressBar *)(_self_));
}
gdouble _gtk_progress_bar_get_pulse_step(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_pulse_step((GtkProgressBar *)(_self_));
}
gboolean _gtk_progress_bar_get_show_text(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_show_text((GtkProgressBar *)(_self_));
}
const gchar * _gtk_progress_bar_get_text(GtkProgressBar* _self_) {
	return gtk_progress_bar_get_text((GtkProgressBar *)(_self_));
}
void _gtk_progress_bar_pulse(GtkProgressBar* _self_) {
	gtk_progress_bar_pulse((GtkProgressBar *)(_self_));
}
void _gtk_progress_bar_set_ellipsize(GtkProgressBar* _self_, PangoEllipsizeMode mode) {
	gtk_progress_bar_set_ellipsize((GtkProgressBar *)(_self_), mode);
}
void _gtk_progress_bar_set_fraction(GtkProgressBar* _self_, gdouble fraction) {
	gtk_progress_bar_set_fraction((GtkProgressBar *)(_self_), fraction);
}
void _gtk_progress_bar_set_inverted(GtkProgressBar* _self_, gboolean inverted) {
	gtk_progress_bar_set_inverted((GtkProgressBar *)(_self_), inverted);
}
void _gtk_progress_bar_set_pulse_step(GtkProgressBar* _self_, gdouble fraction) {
	gtk_progress_bar_set_pulse_step((GtkProgressBar *)(_self_), fraction);
}
void _gtk_progress_bar_set_show_text(GtkProgressBar* _self_, gboolean show_text) {
	gtk_progress_bar_set_show_text((GtkProgressBar *)(_self_), show_text);
}
void _gtk_progress_bar_set_text(GtkProgressBar* _self_, gchar* text) {
	gtk_progress_bar_set_text((GtkProgressBar *)(_self_), (const gchar *)(text));
}
GtkRadioAction * _gtk_radio_action_new(gchar* name, gchar* label, gchar* tooltip, gchar* stock_id, gint value) {
	return gtk_radio_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), value);
}
gint _gtk_radio_action_get_current_value(GtkRadioAction* _self_) {
	return gtk_radio_action_get_current_value((GtkRadioAction *)(_self_));
}
GSList * _gtk_radio_action_get_group(GtkRadioAction* _self_) {
	return gtk_radio_action_get_group((GtkRadioAction *)(_self_));
}
void _gtk_radio_action_join_group(GtkRadioAction* _self_, GtkRadioAction* group_source) {
	gtk_radio_action_join_group((GtkRadioAction *)(_self_), (GtkRadioAction *)(group_source));
}
void _gtk_radio_action_set_current_value(GtkRadioAction* _self_, gint current_value) {
	gtk_radio_action_set_current_value((GtkRadioAction *)(_self_), current_value);
}
void _gtk_radio_action_set_group(GtkRadioAction* _self_, GSList* group) {
	gtk_radio_action_set_group((GtkRadioAction *)(_self_), (GSList *)(group));
}
GtkWidget * _gtk_radio_button_new_with_label(GSList* group, gchar* label) {
	return gtk_radio_button_new_with_label((GSList *)(group), (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_label_from_widget(GtkRadioButton* radio_group_member, gchar* label) {
	return gtk_radio_button_new_with_label_from_widget((GtkRadioButton *)(radio_group_member), (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic(GSList* group, gchar* label) {
	return gtk_radio_button_new_with_mnemonic((GSList *)(group), (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton* radio_group_member, gchar* label) {
	return gtk_radio_button_new_with_mnemonic_from_widget((GtkRadioButton *)(radio_group_member), (const gchar *)(label));
}
GSList * _gtk_radio_button_get_group(GtkRadioButton* _self_) {
	return gtk_radio_button_get_group((GtkRadioButton *)(_self_));
}
void _gtk_radio_button_join_group(GtkRadioButton* _self_, GtkRadioButton* group_source) {
	gtk_radio_button_join_group((GtkRadioButton *)(_self_), (GtkRadioButton *)(group_source));
}
void _gtk_radio_button_set_group(GtkRadioButton* _self_, GSList* group) {
	gtk_radio_button_set_group((GtkRadioButton *)(_self_), (GSList *)(group));
}
GtkWidget * _gtk_radio_menu_item_new_with_label(GSList* group, gchar* label) {
	return gtk_radio_menu_item_new_with_label((GSList *)(group), (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem* group, gchar* label) {
	return gtk_radio_menu_item_new_with_label_from_widget((GtkRadioMenuItem *)(group), (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic(GSList* group, gchar* label) {
	return gtk_radio_menu_item_new_with_mnemonic((GSList *)(group), (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem* group, gchar* label) {
	return gtk_radio_menu_item_new_with_mnemonic_from_widget((GtkRadioMenuItem *)(group), (const gchar *)(label));
}
GSList * _gtk_radio_menu_item_get_group(GtkRadioMenuItem* _self_) {
	return gtk_radio_menu_item_get_group((GtkRadioMenuItem *)(_self_));
}
void _gtk_radio_menu_item_set_group(GtkRadioMenuItem* _self_, GSList* group) {
	gtk_radio_menu_item_set_group((GtkRadioMenuItem *)(_self_), (GSList *)(group));
}
GtkToolItem * _gtk_radio_tool_button_new_from_stock(GSList* group, gchar* stock_id) {
	return gtk_radio_tool_button_new_from_stock((GSList *)(group), (const gchar *)(stock_id));
}
GtkToolItem * _gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton* group, gchar* stock_id) {
	return gtk_radio_tool_button_new_with_stock_from_widget((GtkRadioToolButton *)(group), (const gchar *)(stock_id));
}
GSList * _gtk_radio_tool_button_get_group(GtkRadioToolButton* _self_) {
	return gtk_radio_tool_button_get_group((GtkRadioToolButton *)(_self_));
}
void _gtk_radio_tool_button_set_group(GtkRadioToolButton* _self_, GSList* group) {
	gtk_radio_tool_button_set_group((GtkRadioToolButton *)(_self_), (GSList *)(group));
}
GtkAdjustment * _gtk_range_get_adjustment(GtkRange* _self_) {
	return gtk_range_get_adjustment((GtkRange *)(_self_));
}
gdouble _gtk_range_get_fill_level(GtkRange* _self_) {
	return gtk_range_get_fill_level((GtkRange *)(_self_));
}
gboolean _gtk_range_get_flippable(GtkRange* _self_) {
	return gtk_range_get_flippable((GtkRange *)(_self_));
}
gboolean _gtk_range_get_inverted(GtkRange* _self_) {
	return gtk_range_get_inverted((GtkRange *)(_self_));
}
GtkSensitivityType _gtk_range_get_lower_stepper_sensitivity(GtkRange* _self_) {
	return gtk_range_get_lower_stepper_sensitivity((GtkRange *)(_self_));
}
gint _gtk_range_get_min_slider_size(GtkRange* _self_) {
	return gtk_range_get_min_slider_size((GtkRange *)(_self_));
}
void _gtk_range_get_range_rect(GtkRange* _self_, GdkRectangle* range_rect) {
	gtk_range_get_range_rect((GtkRange *)(_self_), (GdkRectangle *)(range_rect));
}
gboolean _gtk_range_get_restrict_to_fill_level(GtkRange* _self_) {
	return gtk_range_get_restrict_to_fill_level((GtkRange *)(_self_));
}
gint _gtk_range_get_round_digits(GtkRange* _self_) {
	return gtk_range_get_round_digits((GtkRange *)(_self_));
}
gboolean _gtk_range_get_show_fill_level(GtkRange* _self_) {
	return gtk_range_get_show_fill_level((GtkRange *)(_self_));
}
void _gtk_range_get_slider_range(GtkRange* _self_, gint* slider_start, gint* slider_end) {
	gtk_range_get_slider_range((GtkRange *)(_self_), (gint *)(slider_start), (gint *)(slider_end));
}
gboolean _gtk_range_get_slider_size_fixed(GtkRange* _self_) {
	return gtk_range_get_slider_size_fixed((GtkRange *)(_self_));
}
GtkSensitivityType _gtk_range_get_upper_stepper_sensitivity(GtkRange* _self_) {
	return gtk_range_get_upper_stepper_sensitivity((GtkRange *)(_self_));
}
gdouble _gtk_range_get_value(GtkRange* _self_) {
	return gtk_range_get_value((GtkRange *)(_self_));
}
void _gtk_range_set_adjustment(GtkRange* _self_, GtkAdjustment* adjustment) {
	gtk_range_set_adjustment((GtkRange *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_range_set_fill_level(GtkRange* _self_, gdouble fill_level) {
	gtk_range_set_fill_level((GtkRange *)(_self_), fill_level);
}
void _gtk_range_set_flippable(GtkRange* _self_, gboolean flippable) {
	gtk_range_set_flippable((GtkRange *)(_self_), flippable);
}
void _gtk_range_set_increments(GtkRange* _self_, gdouble step, gdouble page) {
	gtk_range_set_increments((GtkRange *)(_self_), step, page);
}
void _gtk_range_set_inverted(GtkRange* _self_, gboolean setting) {
	gtk_range_set_inverted((GtkRange *)(_self_), setting);
}
void _gtk_range_set_lower_stepper_sensitivity(GtkRange* _self_, GtkSensitivityType sensitivity) {
	gtk_range_set_lower_stepper_sensitivity((GtkRange *)(_self_), sensitivity);
}
void _gtk_range_set_min_slider_size(GtkRange* _self_, gint min_size) {
	gtk_range_set_min_slider_size((GtkRange *)(_self_), min_size);
}
void _gtk_range_set_range(GtkRange* _self_, gdouble min, gdouble max) {
	gtk_range_set_range((GtkRange *)(_self_), min, max);
}
void _gtk_range_set_restrict_to_fill_level(GtkRange* _self_, gboolean restrict_to_fill_level) {
	gtk_range_set_restrict_to_fill_level((GtkRange *)(_self_), restrict_to_fill_level);
}
void _gtk_range_set_round_digits(GtkRange* _self_, gint round_digits) {
	gtk_range_set_round_digits((GtkRange *)(_self_), round_digits);
}
void _gtk_range_set_show_fill_level(GtkRange* _self_, gboolean show_fill_level) {
	gtk_range_set_show_fill_level((GtkRange *)(_self_), show_fill_level);
}
void _gtk_range_set_slider_size_fixed(GtkRange* _self_, gboolean size_fixed) {
	gtk_range_set_slider_size_fixed((GtkRange *)(_self_), size_fixed);
}
void _gtk_range_set_upper_stepper_sensitivity(GtkRange* _self_, GtkSensitivityType sensitivity) {
	gtk_range_set_upper_stepper_sensitivity((GtkRange *)(_self_), sensitivity);
}
void _gtk_range_set_value(GtkRange* _self_, gdouble value) {
	gtk_range_set_value((GtkRange *)(_self_), value);
}
GtkAction * _gtk_recent_action_new(gchar* name, gchar* label, gchar* tooltip, gchar* stock_id) {
	return gtk_recent_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new_for_manager(gchar* name, gchar* label, gchar* tooltip, gchar* stock_id, GtkRecentManager* manager) {
	return gtk_recent_action_new_for_manager((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), (GtkRecentManager *)(manager));
}
gboolean _gtk_recent_action_get_show_numbers(GtkRecentAction* _self_) {
	return gtk_recent_action_get_show_numbers((GtkRecentAction *)(_self_));
}
void _gtk_recent_action_set_show_numbers(GtkRecentAction* _self_, gboolean show_numbers) {
	gtk_recent_action_set_show_numbers((GtkRecentAction *)(_self_), show_numbers);
}
gboolean _gtk_recent_chooser_menu_get_show_numbers(GtkRecentChooserMenu* _self_) {
	return gtk_recent_chooser_menu_get_show_numbers((GtkRecentChooserMenu *)(_self_));
}
void _gtk_recent_chooser_menu_set_show_numbers(GtkRecentChooserMenu* _self_, gboolean show_numbers) {
	gtk_recent_chooser_menu_set_show_numbers((GtkRecentChooserMenu *)(_self_), show_numbers);
}
void _gtk_recent_filter_add_age(GtkRecentFilter* _self_, gint days) {
	gtk_recent_filter_add_age((GtkRecentFilter *)(_self_), days);
}
void _gtk_recent_filter_add_application(GtkRecentFilter* _self_, gchar* application) {
	gtk_recent_filter_add_application((GtkRecentFilter *)(_self_), (const gchar *)(application));
}
void _gtk_recent_filter_add_custom(GtkRecentFilter* _self_, GtkRecentFilterFlags needed, GtkRecentFilterFunc func_, gpointer data, GDestroyNotify data_destroy) {
	gtk_recent_filter_add_custom((GtkRecentFilter *)(_self_), needed, func_, data, data_destroy);
}
void _gtk_recent_filter_add_group(GtkRecentFilter* _self_, gchar* group) {
	gtk_recent_filter_add_group((GtkRecentFilter *)(_self_), (const gchar *)(group));
}
void _gtk_recent_filter_add_mime_type(GtkRecentFilter* _self_, gchar* mime_type) {
	gtk_recent_filter_add_mime_type((GtkRecentFilter *)(_self_), (const gchar *)(mime_type));
}
void _gtk_recent_filter_add_pattern(GtkRecentFilter* _self_, gchar* pattern) {
	gtk_recent_filter_add_pattern((GtkRecentFilter *)(_self_), (const gchar *)(pattern));
}
void _gtk_recent_filter_add_pixbuf_formats(GtkRecentFilter* _self_) {
	gtk_recent_filter_add_pixbuf_formats((GtkRecentFilter *)(_self_));
}
gboolean _gtk_recent_filter_filter(GtkRecentFilter* _self_, GtkRecentFilterInfo* filter_info) {
	return gtk_recent_filter_filter((GtkRecentFilter *)(_self_), (const GtkRecentFilterInfo *)(filter_info));
}
const gchar * _gtk_recent_filter_get_name(GtkRecentFilter* _self_) {
	return gtk_recent_filter_get_name((GtkRecentFilter *)(_self_));
}
GtkRecentFilterFlags _gtk_recent_filter_get_needed(GtkRecentFilter* _self_) {
	return gtk_recent_filter_get_needed((GtkRecentFilter *)(_self_));
}
void _gtk_recent_filter_set_name(GtkRecentFilter* _self_, gchar* name) {
	gtk_recent_filter_set_name((GtkRecentFilter *)(_self_), (const gchar *)(name));
}
GAppInfo * _gtk_recent_info_create_app_info(GtkRecentInfo* _self_, gchar* app_name, void* _error_) {
	return gtk_recent_info_create_app_info((GtkRecentInfo *)(_self_), (const gchar *)(app_name), (GError **)(_error_));
}
gboolean _gtk_recent_info_exists(GtkRecentInfo* _self_) {
	return gtk_recent_info_exists((GtkRecentInfo *)(_self_));
}
time_t _gtk_recent_info_get_added(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_added((GtkRecentInfo *)(_self_));
}
gint _gtk_recent_info_get_age(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_age((GtkRecentInfo *)(_self_));
}
gboolean _gtk_recent_info_get_application_info(GtkRecentInfo* _self_, gchar* app_name, void* app_exec, guint* count, time_t* time_) {
	return gtk_recent_info_get_application_info((GtkRecentInfo *)(_self_), (const gchar *)(app_name), (const gchar **)(app_exec), (guint *)(count), (time_t *)(time_));
}
gchar ** _gtk_recent_info_get_applications(GtkRecentInfo* _self_, gsize* length) {
	return gtk_recent_info_get_applications((GtkRecentInfo *)(_self_), (gsize *)(length));
}
const gchar * _gtk_recent_info_get_description(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_description((GtkRecentInfo *)(_self_));
}
const gchar * _gtk_recent_info_get_display_name(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_display_name((GtkRecentInfo *)(_self_));
}
GIcon * _gtk_recent_info_get_gicon(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_gicon((GtkRecentInfo *)(_self_));
}
gchar ** _gtk_recent_info_get_groups(GtkRecentInfo* _self_, gsize* length) {
	return gtk_recent_info_get_groups((GtkRecentInfo *)(_self_), (gsize *)(length));
}
GdkPixbuf * _gtk_recent_info_get_icon(GtkRecentInfo* _self_, gint size) {
	return gtk_recent_info_get_icon((GtkRecentInfo *)(_self_), size);
}
const gchar * _gtk_recent_info_get_mime_type(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_mime_type((GtkRecentInfo *)(_self_));
}
time_t _gtk_recent_info_get_modified(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_modified((GtkRecentInfo *)(_self_));
}
gboolean _gtk_recent_info_get_private_hint(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_private_hint((GtkRecentInfo *)(_self_));
}
gchar * _gtk_recent_info_get_short_name(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_short_name((GtkRecentInfo *)(_self_));
}
const gchar * _gtk_recent_info_get_uri(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_uri((GtkRecentInfo *)(_self_));
}
gchar * _gtk_recent_info_get_uri_display(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_uri_display((GtkRecentInfo *)(_self_));
}
time_t _gtk_recent_info_get_visited(GtkRecentInfo* _self_) {
	return gtk_recent_info_get_visited((GtkRecentInfo *)(_self_));
}
gboolean _gtk_recent_info_has_application(GtkRecentInfo* _self_, gchar* app_name) {
	return gtk_recent_info_has_application((GtkRecentInfo *)(_self_), (const gchar *)(app_name));
}
gboolean _gtk_recent_info_has_group(GtkRecentInfo* _self_, gchar* group_name) {
	return gtk_recent_info_has_group((GtkRecentInfo *)(_self_), (const gchar *)(group_name));
}
gboolean _gtk_recent_info_is_local(GtkRecentInfo* _self_) {
	return gtk_recent_info_is_local((GtkRecentInfo *)(_self_));
}
gchar * _gtk_recent_info_last_application(GtkRecentInfo* _self_) {
	return gtk_recent_info_last_application((GtkRecentInfo *)(_self_));
}
gboolean _gtk_recent_info_match(GtkRecentInfo* _self_, GtkRecentInfo* info_b) {
	return gtk_recent_info_match((GtkRecentInfo *)(_self_), (GtkRecentInfo *)(info_b));
}
GtkRecentInfo * _gtk_recent_info_ref(GtkRecentInfo* _self_) {
	return gtk_recent_info_ref((GtkRecentInfo *)(_self_));
}
void _gtk_recent_info_unref(GtkRecentInfo* _self_) {
	gtk_recent_info_unref((GtkRecentInfo *)(_self_));
}
gboolean _gtk_recent_manager_add_full(GtkRecentManager* _self_, gchar* uri, GtkRecentData* recent_data) {
	return gtk_recent_manager_add_full((GtkRecentManager *)(_self_), (const gchar *)(uri), (const GtkRecentData *)(recent_data));
}
gboolean _gtk_recent_manager_add_item(GtkRecentManager* _self_, gchar* uri) {
	return gtk_recent_manager_add_item((GtkRecentManager *)(_self_), (const gchar *)(uri));
}
GList * _gtk_recent_manager_get_items(GtkRecentManager* _self_) {
	return gtk_recent_manager_get_items((GtkRecentManager *)(_self_));
}
gboolean _gtk_recent_manager_has_item(GtkRecentManager* _self_, gchar* uri) {
	return gtk_recent_manager_has_item((GtkRecentManager *)(_self_), (const gchar *)(uri));
}
GtkRecentInfo * _gtk_recent_manager_lookup_item(GtkRecentManager* _self_, gchar* uri, void* _error_) {
	return gtk_recent_manager_lookup_item((GtkRecentManager *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
gboolean _gtk_recent_manager_move_item(GtkRecentManager* _self_, gchar* uri, gchar* new_uri, void* _error_) {
	return gtk_recent_manager_move_item((GtkRecentManager *)(_self_), (const gchar *)(uri), (const gchar *)(new_uri), (GError **)(_error_));
}
gint _gtk_recent_manager_purge_items(GtkRecentManager* _self_, void* _error_) {
	return gtk_recent_manager_purge_items((GtkRecentManager *)(_self_), (GError **)(_error_));
}
gboolean _gtk_recent_manager_remove_item(GtkRecentManager* _self_, gchar* uri, void* _error_) {
	return gtk_recent_manager_remove_item((GtkRecentManager *)(_self_), (const gchar *)(uri), (GError **)(_error_));
}
GtkRequisition * _gtk_requisition_copy(GtkRequisition* _self_) {
	return gtk_requisition_copy((const GtkRequisition *)(_self_));
}
void _gtk_requisition_free(GtkRequisition* _self_) {
	gtk_requisition_free((GtkRequisition *)(_self_));
}
void _gtk_scale_add_mark(GtkScale* _self_, gdouble value, GtkPositionType position, gchar* markup) {
	gtk_scale_add_mark((GtkScale *)(_self_), value, position, (const gchar *)(markup));
}
void _gtk_scale_clear_marks(GtkScale* _self_) {
	gtk_scale_clear_marks((GtkScale *)(_self_));
}
gint _gtk_scale_get_digits(GtkScale* _self_) {
	return gtk_scale_get_digits((GtkScale *)(_self_));
}
gboolean _gtk_scale_get_draw_value(GtkScale* _self_) {
	return gtk_scale_get_draw_value((GtkScale *)(_self_));
}
gboolean _gtk_scale_get_has_origin(GtkScale* _self_) {
	return gtk_scale_get_has_origin((GtkScale *)(_self_));
}
PangoLayout * _gtk_scale_get_layout(GtkScale* _self_) {
	return gtk_scale_get_layout((GtkScale *)(_self_));
}
void _gtk_scale_get_layout_offsets(GtkScale* _self_, gint* x, gint* y) {
	gtk_scale_get_layout_offsets((GtkScale *)(_self_), (gint *)(x), (gint *)(y));
}
GtkPositionType _gtk_scale_get_value_pos(GtkScale* _self_) {
	return gtk_scale_get_value_pos((GtkScale *)(_self_));
}
void _gtk_scale_set_digits(GtkScale* _self_, gint digits) {
	gtk_scale_set_digits((GtkScale *)(_self_), digits);
}
void _gtk_scale_set_draw_value(GtkScale* _self_, gboolean draw_value) {
	gtk_scale_set_draw_value((GtkScale *)(_self_), draw_value);
}
void _gtk_scale_set_has_origin(GtkScale* _self_, gboolean has_origin) {
	gtk_scale_set_has_origin((GtkScale *)(_self_), has_origin);
}
void _gtk_scale_set_value_pos(GtkScale* _self_, GtkPositionType pos) {
	gtk_scale_set_value_pos((GtkScale *)(_self_), pos);
}
GtkWidget * _gtk_scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, void* icons) {
	return gtk_scale_button_new(size, min, max, step, (const gchar **)(icons));
}
GtkAdjustment * _gtk_scale_button_get_adjustment(GtkScaleButton* _self_) {
	return gtk_scale_button_get_adjustment((GtkScaleButton *)(_self_));
}
GtkWidget * _gtk_scale_button_get_minus_button(GtkScaleButton* _self_) {
	return gtk_scale_button_get_minus_button((GtkScaleButton *)(_self_));
}
GtkWidget * _gtk_scale_button_get_plus_button(GtkScaleButton* _self_) {
	return gtk_scale_button_get_plus_button((GtkScaleButton *)(_self_));
}
GtkWidget * _gtk_scale_button_get_popup(GtkScaleButton* _self_) {
	return gtk_scale_button_get_popup((GtkScaleButton *)(_self_));
}
gdouble _gtk_scale_button_get_value(GtkScaleButton* _self_) {
	return gtk_scale_button_get_value((GtkScaleButton *)(_self_));
}
void _gtk_scale_button_set_adjustment(GtkScaleButton* _self_, GtkAdjustment* adjustment) {
	gtk_scale_button_set_adjustment((GtkScaleButton *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_scale_button_set_icons(GtkScaleButton* _self_, void* icons) {
	gtk_scale_button_set_icons((GtkScaleButton *)(_self_), (const gchar **)(icons));
}
void _gtk_scale_button_set_value(GtkScaleButton* _self_, gdouble value) {
	gtk_scale_button_set_value((GtkScaleButton *)(_self_), value);
}
void _gtk_scrolled_window_add_with_viewport(GtkScrolledWindow* _self_, GtkWidget* child) {
	gtk_scrolled_window_add_with_viewport((GtkScrolledWindow *)(_self_), (GtkWidget *)(child));
}
gboolean _gtk_scrolled_window_get_capture_button_press(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_capture_button_press((GtkScrolledWindow *)(_self_));
}
GtkAdjustment * _gtk_scrolled_window_get_hadjustment(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_hadjustment((GtkScrolledWindow *)(_self_));
}
GtkWidget * _gtk_scrolled_window_get_hscrollbar(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_hscrollbar((GtkScrolledWindow *)(_self_));
}
gboolean _gtk_scrolled_window_get_kinetic_scrolling(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_kinetic_scrolling((GtkScrolledWindow *)(_self_));
}
gint _gtk_scrolled_window_get_min_content_height(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_min_content_height((GtkScrolledWindow *)(_self_));
}
gint _gtk_scrolled_window_get_min_content_width(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_min_content_width((GtkScrolledWindow *)(_self_));
}
GtkCornerType _gtk_scrolled_window_get_placement(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_placement((GtkScrolledWindow *)(_self_));
}
void _gtk_scrolled_window_get_policy(GtkScrolledWindow* _self_, GtkPolicyType* hscrollbar_policy, GtkPolicyType* vscrollbar_policy) {
	gtk_scrolled_window_get_policy((GtkScrolledWindow *)(_self_), (GtkPolicyType *)(hscrollbar_policy), (GtkPolicyType *)(vscrollbar_policy));
}
GtkShadowType _gtk_scrolled_window_get_shadow_type(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_shadow_type((GtkScrolledWindow *)(_self_));
}
GtkAdjustment * _gtk_scrolled_window_get_vadjustment(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_vadjustment((GtkScrolledWindow *)(_self_));
}
GtkWidget * _gtk_scrolled_window_get_vscrollbar(GtkScrolledWindow* _self_) {
	return gtk_scrolled_window_get_vscrollbar((GtkScrolledWindow *)(_self_));
}
void _gtk_scrolled_window_set_capture_button_press(GtkScrolledWindow* _self_, gboolean capture_button_press) {
	gtk_scrolled_window_set_capture_button_press((GtkScrolledWindow *)(_self_), capture_button_press);
}
void _gtk_scrolled_window_set_hadjustment(GtkScrolledWindow* _self_, GtkAdjustment* hadjustment) {
	gtk_scrolled_window_set_hadjustment((GtkScrolledWindow *)(_self_), (GtkAdjustment *)(hadjustment));
}
void _gtk_scrolled_window_set_kinetic_scrolling(GtkScrolledWindow* _self_, gboolean kinetic_scrolling) {
	gtk_scrolled_window_set_kinetic_scrolling((GtkScrolledWindow *)(_self_), kinetic_scrolling);
}
void _gtk_scrolled_window_set_min_content_height(GtkScrolledWindow* _self_, gint height) {
	gtk_scrolled_window_set_min_content_height((GtkScrolledWindow *)(_self_), height);
}
void _gtk_scrolled_window_set_min_content_width(GtkScrolledWindow* _self_, gint width) {
	gtk_scrolled_window_set_min_content_width((GtkScrolledWindow *)(_self_), width);
}
void _gtk_scrolled_window_set_placement(GtkScrolledWindow* _self_, GtkCornerType window_placement) {
	gtk_scrolled_window_set_placement((GtkScrolledWindow *)(_self_), window_placement);
}
void _gtk_scrolled_window_set_policy(GtkScrolledWindow* _self_, GtkPolicyType hscrollbar_policy, GtkPolicyType vscrollbar_policy) {
	gtk_scrolled_window_set_policy((GtkScrolledWindow *)(_self_), hscrollbar_policy, vscrollbar_policy);
}
void _gtk_scrolled_window_set_shadow_type(GtkScrolledWindow* _self_, GtkShadowType type_) {
	gtk_scrolled_window_set_shadow_type((GtkScrolledWindow *)(_self_), type_);
}
void _gtk_scrolled_window_set_vadjustment(GtkScrolledWindow* _self_, GtkAdjustment* vadjustment) {
	gtk_scrolled_window_set_vadjustment((GtkScrolledWindow *)(_self_), (GtkAdjustment *)(vadjustment));
}
void _gtk_scrolled_window_unset_placement(GtkScrolledWindow* _self_) {
	gtk_scrolled_window_unset_placement((GtkScrolledWindow *)(_self_));
}
GtkSelectionData * _gtk_selection_data_copy(GtkSelectionData* _self_) {
	return gtk_selection_data_copy((const GtkSelectionData *)(_self_));
}
void _gtk_selection_data_free(GtkSelectionData* _self_) {
	gtk_selection_data_free((GtkSelectionData *)(_self_));
}
const guchar * _gtk_selection_data_get_data(GtkSelectionData* _self_) {
	return gtk_selection_data_get_data((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_data_type(GtkSelectionData* _self_) {
	return gtk_selection_data_get_data_type((const GtkSelectionData *)(_self_));
}
const guchar * _gtk_selection_data_get_data_with_length(GtkSelectionData* _self_, gint* length) {
	return gtk_selection_data_get_data_with_length((const GtkSelectionData *)(_self_), (gint *)(length));
}
GdkDisplay * _gtk_selection_data_get_display(GtkSelectionData* _self_) {
	return gtk_selection_data_get_display((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_format(GtkSelectionData* _self_) {
	return gtk_selection_data_get_format((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_length(GtkSelectionData* _self_) {
	return gtk_selection_data_get_length((const GtkSelectionData *)(_self_));
}
GdkPixbuf * _gtk_selection_data_get_pixbuf(GtkSelectionData* _self_) {
	return gtk_selection_data_get_pixbuf((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_selection(GtkSelectionData* _self_) {
	return gtk_selection_data_get_selection((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_target(GtkSelectionData* _self_) {
	return gtk_selection_data_get_target((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_get_targets(GtkSelectionData* _self_, void* targets, gint* n_atoms) {
	return gtk_selection_data_get_targets((const GtkSelectionData *)(_self_), (GdkAtom **)(targets), (gint *)(n_atoms));
}
guchar * _gtk_selection_data_get_text(GtkSelectionData* _self_) {
	return gtk_selection_data_get_text((const GtkSelectionData *)(_self_));
}
gchar ** _gtk_selection_data_get_uris(GtkSelectionData* _self_) {
	return gtk_selection_data_get_uris((const GtkSelectionData *)(_self_));
}
void _gtk_selection_data_set(GtkSelectionData* _self_, GdkAtom type_, gint format, guchar* data, gint length) {
	gtk_selection_data_set((GtkSelectionData *)(_self_), type_, format, (const guchar *)(data), length);
}
gboolean _gtk_selection_data_set_pixbuf(GtkSelectionData* _self_, GdkPixbuf* pixbuf) {
	return gtk_selection_data_set_pixbuf((GtkSelectionData *)(_self_), (GdkPixbuf *)(pixbuf));
}
gboolean _gtk_selection_data_set_text(GtkSelectionData* _self_, gchar* str, gint len_) {
	return gtk_selection_data_set_text((GtkSelectionData *)(_self_), (const gchar *)(str), len_);
}
gboolean _gtk_selection_data_set_uris(GtkSelectionData* _self_, void* uris) {
	return gtk_selection_data_set_uris((GtkSelectionData *)(_self_), (gchar **)(uris));
}
gboolean _gtk_selection_data_targets_include_image(GtkSelectionData* _self_, gboolean writable) {
	return gtk_selection_data_targets_include_image((const GtkSelectionData *)(_self_), writable);
}
gboolean _gtk_selection_data_targets_include_rich_text(GtkSelectionData* _self_, GtkTextBuffer* buffer) {
	return gtk_selection_data_targets_include_rich_text((const GtkSelectionData *)(_self_), (GtkTextBuffer *)(buffer));
}
gboolean _gtk_selection_data_targets_include_text(GtkSelectionData* _self_) {
	return gtk_selection_data_targets_include_text((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_targets_include_uri(GtkSelectionData* _self_) {
	return gtk_selection_data_targets_include_uri((const GtkSelectionData *)(_self_));
}
gboolean _gtk_separator_tool_item_get_draw(GtkSeparatorToolItem* _self_) {
	return gtk_separator_tool_item_get_draw((GtkSeparatorToolItem *)(_self_));
}
void _gtk_separator_tool_item_set_draw(GtkSeparatorToolItem* _self_, gboolean draw) {
	gtk_separator_tool_item_set_draw((GtkSeparatorToolItem *)(_self_), draw);
}
void _gtk_settings_set_double_property(GtkSettings* _self_, gchar* name, gdouble v_double, gchar* origin) {
	gtk_settings_set_double_property((GtkSettings *)(_self_), (const gchar *)(name), v_double, (const gchar *)(origin));
}
void _gtk_settings_set_long_property(GtkSettings* _self_, gchar* name, glong v_long, gchar* origin) {
	gtk_settings_set_long_property((GtkSettings *)(_self_), (const gchar *)(name), v_long, (const gchar *)(origin));
}
void _gtk_settings_set_property_value(GtkSettings* _self_, gchar* name, GtkSettingsValue* svalue) {
	gtk_settings_set_property_value((GtkSettings *)(_self_), (const gchar *)(name), (const GtkSettingsValue *)(svalue));
}
void _gtk_settings_set_string_property(GtkSettings* _self_, gchar* name, gchar* v_string, gchar* origin) {
	gtk_settings_set_string_property((GtkSettings *)(_self_), (const gchar *)(name), (const gchar *)(v_string), (const gchar *)(origin));
}
void _gtk_size_group_add_widget(GtkSizeGroup* _self_, GtkWidget* widget) {
	gtk_size_group_add_widget((GtkSizeGroup *)(_self_), (GtkWidget *)(widget));
}
gboolean _gtk_size_group_get_ignore_hidden(GtkSizeGroup* _self_) {
	return gtk_size_group_get_ignore_hidden((GtkSizeGroup *)(_self_));
}
GtkSizeGroupMode _gtk_size_group_get_mode(GtkSizeGroup* _self_) {
	return gtk_size_group_get_mode((GtkSizeGroup *)(_self_));
}
GSList * _gtk_size_group_get_widgets(GtkSizeGroup* _self_) {
	return gtk_size_group_get_widgets((GtkSizeGroup *)(_self_));
}
void _gtk_size_group_remove_widget(GtkSizeGroup* _self_, GtkWidget* widget) {
	gtk_size_group_remove_widget((GtkSizeGroup *)(_self_), (GtkWidget *)(widget));
}
void _gtk_size_group_set_ignore_hidden(GtkSizeGroup* _self_, gboolean ignore_hidden) {
	gtk_size_group_set_ignore_hidden((GtkSizeGroup *)(_self_), ignore_hidden);
}
void _gtk_size_group_set_mode(GtkSizeGroup* _self_, GtkSizeGroupMode mode) {
	gtk_size_group_set_mode((GtkSizeGroup *)(_self_), mode);
}
void _gtk_socket_add_id(GtkSocket* _self_, Window window) {
	gtk_socket_add_id((GtkSocket *)(_self_), window);
}
Window _gtk_socket_get_id(GtkSocket* _self_) {
	return gtk_socket_get_id((GtkSocket *)(_self_));
}
GdkWindow * _gtk_socket_get_plug_window(GtkSocket* _self_) {
	return gtk_socket_get_plug_window((GtkSocket *)(_self_));
}
void _gtk_spin_button_configure(GtkSpinButton* _self_, GtkAdjustment* adjustment, gdouble climb_rate, guint digits) {
	gtk_spin_button_configure((GtkSpinButton *)(_self_), (GtkAdjustment *)(adjustment), climb_rate, digits);
}
GtkAdjustment * _gtk_spin_button_get_adjustment(GtkSpinButton* _self_) {
	return gtk_spin_button_get_adjustment((GtkSpinButton *)(_self_));
}
guint _gtk_spin_button_get_digits(GtkSpinButton* _self_) {
	return gtk_spin_button_get_digits((GtkSpinButton *)(_self_));
}
void _gtk_spin_button_get_increments(GtkSpinButton* _self_, gdouble* step, gdouble* page) {
	gtk_spin_button_get_increments((GtkSpinButton *)(_self_), (gdouble *)(step), (gdouble *)(page));
}
gboolean _gtk_spin_button_get_numeric(GtkSpinButton* _self_) {
	return gtk_spin_button_get_numeric((GtkSpinButton *)(_self_));
}
void _gtk_spin_button_get_range(GtkSpinButton* _self_, gdouble* min, gdouble* max) {
	gtk_spin_button_get_range((GtkSpinButton *)(_self_), (gdouble *)(min), (gdouble *)(max));
}
gboolean _gtk_spin_button_get_snap_to_ticks(GtkSpinButton* _self_) {
	return gtk_spin_button_get_snap_to_ticks((GtkSpinButton *)(_self_));
}
GtkSpinButtonUpdatePolicy _gtk_spin_button_get_update_policy(GtkSpinButton* _self_) {
	return gtk_spin_button_get_update_policy((GtkSpinButton *)(_self_));
}
gdouble _gtk_spin_button_get_value(GtkSpinButton* _self_) {
	return gtk_spin_button_get_value((GtkSpinButton *)(_self_));
}
gint _gtk_spin_button_get_value_as_int(GtkSpinButton* _self_) {
	return gtk_spin_button_get_value_as_int((GtkSpinButton *)(_self_));
}
gboolean _gtk_spin_button_get_wrap(GtkSpinButton* _self_) {
	return gtk_spin_button_get_wrap((GtkSpinButton *)(_self_));
}
void _gtk_spin_button_set_adjustment(GtkSpinButton* _self_, GtkAdjustment* adjustment) {
	gtk_spin_button_set_adjustment((GtkSpinButton *)(_self_), (GtkAdjustment *)(adjustment));
}
void _gtk_spin_button_set_digits(GtkSpinButton* _self_, guint digits) {
	gtk_spin_button_set_digits((GtkSpinButton *)(_self_), digits);
}
void _gtk_spin_button_set_increments(GtkSpinButton* _self_, gdouble step, gdouble page) {
	gtk_spin_button_set_increments((GtkSpinButton *)(_self_), step, page);
}
void _gtk_spin_button_set_numeric(GtkSpinButton* _self_, gboolean numeric) {
	gtk_spin_button_set_numeric((GtkSpinButton *)(_self_), numeric);
}
void _gtk_spin_button_set_range(GtkSpinButton* _self_, gdouble min, gdouble max) {
	gtk_spin_button_set_range((GtkSpinButton *)(_self_), min, max);
}
void _gtk_spin_button_set_snap_to_ticks(GtkSpinButton* _self_, gboolean snap_to_ticks) {
	gtk_spin_button_set_snap_to_ticks((GtkSpinButton *)(_self_), snap_to_ticks);
}
void _gtk_spin_button_set_update_policy(GtkSpinButton* _self_, GtkSpinButtonUpdatePolicy policy) {
	gtk_spin_button_set_update_policy((GtkSpinButton *)(_self_), policy);
}
void _gtk_spin_button_set_value(GtkSpinButton* _self_, gdouble value) {
	gtk_spin_button_set_value((GtkSpinButton *)(_self_), value);
}
void _gtk_spin_button_set_wrap(GtkSpinButton* _self_, gboolean wrap) {
	gtk_spin_button_set_wrap((GtkSpinButton *)(_self_), wrap);
}
void _gtk_spin_button_spin(GtkSpinButton* _self_, GtkSpinType direction, gdouble increment) {
	gtk_spin_button_spin((GtkSpinButton *)(_self_), direction, increment);
}
void _gtk_spin_button_update(GtkSpinButton* _self_) {
	gtk_spin_button_update((GtkSpinButton *)(_self_));
}
void _gtk_spinner_start(GtkSpinner* _self_) {
	gtk_spinner_start((GtkSpinner *)(_self_));
}
void _gtk_spinner_stop(GtkSpinner* _self_) {
	gtk_spinner_stop((GtkSpinner *)(_self_));
}
GtkStatusIcon * _gtk_status_icon_new_from_icon_name(gchar* icon_name) {
	return gtk_status_icon_new_from_icon_name((const gchar *)(icon_name));
}
GtkStatusIcon * _gtk_status_icon_new_from_stock(gchar* stock_id) {
	return gtk_status_icon_new_from_stock((const gchar *)(stock_id));
}
gboolean _gtk_status_icon_get_geometry(GtkStatusIcon* _self_, void* screen, GdkRectangle* area, GtkOrientation* orientation) {
	return gtk_status_icon_get_geometry((GtkStatusIcon *)(_self_), (GdkScreen **)(screen), (GdkRectangle *)(area), (GtkOrientation *)(orientation));
}
GIcon * _gtk_status_icon_get_gicon(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_gicon((GtkStatusIcon *)(_self_));
}
gboolean _gtk_status_icon_get_has_tooltip(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_has_tooltip((GtkStatusIcon *)(_self_));
}
const gchar * _gtk_status_icon_get_icon_name(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_icon_name((GtkStatusIcon *)(_self_));
}
GdkPixbuf * _gtk_status_icon_get_pixbuf(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_pixbuf((GtkStatusIcon *)(_self_));
}
GdkScreen * _gtk_status_icon_get_screen(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_screen((GtkStatusIcon *)(_self_));
}
gint _gtk_status_icon_get_size(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_size((GtkStatusIcon *)(_self_));
}
const gchar * _gtk_status_icon_get_stock(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_stock((GtkStatusIcon *)(_self_));
}
GtkImageType _gtk_status_icon_get_storage_type(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_storage_type((GtkStatusIcon *)(_self_));
}
const gchar * _gtk_status_icon_get_title(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_title((GtkStatusIcon *)(_self_));
}
gchar * _gtk_status_icon_get_tooltip_markup(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_tooltip_markup((GtkStatusIcon *)(_self_));
}
gchar * _gtk_status_icon_get_tooltip_text(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_tooltip_text((GtkStatusIcon *)(_self_));
}
gboolean _gtk_status_icon_get_visible(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_visible((GtkStatusIcon *)(_self_));
}
guint32 _gtk_status_icon_get_x11_window_id(GtkStatusIcon* _self_) {
	return gtk_status_icon_get_x11_window_id((GtkStatusIcon *)(_self_));
}
gboolean _gtk_status_icon_is_embedded(GtkStatusIcon* _self_) {
	return gtk_status_icon_is_embedded((GtkStatusIcon *)(_self_));
}
void _gtk_status_icon_set_from_file(GtkStatusIcon* _self_, gchar* filename) {
	gtk_status_icon_set_from_file((GtkStatusIcon *)(_self_), (const gchar *)(filename));
}
void _gtk_status_icon_set_from_gicon(GtkStatusIcon* _self_, GIcon* icon) {
	gtk_status_icon_set_from_gicon((GtkStatusIcon *)(_self_), (GIcon *)(icon));
}
void _gtk_status_icon_set_from_icon_name(GtkStatusIcon* _self_, gchar* icon_name) {
	gtk_status_icon_set_from_icon_name((GtkStatusIcon *)(_self_), (const gchar *)(icon_name));
}
void _gtk_status_icon_set_from_pixbuf(GtkStatusIcon* _self_, GdkPixbuf* pixbuf) {
	gtk_status_icon_set_from_pixbuf((GtkStatusIcon *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_status_icon_set_from_stock(GtkStatusIcon* _self_, gchar* stock_id) {
	gtk_status_icon_set_from_stock((GtkStatusIcon *)(_self_), (const gchar *)(stock_id));
}
void _gtk_status_icon_set_has_tooltip(GtkStatusIcon* _self_, gboolean has_tooltip) {
	gtk_status_icon_set_has_tooltip((GtkStatusIcon *)(_self_), has_tooltip);
}
void _gtk_status_icon_set_name(GtkStatusIcon* _self_, gchar* name) {
	gtk_status_icon_set_name((GtkStatusIcon *)(_self_), (const gchar *)(name));
}
void _gtk_status_icon_set_screen(GtkStatusIcon* _self_, GdkScreen* screen) {
	gtk_status_icon_set_screen((GtkStatusIcon *)(_self_), (GdkScreen *)(screen));
}
void _gtk_status_icon_set_title(GtkStatusIcon* _self_, gchar* title) {
	gtk_status_icon_set_title((GtkStatusIcon *)(_self_), (const gchar *)(title));
}
void _gtk_status_icon_set_tooltip_markup(GtkStatusIcon* _self_, gchar* markup) {
	gtk_status_icon_set_tooltip_markup((GtkStatusIcon *)(_self_), (const gchar *)(markup));
}
void _gtk_status_icon_set_tooltip_text(GtkStatusIcon* _self_, gchar* text) {
	gtk_status_icon_set_tooltip_text((GtkStatusIcon *)(_self_), (const gchar *)(text));
}
void _gtk_status_icon_set_visible(GtkStatusIcon* _self_, gboolean visible) {
	gtk_status_icon_set_visible((GtkStatusIcon *)(_self_), visible);
}
guint _gtk_statusbar_get_context_id(GtkStatusbar* _self_, gchar* context_description) {
	return gtk_statusbar_get_context_id((GtkStatusbar *)(_self_), (const gchar *)(context_description));
}
GtkWidget * _gtk_statusbar_get_message_area(GtkStatusbar* _self_) {
	return gtk_statusbar_get_message_area((GtkStatusbar *)(_self_));
}
void _gtk_statusbar_pop(GtkStatusbar* _self_, guint context_id) {
	gtk_statusbar_pop((GtkStatusbar *)(_self_), context_id);
}
guint _gtk_statusbar_push(GtkStatusbar* _self_, guint context_id, gchar* text) {
	return gtk_statusbar_push((GtkStatusbar *)(_self_), context_id, (const gchar *)(text));
}
void _gtk_statusbar_remove(GtkStatusbar* _self_, guint context_id, guint message_id) {
	gtk_statusbar_remove((GtkStatusbar *)(_self_), context_id, message_id);
}
void _gtk_statusbar_remove_all(GtkStatusbar* _self_, guint context_id) {
	gtk_statusbar_remove_all((GtkStatusbar *)(_self_), context_id);
}
GtkStockItem * _gtk_stock_item_copy(GtkStockItem* _self_) {
	return gtk_stock_item_copy((const GtkStockItem *)(_self_));
}
void _gtk_stock_item_free(GtkStockItem* _self_) {
	gtk_stock_item_free((GtkStockItem *)(_self_));
}
gboolean _gtk_style_has_context(GtkStyle* _self_) {
	return gtk_style_has_context((GtkStyle *)(_self_));
}
void _gtk_style_context_add_class(GtkStyleContext* _self_, gchar* class_name) {
	gtk_style_context_add_class((GtkStyleContext *)(_self_), (const gchar *)(class_name));
}
void _gtk_style_context_add_provider(GtkStyleContext* _self_, GtkStyleProvider* provider, guint priority) {
	gtk_style_context_add_provider((GtkStyleContext *)(_self_), (GtkStyleProvider *)(provider), priority);
}
void _gtk_style_context_add_region(GtkStyleContext* _self_, gchar* region_name, GtkRegionFlags flags) {
	gtk_style_context_add_region((GtkStyleContext *)(_self_), (const gchar *)(region_name), flags);
}
void _gtk_style_context_get_background_color(GtkStyleContext* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_style_context_get_background_color((GtkStyleContext *)(_self_), state, (GdkRGBA *)(color));
}
void _gtk_style_context_get_border(GtkStyleContext* _self_, GtkStateFlags state, GtkBorder* border) {
	gtk_style_context_get_border((GtkStyleContext *)(_self_), state, (GtkBorder *)(border));
}
void _gtk_style_context_get_border_color(GtkStyleContext* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_style_context_get_border_color((GtkStyleContext *)(_self_), state, (GdkRGBA *)(color));
}
void _gtk_style_context_get_color(GtkStyleContext* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_style_context_get_color((GtkStyleContext *)(_self_), state, (GdkRGBA *)(color));
}
GtkTextDirection _gtk_style_context_get_direction(GtkStyleContext* _self_) {
	return gtk_style_context_get_direction((GtkStyleContext *)(_self_));
}
const PangoFontDescription * _gtk_style_context_get_font(GtkStyleContext* _self_, GtkStateFlags state) {
	return gtk_style_context_get_font((GtkStyleContext *)(_self_), state);
}
GtkJunctionSides _gtk_style_context_get_junction_sides(GtkStyleContext* _self_) {
	return gtk_style_context_get_junction_sides((GtkStyleContext *)(_self_));
}
void _gtk_style_context_get_margin(GtkStyleContext* _self_, GtkStateFlags state, GtkBorder* margin) {
	gtk_style_context_get_margin((GtkStyleContext *)(_self_), state, (GtkBorder *)(margin));
}
void _gtk_style_context_get_padding(GtkStyleContext* _self_, GtkStateFlags state, GtkBorder* padding) {
	gtk_style_context_get_padding((GtkStyleContext *)(_self_), state, (GtkBorder *)(padding));
}
GtkStyleContext * _gtk_style_context_get_parent(GtkStyleContext* _self_) {
	return gtk_style_context_get_parent((GtkStyleContext *)(_self_));
}
const GtkWidgetPath * _gtk_style_context_get_path(GtkStyleContext* _self_) {
	return gtk_style_context_get_path((GtkStyleContext *)(_self_));
}
void _gtk_style_context_get_property(GtkStyleContext* _self_, gchar* property, GtkStateFlags state, GValue* value) {
	gtk_style_context_get_property((GtkStyleContext *)(_self_), (const gchar *)(property), state, (GValue *)(value));
}
GdkScreen * _gtk_style_context_get_screen(GtkStyleContext* _self_) {
	return gtk_style_context_get_screen((GtkStyleContext *)(_self_));
}
GtkCssSection * _gtk_style_context_get_section(GtkStyleContext* _self_, gchar* property) {
	return gtk_style_context_get_section((GtkStyleContext *)(_self_), (const gchar *)(property));
}
GtkStateFlags _gtk_style_context_get_state(GtkStyleContext* _self_) {
	return gtk_style_context_get_state((GtkStyleContext *)(_self_));
}
void _gtk_style_context_get_style_property(GtkStyleContext* _self_, gchar* property_name, GValue* value) {
	gtk_style_context_get_style_property((GtkStyleContext *)(_self_), (const gchar *)(property_name), (GValue *)(value));
}
gboolean _gtk_style_context_has_class(GtkStyleContext* _self_, gchar* class_name) {
	return gtk_style_context_has_class((GtkStyleContext *)(_self_), (const gchar *)(class_name));
}
gboolean _gtk_style_context_has_region(GtkStyleContext* _self_, gchar* region_name, GtkRegionFlags* flags_return) {
	return gtk_style_context_has_region((GtkStyleContext *)(_self_), (const gchar *)(region_name), (GtkRegionFlags *)(flags_return));
}
void _gtk_style_context_invalidate(GtkStyleContext* _self_) {
	gtk_style_context_invalidate((GtkStyleContext *)(_self_));
}
GList * _gtk_style_context_list_classes(GtkStyleContext* _self_) {
	return gtk_style_context_list_classes((GtkStyleContext *)(_self_));
}
GList * _gtk_style_context_list_regions(GtkStyleContext* _self_) {
	return gtk_style_context_list_regions((GtkStyleContext *)(_self_));
}
gboolean _gtk_style_context_lookup_color(GtkStyleContext* _self_, gchar* color_name, GdkRGBA* color) {
	return gtk_style_context_lookup_color((GtkStyleContext *)(_self_), (const gchar *)(color_name), (GdkRGBA *)(color));
}
GtkIconSet * _gtk_style_context_lookup_icon_set(GtkStyleContext* _self_, gchar* stock_id) {
	return gtk_style_context_lookup_icon_set((GtkStyleContext *)(_self_), (const gchar *)(stock_id));
}
void _gtk_style_context_remove_class(GtkStyleContext* _self_, gchar* class_name) {
	gtk_style_context_remove_class((GtkStyleContext *)(_self_), (const gchar *)(class_name));
}
void _gtk_style_context_remove_provider(GtkStyleContext* _self_, GtkStyleProvider* provider) {
	gtk_style_context_remove_provider((GtkStyleContext *)(_self_), (GtkStyleProvider *)(provider));
}
void _gtk_style_context_remove_region(GtkStyleContext* _self_, gchar* region_name) {
	gtk_style_context_remove_region((GtkStyleContext *)(_self_), (const gchar *)(region_name));
}
void _gtk_style_context_restore(GtkStyleContext* _self_) {
	gtk_style_context_restore((GtkStyleContext *)(_self_));
}
void _gtk_style_context_save(GtkStyleContext* _self_) {
	gtk_style_context_save((GtkStyleContext *)(_self_));
}
void _gtk_style_context_set_background(GtkStyleContext* _self_, GdkWindow* window) {
	gtk_style_context_set_background((GtkStyleContext *)(_self_), (GdkWindow *)(window));
}
void _gtk_style_context_set_direction(GtkStyleContext* _self_, GtkTextDirection direction) {
	gtk_style_context_set_direction((GtkStyleContext *)(_self_), direction);
}
void _gtk_style_context_set_junction_sides(GtkStyleContext* _self_, GtkJunctionSides sides) {
	gtk_style_context_set_junction_sides((GtkStyleContext *)(_self_), sides);
}
void _gtk_style_context_set_parent(GtkStyleContext* _self_, GtkStyleContext* parent) {
	gtk_style_context_set_parent((GtkStyleContext *)(_self_), (GtkStyleContext *)(parent));
}
void _gtk_style_context_set_path(GtkStyleContext* _self_, GtkWidgetPath* path) {
	gtk_style_context_set_path((GtkStyleContext *)(_self_), (GtkWidgetPath *)(path));
}
void _gtk_style_context_set_screen(GtkStyleContext* _self_, GdkScreen* screen) {
	gtk_style_context_set_screen((GtkStyleContext *)(_self_), (GdkScreen *)(screen));
}
void _gtk_style_context_set_state(GtkStyleContext* _self_, GtkStateFlags flags) {
	gtk_style_context_set_state((GtkStyleContext *)(_self_), flags);
}
gboolean _gtk_style_properties_lookup_property(gchar* property_name, GtkStylePropertyParser* parse_func, void* pspec) {
	return gtk_style_properties_lookup_property((const gchar *)(property_name), (GtkStylePropertyParser *)(parse_func), (GParamSpec **)(pspec));
}
void _gtk_style_properties_clear(GtkStyleProperties* _self_) {
	gtk_style_properties_clear((GtkStyleProperties *)(_self_));
}
gboolean _gtk_style_properties_get_property(GtkStyleProperties* _self_, gchar* property, GtkStateFlags state, GValue* value) {
	return gtk_style_properties_get_property((GtkStyleProperties *)(_self_), (const gchar *)(property), state, (GValue *)(value));
}
GtkSymbolicColor * _gtk_style_properties_lookup_color(GtkStyleProperties* _self_, gchar* name) {
	return gtk_style_properties_lookup_color((GtkStyleProperties *)(_self_), (const gchar *)(name));
}
void _gtk_style_properties_map_color(GtkStyleProperties* _self_, gchar* name, GtkSymbolicColor* color) {
	gtk_style_properties_map_color((GtkStyleProperties *)(_self_), (const gchar *)(name), (GtkSymbolicColor *)(color));
}
void _gtk_style_properties_merge(GtkStyleProperties* _self_, GtkStyleProperties* props_to_merge, gboolean replace) {
	gtk_style_properties_merge((GtkStyleProperties *)(_self_), (const GtkStyleProperties *)(props_to_merge), replace);
}
void _gtk_style_properties_set_property(GtkStyleProperties* _self_, gchar* property, GtkStateFlags state, GValue* value) {
	gtk_style_properties_set_property((GtkStyleProperties *)(_self_), (const gchar *)(property), state, (const GValue *)(value));
}
void _gtk_style_properties_unset_property(GtkStyleProperties* _self_, gchar* property, GtkStateFlags state) {
	gtk_style_properties_unset_property((GtkStyleProperties *)(_self_), (const gchar *)(property), state);
}
gboolean _gtk_switch_get_active(GtkSwitch* _self_) {
	return gtk_switch_get_active((GtkSwitch *)(_self_));
}
void _gtk_switch_set_active(GtkSwitch* _self_, gboolean is_active) {
	gtk_switch_set_active((GtkSwitch *)(_self_), is_active);
}
GtkSymbolicColor * _gtk_symbolic_color_new_literal(GdkRGBA* color) {
	return gtk_symbolic_color_new_literal((const GdkRGBA *)(color));
}
GtkSymbolicColor * _gtk_symbolic_color_new_name(gchar* name) {
	return gtk_symbolic_color_new_name((const gchar *)(name));
}
GtkSymbolicColor * _gtk_symbolic_color_new_win32(gchar* theme_class, gint id) {
	return gtk_symbolic_color_new_win32((const gchar *)(theme_class), id);
}
GtkSymbolicColor * _gtk_symbolic_color_ref(GtkSymbolicColor* _self_) {
	return gtk_symbolic_color_ref((GtkSymbolicColor *)(_self_));
}
gboolean _gtk_symbolic_color_resolve(GtkSymbolicColor* _self_, GtkStyleProperties* props, GdkRGBA* resolved_color) {
	return gtk_symbolic_color_resolve((GtkSymbolicColor *)(_self_), (GtkStyleProperties *)(props), (GdkRGBA *)(resolved_color));
}
char * _gtk_symbolic_color_to_string(GtkSymbolicColor* _self_) {
	return gtk_symbolic_color_to_string((GtkSymbolicColor *)(_self_));
}
void _gtk_symbolic_color_unref(GtkSymbolicColor* _self_) {
	gtk_symbolic_color_unref((GtkSymbolicColor *)(_self_));
}
GtkTargetEntry * _gtk_target_entry_new(gchar* target, guint flags, guint info) {
	return gtk_target_entry_new((const gchar *)(target), flags, info);
}
GtkTargetEntry * _gtk_target_entry_copy(GtkTargetEntry* _self_) {
	return gtk_target_entry_copy((GtkTargetEntry *)(_self_));
}
void _gtk_target_entry_free(GtkTargetEntry* _self_) {
	gtk_target_entry_free((GtkTargetEntry *)(_self_));
}
void _gtk_target_list_add(GtkTargetList* _self_, GdkAtom target, guint flags, guint info) {
	gtk_target_list_add((GtkTargetList *)(_self_), target, flags, info);
}
void _gtk_target_list_add_image_targets(GtkTargetList* _self_, guint info, gboolean writable) {
	gtk_target_list_add_image_targets((GtkTargetList *)(_self_), info, writable);
}
void _gtk_target_list_add_rich_text_targets(GtkTargetList* _self_, guint info, gboolean deserializable, GtkTextBuffer* buffer) {
	gtk_target_list_add_rich_text_targets((GtkTargetList *)(_self_), info, deserializable, (GtkTextBuffer *)(buffer));
}
void _gtk_target_list_add_table(GtkTargetList* _self_, GtkTargetEntry* targets, guint ntargets) {
	gtk_target_list_add_table((GtkTargetList *)(_self_), (const GtkTargetEntry *)(targets), ntargets);
}
void _gtk_target_list_add_text_targets(GtkTargetList* _self_, guint info) {
	gtk_target_list_add_text_targets((GtkTargetList *)(_self_), info);
}
void _gtk_target_list_add_uri_targets(GtkTargetList* _self_, guint info) {
	gtk_target_list_add_uri_targets((GtkTargetList *)(_self_), info);
}
gboolean _gtk_target_list_find(GtkTargetList* _self_, GdkAtom target, guint* info) {
	return gtk_target_list_find((GtkTargetList *)(_self_), target, (guint *)(info));
}
GtkTargetList * _gtk_target_list_ref(GtkTargetList* _self_) {
	return gtk_target_list_ref((GtkTargetList *)(_self_));
}
void _gtk_target_list_remove(GtkTargetList* _self_, GdkAtom target) {
	gtk_target_list_remove((GtkTargetList *)(_self_), target);
}
void _gtk_target_list_unref(GtkTargetList* _self_) {
	gtk_target_list_unref((GtkTargetList *)(_self_));
}
GtkTextAttributes * _gtk_text_attributes_copy(GtkTextAttributes* _self_) {
	return gtk_text_attributes_copy((GtkTextAttributes *)(_self_));
}
void _gtk_text_attributes_copy_values(GtkTextAttributes* _self_, GtkTextAttributes* dest) {
	gtk_text_attributes_copy_values((GtkTextAttributes *)(_self_), (GtkTextAttributes *)(dest));
}
GtkTextAttributes * _gtk_text_attributes_ref(GtkTextAttributes* _self_) {
	return gtk_text_attributes_ref((GtkTextAttributes *)(_self_));
}
void _gtk_text_attributes_unref(GtkTextAttributes* _self_) {
	gtk_text_attributes_unref((GtkTextAttributes *)(_self_));
}
void _gtk_text_buffer_add_mark(GtkTextBuffer* _self_, GtkTextMark* mark, GtkTextIter* where) {
	gtk_text_buffer_add_mark((GtkTextBuffer *)(_self_), (GtkTextMark *)(mark), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_add_selection_clipboard(GtkTextBuffer* _self_, GtkClipboard* clipboard) {
	gtk_text_buffer_add_selection_clipboard((GtkTextBuffer *)(_self_), (GtkClipboard *)(clipboard));
}
void _gtk_text_buffer_apply_tag(GtkTextBuffer* _self_, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_apply_tag((GtkTextBuffer *)(_self_), (GtkTextTag *)(tag), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_apply_tag_by_name(GtkTextBuffer* _self_, gchar* name, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_apply_tag_by_name((GtkTextBuffer *)(_self_), (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_backspace(GtkTextBuffer* _self_, GtkTextIter* iter, gboolean interactive, gboolean default_editable) {
	return gtk_text_buffer_backspace((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), interactive, default_editable);
}
void _gtk_text_buffer_begin_user_action(GtkTextBuffer* _self_) {
	gtk_text_buffer_begin_user_action((GtkTextBuffer *)(_self_));
}
void _gtk_text_buffer_copy_clipboard(GtkTextBuffer* _self_, GtkClipboard* clipboard) {
	gtk_text_buffer_copy_clipboard((GtkTextBuffer *)(_self_), (GtkClipboard *)(clipboard));
}
GtkTextChildAnchor * _gtk_text_buffer_create_child_anchor(GtkTextBuffer* _self_, GtkTextIter* iter) {
	return gtk_text_buffer_create_child_anchor((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter));
}
GtkTextMark * _gtk_text_buffer_create_mark(GtkTextBuffer* _self_, gchar* mark_name, GtkTextIter* where, gboolean left_gravity) {
	return gtk_text_buffer_create_mark((GtkTextBuffer *)(_self_), (const gchar *)(mark_name), (const GtkTextIter *)(where), left_gravity);
}
void _gtk_text_buffer_cut_clipboard(GtkTextBuffer* _self_, GtkClipboard* clipboard, gboolean default_editable) {
	gtk_text_buffer_cut_clipboard((GtkTextBuffer *)(_self_), (GtkClipboard *)(clipboard), default_editable);
}
void _gtk_text_buffer_delete(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_delete((GtkTextBuffer *)(_self_), (GtkTextIter *)(start), (GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_delete_interactive(GtkTextBuffer* _self_, GtkTextIter* start_iter, GtkTextIter* end_iter, gboolean default_editable) {
	return gtk_text_buffer_delete_interactive((GtkTextBuffer *)(_self_), (GtkTextIter *)(start_iter), (GtkTextIter *)(end_iter), default_editable);
}
void _gtk_text_buffer_delete_mark(GtkTextBuffer* _self_, GtkTextMark* mark) {
	gtk_text_buffer_delete_mark((GtkTextBuffer *)(_self_), (GtkTextMark *)(mark));
}
void _gtk_text_buffer_delete_mark_by_name(GtkTextBuffer* _self_, gchar* name) {
	gtk_text_buffer_delete_mark_by_name((GtkTextBuffer *)(_self_), (const gchar *)(name));
}
gboolean _gtk_text_buffer_delete_selection(GtkTextBuffer* _self_, gboolean interactive, gboolean default_editable) {
	return gtk_text_buffer_delete_selection((GtkTextBuffer *)(_self_), interactive, default_editable);
}
gboolean _gtk_text_buffer_deserialize(GtkTextBuffer* _self_, GtkTextBuffer* content_buffer, GdkAtom format, GtkTextIter* iter, guint8* data, gsize length, void* _error_) {
	return gtk_text_buffer_deserialize((GtkTextBuffer *)(_self_), (GtkTextBuffer *)(content_buffer), format, (GtkTextIter *)(iter), (const guint8 *)(data), length, (GError **)(_error_));
}
gboolean _gtk_text_buffer_deserialize_get_can_create_tags(GtkTextBuffer* _self_, GdkAtom format) {
	return gtk_text_buffer_deserialize_get_can_create_tags((GtkTextBuffer *)(_self_), format);
}
void _gtk_text_buffer_deserialize_set_can_create_tags(GtkTextBuffer* _self_, GdkAtom format, gboolean can_create_tags) {
	gtk_text_buffer_deserialize_set_can_create_tags((GtkTextBuffer *)(_self_), format, can_create_tags);
}
void _gtk_text_buffer_end_user_action(GtkTextBuffer* _self_) {
	gtk_text_buffer_end_user_action((GtkTextBuffer *)(_self_));
}
void _gtk_text_buffer_get_bounds(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_get_bounds((GtkTextBuffer *)(_self_), (GtkTextIter *)(start), (GtkTextIter *)(end));
}
gint _gtk_text_buffer_get_char_count(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_char_count((GtkTextBuffer *)(_self_));
}
GtkTargetList * _gtk_text_buffer_get_copy_target_list(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_copy_target_list((GtkTextBuffer *)(_self_));
}
GdkAtom * _gtk_text_buffer_get_deserialize_formats(GtkTextBuffer* _self_, gint* n_formats) {
	return gtk_text_buffer_get_deserialize_formats((GtkTextBuffer *)(_self_), (gint *)(n_formats));
}
void _gtk_text_buffer_get_end_iter(GtkTextBuffer* _self_, GtkTextIter* iter) {
	gtk_text_buffer_get_end_iter((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter));
}
gboolean _gtk_text_buffer_get_has_selection(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_has_selection((GtkTextBuffer *)(_self_));
}
GtkTextMark * _gtk_text_buffer_get_insert(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_insert((GtkTextBuffer *)(_self_));
}
void _gtk_text_buffer_get_iter_at_child_anchor(GtkTextBuffer* _self_, GtkTextIter* iter, GtkTextChildAnchor* anchor) {
	gtk_text_buffer_get_iter_at_child_anchor((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (GtkTextChildAnchor *)(anchor));
}
void _gtk_text_buffer_get_iter_at_line(GtkTextBuffer* _self_, GtkTextIter* iter, gint line_number) {
	gtk_text_buffer_get_iter_at_line((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), line_number);
}
void _gtk_text_buffer_get_iter_at_line_index(GtkTextBuffer* _self_, GtkTextIter* iter, gint line_number, gint byte_index) {
	gtk_text_buffer_get_iter_at_line_index((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), line_number, byte_index);
}
void _gtk_text_buffer_get_iter_at_line_offset(GtkTextBuffer* _self_, GtkTextIter* iter, gint line_number, gint char_offset) {
	gtk_text_buffer_get_iter_at_line_offset((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), line_number, char_offset);
}
void _gtk_text_buffer_get_iter_at_mark(GtkTextBuffer* _self_, GtkTextIter* iter, GtkTextMark* mark) {
	gtk_text_buffer_get_iter_at_mark((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (GtkTextMark *)(mark));
}
void _gtk_text_buffer_get_iter_at_offset(GtkTextBuffer* _self_, GtkTextIter* iter, gint char_offset) {
	gtk_text_buffer_get_iter_at_offset((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), char_offset);
}
gint _gtk_text_buffer_get_line_count(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_line_count((GtkTextBuffer *)(_self_));
}
GtkTextMark * _gtk_text_buffer_get_mark(GtkTextBuffer* _self_, gchar* name) {
	return gtk_text_buffer_get_mark((GtkTextBuffer *)(_self_), (const gchar *)(name));
}
gboolean _gtk_text_buffer_get_modified(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_modified((GtkTextBuffer *)(_self_));
}
GtkTargetList * _gtk_text_buffer_get_paste_target_list(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_paste_target_list((GtkTextBuffer *)(_self_));
}
GtkTextMark * _gtk_text_buffer_get_selection_bound(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_selection_bound((GtkTextBuffer *)(_self_));
}
gboolean _gtk_text_buffer_get_selection_bounds(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end) {
	return gtk_text_buffer_get_selection_bounds((GtkTextBuffer *)(_self_), (GtkTextIter *)(start), (GtkTextIter *)(end));
}
GdkAtom * _gtk_text_buffer_get_serialize_formats(GtkTextBuffer* _self_, gint* n_formats) {
	return gtk_text_buffer_get_serialize_formats((GtkTextBuffer *)(_self_), (gint *)(n_formats));
}
gchar * _gtk_text_buffer_get_slice(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end, gboolean include_hidden_chars) {
	return gtk_text_buffer_get_slice((GtkTextBuffer *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
void _gtk_text_buffer_get_start_iter(GtkTextBuffer* _self_, GtkTextIter* iter) {
	gtk_text_buffer_get_start_iter((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter));
}
GtkTextTagTable * _gtk_text_buffer_get_tag_table(GtkTextBuffer* _self_) {
	return gtk_text_buffer_get_tag_table((GtkTextBuffer *)(_self_));
}
gchar * _gtk_text_buffer_get_text(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end, gboolean include_hidden_chars) {
	return gtk_text_buffer_get_text((GtkTextBuffer *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
void _gtk_text_buffer_insert(GtkTextBuffer* _self_, GtkTextIter* iter, gchar* text, gint len_) {
	gtk_text_buffer_insert((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (const gchar *)(text), len_);
}
void _gtk_text_buffer_insert_at_cursor(GtkTextBuffer* _self_, gchar* text, gint len_) {
	gtk_text_buffer_insert_at_cursor((GtkTextBuffer *)(_self_), (const gchar *)(text), len_);
}
void _gtk_text_buffer_insert_child_anchor(GtkTextBuffer* _self_, GtkTextIter* iter, GtkTextChildAnchor* anchor) {
	gtk_text_buffer_insert_child_anchor((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (GtkTextChildAnchor *)(anchor));
}
gboolean _gtk_text_buffer_insert_interactive(GtkTextBuffer* _self_, GtkTextIter* iter, gchar* text, gint len_, gboolean default_editable) {
	return gtk_text_buffer_insert_interactive((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (const gchar *)(text), len_, default_editable);
}
gboolean _gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer* _self_, gchar* text, gint len_, gboolean default_editable) {
	return gtk_text_buffer_insert_interactive_at_cursor((GtkTextBuffer *)(_self_), (const gchar *)(text), len_, default_editable);
}
void _gtk_text_buffer_insert_pixbuf(GtkTextBuffer* _self_, GtkTextIter* iter, GdkPixbuf* pixbuf) {
	gtk_text_buffer_insert_pixbuf((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (GdkPixbuf *)(pixbuf));
}
void _gtk_text_buffer_insert_range(GtkTextBuffer* _self_, GtkTextIter* iter, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_insert_range((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_insert_range_interactive(GtkTextBuffer* _self_, GtkTextIter* iter, GtkTextIter* start, GtkTextIter* end, gboolean default_editable) {
	return gtk_text_buffer_insert_range_interactive((GtkTextBuffer *)(_self_), (GtkTextIter *)(iter), (const GtkTextIter *)(start), (const GtkTextIter *)(end), default_editable);
}
void _gtk_text_buffer_move_mark(GtkTextBuffer* _self_, GtkTextMark* mark, GtkTextIter* where) {
	gtk_text_buffer_move_mark((GtkTextBuffer *)(_self_), (GtkTextMark *)(mark), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_move_mark_by_name(GtkTextBuffer* _self_, gchar* name, GtkTextIter* where) {
	gtk_text_buffer_move_mark_by_name((GtkTextBuffer *)(_self_), (const gchar *)(name), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_paste_clipboard(GtkTextBuffer* _self_, GtkClipboard* clipboard, GtkTextIter* override_location, gboolean default_editable) {
	gtk_text_buffer_paste_clipboard((GtkTextBuffer *)(_self_), (GtkClipboard *)(clipboard), (GtkTextIter *)(override_location), default_editable);
}
void _gtk_text_buffer_place_cursor(GtkTextBuffer* _self_, GtkTextIter* where) {
	gtk_text_buffer_place_cursor((GtkTextBuffer *)(_self_), (const GtkTextIter *)(where));
}
GdkAtom _gtk_text_buffer_register_deserialize_format(GtkTextBuffer* _self_, gchar* mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return gtk_text_buffer_register_deserialize_format((GtkTextBuffer *)(_self_), (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer* _self_, gchar* tagset_name) {
	return gtk_text_buffer_register_deserialize_tagset((GtkTextBuffer *)(_self_), (const gchar *)(tagset_name));
}
GdkAtom _gtk_text_buffer_register_serialize_format(GtkTextBuffer* _self_, gchar* mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return gtk_text_buffer_register_serialize_format((GtkTextBuffer *)(_self_), (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_serialize_tagset(GtkTextBuffer* _self_, gchar* tagset_name) {
	return gtk_text_buffer_register_serialize_tagset((GtkTextBuffer *)(_self_), (const gchar *)(tagset_name));
}
void _gtk_text_buffer_remove_all_tags(GtkTextBuffer* _self_, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_remove_all_tags((GtkTextBuffer *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_selection_clipboard(GtkTextBuffer* _self_, GtkClipboard* clipboard) {
	gtk_text_buffer_remove_selection_clipboard((GtkTextBuffer *)(_self_), (GtkClipboard *)(clipboard));
}
void _gtk_text_buffer_remove_tag(GtkTextBuffer* _self_, GtkTextTag* tag, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_remove_tag((GtkTextBuffer *)(_self_), (GtkTextTag *)(tag), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag_by_name(GtkTextBuffer* _self_, gchar* name, GtkTextIter* start, GtkTextIter* end) {
	gtk_text_buffer_remove_tag_by_name((GtkTextBuffer *)(_self_), (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_select_range(GtkTextBuffer* _self_, GtkTextIter* ins, GtkTextIter* bound) {
	gtk_text_buffer_select_range((GtkTextBuffer *)(_self_), (const GtkTextIter *)(ins), (const GtkTextIter *)(bound));
}
guint8 * _gtk_text_buffer_serialize(GtkTextBuffer* _self_, GtkTextBuffer* content_buffer, GdkAtom format, GtkTextIter* start, GtkTextIter* end, gsize* length) {
	return gtk_text_buffer_serialize((GtkTextBuffer *)(_self_), (GtkTextBuffer *)(content_buffer), format, (const GtkTextIter *)(start), (const GtkTextIter *)(end), (gsize *)(length));
}
void _gtk_text_buffer_set_modified(GtkTextBuffer* _self_, gboolean setting) {
	gtk_text_buffer_set_modified((GtkTextBuffer *)(_self_), setting);
}
void _gtk_text_buffer_set_text(GtkTextBuffer* _self_, gchar* text, gint len_) {
	gtk_text_buffer_set_text((GtkTextBuffer *)(_self_), (const gchar *)(text), len_);
}
void _gtk_text_buffer_unregister_deserialize_format(GtkTextBuffer* _self_, GdkAtom format) {
	gtk_text_buffer_unregister_deserialize_format((GtkTextBuffer *)(_self_), format);
}
void _gtk_text_buffer_unregister_serialize_format(GtkTextBuffer* _self_, GdkAtom format) {
	gtk_text_buffer_unregister_serialize_format((GtkTextBuffer *)(_self_), format);
}
gboolean _gtk_text_child_anchor_get_deleted(GtkTextChildAnchor* _self_) {
	return gtk_text_child_anchor_get_deleted((GtkTextChildAnchor *)(_self_));
}
GList * _gtk_text_child_anchor_get_widgets(GtkTextChildAnchor* _self_) {
	return gtk_text_child_anchor_get_widgets((GtkTextChildAnchor *)(_self_));
}
void _gtk_text_iter_assign(GtkTextIter* _self_, GtkTextIter* other) {
	gtk_text_iter_assign((GtkTextIter *)(_self_), (const GtkTextIter *)(other));
}
gboolean _gtk_text_iter_backward_char(GtkTextIter* _self_) {
	return gtk_text_iter_backward_char((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_chars(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_chars((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_cursor_position(GtkTextIter* _self_) {
	return gtk_text_iter_backward_cursor_position((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_cursor_positions(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_cursor_positions((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_find_char(GtkTextIter* _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter* limit) {
	return gtk_text_iter_backward_find_char((GtkTextIter *)(_self_), pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_backward_line(GtkTextIter* _self_) {
	return gtk_text_iter_backward_line((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_lines(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_lines((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_search(GtkTextIter* _self_, gchar* str, GtkTextSearchFlags flags, GtkTextIter* match_start, GtkTextIter* match_end, GtkTextIter* limit) {
	return gtk_text_iter_backward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, (GtkTextIter *)(match_start), (GtkTextIter *)(match_end), (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_backward_sentence_start(GtkTextIter* _self_) {
	return gtk_text_iter_backward_sentence_start((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_sentence_starts(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_sentence_starts((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_to_tag_toggle(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_backward_to_tag_toggle((GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
gboolean _gtk_text_iter_backward_visible_cursor_position(GtkTextIter* _self_) {
	return gtk_text_iter_backward_visible_cursor_position((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_visible_cursor_positions(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_visible_cursor_positions((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_visible_line(GtkTextIter* _self_) {
	return gtk_text_iter_backward_visible_line((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_visible_lines(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_visible_lines((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_visible_word_start(GtkTextIter* _self_) {
	return gtk_text_iter_backward_visible_word_start((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_visible_word_starts(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_visible_word_starts((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_backward_word_start(GtkTextIter* _self_) {
	return gtk_text_iter_backward_word_start((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_backward_word_starts(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_backward_word_starts((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_begins_tag(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_begins_tag((const GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
gboolean _gtk_text_iter_can_insert(GtkTextIter* _self_, gboolean default_editability) {
	return gtk_text_iter_can_insert((const GtkTextIter *)(_self_), default_editability);
}
gint _gtk_text_iter_compare(GtkTextIter* _self_, GtkTextIter* rhs) {
	return gtk_text_iter_compare((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
GtkTextIter * _gtk_text_iter_copy(GtkTextIter* _self_) {
	return gtk_text_iter_copy((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_editable(GtkTextIter* _self_, gboolean default_setting) {
	return gtk_text_iter_editable((const GtkTextIter *)(_self_), default_setting);
}
gboolean _gtk_text_iter_ends_line(GtkTextIter* _self_) {
	return gtk_text_iter_ends_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_sentence(GtkTextIter* _self_) {
	return gtk_text_iter_ends_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_tag(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_ends_tag((const GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
gboolean _gtk_text_iter_ends_word(GtkTextIter* _self_) {
	return gtk_text_iter_ends_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_equal(GtkTextIter* _self_, GtkTextIter* rhs) {
	return gtk_text_iter_equal((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
gboolean _gtk_text_iter_forward_char(GtkTextIter* _self_) {
	return gtk_text_iter_forward_char((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_chars(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_chars((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_cursor_position(GtkTextIter* _self_) {
	return gtk_text_iter_forward_cursor_position((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_cursor_positions(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_cursor_positions((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_find_char(GtkTextIter* _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter* limit) {
	return gtk_text_iter_forward_find_char((GtkTextIter *)(_self_), pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_forward_line(GtkTextIter* _self_) {
	return gtk_text_iter_forward_line((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_lines(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_lines((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_search(GtkTextIter* _self_, gchar* str, GtkTextSearchFlags flags, GtkTextIter* match_start, GtkTextIter* match_end, GtkTextIter* limit) {
	return gtk_text_iter_forward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, (GtkTextIter *)(match_start), (GtkTextIter *)(match_end), (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_forward_sentence_end(GtkTextIter* _self_) {
	return gtk_text_iter_forward_sentence_end((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_sentence_ends(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_sentence_ends((GtkTextIter *)(_self_), count);
}
void _gtk_text_iter_forward_to_end(GtkTextIter* _self_) {
	gtk_text_iter_forward_to_end((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_to_line_end(GtkTextIter* _self_) {
	return gtk_text_iter_forward_to_line_end((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_to_tag_toggle(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_forward_to_tag_toggle((GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
gboolean _gtk_text_iter_forward_visible_cursor_position(GtkTextIter* _self_) {
	return gtk_text_iter_forward_visible_cursor_position((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_visible_cursor_positions(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_visible_cursor_positions((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_visible_line(GtkTextIter* _self_) {
	return gtk_text_iter_forward_visible_line((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_visible_lines(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_visible_lines((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_visible_word_end(GtkTextIter* _self_) {
	return gtk_text_iter_forward_visible_word_end((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_visible_word_ends(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_visible_word_ends((GtkTextIter *)(_self_), count);
}
gboolean _gtk_text_iter_forward_word_end(GtkTextIter* _self_) {
	return gtk_text_iter_forward_word_end((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_forward_word_ends(GtkTextIter* _self_, gint count) {
	return gtk_text_iter_forward_word_ends((GtkTextIter *)(_self_), count);
}
void _gtk_text_iter_free(GtkTextIter* _self_) {
	gtk_text_iter_free((GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_get_attributes(GtkTextIter* _self_, GtkTextAttributes* values) {
	return gtk_text_iter_get_attributes((const GtkTextIter *)(_self_), (GtkTextAttributes *)(values));
}
GtkTextBuffer * _gtk_text_iter_get_buffer(GtkTextIter* _self_) {
	return gtk_text_iter_get_buffer((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_bytes_in_line(GtkTextIter* _self_) {
	return gtk_text_iter_get_bytes_in_line((const GtkTextIter *)(_self_));
}
gunichar _gtk_text_iter_get_char(GtkTextIter* _self_) {
	return gtk_text_iter_get_char((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_chars_in_line(GtkTextIter* _self_) {
	return gtk_text_iter_get_chars_in_line((const GtkTextIter *)(_self_));
}
GtkTextChildAnchor * _gtk_text_iter_get_child_anchor(GtkTextIter* _self_) {
	return gtk_text_iter_get_child_anchor((const GtkTextIter *)(_self_));
}
PangoLanguage * _gtk_text_iter_get_language(GtkTextIter* _self_) {
	return gtk_text_iter_get_language((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line(GtkTextIter* _self_) {
	return gtk_text_iter_get_line((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_index(GtkTextIter* _self_) {
	return gtk_text_iter_get_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_offset(GtkTextIter* _self_) {
	return gtk_text_iter_get_line_offset((const GtkTextIter *)(_self_));
}
GSList * _gtk_text_iter_get_marks(GtkTextIter* _self_) {
	return gtk_text_iter_get_marks((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_offset(GtkTextIter* _self_) {
	return gtk_text_iter_get_offset((const GtkTextIter *)(_self_));
}
GdkPixbuf * _gtk_text_iter_get_pixbuf(GtkTextIter* _self_) {
	return gtk_text_iter_get_pixbuf((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_slice(GtkTextIter* _self_, GtkTextIter* end) {
	return gtk_text_iter_get_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_tags(GtkTextIter* _self_) {
	return gtk_text_iter_get_tags((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_text(GtkTextIter* _self_, GtkTextIter* end) {
	return gtk_text_iter_get_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_toggled_tags(GtkTextIter* _self_, gboolean toggled_on) {
	return gtk_text_iter_get_toggled_tags((const GtkTextIter *)(_self_), toggled_on);
}
gint _gtk_text_iter_get_visible_line_index(GtkTextIter* _self_) {
	return gtk_text_iter_get_visible_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_visible_line_offset(GtkTextIter* _self_) {
	return gtk_text_iter_get_visible_line_offset((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_visible_slice(GtkTextIter* _self_, GtkTextIter* end) {
	return gtk_text_iter_get_visible_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gchar * _gtk_text_iter_get_visible_text(GtkTextIter* _self_, GtkTextIter* end) {
	return gtk_text_iter_get_visible_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_has_tag(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_has_tag((const GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
gboolean _gtk_text_iter_in_range(GtkTextIter* _self_, GtkTextIter* start, GtkTextIter* end) {
	return gtk_text_iter_in_range((const GtkTextIter *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_inside_sentence(GtkTextIter* _self_) {
	return gtk_text_iter_inside_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_inside_word(GtkTextIter* _self_) {
	return gtk_text_iter_inside_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_cursor_position(GtkTextIter* _self_) {
	return gtk_text_iter_is_cursor_position((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_end(GtkTextIter* _self_) {
	return gtk_text_iter_is_end((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_start(GtkTextIter* _self_) {
	return gtk_text_iter_is_start((const GtkTextIter *)(_self_));
}
void _gtk_text_iter_order(GtkTextIter* _self_, GtkTextIter* second) {
	gtk_text_iter_order((GtkTextIter *)(_self_), (GtkTextIter *)(second));
}
void _gtk_text_iter_set_line(GtkTextIter* _self_, gint line_number) {
	gtk_text_iter_set_line((GtkTextIter *)(_self_), line_number);
}
void _gtk_text_iter_set_line_index(GtkTextIter* _self_, gint byte_on_line) {
	gtk_text_iter_set_line_index((GtkTextIter *)(_self_), byte_on_line);
}
void _gtk_text_iter_set_line_offset(GtkTextIter* _self_, gint char_on_line) {
	gtk_text_iter_set_line_offset((GtkTextIter *)(_self_), char_on_line);
}
void _gtk_text_iter_set_offset(GtkTextIter* _self_, gint char_offset) {
	gtk_text_iter_set_offset((GtkTextIter *)(_self_), char_offset);
}
void _gtk_text_iter_set_visible_line_index(GtkTextIter* _self_, gint byte_on_line) {
	gtk_text_iter_set_visible_line_index((GtkTextIter *)(_self_), byte_on_line);
}
void _gtk_text_iter_set_visible_line_offset(GtkTextIter* _self_, gint char_on_line) {
	gtk_text_iter_set_visible_line_offset((GtkTextIter *)(_self_), char_on_line);
}
gboolean _gtk_text_iter_starts_line(GtkTextIter* _self_) {
	return gtk_text_iter_starts_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_sentence(GtkTextIter* _self_) {
	return gtk_text_iter_starts_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_word(GtkTextIter* _self_) {
	return gtk_text_iter_starts_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_toggles_tag(GtkTextIter* _self_, GtkTextTag* tag) {
	return gtk_text_iter_toggles_tag((const GtkTextIter *)(_self_), (GtkTextTag *)(tag));
}
GtkTextMark * _gtk_text_mark_new(gchar* name, gboolean left_gravity) {
	return gtk_text_mark_new((const gchar *)(name), left_gravity);
}
GtkTextBuffer * _gtk_text_mark_get_buffer(GtkTextMark* _self_) {
	return gtk_text_mark_get_buffer((GtkTextMark *)(_self_));
}
gboolean _gtk_text_mark_get_deleted(GtkTextMark* _self_) {
	return gtk_text_mark_get_deleted((GtkTextMark *)(_self_));
}
gboolean _gtk_text_mark_get_left_gravity(GtkTextMark* _self_) {
	return gtk_text_mark_get_left_gravity((GtkTextMark *)(_self_));
}
const gchar * _gtk_text_mark_get_name(GtkTextMark* _self_) {
	return gtk_text_mark_get_name((GtkTextMark *)(_self_));
}
gboolean _gtk_text_mark_get_visible(GtkTextMark* _self_) {
	return gtk_text_mark_get_visible((GtkTextMark *)(_self_));
}
void _gtk_text_mark_set_visible(GtkTextMark* _self_, gboolean setting) {
	gtk_text_mark_set_visible((GtkTextMark *)(_self_), setting);
}
GtkTextTag * _gtk_text_tag_new(gchar* name) {
	return gtk_text_tag_new((const gchar *)(name));
}
gboolean _gtk_text_tag_event(GtkTextTag* _self_, GObject* event_object, GdkEvent* event, GtkTextIter* iter) {
	return gtk_text_tag_event((GtkTextTag *)(_self_), (GObject *)(event_object), (GdkEvent *)(event), (const GtkTextIter *)(iter));
}
gint _gtk_text_tag_get_priority(GtkTextTag* _self_) {
	return gtk_text_tag_get_priority((GtkTextTag *)(_self_));
}
void _gtk_text_tag_set_priority(GtkTextTag* _self_, gint priority) {
	gtk_text_tag_set_priority((GtkTextTag *)(_self_), priority);
}
void _gtk_text_tag_table_add(GtkTextTagTable* _self_, GtkTextTag* tag) {
	gtk_text_tag_table_add((GtkTextTagTable *)(_self_), (GtkTextTag *)(tag));
}
void _gtk_text_tag_table_foreach(GtkTextTagTable* _self_, GtkTextTagTableForeach func_, gpointer data) {
	gtk_text_tag_table_foreach((GtkTextTagTable *)(_self_), func_, data);
}
gint _gtk_text_tag_table_get_size(GtkTextTagTable* _self_) {
	return gtk_text_tag_table_get_size((GtkTextTagTable *)(_self_));
}
GtkTextTag * _gtk_text_tag_table_lookup(GtkTextTagTable* _self_, gchar* name) {
	return gtk_text_tag_table_lookup((GtkTextTagTable *)(_self_), (const gchar *)(name));
}
void _gtk_text_tag_table_remove(GtkTextTagTable* _self_, GtkTextTag* tag) {
	gtk_text_tag_table_remove((GtkTextTagTable *)(_self_), (GtkTextTag *)(tag));
}
void _gtk_text_view_add_child_at_anchor(GtkTextView* _self_, GtkWidget* child, GtkTextChildAnchor* anchor) {
	gtk_text_view_add_child_at_anchor((GtkTextView *)(_self_), (GtkWidget *)(child), (GtkTextChildAnchor *)(anchor));
}
void _gtk_text_view_add_child_in_window(GtkTextView* _self_, GtkWidget* child, GtkTextWindowType which_window, gint xpos, gint ypos) {
	gtk_text_view_add_child_in_window((GtkTextView *)(_self_), (GtkWidget *)(child), which_window, xpos, ypos);
}
gboolean _gtk_text_view_backward_display_line(GtkTextView* _self_, GtkTextIter* iter) {
	return gtk_text_view_backward_display_line((GtkTextView *)(_self_), (GtkTextIter *)(iter));
}
gboolean _gtk_text_view_backward_display_line_start(GtkTextView* _self_, GtkTextIter* iter) {
	return gtk_text_view_backward_display_line_start((GtkTextView *)(_self_), (GtkTextIter *)(iter));
}
void _gtk_text_view_buffer_to_window_coords(GtkTextView* _self_, GtkTextWindowType win, gint buffer_x, gint buffer_y, gint* window_x, gint* window_y) {
	gtk_text_view_buffer_to_window_coords((GtkTextView *)(_self_), win, buffer_x, buffer_y, (gint *)(window_x), (gint *)(window_y));
}
gboolean _gtk_text_view_forward_display_line(GtkTextView* _self_, GtkTextIter* iter) {
	return gtk_text_view_forward_display_line((GtkTextView *)(_self_), (GtkTextIter *)(iter));
}
gboolean _gtk_text_view_forward_display_line_end(GtkTextView* _self_, GtkTextIter* iter) {
	return gtk_text_view_forward_display_line_end((GtkTextView *)(_self_), (GtkTextIter *)(iter));
}
gboolean _gtk_text_view_get_accepts_tab(GtkTextView* _self_) {
	return gtk_text_view_get_accepts_tab((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_border_window_size(GtkTextView* _self_, GtkTextWindowType type_) {
	return gtk_text_view_get_border_window_size((GtkTextView *)(_self_), type_);
}
GtkTextBuffer * _gtk_text_view_get_buffer(GtkTextView* _self_) {
	return gtk_text_view_get_buffer((GtkTextView *)(_self_));
}
void _gtk_text_view_get_cursor_locations(GtkTextView* _self_, GtkTextIter* iter, GdkRectangle* strong, GdkRectangle* weak) {
	gtk_text_view_get_cursor_locations((GtkTextView *)(_self_), (const GtkTextIter *)(iter), (GdkRectangle *)(strong), (GdkRectangle *)(weak));
}
gboolean _gtk_text_view_get_cursor_visible(GtkTextView* _self_) {
	return gtk_text_view_get_cursor_visible((GtkTextView *)(_self_));
}
GtkTextAttributes * _gtk_text_view_get_default_attributes(GtkTextView* _self_) {
	return gtk_text_view_get_default_attributes((GtkTextView *)(_self_));
}
gboolean _gtk_text_view_get_editable(GtkTextView* _self_) {
	return gtk_text_view_get_editable((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_indent(GtkTextView* _self_) {
	return gtk_text_view_get_indent((GtkTextView *)(_self_));
}
GtkInputHints _gtk_text_view_get_input_hints(GtkTextView* _self_) {
	return gtk_text_view_get_input_hints((GtkTextView *)(_self_));
}
GtkInputPurpose _gtk_text_view_get_input_purpose(GtkTextView* _self_) {
	return gtk_text_view_get_input_purpose((GtkTextView *)(_self_));
}
void _gtk_text_view_get_iter_at_location(GtkTextView* _self_, GtkTextIter* iter, gint x, gint y) {
	gtk_text_view_get_iter_at_location((GtkTextView *)(_self_), (GtkTextIter *)(iter), x, y);
}
void _gtk_text_view_get_iter_at_position(GtkTextView* _self_, GtkTextIter* iter, gint* trailing, gint x, gint y) {
	gtk_text_view_get_iter_at_position((GtkTextView *)(_self_), (GtkTextIter *)(iter), (gint *)(trailing), x, y);
}
void _gtk_text_view_get_iter_location(GtkTextView* _self_, GtkTextIter* iter, GdkRectangle* location) {
	gtk_text_view_get_iter_location((GtkTextView *)(_self_), (const GtkTextIter *)(iter), (GdkRectangle *)(location));
}
GtkJustification _gtk_text_view_get_justification(GtkTextView* _self_) {
	return gtk_text_view_get_justification((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_left_margin(GtkTextView* _self_) {
	return gtk_text_view_get_left_margin((GtkTextView *)(_self_));
}
void _gtk_text_view_get_line_at_y(GtkTextView* _self_, GtkTextIter* target_iter, gint y, gint* line_top) {
	gtk_text_view_get_line_at_y((GtkTextView *)(_self_), (GtkTextIter *)(target_iter), y, (gint *)(line_top));
}
void _gtk_text_view_get_line_yrange(GtkTextView* _self_, GtkTextIter* iter, gint* y, gint* height) {
	gtk_text_view_get_line_yrange((GtkTextView *)(_self_), (const GtkTextIter *)(iter), (gint *)(y), (gint *)(height));
}
gboolean _gtk_text_view_get_overwrite(GtkTextView* _self_) {
	return gtk_text_view_get_overwrite((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_pixels_above_lines(GtkTextView* _self_) {
	return gtk_text_view_get_pixels_above_lines((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_pixels_below_lines(GtkTextView* _self_) {
	return gtk_text_view_get_pixels_below_lines((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_pixels_inside_wrap(GtkTextView* _self_) {
	return gtk_text_view_get_pixels_inside_wrap((GtkTextView *)(_self_));
}
gint _gtk_text_view_get_right_margin(GtkTextView* _self_) {
	return gtk_text_view_get_right_margin((GtkTextView *)(_self_));
}
PangoTabArray * _gtk_text_view_get_tabs(GtkTextView* _self_) {
	return gtk_text_view_get_tabs((GtkTextView *)(_self_));
}
void _gtk_text_view_get_visible_rect(GtkTextView* _self_, GdkRectangle* visible_rect) {
	gtk_text_view_get_visible_rect((GtkTextView *)(_self_), (GdkRectangle *)(visible_rect));
}
GdkWindow * _gtk_text_view_get_window(GtkTextView* _self_, GtkTextWindowType win) {
	return gtk_text_view_get_window((GtkTextView *)(_self_), win);
}
GtkTextWindowType _gtk_text_view_get_window_type(GtkTextView* _self_, GdkWindow* window) {
	return gtk_text_view_get_window_type((GtkTextView *)(_self_), (GdkWindow *)(window));
}
GtkWrapMode _gtk_text_view_get_wrap_mode(GtkTextView* _self_) {
	return gtk_text_view_get_wrap_mode((GtkTextView *)(_self_));
}
gboolean _gtk_text_view_im_context_filter_keypress(GtkTextView* _self_, GdkEventKey* event) {
	return gtk_text_view_im_context_filter_keypress((GtkTextView *)(_self_), (GdkEventKey *)(event));
}
void _gtk_text_view_move_child(GtkTextView* _self_, GtkWidget* child, gint xpos, gint ypos) {
	gtk_text_view_move_child((GtkTextView *)(_self_), (GtkWidget *)(child), xpos, ypos);
}
gboolean _gtk_text_view_move_mark_onscreen(GtkTextView* _self_, GtkTextMark* mark) {
	return gtk_text_view_move_mark_onscreen((GtkTextView *)(_self_), (GtkTextMark *)(mark));
}
gboolean _gtk_text_view_move_visually(GtkTextView* _self_, GtkTextIter* iter, gint count) {
	return gtk_text_view_move_visually((GtkTextView *)(_self_), (GtkTextIter *)(iter), count);
}
gboolean _gtk_text_view_place_cursor_onscreen(GtkTextView* _self_) {
	return gtk_text_view_place_cursor_onscreen((GtkTextView *)(_self_));
}
void _gtk_text_view_reset_im_context(GtkTextView* _self_) {
	gtk_text_view_reset_im_context((GtkTextView *)(_self_));
}
void _gtk_text_view_scroll_mark_onscreen(GtkTextView* _self_, GtkTextMark* mark) {
	gtk_text_view_scroll_mark_onscreen((GtkTextView *)(_self_), (GtkTextMark *)(mark));
}
gboolean _gtk_text_view_scroll_to_iter(GtkTextView* _self_, GtkTextIter* iter, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign) {
	return gtk_text_view_scroll_to_iter((GtkTextView *)(_self_), (GtkTextIter *)(iter), within_margin, use_align, xalign, yalign);
}
void _gtk_text_view_scroll_to_mark(GtkTextView* _self_, GtkTextMark* mark, gdouble within_margin, gboolean use_align, gdouble xalign, gdouble yalign) {
	gtk_text_view_scroll_to_mark((GtkTextView *)(_self_), (GtkTextMark *)(mark), within_margin, use_align, xalign, yalign);
}
void _gtk_text_view_set_accepts_tab(GtkTextView* _self_, gboolean accepts_tab) {
	gtk_text_view_set_accepts_tab((GtkTextView *)(_self_), accepts_tab);
}
void _gtk_text_view_set_border_window_size(GtkTextView* _self_, GtkTextWindowType type_, gint size) {
	gtk_text_view_set_border_window_size((GtkTextView *)(_self_), type_, size);
}
void _gtk_text_view_set_buffer(GtkTextView* _self_, GtkTextBuffer* buffer) {
	gtk_text_view_set_buffer((GtkTextView *)(_self_), (GtkTextBuffer *)(buffer));
}
void _gtk_text_view_set_cursor_visible(GtkTextView* _self_, gboolean setting) {
	gtk_text_view_set_cursor_visible((GtkTextView *)(_self_), setting);
}
void _gtk_text_view_set_editable(GtkTextView* _self_, gboolean setting) {
	gtk_text_view_set_editable((GtkTextView *)(_self_), setting);
}
void _gtk_text_view_set_indent(GtkTextView* _self_, gint indent) {
	gtk_text_view_set_indent((GtkTextView *)(_self_), indent);
}
void _gtk_text_view_set_input_hints(GtkTextView* _self_, GtkInputHints hints) {
	gtk_text_view_set_input_hints((GtkTextView *)(_self_), hints);
}
void _gtk_text_view_set_input_purpose(GtkTextView* _self_, GtkInputPurpose purpose) {
	gtk_text_view_set_input_purpose((GtkTextView *)(_self_), purpose);
}
void _gtk_text_view_set_justification(GtkTextView* _self_, GtkJustification justification) {
	gtk_text_view_set_justification((GtkTextView *)(_self_), justification);
}
void _gtk_text_view_set_left_margin(GtkTextView* _self_, gint left_margin) {
	gtk_text_view_set_left_margin((GtkTextView *)(_self_), left_margin);
}
void _gtk_text_view_set_overwrite(GtkTextView* _self_, gboolean overwrite) {
	gtk_text_view_set_overwrite((GtkTextView *)(_self_), overwrite);
}
void _gtk_text_view_set_pixels_above_lines(GtkTextView* _self_, gint pixels_above_lines) {
	gtk_text_view_set_pixels_above_lines((GtkTextView *)(_self_), pixels_above_lines);
}
void _gtk_text_view_set_pixels_below_lines(GtkTextView* _self_, gint pixels_below_lines) {
	gtk_text_view_set_pixels_below_lines((GtkTextView *)(_self_), pixels_below_lines);
}
void _gtk_text_view_set_pixels_inside_wrap(GtkTextView* _self_, gint pixels_inside_wrap) {
	gtk_text_view_set_pixels_inside_wrap((GtkTextView *)(_self_), pixels_inside_wrap);
}
void _gtk_text_view_set_right_margin(GtkTextView* _self_, gint right_margin) {
	gtk_text_view_set_right_margin((GtkTextView *)(_self_), right_margin);
}
void _gtk_text_view_set_tabs(GtkTextView* _self_, PangoTabArray* tabs) {
	gtk_text_view_set_tabs((GtkTextView *)(_self_), (PangoTabArray *)(tabs));
}
void _gtk_text_view_set_wrap_mode(GtkTextView* _self_, GtkWrapMode wrap_mode) {
	gtk_text_view_set_wrap_mode((GtkTextView *)(_self_), wrap_mode);
}
gboolean _gtk_text_view_starts_display_line(GtkTextView* _self_, GtkTextIter* iter) {
	return gtk_text_view_starts_display_line((GtkTextView *)(_self_), (const GtkTextIter *)(iter));
}
void _gtk_text_view_window_to_buffer_coords(GtkTextView* _self_, GtkTextWindowType win, gint window_x, gint window_y, gint* buffer_x, gint* buffer_y) {
	gtk_text_view_window_to_buffer_coords((GtkTextView *)(_self_), win, window_x, window_y, (gint *)(buffer_x), (gint *)(buffer_y));
}
GtkThemingEngine * _gtk_theming_engine_load(gchar* name) {
	return gtk_theming_engine_load((const gchar *)(name));
}
void _gtk_theming_engine_register_property(gchar* name_space, GtkStylePropertyParser parse_func, GParamSpec* pspec) {
	gtk_theming_engine_register_property((const gchar *)(name_space), parse_func, (GParamSpec *)(pspec));
}
void _gtk_theming_engine_get_background_color(GtkThemingEngine* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_theming_engine_get_background_color((GtkThemingEngine *)(_self_), state, (GdkRGBA *)(color));
}
void _gtk_theming_engine_get_border(GtkThemingEngine* _self_, GtkStateFlags state, GtkBorder* border) {
	gtk_theming_engine_get_border((GtkThemingEngine *)(_self_), state, (GtkBorder *)(border));
}
void _gtk_theming_engine_get_border_color(GtkThemingEngine* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_theming_engine_get_border_color((GtkThemingEngine *)(_self_), state, (GdkRGBA *)(color));
}
void _gtk_theming_engine_get_color(GtkThemingEngine* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_theming_engine_get_color((GtkThemingEngine *)(_self_), state, (GdkRGBA *)(color));
}
GtkTextDirection _gtk_theming_engine_get_direction(GtkThemingEngine* _self_) {
	return gtk_theming_engine_get_direction((GtkThemingEngine *)(_self_));
}
const PangoFontDescription * _gtk_theming_engine_get_font(GtkThemingEngine* _self_, GtkStateFlags state) {
	return gtk_theming_engine_get_font((GtkThemingEngine *)(_self_), state);
}
GtkJunctionSides _gtk_theming_engine_get_junction_sides(GtkThemingEngine* _self_) {
	return gtk_theming_engine_get_junction_sides((GtkThemingEngine *)(_self_));
}
void _gtk_theming_engine_get_margin(GtkThemingEngine* _self_, GtkStateFlags state, GtkBorder* margin) {
	gtk_theming_engine_get_margin((GtkThemingEngine *)(_self_), state, (GtkBorder *)(margin));
}
void _gtk_theming_engine_get_padding(GtkThemingEngine* _self_, GtkStateFlags state, GtkBorder* padding) {
	gtk_theming_engine_get_padding((GtkThemingEngine *)(_self_), state, (GtkBorder *)(padding));
}
const GtkWidgetPath * _gtk_theming_engine_get_path(GtkThemingEngine* _self_) {
	return gtk_theming_engine_get_path((GtkThemingEngine *)(_self_));
}
void _gtk_theming_engine_get_property(GtkThemingEngine* _self_, gchar* property, GtkStateFlags state, GValue* value) {
	gtk_theming_engine_get_property((GtkThemingEngine *)(_self_), (const gchar *)(property), state, (GValue *)(value));
}
GdkScreen * _gtk_theming_engine_get_screen(GtkThemingEngine* _self_) {
	return gtk_theming_engine_get_screen((GtkThemingEngine *)(_self_));
}
GtkStateFlags _gtk_theming_engine_get_state(GtkThemingEngine* _self_) {
	return gtk_theming_engine_get_state((GtkThemingEngine *)(_self_));
}
void _gtk_theming_engine_get_style_property(GtkThemingEngine* _self_, gchar* property_name, GValue* value) {
	gtk_theming_engine_get_style_property((GtkThemingEngine *)(_self_), (const gchar *)(property_name), (GValue *)(value));
}
gboolean _gtk_theming_engine_has_class(GtkThemingEngine* _self_, gchar* style_class) {
	return gtk_theming_engine_has_class((GtkThemingEngine *)(_self_), (const gchar *)(style_class));
}
gboolean _gtk_theming_engine_has_region(GtkThemingEngine* _self_, gchar* style_region, GtkRegionFlags* flags) {
	return gtk_theming_engine_has_region((GtkThemingEngine *)(_self_), (const gchar *)(style_region), (GtkRegionFlags *)(flags));
}
gboolean _gtk_theming_engine_lookup_color(GtkThemingEngine* _self_, gchar* color_name, GdkRGBA* color) {
	return gtk_theming_engine_lookup_color((GtkThemingEngine *)(_self_), (const gchar *)(color_name), (GdkRGBA *)(color));
}
GtkToggleAction * _gtk_toggle_action_new(gchar* name, gchar* label, gchar* tooltip, gchar* stock_id) {
	return gtk_toggle_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
gboolean _gtk_toggle_action_get_active(GtkToggleAction* _self_) {
	return gtk_toggle_action_get_active((GtkToggleAction *)(_self_));
}
gboolean _gtk_toggle_action_get_draw_as_radio(GtkToggleAction* _self_) {
	return gtk_toggle_action_get_draw_as_radio((GtkToggleAction *)(_self_));
}
void _gtk_toggle_action_set_active(GtkToggleAction* _self_, gboolean is_active) {
	gtk_toggle_action_set_active((GtkToggleAction *)(_self_), is_active);
}
void _gtk_toggle_action_set_draw_as_radio(GtkToggleAction* _self_, gboolean draw_as_radio) {
	gtk_toggle_action_set_draw_as_radio((GtkToggleAction *)(_self_), draw_as_radio);
}
void _gtk_toggle_action_toggled(GtkToggleAction* _self_) {
	gtk_toggle_action_toggled((GtkToggleAction *)(_self_));
}
GtkWidget * _gtk_toggle_button_new_with_label(gchar* label) {
	return gtk_toggle_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_toggle_button_new_with_mnemonic(gchar* label) {
	return gtk_toggle_button_new_with_mnemonic((const gchar *)(label));
}
gboolean _gtk_toggle_button_get_active(GtkToggleButton* _self_) {
	return gtk_toggle_button_get_active((GtkToggleButton *)(_self_));
}
gboolean _gtk_toggle_button_get_inconsistent(GtkToggleButton* _self_) {
	return gtk_toggle_button_get_inconsistent((GtkToggleButton *)(_self_));
}
gboolean _gtk_toggle_button_get_mode(GtkToggleButton* _self_) {
	return gtk_toggle_button_get_mode((GtkToggleButton *)(_self_));
}
void _gtk_toggle_button_set_active(GtkToggleButton* _self_, gboolean is_active) {
	gtk_toggle_button_set_active((GtkToggleButton *)(_self_), is_active);
}
void _gtk_toggle_button_set_inconsistent(GtkToggleButton* _self_, gboolean setting) {
	gtk_toggle_button_set_inconsistent((GtkToggleButton *)(_self_), setting);
}
void _gtk_toggle_button_set_mode(GtkToggleButton* _self_, gboolean draw_indicator) {
	gtk_toggle_button_set_mode((GtkToggleButton *)(_self_), draw_indicator);
}
void _gtk_toggle_button_toggled(GtkToggleButton* _self_) {
	gtk_toggle_button_toggled((GtkToggleButton *)(_self_));
}
GtkToolItem * _gtk_toggle_tool_button_new_from_stock(gchar* stock_id) {
	return gtk_toggle_tool_button_new_from_stock((const gchar *)(stock_id));
}
gboolean _gtk_toggle_tool_button_get_active(GtkToggleToolButton* _self_) {
	return gtk_toggle_tool_button_get_active((GtkToggleToolButton *)(_self_));
}
void _gtk_toggle_tool_button_set_active(GtkToggleToolButton* _self_, gboolean is_active) {
	gtk_toggle_tool_button_set_active((GtkToggleToolButton *)(_self_), is_active);
}
GtkToolItem * _gtk_tool_button_new(GtkWidget* icon_widget, gchar* label) {
	return gtk_tool_button_new((GtkWidget *)(icon_widget), (const gchar *)(label));
}
GtkToolItem * _gtk_tool_button_new_from_stock(gchar* stock_id) {
	return gtk_tool_button_new_from_stock((const gchar *)(stock_id));
}
const gchar * _gtk_tool_button_get_icon_name(GtkToolButton* _self_) {
	return gtk_tool_button_get_icon_name((GtkToolButton *)(_self_));
}
GtkWidget * _gtk_tool_button_get_icon_widget(GtkToolButton* _self_) {
	return gtk_tool_button_get_icon_widget((GtkToolButton *)(_self_));
}
const gchar * _gtk_tool_button_get_label(GtkToolButton* _self_) {
	return gtk_tool_button_get_label((GtkToolButton *)(_self_));
}
GtkWidget * _gtk_tool_button_get_label_widget(GtkToolButton* _self_) {
	return gtk_tool_button_get_label_widget((GtkToolButton *)(_self_));
}
const gchar * _gtk_tool_button_get_stock_id(GtkToolButton* _self_) {
	return gtk_tool_button_get_stock_id((GtkToolButton *)(_self_));
}
gboolean _gtk_tool_button_get_use_underline(GtkToolButton* _self_) {
	return gtk_tool_button_get_use_underline((GtkToolButton *)(_self_));
}
void _gtk_tool_button_set_icon_name(GtkToolButton* _self_, gchar* icon_name) {
	gtk_tool_button_set_icon_name((GtkToolButton *)(_self_), (const gchar *)(icon_name));
}
void _gtk_tool_button_set_icon_widget(GtkToolButton* _self_, GtkWidget* icon_widget) {
	gtk_tool_button_set_icon_widget((GtkToolButton *)(_self_), (GtkWidget *)(icon_widget));
}
void _gtk_tool_button_set_label(GtkToolButton* _self_, gchar* label) {
	gtk_tool_button_set_label((GtkToolButton *)(_self_), (const gchar *)(label));
}
void _gtk_tool_button_set_label_widget(GtkToolButton* _self_, GtkWidget* label_widget) {
	gtk_tool_button_set_label_widget((GtkToolButton *)(_self_), (GtkWidget *)(label_widget));
}
void _gtk_tool_button_set_stock_id(GtkToolButton* _self_, gchar* stock_id) {
	gtk_tool_button_set_stock_id((GtkToolButton *)(_self_), (const gchar *)(stock_id));
}
void _gtk_tool_button_set_use_underline(GtkToolButton* _self_, gboolean use_underline) {
	gtk_tool_button_set_use_underline((GtkToolButton *)(_self_), use_underline);
}
PangoEllipsizeMode _gtk_tool_item_get_ellipsize_mode(GtkToolItem* _self_) {
	return gtk_tool_item_get_ellipsize_mode((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_expand(GtkToolItem* _self_) {
	return gtk_tool_item_get_expand((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_homogeneous(GtkToolItem* _self_) {
	return gtk_tool_item_get_homogeneous((GtkToolItem *)(_self_));
}
GtkIconSize _gtk_tool_item_get_icon_size(GtkToolItem* _self_) {
	return gtk_tool_item_get_icon_size((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_is_important(GtkToolItem* _self_) {
	return gtk_tool_item_get_is_important((GtkToolItem *)(_self_));
}
GtkOrientation _gtk_tool_item_get_orientation(GtkToolItem* _self_) {
	return gtk_tool_item_get_orientation((GtkToolItem *)(_self_));
}
GtkWidget * _gtk_tool_item_get_proxy_menu_item(GtkToolItem* _self_, gchar* menu_item_id) {
	return gtk_tool_item_get_proxy_menu_item((GtkToolItem *)(_self_), (const gchar *)(menu_item_id));
}
GtkReliefStyle _gtk_tool_item_get_relief_style(GtkToolItem* _self_) {
	return gtk_tool_item_get_relief_style((GtkToolItem *)(_self_));
}
gfloat _gtk_tool_item_get_text_alignment(GtkToolItem* _self_) {
	return gtk_tool_item_get_text_alignment((GtkToolItem *)(_self_));
}
GtkOrientation _gtk_tool_item_get_text_orientation(GtkToolItem* _self_) {
	return gtk_tool_item_get_text_orientation((GtkToolItem *)(_self_));
}
GtkSizeGroup * _gtk_tool_item_get_text_size_group(GtkToolItem* _self_) {
	return gtk_tool_item_get_text_size_group((GtkToolItem *)(_self_));
}
GtkToolbarStyle _gtk_tool_item_get_toolbar_style(GtkToolItem* _self_) {
	return gtk_tool_item_get_toolbar_style((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_use_drag_window(GtkToolItem* _self_) {
	return gtk_tool_item_get_use_drag_window((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_visible_horizontal(GtkToolItem* _self_) {
	return gtk_tool_item_get_visible_horizontal((GtkToolItem *)(_self_));
}
gboolean _gtk_tool_item_get_visible_vertical(GtkToolItem* _self_) {
	return gtk_tool_item_get_visible_vertical((GtkToolItem *)(_self_));
}
void _gtk_tool_item_rebuild_menu(GtkToolItem* _self_) {
	gtk_tool_item_rebuild_menu((GtkToolItem *)(_self_));
}
GtkWidget * _gtk_tool_item_retrieve_proxy_menu_item(GtkToolItem* _self_) {
	return gtk_tool_item_retrieve_proxy_menu_item((GtkToolItem *)(_self_));
}
void _gtk_tool_item_set_expand(GtkToolItem* _self_, gboolean expand) {
	gtk_tool_item_set_expand((GtkToolItem *)(_self_), expand);
}
void _gtk_tool_item_set_homogeneous(GtkToolItem* _self_, gboolean homogeneous) {
	gtk_tool_item_set_homogeneous((GtkToolItem *)(_self_), homogeneous);
}
void _gtk_tool_item_set_is_important(GtkToolItem* _self_, gboolean is_important) {
	gtk_tool_item_set_is_important((GtkToolItem *)(_self_), is_important);
}
void _gtk_tool_item_set_proxy_menu_item(GtkToolItem* _self_, gchar* menu_item_id, GtkWidget* menu_item) {
	gtk_tool_item_set_proxy_menu_item((GtkToolItem *)(_self_), (const gchar *)(menu_item_id), (GtkWidget *)(menu_item));
}
void _gtk_tool_item_set_tooltip_markup(GtkToolItem* _self_, gchar* markup) {
	gtk_tool_item_set_tooltip_markup((GtkToolItem *)(_self_), (const gchar *)(markup));
}
void _gtk_tool_item_set_tooltip_text(GtkToolItem* _self_, gchar* text) {
	gtk_tool_item_set_tooltip_text((GtkToolItem *)(_self_), (const gchar *)(text));
}
void _gtk_tool_item_set_use_drag_window(GtkToolItem* _self_, gboolean use_drag_window) {
	gtk_tool_item_set_use_drag_window((GtkToolItem *)(_self_), use_drag_window);
}
void _gtk_tool_item_set_visible_horizontal(GtkToolItem* _self_, gboolean visible_horizontal) {
	gtk_tool_item_set_visible_horizontal((GtkToolItem *)(_self_), visible_horizontal);
}
void _gtk_tool_item_set_visible_vertical(GtkToolItem* _self_, gboolean visible_vertical) {
	gtk_tool_item_set_visible_vertical((GtkToolItem *)(_self_), visible_vertical);
}
void _gtk_tool_item_toolbar_reconfigured(GtkToolItem* _self_) {
	gtk_tool_item_toolbar_reconfigured((GtkToolItem *)(_self_));
}
GtkWidget * _gtk_tool_item_group_new(gchar* label) {
	return gtk_tool_item_group_new((const gchar *)(label));
}
gboolean _gtk_tool_item_group_get_collapsed(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_collapsed((GtkToolItemGroup *)(_self_));
}
GtkToolItem * _gtk_tool_item_group_get_drop_item(GtkToolItemGroup* _self_, gint x, gint y) {
	return gtk_tool_item_group_get_drop_item((GtkToolItemGroup *)(_self_), x, y);
}
PangoEllipsizeMode _gtk_tool_item_group_get_ellipsize(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_ellipsize((GtkToolItemGroup *)(_self_));
}
GtkReliefStyle _gtk_tool_item_group_get_header_relief(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_header_relief((GtkToolItemGroup *)(_self_));
}
gint _gtk_tool_item_group_get_item_position(GtkToolItemGroup* _self_, GtkToolItem* item) {
	return gtk_tool_item_group_get_item_position((GtkToolItemGroup *)(_self_), (GtkToolItem *)(item));
}
const gchar * _gtk_tool_item_group_get_label(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_label((GtkToolItemGroup *)(_self_));
}
GtkWidget * _gtk_tool_item_group_get_label_widget(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_label_widget((GtkToolItemGroup *)(_self_));
}
guint _gtk_tool_item_group_get_n_items(GtkToolItemGroup* _self_) {
	return gtk_tool_item_group_get_n_items((GtkToolItemGroup *)(_self_));
}
GtkToolItem * _gtk_tool_item_group_get_nth_item(GtkToolItemGroup* _self_, guint index) {
	return gtk_tool_item_group_get_nth_item((GtkToolItemGroup *)(_self_), index);
}
void _gtk_tool_item_group_insert(GtkToolItemGroup* _self_, GtkToolItem* item, gint position) {
	gtk_tool_item_group_insert((GtkToolItemGroup *)(_self_), (GtkToolItem *)(item), position);
}
void _gtk_tool_item_group_set_collapsed(GtkToolItemGroup* _self_, gboolean collapsed) {
	gtk_tool_item_group_set_collapsed((GtkToolItemGroup *)(_self_), collapsed);
}
void _gtk_tool_item_group_set_ellipsize(GtkToolItemGroup* _self_, PangoEllipsizeMode ellipsize) {
	gtk_tool_item_group_set_ellipsize((GtkToolItemGroup *)(_self_), ellipsize);
}
void _gtk_tool_item_group_set_header_relief(GtkToolItemGroup* _self_, GtkReliefStyle style) {
	gtk_tool_item_group_set_header_relief((GtkToolItemGroup *)(_self_), style);
}
void _gtk_tool_item_group_set_item_position(GtkToolItemGroup* _self_, GtkToolItem* item, gint position) {
	gtk_tool_item_group_set_item_position((GtkToolItemGroup *)(_self_), (GtkToolItem *)(item), position);
}
void _gtk_tool_item_group_set_label(GtkToolItemGroup* _self_, gchar* label) {
	gtk_tool_item_group_set_label((GtkToolItemGroup *)(_self_), (const gchar *)(label));
}
void _gtk_tool_item_group_set_label_widget(GtkToolItemGroup* _self_, GtkWidget* label_widget) {
	gtk_tool_item_group_set_label_widget((GtkToolItemGroup *)(_self_), (GtkWidget *)(label_widget));
}
void _gtk_tool_palette_add_drag_dest(GtkToolPalette* _self_, GtkWidget* widget, GtkDestDefaults flags, GtkToolPaletteDragTargets targets, GdkDragAction actions) {
	gtk_tool_palette_add_drag_dest((GtkToolPalette *)(_self_), (GtkWidget *)(widget), flags, targets, actions);
}
GtkWidget * _gtk_tool_palette_get_drag_item(GtkToolPalette* _self_, GtkSelectionData* selection) {
	return gtk_tool_palette_get_drag_item((GtkToolPalette *)(_self_), (const GtkSelectionData *)(selection));
}
GtkToolItemGroup * _gtk_tool_palette_get_drop_group(GtkToolPalette* _self_, gint x, gint y) {
	return gtk_tool_palette_get_drop_group((GtkToolPalette *)(_self_), x, y);
}
GtkToolItem * _gtk_tool_palette_get_drop_item(GtkToolPalette* _self_, gint x, gint y) {
	return gtk_tool_palette_get_drop_item((GtkToolPalette *)(_self_), x, y);
}
gboolean _gtk_tool_palette_get_exclusive(GtkToolPalette* _self_, GtkToolItemGroup* group) {
	return gtk_tool_palette_get_exclusive((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group));
}
gboolean _gtk_tool_palette_get_expand(GtkToolPalette* _self_, GtkToolItemGroup* group) {
	return gtk_tool_palette_get_expand((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group));
}
gint _gtk_tool_palette_get_group_position(GtkToolPalette* _self_, GtkToolItemGroup* group) {
	return gtk_tool_palette_get_group_position((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group));
}
GtkIconSize _gtk_tool_palette_get_icon_size(GtkToolPalette* _self_) {
	return gtk_tool_palette_get_icon_size((GtkToolPalette *)(_self_));
}
GtkToolbarStyle _gtk_tool_palette_get_style(GtkToolPalette* _self_) {
	return gtk_tool_palette_get_style((GtkToolPalette *)(_self_));
}
void _gtk_tool_palette_set_drag_source(GtkToolPalette* _self_, GtkToolPaletteDragTargets targets) {
	gtk_tool_palette_set_drag_source((GtkToolPalette *)(_self_), targets);
}
void _gtk_tool_palette_set_exclusive(GtkToolPalette* _self_, GtkToolItemGroup* group, gboolean exclusive) {
	gtk_tool_palette_set_exclusive((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group), exclusive);
}
void _gtk_tool_palette_set_expand(GtkToolPalette* _self_, GtkToolItemGroup* group, gboolean expand) {
	gtk_tool_palette_set_expand((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group), expand);
}
void _gtk_tool_palette_set_group_position(GtkToolPalette* _self_, GtkToolItemGroup* group, gint position) {
	gtk_tool_palette_set_group_position((GtkToolPalette *)(_self_), (GtkToolItemGroup *)(group), position);
}
void _gtk_tool_palette_set_icon_size(GtkToolPalette* _self_, GtkIconSize icon_size) {
	gtk_tool_palette_set_icon_size((GtkToolPalette *)(_self_), icon_size);
}
void _gtk_tool_palette_set_style(GtkToolPalette* _self_, GtkToolbarStyle style) {
	gtk_tool_palette_set_style((GtkToolPalette *)(_self_), style);
}
void _gtk_tool_palette_unset_icon_size(GtkToolPalette* _self_) {
	gtk_tool_palette_unset_icon_size((GtkToolPalette *)(_self_));
}
void _gtk_tool_palette_unset_style(GtkToolPalette* _self_) {
	gtk_tool_palette_unset_style((GtkToolPalette *)(_self_));
}
gint _gtk_toolbar_get_drop_index(GtkToolbar* _self_, gint x, gint y) {
	return gtk_toolbar_get_drop_index((GtkToolbar *)(_self_), x, y);
}
GtkIconSize _gtk_toolbar_get_icon_size(GtkToolbar* _self_) {
	return gtk_toolbar_get_icon_size((GtkToolbar *)(_self_));
}
gint _gtk_toolbar_get_item_index(GtkToolbar* _self_, GtkToolItem* item) {
	return gtk_toolbar_get_item_index((GtkToolbar *)(_self_), (GtkToolItem *)(item));
}
gint _gtk_toolbar_get_n_items(GtkToolbar* _self_) {
	return gtk_toolbar_get_n_items((GtkToolbar *)(_self_));
}
GtkToolItem * _gtk_toolbar_get_nth_item(GtkToolbar* _self_, gint n) {
	return gtk_toolbar_get_nth_item((GtkToolbar *)(_self_), n);
}
GtkReliefStyle _gtk_toolbar_get_relief_style(GtkToolbar* _self_) {
	return gtk_toolbar_get_relief_style((GtkToolbar *)(_self_));
}
gboolean _gtk_toolbar_get_show_arrow(GtkToolbar* _self_) {
	return gtk_toolbar_get_show_arrow((GtkToolbar *)(_self_));
}
GtkToolbarStyle _gtk_toolbar_get_style(GtkToolbar* _self_) {
	return gtk_toolbar_get_style((GtkToolbar *)(_self_));
}
void _gtk_toolbar_insert(GtkToolbar* _self_, GtkToolItem* item, gint pos) {
	gtk_toolbar_insert((GtkToolbar *)(_self_), (GtkToolItem *)(item), pos);
}
void _gtk_toolbar_set_drop_highlight_item(GtkToolbar* _self_, GtkToolItem* tool_item, gint index_) {
	gtk_toolbar_set_drop_highlight_item((GtkToolbar *)(_self_), (GtkToolItem *)(tool_item), index_);
}
void _gtk_toolbar_set_icon_size(GtkToolbar* _self_, GtkIconSize icon_size) {
	gtk_toolbar_set_icon_size((GtkToolbar *)(_self_), icon_size);
}
void _gtk_toolbar_set_show_arrow(GtkToolbar* _self_, gboolean show_arrow) {
	gtk_toolbar_set_show_arrow((GtkToolbar *)(_self_), show_arrow);
}
void _gtk_toolbar_set_style(GtkToolbar* _self_, GtkToolbarStyle style) {
	gtk_toolbar_set_style((GtkToolbar *)(_self_), style);
}
void _gtk_toolbar_unset_icon_size(GtkToolbar* _self_) {
	gtk_toolbar_unset_icon_size((GtkToolbar *)(_self_));
}
void _gtk_toolbar_unset_style(GtkToolbar* _self_) {
	gtk_toolbar_unset_style((GtkToolbar *)(_self_));
}
void _gtk_tooltip_set_custom(GtkTooltip* _self_, GtkWidget* custom_widget) {
	gtk_tooltip_set_custom((GtkTooltip *)(_self_), (GtkWidget *)(custom_widget));
}
void _gtk_tooltip_set_icon(GtkTooltip* _self_, GdkPixbuf* pixbuf) {
	gtk_tooltip_set_icon((GtkTooltip *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_tooltip_set_icon_from_gicon(GtkTooltip* _self_, GIcon* gicon, GtkIconSize size) {
	gtk_tooltip_set_icon_from_gicon((GtkTooltip *)(_self_), (GIcon *)(gicon), size);
}
void _gtk_tooltip_set_icon_from_icon_name(GtkTooltip* _self_, gchar* icon_name, GtkIconSize size) {
	gtk_tooltip_set_icon_from_icon_name((GtkTooltip *)(_self_), (const gchar *)(icon_name), size);
}
void _gtk_tooltip_set_icon_from_stock(GtkTooltip* _self_, gchar* stock_id, GtkIconSize size) {
	gtk_tooltip_set_icon_from_stock((GtkTooltip *)(_self_), (const gchar *)(stock_id), size);
}
void _gtk_tooltip_set_markup(GtkTooltip* _self_, gchar* markup) {
	gtk_tooltip_set_markup((GtkTooltip *)(_self_), (const gchar *)(markup));
}
void _gtk_tooltip_set_text(GtkTooltip* _self_, gchar* text) {
	gtk_tooltip_set_text((GtkTooltip *)(_self_), (const gchar *)(text));
}
void _gtk_tooltip_set_tip_area(GtkTooltip* _self_, GdkRectangle* rect) {
	gtk_tooltip_set_tip_area((GtkTooltip *)(_self_), (const GdkRectangle *)(rect));
}
GtkTreeIter * _gtk_tree_iter_copy(GtkTreeIter* _self_) {
	return gtk_tree_iter_copy((GtkTreeIter *)(_self_));
}
void _gtk_tree_iter_free(GtkTreeIter* _self_) {
	gtk_tree_iter_free((GtkTreeIter *)(_self_));
}
void _gtk_tree_model_filter_clear_cache(GtkTreeModelFilter* _self_) {
	gtk_tree_model_filter_clear_cache((GtkTreeModelFilter *)(_self_));
}
gboolean _gtk_tree_model_filter_convert_child_iter_to_iter(GtkTreeModelFilter* _self_, GtkTreeIter* filter_iter, GtkTreeIter* child_iter) {
	return gtk_tree_model_filter_convert_child_iter_to_iter((GtkTreeModelFilter *)(_self_), (GtkTreeIter *)(filter_iter), (GtkTreeIter *)(child_iter));
}
GtkTreePath * _gtk_tree_model_filter_convert_child_path_to_path(GtkTreeModelFilter* _self_, GtkTreePath* child_path) {
	return gtk_tree_model_filter_convert_child_path_to_path((GtkTreeModelFilter *)(_self_), (GtkTreePath *)(child_path));
}
void _gtk_tree_model_filter_convert_iter_to_child_iter(GtkTreeModelFilter* _self_, GtkTreeIter* child_iter, GtkTreeIter* filter_iter) {
	gtk_tree_model_filter_convert_iter_to_child_iter((GtkTreeModelFilter *)(_self_), (GtkTreeIter *)(child_iter), (GtkTreeIter *)(filter_iter));
}
GtkTreePath * _gtk_tree_model_filter_convert_path_to_child_path(GtkTreeModelFilter* _self_, GtkTreePath* filter_path) {
	return gtk_tree_model_filter_convert_path_to_child_path((GtkTreeModelFilter *)(_self_), (GtkTreePath *)(filter_path));
}
GtkTreeModel * _gtk_tree_model_filter_get_model(GtkTreeModelFilter* _self_) {
	return gtk_tree_model_filter_get_model((GtkTreeModelFilter *)(_self_));
}
void _gtk_tree_model_filter_refilter(GtkTreeModelFilter* _self_) {
	gtk_tree_model_filter_refilter((GtkTreeModelFilter *)(_self_));
}
void _gtk_tree_model_filter_set_modify_func(GtkTreeModelFilter* _self_, gint n_columns, GType* types, GtkTreeModelFilterModifyFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_tree_model_filter_set_modify_func((GtkTreeModelFilter *)(_self_), n_columns, (GType *)(types), func_, data, destroy);
}
void _gtk_tree_model_filter_set_visible_column(GtkTreeModelFilter* _self_, gint column) {
	gtk_tree_model_filter_set_visible_column((GtkTreeModelFilter *)(_self_), column);
}
void _gtk_tree_model_filter_set_visible_func(GtkTreeModelFilter* _self_, GtkTreeModelFilterVisibleFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_tree_model_filter_set_visible_func((GtkTreeModelFilter *)(_self_), func_, data, destroy);
}
void _gtk_tree_model_sort_clear_cache(GtkTreeModelSort* _self_) {
	gtk_tree_model_sort_clear_cache((GtkTreeModelSort *)(_self_));
}
gboolean _gtk_tree_model_sort_convert_child_iter_to_iter(GtkTreeModelSort* _self_, GtkTreeIter* sort_iter, GtkTreeIter* child_iter) {
	return gtk_tree_model_sort_convert_child_iter_to_iter((GtkTreeModelSort *)(_self_), (GtkTreeIter *)(sort_iter), (GtkTreeIter *)(child_iter));
}
GtkTreePath * _gtk_tree_model_sort_convert_child_path_to_path(GtkTreeModelSort* _self_, GtkTreePath* child_path) {
	return gtk_tree_model_sort_convert_child_path_to_path((GtkTreeModelSort *)(_self_), (GtkTreePath *)(child_path));
}
void _gtk_tree_model_sort_convert_iter_to_child_iter(GtkTreeModelSort* _self_, GtkTreeIter* child_iter, GtkTreeIter* sorted_iter) {
	gtk_tree_model_sort_convert_iter_to_child_iter((GtkTreeModelSort *)(_self_), (GtkTreeIter *)(child_iter), (GtkTreeIter *)(sorted_iter));
}
GtkTreePath * _gtk_tree_model_sort_convert_path_to_child_path(GtkTreeModelSort* _self_, GtkTreePath* sorted_path) {
	return gtk_tree_model_sort_convert_path_to_child_path((GtkTreeModelSort *)(_self_), (GtkTreePath *)(sorted_path));
}
GtkTreeModel * _gtk_tree_model_sort_get_model(GtkTreeModelSort* _self_) {
	return gtk_tree_model_sort_get_model((GtkTreeModelSort *)(_self_));
}
gboolean _gtk_tree_model_sort_iter_is_valid(GtkTreeModelSort* _self_, GtkTreeIter* iter) {
	return gtk_tree_model_sort_iter_is_valid((GtkTreeModelSort *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_tree_model_sort_reset_default_sort_func(GtkTreeModelSort* _self_) {
	gtk_tree_model_sort_reset_default_sort_func((GtkTreeModelSort *)(_self_));
}
GtkTreePath * _gtk_tree_path_new_from_string(gchar* path) {
	return gtk_tree_path_new_from_string((const gchar *)(path));
}
void _gtk_tree_path_append_index(GtkTreePath* _self_, gint index_) {
	gtk_tree_path_append_index((GtkTreePath *)(_self_), index_);
}
gint _gtk_tree_path_compare(GtkTreePath* _self_, GtkTreePath* b) {
	return gtk_tree_path_compare((const GtkTreePath *)(_self_), (const GtkTreePath *)(b));
}
GtkTreePath * _gtk_tree_path_copy(GtkTreePath* _self_) {
	return gtk_tree_path_copy((const GtkTreePath *)(_self_));
}
void _gtk_tree_path_down(GtkTreePath* _self_) {
	gtk_tree_path_down((GtkTreePath *)(_self_));
}
void _gtk_tree_path_free(GtkTreePath* _self_) {
	gtk_tree_path_free((GtkTreePath *)(_self_));
}
gint _gtk_tree_path_get_depth(GtkTreePath* _self_) {
	return gtk_tree_path_get_depth((GtkTreePath *)(_self_));
}
gint * _gtk_tree_path_get_indices(GtkTreePath* _self_) {
	return gtk_tree_path_get_indices((GtkTreePath *)(_self_));
}
gint * _gtk_tree_path_get_indices_with_depth(GtkTreePath* _self_, gint* depth) {
	return gtk_tree_path_get_indices_with_depth((GtkTreePath *)(_self_), (gint *)(depth));
}
gboolean _gtk_tree_path_is_ancestor(GtkTreePath* _self_, GtkTreePath* descendant) {
	return gtk_tree_path_is_ancestor((GtkTreePath *)(_self_), (GtkTreePath *)(descendant));
}
gboolean _gtk_tree_path_is_descendant(GtkTreePath* _self_, GtkTreePath* ancestor) {
	return gtk_tree_path_is_descendant((GtkTreePath *)(_self_), (GtkTreePath *)(ancestor));
}
void _gtk_tree_path_next(GtkTreePath* _self_) {
	gtk_tree_path_next((GtkTreePath *)(_self_));
}
void _gtk_tree_path_prepend_index(GtkTreePath* _self_, gint index_) {
	gtk_tree_path_prepend_index((GtkTreePath *)(_self_), index_);
}
gboolean _gtk_tree_path_prev(GtkTreePath* _self_) {
	return gtk_tree_path_prev((GtkTreePath *)(_self_));
}
gchar * _gtk_tree_path_to_string(GtkTreePath* _self_) {
	return gtk_tree_path_to_string((GtkTreePath *)(_self_));
}
gboolean _gtk_tree_path_up(GtkTreePath* _self_) {
	return gtk_tree_path_up((GtkTreePath *)(_self_));
}
GtkTreeRowReference * _gtk_tree_row_reference_copy(GtkTreeRowReference* _self_) {
	return gtk_tree_row_reference_copy((GtkTreeRowReference *)(_self_));
}
void _gtk_tree_row_reference_free(GtkTreeRowReference* _self_) {
	gtk_tree_row_reference_free((GtkTreeRowReference *)(_self_));
}
GtkTreeModel * _gtk_tree_row_reference_get_model(GtkTreeRowReference* _self_) {
	return gtk_tree_row_reference_get_model((GtkTreeRowReference *)(_self_));
}
GtkTreePath * _gtk_tree_row_reference_get_path(GtkTreeRowReference* _self_) {
	return gtk_tree_row_reference_get_path((GtkTreeRowReference *)(_self_));
}
gboolean _gtk_tree_row_reference_valid(GtkTreeRowReference* _self_) {
	return gtk_tree_row_reference_valid((GtkTreeRowReference *)(_self_));
}
gint _gtk_tree_selection_count_selected_rows(GtkTreeSelection* _self_) {
	return gtk_tree_selection_count_selected_rows((GtkTreeSelection *)(_self_));
}
GtkSelectionMode _gtk_tree_selection_get_mode(GtkTreeSelection* _self_) {
	return gtk_tree_selection_get_mode((GtkTreeSelection *)(_self_));
}
GtkTreeSelectionFunc _gtk_tree_selection_get_select_function(GtkTreeSelection* _self_) {
	return gtk_tree_selection_get_select_function((GtkTreeSelection *)(_self_));
}
gboolean _gtk_tree_selection_get_selected(GtkTreeSelection* _self_, void* model, GtkTreeIter* iter) {
	return gtk_tree_selection_get_selected((GtkTreeSelection *)(_self_), (GtkTreeModel **)(model), (GtkTreeIter *)(iter));
}
GList * _gtk_tree_selection_get_selected_rows(GtkTreeSelection* _self_, void* model) {
	return gtk_tree_selection_get_selected_rows((GtkTreeSelection *)(_self_), (GtkTreeModel **)(model));
}
GtkTreeView * _gtk_tree_selection_get_tree_view(GtkTreeSelection* _self_) {
	return gtk_tree_selection_get_tree_view((GtkTreeSelection *)(_self_));
}
gpointer _gtk_tree_selection_get_user_data(GtkTreeSelection* _self_) {
	return gtk_tree_selection_get_user_data((GtkTreeSelection *)(_self_));
}
gboolean _gtk_tree_selection_iter_is_selected(GtkTreeSelection* _self_, GtkTreeIter* iter) {
	return gtk_tree_selection_iter_is_selected((GtkTreeSelection *)(_self_), (GtkTreeIter *)(iter));
}
gboolean _gtk_tree_selection_path_is_selected(GtkTreeSelection* _self_, GtkTreePath* path) {
	return gtk_tree_selection_path_is_selected((GtkTreeSelection *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_selection_select_all(GtkTreeSelection* _self_) {
	gtk_tree_selection_select_all((GtkTreeSelection *)(_self_));
}
void _gtk_tree_selection_select_iter(GtkTreeSelection* _self_, GtkTreeIter* iter) {
	gtk_tree_selection_select_iter((GtkTreeSelection *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_tree_selection_select_path(GtkTreeSelection* _self_, GtkTreePath* path) {
	gtk_tree_selection_select_path((GtkTreeSelection *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_selection_select_range(GtkTreeSelection* _self_, GtkTreePath* start_path, GtkTreePath* end_path) {
	gtk_tree_selection_select_range((GtkTreeSelection *)(_self_), (GtkTreePath *)(start_path), (GtkTreePath *)(end_path));
}
void _gtk_tree_selection_selected_foreach(GtkTreeSelection* _self_, GtkTreeSelectionForeachFunc func_, gpointer data) {
	gtk_tree_selection_selected_foreach((GtkTreeSelection *)(_self_), func_, data);
}
void _gtk_tree_selection_set_mode(GtkTreeSelection* _self_, GtkSelectionMode type_) {
	gtk_tree_selection_set_mode((GtkTreeSelection *)(_self_), type_);
}
void _gtk_tree_selection_set_select_function(GtkTreeSelection* _self_, GtkTreeSelectionFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_tree_selection_set_select_function((GtkTreeSelection *)(_self_), func_, data, destroy);
}
void _gtk_tree_selection_unselect_all(GtkTreeSelection* _self_) {
	gtk_tree_selection_unselect_all((GtkTreeSelection *)(_self_));
}
void _gtk_tree_selection_unselect_iter(GtkTreeSelection* _self_, GtkTreeIter* iter) {
	gtk_tree_selection_unselect_iter((GtkTreeSelection *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_tree_selection_unselect_path(GtkTreeSelection* _self_, GtkTreePath* path) {
	gtk_tree_selection_unselect_path((GtkTreeSelection *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_selection_unselect_range(GtkTreeSelection* _self_, GtkTreePath* start_path, GtkTreePath* end_path) {
	gtk_tree_selection_unselect_range((GtkTreeSelection *)(_self_), (GtkTreePath *)(start_path), (GtkTreePath *)(end_path));
}
void _gtk_tree_store_append(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent) {
	gtk_tree_store_append((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent));
}
void _gtk_tree_store_clear(GtkTreeStore* _self_) {
	gtk_tree_store_clear((GtkTreeStore *)(_self_));
}
void _gtk_tree_store_insert(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent, gint position) {
	gtk_tree_store_insert((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent), position);
}
void _gtk_tree_store_insert_after(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) {
	gtk_tree_store_insert_after((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent), (GtkTreeIter *)(sibling));
}
void _gtk_tree_store_insert_before(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent, GtkTreeIter* sibling) {
	gtk_tree_store_insert_before((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent), (GtkTreeIter *)(sibling));
}
void _gtk_tree_store_insert_with_valuesv(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent, gint position, gint* columns, GValue* values, gint n_values) {
	gtk_tree_store_insert_with_valuesv((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent), position, (gint *)(columns), (GValue *)(values), n_values);
}
gboolean _gtk_tree_store_is_ancestor(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* descendant) {
	return gtk_tree_store_is_ancestor((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(descendant));
}
gint _gtk_tree_store_iter_depth(GtkTreeStore* _self_, GtkTreeIter* iter) {
	return gtk_tree_store_iter_depth((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter));
}
gboolean _gtk_tree_store_iter_is_valid(GtkTreeStore* _self_, GtkTreeIter* iter) {
	return gtk_tree_store_iter_is_valid((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_tree_store_move_after(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* position) {
	gtk_tree_store_move_after((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(position));
}
void _gtk_tree_store_move_before(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* position) {
	gtk_tree_store_move_before((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(position));
}
void _gtk_tree_store_prepend(GtkTreeStore* _self_, GtkTreeIter* iter, GtkTreeIter* parent) {
	gtk_tree_store_prepend((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (GtkTreeIter *)(parent));
}
gboolean _gtk_tree_store_remove(GtkTreeStore* _self_, GtkTreeIter* iter) {
	return gtk_tree_store_remove((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter));
}
void _gtk_tree_store_reorder(GtkTreeStore* _self_, GtkTreeIter* parent, gint* new_order) {
	gtk_tree_store_reorder((GtkTreeStore *)(_self_), (GtkTreeIter *)(parent), (gint *)(new_order));
}
void _gtk_tree_store_set_column_types(GtkTreeStore* _self_, gint n_columns, GType* types) {
	gtk_tree_store_set_column_types((GtkTreeStore *)(_self_), n_columns, (GType *)(types));
}
void _gtk_tree_store_set_value(GtkTreeStore* _self_, GtkTreeIter* iter, gint column, GValue* value) {
	gtk_tree_store_set_value((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), column, (GValue *)(value));
}
void _gtk_tree_store_set_valuesv(GtkTreeStore* _self_, GtkTreeIter* iter, gint* columns, GValue* values, gint n_values) {
	gtk_tree_store_set_valuesv((GtkTreeStore *)(_self_), (GtkTreeIter *)(iter), (gint *)(columns), (GValue *)(values), n_values);
}
void _gtk_tree_store_swap(GtkTreeStore* _self_, GtkTreeIter* a, GtkTreeIter* b) {
	gtk_tree_store_swap((GtkTreeStore *)(_self_), (GtkTreeIter *)(a), (GtkTreeIter *)(b));
}
gint _gtk_tree_view_append_column(GtkTreeView* _self_, GtkTreeViewColumn* column) {
	return gtk_tree_view_append_column((GtkTreeView *)(_self_), (GtkTreeViewColumn *)(column));
}
void _gtk_tree_view_collapse_all(GtkTreeView* _self_) {
	gtk_tree_view_collapse_all((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_collapse_row(GtkTreeView* _self_, GtkTreePath* path) {
	return gtk_tree_view_collapse_row((GtkTreeView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_view_columns_autosize(GtkTreeView* _self_) {
	gtk_tree_view_columns_autosize((GtkTreeView *)(_self_));
}
void _gtk_tree_view_convert_bin_window_to_tree_coords(GtkTreeView* _self_, gint bx, gint by, gint* tx, gint* ty) {
	gtk_tree_view_convert_bin_window_to_tree_coords((GtkTreeView *)(_self_), bx, by, (gint *)(tx), (gint *)(ty));
}
void _gtk_tree_view_convert_bin_window_to_widget_coords(GtkTreeView* _self_, gint bx, gint by, gint* wx, gint* wy) {
	gtk_tree_view_convert_bin_window_to_widget_coords((GtkTreeView *)(_self_), bx, by, (gint *)(wx), (gint *)(wy));
}
void _gtk_tree_view_convert_tree_to_bin_window_coords(GtkTreeView* _self_, gint tx, gint ty, gint* bx, gint* by) {
	gtk_tree_view_convert_tree_to_bin_window_coords((GtkTreeView *)(_self_), tx, ty, (gint *)(bx), (gint *)(by));
}
void _gtk_tree_view_convert_tree_to_widget_coords(GtkTreeView* _self_, gint tx, gint ty, gint* wx, gint* wy) {
	gtk_tree_view_convert_tree_to_widget_coords((GtkTreeView *)(_self_), tx, ty, (gint *)(wx), (gint *)(wy));
}
void _gtk_tree_view_convert_widget_to_bin_window_coords(GtkTreeView* _self_, gint wx, gint wy, gint* bx, gint* by) {
	gtk_tree_view_convert_widget_to_bin_window_coords((GtkTreeView *)(_self_), wx, wy, (gint *)(bx), (gint *)(by));
}
void _gtk_tree_view_convert_widget_to_tree_coords(GtkTreeView* _self_, gint wx, gint wy, gint* tx, gint* ty) {
	gtk_tree_view_convert_widget_to_tree_coords((GtkTreeView *)(_self_), wx, wy, (gint *)(tx), (gint *)(ty));
}
cairo_surface_t * _gtk_tree_view_create_row_drag_icon(GtkTreeView* _self_, GtkTreePath* path) {
	return gtk_tree_view_create_row_drag_icon((GtkTreeView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_view_enable_model_drag_dest(GtkTreeView* _self_, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_tree_view_enable_model_drag_dest((GtkTreeView *)(_self_), (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_tree_view_enable_model_drag_source(GtkTreeView* _self_, GdkModifierType start_button_mask, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_tree_view_enable_model_drag_source((GtkTreeView *)(_self_), start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_tree_view_expand_all(GtkTreeView* _self_) {
	gtk_tree_view_expand_all((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_expand_row(GtkTreeView* _self_, GtkTreePath* path, gboolean open_all) {
	return gtk_tree_view_expand_row((GtkTreeView *)(_self_), (GtkTreePath *)(path), open_all);
}
void _gtk_tree_view_expand_to_path(GtkTreeView* _self_, GtkTreePath* path) {
	gtk_tree_view_expand_to_path((GtkTreeView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_view_get_background_area(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) {
	gtk_tree_view_get_background_area((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(column), (GdkRectangle *)(rect));
}
GdkWindow * _gtk_tree_view_get_bin_window(GtkTreeView* _self_) {
	return gtk_tree_view_get_bin_window((GtkTreeView *)(_self_));
}
void _gtk_tree_view_get_cell_area(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* column, GdkRectangle* rect) {
	gtk_tree_view_get_cell_area((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(column), (GdkRectangle *)(rect));
}
GtkTreeViewColumn * _gtk_tree_view_get_column(GtkTreeView* _self_, gint n) {
	return gtk_tree_view_get_column((GtkTreeView *)(_self_), n);
}
GList * _gtk_tree_view_get_columns(GtkTreeView* _self_) {
	return gtk_tree_view_get_columns((GtkTreeView *)(_self_));
}
void _gtk_tree_view_get_cursor(GtkTreeView* _self_, void* path, void* focus_column) {
	gtk_tree_view_get_cursor((GtkTreeView *)(_self_), (GtkTreePath **)(path), (GtkTreeViewColumn **)(focus_column));
}
gboolean _gtk_tree_view_get_dest_row_at_pos(GtkTreeView* _self_, gint drag_x, gint drag_y, void* path, GtkTreeViewDropPosition* pos) {
	return gtk_tree_view_get_dest_row_at_pos((GtkTreeView *)(_self_), drag_x, drag_y, (GtkTreePath **)(path), (GtkTreeViewDropPosition *)(pos));
}
void _gtk_tree_view_get_drag_dest_row(GtkTreeView* _self_, void* path, GtkTreeViewDropPosition* pos) {
	gtk_tree_view_get_drag_dest_row((GtkTreeView *)(_self_), (GtkTreePath **)(path), (GtkTreeViewDropPosition *)(pos));
}
gboolean _gtk_tree_view_get_enable_search(GtkTreeView* _self_) {
	return gtk_tree_view_get_enable_search((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_enable_tree_lines(GtkTreeView* _self_) {
	return gtk_tree_view_get_enable_tree_lines((GtkTreeView *)(_self_));
}
GtkTreeViewColumn * _gtk_tree_view_get_expander_column(GtkTreeView* _self_) {
	return gtk_tree_view_get_expander_column((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_fixed_height_mode(GtkTreeView* _self_) {
	return gtk_tree_view_get_fixed_height_mode((GtkTreeView *)(_self_));
}
GtkTreeViewGridLines _gtk_tree_view_get_grid_lines(GtkTreeView* _self_) {
	return gtk_tree_view_get_grid_lines((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_headers_clickable(GtkTreeView* _self_) {
	return gtk_tree_view_get_headers_clickable((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_headers_visible(GtkTreeView* _self_) {
	return gtk_tree_view_get_headers_visible((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_hover_expand(GtkTreeView* _self_) {
	return gtk_tree_view_get_hover_expand((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_hover_selection(GtkTreeView* _self_) {
	return gtk_tree_view_get_hover_selection((GtkTreeView *)(_self_));
}
gint _gtk_tree_view_get_level_indentation(GtkTreeView* _self_) {
	return gtk_tree_view_get_level_indentation((GtkTreeView *)(_self_));
}
GtkTreeModel * _gtk_tree_view_get_model(GtkTreeView* _self_) {
	return gtk_tree_view_get_model((GtkTreeView *)(_self_));
}
guint _gtk_tree_view_get_n_columns(GtkTreeView* _self_) {
	return gtk_tree_view_get_n_columns((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_path_at_pos(GtkTreeView* _self_, gint x, gint y, void* path, void* column, gint* cell_x, gint* cell_y) {
	return gtk_tree_view_get_path_at_pos((GtkTreeView *)(_self_), x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), (gint *)(cell_x), (gint *)(cell_y));
}
gboolean _gtk_tree_view_get_reorderable(GtkTreeView* _self_) {
	return gtk_tree_view_get_reorderable((GtkTreeView *)(_self_));
}
GtkTreeViewRowSeparatorFunc _gtk_tree_view_get_row_separator_func(GtkTreeView* _self_) {
	return gtk_tree_view_get_row_separator_func((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_rubber_banding(GtkTreeView* _self_) {
	return gtk_tree_view_get_rubber_banding((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_rules_hint(GtkTreeView* _self_) {
	return gtk_tree_view_get_rules_hint((GtkTreeView *)(_self_));
}
gint _gtk_tree_view_get_search_column(GtkTreeView* _self_) {
	return gtk_tree_view_get_search_column((GtkTreeView *)(_self_));
}
GtkEntry * _gtk_tree_view_get_search_entry(GtkTreeView* _self_) {
	return gtk_tree_view_get_search_entry((GtkTreeView *)(_self_));
}
GtkTreeViewSearchEqualFunc _gtk_tree_view_get_search_equal_func(GtkTreeView* _self_) {
	return gtk_tree_view_get_search_equal_func((GtkTreeView *)(_self_));
}
GtkTreeViewSearchPositionFunc _gtk_tree_view_get_search_position_func(GtkTreeView* _self_) {
	return gtk_tree_view_get_search_position_func((GtkTreeView *)(_self_));
}
GtkTreeSelection * _gtk_tree_view_get_selection(GtkTreeView* _self_) {
	return gtk_tree_view_get_selection((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_show_expanders(GtkTreeView* _self_) {
	return gtk_tree_view_get_show_expanders((GtkTreeView *)(_self_));
}
gint _gtk_tree_view_get_tooltip_column(GtkTreeView* _self_) {
	return gtk_tree_view_get_tooltip_column((GtkTreeView *)(_self_));
}
gboolean _gtk_tree_view_get_visible_range(GtkTreeView* _self_, void* start_path, void* end_path) {
	return gtk_tree_view_get_visible_range((GtkTreeView *)(_self_), (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
void _gtk_tree_view_get_visible_rect(GtkTreeView* _self_, GdkRectangle* visible_rect) {
	gtk_tree_view_get_visible_rect((GtkTreeView *)(_self_), (GdkRectangle *)(visible_rect));
}
gint _gtk_tree_view_insert_column(GtkTreeView* _self_, GtkTreeViewColumn* column, gint position) {
	return gtk_tree_view_insert_column((GtkTreeView *)(_self_), (GtkTreeViewColumn *)(column), position);
}
gint _gtk_tree_view_insert_column_with_data_func(GtkTreeView* _self_, gint position, gchar* title, GtkCellRenderer* cell, GtkTreeCellDataFunc func_, gpointer data, GDestroyNotify dnotify) {
	return gtk_tree_view_insert_column_with_data_func((GtkTreeView *)(_self_), position, (const gchar *)(title), (GtkCellRenderer *)(cell), func_, data, dnotify);
}
gboolean _gtk_tree_view_is_blank_at_pos(GtkTreeView* _self_, gint x, gint y, void* path, void* column, gint* cell_x, gint* cell_y) {
	return gtk_tree_view_is_blank_at_pos((GtkTreeView *)(_self_), x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), (gint *)(cell_x), (gint *)(cell_y));
}
gboolean _gtk_tree_view_is_rubber_banding_active(GtkTreeView* _self_) {
	return gtk_tree_view_is_rubber_banding_active((GtkTreeView *)(_self_));
}
void _gtk_tree_view_map_expanded_rows(GtkTreeView* _self_, GtkTreeViewMappingFunc func_, gpointer data) {
	gtk_tree_view_map_expanded_rows((GtkTreeView *)(_self_), func_, data);
}
void _gtk_tree_view_move_column_after(GtkTreeView* _self_, GtkTreeViewColumn* column, GtkTreeViewColumn* base_column) {
	gtk_tree_view_move_column_after((GtkTreeView *)(_self_), (GtkTreeViewColumn *)(column), (GtkTreeViewColumn *)(base_column));
}
gint _gtk_tree_view_remove_column(GtkTreeView* _self_, GtkTreeViewColumn* column) {
	return gtk_tree_view_remove_column((GtkTreeView *)(_self_), (GtkTreeViewColumn *)(column));
}
void _gtk_tree_view_row_activated(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* column) {
	gtk_tree_view_row_activated((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(column));
}
gboolean _gtk_tree_view_row_expanded(GtkTreeView* _self_, GtkTreePath* path) {
	return gtk_tree_view_row_expanded((GtkTreeView *)(_self_), (GtkTreePath *)(path));
}
void _gtk_tree_view_scroll_to_cell(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* column, gboolean use_align, gfloat row_align, gfloat col_align) {
	gtk_tree_view_scroll_to_cell((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(column), use_align, row_align, col_align);
}
void _gtk_tree_view_scroll_to_point(GtkTreeView* _self_, gint tree_x, gint tree_y) {
	gtk_tree_view_scroll_to_point((GtkTreeView *)(_self_), tree_x, tree_y);
}
void _gtk_tree_view_set_column_drag_function(GtkTreeView* _self_, GtkTreeViewColumnDropFunc func_, gpointer user_data, GDestroyNotify destroy) {
	gtk_tree_view_set_column_drag_function((GtkTreeView *)(_self_), func_, user_data, destroy);
}
void _gtk_tree_view_set_cursor(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* focus_column, gboolean start_editing) {
	gtk_tree_view_set_cursor((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(focus_column), start_editing);
}
void _gtk_tree_view_set_cursor_on_cell(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewColumn* focus_column, GtkCellRenderer* focus_cell, gboolean start_editing) {
	gtk_tree_view_set_cursor_on_cell((GtkTreeView *)(_self_), (GtkTreePath *)(path), (GtkTreeViewColumn *)(focus_column), (GtkCellRenderer *)(focus_cell), start_editing);
}
void _gtk_tree_view_set_drag_dest_row(GtkTreeView* _self_, GtkTreePath* path, GtkTreeViewDropPosition pos) {
	gtk_tree_view_set_drag_dest_row((GtkTreeView *)(_self_), (GtkTreePath *)(path), pos);
}
void _gtk_tree_view_set_enable_search(GtkTreeView* _self_, gboolean enable_search) {
	gtk_tree_view_set_enable_search((GtkTreeView *)(_self_), enable_search);
}
void _gtk_tree_view_set_enable_tree_lines(GtkTreeView* _self_, gboolean enabled) {
	gtk_tree_view_set_enable_tree_lines((GtkTreeView *)(_self_), enabled);
}
void _gtk_tree_view_set_expander_column(GtkTreeView* _self_, GtkTreeViewColumn* column) {
	gtk_tree_view_set_expander_column((GtkTreeView *)(_self_), (GtkTreeViewColumn *)(column));
}
void _gtk_tree_view_set_fixed_height_mode(GtkTreeView* _self_, gboolean enable) {
	gtk_tree_view_set_fixed_height_mode((GtkTreeView *)(_self_), enable);
}
void _gtk_tree_view_set_grid_lines(GtkTreeView* _self_, GtkTreeViewGridLines grid_lines) {
	gtk_tree_view_set_grid_lines((GtkTreeView *)(_self_), grid_lines);
}
void _gtk_tree_view_set_headers_clickable(GtkTreeView* _self_, gboolean setting) {
	gtk_tree_view_set_headers_clickable((GtkTreeView *)(_self_), setting);
}
void _gtk_tree_view_set_headers_visible(GtkTreeView* _self_, gboolean headers_visible) {
	gtk_tree_view_set_headers_visible((GtkTreeView *)(_self_), headers_visible);
}
void _gtk_tree_view_set_hover_expand(GtkTreeView* _self_, gboolean expand) {
	gtk_tree_view_set_hover_expand((GtkTreeView *)(_self_), expand);
}
void _gtk_tree_view_set_hover_selection(GtkTreeView* _self_, gboolean hover) {
	gtk_tree_view_set_hover_selection((GtkTreeView *)(_self_), hover);
}
void _gtk_tree_view_set_level_indentation(GtkTreeView* _self_, gint indentation) {
	gtk_tree_view_set_level_indentation((GtkTreeView *)(_self_), indentation);
}
void _gtk_tree_view_set_model(GtkTreeView* _self_, GtkTreeModel* model) {
	gtk_tree_view_set_model((GtkTreeView *)(_self_), (GtkTreeModel *)(model));
}
void _gtk_tree_view_set_reorderable(GtkTreeView* _self_, gboolean reorderable) {
	gtk_tree_view_set_reorderable((GtkTreeView *)(_self_), reorderable);
}
void _gtk_tree_view_set_row_separator_func(GtkTreeView* _self_, GtkTreeViewRowSeparatorFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_tree_view_set_row_separator_func((GtkTreeView *)(_self_), func_, data, destroy);
}
void _gtk_tree_view_set_rubber_banding(GtkTreeView* _self_, gboolean enable) {
	gtk_tree_view_set_rubber_banding((GtkTreeView *)(_self_), enable);
}
void _gtk_tree_view_set_rules_hint(GtkTreeView* _self_, gboolean setting) {
	gtk_tree_view_set_rules_hint((GtkTreeView *)(_self_), setting);
}
void _gtk_tree_view_set_search_column(GtkTreeView* _self_, gint column) {
	gtk_tree_view_set_search_column((GtkTreeView *)(_self_), column);
}
void _gtk_tree_view_set_search_entry(GtkTreeView* _self_, GtkEntry* entry) {
	gtk_tree_view_set_search_entry((GtkTreeView *)(_self_), (GtkEntry *)(entry));
}
void _gtk_tree_view_set_search_equal_func(GtkTreeView* _self_, GtkTreeViewSearchEqualFunc search_equal_func, gpointer search_user_data, GDestroyNotify search_destroy) {
	gtk_tree_view_set_search_equal_func((GtkTreeView *)(_self_), search_equal_func, search_user_data, search_destroy);
}
void _gtk_tree_view_set_search_position_func(GtkTreeView* _self_, GtkTreeViewSearchPositionFunc func_, gpointer data, GDestroyNotify destroy) {
	gtk_tree_view_set_search_position_func((GtkTreeView *)(_self_), func_, data, destroy);
}
void _gtk_tree_view_set_show_expanders(GtkTreeView* _self_, gboolean enabled) {
	gtk_tree_view_set_show_expanders((GtkTreeView *)(_self_), enabled);
}
void _gtk_tree_view_set_tooltip_cell(GtkTreeView* _self_, GtkTooltip* tooltip, GtkTreePath* path, GtkTreeViewColumn* column, GtkCellRenderer* cell) {
	gtk_tree_view_set_tooltip_cell((GtkTreeView *)(_self_), (GtkTooltip *)(tooltip), (GtkTreePath *)(path), (GtkTreeViewColumn *)(column), (GtkCellRenderer *)(cell));
}
void _gtk_tree_view_set_tooltip_column(GtkTreeView* _self_, gint column) {
	gtk_tree_view_set_tooltip_column((GtkTreeView *)(_self_), column);
}
void _gtk_tree_view_set_tooltip_row(GtkTreeView* _self_, GtkTooltip* tooltip, GtkTreePath* path) {
	gtk_tree_view_set_tooltip_row((GtkTreeView *)(_self_), (GtkTooltip *)(tooltip), (GtkTreePath *)(path));
}
void _gtk_tree_view_unset_rows_drag_dest(GtkTreeView* _self_) {
	gtk_tree_view_unset_rows_drag_dest((GtkTreeView *)(_self_));
}
void _gtk_tree_view_unset_rows_drag_source(GtkTreeView* _self_) {
	gtk_tree_view_unset_rows_drag_source((GtkTreeView *)(_self_));
}
void _gtk_tree_view_column_add_attribute(GtkTreeViewColumn* _self_, GtkCellRenderer* cell_renderer, gchar* attribute, gint column) {
	gtk_tree_view_column_add_attribute((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell_renderer), (const gchar *)(attribute), column);
}
gboolean _gtk_tree_view_column_cell_get_position(GtkTreeViewColumn* _self_, GtkCellRenderer* cell_renderer, gint* x_offset, gint* width) {
	return gtk_tree_view_column_cell_get_position((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell_renderer), (gint *)(x_offset), (gint *)(width));
}
void _gtk_tree_view_column_cell_get_size(GtkTreeViewColumn* _self_, GdkRectangle* cell_area, gint* x_offset, gint* y_offset, gint* width, gint* height) {
	gtk_tree_view_column_cell_get_size((GtkTreeViewColumn *)(_self_), (const GdkRectangle *)(cell_area), (gint *)(x_offset), (gint *)(y_offset), (gint *)(width), (gint *)(height));
}
gboolean _gtk_tree_view_column_cell_is_visible(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_cell_is_visible((GtkTreeViewColumn *)(_self_));
}
void _gtk_tree_view_column_cell_set_cell_data(GtkTreeViewColumn* _self_, GtkTreeModel* tree_model, GtkTreeIter* iter, gboolean is_expander, gboolean is_expanded) {
	gtk_tree_view_column_cell_set_cell_data((GtkTreeViewColumn *)(_self_), (GtkTreeModel *)(tree_model), (GtkTreeIter *)(iter), is_expander, is_expanded);
}
void _gtk_tree_view_column_clear(GtkTreeViewColumn* _self_) {
	gtk_tree_view_column_clear((GtkTreeViewColumn *)(_self_));
}
void _gtk_tree_view_column_clear_attributes(GtkTreeViewColumn* _self_, GtkCellRenderer* cell_renderer) {
	gtk_tree_view_column_clear_attributes((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell_renderer));
}
void _gtk_tree_view_column_clicked(GtkTreeViewColumn* _self_) {
	gtk_tree_view_column_clicked((GtkTreeViewColumn *)(_self_));
}
void _gtk_tree_view_column_focus_cell(GtkTreeViewColumn* _self_, GtkCellRenderer* cell) {
	gtk_tree_view_column_focus_cell((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell));
}
gfloat _gtk_tree_view_column_get_alignment(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_alignment((GtkTreeViewColumn *)(_self_));
}
GtkWidget * _gtk_tree_view_column_get_button(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_button((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_clickable(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_clickable((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_expand(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_expand((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_fixed_width(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_fixed_width((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_max_width(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_max_width((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_min_width(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_min_width((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_reorderable(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_reorderable((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_resizable(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_resizable((GtkTreeViewColumn *)(_self_));
}
GtkTreeViewColumnSizing _gtk_tree_view_column_get_sizing(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_sizing((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_sort_column_id(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_sort_column_id((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_sort_indicator(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_sort_indicator((GtkTreeViewColumn *)(_self_));
}
GtkSortType _gtk_tree_view_column_get_sort_order(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_sort_order((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_spacing(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_spacing((GtkTreeViewColumn *)(_self_));
}
const gchar * _gtk_tree_view_column_get_title(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_title((GtkTreeViewColumn *)(_self_));
}
GtkWidget * _gtk_tree_view_column_get_tree_view(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_tree_view((GtkTreeViewColumn *)(_self_));
}
gboolean _gtk_tree_view_column_get_visible(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_visible((GtkTreeViewColumn *)(_self_));
}
GtkWidget * _gtk_tree_view_column_get_widget(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_widget((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_width(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_width((GtkTreeViewColumn *)(_self_));
}
gint _gtk_tree_view_column_get_x_offset(GtkTreeViewColumn* _self_) {
	return gtk_tree_view_column_get_x_offset((GtkTreeViewColumn *)(_self_));
}
void _gtk_tree_view_column_pack_end(GtkTreeViewColumn* _self_, GtkCellRenderer* cell, gboolean expand) {
	gtk_tree_view_column_pack_end((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell), expand);
}
void _gtk_tree_view_column_pack_start(GtkTreeViewColumn* _self_, GtkCellRenderer* cell, gboolean expand) {
	gtk_tree_view_column_pack_start((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell), expand);
}
void _gtk_tree_view_column_queue_resize(GtkTreeViewColumn* _self_) {
	gtk_tree_view_column_queue_resize((GtkTreeViewColumn *)(_self_));
}
void _gtk_tree_view_column_set_alignment(GtkTreeViewColumn* _self_, gfloat xalign) {
	gtk_tree_view_column_set_alignment((GtkTreeViewColumn *)(_self_), xalign);
}
void _gtk_tree_view_column_set_cell_data_func(GtkTreeViewColumn* _self_, GtkCellRenderer* cell_renderer, GtkTreeCellDataFunc func_, gpointer func_data, GDestroyNotify destroy) {
	gtk_tree_view_column_set_cell_data_func((GtkTreeViewColumn *)(_self_), (GtkCellRenderer *)(cell_renderer), func_, func_data, destroy);
}
void _gtk_tree_view_column_set_clickable(GtkTreeViewColumn* _self_, gboolean clickable) {
	gtk_tree_view_column_set_clickable((GtkTreeViewColumn *)(_self_), clickable);
}
void _gtk_tree_view_column_set_expand(GtkTreeViewColumn* _self_, gboolean expand) {
	gtk_tree_view_column_set_expand((GtkTreeViewColumn *)(_self_), expand);
}
void _gtk_tree_view_column_set_fixed_width(GtkTreeViewColumn* _self_, gint fixed_width) {
	gtk_tree_view_column_set_fixed_width((GtkTreeViewColumn *)(_self_), fixed_width);
}
void _gtk_tree_view_column_set_max_width(GtkTreeViewColumn* _self_, gint max_width) {
	gtk_tree_view_column_set_max_width((GtkTreeViewColumn *)(_self_), max_width);
}
void _gtk_tree_view_column_set_min_width(GtkTreeViewColumn* _self_, gint min_width) {
	gtk_tree_view_column_set_min_width((GtkTreeViewColumn *)(_self_), min_width);
}
void _gtk_tree_view_column_set_reorderable(GtkTreeViewColumn* _self_, gboolean reorderable) {
	gtk_tree_view_column_set_reorderable((GtkTreeViewColumn *)(_self_), reorderable);
}
void _gtk_tree_view_column_set_resizable(GtkTreeViewColumn* _self_, gboolean resizable) {
	gtk_tree_view_column_set_resizable((GtkTreeViewColumn *)(_self_), resizable);
}
void _gtk_tree_view_column_set_sizing(GtkTreeViewColumn* _self_, GtkTreeViewColumnSizing type_) {
	gtk_tree_view_column_set_sizing((GtkTreeViewColumn *)(_self_), type_);
}
void _gtk_tree_view_column_set_sort_column_id(GtkTreeViewColumn* _self_, gint sort_column_id) {
	gtk_tree_view_column_set_sort_column_id((GtkTreeViewColumn *)(_self_), sort_column_id);
}
void _gtk_tree_view_column_set_sort_indicator(GtkTreeViewColumn* _self_, gboolean setting) {
	gtk_tree_view_column_set_sort_indicator((GtkTreeViewColumn *)(_self_), setting);
}
void _gtk_tree_view_column_set_sort_order(GtkTreeViewColumn* _self_, GtkSortType order) {
	gtk_tree_view_column_set_sort_order((GtkTreeViewColumn *)(_self_), order);
}
void _gtk_tree_view_column_set_spacing(GtkTreeViewColumn* _self_, gint spacing) {
	gtk_tree_view_column_set_spacing((GtkTreeViewColumn *)(_self_), spacing);
}
void _gtk_tree_view_column_set_title(GtkTreeViewColumn* _self_, gchar* title) {
	gtk_tree_view_column_set_title((GtkTreeViewColumn *)(_self_), (const gchar *)(title));
}
void _gtk_tree_view_column_set_visible(GtkTreeViewColumn* _self_, gboolean visible) {
	gtk_tree_view_column_set_visible((GtkTreeViewColumn *)(_self_), visible);
}
void _gtk_tree_view_column_set_widget(GtkTreeViewColumn* _self_, GtkWidget* widget) {
	gtk_tree_view_column_set_widget((GtkTreeViewColumn *)(_self_), (GtkWidget *)(widget));
}
void _gtk_ui_manager_add_ui(GtkUIManager* _self_, guint merge_id, gchar* path, gchar* name, gchar* action, GtkUIManagerItemType type_, gboolean top) {
	gtk_ui_manager_add_ui((GtkUIManager *)(_self_), merge_id, (const gchar *)(path), (const gchar *)(name), (const gchar *)(action), type_, top);
}
guint _gtk_ui_manager_add_ui_from_file(GtkUIManager* _self_, gchar* filename, void* _error_) {
	return gtk_ui_manager_add_ui_from_file((GtkUIManager *)(_self_), (const gchar *)(filename), (GError **)(_error_));
}
guint _gtk_ui_manager_add_ui_from_resource(GtkUIManager* _self_, gchar* resource_path, void* _error_) {
	return gtk_ui_manager_add_ui_from_resource((GtkUIManager *)(_self_), (const gchar *)(resource_path), (GError **)(_error_));
}
guint _gtk_ui_manager_add_ui_from_string(GtkUIManager* _self_, gchar* buffer, gssize length, void* _error_) {
	return gtk_ui_manager_add_ui_from_string((GtkUIManager *)(_self_), (const gchar *)(buffer), length, (GError **)(_error_));
}
void _gtk_ui_manager_ensure_update(GtkUIManager* _self_) {
	gtk_ui_manager_ensure_update((GtkUIManager *)(_self_));
}
GtkAccelGroup * _gtk_ui_manager_get_accel_group(GtkUIManager* _self_) {
	return gtk_ui_manager_get_accel_group((GtkUIManager *)(_self_));
}
GtkAction * _gtk_ui_manager_get_action(GtkUIManager* _self_, gchar* path) {
	return gtk_ui_manager_get_action((GtkUIManager *)(_self_), (const gchar *)(path));
}
GList * _gtk_ui_manager_get_action_groups(GtkUIManager* _self_) {
	return gtk_ui_manager_get_action_groups((GtkUIManager *)(_self_));
}
GSList * _gtk_ui_manager_get_toplevels(GtkUIManager* _self_, GtkUIManagerItemType types) {
	return gtk_ui_manager_get_toplevels((GtkUIManager *)(_self_), types);
}
gchar * _gtk_ui_manager_get_ui(GtkUIManager* _self_) {
	return gtk_ui_manager_get_ui((GtkUIManager *)(_self_));
}
GtkWidget * _gtk_ui_manager_get_widget(GtkUIManager* _self_, gchar* path) {
	return gtk_ui_manager_get_widget((GtkUIManager *)(_self_), (const gchar *)(path));
}
void _gtk_ui_manager_insert_action_group(GtkUIManager* _self_, GtkActionGroup* action_group, gint pos) {
	gtk_ui_manager_insert_action_group((GtkUIManager *)(_self_), (GtkActionGroup *)(action_group), pos);
}
guint _gtk_ui_manager_new_merge_id(GtkUIManager* _self_) {
	return gtk_ui_manager_new_merge_id((GtkUIManager *)(_self_));
}
void _gtk_ui_manager_remove_action_group(GtkUIManager* _self_, GtkActionGroup* action_group) {
	gtk_ui_manager_remove_action_group((GtkUIManager *)(_self_), (GtkActionGroup *)(action_group));
}
void _gtk_ui_manager_remove_ui(GtkUIManager* _self_, guint merge_id) {
	gtk_ui_manager_remove_ui((GtkUIManager *)(_self_), merge_id);
}
GdkWindow * _gtk_viewport_get_bin_window(GtkViewport* _self_) {
	return gtk_viewport_get_bin_window((GtkViewport *)(_self_));
}
GtkShadowType _gtk_viewport_get_shadow_type(GtkViewport* _self_) {
	return gtk_viewport_get_shadow_type((GtkViewport *)(_self_));
}
GdkWindow * _gtk_viewport_get_view_window(GtkViewport* _self_) {
	return gtk_viewport_get_view_window((GtkViewport *)(_self_));
}
void _gtk_viewport_set_shadow_type(GtkViewport* _self_, GtkShadowType type_) {
	gtk_viewport_set_shadow_type((GtkViewport *)(_self_), type_);
}
gboolean _gtk_widget_activate(GtkWidget* _self_) {
	return gtk_widget_activate((GtkWidget *)(_self_));
}
void _gtk_widget_add_accelerator(GtkWidget* _self_, gchar* accel_signal, GtkAccelGroup* accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags) {
	gtk_widget_add_accelerator((GtkWidget *)(_self_), (const gchar *)(accel_signal), (GtkAccelGroup *)(accel_group), accel_key, accel_mods, accel_flags);
}
void _gtk_widget_add_device_events(GtkWidget* _self_, GdkDevice* device, GdkEventMask events) {
	gtk_widget_add_device_events((GtkWidget *)(_self_), (GdkDevice *)(device), events);
}
void _gtk_widget_add_events(GtkWidget* _self_, gint events) {
	gtk_widget_add_events((GtkWidget *)(_self_), events);
}
void _gtk_widget_add_mnemonic_label(GtkWidget* _self_, GtkWidget* label) {
	gtk_widget_add_mnemonic_label((GtkWidget *)(_self_), (GtkWidget *)(label));
}
gboolean _gtk_widget_can_activate_accel(GtkWidget* _self_, guint signal_id) {
	return gtk_widget_can_activate_accel((GtkWidget *)(_self_), signal_id);
}
gboolean _gtk_widget_child_focus(GtkWidget* _self_, GtkDirectionType direction) {
	return gtk_widget_child_focus((GtkWidget *)(_self_), direction);
}
void _gtk_widget_child_notify(GtkWidget* _self_, gchar* child_property) {
	gtk_widget_child_notify((GtkWidget *)(_self_), (const gchar *)(child_property));
}
gboolean _gtk_widget_compute_expand(GtkWidget* _self_, GtkOrientation orientation) {
	return gtk_widget_compute_expand((GtkWidget *)(_self_), orientation);
}
PangoContext * _gtk_widget_create_pango_context(GtkWidget* _self_) {
	return gtk_widget_create_pango_context((GtkWidget *)(_self_));
}
PangoLayout * _gtk_widget_create_pango_layout(GtkWidget* _self_, gchar* text) {
	return gtk_widget_create_pango_layout((GtkWidget *)(_self_), (const gchar *)(text));
}
void _gtk_widget_destroy(GtkWidget* _self_) {
	gtk_widget_destroy((GtkWidget *)(_self_));
}
gboolean _gtk_widget_device_is_shadowed(GtkWidget* _self_, GdkDevice* device) {
	return gtk_widget_device_is_shadowed((GtkWidget *)(_self_), (GdkDevice *)(device));
}
GdkDragContext * _gtk_drag_begin(GtkWidget* _self_, GtkTargetList* targets, GdkDragAction actions, gint button, GdkEvent* event) {
	return gtk_drag_begin((GtkWidget *)(_self_), (GtkTargetList *)(targets), actions, button, (GdkEvent *)(event));
}
gboolean _gtk_drag_check_threshold(GtkWidget* _self_, gint start_x, gint start_y, gint current_x, gint current_y) {
	return gtk_drag_check_threshold((GtkWidget *)(_self_), start_x, start_y, current_x, current_y);
}
void _gtk_drag_dest_add_image_targets(GtkWidget* _self_) {
	gtk_drag_dest_add_image_targets((GtkWidget *)(_self_));
}
void _gtk_drag_dest_add_text_targets(GtkWidget* _self_) {
	gtk_drag_dest_add_text_targets((GtkWidget *)(_self_));
}
void _gtk_drag_dest_add_uri_targets(GtkWidget* _self_) {
	gtk_drag_dest_add_uri_targets((GtkWidget *)(_self_));
}
GdkAtom _gtk_drag_dest_find_target(GtkWidget* _self_, GdkDragContext* context, GtkTargetList* target_list) {
	return gtk_drag_dest_find_target((GtkWidget *)(_self_), (GdkDragContext *)(context), (GtkTargetList *)(target_list));
}
GtkTargetList * _gtk_drag_dest_get_target_list(GtkWidget* _self_) {
	return gtk_drag_dest_get_target_list((GtkWidget *)(_self_));
}
gboolean _gtk_drag_dest_get_track_motion(GtkWidget* _self_) {
	return gtk_drag_dest_get_track_motion((GtkWidget *)(_self_));
}
void _gtk_drag_dest_set(GtkWidget* _self_, GtkDestDefaults flags, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_drag_dest_set((GtkWidget *)(_self_), flags, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_drag_dest_set_proxy(GtkWidget* _self_, GdkWindow* proxy_window, GdkDragProtocol protocol, gboolean use_coordinates) {
	gtk_drag_dest_set_proxy((GtkWidget *)(_self_), (GdkWindow *)(proxy_window), protocol, use_coordinates);
}
void _gtk_drag_dest_set_target_list(GtkWidget* _self_, GtkTargetList* target_list) {
	gtk_drag_dest_set_target_list((GtkWidget *)(_self_), (GtkTargetList *)(target_list));
}
void _gtk_drag_dest_set_track_motion(GtkWidget* _self_, gboolean track_motion) {
	gtk_drag_dest_set_track_motion((GtkWidget *)(_self_), track_motion);
}
void _gtk_drag_dest_unset(GtkWidget* _self_) {
	gtk_drag_dest_unset((GtkWidget *)(_self_));
}
void _gtk_drag_get_data(GtkWidget* _self_, GdkDragContext* context, GdkAtom target, guint32 time_) {
	gtk_drag_get_data((GtkWidget *)(_self_), (GdkDragContext *)(context), target, time_);
}
void _gtk_drag_highlight(GtkWidget* _self_) {
	gtk_drag_highlight((GtkWidget *)(_self_));
}
void _gtk_drag_source_add_image_targets(GtkWidget* _self_) {
	gtk_drag_source_add_image_targets((GtkWidget *)(_self_));
}
void _gtk_drag_source_add_text_targets(GtkWidget* _self_) {
	gtk_drag_source_add_text_targets((GtkWidget *)(_self_));
}
void _gtk_drag_source_add_uri_targets(GtkWidget* _self_) {
	gtk_drag_source_add_uri_targets((GtkWidget *)(_self_));
}
GtkTargetList * _gtk_drag_source_get_target_list(GtkWidget* _self_) {
	return gtk_drag_source_get_target_list((GtkWidget *)(_self_));
}
void _gtk_drag_source_set(GtkWidget* _self_, GdkModifierType start_button_mask, GtkTargetEntry* targets, gint n_targets, GdkDragAction actions) {
	gtk_drag_source_set((GtkWidget *)(_self_), start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_drag_source_set_icon_gicon(GtkWidget* _self_, GIcon* icon) {
	gtk_drag_source_set_icon_gicon((GtkWidget *)(_self_), (GIcon *)(icon));
}
void _gtk_drag_source_set_icon_name(GtkWidget* _self_, gchar* icon_name) {
	gtk_drag_source_set_icon_name((GtkWidget *)(_self_), (const gchar *)(icon_name));
}
void _gtk_drag_source_set_icon_pixbuf(GtkWidget* _self_, GdkPixbuf* pixbuf) {
	gtk_drag_source_set_icon_pixbuf((GtkWidget *)(_self_), (GdkPixbuf *)(pixbuf));
}
void _gtk_drag_source_set_icon_stock(GtkWidget* _self_, gchar* stock_id) {
	gtk_drag_source_set_icon_stock((GtkWidget *)(_self_), (const gchar *)(stock_id));
}
void _gtk_drag_source_set_target_list(GtkWidget* _self_, GtkTargetList* target_list) {
	gtk_drag_source_set_target_list((GtkWidget *)(_self_), (GtkTargetList *)(target_list));
}
void _gtk_drag_source_unset(GtkWidget* _self_) {
	gtk_drag_source_unset((GtkWidget *)(_self_));
}
void _gtk_drag_unhighlight(GtkWidget* _self_) {
	gtk_drag_unhighlight((GtkWidget *)(_self_));
}
void _gtk_widget_draw(GtkWidget* _self_, cairo_t* cr) {
	gtk_widget_draw((GtkWidget *)(_self_), (cairo_t *)(cr));
}
void _gtk_widget_error_bell(GtkWidget* _self_) {
	gtk_widget_error_bell((GtkWidget *)(_self_));
}
gboolean _gtk_widget_event(GtkWidget* _self_, GdkEvent* event) {
	return gtk_widget_event((GtkWidget *)(_self_), (GdkEvent *)(event));
}
void _gtk_widget_freeze_child_notify(GtkWidget* _self_) {
	gtk_widget_freeze_child_notify((GtkWidget *)(_self_));
}
AtkObject * _gtk_widget_get_accessible(GtkWidget* _self_) {
	return gtk_widget_get_accessible((GtkWidget *)(_self_));
}
int _gtk_widget_get_allocated_height(GtkWidget* _self_) {
	return gtk_widget_get_allocated_height((GtkWidget *)(_self_));
}
int _gtk_widget_get_allocated_width(GtkWidget* _self_) {
	return gtk_widget_get_allocated_width((GtkWidget *)(_self_));
}
void _gtk_widget_get_allocation(GtkWidget* _self_, GtkAllocation* allocation) {
	gtk_widget_get_allocation((GtkWidget *)(_self_), (GtkAllocation *)(allocation));
}
GtkWidget * _gtk_widget_get_ancestor(GtkWidget* _self_, GType widget_type) {
	return gtk_widget_get_ancestor((GtkWidget *)(_self_), widget_type);
}
gboolean _gtk_widget_get_app_paintable(GtkWidget* _self_) {
	return gtk_widget_get_app_paintable((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_can_default(GtkWidget* _self_) {
	return gtk_widget_get_can_default((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_can_focus(GtkWidget* _self_) {
	return gtk_widget_get_can_focus((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_child_visible(GtkWidget* _self_) {
	return gtk_widget_get_child_visible((GtkWidget *)(_self_));
}
GtkClipboard * _gtk_widget_get_clipboard(GtkWidget* _self_, GdkAtom selection) {
	return gtk_widget_get_clipboard((GtkWidget *)(_self_), selection);
}
gchar * _gtk_widget_get_composite_name(GtkWidget* _self_) {
	return gtk_widget_get_composite_name((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_device_enabled(GtkWidget* _self_, GdkDevice* device) {
	return gtk_widget_get_device_enabled((GtkWidget *)(_self_), (GdkDevice *)(device));
}
GdkEventMask _gtk_widget_get_device_events(GtkWidget* _self_, GdkDevice* device) {
	return gtk_widget_get_device_events((GtkWidget *)(_self_), (GdkDevice *)(device));
}
GtkTextDirection _gtk_widget_get_direction(GtkWidget* _self_) {
	return gtk_widget_get_direction((GtkWidget *)(_self_));
}
GdkDisplay * _gtk_widget_get_display(GtkWidget* _self_) {
	return gtk_widget_get_display((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_double_buffered(GtkWidget* _self_) {
	return gtk_widget_get_double_buffered((GtkWidget *)(_self_));
}
gint _gtk_widget_get_events(GtkWidget* _self_) {
	return gtk_widget_get_events((GtkWidget *)(_self_));
}
GtkAlign _gtk_widget_get_halign(GtkWidget* _self_) {
	return gtk_widget_get_halign((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_has_tooltip(GtkWidget* _self_) {
	return gtk_widget_get_has_tooltip((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_has_window(GtkWidget* _self_) {
	return gtk_widget_get_has_window((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_hexpand(GtkWidget* _self_) {
	return gtk_widget_get_hexpand((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_hexpand_set(GtkWidget* _self_) {
	return gtk_widget_get_hexpand_set((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_mapped(GtkWidget* _self_) {
	return gtk_widget_get_mapped((GtkWidget *)(_self_));
}
gint _gtk_widget_get_margin_bottom(GtkWidget* _self_) {
	return gtk_widget_get_margin_bottom((GtkWidget *)(_self_));
}
gint _gtk_widget_get_margin_left(GtkWidget* _self_) {
	return gtk_widget_get_margin_left((GtkWidget *)(_self_));
}
gint _gtk_widget_get_margin_right(GtkWidget* _self_) {
	return gtk_widget_get_margin_right((GtkWidget *)(_self_));
}
gint _gtk_widget_get_margin_top(GtkWidget* _self_) {
	return gtk_widget_get_margin_top((GtkWidget *)(_self_));
}
GdkModifierType _gtk_widget_get_modifier_mask(GtkWidget* _self_, GdkModifierIntent intent) {
	return gtk_widget_get_modifier_mask((GtkWidget *)(_self_), intent);
}
const gchar * _gtk_widget_get_name(GtkWidget* _self_) {
	return gtk_widget_get_name((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_no_show_all(GtkWidget* _self_) {
	return gtk_widget_get_no_show_all((GtkWidget *)(_self_));
}
PangoContext * _gtk_widget_get_pango_context(GtkWidget* _self_) {
	return gtk_widget_get_pango_context((GtkWidget *)(_self_));
}
GtkWidget * _gtk_widget_get_parent(GtkWidget* _self_) {
	return gtk_widget_get_parent((GtkWidget *)(_self_));
}
GdkWindow * _gtk_widget_get_parent_window(GtkWidget* _self_) {
	return gtk_widget_get_parent_window((GtkWidget *)(_self_));
}
GtkWidgetPath * _gtk_widget_get_path(GtkWidget* _self_) {
	return gtk_widget_get_path((GtkWidget *)(_self_));
}
void _gtk_widget_get_preferred_height(GtkWidget* _self_, gint* minimum_height, gint* natural_height) {
	gtk_widget_get_preferred_height((GtkWidget *)(_self_), (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_widget_get_preferred_height_for_width(GtkWidget* _self_, gint width, gint* minimum_height, gint* natural_height) {
	gtk_widget_get_preferred_height_for_width((GtkWidget *)(_self_), width, (gint *)(minimum_height), (gint *)(natural_height));
}
void _gtk_widget_get_preferred_size(GtkWidget* _self_, GtkRequisition* minimum_size, GtkRequisition* natural_size) {
	gtk_widget_get_preferred_size((GtkWidget *)(_self_), (GtkRequisition *)(minimum_size), (GtkRequisition *)(natural_size));
}
void _gtk_widget_get_preferred_width(GtkWidget* _self_, gint* minimum_width, gint* natural_width) {
	gtk_widget_get_preferred_width((GtkWidget *)(_self_), (gint *)(minimum_width), (gint *)(natural_width));
}
void _gtk_widget_get_preferred_width_for_height(GtkWidget* _self_, gint height, gint* minimum_width, gint* natural_width) {
	gtk_widget_get_preferred_width_for_height((GtkWidget *)(_self_), height, (gint *)(minimum_width), (gint *)(natural_width));
}
gboolean _gtk_widget_get_realized(GtkWidget* _self_) {
	return gtk_widget_get_realized((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_receives_default(GtkWidget* _self_) {
	return gtk_widget_get_receives_default((GtkWidget *)(_self_));
}
GtkSizeRequestMode _gtk_widget_get_request_mode(GtkWidget* _self_) {
	return gtk_widget_get_request_mode((GtkWidget *)(_self_));
}
GdkWindow * _gtk_widget_get_root_window(GtkWidget* _self_) {
	return gtk_widget_get_root_window((GtkWidget *)(_self_));
}
GdkScreen * _gtk_widget_get_screen(GtkWidget* _self_) {
	return gtk_widget_get_screen((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_sensitive(GtkWidget* _self_) {
	return gtk_widget_get_sensitive((GtkWidget *)(_self_));
}
GtkSettings * _gtk_widget_get_settings(GtkWidget* _self_) {
	return gtk_widget_get_settings((GtkWidget *)(_self_));
}
void _gtk_widget_get_size_request(GtkWidget* _self_, gint* width, gint* height) {
	gtk_widget_get_size_request((GtkWidget *)(_self_), (gint *)(width), (gint *)(height));
}
GtkStateFlags _gtk_widget_get_state_flags(GtkWidget* _self_) {
	return gtk_widget_get_state_flags((GtkWidget *)(_self_));
}
GtkStyleContext * _gtk_widget_get_style_context(GtkWidget* _self_) {
	return gtk_widget_get_style_context((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_support_multidevice(GtkWidget* _self_) {
	return gtk_widget_get_support_multidevice((GtkWidget *)(_self_));
}
gchar * _gtk_widget_get_tooltip_markup(GtkWidget* _self_) {
	return gtk_widget_get_tooltip_markup((GtkWidget *)(_self_));
}
gchar * _gtk_widget_get_tooltip_text(GtkWidget* _self_) {
	return gtk_widget_get_tooltip_text((GtkWidget *)(_self_));
}
GtkWindow * _gtk_widget_get_tooltip_window(GtkWidget* _self_) {
	return gtk_widget_get_tooltip_window((GtkWidget *)(_self_));
}
GtkWidget * _gtk_widget_get_toplevel(GtkWidget* _self_) {
	return gtk_widget_get_toplevel((GtkWidget *)(_self_));
}
GtkAlign _gtk_widget_get_valign(GtkWidget* _self_) {
	return gtk_widget_get_valign((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_vexpand(GtkWidget* _self_) {
	return gtk_widget_get_vexpand((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_vexpand_set(GtkWidget* _self_) {
	return gtk_widget_get_vexpand_set((GtkWidget *)(_self_));
}
gboolean _gtk_widget_get_visible(GtkWidget* _self_) {
	return gtk_widget_get_visible((GtkWidget *)(_self_));
}
GdkVisual * _gtk_widget_get_visual(GtkWidget* _self_) {
	return gtk_widget_get_visual((GtkWidget *)(_self_));
}
GdkWindow * _gtk_widget_get_window(GtkWidget* _self_) {
	return gtk_widget_get_window((GtkWidget *)(_self_));
}
void _gtk_grab_add(GtkWidget* _self_) {
	gtk_grab_add((GtkWidget *)(_self_));
}
void _gtk_widget_grab_default(GtkWidget* _self_) {
	gtk_widget_grab_default((GtkWidget *)(_self_));
}
void _gtk_widget_grab_focus(GtkWidget* _self_) {
	gtk_widget_grab_focus((GtkWidget *)(_self_));
}
void _gtk_grab_remove(GtkWidget* _self_) {
	gtk_grab_remove((GtkWidget *)(_self_));
}
gboolean _gtk_widget_has_default(GtkWidget* _self_) {
	return gtk_widget_has_default((GtkWidget *)(_self_));
}
gboolean _gtk_widget_has_focus(GtkWidget* _self_) {
	return gtk_widget_has_focus((GtkWidget *)(_self_));
}
gboolean _gtk_widget_has_grab(GtkWidget* _self_) {
	return gtk_widget_has_grab((GtkWidget *)(_self_));
}
gboolean _gtk_widget_has_screen(GtkWidget* _self_) {
	return gtk_widget_has_screen((GtkWidget *)(_self_));
}
gboolean _gtk_widget_has_visible_focus(GtkWidget* _self_) {
	return gtk_widget_has_visible_focus((GtkWidget *)(_self_));
}
void _gtk_widget_hide(GtkWidget* _self_) {
	gtk_widget_hide((GtkWidget *)(_self_));
}
gboolean _gtk_widget_hide_on_delete(GtkWidget* _self_) {
	return gtk_widget_hide_on_delete((GtkWidget *)(_self_));
}
gboolean _gtk_widget_in_destruction(GtkWidget* _self_) {
	return gtk_widget_in_destruction((GtkWidget *)(_self_));
}
void _gtk_widget_input_shape_combine_region(GtkWidget* _self_, cairo_region_t* region) {
	gtk_widget_input_shape_combine_region((GtkWidget *)(_self_), (cairo_region_t *)(region));
}
void _gtk_widget_insert_action_group(GtkWidget* _self_, gchar* name, GActionGroup* group) {
	gtk_widget_insert_action_group((GtkWidget *)(_self_), (const gchar *)(name), (GActionGroup *)(group));
}
gboolean _gtk_widget_intersect(GtkWidget* _self_, GdkRectangle* area, GdkRectangle* intersection) {
	return gtk_widget_intersect((GtkWidget *)(_self_), (const GdkRectangle *)(area), (GdkRectangle *)(intersection));
}
gboolean _gtk_widget_is_ancestor(GtkWidget* _self_, GtkWidget* ancestor) {
	return gtk_widget_is_ancestor((GtkWidget *)(_self_), (GtkWidget *)(ancestor));
}
gboolean _gtk_widget_is_composited(GtkWidget* _self_) {
	return gtk_widget_is_composited((GtkWidget *)(_self_));
}
gboolean _gtk_widget_is_drawable(GtkWidget* _self_) {
	return gtk_widget_is_drawable((GtkWidget *)(_self_));
}
gboolean _gtk_widget_is_focus(GtkWidget* _self_) {
	return gtk_widget_is_focus((GtkWidget *)(_self_));
}
gboolean _gtk_widget_is_sensitive(GtkWidget* _self_) {
	return gtk_widget_is_sensitive((GtkWidget *)(_self_));
}
gboolean _gtk_widget_is_toplevel(GtkWidget* _self_) {
	return gtk_widget_is_toplevel((GtkWidget *)(_self_));
}
gboolean _gtk_widget_keynav_failed(GtkWidget* _self_, GtkDirectionType direction) {
	return gtk_widget_keynav_failed((GtkWidget *)(_self_), direction);
}
GList * _gtk_widget_list_accel_closures(GtkWidget* _self_) {
	return gtk_widget_list_accel_closures((GtkWidget *)(_self_));
}
GList * _gtk_widget_list_mnemonic_labels(GtkWidget* _self_) {
	return gtk_widget_list_mnemonic_labels((GtkWidget *)(_self_));
}
void _gtk_widget_map(GtkWidget* _self_) {
	gtk_widget_map((GtkWidget *)(_self_));
}
gboolean _gtk_widget_mnemonic_activate(GtkWidget* _self_, gboolean group_cycling) {
	return gtk_widget_mnemonic_activate((GtkWidget *)(_self_), group_cycling);
}
void _gtk_widget_override_background_color(GtkWidget* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_widget_override_background_color((GtkWidget *)(_self_), state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_color(GtkWidget* _self_, GtkStateFlags state, GdkRGBA* color) {
	gtk_widget_override_color((GtkWidget *)(_self_), state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_cursor(GtkWidget* _self_, GdkRGBA* cursor, GdkRGBA* secondary_cursor) {
	gtk_widget_override_cursor((GtkWidget *)(_self_), (const GdkRGBA *)(cursor), (const GdkRGBA *)(secondary_cursor));
}
void _gtk_widget_override_font(GtkWidget* _self_, PangoFontDescription* font_desc) {
	gtk_widget_override_font((GtkWidget *)(_self_), (const PangoFontDescription *)(font_desc));
}
void _gtk_widget_override_symbolic_color(GtkWidget* _self_, gchar* name, GdkRGBA* color) {
	gtk_widget_override_symbolic_color((GtkWidget *)(_self_), (const gchar *)(name), (const GdkRGBA *)(color));
}
void _gtk_widget_queue_compute_expand(GtkWidget* _self_) {
	gtk_widget_queue_compute_expand((GtkWidget *)(_self_));
}
void _gtk_widget_queue_draw(GtkWidget* _self_) {
	gtk_widget_queue_draw((GtkWidget *)(_self_));
}
void _gtk_widget_queue_draw_area(GtkWidget* _self_, gint x, gint y, gint width, gint height) {
	gtk_widget_queue_draw_area((GtkWidget *)(_self_), x, y, width, height);
}
void _gtk_widget_queue_draw_region(GtkWidget* _self_, cairo_region_t* region) {
	gtk_widget_queue_draw_region((GtkWidget *)(_self_), (const cairo_region_t *)(region));
}
void _gtk_widget_queue_resize(GtkWidget* _self_) {
	gtk_widget_queue_resize((GtkWidget *)(_self_));
}
void _gtk_widget_queue_resize_no_redraw(GtkWidget* _self_) {
	gtk_widget_queue_resize_no_redraw((GtkWidget *)(_self_));
}
void _gtk_widget_realize(GtkWidget* _self_) {
	gtk_widget_realize((GtkWidget *)(_self_));
}
cairo_region_t * _gtk_widget_region_intersect(GtkWidget* _self_, cairo_region_t* region) {
	return gtk_widget_region_intersect((GtkWidget *)(_self_), (const cairo_region_t *)(region));
}
gboolean _gtk_widget_remove_accelerator(GtkWidget* _self_, GtkAccelGroup* accel_group, guint accel_key, GdkModifierType accel_mods) {
	return gtk_widget_remove_accelerator((GtkWidget *)(_self_), (GtkAccelGroup *)(accel_group), accel_key, accel_mods);
}
void _gtk_widget_remove_mnemonic_label(GtkWidget* _self_, GtkWidget* label) {
	gtk_widget_remove_mnemonic_label((GtkWidget *)(_self_), (GtkWidget *)(label));
}
GdkPixbuf * _gtk_widget_render_icon_pixbuf(GtkWidget* _self_, gchar* stock_id, GtkIconSize size) {
	return gtk_widget_render_icon_pixbuf((GtkWidget *)(_self_), (const gchar *)(stock_id), size);
}
void _gtk_widget_reparent(GtkWidget* _self_, GtkWidget* new_parent) {
	gtk_widget_reparent((GtkWidget *)(_self_), (GtkWidget *)(new_parent));
}
void _gtk_widget_reset_style(GtkWidget* _self_) {
	gtk_widget_reset_style((GtkWidget *)(_self_));
}
gint _gtk_widget_send_expose(GtkWidget* _self_, GdkEvent* event) {
	return gtk_widget_send_expose((GtkWidget *)(_self_), (GdkEvent *)(event));
}
gboolean _gtk_widget_send_focus_change(GtkWidget* _self_, GdkEvent* event) {
	return gtk_widget_send_focus_change((GtkWidget *)(_self_), (GdkEvent *)(event));
}
void _gtk_widget_set_accel_path(GtkWidget* _self_, gchar* accel_path, GtkAccelGroup* accel_group) {
	gtk_widget_set_accel_path((GtkWidget *)(_self_), (const gchar *)(accel_path), (GtkAccelGroup *)(accel_group));
}
void _gtk_widget_set_allocation(GtkWidget* _self_, GtkAllocation* allocation) {
	gtk_widget_set_allocation((GtkWidget *)(_self_), (const GtkAllocation *)(allocation));
}
void _gtk_widget_set_app_paintable(GtkWidget* _self_, gboolean app_paintable) {
	gtk_widget_set_app_paintable((GtkWidget *)(_self_), app_paintable);
}
void _gtk_widget_set_can_default(GtkWidget* _self_, gboolean can_default) {
	gtk_widget_set_can_default((GtkWidget *)(_self_), can_default);
}
void _gtk_widget_set_can_focus(GtkWidget* _self_, gboolean can_focus) {
	gtk_widget_set_can_focus((GtkWidget *)(_self_), can_focus);
}
void _gtk_widget_set_child_visible(GtkWidget* _self_, gboolean is_visible) {
	gtk_widget_set_child_visible((GtkWidget *)(_self_), is_visible);
}
void _gtk_widget_set_composite_name(GtkWidget* _self_, gchar* name) {
	gtk_widget_set_composite_name((GtkWidget *)(_self_), (const gchar *)(name));
}
void _gtk_widget_set_device_enabled(GtkWidget* _self_, GdkDevice* device, gboolean enabled) {
	gtk_widget_set_device_enabled((GtkWidget *)(_self_), (GdkDevice *)(device), enabled);
}
void _gtk_widget_set_device_events(GtkWidget* _self_, GdkDevice* device, GdkEventMask events) {
	gtk_widget_set_device_events((GtkWidget *)(_self_), (GdkDevice *)(device), events);
}
void _gtk_widget_set_direction(GtkWidget* _self_, GtkTextDirection dir) {
	gtk_widget_set_direction((GtkWidget *)(_self_), dir);
}
void _gtk_widget_set_double_buffered(GtkWidget* _self_, gboolean double_buffered) {
	gtk_widget_set_double_buffered((GtkWidget *)(_self_), double_buffered);
}
void _gtk_widget_set_events(GtkWidget* _self_, gint events) {
	gtk_widget_set_events((GtkWidget *)(_self_), events);
}
void _gtk_widget_set_halign(GtkWidget* _self_, GtkAlign align) {
	gtk_widget_set_halign((GtkWidget *)(_self_), align);
}
void _gtk_widget_set_has_tooltip(GtkWidget* _self_, gboolean has_tooltip) {
	gtk_widget_set_has_tooltip((GtkWidget *)(_self_), has_tooltip);
}
void _gtk_widget_set_has_window(GtkWidget* _self_, gboolean has_window) {
	gtk_widget_set_has_window((GtkWidget *)(_self_), has_window);
}
void _gtk_widget_set_hexpand(GtkWidget* _self_, gboolean expand) {
	gtk_widget_set_hexpand((GtkWidget *)(_self_), expand);
}
void _gtk_widget_set_hexpand_set(GtkWidget* _self_, gboolean set) {
	gtk_widget_set_hexpand_set((GtkWidget *)(_self_), set);
}
void _gtk_widget_set_mapped(GtkWidget* _self_, gboolean mapped) {
	gtk_widget_set_mapped((GtkWidget *)(_self_), mapped);
}
void _gtk_widget_set_margin_bottom(GtkWidget* _self_, gint margin) {
	gtk_widget_set_margin_bottom((GtkWidget *)(_self_), margin);
}
void _gtk_widget_set_margin_left(GtkWidget* _self_, gint margin) {
	gtk_widget_set_margin_left((GtkWidget *)(_self_), margin);
}
void _gtk_widget_set_margin_right(GtkWidget* _self_, gint margin) {
	gtk_widget_set_margin_right((GtkWidget *)(_self_), margin);
}
void _gtk_widget_set_margin_top(GtkWidget* _self_, gint margin) {
	gtk_widget_set_margin_top((GtkWidget *)(_self_), margin);
}
void _gtk_widget_set_name(GtkWidget* _self_, gchar* name) {
	gtk_widget_set_name((GtkWidget *)(_self_), (const gchar *)(name));
}
void _gtk_widget_set_no_show_all(GtkWidget* _self_, gboolean no_show_all) {
	gtk_widget_set_no_show_all((GtkWidget *)(_self_), no_show_all);
}
void _gtk_widget_set_parent(GtkWidget* _self_, GtkWidget* parent) {
	gtk_widget_set_parent((GtkWidget *)(_self_), (GtkWidget *)(parent));
}
void _gtk_widget_set_parent_window(GtkWidget* _self_, GdkWindow* parent_window) {
	gtk_widget_set_parent_window((GtkWidget *)(_self_), (GdkWindow *)(parent_window));
}
void _gtk_widget_set_realized(GtkWidget* _self_, gboolean realized) {
	gtk_widget_set_realized((GtkWidget *)(_self_), realized);
}
void _gtk_widget_set_receives_default(GtkWidget* _self_, gboolean receives_default) {
	gtk_widget_set_receives_default((GtkWidget *)(_self_), receives_default);
}
void _gtk_widget_set_redraw_on_allocate(GtkWidget* _self_, gboolean redraw_on_allocate) {
	gtk_widget_set_redraw_on_allocate((GtkWidget *)(_self_), redraw_on_allocate);
}
void _gtk_widget_set_sensitive(GtkWidget* _self_, gboolean sensitive) {
	gtk_widget_set_sensitive((GtkWidget *)(_self_), sensitive);
}
void _gtk_widget_set_size_request(GtkWidget* _self_, gint width, gint height) {
	gtk_widget_set_size_request((GtkWidget *)(_self_), width, height);
}
void _gtk_widget_set_state_flags(GtkWidget* _self_, GtkStateFlags flags, gboolean clear) {
	gtk_widget_set_state_flags((GtkWidget *)(_self_), flags, clear);
}
void _gtk_widget_set_support_multidevice(GtkWidget* _self_, gboolean support_multidevice) {
	gtk_widget_set_support_multidevice((GtkWidget *)(_self_), support_multidevice);
}
void _gtk_widget_set_tooltip_markup(GtkWidget* _self_, gchar* markup) {
	gtk_widget_set_tooltip_markup((GtkWidget *)(_self_), (const gchar *)(markup));
}
void _gtk_widget_set_tooltip_text(GtkWidget* _self_, gchar* text) {
	gtk_widget_set_tooltip_text((GtkWidget *)(_self_), (const gchar *)(text));
}
void _gtk_widget_set_tooltip_window(GtkWidget* _self_, GtkWindow* custom_window) {
	gtk_widget_set_tooltip_window((GtkWidget *)(_self_), (GtkWindow *)(custom_window));
}
void _gtk_widget_set_valign(GtkWidget* _self_, GtkAlign align) {
	gtk_widget_set_valign((GtkWidget *)(_self_), align);
}
void _gtk_widget_set_vexpand(GtkWidget* _self_, gboolean expand) {
	gtk_widget_set_vexpand((GtkWidget *)(_self_), expand);
}
void _gtk_widget_set_vexpand_set(GtkWidget* _self_, gboolean set) {
	gtk_widget_set_vexpand_set((GtkWidget *)(_self_), set);
}
void _gtk_widget_set_visible(GtkWidget* _self_, gboolean visible) {
	gtk_widget_set_visible((GtkWidget *)(_self_), visible);
}
void _gtk_widget_set_visual(GtkWidget* _self_, GdkVisual* visual) {
	gtk_widget_set_visual((GtkWidget *)(_self_), (GdkVisual *)(visual));
}
void _gtk_widget_set_window(GtkWidget* _self_, GdkWindow* window) {
	gtk_widget_set_window((GtkWidget *)(_self_), (GdkWindow *)(window));
}
void _gtk_widget_shape_combine_region(GtkWidget* _self_, cairo_region_t* region) {
	gtk_widget_shape_combine_region((GtkWidget *)(_self_), (cairo_region_t *)(region));
}
void _gtk_widget_show(GtkWidget* _self_) {
	gtk_widget_show((GtkWidget *)(_self_));
}
void _gtk_widget_show_all(GtkWidget* _self_) {
	gtk_widget_show_all((GtkWidget *)(_self_));
}
void _gtk_widget_show_now(GtkWidget* _self_) {
	gtk_widget_show_now((GtkWidget *)(_self_));
}
void _gtk_widget_size_allocate(GtkWidget* _self_, GtkAllocation* allocation) {
	gtk_widget_size_allocate((GtkWidget *)(_self_), (GtkAllocation *)(allocation));
}
void _gtk_widget_style_get_property(GtkWidget* _self_, gchar* property_name, GValue* value) {
	gtk_widget_style_get_property((GtkWidget *)(_self_), (const gchar *)(property_name), (GValue *)(value));
}
void _gtk_widget_thaw_child_notify(GtkWidget* _self_) {
	gtk_widget_thaw_child_notify((GtkWidget *)(_self_));
}
gboolean _gtk_widget_translate_coordinates(GtkWidget* _self_, GtkWidget* dest_widget, gint src_x, gint src_y, gint* dest_x, gint* dest_y) {
	return gtk_widget_translate_coordinates((GtkWidget *)(_self_), (GtkWidget *)(dest_widget), src_x, src_y, (gint *)(dest_x), (gint *)(dest_y));
}
void _gtk_widget_trigger_tooltip_query(GtkWidget* _self_) {
	gtk_widget_trigger_tooltip_query((GtkWidget *)(_self_));
}
void _gtk_widget_unmap(GtkWidget* _self_) {
	gtk_widget_unmap((GtkWidget *)(_self_));
}
void _gtk_widget_unparent(GtkWidget* _self_) {
	gtk_widget_unparent((GtkWidget *)(_self_));
}
void _gtk_widget_unrealize(GtkWidget* _self_) {
	gtk_widget_unrealize((GtkWidget *)(_self_));
}
void _gtk_widget_unset_state_flags(GtkWidget* _self_, GtkStateFlags flags) {
	gtk_widget_unset_state_flags((GtkWidget *)(_self_), flags);
}
GParamSpec * _gtk_widget_class_find_style_property(GtkWidgetClass* _self_, gchar* property_name) {
	return gtk_widget_class_find_style_property((GtkWidgetClass *)(_self_), (const gchar *)(property_name));
}
void _gtk_widget_class_install_style_property(GtkWidgetClass* _self_, GParamSpec* pspec) {
	gtk_widget_class_install_style_property((GtkWidgetClass *)(_self_), (GParamSpec *)(pspec));
}
void _gtk_widget_class_install_style_property_parser(GtkWidgetClass* _self_, GParamSpec* pspec, GtkRcPropertyParser parser) {
	gtk_widget_class_install_style_property_parser((GtkWidgetClass *)(_self_), (GParamSpec *)(pspec), parser);
}
GParamSpec ** _gtk_widget_class_list_style_properties(GtkWidgetClass* _self_, guint* n_properties) {
	return gtk_widget_class_list_style_properties((GtkWidgetClass *)(_self_), (guint *)(n_properties));
}
void _gtk_widget_class_set_accessible_role(GtkWidgetClass* _self_, AtkRole role) {
	gtk_widget_class_set_accessible_role((GtkWidgetClass *)(_self_), role);
}
void _gtk_widget_class_set_accessible_type(GtkWidgetClass* _self_, GType type_) {
	gtk_widget_class_set_accessible_type((GtkWidgetClass *)(_self_), type_);
}
gint _gtk_widget_path_append_for_widget(GtkWidgetPath* _self_, GtkWidget* widget) {
	return gtk_widget_path_append_for_widget((GtkWidgetPath *)(_self_), (GtkWidget *)(widget));
}
gint _gtk_widget_path_append_type(GtkWidgetPath* _self_, GType type_) {
	return gtk_widget_path_append_type((GtkWidgetPath *)(_self_), type_);
}
gint _gtk_widget_path_append_with_siblings(GtkWidgetPath* _self_, GtkWidgetPath* siblings, guint sibling_index) {
	return gtk_widget_path_append_with_siblings((GtkWidgetPath *)(_self_), (GtkWidgetPath *)(siblings), sibling_index);
}
GtkWidgetPath * _gtk_widget_path_copy(GtkWidgetPath* _self_) {
	return gtk_widget_path_copy((const GtkWidgetPath *)(_self_));
}
void _gtk_widget_path_free(GtkWidgetPath* _self_) {
	gtk_widget_path_free((GtkWidgetPath *)(_self_));
}
GType _gtk_widget_path_get_object_type(GtkWidgetPath* _self_) {
	return gtk_widget_path_get_object_type((const GtkWidgetPath *)(_self_));
}
gboolean _gtk_widget_path_has_parent(GtkWidgetPath* _self_, GType type_) {
	return gtk_widget_path_has_parent((const GtkWidgetPath *)(_self_), type_);
}
gboolean _gtk_widget_path_is_type(GtkWidgetPath* _self_, GType type_) {
	return gtk_widget_path_is_type((const GtkWidgetPath *)(_self_), type_);
}
void _gtk_widget_path_iter_add_class(GtkWidgetPath* _self_, gint pos, gchar* name) {
	gtk_widget_path_iter_add_class((GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_add_region(GtkWidgetPath* _self_, gint pos, gchar* name, GtkRegionFlags flags) {
	gtk_widget_path_iter_add_region((GtkWidgetPath *)(_self_), pos, (const gchar *)(name), flags);
}
void _gtk_widget_path_iter_clear_classes(GtkWidgetPath* _self_, gint pos) {
	gtk_widget_path_iter_clear_classes((GtkWidgetPath *)(_self_), pos);
}
void _gtk_widget_path_iter_clear_regions(GtkWidgetPath* _self_, gint pos) {
	gtk_widget_path_iter_clear_regions((GtkWidgetPath *)(_self_), pos);
}
const gchar * _gtk_widget_path_iter_get_name(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_get_name((const GtkWidgetPath *)(_self_), pos);
}
GType _gtk_widget_path_iter_get_object_type(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_get_object_type((const GtkWidgetPath *)(_self_), pos);
}
guint _gtk_widget_path_iter_get_sibling_index(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_get_sibling_index((const GtkWidgetPath *)(_self_), pos);
}
const GtkWidgetPath * _gtk_widget_path_iter_get_siblings(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_get_siblings((const GtkWidgetPath *)(_self_), pos);
}
gboolean _gtk_widget_path_iter_has_class(GtkWidgetPath* _self_, gint pos, gchar* name) {
	return gtk_widget_path_iter_has_class((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_name(GtkWidgetPath* _self_, gint pos, gchar* name) {
	return gtk_widget_path_iter_has_name((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_qclass(GtkWidgetPath* _self_, gint pos, GQuark qname) {
	return gtk_widget_path_iter_has_qclass((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qname(GtkWidgetPath* _self_, gint pos, GQuark qname) {
	return gtk_widget_path_iter_has_qname((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qregion(GtkWidgetPath* _self_, gint pos, GQuark qname, GtkRegionFlags* flags) {
	return gtk_widget_path_iter_has_qregion((const GtkWidgetPath *)(_self_), pos, qname, (GtkRegionFlags *)(flags));
}
gboolean _gtk_widget_path_iter_has_region(GtkWidgetPath* _self_, gint pos, gchar* name, GtkRegionFlags* flags) {
	return gtk_widget_path_iter_has_region((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name), (GtkRegionFlags *)(flags));
}
GSList * _gtk_widget_path_iter_list_classes(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_list_classes((const GtkWidgetPath *)(_self_), pos);
}
GSList * _gtk_widget_path_iter_list_regions(GtkWidgetPath* _self_, gint pos) {
	return gtk_widget_path_iter_list_regions((const GtkWidgetPath *)(_self_), pos);
}
void _gtk_widget_path_iter_remove_class(GtkWidgetPath* _self_, gint pos, gchar* name) {
	gtk_widget_path_iter_remove_class((GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_remove_region(GtkWidgetPath* _self_, gint pos, gchar* name) {
	gtk_widget_path_iter_remove_region((GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_set_name(GtkWidgetPath* _self_, gint pos, gchar* name) {
	gtk_widget_path_iter_set_name((GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_set_object_type(GtkWidgetPath* _self_, gint pos, GType type_) {
	gtk_widget_path_iter_set_object_type((GtkWidgetPath *)(_self_), pos, type_);
}
gint _gtk_widget_path_length(GtkWidgetPath* _self_) {
	return gtk_widget_path_length((const GtkWidgetPath *)(_self_));
}
void _gtk_widget_path_prepend_type(GtkWidgetPath* _self_, GType type_) {
	gtk_widget_path_prepend_type((GtkWidgetPath *)(_self_), type_);
}
GtkWidgetPath * _gtk_widget_path_ref(GtkWidgetPath* _self_) {
	return gtk_widget_path_ref((GtkWidgetPath *)(_self_));
}
char * _gtk_widget_path_to_string(GtkWidgetPath* _self_) {
	return gtk_widget_path_to_string((const GtkWidgetPath *)(_self_));
}
void _gtk_widget_path_unref(GtkWidgetPath* _self_) {
	gtk_widget_path_unref((GtkWidgetPath *)(_self_));
}
gboolean _gtk_window_set_default_icon_from_file(gchar* filename, void* _error_) {
	return gtk_window_set_default_icon_from_file((const gchar *)(filename), (GError **)(_error_));
}
void _gtk_window_set_default_icon_name(gchar* name) {
	gtk_window_set_default_icon_name((const gchar *)(name));
}
gboolean _gtk_window_activate_default(GtkWindow* _self_) {
	return gtk_window_activate_default((GtkWindow *)(_self_));
}
gboolean _gtk_window_activate_focus(GtkWindow* _self_) {
	return gtk_window_activate_focus((GtkWindow *)(_self_));
}
gboolean _gtk_window_activate_key(GtkWindow* _self_, GdkEventKey* event) {
	return gtk_window_activate_key((GtkWindow *)(_self_), (GdkEventKey *)(event));
}
void _gtk_window_add_accel_group(GtkWindow* _self_, GtkAccelGroup* accel_group) {
	gtk_window_add_accel_group((GtkWindow *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_window_add_mnemonic(GtkWindow* _self_, guint keyval, GtkWidget* target) {
	gtk_window_add_mnemonic((GtkWindow *)(_self_), keyval, (GtkWidget *)(target));
}
void _gtk_window_begin_move_drag(GtkWindow* _self_, gint button, gint root_x, gint root_y, guint32 timestamp) {
	gtk_window_begin_move_drag((GtkWindow *)(_self_), button, root_x, root_y, timestamp);
}
void _gtk_window_begin_resize_drag(GtkWindow* _self_, GdkWindowEdge edge, gint button, gint root_x, gint root_y, guint32 timestamp) {
	gtk_window_begin_resize_drag((GtkWindow *)(_self_), edge, button, root_x, root_y, timestamp);
}
void _gtk_window_deiconify(GtkWindow* _self_) {
	gtk_window_deiconify((GtkWindow *)(_self_));
}
void _gtk_window_fullscreen(GtkWindow* _self_) {
	gtk_window_fullscreen((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_accept_focus(GtkWindow* _self_) {
	return gtk_window_get_accept_focus((GtkWindow *)(_self_));
}
GtkApplication * _gtk_window_get_application(GtkWindow* _self_) {
	return gtk_window_get_application((GtkWindow *)(_self_));
}
GtkWidget * _gtk_window_get_attached_to(GtkWindow* _self_) {
	return gtk_window_get_attached_to((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_decorated(GtkWindow* _self_) {
	return gtk_window_get_decorated((GtkWindow *)(_self_));
}
void _gtk_window_get_default_size(GtkWindow* _self_, gint* width, gint* height) {
	gtk_window_get_default_size((GtkWindow *)(_self_), (gint *)(width), (gint *)(height));
}
GtkWidget * _gtk_window_get_default_widget(GtkWindow* _self_) {
	return gtk_window_get_default_widget((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_deletable(GtkWindow* _self_) {
	return gtk_window_get_deletable((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_destroy_with_parent(GtkWindow* _self_) {
	return gtk_window_get_destroy_with_parent((GtkWindow *)(_self_));
}
GtkWidget * _gtk_window_get_focus(GtkWindow* _self_) {
	return gtk_window_get_focus((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_focus_on_map(GtkWindow* _self_) {
	return gtk_window_get_focus_on_map((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_focus_visible(GtkWindow* _self_) {
	return gtk_window_get_focus_visible((GtkWindow *)(_self_));
}
GdkGravity _gtk_window_get_gravity(GtkWindow* _self_) {
	return gtk_window_get_gravity((GtkWindow *)(_self_));
}
GtkWindowGroup * _gtk_window_get_group(GtkWindow* _self_) {
	return gtk_window_get_group((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_has_resize_grip(GtkWindow* _self_) {
	return gtk_window_get_has_resize_grip((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_hide_titlebar_when_maximized(GtkWindow* _self_) {
	return gtk_window_get_hide_titlebar_when_maximized((GtkWindow *)(_self_));
}
GdkPixbuf * _gtk_window_get_icon(GtkWindow* _self_) {
	return gtk_window_get_icon((GtkWindow *)(_self_));
}
GList * _gtk_window_get_icon_list(GtkWindow* _self_) {
	return gtk_window_get_icon_list((GtkWindow *)(_self_));
}
const gchar * _gtk_window_get_icon_name(GtkWindow* _self_) {
	return gtk_window_get_icon_name((GtkWindow *)(_self_));
}
GdkModifierType _gtk_window_get_mnemonic_modifier(GtkWindow* _self_) {
	return gtk_window_get_mnemonic_modifier((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_mnemonics_visible(GtkWindow* _self_) {
	return gtk_window_get_mnemonics_visible((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_modal(GtkWindow* _self_) {
	return gtk_window_get_modal((GtkWindow *)(_self_));
}
gdouble _gtk_window_get_opacity(GtkWindow* _self_) {
	return gtk_window_get_opacity((GtkWindow *)(_self_));
}
void _gtk_window_get_position(GtkWindow* _self_, gint* root_x, gint* root_y) {
	gtk_window_get_position((GtkWindow *)(_self_), (gint *)(root_x), (gint *)(root_y));
}
gboolean _gtk_window_get_resizable(GtkWindow* _self_) {
	return gtk_window_get_resizable((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_resize_grip_area(GtkWindow* _self_, GdkRectangle* rect) {
	return gtk_window_get_resize_grip_area((GtkWindow *)(_self_), (GdkRectangle *)(rect));
}
const gchar * _gtk_window_get_role(GtkWindow* _self_) {
	return gtk_window_get_role((GtkWindow *)(_self_));
}
GdkScreen * _gtk_window_get_screen(GtkWindow* _self_) {
	return gtk_window_get_screen((GtkWindow *)(_self_));
}
void _gtk_window_get_size(GtkWindow* _self_, gint* width, gint* height) {
	gtk_window_get_size((GtkWindow *)(_self_), (gint *)(width), (gint *)(height));
}
gboolean _gtk_window_get_skip_pager_hint(GtkWindow* _self_) {
	return gtk_window_get_skip_pager_hint((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_skip_taskbar_hint(GtkWindow* _self_) {
	return gtk_window_get_skip_taskbar_hint((GtkWindow *)(_self_));
}
const gchar * _gtk_window_get_title(GtkWindow* _self_) {
	return gtk_window_get_title((GtkWindow *)(_self_));
}
GtkWindow * _gtk_window_get_transient_for(GtkWindow* _self_) {
	return gtk_window_get_transient_for((GtkWindow *)(_self_));
}
GdkWindowTypeHint _gtk_window_get_type_hint(GtkWindow* _self_) {
	return gtk_window_get_type_hint((GtkWindow *)(_self_));
}
gboolean _gtk_window_get_urgency_hint(GtkWindow* _self_) {
	return gtk_window_get_urgency_hint((GtkWindow *)(_self_));
}
GtkWindowType _gtk_window_get_window_type(GtkWindow* _self_) {
	return gtk_window_get_window_type((GtkWindow *)(_self_));
}
gboolean _gtk_window_has_group(GtkWindow* _self_) {
	return gtk_window_has_group((GtkWindow *)(_self_));
}
gboolean _gtk_window_has_toplevel_focus(GtkWindow* _self_) {
	return gtk_window_has_toplevel_focus((GtkWindow *)(_self_));
}
void _gtk_window_iconify(GtkWindow* _self_) {
	gtk_window_iconify((GtkWindow *)(_self_));
}
gboolean _gtk_window_is_active(GtkWindow* _self_) {
	return gtk_window_is_active((GtkWindow *)(_self_));
}
void _gtk_window_maximize(GtkWindow* _self_) {
	gtk_window_maximize((GtkWindow *)(_self_));
}
gboolean _gtk_window_mnemonic_activate(GtkWindow* _self_, guint keyval, GdkModifierType modifier) {
	return gtk_window_mnemonic_activate((GtkWindow *)(_self_), keyval, modifier);
}
void _gtk_window_move(GtkWindow* _self_, gint x, gint y) {
	gtk_window_move((GtkWindow *)(_self_), x, y);
}
gboolean _gtk_window_parse_geometry(GtkWindow* _self_, gchar* geometry) {
	return gtk_window_parse_geometry((GtkWindow *)(_self_), (const gchar *)(geometry));
}
void _gtk_window_present(GtkWindow* _self_) {
	gtk_window_present((GtkWindow *)(_self_));
}
void _gtk_window_present_with_time(GtkWindow* _self_, guint32 timestamp) {
	gtk_window_present_with_time((GtkWindow *)(_self_), timestamp);
}
gboolean _gtk_window_propagate_key_event(GtkWindow* _self_, GdkEventKey* event) {
	return gtk_window_propagate_key_event((GtkWindow *)(_self_), (GdkEventKey *)(event));
}
void _gtk_window_remove_accel_group(GtkWindow* _self_, GtkAccelGroup* accel_group) {
	gtk_window_remove_accel_group((GtkWindow *)(_self_), (GtkAccelGroup *)(accel_group));
}
void _gtk_window_remove_mnemonic(GtkWindow* _self_, guint keyval, GtkWidget* target) {
	gtk_window_remove_mnemonic((GtkWindow *)(_self_), keyval, (GtkWidget *)(target));
}
void _gtk_window_reshow_with_initial_size(GtkWindow* _self_) {
	gtk_window_reshow_with_initial_size((GtkWindow *)(_self_));
}
void _gtk_window_resize(GtkWindow* _self_, gint width, gint height) {
	gtk_window_resize((GtkWindow *)(_self_), width, height);
}
gboolean _gtk_window_resize_grip_is_visible(GtkWindow* _self_) {
	return gtk_window_resize_grip_is_visible((GtkWindow *)(_self_));
}
void _gtk_window_resize_to_geometry(GtkWindow* _self_, gint width, gint height) {
	gtk_window_resize_to_geometry((GtkWindow *)(_self_), width, height);
}
void _gtk_window_set_accept_focus(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_accept_focus((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_application(GtkWindow* _self_, GtkApplication* application) {
	gtk_window_set_application((GtkWindow *)(_self_), (GtkApplication *)(application));
}
void _gtk_window_set_attached_to(GtkWindow* _self_, GtkWidget* attach_widget) {
	gtk_window_set_attached_to((GtkWindow *)(_self_), (GtkWidget *)(attach_widget));
}
void _gtk_window_set_decorated(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_decorated((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_default(GtkWindow* _self_, GtkWidget* default_widget) {
	gtk_window_set_default((GtkWindow *)(_self_), (GtkWidget *)(default_widget));
}
void _gtk_window_set_default_geometry(GtkWindow* _self_, gint width, gint height) {
	gtk_window_set_default_geometry((GtkWindow *)(_self_), width, height);
}
void _gtk_window_set_default_size(GtkWindow* _self_, gint width, gint height) {
	gtk_window_set_default_size((GtkWindow *)(_self_), width, height);
}
void _gtk_window_set_deletable(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_deletable((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_destroy_with_parent(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_destroy_with_parent((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_focus(GtkWindow* _self_, GtkWidget* focus) {
	gtk_window_set_focus((GtkWindow *)(_self_), (GtkWidget *)(focus));
}
void _gtk_window_set_focus_on_map(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_focus_on_map((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_focus_visible(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_focus_visible((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_geometry_hints(GtkWindow* _self_, GtkWidget* geometry_widget, GdkGeometry* geometry, GdkWindowHints geom_mask) {
	gtk_window_set_geometry_hints((GtkWindow *)(_self_), (GtkWidget *)(geometry_widget), (GdkGeometry *)(geometry), geom_mask);
}
void _gtk_window_set_gravity(GtkWindow* _self_, GdkGravity gravity) {
	gtk_window_set_gravity((GtkWindow *)(_self_), gravity);
}
void _gtk_window_set_has_resize_grip(GtkWindow* _self_, gboolean value) {
	gtk_window_set_has_resize_grip((GtkWindow *)(_self_), value);
}
void _gtk_window_set_has_user_ref_count(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_has_user_ref_count((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_hide_titlebar_when_maximized(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_hide_titlebar_when_maximized((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_icon(GtkWindow* _self_, GdkPixbuf* icon) {
	gtk_window_set_icon((GtkWindow *)(_self_), (GdkPixbuf *)(icon));
}
gboolean _gtk_window_set_icon_from_file(GtkWindow* _self_, gchar* filename, void* _error_) {
	return gtk_window_set_icon_from_file((GtkWindow *)(_self_), (const gchar *)(filename), (GError **)(_error_));
}
void _gtk_window_set_icon_list(GtkWindow* _self_, GList* list) {
	gtk_window_set_icon_list((GtkWindow *)(_self_), (GList *)(list));
}
void _gtk_window_set_icon_name(GtkWindow* _self_, gchar* name) {
	gtk_window_set_icon_name((GtkWindow *)(_self_), (const gchar *)(name));
}
void _gtk_window_set_keep_above(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_keep_above((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_keep_below(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_keep_below((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_mnemonic_modifier(GtkWindow* _self_, GdkModifierType modifier) {
	gtk_window_set_mnemonic_modifier((GtkWindow *)(_self_), modifier);
}
void _gtk_window_set_mnemonics_visible(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_mnemonics_visible((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_modal(GtkWindow* _self_, gboolean modal) {
	gtk_window_set_modal((GtkWindow *)(_self_), modal);
}
void _gtk_window_set_opacity(GtkWindow* _self_, gdouble opacity) {
	gtk_window_set_opacity((GtkWindow *)(_self_), opacity);
}
void _gtk_window_set_position(GtkWindow* _self_, GtkWindowPosition position) {
	gtk_window_set_position((GtkWindow *)(_self_), position);
}
void _gtk_window_set_resizable(GtkWindow* _self_, gboolean resizable) {
	gtk_window_set_resizable((GtkWindow *)(_self_), resizable);
}
void _gtk_window_set_role(GtkWindow* _self_, gchar* role) {
	gtk_window_set_role((GtkWindow *)(_self_), (const gchar *)(role));
}
void _gtk_window_set_screen(GtkWindow* _self_, GdkScreen* screen) {
	gtk_window_set_screen((GtkWindow *)(_self_), (GdkScreen *)(screen));
}
void _gtk_window_set_skip_pager_hint(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_skip_pager_hint((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_skip_taskbar_hint(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_skip_taskbar_hint((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_startup_id(GtkWindow* _self_, gchar* startup_id) {
	gtk_window_set_startup_id((GtkWindow *)(_self_), (const gchar *)(startup_id));
}
void _gtk_window_set_title(GtkWindow* _self_, gchar* title) {
	gtk_window_set_title((GtkWindow *)(_self_), (const gchar *)(title));
}
void _gtk_window_set_transient_for(GtkWindow* _self_, GtkWindow* parent) {
	gtk_window_set_transient_for((GtkWindow *)(_self_), (GtkWindow *)(parent));
}
void _gtk_window_set_type_hint(GtkWindow* _self_, GdkWindowTypeHint hint) {
	gtk_window_set_type_hint((GtkWindow *)(_self_), hint);
}
void _gtk_window_set_urgency_hint(GtkWindow* _self_, gboolean setting) {
	gtk_window_set_urgency_hint((GtkWindow *)(_self_), setting);
}
void _gtk_window_set_wmclass(GtkWindow* _self_, gchar* wmclass_name, gchar* wmclass_class) {
	gtk_window_set_wmclass((GtkWindow *)(_self_), (const gchar *)(wmclass_name), (const gchar *)(wmclass_class));
}
void _gtk_window_stick(GtkWindow* _self_) {
	gtk_window_stick((GtkWindow *)(_self_));
}
void _gtk_window_unfullscreen(GtkWindow* _self_) {
	gtk_window_unfullscreen((GtkWindow *)(_self_));
}
void _gtk_window_unmaximize(GtkWindow* _self_) {
	gtk_window_unmaximize((GtkWindow *)(_self_));
}
void _gtk_window_unstick(GtkWindow* _self_) {
	gtk_window_unstick((GtkWindow *)(_self_));
}
void _gtk_window_group_add_window(GtkWindowGroup* _self_, GtkWindow* window) {
	gtk_window_group_add_window((GtkWindowGroup *)(_self_), (GtkWindow *)(window));
}
GtkWidget * _gtk_window_group_get_current_device_grab(GtkWindowGroup* _self_, GdkDevice* device) {
	return gtk_window_group_get_current_device_grab((GtkWindowGroup *)(_self_), (GdkDevice *)(device));
}
GtkWidget * _gtk_window_group_get_current_grab(GtkWindowGroup* _self_) {
	return gtk_window_group_get_current_grab((GtkWindowGroup *)(_self_));
}
GList * _gtk_window_group_list_windows(GtkWindowGroup* _self_) {
	return gtk_window_group_list_windows((GtkWindowGroup *)(_self_));
}
void _gtk_window_group_remove_window(GtkWindowGroup* _self_, GtkWindow* window) {
	gtk_window_group_remove_window((GtkWindowGroup *)(_self_), (GtkWindow *)(window));
}
void _gtk_accelerator_parse(gchar* accelerator, guint* accelerator_key, GdkModifierType* accelerator_mods) {
	gtk_accelerator_parse((const gchar *)(accelerator), (guint *)(accelerator_key), (GdkModifierType *)(accelerator_mods));
}
void _gtk_accelerator_parse_with_keycode(gchar* accelerator, guint* accelerator_key, void* accelerator_codes, GdkModifierType* accelerator_mods) {
	gtk_accelerator_parse_with_keycode((const gchar *)(accelerator), (guint *)(accelerator_key), (guint **)(accelerator_codes), (GdkModifierType *)(accelerator_mods));
}
void _gtk_drag_set_icon_name(GdkDragContext* context, gchar* icon_name, gint hot_x, gint hot_y) {
	gtk_drag_set_icon_name((GdkDragContext *)(context), (const gchar *)(icon_name), hot_x, hot_y);
}
void _gtk_drag_set_icon_stock(GdkDragContext* context, gchar* stock_id, gint hot_x, gint hot_y) {
	gtk_drag_set_icon_stock((GdkDragContext *)(context), (const gchar *)(stock_id), hot_x, hot_y);
}
GtkIconSize _gtk_icon_size_from_name(gchar* name) {
	return gtk_icon_size_from_name((const gchar *)(name));
}
GtkIconSize _gtk_icon_size_register(gchar* name, gint width, gint height) {
	return gtk_icon_size_register((const gchar *)(name), width, height);
}
void _gtk_icon_size_register_alias(gchar* alias, GtkIconSize target) {
	gtk_icon_size_register_alias((const gchar *)(alias), target);
}
gboolean _gtk_rc_property_parse_border(GParamSpec* pspec, GString* gstring, GValue* property_value) {
	return gtk_rc_property_parse_border((const GParamSpec *)(pspec), (const GString *)(gstring), (GValue *)(property_value));
}
gboolean _gtk_rc_property_parse_color(GParamSpec* pspec, GString* gstring, GValue* property_value) {
	return gtk_rc_property_parse_color((const GParamSpec *)(pspec), (const GString *)(gstring), (GValue *)(property_value));
}
gboolean _gtk_rc_property_parse_enum(GParamSpec* pspec, GString* gstring, GValue* property_value) {
	return gtk_rc_property_parse_enum((const GParamSpec *)(pspec), (const GString *)(gstring), (GValue *)(property_value));
}
gboolean _gtk_rc_property_parse_flags(GParamSpec* pspec, GString* gstring, GValue* property_value) {
	return gtk_rc_property_parse_flags((const GParamSpec *)(pspec), (const GString *)(gstring), (GValue *)(property_value));
}
gboolean _gtk_rc_property_parse_requisition(GParamSpec* pspec, GString* gstring, GValue* property_value) {
	return gtk_rc_property_parse_requisition((const GParamSpec *)(pspec), (const GString *)(gstring), (GValue *)(property_value));
}
GdkPixbuf * _gtk_render_icon_pixbuf(GtkStyleContext* context, GtkIconSource* source, GtkIconSize size) {
	return gtk_render_icon_pixbuf((GtkStyleContext *)(context), (const GtkIconSource *)(source), size);
}
gboolean _gtk_show_uri(GdkScreen* screen, gchar* uri, guint32 timestamp, void* _error_) {
	return gtk_show_uri((GdkScreen *)(screen), (const gchar *)(uri), timestamp, (GError **)(_error_));
}
gboolean _gtk_stock_lookup(gchar* stock_id, GtkStockItem* item) {
	return gtk_stock_lookup((const gchar *)(stock_id), (GtkStockItem *)(item));
}
void _gtk_stock_set_translate_func(gchar* domain, GtkTranslateFunc func_, gpointer data, GDestroyNotify notify) {
	gtk_stock_set_translate_func((const gchar *)(domain), func_, data, notify);
}
GtkWidget * _gtk_test_create_simple_window(gchar* window_title, gchar* dialog_text) {
	return gtk_test_create_simple_window((const gchar *)(window_title), (const gchar *)(dialog_text));
}
GtkWidget * _gtk_test_find_label(GtkWidget* widget, gchar* label_pattern) {
	return gtk_test_find_label((GtkWidget *)(widget), (const gchar *)(label_pattern));
}
GtkWidget * _gtk_test_find_widget(GtkWidget* widget, gchar* label_pattern, GType widget_type) {
	return gtk_test_find_widget((GtkWidget *)(widget), (const gchar *)(label_pattern), widget_type);
}
void _gtk_test_text_set(GtkWidget* widget, gchar* string_) {
	gtk_test_text_set((GtkWidget *)(widget), (const gchar *)(string_));
}
gboolean _gtk_tree_get_row_drag_data(GtkSelectionData* selection_data, void* tree_model, void* path) {
	return gtk_tree_get_row_drag_data((GtkSelectionData *)(selection_data), (GtkTreeModel **)(tree_model), (GtkTreePath **)(path));
}
gboolean glibtrue() { return TRUE; }
gboolean glibfalse() { return FALSE; }
*/
import "C"
import (
	"unsafe"
)

type ToolbarClass C.GtkToolbarClass
type ListStoreClass C.GtkListStoreClass
type Accessible C.GtkAccessible
type Viewport C.GtkViewport
type InfoBarPrivate C.GtkInfoBarPrivate
type Toolbar C.GtkToolbar
type StyleContextPrivate C.GtkStyleContextPrivate
type CellRendererSpinnerPrivate C.GtkCellRendererSpinnerPrivate
type RecentManager C.GtkRecentManager
type CellRendererClass C.GtkCellRendererClass
type RadioMenuItemClass C.GtkRadioMenuItemClass
type OverlayClass C.GtkOverlayClass
type FixedClass C.GtkFixedClass
type ToolPalettePrivate C.GtkToolPalettePrivate
type FramePrivate C.GtkFramePrivate
type ActionGroup C.GtkActionGroup
type ScaleButtonClass C.GtkScaleButtonClass
type TextAttributes C.GtkTextAttributes
type Window C.GtkWindow
type SelectionData C.GtkSelectionData
type MenuItemClass C.GtkMenuItemClass
type ToggleButton C.GtkToggleButton
type Widget C.GtkWidget
type ToggleActionClass C.GtkToggleActionClass
type Container C.GtkContainer
type CheckMenuItem C.GtkCheckMenuItem
type CellLayoutIface C.GtkCellLayoutIface
type ToolItemGroupPrivate C.GtkToolItemGroupPrivate
type ProgressBar C.GtkProgressBar
type FontChooserDialogPrivate C.GtkFontChooserDialogPrivate
type TreeSelection C.GtkTreeSelection
type HSVPrivate C.GtkHSVPrivate
type ActionableInterface C.GtkActionableInterface
type HScrollbar C.GtkHScrollbar
type InvisibleClass C.GtkInvisibleClass
type TearoffMenuItemPrivate C.GtkTearoffMenuItemPrivate
type FontSelectionDialogPrivate C.GtkFontSelectionDialogPrivate
type ComboBoxPrivate C.GtkComboBoxPrivate
type ToolButton C.GtkToolButton
type RcStyle C.GtkRcStyle
type ColorButton C.GtkColorButton
type Switch C.GtkSwitch
type StatusbarPrivate C.GtkStatusbarPrivate
type ColorButtonPrivate C.GtkColorButtonPrivate
type CellRendererSpinClass C.GtkCellRendererSpinClass
type RecentChooserWidgetPrivate C.GtkRecentChooserWidgetPrivate
type TextView C.GtkTextView
type ComboBoxTextPrivate C.GtkComboBoxTextPrivate
type ColorChooserWidget C.GtkColorChooserWidget
type CellRendererPixbufPrivate C.GtkCellRendererPixbufPrivate
type FileChooserDialog C.GtkFileChooserDialog
type RangePrivate C.GtkRangePrivate
type HSV C.GtkHSV
type ColorSelectionDialogClass C.GtkColorSelectionDialogClass
type FontSelectionClass C.GtkFontSelectionClass
type EditableInterface C.GtkEditableInterface
type SizeGroup C.GtkSizeGroup
type Socket C.GtkSocket
type FontChooserDialog C.GtkFontChooserDialog
type ToggleActionPrivate C.GtkToggleActionPrivate
type SwitchClass C.GtkSwitchClass
type CellRendererClassPrivate C.GtkCellRendererClassPrivate
type FrameClass C.GtkFrameClass
type LevelBarPrivate C.GtkLevelBarPrivate
type Style C.GtkStyle
type PanedClass C.GtkPanedClass
type IconFactory C.GtkIconFactory
type TableChild C.GtkTableChild
type EntryClass C.GtkEntryClass
type Assistant C.GtkAssistant
type ColorChooserDialogPrivate C.GtkColorChooserDialogPrivate
type VScale C.GtkVScale
type ScalePrivate C.GtkScalePrivate
type RadioActionPrivate C.GtkRadioActionPrivate
type HButtonBox C.GtkHButtonBox
type EntryCompletionClass C.GtkEntryCompletionClass
type BoxClass C.GtkBoxClass
type TreeStoreClass C.GtkTreeStoreClass
type CellRendererAccelPrivate C.GtkCellRendererAccelPrivate
type MenuShell C.GtkMenuShell
type SettingsPrivate C.GtkSettingsPrivate
type Paned C.GtkPaned
type LabelPrivate C.GtkLabelPrivate
type AboutDialogPrivate C.GtkAboutDialogPrivate
type TreeModelSortPrivate C.GtkTreeModelSortPrivate
type ApplicationWindowPrivate C.GtkApplicationWindowPrivate
type VScaleClass C.GtkVScaleClass
type TreeModelIface C.GtkTreeModelIface
type MenuToolButtonClass C.GtkMenuToolButtonClass
type OffscreenWindow C.GtkOffscreenWindow
type ToolButtonClass C.GtkToolButtonClass
type ToolItemGroupClass C.GtkToolItemGroupClass
type OverlayPrivate C.GtkOverlayPrivate
type HandleBoxPrivate C.GtkHandleBoxPrivate
type CellRendererAccelClass C.GtkCellRendererAccelClass
type ColorSelectionPrivate C.GtkColorSelectionPrivate
type Builder C.GtkBuilder
type CellRendererPrivate C.GtkCellRendererPrivate
type VPaned C.GtkVPaned
type AppChooserButtonPrivate C.GtkAppChooserButtonPrivate
type Arrow C.GtkArrow
type CellViewClass C.GtkCellViewClass
type ApplicationWindow C.GtkApplicationWindow
type TextTagTable C.GtkTextTagTable
type NotebookPrivate C.GtkNotebookPrivate
type TextTagClass C.GtkTextTagClass
type ImagePrivate C.GtkImagePrivate
type TextTag C.GtkTextTag
type IconFactoryClass C.GtkIconFactoryClass
type CellRendererCombo C.GtkCellRendererCombo
type TextViewClass C.GtkTextViewClass
type TargetList C.GtkTargetList
type Calendar C.GtkCalendar
type ToggleButtonClass C.GtkToggleButtonClass
type FontSelectionDialog C.GtkFontSelectionDialog
type SeparatorClass C.GtkSeparatorClass
type NumerableIconClass C.GtkNumerableIconClass
type ExpanderClass C.GtkExpanderClass
type NumerableIcon C.GtkNumerableIcon
type CellArea C.GtkCellArea
type PrintOperationPreviewIface C.GtkPrintOperationPreviewIface
type Frame C.GtkFrame
type SettingsValue C.GtkSettingsValue
type MessageDialogPrivate C.GtkMessageDialogPrivate
type TextBufferPrivate C.GtkTextBufferPrivate
type ColorChooserInterface C.GtkColorChooserInterface
type EventBoxClass C.GtkEventBoxClass
type BinClass C.GtkBinClass
type SeparatorMenuItemClass C.GtkSeparatorMenuItemClass
type ActionEntry C.GtkActionEntry
type SeparatorToolItemPrivate C.GtkSeparatorToolItemPrivate
type TreeStorePrivate C.GtkTreeStorePrivate
type ToggleAction C.GtkToggleAction
type CssProvider C.GtkCssProvider
type HScaleClass C.GtkHScaleClass
type ContainerClass C.GtkContainerClass
type FontChooserWidgetClass C.GtkFontChooserWidgetClass
type CheckMenuItemClass C.GtkCheckMenuItemClass
type EntryBuffer C.GtkEntryBuffer
type IconView C.GtkIconView
type EventBoxPrivate C.GtkEventBoxPrivate
type LevelBarClass C.GtkLevelBarClass
type ActionGroupPrivate C.GtkActionGroupPrivate
type RecentActionPrivate C.GtkRecentActionPrivate
type Separator C.GtkSeparator
type LockButtonClass C.GtkLockButtonClass
type AppChooserButton C.GtkAppChooserButton
type UIManagerClass C.GtkUIManagerClass
type CellAreaBoxClass C.GtkCellAreaBoxClass
type ScaleClass C.GtkScaleClass
type StatusIconClass C.GtkStatusIconClass
type Expander C.GtkExpander
type Grid C.GtkGrid
type CellRendererSpinPrivate C.GtkCellRendererSpinPrivate
type RecentChooserMenuPrivate C.GtkRecentChooserMenuPrivate
type WidgetClassPrivate C.GtkWidgetClassPrivate
type SpinnerClass C.GtkSpinnerClass
type LinkButton C.GtkLinkButton
type ToolPalette C.GtkToolPalette
type CellRendererTogglePrivate C.GtkCellRendererTogglePrivate
type ComboBox C.GtkComboBox
type IconTheme C.GtkIconTheme
type ToggleToolButtonPrivate C.GtkToggleToolButtonPrivate
type AccelGroup C.GtkAccelGroup
type VPanedClass C.GtkVPanedClass
type Border C.GtkBorder
type FontButton C.GtkFontButton
type CellRendererTextPrivate C.GtkCellRendererTextPrivate
type FileChooserDialogPrivate C.GtkFileChooserDialogPrivate
type MenuShellPrivate C.GtkMenuShellPrivate
type BinPrivate C.GtkBinPrivate
type IMContextInfo C.GtkIMContextInfo
type WindowGroupPrivate C.GtkWindowGroupPrivate
type CellViewPrivate C.GtkCellViewPrivate
type DrawingArea C.GtkDrawingArea
type SpinButtonPrivate C.GtkSpinButtonPrivate
type LockButton C.GtkLockButton
type IconViewPrivate C.GtkIconViewPrivate
type ScrollableInterface C.GtkScrollableInterface
type WindowGroup C.GtkWindowGroup
type ColorChooserDialogClass C.GtkColorChooserDialogClass
type IMMulticontextPrivate C.GtkIMMulticontextPrivate
type VScrollbarClass C.GtkVScrollbarClass
type FileChooserWidgetClass C.GtkFileChooserWidgetClass
type TreeView C.GtkTreeView
type FontSelectionPrivate C.GtkFontSelectionPrivate
type ColorChooserWidgetPrivate C.GtkColorChooserWidgetPrivate
type IconThemePrivate C.GtkIconThemePrivate
type VSeparatorClass C.GtkVSeparatorClass
type PrintContext C.GtkPrintContext
type TextAppearance C.GtkTextAppearance
type Entry C.GtkEntry
type Range C.GtkRange
type CellRendererPixbufClass C.GtkCellRendererPixbufClass
type MountOperationPrivate C.GtkMountOperationPrivate
type VolumeButtonClass C.GtkVolumeButtonClass
type ButtonBox C.GtkButtonBox
type SizeGroupClass C.GtkSizeGroupClass
type TreeModelFilterPrivate C.GtkTreeModelFilterPrivate
type AccelKey C.GtkAccelKey
type LabelSelectionInfo C.GtkLabelSelectionInfo
type HScale C.GtkHScale
type PrintOperationClass C.GtkPrintOperationClass
type TextTagPrivate C.GtkTextTagPrivate
type TreeSortableIface C.GtkTreeSortableIface
type ImageMenuItem C.GtkImageMenuItem
type LinkButtonPrivate C.GtkLinkButtonPrivate
type BindingEntry C.GtkBindingEntry
type AlignmentClass C.GtkAlignmentClass
type FontChooserWidgetPrivate C.GtkFontChooserWidgetPrivate
type TextChildAnchorClass C.GtkTextChildAnchorClass
type TreeViewClass C.GtkTreeViewClass
type IMContextSimplePrivate C.GtkIMContextSimplePrivate
type RecentFilter C.GtkRecentFilter
type CellRendererComboPrivate C.GtkCellRendererComboPrivate
type SocketClass C.GtkSocketClass
type ToggleToolButtonClass C.GtkToggleToolButtonClass
type IconViewClass C.GtkIconViewClass
type AppChooserWidgetClass C.GtkAppChooserWidgetClass
type ToggleActionEntry C.GtkToggleActionEntry
type PrintSettings C.GtkPrintSettings
type HPaned C.GtkHPaned
type TreeSelectionPrivate C.GtkTreeSelectionPrivate
type RecentActionClass C.GtkRecentActionClass
type MenuBar C.GtkMenuBar
type FontButtonClass C.GtkFontButtonClass
type CalendarPrivate C.GtkCalendarPrivate
type SeparatorToolItemClass C.GtkSeparatorToolItemClass
type HPanedClass C.GtkHPanedClass
type RadioButtonClass C.GtkRadioButtonClass
type CalendarClass C.GtkCalendarClass
type MenuToolButton C.GtkMenuToolButton
type FontButtonPrivate C.GtkFontButtonPrivate
type AccessiblePrivate C.GtkAccessiblePrivate
type TreeSelectionClass C.GtkTreeSelectionClass
type EntryCompletion C.GtkEntryCompletion
type MenuItem C.GtkMenuItem
type ToolItemClass C.GtkToolItemClass
type AppChooserWidget C.GtkAppChooserWidget
type Requisition C.GtkRequisition
type LevelBar C.GtkLevelBar
type MenuShellClass C.GtkMenuShellClass
type MenuButtonPrivate C.GtkMenuButtonPrivate
type RadioActionClass C.GtkRadioActionClass
type SpinnerPrivate C.GtkSpinnerPrivate
type ToolShellIface C.GtkToolShellIface
type AccelMapClass C.GtkAccelMapClass
type TreeRowReference C.GtkTreeRowReference
type TreeModelSortClass C.GtkTreeModelSortClass
type MountOperation C.GtkMountOperation
type AboutDialogClass C.GtkAboutDialogClass
type Settings C.GtkSettings
type EntryBufferClass C.GtkEntryBufferClass
type TextIter C.GtkTextIter
type MenuBarClass C.GtkMenuBarClass
type ViewportPrivate C.GtkViewportPrivate
type AppChooserDialogPrivate C.GtkAppChooserDialogPrivate
type LabelClass C.GtkLabelClass
type EntryCompletionPrivate C.GtkEntryCompletionPrivate
type SwitchPrivate C.GtkSwitchPrivate
type SeparatorPrivate C.GtkSeparatorPrivate
type MessageDialog C.GtkMessageDialog
type AccelGroupPrivate C.GtkAccelGroupPrivate
type TreeModelFilter C.GtkTreeModelFilter
type FileFilter C.GtkFileFilter
type CssSection C.GtkCssSection
type MenuItemPrivate C.GtkMenuItemPrivate
type ColorSelectionClass C.GtkColorSelectionClass
type TextTagTablePrivate C.GtkTextTagTablePrivate
type FileChooserDialogClass C.GtkFileChooserDialogClass
type LinkButtonClass C.GtkLinkButtonClass
type ListStore C.GtkListStore
type ThemeEngine C.GtkThemeEngine
type ListStorePrivate C.GtkListStorePrivate
type AdjustmentPrivate C.GtkAdjustmentPrivate
type AppChooserButtonClass C.GtkAppChooserButtonClass
type Dialog C.GtkDialog
type HandleBox C.GtkHandleBox
type CellRendererProgressClass C.GtkCellRendererProgressClass
type AccelGroupEntry C.GtkAccelGroupEntry
type ContainerPrivate C.GtkContainerPrivate
type ToolButtonPrivate C.GtkToolButtonPrivate
type ComboBoxText C.GtkComboBoxText
type IMMulticontext C.GtkIMMulticontext
type ColorButtonClass C.GtkColorButtonClass
type ButtonPrivate C.GtkButtonPrivate
type ActionClass C.GtkActionClass
type ActionPrivate C.GtkActionPrivate
type StatusIconPrivate C.GtkStatusIconPrivate
type MiscPrivate C.GtkMiscPrivate
type IMContextSimple C.GtkIMContextSimple
type BuilderPrivate C.GtkBuilderPrivate
type ProgressBarPrivate C.GtkProgressBarPrivate
type IconSet C.GtkIconSet
type Application C.GtkApplication
type ToolbarPrivate C.GtkToolbarPrivate
type TreeModelFilterClass C.GtkTreeModelFilterClass
type RangeClass C.GtkRangeClass
type RcStyleClass C.GtkRcStyleClass
type AppChooserWidgetPrivate C.GtkAppChooserWidgetPrivate
type RecentData C.GtkRecentData
type Fixed C.GtkFixed
type CellAreaBoxPrivate C.GtkCellAreaBoxPrivate
type TableRowCol C.GtkTableRowCol
type FontSelection C.GtkFontSelection
type FileChooserButtonPrivate C.GtkFileChooserButtonPrivate
type RadioToolButton C.GtkRadioToolButton
type HSVClass C.GtkHSVClass
type TextChildAnchor C.GtkTextChildAnchor
type StylePropertiesPrivate C.GtkStylePropertiesPrivate
type RcContext C.GtkRcContext
type CheckMenuItemPrivate C.GtkCheckMenuItemPrivate
type VolumeButton C.GtkVolumeButton
type FixedPrivate C.GtkFixedPrivate
type IMMulticontextClass C.GtkIMMulticontextClass
type TextBufferClass C.GtkTextBufferClass
type FixedChild C.GtkFixedChild
type Scrollbar C.GtkScrollbar
type AccelLabelClass C.GtkAccelLabelClass
type StatusbarClass C.GtkStatusbarClass
type TreeViewColumnClass C.GtkTreeViewColumnClass
type EventBox C.GtkEventBox
type TreeViewColumnPrivate C.GtkTreeViewColumnPrivate
type VBoxClass C.GtkVBoxClass
type CheckButton C.GtkCheckButton
type ImageMenuItemClass C.GtkImageMenuItemClass
type HSeparatorClass C.GtkHSeparatorClass
type AdjustmentClass C.GtkAdjustmentClass
type WindowClass C.GtkWindowClass
type UIManager C.GtkUIManager
type VButtonBoxClass C.GtkVButtonBoxClass
type BindingSet C.GtkBindingSet
type BuildableIface C.GtkBuildableIface
type SizeGroupPrivate C.GtkSizeGroupPrivate
type RecentManagerClass C.GtkRecentManagerClass
type ColorChooserWidgetClass C.GtkColorChooserWidgetClass
type WidgetPrivate C.GtkWidgetPrivate
type Bin C.GtkBin
type UIManagerPrivate C.GtkUIManagerPrivate
type ApplicationClass C.GtkApplicationClass
type BuilderClass C.GtkBuilderClass
type CheckButtonClass C.GtkCheckButtonClass
type ComboBoxClass C.GtkComboBoxClass
type FileChooserButton C.GtkFileChooserButton
type IMContext C.GtkIMContext
type MenuBarPrivate C.GtkMenuBarPrivate
type Misc C.GtkMisc
type MenuToolButtonPrivate C.GtkMenuToolButtonPrivate
type ToggleToolButton C.GtkToggleToolButton
type AspectFrameClass C.GtkAspectFrameClass
type TreeModelSort C.GtkTreeModelSort
type FontChooserDialogClass C.GtkFontChooserDialogClass
type CellRenderer C.GtkCellRenderer
type StyleContext C.GtkStyleContext
type FileChooserWidget C.GtkFileChooserWidget
type Scale C.GtkScale
type OffscreenWindowClass C.GtkOffscreenWindowClass
type WidgetPath C.GtkWidgetPath
type ThemingEngineClass C.GtkThemingEngineClass
type ViewportClass C.GtkViewportClass
type TearoffMenuItem C.GtkTearoffMenuItem
type TextMarkClass C.GtkTextMarkClass
type Statusbar C.GtkStatusbar
type RadioButtonPrivate C.GtkRadioButtonPrivate
type ScaleButtonPrivate C.GtkScaleButtonPrivate
type FileFilterInfo C.GtkFileFilterInfo
type GridPrivate C.GtkGridPrivate
type IconFactoryPrivate C.GtkIconFactoryPrivate
type PageRange C.GtkPageRange
type Menu C.GtkMenu
type IMContextClass C.GtkIMContextClass
type RadioMenuItemPrivate C.GtkRadioMenuItemPrivate
type LockButtonPrivate C.GtkLockButtonPrivate
type TreeStore C.GtkTreeStore
type CellRendererText C.GtkCellRendererText
type TreeDragDestIface C.GtkTreeDragDestIface
type Notebook C.GtkNotebook
type RecentManagerPrivate C.GtkRecentManagerPrivate
type MountOperationClass C.GtkMountOperationClass
type VBox C.GtkVBox
type DialogPrivate C.GtkDialogPrivate
type PaperSize C.GtkPaperSize
type StylePropertiesClass C.GtkStylePropertiesClass
type Table C.GtkTable
type ToolItemPrivate C.GtkToolItemPrivate
type SpinButtonClass C.GtkSpinButtonClass
type TearoffMenuItemClass C.GtkTearoffMenuItemClass
type Invisible C.GtkInvisible
type ScrolledWindow C.GtkScrolledWindow
type PlugClass C.GtkPlugClass
type RadioToolButtonClass C.GtkRadioToolButtonClass
type Layout C.GtkLayout
type RadioMenuItem C.GtkRadioMenuItem
type PageSetup C.GtkPageSetup
type CellRendererSpin C.GtkCellRendererSpin
type VSeparator C.GtkVSeparator
type CellAreaPrivate C.GtkCellAreaPrivate
type TreeViewPrivate C.GtkTreeViewPrivate
type ToggleButtonPrivate C.GtkToggleButtonPrivate
type AccelMap C.GtkAccelMap
type RecentFilterInfo C.GtkRecentFilterInfo
type RecentChooserWidget C.GtkRecentChooserWidget
type IconInfo C.GtkIconInfo
type Clipboard C.GtkClipboard
type ProgressBarClass C.GtkProgressBarClass
type AccelLabel C.GtkAccelLabel
type FontSelectionDialogClass C.GtkFontSelectionDialogClass
type InfoBar C.GtkInfoBar
type HSeparator C.GtkHSeparator
type SettingsClass C.GtkSettingsClass
type CellEditableIface C.GtkCellEditableIface
type Alignment C.GtkAlignment
type MessageDialogClass C.GtkMessageDialogClass
type Overlay C.GtkOverlay
type TreePath C.GtkTreePath
type ActivatableIface C.GtkActivatableIface
type ScrolledWindowClass C.GtkScrolledWindowClass
type LayoutClass C.GtkLayoutClass
type HBoxClass C.GtkHBoxClass
type LayoutPrivate C.GtkLayoutPrivate
type Spinner C.GtkSpinner
type MiscClass C.GtkMiscClass
type AccelLabelPrivate C.GtkAccelLabelPrivate
type PrintOperation C.GtkPrintOperation
type TreeIter C.GtkTreeIter
type ToolPaletteClass C.GtkToolPaletteClass
type Gradient C.GtkGradient
type CellRendererComboClass C.GtkCellRendererComboClass
type FontChooserWidget C.GtkFontChooserWidget
type CellView C.GtkCellView
type FontChooserIface C.GtkFontChooserIface
type CellRendererTextClass C.GtkCellRendererTextClass
type IconSource C.GtkIconSource
type WindowPrivate C.GtkWindowPrivate
type CssProviderClass C.GtkCssProviderClass
type CellRendererAccel C.GtkCellRendererAccel
type FileChooserButtonClass C.GtkFileChooserButtonClass
type CellRendererSpinner C.GtkCellRendererSpinner
type ColorChooserDialog C.GtkColorChooserDialog
type HScrollbarClass C.GtkHScrollbarClass
type CellRendererToggle C.GtkCellRendererToggle
type Label C.GtkLabel
type VButtonBox C.GtkVButtonBox
type ButtonClass C.GtkButtonClass
type CellAreaContextPrivate C.GtkCellAreaContextPrivate
type OrientableIface C.GtkOrientableIface
type SearchEntryClass C.GtkSearchEntryClass
type CellAreaBox C.GtkCellAreaBox
type RecentInfo C.GtkRecentInfo
type ThemingEnginePrivate C.GtkThemingEnginePrivate
type CssProviderPrivate C.GtkCssProviderPrivate
type ImageClass C.GtkImageClass
type SearchEntry C.GtkSearchEntry
type MenuButton C.GtkMenuButton
type ThemingEngine C.GtkThemingEngine
type RecentAction C.GtkRecentAction
type CellRendererSpinnerClass C.GtkCellRendererSpinnerClass
type StyleClass C.GtkStyleClass
type Button C.GtkButton
type ArrowClass C.GtkArrowClass
type IconThemeClass C.GtkIconThemeClass
type AboutDialog C.GtkAboutDialog
type CellAreaClass C.GtkCellAreaClass
type MenuPrivate C.GtkMenuPrivate
type SeparatorToolItem C.GtkSeparatorToolItem
type AssistantPrivate C.GtkAssistantPrivate
type RecentChooserDialog C.GtkRecentChooserDialog
type ExpanderPrivate C.GtkExpanderPrivate
type SpinButton C.GtkSpinButton
type ScaleButton C.GtkScaleButton
type TreeViewColumn C.GtkTreeViewColumn
type RadioButton C.GtkRadioButton
type ImageMenuItemPrivate C.GtkImageMenuItemPrivate
type RecentChooserMenu C.GtkRecentChooserMenu
type CellRendererPixbuf C.GtkCellRendererPixbuf
type WidgetClass C.GtkWidgetClass
type InvisiblePrivate C.GtkInvisiblePrivate
type RadioAction C.GtkRadioAction
type RecentChooserDialogClass C.GtkRecentChooserDialogClass
type AppChooserDialogClass C.GtkAppChooserDialogClass
type SeparatorMenuItem C.GtkSeparatorMenuItem
type PrintOperationPrivate C.GtkPrintOperationPrivate
type IMContextSimpleClass C.GtkIMContextSimpleClass
type SymbolicColor C.GtkSymbolicColor
type ComboBoxTextClass C.GtkComboBoxTextClass
type TextBuffer C.GtkTextBuffer
type TextMark C.GtkTextMark
type SocketPrivate C.GtkSocketPrivate
type MenuClass C.GtkMenuClass
type ArrowPrivate C.GtkArrowPrivate
type PanedPrivate C.GtkPanedPrivate
type CellRendererProgress C.GtkCellRendererProgress
type AccelGroupClass C.GtkAccelGroupClass
type TextBTree C.GtkTextBTree
type ToolItemGroup C.GtkToolItemGroup
type WindowGroupClass C.GtkWindowGroupClass
type RadioActionEntry C.GtkRadioActionEntry
type RecentChooserWidgetClass C.GtkRecentChooserWidgetClass
type GridClass C.GtkGridClass
type PlugPrivate C.GtkPlugPrivate
type AlignmentPrivate C.GtkAlignmentPrivate
type VScrollbar C.GtkVScrollbar
type TextTagTableClass C.GtkTextTagTableClass
type CellRendererProgressPrivate C.GtkCellRendererProgressPrivate
type BindingSignal C.GtkBindingSignal
type Image C.GtkImage
type WidgetAuxInfo C.GtkWidgetAuxInfo
type TargetEntry C.GtkTargetEntry
type ButtonBoxClass C.GtkButtonBoxClass
type TableClass C.GtkTableClass
type StyleContextClass C.GtkStyleContextClass
type ScrollbarClass C.GtkScrollbarClass
type EntryPrivate C.GtkEntryPrivate
type StatusIcon C.GtkStatusIcon
type Tooltip C.GtkTooltip
type BindingArg C.GtkBindingArg
type ButtonBoxPrivate C.GtkButtonBoxPrivate
type RecentChooserDialogPrivate C.GtkRecentChooserDialogPrivate
type WindowGeometryInfo C.GtkWindowGeometryInfo
type InfoBarClass C.GtkInfoBarClass
type AspectFrame C.GtkAspectFrame
type FileChooserWidgetPrivate C.GtkFileChooserWidgetPrivate
type ColorSelectionDialog C.GtkColorSelectionDialog
type AssistantClass C.GtkAssistantClass
type ApplicationWindowClass C.GtkApplicationWindowClass
type RecentChooserMenuClass C.GtkRecentChooserMenuClass
type RecentChooserIface C.GtkRecentChooserIface
type NotebookClass C.GtkNotebookClass
type CellAreaContextClass C.GtkCellAreaContextClass
type TreeDragSourceIface C.GtkTreeDragSourceIface
type ToolItem C.GtkToolItem
type HandleBoxClass C.GtkHandleBoxClass
type ScrolledWindowPrivate C.GtkScrolledWindowPrivate
type CellRendererToggleClass C.GtkCellRendererToggleClass
type Action C.GtkAction
type Plug C.GtkPlug
type AccessibleClass C.GtkAccessibleClass
type TextViewPrivate C.GtkTextViewPrivate
type StockItem C.GtkStockItem
type MenuButtonClass C.GtkMenuButtonClass
type ColorSelectionDialogPrivate C.GtkColorSelectionDialogPrivate
type HBox C.GtkHBox
type ApplicationPrivate C.GtkApplicationPrivate
type CellAreaContext C.GtkCellAreaContext
type DrawingAreaClass C.GtkDrawingAreaClass
type EntryBufferPrivate C.GtkEntryBufferPrivate
type AppChooserDialog C.GtkAppChooserDialog
type DialogClass C.GtkDialogClass
type RequestedSize C.GtkRequestedSize
type HButtonBoxClass C.GtkHButtonBoxClass
type AspectFramePrivate C.GtkAspectFramePrivate
type StyleProperties C.GtkStyleProperties
type ActionGroupClass C.GtkActionGroupClass
type TablePrivate C.GtkTablePrivate
type BoxPrivate C.GtkBoxPrivate
type Adjustment C.GtkAdjustment
type StyleProviderIface C.GtkStyleProviderIface
type NumerableIconPrivate C.GtkNumerableIconPrivate
type Box C.GtkBox
func AboutDialogNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_about_dialog_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AboutDialog) AddCreditSection(section_name string, people unsafe.Pointer) () {
	_cgo_of_section_name_ := (*C.gchar)(unsafe.Pointer(C.CString(section_name)))
	C._gtk_about_dialog_add_credit_section((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_section_name_), unsafe.Pointer(people))
	return
}

func (_self_ *AboutDialog) GetArtists() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._gtk_about_dialog_get_artists((*C.GtkAboutDialog)(_self_)))
	return
}

func (_self_ *AboutDialog) GetAuthors() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._gtk_about_dialog_get_authors((*C.GtkAboutDialog)(_self_)))
	return
}

func (_self_ *AboutDialog) GetComments() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_comments((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetCopyright() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_copyright((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetDocumenters() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._gtk_about_dialog_get_documenters((*C.GtkAboutDialog)(_self_)))
	return
}

func (_self_ *AboutDialog) GetLicense() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_license((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetLicenseType() (_return_ C.GtkLicense) {
	_return_ = C._gtk_about_dialog_get_license_type((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogo() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_about_dialog_get_logo((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogoIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_logo_icon_name((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetProgramName() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_program_name((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetTranslatorCredits() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_translator_credits((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetVersion() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_version((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetWebsite() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_website((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetWebsiteLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_about_dialog_get_website_label((*C.GtkAboutDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AboutDialog) GetWrapLicense() (_return_ bool) {
	_cgo_of__return__ := C._gtk_about_dialog_get_wrap_license((*C.GtkAboutDialog)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AboutDialog) SetArtists(artists unsafe.Pointer) () {
	C._gtk_about_dialog_set_artists((*C.GtkAboutDialog)(_self_), unsafe.Pointer(artists))
	return
}

func (_self_ *AboutDialog) SetAuthors(authors unsafe.Pointer) () {
	C._gtk_about_dialog_set_authors((*C.GtkAboutDialog)(_self_), unsafe.Pointer(authors))
	return
}

func (_self_ *AboutDialog) SetComments(comments string) () {
	_cgo_of_comments_ := (*C.gchar)(unsafe.Pointer(C.CString(comments)))
	C._gtk_about_dialog_set_comments((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_comments_))
	return
}

func (_self_ *AboutDialog) SetCopyright(copyright string) () {
	_cgo_of_copyright_ := (*C.gchar)(unsafe.Pointer(C.CString(copyright)))
	C._gtk_about_dialog_set_copyright((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_copyright_))
	return
}

func (_self_ *AboutDialog) SetDocumenters(documenters unsafe.Pointer) () {
	C._gtk_about_dialog_set_documenters((*C.GtkAboutDialog)(_self_), unsafe.Pointer(documenters))
	return
}

func (_self_ *AboutDialog) SetLicense(license string) () {
	_cgo_of_license_ := (*C.gchar)(unsafe.Pointer(C.CString(license)))
	C._gtk_about_dialog_set_license((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_license_))
	return
}

func (_self_ *AboutDialog) SetLicenseType(license_type C.GtkLicense) () {
	C._gtk_about_dialog_set_license_type((*C.GtkAboutDialog)(_self_), (C.GtkLicense)(license_type))
	return
}

func (_self_ *AboutDialog) SetLogo(logo *C.GdkPixbuf) () {
	C._gtk_about_dialog_set_logo((*C.GtkAboutDialog)(_self_), (*C.GdkPixbuf)(logo))
	return
}

func (_self_ *AboutDialog) SetLogoIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_about_dialog_set_logo_icon_name((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *AboutDialog) SetProgramName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_about_dialog_set_program_name((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *AboutDialog) SetTranslatorCredits(translator_credits string) () {
	_cgo_of_translator_credits_ := (*C.gchar)(unsafe.Pointer(C.CString(translator_credits)))
	C._gtk_about_dialog_set_translator_credits((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_translator_credits_))
	return
}

func (_self_ *AboutDialog) SetVersion(version string) () {
	_cgo_of_version_ := (*C.gchar)(unsafe.Pointer(C.CString(version)))
	C._gtk_about_dialog_set_version((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_version_))
	return
}

func (_self_ *AboutDialog) SetWebsite(website string) () {
	_cgo_of_website_ := (*C.gchar)(unsafe.Pointer(C.CString(website)))
	C._gtk_about_dialog_set_website((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_website_))
	return
}

func (_self_ *AboutDialog) SetWebsiteLabel(website_label string) () {
	_cgo_of_website_label_ := (*C.gchar)(unsafe.Pointer(C.CString(website_label)))
	C._gtk_about_dialog_set_website_label((*C.GtkAboutDialog)(_self_), (*C.gchar)(_cgo_of_website_label_))
	return
}

func (_self_ *AboutDialog) SetWrapLicense(wrap_license bool) () {
	_cgo_of_wrap_license_ := C.glibtrue()
	if !wrap_license {
		_cgo_of_wrap_license_ = C.glibfalse()
	}
	C._gtk_about_dialog_set_wrap_license((*C.GtkAboutDialog)(_self_), (C.gboolean)(_cgo_of_wrap_license_))
	return
}

func AccelGroupNew() (_return_ *AccelGroup) {
	_cgo_of__return__ := C.gtk_accel_group_new()
	_return_ = (*AccelGroup)(_cgo_of__return__)
	return
}

func AccelGroupFromAccelClosure(closure *C.GClosure) (_return_ *AccelGroup) {
	_cgo_of__return__ := C.gtk_accel_group_from_accel_closure((*C.GClosure)(closure))
	_return_ = (*AccelGroup)(_cgo_of__return__)
	return
}

func (_self_ *AccelGroup) Activate(accel_quark C.GQuark, acceleratable *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_return_ bool) {
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	_cgo_of__return__ := C._gtk_accel_group_activate((*C.GtkAccelGroup)(_self_), (C.GQuark)(accel_quark), (*C.GObject)(acceleratable), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) Connect(accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags, closure *C.GClosure) () {
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	C._gtk_accel_group_connect((*C.GtkAccelGroup)(_self_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods), (C.GtkAccelFlags)(accel_flags), (*C.GClosure)(closure))
	return
}

func (_self_ *AccelGroup) ConnectByPath(accel_path string, closure *C.GClosure) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_accel_group_connect_by_path((*C.GtkAccelGroup)(_self_), (*C.gchar)(_cgo_of_accel_path_), (*C.GClosure)(closure))
	return
}

func (_self_ *AccelGroup) Disconnect(closure *C.GClosure) (_return_ bool) {
	_cgo_of__return__ := C._gtk_accel_group_disconnect((*C.GtkAccelGroup)(_self_), (*C.GClosure)(closure))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) DisconnectKey(accel_key uint, accel_mods C.GdkModifierType) (_return_ bool) {
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	_cgo_of__return__ := C._gtk_accel_group_disconnect_key((*C.GtkAccelGroup)(_self_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) Find(find_func C.GtkAccelGroupFindFunc, data C.gpointer) (_return_ *AccelKey) {
	_cgo_of__return__ := C._gtk_accel_group_find((*C.GtkAccelGroup)(_self_), (C.GtkAccelGroupFindFunc)(find_func), (C.gpointer)(data))
	_return_ = (*AccelKey)(_cgo_of__return__)
	return
}

func (_self_ *AccelGroup) GetIsLocked() (_return_ bool) {
	_cgo_of__return__ := C._gtk_accel_group_get_is_locked((*C.GtkAccelGroup)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AccelGroup) GetModifierMask() (_return_ C.GdkModifierType) {
	_return_ = C._gtk_accel_group_get_modifier_mask((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Lock() () {
	C._gtk_accel_group_lock((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Query(accel_key uint, accel_mods C.GdkModifierType) (_return_ *AccelGroupEntry, n_entries uint) {
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	var _cgo_of_n_entries_ C.guint
	_cgo_of__return__ := C._gtk_accel_group_query((*C.GtkAccelGroup)(_self_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods), (*C.guint)(&_cgo_of_n_entries_))
	_return_ = (*AccelGroupEntry)(_cgo_of__return__)
	n_entries = uint(_cgo_of_n_entries_)
	return
}

func (_self_ *AccelGroup) Unlock() () {
	C._gtk_accel_group_unlock((*C.GtkAccelGroup)(_self_))
	return
}

func AccelLabelNew(string_ string) (_return_ *Widget) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of__return__ := C._gtk_accel_label_new((*C.gchar)(_cgo_of_string__))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AccelLabel) GetAccelWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_accel_label_get_accel_widget((*C.GtkAccelLabel)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AccelLabel) GetAccelWidth() (_return_ uint) {
	_cgo_of__return__ := C._gtk_accel_label_get_accel_width((*C.GtkAccelLabel)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *AccelLabel) Refetch() (_return_ bool) {
	_cgo_of__return__ := C._gtk_accel_label_refetch((*C.GtkAccelLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AccelLabel) SetAccel(accelerator_key uint, accelerator_mods C.GdkModifierType) () {
	_cgo_of_accelerator_key_ := (C.guint)(accelerator_key)
	C._gtk_accel_label_set_accel((*C.GtkAccelLabel)(_self_), (C.guint)(_cgo_of_accelerator_key_), (C.GdkModifierType)(accelerator_mods))
	return
}

func (_self_ *AccelLabel) SetAccelClosure(accel_closure *C.GClosure) () {
	C._gtk_accel_label_set_accel_closure((*C.GtkAccelLabel)(_self_), (*C.GClosure)(accel_closure))
	return
}

func (_self_ *AccelLabel) SetAccelWidget(accel_widget *Widget) () {
	_cgo_of_accel_widget_ := (*C.GtkWidget)(accel_widget)
	C._gtk_accel_label_set_accel_widget((*C.GtkAccelLabel)(_self_), (*C.GtkWidget)(_cgo_of_accel_widget_))
	return
}

func AccelMapAddEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	C._gtk_accel_map_add_entry((*C.gchar)(_cgo_of_accel_path_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods))
	return
}

func AccelMapAddFilter(filter_pattern string) () {
	_cgo_of_filter_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(filter_pattern)))
	C._gtk_accel_map_add_filter((*C.gchar)(_cgo_of_filter_pattern_))
	return
}

func AccelMapChangeEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType, replace bool) (_return_ bool) {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	_cgo_of_replace_ := C.glibtrue()
	if !replace {
		_cgo_of_replace_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_accel_map_change_entry((*C.gchar)(_cgo_of_accel_path_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods), (C.gboolean)(_cgo_of_replace_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func AccelMapForeach(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach((C.gpointer)(data), (C.GtkAccelMapForeach)(foreach_func))
	return
}

func AccelMapForeachUnfiltered(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach_unfiltered((C.gpointer)(data), (C.GtkAccelMapForeach)(foreach_func))
	return
}

func AccelMapGet() (_return_ *AccelMap) {
	_cgo_of__return__ := C.gtk_accel_map_get()
	_return_ = (*AccelMap)(_cgo_of__return__)
	return
}

func AccelMapLoad(file_name string) () {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	C.gtk_accel_map_load((*C.gchar)(_cgo_of_file_name_))
	return
}

func AccelMapLoadFd(fd int) () {
	_cgo_of_fd_ := (C.gint)(fd)
	C.gtk_accel_map_load_fd((C.gint)(_cgo_of_fd_))
	return
}

func AccelMapLoadScanner(scanner *C.GScanner) () {
	C.gtk_accel_map_load_scanner((*C.GScanner)(scanner))
	return
}

func AccelMapLockPath(accel_path string) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_accel_map_lock_path((*C.gchar)(_cgo_of_accel_path_))
	return
}

func AccelMapLookupEntry(accel_path string) (_return_ bool, key *AccelKey) {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	var _allocated_key_ C.GtkAccelKey
	_cgo_of__return__ := C._gtk_accel_map_lookup_entry((*C.gchar)(_cgo_of_accel_path_), (*C.GtkAccelKey)(&_allocated_key_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	key = (*AccelKey)(&_allocated_key_)
	return
}

func AccelMapSave(file_name string) () {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	C.gtk_accel_map_save((*C.gchar)(_cgo_of_file_name_))
	return
}

func AccelMapSaveFd(fd int) () {
	_cgo_of_fd_ := (C.gint)(fd)
	C.gtk_accel_map_save_fd((C.gint)(_cgo_of_fd_))
	return
}

func AccelMapUnlockPath(accel_path string) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_accel_map_unlock_path((*C.gchar)(_cgo_of_accel_path_))
	return
}

func (_self_ *Accessible) GetWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_accessible_get_widget((*C.GtkAccessible)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Accessible) SetWidget(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_accessible_set_widget((*C.GtkAccessible)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func ActionNew(name string, label string, tooltip string, stock_id string) (_return_ *Action) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_action_new((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.gchar)(_cgo_of_tooltip_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*Action)(_cgo_of__return__)
	return
}

func (_self_ *Action) Activate() () {
	C._gtk_action_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) BlockActivate() () {
	C._gtk_action_block_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) ConnectAccelerator() () {
	C._gtk_action_connect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) CreateIcon(icon_size C.GtkIconSize) (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_action_create_icon((*C.GtkAction)(_self_), (C.GtkIconSize)(icon_size))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Action) CreateMenu() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_action_create_menu((*C.GtkAction)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Action) CreateMenuItem() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_action_create_menu_item((*C.GtkAction)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Action) CreateToolItem() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_action_create_tool_item((*C.GtkAction)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Action) DisconnectAccelerator() () {
	C._gtk_action_disconnect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelClosure() (_return_ *C.GClosure) {
	_return_ = C._gtk_action_get_accel_closure((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelPath() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_accel_path((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetAlwaysShowImage() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_always_show_image((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) GetGicon() (_return_ *C.GIcon) {
	_return_ = C._gtk_action_get_gicon((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_icon_name((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetIsImportant() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_is_important((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_label((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_name((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetProxies() (_return_ *C.GSList) {
	_return_ = C._gtk_action_get_proxies((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_sensitive((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) GetShortLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_short_label((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetStockId() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_stock_id((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetTooltip() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_get_tooltip((*C.GtkAction)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Action) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_visible((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) GetVisibleHorizontal() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_visible_horizontal((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) GetVisibleVertical() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_get_visible_vertical((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) IsSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_is_sensitive((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) IsVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_is_visible((*C.GtkAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Action) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_action_set_accel_group((*C.GtkAction)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *Action) SetAccelPath(accel_path string) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_action_set_accel_path((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_accel_path_))
	return
}

func (_self_ *Action) SetAlwaysShowImage(always_show bool) () {
	_cgo_of_always_show_ := C.glibtrue()
	if !always_show {
		_cgo_of_always_show_ = C.glibfalse()
	}
	C._gtk_action_set_always_show_image((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_always_show_))
	return
}

func (_self_ *Action) SetGicon(icon *C.GIcon) () {
	C._gtk_action_set_gicon((*C.GtkAction)(_self_), (*C.GIcon)(icon))
	return
}

func (_self_ *Action) SetIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_action_set_icon_name((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *Action) SetIsImportant(is_important bool) () {
	_cgo_of_is_important_ := C.glibtrue()
	if !is_important {
		_cgo_of_is_important_ = C.glibfalse()
	}
	C._gtk_action_set_is_important((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_is_important_))
	return
}

func (_self_ *Action) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_action_set_label((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *Action) SetSensitive(sensitive bool) () {
	_cgo_of_sensitive_ := C.glibtrue()
	if !sensitive {
		_cgo_of_sensitive_ = C.glibfalse()
	}
	C._gtk_action_set_sensitive((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_sensitive_))
	return
}

func (_self_ *Action) SetShortLabel(short_label string) () {
	_cgo_of_short_label_ := (*C.gchar)(unsafe.Pointer(C.CString(short_label)))
	C._gtk_action_set_short_label((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_short_label_))
	return
}

func (_self_ *Action) SetStockId(stock_id string) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_action_set_stock_id((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	return
}

func (_self_ *Action) SetTooltip(tooltip string) () {
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	C._gtk_action_set_tooltip((*C.GtkAction)(_self_), (*C.gchar)(_cgo_of_tooltip_))
	return
}

func (_self_ *Action) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_action_set_visible((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *Action) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_of_visible_horizontal_ := C.glibtrue()
	if !visible_horizontal {
		_cgo_of_visible_horizontal_ = C.glibfalse()
	}
	C._gtk_action_set_visible_horizontal((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_visible_horizontal_))
	return
}

func (_self_ *Action) SetVisibleVertical(visible_vertical bool) () {
	_cgo_of_visible_vertical_ := C.glibtrue()
	if !visible_vertical {
		_cgo_of_visible_vertical_ = C.glibfalse()
	}
	C._gtk_action_set_visible_vertical((*C.GtkAction)(_self_), (C.gboolean)(_cgo_of_visible_vertical_))
	return
}

func (_self_ *Action) UnblockActivate() () {
	C._gtk_action_unblock_activate((*C.GtkAction)(_self_))
	return
}

func ActionGroupNew(name string) (_return_ *ActionGroup) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_action_group_new((*C.gchar)(_cgo_of_name_))
	_return_ = (*ActionGroup)(_cgo_of__return__)
	return
}

func (_self_ *ActionGroup) AddAction(action *Action) () {
	_cgo_of_action_ := (*C.GtkAction)(action)
	C._gtk_action_group_add_action((*C.GtkActionGroup)(_self_), (*C.GtkAction)(_cgo_of_action_))
	return
}

func (_self_ *ActionGroup) AddActionWithAccel(action *Action, accelerator string) () {
	_cgo_of_action_ := (*C.GtkAction)(action)
	_cgo_of_accelerator_ := (*C.gchar)(unsafe.Pointer(C.CString(accelerator)))
	C._gtk_action_group_add_action_with_accel((*C.GtkActionGroup)(_self_), (*C.GtkAction)(_cgo_of_action_), (*C.gchar)(_cgo_of_accelerator_))
	return
}

func (_self_ *ActionGroup) AddActions(entries *ActionEntry, n_entries uint, user_data C.gpointer) () {
	_cgo_of_entries_ := (*C.GtkActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	C._gtk_action_group_add_actions((*C.GtkActionGroup)(_self_), (*C.GtkActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gpointer)(user_data))
	return
}

func (_self_ *ActionGroup) AddActionsFull(entries *ActionEntry, n_entries uint, user_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_of_entries_ := (*C.GtkActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	C._gtk_action_group_add_actions_full((*C.GtkActionGroup)(_self_), (*C.GtkActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gpointer)(user_data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *ActionGroup) AddRadioActions(entries *RadioActionEntry, n_entries uint, value int, on_change C.GCallback, user_data C.gpointer) () {
	_cgo_of_entries_ := (*C.GtkRadioActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	_cgo_of_value_ := (C.gint)(value)
	C._gtk_action_group_add_radio_actions((*C.GtkActionGroup)(_self_), (*C.GtkRadioActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gint)(_cgo_of_value_), (C.GCallback)(on_change), (C.gpointer)(user_data))
	return
}

func (_self_ *ActionGroup) AddRadioActionsFull(entries *RadioActionEntry, n_entries uint, value int, on_change C.GCallback, user_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_of_entries_ := (*C.GtkRadioActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	_cgo_of_value_ := (C.gint)(value)
	C._gtk_action_group_add_radio_actions_full((*C.GtkActionGroup)(_self_), (*C.GtkRadioActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gint)(_cgo_of_value_), (C.GCallback)(on_change), (C.gpointer)(user_data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *ActionGroup) AddToggleActions(entries *ToggleActionEntry, n_entries uint, user_data C.gpointer) () {
	_cgo_of_entries_ := (*C.GtkToggleActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	C._gtk_action_group_add_toggle_actions((*C.GtkActionGroup)(_self_), (*C.GtkToggleActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gpointer)(user_data))
	return
}

func (_self_ *ActionGroup) AddToggleActionsFull(entries *ToggleActionEntry, n_entries uint, user_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_of_entries_ := (*C.GtkToggleActionEntry)(entries)
	_cgo_of_n_entries_ := (C.guint)(n_entries)
	C._gtk_action_group_add_toggle_actions_full((*C.GtkActionGroup)(_self_), (*C.GtkToggleActionEntry)(_cgo_of_entries_), (C.guint)(_cgo_of_n_entries_), (C.gpointer)(user_data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *ActionGroup) GetAccelGroup() (_return_ *AccelGroup) {
	_cgo_of__return__ := C._gtk_action_group_get_accel_group((*C.GtkActionGroup)(_self_))
	_return_ = (*AccelGroup)(_cgo_of__return__)
	return
}

func (_self_ *ActionGroup) GetAction(action_name string) (_return_ *Action) {
	_cgo_of_action_name_ := (*C.gchar)(unsafe.Pointer(C.CString(action_name)))
	_cgo_of__return__ := C._gtk_action_group_get_action((*C.GtkActionGroup)(_self_), (*C.gchar)(_cgo_of_action_name_))
	_return_ = (*Action)(_cgo_of__return__)
	return
}

func (_self_ *ActionGroup) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_action_group_get_name((*C.GtkActionGroup)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ActionGroup) GetSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_group_get_sensitive((*C.GtkActionGroup)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ActionGroup) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_action_group_get_visible((*C.GtkActionGroup)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ActionGroup) ListActions() (_return_ *C.GList) {
	_return_ = C._gtk_action_group_list_actions((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) RemoveAction(action *Action) () {
	_cgo_of_action_ := (*C.GtkAction)(action)
	C._gtk_action_group_remove_action((*C.GtkActionGroup)(_self_), (*C.GtkAction)(_cgo_of_action_))
	return
}

func (_self_ *ActionGroup) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_action_group_set_accel_group((*C.GtkActionGroup)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *ActionGroup) SetSensitive(sensitive bool) () {
	_cgo_of_sensitive_ := C.glibtrue()
	if !sensitive {
		_cgo_of_sensitive_ = C.glibfalse()
	}
	C._gtk_action_group_set_sensitive((*C.GtkActionGroup)(_self_), (C.gboolean)(_cgo_of_sensitive_))
	return
}

func (_self_ *ActionGroup) SetTranslateFunc(func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C._gtk_action_group_set_translate_func((*C.GtkActionGroup)(_self_), (C.GtkTranslateFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	return
}

func (_self_ *ActionGroup) SetTranslationDomain(domain string) () {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	C._gtk_action_group_set_translation_domain((*C.GtkActionGroup)(_self_), (*C.gchar)(_cgo_of_domain_))
	return
}

func (_self_ *ActionGroup) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_action_group_set_visible((*C.GtkActionGroup)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *ActionGroup) TranslateString(string_ string) (_return_ string) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	_cgo_of__return__ := C._gtk_action_group_translate_string((*C.GtkActionGroup)(_self_), (*C.gchar)(_cgo_of_string__))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func AdjustmentNew(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) (_return_ *Adjustment) {
	_cgo_of_value_ := (C.gdouble)(value)
	_cgo_of_lower_ := (C.gdouble)(lower)
	_cgo_of_upper_ := (C.gdouble)(upper)
	_cgo_of_step_increment_ := (C.gdouble)(step_increment)
	_cgo_of_page_increment_ := (C.gdouble)(page_increment)
	_cgo_of_page_size_ := (C.gdouble)(page_size)
	_cgo_of__return__ := C.gtk_adjustment_new((C.gdouble)(_cgo_of_value_), (C.gdouble)(_cgo_of_lower_), (C.gdouble)(_cgo_of_upper_), (C.gdouble)(_cgo_of_step_increment_), (C.gdouble)(_cgo_of_page_increment_), (C.gdouble)(_cgo_of_page_size_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) Changed() () {
	C._gtk_adjustment_changed((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) ClampPage(lower float64, upper float64) () {
	_cgo_of_lower_ := (C.gdouble)(lower)
	_cgo_of_upper_ := (C.gdouble)(upper)
	C._gtk_adjustment_clamp_page((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_lower_), (C.gdouble)(_cgo_of_upper_))
	return
}

func (_self_ *Adjustment) Configure(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	_cgo_of_lower_ := (C.gdouble)(lower)
	_cgo_of_upper_ := (C.gdouble)(upper)
	_cgo_of_step_increment_ := (C.gdouble)(step_increment)
	_cgo_of_page_increment_ := (C.gdouble)(page_increment)
	_cgo_of_page_size_ := (C.gdouble)(page_size)
	C._gtk_adjustment_configure((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_value_), (C.gdouble)(_cgo_of_lower_), (C.gdouble)(_cgo_of_upper_), (C.gdouble)(_cgo_of_step_increment_), (C.gdouble)(_cgo_of_page_increment_), (C.gdouble)(_cgo_of_page_size_))
	return
}

func (_self_ *Adjustment) GetLower() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_lower((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetMinimumIncrement() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_minimum_increment((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetPageIncrement() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_page_increment((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetPageSize() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_page_size((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetStepIncrement() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_step_increment((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetUpper() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_upper((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) GetValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_adjustment_get_value((*C.GtkAdjustment)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Adjustment) SetLower(lower float64) () {
	_cgo_of_lower_ := (C.gdouble)(lower)
	C._gtk_adjustment_set_lower((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_lower_))
	return
}

func (_self_ *Adjustment) SetPageIncrement(page_increment float64) () {
	_cgo_of_page_increment_ := (C.gdouble)(page_increment)
	C._gtk_adjustment_set_page_increment((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_page_increment_))
	return
}

func (_self_ *Adjustment) SetPageSize(page_size float64) () {
	_cgo_of_page_size_ := (C.gdouble)(page_size)
	C._gtk_adjustment_set_page_size((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_page_size_))
	return
}

func (_self_ *Adjustment) SetStepIncrement(step_increment float64) () {
	_cgo_of_step_increment_ := (C.gdouble)(step_increment)
	C._gtk_adjustment_set_step_increment((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_step_increment_))
	return
}

func (_self_ *Adjustment) SetUpper(upper float64) () {
	_cgo_of_upper_ := (C.gdouble)(upper)
	C._gtk_adjustment_set_upper((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_upper_))
	return
}

func (_self_ *Adjustment) SetValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_adjustment_set_value((*C.GtkAdjustment)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *Adjustment) ValueChanged() () {
	C._gtk_adjustment_value_changed((*C.GtkAdjustment)(_self_))
	return
}

func AlignmentNew(xalign float64, yalign float64, xscale float64, yscale float64) (_return_ *Widget) {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	_cgo_of_xscale_ := (C.gfloat)(xscale)
	_cgo_of_yscale_ := (C.gfloat)(yscale)
	_cgo_of__return__ := C.gtk_alignment_new((C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_), (C.gfloat)(_cgo_of_xscale_), (C.gfloat)(_cgo_of_yscale_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Alignment) GetPadding() (padding_top uint, padding_bottom uint, padding_left uint, padding_right uint) {
	var _cgo_of_padding_top_ C.guint
	var _cgo_of_padding_bottom_ C.guint
	var _cgo_of_padding_left_ C.guint
	var _cgo_of_padding_right_ C.guint
	C._gtk_alignment_get_padding((*C.GtkAlignment)(_self_), (*C.guint)(&_cgo_of_padding_top_), (*C.guint)(&_cgo_of_padding_bottom_), (*C.guint)(&_cgo_of_padding_left_), (*C.guint)(&_cgo_of_padding_right_))
	padding_top = uint(_cgo_of_padding_top_)
	padding_bottom = uint(_cgo_of_padding_bottom_)
	padding_left = uint(_cgo_of_padding_left_)
	padding_right = uint(_cgo_of_padding_right_)
	return
}

func (_self_ *Alignment) Set(xalign float64, yalign float64, xscale float64, yscale float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	_cgo_of_xscale_ := (C.gfloat)(xscale)
	_cgo_of_yscale_ := (C.gfloat)(yscale)
	C._gtk_alignment_set((*C.GtkAlignment)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_), (C.gfloat)(_cgo_of_xscale_), (C.gfloat)(_cgo_of_yscale_))
	return
}

func (_self_ *Alignment) SetPadding(padding_top uint, padding_bottom uint, padding_left uint, padding_right uint) () {
	_cgo_of_padding_top_ := (C.guint)(padding_top)
	_cgo_of_padding_bottom_ := (C.guint)(padding_bottom)
	_cgo_of_padding_left_ := (C.guint)(padding_left)
	_cgo_of_padding_right_ := (C.guint)(padding_right)
	C._gtk_alignment_set_padding((*C.GtkAlignment)(_self_), (C.guint)(_cgo_of_padding_top_), (C.guint)(_cgo_of_padding_bottom_), (C.guint)(_cgo_of_padding_left_), (C.guint)(_cgo_of_padding_right_))
	return
}

func AppChooserButtonNew(content_type string) (_return_ *Widget) {
	_cgo_of_content_type_ := (*C.gchar)(unsafe.Pointer(C.CString(content_type)))
	_cgo_of__return__ := C._gtk_app_chooser_button_new((*C.gchar)(_cgo_of_content_type_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AppChooserButton) AppendCustomItem(name string, label string, icon *C.GIcon) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_app_chooser_button_append_custom_item((*C.GtkAppChooserButton)(_self_), (*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.GIcon)(icon))
	return
}

func (_self_ *AppChooserButton) AppendSeparator() () {
	C._gtk_app_chooser_button_append_separator((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) GetHeading() (_return_ string) {
	_cgo_of__return__ := C._gtk_app_chooser_button_get_heading((*C.GtkAppChooserButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AppChooserButton) GetShowDefaultItem() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_button_get_show_default_item((*C.GtkAppChooserButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserButton) GetShowDialogItem() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_button_get_show_dialog_item((*C.GtkAppChooserButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserButton) SetActiveCustomItem(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_app_chooser_button_set_active_custom_item((*C.GtkAppChooserButton)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *AppChooserButton) SetHeading(heading string) () {
	_cgo_of_heading_ := (*C.gchar)(unsafe.Pointer(C.CString(heading)))
	C._gtk_app_chooser_button_set_heading((*C.GtkAppChooserButton)(_self_), (*C.gchar)(_cgo_of_heading_))
	return
}

func (_self_ *AppChooserButton) SetShowDefaultItem(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_button_set_show_default_item((*C.GtkAppChooserButton)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *AppChooserButton) SetShowDialogItem(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_button_set_show_dialog_item((*C.GtkAppChooserButton)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func AppChooserDialogNew(parent *Window, flags C.GtkDialogFlags, file *C.GFile) (_return_ *Widget) {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of__return__ := C.gtk_app_chooser_dialog_new((*C.GtkWindow)(_cgo_of_parent_), (C.GtkDialogFlags)(flags), (*C.GFile)(file))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func AppChooserDialogNewForContentType(parent *Window, flags C.GtkDialogFlags, content_type string) (_return_ *Widget) {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of_content_type_ := (*C.gchar)(unsafe.Pointer(C.CString(content_type)))
	_cgo_of__return__ := C._gtk_app_chooser_dialog_new_for_content_type((*C.GtkWindow)(_cgo_of_parent_), (C.GtkDialogFlags)(flags), (*C.gchar)(_cgo_of_content_type_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AppChooserDialog) GetHeading() (_return_ string) {
	_cgo_of__return__ := C._gtk_app_chooser_dialog_get_heading((*C.GtkAppChooserDialog)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AppChooserDialog) GetWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_app_chooser_dialog_get_widget((*C.GtkAppChooserDialog)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AppChooserDialog) SetHeading(heading string) () {
	_cgo_of_heading_ := (*C.gchar)(unsafe.Pointer(C.CString(heading)))
	C._gtk_app_chooser_dialog_set_heading((*C.GtkAppChooserDialog)(_self_), (*C.gchar)(_cgo_of_heading_))
	return
}

func AppChooserWidgetNew(content_type string) (_return_ *Widget) {
	_cgo_of_content_type_ := (*C.gchar)(unsafe.Pointer(C.CString(content_type)))
	_cgo_of__return__ := C._gtk_app_chooser_widget_new((*C.gchar)(_cgo_of_content_type_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AppChooserWidget) GetDefaultText() (_return_ string) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_default_text((*C.GtkAppChooserWidget)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *AppChooserWidget) GetShowAll() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_show_all((*C.GtkAppChooserWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_show_default((*C.GtkAppChooserWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowFallback() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_show_fallback((*C.GtkAppChooserWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowOther() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_show_other((*C.GtkAppChooserWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) GetShowRecommended() (_return_ bool) {
	_cgo_of__return__ := C._gtk_app_chooser_widget_get_show_recommended((*C.GtkAppChooserWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *AppChooserWidget) SetDefaultText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_app_chooser_widget_set_default_text((*C.GtkAppChooserWidget)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *AppChooserWidget) SetShowAll(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_widget_set_show_all((*C.GtkAppChooserWidget)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *AppChooserWidget) SetShowDefault(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_widget_set_show_default((*C.GtkAppChooserWidget)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *AppChooserWidget) SetShowFallback(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_widget_set_show_fallback((*C.GtkAppChooserWidget)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *AppChooserWidget) SetShowOther(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_widget_set_show_other((*C.GtkAppChooserWidget)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *AppChooserWidget) SetShowRecommended(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_app_chooser_widget_set_show_recommended((*C.GtkAppChooserWidget)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func ApplicationNew(application_id string, flags C.GApplicationFlags) (_return_ *Application) {
	_cgo_of_application_id_ := (*C.gchar)(unsafe.Pointer(C.CString(application_id)))
	_cgo_of__return__ := C._gtk_application_new((*C.gchar)(_cgo_of_application_id_), (C.GApplicationFlags)(flags))
	_return_ = (*Application)(_cgo_of__return__)
	return
}

func (_self_ *Application) AddAccelerator(accelerator string, action_name string, parameter *C.GVariant) () {
	_cgo_of_accelerator_ := (*C.gchar)(unsafe.Pointer(C.CString(accelerator)))
	_cgo_of_action_name_ := (*C.gchar)(unsafe.Pointer(C.CString(action_name)))
	C._gtk_application_add_accelerator((*C.GtkApplication)(_self_), (*C.gchar)(_cgo_of_accelerator_), (*C.gchar)(_cgo_of_action_name_), (*C.GVariant)(parameter))
	return
}

func (_self_ *Application) AddWindow(window *Window) () {
	_cgo_of_window_ := (*C.GtkWindow)(window)
	C._gtk_application_add_window((*C.GtkApplication)(_self_), (*C.GtkWindow)(_cgo_of_window_))
	return
}

func (_self_ *Application) GetActiveWindow() (_return_ *Window) {
	_cgo_of__return__ := C._gtk_application_get_active_window((*C.GtkApplication)(_self_))
	_return_ = (*Window)(_cgo_of__return__)
	return
}

func (_self_ *Application) GetAppMenu() (_return_ *C.GMenuModel) {
	_return_ = C._gtk_application_get_app_menu((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetMenubar() (_return_ *C.GMenuModel) {
	_return_ = C._gtk_application_get_menubar((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetWindowById(id uint) (_return_ *Window) {
	_cgo_of_id_ := (C.guint)(id)
	_cgo_of__return__ := C._gtk_application_get_window_by_id((*C.GtkApplication)(_self_), (C.guint)(_cgo_of_id_))
	_return_ = (*Window)(_cgo_of__return__)
	return
}

func (_self_ *Application) GetWindows() (_return_ *C.GList) {
	_return_ = C._gtk_application_get_windows((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) Inhibit(window *Window, flags C.GtkApplicationInhibitFlags, reason string) (_return_ uint) {
	_cgo_of_window_ := (*C.GtkWindow)(window)
	_cgo_of_reason_ := (*C.gchar)(unsafe.Pointer(C.CString(reason)))
	_cgo_of__return__ := C._gtk_application_inhibit((*C.GtkApplication)(_self_), (*C.GtkWindow)(_cgo_of_window_), (C.GtkApplicationInhibitFlags)(flags), (*C.gchar)(_cgo_of_reason_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Application) IsInhibited(flags C.GtkApplicationInhibitFlags) (_return_ bool) {
	_cgo_of__return__ := C._gtk_application_is_inhibited((*C.GtkApplication)(_self_), (C.GtkApplicationInhibitFlags)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Application) RemoveAccelerator(action_name string, parameter *C.GVariant) () {
	_cgo_of_action_name_ := (*C.gchar)(unsafe.Pointer(C.CString(action_name)))
	C._gtk_application_remove_accelerator((*C.GtkApplication)(_self_), (*C.gchar)(_cgo_of_action_name_), (*C.GVariant)(parameter))
	return
}

func (_self_ *Application) RemoveWindow(window *Window) () {
	_cgo_of_window_ := (*C.GtkWindow)(window)
	C._gtk_application_remove_window((*C.GtkApplication)(_self_), (*C.GtkWindow)(_cgo_of_window_))
	return
}

func (_self_ *Application) SetAppMenu(app_menu *C.GMenuModel) () {
	C._gtk_application_set_app_menu((*C.GtkApplication)(_self_), (*C.GMenuModel)(app_menu))
	return
}

func (_self_ *Application) SetMenubar(menubar *C.GMenuModel) () {
	C._gtk_application_set_menubar((*C.GtkApplication)(_self_), (*C.GMenuModel)(menubar))
	return
}

func (_self_ *Application) Uninhibit(cookie uint) () {
	_cgo_of_cookie_ := (C.guint)(cookie)
	C._gtk_application_uninhibit((*C.GtkApplication)(_self_), (C.guint)(_cgo_of_cookie_))
	return
}

func ApplicationWindowNew(application *Application) (_return_ *Widget) {
	_cgo_of_application_ := (*C.GtkApplication)(application)
	_cgo_of__return__ := C.gtk_application_window_new((*C.GtkApplication)(_cgo_of_application_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ApplicationWindow) GetId() (_return_ uint) {
	_cgo_of__return__ := C._gtk_application_window_get_id((*C.GtkApplicationWindow)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *ApplicationWindow) GetShowMenubar() (_return_ bool) {
	_cgo_of__return__ := C._gtk_application_window_get_show_menubar((*C.GtkApplicationWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ApplicationWindow) SetShowMenubar(show_menubar bool) () {
	_cgo_of_show_menubar_ := C.glibtrue()
	if !show_menubar {
		_cgo_of_show_menubar_ = C.glibfalse()
	}
	C._gtk_application_window_set_show_menubar((*C.GtkApplicationWindow)(_self_), (C.gboolean)(_cgo_of_show_menubar_))
	return
}

func ArrowNew(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_arrow_new((C.GtkArrowType)(arrow_type), (C.GtkShadowType)(shadow_type))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Arrow) Set(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) () {
	C._gtk_arrow_set((*C.GtkArrow)(_self_), (C.GtkArrowType)(arrow_type), (C.GtkShadowType)(shadow_type))
	return
}

func AspectFrameNew(label string, xalign float64, yalign float64, ratio float64, obey_child bool) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	_cgo_of_ratio_ := (C.gfloat)(ratio)
	_cgo_of_obey_child_ := C.glibtrue()
	if !obey_child {
		_cgo_of_obey_child_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_aspect_frame_new((*C.gchar)(_cgo_of_label_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_), (C.gfloat)(_cgo_of_ratio_), (C.gboolean)(_cgo_of_obey_child_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *AspectFrame) Set(xalign float64, yalign float64, ratio float64, obey_child bool) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	_cgo_of_ratio_ := (C.gfloat)(ratio)
	_cgo_of_obey_child_ := C.glibtrue()
	if !obey_child {
		_cgo_of_obey_child_ = C.glibfalse()
	}
	C._gtk_aspect_frame_set((*C.GtkAspectFrame)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_), (C.gfloat)(_cgo_of_ratio_), (C.gboolean)(_cgo_of_obey_child_))
	return
}

func AssistantNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_assistant_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Assistant) AddActionWidget(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_assistant_add_action_widget((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *Assistant) AppendPage(page *Widget) (_return_ int) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of__return__ := C._gtk_assistant_append_page((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Assistant) Commit() () {
	C._gtk_assistant_commit((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) GetCurrentPage() (_return_ int) {
	_cgo_of__return__ := C._gtk_assistant_get_current_page((*C.GtkAssistant)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Assistant) GetNPages() (_return_ int) {
	_cgo_of__return__ := C._gtk_assistant_get_n_pages((*C.GtkAssistant)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Assistant) GetNthPage(page_num int) (_return_ *Widget) {
	_cgo_of_page_num_ := (C.gint)(page_num)
	_cgo_of__return__ := C._gtk_assistant_get_nth_page((*C.GtkAssistant)(_self_), (C.gint)(_cgo_of_page_num_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Assistant) GetPageComplete(page *Widget) (_return_ bool) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of__return__ := C._gtk_assistant_get_page_complete((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Assistant) GetPageTitle(page *Widget) (_return_ string) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of__return__ := C._gtk_assistant_get_page_title((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Assistant) GetPageType(page *Widget) (_return_ C.GtkAssistantPageType) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_return_ = C._gtk_assistant_get_page_type((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_))
	return
}

func (_self_ *Assistant) InsertPage(page *Widget, position int) (_return_ int) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of__return__ := C._gtk_assistant_insert_page((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_), (C.gint)(_cgo_of_position_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Assistant) NextPage() () {
	C._gtk_assistant_next_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) PrependPage(page *Widget) (_return_ int) {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of__return__ := C._gtk_assistant_prepend_page((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Assistant) PreviousPage() () {
	C._gtk_assistant_previous_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) RemoveActionWidget(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_assistant_remove_action_widget((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *Assistant) RemovePage(page_num int) () {
	_cgo_of_page_num_ := (C.gint)(page_num)
	C._gtk_assistant_remove_page((*C.GtkAssistant)(_self_), (C.gint)(_cgo_of_page_num_))
	return
}

func (_self_ *Assistant) SetCurrentPage(page_num int) () {
	_cgo_of_page_num_ := (C.gint)(page_num)
	C._gtk_assistant_set_current_page((*C.GtkAssistant)(_self_), (C.gint)(_cgo_of_page_num_))
	return
}

func (_self_ *Assistant) SetForwardPageFunc(page_func C.GtkAssistantPageFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_assistant_set_forward_page_func((*C.GtkAssistant)(_self_), (C.GtkAssistantPageFunc)(page_func), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *Assistant) SetPageComplete(page *Widget, complete bool) () {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of_complete_ := C.glibtrue()
	if !complete {
		_cgo_of_complete_ = C.glibfalse()
	}
	C._gtk_assistant_set_page_complete((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_), (C.gboolean)(_cgo_of_complete_))
	return
}

func (_self_ *Assistant) SetPageTitle(page *Widget, title string) () {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_assistant_set_page_title((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *Assistant) SetPageType(page *Widget, type_ C.GtkAssistantPageType) () {
	_cgo_of_page_ := (*C.GtkWidget)(page)
	C._gtk_assistant_set_page_type((*C.GtkAssistant)(_self_), (*C.GtkWidget)(_cgo_of_page_), (C.GtkAssistantPageType)(type_))
	return
}

func (_self_ *Assistant) UpdateButtonsState() () {
	C._gtk_assistant_update_buttons_state((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Bin) GetChild() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_bin_get_child((*C.GtkBin)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func BindingEntryAddSignalFromString(binding_set *BindingSet, signal_desc string) (_return_ C.GTokenType) {
	_cgo_of_binding_set_ := (*C.GtkBindingSet)(binding_set)
	_cgo_of_signal_desc_ := (*C.gchar)(unsafe.Pointer(C.CString(signal_desc)))
	_return_ = C._gtk_binding_entry_add_signal_from_string((*C.GtkBindingSet)(_cgo_of_binding_set_), (*C.gchar)(_cgo_of_signal_desc_))
	return
}

func BindingEntryAddSignall(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType, signal_name string, binding_args *C.GSList) () {
	_cgo_of_binding_set_ := (*C.GtkBindingSet)(binding_set)
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of_signal_name_ := (*C.gchar)(unsafe.Pointer(C.CString(signal_name)))
	C._gtk_binding_entry_add_signall((*C.GtkBindingSet)(_cgo_of_binding_set_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers), (*C.gchar)(_cgo_of_signal_name_), (*C.GSList)(binding_args))
	return
}

func BindingEntryRemove(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_of_binding_set_ := (*C.GtkBindingSet)(binding_set)
	_cgo_of_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_remove((*C.GtkBindingSet)(_cgo_of_binding_set_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers))
	return
}

func BindingEntrySkip(binding_set *BindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_of_binding_set_ := (*C.GtkBindingSet)(binding_set)
	_cgo_of_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_skip((*C.GtkBindingSet)(_cgo_of_binding_set_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers))
	return
}

func BindingSetByClass(object_class C.gpointer) (_return_ *BindingSet) {
	_cgo_of__return__ := C.gtk_binding_set_by_class((C.gpointer)(object_class))
	_return_ = (*BindingSet)(_cgo_of__return__)
	return
}

func BindingSetFind(set_name string) (_return_ *BindingSet) {
	_cgo_of_set_name_ := (*C.gchar)(unsafe.Pointer(C.CString(set_name)))
	_cgo_of__return__ := C._gtk_binding_set_find((*C.gchar)(_cgo_of_set_name_))
	_return_ = (*BindingSet)(_cgo_of__return__)
	return
}

func BindingSetNew(set_name string) (_return_ *BindingSet) {
	_cgo_of_set_name_ := (*C.gchar)(unsafe.Pointer(C.CString(set_name)))
	_cgo_of__return__ := C._gtk_binding_set_new((*C.gchar)(_cgo_of_set_name_))
	_return_ = (*BindingSet)(_cgo_of__return__)
	return
}

func (_self_ *BindingSet) Activate(keyval uint, modifiers C.GdkModifierType, object *C.GObject) (_return_ bool) {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of__return__ := C._gtk_binding_set_activate((*C.GtkBindingSet)(_self_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers), (*C.GObject)(object))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func BorderNew() (_return_ *Border) {
	_cgo_of__return__ := C.gtk_border_new()
	_return_ = (*Border)(_cgo_of__return__)
	return
}

func (_self_ *Border) Copy() (_return_ *Border) {
	_cgo_of__return__ := C._gtk_border_copy((*C.GtkBorder)(_self_))
	_return_ = (*Border)(_cgo_of__return__)
	return
}

func (_self_ *Border) Free() () {
	C._gtk_border_free((*C.GtkBorder)(_self_))
	return
}

func BoxNew(orientation C.GtkOrientation, spacing int) (_return_ *Widget) {
	_cgo_of_spacing_ := (C.gint)(spacing)
	_cgo_of__return__ := C.gtk_box_new((C.GtkOrientation)(orientation), (C.gint)(_cgo_of_spacing_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Box) GetHomogeneous() (_return_ bool) {
	_cgo_of__return__ := C._gtk_box_get_homogeneous((*C.GtkBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Box) GetSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_box_get_spacing((*C.GtkBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Box) PackEnd(child *Widget, expand bool, fill bool, padding uint) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	_cgo_of_fill_ := C.glibtrue()
	if !fill {
		_cgo_of_fill_ = C.glibfalse()
	}
	_cgo_of_padding_ := (C.guint)(padding)
	C._gtk_box_pack_end((*C.GtkBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_expand_), (C.gboolean)(_cgo_of_fill_), (C.guint)(_cgo_of_padding_))
	return
}

func (_self_ *Box) PackStart(child *Widget, expand bool, fill bool, padding uint) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	_cgo_of_fill_ := C.glibtrue()
	if !fill {
		_cgo_of_fill_ = C.glibfalse()
	}
	_cgo_of_padding_ := (C.guint)(padding)
	C._gtk_box_pack_start((*C.GtkBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_expand_), (C.gboolean)(_cgo_of_fill_), (C.guint)(_cgo_of_padding_))
	return
}

func (_self_ *Box) QueryChildPacking(child *Widget) (expand bool, fill bool, padding uint, pack_type *C.GtkPackType) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	var _cgo_of_expand_ C.gboolean
	var _cgo_of_fill_ C.gboolean
	var _cgo_of_padding_ C.guint
	C._gtk_box_query_child_packing((*C.GtkBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gboolean)(&_cgo_of_expand_), (*C.gboolean)(&_cgo_of_fill_), (*C.guint)(&_cgo_of_padding_), (*C.GtkPackType)(pack_type))
	expand = _cgo_of_expand_ == C.glibtrue()
	fill = _cgo_of_fill_ == C.glibtrue()
	padding = uint(_cgo_of_padding_)
	return
}

func (_self_ *Box) ReorderChild(child *Widget, position int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_box_reorder_child((*C.GtkBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *Box) SetChildPacking(child *Widget, expand bool, fill bool, padding uint, pack_type C.GtkPackType) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	_cgo_of_fill_ := C.glibtrue()
	if !fill {
		_cgo_of_fill_ = C.glibfalse()
	}
	_cgo_of_padding_ := (C.guint)(padding)
	C._gtk_box_set_child_packing((*C.GtkBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_expand_), (C.gboolean)(_cgo_of_fill_), (C.guint)(_cgo_of_padding_), (C.GtkPackType)(pack_type))
	return
}

func (_self_ *Box) SetHomogeneous(homogeneous bool) () {
	_cgo_of_homogeneous_ := C.glibtrue()
	if !homogeneous {
		_cgo_of_homogeneous_ = C.glibfalse()
	}
	C._gtk_box_set_homogeneous((*C.GtkBox)(_self_), (C.gboolean)(_cgo_of_homogeneous_))
	return
}

func (_self_ *Box) SetSpacing(spacing int) () {
	_cgo_of_spacing_ := (C.gint)(spacing)
	C._gtk_box_set_spacing((*C.GtkBox)(_self_), (C.gint)(_cgo_of_spacing_))
	return
}

func BuilderNew() (_return_ *Builder) {
	_cgo_of__return__ := C.gtk_builder_new()
	_return_ = (*Builder)(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddFromFile(filename string) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C._gtk_builder_add_from_file((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddFromResource(resource_path string) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_resource_path_ := (*C.gchar)(unsafe.Pointer(C.CString(resource_path)))
	_cgo_of__return__ := C._gtk_builder_add_from_resource((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_resource_path_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddFromString(buffer string, length uint64) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_buffer_ := (*C.gchar)(unsafe.Pointer(C.CString(buffer)))
	_cgo_of_length_ := (C.gsize)(length)
	_cgo_of__return__ := C._gtk_builder_add_from_string((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_buffer_), (C.gsize)(_cgo_of_length_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddObjectsFromFile(filename string, object_ids unsafe.Pointer) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C._gtk_builder_add_objects_from_file((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(object_ids), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddObjectsFromResource(resource_path string, object_ids unsafe.Pointer) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_resource_path_ := (*C.gchar)(unsafe.Pointer(C.CString(resource_path)))
	_cgo_of__return__ := C._gtk_builder_add_objects_from_resource((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_resource_path_), unsafe.Pointer(object_ids), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) AddObjectsFromString(buffer string, length uint64, object_ids unsafe.Pointer) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_buffer_ := (*C.gchar)(unsafe.Pointer(C.CString(buffer)))
	_cgo_of_length_ := (C.gsize)(length)
	_cgo_of__return__ := C._gtk_builder_add_objects_from_string((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_buffer_), (C.gsize)(_cgo_of_length_), unsafe.Pointer(object_ids), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Builder) ConnectSignals(user_data C.gpointer) () {
	C._gtk_builder_connect_signals((*C.GtkBuilder)(_self_), (C.gpointer)(user_data))
	return
}

func (_self_ *Builder) ConnectSignalsFull(func_ C.GtkBuilderConnectFunc, user_data C.gpointer) () {
	C._gtk_builder_connect_signals_full((*C.GtkBuilder)(_self_), (C.GtkBuilderConnectFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *Builder) GetObject(name string) (_return_ *C.GObject) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_return_ = C._gtk_builder_get_object((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *Builder) GetObjects() (_return_ *C.GSList) {
	_return_ = C._gtk_builder_get_objects((*C.GtkBuilder)(_self_))
	return
}

func (_self_ *Builder) GetTranslationDomain() (_return_ string) {
	_cgo_of__return__ := C._gtk_builder_get_translation_domain((*C.GtkBuilder)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Builder) GetTypeFromName(type_name *C.char) (_return_ C.GType) {
	_return_ = C._gtk_builder_get_type_from_name((*C.GtkBuilder)(_self_), (*C.char)(type_name))
	return
}

func (_self_ *Builder) SetTranslationDomain(domain string) () {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	C._gtk_builder_set_translation_domain((*C.GtkBuilder)(_self_), (*C.gchar)(_cgo_of_domain_))
	return
}

func (_self_ *Builder) ValueFromString(pspec *C.GParamSpec, string_ string) (_return_ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	var _allocated_value_ C.GValue
	_cgo_of__return__ := C._gtk_builder_value_from_string((*C.GtkBuilder)(_self_), (*C.GParamSpec)(pspec), (*C.gchar)(_cgo_of_string__), (*C.GValue)(&_allocated_value_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	value = (*C.GValue)(&_allocated_value_)
	return
}

func (_self_ *Builder) ValueFromStringType(type_ C.GType, string_ string) (_return_ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	var _allocated_value_ C.GValue
	_cgo_of__return__ := C._gtk_builder_value_from_string_type((*C.GtkBuilder)(_self_), (C.GType)(type_), (*C.gchar)(_cgo_of_string__), (*C.GValue)(&_allocated_value_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	value = (*C.GValue)(&_allocated_value_)
	return
}

func ButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ButtonNewFromStock(stock_id string) (_return_ *Widget) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_button_new_from_stock((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ButtonNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_button_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ButtonNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_button_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Button) Clicked() () {
	C._gtk_button_clicked((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetAlignment() (xalign float64, yalign float64) {
	var _cgo_of_xalign_ C.gfloat
	var _cgo_of_yalign_ C.gfloat
	C._gtk_button_get_alignment((*C.GtkButton)(_self_), (*C.gfloat)(&_cgo_of_xalign_), (*C.gfloat)(&_cgo_of_yalign_))
	xalign = float64(_cgo_of_xalign_)
	yalign = float64(_cgo_of_yalign_)
	return
}

func (_self_ *Button) GetAlwaysShowImage() (_return_ bool) {
	_cgo_of__return__ := C._gtk_button_get_always_show_image((*C.GtkButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Button) GetEventWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_button_get_event_window((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetFocusOnClick() (_return_ bool) {
	_cgo_of__return__ := C._gtk_button_get_focus_on_click((*C.GtkButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Button) GetImage() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_button_get_image((*C.GtkButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Button) GetImagePosition() (_return_ C.GtkPositionType) {
	_return_ = C._gtk_button_get_image_position((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_button_get_label((*C.GtkButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Button) GetRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C._gtk_button_get_relief((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetUseStock() (_return_ bool) {
	_cgo_of__return__ := C._gtk_button_get_use_stock((*C.GtkButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Button) GetUseUnderline() (_return_ bool) {
	_cgo_of__return__ := C._gtk_button_get_use_underline((*C.GtkButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Button) SetAlignment(xalign float64, yalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	C._gtk_button_set_alignment((*C.GtkButton)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_))
	return
}

func (_self_ *Button) SetAlwaysShowImage(always_show bool) () {
	_cgo_of_always_show_ := C.glibtrue()
	if !always_show {
		_cgo_of_always_show_ = C.glibfalse()
	}
	C._gtk_button_set_always_show_image((*C.GtkButton)(_self_), (C.gboolean)(_cgo_of_always_show_))
	return
}

func (_self_ *Button) SetFocusOnClick(focus_on_click bool) () {
	_cgo_of_focus_on_click_ := C.glibtrue()
	if !focus_on_click {
		_cgo_of_focus_on_click_ = C.glibfalse()
	}
	C._gtk_button_set_focus_on_click((*C.GtkButton)(_self_), (C.gboolean)(_cgo_of_focus_on_click_))
	return
}

func (_self_ *Button) SetImage(image *Widget) () {
	_cgo_of_image_ := (*C.GtkWidget)(image)
	C._gtk_button_set_image((*C.GtkButton)(_self_), (*C.GtkWidget)(_cgo_of_image_))
	return
}

func (_self_ *Button) SetImagePosition(position C.GtkPositionType) () {
	C._gtk_button_set_image_position((*C.GtkButton)(_self_), (C.GtkPositionType)(position))
	return
}

func (_self_ *Button) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_button_set_label((*C.GtkButton)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *Button) SetRelief(newstyle C.GtkReliefStyle) () {
	C._gtk_button_set_relief((*C.GtkButton)(_self_), (C.GtkReliefStyle)(newstyle))
	return
}

func (_self_ *Button) SetUseStock(use_stock bool) () {
	_cgo_of_use_stock_ := C.glibtrue()
	if !use_stock {
		_cgo_of_use_stock_ = C.glibfalse()
	}
	C._gtk_button_set_use_stock((*C.GtkButton)(_self_), (C.gboolean)(_cgo_of_use_stock_))
	return
}

func (_self_ *Button) SetUseUnderline(use_underline bool) () {
	_cgo_of_use_underline_ := C.glibtrue()
	if !use_underline {
		_cgo_of_use_underline_ = C.glibfalse()
	}
	C._gtk_button_set_use_underline((*C.GtkButton)(_self_), (C.gboolean)(_cgo_of_use_underline_))
	return
}

func ButtonBoxNew(orientation C.GtkOrientation) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_button_box_new((C.GtkOrientation)(orientation))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ButtonBox) GetChildNonHomogeneous(child *Widget) (_return_ bool) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_button_box_get_child_non_homogeneous((*C.GtkButtonBox)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ButtonBox) GetChildSecondary(child *Widget) (_return_ bool) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_button_box_get_child_secondary((*C.GtkButtonBox)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ButtonBox) GetLayout() (_return_ C.GtkButtonBoxStyle) {
	_return_ = C._gtk_button_box_get_layout((*C.GtkButtonBox)(_self_))
	return
}

func (_self_ *ButtonBox) SetChildNonHomogeneous(child *Widget, non_homogeneous bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_non_homogeneous_ := C.glibtrue()
	if !non_homogeneous {
		_cgo_of_non_homogeneous_ = C.glibfalse()
	}
	C._gtk_button_box_set_child_non_homogeneous((*C.GtkButtonBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_non_homogeneous_))
	return
}

func (_self_ *ButtonBox) SetChildSecondary(child *Widget, is_secondary bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_is_secondary_ := C.glibtrue()
	if !is_secondary {
		_cgo_of_is_secondary_ = C.glibfalse()
	}
	C._gtk_button_box_set_child_secondary((*C.GtkButtonBox)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_is_secondary_))
	return
}

func (_self_ *ButtonBox) SetLayout(layout_style C.GtkButtonBoxStyle) () {
	C._gtk_button_box_set_layout((*C.GtkButtonBox)(_self_), (C.GtkButtonBoxStyle)(layout_style))
	return
}

func CalendarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_calendar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Calendar) ClearMarks() () {
	C._gtk_calendar_clear_marks((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) GetDate() (year uint, month uint, day uint) {
	var _cgo_of_year_ C.guint
	var _cgo_of_month_ C.guint
	var _cgo_of_day_ C.guint
	C._gtk_calendar_get_date((*C.GtkCalendar)(_self_), (*C.guint)(&_cgo_of_year_), (*C.guint)(&_cgo_of_month_), (*C.guint)(&_cgo_of_day_))
	year = uint(_cgo_of_year_)
	month = uint(_cgo_of_month_)
	day = uint(_cgo_of_day_)
	return
}

func (_self_ *Calendar) GetDayIsMarked(day uint) (_return_ bool) {
	_cgo_of_day_ := (C.guint)(day)
	_cgo_of__return__ := C._gtk_calendar_get_day_is_marked((*C.GtkCalendar)(_self_), (C.guint)(_cgo_of_day_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Calendar) GetDetailHeightRows() (_return_ int) {
	_cgo_of__return__ := C._gtk_calendar_get_detail_height_rows((*C.GtkCalendar)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Calendar) GetDetailWidthChars() (_return_ int) {
	_cgo_of__return__ := C._gtk_calendar_get_detail_width_chars((*C.GtkCalendar)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Calendar) GetDisplayOptions() (_return_ C.GtkCalendarDisplayOptions) {
	_return_ = C._gtk_calendar_get_display_options((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) MarkDay(day uint) () {
	_cgo_of_day_ := (C.guint)(day)
	C._gtk_calendar_mark_day((*C.GtkCalendar)(_self_), (C.guint)(_cgo_of_day_))
	return
}

func (_self_ *Calendar) SelectDay(day uint) () {
	_cgo_of_day_ := (C.guint)(day)
	C._gtk_calendar_select_day((*C.GtkCalendar)(_self_), (C.guint)(_cgo_of_day_))
	return
}

func (_self_ *Calendar) SelectMonth(month uint, year uint) () {
	_cgo_of_month_ := (C.guint)(month)
	_cgo_of_year_ := (C.guint)(year)
	C._gtk_calendar_select_month((*C.GtkCalendar)(_self_), (C.guint)(_cgo_of_month_), (C.guint)(_cgo_of_year_))
	return
}

func (_self_ *Calendar) SetDetailFunc(func_ C.GtkCalendarDetailFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_calendar_set_detail_func((*C.GtkCalendar)(_self_), (C.GtkCalendarDetailFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *Calendar) SetDetailHeightRows(rows int) () {
	_cgo_of_rows_ := (C.gint)(rows)
	C._gtk_calendar_set_detail_height_rows((*C.GtkCalendar)(_self_), (C.gint)(_cgo_of_rows_))
	return
}

func (_self_ *Calendar) SetDetailWidthChars(chars int) () {
	_cgo_of_chars_ := (C.gint)(chars)
	C._gtk_calendar_set_detail_width_chars((*C.GtkCalendar)(_self_), (C.gint)(_cgo_of_chars_))
	return
}

func (_self_ *Calendar) SetDisplayOptions(flags C.GtkCalendarDisplayOptions) () {
	C._gtk_calendar_set_display_options((*C.GtkCalendar)(_self_), (C.GtkCalendarDisplayOptions)(flags))
	return
}

func (_self_ *Calendar) UnmarkDay(day uint) () {
	_cgo_of_day_ := (C.guint)(day)
	C._gtk_calendar_unmark_day((*C.GtkCalendar)(_self_), (C.guint)(_cgo_of_day_))
	return
}

func (_self_ *CellArea) Activate(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, edit_only bool) (_return_ bool) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_edit_only_ := C.glibtrue()
	if !edit_only {
		_cgo_of_edit_only_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_cell_area_activate((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags), (C.gboolean)(_cgo_of_edit_only_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) ActivateCell(widget *Widget, renderer *CellRenderer, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of__return__ := C._gtk_cell_area_activate_cell((*C.GtkCellArea)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.GdkEvent)(event), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) Add(renderer *CellRenderer) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	C._gtk_cell_area_add((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	return
}

func (_self_ *CellArea) AddFocusSibling(renderer *CellRenderer, sibling *CellRenderer) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_sibling_ := (*C.GtkCellRenderer)(sibling)
	C._gtk_cell_area_add_focus_sibling((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.GtkCellRenderer)(_cgo_of_sibling_))
	return
}

func (_self_ *CellArea) ApplyAttributes(tree_model *C.GtkTreeModel, iter *TreeIter, is_expander bool, is_expanded bool) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_is_expander_ := C.glibtrue()
	if !is_expander {
		_cgo_of_is_expander_ = C.glibfalse()
	}
	_cgo_of_is_expanded_ := C.glibtrue()
	if !is_expanded {
		_cgo_of_is_expanded_ = C.glibfalse()
	}
	C._gtk_cell_area_apply_attributes((*C.GtkCellArea)(_self_), (*C.GtkTreeModel)(tree_model), (*C.GtkTreeIter)(_cgo_of_iter_), (C.gboolean)(_cgo_of_is_expander_), (C.gboolean)(_cgo_of_is_expanded_))
	return
}

func (_self_ *CellArea) AttributeConnect(renderer *CellRenderer, attribute string, column int) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_attribute_ := (*C.gchar)(unsafe.Pointer(C.CString(attribute)))
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_cell_area_attribute_connect((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.gchar)(_cgo_of_attribute_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *CellArea) AttributeDisconnect(renderer *CellRenderer, attribute string) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_attribute_ := (*C.gchar)(unsafe.Pointer(C.CString(attribute)))
	C._gtk_cell_area_attribute_disconnect((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.gchar)(_cgo_of_attribute_))
	return
}

func (_self_ *CellArea) CellGetProperty(renderer *CellRenderer, property_name string, value *C.GValue) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_cell_area_cell_get_property((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *CellArea) CellSetProperty(renderer *CellRenderer, property_name string, value *C.GValue) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_cell_area_cell_set_property((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *CellArea) CopyContext(context *CellAreaContext) (_return_ *CellAreaContext) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of__return__ := C._gtk_cell_area_copy_context((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_))
	_return_ = (*CellAreaContext)(_cgo_of__return__)
	return
}

func (_self_ *CellArea) CreateContext() (_return_ *CellAreaContext) {
	_cgo_of__return__ := C._gtk_cell_area_create_context((*C.GtkCellArea)(_self_))
	_return_ = (*CellAreaContext)(_cgo_of__return__)
	return
}

func (_self_ *CellArea) Event(context *CellAreaContext, widget *Widget, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ int) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of__return__ := C._gtk_cell_area_event((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkEvent)(event), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *CellArea) Focus(direction C.GtkDirectionType) (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_area_focus((*C.GtkCellArea)(_self_), (C.GtkDirectionType)(direction))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) Foreach(callback C.GtkCellCallback, callback_data C.gpointer) () {
	C._gtk_cell_area_foreach((*C.GtkCellArea)(_self_), (C.GtkCellCallback)(callback), (C.gpointer)(callback_data))
	return
}

func (_self_ *CellArea) ForeachAlloc(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, background_area *C.GdkRectangle, callback C.GtkCellAllocCallback, callback_data C.gpointer) () {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_cell_area_foreach_alloc((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkRectangle)(cell_area), (*C.GdkRectangle)(background_area), (C.GtkCellAllocCallback)(callback), (C.gpointer)(callback_data))
	return
}

func (_self_ *CellArea) GetCellAllocation(context *CellAreaContext, widget *Widget, renderer *CellRenderer, cell_area *C.GdkRectangle) (allocation *C.GdkRectangle) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	var _allocated_allocation_ C.GdkRectangle
	C._gtk_cell_area_get_cell_allocation((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.GdkRectangle)(cell_area), (*C.GdkRectangle)(&_allocated_allocation_))
	allocation = (*C.GdkRectangle)(&_allocated_allocation_)
	return
}

func (_self_ *CellArea) GetCellAtPosition(context *CellAreaContext, widget *Widget, cell_area *C.GdkRectangle, x int, y int) (_return_ *CellRenderer, alloc_area *C.GdkRectangle) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	var _allocated_alloc_area_ C.GdkRectangle
	_cgo_of__return__ := C._gtk_cell_area_get_cell_at_position((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkRectangle)(cell_area), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_), (*C.GdkRectangle)(&_allocated_alloc_area_))
	_return_ = (*CellRenderer)(_cgo_of__return__)
	alloc_area = (*C.GdkRectangle)(&_allocated_alloc_area_)
	return
}

func (_self_ *CellArea) GetCurrentPathString() (_return_ string) {
	_cgo_of__return__ := C._gtk_cell_area_get_current_path_string((*C.GtkCellArea)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *CellArea) GetEditWidget() (_return_ *C.GtkCellEditable) {
	_return_ = C._gtk_cell_area_get_edit_widget((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetEditedCell() (_return_ *CellRenderer) {
	_cgo_of__return__ := C._gtk_cell_area_get_edited_cell((*C.GtkCellArea)(_self_))
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func (_self_ *CellArea) GetFocusCell() (_return_ *CellRenderer) {
	_cgo_of__return__ := C._gtk_cell_area_get_focus_cell((*C.GtkCellArea)(_self_))
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func (_self_ *CellArea) GetFocusFromSibling(renderer *CellRenderer) (_return_ *CellRenderer) {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of__return__ := C._gtk_cell_area_get_focus_from_sibling((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func (_self_ *CellArea) GetFocusSiblings(renderer *CellRenderer) (_return_ *C.GList) {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_return_ = C._gtk_cell_area_get_focus_siblings((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	return
}

func (_self_ *CellArea) GetPreferredHeight(context *CellAreaContext, widget *Widget) (minimum_height int, natural_height int) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_cell_area_get_preferred_height((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *CellArea) GetPreferredHeightForWidth(context *CellAreaContext, widget *Widget, width int) (minimum_height int, natural_height int) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_width_ := (C.gint)(width)
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_cell_area_get_preferred_height_for_width((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_width_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *CellArea) GetPreferredWidth(context *CellAreaContext, widget *Widget) (minimum_width int, natural_width int) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_cell_area_get_preferred_width((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *CellArea) GetPreferredWidthForHeight(context *CellAreaContext, widget *Widget, height int) (minimum_width int, natural_width int) {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_height_ := (C.gint)(height)
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_cell_area_get_preferred_width_for_height((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_height_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *CellArea) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C._gtk_cell_area_get_request_mode((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) HasRenderer(renderer *CellRenderer) (_return_ bool) {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of__return__ := C._gtk_cell_area_has_renderer((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) InnerCellArea(widget *Widget, cell_area *C.GdkRectangle) (inner_area *C.GdkRectangle) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _allocated_inner_area_ C.GdkRectangle
	C._gtk_cell_area_inner_cell_area((*C.GtkCellArea)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkRectangle)(cell_area), (*C.GdkRectangle)(&_allocated_inner_area_))
	inner_area = (*C.GdkRectangle)(&_allocated_inner_area_)
	return
}

func (_self_ *CellArea) IsActivatable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_area_is_activatable((*C.GtkCellArea)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) IsFocusSibling(renderer *CellRenderer, sibling *CellRenderer) (_return_ bool) {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_sibling_ := (*C.GtkCellRenderer)(sibling)
	_cgo_of__return__ := C._gtk_cell_area_is_focus_sibling((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.GtkCellRenderer)(_cgo_of_sibling_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellArea) Remove(renderer *CellRenderer) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	C._gtk_cell_area_remove((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	return
}

func (_self_ *CellArea) RemoveFocusSibling(renderer *CellRenderer, sibling *CellRenderer) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_sibling_ := (*C.GtkCellRenderer)(sibling)
	C._gtk_cell_area_remove_focus_sibling((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (*C.GtkCellRenderer)(_cgo_of_sibling_))
	return
}

func (_self_ *CellArea) Render(context *CellAreaContext, widget *Widget, cr *C.cairo_t, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, paint_focus bool) () {
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_paint_focus_ := C.glibtrue()
	if !paint_focus {
		_cgo_of_paint_focus_ = C.glibfalse()
	}
	C._gtk_cell_area_render((*C.GtkCellArea)(_self_), (*C.GtkCellAreaContext)(_cgo_of_context_), (*C.GtkWidget)(_cgo_of_widget_), (*C.cairo_t)(cr), (*C.GdkRectangle)(background_area), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags), (C.gboolean)(_cgo_of_paint_focus_))
	return
}

func (_self_ *CellArea) RequestRenderer(renderer *CellRenderer, orientation C.GtkOrientation, widget *Widget, for_size int) (minimum_size int, natural_size int) {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_for_size_ := (C.gint)(for_size)
	var _cgo_of_minimum_size_ C.gint
	var _cgo_of_natural_size_ C.gint
	C._gtk_cell_area_request_renderer((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (C.GtkOrientation)(orientation), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_for_size_), (*C.gint)(&_cgo_of_minimum_size_), (*C.gint)(&_cgo_of_natural_size_))
	minimum_size = int(_cgo_of_minimum_size_)
	natural_size = int(_cgo_of_natural_size_)
	return
}

func (_self_ *CellArea) SetFocusCell(renderer *CellRenderer) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	C._gtk_cell_area_set_focus_cell((*C.GtkCellArea)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_))
	return
}

func (_self_ *CellArea) StopEditing(canceled bool) () {
	_cgo_of_canceled_ := C.glibtrue()
	if !canceled {
		_cgo_of_canceled_ = C.glibfalse()
	}
	C._gtk_cell_area_stop_editing((*C.GtkCellArea)(_self_), (C.gboolean)(_cgo_of_canceled_))
	return
}

func CellAreaBoxNew() (_return_ *CellArea) {
	_cgo_of__return__ := C.gtk_cell_area_box_new()
	_return_ = (*CellArea)(_cgo_of__return__)
	return
}

func (_self_ *CellAreaBox) GetSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_cell_area_box_get_spacing((*C.GtkCellAreaBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *CellAreaBox) PackEnd(renderer *CellRenderer, expand bool, align bool, fixed bool) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	_cgo_of_align_ := C.glibtrue()
	if !align {
		_cgo_of_align_ = C.glibfalse()
	}
	_cgo_of_fixed_ := C.glibtrue()
	if !fixed {
		_cgo_of_fixed_ = C.glibfalse()
	}
	C._gtk_cell_area_box_pack_end((*C.GtkCellAreaBox)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (C.gboolean)(_cgo_of_expand_), (C.gboolean)(_cgo_of_align_), (C.gboolean)(_cgo_of_fixed_))
	return
}

func (_self_ *CellAreaBox) PackStart(renderer *CellRenderer, expand bool, align bool, fixed bool) () {
	_cgo_of_renderer_ := (*C.GtkCellRenderer)(renderer)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	_cgo_of_align_ := C.glibtrue()
	if !align {
		_cgo_of_align_ = C.glibfalse()
	}
	_cgo_of_fixed_ := C.glibtrue()
	if !fixed {
		_cgo_of_fixed_ = C.glibfalse()
	}
	C._gtk_cell_area_box_pack_start((*C.GtkCellAreaBox)(_self_), (*C.GtkCellRenderer)(_cgo_of_renderer_), (C.gboolean)(_cgo_of_expand_), (C.gboolean)(_cgo_of_align_), (C.gboolean)(_cgo_of_fixed_))
	return
}

func (_self_ *CellAreaBox) SetSpacing(spacing int) () {
	_cgo_of_spacing_ := (C.gint)(spacing)
	C._gtk_cell_area_box_set_spacing((*C.GtkCellAreaBox)(_self_), (C.gint)(_cgo_of_spacing_))
	return
}

func (_self_ *CellAreaClass) FindCellProperty(property_name string) (_return_ *C.GParamSpec) {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	_return_ = C._gtk_cell_area_class_find_cell_property((*C.GtkCellAreaClass)(_self_), (*C.gchar)(_cgo_of_property_name_))
	return
}

func (_self_ *CellAreaClass) InstallCellProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_of_property_id_ := (C.guint)(property_id)
	C._gtk_cell_area_class_install_cell_property((*C.GtkCellAreaClass)(_self_), (C.guint)(_cgo_of_property_id_), (*C.GParamSpec)(pspec))
	return
}

func (_self_ *CellAreaClass) ListCellProperties() (_return_ unsafe.Pointer, n_properties uint) {
	var _cgo_of_n_properties_ C.guint
	_return_ = unsafe.Pointer(C._gtk_cell_area_class_list_cell_properties((*C.GtkCellAreaClass)(_self_), (*C.guint)(&_cgo_of_n_properties_)))
	n_properties = uint(_cgo_of_n_properties_)
	return
}

func (_self_ *CellAreaContext) Allocate(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_cell_area_context_allocate((*C.GtkCellAreaContext)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *CellAreaContext) GetAllocation() (width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_cell_area_context_get_allocation((*C.GtkCellAreaContext)(_self_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *CellAreaContext) GetArea() (_return_ *CellArea) {
	_cgo_of__return__ := C._gtk_cell_area_context_get_area((*C.GtkCellAreaContext)(_self_))
	_return_ = (*CellArea)(_cgo_of__return__)
	return
}

func (_self_ *CellAreaContext) GetPreferredHeight() (minimum_height int, natural_height int) {
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_cell_area_context_get_preferred_height((*C.GtkCellAreaContext)(_self_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *CellAreaContext) GetPreferredHeightForWidth(width int) (minimum_height int, natural_height int) {
	_cgo_of_width_ := (C.gint)(width)
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_cell_area_context_get_preferred_height_for_width((*C.GtkCellAreaContext)(_self_), (C.gint)(_cgo_of_width_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidth() (minimum_width int, natural_width int) {
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_cell_area_context_get_preferred_width((*C.GtkCellAreaContext)(_self_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidthForHeight(height int) (minimum_width int, natural_width int) {
	_cgo_of_height_ := (C.gint)(height)
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_cell_area_context_get_preferred_width_for_height((*C.GtkCellAreaContext)(_self_), (C.gint)(_cgo_of_height_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *CellAreaContext) PushPreferredHeight(minimum_height int, natural_height int) () {
	_cgo_of_minimum_height_ := (C.gint)(minimum_height)
	_cgo_of_natural_height_ := (C.gint)(natural_height)
	C._gtk_cell_area_context_push_preferred_height((*C.GtkCellAreaContext)(_self_), (C.gint)(_cgo_of_minimum_height_), (C.gint)(_cgo_of_natural_height_))
	return
}

func (_self_ *CellAreaContext) PushPreferredWidth(minimum_width int, natural_width int) () {
	_cgo_of_minimum_width_ := (C.gint)(minimum_width)
	_cgo_of_natural_width_ := (C.gint)(natural_width)
	C._gtk_cell_area_context_push_preferred_width((*C.GtkCellAreaContext)(_self_), (C.gint)(_cgo_of_minimum_width_), (C.gint)(_cgo_of_natural_width_))
	return
}

func (_self_ *CellAreaContext) Reset() () {
	C._gtk_cell_area_context_reset((*C.GtkCellAreaContext)(_self_))
	return
}

func (_self_ *CellRenderer) Activate(event *C.GdkEvent, widget *Widget, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of__return__ := C._gtk_cell_renderer_activate((*C.GtkCellRenderer)(_self_), (*C.GdkEvent)(event), (*C.GtkWidget)(_cgo_of_widget_), (*C.gchar)(_cgo_of_path_), (*C.GdkRectangle)(background_area), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) GetAlignedArea(widget *Widget, flags C.GtkCellRendererState, cell_area *C.GdkRectangle) (aligned_area *C.GdkRectangle) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _allocated_aligned_area_ C.GdkRectangle
	C._gtk_cell_renderer_get_aligned_area((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.GtkCellRendererState)(flags), (*C.GdkRectangle)(cell_area), (*C.GdkRectangle)(&_allocated_aligned_area_))
	aligned_area = (*C.GdkRectangle)(&_allocated_aligned_area_)
	return
}

func (_self_ *CellRenderer) GetAlignment() (xalign float64, yalign float64) {
	var _cgo_of_xalign_ C.gfloat
	var _cgo_of_yalign_ C.gfloat
	C._gtk_cell_renderer_get_alignment((*C.GtkCellRenderer)(_self_), (*C.gfloat)(&_cgo_of_xalign_), (*C.gfloat)(&_cgo_of_yalign_))
	xalign = float64(_cgo_of_xalign_)
	yalign = float64(_cgo_of_yalign_)
	return
}

func (_self_ *CellRenderer) GetFixedSize() (width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_cell_renderer_get_fixed_size((*C.GtkCellRenderer)(_self_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *CellRenderer) GetPadding() (xpad int, ypad int) {
	var _cgo_of_xpad_ C.gint
	var _cgo_of_ypad_ C.gint
	C._gtk_cell_renderer_get_padding((*C.GtkCellRenderer)(_self_), (*C.gint)(&_cgo_of_xpad_), (*C.gint)(&_cgo_of_ypad_))
	xpad = int(_cgo_of_xpad_)
	ypad = int(_cgo_of_ypad_)
	return
}

func (_self_ *CellRenderer) GetPreferredHeight(widget *Widget) (minimum_size int, natural_size int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _cgo_of_minimum_size_ C.gint
	var _cgo_of_natural_size_ C.gint
	C._gtk_cell_renderer_get_preferred_height((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (*C.gint)(&_cgo_of_minimum_size_), (*C.gint)(&_cgo_of_natural_size_))
	minimum_size = int(_cgo_of_minimum_size_)
	natural_size = int(_cgo_of_natural_size_)
	return
}

func (_self_ *CellRenderer) GetPreferredHeightForWidth(widget *Widget, width int) (minimum_height int, natural_height int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_width_ := (C.gint)(width)
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_cell_renderer_get_preferred_height_for_width((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_width_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *CellRenderer) GetPreferredSize(widget *Widget) (minimum_size *Requisition, natural_size *Requisition) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C._gtk_cell_renderer_get_preferred_size((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (*C.GtkRequisition)(&_allocated_minimum_size_), (*C.GtkRequisition)(&_allocated_natural_size_))
	minimum_size = (*Requisition)(&_allocated_minimum_size_)
	natural_size = (*Requisition)(&_allocated_natural_size_)
	return
}

func (_self_ *CellRenderer) GetPreferredWidth(widget *Widget) (minimum_size int, natural_size int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	var _cgo_of_minimum_size_ C.gint
	var _cgo_of_natural_size_ C.gint
	C._gtk_cell_renderer_get_preferred_width((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (*C.gint)(&_cgo_of_minimum_size_), (*C.gint)(&_cgo_of_natural_size_))
	minimum_size = int(_cgo_of_minimum_size_)
	natural_size = int(_cgo_of_natural_size_)
	return
}

func (_self_ *CellRenderer) GetPreferredWidthForHeight(widget *Widget, height int) (minimum_width int, natural_width int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_height_ := (C.gint)(height)
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_cell_renderer_get_preferred_width_for_height((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_height_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *CellRenderer) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C._gtk_cell_renderer_get_request_mode((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) GetSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_get_sensitive((*C.GtkCellRenderer)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) GetState(widget *Widget, cell_state C.GtkCellRendererState) (_return_ C.GtkStateFlags) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_return_ = C._gtk_cell_renderer_get_state((*C.GtkCellRenderer)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.GtkCellRendererState)(cell_state))
	return
}

func (_self_ *CellRenderer) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_get_visible((*C.GtkCellRenderer)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) IsActivatable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_is_activatable((*C.GtkCellRenderer)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRenderer) Render(cr *C.cairo_t, widget *Widget, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_cell_renderer_render((*C.GtkCellRenderer)(_self_), (*C.cairo_t)(cr), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkRectangle)(background_area), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags))
	return
}

func (_self_ *CellRenderer) SetAlignment(xalign float64, yalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	C._gtk_cell_renderer_set_alignment((*C.GtkCellRenderer)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_))
	return
}

func (_self_ *CellRenderer) SetFixedSize(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_cell_renderer_set_fixed_size((*C.GtkCellRenderer)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *CellRenderer) SetPadding(xpad int, ypad int) () {
	_cgo_of_xpad_ := (C.gint)(xpad)
	_cgo_of_ypad_ := (C.gint)(ypad)
	C._gtk_cell_renderer_set_padding((*C.GtkCellRenderer)(_self_), (C.gint)(_cgo_of_xpad_), (C.gint)(_cgo_of_ypad_))
	return
}

func (_self_ *CellRenderer) SetSensitive(sensitive bool) () {
	_cgo_of_sensitive_ := C.glibtrue()
	if !sensitive {
		_cgo_of_sensitive_ = C.glibfalse()
	}
	C._gtk_cell_renderer_set_sensitive((*C.GtkCellRenderer)(_self_), (C.gboolean)(_cgo_of_sensitive_))
	return
}

func (_self_ *CellRenderer) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_cell_renderer_set_visible((*C.GtkCellRenderer)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *CellRenderer) StartEditing(event *C.GdkEvent, widget *Widget, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ *C.GtkCellEditable) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_return_ = C._gtk_cell_renderer_start_editing((*C.GtkCellRenderer)(_self_), (*C.GdkEvent)(event), (*C.GtkWidget)(_cgo_of_widget_), (*C.gchar)(_cgo_of_path_), (*C.GdkRectangle)(background_area), (*C.GdkRectangle)(cell_area), (C.GtkCellRendererState)(flags))
	return
}

func (_self_ *CellRenderer) StopEditing(canceled bool) () {
	_cgo_of_canceled_ := C.glibtrue()
	if !canceled {
		_cgo_of_canceled_ = C.glibfalse()
	}
	C._gtk_cell_renderer_stop_editing((*C.GtkCellRenderer)(_self_), (C.gboolean)(_cgo_of_canceled_))
	return
}

func CellRendererAccelNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_accel_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererComboNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_combo_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererPixbufNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_pixbuf_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererProgressNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_progress_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererSpinNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_spin_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererSpinnerNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_spinner_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func CellRendererTextNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_text_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func (_self_ *CellRendererText) SetFixedHeightFromFont(number_of_rows int) () {
	_cgo_of_number_of_rows_ := (C.gint)(number_of_rows)
	C._gtk_cell_renderer_text_set_fixed_height_from_font((*C.GtkCellRendererText)(_self_), (C.gint)(_cgo_of_number_of_rows_))
	return
}

func CellRendererToggleNew() (_return_ *CellRenderer) {
	_cgo_of__return__ := C.gtk_cell_renderer_toggle_new()
	_return_ = (*CellRenderer)(_cgo_of__return__)
	return
}

func (_self_ *CellRendererToggle) GetActivatable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_toggle_get_activatable((*C.GtkCellRendererToggle)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_toggle_get_active((*C.GtkCellRendererToggle)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) GetRadio() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_renderer_toggle_get_radio((*C.GtkCellRendererToggle)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellRendererToggle) SetActivatable(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_cell_renderer_toggle_set_activatable((*C.GtkCellRendererToggle)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *CellRendererToggle) SetActive(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_cell_renderer_toggle_set_active((*C.GtkCellRendererToggle)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *CellRendererToggle) SetRadio(radio bool) () {
	_cgo_of_radio_ := C.glibtrue()
	if !radio {
		_cgo_of_radio_ = C.glibfalse()
	}
	C._gtk_cell_renderer_toggle_set_radio((*C.GtkCellRendererToggle)(_self_), (C.gboolean)(_cgo_of_radio_))
	return
}

func CellViewNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_cell_view_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CellViewNewWithContext(area *CellArea, context *CellAreaContext) (_return_ *Widget) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of_context_ := (*C.GtkCellAreaContext)(context)
	_cgo_of__return__ := C.gtk_cell_view_new_with_context((*C.GtkCellArea)(_cgo_of_area_), (*C.GtkCellAreaContext)(_cgo_of_context_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CellViewNewWithMarkup(markup string) (_return_ *Widget) {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	_cgo_of__return__ := C._gtk_cell_view_new_with_markup((*C.gchar)(_cgo_of_markup_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CellViewNewWithPixbuf(pixbuf *C.GdkPixbuf) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_cell_view_new_with_pixbuf((*C.GdkPixbuf)(pixbuf))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CellViewNewWithText(text string) (_return_ *Widget) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of__return__ := C._gtk_cell_view_new_with_text((*C.gchar)(_cgo_of_text_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *CellView) GetDisplayedRow() (_return_ *TreePath) {
	_cgo_of__return__ := C._gtk_cell_view_get_displayed_row((*C.GtkCellView)(_self_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *CellView) GetDrawSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_view_get_draw_sensitive((*C.GtkCellView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellView) GetFitModel() (_return_ bool) {
	_cgo_of__return__ := C._gtk_cell_view_get_fit_model((*C.GtkCellView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CellView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_cell_view_get_model((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) SetBackgroundRgba(rgba *C.GdkRGBA) () {
	C._gtk_cell_view_set_background_rgba((*C.GtkCellView)(_self_), (*C.GdkRGBA)(rgba))
	return
}

func (_self_ *CellView) SetDisplayedRow(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_cell_view_set_displayed_row((*C.GtkCellView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *CellView) SetDrawSensitive(draw_sensitive bool) () {
	_cgo_of_draw_sensitive_ := C.glibtrue()
	if !draw_sensitive {
		_cgo_of_draw_sensitive_ = C.glibfalse()
	}
	C._gtk_cell_view_set_draw_sensitive((*C.GtkCellView)(_self_), (C.gboolean)(_cgo_of_draw_sensitive_))
	return
}

func (_self_ *CellView) SetFitModel(fit_model bool) () {
	_cgo_of_fit_model_ := C.glibtrue()
	if !fit_model {
		_cgo_of_fit_model_ = C.glibfalse()
	}
	C._gtk_cell_view_set_fit_model((*C.GtkCellView)(_self_), (C.gboolean)(_cgo_of_fit_model_))
	return
}

func (_self_ *CellView) SetModel(model *C.GtkTreeModel) () {
	C._gtk_cell_view_set_model((*C.GtkCellView)(_self_), (*C.GtkTreeModel)(model))
	return
}

func CheckButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_check_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CheckButtonNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_check_button_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CheckButtonNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_check_button_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CheckMenuItemNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_check_menu_item_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CheckMenuItemNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_check_menu_item_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func CheckMenuItemNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_check_menu_item_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *CheckMenuItem) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_check_menu_item_get_active((*C.GtkCheckMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) GetDrawAsRadio() (_return_ bool) {
	_cgo_of__return__ := C._gtk_check_menu_item_get_draw_as_radio((*C.GtkCheckMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) GetInconsistent() (_return_ bool) {
	_cgo_of__return__ := C._gtk_check_menu_item_get_inconsistent((*C.GtkCheckMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CheckMenuItem) SetActive(is_active bool) () {
	_cgo_of_is_active_ := C.glibtrue()
	if !is_active {
		_cgo_of_is_active_ = C.glibfalse()
	}
	C._gtk_check_menu_item_set_active((*C.GtkCheckMenuItem)(_self_), (C.gboolean)(_cgo_of_is_active_))
	return
}

func (_self_ *CheckMenuItem) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_of_draw_as_radio_ := C.glibtrue()
	if !draw_as_radio {
		_cgo_of_draw_as_radio_ = C.glibfalse()
	}
	C._gtk_check_menu_item_set_draw_as_radio((*C.GtkCheckMenuItem)(_self_), (C.gboolean)(_cgo_of_draw_as_radio_))
	return
}

func (_self_ *CheckMenuItem) SetInconsistent(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_check_menu_item_set_inconsistent((*C.GtkCheckMenuItem)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *CheckMenuItem) Toggled() () {
	C._gtk_check_menu_item_toggled((*C.GtkCheckMenuItem)(_self_))
	return
}

func ClipboardGet(selection C.GdkAtom) (_return_ *Clipboard) {
	_cgo_of__return__ := C.gtk_clipboard_get((C.GdkAtom)(selection))
	_return_ = (*Clipboard)(_cgo_of__return__)
	return
}

func ClipboardGetForDisplay(display *C.GdkDisplay, selection C.GdkAtom) (_return_ *Clipboard) {
	_cgo_of__return__ := C.gtk_clipboard_get_for_display((*C.GdkDisplay)(display), (C.GdkAtom)(selection))
	_return_ = (*Clipboard)(_cgo_of__return__)
	return
}

func (_self_ *Clipboard) Clear() () {
	C._gtk_clipboard_clear((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_clipboard_get_display((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetOwner() (_return_ *C.GObject) {
	_return_ = C._gtk_clipboard_get_owner((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) RequestContents(target C.GdkAtom, callback C.GtkClipboardReceivedFunc, user_data C.gpointer) () {
	C._gtk_clipboard_request_contents((*C.GtkClipboard)(_self_), (C.GdkAtom)(target), (C.GtkClipboardReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) RequestImage(callback C.GtkClipboardImageReceivedFunc, user_data C.gpointer) () {
	C._gtk_clipboard_request_image((*C.GtkClipboard)(_self_), (C.GtkClipboardImageReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) RequestRichText(buffer *TextBuffer, callback C.GtkClipboardRichTextReceivedFunc, user_data C.gpointer) () {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	C._gtk_clipboard_request_rich_text((*C.GtkClipboard)(_self_), (*C.GtkTextBuffer)(_cgo_of_buffer_), (C.GtkClipboardRichTextReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) RequestTargets(callback C.GtkClipboardTargetsReceivedFunc, user_data C.gpointer) () {
	C._gtk_clipboard_request_targets((*C.GtkClipboard)(_self_), (C.GtkClipboardTargetsReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) RequestText(callback C.GtkClipboardTextReceivedFunc, user_data C.gpointer) () {
	C._gtk_clipboard_request_text((*C.GtkClipboard)(_self_), (C.GtkClipboardTextReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) RequestUris(callback C.GtkClipboardURIReceivedFunc, user_data C.gpointer) () {
	C._gtk_clipboard_request_uris((*C.GtkClipboard)(_self_), (C.GtkClipboardURIReceivedFunc)(callback), (C.gpointer)(user_data))
	return
}

func (_self_ *Clipboard) SetCanStore(targets *TargetEntry, n_targets int) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_clipboard_set_can_store((*C.GtkClipboard)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_))
	return
}

func (_self_ *Clipboard) SetImage(pixbuf *C.GdkPixbuf) () {
	C._gtk_clipboard_set_image((*C.GtkClipboard)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *Clipboard) SetText(text string, len_ int) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	C._gtk_clipboard_set_text((*C.GtkClipboard)(_self_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__))
	return
}

func (_self_ *Clipboard) SetWithData(targets *TargetEntry, n_targets uint, get_func C.GtkClipboardGetFunc, clear_func C.GtkClipboardClearFunc, user_data C.gpointer) (_return_ bool) {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.guint)(n_targets)
	_cgo_of__return__ := C._gtk_clipboard_set_with_data((*C.GtkClipboard)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.guint)(_cgo_of_n_targets_), (C.GtkClipboardGetFunc)(get_func), (C.GtkClipboardClearFunc)(clear_func), (C.gpointer)(user_data))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) SetWithOwner(targets *TargetEntry, n_targets uint, get_func C.GtkClipboardGetFunc, clear_func C.GtkClipboardClearFunc, owner *C.GObject) (_return_ bool) {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.guint)(n_targets)
	_cgo_of__return__ := C._gtk_clipboard_set_with_owner((*C.GtkClipboard)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.guint)(_cgo_of_n_targets_), (C.GtkClipboardGetFunc)(get_func), (C.GtkClipboardClearFunc)(clear_func), (*C.GObject)(owner))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) Store() () {
	C._gtk_clipboard_store((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForContents(target C.GdkAtom) (_return_ *SelectionData) {
	_cgo_of__return__ := C._gtk_clipboard_wait_for_contents((*C.GtkClipboard)(_self_), (C.GdkAtom)(target))
	_return_ = (*SelectionData)(_cgo_of__return__)
	return
}

func (_self_ *Clipboard) WaitForImage() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_clipboard_wait_for_image((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForRichText(buffer *TextBuffer) (_return_ *C.guint8, format *C.GdkAtom, length uint64) {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	var _cgo_of_length_ C.gsize
	var _allocated_format_ C.GdkAtom
	_return_ = C._gtk_clipboard_wait_for_rich_text((*C.GtkClipboard)(_self_), (*C.GtkTextBuffer)(_cgo_of_buffer_), (*C.GdkAtom)(&_allocated_format_), (*C.gsize)(&_cgo_of_length_))
	format = (*C.GdkAtom)(&_allocated_format_)
	length = uint64(_cgo_of_length_)
	return
}

func (_self_ *Clipboard) WaitForTargets() (_return_ bool, targets unsafe.Pointer, n_targets int) {
	var _cgo_of_n_targets_ C.gint
	_cgo_of__return__ := C._gtk_clipboard_wait_for_targets((*C.GtkClipboard)(_self_), unsafe.Pointer(targets), (*C.gint)(&_cgo_of_n_targets_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	n_targets = int(_cgo_of_n_targets_)
	return
}

func (_self_ *Clipboard) WaitForText() (_return_ string) {
	_cgo_of__return__ := C._gtk_clipboard_wait_for_text((*C.GtkClipboard)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Clipboard) WaitForUris() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._gtk_clipboard_wait_for_uris((*C.GtkClipboard)(_self_)))
	return
}

func (_self_ *Clipboard) WaitIsImageAvailable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_clipboard_wait_is_image_available((*C.GtkClipboard)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsRichTextAvailable(buffer *TextBuffer) (_return_ bool) {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	_cgo_of__return__ := C._gtk_clipboard_wait_is_rich_text_available((*C.GtkClipboard)(_self_), (*C.GtkTextBuffer)(_cgo_of_buffer_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsTargetAvailable(target C.GdkAtom) (_return_ bool) {
	_cgo_of__return__ := C._gtk_clipboard_wait_is_target_available((*C.GtkClipboard)(_self_), (C.GdkAtom)(target))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsTextAvailable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_clipboard_wait_is_text_available((*C.GtkClipboard)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Clipboard) WaitIsUrisAvailable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_clipboard_wait_is_uris_available((*C.GtkClipboard)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func ColorButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_color_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ColorButtonNewWithRgba(rgba *C.GdkRGBA) (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_color_button_new_with_rgba((*C.GdkRGBA)(rgba))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ColorButton) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_color_button_get_title((*C.GtkColorButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ColorButton) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_color_button_set_title((*C.GtkColorButton)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func ColorChooserDialogNew(title string, parent *Window) (_return_ *Widget) {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of__return__ := C._gtk_color_chooser_dialog_new((*C.gchar)(_cgo_of_title_), (*C.GtkWindow)(_cgo_of_parent_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ColorChooserWidgetNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_color_chooser_widget_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNewWithArea(area *CellArea) (_return_ *Widget) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of__return__ := C.gtk_combo_box_new_with_area((*C.GtkCellArea)(_cgo_of_area_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNewWithAreaAndEntry(area *CellArea) (_return_ *Widget) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of__return__ := C.gtk_combo_box_new_with_area_and_entry((*C.GtkCellArea)(_cgo_of_area_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNewWithEntry() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_new_with_entry()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNewWithModel(model *C.GtkTreeModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_new_with_model((*C.GtkTreeModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxNewWithModelAndEntry(model *C.GtkTreeModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_new_with_model_and_entry((*C.GtkTreeModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetActive() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_active((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetActiveId() (_return_ string) {
	_cgo_of__return__ := C._gtk_combo_box_get_active_id((*C.GtkComboBox)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ComboBox) GetActiveIter() (_return_ bool, iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	_cgo_of__return__ := C._gtk_combo_box_get_active_iter((*C.GtkComboBox)(_self_), (*C.GtkTreeIter)(&_allocated_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ComboBox) GetAddTearoffs() (_return_ bool) {
	_cgo_of__return__ := C._gtk_combo_box_get_add_tearoffs((*C.GtkComboBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetButtonSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C._gtk_combo_box_get_button_sensitivity((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetColumnSpanColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_column_span_column((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetEntryTextColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_entry_text_column((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetFocusOnClick() (_return_ bool) {
	_cgo_of__return__ := C._gtk_combo_box_get_focus_on_click((*C.GtkComboBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetHasEntry() (_return_ bool) {
	_cgo_of__return__ := C._gtk_combo_box_get_has_entry((*C.GtkComboBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetIdColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_id_column((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_combo_box_get_model((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupAccessible() (_return_ *C.AtkObject) {
	_return_ = C._gtk_combo_box_get_popup_accessible((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupFixedWidth() (_return_ bool) {
	_cgo_of__return__ := C._gtk_combo_box_get_popup_fixed_width((*C.GtkComboBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ComboBox) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C._gtk_combo_box_get_row_separator_func((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetRowSpanColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_row_span_column((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_combo_box_get_title((*C.GtkComboBox)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ComboBox) GetWrapWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_combo_box_get_wrap_width((*C.GtkComboBox)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ComboBox) Popdown() () {
	C._gtk_combo_box_popdown((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) Popup() () {
	C._gtk_combo_box_popup((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) PopupForDevice(device *C.GdkDevice) () {
	C._gtk_combo_box_popup_for_device((*C.GtkComboBox)(_self_), (*C.GdkDevice)(device))
	return
}

func (_self_ *ComboBox) SetActive(index_ int) () {
	_cgo_of_index__ := (C.gint)(index_)
	C._gtk_combo_box_set_active((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_index__))
	return
}

func (_self_ *ComboBox) SetActiveId(active_id string) (_return_ bool) {
	_cgo_of_active_id_ := (*C.gchar)(unsafe.Pointer(C.CString(active_id)))
	_cgo_of__return__ := C._gtk_combo_box_set_active_id((*C.GtkComboBox)(_self_), (*C.gchar)(_cgo_of_active_id_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ComboBox) SetActiveIter(iter *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	C._gtk_combo_box_set_active_iter((*C.GtkComboBox)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	return
}

func (_self_ *ComboBox) SetAddTearoffs(add_tearoffs bool) () {
	_cgo_of_add_tearoffs_ := C.glibtrue()
	if !add_tearoffs {
		_cgo_of_add_tearoffs_ = C.glibfalse()
	}
	C._gtk_combo_box_set_add_tearoffs((*C.GtkComboBox)(_self_), (C.gboolean)(_cgo_of_add_tearoffs_))
	return
}

func (_self_ *ComboBox) SetButtonSensitivity(sensitivity C.GtkSensitivityType) () {
	C._gtk_combo_box_set_button_sensitivity((*C.GtkComboBox)(_self_), (C.GtkSensitivityType)(sensitivity))
	return
}

func (_self_ *ComboBox) SetColumnSpanColumn(column_span int) () {
	_cgo_of_column_span_ := (C.gint)(column_span)
	C._gtk_combo_box_set_column_span_column((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_column_span_))
	return
}

func (_self_ *ComboBox) SetEntryTextColumn(text_column int) () {
	_cgo_of_text_column_ := (C.gint)(text_column)
	C._gtk_combo_box_set_entry_text_column((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_text_column_))
	return
}

func (_self_ *ComboBox) SetFocusOnClick(focus_on_click bool) () {
	_cgo_of_focus_on_click_ := C.glibtrue()
	if !focus_on_click {
		_cgo_of_focus_on_click_ = C.glibfalse()
	}
	C._gtk_combo_box_set_focus_on_click((*C.GtkComboBox)(_self_), (C.gboolean)(_cgo_of_focus_on_click_))
	return
}

func (_self_ *ComboBox) SetIdColumn(id_column int) () {
	_cgo_of_id_column_ := (C.gint)(id_column)
	C._gtk_combo_box_set_id_column((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_id_column_))
	return
}

func (_self_ *ComboBox) SetModel(model *C.GtkTreeModel) () {
	C._gtk_combo_box_set_model((*C.GtkComboBox)(_self_), (*C.GtkTreeModel)(model))
	return
}

func (_self_ *ComboBox) SetPopupFixedWidth(fixed bool) () {
	_cgo_of_fixed_ := C.glibtrue()
	if !fixed {
		_cgo_of_fixed_ = C.glibfalse()
	}
	C._gtk_combo_box_set_popup_fixed_width((*C.GtkComboBox)(_self_), (C.gboolean)(_cgo_of_fixed_))
	return
}

func (_self_ *ComboBox) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_combo_box_set_row_separator_func((*C.GtkComboBox)(_self_), (C.GtkTreeViewRowSeparatorFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *ComboBox) SetRowSpanColumn(row_span int) () {
	_cgo_of_row_span_ := (C.gint)(row_span)
	C._gtk_combo_box_set_row_span_column((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_row_span_))
	return
}

func (_self_ *ComboBox) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_combo_box_set_title((*C.GtkComboBox)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *ComboBox) SetWrapWidth(width int) () {
	_cgo_of_width_ := (C.gint)(width)
	C._gtk_combo_box_set_wrap_width((*C.GtkComboBox)(_self_), (C.gint)(_cgo_of_width_))
	return
}

func ComboBoxTextNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_text_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ComboBoxTextNewWithEntry() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_combo_box_text_new_with_entry()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ComboBoxText) Append(id string, text string) () {
	_cgo_of_id_ := (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_append((*C.GtkComboBoxText)(_self_), (*C.gchar)(_cgo_of_id_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) AppendText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_append_text((*C.GtkComboBoxText)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) GetActiveText() (_return_ string) {
	_cgo_of__return__ := C._gtk_combo_box_text_get_active_text((*C.GtkComboBoxText)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ComboBoxText) Insert(position int, id string, text string) () {
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of_id_ := (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_insert((*C.GtkComboBoxText)(_self_), (C.gint)(_cgo_of_position_), (*C.gchar)(_cgo_of_id_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) InsertText(position int, text string) () {
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_insert_text((*C.GtkComboBoxText)(_self_), (C.gint)(_cgo_of_position_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) Prepend(id string, text string) () {
	_cgo_of_id_ := (*C.gchar)(unsafe.Pointer(C.CString(id)))
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_prepend((*C.GtkComboBoxText)(_self_), (*C.gchar)(_cgo_of_id_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) PrependText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_combo_box_text_prepend_text((*C.GtkComboBoxText)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ComboBoxText) Remove(position int) () {
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_combo_box_text_remove((*C.GtkComboBoxText)(_self_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *ComboBoxText) RemoveAll() () {
	C._gtk_combo_box_text_remove_all((*C.GtkComboBoxText)(_self_))
	return
}

func (_self_ *Container) Add(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_container_add((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *Container) CheckResize() () {
	C._gtk_container_check_resize((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) ChildGetProperty(child *Widget, property_name string, value *C.GValue) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_container_child_get_property((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *Container) ChildNotify(child *Widget, child_property string) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_child_property_ := (*C.gchar)(unsafe.Pointer(C.CString(child_property)))
	C._gtk_container_child_notify((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gchar)(_cgo_of_child_property_))
	return
}

func (_self_ *Container) ChildSetProperty(child *Widget, property_name string, value *C.GValue) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_container_child_set_property((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *Container) ChildType() (_return_ C.GType) {
	_return_ = C._gtk_container_child_type((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) Forall(callback C.GtkCallback, callback_data C.gpointer) () {
	C._gtk_container_forall((*C.GtkContainer)(_self_), (C.GtkCallback)(callback), (C.gpointer)(callback_data))
	return
}

func (_self_ *Container) Foreach(callback C.GtkCallback, callback_data C.gpointer) () {
	C._gtk_container_foreach((*C.GtkContainer)(_self_), (C.GtkCallback)(callback), (C.gpointer)(callback_data))
	return
}

func (_self_ *Container) GetBorderWidth() (_return_ uint) {
	_cgo_of__return__ := C._gtk_container_get_border_width((*C.GtkContainer)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Container) GetChildren() (_return_ *C.GList) {
	_return_ = C._gtk_container_get_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetFocusChain() (_return_ bool, focusable_widgets unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_container_get_focus_chain((*C.GtkContainer)(_self_), unsafe.Pointer(focusable_widgets))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Container) GetFocusChild() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_container_get_focus_child((*C.GtkContainer)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Container) GetFocusHadjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_container_get_focus_hadjustment((*C.GtkContainer)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *Container) GetFocusVadjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_container_get_focus_vadjustment((*C.GtkContainer)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *Container) GetPathForChild(child *Widget) (_return_ *WidgetPath) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_container_get_path_for_child((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *Container) GetResizeMode() (_return_ C.GtkResizeMode) {
	_return_ = C._gtk_container_get_resize_mode((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) PropagateDraw(child *Widget, cr *C.cairo_t) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_container_propagate_draw((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.cairo_t)(cr))
	return
}

func (_self_ *Container) Remove(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_container_remove((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *Container) ResizeChildren() () {
	C._gtk_container_resize_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) SetBorderWidth(border_width uint) () {
	_cgo_of_border_width_ := (C.guint)(border_width)
	C._gtk_container_set_border_width((*C.GtkContainer)(_self_), (C.guint)(_cgo_of_border_width_))
	return
}

func (_self_ *Container) SetFocusChain(focusable_widgets *C.GList) () {
	C._gtk_container_set_focus_chain((*C.GtkContainer)(_self_), (*C.GList)(focusable_widgets))
	return
}

func (_self_ *Container) SetFocusChild(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_container_set_focus_child((*C.GtkContainer)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *Container) SetFocusHadjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_container_set_focus_hadjustment((*C.GtkContainer)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *Container) SetFocusVadjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_container_set_focus_vadjustment((*C.GtkContainer)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *Container) SetReallocateRedraws(needs_redraws bool) () {
	_cgo_of_needs_redraws_ := C.glibtrue()
	if !needs_redraws {
		_cgo_of_needs_redraws_ = C.glibfalse()
	}
	C._gtk_container_set_reallocate_redraws((*C.GtkContainer)(_self_), (C.gboolean)(_cgo_of_needs_redraws_))
	return
}

func (_self_ *Container) SetResizeMode(resize_mode C.GtkResizeMode) () {
	C._gtk_container_set_resize_mode((*C.GtkContainer)(_self_), (C.GtkResizeMode)(resize_mode))
	return
}

func (_self_ *Container) UnsetFocusChain() () {
	C._gtk_container_unset_focus_chain((*C.GtkContainer)(_self_))
	return
}

func (_self_ *ContainerClass) FindChildProperty(property_name string) (_return_ *C.GParamSpec) {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	_return_ = C._gtk_container_class_find_child_property((*C.GtkContainerClass)(_self_), (*C.gchar)(_cgo_of_property_name_))
	return
}

func (_self_ *ContainerClass) HandleBorderWidth() () {
	C._gtk_container_class_handle_border_width((*C.GtkContainerClass)(_self_))
	return
}

func (_self_ *ContainerClass) InstallChildProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_of_property_id_ := (C.guint)(property_id)
	C._gtk_container_class_install_child_property((*C.GtkContainerClass)(_self_), (C.guint)(_cgo_of_property_id_), (*C.GParamSpec)(pspec))
	return
}

func (_self_ *ContainerClass) ListChildProperties() (_return_ unsafe.Pointer, n_properties uint) {
	var _cgo_of_n_properties_ C.guint
	_return_ = unsafe.Pointer(C._gtk_container_class_list_child_properties((*C.GtkContainerClass)(_self_), (*C.guint)(&_cgo_of_n_properties_)))
	n_properties = uint(_cgo_of_n_properties_)
	return
}

func CssProviderNew() (_return_ *CssProvider) {
	_cgo_of__return__ := C.gtk_css_provider_new()
	_return_ = (*CssProvider)(_cgo_of__return__)
	return
}

func CssProviderGetDefault() (_return_ *CssProvider) {
	_cgo_of__return__ := C.gtk_css_provider_get_default()
	_return_ = (*CssProvider)(_cgo_of__return__)
	return
}

func CssProviderGetNamed(name string, variant string) (_return_ *CssProvider) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_variant_ := (*C.gchar)(unsafe.Pointer(C.CString(variant)))
	_cgo_of__return__ := C._gtk_css_provider_get_named((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_variant_))
	_return_ = (*CssProvider)(_cgo_of__return__)
	return
}

func (_self_ *CssProvider) LoadFromData(data string, length int64) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_data_ := (*C.gchar)(unsafe.Pointer(C.CString(data)))
	_cgo_of_length_ := (C.gssize)(length)
	_cgo_of__return__ := C._gtk_css_provider_load_from_data((*C.GtkCssProvider)(_self_), (*C.gchar)(_cgo_of_data_), (C.gssize)(_cgo_of_length_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CssProvider) LoadFromFile(file *C.GFile) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_css_provider_load_from_file((*C.GtkCssProvider)(_self_), (*C.GFile)(file), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CssProvider) LoadFromPath(path string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of__return__ := C._gtk_css_provider_load_from_path((*C.GtkCssProvider)(_self_), (*C.gchar)(_cgo_of_path_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *CssProvider) ToString() (_return_ *C.char) {
	_return_ = C._gtk_css_provider_to_string((*C.GtkCssProvider)(_self_))
	return
}

func (_self_ *CssSection) GetEndLine() (_return_ uint) {
	_cgo_of__return__ := C._gtk_css_section_get_end_line((*C.GtkCssSection)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *CssSection) GetEndPosition() (_return_ uint) {
	_cgo_of__return__ := C._gtk_css_section_get_end_position((*C.GtkCssSection)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *CssSection) GetFile() (_return_ *C.GFile) {
	_return_ = C._gtk_css_section_get_file((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetParent() (_return_ *CssSection) {
	_cgo_of__return__ := C._gtk_css_section_get_parent((*C.GtkCssSection)(_self_))
	_return_ = (*CssSection)(_cgo_of__return__)
	return
}

func (_self_ *CssSection) GetSectionType() (_return_ C.GtkCssSectionType) {
	_return_ = C._gtk_css_section_get_section_type((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetStartLine() (_return_ uint) {
	_cgo_of__return__ := C._gtk_css_section_get_start_line((*C.GtkCssSection)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *CssSection) GetStartPosition() (_return_ uint) {
	_cgo_of__return__ := C._gtk_css_section_get_start_position((*C.GtkCssSection)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *CssSection) Ref() (_return_ *CssSection) {
	_cgo_of__return__ := C._gtk_css_section_ref((*C.GtkCssSection)(_self_))
	_return_ = (*CssSection)(_cgo_of__return__)
	return
}

func (_self_ *CssSection) Unref() () {
	C._gtk_css_section_unref((*C.GtkCssSection)(_self_))
	return
}

func DialogNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_dialog_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Dialog) AddActionWidget(child *Widget, response_id int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_dialog_add_action_widget((*C.GtkDialog)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *Dialog) AddButton(button_text string, response_id int) (_return_ *Widget) {
	_cgo_of_button_text_ := (*C.gchar)(unsafe.Pointer(C.CString(button_text)))
	_cgo_of_response_id_ := (C.gint)(response_id)
	_cgo_of__return__ := C._gtk_dialog_add_button((*C.GtkDialog)(_self_), (*C.gchar)(_cgo_of_button_text_), (C.gint)(_cgo_of_response_id_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Dialog) GetActionArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_dialog_get_action_area((*C.GtkDialog)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Dialog) GetContentArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_dialog_get_content_area((*C.GtkDialog)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Dialog) GetResponseForWidget(widget *Widget) (_return_ int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of__return__ := C._gtk_dialog_get_response_for_widget((*C.GtkDialog)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Dialog) GetWidgetForResponse(response_id int) (_return_ *Widget) {
	_cgo_of_response_id_ := (C.gint)(response_id)
	_cgo_of__return__ := C._gtk_dialog_get_widget_for_response((*C.GtkDialog)(_self_), (C.gint)(_cgo_of_response_id_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Dialog) Response(response_id int) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_dialog_response((*C.GtkDialog)(_self_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *Dialog) Run() (_return_ int) {
	_cgo_of__return__ := C._gtk_dialog_run((*C.GtkDialog)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Dialog) SetAlternativeButtonOrderFromArray(n_params int, new_order *C.gint) () {
	_cgo_of_n_params_ := (C.gint)(n_params)
	C._gtk_dialog_set_alternative_button_order_from_array((*C.GtkDialog)(_self_), (C.gint)(_cgo_of_n_params_), (*C.gint)(new_order))
	return
}

func (_self_ *Dialog) SetDefaultResponse(response_id int) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_dialog_set_default_response((*C.GtkDialog)(_self_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *Dialog) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_dialog_set_response_sensitive((*C.GtkDialog)(_self_), (C.gint)(_cgo_of_response_id_), (C.gboolean)(_cgo_of_setting_))
	return
}

func DrawingAreaNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_drawing_area_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func EntryNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_entry_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func EntryNewWithBuffer(buffer *EntryBuffer) (_return_ *Widget) {
	_cgo_of_buffer_ := (*C.GtkEntryBuffer)(buffer)
	_cgo_of__return__ := C.gtk_entry_new_with_buffer((*C.GtkEntryBuffer)(_cgo_of_buffer_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetActivatesDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_activates_default((*C.GtkEntry)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetAlignment() (_return_ float64) {
	_cgo_of__return__ := C._gtk_entry_get_alignment((*C.GtkEntry)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C._gtk_entry_get_attributes((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetBuffer() (_return_ *EntryBuffer) {
	_cgo_of__return__ := C._gtk_entry_get_buffer((*C.GtkEntry)(_self_))
	_return_ = (*EntryBuffer)(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetCompletion() (_return_ *EntryCompletion) {
	_cgo_of__return__ := C._gtk_entry_get_completion((*C.GtkEntry)(_self_))
	_return_ = (*EntryCompletion)(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetCurrentIconDragSource() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_get_current_icon_drag_source((*C.GtkEntry)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetCursorHadjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_entry_get_cursor_hadjustment((*C.GtkEntry)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetHasFrame() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_has_frame((*C.GtkEntry)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconActivatable(icon_pos C.GtkEntryIconPosition) (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_icon_activatable((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconArea(icon_pos C.GtkEntryIconPosition) (icon_area *C.GdkRectangle) {
	var _allocated_icon_area_ C.GdkRectangle
	C._gtk_entry_get_icon_area((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.GdkRectangle)(&_allocated_icon_area_))
	icon_area = (*C.GdkRectangle)(&_allocated_icon_area_)
	return
}

func (_self_ *Entry) GetIconAtPos(x int, y int) (_return_ int) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_entry_get_icon_at_pos((*C.GtkEntry)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetIconGicon(icon_pos C.GtkEntryIconPosition) (_return_ *C.GIcon) {
	_return_ = C._gtk_entry_get_icon_gicon((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	return
}

func (_self_ *Entry) GetIconName(icon_pos C.GtkEntryIconPosition) (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_icon_name((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetIconPixbuf(icon_pos C.GtkEntryIconPosition) (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_entry_get_icon_pixbuf((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	return
}

func (_self_ *Entry) GetIconSensitive(icon_pos C.GtkEntryIconPosition) (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_icon_sensitive((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetIconStock(icon_pos C.GtkEntryIconPosition) (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_icon_stock((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetIconStorageType(icon_pos C.GtkEntryIconPosition) (_return_ C.GtkImageType) {
	_return_ = C._gtk_entry_get_icon_storage_type((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	return
}

func (_self_ *Entry) GetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition) (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_icon_tooltip_markup((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetIconTooltipText(icon_pos C.GtkEntryIconPosition) (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_icon_tooltip_text((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C._gtk_entry_get_input_hints((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C._gtk_entry_get_input_purpose((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInvisibleChar() (_return_ C.gunichar) {
	_return_ = C._gtk_entry_get_invisible_char((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C._gtk_entry_get_layout((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayoutOffsets() (x int, y int) {
	var _cgo_of_x_ C.gint
	var _cgo_of_y_ C.gint
	C._gtk_entry_get_layout_offsets((*C.GtkEntry)(_self_), (*C.gint)(&_cgo_of_x_), (*C.gint)(&_cgo_of_y_))
	x = int(_cgo_of_x_)
	y = int(_cgo_of_y_)
	return
}

func (_self_ *Entry) GetMaxLength() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_get_max_length((*C.GtkEntry)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetOverwriteMode() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_overwrite_mode((*C.GtkEntry)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetPlaceholderText() (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_placeholder_text((*C.GtkEntry)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetProgressFraction() (_return_ float64) {
	_cgo_of__return__ := C._gtk_entry_get_progress_fraction((*C.GtkEntry)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetProgressPulseStep() (_return_ float64) {
	_cgo_of__return__ := C._gtk_entry_get_progress_pulse_step((*C.GtkEntry)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetText() (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_get_text((*C.GtkEntry)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Entry) GetTextArea() (text_area *C.GdkRectangle) {
	var _allocated_text_area_ C.GdkRectangle
	C._gtk_entry_get_text_area((*C.GtkEntry)(_self_), (*C.GdkRectangle)(&_allocated_text_area_))
	text_area = (*C.GdkRectangle)(&_allocated_text_area_)
	return
}

func (_self_ *Entry) GetTextLength() (_return_ uint16) {
	_cgo_of__return__ := C._gtk_entry_get_text_length((*C.GtkEntry)(_self_))
	_return_ = uint16(_cgo_of__return__)
	return
}

func (_self_ *Entry) GetVisibility() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_get_visibility((*C.GtkEntry)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) GetWidthChars() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_get_width_chars((*C.GtkEntry)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) ImContextFilterKeypress(event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_im_context_filter_keypress((*C.GtkEntry)(_self_), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Entry) LayoutIndexToTextIndex(layout_index int) (_return_ int) {
	_cgo_of_layout_index_ := (C.gint)(layout_index)
	_cgo_of__return__ := C._gtk_entry_layout_index_to_text_index((*C.GtkEntry)(_self_), (C.gint)(_cgo_of_layout_index_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) ProgressPulse() () {
	C._gtk_entry_progress_pulse((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) ResetImContext() () {
	C._gtk_entry_reset_im_context((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) SetActivatesDefault(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_entry_set_activates_default((*C.GtkEntry)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Entry) SetAlignment(xalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	C._gtk_entry_set_alignment((*C.GtkEntry)(_self_), (C.gfloat)(_cgo_of_xalign_))
	return
}

func (_self_ *Entry) SetAttributes(attrs *C.PangoAttrList) () {
	C._gtk_entry_set_attributes((*C.GtkEntry)(_self_), (*C.PangoAttrList)(attrs))
	return
}

func (_self_ *Entry) SetBuffer(buffer *EntryBuffer) () {
	_cgo_of_buffer_ := (*C.GtkEntryBuffer)(buffer)
	C._gtk_entry_set_buffer((*C.GtkEntry)(_self_), (*C.GtkEntryBuffer)(_cgo_of_buffer_))
	return
}

func (_self_ *Entry) SetCompletion(completion *EntryCompletion) () {
	_cgo_of_completion_ := (*C.GtkEntryCompletion)(completion)
	C._gtk_entry_set_completion((*C.GtkEntry)(_self_), (*C.GtkEntryCompletion)(_cgo_of_completion_))
	return
}

func (_self_ *Entry) SetCursorHadjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_entry_set_cursor_hadjustment((*C.GtkEntry)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *Entry) SetHasFrame(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_entry_set_has_frame((*C.GtkEntry)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Entry) SetIconActivatable(icon_pos C.GtkEntryIconPosition, activatable bool) () {
	_cgo_of_activatable_ := C.glibtrue()
	if !activatable {
		_cgo_of_activatable_ = C.glibfalse()
	}
	C._gtk_entry_set_icon_activatable((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (C.gboolean)(_cgo_of_activatable_))
	return
}

func (_self_ *Entry) SetIconDragSource(icon_pos C.GtkEntryIconPosition, target_list *TargetList, actions C.GdkDragAction) () {
	_cgo_of_target_list_ := (*C.GtkTargetList)(target_list)
	C._gtk_entry_set_icon_drag_source((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.GtkTargetList)(_cgo_of_target_list_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *Entry) SetIconFromGicon(icon_pos C.GtkEntryIconPosition, icon *C.GIcon) () {
	C._gtk_entry_set_icon_from_gicon((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.GIcon)(icon))
	return
}

func (_self_ *Entry) SetIconFromIconName(icon_pos C.GtkEntryIconPosition, icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_entry_set_icon_from_icon_name((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *Entry) SetIconFromPixbuf(icon_pos C.GtkEntryIconPosition, pixbuf *C.GdkPixbuf) () {
	C._gtk_entry_set_icon_from_pixbuf((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *Entry) SetIconFromStock(icon_pos C.GtkEntryIconPosition, stock_id string) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_entry_set_icon_from_stock((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.gchar)(_cgo_of_stock_id_))
	return
}

func (_self_ *Entry) SetIconSensitive(icon_pos C.GtkEntryIconPosition, sensitive bool) () {
	_cgo_of_sensitive_ := C.glibtrue()
	if !sensitive {
		_cgo_of_sensitive_ = C.glibfalse()
	}
	C._gtk_entry_set_icon_sensitive((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (C.gboolean)(_cgo_of_sensitive_))
	return
}

func (_self_ *Entry) SetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	C._gtk_entry_set_icon_tooltip_markup((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.gchar)(_cgo_of_tooltip_))
	return
}

func (_self_ *Entry) SetIconTooltipText(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	C._gtk_entry_set_icon_tooltip_text((*C.GtkEntry)(_self_), (C.GtkEntryIconPosition)(icon_pos), (*C.gchar)(_cgo_of_tooltip_))
	return
}

func (_self_ *Entry) SetInputHints(hints C.GtkInputHints) () {
	C._gtk_entry_set_input_hints((*C.GtkEntry)(_self_), (C.GtkInputHints)(hints))
	return
}

func (_self_ *Entry) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C._gtk_entry_set_input_purpose((*C.GtkEntry)(_self_), (C.GtkInputPurpose)(purpose))
	return
}

func (_self_ *Entry) SetInvisibleChar(ch C.gunichar) () {
	C._gtk_entry_set_invisible_char((*C.GtkEntry)(_self_), (C.gunichar)(ch))
	return
}

func (_self_ *Entry) SetMaxLength(max int) () {
	_cgo_of_max_ := (C.gint)(max)
	C._gtk_entry_set_max_length((*C.GtkEntry)(_self_), (C.gint)(_cgo_of_max_))
	return
}

func (_self_ *Entry) SetOverwriteMode(overwrite bool) () {
	_cgo_of_overwrite_ := C.glibtrue()
	if !overwrite {
		_cgo_of_overwrite_ = C.glibfalse()
	}
	C._gtk_entry_set_overwrite_mode((*C.GtkEntry)(_self_), (C.gboolean)(_cgo_of_overwrite_))
	return
}

func (_self_ *Entry) SetPlaceholderText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_entry_set_placeholder_text((*C.GtkEntry)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *Entry) SetProgressFraction(fraction float64) () {
	_cgo_of_fraction_ := (C.gdouble)(fraction)
	C._gtk_entry_set_progress_fraction((*C.GtkEntry)(_self_), (C.gdouble)(_cgo_of_fraction_))
	return
}

func (_self_ *Entry) SetProgressPulseStep(fraction float64) () {
	_cgo_of_fraction_ := (C.gdouble)(fraction)
	C._gtk_entry_set_progress_pulse_step((*C.GtkEntry)(_self_), (C.gdouble)(_cgo_of_fraction_))
	return
}

func (_self_ *Entry) SetText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_entry_set_text((*C.GtkEntry)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *Entry) SetVisibility(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_entry_set_visibility((*C.GtkEntry)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *Entry) SetWidthChars(n_chars int) () {
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	C._gtk_entry_set_width_chars((*C.GtkEntry)(_self_), (C.gint)(_cgo_of_n_chars_))
	return
}

func (_self_ *Entry) TextIndexToLayoutIndex(text_index int) (_return_ int) {
	_cgo_of_text_index_ := (C.gint)(text_index)
	_cgo_of__return__ := C._gtk_entry_text_index_to_layout_index((*C.GtkEntry)(_self_), (C.gint)(_cgo_of_text_index_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Entry) UnsetInvisibleChar() () {
	C._gtk_entry_unset_invisible_char((*C.GtkEntry)(_self_))
	return
}

func EntryBufferNew(initial_chars string, n_initial_chars int) (_return_ *EntryBuffer) {
	_cgo_of_initial_chars_ := (*C.gchar)(unsafe.Pointer(C.CString(initial_chars)))
	_cgo_of_n_initial_chars_ := (C.gint)(n_initial_chars)
	_cgo_of__return__ := C._gtk_entry_buffer_new((*C.gchar)(_cgo_of_initial_chars_), (C.gint)(_cgo_of_n_initial_chars_))
	_return_ = (*EntryBuffer)(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) DeleteText(position uint, n_chars int) (_return_ uint) {
	_cgo_of_position_ := (C.guint)(position)
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	_cgo_of__return__ := C._gtk_entry_buffer_delete_text((*C.GtkEntryBuffer)(_self_), (C.guint)(_cgo_of_position_), (C.gint)(_cgo_of_n_chars_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) EmitDeletedText(position uint, n_chars uint) () {
	_cgo_of_position_ := (C.guint)(position)
	_cgo_of_n_chars_ := (C.guint)(n_chars)
	C._gtk_entry_buffer_emit_deleted_text((*C.GtkEntryBuffer)(_self_), (C.guint)(_cgo_of_position_), (C.guint)(_cgo_of_n_chars_))
	return
}

func (_self_ *EntryBuffer) EmitInsertedText(position uint, chars string, n_chars uint) () {
	_cgo_of_position_ := (C.guint)(position)
	_cgo_of_chars_ := (*C.gchar)(unsafe.Pointer(C.CString(chars)))
	_cgo_of_n_chars_ := (C.guint)(n_chars)
	C._gtk_entry_buffer_emit_inserted_text((*C.GtkEntryBuffer)(_self_), (C.guint)(_cgo_of_position_), (*C.gchar)(_cgo_of_chars_), (C.guint)(_cgo_of_n_chars_))
	return
}

func (_self_ *EntryBuffer) GetBytes() (_return_ uint64) {
	_cgo_of__return__ := C._gtk_entry_buffer_get_bytes((*C.GtkEntryBuffer)(_self_))
	_return_ = uint64(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) GetLength() (_return_ uint) {
	_cgo_of__return__ := C._gtk_entry_buffer_get_length((*C.GtkEntryBuffer)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) GetMaxLength() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_buffer_get_max_length((*C.GtkEntryBuffer)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) GetText() (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_buffer_get_text((*C.GtkEntryBuffer)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *EntryBuffer) InsertText(position uint, chars string, n_chars int) (_return_ uint) {
	_cgo_of_position_ := (C.guint)(position)
	_cgo_of_chars_ := (*C.gchar)(unsafe.Pointer(C.CString(chars)))
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	_cgo_of__return__ := C._gtk_entry_buffer_insert_text((*C.GtkEntryBuffer)(_self_), (C.guint)(_cgo_of_position_), (*C.gchar)(_cgo_of_chars_), (C.gint)(_cgo_of_n_chars_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *EntryBuffer) SetMaxLength(max_length int) () {
	_cgo_of_max_length_ := (C.gint)(max_length)
	C._gtk_entry_buffer_set_max_length((*C.GtkEntryBuffer)(_self_), (C.gint)(_cgo_of_max_length_))
	return
}

func (_self_ *EntryBuffer) SetText(chars string, n_chars int) () {
	_cgo_of_chars_ := (*C.gchar)(unsafe.Pointer(C.CString(chars)))
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	C._gtk_entry_buffer_set_text((*C.GtkEntryBuffer)(_self_), (*C.gchar)(_cgo_of_chars_), (C.gint)(_cgo_of_n_chars_))
	return
}

func EntryCompletionNew() (_return_ *EntryCompletion) {
	_cgo_of__return__ := C.gtk_entry_completion_new()
	_return_ = (*EntryCompletion)(_cgo_of__return__)
	return
}

func EntryCompletionNewWithArea(area *CellArea) (_return_ *EntryCompletion) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of__return__ := C.gtk_entry_completion_new_with_area((*C.GtkCellArea)(_cgo_of_area_))
	_return_ = (*EntryCompletion)(_cgo_of__return__)
	return
}

func (_self_ *EntryCompletion) Complete() () {
	C._gtk_entry_completion_complete((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) ComputePrefix(key *C.char) (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_completion_compute_prefix((*C.GtkEntryCompletion)(_self_), (*C.char)(key))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *EntryCompletion) DeleteAction(index_ int) () {
	_cgo_of_index__ := (C.gint)(index_)
	C._gtk_entry_completion_delete_action((*C.GtkEntryCompletion)(_self_), (C.gint)(_cgo_of_index__))
	return
}

func (_self_ *EntryCompletion) GetCompletionPrefix() (_return_ string) {
	_cgo_of__return__ := C._gtk_entry_completion_get_completion_prefix((*C.GtkEntryCompletion)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *EntryCompletion) GetEntry() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_entry_completion_get_entry((*C.GtkEntryCompletion)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *EntryCompletion) GetInlineCompletion() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_completion_get_inline_completion((*C.GtkEntryCompletion)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetInlineSelection() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_completion_get_inline_selection((*C.GtkEntryCompletion)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetMinimumKeyLength() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_completion_get_minimum_key_length((*C.GtkEntryCompletion)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *EntryCompletion) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_entry_completion_get_model((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetPopupCompletion() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_completion_get_popup_completion((*C.GtkEntryCompletion)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetPopupSetWidth() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_completion_get_popup_set_width((*C.GtkEntryCompletion)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetPopupSingleMatch() (_return_ bool) {
	_cgo_of__return__ := C._gtk_entry_completion_get_popup_single_match((*C.GtkEntryCompletion)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EntryCompletion) GetTextColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_entry_completion_get_text_column((*C.GtkEntryCompletion)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *EntryCompletion) InsertActionMarkup(index_ int, markup string) () {
	_cgo_of_index__ := (C.gint)(index_)
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_entry_completion_insert_action_markup((*C.GtkEntryCompletion)(_self_), (C.gint)(_cgo_of_index__), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *EntryCompletion) InsertActionText(index_ int, text string) () {
	_cgo_of_index__ := (C.gint)(index_)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_entry_completion_insert_action_text((*C.GtkEntryCompletion)(_self_), (C.gint)(_cgo_of_index__), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *EntryCompletion) InsertPrefix() () {
	C._gtk_entry_completion_insert_prefix((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) SetInlineCompletion(inline_completion bool) () {
	_cgo_of_inline_completion_ := C.glibtrue()
	if !inline_completion {
		_cgo_of_inline_completion_ = C.glibfalse()
	}
	C._gtk_entry_completion_set_inline_completion((*C.GtkEntryCompletion)(_self_), (C.gboolean)(_cgo_of_inline_completion_))
	return
}

func (_self_ *EntryCompletion) SetInlineSelection(inline_selection bool) () {
	_cgo_of_inline_selection_ := C.glibtrue()
	if !inline_selection {
		_cgo_of_inline_selection_ = C.glibfalse()
	}
	C._gtk_entry_completion_set_inline_selection((*C.GtkEntryCompletion)(_self_), (C.gboolean)(_cgo_of_inline_selection_))
	return
}

func (_self_ *EntryCompletion) SetMatchFunc(func_ C.GtkEntryCompletionMatchFunc, func_data C.gpointer, func_notify C.GDestroyNotify) () {
	C._gtk_entry_completion_set_match_func((*C.GtkEntryCompletion)(_self_), (C.GtkEntryCompletionMatchFunc)(func_), (C.gpointer)(func_data), (C.GDestroyNotify)(func_notify))
	return
}

func (_self_ *EntryCompletion) SetMinimumKeyLength(length int) () {
	_cgo_of_length_ := (C.gint)(length)
	C._gtk_entry_completion_set_minimum_key_length((*C.GtkEntryCompletion)(_self_), (C.gint)(_cgo_of_length_))
	return
}

func (_self_ *EntryCompletion) SetModel(model *C.GtkTreeModel) () {
	C._gtk_entry_completion_set_model((*C.GtkEntryCompletion)(_self_), (*C.GtkTreeModel)(model))
	return
}

func (_self_ *EntryCompletion) SetPopupCompletion(popup_completion bool) () {
	_cgo_of_popup_completion_ := C.glibtrue()
	if !popup_completion {
		_cgo_of_popup_completion_ = C.glibfalse()
	}
	C._gtk_entry_completion_set_popup_completion((*C.GtkEntryCompletion)(_self_), (C.gboolean)(_cgo_of_popup_completion_))
	return
}

func (_self_ *EntryCompletion) SetPopupSetWidth(popup_set_width bool) () {
	_cgo_of_popup_set_width_ := C.glibtrue()
	if !popup_set_width {
		_cgo_of_popup_set_width_ = C.glibfalse()
	}
	C._gtk_entry_completion_set_popup_set_width((*C.GtkEntryCompletion)(_self_), (C.gboolean)(_cgo_of_popup_set_width_))
	return
}

func (_self_ *EntryCompletion) SetPopupSingleMatch(popup_single_match bool) () {
	_cgo_of_popup_single_match_ := C.glibtrue()
	if !popup_single_match {
		_cgo_of_popup_single_match_ = C.glibfalse()
	}
	C._gtk_entry_completion_set_popup_single_match((*C.GtkEntryCompletion)(_self_), (C.gboolean)(_cgo_of_popup_single_match_))
	return
}

func (_self_ *EntryCompletion) SetTextColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_entry_completion_set_text_column((*C.GtkEntryCompletion)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func EventBoxNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_event_box_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *EventBox) GetAboveChild() (_return_ bool) {
	_cgo_of__return__ := C._gtk_event_box_get_above_child((*C.GtkEventBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EventBox) GetVisibleWindow() (_return_ bool) {
	_cgo_of__return__ := C._gtk_event_box_get_visible_window((*C.GtkEventBox)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *EventBox) SetAboveChild(above_child bool) () {
	_cgo_of_above_child_ := C.glibtrue()
	if !above_child {
		_cgo_of_above_child_ = C.glibfalse()
	}
	C._gtk_event_box_set_above_child((*C.GtkEventBox)(_self_), (C.gboolean)(_cgo_of_above_child_))
	return
}

func (_self_ *EventBox) SetVisibleWindow(visible_window bool) () {
	_cgo_of_visible_window_ := C.glibtrue()
	if !visible_window {
		_cgo_of_visible_window_ = C.glibfalse()
	}
	C._gtk_event_box_set_visible_window((*C.GtkEventBox)(_self_), (C.gboolean)(_cgo_of_visible_window_))
	return
}

func ExpanderNew(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_expander_new((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ExpanderNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_expander_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Expander) GetExpanded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_expander_get_expanded((*C.GtkExpander)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Expander) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_expander_get_label((*C.GtkExpander)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Expander) GetLabelFill() (_return_ bool) {
	_cgo_of__return__ := C._gtk_expander_get_label_fill((*C.GtkExpander)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Expander) GetLabelWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_expander_get_label_widget((*C.GtkExpander)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Expander) GetResizeToplevel() (_return_ bool) {
	_cgo_of__return__ := C._gtk_expander_get_resize_toplevel((*C.GtkExpander)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Expander) GetSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_expander_get_spacing((*C.GtkExpander)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Expander) GetUseMarkup() (_return_ bool) {
	_cgo_of__return__ := C._gtk_expander_get_use_markup((*C.GtkExpander)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Expander) GetUseUnderline() (_return_ bool) {
	_cgo_of__return__ := C._gtk_expander_get_use_underline((*C.GtkExpander)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Expander) SetExpanded(expanded bool) () {
	_cgo_of_expanded_ := C.glibtrue()
	if !expanded {
		_cgo_of_expanded_ = C.glibfalse()
	}
	C._gtk_expander_set_expanded((*C.GtkExpander)(_self_), (C.gboolean)(_cgo_of_expanded_))
	return
}

func (_self_ *Expander) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_expander_set_label((*C.GtkExpander)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *Expander) SetLabelFill(label_fill bool) () {
	_cgo_of_label_fill_ := C.glibtrue()
	if !label_fill {
		_cgo_of_label_fill_ = C.glibfalse()
	}
	C._gtk_expander_set_label_fill((*C.GtkExpander)(_self_), (C.gboolean)(_cgo_of_label_fill_))
	return
}

func (_self_ *Expander) SetLabelWidget(label_widget *Widget) () {
	_cgo_of_label_widget_ := (*C.GtkWidget)(label_widget)
	C._gtk_expander_set_label_widget((*C.GtkExpander)(_self_), (*C.GtkWidget)(_cgo_of_label_widget_))
	return
}

func (_self_ *Expander) SetResizeToplevel(resize_toplevel bool) () {
	_cgo_of_resize_toplevel_ := C.glibtrue()
	if !resize_toplevel {
		_cgo_of_resize_toplevel_ = C.glibfalse()
	}
	C._gtk_expander_set_resize_toplevel((*C.GtkExpander)(_self_), (C.gboolean)(_cgo_of_resize_toplevel_))
	return
}

func (_self_ *Expander) SetSpacing(spacing int) () {
	_cgo_of_spacing_ := (C.gint)(spacing)
	C._gtk_expander_set_spacing((*C.GtkExpander)(_self_), (C.gint)(_cgo_of_spacing_))
	return
}

func (_self_ *Expander) SetUseMarkup(use_markup bool) () {
	_cgo_of_use_markup_ := C.glibtrue()
	if !use_markup {
		_cgo_of_use_markup_ = C.glibfalse()
	}
	C._gtk_expander_set_use_markup((*C.GtkExpander)(_self_), (C.gboolean)(_cgo_of_use_markup_))
	return
}

func (_self_ *Expander) SetUseUnderline(use_underline bool) () {
	_cgo_of_use_underline_ := C.glibtrue()
	if !use_underline {
		_cgo_of_use_underline_ = C.glibfalse()
	}
	C._gtk_expander_set_use_underline((*C.GtkExpander)(_self_), (C.gboolean)(_cgo_of_use_underline_))
	return
}

func FileChooserButtonNew(title string, action C.GtkFileChooserAction) (_return_ *Widget) {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	_cgo_of__return__ := C._gtk_file_chooser_button_new((*C.gchar)(_cgo_of_title_), (C.GtkFileChooserAction)(action))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func FileChooserButtonNewWithDialog(dialog *Widget) (_return_ *Widget) {
	_cgo_of_dialog_ := (*C.GtkWidget)(dialog)
	_cgo_of__return__ := C.gtk_file_chooser_button_new_with_dialog((*C.GtkWidget)(_cgo_of_dialog_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *FileChooserButton) GetFocusOnClick() (_return_ bool) {
	_cgo_of__return__ := C._gtk_file_chooser_button_get_focus_on_click((*C.GtkFileChooserButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FileChooserButton) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_file_chooser_button_get_title((*C.GtkFileChooserButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *FileChooserButton) GetWidthChars() (_return_ int) {
	_cgo_of__return__ := C._gtk_file_chooser_button_get_width_chars((*C.GtkFileChooserButton)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *FileChooserButton) SetFocusOnClick(focus_on_click bool) () {
	_cgo_of_focus_on_click_ := C.glibtrue()
	if !focus_on_click {
		_cgo_of_focus_on_click_ = C.glibfalse()
	}
	C._gtk_file_chooser_button_set_focus_on_click((*C.GtkFileChooserButton)(_self_), (C.gboolean)(_cgo_of_focus_on_click_))
	return
}

func (_self_ *FileChooserButton) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_file_chooser_button_set_title((*C.GtkFileChooserButton)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *FileChooserButton) SetWidthChars(n_chars int) () {
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	C._gtk_file_chooser_button_set_width_chars((*C.GtkFileChooserButton)(_self_), (C.gint)(_cgo_of_n_chars_))
	return
}

func FileChooserWidgetNew(action C.GtkFileChooserAction) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_file_chooser_widget_new((C.GtkFileChooserAction)(action))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func FileFilterNew() (_return_ *FileFilter) {
	_cgo_of__return__ := C.gtk_file_filter_new()
	_return_ = (*FileFilter)(_cgo_of__return__)
	return
}

func (_self_ *FileFilter) AddCustom(needed C.GtkFileFilterFlags, func_ C.GtkFileFilterFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C._gtk_file_filter_add_custom((*C.GtkFileFilter)(_self_), (C.GtkFileFilterFlags)(needed), (C.GtkFileFilterFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	return
}

func (_self_ *FileFilter) AddMimeType(mime_type string) () {
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	C._gtk_file_filter_add_mime_type((*C.GtkFileFilter)(_self_), (*C.gchar)(_cgo_of_mime_type_))
	return
}

func (_self_ *FileFilter) AddPattern(pattern string) () {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	C._gtk_file_filter_add_pattern((*C.GtkFileFilter)(_self_), (*C.gchar)(_cgo_of_pattern_))
	return
}

func (_self_ *FileFilter) AddPixbufFormats() () {
	C._gtk_file_filter_add_pixbuf_formats((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) Filter(filter_info *FileFilterInfo) (_return_ bool) {
	_cgo_of_filter_info_ := (*C.GtkFileFilterInfo)(filter_info)
	_cgo_of__return__ := C._gtk_file_filter_filter((*C.GtkFileFilter)(_self_), (*C.GtkFileFilterInfo)(_cgo_of_filter_info_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FileFilter) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_file_filter_get_name((*C.GtkFileFilter)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *FileFilter) GetNeeded() (_return_ C.GtkFileFilterFlags) {
	_return_ = C._gtk_file_filter_get_needed((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) SetName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_file_filter_set_name((*C.GtkFileFilter)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func FixedNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_fixed_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Fixed) Move(widget *Widget, x int, y int) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	C._gtk_fixed_move((*C.GtkFixed)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	return
}

func (_self_ *Fixed) Put(widget *Widget, x int, y int) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	C._gtk_fixed_put((*C.GtkFixed)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	return
}

func FontButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_font_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func FontButtonNewWithFont(fontname string) (_return_ *Widget) {
	_cgo_of_fontname_ := (*C.gchar)(unsafe.Pointer(C.CString(fontname)))
	_cgo_of__return__ := C._gtk_font_button_new_with_font((*C.gchar)(_cgo_of_fontname_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *FontButton) GetFontName() (_return_ string) {
	_cgo_of__return__ := C._gtk_font_button_get_font_name((*C.GtkFontButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *FontButton) GetShowSize() (_return_ bool) {
	_cgo_of__return__ := C._gtk_font_button_get_show_size((*C.GtkFontButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetShowStyle() (_return_ bool) {
	_cgo_of__return__ := C._gtk_font_button_get_show_style((*C.GtkFontButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_font_button_get_title((*C.GtkFontButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *FontButton) GetUseFont() (_return_ bool) {
	_cgo_of__return__ := C._gtk_font_button_get_use_font((*C.GtkFontButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FontButton) GetUseSize() (_return_ bool) {
	_cgo_of__return__ := C._gtk_font_button_get_use_size((*C.GtkFontButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FontButton) SetFontName(fontname string) (_return_ bool) {
	_cgo_of_fontname_ := (*C.gchar)(unsafe.Pointer(C.CString(fontname)))
	_cgo_of__return__ := C._gtk_font_button_set_font_name((*C.GtkFontButton)(_self_), (*C.gchar)(_cgo_of_fontname_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *FontButton) SetShowSize(show_size bool) () {
	_cgo_of_show_size_ := C.glibtrue()
	if !show_size {
		_cgo_of_show_size_ = C.glibfalse()
	}
	C._gtk_font_button_set_show_size((*C.GtkFontButton)(_self_), (C.gboolean)(_cgo_of_show_size_))
	return
}

func (_self_ *FontButton) SetShowStyle(show_style bool) () {
	_cgo_of_show_style_ := C.glibtrue()
	if !show_style {
		_cgo_of_show_style_ = C.glibfalse()
	}
	C._gtk_font_button_set_show_style((*C.GtkFontButton)(_self_), (C.gboolean)(_cgo_of_show_style_))
	return
}

func (_self_ *FontButton) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_font_button_set_title((*C.GtkFontButton)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *FontButton) SetUseFont(use_font bool) () {
	_cgo_of_use_font_ := C.glibtrue()
	if !use_font {
		_cgo_of_use_font_ = C.glibfalse()
	}
	C._gtk_font_button_set_use_font((*C.GtkFontButton)(_self_), (C.gboolean)(_cgo_of_use_font_))
	return
}

func (_self_ *FontButton) SetUseSize(use_size bool) () {
	_cgo_of_use_size_ := C.glibtrue()
	if !use_size {
		_cgo_of_use_size_ = C.glibfalse()
	}
	C._gtk_font_button_set_use_size((*C.GtkFontButton)(_self_), (C.gboolean)(_cgo_of_use_size_))
	return
}

func FontChooserDialogNew(title string, parent *Window) (_return_ *Widget) {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of__return__ := C._gtk_font_chooser_dialog_new((*C.gchar)(_cgo_of_title_), (*C.GtkWindow)(_cgo_of_parent_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func FontChooserWidgetNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_font_chooser_widget_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func FrameNew(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_frame_new((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Frame) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_frame_get_label((*C.GtkFrame)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Frame) GetLabelAlign() (xalign float64, yalign float64) {
	var _cgo_of_xalign_ C.gfloat
	var _cgo_of_yalign_ C.gfloat
	C._gtk_frame_get_label_align((*C.GtkFrame)(_self_), (*C.gfloat)(&_cgo_of_xalign_), (*C.gfloat)(&_cgo_of_yalign_))
	xalign = float64(_cgo_of_xalign_)
	yalign = float64(_cgo_of_yalign_)
	return
}

func (_self_ *Frame) GetLabelWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_frame_get_label_widget((*C.GtkFrame)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Frame) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C._gtk_frame_get_shadow_type((*C.GtkFrame)(_self_))
	return
}

func (_self_ *Frame) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_frame_set_label((*C.GtkFrame)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *Frame) SetLabelAlign(xalign float64, yalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	C._gtk_frame_set_label_align((*C.GtkFrame)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_))
	return
}

func (_self_ *Frame) SetLabelWidget(label_widget *Widget) () {
	_cgo_of_label_widget_ := (*C.GtkWidget)(label_widget)
	C._gtk_frame_set_label_widget((*C.GtkFrame)(_self_), (*C.GtkWidget)(_cgo_of_label_widget_))
	return
}

func (_self_ *Frame) SetShadowType(type_ C.GtkShadowType) () {
	C._gtk_frame_set_shadow_type((*C.GtkFrame)(_self_), (C.GtkShadowType)(type_))
	return
}

func GradientNewLinear(x0 float64, y0 float64, x1 float64, y1 float64) (_return_ *Gradient) {
	_cgo_of_x0_ := (C.gdouble)(x0)
	_cgo_of_y0_ := (C.gdouble)(y0)
	_cgo_of_x1_ := (C.gdouble)(x1)
	_cgo_of_y1_ := (C.gdouble)(y1)
	_cgo_of__return__ := C.gtk_gradient_new_linear((C.gdouble)(_cgo_of_x0_), (C.gdouble)(_cgo_of_y0_), (C.gdouble)(_cgo_of_x1_), (C.gdouble)(_cgo_of_y1_))
	_return_ = (*Gradient)(_cgo_of__return__)
	return
}

func GradientNewRadial(x0 float64, y0 float64, radius0 float64, x1 float64, y1 float64, radius1 float64) (_return_ *Gradient) {
	_cgo_of_x0_ := (C.gdouble)(x0)
	_cgo_of_y0_ := (C.gdouble)(y0)
	_cgo_of_radius0_ := (C.gdouble)(radius0)
	_cgo_of_x1_ := (C.gdouble)(x1)
	_cgo_of_y1_ := (C.gdouble)(y1)
	_cgo_of_radius1_ := (C.gdouble)(radius1)
	_cgo_of__return__ := C.gtk_gradient_new_radial((C.gdouble)(_cgo_of_x0_), (C.gdouble)(_cgo_of_y0_), (C.gdouble)(_cgo_of_radius0_), (C.gdouble)(_cgo_of_x1_), (C.gdouble)(_cgo_of_y1_), (C.gdouble)(_cgo_of_radius1_))
	_return_ = (*Gradient)(_cgo_of__return__)
	return
}

func (_self_ *Gradient) AddColorStop(offset float64, color *SymbolicColor) () {
	_cgo_of_offset_ := (C.gdouble)(offset)
	_cgo_of_color_ := (*C.GtkSymbolicColor)(color)
	C._gtk_gradient_add_color_stop((*C.GtkGradient)(_self_), (C.gdouble)(_cgo_of_offset_), (*C.GtkSymbolicColor)(_cgo_of_color_))
	return
}

func (_self_ *Gradient) Ref() (_return_ *Gradient) {
	_cgo_of__return__ := C._gtk_gradient_ref((*C.GtkGradient)(_self_))
	_return_ = (*Gradient)(_cgo_of__return__)
	return
}

func (_self_ *Gradient) Resolve(props *StyleProperties) (_return_ bool, resolved_gradient unsafe.Pointer) {
	_cgo_of_props_ := (*C.GtkStyleProperties)(props)
	_cgo_of__return__ := C._gtk_gradient_resolve((*C.GtkGradient)(_self_), (*C.GtkStyleProperties)(_cgo_of_props_), unsafe.Pointer(resolved_gradient))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Gradient) ResolveForContext(context *StyleContext) (_return_ *C.cairo_pattern_t) {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_return_ = C._gtk_gradient_resolve_for_context((*C.GtkGradient)(_self_), (*C.GtkStyleContext)(_cgo_of_context_))
	return
}

func (_self_ *Gradient) ToString() (_return_ *C.char) {
	_return_ = C._gtk_gradient_to_string((*C.GtkGradient)(_self_))
	return
}

func (_self_ *Gradient) Unref() () {
	C._gtk_gradient_unref((*C.GtkGradient)(_self_))
	return
}

func GridNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_grid_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Grid) Attach(child *Widget, left int, top int, width int, height int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_left_ := (C.gint)(left)
	_cgo_of_top_ := (C.gint)(top)
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_grid_attach((*C.GtkGrid)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_left_), (C.gint)(_cgo_of_top_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Grid) AttachNextTo(child *Widget, sibling *Widget, side C.GtkPositionType, width int, height int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_sibling_ := (*C.GtkWidget)(sibling)
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_grid_attach_next_to((*C.GtkGrid)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_sibling_), (C.GtkPositionType)(side), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Grid) GetChildAt(left int, top int) (_return_ *Widget) {
	_cgo_of_left_ := (C.gint)(left)
	_cgo_of_top_ := (C.gint)(top)
	_cgo_of__return__ := C._gtk_grid_get_child_at((*C.GtkGrid)(_self_), (C.gint)(_cgo_of_left_), (C.gint)(_cgo_of_top_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Grid) GetColumnHomogeneous() (_return_ bool) {
	_cgo_of__return__ := C._gtk_grid_get_column_homogeneous((*C.GtkGrid)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Grid) GetColumnSpacing() (_return_ uint) {
	_cgo_of__return__ := C._gtk_grid_get_column_spacing((*C.GtkGrid)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Grid) GetRowHomogeneous() (_return_ bool) {
	_cgo_of__return__ := C._gtk_grid_get_row_homogeneous((*C.GtkGrid)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Grid) GetRowSpacing() (_return_ uint) {
	_cgo_of__return__ := C._gtk_grid_get_row_spacing((*C.GtkGrid)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Grid) InsertColumn(position int) () {
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_grid_insert_column((*C.GtkGrid)(_self_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *Grid) InsertNextTo(sibling *Widget, side C.GtkPositionType) () {
	_cgo_of_sibling_ := (*C.GtkWidget)(sibling)
	C._gtk_grid_insert_next_to((*C.GtkGrid)(_self_), (*C.GtkWidget)(_cgo_of_sibling_), (C.GtkPositionType)(side))
	return
}

func (_self_ *Grid) InsertRow(position int) () {
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_grid_insert_row((*C.GtkGrid)(_self_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *Grid) SetColumnHomogeneous(homogeneous bool) () {
	_cgo_of_homogeneous_ := C.glibtrue()
	if !homogeneous {
		_cgo_of_homogeneous_ = C.glibfalse()
	}
	C._gtk_grid_set_column_homogeneous((*C.GtkGrid)(_self_), (C.gboolean)(_cgo_of_homogeneous_))
	return
}

func (_self_ *Grid) SetColumnSpacing(spacing uint) () {
	_cgo_of_spacing_ := (C.guint)(spacing)
	C._gtk_grid_set_column_spacing((*C.GtkGrid)(_self_), (C.guint)(_cgo_of_spacing_))
	return
}

func (_self_ *Grid) SetRowHomogeneous(homogeneous bool) () {
	_cgo_of_homogeneous_ := C.glibtrue()
	if !homogeneous {
		_cgo_of_homogeneous_ = C.glibfalse()
	}
	C._gtk_grid_set_row_homogeneous((*C.GtkGrid)(_self_), (C.gboolean)(_cgo_of_homogeneous_))
	return
}

func (_self_ *Grid) SetRowSpacing(spacing uint) () {
	_cgo_of_spacing_ := (C.guint)(spacing)
	C._gtk_grid_set_row_spacing((*C.GtkGrid)(_self_), (C.guint)(_cgo_of_spacing_))
	return
}

func HSVToRgb(h float64, s float64, v float64) (r float64, g float64, b float64) {
	_cgo_of_h_ := (C.gdouble)(h)
	_cgo_of_s_ := (C.gdouble)(s)
	_cgo_of_v_ := (C.gdouble)(v)
	var _cgo_of_r_ C.gdouble
	var _cgo_of_g_ C.gdouble
	var _cgo_of_b_ C.gdouble
	C.gtk_hsv_to_rgb((C.gdouble)(_cgo_of_h_), (C.gdouble)(_cgo_of_s_), (C.gdouble)(_cgo_of_v_), (*C.gdouble)(&_cgo_of_r_), (*C.gdouble)(&_cgo_of_g_), (*C.gdouble)(&_cgo_of_b_))
	r = float64(_cgo_of_r_)
	g = float64(_cgo_of_g_)
	b = float64(_cgo_of_b_)
	return
}

func (_self_ *IMContext) DeleteSurrounding(offset int, n_chars int) (_return_ bool) {
	_cgo_of_offset_ := (C.gint)(offset)
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	_cgo_of__return__ := C._gtk_im_context_delete_surrounding((*C.GtkIMContext)(_self_), (C.gint)(_cgo_of_offset_), (C.gint)(_cgo_of_n_chars_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IMContext) FilterKeypress(event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C._gtk_im_context_filter_keypress((*C.GtkIMContext)(_self_), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IMContext) FocusIn() () {
	C._gtk_im_context_focus_in((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) FocusOut() () {
	C._gtk_im_context_focus_out((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) GetPreeditString() (str unsafe.Pointer, attrs unsafe.Pointer, cursor_pos int) {
	var _cgo_of_cursor_pos_ C.gint
	C._gtk_im_context_get_preedit_string((*C.GtkIMContext)(_self_), unsafe.Pointer(str), unsafe.Pointer(attrs), (*C.gint)(&_cgo_of_cursor_pos_))
	cursor_pos = int(_cgo_of_cursor_pos_)
	return
}

func (_self_ *IMContext) GetSurrounding() (_return_ bool, text unsafe.Pointer, cursor_index int) {
	var _cgo_of_cursor_index_ C.gint
	_cgo_of__return__ := C._gtk_im_context_get_surrounding((*C.GtkIMContext)(_self_), unsafe.Pointer(text), (*C.gint)(&_cgo_of_cursor_index_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	cursor_index = int(_cgo_of_cursor_index_)
	return
}

func (_self_ *IMContext) Reset() () {
	C._gtk_im_context_reset((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) SetClientWindow(window *C.GdkWindow) () {
	C._gtk_im_context_set_client_window((*C.GtkIMContext)(_self_), (*C.GdkWindow)(window))
	return
}

func (_self_ *IMContext) SetCursorLocation(area *C.GdkRectangle) () {
	C._gtk_im_context_set_cursor_location((*C.GtkIMContext)(_self_), (*C.GdkRectangle)(area))
	return
}

func (_self_ *IMContext) SetSurrounding(text string, len_ int, cursor_index int) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	_cgo_of_cursor_index_ := (C.gint)(cursor_index)
	C._gtk_im_context_set_surrounding((*C.GtkIMContext)(_self_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__), (C.gint)(_cgo_of_cursor_index_))
	return
}

func (_self_ *IMContext) SetUsePreedit(use_preedit bool) () {
	_cgo_of_use_preedit_ := C.glibtrue()
	if !use_preedit {
		_cgo_of_use_preedit_ = C.glibfalse()
	}
	C._gtk_im_context_set_use_preedit((*C.GtkIMContext)(_self_), (C.gboolean)(_cgo_of_use_preedit_))
	return
}

func IMContextSimpleNew() (_return_ *IMContext) {
	_cgo_of__return__ := C.gtk_im_context_simple_new()
	_return_ = (*IMContext)(_cgo_of__return__)
	return
}

func (_self_ *IMContextSimple) AddTable(data *C.guint16, max_seq_len int, n_seqs int) () {
	_cgo_of_max_seq_len_ := (C.gint)(max_seq_len)
	_cgo_of_n_seqs_ := (C.gint)(n_seqs)
	C._gtk_im_context_simple_add_table((*C.GtkIMContextSimple)(_self_), (*C.guint16)(data), (C.gint)(_cgo_of_max_seq_len_), (C.gint)(_cgo_of_n_seqs_))
	return
}

func IMMulticontextNew() (_return_ *IMContext) {
	_cgo_of__return__ := C.gtk_im_multicontext_new()
	_return_ = (*IMContext)(_cgo_of__return__)
	return
}

func (_self_ *IMMulticontext) AppendMenuitems(menushell *MenuShell) () {
	_cgo_of_menushell_ := (*C.GtkMenuShell)(menushell)
	C._gtk_im_multicontext_append_menuitems((*C.GtkIMMulticontext)(_self_), (*C.GtkMenuShell)(_cgo_of_menushell_))
	return
}

func (_self_ *IMMulticontext) GetContextId() (_return_ *C.char) {
	_return_ = C._gtk_im_multicontext_get_context_id((*C.GtkIMMulticontext)(_self_))
	return
}

func (_self_ *IMMulticontext) SetContextId(context_id *C.char) () {
	C._gtk_im_multicontext_set_context_id((*C.GtkIMMulticontext)(_self_), (*C.char)(context_id))
	return
}

func IconFactoryNew() (_return_ *IconFactory) {
	_cgo_of__return__ := C.gtk_icon_factory_new()
	_return_ = (*IconFactory)(_cgo_of__return__)
	return
}

func IconFactoryLookupDefault(stock_id string) (_return_ *IconSet) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_icon_factory_lookup_default((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *IconFactory) Add(stock_id string, icon_set *IconSet) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of_icon_set_ := (*C.GtkIconSet)(icon_set)
	C._gtk_icon_factory_add((*C.GtkIconFactory)(_self_), (*C.gchar)(_cgo_of_stock_id_), (*C.GtkIconSet)(_cgo_of_icon_set_))
	return
}

func (_self_ *IconFactory) AddDefault() () {
	C._gtk_icon_factory_add_default((*C.GtkIconFactory)(_self_))
	return
}

func (_self_ *IconFactory) Lookup(stock_id string) (_return_ *IconSet) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_icon_factory_lookup((*C.GtkIconFactory)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *IconFactory) RemoveDefault() () {
	C._gtk_icon_factory_remove_default((*C.GtkIconFactory)(_self_))
	return
}

func IconInfoNewForPixbuf(icon_theme *IconTheme, pixbuf *C.GdkPixbuf) (_return_ *IconInfo) {
	_cgo_of_icon_theme_ := (*C.GtkIconTheme)(icon_theme)
	_cgo_of__return__ := C.gtk_icon_info_new_for_pixbuf((*C.GtkIconTheme)(_cgo_of_icon_theme_), (*C.GdkPixbuf)(pixbuf))
	_return_ = (*IconInfo)(_cgo_of__return__)
	return
}

func (_self_ *IconInfo) Copy() (_return_ *IconInfo) {
	_cgo_of__return__ := C._gtk_icon_info_copy((*C.GtkIconInfo)(_self_))
	_return_ = (*IconInfo)(_cgo_of__return__)
	return
}

func (_self_ *IconInfo) Free() () {
	C._gtk_icon_info_free((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetAttachPoints() (_return_ bool, points unsafe.Pointer, n_points int) {
	var _cgo_of_n_points_ C.gint
	_cgo_of__return__ := C._gtk_icon_info_get_attach_points((*C.GtkIconInfo)(_self_), unsafe.Pointer(points), (*C.gint)(&_cgo_of_n_points_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	n_points = int(_cgo_of_n_points_)
	return
}

func (_self_ *IconInfo) GetBaseSize() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_info_get_base_size((*C.GtkIconInfo)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconInfo) GetBuiltinPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_icon_info_get_builtin_pixbuf((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetDisplayName() (_return_ string) {
	_cgo_of__return__ := C._gtk_icon_info_get_display_name((*C.GtkIconInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *IconInfo) GetEmbeddedRect() (_return_ bool, rectangle *C.GdkRectangle) {
	var _allocated_rectangle_ C.GdkRectangle
	_cgo_of__return__ := C._gtk_icon_info_get_embedded_rect((*C.GtkIconInfo)(_self_), (*C.GdkRectangle)(&_allocated_rectangle_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	rectangle = (*C.GdkRectangle)(&_allocated_rectangle_)
	return
}

func (_self_ *IconInfo) GetFilename() (_return_ string) {
	_cgo_of__return__ := C._gtk_icon_info_get_filename((*C.GtkIconInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *IconInfo) LoadIcon() (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_icon((*C.GtkIconInfo)(_self_), unsafe.Pointer(_error_))
	return
}

func (_self_ *IconInfo) LoadSymbolic(fg *C.GdkRGBA, success_color *C.GdkRGBA, warning_color *C.GdkRGBA, error_color *C.GdkRGBA) (_return_ *C.GdkPixbuf, was_symbolic bool, _error_ unsafe.Pointer) {
	var _cgo_of_was_symbolic_ C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic((*C.GtkIconInfo)(_self_), (*C.GdkRGBA)(fg), (*C.GdkRGBA)(success_color), (*C.GdkRGBA)(warning_color), (*C.GdkRGBA)(error_color), (*C.gboolean)(&_cgo_of_was_symbolic_), unsafe.Pointer(_error_))
	was_symbolic = _cgo_of_was_symbolic_ == C.glibtrue()
	return
}

func (_self_ *IconInfo) LoadSymbolicForContext(context *StyleContext) (_return_ *C.GdkPixbuf, was_symbolic bool, _error_ unsafe.Pointer) {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	var _cgo_of_was_symbolic_ C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic_for_context((*C.GtkIconInfo)(_self_), (*C.GtkStyleContext)(_cgo_of_context_), (*C.gboolean)(&_cgo_of_was_symbolic_), unsafe.Pointer(_error_))
	was_symbolic = _cgo_of_was_symbolic_ == C.glibtrue()
	return
}

func (_self_ *IconInfo) SetRawCoordinates(raw_coordinates bool) () {
	_cgo_of_raw_coordinates_ := C.glibtrue()
	if !raw_coordinates {
		_cgo_of_raw_coordinates_ = C.glibfalse()
	}
	C._gtk_icon_info_set_raw_coordinates((*C.GtkIconInfo)(_self_), (C.gboolean)(_cgo_of_raw_coordinates_))
	return
}

func IconSetNew() (_return_ *IconSet) {
	_cgo_of__return__ := C.gtk_icon_set_new()
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func IconSetNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *IconSet) {
	_cgo_of__return__ := C.gtk_icon_set_new_from_pixbuf((*C.GdkPixbuf)(pixbuf))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *IconSet) AddSource(source *IconSource) () {
	_cgo_of_source_ := (*C.GtkIconSource)(source)
	C._gtk_icon_set_add_source((*C.GtkIconSet)(_self_), (*C.GtkIconSource)(_cgo_of_source_))
	return
}

func (_self_ *IconSet) Copy() (_return_ *IconSet) {
	_cgo_of__return__ := C._gtk_icon_set_copy((*C.GtkIconSet)(_self_))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *IconSet) GetSizes() (sizes unsafe.Pointer, n_sizes int) {
	var _cgo_of_n_sizes_ C.gint
	C._gtk_icon_set_get_sizes((*C.GtkIconSet)(_self_), unsafe.Pointer(sizes), (*C.gint)(&_cgo_of_n_sizes_))
	n_sizes = int(_cgo_of_n_sizes_)
	return
}

func (_self_ *IconSet) Ref() (_return_ *IconSet) {
	_cgo_of__return__ := C._gtk_icon_set_ref((*C.GtkIconSet)(_self_))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *IconSet) RenderIconPixbuf(context *StyleContext, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_return_ = C._gtk_icon_set_render_icon_pixbuf((*C.GtkIconSet)(_self_), (*C.GtkStyleContext)(_cgo_of_context_), (C.GtkIconSize)(size))
	return
}

func (_self_ *IconSet) Unref() () {
	C._gtk_icon_set_unref((*C.GtkIconSet)(_self_))
	return
}

func IconSourceNew() (_return_ *IconSource) {
	_cgo_of__return__ := C.gtk_icon_source_new()
	_return_ = (*IconSource)(_cgo_of__return__)
	return
}

func (_self_ *IconSource) Copy() (_return_ *IconSource) {
	_cgo_of__return__ := C._gtk_icon_source_copy((*C.GtkIconSource)(_self_))
	_return_ = (*IconSource)(_cgo_of__return__)
	return
}

func (_self_ *IconSource) Free() () {
	C._gtk_icon_source_free((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_icon_source_get_direction((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirectionWildcarded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_icon_source_get_direction_wildcarded((*C.GtkIconSource)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconSource) GetFilename() (_return_ string) {
	_cgo_of__return__ := C._gtk_icon_source_get_filename((*C.GtkIconSource)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *IconSource) GetIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_icon_source_get_icon_name((*C.GtkIconSource)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *IconSource) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_icon_source_get_pixbuf((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_source_get_size((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSizeWildcarded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_icon_source_get_size_wildcarded((*C.GtkIconSource)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconSource) GetState() (_return_ C.GtkStateType) {
	_return_ = C._gtk_icon_source_get_state((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetStateWildcarded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_icon_source_get_state_wildcarded((*C.GtkIconSource)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconSource) SetDirection(direction C.GtkTextDirection) () {
	C._gtk_icon_source_set_direction((*C.GtkIconSource)(_self_), (C.GtkTextDirection)(direction))
	return
}

func (_self_ *IconSource) SetDirectionWildcarded(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_icon_source_set_direction_wildcarded((*C.GtkIconSource)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *IconSource) SetFilename(filename string) () {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	C._gtk_icon_source_set_filename((*C.GtkIconSource)(_self_), (*C.gchar)(_cgo_of_filename_))
	return
}

func (_self_ *IconSource) SetIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_icon_source_set_icon_name((*C.GtkIconSource)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *IconSource) SetPixbuf(pixbuf *C.GdkPixbuf) () {
	C._gtk_icon_source_set_pixbuf((*C.GtkIconSource)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *IconSource) SetSize(size C.GtkIconSize) () {
	C._gtk_icon_source_set_size((*C.GtkIconSource)(_self_), (C.GtkIconSize)(size))
	return
}

func (_self_ *IconSource) SetSizeWildcarded(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_icon_source_set_size_wildcarded((*C.GtkIconSource)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *IconSource) SetState(state C.GtkStateType) () {
	C._gtk_icon_source_set_state((*C.GtkIconSource)(_self_), (C.GtkStateType)(state))
	return
}

func (_self_ *IconSource) SetStateWildcarded(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_icon_source_set_state_wildcarded((*C.GtkIconSource)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func IconThemeNew() (_return_ *IconTheme) {
	_cgo_of__return__ := C.gtk_icon_theme_new()
	_return_ = (*IconTheme)(_cgo_of__return__)
	return
}

func IconThemeAddBuiltinIcon(icon_name string, size int, pixbuf *C.GdkPixbuf) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of_size_ := (C.gint)(size)
	C._gtk_icon_theme_add_builtin_icon((*C.gchar)(_cgo_of_icon_name_), (C.gint)(_cgo_of_size_), (*C.GdkPixbuf)(pixbuf))
	return
}

func IconThemeGetDefault() (_return_ *IconTheme) {
	_cgo_of__return__ := C.gtk_icon_theme_get_default()
	_return_ = (*IconTheme)(_cgo_of__return__)
	return
}

func IconThemeGetForScreen(screen *C.GdkScreen) (_return_ *IconTheme) {
	_cgo_of__return__ := C.gtk_icon_theme_get_for_screen((*C.GdkScreen)(screen))
	_return_ = (*IconTheme)(_cgo_of__return__)
	return
}

func (_self_ *IconTheme) AppendSearchPath(path string) () {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	C._gtk_icon_theme_append_search_path((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_path_))
	return
}

func (_self_ *IconTheme) ChooseIcon(icon_names string, size int, flags C.GtkIconLookupFlags) (_return_ *IconInfo) {
	_cgo_of_icon_names_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_names)))
	_cgo_of_size_ := (C.gint)(size)
	_cgo_of__return__ := C._gtk_icon_theme_choose_icon((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_icon_names_), (C.gint)(_cgo_of_size_), (C.GtkIconLookupFlags)(flags))
	_return_ = (*IconInfo)(_cgo_of__return__)
	return
}

func (_self_ *IconTheme) GetExampleIconName() (_return_ *C.char) {
	_return_ = C._gtk_icon_theme_get_example_icon_name((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) GetIconSizes(icon_name string) (_return_ *C.gint) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_return_ = C._gtk_icon_theme_get_icon_sizes((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *IconTheme) GetSearchPath() (path unsafe.Pointer, n_elements int) {
	var _cgo_of_n_elements_ C.gint
	C._gtk_icon_theme_get_search_path((*C.GtkIconTheme)(_self_), unsafe.Pointer(path), (*C.gint)(&_cgo_of_n_elements_))
	n_elements = int(_cgo_of_n_elements_)
	return
}

func (_self_ *IconTheme) HasIcon(icon_name string) (_return_ bool) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of__return__ := C._gtk_icon_theme_has_icon((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconTheme) ListContexts() (_return_ *C.GList) {
	_return_ = C._gtk_icon_theme_list_contexts((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) ListIcons(context string) (_return_ *C.GList) {
	_cgo_of_context_ := (*C.gchar)(unsafe.Pointer(C.CString(context)))
	_return_ = C._gtk_icon_theme_list_icons((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_context_))
	return
}

func (_self_ *IconTheme) LoadIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of_size_ := (C.gint)(size)
	_return_ = C._gtk_icon_theme_load_icon((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_icon_name_), (C.gint)(_cgo_of_size_), (C.GtkIconLookupFlags)(flags), unsafe.Pointer(_error_))
	return
}

func (_self_ *IconTheme) LookupByGicon(icon *C.GIcon, size int, flags C.GtkIconLookupFlags) (_return_ *IconInfo) {
	_cgo_of_size_ := (C.gint)(size)
	_cgo_of__return__ := C._gtk_icon_theme_lookup_by_gicon((*C.GtkIconTheme)(_self_), (*C.GIcon)(icon), (C.gint)(_cgo_of_size_), (C.GtkIconLookupFlags)(flags))
	_return_ = (*IconInfo)(_cgo_of__return__)
	return
}

func (_self_ *IconTheme) LookupIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_return_ *IconInfo) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of_size_ := (C.gint)(size)
	_cgo_of__return__ := C._gtk_icon_theme_lookup_icon((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_icon_name_), (C.gint)(_cgo_of_size_), (C.GtkIconLookupFlags)(flags))
	_return_ = (*IconInfo)(_cgo_of__return__)
	return
}

func (_self_ *IconTheme) PrependSearchPath(path string) () {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	C._gtk_icon_theme_prepend_search_path((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_path_))
	return
}

func (_self_ *IconTheme) RescanIfNeeded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_icon_theme_rescan_if_needed((*C.GtkIconTheme)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconTheme) SetCustomTheme(theme_name string) () {
	_cgo_of_theme_name_ := (*C.gchar)(unsafe.Pointer(C.CString(theme_name)))
	C._gtk_icon_theme_set_custom_theme((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_theme_name_))
	return
}

func (_self_ *IconTheme) SetScreen(screen *C.GdkScreen) () {
	C._gtk_icon_theme_set_screen((*C.GtkIconTheme)(_self_), (*C.GdkScreen)(screen))
	return
}

func (_self_ *IconTheme) SetSearchPath(path string, n_elements int) () {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of_n_elements_ := (C.gint)(n_elements)
	C._gtk_icon_theme_set_search_path((*C.GtkIconTheme)(_self_), (*C.gchar)(_cgo_of_path_), (C.gint)(_cgo_of_n_elements_))
	return
}

func IconViewNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_icon_view_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func IconViewNewWithArea(area *CellArea) (_return_ *Widget) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of__return__ := C.gtk_icon_view_new_with_area((*C.GtkCellArea)(_cgo_of_area_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func IconViewNewWithModel(model *C.GtkTreeModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_icon_view_new_with_model((*C.GtkTreeModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *IconView) ConvertWidgetToBinWindowCoords(wx int, wy int) (bx int, by int) {
	_cgo_of_wx_ := (C.gint)(wx)
	_cgo_of_wy_ := (C.gint)(wy)
	var _cgo_of_bx_ C.gint
	var _cgo_of_by_ C.gint
	C._gtk_icon_view_convert_widget_to_bin_window_coords((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_wx_), (C.gint)(_cgo_of_wy_), (*C.gint)(&_cgo_of_bx_), (*C.gint)(&_cgo_of_by_))
	bx = int(_cgo_of_bx_)
	by = int(_cgo_of_by_)
	return
}

func (_self_ *IconView) CreateDragIcon(path *TreePath) (_return_ *C.cairo_surface_t) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_return_ = C._gtk_icon_view_create_drag_icon((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *IconView) EnableModelDragDest(targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_icon_view_enable_model_drag_dest((*C.GtkIconView)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *IconView) EnableModelDragSource(start_button_mask C.GdkModifierType, targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_icon_view_enable_model_drag_source((*C.GtkIconView)(_self_), (C.GdkModifierType)(start_button_mask), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *IconView) GetCellRect(path *TreePath, cell *CellRenderer) (_return_ bool, rect *C.GdkRectangle) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	var _allocated_rect_ C.GdkRectangle
	_cgo_of__return__ := C._gtk_icon_view_get_cell_rect((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkCellRenderer)(_cgo_of_cell_), (*C.GdkRectangle)(&_allocated_rect_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	rect = (*C.GdkRectangle)(&_allocated_rect_)
	return
}

func (_self_ *IconView) GetColumnSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_column_spacing((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetColumns() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_columns((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetCursor() (_return_ bool, path unsafe.Pointer, cell unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_icon_view_get_cursor((*C.GtkIconView)(_self_), unsafe.Pointer(path), unsafe.Pointer(cell))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) GetDestItemAtPos(drag_x int, drag_y int) (_return_ bool, path unsafe.Pointer, pos *C.GtkIconViewDropPosition) {
	_cgo_of_drag_x_ := (C.gint)(drag_x)
	_cgo_of_drag_y_ := (C.gint)(drag_y)
	_cgo_of__return__ := C._gtk_icon_view_get_dest_item_at_pos((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_drag_x_), (C.gint)(_cgo_of_drag_y_), unsafe.Pointer(path), (*C.GtkIconViewDropPosition)(pos))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) GetDragDestItem() (path unsafe.Pointer, pos *C.GtkIconViewDropPosition) {
	C._gtk_icon_view_get_drag_dest_item((*C.GtkIconView)(_self_), unsafe.Pointer(path), (*C.GtkIconViewDropPosition)(pos))
	return
}

func (_self_ *IconView) GetItemAtPos(x int, y int) (_return_ bool, path unsafe.Pointer, cell unsafe.Pointer) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_icon_view_get_item_at_pos((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_), unsafe.Pointer(path), unsafe.Pointer(cell))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) GetItemColumn(path *TreePath) (_return_ int) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_icon_view_get_item_column((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetItemOrientation() (_return_ C.GtkOrientation) {
	_return_ = C._gtk_icon_view_get_item_orientation((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetItemPadding() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_item_padding((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetItemRow(path *TreePath) (_return_ int) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_icon_view_get_item_row((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetItemWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_item_width((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetMargin() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_margin((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetMarkupColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_markup_column((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_icon_view_get_model((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetPathAtPos(x int, y int) (_return_ *TreePath) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_icon_view_get_path_at_pos((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetPixbufColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_pixbuf_column((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetReorderable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_icon_view_get_reorderable((*C.GtkIconView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) GetRowSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_row_spacing((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetSelectedItems() (_return_ *C.GList) {
	_return_ = C._gtk_icon_view_get_selected_items((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSelectionMode() (_return_ C.GtkSelectionMode) {
	_return_ = C._gtk_icon_view_get_selection_mode((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_spacing((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetTextColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_text_column((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetTooltipColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_icon_view_get_tooltip_column((*C.GtkIconView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *IconView) GetVisibleRange() (_return_ bool, start_path unsafe.Pointer, end_path unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_icon_view_get_visible_range((*C.GtkIconView)(_self_), unsafe.Pointer(start_path), unsafe.Pointer(end_path))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) ItemActivated(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_icon_view_item_activated((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *IconView) PathIsSelected(path *TreePath) (_return_ bool) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_icon_view_path_is_selected((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *IconView) ScrollToPath(path *TreePath, use_align bool, row_align float64, col_align float64) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_use_align_ := C.glibtrue()
	if !use_align {
		_cgo_of_use_align_ = C.glibfalse()
	}
	_cgo_of_row_align_ := (C.gfloat)(row_align)
	_cgo_of_col_align_ := (C.gfloat)(col_align)
	C._gtk_icon_view_scroll_to_path((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (C.gboolean)(_cgo_of_use_align_), (C.gfloat)(_cgo_of_row_align_), (C.gfloat)(_cgo_of_col_align_))
	return
}

func (_self_ *IconView) SelectAll() () {
	C._gtk_icon_view_select_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) SelectPath(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_icon_view_select_path((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *IconView) SelectedForeach(func_ C.GtkIconViewForeachFunc, data C.gpointer) () {
	C._gtk_icon_view_selected_foreach((*C.GtkIconView)(_self_), (C.GtkIconViewForeachFunc)(func_), (C.gpointer)(data))
	return
}

func (_self_ *IconView) SetColumnSpacing(column_spacing int) () {
	_cgo_of_column_spacing_ := (C.gint)(column_spacing)
	C._gtk_icon_view_set_column_spacing((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_column_spacing_))
	return
}

func (_self_ *IconView) SetColumns(columns int) () {
	_cgo_of_columns_ := (C.gint)(columns)
	C._gtk_icon_view_set_columns((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_columns_))
	return
}

func (_self_ *IconView) SetCursor(path *TreePath, cell *CellRenderer, start_editing bool) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	_cgo_of_start_editing_ := C.glibtrue()
	if !start_editing {
		_cgo_of_start_editing_ = C.glibfalse()
	}
	C._gtk_icon_view_set_cursor((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkCellRenderer)(_cgo_of_cell_), (C.gboolean)(_cgo_of_start_editing_))
	return
}

func (_self_ *IconView) SetDragDestItem(path *TreePath, pos C.GtkIconViewDropPosition) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_icon_view_set_drag_dest_item((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (C.GtkIconViewDropPosition)(pos))
	return
}

func (_self_ *IconView) SetItemOrientation(orientation C.GtkOrientation) () {
	C._gtk_icon_view_set_item_orientation((*C.GtkIconView)(_self_), (C.GtkOrientation)(orientation))
	return
}

func (_self_ *IconView) SetItemPadding(item_padding int) () {
	_cgo_of_item_padding_ := (C.gint)(item_padding)
	C._gtk_icon_view_set_item_padding((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_item_padding_))
	return
}

func (_self_ *IconView) SetItemWidth(item_width int) () {
	_cgo_of_item_width_ := (C.gint)(item_width)
	C._gtk_icon_view_set_item_width((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_item_width_))
	return
}

func (_self_ *IconView) SetMargin(margin int) () {
	_cgo_of_margin_ := (C.gint)(margin)
	C._gtk_icon_view_set_margin((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_margin_))
	return
}

func (_self_ *IconView) SetMarkupColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_icon_view_set_markup_column((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *IconView) SetModel(model *C.GtkTreeModel) () {
	C._gtk_icon_view_set_model((*C.GtkIconView)(_self_), (*C.GtkTreeModel)(model))
	return
}

func (_self_ *IconView) SetPixbufColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_icon_view_set_pixbuf_column((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *IconView) SetReorderable(reorderable bool) () {
	_cgo_of_reorderable_ := C.glibtrue()
	if !reorderable {
		_cgo_of_reorderable_ = C.glibfalse()
	}
	C._gtk_icon_view_set_reorderable((*C.GtkIconView)(_self_), (C.gboolean)(_cgo_of_reorderable_))
	return
}

func (_self_ *IconView) SetRowSpacing(row_spacing int) () {
	_cgo_of_row_spacing_ := (C.gint)(row_spacing)
	C._gtk_icon_view_set_row_spacing((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_row_spacing_))
	return
}

func (_self_ *IconView) SetSelectionMode(mode C.GtkSelectionMode) () {
	C._gtk_icon_view_set_selection_mode((*C.GtkIconView)(_self_), (C.GtkSelectionMode)(mode))
	return
}

func (_self_ *IconView) SetSpacing(spacing int) () {
	_cgo_of_spacing_ := (C.gint)(spacing)
	C._gtk_icon_view_set_spacing((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_spacing_))
	return
}

func (_self_ *IconView) SetTextColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_icon_view_set_text_column((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *IconView) SetTooltipCell(tooltip *Tooltip, path *TreePath, cell *CellRenderer) () {
	_cgo_of_tooltip_ := (*C.GtkTooltip)(tooltip)
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	C._gtk_icon_view_set_tooltip_cell((*C.GtkIconView)(_self_), (*C.GtkTooltip)(_cgo_of_tooltip_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkCellRenderer)(_cgo_of_cell_))
	return
}

func (_self_ *IconView) SetTooltipColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_icon_view_set_tooltip_column((*C.GtkIconView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *IconView) SetTooltipItem(tooltip *Tooltip, path *TreePath) () {
	_cgo_of_tooltip_ := (*C.GtkTooltip)(tooltip)
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_icon_view_set_tooltip_item((*C.GtkIconView)(_self_), (*C.GtkTooltip)(_cgo_of_tooltip_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *IconView) UnselectAll() () {
	C._gtk_icon_view_unselect_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnselectPath(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_icon_view_unselect_path((*C.GtkIconView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *IconView) UnsetModelDragDest() () {
	C._gtk_icon_view_unset_model_drag_dest((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnsetModelDragSource() () {
	C._gtk_icon_view_unset_model_drag_source((*C.GtkIconView)(_self_))
	return
}

func ImageNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_image_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromAnimation(animation *C.GdkPixbufAnimation) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_image_new_from_animation((*C.GdkPixbufAnimation)(animation))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromFile(filename string) (_return_ *Widget) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C.gtk_image_new_from_file((*C.gchar)(_cgo_of_filename_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromGicon(icon *C.GIcon, size C.GtkIconSize) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_image_new_from_gicon((*C.GIcon)(icon), (C.GtkIconSize)(size))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromIconName(icon_name string, size C.GtkIconSize) (_return_ *Widget) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of__return__ := C._gtk_image_new_from_icon_name((*C.gchar)(_cgo_of_icon_name_), (C.GtkIconSize)(size))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromIconSet(icon_set *IconSet, size C.GtkIconSize) (_return_ *Widget) {
	_cgo_of_icon_set_ := (*C.GtkIconSet)(icon_set)
	_cgo_of__return__ := C.gtk_image_new_from_icon_set((*C.GtkIconSet)(_cgo_of_icon_set_), (C.GtkIconSize)(size))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_image_new_from_pixbuf((*C.GdkPixbuf)(pixbuf))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromResource(resource_path string) (_return_ *Widget) {
	_cgo_of_resource_path_ := (*C.gchar)(unsafe.Pointer(C.CString(resource_path)))
	_cgo_of__return__ := C._gtk_image_new_from_resource((*C.gchar)(_cgo_of_resource_path_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageNewFromStock(stock_id string, size C.GtkIconSize) (_return_ *Widget) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_image_new_from_stock((*C.gchar)(_cgo_of_stock_id_), (C.GtkIconSize)(size))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Image) Clear() () {
	C._gtk_image_clear((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetAnimation() (_return_ *C.GdkPixbufAnimation) {
	_return_ = C._gtk_image_get_animation((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetGicon() (gicon unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_gicon((*C.GtkImage)(_self_), unsafe.Pointer(gicon), (*C.GtkIconSize)(&size))
	return
}

func (_self_ *Image) GetIconName() (icon_name unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_icon_name((*C.GtkImage)(_self_), unsafe.Pointer(icon_name), (*C.GtkIconSize)(&size))
	return
}

func (_self_ *Image) GetIconSet() (icon_set unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_icon_set((*C.GtkImage)(_self_), unsafe.Pointer(icon_set), (*C.GtkIconSize)(&size))
	return
}

func (_self_ *Image) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_image_get_pixbuf((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetPixelSize() (_return_ int) {
	_cgo_of__return__ := C._gtk_image_get_pixel_size((*C.GtkImage)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Image) GetStock() (stock_id unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_stock((*C.GtkImage)(_self_), unsafe.Pointer(stock_id), (*C.GtkIconSize)(&size))
	return
}

func (_self_ *Image) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C._gtk_image_get_storage_type((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) SetFromAnimation(animation *C.GdkPixbufAnimation) () {
	C._gtk_image_set_from_animation((*C.GtkImage)(_self_), (*C.GdkPixbufAnimation)(animation))
	return
}

func (_self_ *Image) SetFromFile(filename string) () {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	C._gtk_image_set_from_file((*C.GtkImage)(_self_), (*C.gchar)(_cgo_of_filename_))
	return
}

func (_self_ *Image) SetFromGicon(icon *C.GIcon, size C.GtkIconSize) () {
	C._gtk_image_set_from_gicon((*C.GtkImage)(_self_), (*C.GIcon)(icon), (C.GtkIconSize)(size))
	return
}

func (_self_ *Image) SetFromIconName(icon_name string, size C.GtkIconSize) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_image_set_from_icon_name((*C.GtkImage)(_self_), (*C.gchar)(_cgo_of_icon_name_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Image) SetFromIconSet(icon_set *IconSet, size C.GtkIconSize) () {
	_cgo_of_icon_set_ := (*C.GtkIconSet)(icon_set)
	C._gtk_image_set_from_icon_set((*C.GtkImage)(_self_), (*C.GtkIconSet)(_cgo_of_icon_set_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Image) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C._gtk_image_set_from_pixbuf((*C.GtkImage)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *Image) SetFromResource(resource_path string) () {
	_cgo_of_resource_path_ := (*C.gchar)(unsafe.Pointer(C.CString(resource_path)))
	C._gtk_image_set_from_resource((*C.GtkImage)(_self_), (*C.gchar)(_cgo_of_resource_path_))
	return
}

func (_self_ *Image) SetFromStock(stock_id string, size C.GtkIconSize) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_image_set_from_stock((*C.GtkImage)(_self_), (*C.gchar)(_cgo_of_stock_id_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Image) SetPixelSize(pixel_size int) () {
	_cgo_of_pixel_size_ := (C.gint)(pixel_size)
	C._gtk_image_set_pixel_size((*C.GtkImage)(_self_), (C.gint)(_cgo_of_pixel_size_))
	return
}

func ImageMenuItemNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_image_menu_item_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageMenuItemNewFromStock(stock_id string, accel_group *AccelGroup) (_return_ *Widget) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	_cgo_of__return__ := C._gtk_image_menu_item_new_from_stock((*C.gchar)(_cgo_of_stock_id_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageMenuItemNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_image_menu_item_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ImageMenuItemNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_image_menu_item_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ImageMenuItem) GetAlwaysShowImage() (_return_ bool) {
	_cgo_of__return__ := C._gtk_image_menu_item_get_always_show_image((*C.GtkImageMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ImageMenuItem) GetImage() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_image_menu_item_get_image((*C.GtkImageMenuItem)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ImageMenuItem) GetUseStock() (_return_ bool) {
	_cgo_of__return__ := C._gtk_image_menu_item_get_use_stock((*C.GtkImageMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ImageMenuItem) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_image_menu_item_set_accel_group((*C.GtkImageMenuItem)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *ImageMenuItem) SetAlwaysShowImage(always_show bool) () {
	_cgo_of_always_show_ := C.glibtrue()
	if !always_show {
		_cgo_of_always_show_ = C.glibfalse()
	}
	C._gtk_image_menu_item_set_always_show_image((*C.GtkImageMenuItem)(_self_), (C.gboolean)(_cgo_of_always_show_))
	return
}

func (_self_ *ImageMenuItem) SetImage(image *Widget) () {
	_cgo_of_image_ := (*C.GtkWidget)(image)
	C._gtk_image_menu_item_set_image((*C.GtkImageMenuItem)(_self_), (*C.GtkWidget)(_cgo_of_image_))
	return
}

func (_self_ *ImageMenuItem) SetUseStock(use_stock bool) () {
	_cgo_of_use_stock_ := C.glibtrue()
	if !use_stock {
		_cgo_of_use_stock_ = C.glibfalse()
	}
	C._gtk_image_menu_item_set_use_stock((*C.GtkImageMenuItem)(_self_), (C.gboolean)(_cgo_of_use_stock_))
	return
}

func InfoBarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_info_bar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *InfoBar) AddActionWidget(child *Widget, response_id int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_info_bar_add_action_widget((*C.GtkInfoBar)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *InfoBar) AddButton(button_text string, response_id int) (_return_ *Widget) {
	_cgo_of_button_text_ := (*C.gchar)(unsafe.Pointer(C.CString(button_text)))
	_cgo_of_response_id_ := (C.gint)(response_id)
	_cgo_of__return__ := C._gtk_info_bar_add_button((*C.GtkInfoBar)(_self_), (*C.gchar)(_cgo_of_button_text_), (C.gint)(_cgo_of_response_id_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *InfoBar) GetActionArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_info_bar_get_action_area((*C.GtkInfoBar)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *InfoBar) GetContentArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_info_bar_get_content_area((*C.GtkInfoBar)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *InfoBar) GetMessageType() (_return_ C.GtkMessageType) {
	_return_ = C._gtk_info_bar_get_message_type((*C.GtkInfoBar)(_self_))
	return
}

func (_self_ *InfoBar) Response(response_id int) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_info_bar_response((*C.GtkInfoBar)(_self_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *InfoBar) SetDefaultResponse(response_id int) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	C._gtk_info_bar_set_default_response((*C.GtkInfoBar)(_self_), (C.gint)(_cgo_of_response_id_))
	return
}

func (_self_ *InfoBar) SetMessageType(message_type C.GtkMessageType) () {
	C._gtk_info_bar_set_message_type((*C.GtkInfoBar)(_self_), (C.GtkMessageType)(message_type))
	return
}

func (_self_ *InfoBar) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_of_response_id_ := (C.gint)(response_id)
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_info_bar_set_response_sensitive((*C.GtkInfoBar)(_self_), (C.gint)(_cgo_of_response_id_), (C.gboolean)(_cgo_of_setting_))
	return
}

func InvisibleNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_invisible_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func InvisibleNewForScreen(screen *C.GdkScreen) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_invisible_new_for_screen((*C.GdkScreen)(screen))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Invisible) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_invisible_get_screen((*C.GtkInvisible)(_self_))
	return
}

func (_self_ *Invisible) SetScreen(screen *C.GdkScreen) () {
	C._gtk_invisible_set_screen((*C.GtkInvisible)(_self_), (*C.GdkScreen)(screen))
	return
}

func LabelNew(str string) (_return_ *Widget) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of__return__ := C._gtk_label_new((*C.gchar)(_cgo_of_str_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func LabelNewWithMnemonic(str string) (_return_ *Widget) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of__return__ := C._gtk_label_new_with_mnemonic((*C.gchar)(_cgo_of_str_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Label) GetAngle() (_return_ float64) {
	_cgo_of__return__ := C._gtk_label_get_angle((*C.GtkLabel)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Label) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C._gtk_label_get_attributes((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetCurrentUri() (_return_ string) {
	_cgo_of__return__ := C._gtk_label_get_current_uri((*C.GtkLabel)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Label) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C._gtk_label_get_ellipsize((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetJustify() (_return_ C.GtkJustification) {
	_return_ = C._gtk_label_get_justify((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_label_get_label((*C.GtkLabel)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Label) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C._gtk_label_get_layout((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLayoutOffsets() (x int, y int) {
	var _cgo_of_x_ C.gint
	var _cgo_of_y_ C.gint
	C._gtk_label_get_layout_offsets((*C.GtkLabel)(_self_), (*C.gint)(&_cgo_of_x_), (*C.gint)(&_cgo_of_y_))
	x = int(_cgo_of_x_)
	y = int(_cgo_of_y_)
	return
}

func (_self_ *Label) GetLineWrap() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_line_wrap((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetLineWrapMode() (_return_ C.PangoWrapMode) {
	_return_ = C._gtk_label_get_line_wrap_mode((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetMaxWidthChars() (_return_ int) {
	_cgo_of__return__ := C._gtk_label_get_max_width_chars((*C.GtkLabel)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Label) GetMnemonicKeyval() (_return_ uint) {
	_cgo_of__return__ := C._gtk_label_get_mnemonic_keyval((*C.GtkLabel)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Label) GetMnemonicWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_label_get_mnemonic_widget((*C.GtkLabel)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Label) GetSelectable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_selectable((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetSelectionBounds() (_return_ bool, start int, end int) {
	var _cgo_of_start_ C.gint
	var _cgo_of_end_ C.gint
	_cgo_of__return__ := C._gtk_label_get_selection_bounds((*C.GtkLabel)(_self_), (*C.gint)(&_cgo_of_start_), (*C.gint)(&_cgo_of_end_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	start = int(_cgo_of_start_)
	end = int(_cgo_of_end_)
	return
}

func (_self_ *Label) GetSingleLineMode() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_single_line_mode((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetText() (_return_ string) {
	_cgo_of__return__ := C._gtk_label_get_text((*C.GtkLabel)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Label) GetTrackVisitedLinks() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_track_visited_links((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetUseMarkup() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_use_markup((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetUseUnderline() (_return_ bool) {
	_cgo_of__return__ := C._gtk_label_get_use_underline((*C.GtkLabel)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Label) GetWidthChars() (_return_ int) {
	_cgo_of__return__ := C._gtk_label_get_width_chars((*C.GtkLabel)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Label) SelectRegion(start_offset int, end_offset int) () {
	_cgo_of_start_offset_ := (C.gint)(start_offset)
	_cgo_of_end_offset_ := (C.gint)(end_offset)
	C._gtk_label_select_region((*C.GtkLabel)(_self_), (C.gint)(_cgo_of_start_offset_), (C.gint)(_cgo_of_end_offset_))
	return
}

func (_self_ *Label) SetAngle(angle float64) () {
	_cgo_of_angle_ := (C.gdouble)(angle)
	C._gtk_label_set_angle((*C.GtkLabel)(_self_), (C.gdouble)(_cgo_of_angle_))
	return
}

func (_self_ *Label) SetAttributes(attrs *C.PangoAttrList) () {
	C._gtk_label_set_attributes((*C.GtkLabel)(_self_), (*C.PangoAttrList)(attrs))
	return
}

func (_self_ *Label) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C._gtk_label_set_ellipsize((*C.GtkLabel)(_self_), (C.PangoEllipsizeMode)(mode))
	return
}

func (_self_ *Label) SetJustify(jtype C.GtkJustification) () {
	C._gtk_label_set_justify((*C.GtkLabel)(_self_), (C.GtkJustification)(jtype))
	return
}

func (_self_ *Label) SetLabel(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_label_set_label((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Label) SetLineWrap(wrap bool) () {
	_cgo_of_wrap_ := C.glibtrue()
	if !wrap {
		_cgo_of_wrap_ = C.glibfalse()
	}
	C._gtk_label_set_line_wrap((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_wrap_))
	return
}

func (_self_ *Label) SetLineWrapMode(wrap_mode C.PangoWrapMode) () {
	C._gtk_label_set_line_wrap_mode((*C.GtkLabel)(_self_), (C.PangoWrapMode)(wrap_mode))
	return
}

func (_self_ *Label) SetMarkup(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_label_set_markup((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Label) SetMarkupWithMnemonic(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_label_set_markup_with_mnemonic((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Label) SetMaxWidthChars(n_chars int) () {
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	C._gtk_label_set_max_width_chars((*C.GtkLabel)(_self_), (C.gint)(_cgo_of_n_chars_))
	return
}

func (_self_ *Label) SetMnemonicWidget(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_label_set_mnemonic_widget((*C.GtkLabel)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *Label) SetPattern(pattern string) () {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	C._gtk_label_set_pattern((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_pattern_))
	return
}

func (_self_ *Label) SetSelectable(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_label_set_selectable((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Label) SetSingleLineMode(single_line_mode bool) () {
	_cgo_of_single_line_mode_ := C.glibtrue()
	if !single_line_mode {
		_cgo_of_single_line_mode_ = C.glibfalse()
	}
	C._gtk_label_set_single_line_mode((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_single_line_mode_))
	return
}

func (_self_ *Label) SetText(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_label_set_text((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Label) SetTextWithMnemonic(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_label_set_text_with_mnemonic((*C.GtkLabel)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Label) SetTrackVisitedLinks(track_links bool) () {
	_cgo_of_track_links_ := C.glibtrue()
	if !track_links {
		_cgo_of_track_links_ = C.glibfalse()
	}
	C._gtk_label_set_track_visited_links((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_track_links_))
	return
}

func (_self_ *Label) SetUseMarkup(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_label_set_use_markup((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Label) SetUseUnderline(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_label_set_use_underline((*C.GtkLabel)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Label) SetWidthChars(n_chars int) () {
	_cgo_of_n_chars_ := (C.gint)(n_chars)
	C._gtk_label_set_width_chars((*C.GtkLabel)(_self_), (C.gint)(_cgo_of_n_chars_))
	return
}

func LayoutNew(hadjustment *Adjustment, vadjustment *Adjustment) (_return_ *Widget) {
	_cgo_of_hadjustment_ := (*C.GtkAdjustment)(hadjustment)
	_cgo_of_vadjustment_ := (*C.GtkAdjustment)(vadjustment)
	_cgo_of__return__ := C.gtk_layout_new((*C.GtkAdjustment)(_cgo_of_hadjustment_), (*C.GtkAdjustment)(_cgo_of_vadjustment_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Layout) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_layout_get_bin_window((*C.GtkLayout)(_self_))
	return
}

func (_self_ *Layout) GetSize() (width uint, height uint) {
	var _cgo_of_width_ C.guint
	var _cgo_of_height_ C.guint
	C._gtk_layout_get_size((*C.GtkLayout)(_self_), (*C.guint)(&_cgo_of_width_), (*C.guint)(&_cgo_of_height_))
	width = uint(_cgo_of_width_)
	height = uint(_cgo_of_height_)
	return
}

func (_self_ *Layout) Move(child_widget *Widget, x int, y int) () {
	_cgo_of_child_widget_ := (*C.GtkWidget)(child_widget)
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	C._gtk_layout_move((*C.GtkLayout)(_self_), (*C.GtkWidget)(_cgo_of_child_widget_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	return
}

func (_self_ *Layout) Put(child_widget *Widget, x int, y int) () {
	_cgo_of_child_widget_ := (*C.GtkWidget)(child_widget)
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	C._gtk_layout_put((*C.GtkLayout)(_self_), (*C.GtkWidget)(_cgo_of_child_widget_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	return
}

func (_self_ *Layout) SetSize(width uint, height uint) () {
	_cgo_of_width_ := (C.guint)(width)
	_cgo_of_height_ := (C.guint)(height)
	C._gtk_layout_set_size((*C.GtkLayout)(_self_), (C.guint)(_cgo_of_width_), (C.guint)(_cgo_of_height_))
	return
}

func LevelBarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_level_bar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func LevelBarNewForInterval(min_value float64, max_value float64) (_return_ *Widget) {
	_cgo_of_min_value_ := (C.gdouble)(min_value)
	_cgo_of_max_value_ := (C.gdouble)(max_value)
	_cgo_of__return__ := C.gtk_level_bar_new_for_interval((C.gdouble)(_cgo_of_min_value_), (C.gdouble)(_cgo_of_max_value_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *LevelBar) AddOffsetValue(name string, value float64) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_level_bar_add_offset_value((*C.GtkLevelBar)(_self_), (*C.gchar)(_cgo_of_name_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *LevelBar) GetMaxValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_level_bar_get_max_value((*C.GtkLevelBar)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *LevelBar) GetMinValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_level_bar_get_min_value((*C.GtkLevelBar)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *LevelBar) GetMode() (_return_ C.GtkLevelBarMode) {
	_return_ = C._gtk_level_bar_get_mode((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) GetOffsetValue(name string) (_return_ bool, value float64) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	var _cgo_of_value_ C.gdouble
	_cgo_of__return__ := C._gtk_level_bar_get_offset_value((*C.GtkLevelBar)(_self_), (*C.gchar)(_cgo_of_name_), (*C.gdouble)(&_cgo_of_value_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	value = float64(_cgo_of_value_)
	return
}

func (_self_ *LevelBar) GetValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_level_bar_get_value((*C.GtkLevelBar)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *LevelBar) RemoveOffsetValue(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_level_bar_remove_offset_value((*C.GtkLevelBar)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *LevelBar) SetMaxValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_level_bar_set_max_value((*C.GtkLevelBar)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *LevelBar) SetMinValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_level_bar_set_min_value((*C.GtkLevelBar)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *LevelBar) SetMode(mode C.GtkLevelBarMode) () {
	C._gtk_level_bar_set_mode((*C.GtkLevelBar)(_self_), (C.GtkLevelBarMode)(mode))
	return
}

func (_self_ *LevelBar) SetValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_level_bar_set_value((*C.GtkLevelBar)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func LinkButtonNew(uri string) (_return_ *Widget) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of__return__ := C._gtk_link_button_new((*C.gchar)(_cgo_of_uri_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func LinkButtonNewWithLabel(uri string, label string) (_return_ *Widget) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_link_button_new_with_label((*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *LinkButton) GetUri() (_return_ string) {
	_cgo_of__return__ := C._gtk_link_button_get_uri((*C.GtkLinkButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *LinkButton) GetVisited() (_return_ bool) {
	_cgo_of__return__ := C._gtk_link_button_get_visited((*C.GtkLinkButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *LinkButton) SetUri(uri string) () {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	C._gtk_link_button_set_uri((*C.GtkLinkButton)(_self_), (*C.gchar)(_cgo_of_uri_))
	return
}

func (_self_ *LinkButton) SetVisited(visited bool) () {
	_cgo_of_visited_ := C.glibtrue()
	if !visited {
		_cgo_of_visited_ = C.glibfalse()
	}
	C._gtk_link_button_set_visited((*C.GtkLinkButton)(_self_), (C.gboolean)(_cgo_of_visited_))
	return
}

func ListStoreNewv(n_columns int, types *C.GType) (_return_ *ListStore) {
	_cgo_of_n_columns_ := (C.gint)(n_columns)
	_cgo_of__return__ := C.gtk_list_store_newv((C.gint)(_cgo_of_n_columns_), (*C.GType)(types))
	_return_ = (*ListStore)(_cgo_of__return__)
	return
}

func (_self_ *ListStore) Append() (iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_append((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) Clear() () {
	C._gtk_list_store_clear((*C.GtkListStore)(_self_))
	return
}

func (_self_ *ListStore) Insert(position int) (iter *TreeIter) {
	_cgo_of_position_ := (C.gint)(position)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_insert((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (C.gint)(_cgo_of_position_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) InsertAfter(sibling *TreeIter) (iter *TreeIter) {
	_cgo_of_sibling_ := (*C.GtkTreeIter)(sibling)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_insert_after((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_sibling_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) InsertBefore(sibling *TreeIter) (iter *TreeIter) {
	_cgo_of_sibling_ := (*C.GtkTreeIter)(sibling)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_insert_before((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_sibling_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) InsertWithValuesv(position int, columns *C.gint, values *C.GValue, n_values int) (iter *TreeIter) {
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of_n_values_ := (C.gint)(n_values)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_insert_with_valuesv((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (C.gint)(_cgo_of_position_), (*C.gint)(columns), (*C.GValue)(values), (C.gint)(_cgo_of_n_values_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) IterIsValid(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_list_store_iter_is_valid((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ListStore) MoveAfter(iter *TreeIter, position *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_position_ := (*C.GtkTreeIter)(position)
	C._gtk_list_store_move_after((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.GtkTreeIter)(_cgo_of_position_))
	return
}

func (_self_ *ListStore) MoveBefore(iter *TreeIter, position *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_position_ := (*C.GtkTreeIter)(position)
	C._gtk_list_store_move_before((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.GtkTreeIter)(_cgo_of_position_))
	return
}

func (_self_ *ListStore) Prepend() (iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_list_store_prepend((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *ListStore) Remove(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_list_store_remove((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ListStore) Reorder(new_order *C.gint) () {
	C._gtk_list_store_reorder((*C.GtkListStore)(_self_), (*C.gint)(new_order))
	return
}

func (_self_ *ListStore) SetColumnTypes(n_columns int, types *C.GType) () {
	_cgo_of_n_columns_ := (C.gint)(n_columns)
	C._gtk_list_store_set_column_types((*C.GtkListStore)(_self_), (C.gint)(_cgo_of_n_columns_), (*C.GType)(types))
	return
}

func (_self_ *ListStore) SetValue(iter *TreeIter, column int, value *C.GValue) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_list_store_set_value((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (C.gint)(_cgo_of_column_), (*C.GValue)(value))
	return
}

func (_self_ *ListStore) SetValuesv(iter *TreeIter, columns *C.gint, values *C.GValue, n_values int) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_n_values_ := (C.gint)(n_values)
	C._gtk_list_store_set_valuesv((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.gint)(columns), (*C.GValue)(values), (C.gint)(_cgo_of_n_values_))
	return
}

func (_self_ *ListStore) Swap(a *TreeIter, b *TreeIter) () {
	_cgo_of_a_ := (*C.GtkTreeIter)(a)
	_cgo_of_b_ := (*C.GtkTreeIter)(b)
	C._gtk_list_store_swap((*C.GtkListStore)(_self_), (*C.GtkTreeIter)(_cgo_of_a_), (*C.GtkTreeIter)(_cgo_of_b_))
	return
}

func LockButtonNew(permission *C.GPermission) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_lock_button_new((*C.GPermission)(permission))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *LockButton) GetPermission() (_return_ *C.GPermission) {
	_return_ = C._gtk_lock_button_get_permission((*C.GtkLockButton)(_self_))
	return
}

func (_self_ *LockButton) SetPermission(permission *C.GPermission) () {
	C._gtk_lock_button_set_permission((*C.GtkLockButton)(_self_), (*C.GPermission)(permission))
	return
}

func MenuNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func MenuNewFromModel(model *C.GMenuModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_new_from_model((*C.GMenuModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func MenuGetForAttachWidget(widget *Widget) (_return_ *C.GList) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_return_ = C.gtk_menu_get_for_attach_widget((*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *Menu) Attach(child *Widget, left_attach uint, right_attach uint, top_attach uint, bottom_attach uint) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_left_attach_ := (C.guint)(left_attach)
	_cgo_of_right_attach_ := (C.guint)(right_attach)
	_cgo_of_top_attach_ := (C.guint)(top_attach)
	_cgo_of_bottom_attach_ := (C.guint)(bottom_attach)
	C._gtk_menu_attach((*C.GtkMenu)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.guint)(_cgo_of_left_attach_), (C.guint)(_cgo_of_right_attach_), (C.guint)(_cgo_of_top_attach_), (C.guint)(_cgo_of_bottom_attach_))
	return
}

func (_self_ *Menu) AttachToWidget(attach_widget *Widget, detacher C.GtkMenuDetachFunc) () {
	_cgo_of_attach_widget_ := (*C.GtkWidget)(attach_widget)
	C._gtk_menu_attach_to_widget((*C.GtkMenu)(_self_), (*C.GtkWidget)(_cgo_of_attach_widget_), (C.GtkMenuDetachFunc)(detacher))
	return
}

func (_self_ *Menu) Detach() () {
	C._gtk_menu_detach((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetAccelGroup() (_return_ *AccelGroup) {
	_cgo_of__return__ := C._gtk_menu_get_accel_group((*C.GtkMenu)(_self_))
	_return_ = (*AccelGroup)(_cgo_of__return__)
	return
}

func (_self_ *Menu) GetAccelPath() (_return_ string) {
	_cgo_of__return__ := C._gtk_menu_get_accel_path((*C.GtkMenu)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Menu) GetActive() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_get_active((*C.GtkMenu)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Menu) GetAttachWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_get_attach_widget((*C.GtkMenu)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Menu) GetMonitor() (_return_ int) {
	_cgo_of__return__ := C._gtk_menu_get_monitor((*C.GtkMenu)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Menu) GetReserveToggleSize() (_return_ bool) {
	_cgo_of__return__ := C._gtk_menu_get_reserve_toggle_size((*C.GtkMenu)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Menu) GetTearoffState() (_return_ bool) {
	_cgo_of__return__ := C._gtk_menu_get_tearoff_state((*C.GtkMenu)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Menu) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_menu_get_title((*C.GtkMenu)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Menu) Popdown() () {
	C._gtk_menu_popdown((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) Popup(parent_menu_shell *Widget, parent_menu_item *Widget, func_ C.GtkMenuPositionFunc, data C.gpointer, button uint, activate_time uint32) () {
	_cgo_of_parent_menu_shell_ := (*C.GtkWidget)(parent_menu_shell)
	_cgo_of_parent_menu_item_ := (*C.GtkWidget)(parent_menu_item)
	_cgo_of_button_ := (C.guint)(button)
	_cgo_of_activate_time_ := (C.guint32)(activate_time)
	C._gtk_menu_popup((*C.GtkMenu)(_self_), (*C.GtkWidget)(_cgo_of_parent_menu_shell_), (*C.GtkWidget)(_cgo_of_parent_menu_item_), (C.GtkMenuPositionFunc)(func_), (C.gpointer)(data), (C.guint)(_cgo_of_button_), (C.guint32)(_cgo_of_activate_time_))
	return
}

func (_self_ *Menu) PopupForDevice(device *C.GdkDevice, parent_menu_shell *Widget, parent_menu_item *Widget, func_ C.GtkMenuPositionFunc, data C.gpointer, destroy C.GDestroyNotify, button uint, activate_time uint32) () {
	_cgo_of_parent_menu_shell_ := (*C.GtkWidget)(parent_menu_shell)
	_cgo_of_parent_menu_item_ := (*C.GtkWidget)(parent_menu_item)
	_cgo_of_button_ := (C.guint)(button)
	_cgo_of_activate_time_ := (C.guint32)(activate_time)
	C._gtk_menu_popup_for_device((*C.GtkMenu)(_self_), (*C.GdkDevice)(device), (*C.GtkWidget)(_cgo_of_parent_menu_shell_), (*C.GtkWidget)(_cgo_of_parent_menu_item_), (C.GtkMenuPositionFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy), (C.guint)(_cgo_of_button_), (C.guint32)(_cgo_of_activate_time_))
	return
}

func (_self_ *Menu) ReorderChild(child *Widget, position int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_menu_reorder_child((*C.GtkMenu)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *Menu) Reposition() () {
	C._gtk_menu_reposition((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) SetAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_menu_set_accel_group((*C.GtkMenu)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *Menu) SetAccelPath(accel_path string) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_menu_set_accel_path((*C.GtkMenu)(_self_), (*C.gchar)(_cgo_of_accel_path_))
	return
}

func (_self_ *Menu) SetActive(index uint) () {
	_cgo_of_index_ := (C.guint)(index)
	C._gtk_menu_set_active((*C.GtkMenu)(_self_), (C.guint)(_cgo_of_index_))
	return
}

func (_self_ *Menu) SetMonitor(monitor_num int) () {
	_cgo_of_monitor_num_ := (C.gint)(monitor_num)
	C._gtk_menu_set_monitor((*C.GtkMenu)(_self_), (C.gint)(_cgo_of_monitor_num_))
	return
}

func (_self_ *Menu) SetReserveToggleSize(reserve_toggle_size bool) () {
	_cgo_of_reserve_toggle_size_ := C.glibtrue()
	if !reserve_toggle_size {
		_cgo_of_reserve_toggle_size_ = C.glibfalse()
	}
	C._gtk_menu_set_reserve_toggle_size((*C.GtkMenu)(_self_), (C.gboolean)(_cgo_of_reserve_toggle_size_))
	return
}

func (_self_ *Menu) SetScreen(screen *C.GdkScreen) () {
	C._gtk_menu_set_screen((*C.GtkMenu)(_self_), (*C.GdkScreen)(screen))
	return
}

func (_self_ *Menu) SetTearoffState(torn_off bool) () {
	_cgo_of_torn_off_ := C.glibtrue()
	if !torn_off {
		_cgo_of_torn_off_ = C.glibfalse()
	}
	C._gtk_menu_set_tearoff_state((*C.GtkMenu)(_self_), (C.gboolean)(_cgo_of_torn_off_))
	return
}

func (_self_ *Menu) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_menu_set_title((*C.GtkMenu)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func MenuBarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_bar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func MenuBarNewFromModel(model *C.GMenuModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_bar_new_from_model((*C.GMenuModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuBar) GetChildPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C._gtk_menu_bar_get_child_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) GetPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C._gtk_menu_bar_get_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) SetChildPackDirection(child_pack_dir C.GtkPackDirection) () {
	C._gtk_menu_bar_set_child_pack_direction((*C.GtkMenuBar)(_self_), (C.GtkPackDirection)(child_pack_dir))
	return
}

func (_self_ *MenuBar) SetPackDirection(pack_dir C.GtkPackDirection) () {
	C._gtk_menu_bar_set_pack_direction((*C.GtkMenuBar)(_self_), (C.GtkPackDirection)(pack_dir))
	return
}

func MenuButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuButton) GetAlignWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_button_get_align_widget((*C.GtkMenuButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuButton) GetDirection() (_return_ C.GtkArrowType) {
	_return_ = C._gtk_menu_button_get_direction((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetMenuModel() (_return_ *C.GMenuModel) {
	_return_ = C._gtk_menu_button_get_menu_model((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetPopup() (_return_ *Menu) {
	_cgo_of__return__ := C._gtk_menu_button_get_popup((*C.GtkMenuButton)(_self_))
	_return_ = (*Menu)(_cgo_of__return__)
	return
}

func (_self_ *MenuButton) SetAlignWidget(align_widget *Widget) () {
	_cgo_of_align_widget_ := (*C.GtkWidget)(align_widget)
	C._gtk_menu_button_set_align_widget((*C.GtkMenuButton)(_self_), (*C.GtkWidget)(_cgo_of_align_widget_))
	return
}

func (_self_ *MenuButton) SetDirection(direction C.GtkArrowType) () {
	C._gtk_menu_button_set_direction((*C.GtkMenuButton)(_self_), (C.GtkArrowType)(direction))
	return
}

func (_self_ *MenuButton) SetMenuModel(menu_model *C.GMenuModel) () {
	C._gtk_menu_button_set_menu_model((*C.GtkMenuButton)(_self_), (*C.GMenuModel)(menu_model))
	return
}

func (_self_ *MenuButton) SetPopup(popup *Widget) () {
	_cgo_of_popup_ := (*C.GtkWidget)(popup)
	C._gtk_menu_button_set_popup((*C.GtkMenuButton)(_self_), (*C.GtkWidget)(_cgo_of_popup_))
	return
}

func MenuItemNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_menu_item_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func MenuItemNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_menu_item_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func MenuItemNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_menu_item_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuItem) Activate() () {
	C._gtk_menu_item_activate((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) Deselect() () {
	C._gtk_menu_item_deselect((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetAccelPath() (_return_ string) {
	_cgo_of__return__ := C._gtk_menu_item_get_accel_path((*C.GtkMenuItem)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *MenuItem) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_menu_item_get_label((*C.GtkMenuItem)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *MenuItem) GetReserveIndicator() (_return_ bool) {
	_cgo_of__return__ := C._gtk_menu_item_get_reserve_indicator((*C.GtkMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *MenuItem) GetSubmenu() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_item_get_submenu((*C.GtkMenuItem)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuItem) GetUseUnderline() (_return_ bool) {
	_cgo_of__return__ := C._gtk_menu_item_get_use_underline((*C.GtkMenuItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *MenuItem) Select() () {
	C._gtk_menu_item_select((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) SetAccelPath(accel_path string) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	C._gtk_menu_item_set_accel_path((*C.GtkMenuItem)(_self_), (*C.gchar)(_cgo_of_accel_path_))
	return
}

func (_self_ *MenuItem) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_menu_item_set_label((*C.GtkMenuItem)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *MenuItem) SetReserveIndicator(reserve bool) () {
	_cgo_of_reserve_ := C.glibtrue()
	if !reserve {
		_cgo_of_reserve_ = C.glibfalse()
	}
	C._gtk_menu_item_set_reserve_indicator((*C.GtkMenuItem)(_self_), (C.gboolean)(_cgo_of_reserve_))
	return
}

func (_self_ *MenuItem) SetSubmenu(submenu *Widget) () {
	_cgo_of_submenu_ := (*C.GtkWidget)(submenu)
	C._gtk_menu_item_set_submenu((*C.GtkMenuItem)(_self_), (*C.GtkWidget)(_cgo_of_submenu_))
	return
}

func (_self_ *MenuItem) SetUseUnderline(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_menu_item_set_use_underline((*C.GtkMenuItem)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *MenuItem) ToggleSizeAllocate(allocation int) () {
	_cgo_of_allocation_ := (C.gint)(allocation)
	C._gtk_menu_item_toggle_size_allocate((*C.GtkMenuItem)(_self_), (C.gint)(_cgo_of_allocation_))
	return
}

func (_self_ *MenuItem) ToggleSizeRequest(requisition *C.gint) () {
	C._gtk_menu_item_toggle_size_request((*C.GtkMenuItem)(_self_), (*C.gint)(requisition))
	return
}

func (_self_ *MenuShell) ActivateItem(menu_item *Widget, force_deactivate bool) () {
	_cgo_of_menu_item_ := (*C.GtkWidget)(menu_item)
	_cgo_of_force_deactivate_ := C.glibtrue()
	if !force_deactivate {
		_cgo_of_force_deactivate_ = C.glibfalse()
	}
	C._gtk_menu_shell_activate_item((*C.GtkMenuShell)(_self_), (*C.GtkWidget)(_cgo_of_menu_item_), (C.gboolean)(_cgo_of_force_deactivate_))
	return
}

func (_self_ *MenuShell) Append(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_menu_shell_append((*C.GtkMenuShell)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *MenuShell) BindModel(model *C.GMenuModel, action_namespace string, with_separators bool) () {
	_cgo_of_action_namespace_ := (*C.gchar)(unsafe.Pointer(C.CString(action_namespace)))
	_cgo_of_with_separators_ := C.glibtrue()
	if !with_separators {
		_cgo_of_with_separators_ = C.glibfalse()
	}
	C._gtk_menu_shell_bind_model((*C.GtkMenuShell)(_self_), (*C.GMenuModel)(model), (*C.gchar)(_cgo_of_action_namespace_), (C.gboolean)(_cgo_of_with_separators_))
	return
}

func (_self_ *MenuShell) Cancel() () {
	C._gtk_menu_shell_cancel((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deactivate() () {
	C._gtk_menu_shell_deactivate((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deselect() () {
	C._gtk_menu_shell_deselect((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) GetParentShell() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_shell_get_parent_shell((*C.GtkMenuShell)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuShell) GetSelectedItem() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_shell_get_selected_item((*C.GtkMenuShell)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuShell) GetTakeFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_menu_shell_get_take_focus((*C.GtkMenuShell)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *MenuShell) Insert(child *Widget, position int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_menu_shell_insert((*C.GtkMenuShell)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *MenuShell) Prepend(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_menu_shell_prepend((*C.GtkMenuShell)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *MenuShell) SelectFirst(search_sensitive bool) () {
	_cgo_of_search_sensitive_ := C.glibtrue()
	if !search_sensitive {
		_cgo_of_search_sensitive_ = C.glibfalse()
	}
	C._gtk_menu_shell_select_first((*C.GtkMenuShell)(_self_), (C.gboolean)(_cgo_of_search_sensitive_))
	return
}

func (_self_ *MenuShell) SelectItem(menu_item *Widget) () {
	_cgo_of_menu_item_ := (*C.GtkWidget)(menu_item)
	C._gtk_menu_shell_select_item((*C.GtkMenuShell)(_self_), (*C.GtkWidget)(_cgo_of_menu_item_))
	return
}

func (_self_ *MenuShell) SetTakeFocus(take_focus bool) () {
	_cgo_of_take_focus_ := C.glibtrue()
	if !take_focus {
		_cgo_of_take_focus_ = C.glibfalse()
	}
	C._gtk_menu_shell_set_take_focus((*C.GtkMenuShell)(_self_), (C.gboolean)(_cgo_of_take_focus_))
	return
}

func MenuToolButtonNew(icon_widget *Widget, label string) (_return_ *ToolItem) {
	_cgo_of_icon_widget_ := (*C.GtkWidget)(icon_widget)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_menu_tool_button_new((*C.GtkWidget)(_cgo_of_icon_widget_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func MenuToolButtonNewFromStock(stock_id string) (_return_ *ToolItem) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_menu_tool_button_new_from_stock((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *MenuToolButton) GetMenu() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_menu_tool_button_get_menu((*C.GtkMenuToolButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipMarkup(markup string) () {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_menu_tool_button_set_arrow_tooltip_markup((*C.GtkMenuToolButton)(_self_), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_menu_tool_button_set_arrow_tooltip_text((*C.GtkMenuToolButton)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *MenuToolButton) SetMenu(menu *Widget) () {
	_cgo_of_menu_ := (*C.GtkWidget)(menu)
	C._gtk_menu_tool_button_set_menu((*C.GtkMenuToolButton)(_self_), (*C.GtkWidget)(_cgo_of_menu_))
	return
}

func (_self_ *MessageDialog) GetImage() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_message_dialog_get_image((*C.GtkMessageDialog)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MessageDialog) GetMessageArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_message_dialog_get_message_area((*C.GtkMessageDialog)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *MessageDialog) SetImage(image *Widget) () {
	_cgo_of_image_ := (*C.GtkWidget)(image)
	C._gtk_message_dialog_set_image((*C.GtkMessageDialog)(_self_), (*C.GtkWidget)(_cgo_of_image_))
	return
}

func (_self_ *MessageDialog) SetMarkup(str string) () {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	C._gtk_message_dialog_set_markup((*C.GtkMessageDialog)(_self_), (*C.gchar)(_cgo_of_str_))
	return
}

func (_self_ *Misc) GetAlignment() (xalign float64, yalign float64) {
	var _cgo_of_xalign_ C.gfloat
	var _cgo_of_yalign_ C.gfloat
	C._gtk_misc_get_alignment((*C.GtkMisc)(_self_), (*C.gfloat)(&_cgo_of_xalign_), (*C.gfloat)(&_cgo_of_yalign_))
	xalign = float64(_cgo_of_xalign_)
	yalign = float64(_cgo_of_yalign_)
	return
}

func (_self_ *Misc) GetPadding() (xpad int, ypad int) {
	var _cgo_of_xpad_ C.gint
	var _cgo_of_ypad_ C.gint
	C._gtk_misc_get_padding((*C.GtkMisc)(_self_), (*C.gint)(&_cgo_of_xpad_), (*C.gint)(&_cgo_of_ypad_))
	xpad = int(_cgo_of_xpad_)
	ypad = int(_cgo_of_ypad_)
	return
}

func (_self_ *Misc) SetAlignment(xalign float64, yalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	_cgo_of_yalign_ := (C.gfloat)(yalign)
	C._gtk_misc_set_alignment((*C.GtkMisc)(_self_), (C.gfloat)(_cgo_of_xalign_), (C.gfloat)(_cgo_of_yalign_))
	return
}

func (_self_ *Misc) SetPadding(xpad int, ypad int) () {
	_cgo_of_xpad_ := (C.gint)(xpad)
	_cgo_of_ypad_ := (C.gint)(ypad)
	C._gtk_misc_set_padding((*C.GtkMisc)(_self_), (C.gint)(_cgo_of_xpad_), (C.gint)(_cgo_of_ypad_))
	return
}

func MountOperationNew(parent *Window) (_return_ *C.GMountOperation) {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_return_ = C.gtk_mount_operation_new((*C.GtkWindow)(_cgo_of_parent_))
	return
}

func (_self_ *MountOperation) GetParent() (_return_ *Window) {
	_cgo_of__return__ := C._gtk_mount_operation_get_parent((*C.GtkMountOperation)(_self_))
	_return_ = (*Window)(_cgo_of__return__)
	return
}

func (_self_ *MountOperation) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_mount_operation_get_screen((*C.GtkMountOperation)(_self_))
	return
}

func (_self_ *MountOperation) IsShowing() (_return_ bool) {
	_cgo_of__return__ := C._gtk_mount_operation_is_showing((*C.GtkMountOperation)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *MountOperation) SetParent(parent *Window) () {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	C._gtk_mount_operation_set_parent((*C.GtkMountOperation)(_self_), (*C.GtkWindow)(_cgo_of_parent_))
	return
}

func (_self_ *MountOperation) SetScreen(screen *C.GdkScreen) () {
	C._gtk_mount_operation_set_screen((*C.GtkMountOperation)(_self_), (*C.GdkScreen)(screen))
	return
}

func NotebookNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_notebook_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Notebook) AppendPage(child *Widget, tab_label *Widget) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of__return__ := C._gtk_notebook_append_page((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) AppendPageMenu(child *Widget, tab_label *Widget, menu_label *Widget) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of_menu_label_ := (*C.GtkWidget)(menu_label)
	_cgo_of__return__ := C._gtk_notebook_append_page_menu((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_), (*C.GtkWidget)(_cgo_of_menu_label_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetActionWidget(pack_type C.GtkPackType) (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_notebook_get_action_widget((*C.GtkNotebook)(_self_), (C.GtkPackType)(pack_type))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetCurrentPage() (_return_ int) {
	_cgo_of__return__ := C._gtk_notebook_get_current_page((*C.GtkNotebook)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetGroupName() (_return_ string) {
	_cgo_of__return__ := C._gtk_notebook_get_group_name((*C.GtkNotebook)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Notebook) GetMenuLabel(child *Widget) (_return_ *Widget) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_menu_label((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetMenuLabelText(child *Widget) (_return_ string) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_menu_label_text((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Notebook) GetNPages() (_return_ int) {
	_cgo_of__return__ := C._gtk_notebook_get_n_pages((*C.GtkNotebook)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetNthPage(page_num int) (_return_ *Widget) {
	_cgo_of_page_num_ := (C.gint)(page_num)
	_cgo_of__return__ := C._gtk_notebook_get_nth_page((*C.GtkNotebook)(_self_), (C.gint)(_cgo_of_page_num_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetScrollable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_notebook_get_scrollable((*C.GtkNotebook)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetShowBorder() (_return_ bool) {
	_cgo_of__return__ := C._gtk_notebook_get_show_border((*C.GtkNotebook)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetShowTabs() (_return_ bool) {
	_cgo_of__return__ := C._gtk_notebook_get_show_tabs((*C.GtkNotebook)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetTabDetachable(child *Widget) (_return_ bool) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_tab_detachable((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Notebook) GetTabLabel(child *Widget) (_return_ *Widget) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_tab_label((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Notebook) GetTabLabelText(child *Widget) (_return_ string) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_tab_label_text((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Notebook) GetTabPos() (_return_ C.GtkPositionType) {
	_return_ = C._gtk_notebook_get_tab_pos((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetTabReorderable(child *Widget) (_return_ bool) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_get_tab_reorderable((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Notebook) InsertPage(child *Widget, tab_label *Widget, position int) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of__return__ := C._gtk_notebook_insert_page((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_), (C.gint)(_cgo_of_position_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) InsertPageMenu(child *Widget, tab_label *Widget, menu_label *Widget, position int) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of_menu_label_ := (*C.GtkWidget)(menu_label)
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of__return__ := C._gtk_notebook_insert_page_menu((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_), (*C.GtkWidget)(_cgo_of_menu_label_), (C.gint)(_cgo_of_position_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) NextPage() () {
	C._gtk_notebook_next_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PageNum(child *Widget) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of__return__ := C._gtk_notebook_page_num((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) PopupDisable() () {
	C._gtk_notebook_popup_disable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PopupEnable() () {
	C._gtk_notebook_popup_enable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PrependPage(child *Widget, tab_label *Widget) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of__return__ := C._gtk_notebook_prepend_page((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) PrependPageMenu(child *Widget, tab_label *Widget, menu_label *Widget) (_return_ int) {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	_cgo_of_menu_label_ := (*C.GtkWidget)(menu_label)
	_cgo_of__return__ := C._gtk_notebook_prepend_page_menu((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_), (*C.GtkWidget)(_cgo_of_menu_label_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Notebook) PrevPage() () {
	C._gtk_notebook_prev_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) RemovePage(page_num int) () {
	_cgo_of_page_num_ := (C.gint)(page_num)
	C._gtk_notebook_remove_page((*C.GtkNotebook)(_self_), (C.gint)(_cgo_of_page_num_))
	return
}

func (_self_ *Notebook) ReorderChild(child *Widget, position int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_notebook_reorder_child((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *Notebook) SetActionWidget(widget *Widget, pack_type C.GtkPackType) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_notebook_set_action_widget((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.GtkPackType)(pack_type))
	return
}

func (_self_ *Notebook) SetCurrentPage(page_num int) () {
	_cgo_of_page_num_ := (C.gint)(page_num)
	C._gtk_notebook_set_current_page((*C.GtkNotebook)(_self_), (C.gint)(_cgo_of_page_num_))
	return
}

func (_self_ *Notebook) SetGroupName(group_name string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	C._gtk_notebook_set_group_name((*C.GtkNotebook)(_self_), (*C.gchar)(_cgo_of_group_name_))
	return
}

func (_self_ *Notebook) SetMenuLabel(child *Widget, menu_label *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_menu_label_ := (*C.GtkWidget)(menu_label)
	C._gtk_notebook_set_menu_label((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_menu_label_))
	return
}

func (_self_ *Notebook) SetMenuLabelText(child *Widget, menu_text string) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_menu_text_ := (*C.gchar)(unsafe.Pointer(C.CString(menu_text)))
	C._gtk_notebook_set_menu_label_text((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gchar)(_cgo_of_menu_text_))
	return
}

func (_self_ *Notebook) SetScrollable(scrollable bool) () {
	_cgo_of_scrollable_ := C.glibtrue()
	if !scrollable {
		_cgo_of_scrollable_ = C.glibfalse()
	}
	C._gtk_notebook_set_scrollable((*C.GtkNotebook)(_self_), (C.gboolean)(_cgo_of_scrollable_))
	return
}

func (_self_ *Notebook) SetShowBorder(show_border bool) () {
	_cgo_of_show_border_ := C.glibtrue()
	if !show_border {
		_cgo_of_show_border_ = C.glibfalse()
	}
	C._gtk_notebook_set_show_border((*C.GtkNotebook)(_self_), (C.gboolean)(_cgo_of_show_border_))
	return
}

func (_self_ *Notebook) SetShowTabs(show_tabs bool) () {
	_cgo_of_show_tabs_ := C.glibtrue()
	if !show_tabs {
		_cgo_of_show_tabs_ = C.glibfalse()
	}
	C._gtk_notebook_set_show_tabs((*C.GtkNotebook)(_self_), (C.gboolean)(_cgo_of_show_tabs_))
	return
}

func (_self_ *Notebook) SetTabDetachable(child *Widget, detachable bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_detachable_ := C.glibtrue()
	if !detachable {
		_cgo_of_detachable_ = C.glibfalse()
	}
	C._gtk_notebook_set_tab_detachable((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_detachable_))
	return
}

func (_self_ *Notebook) SetTabLabel(child *Widget, tab_label *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_label_ := (*C.GtkWidget)(tab_label)
	C._gtk_notebook_set_tab_label((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkWidget)(_cgo_of_tab_label_))
	return
}

func (_self_ *Notebook) SetTabLabelText(child *Widget, tab_text string) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_tab_text_ := (*C.gchar)(unsafe.Pointer(C.CString(tab_text)))
	C._gtk_notebook_set_tab_label_text((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.gchar)(_cgo_of_tab_text_))
	return
}

func (_self_ *Notebook) SetTabPos(pos C.GtkPositionType) () {
	C._gtk_notebook_set_tab_pos((*C.GtkNotebook)(_self_), (C.GtkPositionType)(pos))
	return
}

func (_self_ *Notebook) SetTabReorderable(child *Widget, reorderable bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_reorderable_ := C.glibtrue()
	if !reorderable {
		_cgo_of_reorderable_ = C.glibfalse()
	}
	C._gtk_notebook_set_tab_reorderable((*C.GtkNotebook)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_reorderable_))
	return
}

func NumerableIconNew(base_icon *C.GIcon) (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_new((*C.GIcon)(base_icon))
	return
}

func NumerableIconNewWithStyleContext(base_icon *C.GIcon, context *StyleContext) (_return_ *C.GIcon) {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_return_ = C.gtk_numerable_icon_new_with_style_context((*C.GIcon)(base_icon), (*C.GtkStyleContext)(_cgo_of_context_))
	return
}

func (_self_ *NumerableIcon) GetBackgroundGicon() (_return_ *C.GIcon) {
	_return_ = C._gtk_numerable_icon_get_background_gicon((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetBackgroundIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_numerable_icon_get_background_icon_name((*C.GtkNumerableIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *NumerableIcon) GetCount() (_return_ int) {
	_cgo_of__return__ := C._gtk_numerable_icon_get_count((*C.GtkNumerableIcon)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *NumerableIcon) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_numerable_icon_get_label((*C.GtkNumerableIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *NumerableIcon) GetStyleContext() (_return_ *StyleContext) {
	_cgo_of__return__ := C._gtk_numerable_icon_get_style_context((*C.GtkNumerableIcon)(_self_))
	_return_ = (*StyleContext)(_cgo_of__return__)
	return
}

func (_self_ *NumerableIcon) SetBackgroundGicon(icon *C.GIcon) () {
	C._gtk_numerable_icon_set_background_gicon((*C.GtkNumerableIcon)(_self_), (*C.GIcon)(icon))
	return
}

func (_self_ *NumerableIcon) SetBackgroundIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_numerable_icon_set_background_icon_name((*C.GtkNumerableIcon)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *NumerableIcon) SetCount(count int) () {
	_cgo_of_count_ := (C.gint)(count)
	C._gtk_numerable_icon_set_count((*C.GtkNumerableIcon)(_self_), (C.gint)(_cgo_of_count_))
	return
}

func (_self_ *NumerableIcon) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_numerable_icon_set_label((*C.GtkNumerableIcon)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *NumerableIcon) SetStyleContext(style *StyleContext) () {
	_cgo_of_style_ := (*C.GtkStyleContext)(style)
	C._gtk_numerable_icon_set_style_context((*C.GtkNumerableIcon)(_self_), (*C.GtkStyleContext)(_cgo_of_style_))
	return
}

func OffscreenWindowNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_offscreen_window_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *OffscreenWindow) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_offscreen_window_get_pixbuf((*C.GtkOffscreenWindow)(_self_))
	return
}

func (_self_ *OffscreenWindow) GetSurface() (_return_ *C.cairo_surface_t) {
	_return_ = C._gtk_offscreen_window_get_surface((*C.GtkOffscreenWindow)(_self_))
	return
}

func OverlayNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_overlay_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Overlay) AddOverlay(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_overlay_add_overlay((*C.GtkOverlay)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func PageSetupNew() (_return_ *PageSetup) {
	_cgo_of__return__ := C.gtk_page_setup_new()
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func PageSetupNewFromFile(file_name string) (_return_ *PageSetup, _error_ unsafe.Pointer) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_cgo_of__return__ := C._gtk_page_setup_new_from_file((*C.gchar)(_cgo_of_file_name_), unsafe.Pointer(_error_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func PageSetupNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_return_ *PageSetup, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_page_setup_new_from_key_file((*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) Copy() (_return_ *PageSetup) {
	_cgo_of__return__ := C._gtk_page_setup_copy((*C.GtkPageSetup)(_self_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetBottomMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_bottom_margin((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetLeftMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_left_margin((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C._gtk_page_setup_get_orientation((*C.GtkPageSetup)(_self_))
	return
}

func (_self_ *PageSetup) GetPageHeight(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_page_height((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetPageWidth(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_page_width((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetPaperHeight(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_paper_height((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetPaperSize() (_return_ *PaperSize) {
	_cgo_of__return__ := C._gtk_page_setup_get_paper_size((*C.GtkPageSetup)(_self_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetPaperWidth(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_paper_width((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetRightMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_right_margin((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) GetTopMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_page_setup_get_top_margin((*C.GtkPageSetup)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PageSetup) LoadFile(file_name *C.char) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_page_setup_load_file((*C.GtkPageSetup)(_self_), (*C.char)(file_name), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PageSetup) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_page_setup_load_key_file((*C.GtkPageSetup)(_self_), (*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PageSetup) SetBottomMargin(margin float64, unit C.GtkUnit) () {
	_cgo_of_margin_ := (C.gdouble)(margin)
	C._gtk_page_setup_set_bottom_margin((*C.GtkPageSetup)(_self_), (C.gdouble)(_cgo_of_margin_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PageSetup) SetLeftMargin(margin float64, unit C.GtkUnit) () {
	_cgo_of_margin_ := (C.gdouble)(margin)
	C._gtk_page_setup_set_left_margin((*C.GtkPageSetup)(_self_), (C.gdouble)(_cgo_of_margin_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PageSetup) SetOrientation(orientation C.GtkPageOrientation) () {
	C._gtk_page_setup_set_orientation((*C.GtkPageSetup)(_self_), (C.GtkPageOrientation)(orientation))
	return
}

func (_self_ *PageSetup) SetPaperSize(size *PaperSize) () {
	_cgo_of_size_ := (*C.GtkPaperSize)(size)
	C._gtk_page_setup_set_paper_size((*C.GtkPageSetup)(_self_), (*C.GtkPaperSize)(_cgo_of_size_))
	return
}

func (_self_ *PageSetup) SetPaperSizeAndDefaultMargins(size *PaperSize) () {
	_cgo_of_size_ := (*C.GtkPaperSize)(size)
	C._gtk_page_setup_set_paper_size_and_default_margins((*C.GtkPageSetup)(_self_), (*C.GtkPaperSize)(_cgo_of_size_))
	return
}

func (_self_ *PageSetup) SetRightMargin(margin float64, unit C.GtkUnit) () {
	_cgo_of_margin_ := (C.gdouble)(margin)
	C._gtk_page_setup_set_right_margin((*C.GtkPageSetup)(_self_), (C.gdouble)(_cgo_of_margin_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PageSetup) SetTopMargin(margin float64, unit C.GtkUnit) () {
	_cgo_of_margin_ := (C.gdouble)(margin)
	C._gtk_page_setup_set_top_margin((*C.GtkPageSetup)(_self_), (C.gdouble)(_cgo_of_margin_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PageSetup) ToFile(file_name *C.char) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_page_setup_to_file((*C.GtkPageSetup)(_self_), (*C.char)(file_name), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PageSetup) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	C._gtk_page_setup_to_key_file((*C.GtkPageSetup)(_self_), (*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_))
	return
}

func PanedNew(orientation C.GtkOrientation) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_paned_new((C.GtkOrientation)(orientation))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Paned) Add1(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_paned_add1((*C.GtkPaned)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *Paned) Add2(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_paned_add2((*C.GtkPaned)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *Paned) GetChild1() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_paned_get_child1((*C.GtkPaned)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Paned) GetChild2() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_paned_get_child2((*C.GtkPaned)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Paned) GetHandleWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_paned_get_handle_window((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) GetPosition() (_return_ int) {
	_cgo_of__return__ := C._gtk_paned_get_position((*C.GtkPaned)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Paned) Pack1(child *Widget, resize bool, shrink bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_resize_ := C.glibtrue()
	if !resize {
		_cgo_of_resize_ = C.glibfalse()
	}
	_cgo_of_shrink_ := C.glibtrue()
	if !shrink {
		_cgo_of_shrink_ = C.glibfalse()
	}
	C._gtk_paned_pack1((*C.GtkPaned)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_resize_), (C.gboolean)(_cgo_of_shrink_))
	return
}

func (_self_ *Paned) Pack2(child *Widget, resize bool, shrink bool) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_resize_ := C.glibtrue()
	if !resize {
		_cgo_of_resize_ = C.glibfalse()
	}
	_cgo_of_shrink_ := C.glibtrue()
	if !shrink {
		_cgo_of_shrink_ = C.glibfalse()
	}
	C._gtk_paned_pack2((*C.GtkPaned)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gboolean)(_cgo_of_resize_), (C.gboolean)(_cgo_of_shrink_))
	return
}

func (_self_ *Paned) SetPosition(position int) () {
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_paned_set_position((*C.GtkPaned)(_self_), (C.gint)(_cgo_of_position_))
	return
}

func PaperSizeNew(name string) (_return_ *PaperSize) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_paper_size_new((*C.gchar)(_cgo_of_name_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func PaperSizeNewCustom(name string, display_name string, width float64, height float64, unit C.GtkUnit) (_return_ *PaperSize) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_display_name_ := (*C.gchar)(unsafe.Pointer(C.CString(display_name)))
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	_cgo_of__return__ := C._gtk_paper_size_new_custom((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_display_name_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_), (C.GtkUnit)(unit))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func PaperSizeNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_return_ *PaperSize, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_paper_size_new_from_key_file((*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func PaperSizeNewFromPpd(ppd_name string, ppd_display_name string, width float64, height float64) (_return_ *PaperSize) {
	_cgo_of_ppd_name_ := (*C.gchar)(unsafe.Pointer(C.CString(ppd_name)))
	_cgo_of_ppd_display_name_ := (*C.gchar)(unsafe.Pointer(C.CString(ppd_display_name)))
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	_cgo_of__return__ := C._gtk_paper_size_new_from_ppd((*C.gchar)(_cgo_of_ppd_name_), (*C.gchar)(_cgo_of_ppd_display_name_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func PaperSizeGetDefault() (_return_ string) {
	_cgo_of__return__ := C.gtk_paper_size_get_default()
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func PaperSizeGetPaperSizes(include_custom bool) (_return_ *C.GList) {
	_cgo_of_include_custom_ := C.glibtrue()
	if !include_custom {
		_cgo_of_include_custom_ = C.glibfalse()
	}
	_return_ = C.gtk_paper_size_get_paper_sizes((C.gboolean)(_cgo_of_include_custom_))
	return
}

func (_self_ *PaperSize) Copy() (_return_ *PaperSize) {
	_cgo_of__return__ := C._gtk_paper_size_copy((*C.GtkPaperSize)(_self_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) Free() () {
	C._gtk_paper_size_free((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetDefaultBottomMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_default_bottom_margin((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) GetDefaultLeftMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_default_left_margin((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) GetDefaultRightMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_default_right_margin((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) GetDefaultTopMargin(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_default_top_margin((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) GetDisplayName() (_return_ string) {
	_cgo_of__return__ := C._gtk_paper_size_get_display_name((*C.GtkPaperSize)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PaperSize) GetHeight(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_height((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_paper_size_get_name((*C.GtkPaperSize)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PaperSize) GetPpdName() (_return_ string) {
	_cgo_of__return__ := C._gtk_paper_size_get_ppd_name((*C.GtkPaperSize)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PaperSize) GetWidth(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_paper_size_get_width((*C.GtkPaperSize)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PaperSize) IsCustom() (_return_ bool) {
	_cgo_of__return__ := C._gtk_paper_size_is_custom((*C.GtkPaperSize)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PaperSize) IsEqual(size2 *PaperSize) (_return_ bool) {
	_cgo_of_size2_ := (*C.GtkPaperSize)(size2)
	_cgo_of__return__ := C._gtk_paper_size_is_equal((*C.GtkPaperSize)(_self_), (*C.GtkPaperSize)(_cgo_of_size2_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PaperSize) SetSize(width float64, height float64, unit C.GtkUnit) () {
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C._gtk_paper_size_set_size((*C.GtkPaperSize)(_self_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PaperSize) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	C._gtk_paper_size_to_key_file((*C.GtkPaperSize)(_self_), (*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_))
	return
}

func PlugNew(socket_id C.Window) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_plug_new((C.Window)(socket_id))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func PlugNewForDisplay(display *C.GdkDisplay, socket_id C.Window) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_plug_new_for_display((*C.GdkDisplay)(display), (C.Window)(socket_id))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Plug) Construct(socket_id C.Window) () {
	C._gtk_plug_construct((*C.GtkPlug)(_self_), (C.Window)(socket_id))
	return
}

func (_self_ *Plug) ConstructForDisplay(display *C.GdkDisplay, socket_id C.Window) () {
	C._gtk_plug_construct_for_display((*C.GtkPlug)(_self_), (*C.GdkDisplay)(display), (C.Window)(socket_id))
	return
}

func (_self_ *Plug) GetEmbedded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_plug_get_embedded((*C.GtkPlug)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Plug) GetId() (_return_ C.Window) {
	_return_ = C._gtk_plug_get_id((*C.GtkPlug)(_self_))
	return
}

func (_self_ *Plug) GetSocketWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_plug_get_socket_window((*C.GtkPlug)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C._gtk_print_context_create_pango_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoLayout() (_return_ *C.PangoLayout) {
	_return_ = C._gtk_print_context_create_pango_layout((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetCairoContext() (_return_ *C.cairo_t) {
	_return_ = C._gtk_print_context_get_cairo_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetDpiX() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_context_get_dpi_x((*C.GtkPrintContext)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintContext) GetDpiY() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_context_get_dpi_y((*C.GtkPrintContext)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintContext) GetHardMargins() (_return_ bool, top float64, bottom float64, left float64, right float64) {
	var _cgo_of_top_ C.gdouble
	var _cgo_of_bottom_ C.gdouble
	var _cgo_of_left_ C.gdouble
	var _cgo_of_right_ C.gdouble
	_cgo_of__return__ := C._gtk_print_context_get_hard_margins((*C.GtkPrintContext)(_self_), (*C.gdouble)(&_cgo_of_top_), (*C.gdouble)(&_cgo_of_bottom_), (*C.gdouble)(&_cgo_of_left_), (*C.gdouble)(&_cgo_of_right_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	top = float64(_cgo_of_top_)
	bottom = float64(_cgo_of_bottom_)
	left = float64(_cgo_of_left_)
	right = float64(_cgo_of_right_)
	return
}

func (_self_ *PrintContext) GetHeight() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_context_get_height((*C.GtkPrintContext)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintContext) GetPageSetup() (_return_ *PageSetup) {
	_cgo_of__return__ := C._gtk_print_context_get_page_setup((*C.GtkPrintContext)(_self_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func (_self_ *PrintContext) GetPangoFontmap() (_return_ *C.PangoFontMap) {
	_return_ = C._gtk_print_context_get_pango_fontmap((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetWidth() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_context_get_width((*C.GtkPrintContext)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintContext) SetCairoContext(cr *C.cairo_t, dpi_x C.double, dpi_y C.double) () {
	C._gtk_print_context_set_cairo_context((*C.GtkPrintContext)(_self_), (*C.cairo_t)(cr), (C.double)(dpi_x), (C.double)(dpi_y))
	return
}

func PrintOperationNew() (_return_ *PrintOperation) {
	_cgo_of__return__ := C.gtk_print_operation_new()
	_return_ = (*PrintOperation)(_cgo_of__return__)
	return
}

func (_self_ *PrintOperation) Cancel() () {
	C._gtk_print_operation_cancel((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) DrawPageFinish() () {
	C._gtk_print_operation_draw_page_finish((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetDefaultPageSetup() (_return_ *PageSetup) {
	_cgo_of__return__ := C._gtk_print_operation_get_default_page_setup((*C.GtkPrintOperation)(_self_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func (_self_ *PrintOperation) GetEmbedPageSetup() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_operation_get_embed_page_setup((*C.GtkPrintOperation)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) GetError() (_error_ unsafe.Pointer) {
	C._gtk_print_operation_get_error((*C.GtkPrintOperation)(_self_), unsafe.Pointer(_error_))
	return
}

func (_self_ *PrintOperation) GetHasSelection() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_operation_get_has_selection((*C.GtkPrintOperation)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) GetNPagesToPrint() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_operation_get_n_pages_to_print((*C.GtkPrintOperation)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintOperation) GetPrintSettings() (_return_ *PrintSettings) {
	_cgo_of__return__ := C._gtk_print_operation_get_print_settings((*C.GtkPrintOperation)(_self_))
	_return_ = (*PrintSettings)(_cgo_of__return__)
	return
}

func (_self_ *PrintOperation) GetStatus() (_return_ C.GtkPrintStatus) {
	_return_ = C._gtk_print_operation_get_status((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetStatusString() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_operation_get_status_string((*C.GtkPrintOperation)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintOperation) GetSupportSelection() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_operation_get_support_selection((*C.GtkPrintOperation)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) IsFinished() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_operation_is_finished((*C.GtkPrintOperation)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintOperation) Run(action C.GtkPrintOperationAction, parent *Window) (_return_ C.GtkPrintOperationResult, _error_ unsafe.Pointer) {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_return_ = C._gtk_print_operation_run((*C.GtkPrintOperation)(_self_), (C.GtkPrintOperationAction)(action), (*C.GtkWindow)(_cgo_of_parent_), unsafe.Pointer(_error_))
	return
}

func (_self_ *PrintOperation) SetAllowAsync(allow_async bool) () {
	_cgo_of_allow_async_ := C.glibtrue()
	if !allow_async {
		_cgo_of_allow_async_ = C.glibfalse()
	}
	C._gtk_print_operation_set_allow_async((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_allow_async_))
	return
}

func (_self_ *PrintOperation) SetCurrentPage(current_page int) () {
	_cgo_of_current_page_ := (C.gint)(current_page)
	C._gtk_print_operation_set_current_page((*C.GtkPrintOperation)(_self_), (C.gint)(_cgo_of_current_page_))
	return
}

func (_self_ *PrintOperation) SetCustomTabLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_print_operation_set_custom_tab_label((*C.GtkPrintOperation)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *PrintOperation) SetDefaultPageSetup(default_page_setup *PageSetup) () {
	_cgo_of_default_page_setup_ := (*C.GtkPageSetup)(default_page_setup)
	C._gtk_print_operation_set_default_page_setup((*C.GtkPrintOperation)(_self_), (*C.GtkPageSetup)(_cgo_of_default_page_setup_))
	return
}

func (_self_ *PrintOperation) SetDeferDrawing() () {
	C._gtk_print_operation_set_defer_drawing((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) SetEmbedPageSetup(embed bool) () {
	_cgo_of_embed_ := C.glibtrue()
	if !embed {
		_cgo_of_embed_ = C.glibfalse()
	}
	C._gtk_print_operation_set_embed_page_setup((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_embed_))
	return
}

func (_self_ *PrintOperation) SetExportFilename(filename string) () {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	C._gtk_print_operation_set_export_filename((*C.GtkPrintOperation)(_self_), (*C.gchar)(_cgo_of_filename_))
	return
}

func (_self_ *PrintOperation) SetHasSelection(has_selection bool) () {
	_cgo_of_has_selection_ := C.glibtrue()
	if !has_selection {
		_cgo_of_has_selection_ = C.glibfalse()
	}
	C._gtk_print_operation_set_has_selection((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_has_selection_))
	return
}

func (_self_ *PrintOperation) SetJobName(job_name string) () {
	_cgo_of_job_name_ := (*C.gchar)(unsafe.Pointer(C.CString(job_name)))
	C._gtk_print_operation_set_job_name((*C.GtkPrintOperation)(_self_), (*C.gchar)(_cgo_of_job_name_))
	return
}

func (_self_ *PrintOperation) SetNPages(n_pages int) () {
	_cgo_of_n_pages_ := (C.gint)(n_pages)
	C._gtk_print_operation_set_n_pages((*C.GtkPrintOperation)(_self_), (C.gint)(_cgo_of_n_pages_))
	return
}

func (_self_ *PrintOperation) SetPrintSettings(print_settings *PrintSettings) () {
	_cgo_of_print_settings_ := (*C.GtkPrintSettings)(print_settings)
	C._gtk_print_operation_set_print_settings((*C.GtkPrintOperation)(_self_), (*C.GtkPrintSettings)(_cgo_of_print_settings_))
	return
}

func (_self_ *PrintOperation) SetShowProgress(show_progress bool) () {
	_cgo_of_show_progress_ := C.glibtrue()
	if !show_progress {
		_cgo_of_show_progress_ = C.glibfalse()
	}
	C._gtk_print_operation_set_show_progress((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_show_progress_))
	return
}

func (_self_ *PrintOperation) SetSupportSelection(support_selection bool) () {
	_cgo_of_support_selection_ := C.glibtrue()
	if !support_selection {
		_cgo_of_support_selection_ = C.glibfalse()
	}
	C._gtk_print_operation_set_support_selection((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_support_selection_))
	return
}

func (_self_ *PrintOperation) SetTrackPrintStatus(track_status bool) () {
	_cgo_of_track_status_ := C.glibtrue()
	if !track_status {
		_cgo_of_track_status_ = C.glibfalse()
	}
	C._gtk_print_operation_set_track_print_status((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_track_status_))
	return
}

func (_self_ *PrintOperation) SetUnit(unit C.GtkUnit) () {
	C._gtk_print_operation_set_unit((*C.GtkPrintOperation)(_self_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PrintOperation) SetUseFullPage(full_page bool) () {
	_cgo_of_full_page_ := C.glibtrue()
	if !full_page {
		_cgo_of_full_page_ = C.glibfalse()
	}
	C._gtk_print_operation_set_use_full_page((*C.GtkPrintOperation)(_self_), (C.gboolean)(_cgo_of_full_page_))
	return
}

func PrintSettingsNew() (_return_ *PrintSettings) {
	_cgo_of__return__ := C.gtk_print_settings_new()
	_return_ = (*PrintSettings)(_cgo_of__return__)
	return
}

func PrintSettingsNewFromFile(file_name string) (_return_ *PrintSettings, _error_ unsafe.Pointer) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_cgo_of__return__ := C._gtk_print_settings_new_from_file((*C.gchar)(_cgo_of_file_name_), unsafe.Pointer(_error_))
	_return_ = (*PrintSettings)(_cgo_of__return__)
	return
}

func PrintSettingsNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_return_ *PrintSettings, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_print_settings_new_from_key_file((*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = (*PrintSettings)(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) Copy() (_return_ *PrintSettings) {
	_cgo_of__return__ := C._gtk_print_settings_copy((*C.GtkPrintSettings)(_self_))
	_return_ = (*PrintSettings)(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) Foreach(func_ C.GtkPrintSettingsFunc, user_data C.gpointer) () {
	C._gtk_print_settings_foreach((*C.GtkPrintSettings)(_self_), (C.GtkPrintSettingsFunc)(func_), (C.gpointer)(user_data))
	return
}

func (_self_ *PrintSettings) Get(key string) (_return_ string) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_get((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetBool(key string) (_return_ bool) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_get_bool((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetCollate() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_settings_get_collate((*C.GtkPrintSettings)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetDefaultSource() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_default_source((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetDither() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_dither((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetDouble(key string) (_return_ float64) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_get_double((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetDoubleWithDefault(key string, def float64) (_return_ float64) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_def_ := (C.gdouble)(def)
	_cgo_of__return__ := C._gtk_print_settings_get_double_with_default((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gdouble)(_cgo_of_def_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetDuplex() (_return_ C.GtkPrintDuplex) {
	_return_ = C._gtk_print_settings_get_duplex((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetFinishings() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_finishings((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetInt(key string) (_return_ int) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_get_int((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetIntWithDefault(key string, def int) (_return_ int) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_def_ := (C.gint)(def)
	_cgo_of__return__ := C._gtk_print_settings_get_int_with_default((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gint)(_cgo_of_def_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetLength(key string, unit C.GtkUnit) (_return_ float64) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_get_length((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetMediaType() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_media_type((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetNCopies() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_settings_get_n_copies((*C.GtkPrintSettings)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetNumberUp() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_settings_get_number_up((*C.GtkPrintSettings)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetNumberUpLayout() (_return_ C.GtkNumberUpLayout) {
	_return_ = C._gtk_print_settings_get_number_up_layout((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C._gtk_print_settings_get_orientation((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOutputBin() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_output_bin((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetPageRanges() (_return_ *PageRange, num_ranges int) {
	var _cgo_of_num_ranges_ C.gint
	_cgo_of__return__ := C._gtk_print_settings_get_page_ranges((*C.GtkPrintSettings)(_self_), (*C.gint)(&_cgo_of_num_ranges_))
	_return_ = (*PageRange)(_cgo_of__return__)
	num_ranges = int(_cgo_of_num_ranges_)
	return
}

func (_self_ *PrintSettings) GetPageSet() (_return_ C.GtkPageSet) {
	_return_ = C._gtk_print_settings_get_page_set((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPaperHeight(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_settings_get_paper_height((*C.GtkPrintSettings)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetPaperSize() (_return_ *PaperSize) {
	_cgo_of__return__ := C._gtk_print_settings_get_paper_size((*C.GtkPrintSettings)(_self_))
	_return_ = (*PaperSize)(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetPaperWidth(unit C.GtkUnit) (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_settings_get_paper_width((*C.GtkPrintSettings)(_self_), (C.GtkUnit)(unit))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetPrintPages() (_return_ C.GtkPrintPages) {
	_return_ = C._gtk_print_settings_get_print_pages((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPrinter() (_return_ string) {
	_cgo_of__return__ := C._gtk_print_settings_get_printer((*C.GtkPrintSettings)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *PrintSettings) GetPrinterLpi() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_settings_get_printer_lpi((*C.GtkPrintSettings)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetQuality() (_return_ C.GtkPrintQuality) {
	_return_ = C._gtk_print_settings_get_quality((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetResolution() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_settings_get_resolution((*C.GtkPrintSettings)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetResolutionX() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_settings_get_resolution_x((*C.GtkPrintSettings)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetResolutionY() (_return_ int) {
	_cgo_of__return__ := C._gtk_print_settings_get_resolution_y((*C.GtkPrintSettings)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetReverse() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_settings_get_reverse((*C.GtkPrintSettings)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) GetScale() (_return_ float64) {
	_cgo_of__return__ := C._gtk_print_settings_get_scale((*C.GtkPrintSettings)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *PrintSettings) GetUseColor() (_return_ bool) {
	_cgo_of__return__ := C._gtk_print_settings_get_use_color((*C.GtkPrintSettings)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) HasKey(key string) (_return_ bool) {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of__return__ := C._gtk_print_settings_has_key((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) LoadFile(file_name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_cgo_of__return__ := C._gtk_print_settings_load_file((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_file_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_print_settings_load_key_file((*C.GtkPrintSettings)(_self_), (*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) Set(key string, value string) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := (*C.gchar)(unsafe.Pointer(C.CString(value)))
	C._gtk_print_settings_set((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (*C.gchar)(_cgo_of_value_))
	return
}

func (_self_ *PrintSettings) SetBool(key string, value bool) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := C.glibtrue()
	if !value {
		_cgo_of_value_ = C.glibfalse()
	}
	C._gtk_print_settings_set_bool((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gboolean)(_cgo_of_value_))
	return
}

func (_self_ *PrintSettings) SetCollate(collate bool) () {
	_cgo_of_collate_ := C.glibtrue()
	if !collate {
		_cgo_of_collate_ = C.glibfalse()
	}
	C._gtk_print_settings_set_collate((*C.GtkPrintSettings)(_self_), (C.gboolean)(_cgo_of_collate_))
	return
}

func (_self_ *PrintSettings) SetDefaultSource(default_source string) () {
	_cgo_of_default_source_ := (*C.gchar)(unsafe.Pointer(C.CString(default_source)))
	C._gtk_print_settings_set_default_source((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_default_source_))
	return
}

func (_self_ *PrintSettings) SetDither(dither string) () {
	_cgo_of_dither_ := (*C.gchar)(unsafe.Pointer(C.CString(dither)))
	C._gtk_print_settings_set_dither((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_dither_))
	return
}

func (_self_ *PrintSettings) SetDouble(key string, value float64) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_print_settings_set_double((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *PrintSettings) SetDuplex(duplex C.GtkPrintDuplex) () {
	C._gtk_print_settings_set_duplex((*C.GtkPrintSettings)(_self_), (C.GtkPrintDuplex)(duplex))
	return
}

func (_self_ *PrintSettings) SetFinishings(finishings string) () {
	_cgo_of_finishings_ := (*C.gchar)(unsafe.Pointer(C.CString(finishings)))
	C._gtk_print_settings_set_finishings((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_finishings_))
	return
}

func (_self_ *PrintSettings) SetInt(key string, value int) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := (C.gint)(value)
	C._gtk_print_settings_set_int((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gint)(_cgo_of_value_))
	return
}

func (_self_ *PrintSettings) SetLength(key string, value float64, unit C.GtkUnit) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_print_settings_set_length((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_), (C.gdouble)(_cgo_of_value_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PrintSettings) SetMediaType(media_type string) () {
	_cgo_of_media_type_ := (*C.gchar)(unsafe.Pointer(C.CString(media_type)))
	C._gtk_print_settings_set_media_type((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_media_type_))
	return
}

func (_self_ *PrintSettings) SetNCopies(num_copies int) () {
	_cgo_of_num_copies_ := (C.gint)(num_copies)
	C._gtk_print_settings_set_n_copies((*C.GtkPrintSettings)(_self_), (C.gint)(_cgo_of_num_copies_))
	return
}

func (_self_ *PrintSettings) SetNumberUp(number_up int) () {
	_cgo_of_number_up_ := (C.gint)(number_up)
	C._gtk_print_settings_set_number_up((*C.GtkPrintSettings)(_self_), (C.gint)(_cgo_of_number_up_))
	return
}

func (_self_ *PrintSettings) SetNumberUpLayout(number_up_layout C.GtkNumberUpLayout) () {
	C._gtk_print_settings_set_number_up_layout((*C.GtkPrintSettings)(_self_), (C.GtkNumberUpLayout)(number_up_layout))
	return
}

func (_self_ *PrintSettings) SetOrientation(orientation C.GtkPageOrientation) () {
	C._gtk_print_settings_set_orientation((*C.GtkPrintSettings)(_self_), (C.GtkPageOrientation)(orientation))
	return
}

func (_self_ *PrintSettings) SetOutputBin(output_bin string) () {
	_cgo_of_output_bin_ := (*C.gchar)(unsafe.Pointer(C.CString(output_bin)))
	C._gtk_print_settings_set_output_bin((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_output_bin_))
	return
}

func (_self_ *PrintSettings) SetPageRanges(page_ranges *PageRange, num_ranges int) () {
	_cgo_of_page_ranges_ := (*C.GtkPageRange)(page_ranges)
	_cgo_of_num_ranges_ := (C.gint)(num_ranges)
	C._gtk_print_settings_set_page_ranges((*C.GtkPrintSettings)(_self_), (*C.GtkPageRange)(_cgo_of_page_ranges_), (C.gint)(_cgo_of_num_ranges_))
	return
}

func (_self_ *PrintSettings) SetPageSet(page_set C.GtkPageSet) () {
	C._gtk_print_settings_set_page_set((*C.GtkPrintSettings)(_self_), (C.GtkPageSet)(page_set))
	return
}

func (_self_ *PrintSettings) SetPaperHeight(height float64, unit C.GtkUnit) () {
	_cgo_of_height_ := (C.gdouble)(height)
	C._gtk_print_settings_set_paper_height((*C.GtkPrintSettings)(_self_), (C.gdouble)(_cgo_of_height_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PrintSettings) SetPaperSize(paper_size *PaperSize) () {
	_cgo_of_paper_size_ := (*C.GtkPaperSize)(paper_size)
	C._gtk_print_settings_set_paper_size((*C.GtkPrintSettings)(_self_), (*C.GtkPaperSize)(_cgo_of_paper_size_))
	return
}

func (_self_ *PrintSettings) SetPaperWidth(width float64, unit C.GtkUnit) () {
	_cgo_of_width_ := (C.gdouble)(width)
	C._gtk_print_settings_set_paper_width((*C.GtkPrintSettings)(_self_), (C.gdouble)(_cgo_of_width_), (C.GtkUnit)(unit))
	return
}

func (_self_ *PrintSettings) SetPrintPages(pages C.GtkPrintPages) () {
	C._gtk_print_settings_set_print_pages((*C.GtkPrintSettings)(_self_), (C.GtkPrintPages)(pages))
	return
}

func (_self_ *PrintSettings) SetPrinter(printer string) () {
	_cgo_of_printer_ := (*C.gchar)(unsafe.Pointer(C.CString(printer)))
	C._gtk_print_settings_set_printer((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_printer_))
	return
}

func (_self_ *PrintSettings) SetPrinterLpi(lpi float64) () {
	_cgo_of_lpi_ := (C.gdouble)(lpi)
	C._gtk_print_settings_set_printer_lpi((*C.GtkPrintSettings)(_self_), (C.gdouble)(_cgo_of_lpi_))
	return
}

func (_self_ *PrintSettings) SetQuality(quality C.GtkPrintQuality) () {
	C._gtk_print_settings_set_quality((*C.GtkPrintSettings)(_self_), (C.GtkPrintQuality)(quality))
	return
}

func (_self_ *PrintSettings) SetResolution(resolution int) () {
	_cgo_of_resolution_ := (C.gint)(resolution)
	C._gtk_print_settings_set_resolution((*C.GtkPrintSettings)(_self_), (C.gint)(_cgo_of_resolution_))
	return
}

func (_self_ *PrintSettings) SetResolutionXy(resolution_x int, resolution_y int) () {
	_cgo_of_resolution_x_ := (C.gint)(resolution_x)
	_cgo_of_resolution_y_ := (C.gint)(resolution_y)
	C._gtk_print_settings_set_resolution_xy((*C.GtkPrintSettings)(_self_), (C.gint)(_cgo_of_resolution_x_), (C.gint)(_cgo_of_resolution_y_))
	return
}

func (_self_ *PrintSettings) SetReverse(reverse bool) () {
	_cgo_of_reverse_ := C.glibtrue()
	if !reverse {
		_cgo_of_reverse_ = C.glibfalse()
	}
	C._gtk_print_settings_set_reverse((*C.GtkPrintSettings)(_self_), (C.gboolean)(_cgo_of_reverse_))
	return
}

func (_self_ *PrintSettings) SetScale(scale float64) () {
	_cgo_of_scale_ := (C.gdouble)(scale)
	C._gtk_print_settings_set_scale((*C.GtkPrintSettings)(_self_), (C.gdouble)(_cgo_of_scale_))
	return
}

func (_self_ *PrintSettings) SetUseColor(use_color bool) () {
	_cgo_of_use_color_ := C.glibtrue()
	if !use_color {
		_cgo_of_use_color_ = C.glibfalse()
	}
	C._gtk_print_settings_set_use_color((*C.GtkPrintSettings)(_self_), (C.gboolean)(_cgo_of_use_color_))
	return
}

func (_self_ *PrintSettings) ToFile(file_name string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_file_name_ := (*C.gchar)(unsafe.Pointer(C.CString(file_name)))
	_cgo_of__return__ := C._gtk_print_settings_to_file((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_file_name_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *PrintSettings) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	C._gtk_print_settings_to_key_file((*C.GtkPrintSettings)(_self_), (*C.GKeyFile)(key_file), (*C.gchar)(_cgo_of_group_name_))
	return
}

func (_self_ *PrintSettings) Unset(key string) () {
	_cgo_of_key_ := (*C.gchar)(unsafe.Pointer(C.CString(key)))
	C._gtk_print_settings_unset((*C.GtkPrintSettings)(_self_), (*C.gchar)(_cgo_of_key_))
	return
}

func ProgressBarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_progress_bar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ProgressBar) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C._gtk_progress_bar_get_ellipsize((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetFraction() (_return_ float64) {
	_cgo_of__return__ := C._gtk_progress_bar_get_fraction((*C.GtkProgressBar)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *ProgressBar) GetInverted() (_return_ bool) {
	_cgo_of__return__ := C._gtk_progress_bar_get_inverted((*C.GtkProgressBar)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ProgressBar) GetPulseStep() (_return_ float64) {
	_cgo_of__return__ := C._gtk_progress_bar_get_pulse_step((*C.GtkProgressBar)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *ProgressBar) GetShowText() (_return_ bool) {
	_cgo_of__return__ := C._gtk_progress_bar_get_show_text((*C.GtkProgressBar)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ProgressBar) GetText() (_return_ string) {
	_cgo_of__return__ := C._gtk_progress_bar_get_text((*C.GtkProgressBar)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ProgressBar) Pulse() () {
	C._gtk_progress_bar_pulse((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C._gtk_progress_bar_set_ellipsize((*C.GtkProgressBar)(_self_), (C.PangoEllipsizeMode)(mode))
	return
}

func (_self_ *ProgressBar) SetFraction(fraction float64) () {
	_cgo_of_fraction_ := (C.gdouble)(fraction)
	C._gtk_progress_bar_set_fraction((*C.GtkProgressBar)(_self_), (C.gdouble)(_cgo_of_fraction_))
	return
}

func (_self_ *ProgressBar) SetInverted(inverted bool) () {
	_cgo_of_inverted_ := C.glibtrue()
	if !inverted {
		_cgo_of_inverted_ = C.glibfalse()
	}
	C._gtk_progress_bar_set_inverted((*C.GtkProgressBar)(_self_), (C.gboolean)(_cgo_of_inverted_))
	return
}

func (_self_ *ProgressBar) SetPulseStep(fraction float64) () {
	_cgo_of_fraction_ := (C.gdouble)(fraction)
	C._gtk_progress_bar_set_pulse_step((*C.GtkProgressBar)(_self_), (C.gdouble)(_cgo_of_fraction_))
	return
}

func (_self_ *ProgressBar) SetShowText(show_text bool) () {
	_cgo_of_show_text_ := C.glibtrue()
	if !show_text {
		_cgo_of_show_text_ = C.glibfalse()
	}
	C._gtk_progress_bar_set_show_text((*C.GtkProgressBar)(_self_), (C.gboolean)(_cgo_of_show_text_))
	return
}

func (_self_ *ProgressBar) SetText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_progress_bar_set_text((*C.GtkProgressBar)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func RadioActionNew(name string, label string, tooltip string, stock_id string, value int) (_return_ *RadioAction) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of_value_ := (C.gint)(value)
	_cgo_of__return__ := C._gtk_radio_action_new((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.gchar)(_cgo_of_tooltip_), (*C.gchar)(_cgo_of_stock_id_), (C.gint)(_cgo_of_value_))
	_return_ = (*RadioAction)(_cgo_of__return__)
	return
}

func (_self_ *RadioAction) GetCurrentValue() (_return_ int) {
	_cgo_of__return__ := C._gtk_radio_action_get_current_value((*C.GtkRadioAction)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *RadioAction) GetGroup() (_return_ *C.GSList) {
	_return_ = C._gtk_radio_action_get_group((*C.GtkRadioAction)(_self_))
	return
}

func (_self_ *RadioAction) JoinGroup(group_source *RadioAction) () {
	_cgo_of_group_source_ := (*C.GtkRadioAction)(group_source)
	C._gtk_radio_action_join_group((*C.GtkRadioAction)(_self_), (*C.GtkRadioAction)(_cgo_of_group_source_))
	return
}

func (_self_ *RadioAction) SetCurrentValue(current_value int) () {
	_cgo_of_current_value_ := (C.gint)(current_value)
	C._gtk_radio_action_set_current_value((*C.GtkRadioAction)(_self_), (C.gint)(_cgo_of_current_value_))
	return
}

func (_self_ *RadioAction) SetGroup(group *C.GSList) () {
	C._gtk_radio_action_set_group((*C.GtkRadioAction)(_self_), (*C.GSList)(group))
	return
}

func RadioButtonNew(group *C.GSList) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_radio_button_new((*C.GSList)(group))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioButtonNewFromWidget(radio_group_member *RadioButton) (_return_ *Widget) {
	_cgo_of_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member)
	_cgo_of__return__ := C.gtk_radio_button_new_from_widget((*C.GtkRadioButton)(_cgo_of_radio_group_member_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioButtonNewWithLabel(group *C.GSList, label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_button_new_with_label((*C.GSList)(group), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioButtonNewWithLabelFromWidget(radio_group_member *RadioButton, label string) (_return_ *Widget) {
	_cgo_of_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_button_new_with_label_from_widget((*C.GtkRadioButton)(_cgo_of_radio_group_member_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioButtonNewWithMnemonic(group *C.GSList, label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_button_new_with_mnemonic((*C.GSList)(group), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioButtonNewWithMnemonicFromWidget(radio_group_member *RadioButton, label string) (_return_ *Widget) {
	_cgo_of_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_button_new_with_mnemonic_from_widget((*C.GtkRadioButton)(_cgo_of_radio_group_member_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *RadioButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C._gtk_radio_button_get_group((*C.GtkRadioButton)(_self_))
	return
}

func (_self_ *RadioButton) JoinGroup(group_source *RadioButton) () {
	_cgo_of_group_source_ := (*C.GtkRadioButton)(group_source)
	C._gtk_radio_button_join_group((*C.GtkRadioButton)(_self_), (*C.GtkRadioButton)(_cgo_of_group_source_))
	return
}

func (_self_ *RadioButton) SetGroup(group *C.GSList) () {
	C._gtk_radio_button_set_group((*C.GtkRadioButton)(_self_), (*C.GSList)(group))
	return
}

func RadioMenuItemNew(group *C.GSList) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_radio_menu_item_new((*C.GSList)(group))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioMenuItemNewFromWidget(group *RadioMenuItem) (_return_ *Widget) {
	_cgo_of_group_ := (*C.GtkRadioMenuItem)(group)
	_cgo_of__return__ := C.gtk_radio_menu_item_new_from_widget((*C.GtkRadioMenuItem)(_cgo_of_group_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioMenuItemNewWithLabel(group *C.GSList, label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_menu_item_new_with_label((*C.GSList)(group), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioMenuItemNewWithLabelFromWidget(group *RadioMenuItem, label string) (_return_ *Widget) {
	_cgo_of_group_ := (*C.GtkRadioMenuItem)(group)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_menu_item_new_with_label_from_widget((*C.GtkRadioMenuItem)(_cgo_of_group_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioMenuItemNewWithMnemonic(group *C.GSList, label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_menu_item_new_with_mnemonic((*C.GSList)(group), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RadioMenuItemNewWithMnemonicFromWidget(group *RadioMenuItem, label string) (_return_ *Widget) {
	_cgo_of_group_ := (*C.GtkRadioMenuItem)(group)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_radio_menu_item_new_with_mnemonic_from_widget((*C.GtkRadioMenuItem)(_cgo_of_group_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *RadioMenuItem) GetGroup() (_return_ *C.GSList) {
	_return_ = C._gtk_radio_menu_item_get_group((*C.GtkRadioMenuItem)(_self_))
	return
}

func (_self_ *RadioMenuItem) SetGroup(group *C.GSList) () {
	C._gtk_radio_menu_item_set_group((*C.GtkRadioMenuItem)(_self_), (*C.GSList)(group))
	return
}

func RadioToolButtonNew(group *C.GSList) (_return_ *ToolItem) {
	_cgo_of__return__ := C.gtk_radio_tool_button_new((*C.GSList)(group))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func RadioToolButtonNewFromStock(group *C.GSList, stock_id string) (_return_ *ToolItem) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_radio_tool_button_new_from_stock((*C.GSList)(group), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func RadioToolButtonNewFromWidget(group *RadioToolButton) (_return_ *ToolItem) {
	_cgo_of_group_ := (*C.GtkRadioToolButton)(group)
	_cgo_of__return__ := C.gtk_radio_tool_button_new_from_widget((*C.GtkRadioToolButton)(_cgo_of_group_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func RadioToolButtonNewWithStockFromWidget(group *RadioToolButton, stock_id string) (_return_ *ToolItem) {
	_cgo_of_group_ := (*C.GtkRadioToolButton)(group)
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_radio_tool_button_new_with_stock_from_widget((*C.GtkRadioToolButton)(_cgo_of_group_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *RadioToolButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C._gtk_radio_tool_button_get_group((*C.GtkRadioToolButton)(_self_))
	return
}

func (_self_ *RadioToolButton) SetGroup(group *C.GSList) () {
	C._gtk_radio_tool_button_set_group((*C.GtkRadioToolButton)(_self_), (*C.GSList)(group))
	return
}

func (_self_ *Range) GetAdjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_range_get_adjustment((*C.GtkRange)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *Range) GetFillLevel() (_return_ float64) {
	_cgo_of__return__ := C._gtk_range_get_fill_level((*C.GtkRange)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Range) GetFlippable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_range_get_flippable((*C.GtkRange)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Range) GetInverted() (_return_ bool) {
	_cgo_of__return__ := C._gtk_range_get_inverted((*C.GtkRange)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Range) GetLowerStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C._gtk_range_get_lower_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetMinSliderSize() (_return_ int) {
	_cgo_of__return__ := C._gtk_range_get_min_slider_size((*C.GtkRange)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Range) GetRangeRect() (range_rect *C.GdkRectangle) {
	var _allocated_range_rect_ C.GdkRectangle
	C._gtk_range_get_range_rect((*C.GtkRange)(_self_), (*C.GdkRectangle)(&_allocated_range_rect_))
	range_rect = (*C.GdkRectangle)(&_allocated_range_rect_)
	return
}

func (_self_ *Range) GetRestrictToFillLevel() (_return_ bool) {
	_cgo_of__return__ := C._gtk_range_get_restrict_to_fill_level((*C.GtkRange)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Range) GetRoundDigits() (_return_ int) {
	_cgo_of__return__ := C._gtk_range_get_round_digits((*C.GtkRange)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Range) GetShowFillLevel() (_return_ bool) {
	_cgo_of__return__ := C._gtk_range_get_show_fill_level((*C.GtkRange)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Range) GetSliderRange() (slider_start int, slider_end int) {
	var _cgo_of_slider_start_ C.gint
	var _cgo_of_slider_end_ C.gint
	C._gtk_range_get_slider_range((*C.GtkRange)(_self_), (*C.gint)(&_cgo_of_slider_start_), (*C.gint)(&_cgo_of_slider_end_))
	slider_start = int(_cgo_of_slider_start_)
	slider_end = int(_cgo_of_slider_end_)
	return
}

func (_self_ *Range) GetSliderSizeFixed() (_return_ bool) {
	_cgo_of__return__ := C._gtk_range_get_slider_size_fixed((*C.GtkRange)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Range) GetUpperStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C._gtk_range_get_upper_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_range_get_value((*C.GtkRange)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Range) SetAdjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_range_set_adjustment((*C.GtkRange)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *Range) SetFillLevel(fill_level float64) () {
	_cgo_of_fill_level_ := (C.gdouble)(fill_level)
	C._gtk_range_set_fill_level((*C.GtkRange)(_self_), (C.gdouble)(_cgo_of_fill_level_))
	return
}

func (_self_ *Range) SetFlippable(flippable bool) () {
	_cgo_of_flippable_ := C.glibtrue()
	if !flippable {
		_cgo_of_flippable_ = C.glibfalse()
	}
	C._gtk_range_set_flippable((*C.GtkRange)(_self_), (C.gboolean)(_cgo_of_flippable_))
	return
}

func (_self_ *Range) SetIncrements(step float64, page float64) () {
	_cgo_of_step_ := (C.gdouble)(step)
	_cgo_of_page_ := (C.gdouble)(page)
	C._gtk_range_set_increments((*C.GtkRange)(_self_), (C.gdouble)(_cgo_of_step_), (C.gdouble)(_cgo_of_page_))
	return
}

func (_self_ *Range) SetInverted(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_range_set_inverted((*C.GtkRange)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Range) SetLowerStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C._gtk_range_set_lower_stepper_sensitivity((*C.GtkRange)(_self_), (C.GtkSensitivityType)(sensitivity))
	return
}

func (_self_ *Range) SetMinSliderSize(min_size int) () {
	_cgo_of_min_size_ := (C.gint)(min_size)
	C._gtk_range_set_min_slider_size((*C.GtkRange)(_self_), (C.gint)(_cgo_of_min_size_))
	return
}

func (_self_ *Range) SetRange(min float64, max float64) () {
	_cgo_of_min_ := (C.gdouble)(min)
	_cgo_of_max_ := (C.gdouble)(max)
	C._gtk_range_set_range((*C.GtkRange)(_self_), (C.gdouble)(_cgo_of_min_), (C.gdouble)(_cgo_of_max_))
	return
}

func (_self_ *Range) SetRestrictToFillLevel(restrict_to_fill_level bool) () {
	_cgo_of_restrict_to_fill_level_ := C.glibtrue()
	if !restrict_to_fill_level {
		_cgo_of_restrict_to_fill_level_ = C.glibfalse()
	}
	C._gtk_range_set_restrict_to_fill_level((*C.GtkRange)(_self_), (C.gboolean)(_cgo_of_restrict_to_fill_level_))
	return
}

func (_self_ *Range) SetRoundDigits(round_digits int) () {
	_cgo_of_round_digits_ := (C.gint)(round_digits)
	C._gtk_range_set_round_digits((*C.GtkRange)(_self_), (C.gint)(_cgo_of_round_digits_))
	return
}

func (_self_ *Range) SetShowFillLevel(show_fill_level bool) () {
	_cgo_of_show_fill_level_ := C.glibtrue()
	if !show_fill_level {
		_cgo_of_show_fill_level_ = C.glibfalse()
	}
	C._gtk_range_set_show_fill_level((*C.GtkRange)(_self_), (C.gboolean)(_cgo_of_show_fill_level_))
	return
}

func (_self_ *Range) SetSliderSizeFixed(size_fixed bool) () {
	_cgo_of_size_fixed_ := C.glibtrue()
	if !size_fixed {
		_cgo_of_size_fixed_ = C.glibfalse()
	}
	C._gtk_range_set_slider_size_fixed((*C.GtkRange)(_self_), (C.gboolean)(_cgo_of_size_fixed_))
	return
}

func (_self_ *Range) SetUpperStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C._gtk_range_set_upper_stepper_sensitivity((*C.GtkRange)(_self_), (C.GtkSensitivityType)(sensitivity))
	return
}

func (_self_ *Range) SetValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_range_set_value((*C.GtkRange)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func RecentActionNew(name string, label string, tooltip string, stock_id string) (_return_ *Action) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_recent_action_new((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.gchar)(_cgo_of_tooltip_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*Action)(_cgo_of__return__)
	return
}

func RecentActionNewForManager(name string, label string, tooltip string, stock_id string, manager *RecentManager) (_return_ *Action) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of_manager_ := (*C.GtkRecentManager)(manager)
	_cgo_of__return__ := C._gtk_recent_action_new_for_manager((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.gchar)(_cgo_of_tooltip_), (*C.gchar)(_cgo_of_stock_id_), (*C.GtkRecentManager)(_cgo_of_manager_))
	_return_ = (*Action)(_cgo_of__return__)
	return
}

func (_self_ *RecentAction) GetShowNumbers() (_return_ bool) {
	_cgo_of__return__ := C._gtk_recent_action_get_show_numbers((*C.GtkRecentAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentAction) SetShowNumbers(show_numbers bool) () {
	_cgo_of_show_numbers_ := C.glibtrue()
	if !show_numbers {
		_cgo_of_show_numbers_ = C.glibfalse()
	}
	C._gtk_recent_action_set_show_numbers((*C.GtkRecentAction)(_self_), (C.gboolean)(_cgo_of_show_numbers_))
	return
}

func RecentChooserMenuNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_recent_chooser_menu_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RecentChooserMenuNewForManager(manager *RecentManager) (_return_ *Widget) {
	_cgo_of_manager_ := (*C.GtkRecentManager)(manager)
	_cgo_of__return__ := C.gtk_recent_chooser_menu_new_for_manager((*C.GtkRecentManager)(_cgo_of_manager_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *RecentChooserMenu) GetShowNumbers() (_return_ bool) {
	_cgo_of__return__ := C._gtk_recent_chooser_menu_get_show_numbers((*C.GtkRecentChooserMenu)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentChooserMenu) SetShowNumbers(show_numbers bool) () {
	_cgo_of_show_numbers_ := C.glibtrue()
	if !show_numbers {
		_cgo_of_show_numbers_ = C.glibfalse()
	}
	C._gtk_recent_chooser_menu_set_show_numbers((*C.GtkRecentChooserMenu)(_self_), (C.gboolean)(_cgo_of_show_numbers_))
	return
}

func RecentChooserWidgetNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_recent_chooser_widget_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RecentChooserWidgetNewForManager(manager *RecentManager) (_return_ *Widget) {
	_cgo_of_manager_ := (*C.GtkRecentManager)(manager)
	_cgo_of__return__ := C.gtk_recent_chooser_widget_new_for_manager((*C.GtkRecentManager)(_cgo_of_manager_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func RecentFilterNew() (_return_ *RecentFilter) {
	_cgo_of__return__ := C.gtk_recent_filter_new()
	_return_ = (*RecentFilter)(_cgo_of__return__)
	return
}

func (_self_ *RecentFilter) AddAge(days int) () {
	_cgo_of_days_ := (C.gint)(days)
	C._gtk_recent_filter_add_age((*C.GtkRecentFilter)(_self_), (C.gint)(_cgo_of_days_))
	return
}

func (_self_ *RecentFilter) AddApplication(application string) () {
	_cgo_of_application_ := (*C.gchar)(unsafe.Pointer(C.CString(application)))
	C._gtk_recent_filter_add_application((*C.GtkRecentFilter)(_self_), (*C.gchar)(_cgo_of_application_))
	return
}

func (_self_ *RecentFilter) AddCustom(needed C.GtkRecentFilterFlags, func_ C.GtkRecentFilterFunc, data C.gpointer, data_destroy C.GDestroyNotify) () {
	C._gtk_recent_filter_add_custom((*C.GtkRecentFilter)(_self_), (C.GtkRecentFilterFlags)(needed), (C.GtkRecentFilterFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(data_destroy))
	return
}

func (_self_ *RecentFilter) AddGroup(group string) () {
	_cgo_of_group_ := (*C.gchar)(unsafe.Pointer(C.CString(group)))
	C._gtk_recent_filter_add_group((*C.GtkRecentFilter)(_self_), (*C.gchar)(_cgo_of_group_))
	return
}

func (_self_ *RecentFilter) AddMimeType(mime_type string) () {
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	C._gtk_recent_filter_add_mime_type((*C.GtkRecentFilter)(_self_), (*C.gchar)(_cgo_of_mime_type_))
	return
}

func (_self_ *RecentFilter) AddPattern(pattern string) () {
	_cgo_of_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(pattern)))
	C._gtk_recent_filter_add_pattern((*C.GtkRecentFilter)(_self_), (*C.gchar)(_cgo_of_pattern_))
	return
}

func (_self_ *RecentFilter) AddPixbufFormats() () {
	C._gtk_recent_filter_add_pixbuf_formats((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) Filter(filter_info *RecentFilterInfo) (_return_ bool) {
	_cgo_of_filter_info_ := (*C.GtkRecentFilterInfo)(filter_info)
	_cgo_of__return__ := C._gtk_recent_filter_filter((*C.GtkRecentFilter)(_self_), (*C.GtkRecentFilterInfo)(_cgo_of_filter_info_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentFilter) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_filter_get_name((*C.GtkRecentFilter)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentFilter) GetNeeded() (_return_ C.GtkRecentFilterFlags) {
	_return_ = C._gtk_recent_filter_get_needed((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) SetName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_recent_filter_set_name((*C.GtkRecentFilter)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *RecentInfo) CreateAppInfo(app_name string) (_return_ *C.GAppInfo, _error_ unsafe.Pointer) {
	_cgo_of_app_name_ := (*C.gchar)(unsafe.Pointer(C.CString(app_name)))
	_return_ = C._gtk_recent_info_create_app_info((*C.GtkRecentInfo)(_self_), (*C.gchar)(_cgo_of_app_name_), unsafe.Pointer(_error_))
	return
}

func (_self_ *RecentInfo) Exists() (_return_ bool) {
	_cgo_of__return__ := C._gtk_recent_info_exists((*C.GtkRecentInfo)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) GetAdded() (_return_ C.time_t) {
	_return_ = C._gtk_recent_info_get_added((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetAge() (_return_ int) {
	_cgo_of__return__ := C._gtk_recent_info_get_age((*C.GtkRecentInfo)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *RecentInfo) GetApplicationInfo(app_name string) (_return_ bool, app_exec unsafe.Pointer, count uint, time_ C.time_t) {
	_cgo_of_app_name_ := (*C.gchar)(unsafe.Pointer(C.CString(app_name)))
	var _cgo_of_count_ C.guint
	_cgo_of__return__ := C._gtk_recent_info_get_application_info((*C.GtkRecentInfo)(_self_), (*C.gchar)(_cgo_of_app_name_), unsafe.Pointer(app_exec), (*C.guint)(&_cgo_of_count_), (*C.time_t)(&time_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	count = uint(_cgo_of_count_)
	return
}

func (_self_ *RecentInfo) GetApplications() (_return_ unsafe.Pointer, length uint64) {
	var _cgo_of_length_ C.gsize
	_return_ = unsafe.Pointer(C._gtk_recent_info_get_applications((*C.GtkRecentInfo)(_self_), (*C.gsize)(&_cgo_of_length_)))
	length = uint64(_cgo_of_length_)
	return
}

func (_self_ *RecentInfo) GetDescription() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_description((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetDisplayName() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_display_name((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetGicon() (_return_ *C.GIcon) {
	_return_ = C._gtk_recent_info_get_gicon((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetGroups() (_return_ unsafe.Pointer, length uint64) {
	var _cgo_of_length_ C.gsize
	_return_ = unsafe.Pointer(C._gtk_recent_info_get_groups((*C.GtkRecentInfo)(_self_), (*C.gsize)(&_cgo_of_length_)))
	length = uint64(_cgo_of_length_)
	return
}

func (_self_ *RecentInfo) GetIcon(size int) (_return_ *C.GdkPixbuf) {
	_cgo_of_size_ := (C.gint)(size)
	_return_ = C._gtk_recent_info_get_icon((*C.GtkRecentInfo)(_self_), (C.gint)(_cgo_of_size_))
	return
}

func (_self_ *RecentInfo) GetMimeType() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_mime_type((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetModified() (_return_ C.time_t) {
	_return_ = C._gtk_recent_info_get_modified((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetPrivateHint() (_return_ bool) {
	_cgo_of__return__ := C._gtk_recent_info_get_private_hint((*C.GtkRecentInfo)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) GetShortName() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_short_name((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetUri() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_uri((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetUriDisplay() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_get_uri_display((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) GetVisited() (_return_ C.time_t) {
	_return_ = C._gtk_recent_info_get_visited((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) HasApplication(app_name string) (_return_ bool) {
	_cgo_of_app_name_ := (*C.gchar)(unsafe.Pointer(C.CString(app_name)))
	_cgo_of__return__ := C._gtk_recent_info_has_application((*C.GtkRecentInfo)(_self_), (*C.gchar)(_cgo_of_app_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) HasGroup(group_name string) (_return_ bool) {
	_cgo_of_group_name_ := (*C.gchar)(unsafe.Pointer(C.CString(group_name)))
	_cgo_of__return__ := C._gtk_recent_info_has_group((*C.GtkRecentInfo)(_self_), (*C.gchar)(_cgo_of_group_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) IsLocal() (_return_ bool) {
	_cgo_of__return__ := C._gtk_recent_info_is_local((*C.GtkRecentInfo)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) LastApplication() (_return_ string) {
	_cgo_of__return__ := C._gtk_recent_info_last_application((*C.GtkRecentInfo)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *RecentInfo) Match(info_b *RecentInfo) (_return_ bool) {
	_cgo_of_info_b_ := (*C.GtkRecentInfo)(info_b)
	_cgo_of__return__ := C._gtk_recent_info_match((*C.GtkRecentInfo)(_self_), (*C.GtkRecentInfo)(_cgo_of_info_b_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentInfo) Ref() (_return_ *RecentInfo) {
	_cgo_of__return__ := C._gtk_recent_info_ref((*C.GtkRecentInfo)(_self_))
	_return_ = (*RecentInfo)(_cgo_of__return__)
	return
}

func (_self_ *RecentInfo) Unref() () {
	C._gtk_recent_info_unref((*C.GtkRecentInfo)(_self_))
	return
}

func RecentManagerNew() (_return_ *RecentManager) {
	_cgo_of__return__ := C.gtk_recent_manager_new()
	_return_ = (*RecentManager)(_cgo_of__return__)
	return
}

func RecentManagerGetDefault() (_return_ *RecentManager) {
	_cgo_of__return__ := C.gtk_recent_manager_get_default()
	_return_ = (*RecentManager)(_cgo_of__return__)
	return
}

func (_self_ *RecentManager) AddFull(uri string, recent_data *RecentData) (_return_ bool) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_recent_data_ := (*C.GtkRecentData)(recent_data)
	_cgo_of__return__ := C._gtk_recent_manager_add_full((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.GtkRecentData)(_cgo_of_recent_data_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentManager) AddItem(uri string) (_return_ bool) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of__return__ := C._gtk_recent_manager_add_item((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentManager) GetItems() (_return_ *C.GList) {
	_return_ = C._gtk_recent_manager_get_items((*C.GtkRecentManager)(_self_))
	return
}

func (_self_ *RecentManager) HasItem(uri string) (_return_ bool) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of__return__ := C._gtk_recent_manager_has_item((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentManager) LookupItem(uri string) (_return_ *RecentInfo, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of__return__ := C._gtk_recent_manager_lookup_item((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	_return_ = (*RecentInfo)(_cgo_of__return__)
	return
}

func (_self_ *RecentManager) MoveItem(uri string, new_uri string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_new_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(new_uri)))
	_cgo_of__return__ := C._gtk_recent_manager_move_item((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_), (*C.gchar)(_cgo_of_new_uri_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *RecentManager) PurgeItems() (_return_ int, _error_ unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_recent_manager_purge_items((*C.GtkRecentManager)(_self_), unsafe.Pointer(_error_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *RecentManager) RemoveItem(uri string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of__return__ := C._gtk_recent_manager_remove_item((*C.GtkRecentManager)(_self_), (*C.gchar)(_cgo_of_uri_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RequisitionNew() (_return_ *Requisition) {
	_cgo_of__return__ := C.gtk_requisition_new()
	_return_ = (*Requisition)(_cgo_of__return__)
	return
}

func (_self_ *Requisition) Copy() (_return_ *Requisition) {
	_cgo_of__return__ := C._gtk_requisition_copy((*C.GtkRequisition)(_self_))
	_return_ = (*Requisition)(_cgo_of__return__)
	return
}

func (_self_ *Requisition) Free() () {
	C._gtk_requisition_free((*C.GtkRequisition)(_self_))
	return
}

func ScaleNew(orientation C.GtkOrientation, adjustment *Adjustment) (_return_ *Widget) {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	_cgo_of__return__ := C.gtk_scale_new((C.GtkOrientation)(orientation), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ScaleNewWithRange(orientation C.GtkOrientation, min float64, max float64, step float64) (_return_ *Widget) {
	_cgo_of_min_ := (C.gdouble)(min)
	_cgo_of_max_ := (C.gdouble)(max)
	_cgo_of_step_ := (C.gdouble)(step)
	_cgo_of__return__ := C.gtk_scale_new_with_range((C.GtkOrientation)(orientation), (C.gdouble)(_cgo_of_min_), (C.gdouble)(_cgo_of_max_), (C.gdouble)(_cgo_of_step_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Scale) AddMark(value float64, position C.GtkPositionType, markup string) () {
	_cgo_of_value_ := (C.gdouble)(value)
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_scale_add_mark((*C.GtkScale)(_self_), (C.gdouble)(_cgo_of_value_), (C.GtkPositionType)(position), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *Scale) ClearMarks() () {
	C._gtk_scale_clear_marks((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetDigits() (_return_ int) {
	_cgo_of__return__ := C._gtk_scale_get_digits((*C.GtkScale)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Scale) GetDrawValue() (_return_ bool) {
	_cgo_of__return__ := C._gtk_scale_get_draw_value((*C.GtkScale)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Scale) GetHasOrigin() (_return_ bool) {
	_cgo_of__return__ := C._gtk_scale_get_has_origin((*C.GtkScale)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Scale) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C._gtk_scale_get_layout((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetLayoutOffsets() (x int, y int) {
	var _cgo_of_x_ C.gint
	var _cgo_of_y_ C.gint
	C._gtk_scale_get_layout_offsets((*C.GtkScale)(_self_), (*C.gint)(&_cgo_of_x_), (*C.gint)(&_cgo_of_y_))
	x = int(_cgo_of_x_)
	y = int(_cgo_of_y_)
	return
}

func (_self_ *Scale) GetValuePos() (_return_ C.GtkPositionType) {
	_return_ = C._gtk_scale_get_value_pos((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) SetDigits(digits int) () {
	_cgo_of_digits_ := (C.gint)(digits)
	C._gtk_scale_set_digits((*C.GtkScale)(_self_), (C.gint)(_cgo_of_digits_))
	return
}

func (_self_ *Scale) SetDrawValue(draw_value bool) () {
	_cgo_of_draw_value_ := C.glibtrue()
	if !draw_value {
		_cgo_of_draw_value_ = C.glibfalse()
	}
	C._gtk_scale_set_draw_value((*C.GtkScale)(_self_), (C.gboolean)(_cgo_of_draw_value_))
	return
}

func (_self_ *Scale) SetHasOrigin(has_origin bool) () {
	_cgo_of_has_origin_ := C.glibtrue()
	if !has_origin {
		_cgo_of_has_origin_ = C.glibfalse()
	}
	C._gtk_scale_set_has_origin((*C.GtkScale)(_self_), (C.gboolean)(_cgo_of_has_origin_))
	return
}

func (_self_ *Scale) SetValuePos(pos C.GtkPositionType) () {
	C._gtk_scale_set_value_pos((*C.GtkScale)(_self_), (C.GtkPositionType)(pos))
	return
}

func ScaleButtonNew(size C.GtkIconSize, min float64, max float64, step float64, icons unsafe.Pointer) (_return_ *Widget) {
	_cgo_of_min_ := (C.gdouble)(min)
	_cgo_of_max_ := (C.gdouble)(max)
	_cgo_of_step_ := (C.gdouble)(step)
	_cgo_of__return__ := C._gtk_scale_button_new((C.GtkIconSize)(size), (C.gdouble)(_cgo_of_min_), (C.gdouble)(_cgo_of_max_), (C.gdouble)(_cgo_of_step_), unsafe.Pointer(icons))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) GetAdjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_scale_button_get_adjustment((*C.GtkScaleButton)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) GetMinusButton() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_scale_button_get_minus_button((*C.GtkScaleButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) GetPlusButton() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_scale_button_get_plus_button((*C.GtkScaleButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) GetPopup() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_scale_button_get_popup((*C.GtkScaleButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) GetValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_scale_button_get_value((*C.GtkScaleButton)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *ScaleButton) SetAdjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_scale_button_set_adjustment((*C.GtkScaleButton)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *ScaleButton) SetIcons(icons unsafe.Pointer) () {
	C._gtk_scale_button_set_icons((*C.GtkScaleButton)(_self_), unsafe.Pointer(icons))
	return
}

func (_self_ *ScaleButton) SetValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_scale_button_set_value((*C.GtkScaleButton)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func ScrollbarNew(orientation C.GtkOrientation, adjustment *Adjustment) (_return_ *Widget) {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	_cgo_of__return__ := C.gtk_scrollbar_new((C.GtkOrientation)(orientation), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ScrolledWindowNew(hadjustment *Adjustment, vadjustment *Adjustment) (_return_ *Widget) {
	_cgo_of_hadjustment_ := (*C.GtkAdjustment)(hadjustment)
	_cgo_of_vadjustment_ := (*C.GtkAdjustment)(vadjustment)
	_cgo_of__return__ := C.gtk_scrolled_window_new((*C.GtkAdjustment)(_cgo_of_hadjustment_), (*C.GtkAdjustment)(_cgo_of_vadjustment_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) AddWithViewport(child *Widget) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	C._gtk_scrolled_window_add_with_viewport((*C.GtkScrolledWindow)(_self_), (*C.GtkWidget)(_cgo_of_child_))
	return
}

func (_self_ *ScrolledWindow) GetCaptureButtonPress() (_return_ bool) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_capture_button_press((*C.GtkScrolledWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ScrolledWindow) GetHadjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_hadjustment((*C.GtkScrolledWindow)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) GetHscrollbar() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_hscrollbar((*C.GtkScrolledWindow)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) GetKineticScrolling() (_return_ bool) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_kinetic_scrolling((*C.GtkScrolledWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ScrolledWindow) GetMinContentHeight() (_return_ int) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_min_content_height((*C.GtkScrolledWindow)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) GetMinContentWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_min_content_width((*C.GtkScrolledWindow)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) GetPlacement() (_return_ C.GtkCornerType) {
	_return_ = C._gtk_scrolled_window_get_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetPolicy() (hscrollbar_policy *C.GtkPolicyType, vscrollbar_policy *C.GtkPolicyType) {
	C._gtk_scrolled_window_get_policy((*C.GtkScrolledWindow)(_self_), (*C.GtkPolicyType)(hscrollbar_policy), (*C.GtkPolicyType)(vscrollbar_policy))
	return
}

func (_self_ *ScrolledWindow) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C._gtk_scrolled_window_get_shadow_type((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetVadjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_vadjustment((*C.GtkScrolledWindow)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) GetVscrollbar() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_scrolled_window_get_vscrollbar((*C.GtkScrolledWindow)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ScrolledWindow) SetCaptureButtonPress(capture_button_press bool) () {
	_cgo_of_capture_button_press_ := C.glibtrue()
	if !capture_button_press {
		_cgo_of_capture_button_press_ = C.glibfalse()
	}
	C._gtk_scrolled_window_set_capture_button_press((*C.GtkScrolledWindow)(_self_), (C.gboolean)(_cgo_of_capture_button_press_))
	return
}

func (_self_ *ScrolledWindow) SetHadjustment(hadjustment *Adjustment) () {
	_cgo_of_hadjustment_ := (*C.GtkAdjustment)(hadjustment)
	C._gtk_scrolled_window_set_hadjustment((*C.GtkScrolledWindow)(_self_), (*C.GtkAdjustment)(_cgo_of_hadjustment_))
	return
}

func (_self_ *ScrolledWindow) SetKineticScrolling(kinetic_scrolling bool) () {
	_cgo_of_kinetic_scrolling_ := C.glibtrue()
	if !kinetic_scrolling {
		_cgo_of_kinetic_scrolling_ = C.glibfalse()
	}
	C._gtk_scrolled_window_set_kinetic_scrolling((*C.GtkScrolledWindow)(_self_), (C.gboolean)(_cgo_of_kinetic_scrolling_))
	return
}

func (_self_ *ScrolledWindow) SetMinContentHeight(height int) () {
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_scrolled_window_set_min_content_height((*C.GtkScrolledWindow)(_self_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *ScrolledWindow) SetMinContentWidth(width int) () {
	_cgo_of_width_ := (C.gint)(width)
	C._gtk_scrolled_window_set_min_content_width((*C.GtkScrolledWindow)(_self_), (C.gint)(_cgo_of_width_))
	return
}

func (_self_ *ScrolledWindow) SetPlacement(window_placement C.GtkCornerType) () {
	C._gtk_scrolled_window_set_placement((*C.GtkScrolledWindow)(_self_), (C.GtkCornerType)(window_placement))
	return
}

func (_self_ *ScrolledWindow) SetPolicy(hscrollbar_policy C.GtkPolicyType, vscrollbar_policy C.GtkPolicyType) () {
	C._gtk_scrolled_window_set_policy((*C.GtkScrolledWindow)(_self_), (C.GtkPolicyType)(hscrollbar_policy), (C.GtkPolicyType)(vscrollbar_policy))
	return
}

func (_self_ *ScrolledWindow) SetShadowType(type_ C.GtkShadowType) () {
	C._gtk_scrolled_window_set_shadow_type((*C.GtkScrolledWindow)(_self_), (C.GtkShadowType)(type_))
	return
}

func (_self_ *ScrolledWindow) SetVadjustment(vadjustment *Adjustment) () {
	_cgo_of_vadjustment_ := (*C.GtkAdjustment)(vadjustment)
	C._gtk_scrolled_window_set_vadjustment((*C.GtkScrolledWindow)(_self_), (*C.GtkAdjustment)(_cgo_of_vadjustment_))
	return
}

func (_self_ *ScrolledWindow) UnsetPlacement() () {
	C._gtk_scrolled_window_unset_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func SearchEntryNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_search_entry_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *SelectionData) Copy() (_return_ *SelectionData) {
	_cgo_of__return__ := C._gtk_selection_data_copy((*C.GtkSelectionData)(_self_))
	_return_ = (*SelectionData)(_cgo_of__return__)
	return
}

func (_self_ *SelectionData) Free() () {
	C._gtk_selection_data_free((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetData() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_data((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataType() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_data_type((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataWithLength() (_return_ *C.guchar, length int) {
	var _cgo_of_length_ C.gint
	_return_ = C._gtk_selection_data_get_data_with_length((*C.GtkSelectionData)(_self_), (*C.gint)(&_cgo_of_length_))
	length = int(_cgo_of_length_)
	return
}

func (_self_ *SelectionData) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_selection_data_get_display((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetFormat() (_return_ int) {
	_cgo_of__return__ := C._gtk_selection_data_get_format((*C.GtkSelectionData)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *SelectionData) GetLength() (_return_ int) {
	_cgo_of__return__ := C._gtk_selection_data_get_length((*C.GtkSelectionData)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *SelectionData) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_selection_data_get_pixbuf((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetSelection() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_selection((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetTarget() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_target((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetTargets() (_return_ bool, targets unsafe.Pointer, n_atoms int) {
	var _cgo_of_n_atoms_ C.gint
	_cgo_of__return__ := C._gtk_selection_data_get_targets((*C.GtkSelectionData)(_self_), unsafe.Pointer(targets), (*C.gint)(&_cgo_of_n_atoms_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	n_atoms = int(_cgo_of_n_atoms_)
	return
}

func (_self_ *SelectionData) GetText() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_text((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetUris() (_return_ unsafe.Pointer) {
	_return_ = unsafe.Pointer(C._gtk_selection_data_get_uris((*C.GtkSelectionData)(_self_)))
	return
}

func (_self_ *SelectionData) Set(type_ C.GdkAtom, format int, data *C.guchar, length int) () {
	_cgo_of_format_ := (C.gint)(format)
	_cgo_of_length_ := (C.gint)(length)
	C._gtk_selection_data_set((*C.GtkSelectionData)(_self_), (C.GdkAtom)(type_), (C.gint)(_cgo_of_format_), (*C.guchar)(data), (C.gint)(_cgo_of_length_))
	return
}

func (_self_ *SelectionData) SetPixbuf(pixbuf *C.GdkPixbuf) (_return_ bool) {
	_cgo_of__return__ := C._gtk_selection_data_set_pixbuf((*C.GtkSelectionData)(_self_), (*C.GdkPixbuf)(pixbuf))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) SetText(str string, len_ int) (_return_ bool) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_len__ := (C.gint)(len_)
	_cgo_of__return__ := C._gtk_selection_data_set_text((*C.GtkSelectionData)(_self_), (*C.gchar)(_cgo_of_str_), (C.gint)(_cgo_of_len__))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) SetUris(uris unsafe.Pointer) (_return_ bool) {
	_cgo_of__return__ := C._gtk_selection_data_set_uris((*C.GtkSelectionData)(_self_), unsafe.Pointer(uris))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeImage(writable bool) (_return_ bool) {
	_cgo_of_writable_ := C.glibtrue()
	if !writable {
		_cgo_of_writable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_selection_data_targets_include_image((*C.GtkSelectionData)(_self_), (C.gboolean)(_cgo_of_writable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeRichText(buffer *TextBuffer) (_return_ bool) {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	_cgo_of__return__ := C._gtk_selection_data_targets_include_rich_text((*C.GtkSelectionData)(_self_), (*C.GtkTextBuffer)(_cgo_of_buffer_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeText() (_return_ bool) {
	_cgo_of__return__ := C._gtk_selection_data_targets_include_text((*C.GtkSelectionData)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SelectionData) TargetsIncludeUri() (_return_ bool) {
	_cgo_of__return__ := C._gtk_selection_data_targets_include_uri((*C.GtkSelectionData)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func SeparatorNew(orientation C.GtkOrientation) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_separator_new((C.GtkOrientation)(orientation))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func SeparatorMenuItemNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_separator_menu_item_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func SeparatorToolItemNew() (_return_ *ToolItem) {
	_cgo_of__return__ := C.gtk_separator_tool_item_new()
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *SeparatorToolItem) GetDraw() (_return_ bool) {
	_cgo_of__return__ := C._gtk_separator_tool_item_get_draw((*C.GtkSeparatorToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SeparatorToolItem) SetDraw(draw bool) () {
	_cgo_of_draw_ := C.glibtrue()
	if !draw {
		_cgo_of_draw_ = C.glibfalse()
	}
	C._gtk_separator_tool_item_set_draw((*C.GtkSeparatorToolItem)(_self_), (C.gboolean)(_cgo_of_draw_))
	return
}

func SettingsGetDefault() (_return_ *Settings) {
	_cgo_of__return__ := C.gtk_settings_get_default()
	_return_ = (*Settings)(_cgo_of__return__)
	return
}

func SettingsGetForScreen(screen *C.GdkScreen) (_return_ *Settings) {
	_cgo_of__return__ := C.gtk_settings_get_for_screen((*C.GdkScreen)(screen))
	_return_ = (*Settings)(_cgo_of__return__)
	return
}

func SettingsInstallProperty(pspec *C.GParamSpec) () {
	C.gtk_settings_install_property((*C.GParamSpec)(pspec))
	return
}

func SettingsInstallPropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_settings_install_property_parser((*C.GParamSpec)(pspec), (C.GtkRcPropertyParser)(parser))
	return
}

func (_self_ *Settings) SetDoubleProperty(name string, v_double float64, origin string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_v_double_ := (C.gdouble)(v_double)
	_cgo_of_origin_ := (*C.gchar)(unsafe.Pointer(C.CString(origin)))
	C._gtk_settings_set_double_property((*C.GtkSettings)(_self_), (*C.gchar)(_cgo_of_name_), (C.gdouble)(_cgo_of_v_double_), (*C.gchar)(_cgo_of_origin_))
	return
}

func (_self_ *Settings) SetLongProperty(name string, v_long int64, origin string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_v_long_ := (C.glong)(v_long)
	_cgo_of_origin_ := (*C.gchar)(unsafe.Pointer(C.CString(origin)))
	C._gtk_settings_set_long_property((*C.GtkSettings)(_self_), (*C.gchar)(_cgo_of_name_), (C.glong)(_cgo_of_v_long_), (*C.gchar)(_cgo_of_origin_))
	return
}

func (_self_ *Settings) SetPropertyValue(name string, svalue *SettingsValue) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_svalue_ := (*C.GtkSettingsValue)(svalue)
	C._gtk_settings_set_property_value((*C.GtkSettings)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GtkSettingsValue)(_cgo_of_svalue_))
	return
}

func (_self_ *Settings) SetStringProperty(name string, v_string string, origin string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_v_string_ := (*C.gchar)(unsafe.Pointer(C.CString(v_string)))
	_cgo_of_origin_ := (*C.gchar)(unsafe.Pointer(C.CString(origin)))
	C._gtk_settings_set_string_property((*C.GtkSettings)(_self_), (*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_v_string_), (*C.gchar)(_cgo_of_origin_))
	return
}

func SizeGroupNew(mode C.GtkSizeGroupMode) (_return_ *SizeGroup) {
	_cgo_of__return__ := C.gtk_size_group_new((C.GtkSizeGroupMode)(mode))
	_return_ = (*SizeGroup)(_cgo_of__return__)
	return
}

func (_self_ *SizeGroup) AddWidget(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_size_group_add_widget((*C.GtkSizeGroup)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *SizeGroup) GetIgnoreHidden() (_return_ bool) {
	_cgo_of__return__ := C._gtk_size_group_get_ignore_hidden((*C.GtkSizeGroup)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SizeGroup) GetMode() (_return_ C.GtkSizeGroupMode) {
	_return_ = C._gtk_size_group_get_mode((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) GetWidgets() (_return_ *C.GSList) {
	_return_ = C._gtk_size_group_get_widgets((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) RemoveWidget(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_size_group_remove_widget((*C.GtkSizeGroup)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func (_self_ *SizeGroup) SetIgnoreHidden(ignore_hidden bool) () {
	_cgo_of_ignore_hidden_ := C.glibtrue()
	if !ignore_hidden {
		_cgo_of_ignore_hidden_ = C.glibfalse()
	}
	C._gtk_size_group_set_ignore_hidden((*C.GtkSizeGroup)(_self_), (C.gboolean)(_cgo_of_ignore_hidden_))
	return
}

func (_self_ *SizeGroup) SetMode(mode C.GtkSizeGroupMode) () {
	C._gtk_size_group_set_mode((*C.GtkSizeGroup)(_self_), (C.GtkSizeGroupMode)(mode))
	return
}

func SocketNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_socket_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Socket) AddId(window C.Window) () {
	C._gtk_socket_add_id((*C.GtkSocket)(_self_), (C.Window)(window))
	return
}

func (_self_ *Socket) GetId() (_return_ C.Window) {
	_return_ = C._gtk_socket_get_id((*C.GtkSocket)(_self_))
	return
}

func (_self_ *Socket) GetPlugWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_socket_get_plug_window((*C.GtkSocket)(_self_))
	return
}

func SpinButtonNew(adjustment *Adjustment, climb_rate float64, digits uint) (_return_ *Widget) {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	_cgo_of_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_of_digits_ := (C.guint)(digits)
	_cgo_of__return__ := C.gtk_spin_button_new((*C.GtkAdjustment)(_cgo_of_adjustment_), (C.gdouble)(_cgo_of_climb_rate_), (C.guint)(_cgo_of_digits_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func SpinButtonNewWithRange(min float64, max float64, step float64) (_return_ *Widget) {
	_cgo_of_min_ := (C.gdouble)(min)
	_cgo_of_max_ := (C.gdouble)(max)
	_cgo_of_step_ := (C.gdouble)(step)
	_cgo_of__return__ := C.gtk_spin_button_new_with_range((C.gdouble)(_cgo_of_min_), (C.gdouble)(_cgo_of_max_), (C.gdouble)(_cgo_of_step_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *SpinButton) Configure(adjustment *Adjustment, climb_rate float64, digits uint) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	_cgo_of_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_of_digits_ := (C.guint)(digits)
	C._gtk_spin_button_configure((*C.GtkSpinButton)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_), (C.gdouble)(_cgo_of_climb_rate_), (C.guint)(_cgo_of_digits_))
	return
}

func (_self_ *SpinButton) GetAdjustment() (_return_ *Adjustment) {
	_cgo_of__return__ := C._gtk_spin_button_get_adjustment((*C.GtkSpinButton)(_self_))
	_return_ = (*Adjustment)(_cgo_of__return__)
	return
}

func (_self_ *SpinButton) GetDigits() (_return_ uint) {
	_cgo_of__return__ := C._gtk_spin_button_get_digits((*C.GtkSpinButton)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *SpinButton) GetIncrements() (step float64, page float64) {
	var _cgo_of_step_ C.gdouble
	var _cgo_of_page_ C.gdouble
	C._gtk_spin_button_get_increments((*C.GtkSpinButton)(_self_), (*C.gdouble)(&_cgo_of_step_), (*C.gdouble)(&_cgo_of_page_))
	step = float64(_cgo_of_step_)
	page = float64(_cgo_of_page_)
	return
}

func (_self_ *SpinButton) GetNumeric() (_return_ bool) {
	_cgo_of__return__ := C._gtk_spin_button_get_numeric((*C.GtkSpinButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SpinButton) GetRange() (min float64, max float64) {
	var _cgo_of_min_ C.gdouble
	var _cgo_of_max_ C.gdouble
	C._gtk_spin_button_get_range((*C.GtkSpinButton)(_self_), (*C.gdouble)(&_cgo_of_min_), (*C.gdouble)(&_cgo_of_max_))
	min = float64(_cgo_of_min_)
	max = float64(_cgo_of_max_)
	return
}

func (_self_ *SpinButton) GetSnapToTicks() (_return_ bool) {
	_cgo_of__return__ := C._gtk_spin_button_get_snap_to_ticks((*C.GtkSpinButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SpinButton) GetUpdatePolicy() (_return_ C.GtkSpinButtonUpdatePolicy) {
	_return_ = C._gtk_spin_button_get_update_policy((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetValue() (_return_ float64) {
	_cgo_of__return__ := C._gtk_spin_button_get_value((*C.GtkSpinButton)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *SpinButton) GetValueAsInt() (_return_ int) {
	_cgo_of__return__ := C._gtk_spin_button_get_value_as_int((*C.GtkSpinButton)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *SpinButton) GetWrap() (_return_ bool) {
	_cgo_of__return__ := C._gtk_spin_button_get_wrap((*C.GtkSpinButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *SpinButton) SetAdjustment(adjustment *Adjustment) () {
	_cgo_of_adjustment_ := (*C.GtkAdjustment)(adjustment)
	C._gtk_spin_button_set_adjustment((*C.GtkSpinButton)(_self_), (*C.GtkAdjustment)(_cgo_of_adjustment_))
	return
}

func (_self_ *SpinButton) SetDigits(digits uint) () {
	_cgo_of_digits_ := (C.guint)(digits)
	C._gtk_spin_button_set_digits((*C.GtkSpinButton)(_self_), (C.guint)(_cgo_of_digits_))
	return
}

func (_self_ *SpinButton) SetIncrements(step float64, page float64) () {
	_cgo_of_step_ := (C.gdouble)(step)
	_cgo_of_page_ := (C.gdouble)(page)
	C._gtk_spin_button_set_increments((*C.GtkSpinButton)(_self_), (C.gdouble)(_cgo_of_step_), (C.gdouble)(_cgo_of_page_))
	return
}

func (_self_ *SpinButton) SetNumeric(numeric bool) () {
	_cgo_of_numeric_ := C.glibtrue()
	if !numeric {
		_cgo_of_numeric_ = C.glibfalse()
	}
	C._gtk_spin_button_set_numeric((*C.GtkSpinButton)(_self_), (C.gboolean)(_cgo_of_numeric_))
	return
}

func (_self_ *SpinButton) SetRange(min float64, max float64) () {
	_cgo_of_min_ := (C.gdouble)(min)
	_cgo_of_max_ := (C.gdouble)(max)
	C._gtk_spin_button_set_range((*C.GtkSpinButton)(_self_), (C.gdouble)(_cgo_of_min_), (C.gdouble)(_cgo_of_max_))
	return
}

func (_self_ *SpinButton) SetSnapToTicks(snap_to_ticks bool) () {
	_cgo_of_snap_to_ticks_ := C.glibtrue()
	if !snap_to_ticks {
		_cgo_of_snap_to_ticks_ = C.glibfalse()
	}
	C._gtk_spin_button_set_snap_to_ticks((*C.GtkSpinButton)(_self_), (C.gboolean)(_cgo_of_snap_to_ticks_))
	return
}

func (_self_ *SpinButton) SetUpdatePolicy(policy C.GtkSpinButtonUpdatePolicy) () {
	C._gtk_spin_button_set_update_policy((*C.GtkSpinButton)(_self_), (C.GtkSpinButtonUpdatePolicy)(policy))
	return
}

func (_self_ *SpinButton) SetValue(value float64) () {
	_cgo_of_value_ := (C.gdouble)(value)
	C._gtk_spin_button_set_value((*C.GtkSpinButton)(_self_), (C.gdouble)(_cgo_of_value_))
	return
}

func (_self_ *SpinButton) SetWrap(wrap bool) () {
	_cgo_of_wrap_ := C.glibtrue()
	if !wrap {
		_cgo_of_wrap_ = C.glibfalse()
	}
	C._gtk_spin_button_set_wrap((*C.GtkSpinButton)(_self_), (C.gboolean)(_cgo_of_wrap_))
	return
}

func (_self_ *SpinButton) Spin(direction C.GtkSpinType, increment float64) () {
	_cgo_of_increment_ := (C.gdouble)(increment)
	C._gtk_spin_button_spin((*C.GtkSpinButton)(_self_), (C.GtkSpinType)(direction), (C.gdouble)(_cgo_of_increment_))
	return
}

func (_self_ *SpinButton) Update() () {
	C._gtk_spin_button_update((*C.GtkSpinButton)(_self_))
	return
}

func SpinnerNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_spinner_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Spinner) Start() () {
	C._gtk_spinner_start((*C.GtkSpinner)(_self_))
	return
}

func (_self_ *Spinner) Stop() () {
	C._gtk_spinner_stop((*C.GtkSpinner)(_self_))
	return
}

func StatusIconNew() (_return_ *StatusIcon) {
	_cgo_of__return__ := C.gtk_status_icon_new()
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconNewFromFile(filename string) (_return_ *StatusIcon) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C.gtk_status_icon_new_from_file((*C.gchar)(_cgo_of_filename_))
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconNewFromGicon(icon *C.GIcon) (_return_ *StatusIcon) {
	_cgo_of__return__ := C.gtk_status_icon_new_from_gicon((*C.GIcon)(icon))
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconNewFromIconName(icon_name string) (_return_ *StatusIcon) {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of__return__ := C._gtk_status_icon_new_from_icon_name((*C.gchar)(_cgo_of_icon_name_))
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *StatusIcon) {
	_cgo_of__return__ := C.gtk_status_icon_new_from_pixbuf((*C.GdkPixbuf)(pixbuf))
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconNewFromStock(stock_id string) (_return_ *StatusIcon) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_status_icon_new_from_stock((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*StatusIcon)(_cgo_of__return__)
	return
}

func StatusIconPositionMenu(menu *Menu, user_data C.gpointer) (x int, y int, push_in bool) {
	_cgo_of_menu_ := (*C.GtkMenu)(menu)
	var _cgo_of_x_ C.gint
	var _cgo_of_y_ C.gint
	var _cgo_of_push_in_ C.gboolean
	C.gtk_status_icon_position_menu((*C.GtkMenu)(_cgo_of_menu_), (*C.gint)(&_cgo_of_x_), (*C.gint)(&_cgo_of_y_), (*C.gboolean)(&_cgo_of_push_in_), (C.gpointer)(user_data))
	x = int(_cgo_of_x_)
	y = int(_cgo_of_y_)
	push_in = _cgo_of_push_in_ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetGeometry() (_return_ bool, screen unsafe.Pointer, area *C.GdkRectangle, orientation *C.GtkOrientation) {
	var _allocated_area_ C.GdkRectangle
	_cgo_of__return__ := C._gtk_status_icon_get_geometry((*C.GtkStatusIcon)(_self_), unsafe.Pointer(screen), (*C.GdkRectangle)(&_allocated_area_), (*C.GtkOrientation)(orientation))
	_return_ = _cgo_of__return__ == C.glibtrue()
	area = (*C.GdkRectangle)(&_allocated_area_)
	return
}

func (_self_ *StatusIcon) GetGicon() (_return_ *C.GIcon) {
	_return_ = C._gtk_status_icon_get_gicon((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetHasTooltip() (_return_ bool) {
	_cgo_of__return__ := C._gtk_status_icon_get_has_tooltip((*C.GtkStatusIcon)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_status_icon_get_icon_name((*C.GtkStatusIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *StatusIcon) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_status_icon_get_pixbuf((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_status_icon_get_screen((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetSize() (_return_ int) {
	_cgo_of__return__ := C._gtk_status_icon_get_size((*C.GtkStatusIcon)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *StatusIcon) GetStock() (_return_ string) {
	_cgo_of__return__ := C._gtk_status_icon_get_stock((*C.GtkStatusIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *StatusIcon) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C._gtk_status_icon_get_storage_type((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_status_icon_get_title((*C.GtkStatusIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *StatusIcon) GetTooltipMarkup() (_return_ string) {
	_cgo_of__return__ := C._gtk_status_icon_get_tooltip_markup((*C.GtkStatusIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *StatusIcon) GetTooltipText() (_return_ string) {
	_cgo_of__return__ := C._gtk_status_icon_get_tooltip_text((*C.GtkStatusIcon)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *StatusIcon) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_status_icon_get_visible((*C.GtkStatusIcon)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) GetX11WindowId() (_return_ uint32) {
	_cgo_of__return__ := C._gtk_status_icon_get_x11_window_id((*C.GtkStatusIcon)(_self_))
	_return_ = uint32(_cgo_of__return__)
	return
}

func (_self_ *StatusIcon) IsEmbedded() (_return_ bool) {
	_cgo_of__return__ := C._gtk_status_icon_is_embedded((*C.GtkStatusIcon)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *StatusIcon) SetFromFile(filename string) () {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	C._gtk_status_icon_set_from_file((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_filename_))
	return
}

func (_self_ *StatusIcon) SetFromGicon(icon *C.GIcon) () {
	C._gtk_status_icon_set_from_gicon((*C.GtkStatusIcon)(_self_), (*C.GIcon)(icon))
	return
}

func (_self_ *StatusIcon) SetFromIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_status_icon_set_from_icon_name((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *StatusIcon) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C._gtk_status_icon_set_from_pixbuf((*C.GtkStatusIcon)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *StatusIcon) SetFromStock(stock_id string) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_status_icon_set_from_stock((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	return
}

func (_self_ *StatusIcon) SetHasTooltip(has_tooltip bool) () {
	_cgo_of_has_tooltip_ := C.glibtrue()
	if !has_tooltip {
		_cgo_of_has_tooltip_ = C.glibfalse()
	}
	C._gtk_status_icon_set_has_tooltip((*C.GtkStatusIcon)(_self_), (C.gboolean)(_cgo_of_has_tooltip_))
	return
}

func (_self_ *StatusIcon) SetName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_status_icon_set_name((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *StatusIcon) SetScreen(screen *C.GdkScreen) () {
	C._gtk_status_icon_set_screen((*C.GtkStatusIcon)(_self_), (*C.GdkScreen)(screen))
	return
}

func (_self_ *StatusIcon) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_status_icon_set_title((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *StatusIcon) SetTooltipMarkup(markup string) () {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_status_icon_set_tooltip_markup((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *StatusIcon) SetTooltipText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_status_icon_set_tooltip_text((*C.GtkStatusIcon)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *StatusIcon) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_status_icon_set_visible((*C.GtkStatusIcon)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func StatusbarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_statusbar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Statusbar) GetContextId(context_description string) (_return_ uint) {
	_cgo_of_context_description_ := (*C.gchar)(unsafe.Pointer(C.CString(context_description)))
	_cgo_of__return__ := C._gtk_statusbar_get_context_id((*C.GtkStatusbar)(_self_), (*C.gchar)(_cgo_of_context_description_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Statusbar) GetMessageArea() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_statusbar_get_message_area((*C.GtkStatusbar)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Statusbar) Pop(context_id uint) () {
	_cgo_of_context_id_ := (C.guint)(context_id)
	C._gtk_statusbar_pop((*C.GtkStatusbar)(_self_), (C.guint)(_cgo_of_context_id_))
	return
}

func (_self_ *Statusbar) Push(context_id uint, text string) (_return_ uint) {
	_cgo_of_context_id_ := (C.guint)(context_id)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of__return__ := C._gtk_statusbar_push((*C.GtkStatusbar)(_self_), (C.guint)(_cgo_of_context_id_), (*C.gchar)(_cgo_of_text_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *Statusbar) Remove(context_id uint, message_id uint) () {
	_cgo_of_context_id_ := (C.guint)(context_id)
	_cgo_of_message_id_ := (C.guint)(message_id)
	C._gtk_statusbar_remove((*C.GtkStatusbar)(_self_), (C.guint)(_cgo_of_context_id_), (C.guint)(_cgo_of_message_id_))
	return
}

func (_self_ *Statusbar) RemoveAll(context_id uint) () {
	_cgo_of_context_id_ := (C.guint)(context_id)
	C._gtk_statusbar_remove_all((*C.GtkStatusbar)(_self_), (C.guint)(_cgo_of_context_id_))
	return
}

func (_self_ *StockItem) Copy() (_return_ *StockItem) {
	_cgo_of__return__ := C._gtk_stock_item_copy((*C.GtkStockItem)(_self_))
	_return_ = (*StockItem)(_cgo_of__return__)
	return
}

func (_self_ *StockItem) Free() () {
	C._gtk_stock_item_free((*C.GtkStockItem)(_self_))
	return
}

func (_self_ *Style) HasContext() (_return_ bool) {
	_cgo_of__return__ := C._gtk_style_has_context((*C.GtkStyle)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func StyleContextNew() (_return_ *StyleContext) {
	_cgo_of__return__ := C.gtk_style_context_new()
	_return_ = (*StyleContext)(_cgo_of__return__)
	return
}

func StyleContextAddProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider, priority uint) () {
	_cgo_of_priority_ := (C.guint)(priority)
	C.gtk_style_context_add_provider_for_screen((*C.GdkScreen)(screen), (*C.GtkStyleProvider)(provider), (C.guint)(_cgo_of_priority_))
	return
}

func StyleContextRemoveProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider_for_screen((*C.GdkScreen)(screen), (*C.GtkStyleProvider)(provider))
	return
}

func StyleContextResetWidgets(screen *C.GdkScreen) () {
	C.gtk_style_context_reset_widgets((*C.GdkScreen)(screen))
	return
}

func (_self_ *StyleContext) AddClass(class_name string) () {
	_cgo_of_class_name_ := (*C.gchar)(unsafe.Pointer(C.CString(class_name)))
	C._gtk_style_context_add_class((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_class_name_))
	return
}

func (_self_ *StyleContext) AddProvider(provider *C.GtkStyleProvider, priority uint) () {
	_cgo_of_priority_ := (C.guint)(priority)
	C._gtk_style_context_add_provider((*C.GtkStyleContext)(_self_), (*C.GtkStyleProvider)(provider), (C.guint)(_cgo_of_priority_))
	return
}

func (_self_ *StyleContext) AddRegion(region_name string, flags C.GtkRegionFlags) () {
	_cgo_of_region_name_ := (*C.gchar)(unsafe.Pointer(C.CString(region_name)))
	C._gtk_style_context_add_region((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_region_name_), (C.GtkRegionFlags)(flags))
	return
}

func (_self_ *StyleContext) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_style_context_get_background_color((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *StyleContext) GetBorder(state C.GtkStateFlags) (border *Border) {
	var _allocated_border_ C.GtkBorder
	C._gtk_style_context_get_border((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_border_))
	border = (*Border)(&_allocated_border_)
	return
}

func (_self_ *StyleContext) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_style_context_get_border_color((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *StyleContext) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_style_context_get_color((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *StyleContext) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_style_context_get_direction((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_style_context_get_font((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state))
	return
}

func (_self_ *StyleContext) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C._gtk_style_context_get_junction_sides((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetMargin(state C.GtkStateFlags) (margin *Border) {
	var _allocated_margin_ C.GtkBorder
	C._gtk_style_context_get_margin((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_margin_))
	margin = (*Border)(&_allocated_margin_)
	return
}

func (_self_ *StyleContext) GetPadding(state C.GtkStateFlags) (padding *Border) {
	var _allocated_padding_ C.GtkBorder
	C._gtk_style_context_get_padding((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_padding_))
	padding = (*Border)(&_allocated_padding_)
	return
}

func (_self_ *StyleContext) GetParent() (_return_ *StyleContext) {
	_cgo_of__return__ := C._gtk_style_context_get_parent((*C.GtkStyleContext)(_self_))
	_return_ = (*StyleContext)(_cgo_of__return__)
	return
}

func (_self_ *StyleContext) GetPath() (_return_ *WidgetPath) {
	_cgo_of__return__ := C._gtk_style_context_get_path((*C.GtkStyleContext)(_self_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *StyleContext) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	var _allocated_value_ C.GValue
	C._gtk_style_context_get_property((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_property_), (C.GtkStateFlags)(state), (*C.GValue)(&_allocated_value_))
	value = (*C.GValue)(&_allocated_value_)
	return
}

func (_self_ *StyleContext) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_style_context_get_screen((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetSection(property string) (_return_ *CssSection) {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	_cgo_of__return__ := C._gtk_style_context_get_section((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_property_))
	_return_ = (*CssSection)(_cgo_of__return__)
	return
}

func (_self_ *StyleContext) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C._gtk_style_context_get_state((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetStyleProperty(property_name string, value *C.GValue) () {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_style_context_get_style_property((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *StyleContext) HasClass(class_name string) (_return_ bool) {
	_cgo_of_class_name_ := (*C.gchar)(unsafe.Pointer(C.CString(class_name)))
	_cgo_of__return__ := C._gtk_style_context_has_class((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_class_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *StyleContext) HasRegion(region_name string) (_return_ bool, flags_return *C.GtkRegionFlags) {
	_cgo_of_region_name_ := (*C.gchar)(unsafe.Pointer(C.CString(region_name)))
	_cgo_of__return__ := C._gtk_style_context_has_region((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_region_name_), (*C.GtkRegionFlags)(flags_return))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *StyleContext) Invalidate() () {
	C._gtk_style_context_invalidate((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListClasses() (_return_ *C.GList) {
	_return_ = C._gtk_style_context_list_classes((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListRegions() (_return_ *C.GList) {
	_return_ = C._gtk_style_context_list_regions((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) LookupColor(color_name string) (_return_ bool, color *C.GdkRGBA) {
	_cgo_of_color_name_ := (*C.gchar)(unsafe.Pointer(C.CString(color_name)))
	var _allocated_color_ C.GdkRGBA
	_cgo_of__return__ := C._gtk_style_context_lookup_color((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_color_name_), (*C.GdkRGBA)(&_allocated_color_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *StyleContext) LookupIconSet(stock_id string) (_return_ *IconSet) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_style_context_lookup_icon_set((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*IconSet)(_cgo_of__return__)
	return
}

func (_self_ *StyleContext) RemoveClass(class_name string) () {
	_cgo_of_class_name_ := (*C.gchar)(unsafe.Pointer(C.CString(class_name)))
	C._gtk_style_context_remove_class((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_class_name_))
	return
}

func (_self_ *StyleContext) RemoveProvider(provider *C.GtkStyleProvider) () {
	C._gtk_style_context_remove_provider((*C.GtkStyleContext)(_self_), (*C.GtkStyleProvider)(provider))
	return
}

func (_self_ *StyleContext) RemoveRegion(region_name string) () {
	_cgo_of_region_name_ := (*C.gchar)(unsafe.Pointer(C.CString(region_name)))
	C._gtk_style_context_remove_region((*C.GtkStyleContext)(_self_), (*C.gchar)(_cgo_of_region_name_))
	return
}

func (_self_ *StyleContext) Restore() () {
	C._gtk_style_context_restore((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) Save() () {
	C._gtk_style_context_save((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) SetBackground(window *C.GdkWindow) () {
	C._gtk_style_context_set_background((*C.GtkStyleContext)(_self_), (*C.GdkWindow)(window))
	return
}

func (_self_ *StyleContext) SetDirection(direction C.GtkTextDirection) () {
	C._gtk_style_context_set_direction((*C.GtkStyleContext)(_self_), (C.GtkTextDirection)(direction))
	return
}

func (_self_ *StyleContext) SetJunctionSides(sides C.GtkJunctionSides) () {
	C._gtk_style_context_set_junction_sides((*C.GtkStyleContext)(_self_), (C.GtkJunctionSides)(sides))
	return
}

func (_self_ *StyleContext) SetParent(parent *StyleContext) () {
	_cgo_of_parent_ := (*C.GtkStyleContext)(parent)
	C._gtk_style_context_set_parent((*C.GtkStyleContext)(_self_), (*C.GtkStyleContext)(_cgo_of_parent_))
	return
}

func (_self_ *StyleContext) SetPath(path *WidgetPath) () {
	_cgo_of_path_ := (*C.GtkWidgetPath)(path)
	C._gtk_style_context_set_path((*C.GtkStyleContext)(_self_), (*C.GtkWidgetPath)(_cgo_of_path_))
	return
}

func (_self_ *StyleContext) SetScreen(screen *C.GdkScreen) () {
	C._gtk_style_context_set_screen((*C.GtkStyleContext)(_self_), (*C.GdkScreen)(screen))
	return
}

func (_self_ *StyleContext) SetState(flags C.GtkStateFlags) () {
	C._gtk_style_context_set_state((*C.GtkStyleContext)(_self_), (C.GtkStateFlags)(flags))
	return
}

func StylePropertiesNew() (_return_ *StyleProperties) {
	_cgo_of__return__ := C.gtk_style_properties_new()
	_return_ = (*StyleProperties)(_cgo_of__return__)
	return
}

func StylePropertiesLookupProperty(property_name string) (_return_ bool, parse_func *C.GtkStylePropertyParser, pspec unsafe.Pointer) {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	_cgo_of__return__ := C._gtk_style_properties_lookup_property((*C.gchar)(_cgo_of_property_name_), (*C.GtkStylePropertyParser)(parse_func), unsafe.Pointer(pspec))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func StylePropertiesRegisterProperty(parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	C.gtk_style_properties_register_property((C.GtkStylePropertyParser)(parse_func), (*C.GParamSpec)(pspec))
	return
}

func (_self_ *StyleProperties) Clear() () {
	C._gtk_style_properties_clear((*C.GtkStyleProperties)(_self_))
	return
}

func (_self_ *StyleProperties) GetProperty(property string, state C.GtkStateFlags) (_return_ bool, value *C.GValue) {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	var _allocated_value_ C.GValue
	_cgo_of__return__ := C._gtk_style_properties_get_property((*C.GtkStyleProperties)(_self_), (*C.gchar)(_cgo_of_property_), (C.GtkStateFlags)(state), (*C.GValue)(&_allocated_value_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	value = (*C.GValue)(&_allocated_value_)
	return
}

func (_self_ *StyleProperties) LookupColor(name string) (_return_ *SymbolicColor) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_style_properties_lookup_color((*C.GtkStyleProperties)(_self_), (*C.gchar)(_cgo_of_name_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func (_self_ *StyleProperties) MapColor(name string, color *SymbolicColor) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_color_ := (*C.GtkSymbolicColor)(color)
	C._gtk_style_properties_map_color((*C.GtkStyleProperties)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GtkSymbolicColor)(_cgo_of_color_))
	return
}

func (_self_ *StyleProperties) Merge(props_to_merge *StyleProperties, replace bool) () {
	_cgo_of_props_to_merge_ := (*C.GtkStyleProperties)(props_to_merge)
	_cgo_of_replace_ := C.glibtrue()
	if !replace {
		_cgo_of_replace_ = C.glibfalse()
	}
	C._gtk_style_properties_merge((*C.GtkStyleProperties)(_self_), (*C.GtkStyleProperties)(_cgo_of_props_to_merge_), (C.gboolean)(_cgo_of_replace_))
	return
}

func (_self_ *StyleProperties) SetProperty(property string, state C.GtkStateFlags, value *C.GValue) () {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	C._gtk_style_properties_set_property((*C.GtkStyleProperties)(_self_), (*C.gchar)(_cgo_of_property_), (C.GtkStateFlags)(state), (*C.GValue)(value))
	return
}

func (_self_ *StyleProperties) UnsetProperty(property string, state C.GtkStateFlags) () {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	C._gtk_style_properties_unset_property((*C.GtkStyleProperties)(_self_), (*C.gchar)(_cgo_of_property_), (C.GtkStateFlags)(state))
	return
}

func SwitchNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_switch_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Switch) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_switch_get_active((*C.GtkSwitch)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Switch) SetActive(is_active bool) () {
	_cgo_of_is_active_ := C.glibtrue()
	if !is_active {
		_cgo_of_is_active_ = C.glibfalse()
	}
	C._gtk_switch_set_active((*C.GtkSwitch)(_self_), (C.gboolean)(_cgo_of_is_active_))
	return
}

func SymbolicColorNewAlpha(color *SymbolicColor, factor float64) (_return_ *SymbolicColor) {
	_cgo_of_color_ := (*C.GtkSymbolicColor)(color)
	_cgo_of_factor_ := (C.gdouble)(factor)
	_cgo_of__return__ := C.gtk_symbolic_color_new_alpha((*C.GtkSymbolicColor)(_cgo_of_color_), (C.gdouble)(_cgo_of_factor_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func SymbolicColorNewLiteral(color *C.GdkRGBA) (_return_ *SymbolicColor) {
	_cgo_of__return__ := C._gtk_symbolic_color_new_literal((*C.GdkRGBA)(color))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func SymbolicColorNewMix(color1 *SymbolicColor, color2 *SymbolicColor, factor float64) (_return_ *SymbolicColor) {
	_cgo_of_color1_ := (*C.GtkSymbolicColor)(color1)
	_cgo_of_color2_ := (*C.GtkSymbolicColor)(color2)
	_cgo_of_factor_ := (C.gdouble)(factor)
	_cgo_of__return__ := C.gtk_symbolic_color_new_mix((*C.GtkSymbolicColor)(_cgo_of_color1_), (*C.GtkSymbolicColor)(_cgo_of_color2_), (C.gdouble)(_cgo_of_factor_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func SymbolicColorNewName(name string) (_return_ *SymbolicColor) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_symbolic_color_new_name((*C.gchar)(_cgo_of_name_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func SymbolicColorNewShade(color *SymbolicColor, factor float64) (_return_ *SymbolicColor) {
	_cgo_of_color_ := (*C.GtkSymbolicColor)(color)
	_cgo_of_factor_ := (C.gdouble)(factor)
	_cgo_of__return__ := C.gtk_symbolic_color_new_shade((*C.GtkSymbolicColor)(_cgo_of_color_), (C.gdouble)(_cgo_of_factor_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func SymbolicColorNewWin32(theme_class string, id int) (_return_ *SymbolicColor) {
	_cgo_of_theme_class_ := (*C.gchar)(unsafe.Pointer(C.CString(theme_class)))
	_cgo_of_id_ := (C.gint)(id)
	_cgo_of__return__ := C._gtk_symbolic_color_new_win32((*C.gchar)(_cgo_of_theme_class_), (C.gint)(_cgo_of_id_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func (_self_ *SymbolicColor) Ref() (_return_ *SymbolicColor) {
	_cgo_of__return__ := C._gtk_symbolic_color_ref((*C.GtkSymbolicColor)(_self_))
	_return_ = (*SymbolicColor)(_cgo_of__return__)
	return
}

func (_self_ *SymbolicColor) Resolve(props *StyleProperties) (_return_ bool, resolved_color *C.GdkRGBA) {
	_cgo_of_props_ := (*C.GtkStyleProperties)(props)
	var _allocated_resolved_color_ C.GdkRGBA
	_cgo_of__return__ := C._gtk_symbolic_color_resolve((*C.GtkSymbolicColor)(_self_), (*C.GtkStyleProperties)(_cgo_of_props_), (*C.GdkRGBA)(&_allocated_resolved_color_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	resolved_color = (*C.GdkRGBA)(&_allocated_resolved_color_)
	return
}

func (_self_ *SymbolicColor) ToString() (_return_ *C.char) {
	_return_ = C._gtk_symbolic_color_to_string((*C.GtkSymbolicColor)(_self_))
	return
}

func (_self_ *SymbolicColor) Unref() () {
	C._gtk_symbolic_color_unref((*C.GtkSymbolicColor)(_self_))
	return
}

func TargetEntryNew(target string, flags uint, info uint) (_return_ *TargetEntry) {
	_cgo_of_target_ := (*C.gchar)(unsafe.Pointer(C.CString(target)))
	_cgo_of_flags_ := (C.guint)(flags)
	_cgo_of_info_ := (C.guint)(info)
	_cgo_of__return__ := C._gtk_target_entry_new((*C.gchar)(_cgo_of_target_), (C.guint)(_cgo_of_flags_), (C.guint)(_cgo_of_info_))
	_return_ = (*TargetEntry)(_cgo_of__return__)
	return
}

func (_self_ *TargetEntry) Copy() (_return_ *TargetEntry) {
	_cgo_of__return__ := C._gtk_target_entry_copy((*C.GtkTargetEntry)(_self_))
	_return_ = (*TargetEntry)(_cgo_of__return__)
	return
}

func (_self_ *TargetEntry) Free() () {
	C._gtk_target_entry_free((*C.GtkTargetEntry)(_self_))
	return
}

func TargetListNew(targets *TargetEntry, ntargets uint) (_return_ *TargetList) {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_ntargets_ := (C.guint)(ntargets)
	_cgo_of__return__ := C.gtk_target_list_new((*C.GtkTargetEntry)(_cgo_of_targets_), (C.guint)(_cgo_of_ntargets_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *TargetList) Add(target C.GdkAtom, flags uint, info uint) () {
	_cgo_of_flags_ := (C.guint)(flags)
	_cgo_of_info_ := (C.guint)(info)
	C._gtk_target_list_add((*C.GtkTargetList)(_self_), (C.GdkAtom)(target), (C.guint)(_cgo_of_flags_), (C.guint)(_cgo_of_info_))
	return
}

func (_self_ *TargetList) AddImageTargets(info uint, writable bool) () {
	_cgo_of_info_ := (C.guint)(info)
	_cgo_of_writable_ := C.glibtrue()
	if !writable {
		_cgo_of_writable_ = C.glibfalse()
	}
	C._gtk_target_list_add_image_targets((*C.GtkTargetList)(_self_), (C.guint)(_cgo_of_info_), (C.gboolean)(_cgo_of_writable_))
	return
}

func (_self_ *TargetList) AddRichTextTargets(info uint, deserializable bool, buffer *TextBuffer) () {
	_cgo_of_info_ := (C.guint)(info)
	_cgo_of_deserializable_ := C.glibtrue()
	if !deserializable {
		_cgo_of_deserializable_ = C.glibfalse()
	}
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	C._gtk_target_list_add_rich_text_targets((*C.GtkTargetList)(_self_), (C.guint)(_cgo_of_info_), (C.gboolean)(_cgo_of_deserializable_), (*C.GtkTextBuffer)(_cgo_of_buffer_))
	return
}

func (_self_ *TargetList) AddTable(targets *TargetEntry, ntargets uint) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_ntargets_ := (C.guint)(ntargets)
	C._gtk_target_list_add_table((*C.GtkTargetList)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.guint)(_cgo_of_ntargets_))
	return
}

func (_self_ *TargetList) AddTextTargets(info uint) () {
	_cgo_of_info_ := (C.guint)(info)
	C._gtk_target_list_add_text_targets((*C.GtkTargetList)(_self_), (C.guint)(_cgo_of_info_))
	return
}

func (_self_ *TargetList) AddUriTargets(info uint) () {
	_cgo_of_info_ := (C.guint)(info)
	C._gtk_target_list_add_uri_targets((*C.GtkTargetList)(_self_), (C.guint)(_cgo_of_info_))
	return
}

func (_self_ *TargetList) Find(target C.GdkAtom, info *C.guint) (_return_ bool) {
	_cgo_of__return__ := C._gtk_target_list_find((*C.GtkTargetList)(_self_), (C.GdkAtom)(target), (*C.guint)(info))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TargetList) Ref() (_return_ *TargetList) {
	_cgo_of__return__ := C._gtk_target_list_ref((*C.GtkTargetList)(_self_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *TargetList) Remove(target C.GdkAtom) () {
	C._gtk_target_list_remove((*C.GtkTargetList)(_self_), (C.GdkAtom)(target))
	return
}

func (_self_ *TargetList) Unref() () {
	C._gtk_target_list_unref((*C.GtkTargetList)(_self_))
	return
}

func TextAttributesNew() (_return_ *TextAttributes) {
	_cgo_of__return__ := C.gtk_text_attributes_new()
	_return_ = (*TextAttributes)(_cgo_of__return__)
	return
}

func (_self_ *TextAttributes) Copy() (_return_ *TextAttributes) {
	_cgo_of__return__ := C._gtk_text_attributes_copy((*C.GtkTextAttributes)(_self_))
	_return_ = (*TextAttributes)(_cgo_of__return__)
	return
}

func (_self_ *TextAttributes) CopyValues(dest *TextAttributes) () {
	_cgo_of_dest_ := (*C.GtkTextAttributes)(dest)
	C._gtk_text_attributes_copy_values((*C.GtkTextAttributes)(_self_), (*C.GtkTextAttributes)(_cgo_of_dest_))
	return
}

func (_self_ *TextAttributes) Ref() (_return_ *TextAttributes) {
	_cgo_of__return__ := C._gtk_text_attributes_ref((*C.GtkTextAttributes)(_self_))
	_return_ = (*TextAttributes)(_cgo_of__return__)
	return
}

func (_self_ *TextAttributes) Unref() () {
	C._gtk_text_attributes_unref((*C.GtkTextAttributes)(_self_))
	return
}

func TextBufferNew(table *TextTagTable) (_return_ *TextBuffer) {
	_cgo_of_table_ := (*C.GtkTextTagTable)(table)
	_cgo_of__return__ := C.gtk_text_buffer_new((*C.GtkTextTagTable)(_cgo_of_table_))
	_return_ = (*TextBuffer)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) AddMark(mark *TextMark, where *TextIter) () {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	_cgo_of_where_ := (*C.GtkTextIter)(where)
	C._gtk_text_buffer_add_mark((*C.GtkTextBuffer)(_self_), (*C.GtkTextMark)(_cgo_of_mark_), (*C.GtkTextIter)(_cgo_of_where_))
	return
}

func (_self_ *TextBuffer) AddSelectionClipboard(clipboard *Clipboard) () {
	_cgo_of_clipboard_ := (*C.GtkClipboard)(clipboard)
	C._gtk_text_buffer_add_selection_clipboard((*C.GtkTextBuffer)(_self_), (*C.GtkClipboard)(_cgo_of_clipboard_))
	return
}

func (_self_ *TextBuffer) ApplyTag(tag *TextTag, start *TextIter, end *TextIter) () {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_apply_tag((*C.GtkTextBuffer)(_self_), (*C.GtkTextTag)(_cgo_of_tag_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) ApplyTagByName(name string, start *TextIter, end *TextIter) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_apply_tag_by_name((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) Backspace(iter *TextIter, interactive bool, default_editable bool) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_interactive_ := C.glibtrue()
	if !interactive {
		_cgo_of_interactive_ = C.glibfalse()
	}
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_backspace((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (C.gboolean)(_cgo_of_interactive_), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) BeginUserAction() () {
	C._gtk_text_buffer_begin_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) CopyClipboard(clipboard *Clipboard) () {
	_cgo_of_clipboard_ := (*C.GtkClipboard)(clipboard)
	C._gtk_text_buffer_copy_clipboard((*C.GtkTextBuffer)(_self_), (*C.GtkClipboard)(_cgo_of_clipboard_))
	return
}

func (_self_ *TextBuffer) CreateChildAnchor(iter *TextIter) (_return_ *TextChildAnchor) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_buffer_create_child_anchor((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = (*TextChildAnchor)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) CreateMark(mark_name string, where *TextIter, left_gravity bool) (_return_ *TextMark) {
	_cgo_of_mark_name_ := (*C.gchar)(unsafe.Pointer(C.CString(mark_name)))
	_cgo_of_where_ := (*C.GtkTextIter)(where)
	_cgo_of_left_gravity_ := C.glibtrue()
	if !left_gravity {
		_cgo_of_left_gravity_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_create_mark((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_mark_name_), (*C.GtkTextIter)(_cgo_of_where_), (C.gboolean)(_cgo_of_left_gravity_))
	_return_ = (*TextMark)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) CutClipboard(clipboard *Clipboard, default_editable bool) () {
	_cgo_of_clipboard_ := (*C.GtkClipboard)(clipboard)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	C._gtk_text_buffer_cut_clipboard((*C.GtkTextBuffer)(_self_), (*C.GtkClipboard)(_cgo_of_clipboard_), (C.gboolean)(_cgo_of_default_editable_))
	return
}

func (_self_ *TextBuffer) Delete(start *TextIter, end *TextIter) () {
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_delete((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) DeleteInteractive(start_iter *TextIter, end_iter *TextIter, default_editable bool) (_return_ bool) {
	_cgo_of_start_iter_ := (*C.GtkTextIter)(start_iter)
	_cgo_of_end_iter_ := (*C.GtkTextIter)(end_iter)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_delete_interactive((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_start_iter_), (*C.GtkTextIter)(_cgo_of_end_iter_), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeleteMark(mark *TextMark) () {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	C._gtk_text_buffer_delete_mark((*C.GtkTextBuffer)(_self_), (*C.GtkTextMark)(_cgo_of_mark_))
	return
}

func (_self_ *TextBuffer) DeleteMarkByName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_text_buffer_delete_mark_by_name((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *TextBuffer) DeleteSelection(interactive bool, default_editable bool) (_return_ bool) {
	_cgo_of_interactive_ := C.glibtrue()
	if !interactive {
		_cgo_of_interactive_ = C.glibfalse()
	}
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_delete_selection((*C.GtkTextBuffer)(_self_), (C.gboolean)(_cgo_of_interactive_), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) Deserialize(content_buffer *TextBuffer, format C.GdkAtom, iter *TextIter, data *C.guint8, length uint64) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_content_buffer_ := (*C.GtkTextBuffer)(content_buffer)
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_length_ := (C.gsize)(length)
	_cgo_of__return__ := C._gtk_text_buffer_deserialize((*C.GtkTextBuffer)(_self_), (*C.GtkTextBuffer)(_cgo_of_content_buffer_), (C.GdkAtom)(format), (*C.GtkTextIter)(_cgo_of_iter_), (*C.guint8)(data), (C.gsize)(_cgo_of_length_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeserializeGetCanCreateTags(format C.GdkAtom) (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_buffer_deserialize_get_can_create_tags((*C.GtkTextBuffer)(_self_), (C.GdkAtom)(format))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) DeserializeSetCanCreateTags(format C.GdkAtom, can_create_tags bool) () {
	_cgo_of_can_create_tags_ := C.glibtrue()
	if !can_create_tags {
		_cgo_of_can_create_tags_ = C.glibfalse()
	}
	C._gtk_text_buffer_deserialize_set_can_create_tags((*C.GtkTextBuffer)(_self_), (C.GdkAtom)(format), (C.gboolean)(_cgo_of_can_create_tags_))
	return
}

func (_self_ *TextBuffer) EndUserAction() () {
	C._gtk_text_buffer_end_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetBounds() (start *TextIter, end *TextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	C._gtk_text_buffer_get_bounds((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_start_), (*C.GtkTextIter)(&_allocated_end_))
	start = (*TextIter)(&_allocated_start_)
	end = (*TextIter)(&_allocated_end_)
	return
}

func (_self_ *TextBuffer) GetCharCount() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_buffer_get_char_count((*C.GtkTextBuffer)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetCopyTargetList() (_return_ *TargetList) {
	_cgo_of__return__ := C._gtk_text_buffer_get_copy_target_list((*C.GtkTextBuffer)(_self_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetDeserializeFormats() (_return_ *C.GdkAtom, n_formats int) {
	var _cgo_of_n_formats_ C.gint
	_return_ = C._gtk_text_buffer_get_deserialize_formats((*C.GtkTextBuffer)(_self_), (*C.gint)(&_cgo_of_n_formats_))
	n_formats = int(_cgo_of_n_formats_)
	return
}

func (_self_ *TextBuffer) GetEndIter() (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_end_iter((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetHasSelection() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_buffer_get_has_selection((*C.GtkTextBuffer)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) GetInsert() (_return_ *TextMark) {
	_cgo_of__return__ := C._gtk_text_buffer_get_insert((*C.GtkTextBuffer)(_self_))
	_return_ = (*TextMark)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetIterAtChildAnchor(anchor *TextChildAnchor) (iter *TextIter) {
	_cgo_of_anchor_ := (*C.GtkTextChildAnchor)(anchor)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_child_anchor((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (*C.GtkTextChildAnchor)(_cgo_of_anchor_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetIterAtLine(line_number int) (iter *TextIter) {
	_cgo_of_line_number_ := (C.gint)(line_number)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_line((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (C.gint)(_cgo_of_line_number_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetIterAtLineIndex(line_number int, byte_index int) (iter *TextIter) {
	_cgo_of_line_number_ := (C.gint)(line_number)
	_cgo_of_byte_index_ := (C.gint)(byte_index)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_line_index((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (C.gint)(_cgo_of_line_number_), (C.gint)(_cgo_of_byte_index_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetIterAtLineOffset(line_number int, char_offset int) (iter *TextIter) {
	_cgo_of_line_number_ := (C.gint)(line_number)
	_cgo_of_char_offset_ := (C.gint)(char_offset)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_line_offset((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (C.gint)(_cgo_of_line_number_), (C.gint)(_cgo_of_char_offset_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetIterAtMark(mark *TextMark) (iter *TextIter) {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_mark((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (*C.GtkTextMark)(_cgo_of_mark_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetIterAtOffset(char_offset int) (iter *TextIter) {
	_cgo_of_char_offset_ := (C.gint)(char_offset)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_iter_at_offset((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (C.gint)(_cgo_of_char_offset_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetLineCount() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_buffer_get_line_count((*C.GtkTextBuffer)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetMark(name string) (_return_ *TextMark) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_text_buffer_get_mark((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_name_))
	_return_ = (*TextMark)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetModified() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_buffer_get_modified((*C.GtkTextBuffer)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) GetPasteTargetList() (_return_ *TargetList) {
	_cgo_of__return__ := C._gtk_text_buffer_get_paste_target_list((*C.GtkTextBuffer)(_self_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetSelectionBound() (_return_ *TextMark) {
	_cgo_of__return__ := C._gtk_text_buffer_get_selection_bound((*C.GtkTextBuffer)(_self_))
	_return_ = (*TextMark)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetSelectionBounds() (_return_ bool, start *TextIter, end *TextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	_cgo_of__return__ := C._gtk_text_buffer_get_selection_bounds((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_start_), (*C.GtkTextIter)(&_allocated_end_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	start = (*TextIter)(&_allocated_start_)
	end = (*TextIter)(&_allocated_end_)
	return
}

func (_self_ *TextBuffer) GetSerializeFormats() (_return_ *C.GdkAtom, n_formats int) {
	var _cgo_of_n_formats_ C.gint
	_return_ = C._gtk_text_buffer_get_serialize_formats((*C.GtkTextBuffer)(_self_), (*C.gint)(&_cgo_of_n_formats_))
	n_formats = int(_cgo_of_n_formats_)
	return
}

func (_self_ *TextBuffer) GetSlice(start *TextIter, end *TextIter, include_hidden_chars bool) (_return_ string) {
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of_include_hidden_chars_ := C.glibtrue()
	if !include_hidden_chars {
		_cgo_of_include_hidden_chars_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_get_slice((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_), (C.gboolean)(_cgo_of_include_hidden_chars_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextBuffer) GetStartIter() (iter *TextIter) {
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_buffer_get_start_iter((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(&_allocated_iter_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextBuffer) GetTagTable() (_return_ *TextTagTable) {
	_cgo_of__return__ := C._gtk_text_buffer_get_tag_table((*C.GtkTextBuffer)(_self_))
	_return_ = (*TextTagTable)(_cgo_of__return__)
	return
}

func (_self_ *TextBuffer) GetText(start *TextIter, end *TextIter, include_hidden_chars bool) (_return_ string) {
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of_include_hidden_chars_ := C.glibtrue()
	if !include_hidden_chars {
		_cgo_of_include_hidden_chars_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_get_text((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_), (C.gboolean)(_cgo_of_include_hidden_chars_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextBuffer) Insert(iter *TextIter, text string, len_ int) () {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	C._gtk_text_buffer_insert((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__))
	return
}

func (_self_ *TextBuffer) InsertAtCursor(text string, len_ int) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	C._gtk_text_buffer_insert_at_cursor((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__))
	return
}

func (_self_ *TextBuffer) InsertChildAnchor(iter *TextIter, anchor *TextChildAnchor) () {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_anchor_ := (*C.GtkTextChildAnchor)(anchor)
	C._gtk_text_buffer_insert_child_anchor((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GtkTextChildAnchor)(_cgo_of_anchor_))
	return
}

func (_self_ *TextBuffer) InsertInteractive(iter *TextIter, text string, len_ int, default_editable bool) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_insert_interactive((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) InsertInteractiveAtCursor(text string, len_ int, default_editable bool) (_return_ bool) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_insert_interactive_at_cursor((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) InsertPixbuf(iter *TextIter, pixbuf *C.GdkPixbuf) () {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	C._gtk_text_buffer_insert_pixbuf((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *TextBuffer) InsertRange(iter *TextIter, start *TextIter, end *TextIter) () {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_insert_range((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) InsertRangeInteractive(iter *TextIter, start *TextIter, end *TextIter, default_editable bool) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_buffer_insert_range_interactive((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_), (C.gboolean)(_cgo_of_default_editable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextBuffer) MoveMark(mark *TextMark, where *TextIter) () {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	_cgo_of_where_ := (*C.GtkTextIter)(where)
	C._gtk_text_buffer_move_mark((*C.GtkTextBuffer)(_self_), (*C.GtkTextMark)(_cgo_of_mark_), (*C.GtkTextIter)(_cgo_of_where_))
	return
}

func (_self_ *TextBuffer) MoveMarkByName(name string, where *TextIter) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_where_ := (*C.GtkTextIter)(where)
	C._gtk_text_buffer_move_mark_by_name((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GtkTextIter)(_cgo_of_where_))
	return
}

func (_self_ *TextBuffer) PasteClipboard(clipboard *Clipboard, override_location *TextIter, default_editable bool) () {
	_cgo_of_clipboard_ := (*C.GtkClipboard)(clipboard)
	_cgo_of_override_location_ := (*C.GtkTextIter)(override_location)
	_cgo_of_default_editable_ := C.glibtrue()
	if !default_editable {
		_cgo_of_default_editable_ = C.glibfalse()
	}
	C._gtk_text_buffer_paste_clipboard((*C.GtkTextBuffer)(_self_), (*C.GtkClipboard)(_cgo_of_clipboard_), (*C.GtkTextIter)(_cgo_of_override_location_), (C.gboolean)(_cgo_of_default_editable_))
	return
}

func (_self_ *TextBuffer) PlaceCursor(where *TextIter) () {
	_cgo_of_where_ := (*C.GtkTextIter)(where)
	C._gtk_text_buffer_place_cursor((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_where_))
	return
}

func (_self_ *TextBuffer) RegisterDeserializeFormat(mime_type string, function C.GtkTextBufferDeserializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	_return_ = C._gtk_text_buffer_register_deserialize_format((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_mime_type_), (C.GtkTextBufferDeserializeFunc)(function), (C.gpointer)(user_data), (C.GDestroyNotify)(user_data_destroy))
	return
}

func (_self_ *TextBuffer) RegisterDeserializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cgo_of_tagset_name_ := (*C.gchar)(unsafe.Pointer(C.CString(tagset_name)))
	_return_ = C._gtk_text_buffer_register_deserialize_tagset((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_tagset_name_))
	return
}

func (_self_ *TextBuffer) RegisterSerializeFormat(mime_type string, function C.GtkTextBufferSerializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cgo_of_mime_type_ := (*C.gchar)(unsafe.Pointer(C.CString(mime_type)))
	_return_ = C._gtk_text_buffer_register_serialize_format((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_mime_type_), (C.GtkTextBufferSerializeFunc)(function), (C.gpointer)(user_data), (C.GDestroyNotify)(user_data_destroy))
	return
}

func (_self_ *TextBuffer) RegisterSerializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cgo_of_tagset_name_ := (*C.gchar)(unsafe.Pointer(C.CString(tagset_name)))
	_return_ = C._gtk_text_buffer_register_serialize_tagset((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_tagset_name_))
	return
}

func (_self_ *TextBuffer) RemoveAllTags(start *TextIter, end *TextIter) () {
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_remove_all_tags((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) RemoveSelectionClipboard(clipboard *Clipboard) () {
	_cgo_of_clipboard_ := (*C.GtkClipboard)(clipboard)
	C._gtk_text_buffer_remove_selection_clipboard((*C.GtkTextBuffer)(_self_), (*C.GtkClipboard)(_cgo_of_clipboard_))
	return
}

func (_self_ *TextBuffer) RemoveTag(tag *TextTag, start *TextIter, end *TextIter) () {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_remove_tag((*C.GtkTextBuffer)(_self_), (*C.GtkTextTag)(_cgo_of_tag_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) RemoveTagByName(name string, start *TextIter, end *TextIter) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	C._gtk_text_buffer_remove_tag_by_name((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	return
}

func (_self_ *TextBuffer) SelectRange(ins *TextIter, bound *TextIter) () {
	_cgo_of_ins_ := (*C.GtkTextIter)(ins)
	_cgo_of_bound_ := (*C.GtkTextIter)(bound)
	C._gtk_text_buffer_select_range((*C.GtkTextBuffer)(_self_), (*C.GtkTextIter)(_cgo_of_ins_), (*C.GtkTextIter)(_cgo_of_bound_))
	return
}

func (_self_ *TextBuffer) Serialize(content_buffer *TextBuffer, format C.GdkAtom, start *TextIter, end *TextIter) (_return_ *C.guint8, length uint64) {
	_cgo_of_content_buffer_ := (*C.GtkTextBuffer)(content_buffer)
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	var _cgo_of_length_ C.gsize
	_return_ = C._gtk_text_buffer_serialize((*C.GtkTextBuffer)(_self_), (*C.GtkTextBuffer)(_cgo_of_content_buffer_), (C.GdkAtom)(format), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_), (*C.gsize)(&_cgo_of_length_))
	length = uint64(_cgo_of_length_)
	return
}

func (_self_ *TextBuffer) SetModified(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_text_buffer_set_modified((*C.GtkTextBuffer)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TextBuffer) SetText(text string, len_ int) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_cgo_of_len__ := (C.gint)(len_)
	C._gtk_text_buffer_set_text((*C.GtkTextBuffer)(_self_), (*C.gchar)(_cgo_of_text_), (C.gint)(_cgo_of_len__))
	return
}

func (_self_ *TextBuffer) UnregisterDeserializeFormat(format C.GdkAtom) () {
	C._gtk_text_buffer_unregister_deserialize_format((*C.GtkTextBuffer)(_self_), (C.GdkAtom)(format))
	return
}

func (_self_ *TextBuffer) UnregisterSerializeFormat(format C.GdkAtom) () {
	C._gtk_text_buffer_unregister_serialize_format((*C.GtkTextBuffer)(_self_), (C.GdkAtom)(format))
	return
}

func TextChildAnchorNew() (_return_ *TextChildAnchor) {
	_cgo_of__return__ := C.gtk_text_child_anchor_new()
	_return_ = (*TextChildAnchor)(_cgo_of__return__)
	return
}

func (_self_ *TextChildAnchor) GetDeleted() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_child_anchor_get_deleted((*C.GtkTextChildAnchor)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextChildAnchor) GetWidgets() (_return_ *C.GList) {
	_return_ = C._gtk_text_child_anchor_get_widgets((*C.GtkTextChildAnchor)(_self_))
	return
}

func (_self_ *TextIter) Assign(other *TextIter) () {
	_cgo_of_other_ := (*C.GtkTextIter)(other)
	C._gtk_text_iter_assign((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_other_))
	return
}

func (_self_ *TextIter) BackwardChar() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_char((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardChars(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_chars((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardCursorPosition() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_cursor_position((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardCursorPositions(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_cursor_positions((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *TextIter) (_return_ bool) {
	_cgo_of_limit_ := (*C.GtkTextIter)(limit)
	_cgo_of__return__ := C._gtk_text_iter_backward_find_char((*C.GtkTextIter)(_self_), (C.GtkTextCharPredicate)(pred), (C.gpointer)(user_data), (*C.GtkTextIter)(_cgo_of_limit_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardLines(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_lines((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardSearch(str string, flags C.GtkTextSearchFlags, limit *TextIter) (_return_ bool, match_start *TextIter, match_end *TextIter) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_limit_ := (*C.GtkTextIter)(limit)
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cgo_of__return__ := C._gtk_text_iter_backward_search((*C.GtkTextIter)(_self_), (*C.gchar)(_cgo_of_str_), (C.GtkTextSearchFlags)(flags), (*C.GtkTextIter)(&_allocated_match_start_), (*C.GtkTextIter)(&_allocated_match_end_), (*C.GtkTextIter)(_cgo_of_limit_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	match_start = (*TextIter)(&_allocated_match_start_)
	match_end = (*TextIter)(&_allocated_match_end_)
	return
}

func (_self_ *TextIter) BackwardSentenceStart() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_sentence_start((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardSentenceStarts(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_sentence_starts((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardToTagToggle(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_backward_to_tag_toggle((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPosition() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPositions(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_cursor_positions((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleLines(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_lines((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleWordStart() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_word_start((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardVisibleWordStarts(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_visible_word_starts((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardWordStart() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_backward_word_start((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BackwardWordStarts(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_backward_word_starts((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) BeginsTag(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_begins_tag((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) CanInsert(default_editability bool) (_return_ bool) {
	_cgo_of_default_editability_ := C.glibtrue()
	if !default_editability {
		_cgo_of_default_editability_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_iter_can_insert((*C.GtkTextIter)(_self_), (C.gboolean)(_cgo_of_default_editability_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) Compare(rhs *TextIter) (_return_ int) {
	_cgo_of_rhs_ := (*C.GtkTextIter)(rhs)
	_cgo_of__return__ := C._gtk_text_iter_compare((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_rhs_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) Copy() (_return_ *TextIter) {
	_cgo_of__return__ := C._gtk_text_iter_copy((*C.GtkTextIter)(_self_))
	_return_ = (*TextIter)(_cgo_of__return__)
	return
}

func (_self_ *TextIter) Editable(default_setting bool) (_return_ bool) {
	_cgo_of_default_setting_ := C.glibtrue()
	if !default_setting {
		_cgo_of_default_setting_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_iter_editable((*C.GtkTextIter)(_self_), (C.gboolean)(_cgo_of_default_setting_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_ends_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsSentence() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_ends_sentence((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsTag(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_ends_tag((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) EndsWord() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_ends_word((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) Equal(rhs *TextIter) (_return_ bool) {
	_cgo_of_rhs_ := (*C.GtkTextIter)(rhs)
	_cgo_of__return__ := C._gtk_text_iter_equal((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_rhs_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardChar() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_char((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardChars(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_chars((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardCursorPosition() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_cursor_position((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardCursorPositions(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_cursor_positions((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *TextIter) (_return_ bool) {
	_cgo_of_limit_ := (*C.GtkTextIter)(limit)
	_cgo_of__return__ := C._gtk_text_iter_forward_find_char((*C.GtkTextIter)(_self_), (C.GtkTextCharPredicate)(pred), (C.gpointer)(user_data), (*C.GtkTextIter)(_cgo_of_limit_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardLines(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_lines((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardSearch(str string, flags C.GtkTextSearchFlags, limit *TextIter) (_return_ bool, match_start *TextIter, match_end *TextIter) {
	_cgo_of_str_ := (*C.gchar)(unsafe.Pointer(C.CString(str)))
	_cgo_of_limit_ := (*C.GtkTextIter)(limit)
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cgo_of__return__ := C._gtk_text_iter_forward_search((*C.GtkTextIter)(_self_), (*C.gchar)(_cgo_of_str_), (C.GtkTextSearchFlags)(flags), (*C.GtkTextIter)(&_allocated_match_start_), (*C.GtkTextIter)(&_allocated_match_end_), (*C.GtkTextIter)(_cgo_of_limit_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	match_start = (*TextIter)(&_allocated_match_start_)
	match_end = (*TextIter)(&_allocated_match_end_)
	return
}

func (_self_ *TextIter) ForwardSentenceEnd() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_sentence_end((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardSentenceEnds(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_sentence_ends((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardToEnd() () {
	C._gtk_text_iter_forward_to_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardToLineEnd() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_to_line_end((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardToTagToggle(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_forward_to_tag_toggle((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPosition() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPositions(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_cursor_positions((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleLines(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_lines((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnd() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_word_end((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnds(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_visible_word_ends((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardWordEnd() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_forward_word_end((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) ForwardWordEnds(count int) (_return_ bool) {
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_iter_forward_word_ends((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) Free() () {
	C._gtk_text_iter_free((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetAttributes() (_return_ bool, values *TextAttributes) {
	var _allocated_values_ C.GtkTextAttributes
	_cgo_of__return__ := C._gtk_text_iter_get_attributes((*C.GtkTextIter)(_self_), (*C.GtkTextAttributes)(&_allocated_values_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	values = (*TextAttributes)(&_allocated_values_)
	return
}

func (_self_ *TextIter) GetBuffer() (_return_ *TextBuffer) {
	_cgo_of__return__ := C._gtk_text_iter_get_buffer((*C.GtkTextIter)(_self_))
	_return_ = (*TextBuffer)(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetBytesInLine() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_bytes_in_line((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetChar() (_return_ C.gunichar) {
	_return_ = C._gtk_text_iter_get_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetCharsInLine() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_chars_in_line((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetChildAnchor() (_return_ *TextChildAnchor) {
	_cgo_of__return__ := C._gtk_text_iter_get_child_anchor((*C.GtkTextIter)(_self_))
	_return_ = (*TextChildAnchor)(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C._gtk_text_iter_get_language((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLine() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_line((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetLineIndex() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_line_index((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetLineOffset() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_line_offset((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetMarks() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_marks((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetOffset() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_offset((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_text_iter_get_pixbuf((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetSlice(end *TextIter) (_return_ string) {
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of__return__ := C._gtk_text_iter_get_slice((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_end_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextIter) GetTags() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_tags((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetText(end *TextIter) (_return_ string) {
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of__return__ := C._gtk_text_iter_get_text((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_end_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextIter) GetToggledTags(toggled_on bool) (_return_ *C.GSList) {
	_cgo_of_toggled_on_ := C.glibtrue()
	if !toggled_on {
		_cgo_of_toggled_on_ = C.glibfalse()
	}
	_return_ = C._gtk_text_iter_get_toggled_tags((*C.GtkTextIter)(_self_), (C.gboolean)(_cgo_of_toggled_on_))
	return
}

func (_self_ *TextIter) GetVisibleLineIndex() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_visible_line_index((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetVisibleLineOffset() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_iter_get_visible_line_offset((*C.GtkTextIter)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextIter) GetVisibleSlice(end *TextIter) (_return_ string) {
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of__return__ := C._gtk_text_iter_get_visible_slice((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_end_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextIter) GetVisibleText(end *TextIter) (_return_ string) {
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of__return__ := C._gtk_text_iter_get_visible_text((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_end_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextIter) HasTag(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_has_tag((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) InRange(start *TextIter, end *TextIter) (_return_ bool) {
	_cgo_of_start_ := (*C.GtkTextIter)(start)
	_cgo_of_end_ := (*C.GtkTextIter)(end)
	_cgo_of__return__ := C._gtk_text_iter_in_range((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_start_), (*C.GtkTextIter)(_cgo_of_end_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) InsideSentence() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_inside_sentence((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) InsideWord() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_inside_word((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsCursorPosition() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_is_cursor_position((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsEnd() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_is_end((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) IsStart() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_is_start((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) Order(second *TextIter) () {
	_cgo_of_second_ := (*C.GtkTextIter)(second)
	C._gtk_text_iter_order((*C.GtkTextIter)(_self_), (*C.GtkTextIter)(_cgo_of_second_))
	return
}

func (_self_ *TextIter) SetLine(line_number int) () {
	_cgo_of_line_number_ := (C.gint)(line_number)
	C._gtk_text_iter_set_line((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_line_number_))
	return
}

func (_self_ *TextIter) SetLineIndex(byte_on_line int) () {
	_cgo_of_byte_on_line_ := (C.gint)(byte_on_line)
	C._gtk_text_iter_set_line_index((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_byte_on_line_))
	return
}

func (_self_ *TextIter) SetLineOffset(char_on_line int) () {
	_cgo_of_char_on_line_ := (C.gint)(char_on_line)
	C._gtk_text_iter_set_line_offset((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_char_on_line_))
	return
}

func (_self_ *TextIter) SetOffset(char_offset int) () {
	_cgo_of_char_offset_ := (C.gint)(char_offset)
	C._gtk_text_iter_set_offset((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_char_offset_))
	return
}

func (_self_ *TextIter) SetVisibleLineIndex(byte_on_line int) () {
	_cgo_of_byte_on_line_ := (C.gint)(byte_on_line)
	C._gtk_text_iter_set_visible_line_index((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_byte_on_line_))
	return
}

func (_self_ *TextIter) SetVisibleLineOffset(char_on_line int) () {
	_cgo_of_char_on_line_ := (C.gint)(char_on_line)
	C._gtk_text_iter_set_visible_line_offset((*C.GtkTextIter)(_self_), (C.gint)(_cgo_of_char_on_line_))
	return
}

func (_self_ *TextIter) StartsLine() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_starts_line((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) StartsSentence() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_starts_sentence((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) StartsWord() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_iter_starts_word((*C.GtkTextIter)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextIter) TogglesTag(tag *TextTag) (_return_ bool) {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	_cgo_of__return__ := C._gtk_text_iter_toggles_tag((*C.GtkTextIter)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TextMarkNew(name string, left_gravity bool) (_return_ *TextMark) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_left_gravity_ := C.glibtrue()
	if !left_gravity {
		_cgo_of_left_gravity_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_text_mark_new((*C.gchar)(_cgo_of_name_), (C.gboolean)(_cgo_of_left_gravity_))
	_return_ = (*TextMark)(_cgo_of__return__)
	return
}

func (_self_ *TextMark) GetBuffer() (_return_ *TextBuffer) {
	_cgo_of__return__ := C._gtk_text_mark_get_buffer((*C.GtkTextMark)(_self_))
	_return_ = (*TextBuffer)(_cgo_of__return__)
	return
}

func (_self_ *TextMark) GetDeleted() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_mark_get_deleted((*C.GtkTextMark)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextMark) GetLeftGravity() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_mark_get_left_gravity((*C.GtkTextMark)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextMark) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_text_mark_get_name((*C.GtkTextMark)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TextMark) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_mark_get_visible((*C.GtkTextMark)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextMark) SetVisible(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_text_mark_set_visible((*C.GtkTextMark)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func TextTagNew(name string) (_return_ *TextTag) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_text_tag_new((*C.gchar)(_cgo_of_name_))
	_return_ = (*TextTag)(_cgo_of__return__)
	return
}

func (_self_ *TextTag) Event(event_object *C.GObject, event *C.GdkEvent, iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_tag_event((*C.GtkTextTag)(_self_), (*C.GObject)(event_object), (*C.GdkEvent)(event), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextTag) GetPriority() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_tag_get_priority((*C.GtkTextTag)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextTag) SetPriority(priority int) () {
	_cgo_of_priority_ := (C.gint)(priority)
	C._gtk_text_tag_set_priority((*C.GtkTextTag)(_self_), (C.gint)(_cgo_of_priority_))
	return
}

func TextTagTableNew() (_return_ *TextTagTable) {
	_cgo_of__return__ := C.gtk_text_tag_table_new()
	_return_ = (*TextTagTable)(_cgo_of__return__)
	return
}

func (_self_ *TextTagTable) Add(tag *TextTag) () {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	C._gtk_text_tag_table_add((*C.GtkTextTagTable)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	return
}

func (_self_ *TextTagTable) Foreach(func_ C.GtkTextTagTableForeach, data C.gpointer) () {
	C._gtk_text_tag_table_foreach((*C.GtkTextTagTable)(_self_), (C.GtkTextTagTableForeach)(func_), (C.gpointer)(data))
	return
}

func (_self_ *TextTagTable) GetSize() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_tag_table_get_size((*C.GtkTextTagTable)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextTagTable) Lookup(name string) (_return_ *TextTag) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_text_tag_table_lookup((*C.GtkTextTagTable)(_self_), (*C.gchar)(_cgo_of_name_))
	_return_ = (*TextTag)(_cgo_of__return__)
	return
}

func (_self_ *TextTagTable) Remove(tag *TextTag) () {
	_cgo_of_tag_ := (*C.GtkTextTag)(tag)
	C._gtk_text_tag_table_remove((*C.GtkTextTagTable)(_self_), (*C.GtkTextTag)(_cgo_of_tag_))
	return
}

func TextViewNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_text_view_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TextViewNewWithBuffer(buffer *TextBuffer) (_return_ *Widget) {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	_cgo_of__return__ := C.gtk_text_view_new_with_buffer((*C.GtkTextBuffer)(_cgo_of_buffer_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *TextView) AddChildAtAnchor(child *Widget, anchor *TextChildAnchor) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_anchor_ := (*C.GtkTextChildAnchor)(anchor)
	C._gtk_text_view_add_child_at_anchor((*C.GtkTextView)(_self_), (*C.GtkWidget)(_cgo_of_child_), (*C.GtkTextChildAnchor)(_cgo_of_anchor_))
	return
}

func (_self_ *TextView) AddChildInWindow(child *Widget, which_window C.GtkTextWindowType, xpos int, ypos int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_xpos_ := (C.gint)(xpos)
	_cgo_of_ypos_ := (C.gint)(ypos)
	C._gtk_text_view_add_child_in_window((*C.GtkTextView)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.GtkTextWindowType)(which_window), (C.gint)(_cgo_of_xpos_), (C.gint)(_cgo_of_ypos_))
	return
}

func (_self_ *TextView) BackwardDisplayLine(iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_view_backward_display_line((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) BackwardDisplayLineStart(iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_view_backward_display_line_start((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) BufferToWindowCoords(win C.GtkTextWindowType, buffer_x int, buffer_y int) (window_x int, window_y int) {
	_cgo_of_buffer_x_ := (C.gint)(buffer_x)
	_cgo_of_buffer_y_ := (C.gint)(buffer_y)
	var _cgo_of_window_x_ C.gint
	var _cgo_of_window_y_ C.gint
	C._gtk_text_view_buffer_to_window_coords((*C.GtkTextView)(_self_), (C.GtkTextWindowType)(win), (C.gint)(_cgo_of_buffer_x_), (C.gint)(_cgo_of_buffer_y_), (*C.gint)(&_cgo_of_window_x_), (*C.gint)(&_cgo_of_window_y_))
	window_x = int(_cgo_of_window_x_)
	window_y = int(_cgo_of_window_y_)
	return
}

func (_self_ *TextView) ForwardDisplayLine(iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_view_forward_display_line((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) ForwardDisplayLineEnd(iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_view_forward_display_line_end((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) GetAcceptsTab() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_get_accepts_tab((*C.GtkTextView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) GetBorderWindowSize(type_ C.GtkTextWindowType) (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_border_window_size((*C.GtkTextView)(_self_), (C.GtkTextWindowType)(type_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetBuffer() (_return_ *TextBuffer) {
	_cgo_of__return__ := C._gtk_text_view_get_buffer((*C.GtkTextView)(_self_))
	_return_ = (*TextBuffer)(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetCursorLocations(iter *TextIter) (strong *C.GdkRectangle, weak *C.GdkRectangle) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	var _allocated_strong_ C.GdkRectangle
	var _allocated_weak_ C.GdkRectangle
	C._gtk_text_view_get_cursor_locations((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GdkRectangle)(&_allocated_strong_), (*C.GdkRectangle)(&_allocated_weak_))
	strong = (*C.GdkRectangle)(&_allocated_strong_)
	weak = (*C.GdkRectangle)(&_allocated_weak_)
	return
}

func (_self_ *TextView) GetCursorVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_get_cursor_visible((*C.GtkTextView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) GetDefaultAttributes() (_return_ *TextAttributes) {
	_cgo_of__return__ := C._gtk_text_view_get_default_attributes((*C.GtkTextView)(_self_))
	_return_ = (*TextAttributes)(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetEditable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_get_editable((*C.GtkTextView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) GetIndent() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_indent((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C._gtk_text_view_get_input_hints((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C._gtk_text_view_get_input_purpose((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetIterAtLocation(x int, y int) (iter *TextIter) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_view_get_iter_at_location((*C.GtkTextView)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	iter = (*TextIter)(&_allocated_iter_)
	return
}

func (_self_ *TextView) GetIterAtPosition(x int, y int) (iter *TextIter, trailing int) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	var _cgo_of_trailing_ C.gint
	var _allocated_iter_ C.GtkTextIter
	C._gtk_text_view_get_iter_at_position((*C.GtkTextView)(_self_), (*C.GtkTextIter)(&_allocated_iter_), (*C.gint)(&_cgo_of_trailing_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	iter = (*TextIter)(&_allocated_iter_)
	trailing = int(_cgo_of_trailing_)
	return
}

func (_self_ *TextView) GetIterLocation(iter *TextIter) (location *C.GdkRectangle) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	var _allocated_location_ C.GdkRectangle
	C._gtk_text_view_get_iter_location((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.GdkRectangle)(&_allocated_location_))
	location = (*C.GdkRectangle)(&_allocated_location_)
	return
}

func (_self_ *TextView) GetJustification() (_return_ C.GtkJustification) {
	_return_ = C._gtk_text_view_get_justification((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetLeftMargin() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_left_margin((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetLineAtY(y int) (target_iter *TextIter, line_top int) {
	_cgo_of_y_ := (C.gint)(y)
	var _cgo_of_line_top_ C.gint
	var _allocated_target_iter_ C.GtkTextIter
	C._gtk_text_view_get_line_at_y((*C.GtkTextView)(_self_), (*C.GtkTextIter)(&_allocated_target_iter_), (C.gint)(_cgo_of_y_), (*C.gint)(&_cgo_of_line_top_))
	target_iter = (*TextIter)(&_allocated_target_iter_)
	line_top = int(_cgo_of_line_top_)
	return
}

func (_self_ *TextView) GetLineYrange(iter *TextIter) (y int, height int) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	var _cgo_of_y_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_text_view_get_line_yrange((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (*C.gint)(&_cgo_of_y_), (*C.gint)(&_cgo_of_height_))
	y = int(_cgo_of_y_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *TextView) GetOverwrite() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_get_overwrite((*C.GtkTextView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) GetPixelsAboveLines() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_pixels_above_lines((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetPixelsBelowLines() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_pixels_below_lines((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetPixelsInsideWrap() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_pixels_inside_wrap((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetRightMargin() (_return_ int) {
	_cgo_of__return__ := C._gtk_text_view_get_right_margin((*C.GtkTextView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TextView) GetTabs() (_return_ *C.PangoTabArray) {
	_return_ = C._gtk_text_view_get_tabs((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	var _allocated_visible_rect_ C.GdkRectangle
	C._gtk_text_view_get_visible_rect((*C.GtkTextView)(_self_), (*C.GdkRectangle)(&_allocated_visible_rect_))
	visible_rect = (*C.GdkRectangle)(&_allocated_visible_rect_)
	return
}

func (_self_ *TextView) GetWindow(win C.GtkTextWindowType) (_return_ *C.GdkWindow) {
	_return_ = C._gtk_text_view_get_window((*C.GtkTextView)(_self_), (C.GtkTextWindowType)(win))
	return
}

func (_self_ *TextView) GetWindowType(window *C.GdkWindow) (_return_ C.GtkTextWindowType) {
	_return_ = C._gtk_text_view_get_window_type((*C.GtkTextView)(_self_), (*C.GdkWindow)(window))
	return
}

func (_self_ *TextView) GetWrapMode() (_return_ C.GtkWrapMode) {
	_return_ = C._gtk_text_view_get_wrap_mode((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ImContextFilterKeypress(event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_im_context_filter_keypress((*C.GtkTextView)(_self_), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) MoveChild(child *Widget, xpos int, ypos int) () {
	_cgo_of_child_ := (*C.GtkWidget)(child)
	_cgo_of_xpos_ := (C.gint)(xpos)
	_cgo_of_ypos_ := (C.gint)(ypos)
	C._gtk_text_view_move_child((*C.GtkTextView)(_self_), (*C.GtkWidget)(_cgo_of_child_), (C.gint)(_cgo_of_xpos_), (C.gint)(_cgo_of_ypos_))
	return
}

func (_self_ *TextView) MoveMarkOnscreen(mark *TextMark) (_return_ bool) {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	_cgo_of__return__ := C._gtk_text_view_move_mark_onscreen((*C.GtkTextView)(_self_), (*C.GtkTextMark)(_cgo_of_mark_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) MoveVisually(iter *TextIter, count int) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_count_ := (C.gint)(count)
	_cgo_of__return__ := C._gtk_text_view_move_visually((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (C.gint)(_cgo_of_count_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) PlaceCursorOnscreen() (_return_ bool) {
	_cgo_of__return__ := C._gtk_text_view_place_cursor_onscreen((*C.GtkTextView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) ResetImContext() () {
	C._gtk_text_view_reset_im_context((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ScrollMarkOnscreen(mark *TextMark) () {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	C._gtk_text_view_scroll_mark_onscreen((*C.GtkTextView)(_self_), (*C.GtkTextMark)(_cgo_of_mark_))
	return
}

func (_self_ *TextView) ScrollToIter(iter *TextIter, within_margin float64, use_align bool, xalign float64, yalign float64) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of_within_margin_ := (C.gdouble)(within_margin)
	_cgo_of_use_align_ := C.glibtrue()
	if !use_align {
		_cgo_of_use_align_ = C.glibfalse()
	}
	_cgo_of_xalign_ := (C.gdouble)(xalign)
	_cgo_of_yalign_ := (C.gdouble)(yalign)
	_cgo_of__return__ := C._gtk_text_view_scroll_to_iter((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_), (C.gdouble)(_cgo_of_within_margin_), (C.gboolean)(_cgo_of_use_align_), (C.gdouble)(_cgo_of_xalign_), (C.gdouble)(_cgo_of_yalign_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) ScrollToMark(mark *TextMark, within_margin float64, use_align bool, xalign float64, yalign float64) () {
	_cgo_of_mark_ := (*C.GtkTextMark)(mark)
	_cgo_of_within_margin_ := (C.gdouble)(within_margin)
	_cgo_of_use_align_ := C.glibtrue()
	if !use_align {
		_cgo_of_use_align_ = C.glibfalse()
	}
	_cgo_of_xalign_ := (C.gdouble)(xalign)
	_cgo_of_yalign_ := (C.gdouble)(yalign)
	C._gtk_text_view_scroll_to_mark((*C.GtkTextView)(_self_), (*C.GtkTextMark)(_cgo_of_mark_), (C.gdouble)(_cgo_of_within_margin_), (C.gboolean)(_cgo_of_use_align_), (C.gdouble)(_cgo_of_xalign_), (C.gdouble)(_cgo_of_yalign_))
	return
}

func (_self_ *TextView) SetAcceptsTab(accepts_tab bool) () {
	_cgo_of_accepts_tab_ := C.glibtrue()
	if !accepts_tab {
		_cgo_of_accepts_tab_ = C.glibfalse()
	}
	C._gtk_text_view_set_accepts_tab((*C.GtkTextView)(_self_), (C.gboolean)(_cgo_of_accepts_tab_))
	return
}

func (_self_ *TextView) SetBorderWindowSize(type_ C.GtkTextWindowType, size int) () {
	_cgo_of_size_ := (C.gint)(size)
	C._gtk_text_view_set_border_window_size((*C.GtkTextView)(_self_), (C.GtkTextWindowType)(type_), (C.gint)(_cgo_of_size_))
	return
}

func (_self_ *TextView) SetBuffer(buffer *TextBuffer) () {
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	C._gtk_text_view_set_buffer((*C.GtkTextView)(_self_), (*C.GtkTextBuffer)(_cgo_of_buffer_))
	return
}

func (_self_ *TextView) SetCursorVisible(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_text_view_set_cursor_visible((*C.GtkTextView)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TextView) SetEditable(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_text_view_set_editable((*C.GtkTextView)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TextView) SetIndent(indent int) () {
	_cgo_of_indent_ := (C.gint)(indent)
	C._gtk_text_view_set_indent((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_indent_))
	return
}

func (_self_ *TextView) SetInputHints(hints C.GtkInputHints) () {
	C._gtk_text_view_set_input_hints((*C.GtkTextView)(_self_), (C.GtkInputHints)(hints))
	return
}

func (_self_ *TextView) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C._gtk_text_view_set_input_purpose((*C.GtkTextView)(_self_), (C.GtkInputPurpose)(purpose))
	return
}

func (_self_ *TextView) SetJustification(justification C.GtkJustification) () {
	C._gtk_text_view_set_justification((*C.GtkTextView)(_self_), (C.GtkJustification)(justification))
	return
}

func (_self_ *TextView) SetLeftMargin(left_margin int) () {
	_cgo_of_left_margin_ := (C.gint)(left_margin)
	C._gtk_text_view_set_left_margin((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_left_margin_))
	return
}

func (_self_ *TextView) SetOverwrite(overwrite bool) () {
	_cgo_of_overwrite_ := C.glibtrue()
	if !overwrite {
		_cgo_of_overwrite_ = C.glibfalse()
	}
	C._gtk_text_view_set_overwrite((*C.GtkTextView)(_self_), (C.gboolean)(_cgo_of_overwrite_))
	return
}

func (_self_ *TextView) SetPixelsAboveLines(pixels_above_lines int) () {
	_cgo_of_pixels_above_lines_ := (C.gint)(pixels_above_lines)
	C._gtk_text_view_set_pixels_above_lines((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_pixels_above_lines_))
	return
}

func (_self_ *TextView) SetPixelsBelowLines(pixels_below_lines int) () {
	_cgo_of_pixels_below_lines_ := (C.gint)(pixels_below_lines)
	C._gtk_text_view_set_pixels_below_lines((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_pixels_below_lines_))
	return
}

func (_self_ *TextView) SetPixelsInsideWrap(pixels_inside_wrap int) () {
	_cgo_of_pixels_inside_wrap_ := (C.gint)(pixels_inside_wrap)
	C._gtk_text_view_set_pixels_inside_wrap((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_pixels_inside_wrap_))
	return
}

func (_self_ *TextView) SetRightMargin(right_margin int) () {
	_cgo_of_right_margin_ := (C.gint)(right_margin)
	C._gtk_text_view_set_right_margin((*C.GtkTextView)(_self_), (C.gint)(_cgo_of_right_margin_))
	return
}

func (_self_ *TextView) SetTabs(tabs *C.PangoTabArray) () {
	C._gtk_text_view_set_tabs((*C.GtkTextView)(_self_), (*C.PangoTabArray)(tabs))
	return
}

func (_self_ *TextView) SetWrapMode(wrap_mode C.GtkWrapMode) () {
	C._gtk_text_view_set_wrap_mode((*C.GtkTextView)(_self_), (C.GtkWrapMode)(wrap_mode))
	return
}

func (_self_ *TextView) StartsDisplayLine(iter *TextIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTextIter)(iter)
	_cgo_of__return__ := C._gtk_text_view_starts_display_line((*C.GtkTextView)(_self_), (*C.GtkTextIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TextView) WindowToBufferCoords(win C.GtkTextWindowType, window_x int, window_y int) (buffer_x int, buffer_y int) {
	_cgo_of_window_x_ := (C.gint)(window_x)
	_cgo_of_window_y_ := (C.gint)(window_y)
	var _cgo_of_buffer_x_ C.gint
	var _cgo_of_buffer_y_ C.gint
	C._gtk_text_view_window_to_buffer_coords((*C.GtkTextView)(_self_), (C.GtkTextWindowType)(win), (C.gint)(_cgo_of_window_x_), (C.gint)(_cgo_of_window_y_), (*C.gint)(&_cgo_of_buffer_x_), (*C.gint)(&_cgo_of_buffer_y_))
	buffer_x = int(_cgo_of_buffer_x_)
	buffer_y = int(_cgo_of_buffer_y_)
	return
}

func ThemingEngineLoad(name string) (_return_ *ThemingEngine) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_theming_engine_load((*C.gchar)(_cgo_of_name_))
	_return_ = (*ThemingEngine)(_cgo_of__return__)
	return
}

func ThemingEngineRegisterProperty(name_space string, parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	_cgo_of_name_space_ := (*C.gchar)(unsafe.Pointer(C.CString(name_space)))
	C._gtk_theming_engine_register_property((*C.gchar)(_cgo_of_name_space_), (C.GtkStylePropertyParser)(parse_func), (*C.GParamSpec)(pspec))
	return
}

func (_self_ *ThemingEngine) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_theming_engine_get_background_color((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *ThemingEngine) GetBorder(state C.GtkStateFlags) (border *Border) {
	var _allocated_border_ C.GtkBorder
	C._gtk_theming_engine_get_border((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_border_))
	border = (*Border)(&_allocated_border_)
	return
}

func (_self_ *ThemingEngine) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_theming_engine_get_border_color((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *ThemingEngine) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	var _allocated_color_ C.GdkRGBA
	C._gtk_theming_engine_get_color((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(&_allocated_color_))
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func (_self_ *ThemingEngine) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_theming_engine_get_direction((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_theming_engine_get_font((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state))
	return
}

func (_self_ *ThemingEngine) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C._gtk_theming_engine_get_junction_sides((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetMargin(state C.GtkStateFlags) (margin *Border) {
	var _allocated_margin_ C.GtkBorder
	C._gtk_theming_engine_get_margin((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_margin_))
	margin = (*Border)(&_allocated_margin_)
	return
}

func (_self_ *ThemingEngine) GetPadding(state C.GtkStateFlags) (padding *Border) {
	var _allocated_padding_ C.GtkBorder
	C._gtk_theming_engine_get_padding((*C.GtkThemingEngine)(_self_), (C.GtkStateFlags)(state), (*C.GtkBorder)(&_allocated_padding_))
	padding = (*Border)(&_allocated_padding_)
	return
}

func (_self_ *ThemingEngine) GetPath() (_return_ *WidgetPath) {
	_cgo_of__return__ := C._gtk_theming_engine_get_path((*C.GtkThemingEngine)(_self_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *ThemingEngine) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cgo_of_property_ := (*C.gchar)(unsafe.Pointer(C.CString(property)))
	var _allocated_value_ C.GValue
	C._gtk_theming_engine_get_property((*C.GtkThemingEngine)(_self_), (*C.gchar)(_cgo_of_property_), (C.GtkStateFlags)(state), (*C.GValue)(&_allocated_value_))
	value = (*C.GValue)(&_allocated_value_)
	return
}

func (_self_ *ThemingEngine) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_theming_engine_get_screen((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C._gtk_theming_engine_get_state((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetStyleProperty(property_name string, value *C.GValue) () {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_theming_engine_get_style_property((*C.GtkThemingEngine)(_self_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *ThemingEngine) HasClass(style_class string) (_return_ bool) {
	_cgo_of_style_class_ := (*C.gchar)(unsafe.Pointer(C.CString(style_class)))
	_cgo_of__return__ := C._gtk_theming_engine_has_class((*C.GtkThemingEngine)(_self_), (*C.gchar)(_cgo_of_style_class_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ThemingEngine) HasRegion(style_region string) (_return_ bool, flags *C.GtkRegionFlags) {
	_cgo_of_style_region_ := (*C.gchar)(unsafe.Pointer(C.CString(style_region)))
	_cgo_of__return__ := C._gtk_theming_engine_has_region((*C.GtkThemingEngine)(_self_), (*C.gchar)(_cgo_of_style_region_), (*C.GtkRegionFlags)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ThemingEngine) LookupColor(color_name string) (_return_ bool, color *C.GdkRGBA) {
	_cgo_of_color_name_ := (*C.gchar)(unsafe.Pointer(C.CString(color_name)))
	var _allocated_color_ C.GdkRGBA
	_cgo_of__return__ := C._gtk_theming_engine_lookup_color((*C.GtkThemingEngine)(_self_), (*C.gchar)(_cgo_of_color_name_), (*C.GdkRGBA)(&_allocated_color_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	color = (*C.GdkRGBA)(&_allocated_color_)
	return
}

func ToggleActionNew(name string, label string, tooltip string, stock_id string) (_return_ *ToggleAction) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of_tooltip_ := (*C.gchar)(unsafe.Pointer(C.CString(tooltip)))
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_toggle_action_new((*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_label_), (*C.gchar)(_cgo_of_tooltip_), (*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToggleAction)(_cgo_of__return__)
	return
}

func (_self_ *ToggleAction) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_action_get_active((*C.GtkToggleAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleAction) GetDrawAsRadio() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_action_get_draw_as_radio((*C.GtkToggleAction)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleAction) SetActive(is_active bool) () {
	_cgo_of_is_active_ := C.glibtrue()
	if !is_active {
		_cgo_of_is_active_ = C.glibfalse()
	}
	C._gtk_toggle_action_set_active((*C.GtkToggleAction)(_self_), (C.gboolean)(_cgo_of_is_active_))
	return
}

func (_self_ *ToggleAction) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_of_draw_as_radio_ := C.glibtrue()
	if !draw_as_radio {
		_cgo_of_draw_as_radio_ = C.glibfalse()
	}
	C._gtk_toggle_action_set_draw_as_radio((*C.GtkToggleAction)(_self_), (C.gboolean)(_cgo_of_draw_as_radio_))
	return
}

func (_self_ *ToggleAction) Toggled() () {
	C._gtk_toggle_action_toggled((*C.GtkToggleAction)(_self_))
	return
}

func ToggleButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_toggle_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ToggleButtonNewWithLabel(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_toggle_button_new_with_label((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ToggleButtonNewWithMnemonic(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_toggle_button_new_with_mnemonic((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToggleButton) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_button_get_active((*C.GtkToggleButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) GetInconsistent() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_button_get_inconsistent((*C.GtkToggleButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) GetMode() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_button_get_mode((*C.GtkToggleButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleButton) SetActive(is_active bool) () {
	_cgo_of_is_active_ := C.glibtrue()
	if !is_active {
		_cgo_of_is_active_ = C.glibfalse()
	}
	C._gtk_toggle_button_set_active((*C.GtkToggleButton)(_self_), (C.gboolean)(_cgo_of_is_active_))
	return
}

func (_self_ *ToggleButton) SetInconsistent(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_toggle_button_set_inconsistent((*C.GtkToggleButton)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *ToggleButton) SetMode(draw_indicator bool) () {
	_cgo_of_draw_indicator_ := C.glibtrue()
	if !draw_indicator {
		_cgo_of_draw_indicator_ = C.glibfalse()
	}
	C._gtk_toggle_button_set_mode((*C.GtkToggleButton)(_self_), (C.gboolean)(_cgo_of_draw_indicator_))
	return
}

func (_self_ *ToggleButton) Toggled() () {
	C._gtk_toggle_button_toggled((*C.GtkToggleButton)(_self_))
	return
}

func ToggleToolButtonNew() (_return_ *ToolItem) {
	_cgo_of__return__ := C.gtk_toggle_tool_button_new()
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func ToggleToolButtonNewFromStock(stock_id string) (_return_ *ToolItem) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_toggle_tool_button_new_from_stock((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToggleToolButton) GetActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toggle_tool_button_get_active((*C.GtkToggleToolButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToggleToolButton) SetActive(is_active bool) () {
	_cgo_of_is_active_ := C.glibtrue()
	if !is_active {
		_cgo_of_is_active_ = C.glibfalse()
	}
	C._gtk_toggle_tool_button_set_active((*C.GtkToggleToolButton)(_self_), (C.gboolean)(_cgo_of_is_active_))
	return
}

func ToolButtonNew(icon_widget *Widget, label string) (_return_ *ToolItem) {
	_cgo_of_icon_widget_ := (*C.GtkWidget)(icon_widget)
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_tool_button_new((*C.GtkWidget)(_cgo_of_icon_widget_), (*C.gchar)(_cgo_of_label_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func ToolButtonNewFromStock(stock_id string) (_return_ *ToolItem) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of__return__ := C._gtk_tool_button_new_from_stock((*C.gchar)(_cgo_of_stock_id_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToolButton) GetIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_tool_button_get_icon_name((*C.GtkToolButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ToolButton) GetIconWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tool_button_get_icon_widget((*C.GtkToolButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolButton) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_tool_button_get_label((*C.GtkToolButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ToolButton) GetLabelWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tool_button_get_label_widget((*C.GtkToolButton)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolButton) GetStockId() (_return_ string) {
	_cgo_of__return__ := C._gtk_tool_button_get_stock_id((*C.GtkToolButton)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ToolButton) GetUseUnderline() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_button_get_use_underline((*C.GtkToolButton)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolButton) SetIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_tool_button_set_icon_name((*C.GtkToolButton)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *ToolButton) SetIconWidget(icon_widget *Widget) () {
	_cgo_of_icon_widget_ := (*C.GtkWidget)(icon_widget)
	C._gtk_tool_button_set_icon_widget((*C.GtkToolButton)(_self_), (*C.GtkWidget)(_cgo_of_icon_widget_))
	return
}

func (_self_ *ToolButton) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_tool_button_set_label((*C.GtkToolButton)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *ToolButton) SetLabelWidget(label_widget *Widget) () {
	_cgo_of_label_widget_ := (*C.GtkWidget)(label_widget)
	C._gtk_tool_button_set_label_widget((*C.GtkToolButton)(_self_), (*C.GtkWidget)(_cgo_of_label_widget_))
	return
}

func (_self_ *ToolButton) SetStockId(stock_id string) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_tool_button_set_stock_id((*C.GtkToolButton)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	return
}

func (_self_ *ToolButton) SetUseUnderline(use_underline bool) () {
	_cgo_of_use_underline_ := C.glibtrue()
	if !use_underline {
		_cgo_of_use_underline_ = C.glibfalse()
	}
	C._gtk_tool_button_set_use_underline((*C.GtkToolButton)(_self_), (C.gboolean)(_cgo_of_use_underline_))
	return
}

func ToolItemNew() (_return_ *ToolItem) {
	_cgo_of__return__ := C.gtk_tool_item_new()
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToolItem) GetEllipsizeMode() (_return_ C.PangoEllipsizeMode) {
	_return_ = C._gtk_tool_item_get_ellipsize_mode((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetExpand() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_expand((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetHomogeneous() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_homogeneous((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_tool_item_get_icon_size((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetIsImportant() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_is_important((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetOrientation() (_return_ C.GtkOrientation) {
	_return_ = C._gtk_tool_item_get_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetProxyMenuItem(menu_item_id string) (_return_ *Widget) {
	_cgo_of_menu_item_id_ := (*C.gchar)(unsafe.Pointer(C.CString(menu_item_id)))
	_cgo_of__return__ := C._gtk_tool_item_get_proxy_menu_item((*C.GtkToolItem)(_self_), (*C.gchar)(_cgo_of_menu_item_id_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolItem) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C._gtk_tool_item_get_relief_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextAlignment() (_return_ float64) {
	_cgo_of__return__ := C._gtk_tool_item_get_text_alignment((*C.GtkToolItem)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *ToolItem) GetTextOrientation() (_return_ C.GtkOrientation) {
	_return_ = C._gtk_tool_item_get_text_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextSizeGroup() (_return_ *SizeGroup) {
	_cgo_of__return__ := C._gtk_tool_item_get_text_size_group((*C.GtkToolItem)(_self_))
	_return_ = (*SizeGroup)(_cgo_of__return__)
	return
}

func (_self_ *ToolItem) GetToolbarStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C._gtk_tool_item_get_toolbar_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetUseDragWindow() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_use_drag_window((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetVisibleHorizontal() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_visible_horizontal((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) GetVisibleVertical() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_get_visible_vertical((*C.GtkToolItem)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItem) RebuildMenu() () {
	C._gtk_tool_item_rebuild_menu((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) RetrieveProxyMenuItem() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tool_item_retrieve_proxy_menu_item((*C.GtkToolItem)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolItem) SetExpand(expand bool) () {
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tool_item_set_expand((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *ToolItem) SetHomogeneous(homogeneous bool) () {
	_cgo_of_homogeneous_ := C.glibtrue()
	if !homogeneous {
		_cgo_of_homogeneous_ = C.glibfalse()
	}
	C._gtk_tool_item_set_homogeneous((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_homogeneous_))
	return
}

func (_self_ *ToolItem) SetIsImportant(is_important bool) () {
	_cgo_of_is_important_ := C.glibtrue()
	if !is_important {
		_cgo_of_is_important_ = C.glibfalse()
	}
	C._gtk_tool_item_set_is_important((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_is_important_))
	return
}

func (_self_ *ToolItem) SetProxyMenuItem(menu_item_id string, menu_item *Widget) () {
	_cgo_of_menu_item_id_ := (*C.gchar)(unsafe.Pointer(C.CString(menu_item_id)))
	_cgo_of_menu_item_ := (*C.GtkWidget)(menu_item)
	C._gtk_tool_item_set_proxy_menu_item((*C.GtkToolItem)(_self_), (*C.gchar)(_cgo_of_menu_item_id_), (*C.GtkWidget)(_cgo_of_menu_item_))
	return
}

func (_self_ *ToolItem) SetTooltipMarkup(markup string) () {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_tool_item_set_tooltip_markup((*C.GtkToolItem)(_self_), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *ToolItem) SetTooltipText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_tool_item_set_tooltip_text((*C.GtkToolItem)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *ToolItem) SetUseDragWindow(use_drag_window bool) () {
	_cgo_of_use_drag_window_ := C.glibtrue()
	if !use_drag_window {
		_cgo_of_use_drag_window_ = C.glibfalse()
	}
	C._gtk_tool_item_set_use_drag_window((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_use_drag_window_))
	return
}

func (_self_ *ToolItem) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_of_visible_horizontal_ := C.glibtrue()
	if !visible_horizontal {
		_cgo_of_visible_horizontal_ = C.glibfalse()
	}
	C._gtk_tool_item_set_visible_horizontal((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_visible_horizontal_))
	return
}

func (_self_ *ToolItem) SetVisibleVertical(visible_vertical bool) () {
	_cgo_of_visible_vertical_ := C.glibtrue()
	if !visible_vertical {
		_cgo_of_visible_vertical_ = C.glibfalse()
	}
	C._gtk_tool_item_set_visible_vertical((*C.GtkToolItem)(_self_), (C.gboolean)(_cgo_of_visible_vertical_))
	return
}

func (_self_ *ToolItem) ToolbarReconfigured() () {
	C._gtk_tool_item_toolbar_reconfigured((*C.GtkToolItem)(_self_))
	return
}

func ToolItemGroupNew(label string) (_return_ *Widget) {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	_cgo_of__return__ := C._gtk_tool_item_group_new((*C.gchar)(_cgo_of_label_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) GetCollapsed() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tool_item_group_get_collapsed((*C.GtkToolItemGroup)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolItemGroup) GetDropItem(x int, y int) (_return_ *ToolItem) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_tool_item_group_get_drop_item((*C.GtkToolItemGroup)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C._gtk_tool_item_group_get_ellipsize((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetHeaderRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C._gtk_tool_item_group_get_header_relief((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetItemPosition(item *ToolItem) (_return_ int) {
	_cgo_of_item_ := (*C.GtkToolItem)(item)
	_cgo_of__return__ := C._gtk_tool_item_group_get_item_position((*C.GtkToolItemGroup)(_self_), (*C.GtkToolItem)(_cgo_of_item_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) GetLabel() (_return_ string) {
	_cgo_of__return__ := C._gtk_tool_item_group_get_label((*C.GtkToolItemGroup)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *ToolItemGroup) GetLabelWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tool_item_group_get_label_widget((*C.GtkToolItemGroup)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) GetNItems() (_return_ uint) {
	_cgo_of__return__ := C._gtk_tool_item_group_get_n_items((*C.GtkToolItemGroup)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) GetNthItem(index uint) (_return_ *ToolItem) {
	_cgo_of_index_ := (C.guint)(index)
	_cgo_of__return__ := C._gtk_tool_item_group_get_nth_item((*C.GtkToolItemGroup)(_self_), (C.guint)(_cgo_of_index_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToolItemGroup) Insert(item *ToolItem, position int) () {
	_cgo_of_item_ := (*C.GtkToolItem)(item)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_tool_item_group_insert((*C.GtkToolItemGroup)(_self_), (*C.GtkToolItem)(_cgo_of_item_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *ToolItemGroup) SetCollapsed(collapsed bool) () {
	_cgo_of_collapsed_ := C.glibtrue()
	if !collapsed {
		_cgo_of_collapsed_ = C.glibfalse()
	}
	C._gtk_tool_item_group_set_collapsed((*C.GtkToolItemGroup)(_self_), (C.gboolean)(_cgo_of_collapsed_))
	return
}

func (_self_ *ToolItemGroup) SetEllipsize(ellipsize C.PangoEllipsizeMode) () {
	C._gtk_tool_item_group_set_ellipsize((*C.GtkToolItemGroup)(_self_), (C.PangoEllipsizeMode)(ellipsize))
	return
}

func (_self_ *ToolItemGroup) SetHeaderRelief(style C.GtkReliefStyle) () {
	C._gtk_tool_item_group_set_header_relief((*C.GtkToolItemGroup)(_self_), (C.GtkReliefStyle)(style))
	return
}

func (_self_ *ToolItemGroup) SetItemPosition(item *ToolItem, position int) () {
	_cgo_of_item_ := (*C.GtkToolItem)(item)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_tool_item_group_set_item_position((*C.GtkToolItemGroup)(_self_), (*C.GtkToolItem)(_cgo_of_item_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *ToolItemGroup) SetLabel(label string) () {
	_cgo_of_label_ := (*C.gchar)(unsafe.Pointer(C.CString(label)))
	C._gtk_tool_item_group_set_label((*C.GtkToolItemGroup)(_self_), (*C.gchar)(_cgo_of_label_))
	return
}

func (_self_ *ToolItemGroup) SetLabelWidget(label_widget *Widget) () {
	_cgo_of_label_widget_ := (*C.GtkWidget)(label_widget)
	C._gtk_tool_item_group_set_label_widget((*C.GtkToolItemGroup)(_self_), (*C.GtkWidget)(_cgo_of_label_widget_))
	return
}

func ToolPaletteNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_tool_palette_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func ToolPaletteGetDragTargetGroup() (_return_ *TargetEntry) {
	_cgo_of__return__ := C.gtk_tool_palette_get_drag_target_group()
	_return_ = (*TargetEntry)(_cgo_of__return__)
	return
}

func ToolPaletteGetDragTargetItem() (_return_ *TargetEntry) {
	_cgo_of__return__ := C.gtk_tool_palette_get_drag_target_item()
	_return_ = (*TargetEntry)(_cgo_of__return__)
	return
}

func (_self_ *ToolPalette) AddDragDest(widget *Widget, flags C.GtkDestDefaults, targets C.GtkToolPaletteDragTargets, actions C.GdkDragAction) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_tool_palette_add_drag_dest((*C.GtkToolPalette)(_self_), (*C.GtkWidget)(_cgo_of_widget_), (C.GtkDestDefaults)(flags), (C.GtkToolPaletteDragTargets)(targets), (C.GdkDragAction)(actions))
	return
}

func (_self_ *ToolPalette) GetDragItem(selection *SelectionData) (_return_ *Widget) {
	_cgo_of_selection_ := (*C.GtkSelectionData)(selection)
	_cgo_of__return__ := C._gtk_tool_palette_get_drag_item((*C.GtkToolPalette)(_self_), (*C.GtkSelectionData)(_cgo_of_selection_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *ToolPalette) GetDropGroup(x int, y int) (_return_ *ToolItemGroup) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_tool_palette_get_drop_group((*C.GtkToolPalette)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = (*ToolItemGroup)(_cgo_of__return__)
	return
}

func (_self_ *ToolPalette) GetDropItem(x int, y int) (_return_ *ToolItem) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_tool_palette_get_drop_item((*C.GtkToolPalette)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *ToolPalette) GetExclusive(group *ToolItemGroup) (_return_ bool) {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of__return__ := C._gtk_tool_palette_get_exclusive((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolPalette) GetExpand(group *ToolItemGroup) (_return_ bool) {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of__return__ := C._gtk_tool_palette_get_expand((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *ToolPalette) GetGroupPosition(group *ToolItemGroup) (_return_ int) {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of__return__ := C._gtk_tool_palette_get_group_position((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *ToolPalette) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_tool_palette_get_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C._gtk_tool_palette_get_style((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) SetDragSource(targets C.GtkToolPaletteDragTargets) () {
	C._gtk_tool_palette_set_drag_source((*C.GtkToolPalette)(_self_), (C.GtkToolPaletteDragTargets)(targets))
	return
}

func (_self_ *ToolPalette) SetExclusive(group *ToolItemGroup, exclusive bool) () {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of_exclusive_ := C.glibtrue()
	if !exclusive {
		_cgo_of_exclusive_ = C.glibfalse()
	}
	C._gtk_tool_palette_set_exclusive((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_), (C.gboolean)(_cgo_of_exclusive_))
	return
}

func (_self_ *ToolPalette) SetExpand(group *ToolItemGroup, expand bool) () {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tool_palette_set_expand((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *ToolPalette) SetGroupPosition(group *ToolItemGroup, position int) () {
	_cgo_of_group_ := (*C.GtkToolItemGroup)(group)
	_cgo_of_position_ := (C.gint)(position)
	C._gtk_tool_palette_set_group_position((*C.GtkToolPalette)(_self_), (*C.GtkToolItemGroup)(_cgo_of_group_), (C.gint)(_cgo_of_position_))
	return
}

func (_self_ *ToolPalette) SetIconSize(icon_size C.GtkIconSize) () {
	C._gtk_tool_palette_set_icon_size((*C.GtkToolPalette)(_self_), (C.GtkIconSize)(icon_size))
	return
}

func (_self_ *ToolPalette) SetStyle(style C.GtkToolbarStyle) () {
	C._gtk_tool_palette_set_style((*C.GtkToolPalette)(_self_), (C.GtkToolbarStyle)(style))
	return
}

func (_self_ *ToolPalette) UnsetIconSize() () {
	C._gtk_tool_palette_unset_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) UnsetStyle() () {
	C._gtk_tool_palette_unset_style((*C.GtkToolPalette)(_self_))
	return
}

func ToolbarNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_toolbar_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Toolbar) GetDropIndex(x int, y int) (_return_ int) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of__return__ := C._gtk_toolbar_get_drop_index((*C.GtkToolbar)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Toolbar) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_toolbar_get_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetItemIndex(item *ToolItem) (_return_ int) {
	_cgo_of_item_ := (*C.GtkToolItem)(item)
	_cgo_of__return__ := C._gtk_toolbar_get_item_index((*C.GtkToolbar)(_self_), (*C.GtkToolItem)(_cgo_of_item_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Toolbar) GetNItems() (_return_ int) {
	_cgo_of__return__ := C._gtk_toolbar_get_n_items((*C.GtkToolbar)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Toolbar) GetNthItem(n int) (_return_ *ToolItem) {
	_cgo_of_n_ := (C.gint)(n)
	_cgo_of__return__ := C._gtk_toolbar_get_nth_item((*C.GtkToolbar)(_self_), (C.gint)(_cgo_of_n_))
	_return_ = (*ToolItem)(_cgo_of__return__)
	return
}

func (_self_ *Toolbar) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C._gtk_toolbar_get_relief_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetShowArrow() (_return_ bool) {
	_cgo_of__return__ := C._gtk_toolbar_get_show_arrow((*C.GtkToolbar)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Toolbar) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C._gtk_toolbar_get_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) Insert(item *ToolItem, pos int) () {
	_cgo_of_item_ := (*C.GtkToolItem)(item)
	_cgo_of_pos_ := (C.gint)(pos)
	C._gtk_toolbar_insert((*C.GtkToolbar)(_self_), (*C.GtkToolItem)(_cgo_of_item_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *Toolbar) SetDropHighlightItem(tool_item *ToolItem, index_ int) () {
	_cgo_of_tool_item_ := (*C.GtkToolItem)(tool_item)
	_cgo_of_index__ := (C.gint)(index_)
	C._gtk_toolbar_set_drop_highlight_item((*C.GtkToolbar)(_self_), (*C.GtkToolItem)(_cgo_of_tool_item_), (C.gint)(_cgo_of_index__))
	return
}

func (_self_ *Toolbar) SetIconSize(icon_size C.GtkIconSize) () {
	C._gtk_toolbar_set_icon_size((*C.GtkToolbar)(_self_), (C.GtkIconSize)(icon_size))
	return
}

func (_self_ *Toolbar) SetShowArrow(show_arrow bool) () {
	_cgo_of_show_arrow_ := C.glibtrue()
	if !show_arrow {
		_cgo_of_show_arrow_ = C.glibfalse()
	}
	C._gtk_toolbar_set_show_arrow((*C.GtkToolbar)(_self_), (C.gboolean)(_cgo_of_show_arrow_))
	return
}

func (_self_ *Toolbar) SetStyle(style C.GtkToolbarStyle) () {
	C._gtk_toolbar_set_style((*C.GtkToolbar)(_self_), (C.GtkToolbarStyle)(style))
	return
}

func (_self_ *Toolbar) UnsetIconSize() () {
	C._gtk_toolbar_unset_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) UnsetStyle() () {
	C._gtk_toolbar_unset_style((*C.GtkToolbar)(_self_))
	return
}

func TooltipTriggerTooltipQuery(display *C.GdkDisplay) () {
	C.gtk_tooltip_trigger_tooltip_query((*C.GdkDisplay)(display))
	return
}

func (_self_ *Tooltip) SetCustom(custom_widget *Widget) () {
	_cgo_of_custom_widget_ := (*C.GtkWidget)(custom_widget)
	C._gtk_tooltip_set_custom((*C.GtkTooltip)(_self_), (*C.GtkWidget)(_cgo_of_custom_widget_))
	return
}

func (_self_ *Tooltip) SetIcon(pixbuf *C.GdkPixbuf) () {
	C._gtk_tooltip_set_icon((*C.GtkTooltip)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *Tooltip) SetIconFromGicon(gicon *C.GIcon, size C.GtkIconSize) () {
	C._gtk_tooltip_set_icon_from_gicon((*C.GtkTooltip)(_self_), (*C.GIcon)(gicon), (C.GtkIconSize)(size))
	return
}

func (_self_ *Tooltip) SetIconFromIconName(icon_name string, size C.GtkIconSize) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_tooltip_set_icon_from_icon_name((*C.GtkTooltip)(_self_), (*C.gchar)(_cgo_of_icon_name_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Tooltip) SetIconFromStock(stock_id string, size C.GtkIconSize) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_tooltip_set_icon_from_stock((*C.GtkTooltip)(_self_), (*C.gchar)(_cgo_of_stock_id_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Tooltip) SetMarkup(markup string) () {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_tooltip_set_markup((*C.GtkTooltip)(_self_), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *Tooltip) SetText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_tooltip_set_text((*C.GtkTooltip)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *Tooltip) SetTipArea(rect *C.GdkRectangle) () {
	C._gtk_tooltip_set_tip_area((*C.GtkTooltip)(_self_), (*C.GdkRectangle)(rect))
	return
}

func (_self_ *TreeIter) Copy() (_return_ *TreeIter) {
	_cgo_of__return__ := C._gtk_tree_iter_copy((*C.GtkTreeIter)(_self_))
	_return_ = (*TreeIter)(_cgo_of__return__)
	return
}

func (_self_ *TreeIter) Free() () {
	C._gtk_tree_iter_free((*C.GtkTreeIter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ClearCache() () {
	C._gtk_tree_model_filter_clear_cache((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ConvertChildIterToIter(child_iter *TreeIter) (_return_ bool, filter_iter *TreeIter) {
	_cgo_of_child_iter_ := (*C.GtkTreeIter)(child_iter)
	var _allocated_filter_iter_ C.GtkTreeIter
	_cgo_of__return__ := C._gtk_tree_model_filter_convert_child_iter_to_iter((*C.GtkTreeModelFilter)(_self_), (*C.GtkTreeIter)(&_allocated_filter_iter_), (*C.GtkTreeIter)(_cgo_of_child_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	filter_iter = (*TreeIter)(&_allocated_filter_iter_)
	return
}

func (_self_ *TreeModelFilter) ConvertChildPathToPath(child_path *TreePath) (_return_ *TreePath) {
	_cgo_of_child_path_ := (*C.GtkTreePath)(child_path)
	_cgo_of__return__ := C._gtk_tree_model_filter_convert_child_path_to_path((*C.GtkTreeModelFilter)(_self_), (*C.GtkTreePath)(_cgo_of_child_path_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreeModelFilter) ConvertIterToChildIter(filter_iter *TreeIter) (child_iter *TreeIter) {
	_cgo_of_filter_iter_ := (*C.GtkTreeIter)(filter_iter)
	var _allocated_child_iter_ C.GtkTreeIter
	C._gtk_tree_model_filter_convert_iter_to_child_iter((*C.GtkTreeModelFilter)(_self_), (*C.GtkTreeIter)(&_allocated_child_iter_), (*C.GtkTreeIter)(_cgo_of_filter_iter_))
	child_iter = (*TreeIter)(&_allocated_child_iter_)
	return
}

func (_self_ *TreeModelFilter) ConvertPathToChildPath(filter_path *TreePath) (_return_ *TreePath) {
	_cgo_of_filter_path_ := (*C.GtkTreePath)(filter_path)
	_cgo_of__return__ := C._gtk_tree_model_filter_convert_path_to_child_path((*C.GtkTreeModelFilter)(_self_), (*C.GtkTreePath)(_cgo_of_filter_path_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreeModelFilter) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_tree_model_filter_get_model((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) Refilter() () {
	C._gtk_tree_model_filter_refilter((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) SetModifyFunc(n_columns int, types *C.GType, func_ C.GtkTreeModelFilterModifyFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_of_n_columns_ := (C.gint)(n_columns)
	C._gtk_tree_model_filter_set_modify_func((*C.GtkTreeModelFilter)(_self_), (C.gint)(_cgo_of_n_columns_), (*C.GType)(types), (C.GtkTreeModelFilterModifyFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeModelFilter) SetVisibleColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_tree_model_filter_set_visible_column((*C.GtkTreeModelFilter)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *TreeModelFilter) SetVisibleFunc(func_ C.GtkTreeModelFilterVisibleFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_tree_model_filter_set_visible_func((*C.GtkTreeModelFilter)(_self_), (C.GtkTreeModelFilterVisibleFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeModelSort) ClearCache() () {
	C._gtk_tree_model_sort_clear_cache((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) ConvertChildIterToIter(child_iter *TreeIter) (_return_ bool, sort_iter *TreeIter) {
	_cgo_of_child_iter_ := (*C.GtkTreeIter)(child_iter)
	var _allocated_sort_iter_ C.GtkTreeIter
	_cgo_of__return__ := C._gtk_tree_model_sort_convert_child_iter_to_iter((*C.GtkTreeModelSort)(_self_), (*C.GtkTreeIter)(&_allocated_sort_iter_), (*C.GtkTreeIter)(_cgo_of_child_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	sort_iter = (*TreeIter)(&_allocated_sort_iter_)
	return
}

func (_self_ *TreeModelSort) ConvertChildPathToPath(child_path *TreePath) (_return_ *TreePath) {
	_cgo_of_child_path_ := (*C.GtkTreePath)(child_path)
	_cgo_of__return__ := C._gtk_tree_model_sort_convert_child_path_to_path((*C.GtkTreeModelSort)(_self_), (*C.GtkTreePath)(_cgo_of_child_path_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreeModelSort) ConvertIterToChildIter(sorted_iter *TreeIter) (child_iter *TreeIter) {
	_cgo_of_sorted_iter_ := (*C.GtkTreeIter)(sorted_iter)
	var _allocated_child_iter_ C.GtkTreeIter
	C._gtk_tree_model_sort_convert_iter_to_child_iter((*C.GtkTreeModelSort)(_self_), (*C.GtkTreeIter)(&_allocated_child_iter_), (*C.GtkTreeIter)(_cgo_of_sorted_iter_))
	child_iter = (*TreeIter)(&_allocated_child_iter_)
	return
}

func (_self_ *TreeModelSort) ConvertPathToChildPath(sorted_path *TreePath) (_return_ *TreePath) {
	_cgo_of_sorted_path_ := (*C.GtkTreePath)(sorted_path)
	_cgo_of__return__ := C._gtk_tree_model_sort_convert_path_to_child_path((*C.GtkTreeModelSort)(_self_), (*C.GtkTreePath)(_cgo_of_sorted_path_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreeModelSort) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_tree_model_sort_get_model((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) IterIsValid(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_tree_model_sort_iter_is_valid((*C.GtkTreeModelSort)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeModelSort) ResetDefaultSortFunc() () {
	C._gtk_tree_model_sort_reset_default_sort_func((*C.GtkTreeModelSort)(_self_))
	return
}

func TreePathNew() (_return_ *TreePath) {
	_cgo_of__return__ := C.gtk_tree_path_new()
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func TreePathNewFirst() (_return_ *TreePath) {
	_cgo_of__return__ := C.gtk_tree_path_new_first()
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func TreePathNewFromString(path string) (_return_ *TreePath) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of__return__ := C._gtk_tree_path_new_from_string((*C.gchar)(_cgo_of_path_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreePath) AppendIndex(index_ int) () {
	_cgo_of_index__ := (C.gint)(index_)
	C._gtk_tree_path_append_index((*C.GtkTreePath)(_self_), (C.gint)(_cgo_of_index__))
	return
}

func (_self_ *TreePath) Compare(b *TreePath) (_return_ int) {
	_cgo_of_b_ := (*C.GtkTreePath)(b)
	_cgo_of__return__ := C._gtk_tree_path_compare((*C.GtkTreePath)(_self_), (*C.GtkTreePath)(_cgo_of_b_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreePath) Copy() (_return_ *TreePath) {
	_cgo_of__return__ := C._gtk_tree_path_copy((*C.GtkTreePath)(_self_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreePath) Down() () {
	C._gtk_tree_path_down((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) Free() () {
	C._gtk_tree_path_free((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetDepth() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_path_get_depth((*C.GtkTreePath)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreePath) GetIndices() (_return_ *C.gint) {
	_return_ = C._gtk_tree_path_get_indices((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetIndicesWithDepth() (_return_ *C.gint, depth int) {
	var _cgo_of_depth_ C.gint
	_return_ = C._gtk_tree_path_get_indices_with_depth((*C.GtkTreePath)(_self_), (*C.gint)(&_cgo_of_depth_))
	depth = int(_cgo_of_depth_)
	return
}

func (_self_ *TreePath) IsAncestor(descendant *TreePath) (_return_ bool) {
	_cgo_of_descendant_ := (*C.GtkTreePath)(descendant)
	_cgo_of__return__ := C._gtk_tree_path_is_ancestor((*C.GtkTreePath)(_self_), (*C.GtkTreePath)(_cgo_of_descendant_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreePath) IsDescendant(ancestor *TreePath) (_return_ bool) {
	_cgo_of_ancestor_ := (*C.GtkTreePath)(ancestor)
	_cgo_of__return__ := C._gtk_tree_path_is_descendant((*C.GtkTreePath)(_self_), (*C.GtkTreePath)(_cgo_of_ancestor_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreePath) Next() () {
	C._gtk_tree_path_next((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) PrependIndex(index_ int) () {
	_cgo_of_index__ := (C.gint)(index_)
	C._gtk_tree_path_prepend_index((*C.GtkTreePath)(_self_), (C.gint)(_cgo_of_index__))
	return
}

func (_self_ *TreePath) Prev() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_path_prev((*C.GtkTreePath)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreePath) ToString() (_return_ string) {
	_cgo_of__return__ := C._gtk_tree_path_to_string((*C.GtkTreePath)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TreePath) Up() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_path_up((*C.GtkTreePath)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TreeRowReferenceNew(model *C.GtkTreeModel, path *TreePath) (_return_ *TreeRowReference) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C.gtk_tree_row_reference_new((*C.GtkTreeModel)(model), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = (*TreeRowReference)(_cgo_of__return__)
	return
}

func TreeRowReferenceNewProxy(proxy *C.GObject, model *C.GtkTreeModel, path *TreePath) (_return_ *TreeRowReference) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C.gtk_tree_row_reference_new_proxy((*C.GObject)(proxy), (*C.GtkTreeModel)(model), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = (*TreeRowReference)(_cgo_of__return__)
	return
}

func TreeRowReferenceDeleted(proxy *C.GObject, path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C.gtk_tree_row_reference_deleted((*C.GObject)(proxy), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func TreeRowReferenceInserted(proxy *C.GObject, path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C.gtk_tree_row_reference_inserted((*C.GObject)(proxy), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func TreeRowReferenceReordered(proxy *C.GObject, path *TreePath, iter *TreeIter, new_order *C.gint) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	C.gtk_tree_row_reference_reordered((*C.GObject)(proxy), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.gint)(new_order))
	return
}

func (_self_ *TreeRowReference) Copy() (_return_ *TreeRowReference) {
	_cgo_of__return__ := C._gtk_tree_row_reference_copy((*C.GtkTreeRowReference)(_self_))
	_return_ = (*TreeRowReference)(_cgo_of__return__)
	return
}

func (_self_ *TreeRowReference) Free() () {
	C._gtk_tree_row_reference_free((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_tree_row_reference_get_model((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetPath() (_return_ *TreePath) {
	_cgo_of__return__ := C._gtk_tree_row_reference_get_path((*C.GtkTreeRowReference)(_self_))
	_return_ = (*TreePath)(_cgo_of__return__)
	return
}

func (_self_ *TreeRowReference) Valid() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_row_reference_valid((*C.GtkTreeRowReference)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) CountSelectedRows() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_selection_count_selected_rows((*C.GtkTreeSelection)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeSelection) GetMode() (_return_ C.GtkSelectionMode) {
	_return_ = C._gtk_tree_selection_get_mode((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelectFunction() (_return_ C.GtkTreeSelectionFunc) {
	_return_ = C._gtk_tree_selection_get_select_function((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelected() (_return_ bool, model unsafe.Pointer, iter *TreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	_cgo_of__return__ := C._gtk_tree_selection_get_selected((*C.GtkTreeSelection)(_self_), unsafe.Pointer(model), (*C.GtkTreeIter)(&_allocated_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeSelection) GetSelectedRows() (_return_ *C.GList, model unsafe.Pointer) {
	_return_ = C._gtk_tree_selection_get_selected_rows((*C.GtkTreeSelection)(_self_), unsafe.Pointer(model))
	return
}

func (_self_ *TreeSelection) GetTreeView() (_return_ *TreeView) {
	_cgo_of__return__ := C._gtk_tree_selection_get_tree_view((*C.GtkTreeSelection)(_self_))
	_return_ = (*TreeView)(_cgo_of__return__)
	return
}

func (_self_ *TreeSelection) GetUserData() (_return_ C.gpointer) {
	_return_ = C._gtk_tree_selection_get_user_data((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) IterIsSelected(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_tree_selection_iter_is_selected((*C.GtkTreeSelection)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) PathIsSelected(path *TreePath) (_return_ bool) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_tree_selection_path_is_selected((*C.GtkTreeSelection)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeSelection) SelectAll() () {
	C._gtk_tree_selection_select_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) SelectIter(iter *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	C._gtk_tree_selection_select_iter((*C.GtkTreeSelection)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	return
}

func (_self_ *TreeSelection) SelectPath(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_tree_selection_select_path((*C.GtkTreeSelection)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *TreeSelection) SelectRange(start_path *TreePath, end_path *TreePath) () {
	_cgo_of_start_path_ := (*C.GtkTreePath)(start_path)
	_cgo_of_end_path_ := (*C.GtkTreePath)(end_path)
	C._gtk_tree_selection_select_range((*C.GtkTreeSelection)(_self_), (*C.GtkTreePath)(_cgo_of_start_path_), (*C.GtkTreePath)(_cgo_of_end_path_))
	return
}

func (_self_ *TreeSelection) SelectedForeach(func_ C.GtkTreeSelectionForeachFunc, data C.gpointer) () {
	C._gtk_tree_selection_selected_foreach((*C.GtkTreeSelection)(_self_), (C.GtkTreeSelectionForeachFunc)(func_), (C.gpointer)(data))
	return
}

func (_self_ *TreeSelection) SetMode(type_ C.GtkSelectionMode) () {
	C._gtk_tree_selection_set_mode((*C.GtkTreeSelection)(_self_), (C.GtkSelectionMode)(type_))
	return
}

func (_self_ *TreeSelection) SetSelectFunction(func_ C.GtkTreeSelectionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_tree_selection_set_select_function((*C.GtkTreeSelection)(_self_), (C.GtkTreeSelectionFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeSelection) UnselectAll() () {
	C._gtk_tree_selection_unselect_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) UnselectIter(iter *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	C._gtk_tree_selection_unselect_iter((*C.GtkTreeSelection)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	return
}

func (_self_ *TreeSelection) UnselectPath(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_tree_selection_unselect_path((*C.GtkTreeSelection)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *TreeSelection) UnselectRange(start_path *TreePath, end_path *TreePath) () {
	_cgo_of_start_path_ := (*C.GtkTreePath)(start_path)
	_cgo_of_end_path_ := (*C.GtkTreePath)(end_path)
	C._gtk_tree_selection_unselect_range((*C.GtkTreeSelection)(_self_), (*C.GtkTreePath)(_cgo_of_start_path_), (*C.GtkTreePath)(_cgo_of_end_path_))
	return
}

func TreeStoreNewv(n_columns int, types *C.GType) (_return_ *TreeStore) {
	_cgo_of_n_columns_ := (C.gint)(n_columns)
	_cgo_of__return__ := C.gtk_tree_store_newv((C.gint)(_cgo_of_n_columns_), (*C.GType)(types))
	_return_ = (*TreeStore)(_cgo_of__return__)
	return
}

func (_self_ *TreeStore) Append(parent *TreeIter) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_append((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) Clear() () {
	C._gtk_tree_store_clear((*C.GtkTreeStore)(_self_))
	return
}

func (_self_ *TreeStore) Insert(parent *TreeIter, position int) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	_cgo_of_position_ := (C.gint)(position)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_insert((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_), (C.gint)(_cgo_of_position_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) InsertAfter(parent *TreeIter, sibling *TreeIter) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	_cgo_of_sibling_ := (*C.GtkTreeIter)(sibling)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_insert_after((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_), (*C.GtkTreeIter)(_cgo_of_sibling_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) InsertBefore(parent *TreeIter, sibling *TreeIter) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	_cgo_of_sibling_ := (*C.GtkTreeIter)(sibling)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_insert_before((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_), (*C.GtkTreeIter)(_cgo_of_sibling_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) InsertWithValuesv(parent *TreeIter, position int, columns *C.gint, values *C.GValue, n_values int) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of_n_values_ := (C.gint)(n_values)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_insert_with_valuesv((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_), (C.gint)(_cgo_of_position_), (*C.gint)(columns), (*C.GValue)(values), (C.gint)(_cgo_of_n_values_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) IsAncestor(iter *TreeIter, descendant *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_descendant_ := (*C.GtkTreeIter)(descendant)
	_cgo_of__return__ := C._gtk_tree_store_is_ancestor((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.GtkTreeIter)(_cgo_of_descendant_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeStore) IterDepth(iter *TreeIter) (_return_ int) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_tree_store_iter_depth((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeStore) IterIsValid(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_tree_store_iter_is_valid((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeStore) MoveAfter(iter *TreeIter, position *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_position_ := (*C.GtkTreeIter)(position)
	C._gtk_tree_store_move_after((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.GtkTreeIter)(_cgo_of_position_))
	return
}

func (_self_ *TreeStore) MoveBefore(iter *TreeIter, position *TreeIter) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_position_ := (*C.GtkTreeIter)(position)
	C._gtk_tree_store_move_before((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.GtkTreeIter)(_cgo_of_position_))
	return
}

func (_self_ *TreeStore) Prepend(parent *TreeIter) (iter *TreeIter) {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	var _allocated_iter_ C.GtkTreeIter
	C._gtk_tree_store_prepend((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(&_allocated_iter_), (*C.GtkTreeIter)(_cgo_of_parent_))
	iter = (*TreeIter)(&_allocated_iter_)
	return
}

func (_self_ *TreeStore) Remove(iter *TreeIter) (_return_ bool) {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of__return__ := C._gtk_tree_store_remove((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeStore) Reorder(parent *TreeIter, new_order *C.gint) () {
	_cgo_of_parent_ := (*C.GtkTreeIter)(parent)
	C._gtk_tree_store_reorder((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_parent_), (*C.gint)(new_order))
	return
}

func (_self_ *TreeStore) SetColumnTypes(n_columns int, types *C.GType) () {
	_cgo_of_n_columns_ := (C.gint)(n_columns)
	C._gtk_tree_store_set_column_types((*C.GtkTreeStore)(_self_), (C.gint)(_cgo_of_n_columns_), (*C.GType)(types))
	return
}

func (_self_ *TreeStore) SetValue(iter *TreeIter, column int, value *C.GValue) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_tree_store_set_value((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (C.gint)(_cgo_of_column_), (*C.GValue)(value))
	return
}

func (_self_ *TreeStore) SetValuesv(iter *TreeIter, columns *C.gint, values *C.GValue, n_values int) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_n_values_ := (C.gint)(n_values)
	C._gtk_tree_store_set_valuesv((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_iter_), (*C.gint)(columns), (*C.GValue)(values), (C.gint)(_cgo_of_n_values_))
	return
}

func (_self_ *TreeStore) Swap(a *TreeIter, b *TreeIter) () {
	_cgo_of_a_ := (*C.GtkTreeIter)(a)
	_cgo_of_b_ := (*C.GtkTreeIter)(b)
	C._gtk_tree_store_swap((*C.GtkTreeStore)(_self_), (*C.GtkTreeIter)(_cgo_of_a_), (*C.GtkTreeIter)(_cgo_of_b_))
	return
}

func TreeViewNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_tree_view_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TreeViewNewWithModel(model *C.GtkTreeModel) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_tree_view_new_with_model((*C.GtkTreeModel)(model))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *TreeView) AppendColumn(column *TreeViewColumn) (_return_ int) {
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of__return__ := C._gtk_tree_view_append_column((*C.GtkTreeView)(_self_), (*C.GtkTreeViewColumn)(_cgo_of_column_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) CollapseAll() () {
	C._gtk_tree_view_collapse_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) CollapseRow(path *TreePath) (_return_ bool) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_tree_view_collapse_row((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) ColumnsAutosize() () {
	C._gtk_tree_view_columns_autosize((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ConvertBinWindowToTreeCoords(bx int, by int) (tx int, ty int) {
	_cgo_of_bx_ := (C.gint)(bx)
	_cgo_of_by_ := (C.gint)(by)
	var _cgo_of_tx_ C.gint
	var _cgo_of_ty_ C.gint
	C._gtk_tree_view_convert_bin_window_to_tree_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_bx_), (C.gint)(_cgo_of_by_), (*C.gint)(&_cgo_of_tx_), (*C.gint)(&_cgo_of_ty_))
	tx = int(_cgo_of_tx_)
	ty = int(_cgo_of_ty_)
	return
}

func (_self_ *TreeView) ConvertBinWindowToWidgetCoords(bx int, by int) (wx int, wy int) {
	_cgo_of_bx_ := (C.gint)(bx)
	_cgo_of_by_ := (C.gint)(by)
	var _cgo_of_wx_ C.gint
	var _cgo_of_wy_ C.gint
	C._gtk_tree_view_convert_bin_window_to_widget_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_bx_), (C.gint)(_cgo_of_by_), (*C.gint)(&_cgo_of_wx_), (*C.gint)(&_cgo_of_wy_))
	wx = int(_cgo_of_wx_)
	wy = int(_cgo_of_wy_)
	return
}

func (_self_ *TreeView) ConvertTreeToBinWindowCoords(tx int, ty int) (bx int, by int) {
	_cgo_of_tx_ := (C.gint)(tx)
	_cgo_of_ty_ := (C.gint)(ty)
	var _cgo_of_bx_ C.gint
	var _cgo_of_by_ C.gint
	C._gtk_tree_view_convert_tree_to_bin_window_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_tx_), (C.gint)(_cgo_of_ty_), (*C.gint)(&_cgo_of_bx_), (*C.gint)(&_cgo_of_by_))
	bx = int(_cgo_of_bx_)
	by = int(_cgo_of_by_)
	return
}

func (_self_ *TreeView) ConvertTreeToWidgetCoords(tx int, ty int) (wx int, wy int) {
	_cgo_of_tx_ := (C.gint)(tx)
	_cgo_of_ty_ := (C.gint)(ty)
	var _cgo_of_wx_ C.gint
	var _cgo_of_wy_ C.gint
	C._gtk_tree_view_convert_tree_to_widget_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_tx_), (C.gint)(_cgo_of_ty_), (*C.gint)(&_cgo_of_wx_), (*C.gint)(&_cgo_of_wy_))
	wx = int(_cgo_of_wx_)
	wy = int(_cgo_of_wy_)
	return
}

func (_self_ *TreeView) ConvertWidgetToBinWindowCoords(wx int, wy int) (bx int, by int) {
	_cgo_of_wx_ := (C.gint)(wx)
	_cgo_of_wy_ := (C.gint)(wy)
	var _cgo_of_bx_ C.gint
	var _cgo_of_by_ C.gint
	C._gtk_tree_view_convert_widget_to_bin_window_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_wx_), (C.gint)(_cgo_of_wy_), (*C.gint)(&_cgo_of_bx_), (*C.gint)(&_cgo_of_by_))
	bx = int(_cgo_of_bx_)
	by = int(_cgo_of_by_)
	return
}

func (_self_ *TreeView) ConvertWidgetToTreeCoords(wx int, wy int) (tx int, ty int) {
	_cgo_of_wx_ := (C.gint)(wx)
	_cgo_of_wy_ := (C.gint)(wy)
	var _cgo_of_tx_ C.gint
	var _cgo_of_ty_ C.gint
	C._gtk_tree_view_convert_widget_to_tree_coords((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_wx_), (C.gint)(_cgo_of_wy_), (*C.gint)(&_cgo_of_tx_), (*C.gint)(&_cgo_of_ty_))
	tx = int(_cgo_of_tx_)
	ty = int(_cgo_of_ty_)
	return
}

func (_self_ *TreeView) CreateRowDragIcon(path *TreePath) (_return_ *C.cairo_surface_t) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_return_ = C._gtk_tree_view_create_row_drag_icon((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *TreeView) EnableModelDragDest(targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_tree_view_enable_model_drag_dest((*C.GtkTreeView)(_self_), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *TreeView) EnableModelDragSource(start_button_mask C.GdkModifierType, targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_tree_view_enable_model_drag_source((*C.GtkTreeView)(_self_), (C.GdkModifierType)(start_button_mask), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *TreeView) ExpandAll() () {
	C._gtk_tree_view_expand_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ExpandRow(path *TreePath, open_all bool) (_return_ bool) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_open_all_ := C.glibtrue()
	if !open_all {
		_cgo_of_open_all_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_tree_view_expand_row((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (C.gboolean)(_cgo_of_open_all_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) ExpandToPath(path *TreePath) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_tree_view_expand_to_path((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *TreeView) GetBackgroundArea(path *TreePath, column *TreeViewColumn) (rect *C.GdkRectangle) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	var _allocated_rect_ C.GdkRectangle
	C._gtk_tree_view_get_background_area((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (*C.GdkRectangle)(&_allocated_rect_))
	rect = (*C.GdkRectangle)(&_allocated_rect_)
	return
}

func (_self_ *TreeView) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_tree_view_get_bin_window((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCellArea(path *TreePath, column *TreeViewColumn) (rect *C.GdkRectangle) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	var _allocated_rect_ C.GdkRectangle
	C._gtk_tree_view_get_cell_area((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (*C.GdkRectangle)(&_allocated_rect_))
	rect = (*C.GdkRectangle)(&_allocated_rect_)
	return
}

func (_self_ *TreeView) GetColumn(n int) (_return_ *TreeViewColumn) {
	_cgo_of_n_ := (C.gint)(n)
	_cgo_of__return__ := C._gtk_tree_view_get_column((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_n_))
	_return_ = (*TreeViewColumn)(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetColumns() (_return_ *C.GList) {
	_return_ = C._gtk_tree_view_get_columns((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCursor() (path unsafe.Pointer, focus_column unsafe.Pointer) {
	C._gtk_tree_view_get_cursor((*C.GtkTreeView)(_self_), unsafe.Pointer(path), unsafe.Pointer(focus_column))
	return
}

func (_self_ *TreeView) GetDestRowAtPos(drag_x int, drag_y int) (_return_ bool, path unsafe.Pointer, pos *C.GtkTreeViewDropPosition) {
	_cgo_of_drag_x_ := (C.gint)(drag_x)
	_cgo_of_drag_y_ := (C.gint)(drag_y)
	_cgo_of__return__ := C._gtk_tree_view_get_dest_row_at_pos((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_drag_x_), (C.gint)(_cgo_of_drag_y_), unsafe.Pointer(path), (*C.GtkTreeViewDropPosition)(pos))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetDragDestRow() (path unsafe.Pointer, pos *C.GtkTreeViewDropPosition) {
	C._gtk_tree_view_get_drag_dest_row((*C.GtkTreeView)(_self_), unsafe.Pointer(path), (*C.GtkTreeViewDropPosition)(pos))
	return
}

func (_self_ *TreeView) GetEnableSearch() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_enable_search((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetEnableTreeLines() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_enable_tree_lines((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetExpanderColumn() (_return_ *TreeViewColumn) {
	_cgo_of__return__ := C._gtk_tree_view_get_expander_column((*C.GtkTreeView)(_self_))
	_return_ = (*TreeViewColumn)(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetFixedHeightMode() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_fixed_height_mode((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetGridLines() (_return_ C.GtkTreeViewGridLines) {
	_return_ = C._gtk_tree_view_get_grid_lines((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHeadersClickable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_headers_clickable((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHeadersVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_headers_visible((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHoverExpand() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_hover_expand((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetHoverSelection() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_hover_selection((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetLevelIndentation() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_get_level_indentation((*C.GtkTreeView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C._gtk_tree_view_get_model((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetNColumns() (_return_ uint) {
	_cgo_of__return__ := C._gtk_tree_view_get_n_columns((*C.GtkTreeView)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetPathAtPos(x int, y int) (_return_ bool, path unsafe.Pointer, column unsafe.Pointer, cell_x int, cell_y int) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	var _cgo_of_cell_x_ C.gint
	var _cgo_of_cell_y_ C.gint
	_cgo_of__return__ := C._gtk_tree_view_get_path_at_pos((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_), unsafe.Pointer(path), unsafe.Pointer(column), (*C.gint)(&_cgo_of_cell_x_), (*C.gint)(&_cgo_of_cell_y_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	cell_x = int(_cgo_of_cell_x_)
	cell_y = int(_cgo_of_cell_y_)
	return
}

func (_self_ *TreeView) GetReorderable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_reorderable((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C._gtk_tree_view_get_row_separator_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetRubberBanding() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_rubber_banding((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetRulesHint() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_rules_hint((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetSearchColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_get_search_column((*C.GtkTreeView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetSearchEntry() (_return_ *Entry) {
	_cgo_of__return__ := C._gtk_tree_view_get_search_entry((*C.GtkTreeView)(_self_))
	_return_ = (*Entry)(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetSearchEqualFunc() (_return_ C.GtkTreeViewSearchEqualFunc) {
	_return_ = C._gtk_tree_view_get_search_equal_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchPositionFunc() (_return_ C.GtkTreeViewSearchPositionFunc) {
	_return_ = C._gtk_tree_view_get_search_position_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSelection() (_return_ *TreeSelection) {
	_cgo_of__return__ := C._gtk_tree_view_get_selection((*C.GtkTreeView)(_self_))
	_return_ = (*TreeSelection)(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetShowExpanders() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_get_show_expanders((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetTooltipColumn() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_get_tooltip_column((*C.GtkTreeView)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) GetVisibleRange() (_return_ bool, start_path unsafe.Pointer, end_path unsafe.Pointer) {
	_cgo_of__return__ := C._gtk_tree_view_get_visible_range((*C.GtkTreeView)(_self_), unsafe.Pointer(start_path), unsafe.Pointer(end_path))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	var _allocated_visible_rect_ C.GdkRectangle
	C._gtk_tree_view_get_visible_rect((*C.GtkTreeView)(_self_), (*C.GdkRectangle)(&_allocated_visible_rect_))
	visible_rect = (*C.GdkRectangle)(&_allocated_visible_rect_)
	return
}

func (_self_ *TreeView) InsertColumn(column *TreeViewColumn, position int) (_return_ int) {
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of__return__ := C._gtk_tree_view_insert_column((*C.GtkTreeView)(_self_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (C.gint)(_cgo_of_position_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) InsertColumnWithDataFunc(position int, title string, cell *CellRenderer, func_ C.GtkTreeCellDataFunc, data C.gpointer, dnotify C.GDestroyNotify) (_return_ int) {
	_cgo_of_position_ := (C.gint)(position)
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	_cgo_of__return__ := C._gtk_tree_view_insert_column_with_data_func((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_position_), (*C.gchar)(_cgo_of_title_), (*C.GtkCellRenderer)(_cgo_of_cell_), (C.GtkTreeCellDataFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(dnotify))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) IsBlankAtPos(x int, y int) (_return_ bool, path unsafe.Pointer, column unsafe.Pointer, cell_x int, cell_y int) {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	var _cgo_of_cell_x_ C.gint
	var _cgo_of_cell_y_ C.gint
	_cgo_of__return__ := C._gtk_tree_view_is_blank_at_pos((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_), unsafe.Pointer(path), unsafe.Pointer(column), (*C.gint)(&_cgo_of_cell_x_), (*C.gint)(&_cgo_of_cell_y_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	cell_x = int(_cgo_of_cell_x_)
	cell_y = int(_cgo_of_cell_y_)
	return
}

func (_self_ *TreeView) IsRubberBandingActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_is_rubber_banding_active((*C.GtkTreeView)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) MapExpandedRows(func_ C.GtkTreeViewMappingFunc, data C.gpointer) () {
	C._gtk_tree_view_map_expanded_rows((*C.GtkTreeView)(_self_), (C.GtkTreeViewMappingFunc)(func_), (C.gpointer)(data))
	return
}

func (_self_ *TreeView) MoveColumnAfter(column *TreeViewColumn, base_column *TreeViewColumn) () {
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of_base_column_ := (*C.GtkTreeViewColumn)(base_column)
	C._gtk_tree_view_move_column_after((*C.GtkTreeView)(_self_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (*C.GtkTreeViewColumn)(_cgo_of_base_column_))
	return
}

func (_self_ *TreeView) RemoveColumn(column *TreeViewColumn) (_return_ int) {
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of__return__ := C._gtk_tree_view_remove_column((*C.GtkTreeView)(_self_), (*C.GtkTreeViewColumn)(_cgo_of_column_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeView) RowActivated(path *TreePath, column *TreeViewColumn) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	C._gtk_tree_view_row_activated((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_column_))
	return
}

func (_self_ *TreeView) RowExpanded(path *TreePath) (_return_ bool) {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C._gtk_tree_view_row_expanded((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeView) ScrollToCell(path *TreePath, column *TreeViewColumn, use_align bool, row_align float64, col_align float64) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of_use_align_ := C.glibtrue()
	if !use_align {
		_cgo_of_use_align_ = C.glibfalse()
	}
	_cgo_of_row_align_ := (C.gfloat)(row_align)
	_cgo_of_col_align_ := (C.gfloat)(col_align)
	C._gtk_tree_view_scroll_to_cell((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (C.gboolean)(_cgo_of_use_align_), (C.gfloat)(_cgo_of_row_align_), (C.gfloat)(_cgo_of_col_align_))
	return
}

func (_self_ *TreeView) ScrollToPoint(tree_x int, tree_y int) () {
	_cgo_of_tree_x_ := (C.gint)(tree_x)
	_cgo_of_tree_y_ := (C.gint)(tree_y)
	C._gtk_tree_view_scroll_to_point((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_tree_x_), (C.gint)(_cgo_of_tree_y_))
	return
}

func (_self_ *TreeView) SetColumnDragFunction(func_ C.GtkTreeViewColumnDropFunc, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_tree_view_set_column_drag_function((*C.GtkTreeView)(_self_), (C.GtkTreeViewColumnDropFunc)(func_), (C.gpointer)(user_data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeView) SetCursor(path *TreePath, focus_column *TreeViewColumn, start_editing bool) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_focus_column_ := (*C.GtkTreeViewColumn)(focus_column)
	_cgo_of_start_editing_ := C.glibtrue()
	if !start_editing {
		_cgo_of_start_editing_ = C.glibfalse()
	}
	C._gtk_tree_view_set_cursor((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_focus_column_), (C.gboolean)(_cgo_of_start_editing_))
	return
}

func (_self_ *TreeView) SetCursorOnCell(path *TreePath, focus_column *TreeViewColumn, focus_cell *CellRenderer, start_editing bool) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_focus_column_ := (*C.GtkTreeViewColumn)(focus_column)
	_cgo_of_focus_cell_ := (*C.GtkCellRenderer)(focus_cell)
	_cgo_of_start_editing_ := C.glibtrue()
	if !start_editing {
		_cgo_of_start_editing_ = C.glibfalse()
	}
	C._gtk_tree_view_set_cursor_on_cell((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_focus_column_), (*C.GtkCellRenderer)(_cgo_of_focus_cell_), (C.gboolean)(_cgo_of_start_editing_))
	return
}

func (_self_ *TreeView) SetDragDestRow(path *TreePath, pos C.GtkTreeViewDropPosition) () {
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_tree_view_set_drag_dest_row((*C.GtkTreeView)(_self_), (*C.GtkTreePath)(_cgo_of_path_), (C.GtkTreeViewDropPosition)(pos))
	return
}

func (_self_ *TreeView) SetEnableSearch(enable_search bool) () {
	_cgo_of_enable_search_ := C.glibtrue()
	if !enable_search {
		_cgo_of_enable_search_ = C.glibfalse()
	}
	C._gtk_tree_view_set_enable_search((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_enable_search_))
	return
}

func (_self_ *TreeView) SetEnableTreeLines(enabled bool) () {
	_cgo_of_enabled_ := C.glibtrue()
	if !enabled {
		_cgo_of_enabled_ = C.glibfalse()
	}
	C._gtk_tree_view_set_enable_tree_lines((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_enabled_))
	return
}

func (_self_ *TreeView) SetExpanderColumn(column *TreeViewColumn) () {
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	C._gtk_tree_view_set_expander_column((*C.GtkTreeView)(_self_), (*C.GtkTreeViewColumn)(_cgo_of_column_))
	return
}

func (_self_ *TreeView) SetFixedHeightMode(enable bool) () {
	_cgo_of_enable_ := C.glibtrue()
	if !enable {
		_cgo_of_enable_ = C.glibfalse()
	}
	C._gtk_tree_view_set_fixed_height_mode((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_enable_))
	return
}

func (_self_ *TreeView) SetGridLines(grid_lines C.GtkTreeViewGridLines) () {
	C._gtk_tree_view_set_grid_lines((*C.GtkTreeView)(_self_), (C.GtkTreeViewGridLines)(grid_lines))
	return
}

func (_self_ *TreeView) SetHeadersClickable(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_tree_view_set_headers_clickable((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TreeView) SetHeadersVisible(headers_visible bool) () {
	_cgo_of_headers_visible_ := C.glibtrue()
	if !headers_visible {
		_cgo_of_headers_visible_ = C.glibfalse()
	}
	C._gtk_tree_view_set_headers_visible((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_headers_visible_))
	return
}

func (_self_ *TreeView) SetHoverExpand(expand bool) () {
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tree_view_set_hover_expand((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *TreeView) SetHoverSelection(hover bool) () {
	_cgo_of_hover_ := C.glibtrue()
	if !hover {
		_cgo_of_hover_ = C.glibfalse()
	}
	C._gtk_tree_view_set_hover_selection((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_hover_))
	return
}

func (_self_ *TreeView) SetLevelIndentation(indentation int) () {
	_cgo_of_indentation_ := (C.gint)(indentation)
	C._gtk_tree_view_set_level_indentation((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_indentation_))
	return
}

func (_self_ *TreeView) SetModel(model *C.GtkTreeModel) () {
	C._gtk_tree_view_set_model((*C.GtkTreeView)(_self_), (*C.GtkTreeModel)(model))
	return
}

func (_self_ *TreeView) SetReorderable(reorderable bool) () {
	_cgo_of_reorderable_ := C.glibtrue()
	if !reorderable {
		_cgo_of_reorderable_ = C.glibfalse()
	}
	C._gtk_tree_view_set_reorderable((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_reorderable_))
	return
}

func (_self_ *TreeView) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_tree_view_set_row_separator_func((*C.GtkTreeView)(_self_), (C.GtkTreeViewRowSeparatorFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeView) SetRubberBanding(enable bool) () {
	_cgo_of_enable_ := C.glibtrue()
	if !enable {
		_cgo_of_enable_ = C.glibfalse()
	}
	C._gtk_tree_view_set_rubber_banding((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_enable_))
	return
}

func (_self_ *TreeView) SetRulesHint(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_tree_view_set_rules_hint((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TreeView) SetSearchColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_tree_view_set_search_column((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *TreeView) SetSearchEntry(entry *Entry) () {
	_cgo_of_entry_ := (*C.GtkEntry)(entry)
	C._gtk_tree_view_set_search_entry((*C.GtkTreeView)(_self_), (*C.GtkEntry)(_cgo_of_entry_))
	return
}

func (_self_ *TreeView) SetSearchEqualFunc(search_equal_func C.GtkTreeViewSearchEqualFunc, search_user_data C.gpointer, search_destroy C.GDestroyNotify) () {
	C._gtk_tree_view_set_search_equal_func((*C.GtkTreeView)(_self_), (C.GtkTreeViewSearchEqualFunc)(search_equal_func), (C.gpointer)(search_user_data), (C.GDestroyNotify)(search_destroy))
	return
}

func (_self_ *TreeView) SetSearchPositionFunc(func_ C.GtkTreeViewSearchPositionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_tree_view_set_search_position_func((*C.GtkTreeView)(_self_), (C.GtkTreeViewSearchPositionFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeView) SetShowExpanders(enabled bool) () {
	_cgo_of_enabled_ := C.glibtrue()
	if !enabled {
		_cgo_of_enabled_ = C.glibfalse()
	}
	C._gtk_tree_view_set_show_expanders((*C.GtkTreeView)(_self_), (C.gboolean)(_cgo_of_enabled_))
	return
}

func (_self_ *TreeView) SetTooltipCell(tooltip *Tooltip, path *TreePath, column *TreeViewColumn, cell *CellRenderer) () {
	_cgo_of_tooltip_ := (*C.GtkTooltip)(tooltip)
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of_column_ := (*C.GtkTreeViewColumn)(column)
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	C._gtk_tree_view_set_tooltip_cell((*C.GtkTreeView)(_self_), (*C.GtkTooltip)(_cgo_of_tooltip_), (*C.GtkTreePath)(_cgo_of_path_), (*C.GtkTreeViewColumn)(_cgo_of_column_), (*C.GtkCellRenderer)(_cgo_of_cell_))
	return
}

func (_self_ *TreeView) SetTooltipColumn(column int) () {
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_tree_view_set_tooltip_column((*C.GtkTreeView)(_self_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *TreeView) SetTooltipRow(tooltip *Tooltip, path *TreePath) () {
	_cgo_of_tooltip_ := (*C.GtkTooltip)(tooltip)
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	C._gtk_tree_view_set_tooltip_row((*C.GtkTreeView)(_self_), (*C.GtkTooltip)(_cgo_of_tooltip_), (*C.GtkTreePath)(_cgo_of_path_))
	return
}

func (_self_ *TreeView) UnsetRowsDragDest() () {
	C._gtk_tree_view_unset_rows_drag_dest((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) UnsetRowsDragSource() () {
	C._gtk_tree_view_unset_rows_drag_source((*C.GtkTreeView)(_self_))
	return
}

func TreeViewColumnNew() (_return_ *TreeViewColumn) {
	_cgo_of__return__ := C.gtk_tree_view_column_new()
	_return_ = (*TreeViewColumn)(_cgo_of__return__)
	return
}

func TreeViewColumnNewWithArea(area *CellArea) (_return_ *TreeViewColumn) {
	_cgo_of_area_ := (*C.GtkCellArea)(area)
	_cgo_of__return__ := C.gtk_tree_view_column_new_with_area((*C.GtkCellArea)(_cgo_of_area_))
	_return_ = (*TreeViewColumn)(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) AddAttribute(cell_renderer *CellRenderer, attribute string, column int) () {
	_cgo_of_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer)
	_cgo_of_attribute_ := (*C.gchar)(unsafe.Pointer(C.CString(attribute)))
	_cgo_of_column_ := (C.gint)(column)
	C._gtk_tree_view_column_add_attribute((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_renderer_), (*C.gchar)(_cgo_of_attribute_), (C.gint)(_cgo_of_column_))
	return
}

func (_self_ *TreeViewColumn) CellGetPosition(cell_renderer *CellRenderer) (_return_ bool, x_offset int, width int) {
	_cgo_of_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer)
	var _cgo_of_x_offset_ C.gint
	var _cgo_of_width_ C.gint
	_cgo_of__return__ := C._gtk_tree_view_column_cell_get_position((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_renderer_), (*C.gint)(&_cgo_of_x_offset_), (*C.gint)(&_cgo_of_width_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	x_offset = int(_cgo_of_x_offset_)
	width = int(_cgo_of_width_)
	return
}

func (_self_ *TreeViewColumn) CellGetSize(cell_area *C.GdkRectangle) (x_offset int, y_offset int, width int, height int) {
	var _cgo_of_x_offset_ C.gint
	var _cgo_of_y_offset_ C.gint
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_tree_view_column_cell_get_size((*C.GtkTreeViewColumn)(_self_), (*C.GdkRectangle)(cell_area), (*C.gint)(&_cgo_of_x_offset_), (*C.gint)(&_cgo_of_y_offset_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	x_offset = int(_cgo_of_x_offset_)
	y_offset = int(_cgo_of_y_offset_)
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *TreeViewColumn) CellIsVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_cell_is_visible((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) CellSetCellData(tree_model *C.GtkTreeModel, iter *TreeIter, is_expander bool, is_expanded bool) () {
	_cgo_of_iter_ := (*C.GtkTreeIter)(iter)
	_cgo_of_is_expander_ := C.glibtrue()
	if !is_expander {
		_cgo_of_is_expander_ = C.glibfalse()
	}
	_cgo_of_is_expanded_ := C.glibtrue()
	if !is_expanded {
		_cgo_of_is_expanded_ = C.glibfalse()
	}
	C._gtk_tree_view_column_cell_set_cell_data((*C.GtkTreeViewColumn)(_self_), (*C.GtkTreeModel)(tree_model), (*C.GtkTreeIter)(_cgo_of_iter_), (C.gboolean)(_cgo_of_is_expander_), (C.gboolean)(_cgo_of_is_expanded_))
	return
}

func (_self_ *TreeViewColumn) Clear() () {
	C._gtk_tree_view_column_clear((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) ClearAttributes(cell_renderer *CellRenderer) () {
	_cgo_of_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer)
	C._gtk_tree_view_column_clear_attributes((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_renderer_))
	return
}

func (_self_ *TreeViewColumn) Clicked() () {
	C._gtk_tree_view_column_clicked((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) FocusCell(cell *CellRenderer) () {
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	C._gtk_tree_view_column_focus_cell((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_))
	return
}

func (_self_ *TreeViewColumn) GetAlignment() (_return_ float64) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_alignment((*C.GtkTreeViewColumn)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetButton() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_button((*C.GtkTreeViewColumn)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetClickable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_clickable((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetExpand() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_expand((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetFixedWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_fixed_width((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetMaxWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_max_width((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetMinWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_min_width((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetReorderable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_reorderable((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetResizable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_resizable((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetSizing() (_return_ C.GtkTreeViewColumnSizing) {
	_return_ = C._gtk_tree_view_column_get_sizing((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSortColumnId() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_sort_column_id((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetSortIndicator() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_sort_indicator((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetSortOrder() (_return_ C.GtkSortType) {
	_return_ = C._gtk_tree_view_column_get_sort_order((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSpacing() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_spacing((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_title((*C.GtkTreeViewColumn)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *TreeViewColumn) GetTreeView() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_tree_view((*C.GtkTreeViewColumn)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_visible((*C.GtkTreeViewColumn)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *TreeViewColumn) GetWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_widget((*C.GtkTreeViewColumn)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetWidth() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_width((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) GetXOffset() (_return_ int) {
	_cgo_of__return__ := C._gtk_tree_view_column_get_x_offset((*C.GtkTreeViewColumn)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *TreeViewColumn) PackEnd(cell *CellRenderer, expand bool) () {
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tree_view_column_pack_end((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *TreeViewColumn) PackStart(cell *CellRenderer, expand bool) () {
	_cgo_of_cell_ := (*C.GtkCellRenderer)(cell)
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tree_view_column_pack_start((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *TreeViewColumn) QueueResize() () {
	C._gtk_tree_view_column_queue_resize((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) SetAlignment(xalign float64) () {
	_cgo_of_xalign_ := (C.gfloat)(xalign)
	C._gtk_tree_view_column_set_alignment((*C.GtkTreeViewColumn)(_self_), (C.gfloat)(_cgo_of_xalign_))
	return
}

func (_self_ *TreeViewColumn) SetCellDataFunc(cell_renderer *CellRenderer, func_ C.GtkTreeCellDataFunc, func_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_of_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer)
	C._gtk_tree_view_column_set_cell_data_func((*C.GtkTreeViewColumn)(_self_), (*C.GtkCellRenderer)(_cgo_of_cell_renderer_), (C.GtkTreeCellDataFunc)(func_), (C.gpointer)(func_data), (C.GDestroyNotify)(destroy))
	return
}

func (_self_ *TreeViewColumn) SetClickable(clickable bool) () {
	_cgo_of_clickable_ := C.glibtrue()
	if !clickable {
		_cgo_of_clickable_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_clickable((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_clickable_))
	return
}

func (_self_ *TreeViewColumn) SetExpand(expand bool) () {
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_expand((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *TreeViewColumn) SetFixedWidth(fixed_width int) () {
	_cgo_of_fixed_width_ := (C.gint)(fixed_width)
	C._gtk_tree_view_column_set_fixed_width((*C.GtkTreeViewColumn)(_self_), (C.gint)(_cgo_of_fixed_width_))
	return
}

func (_self_ *TreeViewColumn) SetMaxWidth(max_width int) () {
	_cgo_of_max_width_ := (C.gint)(max_width)
	C._gtk_tree_view_column_set_max_width((*C.GtkTreeViewColumn)(_self_), (C.gint)(_cgo_of_max_width_))
	return
}

func (_self_ *TreeViewColumn) SetMinWidth(min_width int) () {
	_cgo_of_min_width_ := (C.gint)(min_width)
	C._gtk_tree_view_column_set_min_width((*C.GtkTreeViewColumn)(_self_), (C.gint)(_cgo_of_min_width_))
	return
}

func (_self_ *TreeViewColumn) SetReorderable(reorderable bool) () {
	_cgo_of_reorderable_ := C.glibtrue()
	if !reorderable {
		_cgo_of_reorderable_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_reorderable((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_reorderable_))
	return
}

func (_self_ *TreeViewColumn) SetResizable(resizable bool) () {
	_cgo_of_resizable_ := C.glibtrue()
	if !resizable {
		_cgo_of_resizable_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_resizable((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_resizable_))
	return
}

func (_self_ *TreeViewColumn) SetSizing(type_ C.GtkTreeViewColumnSizing) () {
	C._gtk_tree_view_column_set_sizing((*C.GtkTreeViewColumn)(_self_), (C.GtkTreeViewColumnSizing)(type_))
	return
}

func (_self_ *TreeViewColumn) SetSortColumnId(sort_column_id int) () {
	_cgo_of_sort_column_id_ := (C.gint)(sort_column_id)
	C._gtk_tree_view_column_set_sort_column_id((*C.GtkTreeViewColumn)(_self_), (C.gint)(_cgo_of_sort_column_id_))
	return
}

func (_self_ *TreeViewColumn) SetSortIndicator(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_sort_indicator((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *TreeViewColumn) SetSortOrder(order C.GtkSortType) () {
	C._gtk_tree_view_column_set_sort_order((*C.GtkTreeViewColumn)(_self_), (C.GtkSortType)(order))
	return
}

func (_self_ *TreeViewColumn) SetSpacing(spacing int) () {
	_cgo_of_spacing_ := (C.gint)(spacing)
	C._gtk_tree_view_column_set_spacing((*C.GtkTreeViewColumn)(_self_), (C.gint)(_cgo_of_spacing_))
	return
}

func (_self_ *TreeViewColumn) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_tree_view_column_set_title((*C.GtkTreeViewColumn)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *TreeViewColumn) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_tree_view_column_set_visible((*C.GtkTreeViewColumn)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *TreeViewColumn) SetWidget(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C._gtk_tree_view_column_set_widget((*C.GtkTreeViewColumn)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	return
}

func UIManagerNew() (_return_ *UIManager) {
	_cgo_of__return__ := C.gtk_ui_manager_new()
	_return_ = (*UIManager)(_cgo_of__return__)
	return
}

func (_self_ *UIManager) AddUi(merge_id uint, path string, name string, action string, type_ C.GtkUIManagerItemType, top bool) () {
	_cgo_of_merge_id_ := (C.guint)(merge_id)
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_action_ := (*C.gchar)(unsafe.Pointer(C.CString(action)))
	_cgo_of_top_ := C.glibtrue()
	if !top {
		_cgo_of_top_ = C.glibfalse()
	}
	C._gtk_ui_manager_add_ui((*C.GtkUIManager)(_self_), (C.guint)(_cgo_of_merge_id_), (*C.gchar)(_cgo_of_path_), (*C.gchar)(_cgo_of_name_), (*C.gchar)(_cgo_of_action_), (C.GtkUIManagerItemType)(type_), (C.gboolean)(_cgo_of_top_))
	return
}

func (_self_ *UIManager) AddUiFromFile(filename string) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C._gtk_ui_manager_add_ui_from_file((*C.GtkUIManager)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *UIManager) AddUiFromResource(resource_path string) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_resource_path_ := (*C.gchar)(unsafe.Pointer(C.CString(resource_path)))
	_cgo_of__return__ := C._gtk_ui_manager_add_ui_from_resource((*C.GtkUIManager)(_self_), (*C.gchar)(_cgo_of_resource_path_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *UIManager) AddUiFromString(buffer string, length int64) (_return_ uint, _error_ unsafe.Pointer) {
	_cgo_of_buffer_ := (*C.gchar)(unsafe.Pointer(C.CString(buffer)))
	_cgo_of_length_ := (C.gssize)(length)
	_cgo_of__return__ := C._gtk_ui_manager_add_ui_from_string((*C.GtkUIManager)(_self_), (*C.gchar)(_cgo_of_buffer_), (C.gssize)(_cgo_of_length_), unsafe.Pointer(_error_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *UIManager) EnsureUpdate() () {
	C._gtk_ui_manager_ensure_update((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetAccelGroup() (_return_ *AccelGroup) {
	_cgo_of__return__ := C._gtk_ui_manager_get_accel_group((*C.GtkUIManager)(_self_))
	_return_ = (*AccelGroup)(_cgo_of__return__)
	return
}

func (_self_ *UIManager) GetAction(path string) (_return_ *Action) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of__return__ := C._gtk_ui_manager_get_action((*C.GtkUIManager)(_self_), (*C.gchar)(_cgo_of_path_))
	_return_ = (*Action)(_cgo_of__return__)
	return
}

func (_self_ *UIManager) GetActionGroups() (_return_ *C.GList) {
	_return_ = C._gtk_ui_manager_get_action_groups((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetToplevels(types C.GtkUIManagerItemType) (_return_ *C.GSList) {
	_return_ = C._gtk_ui_manager_get_toplevels((*C.GtkUIManager)(_self_), (C.GtkUIManagerItemType)(types))
	return
}

func (_self_ *UIManager) GetUi() (_return_ string) {
	_cgo_of__return__ := C._gtk_ui_manager_get_ui((*C.GtkUIManager)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *UIManager) GetWidget(path string) (_return_ *Widget) {
	_cgo_of_path_ := (*C.gchar)(unsafe.Pointer(C.CString(path)))
	_cgo_of__return__ := C._gtk_ui_manager_get_widget((*C.GtkUIManager)(_self_), (*C.gchar)(_cgo_of_path_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *UIManager) InsertActionGroup(action_group *ActionGroup, pos int) () {
	_cgo_of_action_group_ := (*C.GtkActionGroup)(action_group)
	_cgo_of_pos_ := (C.gint)(pos)
	C._gtk_ui_manager_insert_action_group((*C.GtkUIManager)(_self_), (*C.GtkActionGroup)(_cgo_of_action_group_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *UIManager) NewMergeId() (_return_ uint) {
	_cgo_of__return__ := C._gtk_ui_manager_new_merge_id((*C.GtkUIManager)(_self_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *UIManager) RemoveActionGroup(action_group *ActionGroup) () {
	_cgo_of_action_group_ := (*C.GtkActionGroup)(action_group)
	C._gtk_ui_manager_remove_action_group((*C.GtkUIManager)(_self_), (*C.GtkActionGroup)(_cgo_of_action_group_))
	return
}

func (_self_ *UIManager) RemoveUi(merge_id uint) () {
	_cgo_of_merge_id_ := (C.guint)(merge_id)
	C._gtk_ui_manager_remove_ui((*C.GtkUIManager)(_self_), (C.guint)(_cgo_of_merge_id_))
	return
}

func ViewportNew(hadjustment *Adjustment, vadjustment *Adjustment) (_return_ *Widget) {
	_cgo_of_hadjustment_ := (*C.GtkAdjustment)(hadjustment)
	_cgo_of_vadjustment_ := (*C.GtkAdjustment)(vadjustment)
	_cgo_of__return__ := C.gtk_viewport_new((*C.GtkAdjustment)(_cgo_of_hadjustment_), (*C.GtkAdjustment)(_cgo_of_vadjustment_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Viewport) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_viewport_get_bin_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C._gtk_viewport_get_shadow_type((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetViewWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_viewport_get_view_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) SetShadowType(type_ C.GtkShadowType) () {
	C._gtk_viewport_set_shadow_type((*C.GtkViewport)(_self_), (C.GtkShadowType)(type_))
	return
}

func VolumeButtonNew() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_volume_button_new()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func WidgetGetDefaultDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_default_direction()
	return
}

func WidgetPopCompositeChild() () {
	C.gtk_widget_pop_composite_child()
	return
}

func WidgetPushCompositeChild() () {
	C.gtk_widget_push_composite_child()
	return
}

func WidgetSetDefaultDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_default_direction((C.GtkTextDirection)(dir))
	return
}

func (_self_ *Widget) Activate() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_activate((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) AddAccelerator(accel_signal string, accel_group *AccelGroup, accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags) () {
	_cgo_of_accel_signal_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_signal)))
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	C._gtk_widget_add_accelerator((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_accel_signal_), (*C.GtkAccelGroup)(_cgo_of_accel_group_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods), (C.GtkAccelFlags)(accel_flags))
	return
}

func (_self_ *Widget) AddDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C._gtk_widget_add_device_events((*C.GtkWidget)(_self_), (*C.GdkDevice)(device), (C.GdkEventMask)(events))
	return
}

func (_self_ *Widget) AddEvents(events int) () {
	_cgo_of_events_ := (C.gint)(events)
	C._gtk_widget_add_events((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_events_))
	return
}

func (_self_ *Widget) AddMnemonicLabel(label *Widget) () {
	_cgo_of_label_ := (*C.GtkWidget)(label)
	C._gtk_widget_add_mnemonic_label((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_label_))
	return
}

func (_self_ *Widget) CanActivateAccel(signal_id uint) (_return_ bool) {
	_cgo_of_signal_id_ := (C.guint)(signal_id)
	_cgo_of__return__ := C._gtk_widget_can_activate_accel((*C.GtkWidget)(_self_), (C.guint)(_cgo_of_signal_id_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) ChildFocus(direction C.GtkDirectionType) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_child_focus((*C.GtkWidget)(_self_), (C.GtkDirectionType)(direction))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) ChildNotify(child_property string) () {
	_cgo_of_child_property_ := (*C.gchar)(unsafe.Pointer(C.CString(child_property)))
	C._gtk_widget_child_notify((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_child_property_))
	return
}

func (_self_ *Widget) ComputeExpand(orientation C.GtkOrientation) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_compute_expand((*C.GtkWidget)(_self_), (C.GtkOrientation)(orientation))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C._gtk_widget_create_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) CreatePangoLayout(text string) (_return_ *C.PangoLayout) {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	_return_ = C._gtk_widget_create_pango_layout((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *Widget) Destroy() () {
	C._gtk_widget_destroy((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DeviceIsShadowed(device *C.GdkDevice) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_device_is_shadowed((*C.GtkWidget)(_self_), (*C.GdkDevice)(device))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) DragBegin(targets *TargetList, actions C.GdkDragAction, button int, event *C.GdkEvent) (_return_ *C.GdkDragContext) {
	_cgo_of_targets_ := (*C.GtkTargetList)(targets)
	_cgo_of_button_ := (C.gint)(button)
	_return_ = C._gtk_drag_begin((*C.GtkWidget)(_self_), (*C.GtkTargetList)(_cgo_of_targets_), (C.GdkDragAction)(actions), (C.gint)(_cgo_of_button_), (*C.GdkEvent)(event))
	return
}

func (_self_ *Widget) DragCheckThreshold(start_x int, start_y int, current_x int, current_y int) (_return_ bool) {
	_cgo_of_start_x_ := (C.gint)(start_x)
	_cgo_of_start_y_ := (C.gint)(start_y)
	_cgo_of_current_x_ := (C.gint)(current_x)
	_cgo_of_current_y_ := (C.gint)(current_y)
	_cgo_of__return__ := C._gtk_drag_check_threshold((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_start_x_), (C.gint)(_cgo_of_start_y_), (C.gint)(_cgo_of_current_x_), (C.gint)(_cgo_of_current_y_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) DragDestAddImageTargets() () {
	C._gtk_drag_dest_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddTextTargets() () {
	C._gtk_drag_dest_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddUriTargets() () {
	C._gtk_drag_dest_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestFindTarget(context *C.GdkDragContext, target_list *TargetList) (_return_ C.GdkAtom) {
	_cgo_of_target_list_ := (*C.GtkTargetList)(target_list)
	_return_ = C._gtk_drag_dest_find_target((*C.GtkWidget)(_self_), (*C.GdkDragContext)(context), (*C.GtkTargetList)(_cgo_of_target_list_))
	return
}

func (_self_ *Widget) DragDestGetTargetList() (_return_ *TargetList) {
	_cgo_of__return__ := C._gtk_drag_dest_get_target_list((*C.GtkWidget)(_self_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *Widget) DragDestGetTrackMotion() (_return_ bool) {
	_cgo_of__return__ := C._gtk_drag_dest_get_track_motion((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) DragDestSet(flags C.GtkDestDefaults, targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_drag_dest_set((*C.GtkWidget)(_self_), (C.GtkDestDefaults)(flags), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *Widget) DragDestSetProxy(proxy_window *C.GdkWindow, protocol C.GdkDragProtocol, use_coordinates bool) () {
	_cgo_of_use_coordinates_ := C.glibtrue()
	if !use_coordinates {
		_cgo_of_use_coordinates_ = C.glibfalse()
	}
	C._gtk_drag_dest_set_proxy((*C.GtkWidget)(_self_), (*C.GdkWindow)(proxy_window), (C.GdkDragProtocol)(protocol), (C.gboolean)(_cgo_of_use_coordinates_))
	return
}

func (_self_ *Widget) DragDestSetTargetList(target_list *TargetList) () {
	_cgo_of_target_list_ := (*C.GtkTargetList)(target_list)
	C._gtk_drag_dest_set_target_list((*C.GtkWidget)(_self_), (*C.GtkTargetList)(_cgo_of_target_list_))
	return
}

func (_self_ *Widget) DragDestSetTrackMotion(track_motion bool) () {
	_cgo_of_track_motion_ := C.glibtrue()
	if !track_motion {
		_cgo_of_track_motion_ = C.glibfalse()
	}
	C._gtk_drag_dest_set_track_motion((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_track_motion_))
	return
}

func (_self_ *Widget) DragDestUnset() () {
	C._gtk_drag_dest_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragGetData(context *C.GdkDragContext, target C.GdkAtom, time_ uint32) () {
	_cgo_of_time__ := (C.guint32)(time_)
	C._gtk_drag_get_data((*C.GtkWidget)(_self_), (*C.GdkDragContext)(context), (C.GdkAtom)(target), (C.guint32)(_cgo_of_time__))
	return
}

func (_self_ *Widget) DragHighlight() () {
	C._gtk_drag_highlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddImageTargets() () {
	C._gtk_drag_source_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddTextTargets() () {
	C._gtk_drag_source_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddUriTargets() () {
	C._gtk_drag_source_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceGetTargetList() (_return_ *TargetList) {
	_cgo_of__return__ := C._gtk_drag_source_get_target_list((*C.GtkWidget)(_self_))
	_return_ = (*TargetList)(_cgo_of__return__)
	return
}

func (_self_ *Widget) DragSourceSet(start_button_mask C.GdkModifierType, targets *TargetEntry, n_targets int, actions C.GdkDragAction) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C._gtk_drag_source_set((*C.GtkWidget)(_self_), (C.GdkModifierType)(start_button_mask), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_), (C.GdkDragAction)(actions))
	return
}

func (_self_ *Widget) DragSourceSetIconGicon(icon *C.GIcon) () {
	C._gtk_drag_source_set_icon_gicon((*C.GtkWidget)(_self_), (*C.GIcon)(icon))
	return
}

func (_self_ *Widget) DragSourceSetIconName(icon_name string) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	C._gtk_drag_source_set_icon_name((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_icon_name_))
	return
}

func (_self_ *Widget) DragSourceSetIconPixbuf(pixbuf *C.GdkPixbuf) () {
	C._gtk_drag_source_set_icon_pixbuf((*C.GtkWidget)(_self_), (*C.GdkPixbuf)(pixbuf))
	return
}

func (_self_ *Widget) DragSourceSetIconStock(stock_id string) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	C._gtk_drag_source_set_icon_stock((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_stock_id_))
	return
}

func (_self_ *Widget) DragSourceSetTargetList(target_list *TargetList) () {
	_cgo_of_target_list_ := (*C.GtkTargetList)(target_list)
	C._gtk_drag_source_set_target_list((*C.GtkWidget)(_self_), (*C.GtkTargetList)(_cgo_of_target_list_))
	return
}

func (_self_ *Widget) DragSourceUnset() () {
	C._gtk_drag_source_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragUnhighlight() () {
	C._gtk_drag_unhighlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Draw(cr *C.cairo_t) () {
	C._gtk_widget_draw((*C.GtkWidget)(_self_), (*C.cairo_t)(cr))
	return
}

func (_self_ *Widget) ErrorBell() () {
	C._gtk_widget_error_bell((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Event(event *C.GdkEvent) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_event((*C.GtkWidget)(_self_), (*C.GdkEvent)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) FreezeChildNotify() () {
	C._gtk_widget_freeze_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAccessible() (_return_ *C.AtkObject) {
	_return_ = C._gtk_widget_get_accessible((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedHeight() (_return_ C.int) {
	_return_ = C._gtk_widget_get_allocated_height((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedWidth() (_return_ C.int) {
	_return_ = C._gtk_widget_get_allocated_width((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocation() (allocation *C.GtkAllocation) {
	var _allocated_allocation_ C.GtkAllocation
	C._gtk_widget_get_allocation((*C.GtkWidget)(_self_), (*C.GtkAllocation)(&_allocated_allocation_))
	allocation = (*C.GtkAllocation)(&_allocated_allocation_)
	return
}

func (_self_ *Widget) GetAncestor(widget_type C.GType) (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_widget_get_ancestor((*C.GtkWidget)(_self_), (C.GType)(widget_type))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetAppPaintable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_app_paintable((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetCanDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_can_default((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetCanFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_can_focus((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetChildVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_child_visible((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetClipboard(selection C.GdkAtom) (_return_ *Clipboard) {
	_cgo_of__return__ := C._gtk_widget_get_clipboard((*C.GtkWidget)(_self_), (C.GdkAtom)(selection))
	_return_ = (*Clipboard)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetCompositeName() (_return_ string) {
	_cgo_of__return__ := C._gtk_widget_get_composite_name((*C.GtkWidget)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Widget) GetDeviceEnabled(device *C.GdkDevice) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_device_enabled((*C.GtkWidget)(_self_), (*C.GdkDevice)(device))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetDeviceEvents(device *C.GdkDevice) (_return_ C.GdkEventMask) {
	_return_ = C._gtk_widget_get_device_events((*C.GtkWidget)(_self_), (*C.GdkDevice)(device))
	return
}

func (_self_ *Widget) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_widget_get_direction((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_widget_get_display((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDoubleBuffered() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_double_buffered((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetEvents() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_get_events((*C.GtkWidget)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetHalign() (_return_ C.GtkAlign) {
	_return_ = C._gtk_widget_get_halign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHasTooltip() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_has_tooltip((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHasWindow() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_has_window((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHexpand() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_hexpand((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetHexpandSet() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_hexpand_set((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetMapped() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_mapped((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetMarginBottom() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_get_margin_bottom((*C.GtkWidget)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetMarginLeft() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_get_margin_left((*C.GtkWidget)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetMarginRight() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_get_margin_right((*C.GtkWidget)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetMarginTop() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_get_margin_top((*C.GtkWidget)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetModifierMask(intent C.GdkModifierIntent) (_return_ C.GdkModifierType) {
	_return_ = C._gtk_widget_get_modifier_mask((*C.GtkWidget)(_self_), (C.GdkModifierIntent)(intent))
	return
}

func (_self_ *Widget) GetName() (_return_ string) {
	_cgo_of__return__ := C._gtk_widget_get_name((*C.GtkWidget)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Widget) GetNoShowAll() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_no_show_all((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetPangoContext() (_return_ *C.PangoContext) {
	_return_ = C._gtk_widget_get_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetParent() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_widget_get_parent((*C.GtkWidget)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetParentWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_widget_get_parent_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetPath() (_return_ *WidgetPath) {
	_cgo_of__return__ := C._gtk_widget_get_path((*C.GtkWidget)(_self_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetPreferredHeight() (minimum_height int, natural_height int) {
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_widget_get_preferred_height((*C.GtkWidget)(_self_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *Widget) GetPreferredHeightForWidth(width int) (minimum_height int, natural_height int) {
	_cgo_of_width_ := (C.gint)(width)
	var _cgo_of_minimum_height_ C.gint
	var _cgo_of_natural_height_ C.gint
	C._gtk_widget_get_preferred_height_for_width((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_width_), (*C.gint)(&_cgo_of_minimum_height_), (*C.gint)(&_cgo_of_natural_height_))
	minimum_height = int(_cgo_of_minimum_height_)
	natural_height = int(_cgo_of_natural_height_)
	return
}

func (_self_ *Widget) GetPreferredSize() (minimum_size *Requisition, natural_size *Requisition) {
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C._gtk_widget_get_preferred_size((*C.GtkWidget)(_self_), (*C.GtkRequisition)(&_allocated_minimum_size_), (*C.GtkRequisition)(&_allocated_natural_size_))
	minimum_size = (*Requisition)(&_allocated_minimum_size_)
	natural_size = (*Requisition)(&_allocated_natural_size_)
	return
}

func (_self_ *Widget) GetPreferredWidth() (minimum_width int, natural_width int) {
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_widget_get_preferred_width((*C.GtkWidget)(_self_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *Widget) GetPreferredWidthForHeight(height int) (minimum_width int, natural_width int) {
	_cgo_of_height_ := (C.gint)(height)
	var _cgo_of_minimum_width_ C.gint
	var _cgo_of_natural_width_ C.gint
	C._gtk_widget_get_preferred_width_for_height((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_height_), (*C.gint)(&_cgo_of_minimum_width_), (*C.gint)(&_cgo_of_natural_width_))
	minimum_width = int(_cgo_of_minimum_width_)
	natural_width = int(_cgo_of_natural_width_)
	return
}

func (_self_ *Widget) GetRealized() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_realized((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetReceivesDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_receives_default((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C._gtk_widget_get_request_mode((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetRootWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_widget_get_root_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_widget_get_screen((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_sensitive((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetSettings() (_return_ *Settings) {
	_cgo_of__return__ := C._gtk_widget_get_settings((*C.GtkWidget)(_self_))
	_return_ = (*Settings)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetSizeRequest() (width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_widget_get_size_request((*C.GtkWidget)(_self_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *Widget) GetStateFlags() (_return_ C.GtkStateFlags) {
	_return_ = C._gtk_widget_get_state_flags((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetStyleContext() (_return_ *StyleContext) {
	_cgo_of__return__ := C._gtk_widget_get_style_context((*C.GtkWidget)(_self_))
	_return_ = (*StyleContext)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetSupportMultidevice() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_support_multidevice((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetTooltipMarkup() (_return_ string) {
	_cgo_of__return__ := C._gtk_widget_get_tooltip_markup((*C.GtkWidget)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Widget) GetTooltipText() (_return_ string) {
	_cgo_of__return__ := C._gtk_widget_get_tooltip_text((*C.GtkWidget)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Widget) GetTooltipWindow() (_return_ *Window) {
	_cgo_of__return__ := C._gtk_widget_get_tooltip_window((*C.GtkWidget)(_self_))
	_return_ = (*Window)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetToplevel() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_widget_get_toplevel((*C.GtkWidget)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Widget) GetValign() (_return_ C.GtkAlign) {
	_return_ = C._gtk_widget_get_valign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVexpand() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_vexpand((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVexpandSet() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_vexpand_set((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_get_visible((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) GetVisual() (_return_ *C.GdkVisual) {
	_return_ = C._gtk_widget_get_visual((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetWindow() (_return_ *C.GdkWindow) {
	_return_ = C._gtk_widget_get_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabAdd() () {
	C._gtk_grab_add((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabDefault() () {
	C._gtk_widget_grab_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabFocus() () {
	C._gtk_widget_grab_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabRemove() () {
	C._gtk_grab_remove((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_has_default((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) HasFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_has_focus((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) HasGrab() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_has_grab((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) HasScreen() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_has_screen((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) HasVisibleFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_has_visible_focus((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) Hide() () {
	C._gtk_widget_hide((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HideOnDelete() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_hide_on_delete((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) InDestruction() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_in_destruction((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) InputShapeCombineRegion(region *C.cairo_region_t) () {
	C._gtk_widget_input_shape_combine_region((*C.GtkWidget)(_self_), (*C.cairo_region_t)(region))
	return
}

func (_self_ *Widget) InsertActionGroup(name string, group *C.GActionGroup) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_insert_action_group((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GActionGroup)(group))
	return
}

func (_self_ *Widget) Intersect(area *C.GdkRectangle, intersection *C.GdkRectangle) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_intersect((*C.GtkWidget)(_self_), (*C.GdkRectangle)(area), (*C.GdkRectangle)(intersection))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsAncestor(ancestor *Widget) (_return_ bool) {
	_cgo_of_ancestor_ := (*C.GtkWidget)(ancestor)
	_cgo_of__return__ := C._gtk_widget_is_ancestor((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_ancestor_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsComposited() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_is_composited((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsDrawable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_is_drawable((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_is_focus((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsSensitive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_is_sensitive((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) IsToplevel() (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_is_toplevel((*C.GtkWidget)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) KeynavFailed(direction C.GtkDirectionType) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_keynav_failed((*C.GtkWidget)(_self_), (C.GtkDirectionType)(direction))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) ListAccelClosures() (_return_ *C.GList) {
	_return_ = C._gtk_widget_list_accel_closures((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ListMnemonicLabels() (_return_ *C.GList) {
	_return_ = C._gtk_widget_list_mnemonic_labels((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Map() () {
	C._gtk_widget_map((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) MnemonicActivate(group_cycling bool) (_return_ bool) {
	_cgo_of_group_cycling_ := C.glibtrue()
	if !group_cycling {
		_cgo_of_group_cycling_ = C.glibfalse()
	}
	_cgo_of__return__ := C._gtk_widget_mnemonic_activate((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_group_cycling_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) OverrideBackgroundColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_background_color((*C.GtkWidget)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(color))
	return
}

func (_self_ *Widget) OverrideColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_color((*C.GtkWidget)(_self_), (C.GtkStateFlags)(state), (*C.GdkRGBA)(color))
	return
}

func (_self_ *Widget) OverrideCursor(cursor *C.GdkRGBA, secondary_cursor *C.GdkRGBA) () {
	C._gtk_widget_override_cursor((*C.GtkWidget)(_self_), (*C.GdkRGBA)(cursor), (*C.GdkRGBA)(secondary_cursor))
	return
}

func (_self_ *Widget) OverrideFont(font_desc *C.PangoFontDescription) () {
	C._gtk_widget_override_font((*C.GtkWidget)(_self_), (*C.PangoFontDescription)(font_desc))
	return
}

func (_self_ *Widget) OverrideSymbolicColor(name string, color *C.GdkRGBA) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_override_symbolic_color((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_name_), (*C.GdkRGBA)(color))
	return
}

func (_self_ *Widget) QueueComputeExpand() () {
	C._gtk_widget_queue_compute_expand((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDraw() () {
	C._gtk_widget_queue_draw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDrawArea(x int, y int, width int, height int) () {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_widget_queue_draw_area((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Widget) QueueDrawRegion(region *C.cairo_region_t) () {
	C._gtk_widget_queue_draw_region((*C.GtkWidget)(_self_), (*C.cairo_region_t)(region))
	return
}

func (_self_ *Widget) QueueResize() () {
	C._gtk_widget_queue_resize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueResizeNoRedraw() () {
	C._gtk_widget_queue_resize_no_redraw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Realize() () {
	C._gtk_widget_realize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) RegionIntersect(region *C.cairo_region_t) (_return_ *C.cairo_region_t) {
	_return_ = C._gtk_widget_region_intersect((*C.GtkWidget)(_self_), (*C.cairo_region_t)(region))
	return
}

func (_self_ *Widget) RemoveAccelerator(accel_group *AccelGroup, accel_key uint, accel_mods C.GdkModifierType) (_return_ bool) {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	_cgo_of__return__ := C._gtk_widget_remove_accelerator((*C.GtkWidget)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) RemoveMnemonicLabel(label *Widget) () {
	_cgo_of_label_ := (*C.GtkWidget)(label)
	C._gtk_widget_remove_mnemonic_label((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_label_))
	return
}

func (_self_ *Widget) RenderIconPixbuf(stock_id string, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_return_ = C._gtk_widget_render_icon_pixbuf((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_stock_id_), (C.GtkIconSize)(size))
	return
}

func (_self_ *Widget) Reparent(new_parent *Widget) () {
	_cgo_of_new_parent_ := (*C.GtkWidget)(new_parent)
	C._gtk_widget_reparent((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_new_parent_))
	return
}

func (_self_ *Widget) ResetStyle() () {
	C._gtk_widget_reset_style((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SendExpose(event *C.GdkEvent) (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_send_expose((*C.GtkWidget)(_self_), (*C.GdkEvent)(event))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *Widget) SendFocusChange(event *C.GdkEvent) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_send_focus_change((*C.GtkWidget)(_self_), (*C.GdkEvent)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Widget) SetAccelPath(accel_path string, accel_group *AccelGroup) () {
	_cgo_of_accel_path_ := (*C.gchar)(unsafe.Pointer(C.CString(accel_path)))
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_widget_set_accel_path((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_accel_path_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *Widget) SetAllocation(allocation *C.GtkAllocation) () {
	C._gtk_widget_set_allocation((*C.GtkWidget)(_self_), (*C.GtkAllocation)(allocation))
	return
}

func (_self_ *Widget) SetAppPaintable(app_paintable bool) () {
	_cgo_of_app_paintable_ := C.glibtrue()
	if !app_paintable {
		_cgo_of_app_paintable_ = C.glibfalse()
	}
	C._gtk_widget_set_app_paintable((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_app_paintable_))
	return
}

func (_self_ *Widget) SetCanDefault(can_default bool) () {
	_cgo_of_can_default_ := C.glibtrue()
	if !can_default {
		_cgo_of_can_default_ = C.glibfalse()
	}
	C._gtk_widget_set_can_default((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_can_default_))
	return
}

func (_self_ *Widget) SetCanFocus(can_focus bool) () {
	_cgo_of_can_focus_ := C.glibtrue()
	if !can_focus {
		_cgo_of_can_focus_ = C.glibfalse()
	}
	C._gtk_widget_set_can_focus((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_can_focus_))
	return
}

func (_self_ *Widget) SetChildVisible(is_visible bool) () {
	_cgo_of_is_visible_ := C.glibtrue()
	if !is_visible {
		_cgo_of_is_visible_ = C.glibfalse()
	}
	C._gtk_widget_set_child_visible((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_is_visible_))
	return
}

func (_self_ *Widget) SetCompositeName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_set_composite_name((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *Widget) SetDeviceEnabled(device *C.GdkDevice, enabled bool) () {
	_cgo_of_enabled_ := C.glibtrue()
	if !enabled {
		_cgo_of_enabled_ = C.glibfalse()
	}
	C._gtk_widget_set_device_enabled((*C.GtkWidget)(_self_), (*C.GdkDevice)(device), (C.gboolean)(_cgo_of_enabled_))
	return
}

func (_self_ *Widget) SetDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C._gtk_widget_set_device_events((*C.GtkWidget)(_self_), (*C.GdkDevice)(device), (C.GdkEventMask)(events))
	return
}

func (_self_ *Widget) SetDirection(dir C.GtkTextDirection) () {
	C._gtk_widget_set_direction((*C.GtkWidget)(_self_), (C.GtkTextDirection)(dir))
	return
}

func (_self_ *Widget) SetDoubleBuffered(double_buffered bool) () {
	_cgo_of_double_buffered_ := C.glibtrue()
	if !double_buffered {
		_cgo_of_double_buffered_ = C.glibfalse()
	}
	C._gtk_widget_set_double_buffered((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_double_buffered_))
	return
}

func (_self_ *Widget) SetEvents(events int) () {
	_cgo_of_events_ := (C.gint)(events)
	C._gtk_widget_set_events((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_events_))
	return
}

func (_self_ *Widget) SetHalign(align C.GtkAlign) () {
	C._gtk_widget_set_halign((*C.GtkWidget)(_self_), (C.GtkAlign)(align))
	return
}

func (_self_ *Widget) SetHasTooltip(has_tooltip bool) () {
	_cgo_of_has_tooltip_ := C.glibtrue()
	if !has_tooltip {
		_cgo_of_has_tooltip_ = C.glibfalse()
	}
	C._gtk_widget_set_has_tooltip((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_has_tooltip_))
	return
}

func (_self_ *Widget) SetHasWindow(has_window bool) () {
	_cgo_of_has_window_ := C.glibtrue()
	if !has_window {
		_cgo_of_has_window_ = C.glibfalse()
	}
	C._gtk_widget_set_has_window((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_has_window_))
	return
}

func (_self_ *Widget) SetHexpand(expand bool) () {
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_widget_set_hexpand((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *Widget) SetHexpandSet(set bool) () {
	_cgo_of_set_ := C.glibtrue()
	if !set {
		_cgo_of_set_ = C.glibfalse()
	}
	C._gtk_widget_set_hexpand_set((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_set_))
	return
}

func (_self_ *Widget) SetMapped(mapped bool) () {
	_cgo_of_mapped_ := C.glibtrue()
	if !mapped {
		_cgo_of_mapped_ = C.glibfalse()
	}
	C._gtk_widget_set_mapped((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_mapped_))
	return
}

func (_self_ *Widget) SetMarginBottom(margin int) () {
	_cgo_of_margin_ := (C.gint)(margin)
	C._gtk_widget_set_margin_bottom((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_margin_))
	return
}

func (_self_ *Widget) SetMarginLeft(margin int) () {
	_cgo_of_margin_ := (C.gint)(margin)
	C._gtk_widget_set_margin_left((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_margin_))
	return
}

func (_self_ *Widget) SetMarginRight(margin int) () {
	_cgo_of_margin_ := (C.gint)(margin)
	C._gtk_widget_set_margin_right((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_margin_))
	return
}

func (_self_ *Widget) SetMarginTop(margin int) () {
	_cgo_of_margin_ := (C.gint)(margin)
	C._gtk_widget_set_margin_top((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_margin_))
	return
}

func (_self_ *Widget) SetName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_set_name((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *Widget) SetNoShowAll(no_show_all bool) () {
	_cgo_of_no_show_all_ := C.glibtrue()
	if !no_show_all {
		_cgo_of_no_show_all_ = C.glibfalse()
	}
	C._gtk_widget_set_no_show_all((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_no_show_all_))
	return
}

func (_self_ *Widget) SetParent(parent *Widget) () {
	_cgo_of_parent_ := (*C.GtkWidget)(parent)
	C._gtk_widget_set_parent((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_parent_))
	return
}

func (_self_ *Widget) SetParentWindow(parent_window *C.GdkWindow) () {
	C._gtk_widget_set_parent_window((*C.GtkWidget)(_self_), (*C.GdkWindow)(parent_window))
	return
}

func (_self_ *Widget) SetRealized(realized bool) () {
	_cgo_of_realized_ := C.glibtrue()
	if !realized {
		_cgo_of_realized_ = C.glibfalse()
	}
	C._gtk_widget_set_realized((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_realized_))
	return
}

func (_self_ *Widget) SetReceivesDefault(receives_default bool) () {
	_cgo_of_receives_default_ := C.glibtrue()
	if !receives_default {
		_cgo_of_receives_default_ = C.glibfalse()
	}
	C._gtk_widget_set_receives_default((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_receives_default_))
	return
}

func (_self_ *Widget) SetRedrawOnAllocate(redraw_on_allocate bool) () {
	_cgo_of_redraw_on_allocate_ := C.glibtrue()
	if !redraw_on_allocate {
		_cgo_of_redraw_on_allocate_ = C.glibfalse()
	}
	C._gtk_widget_set_redraw_on_allocate((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_redraw_on_allocate_))
	return
}

func (_self_ *Widget) SetSensitive(sensitive bool) () {
	_cgo_of_sensitive_ := C.glibtrue()
	if !sensitive {
		_cgo_of_sensitive_ = C.glibfalse()
	}
	C._gtk_widget_set_sensitive((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_sensitive_))
	return
}

func (_self_ *Widget) SetSizeRequest(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_widget_set_size_request((*C.GtkWidget)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Widget) SetStateFlags(flags C.GtkStateFlags, clear bool) () {
	_cgo_of_clear_ := C.glibtrue()
	if !clear {
		_cgo_of_clear_ = C.glibfalse()
	}
	C._gtk_widget_set_state_flags((*C.GtkWidget)(_self_), (C.GtkStateFlags)(flags), (C.gboolean)(_cgo_of_clear_))
	return
}

func (_self_ *Widget) SetSupportMultidevice(support_multidevice bool) () {
	_cgo_of_support_multidevice_ := C.glibtrue()
	if !support_multidevice {
		_cgo_of_support_multidevice_ = C.glibfalse()
	}
	C._gtk_widget_set_support_multidevice((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_support_multidevice_))
	return
}

func (_self_ *Widget) SetTooltipMarkup(markup string) () {
	_cgo_of_markup_ := (*C.gchar)(unsafe.Pointer(C.CString(markup)))
	C._gtk_widget_set_tooltip_markup((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_markup_))
	return
}

func (_self_ *Widget) SetTooltipText(text string) () {
	_cgo_of_text_ := (*C.gchar)(unsafe.Pointer(C.CString(text)))
	C._gtk_widget_set_tooltip_text((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_text_))
	return
}

func (_self_ *Widget) SetTooltipWindow(custom_window *Window) () {
	_cgo_of_custom_window_ := (*C.GtkWindow)(custom_window)
	C._gtk_widget_set_tooltip_window((*C.GtkWidget)(_self_), (*C.GtkWindow)(_cgo_of_custom_window_))
	return
}

func (_self_ *Widget) SetValign(align C.GtkAlign) () {
	C._gtk_widget_set_valign((*C.GtkWidget)(_self_), (C.GtkAlign)(align))
	return
}

func (_self_ *Widget) SetVexpand(expand bool) () {
	_cgo_of_expand_ := C.glibtrue()
	if !expand {
		_cgo_of_expand_ = C.glibfalse()
	}
	C._gtk_widget_set_vexpand((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_expand_))
	return
}

func (_self_ *Widget) SetVexpandSet(set bool) () {
	_cgo_of_set_ := C.glibtrue()
	if !set {
		_cgo_of_set_ = C.glibfalse()
	}
	C._gtk_widget_set_vexpand_set((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_set_))
	return
}

func (_self_ *Widget) SetVisible(visible bool) () {
	_cgo_of_visible_ := C.glibtrue()
	if !visible {
		_cgo_of_visible_ = C.glibfalse()
	}
	C._gtk_widget_set_visible((*C.GtkWidget)(_self_), (C.gboolean)(_cgo_of_visible_))
	return
}

func (_self_ *Widget) SetVisual(visual *C.GdkVisual) () {
	C._gtk_widget_set_visual((*C.GtkWidget)(_self_), (*C.GdkVisual)(visual))
	return
}

func (_self_ *Widget) SetWindow(window *C.GdkWindow) () {
	C._gtk_widget_set_window((*C.GtkWidget)(_self_), (*C.GdkWindow)(window))
	return
}

func (_self_ *Widget) ShapeCombineRegion(region *C.cairo_region_t) () {
	C._gtk_widget_shape_combine_region((*C.GtkWidget)(_self_), (*C.cairo_region_t)(region))
	return
}

func (_self_ *Widget) Show() () {
	C._gtk_widget_show((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowAll() () {
	C._gtk_widget_show_all((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowNow() () {
	C._gtk_widget_show_now((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SizeAllocate(allocation *C.GtkAllocation) () {
	C._gtk_widget_size_allocate((*C.GtkWidget)(_self_), (*C.GtkAllocation)(allocation))
	return
}

func (_self_ *Widget) StyleGetProperty(property_name string, value *C.GValue) () {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	C._gtk_widget_style_get_property((*C.GtkWidget)(_self_), (*C.gchar)(_cgo_of_property_name_), (*C.GValue)(value))
	return
}

func (_self_ *Widget) ThawChildNotify() () {
	C._gtk_widget_thaw_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) TranslateCoordinates(dest_widget *Widget, src_x int, src_y int) (_return_ bool, dest_x int, dest_y int) {
	_cgo_of_dest_widget_ := (*C.GtkWidget)(dest_widget)
	_cgo_of_src_x_ := (C.gint)(src_x)
	_cgo_of_src_y_ := (C.gint)(src_y)
	var _cgo_of_dest_x_ C.gint
	var _cgo_of_dest_y_ C.gint
	_cgo_of__return__ := C._gtk_widget_translate_coordinates((*C.GtkWidget)(_self_), (*C.GtkWidget)(_cgo_of_dest_widget_), (C.gint)(_cgo_of_src_x_), (C.gint)(_cgo_of_src_y_), (*C.gint)(&_cgo_of_dest_x_), (*C.gint)(&_cgo_of_dest_y_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	dest_x = int(_cgo_of_dest_x_)
	dest_y = int(_cgo_of_dest_y_)
	return
}

func (_self_ *Widget) TriggerTooltipQuery() () {
	C._gtk_widget_trigger_tooltip_query((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unmap() () {
	C._gtk_widget_unmap((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unparent() () {
	C._gtk_widget_unparent((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unrealize() () {
	C._gtk_widget_unrealize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) UnsetStateFlags(flags C.GtkStateFlags) () {
	C._gtk_widget_unset_state_flags((*C.GtkWidget)(_self_), (C.GtkStateFlags)(flags))
	return
}

func (_self_ *WidgetClass) FindStyleProperty(property_name string) (_return_ *C.GParamSpec) {
	_cgo_of_property_name_ := (*C.gchar)(unsafe.Pointer(C.CString(property_name)))
	_return_ = C._gtk_widget_class_find_style_property((*C.GtkWidgetClass)(_self_), (*C.gchar)(_cgo_of_property_name_))
	return
}

func (_self_ *WidgetClass) InstallStyleProperty(pspec *C.GParamSpec) () {
	C._gtk_widget_class_install_style_property((*C.GtkWidgetClass)(_self_), (*C.GParamSpec)(pspec))
	return
}

func (_self_ *WidgetClass) InstallStylePropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C._gtk_widget_class_install_style_property_parser((*C.GtkWidgetClass)(_self_), (*C.GParamSpec)(pspec), (C.GtkRcPropertyParser)(parser))
	return
}

func (_self_ *WidgetClass) ListStyleProperties() (_return_ unsafe.Pointer, n_properties uint) {
	var _cgo_of_n_properties_ C.guint
	_return_ = unsafe.Pointer(C._gtk_widget_class_list_style_properties((*C.GtkWidgetClass)(_self_), (*C.guint)(&_cgo_of_n_properties_)))
	n_properties = uint(_cgo_of_n_properties_)
	return
}

func (_self_ *WidgetClass) SetAccessibleRole(role C.AtkRole) () {
	C._gtk_widget_class_set_accessible_role((*C.GtkWidgetClass)(_self_), (C.AtkRole)(role))
	return
}

func (_self_ *WidgetClass) SetAccessibleType(type_ C.GType) () {
	C._gtk_widget_class_set_accessible_type((*C.GtkWidgetClass)(_self_), (C.GType)(type_))
	return
}

func WidgetPathNew() (_return_ *WidgetPath) {
	_cgo_of__return__ := C.gtk_widget_path_new()
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) AppendForWidget(widget *Widget) (_return_ int) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of__return__ := C._gtk_widget_path_append_for_widget((*C.GtkWidgetPath)(_self_), (*C.GtkWidget)(_cgo_of_widget_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) AppendType(type_ C.GType) (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_path_append_type((*C.GtkWidgetPath)(_self_), (C.GType)(type_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) AppendWithSiblings(siblings *WidgetPath, sibling_index uint) (_return_ int) {
	_cgo_of_siblings_ := (*C.GtkWidgetPath)(siblings)
	_cgo_of_sibling_index_ := (C.guint)(sibling_index)
	_cgo_of__return__ := C._gtk_widget_path_append_with_siblings((*C.GtkWidgetPath)(_self_), (*C.GtkWidgetPath)(_cgo_of_siblings_), (C.guint)(_cgo_of_sibling_index_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) Copy() (_return_ *WidgetPath) {
	_cgo_of__return__ := C._gtk_widget_path_copy((*C.GtkWidgetPath)(_self_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) Free() () {
	C._gtk_widget_path_free((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) GetObjectType() (_return_ C.GType) {
	_return_ = C._gtk_widget_path_get_object_type((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) HasParent(type_ C.GType) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_path_has_parent((*C.GtkWidgetPath)(_self_), (C.GType)(type_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IsType(type_ C.GType) (_return_ bool) {
	_cgo_of__return__ := C._gtk_widget_path_is_type((*C.GtkWidgetPath)(_self_), (C.GType)(type_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterAddClass(pos int, name string) () {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_path_iter_add_class((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *WidgetPath) IterAddRegion(pos int, name string, flags C.GtkRegionFlags) () {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_path_iter_add_region((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_), (C.GtkRegionFlags)(flags))
	return
}

func (_self_ *WidgetPath) IterClearClasses(pos int) () {
	_cgo_of_pos_ := (C.gint)(pos)
	C._gtk_widget_path_iter_clear_classes((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *WidgetPath) IterClearRegions(pos int) () {
	_cgo_of_pos_ := (C.gint)(pos)
	C._gtk_widget_path_iter_clear_regions((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *WidgetPath) IterGetName(pos int) (_return_ string) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_get_name((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *WidgetPath) IterGetObjectType(pos int) (_return_ C.GType) {
	_cgo_of_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_get_object_type((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *WidgetPath) IterGetSiblingIndex(pos int) (_return_ uint) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_get_sibling_index((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	_return_ = uint(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) IterGetSiblings(pos int) (_return_ *WidgetPath) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_get_siblings((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) IterHasClass(pos int, name string) (_return_ bool) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_widget_path_iter_has_class((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasName(pos int, name string) (_return_ bool) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_widget_path_iter_has_name((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQclass(pos int, qname C.GQuark) (_return_ bool) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_has_qclass((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (C.GQuark)(qname))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQname(pos int, qname C.GQuark) (_return_ bool) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_has_qname((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (C.GQuark)(qname))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasQregion(pos int, qname C.GQuark) (_return_ bool, flags *C.GtkRegionFlags) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of__return__ := C._gtk_widget_path_iter_has_qregion((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (C.GQuark)(qname), (*C.GtkRegionFlags)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterHasRegion(pos int, name string) (_return_ bool, flags *C.GtkRegionFlags) {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of__return__ := C._gtk_widget_path_iter_has_region((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_), (*C.GtkRegionFlags)(flags))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *WidgetPath) IterListClasses(pos int) (_return_ *C.GSList) {
	_cgo_of_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_classes((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *WidgetPath) IterListRegions(pos int) (_return_ *C.GSList) {
	_cgo_of_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_regions((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_))
	return
}

func (_self_ *WidgetPath) IterRemoveClass(pos int, name string) () {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_path_iter_remove_class((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *WidgetPath) IterRemoveRegion(pos int, name string) () {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_path_iter_remove_region((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *WidgetPath) IterSetName(pos int, name string) () {
	_cgo_of_pos_ := (C.gint)(pos)
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_widget_path_iter_set_name((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *WidgetPath) IterSetObjectType(pos int, type_ C.GType) () {
	_cgo_of_pos_ := (C.gint)(pos)
	C._gtk_widget_path_iter_set_object_type((*C.GtkWidgetPath)(_self_), (C.gint)(_cgo_of_pos_), (C.GType)(type_))
	return
}

func (_self_ *WidgetPath) Length() (_return_ int) {
	_cgo_of__return__ := C._gtk_widget_path_length((*C.GtkWidgetPath)(_self_))
	_return_ = int(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) PrependType(type_ C.GType) () {
	C._gtk_widget_path_prepend_type((*C.GtkWidgetPath)(_self_), (C.GType)(type_))
	return
}

func (_self_ *WidgetPath) Ref() (_return_ *WidgetPath) {
	_cgo_of__return__ := C._gtk_widget_path_ref((*C.GtkWidgetPath)(_self_))
	_return_ = (*WidgetPath)(_cgo_of__return__)
	return
}

func (_self_ *WidgetPath) ToString() (_return_ *C.char) {
	_return_ = C._gtk_widget_path_to_string((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) Unref() () {
	C._gtk_widget_path_unref((*C.GtkWidgetPath)(_self_))
	return
}

func WindowNew(type_ C.GtkWindowType) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_window_new((C.GtkWindowType)(type_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func WindowGetDefaultIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_default_icon_list()
	return
}

func WindowGetDefaultIconName() (_return_ string) {
	_cgo_of__return__ := C.gtk_window_get_default_icon_name()
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func WindowListToplevels() (_return_ *C.GList) {
	_return_ = C.gtk_window_list_toplevels()
	return
}

func WindowSetAutoStartupNotification(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C.gtk_window_set_auto_startup_notification((C.gboolean)(_cgo_of_setting_))
	return
}

func WindowSetDefaultIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_default_icon((*C.GdkPixbuf)(icon))
	return
}

func WindowSetDefaultIconFromFile(filename string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C._gtk_window_set_default_icon_from_file((*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func WindowSetDefaultIconList(list *C.GList) () {
	C.gtk_window_set_default_icon_list((*C.GList)(list))
	return
}

func WindowSetDefaultIconName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_window_set_default_icon_name((*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *Window) ActivateDefault() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_activate_default((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) ActivateFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_activate_focus((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) ActivateKey(event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_activate_key((*C.GtkWindow)(_self_), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) AddAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_window_add_accel_group((*C.GtkWindow)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *Window) AddMnemonic(keyval uint, target *Widget) () {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of_target_ := (*C.GtkWidget)(target)
	C._gtk_window_add_mnemonic((*C.GtkWindow)(_self_), (C.guint)(_cgo_of_keyval_), (*C.GtkWidget)(_cgo_of_target_))
	return
}

func (_self_ *Window) BeginMoveDrag(button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_of_button_ := (C.gint)(button)
	_cgo_of_root_x_ := (C.gint)(root_x)
	_cgo_of_root_y_ := (C.gint)(root_y)
	_cgo_of_timestamp_ := (C.guint32)(timestamp)
	C._gtk_window_begin_move_drag((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_button_), (C.gint)(_cgo_of_root_x_), (C.gint)(_cgo_of_root_y_), (C.guint32)(_cgo_of_timestamp_))
	return
}

func (_self_ *Window) BeginResizeDrag(edge C.GdkWindowEdge, button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_of_button_ := (C.gint)(button)
	_cgo_of_root_x_ := (C.gint)(root_x)
	_cgo_of_root_y_ := (C.gint)(root_y)
	_cgo_of_timestamp_ := (C.guint32)(timestamp)
	C._gtk_window_begin_resize_drag((*C.GtkWindow)(_self_), (C.GdkWindowEdge)(edge), (C.gint)(_cgo_of_button_), (C.gint)(_cgo_of_root_x_), (C.gint)(_cgo_of_root_y_), (C.guint32)(_cgo_of_timestamp_))
	return
}

func (_self_ *Window) Deiconify() () {
	C._gtk_window_deiconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Fullscreen() () {
	C._gtk_window_fullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetAcceptFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_accept_focus((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetApplication() (_return_ *Application) {
	_cgo_of__return__ := C._gtk_window_get_application((*C.GtkWindow)(_self_))
	_return_ = (*Application)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetAttachedTo() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_window_get_attached_to((*C.GtkWindow)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetDecorated() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_decorated((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetDefaultSize() (width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_window_get_default_size((*C.GtkWindow)(_self_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *Window) GetDefaultWidget() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_window_get_default_widget((*C.GtkWindow)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetDeletable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_deletable((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetDestroyWithParent() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_destroy_with_parent((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetFocus() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_window_get_focus((*C.GtkWindow)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetFocusOnMap() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_focus_on_map((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetFocusVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_focus_visible((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetGravity() (_return_ C.GdkGravity) {
	_return_ = C._gtk_window_get_gravity((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetGroup() (_return_ *WindowGroup) {
	_cgo_of__return__ := C._gtk_window_get_group((*C.GtkWindow)(_self_))
	_return_ = (*WindowGroup)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetHasResizeGrip() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_has_resize_grip((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetHideTitlebarWhenMaximized() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_hide_titlebar_when_maximized((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetIcon() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_window_get_icon((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconList() (_return_ *C.GList) {
	_return_ = C._gtk_window_get_icon_list((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconName() (_return_ string) {
	_cgo_of__return__ := C._gtk_window_get_icon_name((*C.GtkWindow)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Window) GetMnemonicModifier() (_return_ C.GdkModifierType) {
	_return_ = C._gtk_window_get_mnemonic_modifier((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetMnemonicsVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_mnemonics_visible((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetModal() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_modal((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetOpacity() (_return_ float64) {
	_cgo_of__return__ := C._gtk_window_get_opacity((*C.GtkWindow)(_self_))
	_return_ = float64(_cgo_of__return__)
	return
}

func (_self_ *Window) GetPosition() (root_x int, root_y int) {
	var _cgo_of_root_x_ C.gint
	var _cgo_of_root_y_ C.gint
	C._gtk_window_get_position((*C.GtkWindow)(_self_), (*C.gint)(&_cgo_of_root_x_), (*C.gint)(&_cgo_of_root_y_))
	root_x = int(_cgo_of_root_x_)
	root_y = int(_cgo_of_root_y_)
	return
}

func (_self_ *Window) GetResizable() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_resizable((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetResizeGripArea() (_return_ bool, rect *C.GdkRectangle) {
	var _allocated_rect_ C.GdkRectangle
	_cgo_of__return__ := C._gtk_window_get_resize_grip_area((*C.GtkWindow)(_self_), (*C.GdkRectangle)(&_allocated_rect_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	rect = (*C.GdkRectangle)(&_allocated_rect_)
	return
}

func (_self_ *Window) GetRole() (_return_ string) {
	_cgo_of__return__ := C._gtk_window_get_role((*C.GtkWindow)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Window) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C._gtk_window_get_screen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetSize() (width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	C._gtk_window_get_size((*C.GtkWindow)(_self_), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func (_self_ *Window) GetSkipPagerHint() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_skip_pager_hint((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetSkipTaskbarHint() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_skip_taskbar_hint((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetTitle() (_return_ string) {
	_cgo_of__return__ := C._gtk_window_get_title((*C.GtkWindow)(_self_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func (_self_ *Window) GetTransientFor() (_return_ *Window) {
	_cgo_of__return__ := C._gtk_window_get_transient_for((*C.GtkWindow)(_self_))
	_return_ = (*Window)(_cgo_of__return__)
	return
}

func (_self_ *Window) GetTypeHint() (_return_ C.GdkWindowTypeHint) {
	_return_ = C._gtk_window_get_type_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetUrgencyHint() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_get_urgency_hint((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) GetWindowType() (_return_ C.GtkWindowType) {
	_return_ = C._gtk_window_get_window_type((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) HasGroup() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_has_group((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) HasToplevelFocus() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_has_toplevel_focus((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) Iconify() () {
	C._gtk_window_iconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) IsActive() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_is_active((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) Maximize() () {
	C._gtk_window_maximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) MnemonicActivate(keyval uint, modifier C.GdkModifierType) (_return_ bool) {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of__return__ := C._gtk_window_mnemonic_activate((*C.GtkWindow)(_self_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifier))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) Move(x int, y int) () {
	_cgo_of_x_ := (C.gint)(x)
	_cgo_of_y_ := (C.gint)(y)
	C._gtk_window_move((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_x_), (C.gint)(_cgo_of_y_))
	return
}

func (_self_ *Window) ParseGeometry(geometry string) (_return_ bool) {
	_cgo_of_geometry_ := (*C.gchar)(unsafe.Pointer(C.CString(geometry)))
	_cgo_of__return__ := C._gtk_window_parse_geometry((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_geometry_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) Present() () {
	C._gtk_window_present((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) PresentWithTime(timestamp uint32) () {
	_cgo_of_timestamp_ := (C.guint32)(timestamp)
	C._gtk_window_present_with_time((*C.GtkWindow)(_self_), (C.guint32)(_cgo_of_timestamp_))
	return
}

func (_self_ *Window) PropagateKeyEvent(event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_propagate_key_event((*C.GtkWindow)(_self_), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) RemoveAccelGroup(accel_group *AccelGroup) () {
	_cgo_of_accel_group_ := (*C.GtkAccelGroup)(accel_group)
	C._gtk_window_remove_accel_group((*C.GtkWindow)(_self_), (*C.GtkAccelGroup)(_cgo_of_accel_group_))
	return
}

func (_self_ *Window) RemoveMnemonic(keyval uint, target *Widget) () {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of_target_ := (*C.GtkWidget)(target)
	C._gtk_window_remove_mnemonic((*C.GtkWindow)(_self_), (C.guint)(_cgo_of_keyval_), (*C.GtkWidget)(_cgo_of_target_))
	return
}

func (_self_ *Window) ReshowWithInitialSize() () {
	C._gtk_window_reshow_with_initial_size((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Resize(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_window_resize((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Window) ResizeGripIsVisible() (_return_ bool) {
	_cgo_of__return__ := C._gtk_window_resize_grip_is_visible((*C.GtkWindow)(_self_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) ResizeToGeometry(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_window_resize_to_geometry((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Window) SetAcceptFocus(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_accept_focus((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetApplication(application *Application) () {
	_cgo_of_application_ := (*C.GtkApplication)(application)
	C._gtk_window_set_application((*C.GtkWindow)(_self_), (*C.GtkApplication)(_cgo_of_application_))
	return
}

func (_self_ *Window) SetAttachedTo(attach_widget *Widget) () {
	_cgo_of_attach_widget_ := (*C.GtkWidget)(attach_widget)
	C._gtk_window_set_attached_to((*C.GtkWindow)(_self_), (*C.GtkWidget)(_cgo_of_attach_widget_))
	return
}

func (_self_ *Window) SetDecorated(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_decorated((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetDefault(default_widget *Widget) () {
	_cgo_of_default_widget_ := (*C.GtkWidget)(default_widget)
	C._gtk_window_set_default((*C.GtkWindow)(_self_), (*C.GtkWidget)(_cgo_of_default_widget_))
	return
}

func (_self_ *Window) SetDefaultGeometry(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_window_set_default_geometry((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Window) SetDefaultSize(width int, height int) () {
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	C._gtk_window_set_default_size((*C.GtkWindow)(_self_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func (_self_ *Window) SetDeletable(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_deletable((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetDestroyWithParent(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_destroy_with_parent((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetFocus(focus *Widget) () {
	_cgo_of_focus_ := (*C.GtkWidget)(focus)
	C._gtk_window_set_focus((*C.GtkWindow)(_self_), (*C.GtkWidget)(_cgo_of_focus_))
	return
}

func (_self_ *Window) SetFocusOnMap(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_focus_on_map((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetFocusVisible(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_focus_visible((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetGeometryHints(geometry_widget *Widget, geometry *C.GdkGeometry, geom_mask C.GdkWindowHints) () {
	_cgo_of_geometry_widget_ := (*C.GtkWidget)(geometry_widget)
	C._gtk_window_set_geometry_hints((*C.GtkWindow)(_self_), (*C.GtkWidget)(_cgo_of_geometry_widget_), (*C.GdkGeometry)(geometry), (C.GdkWindowHints)(geom_mask))
	return
}

func (_self_ *Window) SetGravity(gravity C.GdkGravity) () {
	C._gtk_window_set_gravity((*C.GtkWindow)(_self_), (C.GdkGravity)(gravity))
	return
}

func (_self_ *Window) SetHasResizeGrip(value bool) () {
	_cgo_of_value_ := C.glibtrue()
	if !value {
		_cgo_of_value_ = C.glibfalse()
	}
	C._gtk_window_set_has_resize_grip((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_value_))
	return
}

func (_self_ *Window) SetHasUserRefCount(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_has_user_ref_count((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetHideTitlebarWhenMaximized(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_hide_titlebar_when_maximized((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetIcon(icon *C.GdkPixbuf) () {
	C._gtk_window_set_icon((*C.GtkWindow)(_self_), (*C.GdkPixbuf)(icon))
	return
}

func (_self_ *Window) SetIconFromFile(filename string) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_filename_ := (*C.gchar)(unsafe.Pointer(C.CString(filename)))
	_cgo_of__return__ := C._gtk_window_set_icon_from_file((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_filename_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func (_self_ *Window) SetIconList(list *C.GList) () {
	C._gtk_window_set_icon_list((*C.GtkWindow)(_self_), (*C.GList)(list))
	return
}

func (_self_ *Window) SetIconName(name string) () {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	C._gtk_window_set_icon_name((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_name_))
	return
}

func (_self_ *Window) SetKeepAbove(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_keep_above((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetKeepBelow(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_keep_below((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetMnemonicModifier(modifier C.GdkModifierType) () {
	C._gtk_window_set_mnemonic_modifier((*C.GtkWindow)(_self_), (C.GdkModifierType)(modifier))
	return
}

func (_self_ *Window) SetMnemonicsVisible(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_mnemonics_visible((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetModal(modal bool) () {
	_cgo_of_modal_ := C.glibtrue()
	if !modal {
		_cgo_of_modal_ = C.glibfalse()
	}
	C._gtk_window_set_modal((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_modal_))
	return
}

func (_self_ *Window) SetOpacity(opacity float64) () {
	_cgo_of_opacity_ := (C.gdouble)(opacity)
	C._gtk_window_set_opacity((*C.GtkWindow)(_self_), (C.gdouble)(_cgo_of_opacity_))
	return
}

func (_self_ *Window) SetPosition(position C.GtkWindowPosition) () {
	C._gtk_window_set_position((*C.GtkWindow)(_self_), (C.GtkWindowPosition)(position))
	return
}

func (_self_ *Window) SetResizable(resizable bool) () {
	_cgo_of_resizable_ := C.glibtrue()
	if !resizable {
		_cgo_of_resizable_ = C.glibfalse()
	}
	C._gtk_window_set_resizable((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_resizable_))
	return
}

func (_self_ *Window) SetRole(role string) () {
	_cgo_of_role_ := (*C.gchar)(unsafe.Pointer(C.CString(role)))
	C._gtk_window_set_role((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_role_))
	return
}

func (_self_ *Window) SetScreen(screen *C.GdkScreen) () {
	C._gtk_window_set_screen((*C.GtkWindow)(_self_), (*C.GdkScreen)(screen))
	return
}

func (_self_ *Window) SetSkipPagerHint(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_skip_pager_hint((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetSkipTaskbarHint(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_skip_taskbar_hint((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetStartupId(startup_id string) () {
	_cgo_of_startup_id_ := (*C.gchar)(unsafe.Pointer(C.CString(startup_id)))
	C._gtk_window_set_startup_id((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_startup_id_))
	return
}

func (_self_ *Window) SetTitle(title string) () {
	_cgo_of_title_ := (*C.gchar)(unsafe.Pointer(C.CString(title)))
	C._gtk_window_set_title((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_title_))
	return
}

func (_self_ *Window) SetTransientFor(parent *Window) () {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	C._gtk_window_set_transient_for((*C.GtkWindow)(_self_), (*C.GtkWindow)(_cgo_of_parent_))
	return
}

func (_self_ *Window) SetTypeHint(hint C.GdkWindowTypeHint) () {
	C._gtk_window_set_type_hint((*C.GtkWindow)(_self_), (C.GdkWindowTypeHint)(hint))
	return
}

func (_self_ *Window) SetUrgencyHint(setting bool) () {
	_cgo_of_setting_ := C.glibtrue()
	if !setting {
		_cgo_of_setting_ = C.glibfalse()
	}
	C._gtk_window_set_urgency_hint((*C.GtkWindow)(_self_), (C.gboolean)(_cgo_of_setting_))
	return
}

func (_self_ *Window) SetWmclass(wmclass_name string, wmclass_class string) () {
	_cgo_of_wmclass_name_ := (*C.gchar)(unsafe.Pointer(C.CString(wmclass_name)))
	_cgo_of_wmclass_class_ := (*C.gchar)(unsafe.Pointer(C.CString(wmclass_class)))
	C._gtk_window_set_wmclass((*C.GtkWindow)(_self_), (*C.gchar)(_cgo_of_wmclass_name_), (*C.gchar)(_cgo_of_wmclass_class_))
	return
}

func (_self_ *Window) Stick() () {
	C._gtk_window_stick((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unfullscreen() () {
	C._gtk_window_unfullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unmaximize() () {
	C._gtk_window_unmaximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unstick() () {
	C._gtk_window_unstick((*C.GtkWindow)(_self_))
	return
}

func WindowGroupNew() (_return_ *WindowGroup) {
	_cgo_of__return__ := C.gtk_window_group_new()
	_return_ = (*WindowGroup)(_cgo_of__return__)
	return
}

func (_self_ *WindowGroup) AddWindow(window *Window) () {
	_cgo_of_window_ := (*C.GtkWindow)(window)
	C._gtk_window_group_add_window((*C.GtkWindowGroup)(_self_), (*C.GtkWindow)(_cgo_of_window_))
	return
}

func (_self_ *WindowGroup) GetCurrentDeviceGrab(device *C.GdkDevice) (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_window_group_get_current_device_grab((*C.GtkWindowGroup)(_self_), (*C.GdkDevice)(device))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *WindowGroup) GetCurrentGrab() (_return_ *Widget) {
	_cgo_of__return__ := C._gtk_window_group_get_current_grab((*C.GtkWindowGroup)(_self_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func (_self_ *WindowGroup) ListWindows() (_return_ *C.GList) {
	_return_ = C._gtk_window_group_list_windows((*C.GtkWindowGroup)(_self_))
	return
}

func (_self_ *WindowGroup) RemoveWindow(window *Window) () {
	_cgo_of_window_ := (*C.GtkWindow)(window)
	C._gtk_window_group_remove_window((*C.GtkWindowGroup)(_self_), (*C.GtkWindow)(_cgo_of_window_))
	return
}

func AccelGroupsActivate(object *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_return_ bool) {
	_cgo_of_accel_key_ := (C.guint)(accel_key)
	_cgo_of__return__ := C.gtk_accel_groups_activate((*C.GObject)(object), (C.guint)(_cgo_of_accel_key_), (C.GdkModifierType)(accel_mods))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func AccelGroupsFromObject(object *C.GObject) (_return_ *C.GSList) {
	_return_ = C.gtk_accel_groups_from_object((*C.GObject)(object))
	return
}

func AcceleratorGetDefaultModMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accelerator_get_default_mod_mask()
	return
}

func AcceleratorGetLabel(accelerator_key uint, accelerator_mods C.GdkModifierType) (_return_ string) {
	_cgo_of_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_of__return__ := C.gtk_accelerator_get_label((C.guint)(_cgo_of_accelerator_key_), (C.GdkModifierType)(accelerator_mods))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func AcceleratorGetLabelWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_return_ string) {
	_cgo_of_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_of_keycode_ := (C.guint)(keycode)
	_cgo_of__return__ := C.gtk_accelerator_get_label_with_keycode((*C.GdkDisplay)(display), (C.guint)(_cgo_of_accelerator_key_), (C.guint)(_cgo_of_keycode_), (C.GdkModifierType)(accelerator_mods))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func AcceleratorName(accelerator_key uint, accelerator_mods C.GdkModifierType) (_return_ string) {
	_cgo_of_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_of__return__ := C.gtk_accelerator_name((C.guint)(_cgo_of_accelerator_key_), (C.GdkModifierType)(accelerator_mods))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func AcceleratorNameWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_return_ string) {
	_cgo_of_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_of_keycode_ := (C.guint)(keycode)
	_cgo_of__return__ := C.gtk_accelerator_name_with_keycode((*C.GdkDisplay)(display), (C.guint)(_cgo_of_accelerator_key_), (C.guint)(_cgo_of_keycode_), (C.GdkModifierType)(accelerator_mods))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func AcceleratorParse(accelerator string) (accelerator_key uint, accelerator_mods *C.GdkModifierType) {
	_cgo_of_accelerator_ := (*C.gchar)(unsafe.Pointer(C.CString(accelerator)))
	var _cgo_of_accelerator_key_ C.guint
	C._gtk_accelerator_parse((*C.gchar)(_cgo_of_accelerator_), (*C.guint)(&_cgo_of_accelerator_key_), (*C.GdkModifierType)(accelerator_mods))
	accelerator_key = uint(_cgo_of_accelerator_key_)
	return
}

func AcceleratorParseWithKeycode(accelerator string) (accelerator_key uint, accelerator_codes unsafe.Pointer, accelerator_mods *C.GdkModifierType) {
	_cgo_of_accelerator_ := (*C.gchar)(unsafe.Pointer(C.CString(accelerator)))
	var _cgo_of_accelerator_key_ C.guint
	C._gtk_accelerator_parse_with_keycode((*C.gchar)(_cgo_of_accelerator_), (*C.guint)(&_cgo_of_accelerator_key_), unsafe.Pointer(&accelerator_codes), (*C.GdkModifierType)(accelerator_mods))
	accelerator_key = uint(_cgo_of_accelerator_key_)
	return
}

func AcceleratorSetDefaultModMask(default_mod_mask C.GdkModifierType) () {
	C.gtk_accelerator_set_default_mod_mask((C.GdkModifierType)(default_mod_mask))
	return
}

func AcceleratorValid(keyval uint, modifiers C.GdkModifierType) (_return_ bool) {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of__return__ := C.gtk_accelerator_valid((C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func AlternativeDialogButtonOrder(screen *C.GdkScreen) (_return_ bool) {
	_cgo_of__return__ := C.gtk_alternative_dialog_button_order((*C.GdkScreen)(screen))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func BindingsActivate(object *C.GObject, keyval uint, modifiers C.GdkModifierType) (_return_ bool) {
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of__return__ := C.gtk_bindings_activate((*C.GObject)(object), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func BindingsActivateEvent(object *C.GObject, event *C.GdkEventKey) (_return_ bool) {
	_cgo_of__return__ := C.gtk_bindings_activate_event((*C.GObject)(object), (*C.GdkEventKey)(event))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func BuilderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_builder_error_quark()
	return
}

func CairoShouldDrawWindow(cr *C.cairo_t, window *C.GdkWindow) (_return_ bool) {
	_cgo_of__return__ := C.gtk_cairo_should_draw_window((*C.cairo_t)(cr), (*C.GdkWindow)(window))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func CairoTransformToWindow(cr *C.cairo_t, widget *Widget, window *C.GdkWindow) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_cairo_transform_to_window((*C.cairo_t)(cr), (*C.GtkWidget)(_cgo_of_widget_), (*C.GdkWindow)(window))
	return
}

func CheckVersion(required_major uint, required_minor uint, required_micro uint) (_return_ string) {
	_cgo_of_required_major_ := (C.guint)(required_major)
	_cgo_of_required_minor_ := (C.guint)(required_minor)
	_cgo_of_required_micro_ := (C.guint)(required_micro)
	_cgo_of__return__ := C.gtk_check_version((C.guint)(_cgo_of_required_major_), (C.guint)(_cgo_of_required_minor_), (C.guint)(_cgo_of_required_micro_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func CssProviderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_css_provider_error_quark()
	return
}

func DeviceGrabAdd(widget *Widget, device *C.GdkDevice, block_others bool) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_block_others_ := C.glibtrue()
	if !block_others {
		_cgo_of_block_others_ = C.glibfalse()
	}
	C.gtk_device_grab_add((*C.GtkWidget)(_cgo_of_widget_), (*C.GdkDevice)(device), (C.gboolean)(_cgo_of_block_others_))
	return
}

func DeviceGrabRemove(widget *Widget, device *C.GdkDevice) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_device_grab_remove((*C.GtkWidget)(_cgo_of_widget_), (*C.GdkDevice)(device))
	return
}

func DisableSetlocale() () {
	C.gtk_disable_setlocale()
	return
}

func DistributeNaturalAllocation(extra_space int, n_requested_sizes uint, sizes *RequestedSize) (_return_ int) {
	_cgo_of_extra_space_ := (C.gint)(extra_space)
	_cgo_of_n_requested_sizes_ := (C.guint)(n_requested_sizes)
	_cgo_of_sizes_ := (*C.GtkRequestedSize)(sizes)
	_cgo_of__return__ := C.gtk_distribute_natural_allocation((C.gint)(_cgo_of_extra_space_), (C.guint)(_cgo_of_n_requested_sizes_), (*C.GtkRequestedSize)(_cgo_of_sizes_))
	_return_ = int(_cgo_of__return__)
	return
}

func DragFinish(context *C.GdkDragContext, success bool, del bool, time_ uint32) () {
	_cgo_of_success_ := C.glibtrue()
	if !success {
		_cgo_of_success_ = C.glibfalse()
	}
	_cgo_of_del_ := C.glibtrue()
	if !del {
		_cgo_of_del_ = C.glibfalse()
	}
	_cgo_of_time__ := (C.guint32)(time_)
	C.gtk_drag_finish((*C.GdkDragContext)(context), (C.gboolean)(_cgo_of_success_), (C.gboolean)(_cgo_of_del_), (C.guint32)(_cgo_of_time__))
	return
}

func DragGetSourceWidget(context *C.GdkDragContext) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_drag_get_source_widget((*C.GdkDragContext)(context))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func DragSetIconDefault(context *C.GdkDragContext) () {
	C.gtk_drag_set_icon_default((*C.GdkDragContext)(context))
	return
}

func DragSetIconGicon(context *C.GdkDragContext, icon *C.GIcon, hot_x int, hot_y int) () {
	_cgo_of_hot_x_ := (C.gint)(hot_x)
	_cgo_of_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_gicon((*C.GdkDragContext)(context), (*C.GIcon)(icon), (C.gint)(_cgo_of_hot_x_), (C.gint)(_cgo_of_hot_y_))
	return
}

func DragSetIconName(context *C.GdkDragContext, icon_name string, hot_x int, hot_y int) () {
	_cgo_of_icon_name_ := (*C.gchar)(unsafe.Pointer(C.CString(icon_name)))
	_cgo_of_hot_x_ := (C.gint)(hot_x)
	_cgo_of_hot_y_ := (C.gint)(hot_y)
	C._gtk_drag_set_icon_name((*C.GdkDragContext)(context), (*C.gchar)(_cgo_of_icon_name_), (C.gint)(_cgo_of_hot_x_), (C.gint)(_cgo_of_hot_y_))
	return
}

func DragSetIconPixbuf(context *C.GdkDragContext, pixbuf *C.GdkPixbuf, hot_x int, hot_y int) () {
	_cgo_of_hot_x_ := (C.gint)(hot_x)
	_cgo_of_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_pixbuf((*C.GdkDragContext)(context), (*C.GdkPixbuf)(pixbuf), (C.gint)(_cgo_of_hot_x_), (C.gint)(_cgo_of_hot_y_))
	return
}

func DragSetIconStock(context *C.GdkDragContext, stock_id string, hot_x int, hot_y int) () {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	_cgo_of_hot_x_ := (C.gint)(hot_x)
	_cgo_of_hot_y_ := (C.gint)(hot_y)
	C._gtk_drag_set_icon_stock((*C.GdkDragContext)(context), (*C.gchar)(_cgo_of_stock_id_), (C.gint)(_cgo_of_hot_x_), (C.gint)(_cgo_of_hot_y_))
	return
}

func DragSetIconSurface(context *C.GdkDragContext, surface *C.cairo_surface_t) () {
	C.gtk_drag_set_icon_surface((*C.GdkDragContext)(context), (*C.cairo_surface_t)(surface))
	return
}

func DragSetIconWidget(context *C.GdkDragContext, widget *Widget, hot_x int, hot_y int) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_hot_x_ := (C.gint)(hot_x)
	_cgo_of_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_widget((*C.GdkDragContext)(context), (*C.GtkWidget)(_cgo_of_widget_), (C.gint)(_cgo_of_hot_x_), (C.gint)(_cgo_of_hot_y_))
	return
}

func EventsPending() (_return_ bool) {
	_cgo_of__return__ := C.gtk_events_pending()
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func False() (_return_ bool) {
	_cgo_of__return__ := C.gtk_false()
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func FileChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_file_chooser_error_quark()
	return
}

func GetBinaryAge() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_binary_age()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetCurrentEvent() (_return_ *C.GdkEvent) {
	_return_ = C.gtk_get_current_event()
	return
}

func GetCurrentEventDevice() (_return_ *C.GdkDevice) {
	_return_ = C.gtk_get_current_event_device()
	return
}

func GetCurrentEventState() (_return_ bool, state *C.GdkModifierType) {
	_cgo_of__return__ := C.gtk_get_current_event_state((*C.GdkModifierType)(state))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func GetCurrentEventTime() (_return_ uint32) {
	_cgo_of__return__ := C.gtk_get_current_event_time()
	_return_ = uint32(_cgo_of__return__)
	return
}

func GetDebugFlags() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_debug_flags()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetDefaultLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C.gtk_get_default_language()
	return
}

func GetEventWidget(event *C.GdkEvent) (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_get_event_widget((*C.GdkEvent)(event))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func GetInterfaceAge() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_interface_age()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetMajorVersion() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_major_version()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetMicroVersion() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_micro_version()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetMinorVersion() (_return_ uint) {
	_cgo_of__return__ := C.gtk_get_minor_version()
	_return_ = uint(_cgo_of__return__)
	return
}

func GetOptionGroup(open_default_display bool) (_return_ *C.GOptionGroup) {
	_cgo_of_open_default_display_ := C.glibtrue()
	if !open_default_display {
		_cgo_of_open_default_display_ = C.glibfalse()
	}
	_return_ = C.gtk_get_option_group((C.gboolean)(_cgo_of_open_default_display_))
	return
}

func GrabGetCurrent() (_return_ *Widget) {
	_cgo_of__return__ := C.gtk_grab_get_current()
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func IconSizeFromName(name string) (_return_ C.GtkIconSize) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_return_ = C._gtk_icon_size_from_name((*C.gchar)(_cgo_of_name_))
	return
}

func IconSizeGetName(size C.GtkIconSize) (_return_ string) {
	_cgo_of__return__ := C.gtk_icon_size_get_name((C.GtkIconSize)(size))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func IconSizeLookup(size C.GtkIconSize) (_return_ bool, width int, height int) {
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	_cgo_of__return__ := C.gtk_icon_size_lookup((C.GtkIconSize)(size), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func IconSizeLookupForSettings(settings *Settings, size C.GtkIconSize) (_return_ bool, width int, height int) {
	_cgo_of_settings_ := (*C.GtkSettings)(settings)
	var _cgo_of_width_ C.gint
	var _cgo_of_height_ C.gint
	_cgo_of__return__ := C.gtk_icon_size_lookup_for_settings((*C.GtkSettings)(_cgo_of_settings_), (C.GtkIconSize)(size), (*C.gint)(&_cgo_of_width_), (*C.gint)(&_cgo_of_height_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	width = int(_cgo_of_width_)
	height = int(_cgo_of_height_)
	return
}

func IconSizeRegister(name string, width int, height int) (_return_ C.GtkIconSize) {
	_cgo_of_name_ := (*C.gchar)(unsafe.Pointer(C.CString(name)))
	_cgo_of_width_ := (C.gint)(width)
	_cgo_of_height_ := (C.gint)(height)
	_return_ = C._gtk_icon_size_register((*C.gchar)(_cgo_of_name_), (C.gint)(_cgo_of_width_), (C.gint)(_cgo_of_height_))
	return
}

func IconSizeRegisterAlias(alias string, target C.GtkIconSize) () {
	_cgo_of_alias_ := (*C.gchar)(unsafe.Pointer(C.CString(alias)))
	C._gtk_icon_size_register_alias((*C.gchar)(_cgo_of_alias_), (C.GtkIconSize)(target))
	return
}

func IconThemeErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_icon_theme_error_quark()
	return
}

func Main() () {
	C.gtk_main()
	return
}

func MainDoEvent(event *C.GdkEvent) () {
	C.gtk_main_do_event((*C.GdkEvent)(event))
	return
}

func MainIteration() (_return_ bool) {
	_cgo_of__return__ := C.gtk_main_iteration()
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func MainIterationDo(blocking bool) (_return_ bool) {
	_cgo_of_blocking_ := C.glibtrue()
	if !blocking {
		_cgo_of_blocking_ = C.glibfalse()
	}
	_cgo_of__return__ := C.gtk_main_iteration_do((C.gboolean)(_cgo_of_blocking_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func MainLevel() (_return_ uint) {
	_cgo_of__return__ := C.gtk_main_level()
	_return_ = uint(_cgo_of__return__)
	return
}

func MainQuit() () {
	C.gtk_main_quit()
	return
}

func PrintErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_print_error_quark()
	return
}

func PrintRunPageSetupDialog(parent *Window, page_setup *PageSetup, settings *PrintSettings) (_return_ *PageSetup) {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of_page_setup_ := (*C.GtkPageSetup)(page_setup)
	_cgo_of_settings_ := (*C.GtkPrintSettings)(settings)
	_cgo_of__return__ := C.gtk_print_run_page_setup_dialog((*C.GtkWindow)(_cgo_of_parent_), (*C.GtkPageSetup)(_cgo_of_page_setup_), (*C.GtkPrintSettings)(_cgo_of_settings_))
	_return_ = (*PageSetup)(_cgo_of__return__)
	return
}

func PrintRunPageSetupDialogAsync(parent *Window, page_setup *PageSetup, settings *PrintSettings, done_cb C.GtkPageSetupDoneFunc, data C.gpointer) () {
	_cgo_of_parent_ := (*C.GtkWindow)(parent)
	_cgo_of_page_setup_ := (*C.GtkPageSetup)(page_setup)
	_cgo_of_settings_ := (*C.GtkPrintSettings)(settings)
	C.gtk_print_run_page_setup_dialog_async((*C.GtkWindow)(_cgo_of_parent_), (*C.GtkPageSetup)(_cgo_of_page_setup_), (*C.GtkPrintSettings)(_cgo_of_settings_), (C.GtkPageSetupDoneFunc)(done_cb), (C.gpointer)(data))
	return
}

func PropagateEvent(widget *Widget, event *C.GdkEvent) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_propagate_event((*C.GtkWidget)(_cgo_of_widget_), (*C.GdkEvent)(event))
	return
}

func RcPropertyParseBorder(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ bool) {
	_cgo_of__return__ := C._gtk_rc_property_parse_border((*C.GParamSpec)(pspec), (*C.GString)(gstring), (*C.GValue)(property_value))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RcPropertyParseColor(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ bool) {
	_cgo_of__return__ := C._gtk_rc_property_parse_color((*C.GParamSpec)(pspec), (*C.GString)(gstring), (*C.GValue)(property_value))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RcPropertyParseEnum(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ bool) {
	_cgo_of__return__ := C._gtk_rc_property_parse_enum((*C.GParamSpec)(pspec), (*C.GString)(gstring), (*C.GValue)(property_value))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RcPropertyParseFlags(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ bool) {
	_cgo_of__return__ := C._gtk_rc_property_parse_flags((*C.GParamSpec)(pspec), (*C.GString)(gstring), (*C.GValue)(property_value))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RcPropertyParseRequisition(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ bool) {
	_cgo_of__return__ := C._gtk_rc_property_parse_requisition((*C.GParamSpec)(pspec), (*C.GString)(gstring), (*C.GValue)(property_value))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func RecentChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_chooser_error_quark()
	return
}

func RecentManagerErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_manager_error_quark()
	return
}

func RenderActivity(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_activity((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderArrow(context *StyleContext, cr *C.cairo_t, angle float64, x float64, y float64, size float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_angle_ := (C.gdouble)(angle)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_size_ := (C.gdouble)(size)
	C.gtk_render_arrow((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_angle_), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_size_))
	return
}

func RenderBackground(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_background((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderCheck(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_check((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderExpander(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_expander((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderExtension(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_extension((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_), (C.GtkPositionType)(gap_side))
	return
}

func RenderFocus(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_focus((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderFrame(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_frame((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderFrameGap(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType, xy0_gap float64, xy1_gap float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	_cgo_of_xy0_gap_ := (C.gdouble)(xy0_gap)
	_cgo_of_xy1_gap_ := (C.gdouble)(xy1_gap)
	C.gtk_render_frame_gap((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_), (C.GtkPositionType)(gap_side), (C.gdouble)(_cgo_of_xy0_gap_), (C.gdouble)(_cgo_of_xy1_gap_))
	return
}

func RenderHandle(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_handle((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderIcon(context *StyleContext, cr *C.cairo_t, pixbuf *C.GdkPixbuf, x float64, y float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	C.gtk_render_icon((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (*C.GdkPixbuf)(pixbuf), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_))
	return
}

func RenderIconPixbuf(context *StyleContext, source *IconSource, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_source_ := (*C.GtkIconSource)(source)
	_return_ = C._gtk_render_icon_pixbuf((*C.GtkStyleContext)(_cgo_of_context_), (*C.GtkIconSource)(_cgo_of_source_), (C.GtkIconSize)(size))
	return
}

func RenderInsertionCursor(context *StyleContext, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout, index C.int, direction C.PangoDirection) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	C.gtk_render_insertion_cursor((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (*C.PangoLayout)(layout), (C.int)(index), (C.PangoDirection)(direction))
	return
}

func RenderLayout(context *StyleContext, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	C.gtk_render_layout((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (*C.PangoLayout)(layout))
	return
}

func RenderLine(context *StyleContext, cr *C.cairo_t, x0 float64, y0 float64, x1 float64, y1 float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x0_ := (C.gdouble)(x0)
	_cgo_of_y0_ := (C.gdouble)(y0)
	_cgo_of_x1_ := (C.gdouble)(x1)
	_cgo_of_y1_ := (C.gdouble)(y1)
	C.gtk_render_line((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x0_), (C.gdouble)(_cgo_of_y0_), (C.gdouble)(_cgo_of_x1_), (C.gdouble)(_cgo_of_y1_))
	return
}

func RenderOption(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_option((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_))
	return
}

func RenderSlider(context *StyleContext, cr *C.cairo_t, x float64, y float64, width float64, height float64, orientation C.GtkOrientation) () {
	_cgo_of_context_ := (*C.GtkStyleContext)(context)
	_cgo_of_x_ := (C.gdouble)(x)
	_cgo_of_y_ := (C.gdouble)(y)
	_cgo_of_width_ := (C.gdouble)(width)
	_cgo_of_height_ := (C.gdouble)(height)
	C.gtk_render_slider((*C.GtkStyleContext)(_cgo_of_context_), (*C.cairo_t)(cr), (C.gdouble)(_cgo_of_x_), (C.gdouble)(_cgo_of_y_), (C.gdouble)(_cgo_of_width_), (C.gdouble)(_cgo_of_height_), (C.GtkOrientation)(orientation))
	return
}

func RgbToHsv(r float64, g float64, b float64) (h float64, s float64, v float64) {
	_cgo_of_r_ := (C.gdouble)(r)
	_cgo_of_g_ := (C.gdouble)(g)
	_cgo_of_b_ := (C.gdouble)(b)
	var _cgo_of_h_ C.gdouble
	var _cgo_of_s_ C.gdouble
	var _cgo_of_v_ C.gdouble
	C.gtk_rgb_to_hsv((C.gdouble)(_cgo_of_r_), (C.gdouble)(_cgo_of_g_), (C.gdouble)(_cgo_of_b_), (*C.gdouble)(&_cgo_of_h_), (*C.gdouble)(&_cgo_of_s_), (*C.gdouble)(&_cgo_of_v_))
	h = float64(_cgo_of_h_)
	s = float64(_cgo_of_s_)
	v = float64(_cgo_of_v_)
	return
}

func SelectionAddTarget(widget *Widget, selection C.GdkAtom, target C.GdkAtom, info uint) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_info_ := (C.guint)(info)
	C.gtk_selection_add_target((*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection), (C.GdkAtom)(target), (C.guint)(_cgo_of_info_))
	return
}

func SelectionAddTargets(widget *Widget, selection C.GdkAtom, targets *TargetEntry, ntargets uint) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_ntargets_ := (C.guint)(ntargets)
	C.gtk_selection_add_targets((*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection), (*C.GtkTargetEntry)(_cgo_of_targets_), (C.guint)(_cgo_of_ntargets_))
	return
}

func SelectionClearTargets(widget *Widget, selection C.GdkAtom) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_selection_clear_targets((*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection))
	return
}

func SelectionConvert(widget *Widget, selection C.GdkAtom, target C.GdkAtom, time_ uint32) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_time__ := (C.guint32)(time_)
	_cgo_of__return__ := C.gtk_selection_convert((*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection), (C.GdkAtom)(target), (C.guint32)(_cgo_of_time__))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func SelectionOwnerSet(widget *Widget, selection C.GdkAtom, time_ uint32) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_time__ := (C.guint32)(time_)
	_cgo_of__return__ := C.gtk_selection_owner_set((*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection), (C.guint32)(_cgo_of_time__))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func SelectionOwnerSetForDisplay(display *C.GdkDisplay, widget *Widget, selection C.GdkAtom, time_ uint32) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_time__ := (C.guint32)(time_)
	_cgo_of__return__ := C.gtk_selection_owner_set_for_display((*C.GdkDisplay)(display), (*C.GtkWidget)(_cgo_of_widget_), (C.GdkAtom)(selection), (C.guint32)(_cgo_of_time__))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func SelectionRemoveAll(widget *Widget) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_selection_remove_all((*C.GtkWidget)(_cgo_of_widget_))
	return
}

func SetDebugFlags(flags uint) () {
	_cgo_of_flags_ := (C.guint)(flags)
	C.gtk_set_debug_flags((C.guint)(_cgo_of_flags_))
	return
}

func ShowUri(screen *C.GdkScreen, uri string, timestamp uint32) (_return_ bool, _error_ unsafe.Pointer) {
	_cgo_of_uri_ := (*C.gchar)(unsafe.Pointer(C.CString(uri)))
	_cgo_of_timestamp_ := (C.guint32)(timestamp)
	_cgo_of__return__ := C._gtk_show_uri((*C.GdkScreen)(screen), (*C.gchar)(_cgo_of_uri_), (C.guint32)(_cgo_of_timestamp_), unsafe.Pointer(_error_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func StockAdd(items *StockItem, n_items uint) () {
	_cgo_of_items_ := (*C.GtkStockItem)(items)
	_cgo_of_n_items_ := (C.guint)(n_items)
	C.gtk_stock_add((*C.GtkStockItem)(_cgo_of_items_), (C.guint)(_cgo_of_n_items_))
	return
}

func StockAddStatic(items *StockItem, n_items uint) () {
	_cgo_of_items_ := (*C.GtkStockItem)(items)
	_cgo_of_n_items_ := (C.guint)(n_items)
	C.gtk_stock_add_static((*C.GtkStockItem)(_cgo_of_items_), (C.guint)(_cgo_of_n_items_))
	return
}

func StockListIds() (_return_ *C.GSList) {
	_return_ = C.gtk_stock_list_ids()
	return
}

func StockLookup(stock_id string) (_return_ bool, item *StockItem) {
	_cgo_of_stock_id_ := (*C.gchar)(unsafe.Pointer(C.CString(stock_id)))
	var _allocated_item_ C.GtkStockItem
	_cgo_of__return__ := C._gtk_stock_lookup((*C.gchar)(_cgo_of_stock_id_), (*C.GtkStockItem)(&_allocated_item_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	item = (*StockItem)(&_allocated_item_)
	return
}

func StockSetTranslateFunc(domain string, func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	_cgo_of_domain_ := (*C.gchar)(unsafe.Pointer(C.CString(domain)))
	C._gtk_stock_set_translate_func((*C.gchar)(_cgo_of_domain_), (C.GtkTranslateFunc)(func_), (C.gpointer)(data), (C.GDestroyNotify)(notify))
	return
}

func TargetTableFree(targets *TargetEntry, n_targets int) () {
	_cgo_of_targets_ := (*C.GtkTargetEntry)(targets)
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	C.gtk_target_table_free((*C.GtkTargetEntry)(_cgo_of_targets_), (C.gint)(_cgo_of_n_targets_))
	return
}

func TargetTableNewFromList(list *TargetList) (_return_ *TargetEntry, n_targets int) {
	_cgo_of_list_ := (*C.GtkTargetList)(list)
	var _cgo_of_n_targets_ C.gint
	_cgo_of__return__ := C.gtk_target_table_new_from_list((*C.GtkTargetList)(_cgo_of_list_), (*C.gint)(&_cgo_of_n_targets_))
	_return_ = (*TargetEntry)(_cgo_of__return__)
	n_targets = int(_cgo_of_n_targets_)
	return
}

func TargetsIncludeImage(targets *C.GdkAtom, n_targets int, writable bool) (_return_ bool) {
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	_cgo_of_writable_ := C.glibtrue()
	if !writable {
		_cgo_of_writable_ = C.glibfalse()
	}
	_cgo_of__return__ := C.gtk_targets_include_image((*C.GdkAtom)(targets), (C.gint)(_cgo_of_n_targets_), (C.gboolean)(_cgo_of_writable_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TargetsIncludeRichText(targets *C.GdkAtom, n_targets int, buffer *TextBuffer) (_return_ bool) {
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	_cgo_of_buffer_ := (*C.GtkTextBuffer)(buffer)
	_cgo_of__return__ := C.gtk_targets_include_rich_text((*C.GdkAtom)(targets), (C.gint)(_cgo_of_n_targets_), (*C.GtkTextBuffer)(_cgo_of_buffer_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TargetsIncludeText(targets *C.GdkAtom, n_targets int) (_return_ bool) {
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	_cgo_of__return__ := C.gtk_targets_include_text((*C.GdkAtom)(targets), (C.gint)(_cgo_of_n_targets_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TargetsIncludeUri(targets *C.GdkAtom, n_targets int) (_return_ bool) {
	_cgo_of_n_targets_ := (C.gint)(n_targets)
	_cgo_of__return__ := C.gtk_targets_include_uri((*C.GdkAtom)(targets), (C.gint)(_cgo_of_n_targets_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TestCreateSimpleWindow(window_title string, dialog_text string) (_return_ *Widget) {
	_cgo_of_window_title_ := (*C.gchar)(unsafe.Pointer(C.CString(window_title)))
	_cgo_of_dialog_text_ := (*C.gchar)(unsafe.Pointer(C.CString(dialog_text)))
	_cgo_of__return__ := C._gtk_test_create_simple_window((*C.gchar)(_cgo_of_window_title_), (*C.gchar)(_cgo_of_dialog_text_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TestFindLabel(widget *Widget, label_pattern string) (_return_ *Widget) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_label_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(label_pattern)))
	_cgo_of__return__ := C._gtk_test_find_label((*C.GtkWidget)(_cgo_of_widget_), (*C.gchar)(_cgo_of_label_pattern_))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TestFindSibling(base_widget *Widget, widget_type C.GType) (_return_ *Widget) {
	_cgo_of_base_widget_ := (*C.GtkWidget)(base_widget)
	_cgo_of__return__ := C.gtk_test_find_sibling((*C.GtkWidget)(_cgo_of_base_widget_), (C.GType)(widget_type))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TestFindWidget(widget *Widget, label_pattern string, widget_type C.GType) (_return_ *Widget) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_label_pattern_ := (*C.gchar)(unsafe.Pointer(C.CString(label_pattern)))
	_cgo_of__return__ := C._gtk_test_find_widget((*C.GtkWidget)(_cgo_of_widget_), (*C.gchar)(_cgo_of_label_pattern_), (C.GType)(widget_type))
	_return_ = (*Widget)(_cgo_of__return__)
	return
}

func TestListAllTypes() (_return_ *C.GType, n_types uint) {
	var _cgo_of_n_types_ C.guint
	_return_ = C.gtk_test_list_all_types((*C.guint)(&_cgo_of_n_types_))
	n_types = uint(_cgo_of_n_types_)
	return
}

func TestRegisterAllTypes() () {
	C.gtk_test_register_all_types()
	return
}

func TestSliderGetValue(widget *Widget) (_return_ C.double) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_return_ = C.gtk_test_slider_get_value((*C.GtkWidget)(_cgo_of_widget_))
	return
}

func TestSliderSetPerc(widget *Widget, percentage C.double) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	C.gtk_test_slider_set_perc((*C.GtkWidget)(_cgo_of_widget_), (C.double)(percentage))
	return
}

func TestSpinButtonClick(spinner *SpinButton, button uint, upwards bool) (_return_ bool) {
	_cgo_of_spinner_ := (*C.GtkSpinButton)(spinner)
	_cgo_of_button_ := (C.guint)(button)
	_cgo_of_upwards_ := C.glibtrue()
	if !upwards {
		_cgo_of_upwards_ = C.glibfalse()
	}
	_cgo_of__return__ := C.gtk_test_spin_button_click((*C.GtkSpinButton)(_cgo_of_spinner_), (C.guint)(_cgo_of_button_), (C.gboolean)(_cgo_of_upwards_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TestTextGet(widget *Widget) (_return_ string) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of__return__ := C.gtk_test_text_get((*C.GtkWidget)(_cgo_of_widget_))
	_return_ = C.GoString((*C.char)(_cgo_of__return__))
	return
}

func TestTextSet(widget *Widget, string_ string) () {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_string__ := (*C.gchar)(unsafe.Pointer(C.CString(string_)))
	C._gtk_test_text_set((*C.GtkWidget)(_cgo_of_widget_), (*C.gchar)(_cgo_of_string__))
	return
}

func TestWidgetClick(widget *Widget, button uint, modifiers C.GdkModifierType) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_button_ := (C.guint)(button)
	_cgo_of__return__ := C.gtk_test_widget_click((*C.GtkWidget)(_cgo_of_widget_), (C.guint)(_cgo_of_button_), (C.GdkModifierType)(modifiers))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TestWidgetSendKey(widget *Widget, keyval uint, modifiers C.GdkModifierType) (_return_ bool) {
	_cgo_of_widget_ := (*C.GtkWidget)(widget)
	_cgo_of_keyval_ := (C.guint)(keyval)
	_cgo_of__return__ := C.gtk_test_widget_send_key((*C.GtkWidget)(_cgo_of_widget_), (C.guint)(_cgo_of_keyval_), (C.GdkModifierType)(modifiers))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TreeGetRowDragData(selection_data *SelectionData) (_return_ bool, tree_model unsafe.Pointer, path unsafe.Pointer) {
	_cgo_of_selection_data_ := (*C.GtkSelectionData)(selection_data)
	_cgo_of__return__ := C._gtk_tree_get_row_drag_data((*C.GtkSelectionData)(_cgo_of_selection_data_), unsafe.Pointer(tree_model), unsafe.Pointer(path))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func TreeSetRowDragData(selection_data *SelectionData, tree_model *C.GtkTreeModel, path *TreePath) (_return_ bool) {
	_cgo_of_selection_data_ := (*C.GtkSelectionData)(selection_data)
	_cgo_of_path_ := (*C.GtkTreePath)(path)
	_cgo_of__return__ := C.gtk_tree_set_row_drag_data((*C.GtkSelectionData)(_cgo_of_selection_data_), (*C.GtkTreeModel)(tree_model), (*C.GtkTreePath)(_cgo_of_path_))
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

func True() (_return_ bool) {
	_cgo_of__return__ := C.gtk_true()
	_return_ = _cgo_of__return__ == C.glibtrue()
	return
}

const ACCEL_VISIBLE = C.GTK_ACCEL_VISIBLE
const ACCEL_LOCKED = C.GTK_ACCEL_LOCKED
const ACCEL_MASK = C.GTK_ACCEL_MASK
const ALIGN_FILL = C.GTK_ALIGN_FILL
const ALIGN_START = C.GTK_ALIGN_START
const ALIGN_END = C.GTK_ALIGN_END
const ALIGN_CENTER = C.GTK_ALIGN_CENTER
const APPLICATION_INHIBIT_LOGOUT = C.GTK_APPLICATION_INHIBIT_LOGOUT
const APPLICATION_INHIBIT_SWITCH = C.GTK_APPLICATION_INHIBIT_SWITCH
const APPLICATION_INHIBIT_SUSPEND = C.GTK_APPLICATION_INHIBIT_SUSPEND
const APPLICATION_INHIBIT_IDLE = C.GTK_APPLICATION_INHIBIT_IDLE
const ARROWS_BOTH = C.GTK_ARROWS_BOTH
const ARROWS_START = C.GTK_ARROWS_START
const ARROWS_END = C.GTK_ARROWS_END
const ARROW_UP = C.GTK_ARROW_UP
const ARROW_DOWN = C.GTK_ARROW_DOWN
const ARROW_LEFT = C.GTK_ARROW_LEFT
const ARROW_RIGHT = C.GTK_ARROW_RIGHT
const ARROW_NONE = C.GTK_ARROW_NONE
const ASSISTANT_PAGE_CONTENT = C.GTK_ASSISTANT_PAGE_CONTENT
const ASSISTANT_PAGE_INTRO = C.GTK_ASSISTANT_PAGE_INTRO
const ASSISTANT_PAGE_CONFIRM = C.GTK_ASSISTANT_PAGE_CONFIRM
const ASSISTANT_PAGE_SUMMARY = C.GTK_ASSISTANT_PAGE_SUMMARY
const ASSISTANT_PAGE_PROGRESS = C.GTK_ASSISTANT_PAGE_PROGRESS
const ASSISTANT_PAGE_CUSTOM = C.GTK_ASSISTANT_PAGE_CUSTOM
const EXPAND = C.GTK_EXPAND
const SHRINK = C.GTK_SHRINK
const FILL = C.GTK_FILL
const BORDER_STYLE_NONE = C.GTK_BORDER_STYLE_NONE
const BORDER_STYLE_SOLID = C.GTK_BORDER_STYLE_SOLID
const BORDER_STYLE_INSET = C.GTK_BORDER_STYLE_INSET
const BORDER_STYLE_OUTSET = C.GTK_BORDER_STYLE_OUTSET
const BORDER_STYLE_HIDDEN = C.GTK_BORDER_STYLE_HIDDEN
const BORDER_STYLE_DOTTED = C.GTK_BORDER_STYLE_DOTTED
const BORDER_STYLE_DASHED = C.GTK_BORDER_STYLE_DASHED
const BORDER_STYLE_DOUBLE = C.GTK_BORDER_STYLE_DOUBLE
const BORDER_STYLE_GROOVE = C.GTK_BORDER_STYLE_GROOVE
const BORDER_STYLE_RIDGE = C.GTK_BORDER_STYLE_RIDGE
const BUILDER_ERROR_INVALID_TYPE_FUNCTION = C.GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
const BUILDER_ERROR_UNHANDLED_TAG = C.GTK_BUILDER_ERROR_UNHANDLED_TAG
const BUILDER_ERROR_MISSING_ATTRIBUTE = C.GTK_BUILDER_ERROR_MISSING_ATTRIBUTE
const BUILDER_ERROR_INVALID_ATTRIBUTE = C.GTK_BUILDER_ERROR_INVALID_ATTRIBUTE
const BUILDER_ERROR_INVALID_TAG = C.GTK_BUILDER_ERROR_INVALID_TAG
const BUILDER_ERROR_MISSING_PROPERTY_VALUE = C.GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
const BUILDER_ERROR_INVALID_VALUE = C.GTK_BUILDER_ERROR_INVALID_VALUE
const BUILDER_ERROR_VERSION_MISMATCH = C.GTK_BUILDER_ERROR_VERSION_MISMATCH
const BUILDER_ERROR_DUPLICATE_ID = C.GTK_BUILDER_ERROR_DUPLICATE_ID
const BUTTONBOX_SPREAD = C.GTK_BUTTONBOX_SPREAD
const BUTTONBOX_EDGE = C.GTK_BUTTONBOX_EDGE
const BUTTONBOX_START = C.GTK_BUTTONBOX_START
const BUTTONBOX_END = C.GTK_BUTTONBOX_END
const BUTTONBOX_CENTER = C.GTK_BUTTONBOX_CENTER
const BUTTONS_NONE = C.GTK_BUTTONS_NONE
const BUTTONS_OK = C.GTK_BUTTONS_OK
const BUTTONS_CLOSE = C.GTK_BUTTONS_CLOSE
const BUTTONS_CANCEL = C.GTK_BUTTONS_CANCEL
const BUTTONS_YES_NO = C.GTK_BUTTONS_YES_NO
const BUTTONS_OK_CANCEL = C.GTK_BUTTONS_OK_CANCEL
const CALENDAR_SHOW_HEADING = C.GTK_CALENDAR_SHOW_HEADING
const CALENDAR_SHOW_DAY_NAMES = C.GTK_CALENDAR_SHOW_DAY_NAMES
const CALENDAR_NO_MONTH_CHANGE = C.GTK_CALENDAR_NO_MONTH_CHANGE
const CALENDAR_SHOW_WEEK_NUMBERS = C.GTK_CALENDAR_SHOW_WEEK_NUMBERS
const CALENDAR_SHOW_DETAILS = C.GTK_CALENDAR_SHOW_DETAILS
const CELL_RENDERER_ACCEL_MODE_GTK = C.GTK_CELL_RENDERER_ACCEL_MODE_GTK
const CELL_RENDERER_ACCEL_MODE_OTHER = C.GTK_CELL_RENDERER_ACCEL_MODE_OTHER
const CELL_RENDERER_MODE_INERT = C.GTK_CELL_RENDERER_MODE_INERT
const CELL_RENDERER_MODE_ACTIVATABLE = C.GTK_CELL_RENDERER_MODE_ACTIVATABLE
const CELL_RENDERER_MODE_EDITABLE = C.GTK_CELL_RENDERER_MODE_EDITABLE
const CELL_RENDERER_SELECTED = C.GTK_CELL_RENDERER_SELECTED
const CELL_RENDERER_PRELIT = C.GTK_CELL_RENDERER_PRELIT
const CELL_RENDERER_INSENSITIVE = C.GTK_CELL_RENDERER_INSENSITIVE
const CELL_RENDERER_SORTED = C.GTK_CELL_RENDERER_SORTED
const CELL_RENDERER_FOCUSED = C.GTK_CELL_RENDERER_FOCUSED
const CELL_RENDERER_EXPANDABLE = C.GTK_CELL_RENDERER_EXPANDABLE
const CELL_RENDERER_EXPANDED = C.GTK_CELL_RENDERER_EXPANDED
const CORNER_TOP_LEFT = C.GTK_CORNER_TOP_LEFT
const CORNER_BOTTOM_LEFT = C.GTK_CORNER_BOTTOM_LEFT
const CORNER_TOP_RIGHT = C.GTK_CORNER_TOP_RIGHT
const CORNER_BOTTOM_RIGHT = C.GTK_CORNER_BOTTOM_RIGHT
const CSS_PROVIDER_ERROR_FAILED = C.GTK_CSS_PROVIDER_ERROR_FAILED
const CSS_PROVIDER_ERROR_SYNTAX = C.GTK_CSS_PROVIDER_ERROR_SYNTAX
const CSS_PROVIDER_ERROR_IMPORT = C.GTK_CSS_PROVIDER_ERROR_IMPORT
const CSS_PROVIDER_ERROR_NAME = C.GTK_CSS_PROVIDER_ERROR_NAME
const CSS_PROVIDER_ERROR_DEPRECATED = C.GTK_CSS_PROVIDER_ERROR_DEPRECATED
const CSS_PROVIDER_ERROR_UNKNOWN_VALUE = C.GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
const CSS_SECTION_DOCUMENT = C.GTK_CSS_SECTION_DOCUMENT
const CSS_SECTION_IMPORT = C.GTK_CSS_SECTION_IMPORT
const CSS_SECTION_COLOR_DEFINITION = C.GTK_CSS_SECTION_COLOR_DEFINITION
const CSS_SECTION_BINDING_SET = C.GTK_CSS_SECTION_BINDING_SET
const CSS_SECTION_RULESET = C.GTK_CSS_SECTION_RULESET
const CSS_SECTION_SELECTOR = C.GTK_CSS_SECTION_SELECTOR
const CSS_SECTION_DECLARATION = C.GTK_CSS_SECTION_DECLARATION
const CSS_SECTION_VALUE = C.GTK_CSS_SECTION_VALUE
const CSS_SECTION_KEYFRAMES = C.GTK_CSS_SECTION_KEYFRAMES
const DEBUG_MISC = C.GTK_DEBUG_MISC
const DEBUG_PLUGSOCKET = C.GTK_DEBUG_PLUGSOCKET
const DEBUG_TEXT = C.GTK_DEBUG_TEXT
const DEBUG_TREE = C.GTK_DEBUG_TREE
const DEBUG_UPDATES = C.GTK_DEBUG_UPDATES
const DEBUG_KEYBINDINGS = C.GTK_DEBUG_KEYBINDINGS
const DEBUG_MULTIHEAD = C.GTK_DEBUG_MULTIHEAD
const DEBUG_MODULES = C.GTK_DEBUG_MODULES
const DEBUG_GEOMETRY = C.GTK_DEBUG_GEOMETRY
const DEBUG_ICONTHEME = C.GTK_DEBUG_ICONTHEME
const DEBUG_PRINTING = C.GTK_DEBUG_PRINTING
const DEBUG_BUILDER = C.GTK_DEBUG_BUILDER
const DEBUG_SIZE_REQUEST = C.GTK_DEBUG_SIZE_REQUEST
const DEBUG_NO_CSS_CACHE = C.GTK_DEBUG_NO_CSS_CACHE
const DELETE_CHARS = C.GTK_DELETE_CHARS
const DELETE_WORD_ENDS = C.GTK_DELETE_WORD_ENDS
const DELETE_WORDS = C.GTK_DELETE_WORDS
const DELETE_DISPLAY_LINES = C.GTK_DELETE_DISPLAY_LINES
const DELETE_DISPLAY_LINE_ENDS = C.GTK_DELETE_DISPLAY_LINE_ENDS
const DELETE_PARAGRAPH_ENDS = C.GTK_DELETE_PARAGRAPH_ENDS
const DELETE_PARAGRAPHS = C.GTK_DELETE_PARAGRAPHS
const DELETE_WHITESPACE = C.GTK_DELETE_WHITESPACE
const DEST_DEFAULT_MOTION = C.GTK_DEST_DEFAULT_MOTION
const DEST_DEFAULT_HIGHLIGHT = C.GTK_DEST_DEFAULT_HIGHLIGHT
const DEST_DEFAULT_DROP = C.GTK_DEST_DEFAULT_DROP
const DEST_DEFAULT_ALL = C.GTK_DEST_DEFAULT_ALL
const DIALOG_MODAL = C.GTK_DIALOG_MODAL
const DIALOG_DESTROY_WITH_PARENT = C.GTK_DIALOG_DESTROY_WITH_PARENT
const DIR_TAB_FORWARD = C.GTK_DIR_TAB_FORWARD
const DIR_TAB_BACKWARD = C.GTK_DIR_TAB_BACKWARD
const DIR_UP = C.GTK_DIR_UP
const DIR_DOWN = C.GTK_DIR_DOWN
const DIR_LEFT = C.GTK_DIR_LEFT
const DIR_RIGHT = C.GTK_DIR_RIGHT
const DRAG_RESULT_SUCCESS = C.GTK_DRAG_RESULT_SUCCESS
const DRAG_RESULT_NO_TARGET = C.GTK_DRAG_RESULT_NO_TARGET
const DRAG_RESULT_USER_CANCELLED = C.GTK_DRAG_RESULT_USER_CANCELLED
const DRAG_RESULT_TIMEOUT_EXPIRED = C.GTK_DRAG_RESULT_TIMEOUT_EXPIRED
const DRAG_RESULT_GRAB_BROKEN = C.GTK_DRAG_RESULT_GRAB_BROKEN
const DRAG_RESULT_ERROR = C.GTK_DRAG_RESULT_ERROR
const ENTRY_ICON_PRIMARY = C.GTK_ENTRY_ICON_PRIMARY
const ENTRY_ICON_SECONDARY = C.GTK_ENTRY_ICON_SECONDARY
const EXPANDER_COLLAPSED = C.GTK_EXPANDER_COLLAPSED
const EXPANDER_SEMI_COLLAPSED = C.GTK_EXPANDER_SEMI_COLLAPSED
const EXPANDER_SEMI_EXPANDED = C.GTK_EXPANDER_SEMI_EXPANDED
const EXPANDER_EXPANDED = C.GTK_EXPANDER_EXPANDED
const FILE_CHOOSER_ACTION_OPEN = C.GTK_FILE_CHOOSER_ACTION_OPEN
const FILE_CHOOSER_ACTION_SAVE = C.GTK_FILE_CHOOSER_ACTION_SAVE
const FILE_CHOOSER_ACTION_SELECT_FOLDER = C.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
const FILE_CHOOSER_ACTION_CREATE_FOLDER = C.GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
const FILE_CHOOSER_CONFIRMATION_CONFIRM = C.GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM
const FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = C.GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME
const FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = C.GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
const FILE_CHOOSER_ERROR_NONEXISTENT = C.GTK_FILE_CHOOSER_ERROR_NONEXISTENT
const FILE_CHOOSER_ERROR_BAD_FILENAME = C.GTK_FILE_CHOOSER_ERROR_BAD_FILENAME
const FILE_CHOOSER_ERROR_ALREADY_EXISTS = C.GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS
const FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = C.GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
const FILE_FILTER_FILENAME = C.GTK_FILE_FILTER_FILENAME
const FILE_FILTER_URI = C.GTK_FILE_FILTER_URI
const FILE_FILTER_DISPLAY_NAME = C.GTK_FILE_FILTER_DISPLAY_NAME
const FILE_FILTER_MIME_TYPE = C.GTK_FILE_FILTER_MIME_TYPE
const IM_PREEDIT_NOTHING = C.GTK_IM_PREEDIT_NOTHING
const IM_PREEDIT_CALLBACK = C.GTK_IM_PREEDIT_CALLBACK
const IM_PREEDIT_NONE = C.GTK_IM_PREEDIT_NONE
const IM_STATUS_NOTHING = C.GTK_IM_STATUS_NOTHING
const IM_STATUS_CALLBACK = C.GTK_IM_STATUS_CALLBACK
const IM_STATUS_NONE = C.GTK_IM_STATUS_NONE
const ICON_LOOKUP_NO_SVG = C.GTK_ICON_LOOKUP_NO_SVG
const ICON_LOOKUP_FORCE_SVG = C.GTK_ICON_LOOKUP_FORCE_SVG
const ICON_LOOKUP_USE_BUILTIN = C.GTK_ICON_LOOKUP_USE_BUILTIN
const ICON_LOOKUP_GENERIC_FALLBACK = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
const ICON_LOOKUP_FORCE_SIZE = C.GTK_ICON_LOOKUP_FORCE_SIZE
const ICON_SIZE_INVALID = C.GTK_ICON_SIZE_INVALID
const ICON_SIZE_MENU = C.GTK_ICON_SIZE_MENU
const ICON_SIZE_SMALL_TOOLBAR = C.GTK_ICON_SIZE_SMALL_TOOLBAR
const ICON_SIZE_LARGE_TOOLBAR = C.GTK_ICON_SIZE_LARGE_TOOLBAR
const ICON_SIZE_BUTTON = C.GTK_ICON_SIZE_BUTTON
const ICON_SIZE_DND = C.GTK_ICON_SIZE_DND
const ICON_SIZE_DIALOG = C.GTK_ICON_SIZE_DIALOG
const ICON_THEME_NOT_FOUND = C.GTK_ICON_THEME_NOT_FOUND
const ICON_THEME_FAILED = C.GTK_ICON_THEME_FAILED
const ICON_VIEW_NO_DROP = C.GTK_ICON_VIEW_NO_DROP
const ICON_VIEW_DROP_INTO = C.GTK_ICON_VIEW_DROP_INTO
const ICON_VIEW_DROP_LEFT = C.GTK_ICON_VIEW_DROP_LEFT
const ICON_VIEW_DROP_RIGHT = C.GTK_ICON_VIEW_DROP_RIGHT
const ICON_VIEW_DROP_ABOVE = C.GTK_ICON_VIEW_DROP_ABOVE
const ICON_VIEW_DROP_BELOW = C.GTK_ICON_VIEW_DROP_BELOW
const IMAGE_EMPTY = C.GTK_IMAGE_EMPTY
const IMAGE_PIXBUF = C.GTK_IMAGE_PIXBUF
const IMAGE_STOCK = C.GTK_IMAGE_STOCK
const IMAGE_ICON_SET = C.GTK_IMAGE_ICON_SET
const IMAGE_ANIMATION = C.GTK_IMAGE_ANIMATION
const IMAGE_ICON_NAME = C.GTK_IMAGE_ICON_NAME
const IMAGE_GICON = C.GTK_IMAGE_GICON
const INPUT_HINT_NONE = C.GTK_INPUT_HINT_NONE
const INPUT_HINT_SPELLCHECK = C.GTK_INPUT_HINT_SPELLCHECK
const INPUT_HINT_NO_SPELLCHECK = C.GTK_INPUT_HINT_NO_SPELLCHECK
const INPUT_HINT_WORD_COMPLETION = C.GTK_INPUT_HINT_WORD_COMPLETION
const INPUT_HINT_LOWERCASE = C.GTK_INPUT_HINT_LOWERCASE
const INPUT_HINT_UPPERCASE_CHARS = C.GTK_INPUT_HINT_UPPERCASE_CHARS
const INPUT_HINT_UPPERCASE_WORDS = C.GTK_INPUT_HINT_UPPERCASE_WORDS
const INPUT_HINT_UPPERCASE_SENTENCES = C.GTK_INPUT_HINT_UPPERCASE_SENTENCES
const INPUT_HINT_INHIBIT_OSK = C.GTK_INPUT_HINT_INHIBIT_OSK
const INPUT_PURPOSE_FREE_FORM = C.GTK_INPUT_PURPOSE_FREE_FORM
const INPUT_PURPOSE_ALPHA = C.GTK_INPUT_PURPOSE_ALPHA
const INPUT_PURPOSE_DIGITS = C.GTK_INPUT_PURPOSE_DIGITS
const INPUT_PURPOSE_NUMBER = C.GTK_INPUT_PURPOSE_NUMBER
const INPUT_PURPOSE_PHONE = C.GTK_INPUT_PURPOSE_PHONE
const INPUT_PURPOSE_URL = C.GTK_INPUT_PURPOSE_URL
const INPUT_PURPOSE_EMAIL = C.GTK_INPUT_PURPOSE_EMAIL
const INPUT_PURPOSE_NAME = C.GTK_INPUT_PURPOSE_NAME
const INPUT_PURPOSE_PASSWORD = C.GTK_INPUT_PURPOSE_PASSWORD
const INPUT_PURPOSE_PIN = C.GTK_INPUT_PURPOSE_PIN
const JUNCTION_NONE = C.GTK_JUNCTION_NONE
const JUNCTION_CORNER_TOPLEFT = C.GTK_JUNCTION_CORNER_TOPLEFT
const JUNCTION_CORNER_TOPRIGHT = C.GTK_JUNCTION_CORNER_TOPRIGHT
const JUNCTION_CORNER_BOTTOMLEFT = C.GTK_JUNCTION_CORNER_BOTTOMLEFT
const JUNCTION_CORNER_BOTTOMRIGHT = C.GTK_JUNCTION_CORNER_BOTTOMRIGHT
const JUNCTION_TOP = C.GTK_JUNCTION_TOP
const JUNCTION_BOTTOM = C.GTK_JUNCTION_BOTTOM
const JUNCTION_LEFT = C.GTK_JUNCTION_LEFT
const JUNCTION_RIGHT = C.GTK_JUNCTION_RIGHT
const JUSTIFY_LEFT = C.GTK_JUSTIFY_LEFT
const JUSTIFY_RIGHT = C.GTK_JUSTIFY_RIGHT
const JUSTIFY_CENTER = C.GTK_JUSTIFY_CENTER
const JUSTIFY_FILL = C.GTK_JUSTIFY_FILL
const LEVEL_BAR_MODE_CONTINUOUS = C.GTK_LEVEL_BAR_MODE_CONTINUOUS
const LEVEL_BAR_MODE_DISCRETE = C.GTK_LEVEL_BAR_MODE_DISCRETE
const LICENSE_UNKNOWN = C.GTK_LICENSE_UNKNOWN
const LICENSE_CUSTOM = C.GTK_LICENSE_CUSTOM
const LICENSE_GPL_2_0 = C.GTK_LICENSE_GPL_2_0
const LICENSE_GPL_3_0 = C.GTK_LICENSE_GPL_3_0
const LICENSE_LGPL_2_1 = C.GTK_LICENSE_LGPL_2_1
const LICENSE_LGPL_3_0 = C.GTK_LICENSE_LGPL_3_0
const LICENSE_BSD = C.GTK_LICENSE_BSD
const LICENSE_MIT_X11 = C.GTK_LICENSE_MIT_X11
const LICENSE_ARTISTIC = C.GTK_LICENSE_ARTISTIC
const MENU_DIR_PARENT = C.GTK_MENU_DIR_PARENT
const MENU_DIR_CHILD = C.GTK_MENU_DIR_CHILD
const MENU_DIR_NEXT = C.GTK_MENU_DIR_NEXT
const MENU_DIR_PREV = C.GTK_MENU_DIR_PREV
const MESSAGE_INFO = C.GTK_MESSAGE_INFO
const MESSAGE_WARNING = C.GTK_MESSAGE_WARNING
const MESSAGE_QUESTION = C.GTK_MESSAGE_QUESTION
const MESSAGE_ERROR = C.GTK_MESSAGE_ERROR
const MESSAGE_OTHER = C.GTK_MESSAGE_OTHER
const MOVEMENT_LOGICAL_POSITIONS = C.GTK_MOVEMENT_LOGICAL_POSITIONS
const MOVEMENT_VISUAL_POSITIONS = C.GTK_MOVEMENT_VISUAL_POSITIONS
const MOVEMENT_WORDS = C.GTK_MOVEMENT_WORDS
const MOVEMENT_DISPLAY_LINES = C.GTK_MOVEMENT_DISPLAY_LINES
const MOVEMENT_DISPLAY_LINE_ENDS = C.GTK_MOVEMENT_DISPLAY_LINE_ENDS
const MOVEMENT_PARAGRAPHS = C.GTK_MOVEMENT_PARAGRAPHS
const MOVEMENT_PARAGRAPH_ENDS = C.GTK_MOVEMENT_PARAGRAPH_ENDS
const MOVEMENT_PAGES = C.GTK_MOVEMENT_PAGES
const MOVEMENT_BUFFER_ENDS = C.GTK_MOVEMENT_BUFFER_ENDS
const MOVEMENT_HORIZONTAL_PAGES = C.GTK_MOVEMENT_HORIZONTAL_PAGES
const NOTEBOOK_TAB_FIRST = C.GTK_NOTEBOOK_TAB_FIRST
const NOTEBOOK_TAB_LAST = C.GTK_NOTEBOOK_TAB_LAST
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
const ORIENTATION_HORIZONTAL = C.GTK_ORIENTATION_HORIZONTAL
const ORIENTATION_VERTICAL = C.GTK_ORIENTATION_VERTICAL
const PACK_DIRECTION_LTR = C.GTK_PACK_DIRECTION_LTR
const PACK_DIRECTION_RTL = C.GTK_PACK_DIRECTION_RTL
const PACK_DIRECTION_TTB = C.GTK_PACK_DIRECTION_TTB
const PACK_DIRECTION_BTT = C.GTK_PACK_DIRECTION_BTT
const PACK_START = C.GTK_PACK_START
const PACK_END = C.GTK_PACK_END
const PAGE_ORIENTATION_PORTRAIT = C.GTK_PAGE_ORIENTATION_PORTRAIT
const PAGE_ORIENTATION_LANDSCAPE = C.GTK_PAGE_ORIENTATION_LANDSCAPE
const PAGE_ORIENTATION_REVERSE_PORTRAIT = C.GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT
const PAGE_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
const PAGE_SET_ALL = C.GTK_PAGE_SET_ALL
const PAGE_SET_EVEN = C.GTK_PAGE_SET_EVEN
const PAGE_SET_ODD = C.GTK_PAGE_SET_ODD
const PATH_PRIO_LOWEST = C.GTK_PATH_PRIO_LOWEST
const PATH_PRIO_GTK = C.GTK_PATH_PRIO_GTK
const PATH_PRIO_APPLICATION = C.GTK_PATH_PRIO_APPLICATION
const PATH_PRIO_THEME = C.GTK_PATH_PRIO_THEME
const PATH_PRIO_RC = C.GTK_PATH_PRIO_RC
const PATH_PRIO_HIGHEST = C.GTK_PATH_PRIO_HIGHEST
const PATH_WIDGET = C.GTK_PATH_WIDGET
const PATH_WIDGET_CLASS = C.GTK_PATH_WIDGET_CLASS
const PATH_CLASS = C.GTK_PATH_CLASS
const POLICY_ALWAYS = C.GTK_POLICY_ALWAYS
const POLICY_AUTOMATIC = C.GTK_POLICY_AUTOMATIC
const POLICY_NEVER = C.GTK_POLICY_NEVER
const POS_LEFT = C.GTK_POS_LEFT
const POS_RIGHT = C.GTK_POS_RIGHT
const POS_TOP = C.GTK_POS_TOP
const POS_BOTTOM = C.GTK_POS_BOTTOM
const PRINT_DUPLEX_SIMPLEX = C.GTK_PRINT_DUPLEX_SIMPLEX
const PRINT_DUPLEX_HORIZONTAL = C.GTK_PRINT_DUPLEX_HORIZONTAL
const PRINT_DUPLEX_VERTICAL = C.GTK_PRINT_DUPLEX_VERTICAL
const PRINT_ERROR_GENERAL = C.GTK_PRINT_ERROR_GENERAL
const PRINT_ERROR_INTERNAL_ERROR = C.GTK_PRINT_ERROR_INTERNAL_ERROR
const PRINT_ERROR_NOMEM = C.GTK_PRINT_ERROR_NOMEM
const PRINT_ERROR_INVALID_FILE = C.GTK_PRINT_ERROR_INVALID_FILE
const PRINT_OPERATION_ACTION_PRINT_DIALOG = C.GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
const PRINT_OPERATION_ACTION_PRINT = C.GTK_PRINT_OPERATION_ACTION_PRINT
const PRINT_OPERATION_ACTION_PREVIEW = C.GTK_PRINT_OPERATION_ACTION_PREVIEW
const PRINT_OPERATION_ACTION_EXPORT = C.GTK_PRINT_OPERATION_ACTION_EXPORT
const PRINT_OPERATION_RESULT_ERROR = C.GTK_PRINT_OPERATION_RESULT_ERROR
const PRINT_OPERATION_RESULT_APPLY = C.GTK_PRINT_OPERATION_RESULT_APPLY
const PRINT_OPERATION_RESULT_CANCEL = C.GTK_PRINT_OPERATION_RESULT_CANCEL
const PRINT_OPERATION_RESULT_IN_PROGRESS = C.GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
const PRINT_PAGES_ALL = C.GTK_PRINT_PAGES_ALL
const PRINT_PAGES_CURRENT = C.GTK_PRINT_PAGES_CURRENT
const PRINT_PAGES_RANGES = C.GTK_PRINT_PAGES_RANGES
const PRINT_PAGES_SELECTION = C.GTK_PRINT_PAGES_SELECTION
const PRINT_QUALITY_LOW = C.GTK_PRINT_QUALITY_LOW
const PRINT_QUALITY_NORMAL = C.GTK_PRINT_QUALITY_NORMAL
const PRINT_QUALITY_HIGH = C.GTK_PRINT_QUALITY_HIGH
const PRINT_QUALITY_DRAFT = C.GTK_PRINT_QUALITY_DRAFT
const PRINT_STATUS_INITIAL = C.GTK_PRINT_STATUS_INITIAL
const PRINT_STATUS_PREPARING = C.GTK_PRINT_STATUS_PREPARING
const PRINT_STATUS_GENERATING_DATA = C.GTK_PRINT_STATUS_GENERATING_DATA
const PRINT_STATUS_SENDING_DATA = C.GTK_PRINT_STATUS_SENDING_DATA
const PRINT_STATUS_PENDING = C.GTK_PRINT_STATUS_PENDING
const PRINT_STATUS_PENDING_ISSUE = C.GTK_PRINT_STATUS_PENDING_ISSUE
const PRINT_STATUS_PRINTING = C.GTK_PRINT_STATUS_PRINTING
const PRINT_STATUS_FINISHED = C.GTK_PRINT_STATUS_FINISHED
const PRINT_STATUS_FINISHED_ABORTED = C.GTK_PRINT_STATUS_FINISHED_ABORTED
const RC_FG = C.GTK_RC_FG
const RC_BG = C.GTK_RC_BG
const RC_TEXT = C.GTK_RC_TEXT
const RC_BASE = C.GTK_RC_BASE
const RC_TOKEN_INVALID = C.GTK_RC_TOKEN_INVALID
const RC_TOKEN_INCLUDE = C.GTK_RC_TOKEN_INCLUDE
const RC_TOKEN_NORMAL = C.GTK_RC_TOKEN_NORMAL
const RC_TOKEN_ACTIVE = C.GTK_RC_TOKEN_ACTIVE
const RC_TOKEN_PRELIGHT = C.GTK_RC_TOKEN_PRELIGHT
const RC_TOKEN_SELECTED = C.GTK_RC_TOKEN_SELECTED
const RC_TOKEN_INSENSITIVE = C.GTK_RC_TOKEN_INSENSITIVE
const RC_TOKEN_FG = C.GTK_RC_TOKEN_FG
const RC_TOKEN_BG = C.GTK_RC_TOKEN_BG
const RC_TOKEN_TEXT = C.GTK_RC_TOKEN_TEXT
const RC_TOKEN_BASE = C.GTK_RC_TOKEN_BASE
const RC_TOKEN_XTHICKNESS = C.GTK_RC_TOKEN_XTHICKNESS
const RC_TOKEN_YTHICKNESS = C.GTK_RC_TOKEN_YTHICKNESS
const RC_TOKEN_FONT = C.GTK_RC_TOKEN_FONT
const RC_TOKEN_FONTSET = C.GTK_RC_TOKEN_FONTSET
const RC_TOKEN_FONT_NAME = C.GTK_RC_TOKEN_FONT_NAME
const RC_TOKEN_BG_PIXMAP = C.GTK_RC_TOKEN_BG_PIXMAP
const RC_TOKEN_PIXMAP_PATH = C.GTK_RC_TOKEN_PIXMAP_PATH
const RC_TOKEN_STYLE = C.GTK_RC_TOKEN_STYLE
const RC_TOKEN_BINDING = C.GTK_RC_TOKEN_BINDING
const RC_TOKEN_BIND = C.GTK_RC_TOKEN_BIND
const RC_TOKEN_WIDGET = C.GTK_RC_TOKEN_WIDGET
const RC_TOKEN_WIDGET_CLASS = C.GTK_RC_TOKEN_WIDGET_CLASS
const RC_TOKEN_CLASS = C.GTK_RC_TOKEN_CLASS
const RC_TOKEN_LOWEST = C.GTK_RC_TOKEN_LOWEST
const RC_TOKEN_GTK = C.GTK_RC_TOKEN_GTK
const RC_TOKEN_APPLICATION = C.GTK_RC_TOKEN_APPLICATION
const RC_TOKEN_THEME = C.GTK_RC_TOKEN_THEME
const RC_TOKEN_RC = C.GTK_RC_TOKEN_RC
const RC_TOKEN_HIGHEST = C.GTK_RC_TOKEN_HIGHEST
const RC_TOKEN_ENGINE = C.GTK_RC_TOKEN_ENGINE
const RC_TOKEN_MODULE_PATH = C.GTK_RC_TOKEN_MODULE_PATH
const RC_TOKEN_IM_MODULE_PATH = C.GTK_RC_TOKEN_IM_MODULE_PATH
const RC_TOKEN_IM_MODULE_FILE = C.GTK_RC_TOKEN_IM_MODULE_FILE
const RC_TOKEN_STOCK = C.GTK_RC_TOKEN_STOCK
const RC_TOKEN_LTR = C.GTK_RC_TOKEN_LTR
const RC_TOKEN_RTL = C.GTK_RC_TOKEN_RTL
const RC_TOKEN_COLOR = C.GTK_RC_TOKEN_COLOR
const RC_TOKEN_UNBIND = C.GTK_RC_TOKEN_UNBIND
const RC_TOKEN_LAST = C.GTK_RC_TOKEN_LAST
const RECENT_CHOOSER_ERROR_NOT_FOUND = C.GTK_RECENT_CHOOSER_ERROR_NOT_FOUND
const RECENT_CHOOSER_ERROR_INVALID_URI = C.GTK_RECENT_CHOOSER_ERROR_INVALID_URI
const RECENT_FILTER_URI = C.GTK_RECENT_FILTER_URI
const RECENT_FILTER_DISPLAY_NAME = C.GTK_RECENT_FILTER_DISPLAY_NAME
const RECENT_FILTER_MIME_TYPE = C.GTK_RECENT_FILTER_MIME_TYPE
const RECENT_FILTER_APPLICATION = C.GTK_RECENT_FILTER_APPLICATION
const RECENT_FILTER_GROUP = C.GTK_RECENT_FILTER_GROUP
const RECENT_FILTER_AGE = C.GTK_RECENT_FILTER_AGE
const RECENT_MANAGER_ERROR_NOT_FOUND = C.GTK_RECENT_MANAGER_ERROR_NOT_FOUND
const RECENT_MANAGER_ERROR_INVALID_URI = C.GTK_RECENT_MANAGER_ERROR_INVALID_URI
const RECENT_MANAGER_ERROR_INVALID_ENCODING = C.GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING
const RECENT_MANAGER_ERROR_NOT_REGISTERED = C.GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED
const RECENT_MANAGER_ERROR_READ = C.GTK_RECENT_MANAGER_ERROR_READ
const RECENT_MANAGER_ERROR_WRITE = C.GTK_RECENT_MANAGER_ERROR_WRITE
const RECENT_MANAGER_ERROR_UNKNOWN = C.GTK_RECENT_MANAGER_ERROR_UNKNOWN
const RECENT_SORT_NONE = C.GTK_RECENT_SORT_NONE
const RECENT_SORT_MRU = C.GTK_RECENT_SORT_MRU
const RECENT_SORT_LRU = C.GTK_RECENT_SORT_LRU
const RECENT_SORT_CUSTOM = C.GTK_RECENT_SORT_CUSTOM
const REGION_EVEN = C.GTK_REGION_EVEN
const REGION_ODD = C.GTK_REGION_ODD
const REGION_FIRST = C.GTK_REGION_FIRST
const REGION_LAST = C.GTK_REGION_LAST
const REGION_ONLY = C.GTK_REGION_ONLY
const REGION_SORTED = C.GTK_REGION_SORTED
const RELIEF_NORMAL = C.GTK_RELIEF_NORMAL
const RELIEF_HALF = C.GTK_RELIEF_HALF
const RELIEF_NONE = C.GTK_RELIEF_NONE
const RESIZE_PARENT = C.GTK_RESIZE_PARENT
const RESIZE_QUEUE = C.GTK_RESIZE_QUEUE
const RESIZE_IMMEDIATE = C.GTK_RESIZE_IMMEDIATE
const RESPONSE_NONE = C.GTK_RESPONSE_NONE
const RESPONSE_REJECT = C.GTK_RESPONSE_REJECT
const RESPONSE_ACCEPT = C.GTK_RESPONSE_ACCEPT
const RESPONSE_DELETE_EVENT = C.GTK_RESPONSE_DELETE_EVENT
const RESPONSE_OK = C.GTK_RESPONSE_OK
const RESPONSE_CANCEL = C.GTK_RESPONSE_CANCEL
const RESPONSE_CLOSE = C.GTK_RESPONSE_CLOSE
const RESPONSE_YES = C.GTK_RESPONSE_YES
const RESPONSE_NO = C.GTK_RESPONSE_NO
const RESPONSE_APPLY = C.GTK_RESPONSE_APPLY
const RESPONSE_HELP = C.GTK_RESPONSE_HELP
const SCROLL_STEPS = C.GTK_SCROLL_STEPS
const SCROLL_PAGES = C.GTK_SCROLL_PAGES
const SCROLL_ENDS = C.GTK_SCROLL_ENDS
const SCROLL_HORIZONTAL_STEPS = C.GTK_SCROLL_HORIZONTAL_STEPS
const SCROLL_HORIZONTAL_PAGES = C.GTK_SCROLL_HORIZONTAL_PAGES
const SCROLL_HORIZONTAL_ENDS = C.GTK_SCROLL_HORIZONTAL_ENDS
const SCROLL_NONE = C.GTK_SCROLL_NONE
const SCROLL_JUMP = C.GTK_SCROLL_JUMP
const SCROLL_STEP_BACKWARD = C.GTK_SCROLL_STEP_BACKWARD
const SCROLL_STEP_FORWARD = C.GTK_SCROLL_STEP_FORWARD
const SCROLL_PAGE_BACKWARD = C.GTK_SCROLL_PAGE_BACKWARD
const SCROLL_PAGE_FORWARD = C.GTK_SCROLL_PAGE_FORWARD
const SCROLL_STEP_UP = C.GTK_SCROLL_STEP_UP
const SCROLL_STEP_DOWN = C.GTK_SCROLL_STEP_DOWN
const SCROLL_PAGE_UP = C.GTK_SCROLL_PAGE_UP
const SCROLL_PAGE_DOWN = C.GTK_SCROLL_PAGE_DOWN
const SCROLL_STEP_LEFT = C.GTK_SCROLL_STEP_LEFT
const SCROLL_STEP_RIGHT = C.GTK_SCROLL_STEP_RIGHT
const SCROLL_PAGE_LEFT = C.GTK_SCROLL_PAGE_LEFT
const SCROLL_PAGE_RIGHT = C.GTK_SCROLL_PAGE_RIGHT
const SCROLL_START = C.GTK_SCROLL_START
const SCROLL_END = C.GTK_SCROLL_END
const SCROLL_MINIMUM = C.GTK_SCROLL_MINIMUM
const SCROLL_NATURAL = C.GTK_SCROLL_NATURAL
const SELECTION_NONE = C.GTK_SELECTION_NONE
const SELECTION_SINGLE = C.GTK_SELECTION_SINGLE
const SELECTION_BROWSE = C.GTK_SELECTION_BROWSE
const SELECTION_MULTIPLE = C.GTK_SELECTION_MULTIPLE
const SENSITIVITY_AUTO = C.GTK_SENSITIVITY_AUTO
const SENSITIVITY_ON = C.GTK_SENSITIVITY_ON
const SENSITIVITY_OFF = C.GTK_SENSITIVITY_OFF
const SHADOW_NONE = C.GTK_SHADOW_NONE
const SHADOW_IN = C.GTK_SHADOW_IN
const SHADOW_OUT = C.GTK_SHADOW_OUT
const SHADOW_ETCHED_IN = C.GTK_SHADOW_ETCHED_IN
const SHADOW_ETCHED_OUT = C.GTK_SHADOW_ETCHED_OUT
const SIZE_GROUP_NONE = C.GTK_SIZE_GROUP_NONE
const SIZE_GROUP_HORIZONTAL = C.GTK_SIZE_GROUP_HORIZONTAL
const SIZE_GROUP_VERTICAL = C.GTK_SIZE_GROUP_VERTICAL
const SIZE_GROUP_BOTH = C.GTK_SIZE_GROUP_BOTH
const SIZE_REQUEST_HEIGHT_FOR_WIDTH = C.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
const SIZE_REQUEST_WIDTH_FOR_HEIGHT = C.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT
const SIZE_REQUEST_CONSTANT_SIZE = C.GTK_SIZE_REQUEST_CONSTANT_SIZE
const SORT_ASCENDING = C.GTK_SORT_ASCENDING
const SORT_DESCENDING = C.GTK_SORT_DESCENDING
const UPDATE_ALWAYS = C.GTK_UPDATE_ALWAYS
const UPDATE_IF_VALID = C.GTK_UPDATE_IF_VALID
const SPIN_STEP_FORWARD = C.GTK_SPIN_STEP_FORWARD
const SPIN_STEP_BACKWARD = C.GTK_SPIN_STEP_BACKWARD
const SPIN_PAGE_FORWARD = C.GTK_SPIN_PAGE_FORWARD
const SPIN_PAGE_BACKWARD = C.GTK_SPIN_PAGE_BACKWARD
const SPIN_HOME = C.GTK_SPIN_HOME
const SPIN_END = C.GTK_SPIN_END
const SPIN_USER_DEFINED = C.GTK_SPIN_USER_DEFINED
const STATE_FLAG_NORMAL = C.GTK_STATE_FLAG_NORMAL
const STATE_FLAG_ACTIVE = C.GTK_STATE_FLAG_ACTIVE
const STATE_FLAG_PRELIGHT = C.GTK_STATE_FLAG_PRELIGHT
const STATE_FLAG_SELECTED = C.GTK_STATE_FLAG_SELECTED
const STATE_FLAG_INSENSITIVE = C.GTK_STATE_FLAG_INSENSITIVE
const STATE_FLAG_INCONSISTENT = C.GTK_STATE_FLAG_INCONSISTENT
const STATE_FLAG_FOCUSED = C.GTK_STATE_FLAG_FOCUSED
const STATE_FLAG_BACKDROP = C.GTK_STATE_FLAG_BACKDROP
const STATE_NORMAL = C.GTK_STATE_NORMAL
const STATE_ACTIVE = C.GTK_STATE_ACTIVE
const STATE_PRELIGHT = C.GTK_STATE_PRELIGHT
const STATE_SELECTED = C.GTK_STATE_SELECTED
const STATE_INSENSITIVE = C.GTK_STATE_INSENSITIVE
const STATE_INCONSISTENT = C.GTK_STATE_INCONSISTENT
const STATE_FOCUSED = C.GTK_STATE_FOCUSED
const TARGET_SAME_APP = C.GTK_TARGET_SAME_APP
const TARGET_SAME_WIDGET = C.GTK_TARGET_SAME_WIDGET
const TARGET_OTHER_APP = C.GTK_TARGET_OTHER_APP
const TARGET_OTHER_WIDGET = C.GTK_TARGET_OTHER_WIDGET
const TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = C.GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS
const TEXT_BUFFER_TARGET_INFO_RICH_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT
const TEXT_BUFFER_TARGET_INFO_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_TEXT
const TEXT_DIR_NONE = C.GTK_TEXT_DIR_NONE
const TEXT_DIR_LTR = C.GTK_TEXT_DIR_LTR
const TEXT_DIR_RTL = C.GTK_TEXT_DIR_RTL
const TEXT_SEARCH_VISIBLE_ONLY = C.GTK_TEXT_SEARCH_VISIBLE_ONLY
const TEXT_SEARCH_TEXT_ONLY = C.GTK_TEXT_SEARCH_TEXT_ONLY
const TEXT_SEARCH_CASE_INSENSITIVE = C.GTK_TEXT_SEARCH_CASE_INSENSITIVE
const TEXT_WINDOW_PRIVATE = C.GTK_TEXT_WINDOW_PRIVATE
const TEXT_WINDOW_WIDGET = C.GTK_TEXT_WINDOW_WIDGET
const TEXT_WINDOW_TEXT = C.GTK_TEXT_WINDOW_TEXT
const TEXT_WINDOW_LEFT = C.GTK_TEXT_WINDOW_LEFT
const TEXT_WINDOW_RIGHT = C.GTK_TEXT_WINDOW_RIGHT
const TEXT_WINDOW_TOP = C.GTK_TEXT_WINDOW_TOP
const TEXT_WINDOW_BOTTOM = C.GTK_TEXT_WINDOW_BOTTOM
const TOOL_PALETTE_DRAG_ITEMS = C.GTK_TOOL_PALETTE_DRAG_ITEMS
const TOOL_PALETTE_DRAG_GROUPS = C.GTK_TOOL_PALETTE_DRAG_GROUPS
const TOOLBAR_SPACE_EMPTY = C.GTK_TOOLBAR_SPACE_EMPTY
const TOOLBAR_SPACE_LINE = C.GTK_TOOLBAR_SPACE_LINE
const TOOLBAR_ICONS = C.GTK_TOOLBAR_ICONS
const TOOLBAR_TEXT = C.GTK_TOOLBAR_TEXT
const TOOLBAR_BOTH = C.GTK_TOOLBAR_BOTH
const TOOLBAR_BOTH_HORIZ = C.GTK_TOOLBAR_BOTH_HORIZ
const TREE_MODEL_ITERS_PERSIST = C.GTK_TREE_MODEL_ITERS_PERSIST
const TREE_MODEL_LIST_ONLY = C.GTK_TREE_MODEL_LIST_ONLY
const TREE_VIEW_COLUMN_GROW_ONLY = C.GTK_TREE_VIEW_COLUMN_GROW_ONLY
const TREE_VIEW_COLUMN_AUTOSIZE = C.GTK_TREE_VIEW_COLUMN_AUTOSIZE
const TREE_VIEW_COLUMN_FIXED = C.GTK_TREE_VIEW_COLUMN_FIXED
const TREE_VIEW_DROP_BEFORE = C.GTK_TREE_VIEW_DROP_BEFORE
const TREE_VIEW_DROP_AFTER = C.GTK_TREE_VIEW_DROP_AFTER
const TREE_VIEW_DROP_INTO_OR_BEFORE = C.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
const TREE_VIEW_DROP_INTO_OR_AFTER = C.GTK_TREE_VIEW_DROP_INTO_OR_AFTER
const TREE_VIEW_GRID_LINES_NONE = C.GTK_TREE_VIEW_GRID_LINES_NONE
const TREE_VIEW_GRID_LINES_HORIZONTAL = C.GTK_TREE_VIEW_GRID_LINES_HORIZONTAL
const TREE_VIEW_GRID_LINES_VERTICAL = C.GTK_TREE_VIEW_GRID_LINES_VERTICAL
const TREE_VIEW_GRID_LINES_BOTH = C.GTK_TREE_VIEW_GRID_LINES_BOTH
const UI_MANAGER_AUTO = C.GTK_UI_MANAGER_AUTO
const UI_MANAGER_MENUBAR = C.GTK_UI_MANAGER_MENUBAR
const UI_MANAGER_MENU = C.GTK_UI_MANAGER_MENU
const UI_MANAGER_TOOLBAR = C.GTK_UI_MANAGER_TOOLBAR
const UI_MANAGER_PLACEHOLDER = C.GTK_UI_MANAGER_PLACEHOLDER
const UI_MANAGER_POPUP = C.GTK_UI_MANAGER_POPUP
const UI_MANAGER_MENUITEM = C.GTK_UI_MANAGER_MENUITEM
const UI_MANAGER_TOOLITEM = C.GTK_UI_MANAGER_TOOLITEM
const UI_MANAGER_SEPARATOR = C.GTK_UI_MANAGER_SEPARATOR
const UI_MANAGER_ACCELERATOR = C.GTK_UI_MANAGER_ACCELERATOR
const UI_MANAGER_POPUP_WITH_ACCELS = C.GTK_UI_MANAGER_POPUP_WITH_ACCELS
const UNIT_NONE = C.GTK_UNIT_NONE
const UNIT_POINTS = C.GTK_UNIT_POINTS
const UNIT_INCH = C.GTK_UNIT_INCH
const UNIT_MM = C.GTK_UNIT_MM
const WIDGET_HELP_TOOLTIP = C.GTK_WIDGET_HELP_TOOLTIP
const WIDGET_HELP_WHATS_THIS = C.GTK_WIDGET_HELP_WHATS_THIS
const WIN_POS_NONE = C.GTK_WIN_POS_NONE
const WIN_POS_CENTER = C.GTK_WIN_POS_CENTER
const WIN_POS_MOUSE = C.GTK_WIN_POS_MOUSE
const WIN_POS_CENTER_ALWAYS = C.GTK_WIN_POS_CENTER_ALWAYS
const WIN_POS_CENTER_ON_PARENT = C.GTK_WIN_POS_CENTER_ON_PARENT
const WINDOW_TOPLEVEL = C.GTK_WINDOW_TOPLEVEL
const WINDOW_POPUP = C.GTK_WINDOW_POPUP
const WRAP_NONE = C.GTK_WRAP_NONE
const WRAP_CHAR = C.GTK_WRAP_CHAR
const WRAP_WORD = C.GTK_WRAP_WORD
const WRAP_WORD_CHAR = C.GTK_WRAP_WORD_CHAR
const BINARY_AGE = C.GTK_BINARY_AGE
const INPUT_ERROR = C.GTK_INPUT_ERROR
const INTERFACE_AGE = C.GTK_INTERFACE_AGE
const LEVEL_BAR_OFFSET_HIGH = C.GTK_LEVEL_BAR_OFFSET_HIGH
const LEVEL_BAR_OFFSET_LOW = C.GTK_LEVEL_BAR_OFFSET_LOW
const MAJOR_VERSION = C.GTK_MAJOR_VERSION
const MAX_COMPOSE_LEN = C.GTK_MAX_COMPOSE_LEN
const MICRO_VERSION = C.GTK_MICRO_VERSION
const MINOR_VERSION = C.GTK_MINOR_VERSION
const PAPER_NAME_A3 = C.GTK_PAPER_NAME_A3
const PAPER_NAME_A4 = C.GTK_PAPER_NAME_A4
const PAPER_NAME_A5 = C.GTK_PAPER_NAME_A5
const PAPER_NAME_B5 = C.GTK_PAPER_NAME_B5
const PAPER_NAME_EXECUTIVE = C.GTK_PAPER_NAME_EXECUTIVE
const PAPER_NAME_LEGAL = C.GTK_PAPER_NAME_LEGAL
const PAPER_NAME_LETTER = C.GTK_PAPER_NAME_LETTER
const PATH_PRIO_MASK = C.GTK_PATH_PRIO_MASK
const PRINT_SETTINGS_COLLATE = C.GTK_PRINT_SETTINGS_COLLATE
const PRINT_SETTINGS_DEFAULT_SOURCE = C.GTK_PRINT_SETTINGS_DEFAULT_SOURCE
const PRINT_SETTINGS_DITHER = C.GTK_PRINT_SETTINGS_DITHER
const PRINT_SETTINGS_DUPLEX = C.GTK_PRINT_SETTINGS_DUPLEX
const PRINT_SETTINGS_FINISHINGS = C.GTK_PRINT_SETTINGS_FINISHINGS
const PRINT_SETTINGS_MEDIA_TYPE = C.GTK_PRINT_SETTINGS_MEDIA_TYPE
const PRINT_SETTINGS_NUMBER_UP = C.GTK_PRINT_SETTINGS_NUMBER_UP
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = C.GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT
const PRINT_SETTINGS_N_COPIES = C.GTK_PRINT_SETTINGS_N_COPIES
const PRINT_SETTINGS_ORIENTATION = C.GTK_PRINT_SETTINGS_ORIENTATION
const PRINT_SETTINGS_OUTPUT_BASENAME = C.GTK_PRINT_SETTINGS_OUTPUT_BASENAME
const PRINT_SETTINGS_OUTPUT_BIN = C.GTK_PRINT_SETTINGS_OUTPUT_BIN
const PRINT_SETTINGS_OUTPUT_DIR = C.GTK_PRINT_SETTINGS_OUTPUT_DIR
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = C.GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT
const PRINT_SETTINGS_OUTPUT_URI = C.GTK_PRINT_SETTINGS_OUTPUT_URI
const PRINT_SETTINGS_PAGE_RANGES = C.GTK_PRINT_SETTINGS_PAGE_RANGES
const PRINT_SETTINGS_PAGE_SET = C.GTK_PRINT_SETTINGS_PAGE_SET
const PRINT_SETTINGS_PAPER_FORMAT = C.GTK_PRINT_SETTINGS_PAPER_FORMAT
const PRINT_SETTINGS_PAPER_HEIGHT = C.GTK_PRINT_SETTINGS_PAPER_HEIGHT
const PRINT_SETTINGS_PAPER_WIDTH = C.GTK_PRINT_SETTINGS_PAPER_WIDTH
const PRINT_SETTINGS_PRINTER = C.GTK_PRINT_SETTINGS_PRINTER
const PRINT_SETTINGS_PRINTER_LPI = C.GTK_PRINT_SETTINGS_PRINTER_LPI
const PRINT_SETTINGS_PRINT_PAGES = C.GTK_PRINT_SETTINGS_PRINT_PAGES
const PRINT_SETTINGS_QUALITY = C.GTK_PRINT_SETTINGS_QUALITY
const PRINT_SETTINGS_RESOLUTION = C.GTK_PRINT_SETTINGS_RESOLUTION
const PRINT_SETTINGS_RESOLUTION_X = C.GTK_PRINT_SETTINGS_RESOLUTION_X
const PRINT_SETTINGS_RESOLUTION_Y = C.GTK_PRINT_SETTINGS_RESOLUTION_Y
const PRINT_SETTINGS_REVERSE = C.GTK_PRINT_SETTINGS_REVERSE
const PRINT_SETTINGS_SCALE = C.GTK_PRINT_SETTINGS_SCALE
const PRINT_SETTINGS_USE_COLOR = C.GTK_PRINT_SETTINGS_USE_COLOR
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION
const PRIORITY_RESIZE = C.GTK_PRIORITY_RESIZE
const STOCK_ABOUT = C.GTK_STOCK_ABOUT
const STOCK_ADD = C.GTK_STOCK_ADD
const STOCK_APPLY = C.GTK_STOCK_APPLY
const STOCK_BOLD = C.GTK_STOCK_BOLD
const STOCK_CANCEL = C.GTK_STOCK_CANCEL
const STOCK_CAPS_LOCK_WARNING = C.GTK_STOCK_CAPS_LOCK_WARNING
const STOCK_CDROM = C.GTK_STOCK_CDROM
const STOCK_CLEAR = C.GTK_STOCK_CLEAR
const STOCK_CLOSE = C.GTK_STOCK_CLOSE
const STOCK_COLOR_PICKER = C.GTK_STOCK_COLOR_PICKER
const STOCK_CONNECT = C.GTK_STOCK_CONNECT
const STOCK_CONVERT = C.GTK_STOCK_CONVERT
const STOCK_COPY = C.GTK_STOCK_COPY
const STOCK_CUT = C.GTK_STOCK_CUT
const STOCK_DELETE = C.GTK_STOCK_DELETE
const STOCK_DIALOG_AUTHENTICATION = C.GTK_STOCK_DIALOG_AUTHENTICATION
const STOCK_DIALOG_ERROR = C.GTK_STOCK_DIALOG_ERROR
const STOCK_DIALOG_INFO = C.GTK_STOCK_DIALOG_INFO
const STOCK_DIALOG_QUESTION = C.GTK_STOCK_DIALOG_QUESTION
const STOCK_DIALOG_WARNING = C.GTK_STOCK_DIALOG_WARNING
const STOCK_DIRECTORY = C.GTK_STOCK_DIRECTORY
const STOCK_DISCARD = C.GTK_STOCK_DISCARD
const STOCK_DISCONNECT = C.GTK_STOCK_DISCONNECT
const STOCK_DND = C.GTK_STOCK_DND
const STOCK_DND_MULTIPLE = C.GTK_STOCK_DND_MULTIPLE
const STOCK_EDIT = C.GTK_STOCK_EDIT
const STOCK_EXECUTE = C.GTK_STOCK_EXECUTE
const STOCK_FILE = C.GTK_STOCK_FILE
const STOCK_FIND = C.GTK_STOCK_FIND
const STOCK_FIND_AND_REPLACE = C.GTK_STOCK_FIND_AND_REPLACE
const STOCK_FLOPPY = C.GTK_STOCK_FLOPPY
const STOCK_FULLSCREEN = C.GTK_STOCK_FULLSCREEN
const STOCK_GOTO_BOTTOM = C.GTK_STOCK_GOTO_BOTTOM
const STOCK_GOTO_FIRST = C.GTK_STOCK_GOTO_FIRST
const STOCK_GOTO_LAST = C.GTK_STOCK_GOTO_LAST
const STOCK_GOTO_TOP = C.GTK_STOCK_GOTO_TOP
const STOCK_GO_BACK = C.GTK_STOCK_GO_BACK
const STOCK_GO_DOWN = C.GTK_STOCK_GO_DOWN
const STOCK_GO_FORWARD = C.GTK_STOCK_GO_FORWARD
const STOCK_GO_UP = C.GTK_STOCK_GO_UP
const STOCK_HARDDISK = C.GTK_STOCK_HARDDISK
const STOCK_HELP = C.GTK_STOCK_HELP
const STOCK_HOME = C.GTK_STOCK_HOME
const STOCK_INDENT = C.GTK_STOCK_INDENT
const STOCK_INDEX = C.GTK_STOCK_INDEX
const STOCK_INFO = C.GTK_STOCK_INFO
const STOCK_ITALIC = C.GTK_STOCK_ITALIC
const STOCK_JUMP_TO = C.GTK_STOCK_JUMP_TO
const STOCK_JUSTIFY_CENTER = C.GTK_STOCK_JUSTIFY_CENTER
const STOCK_JUSTIFY_FILL = C.GTK_STOCK_JUSTIFY_FILL
const STOCK_JUSTIFY_LEFT = C.GTK_STOCK_JUSTIFY_LEFT
const STOCK_JUSTIFY_RIGHT = C.GTK_STOCK_JUSTIFY_RIGHT
const STOCK_LEAVE_FULLSCREEN = C.GTK_STOCK_LEAVE_FULLSCREEN
const STOCK_MEDIA_FORWARD = C.GTK_STOCK_MEDIA_FORWARD
const STOCK_MEDIA_NEXT = C.GTK_STOCK_MEDIA_NEXT
const STOCK_MEDIA_PAUSE = C.GTK_STOCK_MEDIA_PAUSE
const STOCK_MEDIA_PLAY = C.GTK_STOCK_MEDIA_PLAY
const STOCK_MEDIA_PREVIOUS = C.GTK_STOCK_MEDIA_PREVIOUS
const STOCK_MEDIA_RECORD = C.GTK_STOCK_MEDIA_RECORD
const STOCK_MEDIA_REWIND = C.GTK_STOCK_MEDIA_REWIND
const STOCK_MEDIA_STOP = C.GTK_STOCK_MEDIA_STOP
const STOCK_MISSING_IMAGE = C.GTK_STOCK_MISSING_IMAGE
const STOCK_NETWORK = C.GTK_STOCK_NETWORK
const STOCK_NEW = C.GTK_STOCK_NEW
const STOCK_NO = C.GTK_STOCK_NO
const STOCK_OK = C.GTK_STOCK_OK
const STOCK_OPEN = C.GTK_STOCK_OPEN
const STOCK_ORIENTATION_LANDSCAPE = C.GTK_STOCK_ORIENTATION_LANDSCAPE
const STOCK_ORIENTATION_PORTRAIT = C.GTK_STOCK_ORIENTATION_PORTRAIT
const STOCK_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
const STOCK_ORIENTATION_REVERSE_PORTRAIT = C.GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
const STOCK_PAGE_SETUP = C.GTK_STOCK_PAGE_SETUP
const STOCK_PASTE = C.GTK_STOCK_PASTE
const STOCK_PREFERENCES = C.GTK_STOCK_PREFERENCES
const STOCK_PRINT = C.GTK_STOCK_PRINT
const STOCK_PRINT_ERROR = C.GTK_STOCK_PRINT_ERROR
const STOCK_PRINT_PAUSED = C.GTK_STOCK_PRINT_PAUSED
const STOCK_PRINT_PREVIEW = C.GTK_STOCK_PRINT_PREVIEW
const STOCK_PRINT_REPORT = C.GTK_STOCK_PRINT_REPORT
const STOCK_PRINT_WARNING = C.GTK_STOCK_PRINT_WARNING
const STOCK_PROPERTIES = C.GTK_STOCK_PROPERTIES
const STOCK_QUIT = C.GTK_STOCK_QUIT
const STOCK_REDO = C.GTK_STOCK_REDO
const STOCK_REFRESH = C.GTK_STOCK_REFRESH
const STOCK_REMOVE = C.GTK_STOCK_REMOVE
const STOCK_REVERT_TO_SAVED = C.GTK_STOCK_REVERT_TO_SAVED
const STOCK_SAVE = C.GTK_STOCK_SAVE
const STOCK_SAVE_AS = C.GTK_STOCK_SAVE_AS
const STOCK_SELECT_ALL = C.GTK_STOCK_SELECT_ALL
const STOCK_SELECT_COLOR = C.GTK_STOCK_SELECT_COLOR
const STOCK_SELECT_FONT = C.GTK_STOCK_SELECT_FONT
const STOCK_SORT_ASCENDING = C.GTK_STOCK_SORT_ASCENDING
const STOCK_SORT_DESCENDING = C.GTK_STOCK_SORT_DESCENDING
const STOCK_SPELL_CHECK = C.GTK_STOCK_SPELL_CHECK
const STOCK_STOP = C.GTK_STOCK_STOP
const STOCK_STRIKETHROUGH = C.GTK_STOCK_STRIKETHROUGH
const STOCK_UNDELETE = C.GTK_STOCK_UNDELETE
const STOCK_UNDERLINE = C.GTK_STOCK_UNDERLINE
const STOCK_UNDO = C.GTK_STOCK_UNDO
const STOCK_UNINDENT = C.GTK_STOCK_UNINDENT
const STOCK_YES = C.GTK_STOCK_YES
const STOCK_ZOOM_100 = C.GTK_STOCK_ZOOM_100
const STOCK_ZOOM_FIT = C.GTK_STOCK_ZOOM_FIT
const STOCK_ZOOM_IN = C.GTK_STOCK_ZOOM_IN
const STOCK_ZOOM_OUT = C.GTK_STOCK_ZOOM_OUT
const STYLE_CLASS_ACCELERATOR = C.GTK_STYLE_CLASS_ACCELERATOR
const STYLE_CLASS_ARROW = C.GTK_STYLE_CLASS_ARROW
const STYLE_CLASS_BACKGROUND = C.GTK_STYLE_CLASS_BACKGROUND
const STYLE_CLASS_BOTTOM = C.GTK_STYLE_CLASS_BOTTOM
const STYLE_CLASS_BUTTON = C.GTK_STYLE_CLASS_BUTTON
const STYLE_CLASS_CALENDAR = C.GTK_STYLE_CLASS_CALENDAR
const STYLE_CLASS_CELL = C.GTK_STYLE_CLASS_CELL
const STYLE_CLASS_CHECK = C.GTK_STYLE_CLASS_CHECK
const STYLE_CLASS_COMBOBOX_ENTRY = C.GTK_STYLE_CLASS_COMBOBOX_ENTRY
const STYLE_CLASS_CURSOR_HANDLE = C.GTK_STYLE_CLASS_CURSOR_HANDLE
const STYLE_CLASS_DEFAULT = C.GTK_STYLE_CLASS_DEFAULT
const STYLE_CLASS_DIM_LABEL = C.GTK_STYLE_CLASS_DIM_LABEL
const STYLE_CLASS_DND = C.GTK_STYLE_CLASS_DND
const STYLE_CLASS_DOCK = C.GTK_STYLE_CLASS_DOCK
const STYLE_CLASS_ENTRY = C.GTK_STYLE_CLASS_ENTRY
const STYLE_CLASS_ERROR = C.GTK_STYLE_CLASS_ERROR
const STYLE_CLASS_EXPANDER = C.GTK_STYLE_CLASS_EXPANDER
const STYLE_CLASS_FRAME = C.GTK_STYLE_CLASS_FRAME
const STYLE_CLASS_GRIP = C.GTK_STYLE_CLASS_GRIP
const STYLE_CLASS_HEADER = C.GTK_STYLE_CLASS_HEADER
const STYLE_CLASS_HIGHLIGHT = C.GTK_STYLE_CLASS_HIGHLIGHT
const STYLE_CLASS_HORIZONTAL = C.GTK_STYLE_CLASS_HORIZONTAL
const STYLE_CLASS_IMAGE = C.GTK_STYLE_CLASS_IMAGE
const STYLE_CLASS_INFO = C.GTK_STYLE_CLASS_INFO
const STYLE_CLASS_INLINE_TOOLBAR = C.GTK_STYLE_CLASS_INLINE_TOOLBAR
const STYLE_CLASS_LEFT = C.GTK_STYLE_CLASS_LEFT
const STYLE_CLASS_LEVEL_BAR = C.GTK_STYLE_CLASS_LEVEL_BAR
const STYLE_CLASS_LINKED = C.GTK_STYLE_CLASS_LINKED
const STYLE_CLASS_MARK = C.GTK_STYLE_CLASS_MARK
const STYLE_CLASS_MENU = C.GTK_STYLE_CLASS_MENU
const STYLE_CLASS_MENUBAR = C.GTK_STYLE_CLASS_MENUBAR
const STYLE_CLASS_MENUITEM = C.GTK_STYLE_CLASS_MENUITEM
const STYLE_CLASS_NOTEBOOK = C.GTK_STYLE_CLASS_NOTEBOOK
const STYLE_CLASS_OSD = C.GTK_STYLE_CLASS_OSD
const STYLE_CLASS_PANE_SEPARATOR = C.GTK_STYLE_CLASS_PANE_SEPARATOR
const STYLE_CLASS_PRIMARY_TOOLBAR = C.GTK_STYLE_CLASS_PRIMARY_TOOLBAR
const STYLE_CLASS_PROGRESSBAR = C.GTK_STYLE_CLASS_PROGRESSBAR
const STYLE_CLASS_PULSE = C.GTK_STYLE_CLASS_PULSE
const STYLE_CLASS_QUESTION = C.GTK_STYLE_CLASS_QUESTION
const STYLE_CLASS_RADIO = C.GTK_STYLE_CLASS_RADIO
const STYLE_CLASS_RAISED = C.GTK_STYLE_CLASS_RAISED
const STYLE_CLASS_RIGHT = C.GTK_STYLE_CLASS_RIGHT
const STYLE_CLASS_RUBBERBAND = C.GTK_STYLE_CLASS_RUBBERBAND
const STYLE_CLASS_SCALE = C.GTK_STYLE_CLASS_SCALE
const STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE
const STYLE_CLASS_SCALE_HAS_MARKS_BELOW = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW
const STYLE_CLASS_SCROLLBAR = C.GTK_STYLE_CLASS_SCROLLBAR
const STYLE_CLASS_SCROLLBARS_JUNCTION = C.GTK_STYLE_CLASS_SCROLLBARS_JUNCTION
const STYLE_CLASS_SEPARATOR = C.GTK_STYLE_CLASS_SEPARATOR
const STYLE_CLASS_SIDEBAR = C.GTK_STYLE_CLASS_SIDEBAR
const STYLE_CLASS_SLIDER = C.GTK_STYLE_CLASS_SLIDER
const STYLE_CLASS_SPINBUTTON = C.GTK_STYLE_CLASS_SPINBUTTON
const STYLE_CLASS_SPINNER = C.GTK_STYLE_CLASS_SPINNER
const STYLE_CLASS_TOOLBAR = C.GTK_STYLE_CLASS_TOOLBAR
const STYLE_CLASS_TOOLTIP = C.GTK_STYLE_CLASS_TOOLTIP
const STYLE_CLASS_TOP = C.GTK_STYLE_CLASS_TOP
const STYLE_CLASS_TROUGH = C.GTK_STYLE_CLASS_TROUGH
const STYLE_CLASS_VERTICAL = C.GTK_STYLE_CLASS_VERTICAL
const STYLE_CLASS_VIEW = C.GTK_STYLE_CLASS_VIEW
const STYLE_CLASS_WARNING = C.GTK_STYLE_CLASS_WARNING
const STYLE_PROPERTY_BACKGROUND_COLOR = C.GTK_STYLE_PROPERTY_BACKGROUND_COLOR
const STYLE_PROPERTY_BACKGROUND_IMAGE = C.GTK_STYLE_PROPERTY_BACKGROUND_IMAGE
const STYLE_PROPERTY_BORDER_COLOR = C.GTK_STYLE_PROPERTY_BORDER_COLOR
const STYLE_PROPERTY_BORDER_RADIUS = C.GTK_STYLE_PROPERTY_BORDER_RADIUS
const STYLE_PROPERTY_BORDER_STYLE = C.GTK_STYLE_PROPERTY_BORDER_STYLE
const STYLE_PROPERTY_BORDER_WIDTH = C.GTK_STYLE_PROPERTY_BORDER_WIDTH
const STYLE_PROPERTY_COLOR = C.GTK_STYLE_PROPERTY_COLOR
const STYLE_PROPERTY_FONT = C.GTK_STYLE_PROPERTY_FONT
const STYLE_PROPERTY_MARGIN = C.GTK_STYLE_PROPERTY_MARGIN
const STYLE_PROPERTY_PADDING = C.GTK_STYLE_PROPERTY_PADDING
const STYLE_PROVIDER_PRIORITY_APPLICATION = C.GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
const STYLE_PROVIDER_PRIORITY_FALLBACK = C.GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
const STYLE_PROVIDER_PRIORITY_SETTINGS = C.GTK_STYLE_PROVIDER_PRIORITY_SETTINGS
const STYLE_PROVIDER_PRIORITY_THEME = C.GTK_STYLE_PROVIDER_PRIORITY_THEME
const STYLE_PROVIDER_PRIORITY_USER = C.GTK_STYLE_PROVIDER_PRIORITY_USER
const STYLE_REGION_COLUMN = C.GTK_STYLE_REGION_COLUMN
const STYLE_REGION_COLUMN_HEADER = C.GTK_STYLE_REGION_COLUMN_HEADER
const STYLE_REGION_ROW = C.GTK_STYLE_REGION_ROW
const STYLE_REGION_TAB = C.GTK_STYLE_REGION_TAB
const TEXT_VIEW_PRIORITY_VALIDATE = C.GTK_TEXT_VIEW_PRIORITY_VALIDATE
