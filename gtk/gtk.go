// this file is auto-generated by gtk-go

package gtk

// #cgo pkg-config: gtk+-3.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <gtk/gtkx.h>
/*
void _gtk_accelerator_parse(gchar * accelerator, guint * accelerator_key, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse((const gchar *)(accelerator), accelerator_key, accelerator_mods);
}
void _gtk_accelerator_parse_with_keycode(gchar * accelerator, guint * accelerator_key, void * accelerator_codes, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse_with_keycode((const gchar *)(accelerator), accelerator_key, (guint **)(accelerator_codes), accelerator_mods);
}
GTokenType _gtk_binding_entry_add_signal_from_string(GtkBindingSet * binding_set, gchar * signal_desc) {
	return (GTokenType)gtk_binding_entry_add_signal_from_string(binding_set, (const gchar *)(signal_desc));
}
void _gtk_binding_entry_add_signall(GtkBindingSet * binding_set, guint keyval, GdkModifierType modifiers, gchar * signal_name, GSList * binding_args) {
	(void)gtk_binding_entry_add_signall(binding_set, keyval, modifiers, (const gchar *)(signal_name), binding_args);
}
GtkBindingSet * _gtk_binding_set_find(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_find((const gchar *)(set_name));
}
GtkBindingSet * _gtk_binding_set_new(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_new((const gchar *)(set_name));
}
gchar * _gtk_check_version(guint required_major, guint required_minor, guint required_micro) {
	return (gchar *)gtk_check_version(required_major, required_minor, required_micro);
}
void _gtk_drag_set_icon_name(GdkDragContext * context, gchar * icon_name, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_name(context, (const gchar *)(icon_name), hot_x, hot_y);
}
void _gtk_drag_set_icon_stock(GdkDragContext * context, gchar * stock_id, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_stock(context, (const gchar *)(stock_id), hot_x, hot_y);
}
GtkIconSize _gtk_icon_size_from_name(gchar * name) {
	return (GtkIconSize)gtk_icon_size_from_name((const gchar *)(name));
}
gchar * _gtk_icon_size_get_name(GtkIconSize size) {
	return (gchar *)gtk_icon_size_get_name(size);
}
GtkIconSize _gtk_icon_size_register(gchar * name, gint width, gint height) {
	return (GtkIconSize)gtk_icon_size_register((const gchar *)(name), width, height);
}
void _gtk_icon_size_register_alias(gchar * alias, GtkIconSize target) {
	(void)gtk_icon_size_register_alias((const gchar *)(alias), target);
}
gchar * _gtk_paper_size_get_default() {
	return (gchar *)gtk_paper_size_get_default();
}
gboolean _gtk_rc_property_parse_border(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_border((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_color(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_color((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_enum(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_enum((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_flags(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_flags((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_requisition(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_requisition((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
GdkPixbuf * _gtk_render_icon_pixbuf(GtkStyleContext * context, GtkIconSource * source, GtkIconSize size) {
	return (GdkPixbuf *)gtk_render_icon_pixbuf(context, (const GtkIconSource *)(source), size);
}
gboolean _gtk_show_uri(GdkScreen * screen, gchar * uri, guint32 timestamp, void * error) {
	return (gboolean)gtk_show_uri(screen, (const gchar *)(uri), timestamp, (GError **)(error));
}
gboolean _gtk_stock_lookup(gchar * stock_id, GtkStockItem * item) {
	return (gboolean)gtk_stock_lookup((const gchar *)(stock_id), item);
}
void _gtk_stock_set_translate_func(gchar * domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify) {
	(void)gtk_stock_set_translate_func((const gchar *)(domain), func, data, notify);
}
GtkWidget * _gtk_test_create_simple_window(gchar * window_title, gchar * dialog_text) {
	return (GtkWidget *)gtk_test_create_simple_window((const gchar *)(window_title), (const gchar *)(dialog_text));
}
GtkWidget * _gtk_test_find_label(GtkWidget * widget, gchar * label_pattern) {
	return (GtkWidget *)gtk_test_find_label(widget, (const gchar *)(label_pattern));
}
GtkWidget * _gtk_test_find_widget(GtkWidget * widget, gchar * label_pattern, GType widget_type) {
	return (GtkWidget *)gtk_test_find_widget(widget, (const gchar *)(label_pattern), widget_type);
}
GType * _gtk_test_list_all_types(guint * n_types) {
	return (GType *)gtk_test_list_all_types(n_types);
}
void _gtk_test_text_set(GtkWidget * widget, gchar * string) {
	(void)gtk_test_text_set(widget, (const gchar *)(string));
}
gboolean _gtk_tree_get_row_drag_data(GtkSelectionData * selection_data, void * tree_model, void * path) {
	return (gboolean)gtk_tree_get_row_drag_data(selection_data, (GtkTreeModel **)(tree_model), (GtkTreePath **)(path));
}
void _gtk_about_dialog_add_credit_section(GtkAboutDialog * _self_, gchar * section_name, void * people) {
	(void)gtk_about_dialog_add_credit_section(_self_, (const gchar *)(section_name), (const gchar **)(people));
}
void * _gtk_about_dialog_get_artists(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_artists(_self_);
}
void * _gtk_about_dialog_get_authors(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_authors(_self_);
}
gchar * _gtk_about_dialog_get_comments(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_comments(_self_);
}
gchar * _gtk_about_dialog_get_copyright(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_copyright(_self_);
}
void * _gtk_about_dialog_get_documenters(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_documenters(_self_);
}
gchar * _gtk_about_dialog_get_license(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_license(_self_);
}
gchar * _gtk_about_dialog_get_logo_icon_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_logo_icon_name(_self_);
}
gchar * _gtk_about_dialog_get_program_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_program_name(_self_);
}
gchar * _gtk_about_dialog_get_translator_credits(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_translator_credits(_self_);
}
gchar * _gtk_about_dialog_get_version(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_version(_self_);
}
gchar * _gtk_about_dialog_get_website(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website(_self_);
}
gchar * _gtk_about_dialog_get_website_label(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website_label(_self_);
}
void _gtk_about_dialog_set_comments(GtkAboutDialog * _self_, gchar * comments) {
	(void)gtk_about_dialog_set_comments(_self_, (const gchar *)(comments));
}
void _gtk_about_dialog_set_copyright(GtkAboutDialog * _self_, gchar * copyright) {
	(void)gtk_about_dialog_set_copyright(_self_, (const gchar *)(copyright));
}
void _gtk_about_dialog_set_license(GtkAboutDialog * _self_, gchar * license) {
	(void)gtk_about_dialog_set_license(_self_, (const gchar *)(license));
}
void _gtk_about_dialog_set_logo_icon_name(GtkAboutDialog * _self_, gchar * icon_name) {
	(void)gtk_about_dialog_set_logo_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_about_dialog_set_program_name(GtkAboutDialog * _self_, gchar * name) {
	(void)gtk_about_dialog_set_program_name(_self_, (const gchar *)(name));
}
void _gtk_about_dialog_set_translator_credits(GtkAboutDialog * _self_, gchar * translator_credits) {
	(void)gtk_about_dialog_set_translator_credits(_self_, (const gchar *)(translator_credits));
}
void _gtk_about_dialog_set_version(GtkAboutDialog * _self_, gchar * version) {
	(void)gtk_about_dialog_set_version(_self_, (const gchar *)(version));
}
void _gtk_about_dialog_set_website(GtkAboutDialog * _self_, gchar * website) {
	(void)gtk_about_dialog_set_website(_self_, (const gchar *)(website));
}
void _gtk_about_dialog_set_website_label(GtkAboutDialog * _self_, gchar * website_label) {
	(void)gtk_about_dialog_set_website_label(_self_, (const gchar *)(website_label));
}
void _gtk_accel_group_connect_by_path(GtkAccelGroup * _self_, gchar * accel_path, GClosure * closure) {
	(void)gtk_accel_group_connect_by_path(_self_, (const gchar *)(accel_path), closure);
}
GtkWidget * _gtk_accel_label_new(gchar * string) {
	return (GtkWidget *)gtk_accel_label_new((const gchar *)(string));
}
void _gtk_accel_map_add_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods) {
	(void)gtk_accel_map_add_entry((const gchar *)(accel_path), accel_key, accel_mods);
}
void _gtk_accel_map_add_filter(gchar * filter_pattern) {
	(void)gtk_accel_map_add_filter((const gchar *)(filter_pattern));
}
gboolean _gtk_accel_map_change_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace) {
	return (gboolean)gtk_accel_map_change_entry((const gchar *)(accel_path), accel_key, accel_mods, replace);
}
void _gtk_accel_map_load(gchar * file_name) {
	(void)gtk_accel_map_load((const gchar *)(file_name));
}
void _gtk_accel_map_lock_path(gchar * accel_path) {
	(void)gtk_accel_map_lock_path((const gchar *)(accel_path));
}
gboolean _gtk_accel_map_lookup_entry(gchar * accel_path, GtkAccelKey * key) {
	return (gboolean)gtk_accel_map_lookup_entry((const gchar *)(accel_path), key);
}
void _gtk_accel_map_save(gchar * file_name) {
	(void)gtk_accel_map_save((const gchar *)(file_name));
}
void _gtk_accel_map_unlock_path(gchar * accel_path) {
	(void)gtk_accel_map_unlock_path((const gchar *)(accel_path));
}
GtkAction * _gtk_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
gchar * _gtk_action_get_accel_path(GtkAction * _self_) {
	return (gchar *)gtk_action_get_accel_path(_self_);
}
gchar * _gtk_action_get_icon_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_icon_name(_self_);
}
gchar * _gtk_action_get_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_label(_self_);
}
gchar * _gtk_action_get_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_name(_self_);
}
gchar * _gtk_action_get_short_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_short_label(_self_);
}
gchar * _gtk_action_get_stock_id(GtkAction * _self_) {
	return (gchar *)gtk_action_get_stock_id(_self_);
}
gchar * _gtk_action_get_tooltip(GtkAction * _self_) {
	return (gchar *)gtk_action_get_tooltip(_self_);
}
void _gtk_action_set_accel_path(GtkAction * _self_, gchar * accel_path) {
	(void)gtk_action_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_action_set_icon_name(GtkAction * _self_, gchar * icon_name) {
	(void)gtk_action_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_action_set_label(GtkAction * _self_, gchar * label) {
	(void)gtk_action_set_label(_self_, (const gchar *)(label));
}
void _gtk_action_set_short_label(GtkAction * _self_, gchar * short_label) {
	(void)gtk_action_set_short_label(_self_, (const gchar *)(short_label));
}
void _gtk_action_set_stock_id(GtkAction * _self_, gchar * stock_id) {
	(void)gtk_action_set_stock_id(_self_, (const gchar *)(stock_id));
}
void _gtk_action_set_tooltip(GtkAction * _self_, gchar * tooltip) {
	(void)gtk_action_set_tooltip(_self_, (const gchar *)(tooltip));
}
GtkActionGroup * _gtk_action_group_new(gchar * name) {
	return (GtkActionGroup *)gtk_action_group_new((const gchar *)(name));
}
void _gtk_action_group_add_action_with_accel(GtkActionGroup * _self_, GtkAction * action, gchar * accelerator) {
	(void)gtk_action_group_add_action_with_accel(_self_, action, (const gchar *)(accelerator));
}
GtkAction * _gtk_action_group_get_action(GtkActionGroup * _self_, gchar * action_name) {
	return (GtkAction *)gtk_action_group_get_action(_self_, (const gchar *)(action_name));
}
gchar * _gtk_action_group_get_name(GtkActionGroup * _self_) {
	return (gchar *)gtk_action_group_get_name(_self_);
}
void _gtk_action_group_set_translation_domain(GtkActionGroup * _self_, gchar * domain) {
	(void)gtk_action_group_set_translation_domain(_self_, (const gchar *)(domain));
}
gchar * _gtk_action_group_translate_string(GtkActionGroup * _self_, gchar * string) {
	return (gchar *)gtk_action_group_translate_string(_self_, (const gchar *)(string));
}
GtkWidget * _gtk_app_chooser_button_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_button_new((const gchar *)(content_type));
}
void _gtk_app_chooser_button_append_custom_item(GtkAppChooserButton * _self_, gchar * name, gchar * label, GIcon * icon) {
	(void)gtk_app_chooser_button_append_custom_item(_self_, (const gchar *)(name), (const gchar *)(label), icon);
}
gchar * _gtk_app_chooser_button_get_heading(GtkAppChooserButton * _self_) {
	return (gchar *)gtk_app_chooser_button_get_heading(_self_);
}
void _gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton * _self_, gchar * name) {
	(void)gtk_app_chooser_button_set_active_custom_item(_self_, (const gchar *)(name));
}
void _gtk_app_chooser_button_set_heading(GtkAppChooserButton * _self_, gchar * heading) {
	(void)gtk_app_chooser_button_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_dialog_new_for_content_type(GtkWindow * parent, GtkDialogFlags flags, gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_dialog_new_for_content_type(parent, flags, (const gchar *)(content_type));
}
gchar * _gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog * _self_) {
	return (gchar *)gtk_app_chooser_dialog_get_heading(_self_);
}
void _gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog * _self_, gchar * heading) {
	(void)gtk_app_chooser_dialog_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_widget_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_widget_new((const gchar *)(content_type));
}
gchar * _gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget * _self_) {
	return (gchar *)gtk_app_chooser_widget_get_default_text(_self_);
}
void _gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget * _self_, gchar * text) {
	(void)gtk_app_chooser_widget_set_default_text(_self_, (const gchar *)(text));
}
GtkApplication * _gtk_application_new(gchar * application_id, GApplicationFlags flags) {
	return (GtkApplication *)gtk_application_new((const gchar *)(application_id), flags);
}
void _gtk_application_add_accelerator(GtkApplication * _self_, gchar * accelerator, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_add_accelerator(_self_, (const gchar *)(accelerator), (const gchar *)(action_name), parameter);
}
guint _gtk_application_inhibit(GtkApplication * _self_, GtkWindow * window, GtkApplicationInhibitFlags flags, gchar * reason) {
	return (guint)gtk_application_inhibit(_self_, window, flags, (const gchar *)(reason));
}
void _gtk_application_remove_accelerator(GtkApplication * _self_, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_remove_accelerator(_self_, (const gchar *)(action_name), parameter);
}
GtkWidget * _gtk_aspect_frame_new(gchar * label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) {
	return (GtkWidget *)gtk_aspect_frame_new((const gchar *)(label), xalign, yalign, ratio, obey_child);
}
gchar * _gtk_assistant_get_page_title(GtkAssistant * _self_, GtkWidget * page) {
	return (gchar *)gtk_assistant_get_page_title(_self_, page);
}
void _gtk_assistant_set_page_title(GtkAssistant * _self_, GtkWidget * page, gchar * title) {
	(void)gtk_assistant_set_page_title(_self_, page, (const gchar *)(title));
}
guint _gtk_builder_add_from_file(GtkBuilder * _self_, gchar * filename, void * error) {
	return (guint)gtk_builder_add_from_file(_self_, (const gchar *)(filename), (GError **)(error));
}
guint _gtk_builder_add_from_resource(GtkBuilder * _self_, gchar * resource_path, void * error) {
	return (guint)gtk_builder_add_from_resource(_self_, (const gchar *)(resource_path), (GError **)(error));
}
guint _gtk_builder_add_from_string(GtkBuilder * _self_, gchar * buffer, gsize length, void * error) {
	return (guint)gtk_builder_add_from_string(_self_, (const gchar *)(buffer), length, (GError **)(error));
}
GObject * _gtk_builder_get_object(GtkBuilder * _self_, gchar * name) {
	return (GObject *)gtk_builder_get_object(_self_, (const gchar *)(name));
}
gchar * _gtk_builder_get_translation_domain(GtkBuilder * _self_) {
	return (gchar *)gtk_builder_get_translation_domain(_self_);
}
GType _gtk_builder_get_type_from_name(GtkBuilder * _self_, char * type_name) {
	return (GType)gtk_builder_get_type_from_name(_self_, (const char *)(type_name));
}
void _gtk_builder_set_translation_domain(GtkBuilder * _self_, gchar * domain) {
	(void)gtk_builder_set_translation_domain(_self_, (const gchar *)(domain));
}
gboolean _gtk_builder_value_from_string(GtkBuilder * _self_, GParamSpec * pspec, gchar * string, GValue * value, void * error) {
	return (gboolean)gtk_builder_value_from_string(_self_, pspec, (const gchar *)(string), value, (GError **)(error));
}
gboolean _gtk_builder_value_from_string_type(GtkBuilder * _self_, GType type, gchar * string, GValue * value, void * error) {
	return (gboolean)gtk_builder_value_from_string_type(_self_, type, (const gchar *)(string), value, (GError **)(error));
}
GtkWidget * _gtk_button_new_from_stock(gchar * stock_id) {
	return (GtkWidget *)gtk_button_new_from_stock((const gchar *)(stock_id));
}
GtkWidget * _gtk_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_button_get_label(GtkButton * _self_) {
	return (gchar *)gtk_button_get_label(_self_);
}
void _gtk_button_set_label(GtkButton * _self_, gchar * label) {
	(void)gtk_button_set_label(_self_, (const gchar *)(label));
}
gboolean _gtk_cell_area_activate(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean edit_only) {
	return (gboolean)gtk_cell_area_activate(_self_, context, widget, (const GdkRectangle *)(cell_area), flags, edit_only);
}
gboolean _gtk_cell_area_activate_cell(GtkCellArea * _self_, GtkWidget * widget, GtkCellRenderer * renderer, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_area_activate_cell(_self_, widget, renderer, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_attribute_connect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute, gint column) {
	(void)gtk_cell_area_attribute_connect(_self_, renderer, (const gchar *)(attribute), column);
}
void _gtk_cell_area_attribute_disconnect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute) {
	(void)gtk_cell_area_attribute_disconnect(_self_, renderer, (const gchar *)(attribute));
}
void _gtk_cell_area_cell_get_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_get_property(_self_, renderer, (const gchar *)(property_name), value);
}
void _gtk_cell_area_cell_set_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_set_property(_self_, renderer, (const gchar *)(property_name), (const GValue *)(value));
}
gint _gtk_cell_area_event(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gint)gtk_cell_area_event(_self_, context, widget, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_foreach_alloc(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * background_area, GtkCellAllocCallback callback, gpointer callback_data) {
	(void)gtk_cell_area_foreach_alloc(_self_, context, widget, (const GdkRectangle *)(cell_area), (const GdkRectangle *)(background_area), callback, callback_data);
}
void _gtk_cell_area_get_cell_allocation(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GtkCellRenderer * renderer, GdkRectangle * cell_area, GdkRectangle * allocation) {
	(void)gtk_cell_area_get_cell_allocation(_self_, context, widget, renderer, (const GdkRectangle *)(cell_area), allocation);
}
GtkCellRenderer * _gtk_cell_area_get_cell_at_position(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, gint x, gint y, GdkRectangle * alloc_area) {
	return (GtkCellRenderer *)gtk_cell_area_get_cell_at_position(_self_, context, widget, (const GdkRectangle *)(cell_area), x, y, alloc_area);
}
gchar * _gtk_cell_area_get_current_path_string(GtkCellArea * _self_) {
	return (gchar *)gtk_cell_area_get_current_path_string(_self_);
}
GList * _gtk_cell_area_get_focus_siblings(GtkCellArea * _self_, GtkCellRenderer * renderer) {
	return (GList *)gtk_cell_area_get_focus_siblings(_self_, renderer);
}
void _gtk_cell_area_inner_cell_area(GtkCellArea * _self_, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * inner_area) {
	(void)gtk_cell_area_inner_cell_area(_self_, widget, (const GdkRectangle *)(cell_area), inner_area);
}
void _gtk_cell_area_render(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, cairo_t * cr, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean paint_focus) {
	(void)gtk_cell_area_render(_self_, context, widget, cr, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags, paint_focus);
}
gboolean _gtk_cell_renderer_activate(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_renderer_activate(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_get_aligned_area(GtkCellRenderer * _self_, GtkWidget * widget, GtkCellRendererState flags, GdkRectangle * cell_area, GdkRectangle * aligned_area) {
	(void)gtk_cell_renderer_get_aligned_area(_self_, widget, flags, (const GdkRectangle *)(cell_area), aligned_area);
}
void _gtk_cell_renderer_render(GtkCellRenderer * _self_, cairo_t * cr, GtkWidget * widget, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	(void)gtk_cell_renderer_render(_self_, cr, widget, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkCellEditable * _gtk_cell_renderer_start_editing(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (GtkCellEditable *)gtk_cell_renderer_start_editing(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkWidget * _gtk_cell_view_new_with_markup(gchar * markup) {
	return (GtkWidget *)gtk_cell_view_new_with_markup((const gchar *)(markup));
}
GtkWidget * _gtk_cell_view_new_with_text(gchar * text) {
	return (GtkWidget *)gtk_cell_view_new_with_text((const gchar *)(text));
}
void _gtk_cell_view_set_background_rgba(GtkCellView * _self_, GdkRGBA * rgba) {
	(void)gtk_cell_view_set_background_rgba(_self_, (const GdkRGBA *)(rgba));
}
GtkWidget * _gtk_check_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_mnemonic((const gchar *)(label));
}
void _gtk_clipboard_set_text(GtkClipboard * _self_, gchar * text, gint len) {
	(void)gtk_clipboard_set_text(_self_, (const gchar *)(text), len);
}
void * _gtk_clipboard_wait_for_uris(GtkClipboard * _self_) {
	return (void *)gtk_clipboard_wait_for_uris(_self_);
}
GtkWidget * _gtk_color_button_new_with_rgba(GdkRGBA * rgba) {
	return (GtkWidget *)gtk_color_button_new_with_rgba((const GdkRGBA *)(rgba));
}
gchar * _gtk_color_button_get_title(GtkColorButton * _self_) {
	return (gchar *)gtk_color_button_get_title(_self_);
}
void _gtk_color_button_set_title(GtkColorButton * _self_, gchar * title) {
	(void)gtk_color_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_color_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_color_chooser_dialog_new((const gchar *)(title), parent);
}
gchar * _gtk_combo_box_get_active_id(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_active_id(_self_);
}
gchar * _gtk_combo_box_get_title(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_title(_self_);
}
gboolean _gtk_combo_box_set_active_id(GtkComboBox * _self_, gchar * active_id) {
	return (gboolean)gtk_combo_box_set_active_id(_self_, (const gchar *)(active_id));
}
void _gtk_combo_box_set_title(GtkComboBox * _self_, gchar * title) {
	(void)gtk_combo_box_set_title(_self_, (const gchar *)(title));
}
void _gtk_combo_box_text_append(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_append(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_append_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_append_text(_self_, (const gchar *)(text));
}
void _gtk_combo_box_text_insert(GtkComboBoxText * _self_, gint position, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_insert(_self_, position, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_insert_text(GtkComboBoxText * _self_, gint position, gchar * text) {
	(void)gtk_combo_box_text_insert_text(_self_, position, (const gchar *)(text));
}
void _gtk_combo_box_text_prepend(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_prepend(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_prepend_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_prepend_text(_self_, (const gchar *)(text));
}
void _gtk_container_child_get_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_get_property(_self_, child, (const gchar *)(property_name), value);
}
void _gtk_container_child_notify(GtkContainer * _self_, GtkWidget * child, gchar * child_property) {
	(void)gtk_container_child_notify(_self_, child, (const gchar *)(child_property));
}
void _gtk_container_child_set_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_set_property(_self_, child, (const gchar *)(property_name), (const GValue *)(value));
}
gboolean _gtk_container_get_focus_chain(GtkContainer * _self_, void * focusable_widgets) {
	return (gboolean)gtk_container_get_focus_chain(_self_, (GList **)(focusable_widgets));
}
GtkCssProvider * _gtk_css_provider_get_named(gchar * name, gchar * variant) {
	return (GtkCssProvider *)gtk_css_provider_get_named((const gchar *)(name), (const gchar *)(variant));
}
gboolean _gtk_css_provider_load_from_file(GtkCssProvider * _self_, GFile * file, void * error) {
	return (gboolean)gtk_css_provider_load_from_file(_self_, file, (GError **)(error));
}
gboolean _gtk_css_provider_load_from_path(GtkCssProvider * _self_, gchar * path, void * error) {
	return (gboolean)gtk_css_provider_load_from_path(_self_, (const gchar *)(path), (GError **)(error));
}
GtkWidget * _gtk_dialog_add_button(GtkDialog * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_dialog_add_button(_self_, (const gchar *)(button_text), response_id);
}
gchar * _gtk_entry_get_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_name(_self_, icon_pos);
}
gchar * _gtk_entry_get_icon_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_stock(_self_, icon_pos);
}
gchar * _gtk_entry_get_placeholder_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_placeholder_text(_self_);
}
gchar * _gtk_entry_get_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_text(_self_);
}
void _gtk_entry_set_icon_from_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * icon_name) {
	(void)gtk_entry_set_icon_from_icon_name(_self_, icon_pos, (const gchar *)(icon_name));
}
void _gtk_entry_set_icon_from_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * stock_id) {
	(void)gtk_entry_set_icon_from_stock(_self_, icon_pos, (const gchar *)(stock_id));
}
void _gtk_entry_set_icon_tooltip_markup(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_markup(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_icon_tooltip_text(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_text(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_placeholder_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_placeholder_text(_self_, (const gchar *)(text));
}
void _gtk_entry_set_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_text(_self_, (const gchar *)(text));
}
GtkEntryBuffer * _gtk_entry_buffer_new(gchar * initial_chars, gint n_initial_chars) {
	return (GtkEntryBuffer *)gtk_entry_buffer_new((const gchar *)(initial_chars), n_initial_chars);
}
void _gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer * _self_, guint position, gchar * chars, guint n_chars) {
	(void)gtk_entry_buffer_emit_inserted_text(_self_, position, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_buffer_get_text(GtkEntryBuffer * _self_) {
	return (gchar *)gtk_entry_buffer_get_text(_self_);
}
guint _gtk_entry_buffer_insert_text(GtkEntryBuffer * _self_, guint position, gchar * chars, gint n_chars) {
	return (guint)gtk_entry_buffer_insert_text(_self_, position, (const gchar *)(chars), n_chars);
}
void _gtk_entry_buffer_set_text(GtkEntryBuffer * _self_, gchar * chars, gint n_chars) {
	(void)gtk_entry_buffer_set_text(_self_, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_completion_compute_prefix(GtkEntryCompletion * _self_, char * key) {
	return (gchar *)gtk_entry_completion_compute_prefix(_self_, (const char *)(key));
}
gchar * _gtk_entry_completion_get_completion_prefix(GtkEntryCompletion * _self_) {
	return (gchar *)gtk_entry_completion_get_completion_prefix(_self_);
}
void _gtk_entry_completion_insert_action_markup(GtkEntryCompletion * _self_, gint index_, gchar * markup) {
	(void)gtk_entry_completion_insert_action_markup(_self_, index_, (const gchar *)(markup));
}
void _gtk_entry_completion_insert_action_text(GtkEntryCompletion * _self_, gint index_, gchar * text) {
	(void)gtk_entry_completion_insert_action_text(_self_, index_, (const gchar *)(text));
}
GtkWidget * _gtk_expander_new(gchar * label) {
	return (GtkWidget *)gtk_expander_new((const gchar *)(label));
}
GtkWidget * _gtk_expander_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_expander_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_expander_get_label(GtkExpander * _self_) {
	return (gchar *)gtk_expander_get_label(_self_);
}
void _gtk_expander_set_label(GtkExpander * _self_, gchar * label) {
	(void)gtk_expander_set_label(_self_, (const gchar *)(label));
}
GtkWidget * _gtk_file_chooser_button_new(gchar * title, GtkFileChooserAction action) {
	return (GtkWidget *)gtk_file_chooser_button_new((const gchar *)(title), action);
}
gchar * _gtk_file_chooser_button_get_title(GtkFileChooserButton * _self_) {
	return (gchar *)gtk_file_chooser_button_get_title(_self_);
}
void _gtk_file_chooser_button_set_title(GtkFileChooserButton * _self_, gchar * title) {
	(void)gtk_file_chooser_button_set_title(_self_, (const gchar *)(title));
}
void _gtk_file_filter_add_mime_type(GtkFileFilter * _self_, gchar * mime_type) {
	(void)gtk_file_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_file_filter_add_pattern(GtkFileFilter * _self_, gchar * pattern) {
	(void)gtk_file_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_file_filter_filter(GtkFileFilter * _self_, GtkFileFilterInfo * filter_info) {
	return (gboolean)gtk_file_filter_filter(_self_, (const GtkFileFilterInfo *)(filter_info));
}
gchar * _gtk_file_filter_get_name(GtkFileFilter * _self_) {
	return (gchar *)gtk_file_filter_get_name(_self_);
}
void _gtk_file_filter_set_name(GtkFileFilter * _self_, gchar * name) {
	(void)gtk_file_filter_set_name(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_font_button_new_with_font(gchar * fontname) {
	return (GtkWidget *)gtk_font_button_new_with_font((const gchar *)(fontname));
}
gchar * _gtk_font_button_get_font_name(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_font_name(_self_);
}
gchar * _gtk_font_button_get_title(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_title(_self_);
}
gboolean _gtk_font_button_set_font_name(GtkFontButton * _self_, gchar * fontname) {
	return (gboolean)gtk_font_button_set_font_name(_self_, (const gchar *)(fontname));
}
void _gtk_font_button_set_title(GtkFontButton * _self_, gchar * title) {
	(void)gtk_font_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_font_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_font_chooser_dialog_new((const gchar *)(title), parent);
}
GtkWidget * _gtk_frame_new(gchar * label) {
	return (GtkWidget *)gtk_frame_new((const gchar *)(label));
}
gchar * _gtk_frame_get_label(GtkFrame * _self_) {
	return (gchar *)gtk_frame_get_label(_self_);
}
void _gtk_frame_set_label(GtkFrame * _self_, gchar * label) {
	(void)gtk_frame_set_label(_self_, (const gchar *)(label));
}
void _gtk_im_context_get_preedit_string(GtkIMContext * _self_, void * str, void * attrs, gint * cursor_pos) {
	(void)gtk_im_context_get_preedit_string(_self_, (gchar **)(str), (PangoAttrList **)(attrs), cursor_pos);
}
gboolean _gtk_im_context_get_surrounding(GtkIMContext * _self_, void * text, gint * cursor_index) {
	return (gboolean)gtk_im_context_get_surrounding(_self_, (gchar **)(text), cursor_index);
}
void _gtk_im_context_set_cursor_location(GtkIMContext * _self_, GdkRectangle * area) {
	(void)gtk_im_context_set_cursor_location(_self_, (const GdkRectangle *)(area));
}
void _gtk_im_context_set_surrounding(GtkIMContext * _self_, gchar * text, gint len, gint cursor_index) {
	(void)gtk_im_context_set_surrounding(_self_, (const gchar *)(text), len, cursor_index);
}
char * _gtk_im_multicontext_get_context_id(GtkIMMulticontext * _self_) {
	return (char *)gtk_im_multicontext_get_context_id(_self_);
}
void _gtk_im_multicontext_set_context_id(GtkIMMulticontext * _self_, char * context_id) {
	(void)gtk_im_multicontext_set_context_id(_self_, (const char *)(context_id));
}
GtkIconSet * _gtk_icon_factory_lookup_default(gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup_default((const gchar *)(stock_id));
}
void _gtk_icon_factory_add(GtkIconFactory * _self_, gchar * stock_id, GtkIconSet * icon_set) {
	(void)gtk_icon_factory_add(_self_, (const gchar *)(stock_id), icon_set);
}
GtkIconSet * _gtk_icon_factory_lookup(GtkIconFactory * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup(_self_, (const gchar *)(stock_id));
}
void _gtk_icon_theme_add_builtin_icon(gchar * icon_name, gint size, GdkPixbuf * pixbuf) {
	(void)gtk_icon_theme_add_builtin_icon((const gchar *)(icon_name), size, pixbuf);
}
void _gtk_icon_theme_append_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_append_search_path(_self_, (const gchar *)(path));
}
gint * _gtk_icon_theme_get_icon_sizes(GtkIconTheme * _self_, gchar * icon_name) {
	return (gint *)gtk_icon_theme_get_icon_sizes(_self_, (const gchar *)(icon_name));
}
gboolean _gtk_icon_theme_has_icon(GtkIconTheme * _self_, gchar * icon_name) {
	return (gboolean)gtk_icon_theme_has_icon(_self_, (const gchar *)(icon_name));
}
GList * _gtk_icon_theme_list_icons(GtkIconTheme * _self_, gchar * context) {
	return (GList *)gtk_icon_theme_list_icons(_self_, (const gchar *)(context));
}
GdkPixbuf * _gtk_icon_theme_load_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags, void * error) {
	return (GdkPixbuf *)gtk_icon_theme_load_icon(_self_, (const gchar *)(icon_name), size, flags, (GError **)(error));
}
GtkIconInfo * _gtk_icon_theme_lookup_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags) {
	return (GtkIconInfo *)gtk_icon_theme_lookup_icon(_self_, (const gchar *)(icon_name), size, flags);
}
void _gtk_icon_theme_prepend_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_prepend_search_path(_self_, (const gchar *)(path));
}
void _gtk_icon_theme_set_custom_theme(GtkIconTheme * _self_, gchar * theme_name) {
	(void)gtk_icon_theme_set_custom_theme(_self_, (const gchar *)(theme_name));
}
gboolean _gtk_icon_view_get_cursor(GtkIconView * _self_, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_dest_item_at_pos(GtkIconView * _self_, gint drag_x, gint drag_y, void * path, GtkIconViewDropPosition * pos) {
	return (gboolean)gtk_icon_view_get_dest_item_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_icon_view_get_drag_dest_item(GtkIconView * _self_, void * path, GtkIconViewDropPosition * pos) {
	(void)gtk_icon_view_get_drag_dest_item(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_icon_view_get_item_at_pos(GtkIconView * _self_, gint x, gint y, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_item_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_visible_range(GtkIconView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_icon_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
GtkWidget * _gtk_image_new_from_file(gchar * filename) {
	return (GtkWidget *)gtk_image_new_from_file((const gchar *)(filename));
}
GtkWidget * _gtk_image_new_from_icon_name(gchar * icon_name, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_icon_name((const gchar *)(icon_name), size);
}
GtkWidget * _gtk_image_new_from_resource(gchar * resource_path) {
	return (GtkWidget *)gtk_image_new_from_resource((const gchar *)(resource_path));
}
GtkWidget * _gtk_image_new_from_stock(gchar * stock_id, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_stock((const gchar *)(stock_id), size);
}
void _gtk_image_get_gicon(GtkImage * _self_, void * gicon, GtkIconSize * size) {
	(void)gtk_image_get_gicon(_self_, (GIcon **)(gicon), size);
}
void _gtk_image_get_icon_name(GtkImage * _self_, void * icon_name, GtkIconSize * size) {
	(void)gtk_image_get_icon_name(_self_, (const gchar **)(icon_name), size);
}
void _gtk_image_get_icon_set(GtkImage * _self_, void * icon_set, GtkIconSize * size) {
	(void)gtk_image_get_icon_set(_self_, (GtkIconSet **)(icon_set), size);
}
void _gtk_image_get_stock(GtkImage * _self_, void * stock_id, GtkIconSize * size) {
	(void)gtk_image_get_stock(_self_, (gchar **)(stock_id), size);
}
void _gtk_image_set_from_file(GtkImage * _self_, gchar * filename) {
	(void)gtk_image_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_image_set_from_icon_name(GtkImage * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_image_set_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_image_set_from_resource(GtkImage * _self_, gchar * resource_path) {
	(void)gtk_image_set_from_resource(_self_, (const gchar *)(resource_path));
}
void _gtk_image_set_from_stock(GtkImage * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_image_set_from_stock(_self_, (const gchar *)(stock_id), size);
}
GtkWidget * _gtk_image_menu_item_new_from_stock(gchar * stock_id, GtkAccelGroup * accel_group) {
	return (GtkWidget *)gtk_image_menu_item_new_from_stock((const gchar *)(stock_id), accel_group);
}
GtkWidget * _gtk_image_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_image_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_info_bar_add_button(GtkInfoBar * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_info_bar_add_button(_self_, (const gchar *)(button_text), response_id);
}
GtkWidget * _gtk_label_new(gchar * str) {
	return (GtkWidget *)gtk_label_new((const gchar *)(str));
}
GtkWidget * _gtk_label_new_with_mnemonic(gchar * str) {
	return (GtkWidget *)gtk_label_new_with_mnemonic((const gchar *)(str));
}
gchar * _gtk_label_get_current_uri(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_current_uri(_self_);
}
gchar * _gtk_label_get_label(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_label(_self_);
}
gchar * _gtk_label_get_text(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_text(_self_);
}
void _gtk_label_set_label(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_label(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_label_set_pattern(GtkLabel * _self_, gchar * pattern) {
	(void)gtk_label_set_pattern(_self_, (const gchar *)(pattern));
}
void _gtk_label_set_text(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text(_self_, (const gchar *)(str));
}
void _gtk_label_set_text_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_level_bar_add_offset_value(GtkLevelBar * _self_, gchar * name, gdouble value) {
	(void)gtk_level_bar_add_offset_value(_self_, (const gchar *)(name), value);
}
gboolean _gtk_level_bar_get_offset_value(GtkLevelBar * _self_, gchar * name, gdouble * value) {
	return (gboolean)gtk_level_bar_get_offset_value(_self_, (const gchar *)(name), value);
}
void _gtk_level_bar_remove_offset_value(GtkLevelBar * _self_, gchar * name) {
	(void)gtk_level_bar_remove_offset_value(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_link_button_new(gchar * uri) {
	return (GtkWidget *)gtk_link_button_new((const gchar *)(uri));
}
GtkWidget * _gtk_link_button_new_with_label(gchar * uri, gchar * label) {
	return (GtkWidget *)gtk_link_button_new_with_label((const gchar *)(uri), (const gchar *)(label));
}
gchar * _gtk_link_button_get_uri(GtkLinkButton * _self_) {
	return (gchar *)gtk_link_button_get_uri(_self_);
}
void _gtk_link_button_set_uri(GtkLinkButton * _self_, gchar * uri) {
	(void)gtk_link_button_set_uri(_self_, (const gchar *)(uri));
}
gchar * _gtk_menu_get_accel_path(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_accel_path(_self_);
}
gchar * _gtk_menu_get_title(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_title(_self_);
}
void _gtk_menu_set_accel_path(GtkMenu * _self_, gchar * accel_path) {
	(void)gtk_menu_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_set_title(GtkMenu * _self_, gchar * title) {
	(void)gtk_menu_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_menu_item_get_accel_path(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_accel_path(_self_);
}
gchar * _gtk_menu_item_get_label(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_label(_self_);
}
void _gtk_menu_item_set_accel_path(GtkMenuItem * _self_, gchar * accel_path) {
	(void)gtk_menu_item_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_item_set_label(GtkMenuItem * _self_, gchar * label) {
	(void)gtk_menu_item_set_label(_self_, (const gchar *)(label));
}
void _gtk_menu_shell_bind_model(GtkMenuShell * _self_, GMenuModel * model, gchar * action_namespace, gboolean with_separators) {
	(void)gtk_menu_shell_bind_model(_self_, model, (const gchar *)(action_namespace), with_separators);
}
GtkToolItem * _gtk_menu_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_menu_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_menu_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_menu_tool_button_new_from_stock((const gchar *)(stock_id));
}
void _gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton * _self_, gchar * markup) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton * _self_, gchar * text) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_message_dialog_set_markup(GtkMessageDialog * _self_, gchar * str) {
	(void)gtk_message_dialog_set_markup(_self_, (const gchar *)(str));
}
gchar * _gtk_notebook_get_group_name(GtkNotebook * _self_) {
	return (gchar *)gtk_notebook_get_group_name(_self_);
}
gchar * _gtk_notebook_get_menu_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_menu_label_text(_self_, child);
}
gchar * _gtk_notebook_get_tab_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_tab_label_text(_self_, child);
}
void _gtk_notebook_set_group_name(GtkNotebook * _self_, gchar * group_name) {
	(void)gtk_notebook_set_group_name(_self_, (const gchar *)(group_name));
}
void _gtk_notebook_set_menu_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * menu_text) {
	(void)gtk_notebook_set_menu_label_text(_self_, child, (const gchar *)(menu_text));
}
void _gtk_notebook_set_tab_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * tab_text) {
	(void)gtk_notebook_set_tab_label_text(_self_, child, (const gchar *)(tab_text));
}
gchar * _gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_background_icon_name(_self_);
}
gchar * _gtk_numerable_icon_get_label(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_label(_self_);
}
void _gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon * _self_, gchar * icon_name) {
	(void)gtk_numerable_icon_set_background_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_numerable_icon_set_label(GtkNumerableIcon * _self_, gchar * label) {
	(void)gtk_numerable_icon_set_label(_self_, (const gchar *)(label));
}
GtkPageSetup * _gtk_page_setup_new_from_file(gchar * file_name, void * error) {
	return (GtkPageSetup *)gtk_page_setup_new_from_file((const gchar *)(file_name), (GError **)(error));
}
GtkPageSetup * _gtk_page_setup_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPageSetup *)gtk_page_setup_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
gboolean _gtk_page_setup_load_file(GtkPageSetup * _self_, char * file_name, void * error) {
	return (gboolean)gtk_page_setup_load_file(_self_, (const char *)(file_name), (GError **)(error));
}
gboolean _gtk_page_setup_load_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name, void * error) {
	return (gboolean)gtk_page_setup_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(error));
}
gboolean _gtk_page_setup_to_file(GtkPageSetup * _self_, char * file_name, void * error) {
	return (gboolean)gtk_page_setup_to_file(_self_, (const char *)(file_name), (GError **)(error));
}
void _gtk_page_setup_to_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_page_setup_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_operation_get_error(GtkPrintOperation * _self_, void * error) {
	(void)gtk_print_operation_get_error(_self_, (GError **)(error));
}
gchar * _gtk_print_operation_get_status_string(GtkPrintOperation * _self_) {
	return (gchar *)gtk_print_operation_get_status_string(_self_);
}
GtkPrintOperationResult _gtk_print_operation_run(GtkPrintOperation * _self_, GtkPrintOperationAction action, GtkWindow * parent, void * error) {
	return (GtkPrintOperationResult)gtk_print_operation_run(_self_, action, parent, (GError **)(error));
}
void _gtk_print_operation_set_custom_tab_label(GtkPrintOperation * _self_, gchar * label) {
	(void)gtk_print_operation_set_custom_tab_label(_self_, (const gchar *)(label));
}
void _gtk_print_operation_set_export_filename(GtkPrintOperation * _self_, gchar * filename) {
	(void)gtk_print_operation_set_export_filename(_self_, (const gchar *)(filename));
}
void _gtk_print_operation_set_job_name(GtkPrintOperation * _self_, gchar * job_name) {
	(void)gtk_print_operation_set_job_name(_self_, (const gchar *)(job_name));
}
GtkPrintSettings * _gtk_print_settings_new_from_file(gchar * file_name, void * error) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_file((const gchar *)(file_name), (GError **)(error));
}
GtkPrintSettings * _gtk_print_settings_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
gchar * _gtk_print_settings_get(GtkPrintSettings * _self_, gchar * key) {
	return (gchar *)gtk_print_settings_get(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_get_bool(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_get_bool(_self_, (const gchar *)(key));
}
gchar * _gtk_print_settings_get_default_source(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_default_source(_self_);
}
gchar * _gtk_print_settings_get_dither(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_dither(_self_);
}
gdouble _gtk_print_settings_get_double(GtkPrintSettings * _self_, gchar * key) {
	return (gdouble)gtk_print_settings_get_double(_self_, (const gchar *)(key));
}
gdouble _gtk_print_settings_get_double_with_default(GtkPrintSettings * _self_, gchar * key, gdouble def) {
	return (gdouble)gtk_print_settings_get_double_with_default(_self_, (const gchar *)(key), def);
}
gchar * _gtk_print_settings_get_finishings(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_finishings(_self_);
}
gint _gtk_print_settings_get_int(GtkPrintSettings * _self_, gchar * key) {
	return (gint)gtk_print_settings_get_int(_self_, (const gchar *)(key));
}
gint _gtk_print_settings_get_int_with_default(GtkPrintSettings * _self_, gchar * key, gint def) {
	return (gint)gtk_print_settings_get_int_with_default(_self_, (const gchar *)(key), def);
}
gdouble _gtk_print_settings_get_length(GtkPrintSettings * _self_, gchar * key, GtkUnit unit) {
	return (gdouble)gtk_print_settings_get_length(_self_, (const gchar *)(key), unit);
}
gchar * _gtk_print_settings_get_media_type(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_media_type(_self_);
}
gchar * _gtk_print_settings_get_output_bin(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_output_bin(_self_);
}
gchar * _gtk_print_settings_get_printer(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_printer(_self_);
}
gboolean _gtk_print_settings_has_key(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_has_key(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_load_file(GtkPrintSettings * _self_, gchar * file_name, void * error) {
	return (gboolean)gtk_print_settings_load_file(_self_, (const gchar *)(file_name), (GError **)(error));
}
gboolean _gtk_print_settings_load_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name, void * error) {
	return (gboolean)gtk_print_settings_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(error));
}
void _gtk_print_settings_set(GtkPrintSettings * _self_, gchar * key, gchar * value) {
	(void)gtk_print_settings_set(_self_, (const gchar *)(key), (const gchar *)(value));
}
void _gtk_print_settings_set_bool(GtkPrintSettings * _self_, gchar * key, gboolean value) {
	(void)gtk_print_settings_set_bool(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_default_source(GtkPrintSettings * _self_, gchar * default_source) {
	(void)gtk_print_settings_set_default_source(_self_, (const gchar *)(default_source));
}
void _gtk_print_settings_set_dither(GtkPrintSettings * _self_, gchar * dither) {
	(void)gtk_print_settings_set_dither(_self_, (const gchar *)(dither));
}
void _gtk_print_settings_set_double(GtkPrintSettings * _self_, gchar * key, gdouble value) {
	(void)gtk_print_settings_set_double(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_finishings(GtkPrintSettings * _self_, gchar * finishings) {
	(void)gtk_print_settings_set_finishings(_self_, (const gchar *)(finishings));
}
void _gtk_print_settings_set_int(GtkPrintSettings * _self_, gchar * key, gint value) {
	(void)gtk_print_settings_set_int(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_length(GtkPrintSettings * _self_, gchar * key, gdouble value, GtkUnit unit) {
	(void)gtk_print_settings_set_length(_self_, (const gchar *)(key), value, unit);
}
void _gtk_print_settings_set_media_type(GtkPrintSettings * _self_, gchar * media_type) {
	(void)gtk_print_settings_set_media_type(_self_, (const gchar *)(media_type));
}
void _gtk_print_settings_set_output_bin(GtkPrintSettings * _self_, gchar * output_bin) {
	(void)gtk_print_settings_set_output_bin(_self_, (const gchar *)(output_bin));
}
void _gtk_print_settings_set_printer(GtkPrintSettings * _self_, gchar * printer) {
	(void)gtk_print_settings_set_printer(_self_, (const gchar *)(printer));
}
gboolean _gtk_print_settings_to_file(GtkPrintSettings * _self_, gchar * file_name, void * error) {
	return (gboolean)gtk_print_settings_to_file(_self_, (const gchar *)(file_name), (GError **)(error));
}
void _gtk_print_settings_to_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_print_settings_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_settings_unset(GtkPrintSettings * _self_, gchar * key) {
	(void)gtk_print_settings_unset(_self_, (const gchar *)(key));
}
gchar * _gtk_progress_bar_get_text(GtkProgressBar * _self_) {
	return (gchar *)gtk_progress_bar_get_text(_self_);
}
void _gtk_progress_bar_set_text(GtkProgressBar * _self_, gchar * text) {
	(void)gtk_progress_bar_set_text(_self_, (const gchar *)(text));
}
GtkRadioAction * _gtk_radio_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, gint value) {
	return (GtkRadioAction *)gtk_radio_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), value);
}
GtkWidget * _gtk_radio_button_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_label_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label_from_widget(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic_from_widget(group, (const gchar *)(label));
}
GtkToolItem * _gtk_radio_tool_button_new_from_stock(GSList * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_from_stock(group, (const gchar *)(stock_id));
}
GtkToolItem * _gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_with_stock_from_widget(group, (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_recent_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new_for_manager(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, GtkRecentManager * manager) {
	return (GtkAction *)gtk_recent_action_new_for_manager((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), manager);
}
void _gtk_recent_filter_add_application(GtkRecentFilter * _self_, gchar * application) {
	(void)gtk_recent_filter_add_application(_self_, (const gchar *)(application));
}
void _gtk_recent_filter_add_group(GtkRecentFilter * _self_, gchar * group) {
	(void)gtk_recent_filter_add_group(_self_, (const gchar *)(group));
}
void _gtk_recent_filter_add_mime_type(GtkRecentFilter * _self_, gchar * mime_type) {
	(void)gtk_recent_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_recent_filter_add_pattern(GtkRecentFilter * _self_, gchar * pattern) {
	(void)gtk_recent_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_recent_filter_filter(GtkRecentFilter * _self_, GtkRecentFilterInfo * filter_info) {
	return (gboolean)gtk_recent_filter_filter(_self_, (const GtkRecentFilterInfo *)(filter_info));
}
gchar * _gtk_recent_filter_get_name(GtkRecentFilter * _self_) {
	return (gchar *)gtk_recent_filter_get_name(_self_);
}
void _gtk_recent_filter_set_name(GtkRecentFilter * _self_, gchar * name) {
	(void)gtk_recent_filter_set_name(_self_, (const gchar *)(name));
}
gboolean _gtk_recent_manager_add_full(GtkRecentManager * _self_, gchar * uri, GtkRecentData * recent_data) {
	return (gboolean)gtk_recent_manager_add_full(_self_, (const gchar *)(uri), (const GtkRecentData *)(recent_data));
}
gboolean _gtk_recent_manager_add_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_add_item(_self_, (const gchar *)(uri));
}
gboolean _gtk_recent_manager_has_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_has_item(_self_, (const gchar *)(uri));
}
GtkRecentInfo * _gtk_recent_manager_lookup_item(GtkRecentManager * _self_, gchar * uri, void * error) {
	return (GtkRecentInfo *)gtk_recent_manager_lookup_item(_self_, (const gchar *)(uri), (GError **)(error));
}
gboolean _gtk_recent_manager_move_item(GtkRecentManager * _self_, gchar * uri, gchar * new_uri, void * error) {
	return (gboolean)gtk_recent_manager_move_item(_self_, (const gchar *)(uri), (const gchar *)(new_uri), (GError **)(error));
}
gint _gtk_recent_manager_purge_items(GtkRecentManager * _self_, void * error) {
	return (gint)gtk_recent_manager_purge_items(_self_, (GError **)(error));
}
gboolean _gtk_recent_manager_remove_item(GtkRecentManager * _self_, gchar * uri, void * error) {
	return (gboolean)gtk_recent_manager_remove_item(_self_, (const gchar *)(uri), (GError **)(error));
}
void _gtk_scale_add_mark(GtkScale * _self_, gdouble value, GtkPositionType position, gchar * markup) {
	(void)gtk_scale_add_mark(_self_, value, position, (const gchar *)(markup));
}
void _gtk_settings_set_double_property(GtkSettings * _self_, gchar * name, gdouble v_double, gchar * origin) {
	(void)gtk_settings_set_double_property(_self_, (const gchar *)(name), v_double, (const gchar *)(origin));
}
void _gtk_settings_set_long_property(GtkSettings * _self_, gchar * name, glong v_long, gchar * origin) {
	(void)gtk_settings_set_long_property(_self_, (const gchar *)(name), v_long, (const gchar *)(origin));
}
void _gtk_settings_set_property_value(GtkSettings * _self_, gchar * name, GtkSettingsValue * svalue) {
	(void)gtk_settings_set_property_value(_self_, (const gchar *)(name), (const GtkSettingsValue *)(svalue));
}
void _gtk_settings_set_string_property(GtkSettings * _self_, gchar * name, gchar * v_string, gchar * origin) {
	(void)gtk_settings_set_string_property(_self_, (const gchar *)(name), (const gchar *)(v_string), (const gchar *)(origin));
}
GtkStatusIcon * _gtk_status_icon_new_from_file(gchar * filename) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_file((const gchar *)(filename));
}
GtkStatusIcon * _gtk_status_icon_new_from_icon_name(gchar * icon_name) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_icon_name((const gchar *)(icon_name));
}
GtkStatusIcon * _gtk_status_icon_new_from_stock(gchar * stock_id) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_stock((const gchar *)(stock_id));
}
gboolean _gtk_status_icon_get_geometry(GtkStatusIcon * _self_, void * screen, GdkRectangle * area, GtkOrientation * orientation) {
	return (gboolean)gtk_status_icon_get_geometry(_self_, (GdkScreen **)(screen), area, orientation);
}
gchar * _gtk_status_icon_get_icon_name(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_icon_name(_self_);
}
gchar * _gtk_status_icon_get_stock(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_stock(_self_);
}
gchar * _gtk_status_icon_get_title(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_title(_self_);
}
void _gtk_status_icon_set_from_file(GtkStatusIcon * _self_, gchar * filename) {
	(void)gtk_status_icon_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_status_icon_set_from_icon_name(GtkStatusIcon * _self_, gchar * icon_name) {
	(void)gtk_status_icon_set_from_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_status_icon_set_from_stock(GtkStatusIcon * _self_, gchar * stock_id) {
	(void)gtk_status_icon_set_from_stock(_self_, (const gchar *)(stock_id));
}
void _gtk_status_icon_set_name(GtkStatusIcon * _self_, gchar * name) {
	(void)gtk_status_icon_set_name(_self_, (const gchar *)(name));
}
void _gtk_status_icon_set_title(GtkStatusIcon * _self_, gchar * title) {
	(void)gtk_status_icon_set_title(_self_, (const gchar *)(title));
}
void _gtk_status_icon_set_tooltip_markup(GtkStatusIcon * _self_, gchar * markup) {
	(void)gtk_status_icon_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_status_icon_set_tooltip_text(GtkStatusIcon * _self_, gchar * text) {
	(void)gtk_status_icon_set_tooltip_text(_self_, (const gchar *)(text));
}
guint _gtk_statusbar_get_context_id(GtkStatusbar * _self_, gchar * context_description) {
	return (guint)gtk_statusbar_get_context_id(_self_, (const gchar *)(context_description));
}
guint _gtk_statusbar_push(GtkStatusbar * _self_, guint context_id, gchar * text) {
	return (guint)gtk_statusbar_push(_self_, context_id, (const gchar *)(text));
}
void _gtk_style_context_add_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_add_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_add_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags flags) {
	(void)gtk_style_context_add_region(_self_, (const gchar *)(region_name), flags);
}
PangoFontDescription * _gtk_style_context_get_font(GtkStyleContext * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_style_context_get_font(_self_, state);
}
GtkWidgetPath * _gtk_style_context_get_path(GtkStyleContext * _self_) {
	return (GtkWidgetPath *)gtk_style_context_get_path(_self_);
}
void _gtk_style_context_get_property(GtkStyleContext * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_context_get_property(_self_, (const gchar *)(property), state, value);
}
GtkCssSection * _gtk_style_context_get_section(GtkStyleContext * _self_, gchar * property) {
	return (GtkCssSection *)gtk_style_context_get_section(_self_, (const gchar *)(property));
}
void _gtk_style_context_get_style_property(GtkStyleContext * _self_, gchar * property_name, GValue * value) {
	(void)gtk_style_context_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_style_context_has_class(GtkStyleContext * _self_, gchar * class_name) {
	return (gboolean)gtk_style_context_has_class(_self_, (const gchar *)(class_name));
}
gboolean _gtk_style_context_has_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags * flags_return) {
	return (gboolean)gtk_style_context_has_region(_self_, (const gchar *)(region_name), flags_return);
}
gboolean _gtk_style_context_lookup_color(GtkStyleContext * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_style_context_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkIconSet * _gtk_style_context_lookup_icon_set(GtkStyleContext * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_style_context_lookup_icon_set(_self_, (const gchar *)(stock_id));
}
void _gtk_style_context_remove_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_remove_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_remove_region(GtkStyleContext * _self_, gchar * region_name) {
	(void)gtk_style_context_remove_region(_self_, (const gchar *)(region_name));
}
gboolean _gtk_style_properties_lookup_property(gchar * property_name, GtkStylePropertyParser * parse_func, void * pspec) {
	return (gboolean)gtk_style_properties_lookup_property((const gchar *)(property_name), parse_func, (GParamSpec **)(pspec));
}
gboolean _gtk_style_properties_get_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	return (gboolean)gtk_style_properties_get_property(_self_, (const gchar *)(property), state, value);
}
GtkSymbolicColor * _gtk_style_properties_lookup_color(GtkStyleProperties * _self_, gchar * name) {
	return (GtkSymbolicColor *)gtk_style_properties_lookup_color(_self_, (const gchar *)(name));
}
void _gtk_style_properties_map_color(GtkStyleProperties * _self_, gchar * name, GtkSymbolicColor * color) {
	(void)gtk_style_properties_map_color(_self_, (const gchar *)(name), color);
}
void _gtk_style_properties_merge(GtkStyleProperties * _self_, GtkStyleProperties * props_to_merge, gboolean replace) {
	(void)gtk_style_properties_merge(_self_, (const GtkStyleProperties *)(props_to_merge), replace);
}
void _gtk_style_properties_set_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_properties_set_property(_self_, (const gchar *)(property), state, (const GValue *)(value));
}
void _gtk_style_properties_unset_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state) {
	(void)gtk_style_properties_unset_property(_self_, (const gchar *)(property), state);
}
void _gtk_text_buffer_add_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_add_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_apply_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_apply_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
GtkTextMark * _gtk_text_buffer_create_mark(GtkTextBuffer * _self_, gchar * mark_name, GtkTextIter * where, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_buffer_create_mark(_self_, (const gchar *)(mark_name), (const GtkTextIter *)(where), left_gravity);
}
void _gtk_text_buffer_delete_mark_by_name(GtkTextBuffer * _self_, gchar * name) {
	(void)gtk_text_buffer_delete_mark_by_name(_self_, (const gchar *)(name));
}
GtkTextMark * _gtk_text_buffer_get_mark(GtkTextBuffer * _self_, gchar * name) {
	return (GtkTextMark *)gtk_text_buffer_get_mark(_self_, (const gchar *)(name));
}
gchar * _gtk_text_buffer_get_slice(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_slice(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
gchar * _gtk_text_buffer_get_text(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_text(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
void _gtk_text_buffer_insert(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len) {
	(void)gtk_text_buffer_insert(_self_, iter, (const gchar *)(text), len);
}
void _gtk_text_buffer_insert_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_insert_at_cursor(_self_, (const gchar *)(text), len);
}
gboolean _gtk_text_buffer_insert_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive(_self_, iter, (const gchar *)(text), len, default_editable);
}
gboolean _gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive_at_cursor(_self_, (const gchar *)(text), len, default_editable);
}
void _gtk_text_buffer_insert_range(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_insert_range(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_insert_range_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_range_interactive(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end), default_editable);
}
void _gtk_text_buffer_move_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_move_mark_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_place_cursor(GtkTextBuffer * _self_, GtkTextIter * where) {
	(void)gtk_text_buffer_place_cursor(_self_, (const GtkTextIter *)(where));
}
GdkAtom _gtk_text_buffer_register_deserialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_tagset(_self_, (const gchar *)(tagset_name));
}
GdkAtom _gtk_text_buffer_register_serialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_serialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_serialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_serialize_tagset(_self_, (const gchar *)(tagset_name));
}
void _gtk_text_buffer_remove_all_tags(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_all_tags(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_select_range(GtkTextBuffer * _self_, GtkTextIter * ins, GtkTextIter * bound) {
	(void)gtk_text_buffer_select_range(_self_, (const GtkTextIter *)(ins), (const GtkTextIter *)(bound));
}
guint8 * _gtk_text_buffer_serialize(GtkTextBuffer * _self_, GtkTextBuffer * content_buffer, GdkAtom format, GtkTextIter * start, GtkTextIter * end, gsize * length) {
	return (guint8 *)gtk_text_buffer_serialize(_self_, content_buffer, format, (const GtkTextIter *)(start), (const GtkTextIter *)(end), length);
}
void _gtk_text_buffer_set_text(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_set_text(_self_, (const gchar *)(text), len);
}
GtkTextMark * _gtk_text_mark_new(gchar * name, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_mark_new((const gchar *)(name), left_gravity);
}
gchar * _gtk_text_mark_get_name(GtkTextMark * _self_) {
	return (gchar *)gtk_text_mark_get_name(_self_);
}
GtkTextTag * _gtk_text_tag_new(gchar * name) {
	return (GtkTextTag *)gtk_text_tag_new((const gchar *)(name));
}
gboolean _gtk_text_tag_event(GtkTextTag * _self_, GObject * event_object, GdkEvent * event, GtkTextIter * iter) {
	return (gboolean)gtk_text_tag_event(_self_, event_object, event, (const GtkTextIter *)(iter));
}
GtkTextTag * _gtk_text_tag_table_lookup(GtkTextTagTable * _self_, gchar * name) {
	return (GtkTextTag *)gtk_text_tag_table_lookup(_self_, (const gchar *)(name));
}
void _gtk_text_view_get_cursor_locations(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * strong, GdkRectangle * weak) {
	(void)gtk_text_view_get_cursor_locations(_self_, (const GtkTextIter *)(iter), strong, weak);
}
void _gtk_text_view_get_iter_location(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * location) {
	(void)gtk_text_view_get_iter_location(_self_, (const GtkTextIter *)(iter), location);
}
void _gtk_text_view_get_line_yrange(GtkTextView * _self_, GtkTextIter * iter, gint * y, gint * height) {
	(void)gtk_text_view_get_line_yrange(_self_, (const GtkTextIter *)(iter), y, height);
}
gboolean _gtk_text_view_starts_display_line(GtkTextView * _self_, GtkTextIter * iter) {
	return (gboolean)gtk_text_view_starts_display_line(_self_, (const GtkTextIter *)(iter));
}
GtkThemingEngine * _gtk_theming_engine_load(gchar * name) {
	return (GtkThemingEngine *)gtk_theming_engine_load((const gchar *)(name));
}
void _gtk_theming_engine_register_property(gchar * name_space, GtkStylePropertyParser parse_func, GParamSpec * pspec) {
	(void)gtk_theming_engine_register_property((const gchar *)(name_space), parse_func, pspec);
}
PangoFontDescription * _gtk_theming_engine_get_font(GtkThemingEngine * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_theming_engine_get_font(_self_, state);
}
GtkWidgetPath * _gtk_theming_engine_get_path(GtkThemingEngine * _self_) {
	return (GtkWidgetPath *)gtk_theming_engine_get_path(_self_);
}
void _gtk_theming_engine_get_property(GtkThemingEngine * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_theming_engine_get_property(_self_, (const gchar *)(property), state, value);
}
void _gtk_theming_engine_get_style_property(GtkThemingEngine * _self_, gchar * property_name, GValue * value) {
	(void)gtk_theming_engine_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_theming_engine_has_class(GtkThemingEngine * _self_, gchar * style_class) {
	return (gboolean)gtk_theming_engine_has_class(_self_, (const gchar *)(style_class));
}
gboolean _gtk_theming_engine_has_region(GtkThemingEngine * _self_, gchar * style_region, GtkRegionFlags * flags) {
	return (gboolean)gtk_theming_engine_has_region(_self_, (const gchar *)(style_region), flags);
}
gboolean _gtk_theming_engine_lookup_color(GtkThemingEngine * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_theming_engine_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkToggleAction * _gtk_toggle_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkToggleAction *)gtk_toggle_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkWidget * _gtk_toggle_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_toggle_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_mnemonic((const gchar *)(label));
}
GtkToolItem * _gtk_toggle_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_toggle_tool_button_new_from_stock((const gchar *)(stock_id));
}
GtkToolItem * _gtk_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_tool_button_new_from_stock((const gchar *)(stock_id));
}
gchar * _gtk_tool_button_get_icon_name(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_icon_name(_self_);
}
gchar * _gtk_tool_button_get_label(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_label(_self_);
}
gchar * _gtk_tool_button_get_stock_id(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_stock_id(_self_);
}
void _gtk_tool_button_set_icon_name(GtkToolButton * _self_, gchar * icon_name) {
	(void)gtk_tool_button_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_tool_button_set_label(GtkToolButton * _self_, gchar * label) {
	(void)gtk_tool_button_set_label(_self_, (const gchar *)(label));
}
void _gtk_tool_button_set_stock_id(GtkToolButton * _self_, gchar * stock_id) {
	(void)gtk_tool_button_set_stock_id(_self_, (const gchar *)(stock_id));
}
GtkWidget * _gtk_tool_item_get_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id) {
	return (GtkWidget *)gtk_tool_item_get_proxy_menu_item(_self_, (const gchar *)(menu_item_id));
}
void _gtk_tool_item_set_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id, GtkWidget * menu_item) {
	(void)gtk_tool_item_set_proxy_menu_item(_self_, (const gchar *)(menu_item_id), menu_item);
}
void _gtk_tool_item_set_tooltip_markup(GtkToolItem * _self_, gchar * markup) {
	(void)gtk_tool_item_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_tool_item_set_tooltip_text(GtkToolItem * _self_, gchar * text) {
	(void)gtk_tool_item_set_tooltip_text(_self_, (const gchar *)(text));
}
GtkWidget * _gtk_tool_item_group_new(gchar * label) {
	return (GtkWidget *)gtk_tool_item_group_new((const gchar *)(label));
}
gchar * _gtk_tool_item_group_get_label(GtkToolItemGroup * _self_) {
	return (gchar *)gtk_tool_item_group_get_label(_self_);
}
void _gtk_tool_item_group_set_label(GtkToolItemGroup * _self_, gchar * label) {
	(void)gtk_tool_item_group_set_label(_self_, (const gchar *)(label));
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_group() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_group();
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_item() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_item();
}
GtkWidget * _gtk_tool_palette_get_drag_item(GtkToolPalette * _self_, GtkSelectionData * selection) {
	return (GtkWidget *)gtk_tool_palette_get_drag_item(_self_, (const GtkSelectionData *)(selection));
}
void _gtk_tooltip_set_icon_from_icon_name(GtkTooltip * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_tooltip_set_icon_from_stock(GtkTooltip * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_stock(_self_, (const gchar *)(stock_id), size);
}
void _gtk_tooltip_set_markup(GtkTooltip * _self_, gchar * markup) {
	(void)gtk_tooltip_set_markup(_self_, (const gchar *)(markup));
}
void _gtk_tooltip_set_text(GtkTooltip * _self_, gchar * text) {
	(void)gtk_tooltip_set_text(_self_, (const gchar *)(text));
}
void _gtk_tooltip_set_tip_area(GtkTooltip * _self_, GdkRectangle * rect) {
	(void)gtk_tooltip_set_tip_area(_self_, (const GdkRectangle *)(rect));
}
gboolean _gtk_tree_selection_get_selected(GtkTreeSelection * _self_, void * model, GtkTreeIter * iter) {
	return (gboolean)gtk_tree_selection_get_selected(_self_, (GtkTreeModel **)(model), iter);
}
GList * _gtk_tree_selection_get_selected_rows(GtkTreeSelection * _self_, void * model) {
	return (GList *)gtk_tree_selection_get_selected_rows(_self_, (GtkTreeModel **)(model));
}
void _gtk_tree_view_get_cursor(GtkTreeView * _self_, void * path, void * focus_column) {
	(void)gtk_tree_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkTreeViewColumn **)(focus_column));
}
gboolean _gtk_tree_view_get_dest_row_at_pos(GtkTreeView * _self_, gint drag_x, gint drag_y, void * path, GtkTreeViewDropPosition * pos) {
	return (gboolean)gtk_tree_view_get_dest_row_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_tree_view_get_drag_dest_row(GtkTreeView * _self_, void * path, GtkTreeViewDropPosition * pos) {
	(void)gtk_tree_view_get_drag_dest_row(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_tree_view_get_path_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_get_path_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
gboolean _gtk_tree_view_get_visible_range(GtkTreeView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_tree_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
gint _gtk_tree_view_insert_column_with_data_func(GtkTreeView * _self_, gint position, gchar * title, GtkCellRenderer * cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify) {
	return (gint)gtk_tree_view_insert_column_with_data_func(_self_, position, (const gchar *)(title), cell, func, data, dnotify);
}
gboolean _gtk_tree_view_is_blank_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_is_blank_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
void _gtk_tree_view_column_add_attribute(GtkTreeViewColumn * _self_, GtkCellRenderer * cell_renderer, gchar * attribute, gint column) {
	(void)gtk_tree_view_column_add_attribute(_self_, cell_renderer, (const gchar *)(attribute), column);
}
void _gtk_tree_view_column_cell_get_size(GtkTreeViewColumn * _self_, GdkRectangle * cell_area, gint * x_offset, gint * y_offset, gint * width, gint * height) {
	(void)gtk_tree_view_column_cell_get_size(_self_, (const GdkRectangle *)(cell_area), x_offset, y_offset, width, height);
}
gchar * _gtk_tree_view_column_get_title(GtkTreeViewColumn * _self_) {
	return (gchar *)gtk_tree_view_column_get_title(_self_);
}
void _gtk_tree_view_column_set_title(GtkTreeViewColumn * _self_, gchar * title) {
	(void)gtk_tree_view_column_set_title(_self_, (const gchar *)(title));
}
void _gtk_ui_manager_add_ui(GtkUIManager * _self_, guint merge_id, gchar * path, gchar * name, gchar * action, GtkUIManagerItemType type, gboolean top) {
	(void)gtk_ui_manager_add_ui(_self_, merge_id, (const gchar *)(path), (const gchar *)(name), (const gchar *)(action), type, top);
}
guint _gtk_ui_manager_add_ui_from_file(GtkUIManager * _self_, gchar * filename, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_file(_self_, (const gchar *)(filename), (GError **)(error));
}
guint _gtk_ui_manager_add_ui_from_resource(GtkUIManager * _self_, gchar * resource_path, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_resource(_self_, (const gchar *)(resource_path), (GError **)(error));
}
guint _gtk_ui_manager_add_ui_from_string(GtkUIManager * _self_, gchar * buffer, gssize length, void * error) {
	return (guint)gtk_ui_manager_add_ui_from_string(_self_, (const gchar *)(buffer), length, (GError **)(error));
}
GtkAction * _gtk_ui_manager_get_action(GtkUIManager * _self_, gchar * path) {
	return (GtkAction *)gtk_ui_manager_get_action(_self_, (const gchar *)(path));
}
GtkWidget * _gtk_ui_manager_get_widget(GtkUIManager * _self_, gchar * path) {
	return (GtkWidget *)gtk_ui_manager_get_widget(_self_, (const gchar *)(path));
}
void _gtk_widget_add_accelerator(GtkWidget * _self_, gchar * accel_signal, GtkAccelGroup * accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags) {
	(void)gtk_widget_add_accelerator(_self_, (const gchar *)(accel_signal), accel_group, accel_key, accel_mods, accel_flags);
}
void _gtk_widget_child_notify(GtkWidget * _self_, gchar * child_property) {
	(void)gtk_widget_child_notify(_self_, (const gchar *)(child_property));
}
PangoLayout * _gtk_widget_create_pango_layout(GtkWidget * _self_, gchar * text) {
	return (PangoLayout *)gtk_widget_create_pango_layout(_self_, (const gchar *)(text));
}
void _gtk_drag_source_set_icon_name(GtkWidget * _self_, gchar * icon_name) {
	(void)gtk_drag_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_drag_source_set_icon_stock(GtkWidget * _self_, gchar * stock_id) {
	(void)gtk_drag_source_set_icon_stock(_self_, (const gchar *)(stock_id));
}
gchar * _gtk_widget_get_name(GtkWidget * _self_) {
	return (gchar *)gtk_widget_get_name(_self_);
}
void _gtk_widget_insert_action_group(GtkWidget * _self_, gchar * name, GActionGroup * group) {
	(void)gtk_widget_insert_action_group(_self_, (const gchar *)(name), group);
}
gboolean _gtk_widget_intersect(GtkWidget * _self_, GdkRectangle * area, GdkRectangle * intersection) {
	return (gboolean)gtk_widget_intersect(_self_, (const GdkRectangle *)(area), intersection);
}
void _gtk_widget_override_background_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_background_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_cursor(GtkWidget * _self_, GdkRGBA * cursor, GdkRGBA * secondary_cursor) {
	(void)gtk_widget_override_cursor(_self_, (const GdkRGBA *)(cursor), (const GdkRGBA *)(secondary_cursor));
}
void _gtk_widget_override_font(GtkWidget * _self_, PangoFontDescription * font_desc) {
	(void)gtk_widget_override_font(_self_, (const PangoFontDescription *)(font_desc));
}
void _gtk_widget_override_symbolic_color(GtkWidget * _self_, gchar * name, GdkRGBA * color) {
	(void)gtk_widget_override_symbolic_color(_self_, (const gchar *)(name), (const GdkRGBA *)(color));
}
void _gtk_widget_queue_draw_region(GtkWidget * _self_, cairo_region_t * region) {
	(void)gtk_widget_queue_draw_region(_self_, (const cairo_region_t *)(region));
}
cairo_region_t * _gtk_widget_region_intersect(GtkWidget * _self_, cairo_region_t * region) {
	return (cairo_region_t *)gtk_widget_region_intersect(_self_, (const cairo_region_t *)(region));
}
GdkPixbuf * _gtk_widget_render_icon_pixbuf(GtkWidget * _self_, gchar * stock_id, GtkIconSize size) {
	return (GdkPixbuf *)gtk_widget_render_icon_pixbuf(_self_, (const gchar *)(stock_id), size);
}
void _gtk_widget_set_accel_path(GtkWidget * _self_, gchar * accel_path, GtkAccelGroup * accel_group) {
	(void)gtk_widget_set_accel_path(_self_, (const gchar *)(accel_path), accel_group);
}
void _gtk_widget_set_allocation(GtkWidget * _self_, GtkAllocation * allocation) {
	(void)gtk_widget_set_allocation(_self_, (const GtkAllocation *)(allocation));
}
void _gtk_widget_set_composite_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_composite_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_tooltip_markup(GtkWidget * _self_, gchar * markup) {
	(void)gtk_widget_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_widget_set_tooltip_text(GtkWidget * _self_, gchar * text) {
	(void)gtk_widget_set_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_widget_style_get_property(GtkWidget * _self_, gchar * property_name, GValue * value) {
	(void)gtk_widget_style_get_property(_self_, (const gchar *)(property_name), value);
}
gchar * _gtk_window_get_default_icon_name() {
	return (gchar *)gtk_window_get_default_icon_name();
}
gboolean _gtk_window_set_default_icon_from_file(gchar * filename, void * err) {
	return (gboolean)gtk_window_set_default_icon_from_file((const gchar *)(filename), (GError **)(err));
}
void _gtk_window_set_default_icon_name(gchar * name) {
	(void)gtk_window_set_default_icon_name((const gchar *)(name));
}
gchar * _gtk_window_get_icon_name(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_icon_name(_self_);
}
gchar * _gtk_window_get_role(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_role(_self_);
}
gchar * _gtk_window_get_title(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_title(_self_);
}
gboolean _gtk_window_parse_geometry(GtkWindow * _self_, gchar * geometry) {
	return (gboolean)gtk_window_parse_geometry(_self_, (const gchar *)(geometry));
}
gboolean _gtk_window_set_icon_from_file(GtkWindow * _self_, gchar * filename, void * err) {
	return (gboolean)gtk_window_set_icon_from_file(_self_, (const gchar *)(filename), (GError **)(err));
}
void _gtk_window_set_icon_name(GtkWindow * _self_, gchar * name) {
	(void)gtk_window_set_icon_name(_self_, (const gchar *)(name));
}
void _gtk_window_set_role(GtkWindow * _self_, gchar * role) {
	(void)gtk_window_set_role(_self_, (const gchar *)(role));
}
void _gtk_window_set_startup_id(GtkWindow * _self_, gchar * startup_id) {
	(void)gtk_window_set_startup_id(_self_, (const gchar *)(startup_id));
}
void _gtk_window_set_title(GtkWindow * _self_, gchar * title) {
	(void)gtk_window_set_title(_self_, (const gchar *)(title));
}
void _gtk_window_set_wmclass(GtkWindow * _self_, gchar * wmclass_name, gchar * wmclass_class) {
	(void)gtk_window_set_wmclass(_self_, (const gchar *)(wmclass_name), (const gchar *)(wmclass_class));
}
GtkBorder * _gtk_border_copy(GtkBorder * _self_) {
	return (GtkBorder *)gtk_border_copy((const GtkBorder *)(_self_));
}
GParamSpec * _gtk_cell_area_class_find_cell_property(GtkCellAreaClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_cell_area_class_find_cell_property(_self_, (const gchar *)(property_name));
}
void * _gtk_cell_area_class_list_cell_properties(GtkCellAreaClass * _self_, guint * n_properties) {
	return (void *)gtk_cell_area_class_list_cell_properties(_self_, n_properties);
}
GParamSpec * _gtk_container_class_find_child_property(GtkContainerClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_container_class_find_child_property((GObjectClass *)(_self_), (const gchar *)(property_name));
}
void * _gtk_container_class_list_child_properties(GtkContainerClass * _self_, guint * n_properties) {
	return (void *)gtk_container_class_list_child_properties((GObjectClass *)(_self_), n_properties);
}
guint _gtk_css_section_get_end_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_end_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_position((const GtkCssSection *)(_self_));
}
GFile * _gtk_css_section_get_file(GtkCssSection * _self_) {
	return (GFile *)gtk_css_section_get_file((const GtkCssSection *)(_self_));
}
GtkCssSection * _gtk_css_section_get_parent(GtkCssSection * _self_) {
	return (GtkCssSection *)gtk_css_section_get_parent((const GtkCssSection *)(_self_));
}
GtkCssSectionType _gtk_css_section_get_section_type(GtkCssSection * _self_) {
	return (GtkCssSectionType)gtk_css_section_get_section_type((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_position((const GtkCssSection *)(_self_));
}
gboolean _gtk_gradient_resolve(GtkGradient * _self_, GtkStyleProperties * props, void * resolved_gradient) {
	return (gboolean)gtk_gradient_resolve(_self_, props, (cairo_pattern_t **)(resolved_gradient));
}
gchar * _gtk_icon_info_get_display_name(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_display_name(_self_);
}
gchar * _gtk_icon_info_get_filename(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_filename(_self_);
}
GdkPixbuf * _gtk_icon_info_load_icon(GtkIconInfo * _self_, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_icon(_self_, (GError **)(error));
}
GdkPixbuf * _gtk_icon_info_load_symbolic(GtkIconInfo * _self_, GdkRGBA * fg, GdkRGBA * success_color, GdkRGBA * warning_color, GdkRGBA * error_color, gboolean * was_symbolic, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic(_self_, (const GdkRGBA *)(fg), (const GdkRGBA *)(success_color), (const GdkRGBA *)(warning_color), (const GdkRGBA *)(error_color), was_symbolic, (GError **)(error));
}
GdkPixbuf * _gtk_icon_info_load_symbolic_for_context(GtkIconInfo * _self_, GtkStyleContext * context, gboolean * was_symbolic, void * error) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic_for_context(_self_, context, was_symbolic, (GError **)(error));
}
void _gtk_icon_set_add_source(GtkIconSet * _self_, GtkIconSource * source) {
	(void)gtk_icon_set_add_source(_self_, (const GtkIconSource *)(source));
}
GtkIconSource * _gtk_icon_source_copy(GtkIconSource * _self_) {
	return (GtkIconSource *)gtk_icon_source_copy((const GtkIconSource *)(_self_));
}
GtkTextDirection _gtk_icon_source_get_direction(GtkIconSource * _self_) {
	return (GtkTextDirection)gtk_icon_source_get_direction((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_direction_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_direction_wildcarded((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_filename(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_filename((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_icon_name(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_icon_name((const GtkIconSource *)(_self_));
}
GdkPixbuf * _gtk_icon_source_get_pixbuf(GtkIconSource * _self_) {
	return (GdkPixbuf *)gtk_icon_source_get_pixbuf((const GtkIconSource *)(_self_));
}
GtkIconSize _gtk_icon_source_get_size(GtkIconSource * _self_) {
	return (GtkIconSize)gtk_icon_source_get_size((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_size_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_size_wildcarded((const GtkIconSource *)(_self_));
}
GtkStateType _gtk_icon_source_get_state(GtkIconSource * _self_) {
	return (GtkStateType)gtk_icon_source_get_state((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_state_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_state_wildcarded((const GtkIconSource *)(_self_));
}
void _gtk_icon_source_set_filename(GtkIconSource * _self_, gchar * filename) {
	(void)gtk_icon_source_set_filename(_self_, (const gchar *)(filename));
}
void _gtk_icon_source_set_icon_name(GtkIconSource * _self_, gchar * icon_name) {
	(void)gtk_icon_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
GtkPaperSize * _gtk_paper_size_new(gchar * name) {
	return (GtkPaperSize *)gtk_paper_size_new((const gchar *)(name));
}
GtkPaperSize * _gtk_paper_size_new_custom(gchar * name, gchar * display_name, gdouble width, gdouble height, GtkUnit unit) {
	return (GtkPaperSize *)gtk_paper_size_new_custom((const gchar *)(name), (const gchar *)(display_name), width, height, unit);
}
GtkPaperSize * _gtk_paper_size_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * error) {
	return (GtkPaperSize *)gtk_paper_size_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(error));
}
GtkPaperSize * _gtk_paper_size_new_from_ppd(gchar * ppd_name, gchar * ppd_display_name, gdouble width, gdouble height) {
	return (GtkPaperSize *)gtk_paper_size_new_from_ppd((const gchar *)(ppd_name), (const gchar *)(ppd_display_name), width, height);
}
gchar * _gtk_paper_size_get_display_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_display_name(_self_);
}
gchar * _gtk_paper_size_get_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_name(_self_);
}
gchar * _gtk_paper_size_get_ppd_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_ppd_name(_self_);
}
void _gtk_paper_size_to_key_file(GtkPaperSize * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_paper_size_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
GAppInfo * _gtk_recent_info_create_app_info(GtkRecentInfo * _self_, gchar * app_name, void * error) {
	return (GAppInfo *)gtk_recent_info_create_app_info(_self_, (const gchar *)(app_name), (GError **)(error));
}
gboolean _gtk_recent_info_get_application_info(GtkRecentInfo * _self_, gchar * app_name, void * app_exec, guint * count, time_t * time_) {
	return (gboolean)gtk_recent_info_get_application_info(_self_, (const gchar *)(app_name), (const gchar **)(app_exec), count, time_);
}
void * _gtk_recent_info_get_applications(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_applications(_self_, length);
}
gchar * _gtk_recent_info_get_description(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_description(_self_);
}
gchar * _gtk_recent_info_get_display_name(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_display_name(_self_);
}
void * _gtk_recent_info_get_groups(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_groups(_self_, length);
}
gchar * _gtk_recent_info_get_mime_type(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_mime_type(_self_);
}
gchar * _gtk_recent_info_get_uri(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_uri(_self_);
}
gboolean _gtk_recent_info_has_application(GtkRecentInfo * _self_, gchar * app_name) {
	return (gboolean)gtk_recent_info_has_application(_self_, (const gchar *)(app_name));
}
gboolean _gtk_recent_info_has_group(GtkRecentInfo * _self_, gchar * group_name) {
	return (gboolean)gtk_recent_info_has_group(_self_, (const gchar *)(group_name));
}
GtkRequisition * _gtk_requisition_copy(GtkRequisition * _self_) {
	return (GtkRequisition *)gtk_requisition_copy((const GtkRequisition *)(_self_));
}
GtkSelectionData * _gtk_selection_data_copy(GtkSelectionData * _self_) {
	return (GtkSelectionData *)gtk_selection_data_copy((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_data((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_data_type(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_data_type((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data_with_length(GtkSelectionData * _self_, gint * length) {
	return (guchar *)gtk_selection_data_get_data_with_length((const GtkSelectionData *)(_self_), length);
}
GdkDisplay * _gtk_selection_data_get_display(GtkSelectionData * _self_) {
	return (GdkDisplay *)gtk_selection_data_get_display((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_format(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_format((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_length(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_length((const GtkSelectionData *)(_self_));
}
GdkPixbuf * _gtk_selection_data_get_pixbuf(GtkSelectionData * _self_) {
	return (GdkPixbuf *)gtk_selection_data_get_pixbuf((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_selection(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_selection((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_target(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_target((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_text(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_text((const GtkSelectionData *)(_self_));
}
void * _gtk_selection_data_get_uris(GtkSelectionData * _self_) {
	return (void *)gtk_selection_data_get_uris((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_set_text(GtkSelectionData * _self_, gchar * str, gint len) {
	return (gboolean)gtk_selection_data_set_text(_self_, (const gchar *)(str), len);
}
gboolean _gtk_selection_data_targets_include_image(GtkSelectionData * _self_, gboolean writable) {
	return (gboolean)gtk_selection_data_targets_include_image((const GtkSelectionData *)(_self_), writable);
}
gboolean _gtk_selection_data_targets_include_rich_text(GtkSelectionData * _self_, GtkTextBuffer * buffer) {
	return (gboolean)gtk_selection_data_targets_include_rich_text((const GtkSelectionData *)(_self_), buffer);
}
gboolean _gtk_selection_data_targets_include_text(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_text((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_targets_include_uri(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_uri((const GtkSelectionData *)(_self_));
}
GtkStockItem * _gtk_stock_item_copy(GtkStockItem * _self_) {
	return (GtkStockItem *)gtk_stock_item_copy((const GtkStockItem *)(_self_));
}
GtkSymbolicColor * _gtk_symbolic_color_new_literal(GdkRGBA * color) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_literal((const GdkRGBA *)(color));
}
GtkSymbolicColor * _gtk_symbolic_color_new_name(gchar * name) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_name((const gchar *)(name));
}
GtkSymbolicColor * _gtk_symbolic_color_new_win32(gchar * theme_class, gint id) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_win32((const gchar *)(theme_class), id);
}
GtkTargetEntry * _gtk_target_entry_new(gchar * target, guint flags, guint info) {
	return (GtkTargetEntry *)gtk_target_entry_new((const gchar *)(target), flags, info);
}
void _gtk_text_iter_assign(GtkTextIter * _self_, GtkTextIter * other) {
	(void)gtk_text_iter_assign(_self_, (const GtkTextIter *)(other));
}
gboolean _gtk_text_iter_backward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_backward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_begins_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_begins_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_can_insert(GtkTextIter * _self_, gboolean default_editability) {
	return (gboolean)gtk_text_iter_can_insert((const GtkTextIter *)(_self_), default_editability);
}
gint _gtk_text_iter_compare(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gint)gtk_text_iter_compare((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
GtkTextIter * _gtk_text_iter_copy(GtkTextIter * _self_) {
	return (GtkTextIter *)gtk_text_iter_copy((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_editable(GtkTextIter * _self_, gboolean default_setting) {
	return (gboolean)gtk_text_iter_editable((const GtkTextIter *)(_self_), default_setting);
}
gboolean _gtk_text_iter_ends_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_ends_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_ends_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_equal(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gboolean)gtk_text_iter_equal((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
gboolean _gtk_text_iter_forward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_forward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_get_attributes(GtkTextIter * _self_, GtkTextAttributes * values) {
	return (gboolean)gtk_text_iter_get_attributes((const GtkTextIter *)(_self_), values);
}
GtkTextBuffer * _gtk_text_iter_get_buffer(GtkTextIter * _self_) {
	return (GtkTextBuffer *)gtk_text_iter_get_buffer((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_bytes_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_bytes_in_line((const GtkTextIter *)(_self_));
}
gunichar _gtk_text_iter_get_char(GtkTextIter * _self_) {
	return (gunichar)gtk_text_iter_get_char((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_chars_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_chars_in_line((const GtkTextIter *)(_self_));
}
GtkTextChildAnchor * _gtk_text_iter_get_child_anchor(GtkTextIter * _self_) {
	return (GtkTextChildAnchor *)gtk_text_iter_get_child_anchor((const GtkTextIter *)(_self_));
}
PangoLanguage * _gtk_text_iter_get_language(GtkTextIter * _self_) {
	return (PangoLanguage *)gtk_text_iter_get_language((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_offset((const GtkTextIter *)(_self_));
}
GSList * _gtk_text_iter_get_marks(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_marks((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_offset((const GtkTextIter *)(_self_));
}
GdkPixbuf * _gtk_text_iter_get_pixbuf(GtkTextIter * _self_) {
	return (GdkPixbuf *)gtk_text_iter_get_pixbuf((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_tags(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_tags((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_toggled_tags(GtkTextIter * _self_, gboolean toggled_on) {
	return (GSList *)gtk_text_iter_get_toggled_tags((const GtkTextIter *)(_self_), toggled_on);
}
gint _gtk_text_iter_get_visible_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_visible_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_offset((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_visible_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gchar * _gtk_text_iter_get_visible_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_has_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_has_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_in_range(GtkTextIter * _self_, GtkTextIter * start, GtkTextIter * end) {
	return (gboolean)gtk_text_iter_in_range((const GtkTextIter *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_inside_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_inside_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_cursor_position(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_cursor_position((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_end(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_end((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_start(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_start((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_toggles_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_toggles_tag((const GtkTextIter *)(_self_), tag);
}
GtkTreePath * _gtk_tree_path_new_from_string(gchar * path) {
	return (GtkTreePath *)gtk_tree_path_new_from_string((const gchar *)(path));
}
gint _gtk_tree_path_compare(GtkTreePath * _self_, GtkTreePath * b) {
	return (gint)gtk_tree_path_compare((const GtkTreePath *)(_self_), (const GtkTreePath *)(b));
}
GtkTreePath * _gtk_tree_path_copy(GtkTreePath * _self_) {
	return (GtkTreePath *)gtk_tree_path_copy((const GtkTreePath *)(_self_));
}
GParamSpec * _gtk_widget_class_find_style_property(GtkWidgetClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_widget_class_find_style_property(_self_, (const gchar *)(property_name));
}
void * _gtk_widget_class_list_style_properties(GtkWidgetClass * _self_, guint * n_properties) {
	return (void *)gtk_widget_class_list_style_properties(_self_, n_properties);
}
GtkWidgetPath * _gtk_widget_path_copy(GtkWidgetPath * _self_) {
	return (GtkWidgetPath *)gtk_widget_path_copy((const GtkWidgetPath *)(_self_));
}
GType _gtk_widget_path_get_object_type(GtkWidgetPath * _self_) {
	return (GType)gtk_widget_path_get_object_type((const GtkWidgetPath *)(_self_));
}
gboolean _gtk_widget_path_has_parent(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_has_parent((const GtkWidgetPath *)(_self_), type);
}
gboolean _gtk_widget_path_is_type(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_is_type((const GtkWidgetPath *)(_self_), type);
}
void _gtk_widget_path_iter_add_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_add_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_add_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags flags) {
	(void)gtk_widget_path_iter_add_region(_self_, pos, (const gchar *)(name), flags);
}
gchar * _gtk_widget_path_iter_get_name(GtkWidgetPath * _self_, gint pos) {
	return (gchar *)gtk_widget_path_iter_get_name((const GtkWidgetPath *)(_self_), pos);
}
GType _gtk_widget_path_iter_get_object_type(GtkWidgetPath * _self_, gint pos) {
	return (GType)gtk_widget_path_iter_get_object_type((const GtkWidgetPath *)(_self_), pos);
}
guint _gtk_widget_path_iter_get_sibling_index(GtkWidgetPath * _self_, gint pos) {
	return (guint)gtk_widget_path_iter_get_sibling_index((const GtkWidgetPath *)(_self_), pos);
}
GtkWidgetPath * _gtk_widget_path_iter_get_siblings(GtkWidgetPath * _self_, gint pos) {
	return (GtkWidgetPath *)gtk_widget_path_iter_get_siblings((const GtkWidgetPath *)(_self_), pos);
}
gboolean _gtk_widget_path_iter_has_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_class((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_name((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_qclass(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qclass((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qname(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qname((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qregion(GtkWidgetPath * _self_, gint pos, GQuark qname, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_qregion((const GtkWidgetPath *)(_self_), pos, qname, flags);
}
gboolean _gtk_widget_path_iter_has_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_region((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name), flags);
}
GSList * _gtk_widget_path_iter_list_classes(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_classes((const GtkWidgetPath *)(_self_), pos);
}
GSList * _gtk_widget_path_iter_list_regions(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_regions((const GtkWidgetPath *)(_self_), pos);
}
void _gtk_widget_path_iter_remove_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_remove_region(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_region(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_set_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_set_name(_self_, pos, (const gchar *)(name));
}
gint _gtk_widget_path_length(GtkWidgetPath * _self_) {
	return (gint)gtk_widget_path_length((const GtkWidgetPath *)(_self_));
}
char * _gtk_widget_path_to_string(GtkWidgetPath * _self_) {
	return (char *)gtk_widget_path_to_string((const GtkWidgetPath *)(_self_));
}
*/
import "C"
import (
	"unsafe"
)

type GtkActionGroupPrivate C.GtkActionGroupPrivate
type GtkLayoutClass C.GtkLayoutClass
type GtkFontChooserWidgetClass C.GtkFontChooserWidgetClass
type GtkPlugClass C.GtkPlugClass
type GtkCalendarPrivate C.GtkCalendarPrivate
type GtkPanedPrivate C.GtkPanedPrivate
type GtkCellLayoutIface C.GtkCellLayoutIface
type GtkAdjustmentClass C.GtkAdjustmentClass
type GtkAccelGroupPrivate C.GtkAccelGroupPrivate
type GtkRcStyleClass C.GtkRcStyleClass
type GtkRadioMenuItemClass C.GtkRadioMenuItemClass
type GtkOffscreenWindowClass C.GtkOffscreenWindowClass
type GtkInfoBarPrivate C.GtkInfoBarPrivate
type GtkRecentManagerPrivate C.GtkRecentManagerPrivate
type GtkSymbolicColor C.GtkSymbolicColor
type GtkContainerClass C.GtkContainerClass
type GtkHandleBoxClass C.GtkHandleBoxClass
type GtkFileFilterInfo C.GtkFileFilterInfo
type GtkSettingsValue C.GtkSettingsValue
type GtkVolumeButtonClass C.GtkVolumeButtonClass
type GtkSpinButtonClass C.GtkSpinButtonClass
type GtkScaleButtonPrivate C.GtkScaleButtonPrivate
type GtkFixedClass C.GtkFixedClass
type GtkContainerPrivate C.GtkContainerPrivate
type GtkTreePath C.GtkTreePath
type GtkArrowPrivate C.GtkArrowPrivate
type GtkSpinButtonPrivate C.GtkSpinButtonPrivate
type GtkNotebookPrivate C.GtkNotebookPrivate
type GtkToolItemGroupPrivate C.GtkToolItemGroupPrivate
type GtkTextBufferPrivate C.GtkTextBufferPrivate
type GtkInfoBarClass C.GtkInfoBarClass
type GtkTreeViewPrivate C.GtkTreeViewPrivate
type GtkFramePrivate C.GtkFramePrivate
type GtkTextTagTableClass C.GtkTextTagTableClass
type GtkMenuItemClass C.GtkMenuItemClass
type GtkEntryCompletionPrivate C.GtkEntryCompletionPrivate
type GtkCellViewPrivate C.GtkCellViewPrivate
type GtkAssistantPrivate C.GtkAssistantPrivate
type GtkComboBoxTextClass C.GtkComboBoxTextClass
type GtkBorder C.GtkBorder
type GtkCellAreaBoxPrivate C.GtkCellAreaBoxPrivate
type GtkActionEntry C.GtkActionEntry
type GtkWidgetClassPrivate C.GtkWidgetClassPrivate
type GtkTreeViewClass C.GtkTreeViewClass
type GtkListStorePrivate C.GtkListStorePrivate
type GtkStatusIconPrivate C.GtkStatusIconPrivate
type GtkToggleActionPrivate C.GtkToggleActionPrivate
type GtkTreeSelectionPrivate C.GtkTreeSelectionPrivate
type GtkLockButtonClass C.GtkLockButtonClass
type GtkFileChooserDialogPrivate C.GtkFileChooserDialogPrivate
type GtkFontSelectionDialogClass C.GtkFontSelectionDialogClass
type GtkAppChooserButtonPrivate C.GtkAppChooserButtonPrivate
type GtkCellRendererPixbufClass C.GtkCellRendererPixbufClass
type GtkRadioButtonClass C.GtkRadioButtonClass
type GtkTreeModelFilterClass C.GtkTreeModelFilterClass
type GtkInvisibleClass C.GtkInvisibleClass
type GtkLayoutPrivate C.GtkLayoutPrivate
type GtkComboBoxPrivate C.GtkComboBoxPrivate
type GtkExpanderClass C.GtkExpanderClass
type GtkMenuBarClass C.GtkMenuBarClass
type GtkTextTagTablePrivate C.GtkTextTagTablePrivate
type GtkTreeRowReference C.GtkTreeRowReference
type GtkStylePropertiesClass C.GtkStylePropertiesClass
type GtkCssProviderClass C.GtkCssProviderClass
type GtkMessageDialogClass C.GtkMessageDialogClass
type GtkStyleContextClass C.GtkStyleContextClass
type GtkToggleActionEntry C.GtkToggleActionEntry
type GtkIMMulticontextPrivate C.GtkIMMulticontextPrivate
type GtkLevelBarPrivate C.GtkLevelBarPrivate
type GtkButtonBoxClass C.GtkButtonBoxClass
type GtkRecentFilterInfo C.GtkRecentFilterInfo
type GtkHScrollbarClass C.GtkHScrollbarClass
type GtkColorSelectionPrivate C.GtkColorSelectionPrivate
type GtkFileChooserWidgetPrivate C.GtkFileChooserWidgetPrivate
type GtkStyleContextPrivate C.GtkStyleContextPrivate
type GtkImagePrivate C.GtkImagePrivate
type GtkImageMenuItemPrivate C.GtkImageMenuItemPrivate
type GtkLabelSelectionInfo C.GtkLabelSelectionInfo
type GtkAppChooserDialogClass C.GtkAppChooserDialogClass
type GtkColorSelectionDialogPrivate C.GtkColorSelectionDialogPrivate
type GtkSeparatorMenuItemClass C.GtkSeparatorMenuItemClass
type GtkDrawingAreaClass C.GtkDrawingAreaClass
type GtkFileChooserDialogClass C.GtkFileChooserDialogClass
type GtkCellRendererAccelPrivate C.GtkCellRendererAccelPrivate
type GtkCellRendererTextPrivate C.GtkCellRendererTextPrivate
type GtkMenuButtonPrivate C.GtkMenuButtonPrivate
type GtkWindowPrivate C.GtkWindowPrivate
type GtkStatusbarPrivate C.GtkStatusbarPrivate
type GtkCellRendererAccelClass C.GtkCellRendererAccelClass
type GtkApplicationWindowClass C.GtkApplicationWindowClass
type GtkBindingArg C.GtkBindingArg
type GtkToolbarPrivate C.GtkToolbarPrivate
type GtkSizeGroupClass C.GtkSizeGroupClass
type GtkRecentChooserMenuClass C.GtkRecentChooserMenuClass
type GtkIMContextClass C.GtkIMContextClass
type GtkPanedClass C.GtkPanedClass
type GtkMenuBarPrivate C.GtkMenuBarPrivate
type GtkTextAttributes C.GtkTextAttributes
type GtkCalendarClass C.GtkCalendarClass
type GtkHPanedClass C.GtkHPanedClass
type GtkFontSelectionDialogPrivate C.GtkFontSelectionDialogPrivate
type GtkVScrollbarClass C.GtkVScrollbarClass
type GtkCellRendererClassPrivate C.GtkCellRendererClassPrivate
type GtkRecentChooserMenuPrivate C.GtkRecentChooserMenuPrivate
type GtkEventBoxPrivate C.GtkEventBoxPrivate
type GtkArrowClass C.GtkArrowClass
type GtkWidgetPrivate C.GtkWidgetPrivate
type GtkBindingSignal C.GtkBindingSignal
type GtkAccelLabelPrivate C.GtkAccelLabelPrivate
type GtkTreeSortableIface C.GtkTreeSortableIface
type GtkTextTagPrivate C.GtkTextTagPrivate
type GtkRequestedSize C.GtkRequestedSize
type GtkMountOperationPrivate C.GtkMountOperationPrivate
type GtkColorChooserInterface C.GtkColorChooserInterface
type GtkColorChooserDialogClass C.GtkColorChooserDialogClass
type GtkBoxClass C.GtkBoxClass
type GtkScrolledWindowPrivate C.GtkScrolledWindowPrivate
type GtkIconInfo C.GtkIconInfo
type GtkRecentManagerClass C.GtkRecentManagerClass
type GtkTextChildAnchorClass C.GtkTextChildAnchorClass
type GtkActionGroupClass C.GtkActionGroupClass
type GtkCheckButtonClass C.GtkCheckButtonClass
type GtkAlignmentPrivate C.GtkAlignmentPrivate
type GtkHandleBoxPrivate C.GtkHandleBoxPrivate
type GtkRecentChooserIface C.GtkRecentChooserIface
type GtkFontButtonClass C.GtkFontButtonClass
type GtkLabelClass C.GtkLabelClass
type GtkCellRendererProgressClass C.GtkCellRendererProgressClass
type GtkCellRendererSpinClass C.GtkCellRendererSpinClass
type GtkRequisition C.GtkRequisition
type GtkHButtonBoxClass C.GtkHButtonBoxClass
type GtkFrameClass C.GtkFrameClass
type GtkCellRendererProgressPrivate C.GtkCellRendererProgressPrivate
type GtkMenuButtonClass C.GtkMenuButtonClass
type GtkEntryCompletionClass C.GtkEntryCompletionClass
type GtkNumerableIconClass C.GtkNumerableIconClass
type GtkTreeStoreClass C.GtkTreeStoreClass
type GtkScrollableInterface C.GtkScrollableInterface
type GtkBinClass C.GtkBinClass
type GtkActionPrivate C.GtkActionPrivate
type GtkToolItemGroupClass C.GtkToolItemGroupClass
type GtkTreeModelSortPrivate C.GtkTreeModelSortPrivate
type GtkButtonPrivate C.GtkButtonPrivate
type GtkEntryBufferClass C.GtkEntryBufferClass
type GtkCellRendererSpinnerClass C.GtkCellRendererSpinnerClass
type GtkToggleToolButtonPrivate C.GtkToggleToolButtonPrivate
type GtkCellRendererComboClass C.GtkCellRendererComboClass
type GtkTablePrivate C.GtkTablePrivate
type GtkMenuPrivate C.GtkMenuPrivate
type GtkTextViewPrivate C.GtkTextViewPrivate
type GtkApplicationPrivate C.GtkApplicationPrivate
type GtkExpanderPrivate C.GtkExpanderPrivate
type GtkFileChooserButtonPrivate C.GtkFileChooserButtonPrivate
type GtkToolButtonClass C.GtkToolButtonClass
type GtkTreeSelectionClass C.GtkTreeSelectionClass
type GtkIconSource C.GtkIconSource
type GtkScaleClass C.GtkScaleClass
type GtkCellRendererComboPrivate C.GtkCellRendererComboPrivate
type GtkUIManagerClass C.GtkUIManagerClass
type GtkRcContext C.GtkRcContext
type GtkMenuToolButtonClass C.GtkMenuToolButtonClass
type GtkImageMenuItemClass C.GtkImageMenuItemClass
type GtkWindowGroupClass C.GtkWindowGroupClass
type GtkApplicationClass C.GtkApplicationClass
type GtkMiscPrivate C.GtkMiscPrivate
type GtkToolShellIface C.GtkToolShellIface
type GtkHSVPrivate C.GtkHSVPrivate
type GtkEntryPrivate C.GtkEntryPrivate
type GtkCellRendererClass C.GtkCellRendererClass
type GtkTreeDragSourceIface C.GtkTreeDragSourceIface
type GtkEntryClass C.GtkEntryClass
type GtkSpinnerClass C.GtkSpinnerClass
type GtkIconSet C.GtkIconSet
type GtkScrollbarClass C.GtkScrollbarClass
type GtkRecentData C.GtkRecentData
type GtkComboBoxTextPrivate C.GtkComboBoxTextPrivate
type GtkMenuShellClass C.GtkMenuShellClass
type GtkIMContextInfo C.GtkIMContextInfo
type GtkRecentChooserDialogPrivate C.GtkRecentChooserDialogPrivate
type GtkTextBTree C.GtkTextBTree
type GtkInvisiblePrivate C.GtkInvisiblePrivate
type GtkIMMulticontextClass C.GtkIMMulticontextClass
type GtkRadioActionPrivate C.GtkRadioActionPrivate
type GtkBuildableIface C.GtkBuildableIface
type GtkStockItem C.GtkStockItem
type GtkAssistantClass C.GtkAssistantClass
type GtkMenuClass C.GtkMenuClass
type GtkIconFactoryPrivate C.GtkIconFactoryPrivate
type GtkStatusbarClass C.GtkStatusbarClass
type GtkNotebookClass C.GtkNotebookClass
type GtkEntryBufferPrivate C.GtkEntryBufferPrivate
type GtkSocketClass C.GtkSocketClass
type GtkTreeDragDestIface C.GtkTreeDragDestIface
type GtkCellAreaBoxClass C.GtkCellAreaBoxClass
type GtkLevelBarClass C.GtkLevelBarClass
type GtkSeparatorClass C.GtkSeparatorClass
type GtkRecentChooserDialogClass C.GtkRecentChooserDialogClass
type GtkColorChooserWidgetClass C.GtkColorChooserWidgetClass
type GtkCellAreaPrivate C.GtkCellAreaPrivate
type GtkIconFactoryClass C.GtkIconFactoryClass
type GtkHBoxClass C.GtkHBoxClass
type GtkTearoffMenuItemClass C.GtkTearoffMenuItemClass
type GtkToggleActionClass C.GtkToggleActionClass
type GtkAccelLabelClass C.GtkAccelLabelClass
type GtkRecentActionClass C.GtkRecentActionClass
type GtkRadioToolButtonClass C.GtkRadioToolButtonClass
type GtkTreeIter C.GtkTreeIter
type GtkTargetList C.GtkTargetList
type GtkFontSelectionPrivate C.GtkFontSelectionPrivate
type GtkMountOperationClass C.GtkMountOperationClass
type GtkVPanedClass C.GtkVPanedClass
type GtkIconViewClass C.GtkIconViewClass
type GtkPlugPrivate C.GtkPlugPrivate
type GtkCellViewClass C.GtkCellViewClass
type GtkSeparatorToolItemPrivate C.GtkSeparatorToolItemPrivate
type GtkListStoreClass C.GtkListStoreClass
type GtkIconViewPrivate C.GtkIconViewPrivate
type GtkCellRendererSpinnerPrivate C.GtkCellRendererSpinnerPrivate
type GtkWidgetClass C.GtkWidgetClass
type GtkThemeEngine C.GtkThemeEngine
type GtkBinPrivate C.GtkBinPrivate
type GtkDialogPrivate C.GtkDialogPrivate
type GtkSocketPrivate C.GtkSocketPrivate
type GtkAlignmentClass C.GtkAlignmentClass
type GtkTextViewClass C.GtkTextViewClass
type GtkBindingSet C.GtkBindingSet
type GtkTextTagClass C.GtkTextTagClass
type GtkIMContextSimpleClass C.GtkIMContextSimpleClass
type GtkWindowGeometryInfo C.GtkWindowGeometryInfo
type GtkAppChooserWidgetClass C.GtkAppChooserWidgetClass
type GtkRangePrivate C.GtkRangePrivate
type GtkToolButtonPrivate C.GtkToolButtonPrivate
type GtkToolbarClass C.GtkToolbarClass
type GtkCellEditableIface C.GtkCellEditableIface
type GtkOverlayClass C.GtkOverlayClass
type GtkSelectionData C.GtkSelectionData
type GtkTreeModelIface C.GtkTreeModelIface
type GtkCheckMenuItemPrivate C.GtkCheckMenuItemPrivate
type GtkRangeClass C.GtkRangeClass
type GtkBuilderClass C.GtkBuilderClass
type GtkColorChooserWidgetPrivate C.GtkColorChooserWidgetPrivate
type GtkActionClass C.GtkActionClass
type GtkEditableInterface C.GtkEditableInterface
type GtkAdjustmentPrivate C.GtkAdjustmentPrivate
type GtkCellRendererPixbufPrivate C.GtkCellRendererPixbufPrivate
type GtkLinkButtonPrivate C.GtkLinkButtonPrivate
type GtkTreeViewColumnPrivate C.GtkTreeViewColumnPrivate
type GtkRecentActionPrivate C.GtkRecentActionPrivate
type GtkAppChooserButtonClass C.GtkAppChooserButtonClass
type GtkColorButtonPrivate C.GtkColorButtonPrivate
type GtkCellAreaClass C.GtkCellAreaClass
type GtkTextBufferClass C.GtkTextBufferClass
type GtkWidgetPath C.GtkWidgetPath
type GtkHSeparatorClass C.GtkHSeparatorClass
type GtkAboutDialogPrivate C.GtkAboutDialogPrivate
type GtkLinkButtonClass C.GtkLinkButtonClass
type GtkButtonBoxPrivate C.GtkButtonBoxPrivate
type GtkToolItemClass C.GtkToolItemClass
type GtkAppChooserWidgetPrivate C.GtkAppChooserWidgetPrivate
type GtkApplicationWindowPrivate C.GtkApplicationWindowPrivate
type GtkIconThemeClass C.GtkIconThemeClass
type GtkRadioMenuItemPrivate C.GtkRadioMenuItemPrivate
type GtkColorSelectionClass C.GtkColorSelectionClass
type GtkCellAreaContextClass C.GtkCellAreaContextClass
type GtkCellRendererTextClass C.GtkCellRendererTextClass
type GtkActivatableIface C.GtkActivatableIface
type GtkHSVClass C.GtkHSVClass
type GtkVButtonBoxClass C.GtkVButtonBoxClass
type GtkSwitchPrivate C.GtkSwitchPrivate
type GtkSwitchClass C.GtkSwitchClass
type GtkWidgetAuxInfo C.GtkWidgetAuxInfo
type GtkStyleClass C.GtkStyleClass
type GtkFixedPrivate C.GtkFixedPrivate
type GtkToggleButtonPrivate C.GtkToggleButtonPrivate
type GtkLockButtonPrivate C.GtkLockButtonPrivate
type GtkNumerableIconPrivate C.GtkNumerableIconPrivate
type GtkIMContextSimplePrivate C.GtkIMContextSimplePrivate
type GtkMenuShellPrivate C.GtkMenuShellPrivate
type GtkColorButtonClass C.GtkColorButtonClass
type GtkAboutDialogClass C.GtkAboutDialogClass
type GtkScalePrivate C.GtkScalePrivate
type GtkPaperSize C.GtkPaperSize
type GtkFontChooserIface C.GtkFontChooserIface
type GtkProgressBarClass C.GtkProgressBarClass
type GtkAccelGroupEntry C.GtkAccelGroupEntry
type GtkToggleToolButtonClass C.GtkToggleToolButtonClass
type GtkWindowGroupPrivate C.GtkWindowGroupPrivate
type GtkAspectFrameClass C.GtkAspectFrameClass
type GtkHScaleClass C.GtkHScaleClass
type GtkVBoxClass C.GtkVBoxClass
type GtkAccelGroupClass C.GtkAccelGroupClass
type GtkToolPalettePrivate C.GtkToolPalettePrivate
type GtkAccelKey C.GtkAccelKey
type GtkCssSection C.GtkCssSection
type GtkFixedChild C.GtkFixedChild
type GtkPrintOperationClass C.GtkPrintOperationClass
type GtkFontButtonPrivate C.GtkFontButtonPrivate
type GtkCellRendererTogglePrivate C.GtkCellRendererTogglePrivate
type GtkSeparatorToolItemClass C.GtkSeparatorToolItemClass
type GtkTableClass C.GtkTableClass
type GtkSizeGroupPrivate C.GtkSizeGroupPrivate
type GtkAccelMapClass C.GtkAccelMapClass
type GtkTextIter C.GtkTextIter
type GtkRadioActionEntry C.GtkRadioActionEntry
type GtkAppChooserDialogPrivate C.GtkAppChooserDialogPrivate
type GtkStylePropertiesPrivate C.GtkStylePropertiesPrivate
type GtkProgressBarPrivate C.GtkProgressBarPrivate
type GtkPrintOperationPreviewIface C.GtkPrintOperationPreviewIface
type GtkRadioButtonPrivate C.GtkRadioButtonPrivate
type GtkFontSelectionClass C.GtkFontSelectionClass
type GtkThemingEngineClass C.GtkThemingEngineClass
type GtkIconThemePrivate C.GtkIconThemePrivate
type GtkRecentInfo C.GtkRecentInfo
type GtkColorSelectionDialogClass C.GtkColorSelectionDialogClass
type GtkCellRendererPrivate C.GtkCellRendererPrivate
type GtkOverlayPrivate C.GtkOverlayPrivate
type GtkThemingEnginePrivate C.GtkThemingEnginePrivate
type GtkFileChooserWidgetClass C.GtkFileChooserWidgetClass
type GtkTextAppearance C.GtkTextAppearance
type GtkTreeViewColumnClass C.GtkTreeViewColumnClass
type GtkGridClass C.GtkGridClass
type GtkRadioActionClass C.GtkRadioActionClass
type GtkMessageDialogPrivate C.GtkMessageDialogPrivate
type GtkScrolledWindowClass C.GtkScrolledWindowClass
type GtkFileChooserButtonClass C.GtkFileChooserButtonClass
type GtkMiscClass C.GtkMiscClass
type GtkCheckMenuItemClass C.GtkCheckMenuItemClass
type GtkViewportPrivate C.GtkViewportPrivate
type GtkButtonClass C.GtkButtonClass
type GtkTableChild C.GtkTableChild
type GtkPageRange C.GtkPageRange
type GtkWindowClass C.GtkWindowClass
type GtkTargetEntry C.GtkTargetEntry
type GtkBuilderPrivate C.GtkBuilderPrivate
type GtkRecentChooserWidgetPrivate C.GtkRecentChooserWidgetPrivate
type GtkOrientableIface C.GtkOrientableIface
type GtkFontChooserDialogClass C.GtkFontChooserDialogClass
type GtkMenuItemPrivate C.GtkMenuItemPrivate
type GtkAccessiblePrivate C.GtkAccessiblePrivate
type GtkVSeparatorClass C.GtkVSeparatorClass
type GtkSearchEntryClass C.GtkSearchEntryClass
type GtkTableRowCol C.GtkTableRowCol
type GtkCellRendererToggleClass C.GtkCellRendererToggleClass
type GtkEventBoxClass C.GtkEventBoxClass
type GtkLabelPrivate C.GtkLabelPrivate
type GtkTreeStorePrivate C.GtkTreeStorePrivate
type GtkColorChooserDialogPrivate C.GtkColorChooserDialogPrivate
type GtkTextMarkClass C.GtkTextMarkClass
type GtkComboBoxClass C.GtkComboBoxClass
type GtkToolItemPrivate C.GtkToolItemPrivate
type GtkSpinnerPrivate C.GtkSpinnerPrivate
type GtkStatusIconClass C.GtkStatusIconClass
type GtkScaleButtonClass C.GtkScaleButtonClass
type GtkVScaleClass C.GtkVScaleClass
type GtkCssProviderPrivate C.GtkCssProviderPrivate
type GtkViewportClass C.GtkViewportClass
type GtkSettingsPrivate C.GtkSettingsPrivate
type GtkTreeModelFilterPrivate C.GtkTreeModelFilterPrivate
type GtkUIManagerPrivate C.GtkUIManagerPrivate
type GtkBindingEntry C.GtkBindingEntry
type GtkDialogClass C.GtkDialogClass
type GtkCellAreaContextPrivate C.GtkCellAreaContextPrivate
type GtkToolPaletteClass C.GtkToolPaletteClass
type GtkAspectFramePrivate C.GtkAspectFramePrivate
type GtkPrintOperationPrivate C.GtkPrintOperationPrivate
type GtkRecentChooserWidgetClass C.GtkRecentChooserWidgetClass
type GtkFontChooserWidgetPrivate C.GtkFontChooserWidgetPrivate
type GtkSettingsClass C.GtkSettingsClass
type GtkStyleProviderIface C.GtkStyleProviderIface
type GtkTearoffMenuItemPrivate C.GtkTearoffMenuItemPrivate
type GtkCellRendererSpinPrivate C.GtkCellRendererSpinPrivate
type GtkFontChooserDialogPrivate C.GtkFontChooserDialogPrivate
type GtkGridPrivate C.GtkGridPrivate
type GtkGradient C.GtkGradient
type GtkMenuToolButtonPrivate C.GtkMenuToolButtonPrivate
type GtkBoxPrivate C.GtkBoxPrivate
type GtkImageClass C.GtkImageClass
type GtkToggleButtonClass C.GtkToggleButtonClass
type GtkActionableInterface C.GtkActionableInterface
type GtkAccessibleClass C.GtkAccessibleClass
type GtkTreeModelSortClass C.GtkTreeModelSortClass
type GtkSeparatorPrivate C.GtkSeparatorPrivate
type GtkToolItemGroup struct { GtkContainer }
type GtkToolItemGroupKind interface {
  _IsGtkToolItemGroup()
  _getValue() unsafe.Pointer
}
func (self GtkToolItemGroup) _IsGtkToolItemGroup () {}
func (self GtkToolItemGroup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToolItemGroup(value unsafe.Pointer) GtkToolItemGroup { return GtkToolItemGroup{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkEventBox struct { GtkBin }
type GtkEventBoxKind interface {
  _IsGtkEventBox()
  _getValue() unsafe.Pointer
}
func (self GtkEventBox) _IsGtkEventBox () {}
func (self GtkEventBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkEventBox(value unsafe.Pointer) GtkEventBox { return GtkEventBox{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkLabel struct { GtkMisc }
type GtkLabelKind interface {
  _IsGtkLabel()
  _getValue() unsafe.Pointer
}
func (self GtkLabel) _IsGtkLabel () {}
func (self GtkLabel) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkLabel(value unsafe.Pointer) GtkLabel { return GtkLabel{GtkMisc{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkRcStyle struct { GObjectObject }
type GtkRcStyleKind interface {
  _IsGtkRcStyle()
  _getValue() unsafe.Pointer
}
func (self GtkRcStyle) _IsGtkRcStyle () {}
func (self GtkRcStyle) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRcStyle(value unsafe.Pointer) GtkRcStyle { return GtkRcStyle{GObjectObject{value}} }
type GtkViewport struct { GtkBin }
type GtkViewportKind interface {
  _IsGtkViewport()
  _getValue() unsafe.Pointer
}
func (self GtkViewport) _IsGtkViewport () {}
func (self GtkViewport) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkViewport(value unsafe.Pointer) GtkViewport { return GtkViewport{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkScaleButton struct { GtkButton }
type GtkScaleButtonKind interface {
  _IsGtkScaleButton()
  _getValue() unsafe.Pointer
}
func (self GtkScaleButton) _IsGtkScaleButton () {}
func (self GtkScaleButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkScaleButton(value unsafe.Pointer) GtkScaleButton { return GtkScaleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkMessageDialog struct { GtkDialog }
type GtkMessageDialogKind interface {
  _IsGtkMessageDialog()
  _getValue() unsafe.Pointer
}
func (self GtkMessageDialog) _IsGtkMessageDialog () {}
func (self GtkMessageDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMessageDialog(value unsafe.Pointer) GtkMessageDialog { return GtkMessageDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkBin struct { GtkContainer }
type GtkBinKind interface {
  _IsGtkBin()
  _getValue() unsafe.Pointer
}
func (self GtkBin) _IsGtkBin () {}
func (self GtkBin) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkBin(value unsafe.Pointer) GtkBin { return GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkFrame struct { GtkBin }
type GtkFrameKind interface {
  _IsGtkFrame()
  _getValue() unsafe.Pointer
}
func (self GtkFrame) _IsGtkFrame () {}
func (self GtkFrame) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFrame(value unsafe.Pointer) GtkFrame { return GtkFrame{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkRadioMenuItem struct { GtkCheckMenuItem }
type GtkRadioMenuItemKind interface {
  _IsGtkRadioMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkRadioMenuItem) _IsGtkRadioMenuItem () {}
func (self GtkRadioMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRadioMenuItem(value unsafe.Pointer) GtkRadioMenuItem { return GtkRadioMenuItem{GtkCheckMenuItem{GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkProgressBar struct { GtkWidget }
type GtkProgressBarKind interface {
  _IsGtkProgressBar()
  _getValue() unsafe.Pointer
}
func (self GtkProgressBar) _IsGtkProgressBar () {}
func (self GtkProgressBar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkProgressBar(value unsafe.Pointer) GtkProgressBar { return GtkProgressBar{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkCellRendererProgress struct { GtkCellRenderer }
type GtkCellRendererProgressKind interface {
  _IsGtkCellRendererProgress()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererProgress) _IsGtkCellRendererProgress () {}
func (self GtkCellRendererProgress) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererProgress(value unsafe.Pointer) GtkCellRendererProgress { return GtkCellRendererProgress{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkCellView struct { GtkWidget }
type GtkCellViewKind interface {
  _IsGtkCellView()
  _getValue() unsafe.Pointer
}
func (self GtkCellView) _IsGtkCellView () {}
func (self GtkCellView) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellView(value unsafe.Pointer) GtkCellView { return GtkCellView{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkIconFactory struct { GObjectObject }
type GtkIconFactoryKind interface {
  _IsGtkIconFactory()
  _getValue() unsafe.Pointer
}
func (self GtkIconFactory) _IsGtkIconFactory () {}
func (self GtkIconFactory) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIconFactory(value unsafe.Pointer) GtkIconFactory { return GtkIconFactory{GObjectObject{value}} }
type GtkRecentChooserWidget struct { GtkBox }
type GtkRecentChooserWidgetKind interface {
  _IsGtkRecentChooserWidget()
  _getValue() unsafe.Pointer
}
func (self GtkRecentChooserWidget) _IsGtkRecentChooserWidget () {}
func (self GtkRecentChooserWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentChooserWidget(value unsafe.Pointer) GtkRecentChooserWidget { return GtkRecentChooserWidget{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkTable struct { GtkContainer }
type GtkTableKind interface {
  _IsGtkTable()
  _getValue() unsafe.Pointer
}
func (self GtkTable) _IsGtkTable () {}
func (self GtkTable) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTable(value unsafe.Pointer) GtkTable { return GtkTable{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkTreeViewColumn struct { GObjectInitiallyUnowned }
type GtkTreeViewColumnKind interface {
  _IsGtkTreeViewColumn()
  _getValue() unsafe.Pointer
}
func (self GtkTreeViewColumn) _IsGtkTreeViewColumn () {}
func (self GtkTreeViewColumn) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeViewColumn(value unsafe.Pointer) GtkTreeViewColumn { return GtkTreeViewColumn{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkAboutDialog struct { GtkDialog }
type GtkAboutDialogKind interface {
  _IsGtkAboutDialog()
  _getValue() unsafe.Pointer
}
func (self GtkAboutDialog) _IsGtkAboutDialog () {}
func (self GtkAboutDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAboutDialog(value unsafe.Pointer) GtkAboutDialog { return GtkAboutDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkIconTheme struct { GObjectObject }
type GtkIconThemeKind interface {
  _IsGtkIconTheme()
  _getValue() unsafe.Pointer
}
func (self GtkIconTheme) _IsGtkIconTheme () {}
func (self GtkIconTheme) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIconTheme(value unsafe.Pointer) GtkIconTheme { return GtkIconTheme{GObjectObject{value}} }
type GtkColorSelectionDialog struct { GtkDialog }
type GtkColorSelectionDialogKind interface {
  _IsGtkColorSelectionDialog()
  _getValue() unsafe.Pointer
}
func (self GtkColorSelectionDialog) _IsGtkColorSelectionDialog () {}
func (self GtkColorSelectionDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkColorSelectionDialog(value unsafe.Pointer) GtkColorSelectionDialog { return GtkColorSelectionDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkIMContext struct { GObjectObject }
type GtkIMContextKind interface {
  _IsGtkIMContext()
  _getValue() unsafe.Pointer
}
func (self GtkIMContext) _IsGtkIMContext () {}
func (self GtkIMContext) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIMContext(value unsafe.Pointer) GtkIMContext { return GtkIMContext{GObjectObject{value}} }
type GtkPageSetup struct { GObjectObject }
type GtkPageSetupKind interface {
  _IsGtkPageSetup()
  _getValue() unsafe.Pointer
}
func (self GtkPageSetup) _IsGtkPageSetup () {}
func (self GtkPageSetup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPageSetup(value unsafe.Pointer) GtkPageSetup { return GtkPageSetup{GObjectObject{value}} }
type GtkDialog struct { GtkWindow }
type GtkDialogKind interface {
  _IsGtkDialog()
  _getValue() unsafe.Pointer
}
func (self GtkDialog) _IsGtkDialog () {}
func (self GtkDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkDialog(value unsafe.Pointer) GtkDialog { return GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkTreeModelSort struct { GObjectObject }
type GtkTreeModelSortKind interface {
  _IsGtkTreeModelSort()
  _getValue() unsafe.Pointer
}
func (self GtkTreeModelSort) _IsGtkTreeModelSort () {}
func (self GtkTreeModelSort) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeModelSort(value unsafe.Pointer) GtkTreeModelSort { return GtkTreeModelSort{GObjectObject{value}} }
type GtkCellAreaContext struct { GObjectObject }
type GtkCellAreaContextKind interface {
  _IsGtkCellAreaContext()
  _getValue() unsafe.Pointer
}
func (self GtkCellAreaContext) _IsGtkCellAreaContext () {}
func (self GtkCellAreaContext) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellAreaContext(value unsafe.Pointer) GtkCellAreaContext { return GtkCellAreaContext{GObjectObject{value}} }
type GtkTextBuffer struct { GObjectObject }
type GtkTextBufferKind interface {
  _IsGtkTextBuffer()
  _getValue() unsafe.Pointer
}
func (self GtkTextBuffer) _IsGtkTextBuffer () {}
func (self GtkTextBuffer) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextBuffer(value unsafe.Pointer) GtkTextBuffer { return GtkTextBuffer{GObjectObject{value}} }
type GtkCellArea struct { GObjectInitiallyUnowned }
type GtkCellAreaKind interface {
  _IsGtkCellArea()
  _getValue() unsafe.Pointer
}
func (self GtkCellArea) _IsGtkCellArea () {}
func (self GtkCellArea) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellArea(value unsafe.Pointer) GtkCellArea { return GtkCellArea{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkCellRendererCombo struct { GtkCellRendererText }
type GtkCellRendererComboKind interface {
  _IsGtkCellRendererCombo()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererCombo) _IsGtkCellRendererCombo () {}
func (self GtkCellRendererCombo) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererCombo(value unsafe.Pointer) GtkCellRendererCombo { return GtkCellRendererCombo{GtkCellRendererText{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkStyleProperties struct { GObjectObject }
type GtkStylePropertiesKind interface {
  _IsGtkStyleProperties()
  _getValue() unsafe.Pointer
}
func (self GtkStyleProperties) _IsGtkStyleProperties () {}
func (self GtkStyleProperties) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkStyleProperties(value unsafe.Pointer) GtkStyleProperties { return GtkStyleProperties{GObjectObject{value}} }
type GtkVSeparator struct { GtkSeparator }
type GtkVSeparatorKind interface {
  _IsGtkVSeparator()
  _getValue() unsafe.Pointer
}
func (self GtkVSeparator) _IsGtkVSeparator () {}
func (self GtkVSeparator) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVSeparator(value unsafe.Pointer) GtkVSeparator { return GtkVSeparator{GtkSeparator{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkArrow struct { GtkMisc }
type GtkArrowKind interface {
  _IsGtkArrow()
  _getValue() unsafe.Pointer
}
func (self GtkArrow) _IsGtkArrow () {}
func (self GtkArrow) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkArrow(value unsafe.Pointer) GtkArrow { return GtkArrow{GtkMisc{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkHBox struct { GtkBox }
type GtkHBoxKind interface {
  _IsGtkHBox()
  _getValue() unsafe.Pointer
}
func (self GtkHBox) _IsGtkHBox () {}
func (self GtkHBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHBox(value unsafe.Pointer) GtkHBox { return GtkHBox{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkFileChooserWidget struct { GtkBox }
type GtkFileChooserWidgetKind interface {
  _IsGtkFileChooserWidget()
  _getValue() unsafe.Pointer
}
func (self GtkFileChooserWidget) _IsGtkFileChooserWidget () {}
func (self GtkFileChooserWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFileChooserWidget(value unsafe.Pointer) GtkFileChooserWidget { return GtkFileChooserWidget{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkMountOperation struct { GioMountOperation }
type GtkMountOperationKind interface {
  _IsGtkMountOperation()
  _getValue() unsafe.Pointer
}
func (self GtkMountOperation) _IsGtkMountOperation () {}
func (self GtkMountOperation) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMountOperation(value unsafe.Pointer) GtkMountOperation { return GtkMountOperation{GioMountOperation{GObjectObject{value}}} }
type GtkHScrollbar struct { GtkScrollbar }
type GtkHScrollbarKind interface {
  _IsGtkHScrollbar()
  _getValue() unsafe.Pointer
}
func (self GtkHScrollbar) _IsGtkHScrollbar () {}
func (self GtkHScrollbar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHScrollbar(value unsafe.Pointer) GtkHScrollbar { return GtkHScrollbar{GtkScrollbar{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkListStore struct { GObjectObject }
type GtkListStoreKind interface {
  _IsGtkListStore()
  _getValue() unsafe.Pointer
}
func (self GtkListStore) _IsGtkListStore () {}
func (self GtkListStore) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkListStore(value unsafe.Pointer) GtkListStore { return GtkListStore{GObjectObject{value}} }
type GtkUIManager struct { GObjectObject }
type GtkUIManagerKind interface {
  _IsGtkUIManager()
  _getValue() unsafe.Pointer
}
func (self GtkUIManager) _IsGtkUIManager () {}
func (self GtkUIManager) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkUIManager(value unsafe.Pointer) GtkUIManager { return GtkUIManager{GObjectObject{value}} }
type GtkAspectFrame struct { GtkFrame }
type GtkAspectFrameKind interface {
  _IsGtkAspectFrame()
  _getValue() unsafe.Pointer
}
func (self GtkAspectFrame) _IsGtkAspectFrame () {}
func (self GtkAspectFrame) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAspectFrame(value unsafe.Pointer) GtkAspectFrame { return GtkAspectFrame{GtkFrame{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkThemingEngine struct { GObjectObject }
type GtkThemingEngineKind interface {
  _IsGtkThemingEngine()
  _getValue() unsafe.Pointer
}
func (self GtkThemingEngine) _IsGtkThemingEngine () {}
func (self GtkThemingEngine) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkThemingEngine(value unsafe.Pointer) GtkThemingEngine { return GtkThemingEngine{GObjectObject{value}} }
type GtkCellRendererText struct { GtkCellRenderer }
type GtkCellRendererTextKind interface {
  _IsGtkCellRendererText()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererText) _IsGtkCellRendererText () {}
func (self GtkCellRendererText) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererText(value unsafe.Pointer) GtkCellRendererText { return GtkCellRendererText{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkOffscreenWindow struct { GtkWindow }
type GtkOffscreenWindowKind interface {
  _IsGtkOffscreenWindow()
  _getValue() unsafe.Pointer
}
func (self GtkOffscreenWindow) _IsGtkOffscreenWindow () {}
func (self GtkOffscreenWindow) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkOffscreenWindow(value unsafe.Pointer) GtkOffscreenWindow { return GtkOffscreenWindow{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkTooltip struct { GObjectObject }
type GtkTooltipKind interface {
  _IsGtkTooltip()
  _getValue() unsafe.Pointer
}
func (self GtkTooltip) _IsGtkTooltip () {}
func (self GtkTooltip) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTooltip(value unsafe.Pointer) GtkTooltip { return GtkTooltip{GObjectObject{value}} }
type GtkCellAreaBox struct { GtkCellArea }
type GtkCellAreaBoxKind interface {
  _IsGtkCellAreaBox()
  _getValue() unsafe.Pointer
}
func (self GtkCellAreaBox) _IsGtkCellAreaBox () {}
func (self GtkCellAreaBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellAreaBox(value unsafe.Pointer) GtkCellAreaBox { return GtkCellAreaBox{GtkCellArea{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkHPaned struct { GtkPaned }
type GtkHPanedKind interface {
  _IsGtkHPaned()
  _getValue() unsafe.Pointer
}
func (self GtkHPaned) _IsGtkHPaned () {}
func (self GtkHPaned) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHPaned(value unsafe.Pointer) GtkHPaned { return GtkHPaned{GtkPaned{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkGrid struct { GtkContainer }
type GtkGridKind interface {
  _IsGtkGrid()
  _getValue() unsafe.Pointer
}
func (self GtkGrid) _IsGtkGrid () {}
func (self GtkGrid) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkGrid(value unsafe.Pointer) GtkGrid { return GtkGrid{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkCalendar struct { GtkWidget }
type GtkCalendarKind interface {
  _IsGtkCalendar()
  _getValue() unsafe.Pointer
}
func (self GtkCalendar) _IsGtkCalendar () {}
func (self GtkCalendar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCalendar(value unsafe.Pointer) GtkCalendar { return GtkCalendar{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkPaned struct { GtkContainer }
type GtkPanedKind interface {
  _IsGtkPaned()
  _getValue() unsafe.Pointer
}
func (self GtkPaned) _IsGtkPaned () {}
func (self GtkPaned) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPaned(value unsafe.Pointer) GtkPaned { return GtkPaned{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkWindowGroup struct { GObjectObject }
type GtkWindowGroupKind interface {
  _IsGtkWindowGroup()
  _getValue() unsafe.Pointer
}
func (self GtkWindowGroup) _IsGtkWindowGroup () {}
func (self GtkWindowGroup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkWindowGroup(value unsafe.Pointer) GtkWindowGroup { return GtkWindowGroup{GObjectObject{value}} }
type GtkAccelLabel struct { GtkLabel }
type GtkAccelLabelKind interface {
  _IsGtkAccelLabel()
  _getValue() unsafe.Pointer
}
func (self GtkAccelLabel) _IsGtkAccelLabel () {}
func (self GtkAccelLabel) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAccelLabel(value unsafe.Pointer) GtkAccelLabel { return GtkAccelLabel{GtkLabel{GtkMisc{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkVButtonBox struct { GtkButtonBox }
type GtkVButtonBoxKind interface {
  _IsGtkVButtonBox()
  _getValue() unsafe.Pointer
}
func (self GtkVButtonBox) _IsGtkVButtonBox () {}
func (self GtkVButtonBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVButtonBox(value unsafe.Pointer) GtkVButtonBox { return GtkVButtonBox{GtkButtonBox{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkBox struct { GtkContainer }
type GtkBoxKind interface {
  _IsGtkBox()
  _getValue() unsafe.Pointer
}
func (self GtkBox) _IsGtkBox () {}
func (self GtkBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkBox(value unsafe.Pointer) GtkBox { return GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkCellRenderer struct { GObjectInitiallyUnowned }
type GtkCellRendererKind interface {
  _IsGtkCellRenderer()
  _getValue() unsafe.Pointer
}
func (self GtkCellRenderer) _IsGtkCellRenderer () {}
func (self GtkCellRenderer) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRenderer(value unsafe.Pointer) GtkCellRenderer { return GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkAccessible struct { AtkObject }
type GtkAccessibleKind interface {
  _IsGtkAccessible()
  _getValue() unsafe.Pointer
}
func (self GtkAccessible) _IsGtkAccessible () {}
func (self GtkAccessible) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAccessible(value unsafe.Pointer) GtkAccessible { return GtkAccessible{AtkObject{GObjectObject{value}}} }
type GtkSettings struct { GObjectObject }
type GtkSettingsKind interface {
  _IsGtkSettings()
  _getValue() unsafe.Pointer
}
func (self GtkSettings) _IsGtkSettings () {}
func (self GtkSettings) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSettings(value unsafe.Pointer) GtkSettings { return GtkSettings{GObjectObject{value}} }
type GtkRadioAction struct { GtkToggleAction }
type GtkRadioActionKind interface {
  _IsGtkRadioAction()
  _getValue() unsafe.Pointer
}
func (self GtkRadioAction) _IsGtkRadioAction () {}
func (self GtkRadioAction) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRadioAction(value unsafe.Pointer) GtkRadioAction { return GtkRadioAction{GtkToggleAction{GtkAction{GObjectObject{value}}}} }
type GtkAppChooserWidget struct { GtkBox }
type GtkAppChooserWidgetKind interface {
  _IsGtkAppChooserWidget()
  _getValue() unsafe.Pointer
}
func (self GtkAppChooserWidget) _IsGtkAppChooserWidget () {}
func (self GtkAppChooserWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAppChooserWidget(value unsafe.Pointer) GtkAppChooserWidget { return GtkAppChooserWidget{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkFileChooserDialog struct { GtkDialog }
type GtkFileChooserDialogKind interface {
  _IsGtkFileChooserDialog()
  _getValue() unsafe.Pointer
}
func (self GtkFileChooserDialog) _IsGtkFileChooserDialog () {}
func (self GtkFileChooserDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFileChooserDialog(value unsafe.Pointer) GtkFileChooserDialog { return GtkFileChooserDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkSeparatorToolItem struct { GtkToolItem }
type GtkSeparatorToolItemKind interface {
  _IsGtkSeparatorToolItem()
  _getValue() unsafe.Pointer
}
func (self GtkSeparatorToolItem) _IsGtkSeparatorToolItem () {}
func (self GtkSeparatorToolItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSeparatorToolItem(value unsafe.Pointer) GtkSeparatorToolItem { return GtkSeparatorToolItem{GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkToolButton struct { GtkToolItem }
type GtkToolButtonKind interface {
  _IsGtkToolButton()
  _getValue() unsafe.Pointer
}
func (self GtkToolButton) _IsGtkToolButton () {}
func (self GtkToolButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToolButton(value unsafe.Pointer) GtkToolButton { return GtkToolButton{GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkMisc struct { GtkWidget }
type GtkMiscKind interface {
  _IsGtkMisc()
  _getValue() unsafe.Pointer
}
func (self GtkMisc) _IsGtkMisc () {}
func (self GtkMisc) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMisc(value unsafe.Pointer) GtkMisc { return GtkMisc{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkApplication struct { GioApplication }
type GtkApplicationKind interface {
  _IsGtkApplication()
  _getValue() unsafe.Pointer
}
func (self GtkApplication) _IsGtkApplication () {}
func (self GtkApplication) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkApplication(value unsafe.Pointer) GtkApplication { return GtkApplication{GioApplication{GObjectObject{value}}} }
type GtkHButtonBox struct { GtkButtonBox }
type GtkHButtonBoxKind interface {
  _IsGtkHButtonBox()
  _getValue() unsafe.Pointer
}
func (self GtkHButtonBox) _IsGtkHButtonBox () {}
func (self GtkHButtonBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHButtonBox(value unsafe.Pointer) GtkHButtonBox { return GtkHButtonBox{GtkButtonBox{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkColorButton struct { GtkButton }
type GtkColorButtonKind interface {
  _IsGtkColorButton()
  _getValue() unsafe.Pointer
}
func (self GtkColorButton) _IsGtkColorButton () {}
func (self GtkColorButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkColorButton(value unsafe.Pointer) GtkColorButton { return GtkColorButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkPrintContext struct { GObjectObject }
type GtkPrintContextKind interface {
  _IsGtkPrintContext()
  _getValue() unsafe.Pointer
}
func (self GtkPrintContext) _IsGtkPrintContext () {}
func (self GtkPrintContext) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPrintContext(value unsafe.Pointer) GtkPrintContext { return GtkPrintContext{GObjectObject{value}} }
type GtkFontSelectionDialog struct { GtkDialog }
type GtkFontSelectionDialogKind interface {
  _IsGtkFontSelectionDialog()
  _getValue() unsafe.Pointer
}
func (self GtkFontSelectionDialog) _IsGtkFontSelectionDialog () {}
func (self GtkFontSelectionDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFontSelectionDialog(value unsafe.Pointer) GtkFontSelectionDialog { return GtkFontSelectionDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkSocket struct { GtkContainer }
type GtkSocketKind interface {
  _IsGtkSocket()
  _getValue() unsafe.Pointer
}
func (self GtkSocket) _IsGtkSocket () {}
func (self GtkSocket) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSocket(value unsafe.Pointer) GtkSocket { return GtkSocket{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkSeparator struct { GtkWidget }
type GtkSeparatorKind interface {
  _IsGtkSeparator()
  _getValue() unsafe.Pointer
}
func (self GtkSeparator) _IsGtkSeparator () {}
func (self GtkSeparator) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSeparator(value unsafe.Pointer) GtkSeparator { return GtkSeparator{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkActionGroup struct { GObjectObject }
type GtkActionGroupKind interface {
  _IsGtkActionGroup()
  _getValue() unsafe.Pointer
}
func (self GtkActionGroup) _IsGtkActionGroup () {}
func (self GtkActionGroup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkActionGroup(value unsafe.Pointer) GtkActionGroup { return GtkActionGroup{GObjectObject{value}} }
type GtkMenu struct { GtkMenuShell }
type GtkMenuKind interface {
  _IsGtkMenu()
  _getValue() unsafe.Pointer
}
func (self GtkMenu) _IsGtkMenu () {}
func (self GtkMenu) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenu(value unsafe.Pointer) GtkMenu { return GtkMenu{GtkMenuShell{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkToggleButton struct { GtkButton }
type GtkToggleButtonKind interface {
  _IsGtkToggleButton()
  _getValue() unsafe.Pointer
}
func (self GtkToggleButton) _IsGtkToggleButton () {}
func (self GtkToggleButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToggleButton(value unsafe.Pointer) GtkToggleButton { return GtkToggleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkFileChooserButton struct { GtkBox }
type GtkFileChooserButtonKind interface {
  _IsGtkFileChooserButton()
  _getValue() unsafe.Pointer
}
func (self GtkFileChooserButton) _IsGtkFileChooserButton () {}
func (self GtkFileChooserButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFileChooserButton(value unsafe.Pointer) GtkFileChooserButton { return GtkFileChooserButton{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkRecentChooserDialog struct { GtkDialog }
type GtkRecentChooserDialogKind interface {
  _IsGtkRecentChooserDialog()
  _getValue() unsafe.Pointer
}
func (self GtkRecentChooserDialog) _IsGtkRecentChooserDialog () {}
func (self GtkRecentChooserDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentChooserDialog(value unsafe.Pointer) GtkRecentChooserDialog { return GtkRecentChooserDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkAlignment struct { GtkBin }
type GtkAlignmentKind interface {
  _IsGtkAlignment()
  _getValue() unsafe.Pointer
}
func (self GtkAlignment) _IsGtkAlignment () {}
func (self GtkAlignment) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAlignment(value unsafe.Pointer) GtkAlignment { return GtkAlignment{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkAssistant struct { GtkWindow }
type GtkAssistantKind interface {
  _IsGtkAssistant()
  _getValue() unsafe.Pointer
}
func (self GtkAssistant) _IsGtkAssistant () {}
func (self GtkAssistant) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAssistant(value unsafe.Pointer) GtkAssistant { return GtkAssistant{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkHandleBox struct { GtkBin }
type GtkHandleBoxKind interface {
  _IsGtkHandleBox()
  _getValue() unsafe.Pointer
}
func (self GtkHandleBox) _IsGtkHandleBox () {}
func (self GtkHandleBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHandleBox(value unsafe.Pointer) GtkHandleBox { return GtkHandleBox{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkVPaned struct { GtkPaned }
type GtkVPanedKind interface {
  _IsGtkVPaned()
  _getValue() unsafe.Pointer
}
func (self GtkVPaned) _IsGtkVPaned () {}
func (self GtkVPaned) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVPaned(value unsafe.Pointer) GtkVPaned { return GtkVPaned{GtkPaned{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkMenuButton struct { GtkToggleButton }
type GtkMenuButtonKind interface {
  _IsGtkMenuButton()
  _getValue() unsafe.Pointer
}
func (self GtkMenuButton) _IsGtkMenuButton () {}
func (self GtkMenuButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenuButton(value unsafe.Pointer) GtkMenuButton { return GtkMenuButton{GtkToggleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkEntry struct { GtkWidget }
type GtkEntryKind interface {
  _IsGtkEntry()
  _getValue() unsafe.Pointer
}
func (self GtkEntry) _IsGtkEntry () {}
func (self GtkEntry) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkEntry(value unsafe.Pointer) GtkEntry { return GtkEntry{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkSeparatorMenuItem struct { GtkMenuItem }
type GtkSeparatorMenuItemKind interface {
  _IsGtkSeparatorMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkSeparatorMenuItem) _IsGtkSeparatorMenuItem () {}
func (self GtkSeparatorMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSeparatorMenuItem(value unsafe.Pointer) GtkSeparatorMenuItem { return GtkSeparatorMenuItem{GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkButtonBox struct { GtkBox }
type GtkButtonBoxKind interface {
  _IsGtkButtonBox()
  _getValue() unsafe.Pointer
}
func (self GtkButtonBox) _IsGtkButtonBox () {}
func (self GtkButtonBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkButtonBox(value unsafe.Pointer) GtkButtonBox { return GtkButtonBox{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkWindow struct { GtkBin }
type GtkWindowKind interface {
  _IsGtkWindow()
  _getValue() unsafe.Pointer
}
func (self GtkWindow) _IsGtkWindow () {}
func (self GtkWindow) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkWindow(value unsafe.Pointer) GtkWindow { return GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkToolPalette struct { GtkContainer }
type GtkToolPaletteKind interface {
  _IsGtkToolPalette()
  _getValue() unsafe.Pointer
}
func (self GtkToolPalette) _IsGtkToolPalette () {}
func (self GtkToolPalette) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToolPalette(value unsafe.Pointer) GtkToolPalette { return GtkToolPalette{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkSwitch struct { GtkWidget }
type GtkSwitchKind interface {
  _IsGtkSwitch()
  _getValue() unsafe.Pointer
}
func (self GtkSwitch) _IsGtkSwitch () {}
func (self GtkSwitch) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSwitch(value unsafe.Pointer) GtkSwitch { return GtkSwitch{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkCellRendererAccel struct { GtkCellRendererText }
type GtkCellRendererAccelKind interface {
  _IsGtkCellRendererAccel()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererAccel) _IsGtkCellRendererAccel () {}
func (self GtkCellRendererAccel) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererAccel(value unsafe.Pointer) GtkCellRendererAccel { return GtkCellRendererAccel{GtkCellRendererText{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkScrollbar struct { GtkRange }
type GtkScrollbarKind interface {
  _IsGtkScrollbar()
  _getValue() unsafe.Pointer
}
func (self GtkScrollbar) _IsGtkScrollbar () {}
func (self GtkScrollbar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkScrollbar(value unsafe.Pointer) GtkScrollbar { return GtkScrollbar{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkStatusbar struct { GtkBox }
type GtkStatusbarKind interface {
  _IsGtkStatusbar()
  _getValue() unsafe.Pointer
}
func (self GtkStatusbar) _IsGtkStatusbar () {}
func (self GtkStatusbar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkStatusbar(value unsafe.Pointer) GtkStatusbar { return GtkStatusbar{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkTreeModelFilter struct { GObjectObject }
type GtkTreeModelFilterKind interface {
  _IsGtkTreeModelFilter()
  _getValue() unsafe.Pointer
}
func (self GtkTreeModelFilter) _IsGtkTreeModelFilter () {}
func (self GtkTreeModelFilter) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeModelFilter(value unsafe.Pointer) GtkTreeModelFilter { return GtkTreeModelFilter{GObjectObject{value}} }
type GtkNotebook struct { GtkContainer }
type GtkNotebookKind interface {
  _IsGtkNotebook()
  _getValue() unsafe.Pointer
}
func (self GtkNotebook) _IsGtkNotebook () {}
func (self GtkNotebook) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkNotebook(value unsafe.Pointer) GtkNotebook { return GtkNotebook{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkPlug struct { GtkWindow }
type GtkPlugKind interface {
  _IsGtkPlug()
  _getValue() unsafe.Pointer
}
func (self GtkPlug) _IsGtkPlug () {}
func (self GtkPlug) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPlug(value unsafe.Pointer) GtkPlug { return GtkPlug{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkColorChooserDialog struct { GtkDialog }
type GtkColorChooserDialogKind interface {
  _IsGtkColorChooserDialog()
  _getValue() unsafe.Pointer
}
func (self GtkColorChooserDialog) _IsGtkColorChooserDialog () {}
func (self GtkColorChooserDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkColorChooserDialog(value unsafe.Pointer) GtkColorChooserDialog { return GtkColorChooserDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkTreeView struct { GtkContainer }
type GtkTreeViewKind interface {
  _IsGtkTreeView()
  _getValue() unsafe.Pointer
}
func (self GtkTreeView) _IsGtkTreeView () {}
func (self GtkTreeView) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeView(value unsafe.Pointer) GtkTreeView { return GtkTreeView{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkFileFilter struct { GObjectInitiallyUnowned }
type GtkFileFilterKind interface {
  _IsGtkFileFilter()
  _getValue() unsafe.Pointer
}
func (self GtkFileFilter) _IsGtkFileFilter () {}
func (self GtkFileFilter) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFileFilter(value unsafe.Pointer) GtkFileFilter { return GtkFileFilter{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkSearchEntry struct { GtkEntry }
type GtkSearchEntryKind interface {
  _IsGtkSearchEntry()
  _getValue() unsafe.Pointer
}
func (self GtkSearchEntry) _IsGtkSearchEntry () {}
func (self GtkSearchEntry) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSearchEntry(value unsafe.Pointer) GtkSearchEntry { return GtkSearchEntry{GtkEntry{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkLockButton struct { GtkButton }
type GtkLockButtonKind interface {
  _IsGtkLockButton()
  _getValue() unsafe.Pointer
}
func (self GtkLockButton) _IsGtkLockButton () {}
func (self GtkLockButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkLockButton(value unsafe.Pointer) GtkLockButton { return GtkLockButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkLinkButton struct { GtkButton }
type GtkLinkButtonKind interface {
  _IsGtkLinkButton()
  _getValue() unsafe.Pointer
}
func (self GtkLinkButton) _IsGtkLinkButton () {}
func (self GtkLinkButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkLinkButton(value unsafe.Pointer) GtkLinkButton { return GtkLinkButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkAppChooserButton struct { GtkComboBox }
type GtkAppChooserButtonKind interface {
  _IsGtkAppChooserButton()
  _getValue() unsafe.Pointer
}
func (self GtkAppChooserButton) _IsGtkAppChooserButton () {}
func (self GtkAppChooserButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAppChooserButton(value unsafe.Pointer) GtkAppChooserButton { return GtkAppChooserButton{GtkComboBox{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkClipboard struct { GObjectObject }
type GtkClipboardKind interface {
  _IsGtkClipboard()
  _getValue() unsafe.Pointer
}
func (self GtkClipboard) _IsGtkClipboard () {}
func (self GtkClipboard) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkClipboard(value unsafe.Pointer) GtkClipboard { return GtkClipboard{GObjectObject{value}} }
type GtkInfoBar struct { GtkBox }
type GtkInfoBarKind interface {
  _IsGtkInfoBar()
  _getValue() unsafe.Pointer
}
func (self GtkInfoBar) _IsGtkInfoBar () {}
func (self GtkInfoBar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkInfoBar(value unsafe.Pointer) GtkInfoBar { return GtkInfoBar{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkRange struct { GtkWidget }
type GtkRangeKind interface {
  _IsGtkRange()
  _getValue() unsafe.Pointer
}
func (self GtkRange) _IsGtkRange () {}
func (self GtkRange) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRange(value unsafe.Pointer) GtkRange { return GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkTreeSelection struct { GObjectObject }
type GtkTreeSelectionKind interface {
  _IsGtkTreeSelection()
  _getValue() unsafe.Pointer
}
func (self GtkTreeSelection) _IsGtkTreeSelection () {}
func (self GtkTreeSelection) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeSelection(value unsafe.Pointer) GtkTreeSelection { return GtkTreeSelection{GObjectObject{value}} }
type GtkMenuToolButton struct { GtkToolButton }
type GtkMenuToolButtonKind interface {
  _IsGtkMenuToolButton()
  _getValue() unsafe.Pointer
}
func (self GtkMenuToolButton) _IsGtkMenuToolButton () {}
func (self GtkMenuToolButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenuToolButton(value unsafe.Pointer) GtkMenuToolButton { return GtkMenuToolButton{GtkToolButton{GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkRadioButton struct { GtkCheckButton }
type GtkRadioButtonKind interface {
  _IsGtkRadioButton()
  _getValue() unsafe.Pointer
}
func (self GtkRadioButton) _IsGtkRadioButton () {}
func (self GtkRadioButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRadioButton(value unsafe.Pointer) GtkRadioButton { return GtkRadioButton{GtkCheckButton{GtkToggleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}}} }
type GtkPrintSettings struct { GObjectObject }
type GtkPrintSettingsKind interface {
  _IsGtkPrintSettings()
  _getValue() unsafe.Pointer
}
func (self GtkPrintSettings) _IsGtkPrintSettings () {}
func (self GtkPrintSettings) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPrintSettings(value unsafe.Pointer) GtkPrintSettings { return GtkPrintSettings{GObjectObject{value}} }
type GtkIconView struct { GtkContainer }
type GtkIconViewKind interface {
  _IsGtkIconView()
  _getValue() unsafe.Pointer
}
func (self GtkIconView) _IsGtkIconView () {}
func (self GtkIconView) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIconView(value unsafe.Pointer) GtkIconView { return GtkIconView{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkImageMenuItem struct { GtkMenuItem }
type GtkImageMenuItemKind interface {
  _IsGtkImageMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkImageMenuItem) _IsGtkImageMenuItem () {}
func (self GtkImageMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkImageMenuItem(value unsafe.Pointer) GtkImageMenuItem { return GtkImageMenuItem{GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkCheckButton struct { GtkToggleButton }
type GtkCheckButtonKind interface {
  _IsGtkCheckButton()
  _getValue() unsafe.Pointer
}
func (self GtkCheckButton) _IsGtkCheckButton () {}
func (self GtkCheckButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCheckButton(value unsafe.Pointer) GtkCheckButton { return GtkCheckButton{GtkToggleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkTearoffMenuItem struct { GtkMenuItem }
type GtkTearoffMenuItemKind interface {
  _IsGtkTearoffMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkTearoffMenuItem) _IsGtkTearoffMenuItem () {}
func (self GtkTearoffMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTearoffMenuItem(value unsafe.Pointer) GtkTearoffMenuItem { return GtkTearoffMenuItem{GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkVScrollbar struct { GtkScrollbar }
type GtkVScrollbarKind interface {
  _IsGtkVScrollbar()
  _getValue() unsafe.Pointer
}
func (self GtkVScrollbar) _IsGtkVScrollbar () {}
func (self GtkVScrollbar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVScrollbar(value unsafe.Pointer) GtkVScrollbar { return GtkVScrollbar{GtkScrollbar{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkRecentFilter struct { GObjectInitiallyUnowned }
type GtkRecentFilterKind interface {
  _IsGtkRecentFilter()
  _getValue() unsafe.Pointer
}
func (self GtkRecentFilter) _IsGtkRecentFilter () {}
func (self GtkRecentFilter) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentFilter(value unsafe.Pointer) GtkRecentFilter { return GtkRecentFilter{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkSpinButton struct { GtkEntry }
type GtkSpinButtonKind interface {
  _IsGtkSpinButton()
  _getValue() unsafe.Pointer
}
func (self GtkSpinButton) _IsGtkSpinButton () {}
func (self GtkSpinButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSpinButton(value unsafe.Pointer) GtkSpinButton { return GtkSpinButton{GtkEntry{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkPrintOperation struct { GObjectObject }
type GtkPrintOperationKind interface {
  _IsGtkPrintOperation()
  _getValue() unsafe.Pointer
}
func (self GtkPrintOperation) _IsGtkPrintOperation () {}
func (self GtkPrintOperation) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkPrintOperation(value unsafe.Pointer) GtkPrintOperation { return GtkPrintOperation{GObjectObject{value}} }
type GtkContainer struct { GtkWidget }
type GtkContainerKind interface {
  _IsGtkContainer()
  _getValue() unsafe.Pointer
}
func (self GtkContainer) _IsGtkContainer () {}
func (self GtkContainer) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkContainer(value unsafe.Pointer) GtkContainer { return GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkImage struct { GtkMisc }
type GtkImageKind interface {
  _IsGtkImage()
  _getValue() unsafe.Pointer
}
func (self GtkImage) _IsGtkImage () {}
func (self GtkImage) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkImage(value unsafe.Pointer) GtkImage { return GtkImage{GtkMisc{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkTextView struct { GtkContainer }
type GtkTextViewKind interface {
  _IsGtkTextView()
  _getValue() unsafe.Pointer
}
func (self GtkTextView) _IsGtkTextView () {}
func (self GtkTextView) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextView(value unsafe.Pointer) GtkTextView { return GtkTextView{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkLevelBar struct { GtkWidget }
type GtkLevelBarKind interface {
  _IsGtkLevelBar()
  _getValue() unsafe.Pointer
}
func (self GtkLevelBar) _IsGtkLevelBar () {}
func (self GtkLevelBar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkLevelBar(value unsafe.Pointer) GtkLevelBar { return GtkLevelBar{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkIMMulticontext struct { GtkIMContext }
type GtkIMMulticontextKind interface {
  _IsGtkIMMulticontext()
  _getValue() unsafe.Pointer
}
func (self GtkIMMulticontext) _IsGtkIMMulticontext () {}
func (self GtkIMMulticontext) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIMMulticontext(value unsafe.Pointer) GtkIMMulticontext { return GtkIMMulticontext{GtkIMContext{GObjectObject{value}}} }
type GtkToolItem struct { GtkBin }
type GtkToolItemKind interface {
  _IsGtkToolItem()
  _getValue() unsafe.Pointer
}
func (self GtkToolItem) _IsGtkToolItem () {}
func (self GtkToolItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToolItem(value unsafe.Pointer) GtkToolItem { return GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkVolumeButton struct { GtkScaleButton }
type GtkVolumeButtonKind interface {
  _IsGtkVolumeButton()
  _getValue() unsafe.Pointer
}
func (self GtkVolumeButton) _IsGtkVolumeButton () {}
func (self GtkVolumeButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVolumeButton(value unsafe.Pointer) GtkVolumeButton { return GtkVolumeButton{GtkScaleButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkVBox struct { GtkBox }
type GtkVBoxKind interface {
  _IsGtkVBox()
  _getValue() unsafe.Pointer
}
func (self GtkVBox) _IsGtkVBox () {}
func (self GtkVBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVBox(value unsafe.Pointer) GtkVBox { return GtkVBox{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkSizeGroup struct { GObjectObject }
type GtkSizeGroupKind interface {
  _IsGtkSizeGroup()
  _getValue() unsafe.Pointer
}
func (self GtkSizeGroup) _IsGtkSizeGroup () {}
func (self GtkSizeGroup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSizeGroup(value unsafe.Pointer) GtkSizeGroup { return GtkSizeGroup{GObjectObject{value}} }
type GtkButton struct { GtkBin }
type GtkButtonKind interface {
  _IsGtkButton()
  _getValue() unsafe.Pointer
}
func (self GtkButton) _IsGtkButton () {}
func (self GtkButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkButton(value unsafe.Pointer) GtkButton { return GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkFixed struct { GtkContainer }
type GtkFixedKind interface {
  _IsGtkFixed()
  _getValue() unsafe.Pointer
}
func (self GtkFixed) _IsGtkFixed () {}
func (self GtkFixed) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFixed(value unsafe.Pointer) GtkFixed { return GtkFixed{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkSpinner struct { GtkWidget }
type GtkSpinnerKind interface {
  _IsGtkSpinner()
  _getValue() unsafe.Pointer
}
func (self GtkSpinner) _IsGtkSpinner () {}
func (self GtkSpinner) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkSpinner(value unsafe.Pointer) GtkSpinner { return GtkSpinner{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkStyleContext struct { GObjectObject }
type GtkStyleContextKind interface {
  _IsGtkStyleContext()
  _getValue() unsafe.Pointer
}
func (self GtkStyleContext) _IsGtkStyleContext () {}
func (self GtkStyleContext) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkStyleContext(value unsafe.Pointer) GtkStyleContext { return GtkStyleContext{GObjectObject{value}} }
type GtkRecentAction struct { GtkAction }
type GtkRecentActionKind interface {
  _IsGtkRecentAction()
  _getValue() unsafe.Pointer
}
func (self GtkRecentAction) _IsGtkRecentAction () {}
func (self GtkRecentAction) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentAction(value unsafe.Pointer) GtkRecentAction { return GtkRecentAction{GtkAction{GObjectObject{value}}} }
type GtkAppChooserDialog struct { GtkDialog }
type GtkAppChooserDialogKind interface {
  _IsGtkAppChooserDialog()
  _getValue() unsafe.Pointer
}
func (self GtkAppChooserDialog) _IsGtkAppChooserDialog () {}
func (self GtkAppChooserDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAppChooserDialog(value unsafe.Pointer) GtkAppChooserDialog { return GtkAppChooserDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkApplicationWindow struct { GtkWindow }
type GtkApplicationWindowKind interface {
  _IsGtkApplicationWindow()
  _getValue() unsafe.Pointer
}
func (self GtkApplicationWindow) _IsGtkApplicationWindow () {}
func (self GtkApplicationWindow) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkApplicationWindow(value unsafe.Pointer) GtkApplicationWindow { return GtkApplicationWindow{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkComboBoxText struct { GtkComboBox }
type GtkComboBoxTextKind interface {
  _IsGtkComboBoxText()
  _getValue() unsafe.Pointer
}
func (self GtkComboBoxText) _IsGtkComboBoxText () {}
func (self GtkComboBoxText) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkComboBoxText(value unsafe.Pointer) GtkComboBoxText { return GtkComboBoxText{GtkComboBox{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkEntryBuffer struct { GObjectObject }
type GtkEntryBufferKind interface {
  _IsGtkEntryBuffer()
  _getValue() unsafe.Pointer
}
func (self GtkEntryBuffer) _IsGtkEntryBuffer () {}
func (self GtkEntryBuffer) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkEntryBuffer(value unsafe.Pointer) GtkEntryBuffer { return GtkEntryBuffer{GObjectObject{value}} }
type GtkMenuShell struct { GtkContainer }
type GtkMenuShellKind interface {
  _IsGtkMenuShell()
  _getValue() unsafe.Pointer
}
func (self GtkMenuShell) _IsGtkMenuShell () {}
func (self GtkMenuShell) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenuShell(value unsafe.Pointer) GtkMenuShell { return GtkMenuShell{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkBuilder struct { GObjectObject }
type GtkBuilderKind interface {
  _IsGtkBuilder()
  _getValue() unsafe.Pointer
}
func (self GtkBuilder) _IsGtkBuilder () {}
func (self GtkBuilder) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkBuilder(value unsafe.Pointer) GtkBuilder { return GtkBuilder{GObjectObject{value}} }
type GtkComboBox struct { GtkBin }
type GtkComboBoxKind interface {
  _IsGtkComboBox()
  _getValue() unsafe.Pointer
}
func (self GtkComboBox) _IsGtkComboBox () {}
func (self GtkComboBox) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkComboBox(value unsafe.Pointer) GtkComboBox { return GtkComboBox{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkInvisible struct { GtkWidget }
type GtkInvisibleKind interface {
  _IsGtkInvisible()
  _getValue() unsafe.Pointer
}
func (self GtkInvisible) _IsGtkInvisible () {}
func (self GtkInvisible) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkInvisible(value unsafe.Pointer) GtkInvisible { return GtkInvisible{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkFontChooserDialog struct { GtkDialog }
type GtkFontChooserDialogKind interface {
  _IsGtkFontChooserDialog()
  _getValue() unsafe.Pointer
}
func (self GtkFontChooserDialog) _IsGtkFontChooserDialog () {}
func (self GtkFontChooserDialog) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFontChooserDialog(value unsafe.Pointer) GtkFontChooserDialog { return GtkFontChooserDialog{GtkDialog{GtkWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkRadioToolButton struct { GtkToggleToolButton }
type GtkRadioToolButtonKind interface {
  _IsGtkRadioToolButton()
  _getValue() unsafe.Pointer
}
func (self GtkRadioToolButton) _IsGtkRadioToolButton () {}
func (self GtkRadioToolButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRadioToolButton(value unsafe.Pointer) GtkRadioToolButton { return GtkRadioToolButton{GtkToggleToolButton{GtkToolButton{GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}}} }
type GtkRecentChooserMenu struct { GtkMenu }
type GtkRecentChooserMenuKind interface {
  _IsGtkRecentChooserMenu()
  _getValue() unsafe.Pointer
}
func (self GtkRecentChooserMenu) _IsGtkRecentChooserMenu () {}
func (self GtkRecentChooserMenu) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentChooserMenu(value unsafe.Pointer) GtkRecentChooserMenu { return GtkRecentChooserMenu{GtkMenu{GtkMenuShell{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkHScale struct { GtkScale }
type GtkHScaleKind interface {
  _IsGtkHScale()
  _getValue() unsafe.Pointer
}
func (self GtkHScale) _IsGtkHScale () {}
func (self GtkHScale) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHScale(value unsafe.Pointer) GtkHScale { return GtkHScale{GtkScale{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkHSeparator struct { GtkSeparator }
type GtkHSeparatorKind interface {
  _IsGtkHSeparator()
  _getValue() unsafe.Pointer
}
func (self GtkHSeparator) _IsGtkHSeparator () {}
func (self GtkHSeparator) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHSeparator(value unsafe.Pointer) GtkHSeparator { return GtkHSeparator{GtkSeparator{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkStatusIcon struct { GObjectObject }
type GtkStatusIconKind interface {
  _IsGtkStatusIcon()
  _getValue() unsafe.Pointer
}
func (self GtkStatusIcon) _IsGtkStatusIcon () {}
func (self GtkStatusIcon) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkStatusIcon(value unsafe.Pointer) GtkStatusIcon { return GtkStatusIcon{GObjectObject{value}} }
type GtkOverlay struct { GtkBin }
type GtkOverlayKind interface {
  _IsGtkOverlay()
  _getValue() unsafe.Pointer
}
func (self GtkOverlay) _IsGtkOverlay () {}
func (self GtkOverlay) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkOverlay(value unsafe.Pointer) GtkOverlay { return GtkOverlay{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkVScale struct { GtkScale }
type GtkVScaleKind interface {
  _IsGtkVScale()
  _getValue() unsafe.Pointer
}
func (self GtkVScale) _IsGtkVScale () {}
func (self GtkVScale) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkVScale(value unsafe.Pointer) GtkVScale { return GtkVScale{GtkScale{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkEntryCompletion struct { GObjectObject }
type GtkEntryCompletionKind interface {
  _IsGtkEntryCompletion()
  _getValue() unsafe.Pointer
}
func (self GtkEntryCompletion) _IsGtkEntryCompletion () {}
func (self GtkEntryCompletion) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkEntryCompletion(value unsafe.Pointer) GtkEntryCompletion { return GtkEntryCompletion{GObjectObject{value}} }
type GtkScale struct { GtkRange }
type GtkScaleKind interface {
  _IsGtkScale()
  _getValue() unsafe.Pointer
}
func (self GtkScale) _IsGtkScale () {}
func (self GtkScale) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkScale(value unsafe.Pointer) GtkScale { return GtkScale{GtkRange{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkFontSelection struct { GtkBox }
type GtkFontSelectionKind interface {
  _IsGtkFontSelection()
  _getValue() unsafe.Pointer
}
func (self GtkFontSelection) _IsGtkFontSelection () {}
func (self GtkFontSelection) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFontSelection(value unsafe.Pointer) GtkFontSelection { return GtkFontSelection{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkToggleToolButton struct { GtkToolButton }
type GtkToggleToolButtonKind interface {
  _IsGtkToggleToolButton()
  _getValue() unsafe.Pointer
}
func (self GtkToggleToolButton) _IsGtkToggleToolButton () {}
func (self GtkToggleToolButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToggleToolButton(value unsafe.Pointer) GtkToggleToolButton { return GtkToggleToolButton{GtkToolButton{GtkToolItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}}} }
type GtkToggleAction struct { GtkAction }
type GtkToggleActionKind interface {
  _IsGtkToggleAction()
  _getValue() unsafe.Pointer
}
func (self GtkToggleAction) _IsGtkToggleAction () {}
func (self GtkToggleAction) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToggleAction(value unsafe.Pointer) GtkToggleAction { return GtkToggleAction{GtkAction{GObjectObject{value}}} }
type GtkCellRendererPixbuf struct { GtkCellRenderer }
type GtkCellRendererPixbufKind interface {
  _IsGtkCellRendererPixbuf()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererPixbuf) _IsGtkCellRendererPixbuf () {}
func (self GtkCellRendererPixbuf) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererPixbuf(value unsafe.Pointer) GtkCellRendererPixbuf { return GtkCellRendererPixbuf{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkIMContextSimple struct { GtkIMContext }
type GtkIMContextSimpleKind interface {
  _IsGtkIMContextSimple()
  _getValue() unsafe.Pointer
}
func (self GtkIMContextSimple) _IsGtkIMContextSimple () {}
func (self GtkIMContextSimple) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkIMContextSimple(value unsafe.Pointer) GtkIMContextSimple { return GtkIMContextSimple{GtkIMContext{GObjectObject{value}}} }
type GtkScrolledWindow struct { GtkBin }
type GtkScrolledWindowKind interface {
  _IsGtkScrolledWindow()
  _getValue() unsafe.Pointer
}
func (self GtkScrolledWindow) _IsGtkScrolledWindow () {}
func (self GtkScrolledWindow) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkScrolledWindow(value unsafe.Pointer) GtkScrolledWindow { return GtkScrolledWindow{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkCellRendererSpin struct { GtkCellRendererText }
type GtkCellRendererSpinKind interface {
  _IsGtkCellRendererSpin()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererSpin) _IsGtkCellRendererSpin () {}
func (self GtkCellRendererSpin) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererSpin(value unsafe.Pointer) GtkCellRendererSpin { return GtkCellRendererSpin{GtkCellRendererText{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkTextTag struct { GObjectObject }
type GtkTextTagKind interface {
  _IsGtkTextTag()
  _getValue() unsafe.Pointer
}
func (self GtkTextTag) _IsGtkTextTag () {}
func (self GtkTextTag) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextTag(value unsafe.Pointer) GtkTextTag { return GtkTextTag{GObjectObject{value}} }
type GtkNumerableIcon struct { GioEmblemedIcon }
type GtkNumerableIconKind interface {
  _IsGtkNumerableIcon()
  _getValue() unsafe.Pointer
}
func (self GtkNumerableIcon) _IsGtkNumerableIcon () {}
func (self GtkNumerableIcon) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkNumerableIcon(value unsafe.Pointer) GtkNumerableIcon { return GtkNumerableIcon{GioEmblemedIcon{GObjectObject{value}}} }
type GtkAction struct { GObjectObject }
type GtkActionKind interface {
  _IsGtkAction()
  _getValue() unsafe.Pointer
}
func (self GtkAction) _IsGtkAction () {}
func (self GtkAction) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAction(value unsafe.Pointer) GtkAction { return GtkAction{GObjectObject{value}} }
type GtkTextChildAnchor struct { GObjectObject }
type GtkTextChildAnchorKind interface {
  _IsGtkTextChildAnchor()
  _getValue() unsafe.Pointer
}
func (self GtkTextChildAnchor) _IsGtkTextChildAnchor () {}
func (self GtkTextChildAnchor) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextChildAnchor(value unsafe.Pointer) GtkTextChildAnchor { return GtkTextChildAnchor{GObjectObject{value}} }
type GtkAdjustment struct { GObjectInitiallyUnowned }
type GtkAdjustmentKind interface {
  _IsGtkAdjustment()
  _getValue() unsafe.Pointer
}
func (self GtkAdjustment) _IsGtkAdjustment () {}
func (self GtkAdjustment) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAdjustment(value unsafe.Pointer) GtkAdjustment { return GtkAdjustment{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkExpander struct { GtkBin }
type GtkExpanderKind interface {
  _IsGtkExpander()
  _getValue() unsafe.Pointer
}
func (self GtkExpander) _IsGtkExpander () {}
func (self GtkExpander) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkExpander(value unsafe.Pointer) GtkExpander { return GtkExpander{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkColorChooserWidget struct { GtkBox }
type GtkColorChooserWidgetKind interface {
  _IsGtkColorChooserWidget()
  _getValue() unsafe.Pointer
}
func (self GtkColorChooserWidget) _IsGtkColorChooserWidget () {}
func (self GtkColorChooserWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkColorChooserWidget(value unsafe.Pointer) GtkColorChooserWidget { return GtkColorChooserWidget{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkFontChooserWidget struct { GtkBox }
type GtkFontChooserWidgetKind interface {
  _IsGtkFontChooserWidget()
  _getValue() unsafe.Pointer
}
func (self GtkFontChooserWidget) _IsGtkFontChooserWidget () {}
func (self GtkFontChooserWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFontChooserWidget(value unsafe.Pointer) GtkFontChooserWidget { return GtkFontChooserWidget{GtkBox{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkRecentManager struct { GObjectObject }
type GtkRecentManagerKind interface {
  _IsGtkRecentManager()
  _getValue() unsafe.Pointer
}
func (self GtkRecentManager) _IsGtkRecentManager () {}
func (self GtkRecentManager) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkRecentManager(value unsafe.Pointer) GtkRecentManager { return GtkRecentManager{GObjectObject{value}} }
type GtkDrawingArea struct { GtkWidget }
type GtkDrawingAreaKind interface {
  _IsGtkDrawingArea()
  _getValue() unsafe.Pointer
}
func (self GtkDrawingArea) _IsGtkDrawingArea () {}
func (self GtkDrawingArea) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkDrawingArea(value unsafe.Pointer) GtkDrawingArea { return GtkDrawingArea{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkMenuItem struct { GtkBin }
type GtkMenuItemKind interface {
  _IsGtkMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkMenuItem) _IsGtkMenuItem () {}
func (self GtkMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenuItem(value unsafe.Pointer) GtkMenuItem { return GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
type GtkCssProvider struct { GObjectObject }
type GtkCssProviderKind interface {
  _IsGtkCssProvider()
  _getValue() unsafe.Pointer
}
func (self GtkCssProvider) _IsGtkCssProvider () {}
func (self GtkCssProvider) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCssProvider(value unsafe.Pointer) GtkCssProvider { return GtkCssProvider{GObjectObject{value}} }
type GtkCellRendererSpinner struct { GtkCellRenderer }
type GtkCellRendererSpinnerKind interface {
  _IsGtkCellRendererSpinner()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererSpinner) _IsGtkCellRendererSpinner () {}
func (self GtkCellRendererSpinner) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererSpinner(value unsafe.Pointer) GtkCellRendererSpinner { return GtkCellRendererSpinner{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkStyle struct { GObjectObject }
type GtkStyleKind interface {
  _IsGtkStyle()
  _getValue() unsafe.Pointer
}
func (self GtkStyle) _IsGtkStyle () {}
func (self GtkStyle) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkStyle(value unsafe.Pointer) GtkStyle { return GtkStyle{GObjectObject{value}} }
type GtkCellRendererToggle struct { GtkCellRenderer }
type GtkCellRendererToggleKind interface {
  _IsGtkCellRendererToggle()
  _getValue() unsafe.Pointer
}
func (self GtkCellRendererToggle) _IsGtkCellRendererToggle () {}
func (self GtkCellRendererToggle) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCellRendererToggle(value unsafe.Pointer) GtkCellRendererToggle { return GtkCellRendererToggle{GtkCellRenderer{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkAccelMap struct { GObjectObject }
type GtkAccelMapKind interface {
  _IsGtkAccelMap()
  _getValue() unsafe.Pointer
}
func (self GtkAccelMap) _IsGtkAccelMap () {}
func (self GtkAccelMap) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAccelMap(value unsafe.Pointer) GtkAccelMap { return GtkAccelMap{GObjectObject{value}} }
type GtkTextTagTable struct { GObjectObject }
type GtkTextTagTableKind interface {
  _IsGtkTextTagTable()
  _getValue() unsafe.Pointer
}
func (self GtkTextTagTable) _IsGtkTextTagTable () {}
func (self GtkTextTagTable) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextTagTable(value unsafe.Pointer) GtkTextTagTable { return GtkTextTagTable{GObjectObject{value}} }
type GtkTreeStore struct { GObjectObject }
type GtkTreeStoreKind interface {
  _IsGtkTreeStore()
  _getValue() unsafe.Pointer
}
func (self GtkTreeStore) _IsGtkTreeStore () {}
func (self GtkTreeStore) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTreeStore(value unsafe.Pointer) GtkTreeStore { return GtkTreeStore{GObjectObject{value}} }
type GtkAccelGroup struct { GObjectObject }
type GtkAccelGroupKind interface {
  _IsGtkAccelGroup()
  _getValue() unsafe.Pointer
}
func (self GtkAccelGroup) _IsGtkAccelGroup () {}
func (self GtkAccelGroup) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkAccelGroup(value unsafe.Pointer) GtkAccelGroup { return GtkAccelGroup{GObjectObject{value}} }
type GtkToolbar struct { GtkContainer }
type GtkToolbarKind interface {
  _IsGtkToolbar()
  _getValue() unsafe.Pointer
}
func (self GtkToolbar) _IsGtkToolbar () {}
func (self GtkToolbar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkToolbar(value unsafe.Pointer) GtkToolbar { return GtkToolbar{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkTextMark struct { GObjectObject }
type GtkTextMarkKind interface {
  _IsGtkTextMark()
  _getValue() unsafe.Pointer
}
func (self GtkTextMark) _IsGtkTextMark () {}
func (self GtkTextMark) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkTextMark(value unsafe.Pointer) GtkTextMark { return GtkTextMark{GObjectObject{value}} }
type GtkCheckMenuItem struct { GtkMenuItem }
type GtkCheckMenuItemKind interface {
  _IsGtkCheckMenuItem()
  _getValue() unsafe.Pointer
}
func (self GtkCheckMenuItem) _IsGtkCheckMenuItem () {}
func (self GtkCheckMenuItem) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkCheckMenuItem(value unsafe.Pointer) GtkCheckMenuItem { return GtkCheckMenuItem{GtkMenuItem{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkLayout struct { GtkContainer }
type GtkLayoutKind interface {
  _IsGtkLayout()
  _getValue() unsafe.Pointer
}
func (self GtkLayout) _IsGtkLayout () {}
func (self GtkLayout) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkLayout(value unsafe.Pointer) GtkLayout { return GtkLayout{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}} }
type GtkWidget struct { GObjectInitiallyUnowned }
type GtkWidgetKind interface {
  _IsGtkWidget()
  _getValue() unsafe.Pointer
}
func (self GtkWidget) _IsGtkWidget () {}
func (self GtkWidget) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkWidget(value unsafe.Pointer) GtkWidget { return GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}} }
type GtkFontButton struct { GtkButton }
type GtkFontButtonKind interface {
  _IsGtkFontButton()
  _getValue() unsafe.Pointer
}
func (self GtkFontButton) _IsGtkFontButton () {}
func (self GtkFontButton) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkFontButton(value unsafe.Pointer) GtkFontButton { return GtkFontButton{GtkButton{GtkBin{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}}} }
type GtkHSV struct { GtkWidget }
type GtkHSVKind interface {
  _IsGtkHSV()
  _getValue() unsafe.Pointer
}
func (self GtkHSV) _IsGtkHSV () {}
func (self GtkHSV) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkHSV(value unsafe.Pointer) GtkHSV { return GtkHSV{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}} }
type GtkMenuBar struct { GtkMenuShell }
type GtkMenuBarKind interface {
  _IsGtkMenuBar()
  _getValue() unsafe.Pointer
}
func (self GtkMenuBar) _IsGtkMenuBar () {}
func (self GtkMenuBar) _getValue() unsafe.Pointer { return self._value_ }
func ToGtkMenuBar(value unsafe.Pointer) GtkMenuBar { return GtkMenuBar{GtkMenuShell{GtkContainer{GtkWidget{GObjectInitiallyUnowned{GObjectObject{value}}}}}} }
func AccelGroupsActivate(object *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_groups_activate(object, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AccelGroupsFromObject(object *C.GObject) (_return_ *C.GSList) {
	_return_ = C.gtk_accel_groups_from_object(object)
	return
}

func AcceleratorGetDefaultModMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accelerator_get_default_mod_mask()
	return
}

func AcceleratorGetLabel(accelerator_key uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_get_label(_cgo_accelerator_key_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorGetLabelWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_keycode_ := (C.guint)(keycode)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_get_label_with_keycode(display, _cgo_accelerator_key_, _cgo_keycode_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorName(accelerator_key uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_name(_cgo_accelerator_key_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorNameWithKeycode(display *C.GdkDisplay, accelerator_key uint, keycode uint, accelerator_mods C.GdkModifierType) (_go__return__ string) {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	_cgo_keycode_ := (C.guint)(keycode)
	var _return_ *C.gchar
	_return_ = C.gtk_accelerator_name_with_keycode(display, _cgo_accelerator_key_, _cgo_keycode_, accelerator_mods)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AcceleratorParse(accelerator string) (_go_accelerator_key_ uint, accelerator_mods *C.GdkModifierType) {
	var accelerator_key C.guint
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_accelerator_parse(_cgo_accelerator_, &accelerator_key, accelerator_mods)
	_go_accelerator_key_ = (uint)(accelerator_key)
	return
}

func AcceleratorParseWithKeycode(accelerator string) (_go_accelerator_key_ uint, accelerator_codes unsafe.Pointer, accelerator_mods *C.GdkModifierType) {
	var accelerator_key C.guint
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_accelerator_parse_with_keycode(_cgo_accelerator_, &accelerator_key, accelerator_codes, accelerator_mods)
	_go_accelerator_key_ = (uint)(accelerator_key)
	return
}

func AcceleratorSetDefaultModMask(default_mod_mask C.GdkModifierType) () {
	C.gtk_accelerator_set_default_mod_mask(default_mod_mask)
	return
}

func AcceleratorValid(keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_accelerator_valid(_cgo_keyval_, modifiers)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AlternativeDialogButtonOrder(screen *C.GdkScreen) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_alternative_dialog_button_order(screen)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func BindingEntryAddSignalFromString(binding_set *GtkBindingSet, signal_desc string) (_return_ C.GTokenType) {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cstring_signal_desc_ := C.CString(signal_desc)
	_cgo_signal_desc_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_desc_))
	defer C.free(unsafe.Pointer(_cstring_signal_desc_))
	_return_ = C._gtk_binding_entry_add_signal_from_string(_cgo_binding_set_, _cgo_signal_desc_)
	return
}

func BindingEntryAddSignall(binding_set *GtkBindingSet, keyval uint, modifiers C.GdkModifierType, signal_name string, binding_args *C.GSList) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	_cstring_signal_name_ := C.CString(signal_name)
	_cgo_signal_name_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_name_))
	defer C.free(unsafe.Pointer(_cstring_signal_name_))
	C._gtk_binding_entry_add_signall(_cgo_binding_set_, _cgo_keyval_, modifiers, _cgo_signal_name_, binding_args)
	return
}

func BindingEntryRemove(binding_set *GtkBindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_remove(_cgo_binding_set_, _cgo_keyval_, modifiers)
	return
}

func BindingEntrySkip(binding_set *GtkBindingSet, keyval uint, modifiers C.GdkModifierType) () {
	_cgo_binding_set_ := (*C.GtkBindingSet)(unsafe.Pointer(binding_set))
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_binding_entry_skip(_cgo_binding_set_, _cgo_keyval_, modifiers)
	return
}

func BindingSetByClass(object_class C.gpointer) (_go__return__ *GtkBindingSet) {
	var _return_ *C.GtkBindingSet
	_return_ = C.gtk_binding_set_by_class(object_class)
	_go__return__ = (*GtkBindingSet)(unsafe.Pointer(_return_))
	return
}

func BindingSetFind(set_name string) (_go__return__ *GtkBindingSet) {
	var _return_ *C.GtkBindingSet
	_cstring_set_name_ := C.CString(set_name)
	_cgo_set_name_ := (*C.gchar)(unsafe.Pointer(_cstring_set_name_))
	defer C.free(unsafe.Pointer(_cstring_set_name_))
	_return_ = C._gtk_binding_set_find(_cgo_set_name_)
	_go__return__ = (*GtkBindingSet)(unsafe.Pointer(_return_))
	return
}

func BindingSetNew(set_name string) (_go__return__ *GtkBindingSet) {
	var _return_ *C.GtkBindingSet
	_cstring_set_name_ := C.CString(set_name)
	_cgo_set_name_ := (*C.gchar)(unsafe.Pointer(_cstring_set_name_))
	defer C.free(unsafe.Pointer(_cstring_set_name_))
	_return_ = C._gtk_binding_set_new(_cgo_set_name_)
	_go__return__ = (*GtkBindingSet)(unsafe.Pointer(_return_))
	return
}

func BindingsActivate(object *C.GObject, keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_bindings_activate(object, _cgo_keyval_, modifiers)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func BindingsActivateEvent(object *C.GObject, event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_bindings_activate_event(object, event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func BuilderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_builder_error_quark()
	return
}

func CairoShouldDrawWindow(cr *C.cairo_t, window *C.GdkWindow) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cairo_should_draw_window(cr, window)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func CairoTransformToWindow(cr *C.cairo_t, widget GtkWidgetKind, window *C.GdkWindow) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_cairo_transform_to_window(cr, _cgo_widget_, window)
	return
}

func CheckVersion(required_major uint, required_minor uint, required_micro uint) (_go__return__ string) {
	_cgo_required_major_ := (C.guint)(required_major)
	_cgo_required_minor_ := (C.guint)(required_minor)
	_cgo_required_micro_ := (C.guint)(required_micro)
	var _return_ *C.gchar
	_return_ = C._gtk_check_version(_cgo_required_major_, _cgo_required_minor_, _cgo_required_micro_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func CssProviderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_css_provider_error_quark()
	return
}

func DeviceGrabAdd(widget GtkWidgetKind, device *C.GdkDevice, block_others bool) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_block_others_ := (C.gboolean)(C.FALSE)
	if block_others { _cgo_block_others_ = (C.gboolean)(C.TRUE) }
	C.gtk_device_grab_add(_cgo_widget_, device, _cgo_block_others_)
	return
}

func DeviceGrabRemove(widget GtkWidgetKind, device *C.GdkDevice) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_device_grab_remove(_cgo_widget_, device)
	return
}

func DisableSetlocale() () {
	C.gtk_disable_setlocale()
	return
}

func DistributeNaturalAllocation(extra_space int, n_requested_sizes uint, sizes *GtkRequestedSize) (_go__return__ int) {
	_cgo_sizes_ := (*C.GtkRequestedSize)(unsafe.Pointer(sizes))
	_cgo_extra_space_ := (C.gint)(extra_space)
	_cgo_n_requested_sizes_ := (C.guint)(n_requested_sizes)
	var _return_ C.gint
	_return_ = C.gtk_distribute_natural_allocation(_cgo_extra_space_, _cgo_n_requested_sizes_, _cgo_sizes_)
	_go__return__ = (int)(_return_)
	return
}

func DragFinish(context *C.GdkDragContext, success bool, del bool, time_ uint32) () {
	_cgo_time__ := (C.guint32)(time_)
	_cgo_success_ := (C.gboolean)(C.FALSE)
	if success { _cgo_success_ = (C.gboolean)(C.TRUE) }
	_cgo_del_ := (C.gboolean)(C.FALSE)
	if del { _cgo_del_ = (C.gboolean)(C.TRUE) }
	C.gtk_drag_finish(context, _cgo_success_, _cgo_del_, _cgo_time__)
	return
}

func DragGetSourceWidget(context *C.GdkDragContext) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_drag_get_source_widget(context)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func DragSetIconDefault(context *C.GdkDragContext) () {
	C.gtk_drag_set_icon_default(context)
	return
}

func DragSetIconGicon(context *C.GdkDragContext, icon *C.GIcon, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_gicon(context, icon, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconName(context *C.GdkDragContext, icon_name string, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_drag_set_icon_name(context, _cgo_icon_name_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconPixbuf(context *C.GdkDragContext, pixbuf *C.GdkPixbuf, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_pixbuf(context, pixbuf, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconStock(context *C.GdkDragContext, stock_id string, hot_x int, hot_y int) () {
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_drag_set_icon_stock(context, _cgo_stock_id_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func DragSetIconSurface(context *C.GdkDragContext, surface *C.cairo_surface_t) () {
	C.gtk_drag_set_icon_surface(context, surface)
	return
}

func DragSetIconWidget(context *C.GdkDragContext, widget GtkWidgetKind, hot_x int, hot_y int) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_hot_x_ := (C.gint)(hot_x)
	_cgo_hot_y_ := (C.gint)(hot_y)
	C.gtk_drag_set_icon_widget(context, _cgo_widget_, _cgo_hot_x_, _cgo_hot_y_)
	return
}

func EventsPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_events_pending()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func False() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_false()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func FileChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_file_chooser_error_quark()
	return
}

func GetBinaryAge() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_binary_age()
	_go__return__ = (uint)(_return_)
	return
}

func GetCurrentEvent() (_return_ *C.GdkEvent) {
	_return_ = C.gtk_get_current_event()
	return
}

func GetCurrentEventDevice() (_return_ *C.GdkDevice) {
	_return_ = C.gtk_get_current_event_device()
	return
}

func GetCurrentEventState() (_go__return__ bool, state *C.GdkModifierType) {
	var _return_ C.gboolean
	_return_ = C.gtk_get_current_event_state(state)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func GetCurrentEventTime() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.gtk_get_current_event_time()
	_go__return__ = (uint32)(_return_)
	return
}

func GetDebugFlags() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_debug_flags()
	_go__return__ = (uint)(_return_)
	return
}

func GetDefaultLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C.gtk_get_default_language()
	return
}

func GetEventWidget(event *C.GdkEvent) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_get_event_widget(event)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func GetInterfaceAge() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_interface_age()
	_go__return__ = (uint)(_return_)
	return
}

func GetMajorVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_major_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetMicroVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_micro_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetMinorVersion() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_get_minor_version()
	_go__return__ = (uint)(_return_)
	return
}

func GetOptionGroup(open_default_display bool) (_return_ *C.GOptionGroup) {
	_cgo_open_default_display_ := (C.gboolean)(C.FALSE)
	if open_default_display { _cgo_open_default_display_ = (C.gboolean)(C.TRUE) }
	_return_ = C.gtk_get_option_group(_cgo_open_default_display_)
	return
}

func GrabGetCurrent() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_grab_get_current()
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func IconSizeFromName(name string) (_return_ C.GtkIconSize) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_icon_size_from_name(_cgo_name_)
	return
}

func IconSizeGetName(size C.GtkIconSize) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_size_get_name(size)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func IconSizeLookup(size C.GtkIconSize) (_go__return__ bool, _go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_icon_size_lookup(size, &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IconSizeLookupForSettings(settings GtkSettingsKind, size C.GtkIconSize) (_go__return__ bool, _go_width_ int, _go_height_ int) {
	_cgo_settings_ := (*C.GtkSettings)(settings._getValue())
	var width C.gint
	var height C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_icon_size_lookup_for_settings(_cgo_settings_, size, &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IconSizeRegister(name string, width int, height int) (_return_ C.GtkIconSize) {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_icon_size_register(_cgo_name_, _cgo_width_, _cgo_height_)
	return
}

func IconSizeRegisterAlias(alias string, target C.GtkIconSize) () {
	_cstring_alias_ := C.CString(alias)
	_cgo_alias_ := (*C.gchar)(unsafe.Pointer(_cstring_alias_))
	defer C.free(unsafe.Pointer(_cstring_alias_))
	C._gtk_icon_size_register_alias(_cgo_alias_, target)
	return
}

func IconThemeErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_icon_theme_error_quark()
	return
}

func Main() () {
	C.gtk_main()
	return
}

func MainDoEvent(event *C.GdkEvent) () {
	C.gtk_main_do_event(event)
	return
}

func MainIteration() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_main_iteration()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func MainIterationDo(blocking bool) (_go__return__ bool) {
	_cgo_blocking_ := (C.gboolean)(C.FALSE)
	if blocking { _cgo_blocking_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_main_iteration_do(_cgo_blocking_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func MainLevel() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_main_level()
	_go__return__ = (uint)(_return_)
	return
}

func MainQuit() () {
	C.gtk_main_quit()
	return
}

func PaperSizeGetDefault() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_default()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func PaperSizeGetPaperSizes(include_custom bool) (_return_ *C.GList) {
	_cgo_include_custom_ := (C.gboolean)(C.FALSE)
	if include_custom { _cgo_include_custom_ = (C.gboolean)(C.TRUE) }
	_return_ = C.gtk_paper_size_get_paper_sizes(_cgo_include_custom_)
	return
}

func PrintErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_print_error_quark()
	return
}

func PrintRunPageSetupDialog(parent GtkWindowKind, page_setup GtkPageSetupKind, settings GtkPrintSettingsKind) (_go__return__ GtkPageSetup) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	_cgo_page_setup_ := (*C.GtkPageSetup)(page_setup._getValue())
	_cgo_settings_ := (*C.GtkPrintSettings)(settings._getValue())
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_run_page_setup_dialog(_cgo_parent_, _cgo_page_setup_, _cgo_settings_)
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func PrintRunPageSetupDialogAsync(parent GtkWindowKind, page_setup GtkPageSetupKind, settings GtkPrintSettingsKind, done_cb C.GtkPageSetupDoneFunc, data C.gpointer) () {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	_cgo_page_setup_ := (*C.GtkPageSetup)(page_setup._getValue())
	_cgo_settings_ := (*C.GtkPrintSettings)(settings._getValue())
	C.gtk_print_run_page_setup_dialog_async(_cgo_parent_, _cgo_page_setup_, _cgo_settings_, done_cb, data)
	return
}

func PropagateEvent(widget GtkWidgetKind, event *C.GdkEvent) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_propagate_event(_cgo_widget_, event)
	return
}

func RcPropertyParseBorder(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_border(pspec, gstring, property_value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RcPropertyParseColor(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_color(pspec, gstring, property_value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RcPropertyParseEnum(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_enum(pspec, gstring, property_value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RcPropertyParseFlags(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_flags(pspec, gstring, property_value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RcPropertyParseRequisition(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_rc_property_parse_requisition(pspec, gstring, property_value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RecentChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_chooser_error_quark()
	return
}

func RecentManagerErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_manager_error_quark()
	return
}

func RenderActivity(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_activity(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderArrow(context GtkStyleContextKind, cr *C.cairo_t, angle float64, x float64, y float64, size float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_angle_ := (C.gdouble)(angle)
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_size_ := (C.gdouble)(size)
	C.gtk_render_arrow(_cgo_context_, cr, _cgo_angle_, _cgo_x_, _cgo_y_, _cgo_size_)
	return
}

func RenderBackground(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_background(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderCheck(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_check(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderExpander(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_expander(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderExtension(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_extension(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, gap_side)
	return
}

func RenderFocus(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_focus(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderFrame(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_frame(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderFrameGap(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64, gap_side C.GtkPositionType, xy0_gap float64, xy1_gap float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cgo_xy0_gap_ := (C.gdouble)(xy0_gap)
	_cgo_xy1_gap_ := (C.gdouble)(xy1_gap)
	C.gtk_render_frame_gap(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, gap_side, _cgo_xy0_gap_, _cgo_xy1_gap_)
	return
}

func RenderHandle(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_handle(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderIcon(context GtkStyleContextKind, cr *C.cairo_t, pixbuf *C.GdkPixbuf, x float64, y float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_icon(_cgo_context_, cr, pixbuf, _cgo_x_, _cgo_y_)
	return
}

func RenderIconPixbuf(context GtkStyleContextKind, source *GtkIconSource, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_source_ := (*C.GtkIconSource)(unsafe.Pointer(source))
	_return_ = C._gtk_render_icon_pixbuf(_cgo_context_, _cgo_source_, size)
	return
}

func RenderInsertionCursor(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout, index C.int, direction C.PangoDirection) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_insertion_cursor(_cgo_context_, cr, _cgo_x_, _cgo_y_, layout, index, direction)
	return
}

func RenderLayout(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, layout *C.PangoLayout) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	C.gtk_render_layout(_cgo_context_, cr, _cgo_x_, _cgo_y_, layout)
	return
}

func RenderLine(context GtkStyleContextKind, cr *C.cairo_t, x0 float64, y0 float64, x1 float64, y1 float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	C.gtk_render_line(_cgo_context_, cr, _cgo_x0_, _cgo_y0_, _cgo_x1_, _cgo_y1_)
	return
}

func RenderOption(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_option(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func RenderSlider(context GtkStyleContextKind, cr *C.cairo_t, x float64, y float64, width float64, height float64, orientation C.GtkOrientation) () {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_cgo_x_ := (C.gdouble)(x)
	_cgo_y_ := (C.gdouble)(y)
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_render_slider(_cgo_context_, cr, _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_, orientation)
	return
}

func RgbToHsv(r float64, g float64, b float64) (_go_h_ float64, _go_s_ float64, _go_v_ float64) {
	_cgo_r_ := (C.gdouble)(r)
	_cgo_g_ := (C.gdouble)(g)
	_cgo_b_ := (C.gdouble)(b)
	var h C.gdouble
	var s C.gdouble
	var v C.gdouble
	C.gtk_rgb_to_hsv(_cgo_r_, _cgo_g_, _cgo_b_, &h, &s, &v)
	_go_h_ = (float64)(h)
	_go_s_ = (float64)(s)
	_go_v_ = (float64)(v)
	return
}

func SelectionAddTarget(widget GtkWidgetKind, selection C.GdkAtom, target C.GdkAtom, info uint) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_info_ := (C.guint)(info)
	C.gtk_selection_add_target(_cgo_widget_, selection, target, _cgo_info_)
	return
}

func SelectionClearTargets(widget GtkWidgetKind, selection C.GdkAtom) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_selection_clear_targets(_cgo_widget_, selection)
	return
}

func SelectionConvert(widget GtkWidgetKind, selection C.GdkAtom, target C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_convert(_cgo_widget_, selection, target, _cgo_time__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SelectionOwnerSet(widget GtkWidgetKind, selection C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_owner_set(_cgo_widget_, selection, _cgo_time__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SelectionOwnerSetForDisplay(display *C.GdkDisplay, widget GtkWidgetKind, selection C.GdkAtom, time_ uint32) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_time__ := (C.guint32)(time_)
	var _return_ C.gboolean
	_return_ = C.gtk_selection_owner_set_for_display(display, _cgo_widget_, selection, _cgo_time__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SelectionRemoveAll(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_selection_remove_all(_cgo_widget_)
	return
}

func SetDebugFlags(flags uint) () {
	_cgo_flags_ := (C.guint)(flags)
	C.gtk_set_debug_flags(_cgo_flags_)
	return
}

func ShowUri(screen *C.GdkScreen, uri string, timestamp uint32) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_timestamp_ := (C.guint32)(timestamp)
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_show_uri(screen, _cgo_uri_, _cgo_timestamp_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StockListIds() (_return_ *C.GSList) {
	_return_ = C.gtk_stock_list_ids()
	return
}

func StockLookup(stock_id string) (_go__return__ bool, item *GtkStockItem) {
	var _allocated_item_ C.GtkStockItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	var _return_ C.gboolean
	_return_ = C._gtk_stock_lookup(_cgo_stock_id_, &_allocated_item_)
	item = (*GtkStockItem)(unsafe.Pointer(&_allocated_item_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StockSetTranslateFunc(domain string, func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_stock_set_translate_func(_cgo_domain_, func_, data, notify)
	return
}

func TargetTableNewFromList(list *GtkTargetList) (_return_ *C.GtkTargetEntry, _go_n_targets_ int) {
	_cgo_list_ := (*C.GtkTargetList)(unsafe.Pointer(list))
	var n_targets C.gint
	_return_ = C.gtk_target_table_new_from_list(_cgo_list_, &n_targets)
	_go_n_targets_ = (int)(n_targets)
	return
}

func TestCreateSimpleWindow(window_title string, dialog_text string) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cstring_window_title_ := C.CString(window_title)
	_cgo_window_title_ := (*C.gchar)(unsafe.Pointer(_cstring_window_title_))
	defer C.free(unsafe.Pointer(_cstring_window_title_))
	_cstring_dialog_text_ := C.CString(dialog_text)
	_cgo_dialog_text_ := (*C.gchar)(unsafe.Pointer(_cstring_dialog_text_))
	defer C.free(unsafe.Pointer(_cstring_dialog_text_))
	_return_ = C._gtk_test_create_simple_window(_cgo_window_title_, _cgo_dialog_text_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func TestFindLabel(widget GtkWidgetKind, label_pattern string) (_go__return__ GtkWidget) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_pattern_ := C.CString(label_pattern)
	_cgo_label_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_label_pattern_))
	defer C.free(unsafe.Pointer(_cstring_label_pattern_))
	_return_ = C._gtk_test_find_label(_cgo_widget_, _cgo_label_pattern_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func TestFindSibling(base_widget GtkWidgetKind, widget_type C.GType) (_go__return__ GtkWidget) {
	_cgo_base_widget_ := (*C.GtkWidget)(base_widget._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_test_find_sibling(_cgo_base_widget_, widget_type)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func TestFindWidget(widget GtkWidgetKind, label_pattern string, widget_type C.GType) (_go__return__ GtkWidget) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_pattern_ := C.CString(label_pattern)
	_cgo_label_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_label_pattern_))
	defer C.free(unsafe.Pointer(_cstring_label_pattern_))
	_return_ = C._gtk_test_find_widget(_cgo_widget_, _cgo_label_pattern_, widget_type)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func TestListAllTypes() (_return_ *C.GType, _go_n_types_ uint) {
	var n_types C.guint
	_return_ = C._gtk_test_list_all_types(&n_types)
	_go_n_types_ = (uint)(n_types)
	return
}

func TestRegisterAllTypes() () {
	C.gtk_test_register_all_types()
	return
}

func TestSliderGetValue(widget GtkWidgetKind) (_return_ C.double) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_return_ = C.gtk_test_slider_get_value(_cgo_widget_)
	return
}

func TestSliderSetPerc(widget GtkWidgetKind, percentage C.double) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_test_slider_set_perc(_cgo_widget_, percentage)
	return
}

func TestSpinButtonClick(spinner GtkSpinButtonKind, button uint, upwards bool) (_go__return__ bool) {
	_cgo_spinner_ := (*C.GtkSpinButton)(spinner._getValue())
	_cgo_button_ := (C.guint)(button)
	_cgo_upwards_ := (C.gboolean)(C.FALSE)
	if upwards { _cgo_upwards_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_test_spin_button_click(_cgo_spinner_, _cgo_button_, _cgo_upwards_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TestTextGet(widget GtkWidgetKind) (_go__return__ string) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ *C.gchar
	_return_ = C.gtk_test_text_get(_cgo_widget_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TestTextSet(widget GtkWidgetKind, string_ string) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	C._gtk_test_text_set(_cgo_widget_, _cgo_string__)
	return
}

func TestWidgetClick(widget GtkWidgetKind, button uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_button_ := (C.guint)(button)
	var _return_ C.gboolean
	_return_ = C.gtk_test_widget_click(_cgo_widget_, _cgo_button_, modifiers)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TestWidgetSendKey(widget GtkWidgetKind, keyval uint, modifiers C.GdkModifierType) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_test_widget_send_key(_cgo_widget_, _cgo_keyval_, modifiers)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TreeGetRowDragData(selection_data *GtkSelectionData) (_go__return__ bool, tree_model unsafe.Pointer, path *GtkTreePath) {
	_cgo_selection_data_ := (*C.GtkSelectionData)(unsafe.Pointer(selection_data))
	var _allocated_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_tree_get_row_drag_data(_cgo_selection_data_, tree_model, unsafe.Pointer(&_allocated_path_))
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TreeRowReferenceDeleted(proxy *C.GObject, path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_row_reference_deleted(proxy, _cgo_path_)
	return
}

func TreeRowReferenceInserted(proxy *C.GObject, path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_row_reference_inserted(proxy, _cgo_path_)
	return
}

func TreeRowReferenceReordered(proxy *C.GObject, path *GtkTreePath, iter *GtkTreeIter, new_order *C.gint) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_row_reference_reordered(proxy, _cgo_path_, _cgo_iter_, new_order)
	return
}

func TreeSetRowDragData(selection_data *GtkSelectionData, tree_model *C.GtkTreeModel, path *GtkTreePath) (_go__return__ bool) {
	_cgo_selection_data_ := (*C.GtkSelectionData)(unsafe.Pointer(selection_data))
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_set_row_drag_data(_cgo_selection_data_, tree_model, _cgo_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func True() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_true()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AboutDialogNew() (_go__return__ GtkAboutDialog) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_about_dialog_new()
	_go__return__ = ToGtkAboutDialog(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAboutDialog) AddCreditSection(section_name string, people string) () {
	_cstring_section_name_ := C.CString(section_name)
	_cgo_section_name_ := (*C.gchar)(unsafe.Pointer(_cstring_section_name_))
	defer C.free(unsafe.Pointer(_cstring_section_name_))
	_cstring_people_ := C.CString(people)
	_cgo_people_ := (unsafe.Pointer)(unsafe.Pointer(_cstring_people_))
	defer C.free(unsafe.Pointer(_cstring_people_))
	C._gtk_about_dialog_add_credit_section((*C.GtkAboutDialog)(_self_._value_), _cgo_section_name_, _cgo_people_)
	return
}

func (_self_ *GtkAboutDialog) GetArtists() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_artists((*C.GtkAboutDialog)(_self_._value_))
	return
}

func (_self_ *GtkAboutDialog) GetAuthors() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_authors((*C.GtkAboutDialog)(_self_._value_))
	return
}

func (_self_ *GtkAboutDialog) GetComments() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_comments((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetCopyright() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_copyright((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetDocumenters() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_documenters((*C.GtkAboutDialog)(_self_._value_))
	return
}

func (_self_ *GtkAboutDialog) GetLicense() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_license((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetLicenseType() (_return_ C.GtkLicense) {
	_return_ = C.gtk_about_dialog_get_license_type((*C.GtkAboutDialog)(_self_._value_))
	return
}

func (_self_ *GtkAboutDialog) GetLogo() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_about_dialog_get_logo((*C.GtkAboutDialog)(_self_._value_))
	return
}

func (_self_ *GtkAboutDialog) GetLogoIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_logo_icon_name((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetProgramName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_program_name((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetTranslatorCredits() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_translator_credits((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_version((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetWebsite() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_website((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetWebsiteLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_about_dialog_get_website_label((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAboutDialog) GetWrapLicense() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_about_dialog_get_wrap_license((*C.GtkAboutDialog)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAboutDialog) SetComments(comments string) () {
	_cstring_comments_ := C.CString(comments)
	_cgo_comments_ := (*C.gchar)(unsafe.Pointer(_cstring_comments_))
	defer C.free(unsafe.Pointer(_cstring_comments_))
	C._gtk_about_dialog_set_comments((*C.GtkAboutDialog)(_self_._value_), _cgo_comments_)
	return
}

func (_self_ *GtkAboutDialog) SetCopyright(copyright string) () {
	_cstring_copyright_ := C.CString(copyright)
	_cgo_copyright_ := (*C.gchar)(unsafe.Pointer(_cstring_copyright_))
	defer C.free(unsafe.Pointer(_cstring_copyright_))
	C._gtk_about_dialog_set_copyright((*C.GtkAboutDialog)(_self_._value_), _cgo_copyright_)
	return
}

func (_self_ *GtkAboutDialog) SetLicense(license string) () {
	_cstring_license_ := C.CString(license)
	_cgo_license_ := (*C.gchar)(unsafe.Pointer(_cstring_license_))
	defer C.free(unsafe.Pointer(_cstring_license_))
	C._gtk_about_dialog_set_license((*C.GtkAboutDialog)(_self_._value_), _cgo_license_)
	return
}

func (_self_ *GtkAboutDialog) SetLicenseType(license_type C.GtkLicense) () {
	C.gtk_about_dialog_set_license_type((*C.GtkAboutDialog)(_self_._value_), license_type)
	return
}

func (_self_ *GtkAboutDialog) SetLogo(logo *C.GdkPixbuf) () {
	C.gtk_about_dialog_set_logo((*C.GtkAboutDialog)(_self_._value_), logo)
	return
}

func (_self_ *GtkAboutDialog) SetLogoIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_about_dialog_set_logo_icon_name((*C.GtkAboutDialog)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkAboutDialog) SetProgramName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_about_dialog_set_program_name((*C.GtkAboutDialog)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkAboutDialog) SetTranslatorCredits(translator_credits string) () {
	_cstring_translator_credits_ := C.CString(translator_credits)
	_cgo_translator_credits_ := (*C.gchar)(unsafe.Pointer(_cstring_translator_credits_))
	defer C.free(unsafe.Pointer(_cstring_translator_credits_))
	C._gtk_about_dialog_set_translator_credits((*C.GtkAboutDialog)(_self_._value_), _cgo_translator_credits_)
	return
}

func (_self_ *GtkAboutDialog) SetVersion(version string) () {
	_cstring_version_ := C.CString(version)
	_cgo_version_ := (*C.gchar)(unsafe.Pointer(_cstring_version_))
	defer C.free(unsafe.Pointer(_cstring_version_))
	C._gtk_about_dialog_set_version((*C.GtkAboutDialog)(_self_._value_), _cgo_version_)
	return
}

func (_self_ *GtkAboutDialog) SetWebsite(website string) () {
	_cstring_website_ := C.CString(website)
	_cgo_website_ := (*C.gchar)(unsafe.Pointer(_cstring_website_))
	defer C.free(unsafe.Pointer(_cstring_website_))
	C._gtk_about_dialog_set_website((*C.GtkAboutDialog)(_self_._value_), _cgo_website_)
	return
}

func (_self_ *GtkAboutDialog) SetWebsiteLabel(website_label string) () {
	_cstring_website_label_ := C.CString(website_label)
	_cgo_website_label_ := (*C.gchar)(unsafe.Pointer(_cstring_website_label_))
	defer C.free(unsafe.Pointer(_cstring_website_label_))
	C._gtk_about_dialog_set_website_label((*C.GtkAboutDialog)(_self_._value_), _cgo_website_label_)
	return
}

func (_self_ *GtkAboutDialog) SetWrapLicense(wrap_license bool) () {
	_cgo_wrap_license_ := (C.gboolean)(C.FALSE)
	if wrap_license { _cgo_wrap_license_ = (C.gboolean)(C.TRUE) }
	C.gtk_about_dialog_set_wrap_license((*C.GtkAboutDialog)(_self_._value_), _cgo_wrap_license_)
	return
}

func AccelGroupNew() (_go__return__ GtkAccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_accel_group_new()
	_go__return__ = ToGtkAccelGroup(unsafe.Pointer(_return_))
	return
}

func AccelGroupFromAccelClosure(closure *C.GClosure) (_go__return__ GtkAccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_accel_group_from_accel_closure(closure)
	_go__return__ = ToGtkAccelGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAccelGroup) Activate(accel_quark C.GQuark, acceleratable *C.GObject, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_activate((*C.GtkAccelGroup)(_self_._value_), accel_quark, acceleratable, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAccelGroup) Connect(accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags, closure *C.GClosure) () {
	_cgo_accel_key_ := (C.guint)(accel_key)
	C.gtk_accel_group_connect((*C.GtkAccelGroup)(_self_._value_), _cgo_accel_key_, accel_mods, accel_flags, closure)
	return
}

func (_self_ *GtkAccelGroup) ConnectByPath(accel_path string, closure *C.GClosure) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_group_connect_by_path((*C.GtkAccelGroup)(_self_._value_), _cgo_accel_path_, closure)
	return
}

func (_self_ *GtkAccelGroup) Disconnect(closure *C.GClosure) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_disconnect((*C.GtkAccelGroup)(_self_._value_), closure)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAccelGroup) DisconnectKey(accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_disconnect_key((*C.GtkAccelGroup)(_self_._value_), _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAccelGroup) Find(find_func C.GtkAccelGroupFindFunc, data C.gpointer) (_go__return__ *GtkAccelKey) {
	var _return_ *C.GtkAccelKey
	_return_ = C.gtk_accel_group_find((*C.GtkAccelGroup)(_self_._value_), find_func, data)
	_go__return__ = (*GtkAccelKey)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAccelGroup) GetIsLocked() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_group_get_is_locked((*C.GtkAccelGroup)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAccelGroup) GetModifierMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accel_group_get_modifier_mask((*C.GtkAccelGroup)(_self_._value_))
	return
}

func (_self_ *GtkAccelGroup) Lock() () {
	C.gtk_accel_group_lock((*C.GtkAccelGroup)(_self_._value_))
	return
}

func (_self_ *GtkAccelGroup) Query(accel_key uint, accel_mods C.GdkModifierType) (_return_ *C.GtkAccelGroupEntry, _go_n_entries_ uint) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	var n_entries C.guint
	_return_ = C.gtk_accel_group_query((*C.GtkAccelGroup)(_self_._value_), _cgo_accel_key_, accel_mods, &n_entries)
	_go_n_entries_ = (uint)(n_entries)
	return
}

func (_self_ *GtkAccelGroup) Unlock() () {
	C.gtk_accel_group_unlock((*C.GtkAccelGroup)(_self_._value_))
	return
}

func AccelLabelNew(string_ string) (_go__return__ GtkAccelLabel) {
	var _return_ *C.GtkWidget
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	_return_ = C._gtk_accel_label_new(_cgo_string__)
	_go__return__ = ToGtkAccelLabel(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAccelLabel) GetAccelWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_accel_label_get_accel_widget((*C.GtkAccelLabel)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAccelLabel) GetAccelWidth() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_accel_label_get_accel_width((*C.GtkAccelLabel)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkAccelLabel) Refetch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_accel_label_refetch((*C.GtkAccelLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAccelLabel) SetAccel(accelerator_key uint, accelerator_mods C.GdkModifierType) () {
	_cgo_accelerator_key_ := (C.guint)(accelerator_key)
	C.gtk_accel_label_set_accel((*C.GtkAccelLabel)(_self_._value_), _cgo_accelerator_key_, accelerator_mods)
	return
}

func (_self_ *GtkAccelLabel) SetAccelClosure(accel_closure *C.GClosure) () {
	C.gtk_accel_label_set_accel_closure((*C.GtkAccelLabel)(_self_._value_), accel_closure)
	return
}

func (_self_ *GtkAccelLabel) SetAccelWidget(accel_widget GtkWidgetKind) () {
	_cgo_accel_widget_ := (*C.GtkWidget)(accel_widget._getValue())
	C.gtk_accel_label_set_accel_widget((*C.GtkAccelLabel)(_self_._value_), _cgo_accel_widget_)
	return
}

func AccelMapAddEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType) () {
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_add_entry(_cgo_accel_path_, _cgo_accel_key_, accel_mods)
	return
}

func AccelMapAddFilter(filter_pattern string) () {
	_cstring_filter_pattern_ := C.CString(filter_pattern)
	_cgo_filter_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_filter_pattern_))
	defer C.free(unsafe.Pointer(_cstring_filter_pattern_))
	C._gtk_accel_map_add_filter(_cgo_filter_pattern_)
	return
}

func AccelMapChangeEntry(accel_path string, accel_key uint, accel_mods C.GdkModifierType, replace bool) (_go__return__ bool) {
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	_cgo_replace_ := (C.gboolean)(C.FALSE)
	if replace { _cgo_replace_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_accel_map_change_entry(_cgo_accel_path_, _cgo_accel_key_, accel_mods, _cgo_replace_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AccelMapForeach(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach(data, foreach_func)
	return
}

func AccelMapForeachUnfiltered(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach_unfiltered(data, foreach_func)
	return
}

func AccelMapGet() (_go__return__ GtkAccelMap) {
	var _return_ *C.GtkAccelMap
	_return_ = C.gtk_accel_map_get()
	_go__return__ = ToGtkAccelMap(unsafe.Pointer(_return_))
	return
}

func AccelMapLoad(file_name string) () {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	C._gtk_accel_map_load(_cgo_file_name_)
	return
}

func AccelMapLoadFd(fd int) () {
	_cgo_fd_ := (C.gint)(fd)
	C.gtk_accel_map_load_fd(_cgo_fd_)
	return
}

func AccelMapLoadScanner(scanner *C.GScanner) () {
	C.gtk_accel_map_load_scanner(scanner)
	return
}

func AccelMapLockPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_lock_path(_cgo_accel_path_)
	return
}

func AccelMapLookupEntry(accel_path string) (_go__return__ bool, key *GtkAccelKey) {
	var _allocated_key_ C.GtkAccelKey
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_accel_map_lookup_entry(_cgo_accel_path_, &_allocated_key_)
	key = (*GtkAccelKey)(unsafe.Pointer(&_allocated_key_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AccelMapSave(file_name string) () {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	C._gtk_accel_map_save(_cgo_file_name_)
	return
}

func AccelMapSaveFd(fd int) () {
	_cgo_fd_ := (C.gint)(fd)
	C.gtk_accel_map_save_fd(_cgo_fd_)
	return
}

func AccelMapUnlockPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_accel_map_unlock_path(_cgo_accel_path_)
	return
}

func (_self_ *GtkAccessible) GetWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_accessible_get_widget((*C.GtkAccessible)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAccessible) SetWidget(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_accessible_set_widget((*C.GtkAccessible)(_self_._value_), _cgo_widget_)
	return
}

func ActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ GtkAction) {
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = ToGtkAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAction) Activate() () {
	C.gtk_action_activate((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) BlockActivate() () {
	C.gtk_action_block_activate((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) ConnectAccelerator() () {
	C.gtk_action_connect_accelerator((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) CreateIcon(icon_size C.GtkIconSize) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_icon((*C.GtkAction)(_self_._value_), icon_size)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAction) CreateMenu() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_menu((*C.GtkAction)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAction) CreateMenuItem() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_menu_item((*C.GtkAction)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAction) CreateToolItem() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_action_create_tool_item((*C.GtkAction)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAction) DisconnectAccelerator() () {
	C.gtk_action_disconnect_accelerator((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) GetAccelClosure() (_return_ *C.GClosure) {
	_return_ = C.gtk_action_get_accel_closure((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_accel_path((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_always_show_image((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_action_get_gicon((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_icon_name((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetIsImportant() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_is_important((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_label((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_name((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetProxies() (_return_ *C.GSList) {
	_return_ = C.gtk_action_get_proxies((*C.GtkAction)(_self_._value_))
	return
}

func (_self_ *GtkAction) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_sensitive((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) GetShortLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_short_label((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetStockId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_stock_id((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetTooltip() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_get_tooltip((*C.GtkAction)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAction) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) GetVisibleHorizontal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible_horizontal((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) GetVisibleVertical() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_get_visible_vertical((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) IsSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_is_sensitive((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) IsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_is_visible((*C.GtkAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAction) SetAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_action_set_accel_group((*C.GtkAction)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkAction) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_action_set_accel_path((*C.GtkAction)(_self_._value_), _cgo_accel_path_)
	return
}

func (_self_ *GtkAction) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := (C.gboolean)(C.FALSE)
	if always_show { _cgo_always_show_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_always_show_image((*C.GtkAction)(_self_._value_), _cgo_always_show_)
	return
}

func (_self_ *GtkAction) SetGicon(icon *C.GIcon) () {
	C.gtk_action_set_gicon((*C.GtkAction)(_self_._value_), icon)
	return
}

func (_self_ *GtkAction) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_action_set_icon_name((*C.GtkAction)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkAction) SetIsImportant(is_important bool) () {
	_cgo_is_important_ := (C.gboolean)(C.FALSE)
	if is_important { _cgo_is_important_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_is_important((*C.GtkAction)(_self_._value_), _cgo_is_important_)
	return
}

func (_self_ *GtkAction) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_action_set_label((*C.GtkAction)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkAction) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := (C.gboolean)(C.FALSE)
	if sensitive { _cgo_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_sensitive((*C.GtkAction)(_self_._value_), _cgo_sensitive_)
	return
}

func (_self_ *GtkAction) SetShortLabel(short_label string) () {
	_cstring_short_label_ := C.CString(short_label)
	_cgo_short_label_ := (*C.gchar)(unsafe.Pointer(_cstring_short_label_))
	defer C.free(unsafe.Pointer(_cstring_short_label_))
	C._gtk_action_set_short_label((*C.GtkAction)(_self_._value_), _cgo_short_label_)
	return
}

func (_self_ *GtkAction) SetStockId(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_action_set_stock_id((*C.GtkAction)(_self_._value_), _cgo_stock_id_)
	return
}

func (_self_ *GtkAction) SetTooltip(tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_action_set_tooltip((*C.GtkAction)(_self_._value_), _cgo_tooltip_)
	return
}

func (_self_ *GtkAction) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_visible((*C.GtkAction)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkAction) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_visible_horizontal_ := (C.gboolean)(C.FALSE)
	if visible_horizontal { _cgo_visible_horizontal_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_visible_horizontal((*C.GtkAction)(_self_._value_), _cgo_visible_horizontal_)
	return
}

func (_self_ *GtkAction) SetVisibleVertical(visible_vertical bool) () {
	_cgo_visible_vertical_ := (C.gboolean)(C.FALSE)
	if visible_vertical { _cgo_visible_vertical_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_set_visible_vertical((*C.GtkAction)(_self_._value_), _cgo_visible_vertical_)
	return
}

func (_self_ *GtkAction) UnblockActivate() () {
	C.gtk_action_unblock_activate((*C.GtkAction)(_self_._value_))
	return
}

func ActionGroupNew(name string) (_go__return__ GtkActionGroup) {
	var _return_ *C.GtkActionGroup
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_action_group_new(_cgo_name_)
	_go__return__ = ToGtkActionGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkActionGroup) AddAction(action GtkActionKind) () {
	_cgo_action_ := (*C.GtkAction)(action._getValue())
	C.gtk_action_group_add_action((*C.GtkActionGroup)(_self_._value_), _cgo_action_)
	return
}

func (_self_ *GtkActionGroup) AddActionWithAccel(action GtkActionKind, accelerator string) () {
	_cgo_action_ := (*C.GtkAction)(action._getValue())
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	C._gtk_action_group_add_action_with_accel((*C.GtkActionGroup)(_self_._value_), _cgo_action_, _cgo_accelerator_)
	return
}

func (_self_ *GtkActionGroup) GetAccelGroup() (_go__return__ GtkAccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_action_group_get_accel_group((*C.GtkActionGroup)(_self_._value_))
	_go__return__ = ToGtkAccelGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkActionGroup) GetAction(action_name string) (_go__return__ GtkAction) {
	var _return_ *C.GtkAction
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	_return_ = C._gtk_action_group_get_action((*C.GtkActionGroup)(_self_._value_), _cgo_action_name_)
	_go__return__ = ToGtkAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkActionGroup) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_action_group_get_name((*C.GtkActionGroup)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkActionGroup) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_group_get_sensitive((*C.GtkActionGroup)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkActionGroup) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_action_group_get_visible((*C.GtkActionGroup)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkActionGroup) ListActions() (_return_ *C.GList) {
	_return_ = C.gtk_action_group_list_actions((*C.GtkActionGroup)(_self_._value_))
	return
}

func (_self_ *GtkActionGroup) RemoveAction(action GtkActionKind) () {
	_cgo_action_ := (*C.GtkAction)(action._getValue())
	C.gtk_action_group_remove_action((*C.GtkActionGroup)(_self_._value_), _cgo_action_)
	return
}

func (_self_ *GtkActionGroup) SetAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_action_group_set_accel_group((*C.GtkActionGroup)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkActionGroup) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := (C.gboolean)(C.FALSE)
	if sensitive { _cgo_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_group_set_sensitive((*C.GtkActionGroup)(_self_._value_), _cgo_sensitive_)
	return
}

func (_self_ *GtkActionGroup) SetTranslateFunc(func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_action_group_set_translate_func((*C.GtkActionGroup)(_self_._value_), func_, data, notify)
	return
}

func (_self_ *GtkActionGroup) SetTranslationDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_action_group_set_translation_domain((*C.GtkActionGroup)(_self_._value_), _cgo_domain_)
	return
}

func (_self_ *GtkActionGroup) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_action_group_set_visible((*C.GtkActionGroup)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkActionGroup) TranslateString(string_ string) (_go__return__ string) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ *C.gchar
	_return_ = C._gtk_action_group_translate_string((*C.GtkActionGroup)(_self_._value_), _cgo_string__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func AdjustmentNew(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_cgo_value_ := (C.gdouble)(value)
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	_cgo_page_size_ := (C.gdouble)(page_size)
	_return_ = C.gtk_adjustment_new(_cgo_value_, _cgo_lower_, _cgo_upper_, _cgo_step_increment_, _cgo_page_increment_, _cgo_page_size_)
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAdjustment) Changed() () {
	C.gtk_adjustment_changed((*C.GtkAdjustment)(_self_._value_))
	return
}

func (_self_ *GtkAdjustment) ClampPage(lower float64, upper float64) () {
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	C.gtk_adjustment_clamp_page((*C.GtkAdjustment)(_self_._value_), _cgo_lower_, _cgo_upper_)
	return
}

func (_self_ *GtkAdjustment) Configure(value float64, lower float64, upper float64, step_increment float64, page_increment float64, page_size float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cgo_lower_ := (C.gdouble)(lower)
	_cgo_upper_ := (C.gdouble)(upper)
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	_cgo_page_size_ := (C.gdouble)(page_size)
	C.gtk_adjustment_configure((*C.GtkAdjustment)(_self_._value_), _cgo_value_, _cgo_lower_, _cgo_upper_, _cgo_step_increment_, _cgo_page_increment_, _cgo_page_size_)
	return
}

func (_self_ *GtkAdjustment) GetLower() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_lower((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetMinimumIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_minimum_increment((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetPageIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_page_increment((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetPageSize() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_page_size((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetStepIncrement() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_step_increment((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetUpper() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_upper((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_adjustment_get_value((*C.GtkAdjustment)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkAdjustment) SetLower(lower float64) () {
	_cgo_lower_ := (C.gdouble)(lower)
	C.gtk_adjustment_set_lower((*C.GtkAdjustment)(_self_._value_), _cgo_lower_)
	return
}

func (_self_ *GtkAdjustment) SetPageIncrement(page_increment float64) () {
	_cgo_page_increment_ := (C.gdouble)(page_increment)
	C.gtk_adjustment_set_page_increment((*C.GtkAdjustment)(_self_._value_), _cgo_page_increment_)
	return
}

func (_self_ *GtkAdjustment) SetPageSize(page_size float64) () {
	_cgo_page_size_ := (C.gdouble)(page_size)
	C.gtk_adjustment_set_page_size((*C.GtkAdjustment)(_self_._value_), _cgo_page_size_)
	return
}

func (_self_ *GtkAdjustment) SetStepIncrement(step_increment float64) () {
	_cgo_step_increment_ := (C.gdouble)(step_increment)
	C.gtk_adjustment_set_step_increment((*C.GtkAdjustment)(_self_._value_), _cgo_step_increment_)
	return
}

func (_self_ *GtkAdjustment) SetUpper(upper float64) () {
	_cgo_upper_ := (C.gdouble)(upper)
	C.gtk_adjustment_set_upper((*C.GtkAdjustment)(_self_._value_), _cgo_upper_)
	return
}

func (_self_ *GtkAdjustment) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_adjustment_set_value((*C.GtkAdjustment)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *GtkAdjustment) ValueChanged() () {
	C.gtk_adjustment_value_changed((*C.GtkAdjustment)(_self_._value_))
	return
}

func AlignmentNew(xalign float64, yalign float64, xscale float64, yscale float64) (_go__return__ GtkAlignment) {
	var _return_ *C.GtkWidget
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_xscale_ := (C.gfloat)(xscale)
	_cgo_yscale_ := (C.gfloat)(yscale)
	_return_ = C.gtk_alignment_new(_cgo_xalign_, _cgo_yalign_, _cgo_xscale_, _cgo_yscale_)
	_go__return__ = ToGtkAlignment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAlignment) GetPadding() (_go_padding_top_ uint, _go_padding_bottom_ uint, _go_padding_left_ uint, _go_padding_right_ uint) {
	var padding_top C.guint
	var padding_bottom C.guint
	var padding_left C.guint
	var padding_right C.guint
	C.gtk_alignment_get_padding((*C.GtkAlignment)(_self_._value_), &padding_top, &padding_bottom, &padding_left, &padding_right)
	_go_padding_top_ = (uint)(padding_top)
	_go_padding_bottom_ = (uint)(padding_bottom)
	_go_padding_left_ = (uint)(padding_left)
	_go_padding_right_ = (uint)(padding_right)
	return
}

func (_self_ *GtkAlignment) Set(xalign float64, yalign float64, xscale float64, yscale float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_xscale_ := (C.gfloat)(xscale)
	_cgo_yscale_ := (C.gfloat)(yscale)
	C.gtk_alignment_set((*C.GtkAlignment)(_self_._value_), _cgo_xalign_, _cgo_yalign_, _cgo_xscale_, _cgo_yscale_)
	return
}

func (_self_ *GtkAlignment) SetPadding(padding_top uint, padding_bottom uint, padding_left uint, padding_right uint) () {
	_cgo_padding_top_ := (C.guint)(padding_top)
	_cgo_padding_bottom_ := (C.guint)(padding_bottom)
	_cgo_padding_left_ := (C.guint)(padding_left)
	_cgo_padding_right_ := (C.guint)(padding_right)
	C.gtk_alignment_set_padding((*C.GtkAlignment)(_self_._value_), _cgo_padding_top_, _cgo_padding_bottom_, _cgo_padding_left_, _cgo_padding_right_)
	return
}

func AppChooserButtonNew(content_type string) (_go__return__ GtkAppChooserButton) {
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_button_new(_cgo_content_type_)
	_go__return__ = ToGtkAppChooserButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAppChooserButton) AppendCustomItem(name string, label string, icon *C.GIcon) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_app_chooser_button_append_custom_item((*C.GtkAppChooserButton)(_self_._value_), _cgo_name_, _cgo_label_, icon)
	return
}

func (_self_ *GtkAppChooserButton) AppendSeparator() () {
	C.gtk_app_chooser_button_append_separator((*C.GtkAppChooserButton)(_self_._value_))
	return
}

func (_self_ *GtkAppChooserButton) GetHeading() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_button_get_heading((*C.GtkAppChooserButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAppChooserButton) GetShowDefaultItem() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_button_get_show_default_item((*C.GtkAppChooserButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserButton) GetShowDialogItem() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_button_get_show_dialog_item((*C.GtkAppChooserButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserButton) SetActiveCustomItem(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_app_chooser_button_set_active_custom_item((*C.GtkAppChooserButton)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkAppChooserButton) SetHeading(heading string) () {
	_cstring_heading_ := C.CString(heading)
	_cgo_heading_ := (*C.gchar)(unsafe.Pointer(_cstring_heading_))
	defer C.free(unsafe.Pointer(_cstring_heading_))
	C._gtk_app_chooser_button_set_heading((*C.GtkAppChooserButton)(_self_._value_), _cgo_heading_)
	return
}

func (_self_ *GtkAppChooserButton) SetShowDefaultItem(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_button_set_show_default_item((*C.GtkAppChooserButton)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkAppChooserButton) SetShowDialogItem(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_button_set_show_dialog_item((*C.GtkAppChooserButton)(_self_._value_), _cgo_setting_)
	return
}

func AppChooserDialogNew(parent GtkWindowKind, flags C.GtkDialogFlags, file *C.GFile) (_go__return__ GtkAppChooserDialog) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_app_chooser_dialog_new(_cgo_parent_, flags, file)
	_go__return__ = ToGtkAppChooserDialog(unsafe.Pointer(_return_))
	return
}

func AppChooserDialogNewForContentType(parent GtkWindowKind, flags C.GtkDialogFlags, content_type string) (_go__return__ GtkAppChooserDialog) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_dialog_new_for_content_type(_cgo_parent_, flags, _cgo_content_type_)
	_go__return__ = ToGtkAppChooserDialog(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAppChooserDialog) GetHeading() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_dialog_get_heading((*C.GtkAppChooserDialog)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAppChooserDialog) GetWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_app_chooser_dialog_get_widget((*C.GtkAppChooserDialog)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAppChooserDialog) SetHeading(heading string) () {
	_cstring_heading_ := C.CString(heading)
	_cgo_heading_ := (*C.gchar)(unsafe.Pointer(_cstring_heading_))
	defer C.free(unsafe.Pointer(_cstring_heading_))
	C._gtk_app_chooser_dialog_set_heading((*C.GtkAppChooserDialog)(_self_._value_), _cgo_heading_)
	return
}

func AppChooserWidgetNew(content_type string) (_go__return__ GtkAppChooserWidget) {
	var _return_ *C.GtkWidget
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._gtk_app_chooser_widget_new(_cgo_content_type_)
	_go__return__ = ToGtkAppChooserWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAppChooserWidget) GetDefaultText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_app_chooser_widget_get_default_text((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAppChooserWidget) GetShowAll() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_all((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserWidget) GetShowDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_default((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserWidget) GetShowFallback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_fallback((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserWidget) GetShowOther() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_other((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserWidget) GetShowRecommended() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_app_chooser_widget_get_show_recommended((*C.GtkAppChooserWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAppChooserWidget) SetDefaultText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_app_chooser_widget_set_default_text((*C.GtkAppChooserWidget)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkAppChooserWidget) SetShowAll(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_widget_set_show_all((*C.GtkAppChooserWidget)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkAppChooserWidget) SetShowDefault(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_widget_set_show_default((*C.GtkAppChooserWidget)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkAppChooserWidget) SetShowFallback(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_widget_set_show_fallback((*C.GtkAppChooserWidget)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkAppChooserWidget) SetShowOther(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_widget_set_show_other((*C.GtkAppChooserWidget)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkAppChooserWidget) SetShowRecommended(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_app_chooser_widget_set_show_recommended((*C.GtkAppChooserWidget)(_self_._value_), _cgo_setting_)
	return
}

func GtkApplicationNew(application_id string, flags C.GApplicationFlags) (_go__return__ GtkApplication) {
	var _return_ *C.GtkApplication
	_cstring_application_id_ := C.CString(application_id)
	_cgo_application_id_ := (*C.gchar)(unsafe.Pointer(_cstring_application_id_))
	defer C.free(unsafe.Pointer(_cstring_application_id_))
	_return_ = C._gtk_application_new(_cgo_application_id_, flags)
	_go__return__ = ToGtkApplication(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkApplication) AddAccelerator(accelerator string, action_name string, parameter *C.GVariant) () {
	_cstring_accelerator_ := C.CString(accelerator)
	_cgo_accelerator_ := (*C.gchar)(unsafe.Pointer(_cstring_accelerator_))
	defer C.free(unsafe.Pointer(_cstring_accelerator_))
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._gtk_application_add_accelerator((*C.GtkApplication)(_self_._value_), _cgo_accelerator_, _cgo_action_name_, parameter)
	return
}

func (_self_ *GtkApplication) AddWindow(window GtkWindowKind) () {
	_cgo_window_ := (*C.GtkWindow)(window._getValue())
	C.gtk_application_add_window((*C.GtkApplication)(_self_._value_), _cgo_window_)
	return
}

func (_self_ *GtkApplication) GetActiveWindow() (_go__return__ GtkWindow) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_application_get_active_window((*C.GtkApplication)(_self_._value_))
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkApplication) GetAppMenu() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_app_menu((*C.GtkApplication)(_self_._value_))
	return
}

func (_self_ *GtkApplication) GetMenubar() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_menubar((*C.GtkApplication)(_self_._value_))
	return
}

func (_self_ *GtkApplication) GetWindowById(id uint) (_go__return__ GtkWindow) {
	var _return_ *C.GtkWindow
	_cgo_id_ := (C.guint)(id)
	_return_ = C.gtk_application_get_window_by_id((*C.GtkApplication)(_self_._value_), _cgo_id_)
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkApplication) GetWindows() (_return_ *C.GList) {
	_return_ = C.gtk_application_get_windows((*C.GtkApplication)(_self_._value_))
	return
}

func (_self_ *GtkApplication) Inhibit(window GtkWindowKind, flags C.GtkApplicationInhibitFlags, reason string) (_go__return__ uint) {
	_cgo_window_ := (*C.GtkWindow)(window._getValue())
	var _return_ C.guint
	_cstring_reason_ := C.CString(reason)
	_cgo_reason_ := (*C.gchar)(unsafe.Pointer(_cstring_reason_))
	defer C.free(unsafe.Pointer(_cstring_reason_))
	_return_ = C._gtk_application_inhibit((*C.GtkApplication)(_self_._value_), _cgo_window_, flags, _cgo_reason_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkApplication) IsInhibited(flags C.GtkApplicationInhibitFlags) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_application_is_inhibited((*C.GtkApplication)(_self_._value_), flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkApplication) RemoveAccelerator(action_name string, parameter *C.GVariant) () {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._gtk_application_remove_accelerator((*C.GtkApplication)(_self_._value_), _cgo_action_name_, parameter)
	return
}

func (_self_ *GtkApplication) RemoveWindow(window GtkWindowKind) () {
	_cgo_window_ := (*C.GtkWindow)(window._getValue())
	C.gtk_application_remove_window((*C.GtkApplication)(_self_._value_), _cgo_window_)
	return
}

func (_self_ *GtkApplication) SetAppMenu(app_menu *C.GMenuModel) () {
	C.gtk_application_set_app_menu((*C.GtkApplication)(_self_._value_), app_menu)
	return
}

func (_self_ *GtkApplication) SetMenubar(menubar *C.GMenuModel) () {
	C.gtk_application_set_menubar((*C.GtkApplication)(_self_._value_), menubar)
	return
}

func (_self_ *GtkApplication) Uninhibit(cookie uint) () {
	_cgo_cookie_ := (C.guint)(cookie)
	C.gtk_application_uninhibit((*C.GtkApplication)(_self_._value_), _cgo_cookie_)
	return
}

func ApplicationWindowNew(application GtkApplicationKind) (_go__return__ GtkApplicationWindow) {
	_cgo_application_ := (*C.GtkApplication)(application._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_application_window_new(_cgo_application_)
	_go__return__ = ToGtkApplicationWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkApplicationWindow) GetId() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_application_window_get_id((*C.GtkApplicationWindow)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkApplicationWindow) GetShowMenubar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_application_window_get_show_menubar((*C.GtkApplicationWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkApplicationWindow) SetShowMenubar(show_menubar bool) () {
	_cgo_show_menubar_ := (C.gboolean)(C.FALSE)
	if show_menubar { _cgo_show_menubar_ = (C.gboolean)(C.TRUE) }
	C.gtk_application_window_set_show_menubar((*C.GtkApplicationWindow)(_self_._value_), _cgo_show_menubar_)
	return
}

func ArrowNew(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) (_go__return__ GtkArrow) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_arrow_new(arrow_type, shadow_type)
	_go__return__ = ToGtkArrow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkArrow) Set(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) () {
	C.gtk_arrow_set((*C.GtkArrow)(_self_._value_), arrow_type, shadow_type)
	return
}

func AspectFrameNew(label string, xalign float64, yalign float64, ratio float64, obey_child bool) (_go__return__ GtkAspectFrame) {
	var _return_ *C.GtkWidget
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_ratio_ := (C.gfloat)(ratio)
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cgo_obey_child_ := (C.gboolean)(C.FALSE)
	if obey_child { _cgo_obey_child_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_aspect_frame_new(_cgo_label_, _cgo_xalign_, _cgo_yalign_, _cgo_ratio_, _cgo_obey_child_)
	_go__return__ = ToGtkAspectFrame(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAspectFrame) Set(xalign float64, yalign float64, ratio float64, obey_child bool) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	_cgo_ratio_ := (C.gfloat)(ratio)
	_cgo_obey_child_ := (C.gboolean)(C.FALSE)
	if obey_child { _cgo_obey_child_ = (C.gboolean)(C.TRUE) }
	C.gtk_aspect_frame_set((*C.GtkAspectFrame)(_self_._value_), _cgo_xalign_, _cgo_yalign_, _cgo_ratio_, _cgo_obey_child_)
	return
}

func AssistantNew() (_go__return__ GtkAssistant) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_assistant_new()
	_go__return__ = ToGtkAssistant(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAssistant) AddActionWidget(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_assistant_add_action_widget((*C.GtkAssistant)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkAssistant) AppendPage(page GtkWidgetKind) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	var _return_ C.gint
	_return_ = C.gtk_assistant_append_page((*C.GtkAssistant)(_self_._value_), _cgo_page_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkAssistant) Commit() () {
	C.gtk_assistant_commit((*C.GtkAssistant)(_self_._value_))
	return
}

func (_self_ *GtkAssistant) GetCurrentPage() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_assistant_get_current_page((*C.GtkAssistant)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkAssistant) GetNPages() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_assistant_get_n_pages((*C.GtkAssistant)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkAssistant) GetNthPage(page_num int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_page_num_ := (C.gint)(page_num)
	_return_ = C.gtk_assistant_get_nth_page((*C.GtkAssistant)(_self_._value_), _cgo_page_num_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkAssistant) GetPageComplete(page GtkWidgetKind) (_go__return__ bool) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_assistant_get_page_complete((*C.GtkAssistant)(_self_._value_), _cgo_page_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkAssistant) GetPageTitle(page GtkWidgetKind) (_go__return__ string) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	var _return_ *C.gchar
	_return_ = C._gtk_assistant_get_page_title((*C.GtkAssistant)(_self_._value_), _cgo_page_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkAssistant) GetPageType(page GtkWidgetKind) (_return_ C.GtkAssistantPageType) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	_return_ = C.gtk_assistant_get_page_type((*C.GtkAssistant)(_self_._value_), _cgo_page_)
	return
}

func (_self_ *GtkAssistant) InsertPage(page GtkWidgetKind, position int) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_assistant_insert_page((*C.GtkAssistant)(_self_._value_), _cgo_page_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkAssistant) NextPage() () {
	C.gtk_assistant_next_page((*C.GtkAssistant)(_self_._value_))
	return
}

func (_self_ *GtkAssistant) PrependPage(page GtkWidgetKind) (_go__return__ int) {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	var _return_ C.gint
	_return_ = C.gtk_assistant_prepend_page((*C.GtkAssistant)(_self_._value_), _cgo_page_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkAssistant) PreviousPage() () {
	C.gtk_assistant_previous_page((*C.GtkAssistant)(_self_._value_))
	return
}

func (_self_ *GtkAssistant) RemoveActionWidget(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_assistant_remove_action_widget((*C.GtkAssistant)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkAssistant) RemovePage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_assistant_remove_page((*C.GtkAssistant)(_self_._value_), _cgo_page_num_)
	return
}

func (_self_ *GtkAssistant) SetCurrentPage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_assistant_set_current_page((*C.GtkAssistant)(_self_._value_), _cgo_page_num_)
	return
}

func (_self_ *GtkAssistant) SetForwardPageFunc(page_func C.GtkAssistantPageFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_assistant_set_forward_page_func((*C.GtkAssistant)(_self_._value_), page_func, data, destroy)
	return
}

func (_self_ *GtkAssistant) SetPageComplete(page GtkWidgetKind, complete bool) () {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	_cgo_complete_ := (C.gboolean)(C.FALSE)
	if complete { _cgo_complete_ = (C.gboolean)(C.TRUE) }
	C.gtk_assistant_set_page_complete((*C.GtkAssistant)(_self_._value_), _cgo_page_, _cgo_complete_)
	return
}

func (_self_ *GtkAssistant) SetPageTitle(page GtkWidgetKind, title string) () {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_assistant_set_page_title((*C.GtkAssistant)(_self_._value_), _cgo_page_, _cgo_title_)
	return
}

func (_self_ *GtkAssistant) SetPageType(page GtkWidgetKind, type_ C.GtkAssistantPageType) () {
	_cgo_page_ := (*C.GtkWidget)(page._getValue())
	C.gtk_assistant_set_page_type((*C.GtkAssistant)(_self_._value_), _cgo_page_, type_)
	return
}

func (_self_ *GtkAssistant) UpdateButtonsState() () {
	C.gtk_assistant_update_buttons_state((*C.GtkAssistant)(_self_._value_))
	return
}

func (_self_ *GtkBin) GetChild() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_bin_get_child((*C.GtkBin)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func BoxNew(orientation C.GtkOrientation, spacing int) (_go__return__ GtkBox) {
	var _return_ *C.GtkWidget
	_cgo_spacing_ := (C.gint)(spacing)
	_return_ = C.gtk_box_new(orientation, _cgo_spacing_)
	_go__return__ = ToGtkBox(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkBox) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_box_get_homogeneous((*C.GtkBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkBox) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_box_get_spacing((*C.GtkBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkBox) PackEnd(child GtkWidgetKind, expand bool, fill bool, padding uint) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	_cgo_fill_ := (C.gboolean)(C.FALSE)
	if fill { _cgo_fill_ = (C.gboolean)(C.TRUE) }
	C.gtk_box_pack_end((*C.GtkBox)(_self_._value_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_)
	return
}

func (_self_ *GtkBox) PackStart(child GtkWidgetKind, expand bool, fill bool, padding uint) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	_cgo_fill_ := (C.gboolean)(C.FALSE)
	if fill { _cgo_fill_ = (C.gboolean)(C.TRUE) }
	C.gtk_box_pack_start((*C.GtkBox)(_self_._value_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_)
	return
}

func (_self_ *GtkBox) QueryChildPacking(child GtkWidgetKind) (_go_expand_ bool, _go_fill_ bool, _go_padding_ uint, pack_type *C.GtkPackType) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var padding C.guint
	var expand C.gboolean
	var fill C.gboolean
	C.gtk_box_query_child_packing((*C.GtkBox)(_self_._value_), _cgo_child_, &expand, &fill, &padding, pack_type)
	_go_padding_ = (uint)(padding)
	_go_expand_ = expand == (C.gboolean)(C.TRUE)
	_go_fill_ = fill == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkBox) ReorderChild(child GtkWidgetKind, position int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_box_reorder_child((*C.GtkBox)(_self_._value_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *GtkBox) SetChildPacking(child GtkWidgetKind, expand bool, fill bool, padding uint, pack_type C.GtkPackType) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_padding_ := (C.guint)(padding)
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	_cgo_fill_ := (C.gboolean)(C.FALSE)
	if fill { _cgo_fill_ = (C.gboolean)(C.TRUE) }
	C.gtk_box_set_child_packing((*C.GtkBox)(_self_._value_), _cgo_child_, _cgo_expand_, _cgo_fill_, _cgo_padding_, pack_type)
	return
}

func (_self_ *GtkBox) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.gtk_box_set_homogeneous((*C.GtkBox)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GtkBox) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_box_set_spacing((*C.GtkBox)(_self_._value_), _cgo_spacing_)
	return
}

func BuilderNew() (_go__return__ GtkBuilder) {
	var _return_ *C.GtkBuilder
	_return_ = C.gtk_builder_new()
	_go__return__ = ToGtkBuilder(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkBuilder) AddFromFile(filename string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_builder_add_from_file((*C.GtkBuilder)(_self_._value_), _cgo_filename_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkBuilder) AddFromResource(resource_path string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_builder_add_from_resource((*C.GtkBuilder)(_self_._value_), _cgo_resource_path_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkBuilder) AddFromString(buffer string, length uint64) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_length_ := (C.gsize)(length)
	var _return_ C.guint
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_return_ = C._gtk_builder_add_from_string((*C.GtkBuilder)(_self_._value_), _cgo_buffer_, _cgo_length_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkBuilder) ConnectSignals(user_data C.gpointer) () {
	C.gtk_builder_connect_signals((*C.GtkBuilder)(_self_._value_), user_data)
	return
}

func (_self_ *GtkBuilder) ConnectSignalsFull(func_ C.GtkBuilderConnectFunc, user_data C.gpointer) () {
	C.gtk_builder_connect_signals_full((*C.GtkBuilder)(_self_._value_), func_, user_data)
	return
}

func (_self_ *GtkBuilder) GetObject(name string) (_return_ *C.GObject) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_builder_get_object((*C.GtkBuilder)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkBuilder) GetObjects() (_return_ *C.GSList) {
	_return_ = C.gtk_builder_get_objects((*C.GtkBuilder)(_self_._value_))
	return
}

func (_self_ *GtkBuilder) GetTranslationDomain() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_builder_get_translation_domain((*C.GtkBuilder)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkBuilder) GetTypeFromName(type_name string) (_return_ C.GType) {
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.char)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._gtk_builder_get_type_from_name((*C.GtkBuilder)(_self_._value_), _cgo_type_name_)
	return
}

func (_self_ *GtkBuilder) SetTranslationDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._gtk_builder_set_translation_domain((*C.GtkBuilder)(_self_._value_), _cgo_domain_)
	return
}

func (_self_ *GtkBuilder) ValueFromString(pspec *C.GParamSpec, string_ string) (_go__return__ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._gtk_builder_value_from_string((*C.GtkBuilder)(_self_._value_), pspec, _cgo_string__, value, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkBuilder) ValueFromStringType(type_ C.GType, string_ string) (_go__return__ bool, value *C.GValue, _error_ unsafe.Pointer) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._gtk_builder_value_from_string_type((*C.GtkBuilder)(_self_._value_), type_, _cgo_string__, value, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ButtonNew() (_go__return__ GtkButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_new()
	_go__return__ = ToGtkButton(unsafe.Pointer(_return_))
	return
}

func ButtonNewFromStock(stock_id string) (_go__return__ GtkButton) {
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = ToGtkButton(unsafe.Pointer(_return_))
	return
}

func ButtonNewWithLabel(label string) (_go__return__ GtkButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_button_new_with_label(_cgo_label_)
	_go__return__ = ToGtkButton(unsafe.Pointer(_return_))
	return
}

func ButtonNewWithMnemonic(label string) (_go__return__ GtkButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkButton) Clicked() () {
	C.gtk_button_clicked((*C.GtkButton)(_self_._value_))
	return
}

func (_self_ *GtkButton) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_button_get_alignment((*C.GtkButton)(_self_._value_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *GtkButton) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_always_show_image((*C.GtkButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButton) GetEventWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_button_get_event_window((*C.GtkButton)(_self_._value_))
	return
}

func (_self_ *GtkButton) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_focus_on_click((*C.GtkButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButton) GetImage() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_get_image((*C.GtkButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkButton) GetImagePosition() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_button_get_image_position((*C.GtkButton)(_self_._value_))
	return
}

func (_self_ *GtkButton) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_button_get_label((*C.GtkButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkButton) GetRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_button_get_relief((*C.GtkButton)(_self_._value_))
	return
}

func (_self_ *GtkButton) GetUseStock() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_use_stock((*C.GtkButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButton) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_button_get_use_underline((*C.GtkButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButton) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_button_set_alignment((*C.GtkButton)(_self_._value_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *GtkButton) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := (C.gboolean)(C.FALSE)
	if always_show { _cgo_always_show_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_set_always_show_image((*C.GtkButton)(_self_._value_), _cgo_always_show_)
	return
}

func (_self_ *GtkButton) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := (C.gboolean)(C.FALSE)
	if focus_on_click { _cgo_focus_on_click_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_set_focus_on_click((*C.GtkButton)(_self_._value_), _cgo_focus_on_click_)
	return
}

func (_self_ *GtkButton) SetImage(image GtkWidgetKind) () {
	_cgo_image_ := (*C.GtkWidget)(image._getValue())
	C.gtk_button_set_image((*C.GtkButton)(_self_._value_), _cgo_image_)
	return
}

func (_self_ *GtkButton) SetImagePosition(position C.GtkPositionType) () {
	C.gtk_button_set_image_position((*C.GtkButton)(_self_._value_), position)
	return
}

func (_self_ *GtkButton) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_button_set_label((*C.GtkButton)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkButton) SetRelief(newstyle C.GtkReliefStyle) () {
	C.gtk_button_set_relief((*C.GtkButton)(_self_._value_), newstyle)
	return
}

func (_self_ *GtkButton) SetUseStock(use_stock bool) () {
	_cgo_use_stock_ := (C.gboolean)(C.FALSE)
	if use_stock { _cgo_use_stock_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_set_use_stock((*C.GtkButton)(_self_._value_), _cgo_use_stock_)
	return
}

func (_self_ *GtkButton) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := (C.gboolean)(C.FALSE)
	if use_underline { _cgo_use_underline_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_set_use_underline((*C.GtkButton)(_self_._value_), _cgo_use_underline_)
	return
}

func ButtonBoxNew(orientation C.GtkOrientation) (_go__return__ GtkButtonBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_button_box_new(orientation)
	_go__return__ = ToGtkButtonBox(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkButtonBox) GetChildNonHomogeneous(child GtkWidgetKind) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_button_box_get_child_non_homogeneous((*C.GtkButtonBox)(_self_._value_), _cgo_child_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButtonBox) GetChildSecondary(child GtkWidgetKind) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_button_box_get_child_secondary((*C.GtkButtonBox)(_self_._value_), _cgo_child_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkButtonBox) GetLayout() (_return_ C.GtkButtonBoxStyle) {
	_return_ = C.gtk_button_box_get_layout((*C.GtkButtonBox)(_self_._value_))
	return
}

func (_self_ *GtkButtonBox) SetChildNonHomogeneous(child GtkWidgetKind, non_homogeneous bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_non_homogeneous_ := (C.gboolean)(C.FALSE)
	if non_homogeneous { _cgo_non_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_box_set_child_non_homogeneous((*C.GtkButtonBox)(_self_._value_), _cgo_child_, _cgo_non_homogeneous_)
	return
}

func (_self_ *GtkButtonBox) SetChildSecondary(child GtkWidgetKind, is_secondary bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_is_secondary_ := (C.gboolean)(C.FALSE)
	if is_secondary { _cgo_is_secondary_ = (C.gboolean)(C.TRUE) }
	C.gtk_button_box_set_child_secondary((*C.GtkButtonBox)(_self_._value_), _cgo_child_, _cgo_is_secondary_)
	return
}

func (_self_ *GtkButtonBox) SetLayout(layout_style C.GtkButtonBoxStyle) () {
	C.gtk_button_box_set_layout((*C.GtkButtonBox)(_self_._value_), layout_style)
	return
}

func CalendarNew() (_go__return__ GtkCalendar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_calendar_new()
	_go__return__ = ToGtkCalendar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCalendar) ClearMarks() () {
	C.gtk_calendar_clear_marks((*C.GtkCalendar)(_self_._value_))
	return
}

func (_self_ *GtkCalendar) GetDate() (_go_year_ uint, _go_month_ uint, _go_day_ uint) {
	var year C.guint
	var month C.guint
	var day C.guint
	C.gtk_calendar_get_date((*C.GtkCalendar)(_self_._value_), &year, &month, &day)
	_go_year_ = (uint)(year)
	_go_month_ = (uint)(month)
	_go_day_ = (uint)(day)
	return
}

func (_self_ *GtkCalendar) GetDayIsMarked(day uint) (_go__return__ bool) {
	_cgo_day_ := (C.guint)(day)
	var _return_ C.gboolean
	_return_ = C.gtk_calendar_get_day_is_marked((*C.GtkCalendar)(_self_._value_), _cgo_day_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCalendar) GetDetailHeightRows() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_calendar_get_detail_height_rows((*C.GtkCalendar)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkCalendar) GetDetailWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_calendar_get_detail_width_chars((*C.GtkCalendar)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkCalendar) GetDisplayOptions() (_return_ C.GtkCalendarDisplayOptions) {
	_return_ = C.gtk_calendar_get_display_options((*C.GtkCalendar)(_self_._value_))
	return
}

func (_self_ *GtkCalendar) MarkDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_mark_day((*C.GtkCalendar)(_self_._value_), _cgo_day_)
	return
}

func (_self_ *GtkCalendar) SelectDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_select_day((*C.GtkCalendar)(_self_._value_), _cgo_day_)
	return
}

func (_self_ *GtkCalendar) SelectMonth(month uint, year uint) () {
	_cgo_month_ := (C.guint)(month)
	_cgo_year_ := (C.guint)(year)
	C.gtk_calendar_select_month((*C.GtkCalendar)(_self_._value_), _cgo_month_, _cgo_year_)
	return
}

func (_self_ *GtkCalendar) SetDetailFunc(func_ C.GtkCalendarDetailFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_calendar_set_detail_func((*C.GtkCalendar)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkCalendar) SetDetailHeightRows(rows int) () {
	_cgo_rows_ := (C.gint)(rows)
	C.gtk_calendar_set_detail_height_rows((*C.GtkCalendar)(_self_._value_), _cgo_rows_)
	return
}

func (_self_ *GtkCalendar) SetDetailWidthChars(chars int) () {
	_cgo_chars_ := (C.gint)(chars)
	C.gtk_calendar_set_detail_width_chars((*C.GtkCalendar)(_self_._value_), _cgo_chars_)
	return
}

func (_self_ *GtkCalendar) SetDisplayOptions(flags C.GtkCalendarDisplayOptions) () {
	C.gtk_calendar_set_display_options((*C.GtkCalendar)(_self_._value_), flags)
	return
}

func (_self_ *GtkCalendar) UnmarkDay(day uint) () {
	_cgo_day_ := (C.guint)(day)
	C.gtk_calendar_unmark_day((*C.GtkCalendar)(_self_._value_), _cgo_day_)
	return
}

func (_self_ *GtkCellArea) Activate(context GtkCellAreaContextKind, widget GtkWidgetKind, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, edit_only bool) (_go__return__ bool) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_edit_only_ := (C.gboolean)(C.FALSE)
	if edit_only { _cgo_edit_only_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_cell_area_activate((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, cell_area, flags, _cgo_edit_only_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) ActivateCell(widget GtkWidgetKind, renderer GtkCellRendererKind, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_cell_area_activate_cell((*C.GtkCellArea)(_self_._value_), _cgo_widget_, _cgo_renderer_, event, cell_area, flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) Add(renderer GtkCellRendererKind) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	C.gtk_cell_area_add((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	return
}

func (_self_ *GtkCellArea) AddFocusSibling(renderer GtkCellRendererKind, sibling GtkCellRendererKind) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_sibling_ := (*C.GtkCellRenderer)(sibling._getValue())
	C.gtk_cell_area_add_focus_sibling((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_sibling_)
	return
}

func (_self_ *GtkCellArea) ApplyAttributes(tree_model *C.GtkTreeModel, iter *GtkTreeIter, is_expander bool, is_expanded bool) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_is_expander_ := (C.gboolean)(C.FALSE)
	if is_expander { _cgo_is_expander_ = (C.gboolean)(C.TRUE) }
	_cgo_is_expanded_ := (C.gboolean)(C.FALSE)
	if is_expanded { _cgo_is_expanded_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_area_apply_attributes((*C.GtkCellArea)(_self_._value_), tree_model, _cgo_iter_, _cgo_is_expander_, _cgo_is_expanded_)
	return
}

func (_self_ *GtkCellArea) AttributeConnect(renderer GtkCellRendererKind, attribute string, column int) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_column_ := (C.gint)(column)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_cell_area_attribute_connect((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_attribute_, _cgo_column_)
	return
}

func (_self_ *GtkCellArea) AttributeDisconnect(renderer GtkCellRendererKind, attribute string) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_cell_area_attribute_disconnect((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_attribute_)
	return
}

func (_self_ *GtkCellArea) CellGetProperty(renderer GtkCellRendererKind, property_name string, value *C.GValue) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_cell_area_cell_get_property((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_property_name_, value)
	return
}

func (_self_ *GtkCellArea) CellSetProperty(renderer GtkCellRendererKind, property_name string, value *C.GValue) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_cell_area_cell_set_property((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_property_name_, value)
	return
}

func (_self_ *GtkCellArea) CopyContext(context GtkCellAreaContextKind) (_go__return__ GtkCellAreaContext) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	var _return_ *C.GtkCellAreaContext
	_return_ = C.gtk_cell_area_copy_context((*C.GtkCellArea)(_self_._value_), _cgo_context_)
	_go__return__ = ToGtkCellAreaContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) CreateContext() (_go__return__ GtkCellAreaContext) {
	var _return_ *C.GtkCellAreaContext
	_return_ = C.gtk_cell_area_create_context((*C.GtkCellArea)(_self_._value_))
	_go__return__ = ToGtkCellAreaContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) Event(context GtkCellAreaContextKind, widget GtkWidgetKind, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ C.gint
	_return_ = C._gtk_cell_area_event((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, event, cell_area, flags)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkCellArea) Focus(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_focus((*C.GtkCellArea)(_self_._value_), direction)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) Foreach(callback C.GtkCellCallback, callback_data C.gpointer) () {
	C.gtk_cell_area_foreach((*C.GtkCellArea)(_self_._value_), callback, callback_data)
	return
}

func (_self_ *GtkCellArea) ForeachAlloc(context GtkCellAreaContextKind, widget GtkWidgetKind, cell_area *C.GdkRectangle, background_area *C.GdkRectangle, callback C.GtkCellAllocCallback, callback_data C.gpointer) () {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C._gtk_cell_area_foreach_alloc((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, cell_area, background_area, callback, callback_data)
	return
}

func (_self_ *GtkCellArea) GetCellAllocation(context GtkCellAreaContextKind, widget GtkWidgetKind, renderer GtkCellRendererKind, cell_area *C.GdkRectangle) (allocation *C.GdkRectangle) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	C._gtk_cell_area_get_cell_allocation((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, _cgo_renderer_, cell_area, allocation)
	return
}

func (_self_ *GtkCellArea) GetCellAtPosition(context GtkCellAreaContextKind, widget GtkWidgetKind, cell_area *C.GdkRectangle, x int, y int) (_go__return__ GtkCellRenderer, alloc_area *C.GdkRectangle) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ *C.GtkCellRenderer
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C._gtk_cell_area_get_cell_at_position((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, cell_area, _cgo_x_, _cgo_y_, alloc_area)
	_go__return__ = ToGtkCellRenderer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) GetCurrentPathString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_cell_area_get_current_path_string((*C.GtkCellArea)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkCellArea) GetEditWidget() (_return_ *C.GtkCellEditable) {
	_return_ = C.gtk_cell_area_get_edit_widget((*C.GtkCellArea)(_self_._value_))
	return
}

func (_self_ *GtkCellArea) GetEditedCell() (_go__return__ GtkCellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_edited_cell((*C.GtkCellArea)(_self_._value_))
	_go__return__ = ToGtkCellRenderer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) GetFocusCell() (_go__return__ GtkCellRenderer) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_focus_cell((*C.GtkCellArea)(_self_._value_))
	_go__return__ = ToGtkCellRenderer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) GetFocusFromSibling(renderer GtkCellRendererKind) (_go__return__ GtkCellRenderer) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_area_get_focus_from_sibling((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	_go__return__ = ToGtkCellRenderer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellArea) GetFocusSiblings(renderer GtkCellRendererKind) (_return_ *C.GList) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_return_ = C._gtk_cell_area_get_focus_siblings((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	return
}

func (_self_ *GtkCellArea) GetPreferredHeight(context GtkCellAreaContextKind, widget GtkWidgetKind) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_get_preferred_height((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkCellArea) GetPreferredHeightForWidth(context GtkCellAreaContextKind, widget GtkWidgetKind, width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_get_preferred_height_for_width((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkCellArea) GetPreferredWidth(context GtkCellAreaContextKind, widget GtkWidgetKind) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_get_preferred_width((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkCellArea) GetPreferredWidthForHeight(context GtkCellAreaContextKind, widget GtkWidgetKind, height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_get_preferred_width_for_height((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkCellArea) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_area_get_request_mode((*C.GtkCellArea)(_self_._value_))
	return
}

func (_self_ *GtkCellArea) HasRenderer(renderer GtkCellRendererKind) (_go__return__ bool) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_has_renderer((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) InnerCellArea(widget GtkWidgetKind, cell_area *C.GdkRectangle) (inner_area *C.GdkRectangle) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C._gtk_cell_area_inner_cell_area((*C.GtkCellArea)(_self_._value_), _cgo_widget_, cell_area, inner_area)
	return
}

func (_self_ *GtkCellArea) IsActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_is_activatable((*C.GtkCellArea)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) IsFocusSibling(renderer GtkCellRendererKind, sibling GtkCellRendererKind) (_go__return__ bool) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_sibling_ := (*C.GtkCellRenderer)(sibling._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_cell_area_is_focus_sibling((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_sibling_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellArea) Remove(renderer GtkCellRendererKind) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	C.gtk_cell_area_remove((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	return
}

func (_self_ *GtkCellArea) RemoveFocusSibling(renderer GtkCellRendererKind, sibling GtkCellRendererKind) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_sibling_ := (*C.GtkCellRenderer)(sibling._getValue())
	C.gtk_cell_area_remove_focus_sibling((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, _cgo_sibling_)
	return
}

func (_self_ *GtkCellArea) Render(context GtkCellAreaContextKind, widget GtkWidgetKind, cr *C.cairo_t, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, paint_focus bool) () {
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_paint_focus_ := (C.gboolean)(C.FALSE)
	if paint_focus { _cgo_paint_focus_ = (C.gboolean)(C.TRUE) }
	C._gtk_cell_area_render((*C.GtkCellArea)(_self_._value_), _cgo_context_, _cgo_widget_, cr, background_area, cell_area, flags, _cgo_paint_focus_)
	return
}

func (_self_ *GtkCellArea) RequestRenderer(renderer GtkCellRendererKind, orientation C.GtkOrientation, widget GtkWidgetKind, for_size int) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_for_size_ := (C.gint)(for_size)
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_area_request_renderer((*C.GtkCellArea)(_self_._value_), _cgo_renderer_, orientation, _cgo_widget_, _cgo_for_size_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *GtkCellArea) SetFocusCell(renderer GtkCellRendererKind) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	C.gtk_cell_area_set_focus_cell((*C.GtkCellArea)(_self_._value_), _cgo_renderer_)
	return
}

func (_self_ *GtkCellArea) StopEditing(canceled bool) () {
	_cgo_canceled_ := (C.gboolean)(C.FALSE)
	if canceled { _cgo_canceled_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_area_stop_editing((*C.GtkCellArea)(_self_._value_), _cgo_canceled_)
	return
}

func CellAreaBoxNew() (_go__return__ GtkCellAreaBox) {
	var _return_ *C.GtkCellArea
	_return_ = C.gtk_cell_area_box_new()
	_go__return__ = ToGtkCellAreaBox(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellAreaBox) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_cell_area_box_get_spacing((*C.GtkCellAreaBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkCellAreaBox) PackEnd(renderer GtkCellRendererKind, expand bool, align bool, fixed bool) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	_cgo_align_ := (C.gboolean)(C.FALSE)
	if align { _cgo_align_ = (C.gboolean)(C.TRUE) }
	_cgo_fixed_ := (C.gboolean)(C.FALSE)
	if fixed { _cgo_fixed_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_area_box_pack_end((*C.GtkCellAreaBox)(_self_._value_), _cgo_renderer_, _cgo_expand_, _cgo_align_, _cgo_fixed_)
	return
}

func (_self_ *GtkCellAreaBox) PackStart(renderer GtkCellRendererKind, expand bool, align bool, fixed bool) () {
	_cgo_renderer_ := (*C.GtkCellRenderer)(renderer._getValue())
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	_cgo_align_ := (C.gboolean)(C.FALSE)
	if align { _cgo_align_ = (C.gboolean)(C.TRUE) }
	_cgo_fixed_ := (C.gboolean)(C.FALSE)
	if fixed { _cgo_fixed_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_area_box_pack_start((*C.GtkCellAreaBox)(_self_._value_), _cgo_renderer_, _cgo_expand_, _cgo_align_, _cgo_fixed_)
	return
}

func (_self_ *GtkCellAreaBox) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_cell_area_box_set_spacing((*C.GtkCellAreaBox)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GtkCellAreaContext) Allocate(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_cell_area_context_allocate((*C.GtkCellAreaContext)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkCellAreaContext) GetAllocation() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_cell_area_context_get_allocation((*C.GtkCellAreaContext)(_self_._value_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkCellAreaContext) GetArea() (_go__return__ GtkCellArea) {
	var _return_ *C.GtkCellArea
	_return_ = C.gtk_cell_area_context_get_area((*C.GtkCellAreaContext)(_self_._value_))
	_go__return__ = ToGtkCellArea(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellAreaContext) GetPreferredHeight() (_go_minimum_height_ int, _go_natural_height_ int) {
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_context_get_preferred_height((*C.GtkCellAreaContext)(_self_._value_), &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkCellAreaContext) GetPreferredHeightForWidth(width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_area_context_get_preferred_height_for_width((*C.GtkCellAreaContext)(_self_._value_), _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkCellAreaContext) GetPreferredWidth() (_go_minimum_width_ int, _go_natural_width_ int) {
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_context_get_preferred_width((*C.GtkCellAreaContext)(_self_._value_), &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkCellAreaContext) GetPreferredWidthForHeight(height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_area_context_get_preferred_width_for_height((*C.GtkCellAreaContext)(_self_._value_), _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkCellAreaContext) PushPreferredHeight(minimum_height int, natural_height int) () {
	_cgo_minimum_height_ := (C.gint)(minimum_height)
	_cgo_natural_height_ := (C.gint)(natural_height)
	C.gtk_cell_area_context_push_preferred_height((*C.GtkCellAreaContext)(_self_._value_), _cgo_minimum_height_, _cgo_natural_height_)
	return
}

func (_self_ *GtkCellAreaContext) PushPreferredWidth(minimum_width int, natural_width int) () {
	_cgo_minimum_width_ := (C.gint)(minimum_width)
	_cgo_natural_width_ := (C.gint)(natural_width)
	C.gtk_cell_area_context_push_preferred_width((*C.GtkCellAreaContext)(_self_._value_), _cgo_minimum_width_, _cgo_natural_width_)
	return
}

func (_self_ *GtkCellAreaContext) Reset() () {
	C.gtk_cell_area_context_reset((*C.GtkCellAreaContext)(_self_._value_))
	return
}

func (_self_ *GtkCellRenderer) Activate(event *C.GdkEvent, widget GtkWidgetKind, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_go__return__ bool) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_cell_renderer_activate((*C.GtkCellRenderer)(_self_._value_), event, _cgo_widget_, _cgo_path_, background_area, cell_area, flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRenderer) GetAlignedArea(widget GtkWidgetKind, flags C.GtkCellRendererState, cell_area *C.GdkRectangle) (aligned_area *C.GdkRectangle) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C._gtk_cell_renderer_get_aligned_area((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, flags, cell_area, aligned_area)
	return
}

func (_self_ *GtkCellRenderer) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_cell_renderer_get_alignment((*C.GtkCellRenderer)(_self_._value_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *GtkCellRenderer) GetFixedSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_cell_renderer_get_fixed_size((*C.GtkCellRenderer)(_self_._value_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkCellRenderer) GetPadding() (_go_xpad_ int, _go_ypad_ int) {
	var xpad C.gint
	var ypad C.gint
	C.gtk_cell_renderer_get_padding((*C.GtkCellRenderer)(_self_._value_), &xpad, &ypad)
	_go_xpad_ = (int)(xpad)
	_go_ypad_ = (int)(ypad)
	return
}

func (_self_ *GtkCellRenderer) GetPreferredHeight(widget GtkWidgetKind) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_renderer_get_preferred_height((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *GtkCellRenderer) GetPreferredHeightForWidth(widget GtkWidgetKind, width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_cell_renderer_get_preferred_height_for_width((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkCellRenderer) GetPreferredSize(widget GtkWidgetKind) (minimum_size *GtkRequisition, natural_size *GtkRequisition) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C.gtk_cell_renderer_get_preferred_size((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, &_allocated_minimum_size_, &_allocated_natural_size_)
	minimum_size = (*GtkRequisition)(unsafe.Pointer(&_allocated_minimum_size_))
	natural_size = (*GtkRequisition)(unsafe.Pointer(&_allocated_natural_size_))
	return
}

func (_self_ *GtkCellRenderer) GetPreferredWidth(widget GtkWidgetKind) (_go_minimum_size_ int, _go_natural_size_ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var minimum_size C.gint
	var natural_size C.gint
	C.gtk_cell_renderer_get_preferred_width((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, &minimum_size, &natural_size)
	_go_minimum_size_ = (int)(minimum_size)
	_go_natural_size_ = (int)(natural_size)
	return
}

func (_self_ *GtkCellRenderer) GetPreferredWidthForHeight(widget GtkWidgetKind, height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_cell_renderer_get_preferred_width_for_height((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkCellRenderer) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_renderer_get_request_mode((*C.GtkCellRenderer)(_self_._value_))
	return
}

func (_self_ *GtkCellRenderer) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_get_sensitive((*C.GtkCellRenderer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRenderer) GetState(widget GtkWidgetKind, cell_state C.GtkCellRendererState) (_return_ C.GtkStateFlags) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_return_ = C.gtk_cell_renderer_get_state((*C.GtkCellRenderer)(_self_._value_), _cgo_widget_, cell_state)
	return
}

func (_self_ *GtkCellRenderer) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_get_visible((*C.GtkCellRenderer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRenderer) IsActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_is_activatable((*C.GtkCellRenderer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRenderer) Render(cr *C.cairo_t, widget GtkWidgetKind, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C._gtk_cell_renderer_render((*C.GtkCellRenderer)(_self_._value_), cr, _cgo_widget_, background_area, cell_area, flags)
	return
}

func (_self_ *GtkCellRenderer) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_cell_renderer_set_alignment((*C.GtkCellRenderer)(_self_._value_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *GtkCellRenderer) SetFixedSize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_cell_renderer_set_fixed_size((*C.GtkCellRenderer)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkCellRenderer) SetPadding(xpad int, ypad int) () {
	_cgo_xpad_ := (C.gint)(xpad)
	_cgo_ypad_ := (C.gint)(ypad)
	C.gtk_cell_renderer_set_padding((*C.GtkCellRenderer)(_self_._value_), _cgo_xpad_, _cgo_ypad_)
	return
}

func (_self_ *GtkCellRenderer) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := (C.gboolean)(C.FALSE)
	if sensitive { _cgo_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_set_sensitive((*C.GtkCellRenderer)(_self_._value_), _cgo_sensitive_)
	return
}

func (_self_ *GtkCellRenderer) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_set_visible((*C.GtkCellRenderer)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkCellRenderer) StartEditing(event *C.GdkEvent, widget GtkWidgetKind, path string, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ *C.GtkCellEditable) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_cell_renderer_start_editing((*C.GtkCellRenderer)(_self_._value_), event, _cgo_widget_, _cgo_path_, background_area, cell_area, flags)
	return
}

func (_self_ *GtkCellRenderer) StopEditing(canceled bool) () {
	_cgo_canceled_ := (C.gboolean)(C.FALSE)
	if canceled { _cgo_canceled_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_stop_editing((*C.GtkCellRenderer)(_self_._value_), _cgo_canceled_)
	return
}

func CellRendererAccelNew() (_go__return__ GtkCellRendererAccel) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_accel_new()
	_go__return__ = ToGtkCellRendererAccel(unsafe.Pointer(_return_))
	return
}

func CellRendererComboNew() (_go__return__ GtkCellRendererCombo) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_combo_new()
	_go__return__ = ToGtkCellRendererCombo(unsafe.Pointer(_return_))
	return
}

func CellRendererPixbufNew() (_go__return__ GtkCellRendererPixbuf) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_pixbuf_new()
	_go__return__ = ToGtkCellRendererPixbuf(unsafe.Pointer(_return_))
	return
}

func CellRendererProgressNew() (_go__return__ GtkCellRendererProgress) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_progress_new()
	_go__return__ = ToGtkCellRendererProgress(unsafe.Pointer(_return_))
	return
}

func CellRendererSpinNew() (_go__return__ GtkCellRendererSpin) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_spin_new()
	_go__return__ = ToGtkCellRendererSpin(unsafe.Pointer(_return_))
	return
}

func CellRendererSpinnerNew() (_go__return__ GtkCellRendererSpinner) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_spinner_new()
	_go__return__ = ToGtkCellRendererSpinner(unsafe.Pointer(_return_))
	return
}

func CellRendererTextNew() (_go__return__ GtkCellRendererText) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_text_new()
	_go__return__ = ToGtkCellRendererText(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellRendererText) SetFixedHeightFromFont(number_of_rows int) () {
	_cgo_number_of_rows_ := (C.gint)(number_of_rows)
	C.gtk_cell_renderer_text_set_fixed_height_from_font((*C.GtkCellRendererText)(_self_._value_), _cgo_number_of_rows_)
	return
}

func CellRendererToggleNew() (_go__return__ GtkCellRendererToggle) {
	var _return_ *C.GtkCellRenderer
	_return_ = C.gtk_cell_renderer_toggle_new()
	_go__return__ = ToGtkCellRendererToggle(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellRendererToggle) GetActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_activatable((*C.GtkCellRendererToggle)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRendererToggle) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_active((*C.GtkCellRendererToggle)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRendererToggle) GetRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_renderer_toggle_get_radio((*C.GtkCellRendererToggle)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellRendererToggle) SetActivatable(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_toggle_set_activatable((*C.GtkCellRendererToggle)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkCellRendererToggle) SetActive(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_toggle_set_active((*C.GtkCellRendererToggle)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkCellRendererToggle) SetRadio(radio bool) () {
	_cgo_radio_ := (C.gboolean)(C.FALSE)
	if radio { _cgo_radio_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_renderer_toggle_set_radio((*C.GtkCellRendererToggle)(_self_._value_), _cgo_radio_)
	return
}

func CellViewNew() (_go__return__ GtkCellView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new()
	_go__return__ = ToGtkCellView(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithContext(area GtkCellAreaKind, context GtkCellAreaContextKind) (_go__return__ GtkCellView) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	_cgo_context_ := (*C.GtkCellAreaContext)(context._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new_with_context(_cgo_area_, _cgo_context_)
	_go__return__ = ToGtkCellView(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithMarkup(markup string) (_go__return__ GtkCellView) {
	var _return_ *C.GtkWidget
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	_return_ = C._gtk_cell_view_new_with_markup(_cgo_markup_)
	_go__return__ = ToGtkCellView(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ GtkCellView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_cell_view_new_with_pixbuf(pixbuf)
	_go__return__ = ToGtkCellView(unsafe.Pointer(_return_))
	return
}

func CellViewNewWithText(text string) (_go__return__ GtkCellView) {
	var _return_ *C.GtkWidget
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_cell_view_new_with_text(_cgo_text_)
	_go__return__ = ToGtkCellView(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellView) GetDisplayedRow() (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_cell_view_get_displayed_row((*C.GtkCellView)(_self_._value_))
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCellView) GetDrawSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_view_get_draw_sensitive((*C.GtkCellView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellView) GetFitModel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_cell_view_get_fit_model((*C.GtkCellView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCellView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_cell_view_get_model((*C.GtkCellView)(_self_._value_))
	return
}

func (_self_ *GtkCellView) SetBackgroundRgba(rgba *C.GdkRGBA) () {
	C._gtk_cell_view_set_background_rgba((*C.GtkCellView)(_self_._value_), rgba)
	return
}

func (_self_ *GtkCellView) SetDisplayedRow(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_cell_view_set_displayed_row((*C.GtkCellView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkCellView) SetDrawSensitive(draw_sensitive bool) () {
	_cgo_draw_sensitive_ := (C.gboolean)(C.FALSE)
	if draw_sensitive { _cgo_draw_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_view_set_draw_sensitive((*C.GtkCellView)(_self_._value_), _cgo_draw_sensitive_)
	return
}

func (_self_ *GtkCellView) SetFitModel(fit_model bool) () {
	_cgo_fit_model_ := (C.gboolean)(C.FALSE)
	if fit_model { _cgo_fit_model_ = (C.gboolean)(C.TRUE) }
	C.gtk_cell_view_set_fit_model((*C.GtkCellView)(_self_._value_), _cgo_fit_model_)
	return
}

func (_self_ *GtkCellView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_cell_view_set_model((*C.GtkCellView)(_self_._value_), model)
	return
}

func CheckButtonNew() (_go__return__ GtkCheckButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_check_button_new()
	_go__return__ = ToGtkCheckButton(unsafe.Pointer(_return_))
	return
}

func CheckButtonNewWithLabel(label string) (_go__return__ GtkCheckButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_button_new_with_label(_cgo_label_)
	_go__return__ = ToGtkCheckButton(unsafe.Pointer(_return_))
	return
}

func CheckButtonNewWithMnemonic(label string) (_go__return__ GtkCheckButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkCheckButton(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNew() (_go__return__ GtkCheckMenuItem) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_check_menu_item_new()
	_go__return__ = ToGtkCheckMenuItem(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNewWithLabel(label string) (_go__return__ GtkCheckMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_menu_item_new_with_label(_cgo_label_)
	_go__return__ = ToGtkCheckMenuItem(unsafe.Pointer(_return_))
	return
}

func CheckMenuItemNewWithMnemonic(label string) (_go__return__ GtkCheckMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_check_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkCheckMenuItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCheckMenuItem) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_active((*C.GtkCheckMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCheckMenuItem) GetDrawAsRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_draw_as_radio((*C.GtkCheckMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCheckMenuItem) GetInconsistent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_check_menu_item_get_inconsistent((*C.GtkCheckMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCheckMenuItem) SetActive(is_active bool) () {
	_cgo_is_active_ := (C.gboolean)(C.FALSE)
	if is_active { _cgo_is_active_ = (C.gboolean)(C.TRUE) }
	C.gtk_check_menu_item_set_active((*C.GtkCheckMenuItem)(_self_._value_), _cgo_is_active_)
	return
}

func (_self_ *GtkCheckMenuItem) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_draw_as_radio_ := (C.gboolean)(C.FALSE)
	if draw_as_radio { _cgo_draw_as_radio_ = (C.gboolean)(C.TRUE) }
	C.gtk_check_menu_item_set_draw_as_radio((*C.GtkCheckMenuItem)(_self_._value_), _cgo_draw_as_radio_)
	return
}

func (_self_ *GtkCheckMenuItem) SetInconsistent(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_check_menu_item_set_inconsistent((*C.GtkCheckMenuItem)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkCheckMenuItem) Toggled() () {
	C.gtk_check_menu_item_toggled((*C.GtkCheckMenuItem)(_self_._value_))
	return
}

func ClipboardGet(selection C.GdkAtom) (_go__return__ GtkClipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_clipboard_get(selection)
	_go__return__ = ToGtkClipboard(unsafe.Pointer(_return_))
	return
}

func ClipboardGetForDisplay(display *C.GdkDisplay, selection C.GdkAtom) (_go__return__ GtkClipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_clipboard_get_for_display(display, selection)
	_go__return__ = ToGtkClipboard(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkClipboard) Clear() () {
	C.gtk_clipboard_clear((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_clipboard_get_display((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) GetOwner() (_return_ *C.GObject) {
	_return_ = C.gtk_clipboard_get_owner((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) RequestContents(target C.GdkAtom, callback C.GtkClipboardReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_contents((*C.GtkClipboard)(_self_._value_), target, callback, user_data)
	return
}

func (_self_ *GtkClipboard) RequestImage(callback C.GtkClipboardImageReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_image((*C.GtkClipboard)(_self_._value_), callback, user_data)
	return
}

func (_self_ *GtkClipboard) RequestRichText(buffer GtkTextBufferKind, callback C.GtkClipboardRichTextReceivedFunc, user_data C.gpointer) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	C.gtk_clipboard_request_rich_text((*C.GtkClipboard)(_self_._value_), _cgo_buffer_, callback, user_data)
	return
}

func (_self_ *GtkClipboard) RequestTargets(callback C.GtkClipboardTargetsReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_targets((*C.GtkClipboard)(_self_._value_), callback, user_data)
	return
}

func (_self_ *GtkClipboard) RequestText(callback C.GtkClipboardTextReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_text((*C.GtkClipboard)(_self_._value_), callback, user_data)
	return
}

func (_self_ *GtkClipboard) RequestUris(callback C.GtkClipboardURIReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_uris((*C.GtkClipboard)(_self_._value_), callback, user_data)
	return
}

func (_self_ *GtkClipboard) SetImage(pixbuf *C.GdkPixbuf) () {
	C.gtk_clipboard_set_image((*C.GtkClipboard)(_self_._value_), pixbuf)
	return
}

func (_self_ *GtkClipboard) SetText(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_clipboard_set_text((*C.GtkClipboard)(_self_._value_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *GtkClipboard) Store() () {
	C.gtk_clipboard_store((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) WaitForContents(target C.GdkAtom) (_go__return__ *GtkSelectionData) {
	var _return_ *C.GtkSelectionData
	_return_ = C.gtk_clipboard_wait_for_contents((*C.GtkClipboard)(_self_._value_), target)
	_go__return__ = (*GtkSelectionData)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkClipboard) WaitForImage() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_clipboard_wait_for_image((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) WaitForRichText(buffer GtkTextBufferKind) (_return_ *C.guint8, format *C.GdkAtom, _go_length_ uint64) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	var length C.gsize
	_return_ = C.gtk_clipboard_wait_for_rich_text((*C.GtkClipboard)(_self_._value_), _cgo_buffer_, format, &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *GtkClipboard) WaitForText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_clipboard_wait_for_text((*C.GtkClipboard)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkClipboard) WaitForUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_clipboard_wait_for_uris((*C.GtkClipboard)(_self_._value_))
	return
}

func (_self_ *GtkClipboard) WaitIsImageAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_image_available((*C.GtkClipboard)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkClipboard) WaitIsRichTextAvailable(buffer GtkTextBufferKind) (_go__return__ bool) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_rich_text_available((*C.GtkClipboard)(_self_._value_), _cgo_buffer_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkClipboard) WaitIsTargetAvailable(target C.GdkAtom) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_target_available((*C.GtkClipboard)(_self_._value_), target)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkClipboard) WaitIsTextAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_text_available((*C.GtkClipboard)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkClipboard) WaitIsUrisAvailable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_clipboard_wait_is_uris_available((*C.GtkClipboard)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ColorButtonNew() (_go__return__ GtkColorButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_color_button_new()
	_go__return__ = ToGtkColorButton(unsafe.Pointer(_return_))
	return
}

func ColorButtonNewWithRgba(rgba *C.GdkRGBA) (_go__return__ GtkColorButton) {
	var _return_ *C.GtkWidget
	_return_ = C._gtk_color_button_new_with_rgba(rgba)
	_go__return__ = ToGtkColorButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkColorButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_color_button_get_title((*C.GtkColorButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkColorButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_color_button_set_title((*C.GtkColorButton)(_self_._value_), _cgo_title_)
	return
}

func ColorChooserDialogNew(title string, parent GtkWindowKind) (_go__return__ GtkColorChooserDialog) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_color_chooser_dialog_new(_cgo_title_, _cgo_parent_)
	_go__return__ = ToGtkColorChooserDialog(unsafe.Pointer(_return_))
	return
}

func ColorChooserWidgetNew() (_go__return__ GtkColorChooserWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_color_chooser_widget_new()
	_go__return__ = ToGtkColorChooserWidget(unsafe.Pointer(_return_))
	return
}

func ComboBoxNew() (_go__return__ GtkComboBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new()
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithArea(area GtkCellAreaKind) (_go__return__ GtkComboBox) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_area(_cgo_area_)
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithAreaAndEntry(area GtkCellAreaKind) (_go__return__ GtkComboBox) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_area_and_entry(_cgo_area_)
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithEntry() (_go__return__ GtkComboBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_entry()
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithModel(model *C.GtkTreeModel) (_go__return__ GtkComboBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_model(model)
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func ComboBoxNewWithModelAndEntry(model *C.GtkTreeModel) (_go__return__ GtkComboBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_new_with_model_and_entry(model)
	_go__return__ = ToGtkComboBox(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkComboBox) GetActive() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_active((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) GetActiveId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_combo_box_get_active_id((*C.GtkComboBox)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkComboBox) GetActiveIter() (_go__return__ bool, iter *GtkTreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_active_iter((*C.GtkComboBox)(_self_._value_), &_allocated_iter_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) GetAddTearoffs() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_add_tearoffs((*C.GtkComboBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) GetButtonSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_combo_box_get_button_sensitivity((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) GetColumnSpanColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_column_span_column((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) GetEntryTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_entry_text_column((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_focus_on_click((*C.GtkComboBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) GetHasEntry() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_has_entry((*C.GtkComboBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) GetIdColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_id_column((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_combo_box_get_model((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) GetPopupAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_combo_box_get_popup_accessible((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) GetPopupFixedWidth() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_combo_box_get_popup_fixed_width((*C.GtkComboBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_combo_box_get_row_separator_func((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) GetRowSpanColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_row_span_column((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_combo_box_get_title((*C.GtkComboBox)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkComboBox) GetWrapWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_combo_box_get_wrap_width((*C.GtkComboBox)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkComboBox) Popdown() () {
	C.gtk_combo_box_popdown((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) Popup() () {
	C.gtk_combo_box_popup((*C.GtkComboBox)(_self_._value_))
	return
}

func (_self_ *GtkComboBox) PopupForDevice(device *C.GdkDevice) () {
	C.gtk_combo_box_popup_for_device((*C.GtkComboBox)(_self_._value_), device)
	return
}

func (_self_ *GtkComboBox) SetActive(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_combo_box_set_active((*C.GtkComboBox)(_self_._value_), _cgo_index__)
	return
}

func (_self_ *GtkComboBox) SetActiveId(active_id string) (_go__return__ bool) {
	_cstring_active_id_ := C.CString(active_id)
	_cgo_active_id_ := (*C.gchar)(unsafe.Pointer(_cstring_active_id_))
	defer C.free(unsafe.Pointer(_cstring_active_id_))
	var _return_ C.gboolean
	_return_ = C._gtk_combo_box_set_active_id((*C.GtkComboBox)(_self_._value_), _cgo_active_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkComboBox) SetActiveIter(iter *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_combo_box_set_active_iter((*C.GtkComboBox)(_self_._value_), _cgo_iter_)
	return
}

func (_self_ *GtkComboBox) SetAddTearoffs(add_tearoffs bool) () {
	_cgo_add_tearoffs_ := (C.gboolean)(C.FALSE)
	if add_tearoffs { _cgo_add_tearoffs_ = (C.gboolean)(C.TRUE) }
	C.gtk_combo_box_set_add_tearoffs((*C.GtkComboBox)(_self_._value_), _cgo_add_tearoffs_)
	return
}

func (_self_ *GtkComboBox) SetButtonSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_combo_box_set_button_sensitivity((*C.GtkComboBox)(_self_._value_), sensitivity)
	return
}

func (_self_ *GtkComboBox) SetColumnSpanColumn(column_span int) () {
	_cgo_column_span_ := (C.gint)(column_span)
	C.gtk_combo_box_set_column_span_column((*C.GtkComboBox)(_self_._value_), _cgo_column_span_)
	return
}

func (_self_ *GtkComboBox) SetEntryTextColumn(text_column int) () {
	_cgo_text_column_ := (C.gint)(text_column)
	C.gtk_combo_box_set_entry_text_column((*C.GtkComboBox)(_self_._value_), _cgo_text_column_)
	return
}

func (_self_ *GtkComboBox) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := (C.gboolean)(C.FALSE)
	if focus_on_click { _cgo_focus_on_click_ = (C.gboolean)(C.TRUE) }
	C.gtk_combo_box_set_focus_on_click((*C.GtkComboBox)(_self_._value_), _cgo_focus_on_click_)
	return
}

func (_self_ *GtkComboBox) SetIdColumn(id_column int) () {
	_cgo_id_column_ := (C.gint)(id_column)
	C.gtk_combo_box_set_id_column((*C.GtkComboBox)(_self_._value_), _cgo_id_column_)
	return
}

func (_self_ *GtkComboBox) SetModel(model *C.GtkTreeModel) () {
	C.gtk_combo_box_set_model((*C.GtkComboBox)(_self_._value_), model)
	return
}

func (_self_ *GtkComboBox) SetPopupFixedWidth(fixed bool) () {
	_cgo_fixed_ := (C.gboolean)(C.FALSE)
	if fixed { _cgo_fixed_ = (C.gboolean)(C.TRUE) }
	C.gtk_combo_box_set_popup_fixed_width((*C.GtkComboBox)(_self_._value_), _cgo_fixed_)
	return
}

func (_self_ *GtkComboBox) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_combo_box_set_row_separator_func((*C.GtkComboBox)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkComboBox) SetRowSpanColumn(row_span int) () {
	_cgo_row_span_ := (C.gint)(row_span)
	C.gtk_combo_box_set_row_span_column((*C.GtkComboBox)(_self_._value_), _cgo_row_span_)
	return
}

func (_self_ *GtkComboBox) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_combo_box_set_title((*C.GtkComboBox)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkComboBox) SetWrapWidth(width int) () {
	_cgo_width_ := (C.gint)(width)
	C.gtk_combo_box_set_wrap_width((*C.GtkComboBox)(_self_._value_), _cgo_width_)
	return
}

func ComboBoxTextNew() (_go__return__ GtkComboBoxText) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_text_new()
	_go__return__ = ToGtkComboBoxText(unsafe.Pointer(_return_))
	return
}

func ComboBoxTextNewWithEntry() (_go__return__ GtkComboBoxText) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_combo_box_text_new_with_entry()
	_go__return__ = ToGtkComboBoxText(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkComboBoxText) Append(id string, text string) () {
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_append((*C.GtkComboBoxText)(_self_._value_), _cgo_id_, _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) AppendText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_append_text((*C.GtkComboBoxText)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) GetActiveText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_combo_box_text_get_active_text((*C.GtkComboBoxText)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkComboBoxText) Insert(position int, id string, text string) () {
	_cgo_position_ := (C.gint)(position)
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_insert((*C.GtkComboBoxText)(_self_._value_), _cgo_position_, _cgo_id_, _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) InsertText(position int, text string) () {
	_cgo_position_ := (C.gint)(position)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_insert_text((*C.GtkComboBoxText)(_self_._value_), _cgo_position_, _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) Prepend(id string, text string) () {
	_cstring_id_ := C.CString(id)
	_cgo_id_ := (*C.gchar)(unsafe.Pointer(_cstring_id_))
	defer C.free(unsafe.Pointer(_cstring_id_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_prepend((*C.GtkComboBoxText)(_self_._value_), _cgo_id_, _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) PrependText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_combo_box_text_prepend_text((*C.GtkComboBoxText)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkComboBoxText) Remove(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_combo_box_text_remove((*C.GtkComboBoxText)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *GtkComboBoxText) RemoveAll() () {
	C.gtk_combo_box_text_remove_all((*C.GtkComboBoxText)(_self_._value_))
	return
}

func (_self_ *GtkContainer) Add(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_container_add((*C.GtkContainer)(_self_._value_), _cgo_widget_)
	return
}

func (_self_ *GtkContainer) CheckResize() () {
	C.gtk_container_check_resize((*C.GtkContainer)(_self_._value_))
	return
}

func (_self_ *GtkContainer) ChildGetProperty(child GtkWidgetKind, property_name string, value *C.GValue) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_container_child_get_property((*C.GtkContainer)(_self_._value_), _cgo_child_, _cgo_property_name_, value)
	return
}

func (_self_ *GtkContainer) ChildNotify(child GtkWidgetKind, child_property string) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cstring_child_property_ := C.CString(child_property)
	_cgo_child_property_ := (*C.gchar)(unsafe.Pointer(_cstring_child_property_))
	defer C.free(unsafe.Pointer(_cstring_child_property_))
	C._gtk_container_child_notify((*C.GtkContainer)(_self_._value_), _cgo_child_, _cgo_child_property_)
	return
}

func (_self_ *GtkContainer) ChildSetProperty(child GtkWidgetKind, property_name string, value *C.GValue) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_container_child_set_property((*C.GtkContainer)(_self_._value_), _cgo_child_, _cgo_property_name_, value)
	return
}

func (_self_ *GtkContainer) ChildType() (_return_ C.GType) {
	_return_ = C.gtk_container_child_type((*C.GtkContainer)(_self_._value_))
	return
}

func (_self_ *GtkContainer) Forall(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_forall((*C.GtkContainer)(_self_._value_), callback, callback_data)
	return
}

func (_self_ *GtkContainer) Foreach(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_foreach((*C.GtkContainer)(_self_._value_), callback, callback_data)
	return
}

func (_self_ *GtkContainer) GetBorderWidth() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_container_get_border_width((*C.GtkContainer)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkContainer) GetChildren() (_return_ *C.GList) {
	_return_ = C.gtk_container_get_children((*C.GtkContainer)(_self_._value_))
	return
}

func (_self_ *GtkContainer) GetFocusChain() (_go__return__ bool, focusable_widgets unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._gtk_container_get_focus_chain((*C.GtkContainer)(_self_._value_), focusable_widgets)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkContainer) GetFocusChild() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_container_get_focus_child((*C.GtkContainer)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkContainer) GetFocusHadjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_container_get_focus_hadjustment((*C.GtkContainer)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkContainer) GetFocusVadjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_container_get_focus_vadjustment((*C.GtkContainer)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkContainer) GetPathForChild(child GtkWidgetKind) (_go__return__ *GtkWidgetPath) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_container_get_path_for_child((*C.GtkContainer)(_self_._value_), _cgo_child_)
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkContainer) GetResizeMode() (_return_ C.GtkResizeMode) {
	_return_ = C.gtk_container_get_resize_mode((*C.GtkContainer)(_self_._value_))
	return
}

func (_self_ *GtkContainer) PropagateDraw(child GtkWidgetKind, cr *C.cairo_t) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_container_propagate_draw((*C.GtkContainer)(_self_._value_), _cgo_child_, cr)
	return
}

func (_self_ *GtkContainer) Remove(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_container_remove((*C.GtkContainer)(_self_._value_), _cgo_widget_)
	return
}

func (_self_ *GtkContainer) ResizeChildren() () {
	C.gtk_container_resize_children((*C.GtkContainer)(_self_._value_))
	return
}

func (_self_ *GtkContainer) SetBorderWidth(border_width uint) () {
	_cgo_border_width_ := (C.guint)(border_width)
	C.gtk_container_set_border_width((*C.GtkContainer)(_self_._value_), _cgo_border_width_)
	return
}

func (_self_ *GtkContainer) SetFocusChain(focusable_widgets *C.GList) () {
	C.gtk_container_set_focus_chain((*C.GtkContainer)(_self_._value_), focusable_widgets)
	return
}

func (_self_ *GtkContainer) SetFocusChild(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_container_set_focus_child((*C.GtkContainer)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkContainer) SetFocusHadjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_container_set_focus_hadjustment((*C.GtkContainer)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkContainer) SetFocusVadjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_container_set_focus_vadjustment((*C.GtkContainer)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkContainer) SetReallocateRedraws(needs_redraws bool) () {
	_cgo_needs_redraws_ := (C.gboolean)(C.FALSE)
	if needs_redraws { _cgo_needs_redraws_ = (C.gboolean)(C.TRUE) }
	C.gtk_container_set_reallocate_redraws((*C.GtkContainer)(_self_._value_), _cgo_needs_redraws_)
	return
}

func (_self_ *GtkContainer) SetResizeMode(resize_mode C.GtkResizeMode) () {
	C.gtk_container_set_resize_mode((*C.GtkContainer)(_self_._value_), resize_mode)
	return
}

func (_self_ *GtkContainer) UnsetFocusChain() () {
	C.gtk_container_unset_focus_chain((*C.GtkContainer)(_self_._value_))
	return
}

func CssProviderNew() (_go__return__ GtkCssProvider) {
	var _return_ *C.GtkCssProvider
	_return_ = C.gtk_css_provider_new()
	_go__return__ = ToGtkCssProvider(unsafe.Pointer(_return_))
	return
}

func CssProviderGetDefault() (_go__return__ GtkCssProvider) {
	var _return_ *C.GtkCssProvider
	_return_ = C.gtk_css_provider_get_default()
	_go__return__ = ToGtkCssProvider(unsafe.Pointer(_return_))
	return
}

func CssProviderGetNamed(name string, variant string) (_go__return__ GtkCssProvider) {
	var _return_ *C.GtkCssProvider
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_variant_ := C.CString(variant)
	_cgo_variant_ := (*C.gchar)(unsafe.Pointer(_cstring_variant_))
	defer C.free(unsafe.Pointer(_cstring_variant_))
	_return_ = C._gtk_css_provider_get_named(_cgo_name_, _cgo_variant_)
	_go__return__ = ToGtkCssProvider(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCssProvider) LoadFromFile(file *C.GFile) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._gtk_css_provider_load_from_file((*C.GtkCssProvider)(_self_._value_), file, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCssProvider) LoadFromPath(path string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._gtk_css_provider_load_from_path((*C.GtkCssProvider)(_self_._value_), _cgo_path_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkCssProvider) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_css_provider_to_string((*C.GtkCssProvider)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DialogNew() (_go__return__ GtkDialog) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_new()
	_go__return__ = ToGtkDialog(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkDialog) AddActionWidget(child GtkWidgetKind, response_id int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_add_action_widget((*C.GtkDialog)(_self_._value_), _cgo_child_, _cgo_response_id_)
	return
}

func (_self_ *GtkDialog) AddButton(button_text string, response_id int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_cstring_button_text_ := C.CString(button_text)
	_cgo_button_text_ := (*C.gchar)(unsafe.Pointer(_cstring_button_text_))
	defer C.free(unsafe.Pointer(_cstring_button_text_))
	_return_ = C._gtk_dialog_add_button((*C.GtkDialog)(_self_._value_), _cgo_button_text_, _cgo_response_id_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkDialog) GetActionArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_get_action_area((*C.GtkDialog)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkDialog) GetContentArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_dialog_get_content_area((*C.GtkDialog)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkDialog) GetResponseForWidget(widget GtkWidgetKind) (_go__return__ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ C.gint
	_return_ = C.gtk_dialog_get_response_for_widget((*C.GtkDialog)(_self_._value_), _cgo_widget_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkDialog) GetWidgetForResponse(response_id int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_return_ = C.gtk_dialog_get_widget_for_response((*C.GtkDialog)(_self_._value_), _cgo_response_id_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkDialog) Response(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_response((*C.GtkDialog)(_self_._value_), _cgo_response_id_)
	return
}

func (_self_ *GtkDialog) Run() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_dialog_run((*C.GtkDialog)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkDialog) SetDefaultResponse(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_dialog_set_default_response((*C.GtkDialog)(_self_._value_), _cgo_response_id_)
	return
}

func (_self_ *GtkDialog) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_response_id_ := (C.gint)(response_id)
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_dialog_set_response_sensitive((*C.GtkDialog)(_self_._value_), _cgo_response_id_, _cgo_setting_)
	return
}

func DrawingAreaNew() (_go__return__ GtkDrawingArea) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_drawing_area_new()
	_go__return__ = ToGtkDrawingArea(unsafe.Pointer(_return_))
	return
}

func EntryNew() (_go__return__ GtkEntry) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_new()
	_go__return__ = ToGtkEntry(unsafe.Pointer(_return_))
	return
}

func EntryNewWithBuffer(buffer GtkEntryBufferKind) (_go__return__ GtkEntry) {
	_cgo_buffer_ := (*C.GtkEntryBuffer)(buffer._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_new_with_buffer(_cgo_buffer_)
	_go__return__ = ToGtkEntry(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntry) GetActivatesDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_activates_default((*C.GtkEntry)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_entry_get_alignment((*C.GtkEntry)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkEntry) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_entry_get_attributes((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) GetBuffer() (_go__return__ GtkEntryBuffer) {
	var _return_ *C.GtkEntryBuffer
	_return_ = C.gtk_entry_get_buffer((*C.GtkEntry)(_self_._value_))
	_go__return__ = ToGtkEntryBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntry) GetCompletion() (_go__return__ GtkEntryCompletion) {
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_get_completion((*C.GtkEntry)(_self_._value_))
	_go__return__ = ToGtkEntryCompletion(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntry) GetCurrentIconDragSource() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_current_icon_drag_source((*C.GtkEntry)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) GetCursorHadjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_entry_get_cursor_hadjustment((*C.GtkEntry)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntry) GetHasFrame() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_has_frame((*C.GtkEntry)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetIconActivatable(icon_pos C.GtkEntryIconPosition) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_icon_activatable((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetIconArea(icon_pos C.GtkEntryIconPosition) (icon_area *C.GdkRectangle) {
	C.gtk_entry_get_icon_area((*C.GtkEntry)(_self_._value_), icon_pos, icon_area)
	return
}

func (_self_ *GtkEntry) GetIconAtPos(x int, y int) (_go__return__ int) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gint
	_return_ = C.gtk_entry_get_icon_at_pos((*C.GtkEntry)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) GetIconGicon(icon_pos C.GtkEntryIconPosition) (_return_ *C.GIcon) {
	_return_ = C.gtk_entry_get_icon_gicon((*C.GtkEntry)(_self_._value_), icon_pos)
	return
}

func (_self_ *GtkEntry) GetIconName(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_icon_name((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetIconPixbuf(icon_pos C.GtkEntryIconPosition) (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_entry_get_icon_pixbuf((*C.GtkEntry)(_self_._value_), icon_pos)
	return
}

func (_self_ *GtkEntry) GetIconSensitive(icon_pos C.GtkEntryIconPosition) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_icon_sensitive((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetIconStock(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_icon_stock((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetIconStorageType(icon_pos C.GtkEntryIconPosition) (_return_ C.GtkImageType) {
	_return_ = C.gtk_entry_get_icon_storage_type((*C.GtkEntry)(_self_._value_), icon_pos)
	return
}

func (_self_ *GtkEntry) GetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_entry_get_icon_tooltip_markup((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetIconTooltipText(icon_pos C.GtkEntryIconPosition) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_entry_get_icon_tooltip_text((*C.GtkEntry)(_self_._value_), icon_pos)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_entry_get_input_hints((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_entry_get_input_purpose((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) GetInvisibleChar() (_return_ C.gunichar) {
	_return_ = C.gtk_entry_get_invisible_char((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_entry_get_layout((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_entry_get_layout_offsets((*C.GtkEntry)(_self_._value_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *GtkEntry) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_max_length((*C.GtkEntry)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) GetOverwriteMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_overwrite_mode((*C.GtkEntry)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetPlaceholderText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_placeholder_text((*C.GtkEntry)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetProgressFraction() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_entry_get_progress_fraction((*C.GtkEntry)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkEntry) GetProgressPulseStep() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_entry_get_progress_pulse_step((*C.GtkEntry)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkEntry) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_get_text((*C.GtkEntry)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntry) GetTextArea() (text_area *C.GdkRectangle) {
	C.gtk_entry_get_text_area((*C.GtkEntry)(_self_._value_), text_area)
	return
}

func (_self_ *GtkEntry) GetTextLength() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.gtk_entry_get_text_length((*C.GtkEntry)(_self_._value_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *GtkEntry) GetVisibility() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_get_visibility((*C.GtkEntry)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_get_width_chars((*C.GtkEntry)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) ImContextFilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_im_context_filter_keypress((*C.GtkEntry)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntry) LayoutIndexToTextIndex(layout_index int) (_go__return__ int) {
	_cgo_layout_index_ := (C.gint)(layout_index)
	var _return_ C.gint
	_return_ = C.gtk_entry_layout_index_to_text_index((*C.GtkEntry)(_self_._value_), _cgo_layout_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) ProgressPulse() () {
	C.gtk_entry_progress_pulse((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) ResetImContext() () {
	C.gtk_entry_reset_im_context((*C.GtkEntry)(_self_._value_))
	return
}

func (_self_ *GtkEntry) SetActivatesDefault(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_activates_default((*C.GtkEntry)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkEntry) SetAlignment(xalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	C.gtk_entry_set_alignment((*C.GtkEntry)(_self_._value_), _cgo_xalign_)
	return
}

func (_self_ *GtkEntry) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_entry_set_attributes((*C.GtkEntry)(_self_._value_), attrs)
	return
}

func (_self_ *GtkEntry) SetBuffer(buffer GtkEntryBufferKind) () {
	_cgo_buffer_ := (*C.GtkEntryBuffer)(buffer._getValue())
	C.gtk_entry_set_buffer((*C.GtkEntry)(_self_._value_), _cgo_buffer_)
	return
}

func (_self_ *GtkEntry) SetCompletion(completion GtkEntryCompletionKind) () {
	_cgo_completion_ := (*C.GtkEntryCompletion)(completion._getValue())
	C.gtk_entry_set_completion((*C.GtkEntry)(_self_._value_), _cgo_completion_)
	return
}

func (_self_ *GtkEntry) SetCursorHadjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_entry_set_cursor_hadjustment((*C.GtkEntry)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkEntry) SetHasFrame(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_has_frame((*C.GtkEntry)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkEntry) SetIconActivatable(icon_pos C.GtkEntryIconPosition, activatable bool) () {
	_cgo_activatable_ := (C.gboolean)(C.FALSE)
	if activatable { _cgo_activatable_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_icon_activatable((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_activatable_)
	return
}

func (_self_ *GtkEntry) SetIconDragSource(icon_pos C.GtkEntryIconPosition, target_list *GtkTargetList, actions C.GdkDragAction) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_entry_set_icon_drag_source((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_target_list_, actions)
	return
}

func (_self_ *GtkEntry) SetIconFromGicon(icon_pos C.GtkEntryIconPosition, icon *C.GIcon) () {
	C.gtk_entry_set_icon_from_gicon((*C.GtkEntry)(_self_._value_), icon_pos, icon)
	return
}

func (_self_ *GtkEntry) SetIconFromIconName(icon_pos C.GtkEntryIconPosition, icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_entry_set_icon_from_icon_name((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_icon_name_)
	return
}

func (_self_ *GtkEntry) SetIconFromPixbuf(icon_pos C.GtkEntryIconPosition, pixbuf *C.GdkPixbuf) () {
	C.gtk_entry_set_icon_from_pixbuf((*C.GtkEntry)(_self_._value_), icon_pos, pixbuf)
	return
}

func (_self_ *GtkEntry) SetIconFromStock(icon_pos C.GtkEntryIconPosition, stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_entry_set_icon_from_stock((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_stock_id_)
	return
}

func (_self_ *GtkEntry) SetIconSensitive(icon_pos C.GtkEntryIconPosition, sensitive bool) () {
	_cgo_sensitive_ := (C.gboolean)(C.FALSE)
	if sensitive { _cgo_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_icon_sensitive((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_sensitive_)
	return
}

func (_self_ *GtkEntry) SetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_entry_set_icon_tooltip_markup((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_tooltip_)
	return
}

func (_self_ *GtkEntry) SetIconTooltipText(icon_pos C.GtkEntryIconPosition, tooltip string) () {
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	C._gtk_entry_set_icon_tooltip_text((*C.GtkEntry)(_self_._value_), icon_pos, _cgo_tooltip_)
	return
}

func (_self_ *GtkEntry) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_entry_set_input_hints((*C.GtkEntry)(_self_._value_), hints)
	return
}

func (_self_ *GtkEntry) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_entry_set_input_purpose((*C.GtkEntry)(_self_._value_), purpose)
	return
}

func (_self_ *GtkEntry) SetInvisibleChar(ch C.gunichar) () {
	C.gtk_entry_set_invisible_char((*C.GtkEntry)(_self_._value_), ch)
	return
}

func (_self_ *GtkEntry) SetMaxLength(max int) () {
	_cgo_max_ := (C.gint)(max)
	C.gtk_entry_set_max_length((*C.GtkEntry)(_self_._value_), _cgo_max_)
	return
}

func (_self_ *GtkEntry) SetOverwriteMode(overwrite bool) () {
	_cgo_overwrite_ := (C.gboolean)(C.FALSE)
	if overwrite { _cgo_overwrite_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_overwrite_mode((*C.GtkEntry)(_self_._value_), _cgo_overwrite_)
	return
}

func (_self_ *GtkEntry) SetPlaceholderText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_set_placeholder_text((*C.GtkEntry)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkEntry) SetProgressFraction(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_entry_set_progress_fraction((*C.GtkEntry)(_self_._value_), _cgo_fraction_)
	return
}

func (_self_ *GtkEntry) SetProgressPulseStep(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_entry_set_progress_pulse_step((*C.GtkEntry)(_self_._value_), _cgo_fraction_)
	return
}

func (_self_ *GtkEntry) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_set_text((*C.GtkEntry)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkEntry) SetVisibility(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_set_visibility((*C.GtkEntry)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkEntry) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_entry_set_width_chars((*C.GtkEntry)(_self_._value_), _cgo_n_chars_)
	return
}

func (_self_ *GtkEntry) TextIndexToLayoutIndex(text_index int) (_go__return__ int) {
	_cgo_text_index_ := (C.gint)(text_index)
	var _return_ C.gint
	_return_ = C.gtk_entry_text_index_to_layout_index((*C.GtkEntry)(_self_._value_), _cgo_text_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntry) UnsetInvisibleChar() () {
	C.gtk_entry_unset_invisible_char((*C.GtkEntry)(_self_._value_))
	return
}

func EntryBufferNew(initial_chars string, n_initial_chars int) (_go__return__ GtkEntryBuffer) {
	var _return_ *C.GtkEntryBuffer
	_cgo_n_initial_chars_ := (C.gint)(n_initial_chars)
	_cstring_initial_chars_ := C.CString(initial_chars)
	_cgo_initial_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_initial_chars_))
	defer C.free(unsafe.Pointer(_cstring_initial_chars_))
	_return_ = C._gtk_entry_buffer_new(_cgo_initial_chars_, _cgo_n_initial_chars_)
	_go__return__ = ToGtkEntryBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntryBuffer) DeleteText(position uint, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_return_ = C.gtk_entry_buffer_delete_text((*C.GtkEntryBuffer)(_self_._value_), _cgo_position_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkEntryBuffer) EmitDeletedText(position uint, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	C.gtk_entry_buffer_emit_deleted_text((*C.GtkEntryBuffer)(_self_._value_), _cgo_position_, _cgo_n_chars_)
	return
}

func (_self_ *GtkEntryBuffer) EmitInsertedText(position uint, chars string, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._gtk_entry_buffer_emit_inserted_text((*C.GtkEntryBuffer)(_self_._value_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	return
}

func (_self_ *GtkEntryBuffer) GetBytes() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.gtk_entry_buffer_get_bytes((*C.GtkEntryBuffer)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *GtkEntryBuffer) GetLength() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_entry_buffer_get_length((*C.GtkEntryBuffer)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkEntryBuffer) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_buffer_get_max_length((*C.GtkEntryBuffer)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntryBuffer) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_buffer_get_text((*C.GtkEntryBuffer)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntryBuffer) InsertText(position uint, chars string, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	_return_ = C._gtk_entry_buffer_insert_text((*C.GtkEntryBuffer)(_self_._value_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkEntryBuffer) SetMaxLength(max_length int) () {
	_cgo_max_length_ := (C.gint)(max_length)
	C.gtk_entry_buffer_set_max_length((*C.GtkEntryBuffer)(_self_._value_), _cgo_max_length_)
	return
}

func (_self_ *GtkEntryBuffer) SetText(chars string, n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._gtk_entry_buffer_set_text((*C.GtkEntryBuffer)(_self_._value_), _cgo_chars_, _cgo_n_chars_)
	return
}

func EntryCompletionNew() (_go__return__ GtkEntryCompletion) {
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_completion_new()
	_go__return__ = ToGtkEntryCompletion(unsafe.Pointer(_return_))
	return
}

func EntryCompletionNewWithArea(area GtkCellAreaKind) (_go__return__ GtkEntryCompletion) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	var _return_ *C.GtkEntryCompletion
	_return_ = C.gtk_entry_completion_new_with_area(_cgo_area_)
	_go__return__ = ToGtkEntryCompletion(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntryCompletion) Complete() () {
	C.gtk_entry_completion_complete((*C.GtkEntryCompletion)(_self_._value_))
	return
}

func (_self_ *GtkEntryCompletion) ComputePrefix(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.char)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.gchar
	_return_ = C._gtk_entry_completion_compute_prefix((*C.GtkEntryCompletion)(_self_._value_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntryCompletion) DeleteAction(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_entry_completion_delete_action((*C.GtkEntryCompletion)(_self_._value_), _cgo_index__)
	return
}

func (_self_ *GtkEntryCompletion) GetCompletionPrefix() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_entry_completion_get_completion_prefix((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkEntryCompletion) GetEntry() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_entry_completion_get_entry((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEntryCompletion) GetInlineCompletion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_inline_completion((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntryCompletion) GetInlineSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_inline_selection((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntryCompletion) GetMinimumKeyLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_completion_get_minimum_key_length((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntryCompletion) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_entry_completion_get_model((*C.GtkEntryCompletion)(_self_._value_))
	return
}

func (_self_ *GtkEntryCompletion) GetPopupCompletion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_completion((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntryCompletion) GetPopupSetWidth() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_set_width((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntryCompletion) GetPopupSingleMatch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_entry_completion_get_popup_single_match((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEntryCompletion) GetTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_entry_completion_get_text_column((*C.GtkEntryCompletion)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkEntryCompletion) InsertActionMarkup(index_ int, markup string) () {
	_cgo_index__ := (C.gint)(index_)
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_entry_completion_insert_action_markup((*C.GtkEntryCompletion)(_self_._value_), _cgo_index__, _cgo_markup_)
	return
}

func (_self_ *GtkEntryCompletion) InsertActionText(index_ int, text string) () {
	_cgo_index__ := (C.gint)(index_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_entry_completion_insert_action_text((*C.GtkEntryCompletion)(_self_._value_), _cgo_index__, _cgo_text_)
	return
}

func (_self_ *GtkEntryCompletion) InsertPrefix() () {
	C.gtk_entry_completion_insert_prefix((*C.GtkEntryCompletion)(_self_._value_))
	return
}

func (_self_ *GtkEntryCompletion) SetInlineCompletion(inline_completion bool) () {
	_cgo_inline_completion_ := (C.gboolean)(C.FALSE)
	if inline_completion { _cgo_inline_completion_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_completion_set_inline_completion((*C.GtkEntryCompletion)(_self_._value_), _cgo_inline_completion_)
	return
}

func (_self_ *GtkEntryCompletion) SetInlineSelection(inline_selection bool) () {
	_cgo_inline_selection_ := (C.gboolean)(C.FALSE)
	if inline_selection { _cgo_inline_selection_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_completion_set_inline_selection((*C.GtkEntryCompletion)(_self_._value_), _cgo_inline_selection_)
	return
}

func (_self_ *GtkEntryCompletion) SetMatchFunc(func_ C.GtkEntryCompletionMatchFunc, func_data C.gpointer, func_notify C.GDestroyNotify) () {
	C.gtk_entry_completion_set_match_func((*C.GtkEntryCompletion)(_self_._value_), func_, func_data, func_notify)
	return
}

func (_self_ *GtkEntryCompletion) SetMinimumKeyLength(length int) () {
	_cgo_length_ := (C.gint)(length)
	C.gtk_entry_completion_set_minimum_key_length((*C.GtkEntryCompletion)(_self_._value_), _cgo_length_)
	return
}

func (_self_ *GtkEntryCompletion) SetModel(model *C.GtkTreeModel) () {
	C.gtk_entry_completion_set_model((*C.GtkEntryCompletion)(_self_._value_), model)
	return
}

func (_self_ *GtkEntryCompletion) SetPopupCompletion(popup_completion bool) () {
	_cgo_popup_completion_ := (C.gboolean)(C.FALSE)
	if popup_completion { _cgo_popup_completion_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_completion_set_popup_completion((*C.GtkEntryCompletion)(_self_._value_), _cgo_popup_completion_)
	return
}

func (_self_ *GtkEntryCompletion) SetPopupSetWidth(popup_set_width bool) () {
	_cgo_popup_set_width_ := (C.gboolean)(C.FALSE)
	if popup_set_width { _cgo_popup_set_width_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_completion_set_popup_set_width((*C.GtkEntryCompletion)(_self_._value_), _cgo_popup_set_width_)
	return
}

func (_self_ *GtkEntryCompletion) SetPopupSingleMatch(popup_single_match bool) () {
	_cgo_popup_single_match_ := (C.gboolean)(C.FALSE)
	if popup_single_match { _cgo_popup_single_match_ = (C.gboolean)(C.TRUE) }
	C.gtk_entry_completion_set_popup_single_match((*C.GtkEntryCompletion)(_self_._value_), _cgo_popup_single_match_)
	return
}

func (_self_ *GtkEntryCompletion) SetTextColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_entry_completion_set_text_column((*C.GtkEntryCompletion)(_self_._value_), _cgo_column_)
	return
}

func EventBoxNew() (_go__return__ GtkEventBox) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_event_box_new()
	_go__return__ = ToGtkEventBox(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkEventBox) GetAboveChild() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_event_box_get_above_child((*C.GtkEventBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEventBox) GetVisibleWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_event_box_get_visible_window((*C.GtkEventBox)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkEventBox) SetAboveChild(above_child bool) () {
	_cgo_above_child_ := (C.gboolean)(C.FALSE)
	if above_child { _cgo_above_child_ = (C.gboolean)(C.TRUE) }
	C.gtk_event_box_set_above_child((*C.GtkEventBox)(_self_._value_), _cgo_above_child_)
	return
}

func (_self_ *GtkEventBox) SetVisibleWindow(visible_window bool) () {
	_cgo_visible_window_ := (C.gboolean)(C.FALSE)
	if visible_window { _cgo_visible_window_ = (C.gboolean)(C.TRUE) }
	C.gtk_event_box_set_visible_window((*C.GtkEventBox)(_self_._value_), _cgo_visible_window_)
	return
}

func ExpanderNew(label string) (_go__return__ GtkExpander) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_expander_new(_cgo_label_)
	_go__return__ = ToGtkExpander(unsafe.Pointer(_return_))
	return
}

func ExpanderNewWithMnemonic(label string) (_go__return__ GtkExpander) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_expander_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkExpander(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkExpander) GetExpanded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_expanded((*C.GtkExpander)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkExpander) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_expander_get_label((*C.GtkExpander)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkExpander) GetLabelFill() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_label_fill((*C.GtkExpander)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkExpander) GetLabelWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_expander_get_label_widget((*C.GtkExpander)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkExpander) GetResizeToplevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_resize_toplevel((*C.GtkExpander)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkExpander) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_expander_get_spacing((*C.GtkExpander)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkExpander) GetUseMarkup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_use_markup((*C.GtkExpander)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkExpander) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_expander_get_use_underline((*C.GtkExpander)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkExpander) SetExpanded(expanded bool) () {
	_cgo_expanded_ := (C.gboolean)(C.FALSE)
	if expanded { _cgo_expanded_ = (C.gboolean)(C.TRUE) }
	C.gtk_expander_set_expanded((*C.GtkExpander)(_self_._value_), _cgo_expanded_)
	return
}

func (_self_ *GtkExpander) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_expander_set_label((*C.GtkExpander)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkExpander) SetLabelFill(label_fill bool) () {
	_cgo_label_fill_ := (C.gboolean)(C.FALSE)
	if label_fill { _cgo_label_fill_ = (C.gboolean)(C.TRUE) }
	C.gtk_expander_set_label_fill((*C.GtkExpander)(_self_._value_), _cgo_label_fill_)
	return
}

func (_self_ *GtkExpander) SetLabelWidget(label_widget GtkWidgetKind) () {
	_cgo_label_widget_ := (*C.GtkWidget)(label_widget._getValue())
	C.gtk_expander_set_label_widget((*C.GtkExpander)(_self_._value_), _cgo_label_widget_)
	return
}

func (_self_ *GtkExpander) SetResizeToplevel(resize_toplevel bool) () {
	_cgo_resize_toplevel_ := (C.gboolean)(C.FALSE)
	if resize_toplevel { _cgo_resize_toplevel_ = (C.gboolean)(C.TRUE) }
	C.gtk_expander_set_resize_toplevel((*C.GtkExpander)(_self_._value_), _cgo_resize_toplevel_)
	return
}

func (_self_ *GtkExpander) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_expander_set_spacing((*C.GtkExpander)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GtkExpander) SetUseMarkup(use_markup bool) () {
	_cgo_use_markup_ := (C.gboolean)(C.FALSE)
	if use_markup { _cgo_use_markup_ = (C.gboolean)(C.TRUE) }
	C.gtk_expander_set_use_markup((*C.GtkExpander)(_self_._value_), _cgo_use_markup_)
	return
}

func (_self_ *GtkExpander) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := (C.gboolean)(C.FALSE)
	if use_underline { _cgo_use_underline_ = (C.gboolean)(C.TRUE) }
	C.gtk_expander_set_use_underline((*C.GtkExpander)(_self_._value_), _cgo_use_underline_)
	return
}

func FileChooserButtonNew(title string, action C.GtkFileChooserAction) (_go__return__ GtkFileChooserButton) {
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_file_chooser_button_new(_cgo_title_, action)
	_go__return__ = ToGtkFileChooserButton(unsafe.Pointer(_return_))
	return
}

func FileChooserButtonNewWithDialog(dialog GtkWidgetKind) (_go__return__ GtkFileChooserButton) {
	_cgo_dialog_ := (*C.GtkWidget)(dialog._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_file_chooser_button_new_with_dialog(_cgo_dialog_)
	_go__return__ = ToGtkFileChooserButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFileChooserButton) GetFocusOnClick() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_file_chooser_button_get_focus_on_click((*C.GtkFileChooserButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFileChooserButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_file_chooser_button_get_title((*C.GtkFileChooserButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkFileChooserButton) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_file_chooser_button_get_width_chars((*C.GtkFileChooserButton)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkFileChooserButton) SetFocusOnClick(focus_on_click bool) () {
	_cgo_focus_on_click_ := (C.gboolean)(C.FALSE)
	if focus_on_click { _cgo_focus_on_click_ = (C.gboolean)(C.TRUE) }
	C.gtk_file_chooser_button_set_focus_on_click((*C.GtkFileChooserButton)(_self_._value_), _cgo_focus_on_click_)
	return
}

func (_self_ *GtkFileChooserButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_file_chooser_button_set_title((*C.GtkFileChooserButton)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkFileChooserButton) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_file_chooser_button_set_width_chars((*C.GtkFileChooserButton)(_self_._value_), _cgo_n_chars_)
	return
}

func FileChooserWidgetNew(action C.GtkFileChooserAction) (_go__return__ GtkFileChooserWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_file_chooser_widget_new(action)
	_go__return__ = ToGtkFileChooserWidget(unsafe.Pointer(_return_))
	return
}

func FileFilterNew() (_go__return__ GtkFileFilter) {
	var _return_ *C.GtkFileFilter
	_return_ = C.gtk_file_filter_new()
	_go__return__ = ToGtkFileFilter(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFileFilter) AddCustom(needed C.GtkFileFilterFlags, func_ C.GtkFileFilterFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_file_filter_add_custom((*C.GtkFileFilter)(_self_._value_), needed, func_, data, notify)
	return
}

func (_self_ *GtkFileFilter) AddMimeType(mime_type string) () {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	C._gtk_file_filter_add_mime_type((*C.GtkFileFilter)(_self_._value_), _cgo_mime_type_)
	return
}

func (_self_ *GtkFileFilter) AddPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_file_filter_add_pattern((*C.GtkFileFilter)(_self_._value_), _cgo_pattern_)
	return
}

func (_self_ *GtkFileFilter) AddPixbufFormats() () {
	C.gtk_file_filter_add_pixbuf_formats((*C.GtkFileFilter)(_self_._value_))
	return
}

func (_self_ *GtkFileFilter) Filter(filter_info *GtkFileFilterInfo) (_go__return__ bool) {
	_cgo_filter_info_ := (*C.GtkFileFilterInfo)(unsafe.Pointer(filter_info))
	var _return_ C.gboolean
	_return_ = C._gtk_file_filter_filter((*C.GtkFileFilter)(_self_._value_), _cgo_filter_info_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFileFilter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_file_filter_get_name((*C.GtkFileFilter)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkFileFilter) GetNeeded() (_return_ C.GtkFileFilterFlags) {
	_return_ = C.gtk_file_filter_get_needed((*C.GtkFileFilter)(_self_._value_))
	return
}

func (_self_ *GtkFileFilter) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_file_filter_set_name((*C.GtkFileFilter)(_self_._value_), _cgo_name_)
	return
}

func FixedNew() (_go__return__ GtkFixed) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_fixed_new()
	_go__return__ = ToGtkFixed(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFixed) Move(widget GtkWidgetKind, x int, y int) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_fixed_move((*C.GtkFixed)(_self_._value_), _cgo_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *GtkFixed) Put(widget GtkWidgetKind, x int, y int) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_fixed_put((*C.GtkFixed)(_self_._value_), _cgo_widget_, _cgo_x_, _cgo_y_)
	return
}

func FontButtonNew() (_go__return__ GtkFontButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_font_button_new()
	_go__return__ = ToGtkFontButton(unsafe.Pointer(_return_))
	return
}

func FontButtonNewWithFont(fontname string) (_go__return__ GtkFontButton) {
	var _return_ *C.GtkWidget
	_cstring_fontname_ := C.CString(fontname)
	_cgo_fontname_ := (*C.gchar)(unsafe.Pointer(_cstring_fontname_))
	defer C.free(unsafe.Pointer(_cstring_fontname_))
	_return_ = C._gtk_font_button_new_with_font(_cgo_fontname_)
	_go__return__ = ToGtkFontButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFontButton) GetFontName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_font_button_get_font_name((*C.GtkFontButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkFontButton) GetShowSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_show_size((*C.GtkFontButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFontButton) GetShowStyle() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_show_style((*C.GtkFontButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFontButton) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_font_button_get_title((*C.GtkFontButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkFontButton) GetUseFont() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_use_font((*C.GtkFontButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFontButton) GetUseSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_font_button_get_use_size((*C.GtkFontButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFontButton) SetFontName(fontname string) (_go__return__ bool) {
	_cstring_fontname_ := C.CString(fontname)
	_cgo_fontname_ := (*C.gchar)(unsafe.Pointer(_cstring_fontname_))
	defer C.free(unsafe.Pointer(_cstring_fontname_))
	var _return_ C.gboolean
	_return_ = C._gtk_font_button_set_font_name((*C.GtkFontButton)(_self_._value_), _cgo_fontname_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkFontButton) SetShowSize(show_size bool) () {
	_cgo_show_size_ := (C.gboolean)(C.FALSE)
	if show_size { _cgo_show_size_ = (C.gboolean)(C.TRUE) }
	C.gtk_font_button_set_show_size((*C.GtkFontButton)(_self_._value_), _cgo_show_size_)
	return
}

func (_self_ *GtkFontButton) SetShowStyle(show_style bool) () {
	_cgo_show_style_ := (C.gboolean)(C.FALSE)
	if show_style { _cgo_show_style_ = (C.gboolean)(C.TRUE) }
	C.gtk_font_button_set_show_style((*C.GtkFontButton)(_self_._value_), _cgo_show_style_)
	return
}

func (_self_ *GtkFontButton) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_font_button_set_title((*C.GtkFontButton)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkFontButton) SetUseFont(use_font bool) () {
	_cgo_use_font_ := (C.gboolean)(C.FALSE)
	if use_font { _cgo_use_font_ = (C.gboolean)(C.TRUE) }
	C.gtk_font_button_set_use_font((*C.GtkFontButton)(_self_._value_), _cgo_use_font_)
	return
}

func (_self_ *GtkFontButton) SetUseSize(use_size bool) () {
	_cgo_use_size_ := (C.gboolean)(C.FALSE)
	if use_size { _cgo_use_size_ = (C.gboolean)(C.TRUE) }
	C.gtk_font_button_set_use_size((*C.GtkFontButton)(_self_._value_), _cgo_use_size_)
	return
}

func FontChooserDialogNew(title string, parent GtkWindowKind) (_go__return__ GtkFontChooserDialog) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	var _return_ *C.GtkWidget
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_font_chooser_dialog_new(_cgo_title_, _cgo_parent_)
	_go__return__ = ToGtkFontChooserDialog(unsafe.Pointer(_return_))
	return
}

func FontChooserWidgetNew() (_go__return__ GtkFontChooserWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_font_chooser_widget_new()
	_go__return__ = ToGtkFontChooserWidget(unsafe.Pointer(_return_))
	return
}

func FrameNew(label string) (_go__return__ GtkFrame) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_frame_new(_cgo_label_)
	_go__return__ = ToGtkFrame(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFrame) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_frame_get_label((*C.GtkFrame)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkFrame) GetLabelAlign() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_frame_get_label_align((*C.GtkFrame)(_self_._value_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *GtkFrame) GetLabelWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_frame_get_label_widget((*C.GtkFrame)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkFrame) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_frame_get_shadow_type((*C.GtkFrame)(_self_._value_))
	return
}

func (_self_ *GtkFrame) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_frame_set_label((*C.GtkFrame)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkFrame) SetLabelAlign(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_frame_set_label_align((*C.GtkFrame)(_self_._value_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *GtkFrame) SetLabelWidget(label_widget GtkWidgetKind) () {
	_cgo_label_widget_ := (*C.GtkWidget)(label_widget._getValue())
	C.gtk_frame_set_label_widget((*C.GtkFrame)(_self_._value_), _cgo_label_widget_)
	return
}

func (_self_ *GtkFrame) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_frame_set_shadow_type((*C.GtkFrame)(_self_._value_), type_)
	return
}

func GridNew() (_go__return__ GtkGrid) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_grid_new()
	_go__return__ = ToGtkGrid(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkGrid) Attach(child GtkWidgetKind, left int, top int, width int, height int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_grid_attach((*C.GtkGrid)(_self_._value_), _cgo_child_, _cgo_left_, _cgo_top_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkGrid) AttachNextTo(child GtkWidgetKind, sibling GtkWidgetKind, side C.GtkPositionType, width int, height int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_sibling_ := (*C.GtkWidget)(sibling._getValue())
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_grid_attach_next_to((*C.GtkGrid)(_self_._value_), _cgo_child_, _cgo_sibling_, side, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkGrid) GetChildAt(left int, top int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_return_ = C.gtk_grid_get_child_at((*C.GtkGrid)(_self_._value_), _cgo_left_, _cgo_top_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkGrid) GetColumnHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_grid_get_column_homogeneous((*C.GtkGrid)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkGrid) GetColumnSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_grid_get_column_spacing((*C.GtkGrid)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkGrid) GetRowHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_grid_get_row_homogeneous((*C.GtkGrid)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkGrid) GetRowSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_grid_get_row_spacing((*C.GtkGrid)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkGrid) InsertColumn(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_grid_insert_column((*C.GtkGrid)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *GtkGrid) InsertNextTo(sibling GtkWidgetKind, side C.GtkPositionType) () {
	_cgo_sibling_ := (*C.GtkWidget)(sibling._getValue())
	C.gtk_grid_insert_next_to((*C.GtkGrid)(_self_._value_), _cgo_sibling_, side)
	return
}

func (_self_ *GtkGrid) InsertRow(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_grid_insert_row((*C.GtkGrid)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *GtkGrid) SetColumnHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.gtk_grid_set_column_homogeneous((*C.GtkGrid)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GtkGrid) SetColumnSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.gtk_grid_set_column_spacing((*C.GtkGrid)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GtkGrid) SetRowHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.gtk_grid_set_row_homogeneous((*C.GtkGrid)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GtkGrid) SetRowSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.gtk_grid_set_row_spacing((*C.GtkGrid)(_self_._value_), _cgo_spacing_)
	return
}

func HSVToRgb(h float64, s float64, v float64) (_go_r_ float64, _go_g_ float64, _go_b_ float64) {
	_cgo_h_ := (C.gdouble)(h)
	_cgo_s_ := (C.gdouble)(s)
	_cgo_v_ := (C.gdouble)(v)
	var r C.gdouble
	var g C.gdouble
	var b C.gdouble
	C.gtk_hsv_to_rgb(_cgo_h_, _cgo_s_, _cgo_v_, &r, &g, &b)
	_go_r_ = (float64)(r)
	_go_g_ = (float64)(g)
	_go_b_ = (float64)(b)
	return
}

func (_self_ *GtkIMContext) DeleteSurrounding(offset int, n_chars int) (_go__return__ bool) {
	_cgo_offset_ := (C.gint)(offset)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.gboolean
	_return_ = C.gtk_im_context_delete_surrounding((*C.GtkIMContext)(_self_._value_), _cgo_offset_, _cgo_n_chars_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIMContext) FilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_im_context_filter_keypress((*C.GtkIMContext)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIMContext) FocusIn() () {
	C.gtk_im_context_focus_in((*C.GtkIMContext)(_self_._value_))
	return
}

func (_self_ *GtkIMContext) FocusOut() () {
	C.gtk_im_context_focus_out((*C.GtkIMContext)(_self_._value_))
	return
}

func (_self_ *GtkIMContext) GetPreeditString() (str unsafe.Pointer, attrs unsafe.Pointer, _go_cursor_pos_ int) {
	var cursor_pos C.gint
	C._gtk_im_context_get_preedit_string((*C.GtkIMContext)(_self_._value_), str, attrs, &cursor_pos)
	_go_cursor_pos_ = (int)(cursor_pos)
	return
}

func (_self_ *GtkIMContext) GetSurrounding() (_go__return__ bool, text unsafe.Pointer, _go_cursor_index_ int) {
	var cursor_index C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_im_context_get_surrounding((*C.GtkIMContext)(_self_._value_), text, &cursor_index)
	_go_cursor_index_ = (int)(cursor_index)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIMContext) Reset() () {
	C.gtk_im_context_reset((*C.GtkIMContext)(_self_._value_))
	return
}

func (_self_ *GtkIMContext) SetClientWindow(window *C.GdkWindow) () {
	C.gtk_im_context_set_client_window((*C.GtkIMContext)(_self_._value_), window)
	return
}

func (_self_ *GtkIMContext) SetCursorLocation(area *C.GdkRectangle) () {
	C._gtk_im_context_set_cursor_location((*C.GtkIMContext)(_self_._value_), area)
	return
}

func (_self_ *GtkIMContext) SetSurrounding(text string, len_ int, cursor_index int) () {
	_cgo_len__ := (C.gint)(len_)
	_cgo_cursor_index_ := (C.gint)(cursor_index)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_im_context_set_surrounding((*C.GtkIMContext)(_self_._value_), _cgo_text_, _cgo_len__, _cgo_cursor_index_)
	return
}

func (_self_ *GtkIMContext) SetUsePreedit(use_preedit bool) () {
	_cgo_use_preedit_ := (C.gboolean)(C.FALSE)
	if use_preedit { _cgo_use_preedit_ = (C.gboolean)(C.TRUE) }
	C.gtk_im_context_set_use_preedit((*C.GtkIMContext)(_self_._value_), _cgo_use_preedit_)
	return
}

func IMContextSimpleNew() (_go__return__ GtkIMContextSimple) {
	var _return_ *C.GtkIMContext
	_return_ = C.gtk_im_context_simple_new()
	_go__return__ = ToGtkIMContextSimple(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIMContextSimple) AddTable(data *C.guint16, max_seq_len int, n_seqs int) () {
	_cgo_max_seq_len_ := (C.gint)(max_seq_len)
	_cgo_n_seqs_ := (C.gint)(n_seqs)
	C.gtk_im_context_simple_add_table((*C.GtkIMContextSimple)(_self_._value_), data, _cgo_max_seq_len_, _cgo_n_seqs_)
	return
}

func IMMulticontextNew() (_go__return__ GtkIMMulticontext) {
	var _return_ *C.GtkIMContext
	_return_ = C.gtk_im_multicontext_new()
	_go__return__ = ToGtkIMMulticontext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIMMulticontext) AppendMenuitems(menushell GtkMenuShellKind) () {
	_cgo_menushell_ := (*C.GtkMenuShell)(menushell._getValue())
	C.gtk_im_multicontext_append_menuitems((*C.GtkIMMulticontext)(_self_._value_), _cgo_menushell_)
	return
}

func (_self_ *GtkIMMulticontext) GetContextId() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._gtk_im_multicontext_get_context_id((*C.GtkIMMulticontext)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIMMulticontext) SetContextId(context_id string) () {
	_cstring_context_id_ := C.CString(context_id)
	_cgo_context_id_ := (*C.char)(unsafe.Pointer(_cstring_context_id_))
	defer C.free(unsafe.Pointer(_cstring_context_id_))
	C._gtk_im_multicontext_set_context_id((*C.GtkIMMulticontext)(_self_._value_), _cgo_context_id_)
	return
}

func IconFactoryNew() (_go__return__ GtkIconFactory) {
	var _return_ *C.GtkIconFactory
	_return_ = C.gtk_icon_factory_new()
	_go__return__ = ToGtkIconFactory(unsafe.Pointer(_return_))
	return
}

func IconFactoryLookupDefault(stock_id string) (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_icon_factory_lookup_default(_cgo_stock_id_)
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconFactory) Add(stock_id string, icon_set *GtkIconSet) () {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_icon_factory_add((*C.GtkIconFactory)(_self_._value_), _cgo_stock_id_, _cgo_icon_set_)
	return
}

func (_self_ *GtkIconFactory) AddDefault() () {
	C.gtk_icon_factory_add_default((*C.GtkIconFactory)(_self_._value_))
	return
}

func (_self_ *GtkIconFactory) Lookup(stock_id string) (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_icon_factory_lookup((*C.GtkIconFactory)(_self_._value_), _cgo_stock_id_)
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconFactory) RemoveDefault() () {
	C.gtk_icon_factory_remove_default((*C.GtkIconFactory)(_self_._value_))
	return
}

func IconThemeNew() (_go__return__ GtkIconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_new()
	_go__return__ = ToGtkIconTheme(unsafe.Pointer(_return_))
	return
}

func IconThemeAddBuiltinIcon(icon_name string, size int, pixbuf *C.GdkPixbuf) () {
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_icon_theme_add_builtin_icon(_cgo_icon_name_, _cgo_size_, pixbuf)
	return
}

func IconThemeGetDefault() (_go__return__ GtkIconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_get_default()
	_go__return__ = ToGtkIconTheme(unsafe.Pointer(_return_))
	return
}

func IconThemeGetForScreen(screen *C.GdkScreen) (_go__return__ GtkIconTheme) {
	var _return_ *C.GtkIconTheme
	_return_ = C.gtk_icon_theme_get_for_screen(screen)
	_go__return__ = ToGtkIconTheme(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconTheme) AppendSearchPath(path string) () {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	C._gtk_icon_theme_append_search_path((*C.GtkIconTheme)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconTheme) GetExampleIconName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_icon_theme_get_example_icon_name((*C.GtkIconTheme)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIconTheme) GetIconSizes(icon_name string) (_return_ *C.gint) {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_get_icon_sizes((*C.GtkIconTheme)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkIconTheme) HasIcon(icon_name string) (_go__return__ bool) {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_icon_theme_has_icon((*C.GtkIconTheme)(_self_._value_), _cgo_icon_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconTheme) ListContexts() (_return_ *C.GList) {
	_return_ = C.gtk_icon_theme_list_contexts((*C.GtkIconTheme)(_self_._value_))
	return
}

func (_self_ *GtkIconTheme) ListIcons(context string) (_return_ *C.GList) {
	_cstring_context_ := C.CString(context)
	_cgo_context_ := (*C.gchar)(unsafe.Pointer(_cstring_context_))
	defer C.free(unsafe.Pointer(_cstring_context_))
	_return_ = C._gtk_icon_theme_list_icons((*C.GtkIconTheme)(_self_._value_), _cgo_context_)
	return
}

func (_self_ *GtkIconTheme) LoadIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_load_icon((*C.GtkIconTheme)(_self_._value_), _cgo_icon_name_, _cgo_size_, flags, _error_)
	return
}

func (_self_ *GtkIconTheme) LookupByGicon(icon *C.GIcon, size int, flags C.GtkIconLookupFlags) (_go__return__ *GtkIconInfo) {
	var _return_ *C.GtkIconInfo
	_cgo_size_ := (C.gint)(size)
	_return_ = C.gtk_icon_theme_lookup_by_gicon((*C.GtkIconTheme)(_self_._value_), icon, _cgo_size_, flags)
	_go__return__ = (*GtkIconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconTheme) LookupIcon(icon_name string, size int, flags C.GtkIconLookupFlags) (_go__return__ *GtkIconInfo) {
	var _return_ *C.GtkIconInfo
	_cgo_size_ := (C.gint)(size)
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_icon_theme_lookup_icon((*C.GtkIconTheme)(_self_._value_), _cgo_icon_name_, _cgo_size_, flags)
	_go__return__ = (*GtkIconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconTheme) PrependSearchPath(path string) () {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	C._gtk_icon_theme_prepend_search_path((*C.GtkIconTheme)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconTheme) RescanIfNeeded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_theme_rescan_if_needed((*C.GtkIconTheme)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconTheme) SetCustomTheme(theme_name string) () {
	_cstring_theme_name_ := C.CString(theme_name)
	_cgo_theme_name_ := (*C.gchar)(unsafe.Pointer(_cstring_theme_name_))
	defer C.free(unsafe.Pointer(_cstring_theme_name_))
	C._gtk_icon_theme_set_custom_theme((*C.GtkIconTheme)(_self_._value_), _cgo_theme_name_)
	return
}

func (_self_ *GtkIconTheme) SetScreen(screen *C.GdkScreen) () {
	C.gtk_icon_theme_set_screen((*C.GtkIconTheme)(_self_._value_), screen)
	return
}

func IconViewNew() (_go__return__ GtkIconView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new()
	_go__return__ = ToGtkIconView(unsafe.Pointer(_return_))
	return
}

func IconViewNewWithArea(area GtkCellAreaKind) (_go__return__ GtkIconView) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new_with_area(_cgo_area_)
	_go__return__ = ToGtkIconView(unsafe.Pointer(_return_))
	return
}

func IconViewNewWithModel(model *C.GtkTreeModel) (_go__return__ GtkIconView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_icon_view_new_with_model(model)
	_go__return__ = ToGtkIconView(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconView) ConvertWidgetToBinWindowCoords(wx int, wy int) (_go_bx_ int, _go_by_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var bx C.gint
	var by C.gint
	C.gtk_icon_view_convert_widget_to_bin_window_coords((*C.GtkIconView)(_self_._value_), _cgo_wx_, _cgo_wy_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *GtkIconView) CreateDragIcon(path *GtkTreePath) (_return_ *C.cairo_surface_t) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_return_ = C.gtk_icon_view_create_drag_icon((*C.GtkIconView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconView) GetCellRect(path *GtkTreePath, cell GtkCellRendererKind) (_go__return__ bool, rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_get_cell_rect((*C.GtkIconView)(_self_._value_), _cgo_path_, _cgo_cell_, rect)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) GetColumnSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_column_spacing((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetColumns() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_columns((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetCursor() (_go__return__ bool, path *GtkTreePath, cell *GtkCellRenderer) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_cell_ *C.GtkCellRenderer
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_cursor((*C.GtkIconView)(_self_._value_), unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_cell_))
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	cell = (*GtkCellRenderer)(unsafe.Pointer(_allocated_cell_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) GetDestItemAtPos(drag_x int, drag_y int) (_go__return__ bool, path *GtkTreePath, pos *C.GtkIconViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	_cgo_drag_x_ := (C.gint)(drag_x)
	_cgo_drag_y_ := (C.gint)(drag_y)
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_dest_item_at_pos((*C.GtkIconView)(_self_._value_), _cgo_drag_x_, _cgo_drag_y_, unsafe.Pointer(&_allocated_path_), pos)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) GetDragDestItem() (path *GtkTreePath, pos *C.GtkIconViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	C._gtk_icon_view_get_drag_dest_item((*C.GtkIconView)(_self_._value_), unsafe.Pointer(&_allocated_path_), pos)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	return
}

func (_self_ *GtkIconView) GetItemAtPos(x int, y int) (_go__return__ bool, path *GtkTreePath, cell *GtkCellRenderer) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_cell_ *C.GtkCellRenderer
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_item_at_pos((*C.GtkIconView)(_self_._value_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_cell_))
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	cell = (*GtkCellRenderer)(unsafe.Pointer(_allocated_cell_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) GetItemColumn(path *GtkTreePath) (_go__return__ int) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_column((*C.GtkIconView)(_self_._value_), _cgo_path_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetItemOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_icon_view_get_item_orientation((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) GetItemPadding() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_padding((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetItemRow(path *GtkTreePath) (_go__return__ int) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_row((*C.GtkIconView)(_self_._value_), _cgo_path_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetItemWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_item_width((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_margin((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetMarkupColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_markup_column((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_icon_view_get_model((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) GetPathAtPos(x int, y int) (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_icon_view_get_path_at_pos((*C.GtkIconView)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconView) GetPixbufColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_pixbuf_column((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_get_reorderable((*C.GtkIconView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) GetRowSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_row_spacing((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetSelectedItems() (_return_ *C.GList) {
	_return_ = C.gtk_icon_view_get_selected_items((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) GetSelectionMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_icon_view_get_selection_mode((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_spacing((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetTextColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_text_column((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetTooltipColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_view_get_tooltip_column((*C.GtkIconView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconView) GetVisibleRange() (_go__return__ bool, start_path *GtkTreePath, end_path *GtkTreePath) {
	var _allocated_start_path_ *C.GtkTreePath
	var _allocated_end_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_icon_view_get_visible_range((*C.GtkIconView)(_self_._value_), unsafe.Pointer(&_allocated_start_path_), unsafe.Pointer(&_allocated_end_path_))
	start_path = (*GtkTreePath)(unsafe.Pointer(_allocated_start_path_))
	end_path = (*GtkTreePath)(unsafe.Pointer(_allocated_end_path_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) ItemActivated(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_item_activated((*C.GtkIconView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconView) PathIsSelected(path *GtkTreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_icon_view_path_is_selected((*C.GtkIconView)(_self_._value_), _cgo_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconView) ScrollToPath(path *GtkTreePath, use_align bool, row_align float64, col_align float64) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_row_align_ := (C.gfloat)(row_align)
	_cgo_col_align_ := (C.gfloat)(col_align)
	_cgo_use_align_ := (C.gboolean)(C.FALSE)
	if use_align { _cgo_use_align_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_view_scroll_to_path((*C.GtkIconView)(_self_._value_), _cgo_path_, _cgo_use_align_, _cgo_row_align_, _cgo_col_align_)
	return
}

func (_self_ *GtkIconView) SelectAll() () {
	C.gtk_icon_view_select_all((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) SelectPath(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_select_path((*C.GtkIconView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconView) SelectedForeach(func_ C.GtkIconViewForeachFunc, data C.gpointer) () {
	C.gtk_icon_view_selected_foreach((*C.GtkIconView)(_self_._value_), func_, data)
	return
}

func (_self_ *GtkIconView) SetColumnSpacing(column_spacing int) () {
	_cgo_column_spacing_ := (C.gint)(column_spacing)
	C.gtk_icon_view_set_column_spacing((*C.GtkIconView)(_self_._value_), _cgo_column_spacing_)
	return
}

func (_self_ *GtkIconView) SetColumns(columns int) () {
	_cgo_columns_ := (C.gint)(columns)
	C.gtk_icon_view_set_columns((*C.GtkIconView)(_self_._value_), _cgo_columns_)
	return
}

func (_self_ *GtkIconView) SetCursor(path *GtkTreePath, cell GtkCellRendererKind, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	_cgo_start_editing_ := (C.gboolean)(C.FALSE)
	if start_editing { _cgo_start_editing_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_view_set_cursor((*C.GtkIconView)(_self_._value_), _cgo_path_, _cgo_cell_, _cgo_start_editing_)
	return
}

func (_self_ *GtkIconView) SetDragDestItem(path *GtkTreePath, pos C.GtkIconViewDropPosition) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_set_drag_dest_item((*C.GtkIconView)(_self_._value_), _cgo_path_, pos)
	return
}

func (_self_ *GtkIconView) SetItemOrientation(orientation C.GtkOrientation) () {
	C.gtk_icon_view_set_item_orientation((*C.GtkIconView)(_self_._value_), orientation)
	return
}

func (_self_ *GtkIconView) SetItemPadding(item_padding int) () {
	_cgo_item_padding_ := (C.gint)(item_padding)
	C.gtk_icon_view_set_item_padding((*C.GtkIconView)(_self_._value_), _cgo_item_padding_)
	return
}

func (_self_ *GtkIconView) SetItemWidth(item_width int) () {
	_cgo_item_width_ := (C.gint)(item_width)
	C.gtk_icon_view_set_item_width((*C.GtkIconView)(_self_._value_), _cgo_item_width_)
	return
}

func (_self_ *GtkIconView) SetMargin(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_icon_view_set_margin((*C.GtkIconView)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *GtkIconView) SetMarkupColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_markup_column((*C.GtkIconView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkIconView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_icon_view_set_model((*C.GtkIconView)(_self_._value_), model)
	return
}

func (_self_ *GtkIconView) SetPixbufColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_pixbuf_column((*C.GtkIconView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkIconView) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := (C.gboolean)(C.FALSE)
	if reorderable { _cgo_reorderable_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_view_set_reorderable((*C.GtkIconView)(_self_._value_), _cgo_reorderable_)
	return
}

func (_self_ *GtkIconView) SetRowSpacing(row_spacing int) () {
	_cgo_row_spacing_ := (C.gint)(row_spacing)
	C.gtk_icon_view_set_row_spacing((*C.GtkIconView)(_self_._value_), _cgo_row_spacing_)
	return
}

func (_self_ *GtkIconView) SetSelectionMode(mode C.GtkSelectionMode) () {
	C.gtk_icon_view_set_selection_mode((*C.GtkIconView)(_self_._value_), mode)
	return
}

func (_self_ *GtkIconView) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_icon_view_set_spacing((*C.GtkIconView)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GtkIconView) SetTextColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_text_column((*C.GtkIconView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkIconView) SetTooltipCell(tooltip GtkTooltipKind, path *GtkTreePath, cell GtkCellRendererKind) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(tooltip._getValue())
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	C.gtk_icon_view_set_tooltip_cell((*C.GtkIconView)(_self_._value_), _cgo_tooltip_, _cgo_path_, _cgo_cell_)
	return
}

func (_self_ *GtkIconView) SetTooltipColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_icon_view_set_tooltip_column((*C.GtkIconView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkIconView) SetTooltipItem(tooltip GtkTooltipKind, path *GtkTreePath) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(tooltip._getValue())
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_set_tooltip_item((*C.GtkIconView)(_self_._value_), _cgo_tooltip_, _cgo_path_)
	return
}

func (_self_ *GtkIconView) UnselectAll() () {
	C.gtk_icon_view_unselect_all((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) UnselectPath(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_icon_view_unselect_path((*C.GtkIconView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkIconView) UnsetModelDragDest() () {
	C.gtk_icon_view_unset_model_drag_dest((*C.GtkIconView)(_self_._value_))
	return
}

func (_self_ *GtkIconView) UnsetModelDragSource() () {
	C.gtk_icon_view_unset_model_drag_source((*C.GtkIconView)(_self_._value_))
	return
}

func ImageNew() (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new()
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromAnimation(animation *C.GdkPixbufAnimation) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_animation(animation)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromFile(filename string) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_image_new_from_file(_cgo_filename_)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromGicon(icon *C.GIcon, size C.GtkIconSize) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_gicon(icon, size)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromIconName(icon_name string, size C.GtkIconSize) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_image_new_from_icon_name(_cgo_icon_name_, size)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromIconSet(icon_set *GtkIconSet, size C.GtkIconSize) (_go__return__ GtkImage) {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_icon_set(_cgo_icon_set_, size)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_new_from_pixbuf(pixbuf)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromResource(resource_path string) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_image_new_from_resource(_cgo_resource_path_)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func ImageNewFromStock(stock_id string, size C.GtkIconSize) (_go__return__ GtkImage) {
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_image_new_from_stock(_cgo_stock_id_, size)
	_go__return__ = ToGtkImage(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkImage) Clear() () {
	C.gtk_image_clear((*C.GtkImage)(_self_._value_))
	return
}

func (_self_ *GtkImage) GetAnimation() (_return_ *C.GdkPixbufAnimation) {
	_return_ = C.gtk_image_get_animation((*C.GtkImage)(_self_._value_))
	return
}

func (_self_ *GtkImage) GetGicon() (gicon unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_gicon((*C.GtkImage)(_self_._value_), gicon, &size)
	return
}

func (_self_ *GtkImage) GetIconName() (icon_name unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_icon_name((*C.GtkImage)(_self_._value_), icon_name, &size)
	return
}

func (_self_ *GtkImage) GetIconSet() (icon_set *GtkIconSet, size C.GtkIconSize) {
	var _allocated_icon_set_ *C.GtkIconSet
	C._gtk_image_get_icon_set((*C.GtkImage)(_self_._value_), unsafe.Pointer(&_allocated_icon_set_), &size)
	icon_set = (*GtkIconSet)(unsafe.Pointer(_allocated_icon_set_))
	return
}

func (_self_ *GtkImage) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_image_get_pixbuf((*C.GtkImage)(_self_._value_))
	return
}

func (_self_ *GtkImage) GetPixelSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_image_get_pixel_size((*C.GtkImage)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkImage) GetStock() (stock_id unsafe.Pointer, size C.GtkIconSize) {
	C._gtk_image_get_stock((*C.GtkImage)(_self_._value_), stock_id, &size)
	return
}

func (_self_ *GtkImage) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_image_get_storage_type((*C.GtkImage)(_self_._value_))
	return
}

func (_self_ *GtkImage) SetFromAnimation(animation *C.GdkPixbufAnimation) () {
	C.gtk_image_set_from_animation((*C.GtkImage)(_self_._value_), animation)
	return
}

func (_self_ *GtkImage) SetFromFile(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_image_set_from_file((*C.GtkImage)(_self_._value_), _cgo_filename_)
	return
}

func (_self_ *GtkImage) SetFromGicon(icon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_image_set_from_gicon((*C.GtkImage)(_self_._value_), icon, size)
	return
}

func (_self_ *GtkImage) SetFromIconName(icon_name string, size C.GtkIconSize) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_image_set_from_icon_name((*C.GtkImage)(_self_._value_), _cgo_icon_name_, size)
	return
}

func (_self_ *GtkImage) SetFromIconSet(icon_set *GtkIconSet, size C.GtkIconSize) () {
	_cgo_icon_set_ := (*C.GtkIconSet)(unsafe.Pointer(icon_set))
	C.gtk_image_set_from_icon_set((*C.GtkImage)(_self_._value_), _cgo_icon_set_, size)
	return
}

func (_self_ *GtkImage) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_image_set_from_pixbuf((*C.GtkImage)(_self_._value_), pixbuf)
	return
}

func (_self_ *GtkImage) SetFromResource(resource_path string) () {
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	C._gtk_image_set_from_resource((*C.GtkImage)(_self_._value_), _cgo_resource_path_)
	return
}

func (_self_ *GtkImage) SetFromStock(stock_id string, size C.GtkIconSize) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_image_set_from_stock((*C.GtkImage)(_self_._value_), _cgo_stock_id_, size)
	return
}

func (_self_ *GtkImage) SetPixelSize(pixel_size int) () {
	_cgo_pixel_size_ := (C.gint)(pixel_size)
	C.gtk_image_set_pixel_size((*C.GtkImage)(_self_._value_), _cgo_pixel_size_)
	return
}

func ImageMenuItemNew() (_go__return__ GtkImageMenuItem) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_menu_item_new()
	_go__return__ = ToGtkImageMenuItem(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewFromStock(stock_id string, accel_group GtkAccelGroupKind) (_go__return__ GtkImageMenuItem) {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	var _return_ *C.GtkWidget
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_image_menu_item_new_from_stock(_cgo_stock_id_, _cgo_accel_group_)
	_go__return__ = ToGtkImageMenuItem(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewWithLabel(label string) (_go__return__ GtkImageMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_image_menu_item_new_with_label(_cgo_label_)
	_go__return__ = ToGtkImageMenuItem(unsafe.Pointer(_return_))
	return
}

func ImageMenuItemNewWithMnemonic(label string) (_go__return__ GtkImageMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_image_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkImageMenuItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkImageMenuItem) GetAlwaysShowImage() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_image_menu_item_get_always_show_image((*C.GtkImageMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkImageMenuItem) GetImage() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_image_menu_item_get_image((*C.GtkImageMenuItem)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkImageMenuItem) GetUseStock() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_image_menu_item_get_use_stock((*C.GtkImageMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkImageMenuItem) SetAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_image_menu_item_set_accel_group((*C.GtkImageMenuItem)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkImageMenuItem) SetAlwaysShowImage(always_show bool) () {
	_cgo_always_show_ := (C.gboolean)(C.FALSE)
	if always_show { _cgo_always_show_ = (C.gboolean)(C.TRUE) }
	C.gtk_image_menu_item_set_always_show_image((*C.GtkImageMenuItem)(_self_._value_), _cgo_always_show_)
	return
}

func (_self_ *GtkImageMenuItem) SetImage(image GtkWidgetKind) () {
	_cgo_image_ := (*C.GtkWidget)(image._getValue())
	C.gtk_image_menu_item_set_image((*C.GtkImageMenuItem)(_self_._value_), _cgo_image_)
	return
}

func (_self_ *GtkImageMenuItem) SetUseStock(use_stock bool) () {
	_cgo_use_stock_ := (C.gboolean)(C.FALSE)
	if use_stock { _cgo_use_stock_ = (C.gboolean)(C.TRUE) }
	C.gtk_image_menu_item_set_use_stock((*C.GtkImageMenuItem)(_self_._value_), _cgo_use_stock_)
	return
}

func InfoBarNew() (_go__return__ GtkInfoBar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_new()
	_go__return__ = ToGtkInfoBar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkInfoBar) AddActionWidget(child GtkWidgetKind, response_id int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_add_action_widget((*C.GtkInfoBar)(_self_._value_), _cgo_child_, _cgo_response_id_)
	return
}

func (_self_ *GtkInfoBar) AddButton(button_text string, response_id int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_response_id_ := (C.gint)(response_id)
	_cstring_button_text_ := C.CString(button_text)
	_cgo_button_text_ := (*C.gchar)(unsafe.Pointer(_cstring_button_text_))
	defer C.free(unsafe.Pointer(_cstring_button_text_))
	_return_ = C._gtk_info_bar_add_button((*C.GtkInfoBar)(_self_._value_), _cgo_button_text_, _cgo_response_id_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkInfoBar) GetActionArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_get_action_area((*C.GtkInfoBar)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkInfoBar) GetContentArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_info_bar_get_content_area((*C.GtkInfoBar)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkInfoBar) GetMessageType() (_return_ C.GtkMessageType) {
	_return_ = C.gtk_info_bar_get_message_type((*C.GtkInfoBar)(_self_._value_))
	return
}

func (_self_ *GtkInfoBar) Response(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_response((*C.GtkInfoBar)(_self_._value_), _cgo_response_id_)
	return
}

func (_self_ *GtkInfoBar) SetDefaultResponse(response_id int) () {
	_cgo_response_id_ := (C.gint)(response_id)
	C.gtk_info_bar_set_default_response((*C.GtkInfoBar)(_self_._value_), _cgo_response_id_)
	return
}

func (_self_ *GtkInfoBar) SetMessageType(message_type C.GtkMessageType) () {
	C.gtk_info_bar_set_message_type((*C.GtkInfoBar)(_self_._value_), message_type)
	return
}

func (_self_ *GtkInfoBar) SetResponseSensitive(response_id int, setting bool) () {
	_cgo_response_id_ := (C.gint)(response_id)
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_info_bar_set_response_sensitive((*C.GtkInfoBar)(_self_._value_), _cgo_response_id_, _cgo_setting_)
	return
}

func InvisibleNew() (_go__return__ GtkInvisible) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_invisible_new()
	_go__return__ = ToGtkInvisible(unsafe.Pointer(_return_))
	return
}

func InvisibleNewForScreen(screen *C.GdkScreen) (_go__return__ GtkInvisible) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_invisible_new_for_screen(screen)
	_go__return__ = ToGtkInvisible(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkInvisible) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_invisible_get_screen((*C.GtkInvisible)(_self_._value_))
	return
}

func (_self_ *GtkInvisible) SetScreen(screen *C.GdkScreen) () {
	C.gtk_invisible_set_screen((*C.GtkInvisible)(_self_._value_), screen)
	return
}

func LabelNew(str string) (_go__return__ GtkLabel) {
	var _return_ *C.GtkWidget
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	_return_ = C._gtk_label_new(_cgo_str_)
	_go__return__ = ToGtkLabel(unsafe.Pointer(_return_))
	return
}

func LabelNewWithMnemonic(str string) (_go__return__ GtkLabel) {
	var _return_ *C.GtkWidget
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	_return_ = C._gtk_label_new_with_mnemonic(_cgo_str_)
	_go__return__ = ToGtkLabel(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLabel) GetAngle() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_label_get_angle((*C.GtkLabel)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkLabel) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_label_get_attributes((*C.GtkLabel)(_self_._value_))
	return
}

func (_self_ *GtkLabel) GetCurrentUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_current_uri((*C.GtkLabel)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkLabel) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_label_get_ellipsize((*C.GtkLabel)(_self_._value_))
	return
}

func (_self_ *GtkLabel) GetJustify() (_return_ C.GtkJustification) {
	_return_ = C.gtk_label_get_justify((*C.GtkLabel)(_self_._value_))
	return
}

func (_self_ *GtkLabel) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_label((*C.GtkLabel)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkLabel) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_label_get_layout((*C.GtkLabel)(_self_._value_))
	return
}

func (_self_ *GtkLabel) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_label_get_layout_offsets((*C.GtkLabel)(_self_._value_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *GtkLabel) GetLineWrap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_line_wrap((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetLineWrapMode() (_return_ C.PangoWrapMode) {
	_return_ = C.gtk_label_get_line_wrap_mode((*C.GtkLabel)(_self_._value_))
	return
}

func (_self_ *GtkLabel) GetMaxWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_label_get_max_width_chars((*C.GtkLabel)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkLabel) GetMnemonicKeyval() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_label_get_mnemonic_keyval((*C.GtkLabel)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkLabel) GetMnemonicWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_label_get_mnemonic_widget((*C.GtkLabel)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLabel) GetSelectable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_selectable((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetSelectionBounds() (_go__return__ bool, _go_start_ int, _go_end_ int) {
	var start C.gint
	var end C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_selection_bounds((*C.GtkLabel)(_self_._value_), &start, &end)
	_go_start_ = (int)(start)
	_go_end_ = (int)(end)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetSingleLineMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_single_line_mode((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_label_get_text((*C.GtkLabel)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkLabel) GetTrackVisitedLinks() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_track_visited_links((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetUseMarkup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_use_markup((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_label_get_use_underline((*C.GtkLabel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLabel) GetWidthChars() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_label_get_width_chars((*C.GtkLabel)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkLabel) SelectRegion(start_offset int, end_offset int) () {
	_cgo_start_offset_ := (C.gint)(start_offset)
	_cgo_end_offset_ := (C.gint)(end_offset)
	C.gtk_label_select_region((*C.GtkLabel)(_self_._value_), _cgo_start_offset_, _cgo_end_offset_)
	return
}

func (_self_ *GtkLabel) SetAngle(angle float64) () {
	_cgo_angle_ := (C.gdouble)(angle)
	C.gtk_label_set_angle((*C.GtkLabel)(_self_._value_), _cgo_angle_)
	return
}

func (_self_ *GtkLabel) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_label_set_attributes((*C.GtkLabel)(_self_._value_), attrs)
	return
}

func (_self_ *GtkLabel) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_label_set_ellipsize((*C.GtkLabel)(_self_._value_), mode)
	return
}

func (_self_ *GtkLabel) SetJustify(jtype C.GtkJustification) () {
	C.gtk_label_set_justify((*C.GtkLabel)(_self_._value_), jtype)
	return
}

func (_self_ *GtkLabel) SetLabel(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_label((*C.GtkLabel)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkLabel) SetLineWrap(wrap bool) () {
	_cgo_wrap_ := (C.gboolean)(C.FALSE)
	if wrap { _cgo_wrap_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_line_wrap((*C.GtkLabel)(_self_._value_), _cgo_wrap_)
	return
}

func (_self_ *GtkLabel) SetLineWrapMode(wrap_mode C.PangoWrapMode) () {
	C.gtk_label_set_line_wrap_mode((*C.GtkLabel)(_self_._value_), wrap_mode)
	return
}

func (_self_ *GtkLabel) SetMarkup(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_markup((*C.GtkLabel)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkLabel) SetMarkupWithMnemonic(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_markup_with_mnemonic((*C.GtkLabel)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkLabel) SetMaxWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_label_set_max_width_chars((*C.GtkLabel)(_self_._value_), _cgo_n_chars_)
	return
}

func (_self_ *GtkLabel) SetMnemonicWidget(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_label_set_mnemonic_widget((*C.GtkLabel)(_self_._value_), _cgo_widget_)
	return
}

func (_self_ *GtkLabel) SetPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_label_set_pattern((*C.GtkLabel)(_self_._value_), _cgo_pattern_)
	return
}

func (_self_ *GtkLabel) SetSelectable(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_selectable((*C.GtkLabel)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkLabel) SetSingleLineMode(single_line_mode bool) () {
	_cgo_single_line_mode_ := (C.gboolean)(C.FALSE)
	if single_line_mode { _cgo_single_line_mode_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_single_line_mode((*C.GtkLabel)(_self_._value_), _cgo_single_line_mode_)
	return
}

func (_self_ *GtkLabel) SetText(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_text((*C.GtkLabel)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkLabel) SetTextWithMnemonic(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_label_set_text_with_mnemonic((*C.GtkLabel)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkLabel) SetTrackVisitedLinks(track_links bool) () {
	_cgo_track_links_ := (C.gboolean)(C.FALSE)
	if track_links { _cgo_track_links_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_track_visited_links((*C.GtkLabel)(_self_._value_), _cgo_track_links_)
	return
}

func (_self_ *GtkLabel) SetUseMarkup(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_use_markup((*C.GtkLabel)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkLabel) SetUseUnderline(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_label_set_use_underline((*C.GtkLabel)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkLabel) SetWidthChars(n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	C.gtk_label_set_width_chars((*C.GtkLabel)(_self_._value_), _cgo_n_chars_)
	return
}

func LayoutNew(hadjustment GtkAdjustmentKind, vadjustment GtkAdjustmentKind) (_go__return__ GtkLayout) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(hadjustment._getValue())
	_cgo_vadjustment_ := (*C.GtkAdjustment)(vadjustment._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_layout_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = ToGtkLayout(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLayout) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_layout_get_bin_window((*C.GtkLayout)(_self_._value_))
	return
}

func (_self_ *GtkLayout) GetSize() (_go_width_ uint, _go_height_ uint) {
	var width C.guint
	var height C.guint
	C.gtk_layout_get_size((*C.GtkLayout)(_self_._value_), &width, &height)
	_go_width_ = (uint)(width)
	_go_height_ = (uint)(height)
	return
}

func (_self_ *GtkLayout) Move(child_widget GtkWidgetKind, x int, y int) () {
	_cgo_child_widget_ := (*C.GtkWidget)(child_widget._getValue())
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_layout_move((*C.GtkLayout)(_self_._value_), _cgo_child_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *GtkLayout) Put(child_widget GtkWidgetKind, x int, y int) () {
	_cgo_child_widget_ := (*C.GtkWidget)(child_widget._getValue())
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_layout_put((*C.GtkLayout)(_self_._value_), _cgo_child_widget_, _cgo_x_, _cgo_y_)
	return
}

func (_self_ *GtkLayout) SetSize(width uint, height uint) () {
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	C.gtk_layout_set_size((*C.GtkLayout)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func LevelBarNew() (_go__return__ GtkLevelBar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_level_bar_new()
	_go__return__ = ToGtkLevelBar(unsafe.Pointer(_return_))
	return
}

func LevelBarNewForInterval(min_value float64, max_value float64) (_go__return__ GtkLevelBar) {
	var _return_ *C.GtkWidget
	_cgo_min_value_ := (C.gdouble)(min_value)
	_cgo_max_value_ := (C.gdouble)(max_value)
	_return_ = C.gtk_level_bar_new_for_interval(_cgo_min_value_, _cgo_max_value_)
	_go__return__ = ToGtkLevelBar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLevelBar) AddOffsetValue(name string, value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_level_bar_add_offset_value((*C.GtkLevelBar)(_self_._value_), _cgo_name_, _cgo_value_)
	return
}

func (_self_ *GtkLevelBar) GetMaxValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_max_value((*C.GtkLevelBar)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkLevelBar) GetMinValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_min_value((*C.GtkLevelBar)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkLevelBar) GetMode() (_return_ C.GtkLevelBarMode) {
	_return_ = C.gtk_level_bar_get_mode((*C.GtkLevelBar)(_self_._value_))
	return
}

func (_self_ *GtkLevelBar) GetOffsetValue(name string) (_go__return__ bool, _go_value_ float64) {
	var value C.gdouble
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_level_bar_get_offset_value((*C.GtkLevelBar)(_self_._value_), _cgo_name_, &value)
	_go_value_ = (float64)(value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLevelBar) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_level_bar_get_value((*C.GtkLevelBar)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkLevelBar) RemoveOffsetValue(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_level_bar_remove_offset_value((*C.GtkLevelBar)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkLevelBar) SetMaxValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_max_value((*C.GtkLevelBar)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *GtkLevelBar) SetMinValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_min_value((*C.GtkLevelBar)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *GtkLevelBar) SetMode(mode C.GtkLevelBarMode) () {
	C.gtk_level_bar_set_mode((*C.GtkLevelBar)(_self_._value_), mode)
	return
}

func (_self_ *GtkLevelBar) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_level_bar_set_value((*C.GtkLevelBar)(_self_._value_), _cgo_value_)
	return
}

func LinkButtonNew(uri string) (_go__return__ GtkLinkButton) {
	var _return_ *C.GtkWidget
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._gtk_link_button_new(_cgo_uri_)
	_go__return__ = ToGtkLinkButton(unsafe.Pointer(_return_))
	return
}

func LinkButtonNewWithLabel(uri string, label string) (_go__return__ GtkLinkButton) {
	var _return_ *C.GtkWidget
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_link_button_new_with_label(_cgo_uri_, _cgo_label_)
	_go__return__ = ToGtkLinkButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLinkButton) GetUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_link_button_get_uri((*C.GtkLinkButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkLinkButton) GetVisited() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_link_button_get_visited((*C.GtkLinkButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkLinkButton) SetUri(uri string) () {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	C._gtk_link_button_set_uri((*C.GtkLinkButton)(_self_._value_), _cgo_uri_)
	return
}

func (_self_ *GtkLinkButton) SetVisited(visited bool) () {
	_cgo_visited_ := (C.gboolean)(C.FALSE)
	if visited { _cgo_visited_ = (C.gboolean)(C.TRUE) }
	C.gtk_link_button_set_visited((*C.GtkLinkButton)(_self_._value_), _cgo_visited_)
	return
}

func (_self_ *GtkListStore) Append() (iter *GtkTreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_append((*C.GtkListStore)(_self_._value_), &_allocated_iter_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkListStore) Clear() () {
	C.gtk_list_store_clear((*C.GtkListStore)(_self_._value_))
	return
}

func (_self_ *GtkListStore) Insert(position int) (iter *GtkTreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	_cgo_position_ := (C.gint)(position)
	C.gtk_list_store_insert((*C.GtkListStore)(_self_._value_), &_allocated_iter_, _cgo_position_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkListStore) InsertAfter(sibling *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_insert_after((*C.GtkListStore)(_self_._value_), &_allocated_iter_, _cgo_sibling_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkListStore) InsertBefore(sibling *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_insert_before((*C.GtkListStore)(_self_._value_), &_allocated_iter_, _cgo_sibling_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkListStore) IterIsValid(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_list_store_iter_is_valid((*C.GtkListStore)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkListStore) MoveAfter(iter *GtkTreeIter, position *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_list_store_move_after((*C.GtkListStore)(_self_._value_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *GtkListStore) MoveBefore(iter *GtkTreeIter, position *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_list_store_move_before((*C.GtkListStore)(_self_._value_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *GtkListStore) Prepend() (iter *GtkTreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_list_store_prepend((*C.GtkListStore)(_self_._value_), &_allocated_iter_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkListStore) Remove(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_list_store_remove((*C.GtkListStore)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkListStore) SetValue(iter *GtkTreeIter, column int, value *C.GValue) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_column_ := (C.gint)(column)
	C.gtk_list_store_set_value((*C.GtkListStore)(_self_._value_), _cgo_iter_, _cgo_column_, value)
	return
}

func (_self_ *GtkListStore) Swap(a *GtkTreeIter, b *GtkTreeIter) () {
	_cgo_a_ := (*C.GtkTreeIter)(unsafe.Pointer(a))
	_cgo_b_ := (*C.GtkTreeIter)(unsafe.Pointer(b))
	C.gtk_list_store_swap((*C.GtkListStore)(_self_._value_), _cgo_a_, _cgo_b_)
	return
}

func LockButtonNew(permission *C.GPermission) (_go__return__ GtkLockButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_lock_button_new(permission)
	_go__return__ = ToGtkLockButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkLockButton) GetPermission() (_return_ *C.GPermission) {
	_return_ = C.gtk_lock_button_get_permission((*C.GtkLockButton)(_self_._value_))
	return
}

func (_self_ *GtkLockButton) SetPermission(permission *C.GPermission) () {
	C.gtk_lock_button_set_permission((*C.GtkLockButton)(_self_._value_), permission)
	return
}

func GtkMenuNew() (_go__return__ GtkMenu) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_new()
	_go__return__ = ToGtkMenu(unsafe.Pointer(_return_))
	return
}

func MenuNewFromModel(model *C.GMenuModel) (_go__return__ GtkMenu) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_new_from_model(model)
	_go__return__ = ToGtkMenu(unsafe.Pointer(_return_))
	return
}

func MenuGetForAttachWidget(widget GtkWidgetKind) (_return_ *C.GList) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	_return_ = C.gtk_menu_get_for_attach_widget(_cgo_widget_)
	return
}

func (_self_ *GtkMenu) Attach(child GtkWidgetKind, left_attach uint, right_attach uint, top_attach uint, bottom_attach uint) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_left_attach_ := (C.guint)(left_attach)
	_cgo_right_attach_ := (C.guint)(right_attach)
	_cgo_top_attach_ := (C.guint)(top_attach)
	_cgo_bottom_attach_ := (C.guint)(bottom_attach)
	C.gtk_menu_attach((*C.GtkMenu)(_self_._value_), _cgo_child_, _cgo_left_attach_, _cgo_right_attach_, _cgo_top_attach_, _cgo_bottom_attach_)
	return
}

func (_self_ *GtkMenu) AttachToWidget(attach_widget GtkWidgetKind, detacher C.GtkMenuDetachFunc) () {
	_cgo_attach_widget_ := (*C.GtkWidget)(attach_widget._getValue())
	C.gtk_menu_attach_to_widget((*C.GtkMenu)(_self_._value_), _cgo_attach_widget_, detacher)
	return
}

func (_self_ *GtkMenu) Detach() () {
	C.gtk_menu_detach((*C.GtkMenu)(_self_._value_))
	return
}

func (_self_ *GtkMenu) GetAccelGroup() (_go__return__ GtkAccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_menu_get_accel_group((*C.GtkMenu)(_self_._value_))
	_go__return__ = ToGtkAccelGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenu) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_get_accel_path((*C.GtkMenu)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkMenu) GetActive() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_get_active((*C.GtkMenu)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenu) GetAttachWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_get_attach_widget((*C.GtkMenu)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenu) GetMonitor() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_menu_get_monitor((*C.GtkMenu)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkMenu) GetReserveToggleSize() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_get_reserve_toggle_size((*C.GtkMenu)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMenu) GetTearoffState() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_get_tearoff_state((*C.GtkMenu)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMenu) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_get_title((*C.GtkMenu)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkMenu) Popdown() () {
	C.gtk_menu_popdown((*C.GtkMenu)(_self_._value_))
	return
}

func (_self_ *GtkMenu) Popup(parent_menu_shell GtkWidgetKind, parent_menu_item GtkWidgetKind, func_ C.GtkMenuPositionFunc, data C.gpointer, button uint, activate_time uint32) () {
	_cgo_parent_menu_shell_ := (*C.GtkWidget)(parent_menu_shell._getValue())
	_cgo_parent_menu_item_ := (*C.GtkWidget)(parent_menu_item._getValue())
	_cgo_button_ := (C.guint)(button)
	_cgo_activate_time_ := (C.guint32)(activate_time)
	C.gtk_menu_popup((*C.GtkMenu)(_self_._value_), _cgo_parent_menu_shell_, _cgo_parent_menu_item_, func_, data, _cgo_button_, _cgo_activate_time_)
	return
}

func (_self_ *GtkMenu) PopupForDevice(device *C.GdkDevice, parent_menu_shell GtkWidgetKind, parent_menu_item GtkWidgetKind, func_ C.GtkMenuPositionFunc, data C.gpointer, destroy C.GDestroyNotify, button uint, activate_time uint32) () {
	_cgo_parent_menu_shell_ := (*C.GtkWidget)(parent_menu_shell._getValue())
	_cgo_parent_menu_item_ := (*C.GtkWidget)(parent_menu_item._getValue())
	_cgo_button_ := (C.guint)(button)
	_cgo_activate_time_ := (C.guint32)(activate_time)
	C.gtk_menu_popup_for_device((*C.GtkMenu)(_self_._value_), device, _cgo_parent_menu_shell_, _cgo_parent_menu_item_, func_, data, destroy, _cgo_button_, _cgo_activate_time_)
	return
}

func (_self_ *GtkMenu) ReorderChild(child GtkWidgetKind, position int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_menu_reorder_child((*C.GtkMenu)(_self_._value_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *GtkMenu) Reposition() () {
	C.gtk_menu_reposition((*C.GtkMenu)(_self_._value_))
	return
}

func (_self_ *GtkMenu) SetAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_menu_set_accel_group((*C.GtkMenu)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkMenu) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_menu_set_accel_path((*C.GtkMenu)(_self_._value_), _cgo_accel_path_)
	return
}

func (_self_ *GtkMenu) SetActive(index uint) () {
	_cgo_index_ := (C.guint)(index)
	C.gtk_menu_set_active((*C.GtkMenu)(_self_._value_), _cgo_index_)
	return
}

func (_self_ *GtkMenu) SetMonitor(monitor_num int) () {
	_cgo_monitor_num_ := (C.gint)(monitor_num)
	C.gtk_menu_set_monitor((*C.GtkMenu)(_self_._value_), _cgo_monitor_num_)
	return
}

func (_self_ *GtkMenu) SetReserveToggleSize(reserve_toggle_size bool) () {
	_cgo_reserve_toggle_size_ := (C.gboolean)(C.FALSE)
	if reserve_toggle_size { _cgo_reserve_toggle_size_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_set_reserve_toggle_size((*C.GtkMenu)(_self_._value_), _cgo_reserve_toggle_size_)
	return
}

func (_self_ *GtkMenu) SetScreen(screen *C.GdkScreen) () {
	C.gtk_menu_set_screen((*C.GtkMenu)(_self_._value_), screen)
	return
}

func (_self_ *GtkMenu) SetTearoffState(torn_off bool) () {
	_cgo_torn_off_ := (C.gboolean)(C.FALSE)
	if torn_off { _cgo_torn_off_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_set_tearoff_state((*C.GtkMenu)(_self_._value_), _cgo_torn_off_)
	return
}

func (_self_ *GtkMenu) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_menu_set_title((*C.GtkMenu)(_self_._value_), _cgo_title_)
	return
}

func MenuBarNew() (_go__return__ GtkMenuBar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_bar_new()
	_go__return__ = ToGtkMenuBar(unsafe.Pointer(_return_))
	return
}

func MenuBarNewFromModel(model *C.GMenuModel) (_go__return__ GtkMenuBar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_bar_new_from_model(model)
	_go__return__ = ToGtkMenuBar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuBar) GetChildPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_child_pack_direction((*C.GtkMenuBar)(_self_._value_))
	return
}

func (_self_ *GtkMenuBar) GetPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_pack_direction((*C.GtkMenuBar)(_self_._value_))
	return
}

func (_self_ *GtkMenuBar) SetChildPackDirection(child_pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_child_pack_direction((*C.GtkMenuBar)(_self_._value_), child_pack_dir)
	return
}

func (_self_ *GtkMenuBar) SetPackDirection(pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_pack_direction((*C.GtkMenuBar)(_self_._value_), pack_dir)
	return
}

func MenuButtonNew() (_go__return__ GtkMenuButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_button_new()
	_go__return__ = ToGtkMenuButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuButton) GetAlignWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_button_get_align_widget((*C.GtkMenuButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuButton) GetDirection() (_return_ C.GtkArrowType) {
	_return_ = C.gtk_menu_button_get_direction((*C.GtkMenuButton)(_self_._value_))
	return
}

func (_self_ *GtkMenuButton) GetMenuModel() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_menu_button_get_menu_model((*C.GtkMenuButton)(_self_._value_))
	return
}

func (_self_ *GtkMenuButton) GetPopup() (_go__return__ GtkMenu) {
	var _return_ *C.GtkMenu
	_return_ = C.gtk_menu_button_get_popup((*C.GtkMenuButton)(_self_._value_))
	_go__return__ = ToGtkMenu(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuButton) SetAlignWidget(align_widget GtkWidgetKind) () {
	_cgo_align_widget_ := (*C.GtkWidget)(align_widget._getValue())
	C.gtk_menu_button_set_align_widget((*C.GtkMenuButton)(_self_._value_), _cgo_align_widget_)
	return
}

func (_self_ *GtkMenuButton) SetDirection(direction C.GtkArrowType) () {
	C.gtk_menu_button_set_direction((*C.GtkMenuButton)(_self_._value_), direction)
	return
}

func (_self_ *GtkMenuButton) SetMenuModel(menu_model *C.GMenuModel) () {
	C.gtk_menu_button_set_menu_model((*C.GtkMenuButton)(_self_._value_), menu_model)
	return
}

func (_self_ *GtkMenuButton) SetPopup(popup GtkWidgetKind) () {
	_cgo_popup_ := (*C.GtkWidget)(popup._getValue())
	C.gtk_menu_button_set_popup((*C.GtkMenuButton)(_self_._value_), _cgo_popup_)
	return
}

func GtkMenuItemNew() (_go__return__ GtkMenuItem) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_item_new()
	_go__return__ = ToGtkMenuItem(unsafe.Pointer(_return_))
	return
}

func MenuItemNewWithLabel(label string) (_go__return__ GtkMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_item_new_with_label(_cgo_label_)
	_go__return__ = ToGtkMenuItem(unsafe.Pointer(_return_))
	return
}

func MenuItemNewWithMnemonic(label string) (_go__return__ GtkMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_item_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkMenuItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuItem) Activate() () {
	C.gtk_menu_item_activate((*C.GtkMenuItem)(_self_._value_))
	return
}

func (_self_ *GtkMenuItem) Deselect() () {
	C.gtk_menu_item_deselect((*C.GtkMenuItem)(_self_._value_))
	return
}

func (_self_ *GtkMenuItem) GetAccelPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_item_get_accel_path((*C.GtkMenuItem)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkMenuItem) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_menu_item_get_label((*C.GtkMenuItem)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkMenuItem) GetReserveIndicator() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_item_get_reserve_indicator((*C.GtkMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMenuItem) GetSubmenu() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_item_get_submenu((*C.GtkMenuItem)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuItem) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_item_get_use_underline((*C.GtkMenuItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMenuItem) Select() () {
	C.gtk_menu_item_select((*C.GtkMenuItem)(_self_._value_))
	return
}

func (_self_ *GtkMenuItem) SetAccelPath(accel_path string) () {
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_menu_item_set_accel_path((*C.GtkMenuItem)(_self_._value_), _cgo_accel_path_)
	return
}

func (_self_ *GtkMenuItem) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_menu_item_set_label((*C.GtkMenuItem)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkMenuItem) SetReserveIndicator(reserve bool) () {
	_cgo_reserve_ := (C.gboolean)(C.FALSE)
	if reserve { _cgo_reserve_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_item_set_reserve_indicator((*C.GtkMenuItem)(_self_._value_), _cgo_reserve_)
	return
}

func (_self_ *GtkMenuItem) SetSubmenu(submenu GtkWidgetKind) () {
	_cgo_submenu_ := (*C.GtkWidget)(submenu._getValue())
	C.gtk_menu_item_set_submenu((*C.GtkMenuItem)(_self_._value_), _cgo_submenu_)
	return
}

func (_self_ *GtkMenuItem) SetUseUnderline(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_item_set_use_underline((*C.GtkMenuItem)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkMenuItem) ToggleSizeAllocate(allocation int) () {
	_cgo_allocation_ := (C.gint)(allocation)
	C.gtk_menu_item_toggle_size_allocate((*C.GtkMenuItem)(_self_._value_), _cgo_allocation_)
	return
}

func (_self_ *GtkMenuItem) ToggleSizeRequest(requisition *C.gint) () {
	C.gtk_menu_item_toggle_size_request((*C.GtkMenuItem)(_self_._value_), requisition)
	return
}

func (_self_ *GtkMenuShell) ActivateItem(menu_item GtkWidgetKind, force_deactivate bool) () {
	_cgo_menu_item_ := (*C.GtkWidget)(menu_item._getValue())
	_cgo_force_deactivate_ := (C.gboolean)(C.FALSE)
	if force_deactivate { _cgo_force_deactivate_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_shell_activate_item((*C.GtkMenuShell)(_self_._value_), _cgo_menu_item_, _cgo_force_deactivate_)
	return
}

func (_self_ *GtkMenuShell) Append(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_menu_shell_append((*C.GtkMenuShell)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkMenuShell) BindModel(model *C.GMenuModel, action_namespace string, with_separators bool) () {
	_cstring_action_namespace_ := C.CString(action_namespace)
	_cgo_action_namespace_ := (*C.gchar)(unsafe.Pointer(_cstring_action_namespace_))
	defer C.free(unsafe.Pointer(_cstring_action_namespace_))
	_cgo_with_separators_ := (C.gboolean)(C.FALSE)
	if with_separators { _cgo_with_separators_ = (C.gboolean)(C.TRUE) }
	C._gtk_menu_shell_bind_model((*C.GtkMenuShell)(_self_._value_), model, _cgo_action_namespace_, _cgo_with_separators_)
	return
}

func (_self_ *GtkMenuShell) Cancel() () {
	C.gtk_menu_shell_cancel((*C.GtkMenuShell)(_self_._value_))
	return
}

func (_self_ *GtkMenuShell) Deactivate() () {
	C.gtk_menu_shell_deactivate((*C.GtkMenuShell)(_self_._value_))
	return
}

func (_self_ *GtkMenuShell) Deselect() () {
	C.gtk_menu_shell_deselect((*C.GtkMenuShell)(_self_._value_))
	return
}

func (_self_ *GtkMenuShell) GetParentShell() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_shell_get_parent_shell((*C.GtkMenuShell)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuShell) GetSelectedItem() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_shell_get_selected_item((*C.GtkMenuShell)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuShell) GetTakeFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_menu_shell_get_take_focus((*C.GtkMenuShell)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMenuShell) Insert(child GtkWidgetKind, position int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_menu_shell_insert((*C.GtkMenuShell)(_self_._value_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *GtkMenuShell) Prepend(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_menu_shell_prepend((*C.GtkMenuShell)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkMenuShell) SelectFirst(search_sensitive bool) () {
	_cgo_search_sensitive_ := (C.gboolean)(C.FALSE)
	if search_sensitive { _cgo_search_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_shell_select_first((*C.GtkMenuShell)(_self_._value_), _cgo_search_sensitive_)
	return
}

func (_self_ *GtkMenuShell) SelectItem(menu_item GtkWidgetKind) () {
	_cgo_menu_item_ := (*C.GtkWidget)(menu_item._getValue())
	C.gtk_menu_shell_select_item((*C.GtkMenuShell)(_self_._value_), _cgo_menu_item_)
	return
}

func (_self_ *GtkMenuShell) SetTakeFocus(take_focus bool) () {
	_cgo_take_focus_ := (C.gboolean)(C.FALSE)
	if take_focus { _cgo_take_focus_ = (C.gboolean)(C.TRUE) }
	C.gtk_menu_shell_set_take_focus((*C.GtkMenuShell)(_self_._value_), _cgo_take_focus_)
	return
}

func MenuToolButtonNew(icon_widget GtkWidgetKind, label string) (_go__return__ GtkMenuToolButton) {
	_cgo_icon_widget_ := (*C.GtkWidget)(icon_widget._getValue())
	var _return_ *C.GtkToolItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_menu_tool_button_new(_cgo_icon_widget_, _cgo_label_)
	_go__return__ = ToGtkMenuToolButton(unsafe.Pointer(_return_))
	return
}

func MenuToolButtonNewFromStock(stock_id string) (_go__return__ GtkMenuToolButton) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_menu_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = ToGtkMenuToolButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuToolButton) GetMenu() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_menu_tool_button_get_menu((*C.GtkMenuToolButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMenuToolButton) SetArrowTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_menu_tool_button_set_arrow_tooltip_markup((*C.GtkMenuToolButton)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *GtkMenuToolButton) SetArrowTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_menu_tool_button_set_arrow_tooltip_text((*C.GtkMenuToolButton)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkMenuToolButton) SetMenu(menu GtkWidgetKind) () {
	_cgo_menu_ := (*C.GtkWidget)(menu._getValue())
	C.gtk_menu_tool_button_set_menu((*C.GtkMenuToolButton)(_self_._value_), _cgo_menu_)
	return
}

func (_self_ *GtkMessageDialog) GetImage() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_message_dialog_get_image((*C.GtkMessageDialog)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMessageDialog) GetMessageArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_message_dialog_get_message_area((*C.GtkMessageDialog)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMessageDialog) SetImage(image GtkWidgetKind) () {
	_cgo_image_ := (*C.GtkWidget)(image._getValue())
	C.gtk_message_dialog_set_image((*C.GtkMessageDialog)(_self_._value_), _cgo_image_)
	return
}

func (_self_ *GtkMessageDialog) SetMarkup(str string) () {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	C._gtk_message_dialog_set_markup((*C.GtkMessageDialog)(_self_._value_), _cgo_str_)
	return
}

func (_self_ *GtkMisc) GetAlignment() (_go_xalign_ float64, _go_yalign_ float64) {
	var xalign C.gfloat
	var yalign C.gfloat
	C.gtk_misc_get_alignment((*C.GtkMisc)(_self_._value_), &xalign, &yalign)
	_go_xalign_ = (float64)(xalign)
	_go_yalign_ = (float64)(yalign)
	return
}

func (_self_ *GtkMisc) GetPadding() (_go_xpad_ int, _go_ypad_ int) {
	var xpad C.gint
	var ypad C.gint
	C.gtk_misc_get_padding((*C.GtkMisc)(_self_._value_), &xpad, &ypad)
	_go_xpad_ = (int)(xpad)
	_go_ypad_ = (int)(ypad)
	return
}

func (_self_ *GtkMisc) SetAlignment(xalign float64, yalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	_cgo_yalign_ := (C.gfloat)(yalign)
	C.gtk_misc_set_alignment((*C.GtkMisc)(_self_._value_), _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *GtkMisc) SetPadding(xpad int, ypad int) () {
	_cgo_xpad_ := (C.gint)(xpad)
	_cgo_ypad_ := (C.gint)(ypad)
	C.gtk_misc_set_padding((*C.GtkMisc)(_self_._value_), _cgo_xpad_, _cgo_ypad_)
	return
}

func GtkMountOperationNew(parent GtkWindowKind) (_return_ *C.GMountOperation) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	_return_ = C.gtk_mount_operation_new(_cgo_parent_)
	return
}

func (_self_ *GtkMountOperation) GetParent() (_go__return__ GtkWindow) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_mount_operation_get_parent((*C.GtkMountOperation)(_self_._value_))
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkMountOperation) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_mount_operation_get_screen((*C.GtkMountOperation)(_self_._value_))
	return
}

func (_self_ *GtkMountOperation) IsShowing() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_mount_operation_is_showing((*C.GtkMountOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkMountOperation) SetParent(parent GtkWindowKind) () {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	C.gtk_mount_operation_set_parent((*C.GtkMountOperation)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *GtkMountOperation) SetScreen(screen *C.GdkScreen) () {
	C.gtk_mount_operation_set_screen((*C.GtkMountOperation)(_self_._value_), screen)
	return
}

func NotebookNew() (_go__return__ GtkNotebook) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_new()
	_go__return__ = ToGtkNotebook(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNotebook) AppendPage(child GtkWidgetKind, tab_label GtkWidgetKind) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	var _return_ C.gint
	_return_ = C.gtk_notebook_append_page((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) AppendPageMenu(child GtkWidgetKind, tab_label GtkWidgetKind, menu_label GtkWidgetKind) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	_cgo_menu_label_ := (*C.GtkWidget)(menu_label._getValue())
	var _return_ C.gint
	_return_ = C.gtk_notebook_append_page_menu((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) GetActionWidget(pack_type C.GtkPackType) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_action_widget((*C.GtkNotebook)(_self_._value_), pack_type)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNotebook) GetCurrentPage() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_notebook_get_current_page((*C.GtkNotebook)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) GetGroupName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_group_name((*C.GtkNotebook)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkNotebook) GetMenuLabel(child GtkWidgetKind) (_go__return__ GtkWidget) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_menu_label((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNotebook) GetMenuLabelText(child GtkWidgetKind) (_go__return__ string) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_menu_label_text((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkNotebook) GetNPages() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_notebook_get_n_pages((*C.GtkNotebook)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) GetNthPage(page_num int) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cgo_page_num_ := (C.gint)(page_num)
	_return_ = C.gtk_notebook_get_nth_page((*C.GtkNotebook)(_self_._value_), _cgo_page_num_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNotebook) GetScrollable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_scrollable((*C.GtkNotebook)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkNotebook) GetShowBorder() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_show_border((*C.GtkNotebook)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkNotebook) GetShowTabs() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_show_tabs((*C.GtkNotebook)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkNotebook) GetTabDetachable(child GtkWidgetKind) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_tab_detachable((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkNotebook) GetTabLabel(child GtkWidgetKind) (_go__return__ GtkWidget) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_notebook_get_tab_label((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNotebook) GetTabLabelText(child GtkWidgetKind) (_go__return__ string) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ *C.gchar
	_return_ = C._gtk_notebook_get_tab_label_text((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkNotebook) GetTabPos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_notebook_get_tab_pos((*C.GtkNotebook)(_self_._value_))
	return
}

func (_self_ *GtkNotebook) GetTabReorderable(child GtkWidgetKind) (_go__return__ bool) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_notebook_get_tab_reorderable((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkNotebook) InsertPage(child GtkWidgetKind, tab_label GtkWidgetKind, position int) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_notebook_insert_page((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) InsertPageMenu(child GtkWidgetKind, tab_label GtkWidgetKind, menu_label GtkWidgetKind, position int) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	_cgo_menu_label_ := (*C.GtkWidget)(menu_label._getValue())
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_notebook_insert_page_menu((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) NextPage() () {
	C.gtk_notebook_next_page((*C.GtkNotebook)(_self_._value_))
	return
}

func (_self_ *GtkNotebook) PageNum(child GtkWidgetKind) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	var _return_ C.gint
	_return_ = C.gtk_notebook_page_num((*C.GtkNotebook)(_self_._value_), _cgo_child_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) PopupDisable() () {
	C.gtk_notebook_popup_disable((*C.GtkNotebook)(_self_._value_))
	return
}

func (_self_ *GtkNotebook) PopupEnable() () {
	C.gtk_notebook_popup_enable((*C.GtkNotebook)(_self_._value_))
	return
}

func (_self_ *GtkNotebook) PrependPage(child GtkWidgetKind, tab_label GtkWidgetKind) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	var _return_ C.gint
	_return_ = C.gtk_notebook_prepend_page((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) PrependPageMenu(child GtkWidgetKind, tab_label GtkWidgetKind, menu_label GtkWidgetKind) (_go__return__ int) {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	_cgo_menu_label_ := (*C.GtkWidget)(menu_label._getValue())
	var _return_ C.gint
	_return_ = C.gtk_notebook_prepend_page_menu((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_, _cgo_menu_label_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNotebook) PrevPage() () {
	C.gtk_notebook_prev_page((*C.GtkNotebook)(_self_._value_))
	return
}

func (_self_ *GtkNotebook) RemovePage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_notebook_remove_page((*C.GtkNotebook)(_self_._value_), _cgo_page_num_)
	return
}

func (_self_ *GtkNotebook) ReorderChild(child GtkWidgetKind, position int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_notebook_reorder_child((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_position_)
	return
}

func (_self_ *GtkNotebook) SetActionWidget(widget GtkWidgetKind, pack_type C.GtkPackType) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_notebook_set_action_widget((*C.GtkNotebook)(_self_._value_), _cgo_widget_, pack_type)
	return
}

func (_self_ *GtkNotebook) SetCurrentPage(page_num int) () {
	_cgo_page_num_ := (C.gint)(page_num)
	C.gtk_notebook_set_current_page((*C.GtkNotebook)(_self_._value_), _cgo_page_num_)
	return
}

func (_self_ *GtkNotebook) SetGroupName(group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_notebook_set_group_name((*C.GtkNotebook)(_self_._value_), _cgo_group_name_)
	return
}

func (_self_ *GtkNotebook) SetMenuLabel(child GtkWidgetKind, menu_label GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_menu_label_ := (*C.GtkWidget)(menu_label._getValue())
	C.gtk_notebook_set_menu_label((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_menu_label_)
	return
}

func (_self_ *GtkNotebook) SetMenuLabelText(child GtkWidgetKind, menu_text string) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cstring_menu_text_ := C.CString(menu_text)
	_cgo_menu_text_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_text_))
	defer C.free(unsafe.Pointer(_cstring_menu_text_))
	C._gtk_notebook_set_menu_label_text((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_menu_text_)
	return
}

func (_self_ *GtkNotebook) SetScrollable(scrollable bool) () {
	_cgo_scrollable_ := (C.gboolean)(C.FALSE)
	if scrollable { _cgo_scrollable_ = (C.gboolean)(C.TRUE) }
	C.gtk_notebook_set_scrollable((*C.GtkNotebook)(_self_._value_), _cgo_scrollable_)
	return
}

func (_self_ *GtkNotebook) SetShowBorder(show_border bool) () {
	_cgo_show_border_ := (C.gboolean)(C.FALSE)
	if show_border { _cgo_show_border_ = (C.gboolean)(C.TRUE) }
	C.gtk_notebook_set_show_border((*C.GtkNotebook)(_self_._value_), _cgo_show_border_)
	return
}

func (_self_ *GtkNotebook) SetShowTabs(show_tabs bool) () {
	_cgo_show_tabs_ := (C.gboolean)(C.FALSE)
	if show_tabs { _cgo_show_tabs_ = (C.gboolean)(C.TRUE) }
	C.gtk_notebook_set_show_tabs((*C.GtkNotebook)(_self_._value_), _cgo_show_tabs_)
	return
}

func (_self_ *GtkNotebook) SetTabDetachable(child GtkWidgetKind, detachable bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_detachable_ := (C.gboolean)(C.FALSE)
	if detachable { _cgo_detachable_ = (C.gboolean)(C.TRUE) }
	C.gtk_notebook_set_tab_detachable((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_detachable_)
	return
}

func (_self_ *GtkNotebook) SetTabLabel(child GtkWidgetKind, tab_label GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_tab_label_ := (*C.GtkWidget)(tab_label._getValue())
	C.gtk_notebook_set_tab_label((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_label_)
	return
}

func (_self_ *GtkNotebook) SetTabLabelText(child GtkWidgetKind, tab_text string) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cstring_tab_text_ := C.CString(tab_text)
	_cgo_tab_text_ := (*C.gchar)(unsafe.Pointer(_cstring_tab_text_))
	defer C.free(unsafe.Pointer(_cstring_tab_text_))
	C._gtk_notebook_set_tab_label_text((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_tab_text_)
	return
}

func (_self_ *GtkNotebook) SetTabPos(pos C.GtkPositionType) () {
	C.gtk_notebook_set_tab_pos((*C.GtkNotebook)(_self_._value_), pos)
	return
}

func (_self_ *GtkNotebook) SetTabReorderable(child GtkWidgetKind, reorderable bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_reorderable_ := (C.gboolean)(C.FALSE)
	if reorderable { _cgo_reorderable_ = (C.gboolean)(C.TRUE) }
	C.gtk_notebook_set_tab_reorderable((*C.GtkNotebook)(_self_._value_), _cgo_child_, _cgo_reorderable_)
	return
}

func NumerableIconNew(base_icon *C.GIcon) (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_new(base_icon)
	return
}

func NumerableIconNewWithStyleContext(base_icon *C.GIcon, context GtkStyleContextKind) (_return_ *C.GIcon) {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_return_ = C.gtk_numerable_icon_new_with_style_context(base_icon, _cgo_context_)
	return
}

func (_self_ *GtkNumerableIcon) GetBackgroundGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_get_background_gicon((*C.GtkNumerableIcon)(_self_._value_))
	return
}

func (_self_ *GtkNumerableIcon) GetBackgroundIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_numerable_icon_get_background_icon_name((*C.GtkNumerableIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkNumerableIcon) GetCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_numerable_icon_get_count((*C.GtkNumerableIcon)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkNumerableIcon) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_numerable_icon_get_label((*C.GtkNumerableIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkNumerableIcon) GetStyleContext() (_go__return__ GtkStyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_numerable_icon_get_style_context((*C.GtkNumerableIcon)(_self_._value_))
	_go__return__ = ToGtkStyleContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkNumerableIcon) SetBackgroundGicon(icon *C.GIcon) () {
	C.gtk_numerable_icon_set_background_gicon((*C.GtkNumerableIcon)(_self_._value_), icon)
	return
}

func (_self_ *GtkNumerableIcon) SetBackgroundIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_numerable_icon_set_background_icon_name((*C.GtkNumerableIcon)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkNumerableIcon) SetCount(count int) () {
	_cgo_count_ := (C.gint)(count)
	C.gtk_numerable_icon_set_count((*C.GtkNumerableIcon)(_self_._value_), _cgo_count_)
	return
}

func (_self_ *GtkNumerableIcon) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_numerable_icon_set_label((*C.GtkNumerableIcon)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkNumerableIcon) SetStyleContext(style GtkStyleContextKind) () {
	_cgo_style_ := (*C.GtkStyleContext)(style._getValue())
	C.gtk_numerable_icon_set_style_context((*C.GtkNumerableIcon)(_self_._value_), _cgo_style_)
	return
}

func OffscreenWindowNew() (_go__return__ GtkOffscreenWindow) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_offscreen_window_new()
	_go__return__ = ToGtkOffscreenWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkOffscreenWindow) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_offscreen_window_get_pixbuf((*C.GtkOffscreenWindow)(_self_._value_))
	return
}

func (_self_ *GtkOffscreenWindow) GetSurface() (_return_ *C.cairo_surface_t) {
	_return_ = C.gtk_offscreen_window_get_surface((*C.GtkOffscreenWindow)(_self_._value_))
	return
}

func OverlayNew() (_go__return__ GtkOverlay) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_overlay_new()
	_go__return__ = ToGtkOverlay(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkOverlay) AddOverlay(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_overlay_add_overlay((*C.GtkOverlay)(_self_._value_), _cgo_widget_)
	return
}

func PageSetupNew() (_go__return__ GtkPageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_page_setup_new()
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func PageSetupNewFromFile(file_name string) (_go__return__ GtkPageSetup, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPageSetup
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	_return_ = C._gtk_page_setup_new_from_file(_cgo_file_name_, _error_)
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func PageSetupNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ GtkPageSetup, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPageSetup
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_page_setup_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPageSetup) Copy() (_go__return__ GtkPageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_page_setup_copy((*C.GtkPageSetup)(_self_._value_))
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPageSetup) GetBottomMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_bottom_margin((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetLeftMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_left_margin((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_page_setup_get_orientation((*C.GtkPageSetup)(_self_._value_))
	return
}

func (_self_ *GtkPageSetup) GetPageHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_page_height((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetPageWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_page_width((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetPaperHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_paper_height((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetPaperSize() (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_page_setup_get_paper_size((*C.GtkPageSetup)(_self_._value_))
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPageSetup) GetPaperWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_paper_width((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetRightMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_right_margin((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) GetTopMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_page_setup_get_top_margin((*C.GtkPageSetup)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPageSetup) LoadFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.char)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_load_file((*C.GtkPageSetup)(_self_._value_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPageSetup) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_load_key_file((*C.GtkPageSetup)(_self_._value_), key_file, _cgo_group_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPageSetup) SetBottomMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_bottom_margin((*C.GtkPageSetup)(_self_._value_), _cgo_margin_, unit)
	return
}

func (_self_ *GtkPageSetup) SetLeftMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_left_margin((*C.GtkPageSetup)(_self_._value_), _cgo_margin_, unit)
	return
}

func (_self_ *GtkPageSetup) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_page_setup_set_orientation((*C.GtkPageSetup)(_self_._value_), orientation)
	return
}

func (_self_ *GtkPageSetup) SetPaperSize(size *GtkPaperSize) () {
	_cgo_size_ := (*C.GtkPaperSize)(unsafe.Pointer(size))
	C.gtk_page_setup_set_paper_size((*C.GtkPageSetup)(_self_._value_), _cgo_size_)
	return
}

func (_self_ *GtkPageSetup) SetPaperSizeAndDefaultMargins(size *GtkPaperSize) () {
	_cgo_size_ := (*C.GtkPaperSize)(unsafe.Pointer(size))
	C.gtk_page_setup_set_paper_size_and_default_margins((*C.GtkPageSetup)(_self_._value_), _cgo_size_)
	return
}

func (_self_ *GtkPageSetup) SetRightMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_right_margin((*C.GtkPageSetup)(_self_._value_), _cgo_margin_, unit)
	return
}

func (_self_ *GtkPageSetup) SetTopMargin(margin float64, unit C.GtkUnit) () {
	_cgo_margin_ := (C.gdouble)(margin)
	C.gtk_page_setup_set_top_margin((*C.GtkPageSetup)(_self_._value_), _cgo_margin_, unit)
	return
}

func (_self_ *GtkPageSetup) ToFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.char)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_page_setup_to_file((*C.GtkPageSetup)(_self_._value_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPageSetup) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_page_setup_to_key_file((*C.GtkPageSetup)(_self_._value_), key_file, _cgo_group_name_)
	return
}

func PanedNew(orientation C.GtkOrientation) (_go__return__ GtkPaned) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_new(orientation)
	_go__return__ = ToGtkPaned(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPaned) Add1(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_paned_add1((*C.GtkPaned)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkPaned) Add2(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_paned_add2((*C.GtkPaned)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkPaned) GetChild1() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_get_child1((*C.GtkPaned)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPaned) GetChild2() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_paned_get_child2((*C.GtkPaned)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPaned) GetHandleWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_paned_get_handle_window((*C.GtkPaned)(_self_._value_))
	return
}

func (_self_ *GtkPaned) GetPosition() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_paned_get_position((*C.GtkPaned)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPaned) Pack1(child GtkWidgetKind, resize bool, shrink bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_resize_ := (C.gboolean)(C.FALSE)
	if resize { _cgo_resize_ = (C.gboolean)(C.TRUE) }
	_cgo_shrink_ := (C.gboolean)(C.FALSE)
	if shrink { _cgo_shrink_ = (C.gboolean)(C.TRUE) }
	C.gtk_paned_pack1((*C.GtkPaned)(_self_._value_), _cgo_child_, _cgo_resize_, _cgo_shrink_)
	return
}

func (_self_ *GtkPaned) Pack2(child GtkWidgetKind, resize bool, shrink bool) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_resize_ := (C.gboolean)(C.FALSE)
	if resize { _cgo_resize_ = (C.gboolean)(C.TRUE) }
	_cgo_shrink_ := (C.gboolean)(C.FALSE)
	if shrink { _cgo_shrink_ = (C.gboolean)(C.TRUE) }
	C.gtk_paned_pack2((*C.GtkPaned)(_self_._value_), _cgo_child_, _cgo_resize_, _cgo_shrink_)
	return
}

func (_self_ *GtkPaned) SetPosition(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.gtk_paned_set_position((*C.GtkPaned)(_self_._value_), _cgo_position_)
	return
}

func GtkPlugNew(socket_id C.Window) (_go__return__ GtkPlug) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_plug_new(socket_id)
	_go__return__ = ToGtkPlug(unsafe.Pointer(_return_))
	return
}

func PlugNewForDisplay(display *C.GdkDisplay, socket_id C.Window) (_go__return__ GtkPlug) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_plug_new_for_display(display, socket_id)
	_go__return__ = ToGtkPlug(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPlug) Construct(socket_id C.Window) () {
	C.gtk_plug_construct((*C.GtkPlug)(_self_._value_), socket_id)
	return
}

func (_self_ *GtkPlug) ConstructForDisplay(display *C.GdkDisplay, socket_id C.Window) () {
	C.gtk_plug_construct_for_display((*C.GtkPlug)(_self_._value_), display, socket_id)
	return
}

func (_self_ *GtkPlug) GetEmbedded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_plug_get_embedded((*C.GtkPlug)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPlug) GetId() (_return_ C.Window) {
	_return_ = C.gtk_plug_get_id((*C.GtkPlug)(_self_._value_))
	return
}

func (_self_ *GtkPlug) GetSocketWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_plug_get_socket_window((*C.GtkPlug)(_self_._value_))
	return
}

func (_self_ *GtkPrintContext) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_print_context_create_pango_context((*C.GtkPrintContext)(_self_._value_))
	return
}

func (_self_ *GtkPrintContext) CreatePangoLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_print_context_create_pango_layout((*C.GtkPrintContext)(_self_._value_))
	return
}

func (_self_ *GtkPrintContext) GetCairoContext() (_return_ *C.cairo_t) {
	_return_ = C.gtk_print_context_get_cairo_context((*C.GtkPrintContext)(_self_._value_))
	return
}

func (_self_ *GtkPrintContext) GetDpiX() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_dpi_x((*C.GtkPrintContext)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintContext) GetDpiY() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_dpi_y((*C.GtkPrintContext)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintContext) GetHardMargins() (_go__return__ bool, _go_top_ float64, _go_bottom_ float64, _go_left_ float64, _go_right_ float64) {
	var top C.gdouble
	var bottom C.gdouble
	var left C.gdouble
	var right C.gdouble
	var _return_ C.gboolean
	_return_ = C.gtk_print_context_get_hard_margins((*C.GtkPrintContext)(_self_._value_), &top, &bottom, &left, &right)
	_go_top_ = (float64)(top)
	_go_bottom_ = (float64)(bottom)
	_go_left_ = (float64)(left)
	_go_right_ = (float64)(right)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintContext) GetHeight() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_height((*C.GtkPrintContext)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintContext) GetPageSetup() (_go__return__ GtkPageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_context_get_page_setup((*C.GtkPrintContext)(_self_._value_))
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintContext) GetPangoFontmap() (_return_ *C.PangoFontMap) {
	_return_ = C.gtk_print_context_get_pango_fontmap((*C.GtkPrintContext)(_self_._value_))
	return
}

func (_self_ *GtkPrintContext) GetWidth() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_context_get_width((*C.GtkPrintContext)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintContext) SetCairoContext(cr *C.cairo_t, dpi_x C.double, dpi_y C.double) () {
	C.gtk_print_context_set_cairo_context((*C.GtkPrintContext)(_self_._value_), cr, dpi_x, dpi_y)
	return
}

func PrintOperationNew() (_go__return__ GtkPrintOperation) {
	var _return_ *C.GtkPrintOperation
	_return_ = C.gtk_print_operation_new()
	_go__return__ = ToGtkPrintOperation(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintOperation) Cancel() () {
	C.gtk_print_operation_cancel((*C.GtkPrintOperation)(_self_._value_))
	return
}

func (_self_ *GtkPrintOperation) DrawPageFinish() () {
	C.gtk_print_operation_draw_page_finish((*C.GtkPrintOperation)(_self_._value_))
	return
}

func (_self_ *GtkPrintOperation) GetDefaultPageSetup() (_go__return__ GtkPageSetup) {
	var _return_ *C.GtkPageSetup
	_return_ = C.gtk_print_operation_get_default_page_setup((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = ToGtkPageSetup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintOperation) GetEmbedPageSetup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_embed_page_setup((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintOperation) GetError() (_error_ unsafe.Pointer) {
	C._gtk_print_operation_get_error((*C.GtkPrintOperation)(_self_._value_), _error_)
	return
}

func (_self_ *GtkPrintOperation) GetHasSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_has_selection((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintOperation) GetNPagesToPrint() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_operation_get_n_pages_to_print((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintOperation) GetPrintSettings() (_go__return__ GtkPrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_operation_get_print_settings((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = ToGtkPrintSettings(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintOperation) GetStatus() (_return_ C.GtkPrintStatus) {
	_return_ = C.gtk_print_operation_get_status((*C.GtkPrintOperation)(_self_._value_))
	return
}

func (_self_ *GtkPrintOperation) GetStatusString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_operation_get_status_string((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintOperation) GetSupportSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_get_support_selection((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintOperation) IsFinished() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_operation_is_finished((*C.GtkPrintOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintOperation) Run(action C.GtkPrintOperationAction, parent GtkWindowKind) (_return_ C.GtkPrintOperationResult, _error_ unsafe.Pointer) {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	_return_ = C._gtk_print_operation_run((*C.GtkPrintOperation)(_self_._value_), action, _cgo_parent_, _error_)
	return
}

func (_self_ *GtkPrintOperation) SetAllowAsync(allow_async bool) () {
	_cgo_allow_async_ := (C.gboolean)(C.FALSE)
	if allow_async { _cgo_allow_async_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_allow_async((*C.GtkPrintOperation)(_self_._value_), _cgo_allow_async_)
	return
}

func (_self_ *GtkPrintOperation) SetCurrentPage(current_page int) () {
	_cgo_current_page_ := (C.gint)(current_page)
	C.gtk_print_operation_set_current_page((*C.GtkPrintOperation)(_self_._value_), _cgo_current_page_)
	return
}

func (_self_ *GtkPrintOperation) SetCustomTabLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_print_operation_set_custom_tab_label((*C.GtkPrintOperation)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkPrintOperation) SetDefaultPageSetup(default_page_setup GtkPageSetupKind) () {
	_cgo_default_page_setup_ := (*C.GtkPageSetup)(default_page_setup._getValue())
	C.gtk_print_operation_set_default_page_setup((*C.GtkPrintOperation)(_self_._value_), _cgo_default_page_setup_)
	return
}

func (_self_ *GtkPrintOperation) SetDeferDrawing() () {
	C.gtk_print_operation_set_defer_drawing((*C.GtkPrintOperation)(_self_._value_))
	return
}

func (_self_ *GtkPrintOperation) SetEmbedPageSetup(embed bool) () {
	_cgo_embed_ := (C.gboolean)(C.FALSE)
	if embed { _cgo_embed_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_embed_page_setup((*C.GtkPrintOperation)(_self_._value_), _cgo_embed_)
	return
}

func (_self_ *GtkPrintOperation) SetExportFilename(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_print_operation_set_export_filename((*C.GtkPrintOperation)(_self_._value_), _cgo_filename_)
	return
}

func (_self_ *GtkPrintOperation) SetHasSelection(has_selection bool) () {
	_cgo_has_selection_ := (C.gboolean)(C.FALSE)
	if has_selection { _cgo_has_selection_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_has_selection((*C.GtkPrintOperation)(_self_._value_), _cgo_has_selection_)
	return
}

func (_self_ *GtkPrintOperation) SetJobName(job_name string) () {
	_cstring_job_name_ := C.CString(job_name)
	_cgo_job_name_ := (*C.gchar)(unsafe.Pointer(_cstring_job_name_))
	defer C.free(unsafe.Pointer(_cstring_job_name_))
	C._gtk_print_operation_set_job_name((*C.GtkPrintOperation)(_self_._value_), _cgo_job_name_)
	return
}

func (_self_ *GtkPrintOperation) SetNPages(n_pages int) () {
	_cgo_n_pages_ := (C.gint)(n_pages)
	C.gtk_print_operation_set_n_pages((*C.GtkPrintOperation)(_self_._value_), _cgo_n_pages_)
	return
}

func (_self_ *GtkPrintOperation) SetPrintSettings(print_settings GtkPrintSettingsKind) () {
	_cgo_print_settings_ := (*C.GtkPrintSettings)(print_settings._getValue())
	C.gtk_print_operation_set_print_settings((*C.GtkPrintOperation)(_self_._value_), _cgo_print_settings_)
	return
}

func (_self_ *GtkPrintOperation) SetShowProgress(show_progress bool) () {
	_cgo_show_progress_ := (C.gboolean)(C.FALSE)
	if show_progress { _cgo_show_progress_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_show_progress((*C.GtkPrintOperation)(_self_._value_), _cgo_show_progress_)
	return
}

func (_self_ *GtkPrintOperation) SetSupportSelection(support_selection bool) () {
	_cgo_support_selection_ := (C.gboolean)(C.FALSE)
	if support_selection { _cgo_support_selection_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_support_selection((*C.GtkPrintOperation)(_self_._value_), _cgo_support_selection_)
	return
}

func (_self_ *GtkPrintOperation) SetTrackPrintStatus(track_status bool) () {
	_cgo_track_status_ := (C.gboolean)(C.FALSE)
	if track_status { _cgo_track_status_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_track_print_status((*C.GtkPrintOperation)(_self_._value_), _cgo_track_status_)
	return
}

func (_self_ *GtkPrintOperation) SetUnit(unit C.GtkUnit) () {
	C.gtk_print_operation_set_unit((*C.GtkPrintOperation)(_self_._value_), unit)
	return
}

func (_self_ *GtkPrintOperation) SetUseFullPage(full_page bool) () {
	_cgo_full_page_ := (C.gboolean)(C.FALSE)
	if full_page { _cgo_full_page_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_operation_set_use_full_page((*C.GtkPrintOperation)(_self_._value_), _cgo_full_page_)
	return
}

func PrintSettingsNew() (_go__return__ GtkPrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_settings_new()
	_go__return__ = ToGtkPrintSettings(unsafe.Pointer(_return_))
	return
}

func PrintSettingsNewFromFile(file_name string) (_go__return__ GtkPrintSettings, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPrintSettings
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	_return_ = C._gtk_print_settings_new_from_file(_cgo_file_name_, _error_)
	_go__return__ = ToGtkPrintSettings(unsafe.Pointer(_return_))
	return
}

func PrintSettingsNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ GtkPrintSettings, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPrintSettings
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_print_settings_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = ToGtkPrintSettings(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintSettings) Copy() (_go__return__ GtkPrintSettings) {
	var _return_ *C.GtkPrintSettings
	_return_ = C.gtk_print_settings_copy((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = ToGtkPrintSettings(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintSettings) Foreach(func_ C.GtkPrintSettingsFunc, user_data C.gpointer) () {
	C.gtk_print_settings_foreach((*C.GtkPrintSettings)(_self_._value_), func_, user_data)
	return
}

func (_self_ *GtkPrintSettings) Get(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetBool(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_get_bool((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) GetCollate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_collate((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) GetDefaultSource() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_default_source((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetDither() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_dither((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetDouble(key string) (_go__return__ float64) {
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_double((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetDoubleWithDefault(key string, def float64) (_go__return__ float64) {
	_cgo_def_ := (C.gdouble)(def)
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_double_with_default((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_def_)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetDuplex() (_return_ C.GtkPrintDuplex) {
	_return_ = C.gtk_print_settings_get_duplex((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetFinishings() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_finishings((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetInt(key string) (_go__return__ int) {
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_int((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetIntWithDefault(key string, def int) (_go__return__ int) {
	_cgo_def_ := (C.gint)(def)
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_int_with_default((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_def_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetLength(key string, unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._gtk_print_settings_get_length((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetMediaType() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_media_type((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetNCopies() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_n_copies((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetNumberUp() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_number_up((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetNumberUpLayout() (_return_ C.GtkNumberUpLayout) {
	_return_ = C.gtk_print_settings_get_number_up_layout((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_print_settings_get_orientation((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetOutputBin() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_output_bin((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetPageRanges() (_return_ *C.GtkPageRange, _go_num_ranges_ int) {
	var num_ranges C.gint
	_return_ = C.gtk_print_settings_get_page_ranges((*C.GtkPrintSettings)(_self_._value_), &num_ranges)
	_go_num_ranges_ = (int)(num_ranges)
	return
}

func (_self_ *GtkPrintSettings) GetPageSet() (_return_ C.GtkPageSet) {
	_return_ = C.gtk_print_settings_get_page_set((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetPaperHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_paper_height((*C.GtkPrintSettings)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetPaperSize() (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_print_settings_get_paper_size((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPrintSettings) GetPaperWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_paper_width((*C.GtkPrintSettings)(_self_._value_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetPrintPages() (_return_ C.GtkPrintPages) {
	_return_ = C.gtk_print_settings_get_print_pages((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetPrinter() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_print_settings_get_printer((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPrintSettings) GetPrinterLpi() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_printer_lpi((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetQuality() (_return_ C.GtkPrintQuality) {
	_return_ = C.gtk_print_settings_get_quality((*C.GtkPrintSettings)(_self_._value_))
	return
}

func (_self_ *GtkPrintSettings) GetResolution() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetResolutionX() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution_x((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetResolutionY() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_print_settings_get_resolution_y((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetReverse() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_reverse((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) GetScale() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_print_settings_get_scale((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPrintSettings) GetUseColor() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_print_settings_get_use_color((*C.GtkPrintSettings)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) HasKey(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_has_key((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) LoadFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_load_file((*C.GtkPrintSettings)(_self_._value_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) LoadKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_load_key_file((*C.GtkPrintSettings)(_self_._value_), key_file, _cgo_group_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) Set(key string, value string) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._gtk_print_settings_set((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *GtkPrintSettings) SetBool(key string, value bool) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cgo_value_ := (C.gboolean)(C.FALSE)
	if value { _cgo_value_ = (C.gboolean)(C.TRUE) }
	C._gtk_print_settings_set_bool((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *GtkPrintSettings) SetCollate(collate bool) () {
	_cgo_collate_ := (C.gboolean)(C.FALSE)
	if collate { _cgo_collate_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_settings_set_collate((*C.GtkPrintSettings)(_self_._value_), _cgo_collate_)
	return
}

func (_self_ *GtkPrintSettings) SetDefaultSource(default_source string) () {
	_cstring_default_source_ := C.CString(default_source)
	_cgo_default_source_ := (*C.gchar)(unsafe.Pointer(_cstring_default_source_))
	defer C.free(unsafe.Pointer(_cstring_default_source_))
	C._gtk_print_settings_set_default_source((*C.GtkPrintSettings)(_self_._value_), _cgo_default_source_)
	return
}

func (_self_ *GtkPrintSettings) SetDither(dither string) () {
	_cstring_dither_ := C.CString(dither)
	_cgo_dither_ := (*C.gchar)(unsafe.Pointer(_cstring_dither_))
	defer C.free(unsafe.Pointer(_cstring_dither_))
	C._gtk_print_settings_set_dither((*C.GtkPrintSettings)(_self_._value_), _cgo_dither_)
	return
}

func (_self_ *GtkPrintSettings) SetDouble(key string, value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_double((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *GtkPrintSettings) SetDuplex(duplex C.GtkPrintDuplex) () {
	C.gtk_print_settings_set_duplex((*C.GtkPrintSettings)(_self_._value_), duplex)
	return
}

func (_self_ *GtkPrintSettings) SetFinishings(finishings string) () {
	_cstring_finishings_ := C.CString(finishings)
	_cgo_finishings_ := (*C.gchar)(unsafe.Pointer(_cstring_finishings_))
	defer C.free(unsafe.Pointer(_cstring_finishings_))
	C._gtk_print_settings_set_finishings((*C.GtkPrintSettings)(_self_._value_), _cgo_finishings_)
	return
}

func (_self_ *GtkPrintSettings) SetInt(key string, value int) () {
	_cgo_value_ := (C.gint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_int((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	return
}

func (_self_ *GtkPrintSettings) SetLength(key string, value float64, unit C.GtkUnit) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_set_length((*C.GtkPrintSettings)(_self_._value_), _cgo_key_, _cgo_value_, unit)
	return
}

func (_self_ *GtkPrintSettings) SetMediaType(media_type string) () {
	_cstring_media_type_ := C.CString(media_type)
	_cgo_media_type_ := (*C.gchar)(unsafe.Pointer(_cstring_media_type_))
	defer C.free(unsafe.Pointer(_cstring_media_type_))
	C._gtk_print_settings_set_media_type((*C.GtkPrintSettings)(_self_._value_), _cgo_media_type_)
	return
}

func (_self_ *GtkPrintSettings) SetNCopies(num_copies int) () {
	_cgo_num_copies_ := (C.gint)(num_copies)
	C.gtk_print_settings_set_n_copies((*C.GtkPrintSettings)(_self_._value_), _cgo_num_copies_)
	return
}

func (_self_ *GtkPrintSettings) SetNumberUp(number_up int) () {
	_cgo_number_up_ := (C.gint)(number_up)
	C.gtk_print_settings_set_number_up((*C.GtkPrintSettings)(_self_._value_), _cgo_number_up_)
	return
}

func (_self_ *GtkPrintSettings) SetNumberUpLayout(number_up_layout C.GtkNumberUpLayout) () {
	C.gtk_print_settings_set_number_up_layout((*C.GtkPrintSettings)(_self_._value_), number_up_layout)
	return
}

func (_self_ *GtkPrintSettings) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_print_settings_set_orientation((*C.GtkPrintSettings)(_self_._value_), orientation)
	return
}

func (_self_ *GtkPrintSettings) SetOutputBin(output_bin string) () {
	_cstring_output_bin_ := C.CString(output_bin)
	_cgo_output_bin_ := (*C.gchar)(unsafe.Pointer(_cstring_output_bin_))
	defer C.free(unsafe.Pointer(_cstring_output_bin_))
	C._gtk_print_settings_set_output_bin((*C.GtkPrintSettings)(_self_._value_), _cgo_output_bin_)
	return
}

func (_self_ *GtkPrintSettings) SetPageSet(page_set C.GtkPageSet) () {
	C.gtk_print_settings_set_page_set((*C.GtkPrintSettings)(_self_._value_), page_set)
	return
}

func (_self_ *GtkPrintSettings) SetPaperHeight(height float64, unit C.GtkUnit) () {
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_print_settings_set_paper_height((*C.GtkPrintSettings)(_self_._value_), _cgo_height_, unit)
	return
}

func (_self_ *GtkPrintSettings) SetPaperSize(paper_size *GtkPaperSize) () {
	_cgo_paper_size_ := (*C.GtkPaperSize)(unsafe.Pointer(paper_size))
	C.gtk_print_settings_set_paper_size((*C.GtkPrintSettings)(_self_._value_), _cgo_paper_size_)
	return
}

func (_self_ *GtkPrintSettings) SetPaperWidth(width float64, unit C.GtkUnit) () {
	_cgo_width_ := (C.gdouble)(width)
	C.gtk_print_settings_set_paper_width((*C.GtkPrintSettings)(_self_._value_), _cgo_width_, unit)
	return
}

func (_self_ *GtkPrintSettings) SetPrintPages(pages C.GtkPrintPages) () {
	C.gtk_print_settings_set_print_pages((*C.GtkPrintSettings)(_self_._value_), pages)
	return
}

func (_self_ *GtkPrintSettings) SetPrinter(printer string) () {
	_cstring_printer_ := C.CString(printer)
	_cgo_printer_ := (*C.gchar)(unsafe.Pointer(_cstring_printer_))
	defer C.free(unsafe.Pointer(_cstring_printer_))
	C._gtk_print_settings_set_printer((*C.GtkPrintSettings)(_self_._value_), _cgo_printer_)
	return
}

func (_self_ *GtkPrintSettings) SetPrinterLpi(lpi float64) () {
	_cgo_lpi_ := (C.gdouble)(lpi)
	C.gtk_print_settings_set_printer_lpi((*C.GtkPrintSettings)(_self_._value_), _cgo_lpi_)
	return
}

func (_self_ *GtkPrintSettings) SetQuality(quality C.GtkPrintQuality) () {
	C.gtk_print_settings_set_quality((*C.GtkPrintSettings)(_self_._value_), quality)
	return
}

func (_self_ *GtkPrintSettings) SetResolution(resolution int) () {
	_cgo_resolution_ := (C.gint)(resolution)
	C.gtk_print_settings_set_resolution((*C.GtkPrintSettings)(_self_._value_), _cgo_resolution_)
	return
}

func (_self_ *GtkPrintSettings) SetResolutionXy(resolution_x int, resolution_y int) () {
	_cgo_resolution_x_ := (C.gint)(resolution_x)
	_cgo_resolution_y_ := (C.gint)(resolution_y)
	C.gtk_print_settings_set_resolution_xy((*C.GtkPrintSettings)(_self_._value_), _cgo_resolution_x_, _cgo_resolution_y_)
	return
}

func (_self_ *GtkPrintSettings) SetReverse(reverse bool) () {
	_cgo_reverse_ := (C.gboolean)(C.FALSE)
	if reverse { _cgo_reverse_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_settings_set_reverse((*C.GtkPrintSettings)(_self_._value_), _cgo_reverse_)
	return
}

func (_self_ *GtkPrintSettings) SetScale(scale float64) () {
	_cgo_scale_ := (C.gdouble)(scale)
	C.gtk_print_settings_set_scale((*C.GtkPrintSettings)(_self_._value_), _cgo_scale_)
	return
}

func (_self_ *GtkPrintSettings) SetUseColor(use_color bool) () {
	_cgo_use_color_ := (C.gboolean)(C.FALSE)
	if use_color { _cgo_use_color_ = (C.gboolean)(C.TRUE) }
	C.gtk_print_settings_set_use_color((*C.GtkPrintSettings)(_self_._value_), _cgo_use_color_)
	return
}

func (_self_ *GtkPrintSettings) ToFile(file_name string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_file_name_ := C.CString(file_name)
	_cgo_file_name_ := (*C.gchar)(unsafe.Pointer(_cstring_file_name_))
	defer C.free(unsafe.Pointer(_cstring_file_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_print_settings_to_file((*C.GtkPrintSettings)(_self_._value_), _cgo_file_name_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPrintSettings) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_print_settings_to_key_file((*C.GtkPrintSettings)(_self_._value_), key_file, _cgo_group_name_)
	return
}

func (_self_ *GtkPrintSettings) Unset(key string) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._gtk_print_settings_unset((*C.GtkPrintSettings)(_self_._value_), _cgo_key_)
	return
}

func ProgressBarNew() (_go__return__ GtkProgressBar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_progress_bar_new()
	_go__return__ = ToGtkProgressBar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkProgressBar) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_progress_bar_get_ellipsize((*C.GtkProgressBar)(_self_._value_))
	return
}

func (_self_ *GtkProgressBar) GetFraction() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_progress_bar_get_fraction((*C.GtkProgressBar)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkProgressBar) GetInverted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_progress_bar_get_inverted((*C.GtkProgressBar)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkProgressBar) GetPulseStep() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_progress_bar_get_pulse_step((*C.GtkProgressBar)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkProgressBar) GetShowText() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_progress_bar_get_show_text((*C.GtkProgressBar)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkProgressBar) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_progress_bar_get_text((*C.GtkProgressBar)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkProgressBar) Pulse() () {
	C.gtk_progress_bar_pulse((*C.GtkProgressBar)(_self_._value_))
	return
}

func (_self_ *GtkProgressBar) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_progress_bar_set_ellipsize((*C.GtkProgressBar)(_self_._value_), mode)
	return
}

func (_self_ *GtkProgressBar) SetFraction(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_progress_bar_set_fraction((*C.GtkProgressBar)(_self_._value_), _cgo_fraction_)
	return
}

func (_self_ *GtkProgressBar) SetInverted(inverted bool) () {
	_cgo_inverted_ := (C.gboolean)(C.FALSE)
	if inverted { _cgo_inverted_ = (C.gboolean)(C.TRUE) }
	C.gtk_progress_bar_set_inverted((*C.GtkProgressBar)(_self_._value_), _cgo_inverted_)
	return
}

func (_self_ *GtkProgressBar) SetPulseStep(fraction float64) () {
	_cgo_fraction_ := (C.gdouble)(fraction)
	C.gtk_progress_bar_set_pulse_step((*C.GtkProgressBar)(_self_._value_), _cgo_fraction_)
	return
}

func (_self_ *GtkProgressBar) SetShowText(show_text bool) () {
	_cgo_show_text_ := (C.gboolean)(C.FALSE)
	if show_text { _cgo_show_text_ = (C.gboolean)(C.TRUE) }
	C.gtk_progress_bar_set_show_text((*C.GtkProgressBar)(_self_._value_), _cgo_show_text_)
	return
}

func (_self_ *GtkProgressBar) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_progress_bar_set_text((*C.GtkProgressBar)(_self_._value_), _cgo_text_)
	return
}

func RadioActionNew(name string, label string, tooltip string, stock_id string, value int) (_go__return__ GtkRadioAction) {
	var _return_ *C.GtkRadioAction
	_cgo_value_ := (C.gint)(value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_, _cgo_value_)
	_go__return__ = ToGtkRadioAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRadioAction) GetCurrentValue() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_radio_action_get_current_value((*C.GtkRadioAction)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkRadioAction) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_action_get_group((*C.GtkRadioAction)(_self_._value_))
	return
}

func (_self_ *GtkRadioAction) JoinGroup(group_source GtkRadioActionKind) () {
	_cgo_group_source_ := (*C.GtkRadioAction)(group_source._getValue())
	C.gtk_radio_action_join_group((*C.GtkRadioAction)(_self_._value_), _cgo_group_source_)
	return
}

func (_self_ *GtkRadioAction) SetCurrentValue(current_value int) () {
	_cgo_current_value_ := (C.gint)(current_value)
	C.gtk_radio_action_set_current_value((*C.GtkRadioAction)(_self_._value_), _cgo_current_value_)
	return
}

func (_self_ *GtkRadioAction) SetGroup(group *C.GSList) () {
	C.gtk_radio_action_set_group((*C.GtkRadioAction)(_self_._value_), group)
	return
}

func RadioButtonNew(group *C.GSList) (_go__return__ GtkRadioButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_button_new(group)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewFromWidget(radio_group_member GtkRadioButtonKind) (_go__return__ GtkRadioButton) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_button_new_from_widget(_cgo_radio_group_member_)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithLabel(group *C.GSList, label string) (_go__return__ GtkRadioButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_label(group, _cgo_label_)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithLabelFromWidget(radio_group_member GtkRadioButtonKind, label string) (_go__return__ GtkRadioButton) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_label_from_widget(_cgo_radio_group_member_, _cgo_label_)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithMnemonic(group *C.GSList, label string) (_go__return__ GtkRadioButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_mnemonic(group, _cgo_label_)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func RadioButtonNewWithMnemonicFromWidget(radio_group_member GtkRadioButtonKind, label string) (_go__return__ GtkRadioButton) {
	_cgo_radio_group_member_ := (*C.GtkRadioButton)(radio_group_member._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_button_new_with_mnemonic_from_widget(_cgo_radio_group_member_, _cgo_label_)
	_go__return__ = ToGtkRadioButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRadioButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_button_get_group((*C.GtkRadioButton)(_self_._value_))
	return
}

func (_self_ *GtkRadioButton) JoinGroup(group_source GtkRadioButtonKind) () {
	_cgo_group_source_ := (*C.GtkRadioButton)(group_source._getValue())
	C.gtk_radio_button_join_group((*C.GtkRadioButton)(_self_._value_), _cgo_group_source_)
	return
}

func (_self_ *GtkRadioButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_button_set_group((*C.GtkRadioButton)(_self_._value_), group)
	return
}

func RadioMenuItemNew(group *C.GSList) (_go__return__ GtkRadioMenuItem) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_menu_item_new(group)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewFromWidget(group GtkRadioMenuItemKind) (_go__return__ GtkRadioMenuItem) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(group._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_radio_menu_item_new_from_widget(_cgo_group_)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithLabel(group *C.GSList, label string) (_go__return__ GtkRadioMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_label(group, _cgo_label_)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithLabelFromWidget(group GtkRadioMenuItemKind, label string) (_go__return__ GtkRadioMenuItem) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(group._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_label_from_widget(_cgo_group_, _cgo_label_)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithMnemonic(group *C.GSList, label string) (_go__return__ GtkRadioMenuItem) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic(group, _cgo_label_)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func RadioMenuItemNewWithMnemonicFromWidget(group GtkRadioMenuItemKind, label string) (_go__return__ GtkRadioMenuItem) {
	_cgo_group_ := (*C.GtkRadioMenuItem)(group._getValue())
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic_from_widget(_cgo_group_, _cgo_label_)
	_go__return__ = ToGtkRadioMenuItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRadioMenuItem) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_menu_item_get_group((*C.GtkRadioMenuItem)(_self_._value_))
	return
}

func (_self_ *GtkRadioMenuItem) SetGroup(group *C.GSList) () {
	C.gtk_radio_menu_item_set_group((*C.GtkRadioMenuItem)(_self_._value_), group)
	return
}

func RadioToolButtonNew(group *C.GSList) (_go__return__ GtkRadioToolButton) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_radio_tool_button_new(group)
	_go__return__ = ToGtkRadioToolButton(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewFromStock(group *C.GSList, stock_id string) (_go__return__ GtkRadioToolButton) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_tool_button_new_from_stock(group, _cgo_stock_id_)
	_go__return__ = ToGtkRadioToolButton(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewFromWidget(group GtkRadioToolButtonKind) (_go__return__ GtkRadioToolButton) {
	_cgo_group_ := (*C.GtkRadioToolButton)(group._getValue())
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_radio_tool_button_new_from_widget(_cgo_group_)
	_go__return__ = ToGtkRadioToolButton(unsafe.Pointer(_return_))
	return
}

func RadioToolButtonNewWithStockFromWidget(group GtkRadioToolButtonKind, stock_id string) (_go__return__ GtkRadioToolButton) {
	_cgo_group_ := (*C.GtkRadioToolButton)(group._getValue())
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_radio_tool_button_new_with_stock_from_widget(_cgo_group_, _cgo_stock_id_)
	_go__return__ = ToGtkRadioToolButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRadioToolButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_tool_button_get_group((*C.GtkRadioToolButton)(_self_._value_))
	return
}

func (_self_ *GtkRadioToolButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_tool_button_set_group((*C.GtkRadioToolButton)(_self_._value_), group)
	return
}

func (_self_ *GtkRange) GetAdjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_range_get_adjustment((*C.GtkRange)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRange) GetFillLevel() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_range_get_fill_level((*C.GtkRange)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkRange) GetFlippable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_flippable((*C.GtkRange)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRange) GetInverted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_inverted((*C.GtkRange)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRange) GetLowerStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_lower_stepper_sensitivity((*C.GtkRange)(_self_._value_))
	return
}

func (_self_ *GtkRange) GetMinSliderSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_range_get_min_slider_size((*C.GtkRange)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkRange) GetRangeRect() (range_rect *C.GdkRectangle) {
	C.gtk_range_get_range_rect((*C.GtkRange)(_self_._value_), range_rect)
	return
}

func (_self_ *GtkRange) GetRestrictToFillLevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_restrict_to_fill_level((*C.GtkRange)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRange) GetRoundDigits() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_range_get_round_digits((*C.GtkRange)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkRange) GetShowFillLevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_show_fill_level((*C.GtkRange)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRange) GetSliderRange() (_go_slider_start_ int, _go_slider_end_ int) {
	var slider_start C.gint
	var slider_end C.gint
	C.gtk_range_get_slider_range((*C.GtkRange)(_self_._value_), &slider_start, &slider_end)
	_go_slider_start_ = (int)(slider_start)
	_go_slider_end_ = (int)(slider_end)
	return
}

func (_self_ *GtkRange) GetSliderSizeFixed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_range_get_slider_size_fixed((*C.GtkRange)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRange) GetUpperStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_upper_stepper_sensitivity((*C.GtkRange)(_self_._value_))
	return
}

func (_self_ *GtkRange) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_range_get_value((*C.GtkRange)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkRange) SetAdjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_range_set_adjustment((*C.GtkRange)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkRange) SetFillLevel(fill_level float64) () {
	_cgo_fill_level_ := (C.gdouble)(fill_level)
	C.gtk_range_set_fill_level((*C.GtkRange)(_self_._value_), _cgo_fill_level_)
	return
}

func (_self_ *GtkRange) SetFlippable(flippable bool) () {
	_cgo_flippable_ := (C.gboolean)(C.FALSE)
	if flippable { _cgo_flippable_ = (C.gboolean)(C.TRUE) }
	C.gtk_range_set_flippable((*C.GtkRange)(_self_._value_), _cgo_flippable_)
	return
}

func (_self_ *GtkRange) SetIncrements(step float64, page float64) () {
	_cgo_step_ := (C.gdouble)(step)
	_cgo_page_ := (C.gdouble)(page)
	C.gtk_range_set_increments((*C.GtkRange)(_self_._value_), _cgo_step_, _cgo_page_)
	return
}

func (_self_ *GtkRange) SetInverted(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_range_set_inverted((*C.GtkRange)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkRange) SetLowerStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_lower_stepper_sensitivity((*C.GtkRange)(_self_._value_), sensitivity)
	return
}

func (_self_ *GtkRange) SetMinSliderSize(min_size int) () {
	_cgo_min_size_ := (C.gint)(min_size)
	C.gtk_range_set_min_slider_size((*C.GtkRange)(_self_._value_), _cgo_min_size_)
	return
}

func (_self_ *GtkRange) SetRange(min float64, max float64) () {
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	C.gtk_range_set_range((*C.GtkRange)(_self_._value_), _cgo_min_, _cgo_max_)
	return
}

func (_self_ *GtkRange) SetRestrictToFillLevel(restrict_to_fill_level bool) () {
	_cgo_restrict_to_fill_level_ := (C.gboolean)(C.FALSE)
	if restrict_to_fill_level { _cgo_restrict_to_fill_level_ = (C.gboolean)(C.TRUE) }
	C.gtk_range_set_restrict_to_fill_level((*C.GtkRange)(_self_._value_), _cgo_restrict_to_fill_level_)
	return
}

func (_self_ *GtkRange) SetRoundDigits(round_digits int) () {
	_cgo_round_digits_ := (C.gint)(round_digits)
	C.gtk_range_set_round_digits((*C.GtkRange)(_self_._value_), _cgo_round_digits_)
	return
}

func (_self_ *GtkRange) SetShowFillLevel(show_fill_level bool) () {
	_cgo_show_fill_level_ := (C.gboolean)(C.FALSE)
	if show_fill_level { _cgo_show_fill_level_ = (C.gboolean)(C.TRUE) }
	C.gtk_range_set_show_fill_level((*C.GtkRange)(_self_._value_), _cgo_show_fill_level_)
	return
}

func (_self_ *GtkRange) SetSliderSizeFixed(size_fixed bool) () {
	_cgo_size_fixed_ := (C.gboolean)(C.FALSE)
	if size_fixed { _cgo_size_fixed_ = (C.gboolean)(C.TRUE) }
	C.gtk_range_set_slider_size_fixed((*C.GtkRange)(_self_._value_), _cgo_size_fixed_)
	return
}

func (_self_ *GtkRange) SetUpperStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_upper_stepper_sensitivity((*C.GtkRange)(_self_._value_), sensitivity)
	return
}

func (_self_ *GtkRange) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_range_set_value((*C.GtkRange)(_self_._value_), _cgo_value_)
	return
}

func RecentActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ GtkRecentAction) {
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_recent_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = ToGtkRecentAction(unsafe.Pointer(_return_))
	return
}

func RecentActionNewForManager(name string, label string, tooltip string, stock_id string, manager GtkRecentManagerKind) (_go__return__ GtkRecentAction) {
	_cgo_manager_ := (*C.GtkRecentManager)(manager._getValue())
	var _return_ *C.GtkAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_recent_action_new_for_manager(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_, _cgo_manager_)
	_go__return__ = ToGtkRecentAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentAction) GetShowNumbers() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_action_get_show_numbers((*C.GtkRecentAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentAction) SetShowNumbers(show_numbers bool) () {
	_cgo_show_numbers_ := (C.gboolean)(C.FALSE)
	if show_numbers { _cgo_show_numbers_ = (C.gboolean)(C.TRUE) }
	C.gtk_recent_action_set_show_numbers((*C.GtkRecentAction)(_self_._value_), _cgo_show_numbers_)
	return
}

func RecentChooserMenuNew() (_go__return__ GtkRecentChooserMenu) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_menu_new()
	_go__return__ = ToGtkRecentChooserMenu(unsafe.Pointer(_return_))
	return
}

func RecentChooserMenuNewForManager(manager GtkRecentManagerKind) (_go__return__ GtkRecentChooserMenu) {
	_cgo_manager_ := (*C.GtkRecentManager)(manager._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_menu_new_for_manager(_cgo_manager_)
	_go__return__ = ToGtkRecentChooserMenu(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentChooserMenu) GetShowNumbers() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_chooser_menu_get_show_numbers((*C.GtkRecentChooserMenu)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentChooserMenu) SetShowNumbers(show_numbers bool) () {
	_cgo_show_numbers_ := (C.gboolean)(C.FALSE)
	if show_numbers { _cgo_show_numbers_ = (C.gboolean)(C.TRUE) }
	C.gtk_recent_chooser_menu_set_show_numbers((*C.GtkRecentChooserMenu)(_self_._value_), _cgo_show_numbers_)
	return
}

func RecentChooserWidgetNew() (_go__return__ GtkRecentChooserWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_widget_new()
	_go__return__ = ToGtkRecentChooserWidget(unsafe.Pointer(_return_))
	return
}

func RecentChooserWidgetNewForManager(manager GtkRecentManagerKind) (_go__return__ GtkRecentChooserWidget) {
	_cgo_manager_ := (*C.GtkRecentManager)(manager._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_recent_chooser_widget_new_for_manager(_cgo_manager_)
	_go__return__ = ToGtkRecentChooserWidget(unsafe.Pointer(_return_))
	return
}

func RecentFilterNew() (_go__return__ GtkRecentFilter) {
	var _return_ *C.GtkRecentFilter
	_return_ = C.gtk_recent_filter_new()
	_go__return__ = ToGtkRecentFilter(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentFilter) AddAge(days int) () {
	_cgo_days_ := (C.gint)(days)
	C.gtk_recent_filter_add_age((*C.GtkRecentFilter)(_self_._value_), _cgo_days_)
	return
}

func (_self_ *GtkRecentFilter) AddApplication(application string) () {
	_cstring_application_ := C.CString(application)
	_cgo_application_ := (*C.gchar)(unsafe.Pointer(_cstring_application_))
	defer C.free(unsafe.Pointer(_cstring_application_))
	C._gtk_recent_filter_add_application((*C.GtkRecentFilter)(_self_._value_), _cgo_application_)
	return
}

func (_self_ *GtkRecentFilter) AddCustom(needed C.GtkRecentFilterFlags, func_ C.GtkRecentFilterFunc, data C.gpointer, data_destroy C.GDestroyNotify) () {
	C.gtk_recent_filter_add_custom((*C.GtkRecentFilter)(_self_._value_), needed, func_, data, data_destroy)
	return
}

func (_self_ *GtkRecentFilter) AddGroup(group string) () {
	_cstring_group_ := C.CString(group)
	_cgo_group_ := (*C.gchar)(unsafe.Pointer(_cstring_group_))
	defer C.free(unsafe.Pointer(_cstring_group_))
	C._gtk_recent_filter_add_group((*C.GtkRecentFilter)(_self_._value_), _cgo_group_)
	return
}

func (_self_ *GtkRecentFilter) AddMimeType(mime_type string) () {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	C._gtk_recent_filter_add_mime_type((*C.GtkRecentFilter)(_self_._value_), _cgo_mime_type_)
	return
}

func (_self_ *GtkRecentFilter) AddPattern(pattern string) () {
	_cstring_pattern_ := C.CString(pattern)
	_cgo_pattern_ := (*C.gchar)(unsafe.Pointer(_cstring_pattern_))
	defer C.free(unsafe.Pointer(_cstring_pattern_))
	C._gtk_recent_filter_add_pattern((*C.GtkRecentFilter)(_self_._value_), _cgo_pattern_)
	return
}

func (_self_ *GtkRecentFilter) AddPixbufFormats() () {
	C.gtk_recent_filter_add_pixbuf_formats((*C.GtkRecentFilter)(_self_._value_))
	return
}

func (_self_ *GtkRecentFilter) Filter(filter_info *GtkRecentFilterInfo) (_go__return__ bool) {
	_cgo_filter_info_ := (*C.GtkRecentFilterInfo)(unsafe.Pointer(filter_info))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_filter_filter((*C.GtkRecentFilter)(_self_._value_), _cgo_filter_info_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentFilter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_filter_get_name((*C.GtkRecentFilter)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentFilter) GetNeeded() (_return_ C.GtkRecentFilterFlags) {
	_return_ = C.gtk_recent_filter_get_needed((*C.GtkRecentFilter)(_self_._value_))
	return
}

func (_self_ *GtkRecentFilter) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_recent_filter_set_name((*C.GtkRecentFilter)(_self_._value_), _cgo_name_)
	return
}

func RecentManagerNew() (_go__return__ GtkRecentManager) {
	var _return_ *C.GtkRecentManager
	_return_ = C.gtk_recent_manager_new()
	_go__return__ = ToGtkRecentManager(unsafe.Pointer(_return_))
	return
}

func RecentManagerGetDefault() (_go__return__ GtkRecentManager) {
	var _return_ *C.GtkRecentManager
	_return_ = C.gtk_recent_manager_get_default()
	_go__return__ = ToGtkRecentManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentManager) AddFull(uri string, recent_data *GtkRecentData) (_go__return__ bool) {
	_cgo_recent_data_ := (*C.GtkRecentData)(unsafe.Pointer(recent_data))
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_add_full((*C.GtkRecentManager)(_self_._value_), _cgo_uri_, _cgo_recent_data_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentManager) AddItem(uri string) (_go__return__ bool) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_add_item((*C.GtkRecentManager)(_self_._value_), _cgo_uri_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentManager) GetItems() (_return_ *C.GList) {
	_return_ = C.gtk_recent_manager_get_items((*C.GtkRecentManager)(_self_._value_))
	return
}

func (_self_ *GtkRecentManager) HasItem(uri string) (_go__return__ bool) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_has_item((*C.GtkRecentManager)(_self_._value_), _cgo_uri_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentManager) LookupItem(uri string) (_go__return__ *GtkRecentInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GtkRecentInfo
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._gtk_recent_manager_lookup_item((*C.GtkRecentManager)(_self_._value_), _cgo_uri_, _error_)
	_go__return__ = (*GtkRecentInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentManager) MoveItem(uri string, new_uri string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_cstring_new_uri_ := C.CString(new_uri)
	_cgo_new_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_new_uri_))
	defer C.free(unsafe.Pointer(_cstring_new_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_move_item((*C.GtkRecentManager)(_self_._value_), _cgo_uri_, _cgo_new_uri_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentManager) PurgeItems() (_go__return__ int, _error_ unsafe.Pointer) {
	var _return_ C.gint
	_return_ = C._gtk_recent_manager_purge_items((*C.GtkRecentManager)(_self_._value_), _error_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkRecentManager) RemoveItem(uri string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_manager_remove_item((*C.GtkRecentManager)(_self_._value_), _cgo_uri_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ScaleNew(orientation C.GtkOrientation, adjustment GtkAdjustmentKind) (_go__return__ GtkScale) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_new(orientation, _cgo_adjustment_)
	_go__return__ = ToGtkScale(unsafe.Pointer(_return_))
	return
}

func ScaleNewWithRange(orientation C.GtkOrientation, min float64, max float64, step float64) (_go__return__ GtkScale) {
	var _return_ *C.GtkWidget
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	_cgo_step_ := (C.gdouble)(step)
	_return_ = C.gtk_scale_new_with_range(orientation, _cgo_min_, _cgo_max_, _cgo_step_)
	_go__return__ = ToGtkScale(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScale) AddMark(value float64, position C.GtkPositionType, markup string) () {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_scale_add_mark((*C.GtkScale)(_self_._value_), _cgo_value_, position, _cgo_markup_)
	return
}

func (_self_ *GtkScale) ClearMarks() () {
	C.gtk_scale_clear_marks((*C.GtkScale)(_self_._value_))
	return
}

func (_self_ *GtkScale) GetDigits() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scale_get_digits((*C.GtkScale)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkScale) GetDrawValue() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scale_get_draw_value((*C.GtkScale)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkScale) GetHasOrigin() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scale_get_has_origin((*C.GtkScale)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkScale) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_scale_get_layout((*C.GtkScale)(_self_._value_))
	return
}

func (_self_ *GtkScale) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.gtk_scale_get_layout_offsets((*C.GtkScale)(_self_._value_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *GtkScale) GetValuePos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_scale_get_value_pos((*C.GtkScale)(_self_._value_))
	return
}

func (_self_ *GtkScale) SetDigits(digits int) () {
	_cgo_digits_ := (C.gint)(digits)
	C.gtk_scale_set_digits((*C.GtkScale)(_self_._value_), _cgo_digits_)
	return
}

func (_self_ *GtkScale) SetDrawValue(draw_value bool) () {
	_cgo_draw_value_ := (C.gboolean)(C.FALSE)
	if draw_value { _cgo_draw_value_ = (C.gboolean)(C.TRUE) }
	C.gtk_scale_set_draw_value((*C.GtkScale)(_self_._value_), _cgo_draw_value_)
	return
}

func (_self_ *GtkScale) SetHasOrigin(has_origin bool) () {
	_cgo_has_origin_ := (C.gboolean)(C.FALSE)
	if has_origin { _cgo_has_origin_ = (C.gboolean)(C.TRUE) }
	C.gtk_scale_set_has_origin((*C.GtkScale)(_self_._value_), _cgo_has_origin_)
	return
}

func (_self_ *GtkScale) SetValuePos(pos C.GtkPositionType) () {
	C.gtk_scale_set_value_pos((*C.GtkScale)(_self_._value_), pos)
	return
}

func (_self_ *GtkScaleButton) GetAdjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scale_button_get_adjustment((*C.GtkScaleButton)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScaleButton) GetMinusButton() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_minus_button((*C.GtkScaleButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScaleButton) GetPlusButton() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_plus_button((*C.GtkScaleButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScaleButton) GetPopup() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scale_button_get_popup((*C.GtkScaleButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScaleButton) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_scale_button_get_value((*C.GtkScaleButton)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkScaleButton) SetAdjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_scale_button_set_adjustment((*C.GtkScaleButton)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkScaleButton) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_scale_button_set_value((*C.GtkScaleButton)(_self_._value_), _cgo_value_)
	return
}

func ScrollbarNew(orientation C.GtkOrientation, adjustment GtkAdjustmentKind) (_go__return__ GtkScrollbar) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrollbar_new(orientation, _cgo_adjustment_)
	_go__return__ = ToGtkScrollbar(unsafe.Pointer(_return_))
	return
}

func ScrolledWindowNew(hadjustment GtkAdjustmentKind, vadjustment GtkAdjustmentKind) (_go__return__ GtkScrolledWindow) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(hadjustment._getValue())
	_cgo_vadjustment_ := (*C.GtkAdjustment)(vadjustment._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = ToGtkScrolledWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScrolledWindow) AddWithViewport(child GtkWidgetKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	C.gtk_scrolled_window_add_with_viewport((*C.GtkScrolledWindow)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *GtkScrolledWindow) GetCaptureButtonPress() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scrolled_window_get_capture_button_press((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkScrolledWindow) GetHadjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scrolled_window_get_hadjustment((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScrolledWindow) GetHscrollbar() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_get_hscrollbar((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScrolledWindow) GetKineticScrolling() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_scrolled_window_get_kinetic_scrolling((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkScrolledWindow) GetMinContentHeight() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scrolled_window_get_min_content_height((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkScrolledWindow) GetMinContentWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_scrolled_window_get_min_content_width((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkScrolledWindow) GetPlacement() (_return_ C.GtkCornerType) {
	_return_ = C.gtk_scrolled_window_get_placement((*C.GtkScrolledWindow)(_self_._value_))
	return
}

func (_self_ *GtkScrolledWindow) GetPolicy() (hscrollbar_policy *C.GtkPolicyType, vscrollbar_policy *C.GtkPolicyType) {
	C.gtk_scrolled_window_get_policy((*C.GtkScrolledWindow)(_self_._value_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *GtkScrolledWindow) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_scrolled_window_get_shadow_type((*C.GtkScrolledWindow)(_self_._value_))
	return
}

func (_self_ *GtkScrolledWindow) GetVadjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_scrolled_window_get_vadjustment((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScrolledWindow) GetVscrollbar() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_scrolled_window_get_vscrollbar((*C.GtkScrolledWindow)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkScrolledWindow) SetCaptureButtonPress(capture_button_press bool) () {
	_cgo_capture_button_press_ := (C.gboolean)(C.FALSE)
	if capture_button_press { _cgo_capture_button_press_ = (C.gboolean)(C.TRUE) }
	C.gtk_scrolled_window_set_capture_button_press((*C.GtkScrolledWindow)(_self_._value_), _cgo_capture_button_press_)
	return
}

func (_self_ *GtkScrolledWindow) SetHadjustment(hadjustment GtkAdjustmentKind) () {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(hadjustment._getValue())
	C.gtk_scrolled_window_set_hadjustment((*C.GtkScrolledWindow)(_self_._value_), _cgo_hadjustment_)
	return
}

func (_self_ *GtkScrolledWindow) SetKineticScrolling(kinetic_scrolling bool) () {
	_cgo_kinetic_scrolling_ := (C.gboolean)(C.FALSE)
	if kinetic_scrolling { _cgo_kinetic_scrolling_ = (C.gboolean)(C.TRUE) }
	C.gtk_scrolled_window_set_kinetic_scrolling((*C.GtkScrolledWindow)(_self_._value_), _cgo_kinetic_scrolling_)
	return
}

func (_self_ *GtkScrolledWindow) SetMinContentHeight(height int) () {
	_cgo_height_ := (C.gint)(height)
	C.gtk_scrolled_window_set_min_content_height((*C.GtkScrolledWindow)(_self_._value_), _cgo_height_)
	return
}

func (_self_ *GtkScrolledWindow) SetMinContentWidth(width int) () {
	_cgo_width_ := (C.gint)(width)
	C.gtk_scrolled_window_set_min_content_width((*C.GtkScrolledWindow)(_self_._value_), _cgo_width_)
	return
}

func (_self_ *GtkScrolledWindow) SetPlacement(window_placement C.GtkCornerType) () {
	C.gtk_scrolled_window_set_placement((*C.GtkScrolledWindow)(_self_._value_), window_placement)
	return
}

func (_self_ *GtkScrolledWindow) SetPolicy(hscrollbar_policy C.GtkPolicyType, vscrollbar_policy C.GtkPolicyType) () {
	C.gtk_scrolled_window_set_policy((*C.GtkScrolledWindow)(_self_._value_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *GtkScrolledWindow) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_scrolled_window_set_shadow_type((*C.GtkScrolledWindow)(_self_._value_), type_)
	return
}

func (_self_ *GtkScrolledWindow) SetVadjustment(vadjustment GtkAdjustmentKind) () {
	_cgo_vadjustment_ := (*C.GtkAdjustment)(vadjustment._getValue())
	C.gtk_scrolled_window_set_vadjustment((*C.GtkScrolledWindow)(_self_._value_), _cgo_vadjustment_)
	return
}

func (_self_ *GtkScrolledWindow) UnsetPlacement() () {
	C.gtk_scrolled_window_unset_placement((*C.GtkScrolledWindow)(_self_._value_))
	return
}

func SearchEntryNew() (_go__return__ GtkSearchEntry) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_search_entry_new()
	_go__return__ = ToGtkSearchEntry(unsafe.Pointer(_return_))
	return
}

func SeparatorNew(orientation C.GtkOrientation) (_go__return__ GtkSeparator) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_separator_new(orientation)
	_go__return__ = ToGtkSeparator(unsafe.Pointer(_return_))
	return
}

func SeparatorMenuItemNew() (_go__return__ GtkSeparatorMenuItem) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_separator_menu_item_new()
	_go__return__ = ToGtkSeparatorMenuItem(unsafe.Pointer(_return_))
	return
}

func SeparatorToolItemNew() (_go__return__ GtkSeparatorToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_separator_tool_item_new()
	_go__return__ = ToGtkSeparatorToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSeparatorToolItem) GetDraw() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_separator_tool_item_get_draw((*C.GtkSeparatorToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSeparatorToolItem) SetDraw(draw bool) () {
	_cgo_draw_ := (C.gboolean)(C.FALSE)
	if draw { _cgo_draw_ = (C.gboolean)(C.TRUE) }
	C.gtk_separator_tool_item_set_draw((*C.GtkSeparatorToolItem)(_self_._value_), _cgo_draw_)
	return
}

func SettingsGetDefault() (_go__return__ GtkSettings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_settings_get_default()
	_go__return__ = ToGtkSettings(unsafe.Pointer(_return_))
	return
}

func SettingsGetForScreen(screen *C.GdkScreen) (_go__return__ GtkSettings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_settings_get_for_screen(screen)
	_go__return__ = ToGtkSettings(unsafe.Pointer(_return_))
	return
}

func SettingsInstallProperty(pspec *C.GParamSpec) () {
	C.gtk_settings_install_property(pspec)
	return
}

func SettingsInstallPropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_settings_install_property_parser(pspec, parser)
	return
}

func (_self_ *GtkSettings) SetDoubleProperty(name string, v_double float64, origin string) () {
	_cgo_v_double_ := (C.gdouble)(v_double)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_double_property((*C.GtkSettings)(_self_._value_), _cgo_name_, _cgo_v_double_, _cgo_origin_)
	return
}

func (_self_ *GtkSettings) SetLongProperty(name string, v_long int64, origin string) () {
	_cgo_v_long_ := (C.glong)(v_long)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_long_property((*C.GtkSettings)(_self_._value_), _cgo_name_, _cgo_v_long_, _cgo_origin_)
	return
}

func (_self_ *GtkSettings) SetPropertyValue(name string, svalue *GtkSettingsValue) () {
	_cgo_svalue_ := (*C.GtkSettingsValue)(unsafe.Pointer(svalue))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_settings_set_property_value((*C.GtkSettings)(_self_._value_), _cgo_name_, _cgo_svalue_)
	return
}

func (_self_ *GtkSettings) SetStringProperty(name string, v_string string, origin string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_v_string_ := C.CString(v_string)
	_cgo_v_string_ := (*C.gchar)(unsafe.Pointer(_cstring_v_string_))
	defer C.free(unsafe.Pointer(_cstring_v_string_))
	_cstring_origin_ := C.CString(origin)
	_cgo_origin_ := (*C.gchar)(unsafe.Pointer(_cstring_origin_))
	defer C.free(unsafe.Pointer(_cstring_origin_))
	C._gtk_settings_set_string_property((*C.GtkSettings)(_self_._value_), _cgo_name_, _cgo_v_string_, _cgo_origin_)
	return
}

func SizeGroupNew(mode C.GtkSizeGroupMode) (_go__return__ GtkSizeGroup) {
	var _return_ *C.GtkSizeGroup
	_return_ = C.gtk_size_group_new(mode)
	_go__return__ = ToGtkSizeGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSizeGroup) AddWidget(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_size_group_add_widget((*C.GtkSizeGroup)(_self_._value_), _cgo_widget_)
	return
}

func (_self_ *GtkSizeGroup) GetIgnoreHidden() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_size_group_get_ignore_hidden((*C.GtkSizeGroup)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSizeGroup) GetMode() (_return_ C.GtkSizeGroupMode) {
	_return_ = C.gtk_size_group_get_mode((*C.GtkSizeGroup)(_self_._value_))
	return
}

func (_self_ *GtkSizeGroup) GetWidgets() (_return_ *C.GSList) {
	_return_ = C.gtk_size_group_get_widgets((*C.GtkSizeGroup)(_self_._value_))
	return
}

func (_self_ *GtkSizeGroup) RemoveWidget(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_size_group_remove_widget((*C.GtkSizeGroup)(_self_._value_), _cgo_widget_)
	return
}

func (_self_ *GtkSizeGroup) SetIgnoreHidden(ignore_hidden bool) () {
	_cgo_ignore_hidden_ := (C.gboolean)(C.FALSE)
	if ignore_hidden { _cgo_ignore_hidden_ = (C.gboolean)(C.TRUE) }
	C.gtk_size_group_set_ignore_hidden((*C.GtkSizeGroup)(_self_._value_), _cgo_ignore_hidden_)
	return
}

func (_self_ *GtkSizeGroup) SetMode(mode C.GtkSizeGroupMode) () {
	C.gtk_size_group_set_mode((*C.GtkSizeGroup)(_self_._value_), mode)
	return
}

func GtkSocketNew() (_go__return__ GtkSocket) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_socket_new()
	_go__return__ = ToGtkSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSocket) AddId(window C.Window) () {
	C.gtk_socket_add_id((*C.GtkSocket)(_self_._value_), window)
	return
}

func (_self_ *GtkSocket) GetId() (_return_ C.Window) {
	_return_ = C.gtk_socket_get_id((*C.GtkSocket)(_self_._value_))
	return
}

func (_self_ *GtkSocket) GetPlugWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_socket_get_plug_window((*C.GtkSocket)(_self_._value_))
	return
}

func SpinButtonNew(adjustment GtkAdjustmentKind, climb_rate float64, digits uint) (_go__return__ GtkSpinButton) {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	var _return_ *C.GtkWidget
	_cgo_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_digits_ := (C.guint)(digits)
	_return_ = C.gtk_spin_button_new(_cgo_adjustment_, _cgo_climb_rate_, _cgo_digits_)
	_go__return__ = ToGtkSpinButton(unsafe.Pointer(_return_))
	return
}

func SpinButtonNewWithRange(min float64, max float64, step float64) (_go__return__ GtkSpinButton) {
	var _return_ *C.GtkWidget
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	_cgo_step_ := (C.gdouble)(step)
	_return_ = C.gtk_spin_button_new_with_range(_cgo_min_, _cgo_max_, _cgo_step_)
	_go__return__ = ToGtkSpinButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSpinButton) Configure(adjustment GtkAdjustmentKind, climb_rate float64, digits uint) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	_cgo_climb_rate_ := (C.gdouble)(climb_rate)
	_cgo_digits_ := (C.guint)(digits)
	C.gtk_spin_button_configure((*C.GtkSpinButton)(_self_._value_), _cgo_adjustment_, _cgo_climb_rate_, _cgo_digits_)
	return
}

func (_self_ *GtkSpinButton) GetAdjustment() (_go__return__ GtkAdjustment) {
	var _return_ *C.GtkAdjustment
	_return_ = C.gtk_spin_button_get_adjustment((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = ToGtkAdjustment(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSpinButton) GetDigits() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_spin_button_get_digits((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkSpinButton) GetIncrements() (_go_step_ float64, _go_page_ float64) {
	var step C.gdouble
	var page C.gdouble
	C.gtk_spin_button_get_increments((*C.GtkSpinButton)(_self_._value_), &step, &page)
	_go_step_ = (float64)(step)
	_go_page_ = (float64)(page)
	return
}

func (_self_ *GtkSpinButton) GetNumeric() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_numeric((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSpinButton) GetRange() (_go_min_ float64, _go_max_ float64) {
	var min C.gdouble
	var max C.gdouble
	C.gtk_spin_button_get_range((*C.GtkSpinButton)(_self_._value_), &min, &max)
	_go_min_ = (float64)(min)
	_go_max_ = (float64)(max)
	return
}

func (_self_ *GtkSpinButton) GetSnapToTicks() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_snap_to_ticks((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSpinButton) GetUpdatePolicy() (_return_ C.GtkSpinButtonUpdatePolicy) {
	_return_ = C.gtk_spin_button_get_update_policy((*C.GtkSpinButton)(_self_._value_))
	return
}

func (_self_ *GtkSpinButton) GetValue() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_spin_button_get_value((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkSpinButton) GetValueAsInt() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_spin_button_get_value_as_int((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkSpinButton) GetWrap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_spin_button_get_wrap((*C.GtkSpinButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSpinButton) SetAdjustment(adjustment GtkAdjustmentKind) () {
	_cgo_adjustment_ := (*C.GtkAdjustment)(adjustment._getValue())
	C.gtk_spin_button_set_adjustment((*C.GtkSpinButton)(_self_._value_), _cgo_adjustment_)
	return
}

func (_self_ *GtkSpinButton) SetDigits(digits uint) () {
	_cgo_digits_ := (C.guint)(digits)
	C.gtk_spin_button_set_digits((*C.GtkSpinButton)(_self_._value_), _cgo_digits_)
	return
}

func (_self_ *GtkSpinButton) SetIncrements(step float64, page float64) () {
	_cgo_step_ := (C.gdouble)(step)
	_cgo_page_ := (C.gdouble)(page)
	C.gtk_spin_button_set_increments((*C.GtkSpinButton)(_self_._value_), _cgo_step_, _cgo_page_)
	return
}

func (_self_ *GtkSpinButton) SetNumeric(numeric bool) () {
	_cgo_numeric_ := (C.gboolean)(C.FALSE)
	if numeric { _cgo_numeric_ = (C.gboolean)(C.TRUE) }
	C.gtk_spin_button_set_numeric((*C.GtkSpinButton)(_self_._value_), _cgo_numeric_)
	return
}

func (_self_ *GtkSpinButton) SetRange(min float64, max float64) () {
	_cgo_min_ := (C.gdouble)(min)
	_cgo_max_ := (C.gdouble)(max)
	C.gtk_spin_button_set_range((*C.GtkSpinButton)(_self_._value_), _cgo_min_, _cgo_max_)
	return
}

func (_self_ *GtkSpinButton) SetSnapToTicks(snap_to_ticks bool) () {
	_cgo_snap_to_ticks_ := (C.gboolean)(C.FALSE)
	if snap_to_ticks { _cgo_snap_to_ticks_ = (C.gboolean)(C.TRUE) }
	C.gtk_spin_button_set_snap_to_ticks((*C.GtkSpinButton)(_self_._value_), _cgo_snap_to_ticks_)
	return
}

func (_self_ *GtkSpinButton) SetUpdatePolicy(policy C.GtkSpinButtonUpdatePolicy) () {
	C.gtk_spin_button_set_update_policy((*C.GtkSpinButton)(_self_._value_), policy)
	return
}

func (_self_ *GtkSpinButton) SetValue(value float64) () {
	_cgo_value_ := (C.gdouble)(value)
	C.gtk_spin_button_set_value((*C.GtkSpinButton)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *GtkSpinButton) SetWrap(wrap bool) () {
	_cgo_wrap_ := (C.gboolean)(C.FALSE)
	if wrap { _cgo_wrap_ = (C.gboolean)(C.TRUE) }
	C.gtk_spin_button_set_wrap((*C.GtkSpinButton)(_self_._value_), _cgo_wrap_)
	return
}

func (_self_ *GtkSpinButton) Spin(direction C.GtkSpinType, increment float64) () {
	_cgo_increment_ := (C.gdouble)(increment)
	C.gtk_spin_button_spin((*C.GtkSpinButton)(_self_._value_), direction, _cgo_increment_)
	return
}

func (_self_ *GtkSpinButton) Update() () {
	C.gtk_spin_button_update((*C.GtkSpinButton)(_self_._value_))
	return
}

func SpinnerNew() (_go__return__ GtkSpinner) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_spinner_new()
	_go__return__ = ToGtkSpinner(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSpinner) Start() () {
	C.gtk_spinner_start((*C.GtkSpinner)(_self_._value_))
	return
}

func (_self_ *GtkSpinner) Stop() () {
	C.gtk_spinner_stop((*C.GtkSpinner)(_self_._value_))
	return
}

func StatusIconNew() (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new()
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromFile(filename string) (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_status_icon_new_from_file(_cgo_filename_)
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromGicon(icon *C.GIcon) (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new_from_gicon(icon)
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromIconName(icon_name string) (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	_return_ = C._gtk_status_icon_new_from_icon_name(_cgo_icon_name_)
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_return_ = C.gtk_status_icon_new_from_pixbuf(pixbuf)
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconNewFromStock(stock_id string) (_go__return__ GtkStatusIcon) {
	var _return_ *C.GtkStatusIcon
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_status_icon_new_from_stock(_cgo_stock_id_)
	_go__return__ = ToGtkStatusIcon(unsafe.Pointer(_return_))
	return
}

func StatusIconPositionMenu(menu GtkMenuKind, user_data GtkStatusIconKind) (_go_x_ int, _go_y_ int, _go_push_in_ bool) {
	_cgo_menu_ := (*C.GtkMenu)(menu._getValue())
	_cgo_user_data_ := (C.gpointer)(user_data._getValue())
	var x C.gint
	var y C.gint
	var push_in C.gboolean
	C.gtk_status_icon_position_menu(_cgo_menu_, &x, &y, &push_in, _cgo_user_data_)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	_go_push_in_ = push_in == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStatusIcon) GetGeometry() (_go__return__ bool, screen unsafe.Pointer, area *C.GdkRectangle, orientation *C.GtkOrientation) {
	var _return_ C.gboolean
	_return_ = C._gtk_status_icon_get_geometry((*C.GtkStatusIcon)(_self_._value_), screen, area, orientation)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStatusIcon) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_status_icon_get_gicon((*C.GtkStatusIcon)(_self_._value_))
	return
}

func (_self_ *GtkStatusIcon) GetHasTooltip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_get_has_tooltip((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStatusIcon) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_icon_name((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkStatusIcon) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_status_icon_get_pixbuf((*C.GtkStatusIcon)(_self_._value_))
	return
}

func (_self_ *GtkStatusIcon) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_status_icon_get_screen((*C.GtkStatusIcon)(_self_._value_))
	return
}

func (_self_ *GtkStatusIcon) GetSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_status_icon_get_size((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkStatusIcon) GetStock() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_stock((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkStatusIcon) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_status_icon_get_storage_type((*C.GtkStatusIcon)(_self_._value_))
	return
}

func (_self_ *GtkStatusIcon) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_status_icon_get_title((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkStatusIcon) GetTooltipMarkup() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_status_icon_get_tooltip_markup((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkStatusIcon) GetTooltipText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_status_icon_get_tooltip_text((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkStatusIcon) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_get_visible((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStatusIcon) GetX11WindowId() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.gtk_status_icon_get_x11_window_id((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *GtkStatusIcon) IsEmbedded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_status_icon_is_embedded((*C.GtkStatusIcon)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStatusIcon) SetFromFile(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_status_icon_set_from_file((*C.GtkStatusIcon)(_self_._value_), _cgo_filename_)
	return
}

func (_self_ *GtkStatusIcon) SetFromGicon(icon *C.GIcon) () {
	C.gtk_status_icon_set_from_gicon((*C.GtkStatusIcon)(_self_._value_), icon)
	return
}

func (_self_ *GtkStatusIcon) SetFromIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_status_icon_set_from_icon_name((*C.GtkStatusIcon)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkStatusIcon) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_status_icon_set_from_pixbuf((*C.GtkStatusIcon)(_self_._value_), pixbuf)
	return
}

func (_self_ *GtkStatusIcon) SetFromStock(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_status_icon_set_from_stock((*C.GtkStatusIcon)(_self_._value_), _cgo_stock_id_)
	return
}

func (_self_ *GtkStatusIcon) SetHasTooltip(has_tooltip bool) () {
	_cgo_has_tooltip_ := (C.gboolean)(C.FALSE)
	if has_tooltip { _cgo_has_tooltip_ = (C.gboolean)(C.TRUE) }
	C.gtk_status_icon_set_has_tooltip((*C.GtkStatusIcon)(_self_._value_), _cgo_has_tooltip_)
	return
}

func (_self_ *GtkStatusIcon) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_status_icon_set_name((*C.GtkStatusIcon)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkStatusIcon) SetScreen(screen *C.GdkScreen) () {
	C.gtk_status_icon_set_screen((*C.GtkStatusIcon)(_self_._value_), screen)
	return
}

func (_self_ *GtkStatusIcon) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_status_icon_set_title((*C.GtkStatusIcon)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkStatusIcon) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_status_icon_set_tooltip_markup((*C.GtkStatusIcon)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *GtkStatusIcon) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_status_icon_set_tooltip_text((*C.GtkStatusIcon)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkStatusIcon) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_status_icon_set_visible((*C.GtkStatusIcon)(_self_._value_), _cgo_visible_)
	return
}

func StatusbarNew() (_go__return__ GtkStatusbar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_statusbar_new()
	_go__return__ = ToGtkStatusbar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStatusbar) GetContextId(context_description string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_context_description_ := C.CString(context_description)
	_cgo_context_description_ := (*C.gchar)(unsafe.Pointer(_cstring_context_description_))
	defer C.free(unsafe.Pointer(_cstring_context_description_))
	_return_ = C._gtk_statusbar_get_context_id((*C.GtkStatusbar)(_self_._value_), _cgo_context_description_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkStatusbar) GetMessageArea() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_statusbar_get_message_area((*C.GtkStatusbar)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStatusbar) Pop(context_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	C.gtk_statusbar_pop((*C.GtkStatusbar)(_self_._value_), _cgo_context_id_)
	return
}

func (_self_ *GtkStatusbar) Push(context_id uint, text string) (_go__return__ uint) {
	_cgo_context_id_ := (C.guint)(context_id)
	var _return_ C.guint
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_statusbar_push((*C.GtkStatusbar)(_self_._value_), _cgo_context_id_, _cgo_text_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkStatusbar) Remove(context_id uint, message_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	_cgo_message_id_ := (C.guint)(message_id)
	C.gtk_statusbar_remove((*C.GtkStatusbar)(_self_._value_), _cgo_context_id_, _cgo_message_id_)
	return
}

func (_self_ *GtkStatusbar) RemoveAll(context_id uint) () {
	_cgo_context_id_ := (C.guint)(context_id)
	C.gtk_statusbar_remove_all((*C.GtkStatusbar)(_self_._value_), _cgo_context_id_)
	return
}

func (_self_ *GtkStyle) HasContext() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_style_has_context((*C.GtkStyle)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StyleContextNew() (_go__return__ GtkStyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_style_context_new()
	_go__return__ = ToGtkStyleContext(unsafe.Pointer(_return_))
	return
}

func StyleContextAddProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider, priority uint) () {
	_cgo_priority_ := (C.guint)(priority)
	C.gtk_style_context_add_provider_for_screen(screen, provider, _cgo_priority_)
	return
}

func StyleContextRemoveProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider_for_screen(screen, provider)
	return
}

func StyleContextResetWidgets(screen *C.GdkScreen) () {
	C.gtk_style_context_reset_widgets(screen)
	return
}

func (_self_ *GtkStyleContext) AddClass(class_name string) () {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	C._gtk_style_context_add_class((*C.GtkStyleContext)(_self_._value_), _cgo_class_name_)
	return
}

func (_self_ *GtkStyleContext) AddProvider(provider *C.GtkStyleProvider, priority uint) () {
	_cgo_priority_ := (C.guint)(priority)
	C.gtk_style_context_add_provider((*C.GtkStyleContext)(_self_._value_), provider, _cgo_priority_)
	return
}

func (_self_ *GtkStyleContext) AddRegion(region_name string, flags C.GtkRegionFlags) () {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	C._gtk_style_context_add_region((*C.GtkStyleContext)(_self_._value_), _cgo_region_name_, flags)
	return
}

func (_self_ *GtkStyleContext) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_background_color((*C.GtkStyleContext)(_self_._value_), state, color)
	return
}

func (_self_ *GtkStyleContext) GetBorder(state C.GtkStateFlags) (border *GtkBorder) {
	var _allocated_border_ C.GtkBorder
	C.gtk_style_context_get_border((*C.GtkStyleContext)(_self_._value_), state, &_allocated_border_)
	border = (*GtkBorder)(unsafe.Pointer(&_allocated_border_))
	return
}

func (_self_ *GtkStyleContext) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_border_color((*C.GtkStyleContext)(_self_._value_), state, color)
	return
}

func (_self_ *GtkStyleContext) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_color((*C.GtkStyleContext)(_self_._value_), state, color)
	return
}

func (_self_ *GtkStyleContext) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_style_context_get_direction((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_style_context_get_font((*C.GtkStyleContext)(_self_._value_), state)
	return
}

func (_self_ *GtkStyleContext) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_style_context_get_junction_sides((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) GetMargin(state C.GtkStateFlags) (margin *GtkBorder) {
	var _allocated_margin_ C.GtkBorder
	C.gtk_style_context_get_margin((*C.GtkStyleContext)(_self_._value_), state, &_allocated_margin_)
	margin = (*GtkBorder)(unsafe.Pointer(&_allocated_margin_))
	return
}

func (_self_ *GtkStyleContext) GetPadding(state C.GtkStateFlags) (padding *GtkBorder) {
	var _allocated_padding_ C.GtkBorder
	C.gtk_style_context_get_padding((*C.GtkStyleContext)(_self_._value_), state, &_allocated_padding_)
	padding = (*GtkBorder)(unsafe.Pointer(&_allocated_padding_))
	return
}

func (_self_ *GtkStyleContext) GetParent() (_go__return__ GtkStyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_style_context_get_parent((*C.GtkStyleContext)(_self_._value_))
	_go__return__ = ToGtkStyleContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStyleContext) GetPath() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_style_context_get_path((*C.GtkStyleContext)(_self_._value_))
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStyleContext) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_context_get_property((*C.GtkStyleContext)(_self_._value_), _cgo_property_, state, value)
	return
}

func (_self_ *GtkStyleContext) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_style_context_get_screen((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) GetSection(property string) (_go__return__ *GtkCssSection) {
	var _return_ *C.GtkCssSection
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	_return_ = C._gtk_style_context_get_section((*C.GtkStyleContext)(_self_._value_), _cgo_property_)
	_go__return__ = (*GtkCssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStyleContext) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_style_context_get_state((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) GetStyleProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_style_context_get_style_property((*C.GtkStyleContext)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *GtkStyleContext) HasClass(class_name string) (_go__return__ bool) {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_has_class((*C.GtkStyleContext)(_self_._value_), _cgo_class_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStyleContext) HasRegion(region_name string) (_go__return__ bool, flags_return *C.GtkRegionFlags) {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_has_region((*C.GtkStyleContext)(_self_._value_), _cgo_region_name_, flags_return)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStyleContext) Invalidate() () {
	C.gtk_style_context_invalidate((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) ListClasses() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_classes((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) ListRegions() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_regions((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) LookupColor(color_name string) (_go__return__ bool, color *C.GdkRGBA) {
	_cstring_color_name_ := C.CString(color_name)
	_cgo_color_name_ := (*C.gchar)(unsafe.Pointer(_cstring_color_name_))
	defer C.free(unsafe.Pointer(_cstring_color_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_context_lookup_color((*C.GtkStyleContext)(_self_._value_), _cgo_color_name_, color)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStyleContext) LookupIconSet(stock_id string) (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_style_context_lookup_icon_set((*C.GtkStyleContext)(_self_._value_), _cgo_stock_id_)
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStyleContext) RemoveClass(class_name string) () {
	_cstring_class_name_ := C.CString(class_name)
	_cgo_class_name_ := (*C.gchar)(unsafe.Pointer(_cstring_class_name_))
	defer C.free(unsafe.Pointer(_cstring_class_name_))
	C._gtk_style_context_remove_class((*C.GtkStyleContext)(_self_._value_), _cgo_class_name_)
	return
}

func (_self_ *GtkStyleContext) RemoveProvider(provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider((*C.GtkStyleContext)(_self_._value_), provider)
	return
}

func (_self_ *GtkStyleContext) RemoveRegion(region_name string) () {
	_cstring_region_name_ := C.CString(region_name)
	_cgo_region_name_ := (*C.gchar)(unsafe.Pointer(_cstring_region_name_))
	defer C.free(unsafe.Pointer(_cstring_region_name_))
	C._gtk_style_context_remove_region((*C.GtkStyleContext)(_self_._value_), _cgo_region_name_)
	return
}

func (_self_ *GtkStyleContext) Restore() () {
	C.gtk_style_context_restore((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) Save() () {
	C.gtk_style_context_save((*C.GtkStyleContext)(_self_._value_))
	return
}

func (_self_ *GtkStyleContext) SetBackground(window *C.GdkWindow) () {
	C.gtk_style_context_set_background((*C.GtkStyleContext)(_self_._value_), window)
	return
}

func (_self_ *GtkStyleContext) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_style_context_set_direction((*C.GtkStyleContext)(_self_._value_), direction)
	return
}

func (_self_ *GtkStyleContext) SetJunctionSides(sides C.GtkJunctionSides) () {
	C.gtk_style_context_set_junction_sides((*C.GtkStyleContext)(_self_._value_), sides)
	return
}

func (_self_ *GtkStyleContext) SetParent(parent GtkStyleContextKind) () {
	_cgo_parent_ := (*C.GtkStyleContext)(parent._getValue())
	C.gtk_style_context_set_parent((*C.GtkStyleContext)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *GtkStyleContext) SetPath(path *GtkWidgetPath) () {
	_cgo_path_ := (*C.GtkWidgetPath)(unsafe.Pointer(path))
	C.gtk_style_context_set_path((*C.GtkStyleContext)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkStyleContext) SetScreen(screen *C.GdkScreen) () {
	C.gtk_style_context_set_screen((*C.GtkStyleContext)(_self_._value_), screen)
	return
}

func (_self_ *GtkStyleContext) SetState(flags C.GtkStateFlags) () {
	C.gtk_style_context_set_state((*C.GtkStyleContext)(_self_._value_), flags)
	return
}

func StylePropertiesNew() (_go__return__ GtkStyleProperties) {
	var _return_ *C.GtkStyleProperties
	_return_ = C.gtk_style_properties_new()
	_go__return__ = ToGtkStyleProperties(unsafe.Pointer(_return_))
	return
}

func StylePropertiesLookupProperty(property_name string) (_go__return__ bool, parse_func *C.GtkStylePropertyParser, pspec unsafe.Pointer) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_properties_lookup_property(_cgo_property_name_, parse_func, pspec)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StylePropertiesRegisterProperty(parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	C.gtk_style_properties_register_property(parse_func, pspec)
	return
}

func (_self_ *GtkStyleProperties) Clear() () {
	C.gtk_style_properties_clear((*C.GtkStyleProperties)(_self_._value_))
	return
}

func (_self_ *GtkStyleProperties) GetProperty(property string, state C.GtkStateFlags) (_go__return__ bool, value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	var _return_ C.gboolean
	_return_ = C._gtk_style_properties_get_property((*C.GtkStyleProperties)(_self_._value_), _cgo_property_, state, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStyleProperties) LookupColor(name string) (_go__return__ *GtkSymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_style_properties_lookup_color((*C.GtkStyleProperties)(_self_._value_), _cgo_name_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStyleProperties) MapColor(name string, color *GtkSymbolicColor) () {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_style_properties_map_color((*C.GtkStyleProperties)(_self_._value_), _cgo_name_, _cgo_color_)
	return
}

func (_self_ *GtkStyleProperties) Merge(props_to_merge GtkStylePropertiesKind, replace bool) () {
	_cgo_props_to_merge_ := (*C.GtkStyleProperties)(props_to_merge._getValue())
	_cgo_replace_ := (C.gboolean)(C.FALSE)
	if replace { _cgo_replace_ = (C.gboolean)(C.TRUE) }
	C._gtk_style_properties_merge((*C.GtkStyleProperties)(_self_._value_), _cgo_props_to_merge_, _cgo_replace_)
	return
}

func (_self_ *GtkStyleProperties) SetProperty(property string, state C.GtkStateFlags, value *C.GValue) () {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_properties_set_property((*C.GtkStyleProperties)(_self_._value_), _cgo_property_, state, value)
	return
}

func (_self_ *GtkStyleProperties) UnsetProperty(property string, state C.GtkStateFlags) () {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_style_properties_unset_property((*C.GtkStyleProperties)(_self_._value_), _cgo_property_, state)
	return
}

func SwitchNew() (_go__return__ GtkSwitch) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_switch_new()
	_go__return__ = ToGtkSwitch(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSwitch) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_switch_get_active((*C.GtkSwitch)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSwitch) SetActive(is_active bool) () {
	_cgo_is_active_ := (C.gboolean)(C.FALSE)
	if is_active { _cgo_is_active_ = (C.gboolean)(C.TRUE) }
	C.gtk_switch_set_active((*C.GtkSwitch)(_self_._value_), _cgo_is_active_)
	return
}

func TextBufferNew(table GtkTextTagTableKind) (_go__return__ GtkTextBuffer) {
	_cgo_table_ := (*C.GtkTextTagTable)(table._getValue())
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_buffer_new(_cgo_table_)
	_go__return__ = ToGtkTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) AddMark(mark GtkTextMarkKind, where *GtkTextIter) () {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_add_mark((*C.GtkTextBuffer)(_self_._value_), _cgo_mark_, _cgo_where_)
	return
}

func (_self_ *GtkTextBuffer) AddSelectionClipboard(clipboard GtkClipboardKind) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(clipboard._getValue())
	C.gtk_text_buffer_add_selection_clipboard((*C.GtkTextBuffer)(_self_._value_), _cgo_clipboard_)
	return
}

func (_self_ *GtkTextBuffer) ApplyTag(tag GtkTextTagKind, start *GtkTextIter, end *GtkTextIter) () {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_apply_tag((*C.GtkTextBuffer)(_self_._value_), _cgo_tag_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) ApplyTagByName(name string, start *GtkTextIter, end *GtkTextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_apply_tag_by_name((*C.GtkTextBuffer)(_self_._value_), _cgo_name_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) Backspace(iter *GtkTextIter, interactive bool, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_interactive_ := (C.gboolean)(C.FALSE)
	if interactive { _cgo_interactive_ = (C.gboolean)(C.TRUE) }
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_backspace((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_interactive_, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) BeginUserAction() () {
	C.gtk_text_buffer_begin_user_action((*C.GtkTextBuffer)(_self_._value_))
	return
}

func (_self_ *GtkTextBuffer) CopyClipboard(clipboard GtkClipboardKind) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(clipboard._getValue())
	C.gtk_text_buffer_copy_clipboard((*C.GtkTextBuffer)(_self_._value_), _cgo_clipboard_)
	return
}

func (_self_ *GtkTextBuffer) CreateChildAnchor(iter *GtkTextIter) (_go__return__ GtkTextChildAnchor) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ *C.GtkTextChildAnchor
	_return_ = C.gtk_text_buffer_create_child_anchor((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_)
	_go__return__ = ToGtkTextChildAnchor(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) CreateMark(mark_name string, where *GtkTextIter, left_gravity bool) (_go__return__ GtkTextMark) {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	var _return_ *C.GtkTextMark
	_cstring_mark_name_ := C.CString(mark_name)
	_cgo_mark_name_ := (*C.gchar)(unsafe.Pointer(_cstring_mark_name_))
	defer C.free(unsafe.Pointer(_cstring_mark_name_))
	_cgo_left_gravity_ := (C.gboolean)(C.FALSE)
	if left_gravity { _cgo_left_gravity_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_text_buffer_create_mark((*C.GtkTextBuffer)(_self_._value_), _cgo_mark_name_, _cgo_where_, _cgo_left_gravity_)
	_go__return__ = ToGtkTextMark(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) CutClipboard(clipboard GtkClipboardKind, default_editable bool) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(clipboard._getValue())
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_buffer_cut_clipboard((*C.GtkTextBuffer)(_self_._value_), _cgo_clipboard_, _cgo_default_editable_)
	return
}

func (_self_ *GtkTextBuffer) Delete(start *GtkTextIter, end *GtkTextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C.gtk_text_buffer_delete((*C.GtkTextBuffer)(_self_._value_), _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) DeleteInteractive(start_iter *GtkTextIter, end_iter *GtkTextIter, default_editable bool) (_go__return__ bool) {
	_cgo_start_iter_ := (*C.GtkTextIter)(unsafe.Pointer(start_iter))
	_cgo_end_iter_ := (*C.GtkTextIter)(unsafe.Pointer(end_iter))
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_delete_interactive((*C.GtkTextBuffer)(_self_._value_), _cgo_start_iter_, _cgo_end_iter_, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) DeleteMark(mark GtkTextMarkKind) () {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	C.gtk_text_buffer_delete_mark((*C.GtkTextBuffer)(_self_._value_), _cgo_mark_)
	return
}

func (_self_ *GtkTextBuffer) DeleteMarkByName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_delete_mark_by_name((*C.GtkTextBuffer)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkTextBuffer) DeleteSelection(interactive bool, default_editable bool) (_go__return__ bool) {
	_cgo_interactive_ := (C.gboolean)(C.FALSE)
	if interactive { _cgo_interactive_ = (C.gboolean)(C.TRUE) }
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_delete_selection((*C.GtkTextBuffer)(_self_._value_), _cgo_interactive_, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) DeserializeGetCanCreateTags(format C.GdkAtom) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_deserialize_get_can_create_tags((*C.GtkTextBuffer)(_self_._value_), format)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) DeserializeSetCanCreateTags(format C.GdkAtom, can_create_tags bool) () {
	_cgo_can_create_tags_ := (C.gboolean)(C.FALSE)
	if can_create_tags { _cgo_can_create_tags_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_buffer_deserialize_set_can_create_tags((*C.GtkTextBuffer)(_self_._value_), format, _cgo_can_create_tags_)
	return
}

func (_self_ *GtkTextBuffer) EndUserAction() () {
	C.gtk_text_buffer_end_user_action((*C.GtkTextBuffer)(_self_._value_))
	return
}

func (_self_ *GtkTextBuffer) GetBounds() (start *GtkTextIter, end *GtkTextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	C.gtk_text_buffer_get_bounds((*C.GtkTextBuffer)(_self_._value_), &_allocated_start_, &_allocated_end_)
	start = (*GtkTextIter)(unsafe.Pointer(&_allocated_start_))
	end = (*GtkTextIter)(unsafe.Pointer(&_allocated_end_))
	return
}

func (_self_ *GtkTextBuffer) GetCharCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_buffer_get_char_count((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextBuffer) GetCopyTargetList() (_go__return__ *GtkTargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_text_buffer_get_copy_target_list((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = (*GtkTargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetDeserializeFormats() (_return_ *C.GdkAtom, _go_n_formats_ int) {
	var n_formats C.gint
	_return_ = C.gtk_text_buffer_get_deserialize_formats((*C.GtkTextBuffer)(_self_._value_), &n_formats)
	_go_n_formats_ = (int)(n_formats)
	return
}

func (_self_ *GtkTextBuffer) GetEndIter() (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_end_iter((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetHasSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_has_selection((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) GetInsert() (_go__return__ GtkTextMark) {
	var _return_ *C.GtkTextMark
	_return_ = C.gtk_text_buffer_get_insert((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = ToGtkTextMark(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtChildAnchor(anchor GtkTextChildAnchorKind) (iter *GtkTextIter) {
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(anchor._getValue())
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_iter_at_child_anchor((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_anchor_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtLine(line_number int) (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	C.gtk_text_buffer_get_iter_at_line((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_line_number_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtLineIndex(line_number int, byte_index int) (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	_cgo_byte_index_ := (C.gint)(byte_index)
	C.gtk_text_buffer_get_iter_at_line_index((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_line_number_, _cgo_byte_index_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtLineOffset(line_number int, char_offset int) (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_line_number_ := (C.gint)(line_number)
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_buffer_get_iter_at_line_offset((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_line_number_, _cgo_char_offset_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtMark(mark GtkTextMarkKind) (iter *GtkTextIter) {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_iter_at_mark((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_mark_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetIterAtOffset(char_offset int) (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_buffer_get_iter_at_offset((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_, _cgo_char_offset_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetLineCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_buffer_get_line_count((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextBuffer) GetMark(name string) (_go__return__ GtkTextMark) {
	var _return_ *C.GtkTextMark
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_buffer_get_mark((*C.GtkTextBuffer)(_self_._value_), _cgo_name_)
	_go__return__ = ToGtkTextMark(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetModified() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_modified((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) GetPasteTargetList() (_go__return__ *GtkTargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_text_buffer_get_paste_target_list((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = (*GtkTargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetSelectionBound() (_go__return__ GtkTextMark) {
	var _return_ *C.GtkTextMark
	_return_ = C.gtk_text_buffer_get_selection_bound((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = ToGtkTextMark(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetSelectionBounds() (_go__return__ bool, start *GtkTextIter, end *GtkTextIter) {
	var _allocated_start_ C.GtkTextIter
	var _allocated_end_ C.GtkTextIter
	var _return_ C.gboolean
	_return_ = C.gtk_text_buffer_get_selection_bounds((*C.GtkTextBuffer)(_self_._value_), &_allocated_start_, &_allocated_end_)
	start = (*GtkTextIter)(unsafe.Pointer(&_allocated_start_))
	end = (*GtkTextIter)(unsafe.Pointer(&_allocated_end_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) GetSerializeFormats() (_return_ *C.GdkAtom, _go_n_formats_ int) {
	var n_formats C.gint
	_return_ = C.gtk_text_buffer_get_serialize_formats((*C.GtkTextBuffer)(_self_._value_), &n_formats)
	_go_n_formats_ = (int)(n_formats)
	return
}

func (_self_ *GtkTextBuffer) GetSlice(start *GtkTextIter, end *GtkTextIter, include_hidden_chars bool) (_go__return__ string) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_cgo_include_hidden_chars_ := (C.gboolean)(C.FALSE)
	if include_hidden_chars { _cgo_include_hidden_chars_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_text_buffer_get_slice((*C.GtkTextBuffer)(_self_._value_), _cgo_start_, _cgo_end_, _cgo_include_hidden_chars_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextBuffer) GetStartIter() (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	C.gtk_text_buffer_get_start_iter((*C.GtkTextBuffer)(_self_._value_), &_allocated_iter_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextBuffer) GetTagTable() (_go__return__ GtkTextTagTable) {
	var _return_ *C.GtkTextTagTable
	_return_ = C.gtk_text_buffer_get_tag_table((*C.GtkTextBuffer)(_self_._value_))
	_go__return__ = ToGtkTextTagTable(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextBuffer) GetText(start *GtkTextIter, end *GtkTextIter, include_hidden_chars bool) (_go__return__ string) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_cgo_include_hidden_chars_ := (C.gboolean)(C.FALSE)
	if include_hidden_chars { _cgo_include_hidden_chars_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_text_buffer_get_text((*C.GtkTextBuffer)(_self_._value_), _cgo_start_, _cgo_end_, _cgo_include_hidden_chars_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextBuffer) Insert(iter *GtkTextIter, text string, len_ int) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_insert((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_text_, _cgo_len__)
	return
}

func (_self_ *GtkTextBuffer) InsertAtCursor(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_insert_at_cursor((*C.GtkTextBuffer)(_self_._value_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *GtkTextBuffer) InsertChildAnchor(iter *GtkTextIter, anchor GtkTextChildAnchorKind) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(anchor._getValue())
	C.gtk_text_buffer_insert_child_anchor((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_anchor_)
	return
}

func (_self_ *GtkTextBuffer) InsertInteractive(iter *GtkTextIter, text string, len_ int, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_interactive((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_text_, _cgo_len__, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) InsertInteractiveAtCursor(text string, len_ int, default_editable bool) (_go__return__ bool) {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_interactive_at_cursor((*C.GtkTextBuffer)(_self_._value_), _cgo_text_, _cgo_len__, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) InsertPixbuf(iter *GtkTextIter, pixbuf *C.GdkPixbuf) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C.gtk_text_buffer_insert_pixbuf((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, pixbuf)
	return
}

func (_self_ *GtkTextBuffer) InsertRange(iter *GtkTextIter, start *GtkTextIter, end *GtkTextIter) () {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_insert_range((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) InsertRangeInteractive(iter *GtkTextIter, start *GtkTextIter, end *GtkTextIter, default_editable bool) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_text_buffer_insert_range_interactive((*C.GtkTextBuffer)(_self_._value_), _cgo_iter_, _cgo_start_, _cgo_end_, _cgo_default_editable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextBuffer) MoveMark(mark GtkTextMarkKind, where *GtkTextIter) () {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_move_mark((*C.GtkTextBuffer)(_self_._value_), _cgo_mark_, _cgo_where_)
	return
}

func (_self_ *GtkTextBuffer) MoveMarkByName(name string, where *GtkTextIter) () {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_move_mark_by_name((*C.GtkTextBuffer)(_self_._value_), _cgo_name_, _cgo_where_)
	return
}

func (_self_ *GtkTextBuffer) PasteClipboard(clipboard GtkClipboardKind, override_location *GtkTextIter, default_editable bool) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(clipboard._getValue())
	_cgo_override_location_ := (*C.GtkTextIter)(unsafe.Pointer(override_location))
	_cgo_default_editable_ := (C.gboolean)(C.FALSE)
	if default_editable { _cgo_default_editable_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_buffer_paste_clipboard((*C.GtkTextBuffer)(_self_._value_), _cgo_clipboard_, _cgo_override_location_, _cgo_default_editable_)
	return
}

func (_self_ *GtkTextBuffer) PlaceCursor(where *GtkTextIter) () {
	_cgo_where_ := (*C.GtkTextIter)(unsafe.Pointer(where))
	C._gtk_text_buffer_place_cursor((*C.GtkTextBuffer)(_self_._value_), _cgo_where_)
	return
}

func (_self_ *GtkTextBuffer) RegisterDeserializeFormat(mime_type string, function C.GtkTextBufferDeserializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	_return_ = C._gtk_text_buffer_register_deserialize_format((*C.GtkTextBuffer)(_self_._value_), _cgo_mime_type_, function, user_data, user_data_destroy)
	return
}

func (_self_ *GtkTextBuffer) RegisterDeserializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cstring_tagset_name_ := C.CString(tagset_name)
	_cgo_tagset_name_ := (*C.gchar)(unsafe.Pointer(_cstring_tagset_name_))
	defer C.free(unsafe.Pointer(_cstring_tagset_name_))
	_return_ = C._gtk_text_buffer_register_deserialize_tagset((*C.GtkTextBuffer)(_self_._value_), _cgo_tagset_name_)
	return
}

func (_self_ *GtkTextBuffer) RegisterSerializeFormat(mime_type string, function C.GtkTextBufferSerializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	_return_ = C._gtk_text_buffer_register_serialize_format((*C.GtkTextBuffer)(_self_._value_), _cgo_mime_type_, function, user_data, user_data_destroy)
	return
}

func (_self_ *GtkTextBuffer) RegisterSerializeTagset(tagset_name string) (_return_ C.GdkAtom) {
	_cstring_tagset_name_ := C.CString(tagset_name)
	_cgo_tagset_name_ := (*C.gchar)(unsafe.Pointer(_cstring_tagset_name_))
	defer C.free(unsafe.Pointer(_cstring_tagset_name_))
	_return_ = C._gtk_text_buffer_register_serialize_tagset((*C.GtkTextBuffer)(_self_._value_), _cgo_tagset_name_)
	return
}

func (_self_ *GtkTextBuffer) RemoveAllTags(start *GtkTextIter, end *GtkTextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_remove_all_tags((*C.GtkTextBuffer)(_self_._value_), _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) RemoveSelectionClipboard(clipboard GtkClipboardKind) () {
	_cgo_clipboard_ := (*C.GtkClipboard)(clipboard._getValue())
	C.gtk_text_buffer_remove_selection_clipboard((*C.GtkTextBuffer)(_self_._value_), _cgo_clipboard_)
	return
}

func (_self_ *GtkTextBuffer) RemoveTag(tag GtkTextTagKind, start *GtkTextIter, end *GtkTextIter) () {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	C._gtk_text_buffer_remove_tag((*C.GtkTextBuffer)(_self_._value_), _cgo_tag_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) RemoveTagByName(name string, start *GtkTextIter, end *GtkTextIter) () {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_text_buffer_remove_tag_by_name((*C.GtkTextBuffer)(_self_._value_), _cgo_name_, _cgo_start_, _cgo_end_)
	return
}

func (_self_ *GtkTextBuffer) SelectRange(ins *GtkTextIter, bound *GtkTextIter) () {
	_cgo_ins_ := (*C.GtkTextIter)(unsafe.Pointer(ins))
	_cgo_bound_ := (*C.GtkTextIter)(unsafe.Pointer(bound))
	C._gtk_text_buffer_select_range((*C.GtkTextBuffer)(_self_._value_), _cgo_ins_, _cgo_bound_)
	return
}

func (_self_ *GtkTextBuffer) Serialize(content_buffer GtkTextBufferKind, format C.GdkAtom, start *GtkTextIter, end *GtkTextIter) (_return_ *C.guint8, _go_length_ uint64) {
	_cgo_content_buffer_ := (*C.GtkTextBuffer)(content_buffer._getValue())
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var length C.gsize
	_return_ = C._gtk_text_buffer_serialize((*C.GtkTextBuffer)(_self_._value_), _cgo_content_buffer_, format, _cgo_start_, _cgo_end_, &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *GtkTextBuffer) SetModified(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_buffer_set_modified((*C.GtkTextBuffer)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTextBuffer) SetText(text string, len_ int) () {
	_cgo_len__ := (C.gint)(len_)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_text_buffer_set_text((*C.GtkTextBuffer)(_self_._value_), _cgo_text_, _cgo_len__)
	return
}

func (_self_ *GtkTextBuffer) UnregisterDeserializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_deserialize_format((*C.GtkTextBuffer)(_self_._value_), format)
	return
}

func (_self_ *GtkTextBuffer) UnregisterSerializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_serialize_format((*C.GtkTextBuffer)(_self_._value_), format)
	return
}

func TextChildAnchorNew() (_go__return__ GtkTextChildAnchor) {
	var _return_ *C.GtkTextChildAnchor
	_return_ = C.gtk_text_child_anchor_new()
	_go__return__ = ToGtkTextChildAnchor(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextChildAnchor) GetDeleted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_child_anchor_get_deleted((*C.GtkTextChildAnchor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextChildAnchor) GetWidgets() (_return_ *C.GList) {
	_return_ = C.gtk_text_child_anchor_get_widgets((*C.GtkTextChildAnchor)(_self_._value_))
	return
}

func TextMarkNew(name string, left_gravity bool) (_go__return__ GtkTextMark) {
	var _return_ *C.GtkTextMark
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cgo_left_gravity_ := (C.gboolean)(C.FALSE)
	if left_gravity { _cgo_left_gravity_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_text_mark_new(_cgo_name_, _cgo_left_gravity_)
	_go__return__ = ToGtkTextMark(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextMark) GetBuffer() (_go__return__ GtkTextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_mark_get_buffer((*C.GtkTextMark)(_self_._value_))
	_go__return__ = ToGtkTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextMark) GetDeleted() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_deleted((*C.GtkTextMark)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextMark) GetLeftGravity() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_left_gravity((*C.GtkTextMark)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextMark) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_text_mark_get_name((*C.GtkTextMark)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextMark) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_mark_get_visible((*C.GtkTextMark)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextMark) SetVisible(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_mark_set_visible((*C.GtkTextMark)(_self_._value_), _cgo_setting_)
	return
}

func TextTagNew(name string) (_go__return__ GtkTextTag) {
	var _return_ *C.GtkTextTag
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_tag_new(_cgo_name_)
	_go__return__ = ToGtkTextTag(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextTag) Event(event_object *C.GObject, event *C.GdkEvent, iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C._gtk_text_tag_event((*C.GtkTextTag)(_self_._value_), event_object, event, _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextTag) GetPriority() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_tag_get_priority((*C.GtkTextTag)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextTag) SetPriority(priority int) () {
	_cgo_priority_ := (C.gint)(priority)
	C.gtk_text_tag_set_priority((*C.GtkTextTag)(_self_._value_), _cgo_priority_)
	return
}

func TextTagTableNew() (_go__return__ GtkTextTagTable) {
	var _return_ *C.GtkTextTagTable
	_return_ = C.gtk_text_tag_table_new()
	_go__return__ = ToGtkTextTagTable(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextTagTable) Add(tag GtkTextTagKind) () {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	C.gtk_text_tag_table_add((*C.GtkTextTagTable)(_self_._value_), _cgo_tag_)
	return
}

func (_self_ *GtkTextTagTable) Foreach(func_ C.GtkTextTagTableForeach, data C.gpointer) () {
	C.gtk_text_tag_table_foreach((*C.GtkTextTagTable)(_self_._value_), func_, data)
	return
}

func (_self_ *GtkTextTagTable) GetSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_tag_table_get_size((*C.GtkTextTagTable)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextTagTable) Lookup(name string) (_go__return__ GtkTextTag) {
	var _return_ *C.GtkTextTag
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_text_tag_table_lookup((*C.GtkTextTagTable)(_self_._value_), _cgo_name_)
	_go__return__ = ToGtkTextTag(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextTagTable) Remove(tag GtkTextTagKind) () {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	C.gtk_text_tag_table_remove((*C.GtkTextTagTable)(_self_._value_), _cgo_tag_)
	return
}

func TextViewNew() (_go__return__ GtkTextView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_text_view_new()
	_go__return__ = ToGtkTextView(unsafe.Pointer(_return_))
	return
}

func TextViewNewWithBuffer(buffer GtkTextBufferKind) (_go__return__ GtkTextView) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_text_view_new_with_buffer(_cgo_buffer_)
	_go__return__ = ToGtkTextView(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextView) AddChildAtAnchor(child GtkWidgetKind, anchor GtkTextChildAnchorKind) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_anchor_ := (*C.GtkTextChildAnchor)(anchor._getValue())
	C.gtk_text_view_add_child_at_anchor((*C.GtkTextView)(_self_._value_), _cgo_child_, _cgo_anchor_)
	return
}

func (_self_ *GtkTextView) AddChildInWindow(child GtkWidgetKind, which_window C.GtkTextWindowType, xpos int, ypos int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_xpos_ := (C.gint)(xpos)
	_cgo_ypos_ := (C.gint)(ypos)
	C.gtk_text_view_add_child_in_window((*C.GtkTextView)(_self_._value_), _cgo_child_, which_window, _cgo_xpos_, _cgo_ypos_)
	return
}

func (_self_ *GtkTextView) BackwardDisplayLine(iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_backward_display_line((*C.GtkTextView)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) BackwardDisplayLineStart(iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_backward_display_line_start((*C.GtkTextView)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) BufferToWindowCoords(win C.GtkTextWindowType, buffer_x int, buffer_y int) (_go_window_x_ int, _go_window_y_ int) {
	_cgo_buffer_x_ := (C.gint)(buffer_x)
	_cgo_buffer_y_ := (C.gint)(buffer_y)
	var window_x C.gint
	var window_y C.gint
	C.gtk_text_view_buffer_to_window_coords((*C.GtkTextView)(_self_._value_), win, _cgo_buffer_x_, _cgo_buffer_y_, &window_x, &window_y)
	_go_window_x_ = (int)(window_x)
	_go_window_y_ = (int)(window_y)
	return
}

func (_self_ *GtkTextView) ForwardDisplayLine(iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_forward_display_line((*C.GtkTextView)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) ForwardDisplayLineEnd(iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_forward_display_line_end((*C.GtkTextView)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) GetAcceptsTab() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_accepts_tab((*C.GtkTextView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) GetBorderWindowSize(type_ C.GtkTextWindowType) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_border_window_size((*C.GtkTextView)(_self_._value_), type_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetBuffer() (_go__return__ GtkTextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C.gtk_text_view_get_buffer((*C.GtkTextView)(_self_._value_))
	_go__return__ = ToGtkTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextView) GetCursorLocations(iter *GtkTextIter) (strong *C.GdkRectangle, weak *C.GdkRectangle) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C._gtk_text_view_get_cursor_locations((*C.GtkTextView)(_self_._value_), _cgo_iter_, strong, weak)
	return
}

func (_self_ *GtkTextView) GetCursorVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_cursor_visible((*C.GtkTextView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) GetDefaultAttributes() (_go__return__ *GtkTextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_view_get_default_attributes((*C.GtkTextView)(_self_._value_))
	_go__return__ = (*GtkTextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextView) GetEditable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_editable((*C.GtkTextView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) GetIndent() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_indent((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_text_view_get_input_hints((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_text_view_get_input_purpose((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) GetIterAtLocation(x int, y int) (iter *GtkTextIter) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_text_view_get_iter_at_location((*C.GtkTextView)(_self_._value_), &_allocated_iter_, _cgo_x_, _cgo_y_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTextView) GetIterAtPosition(x int, y int) (iter *GtkTextIter, _go_trailing_ int) {
	var _allocated_iter_ C.GtkTextIter
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var trailing C.gint
	C.gtk_text_view_get_iter_at_position((*C.GtkTextView)(_self_._value_), &_allocated_iter_, &trailing, _cgo_x_, _cgo_y_)
	iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_iter_))
	_go_trailing_ = (int)(trailing)
	return
}

func (_self_ *GtkTextView) GetIterLocation(iter *GtkTextIter) (location *C.GdkRectangle) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	C._gtk_text_view_get_iter_location((*C.GtkTextView)(_self_._value_), _cgo_iter_, location)
	return
}

func (_self_ *GtkTextView) GetJustification() (_return_ C.GtkJustification) {
	_return_ = C.gtk_text_view_get_justification((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) GetLeftMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_left_margin((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetLineAtY(y int) (target_iter *GtkTextIter, _go_line_top_ int) {
	var _allocated_target_iter_ C.GtkTextIter
	_cgo_y_ := (C.gint)(y)
	var line_top C.gint
	C.gtk_text_view_get_line_at_y((*C.GtkTextView)(_self_._value_), &_allocated_target_iter_, _cgo_y_, &line_top)
	target_iter = (*GtkTextIter)(unsafe.Pointer(&_allocated_target_iter_))
	_go_line_top_ = (int)(line_top)
	return
}

func (_self_ *GtkTextView) GetLineYrange(iter *GtkTextIter) (_go_y_ int, _go_height_ int) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var y C.gint
	var height C.gint
	C._gtk_text_view_get_line_yrange((*C.GtkTextView)(_self_._value_), _cgo_iter_, &y, &height)
	_go_y_ = (int)(y)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkTextView) GetOverwrite() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_get_overwrite((*C.GtkTextView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) GetPixelsAboveLines() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_above_lines((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetPixelsBelowLines() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_below_lines((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetPixelsInsideWrap() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_pixels_inside_wrap((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetRightMargin() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_text_view_get_right_margin((*C.GtkTextView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextView) GetTabs() (_return_ *C.PangoTabArray) {
	_return_ = C.gtk_text_view_get_tabs((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_text_view_get_visible_rect((*C.GtkTextView)(_self_._value_), visible_rect)
	return
}

func (_self_ *GtkTextView) GetWindow(win C.GtkTextWindowType) (_return_ *C.GdkWindow) {
	_return_ = C.gtk_text_view_get_window((*C.GtkTextView)(_self_._value_), win)
	return
}

func (_self_ *GtkTextView) GetWindowType(window *C.GdkWindow) (_return_ C.GtkTextWindowType) {
	_return_ = C.gtk_text_view_get_window_type((*C.GtkTextView)(_self_._value_), window)
	return
}

func (_self_ *GtkTextView) GetWrapMode() (_return_ C.GtkWrapMode) {
	_return_ = C.gtk_text_view_get_wrap_mode((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) ImContextFilterKeypress(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_im_context_filter_keypress((*C.GtkTextView)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) MoveChild(child GtkWidgetKind, xpos int, ypos int) () {
	_cgo_child_ := (*C.GtkWidget)(child._getValue())
	_cgo_xpos_ := (C.gint)(xpos)
	_cgo_ypos_ := (C.gint)(ypos)
	C.gtk_text_view_move_child((*C.GtkTextView)(_self_._value_), _cgo_child_, _cgo_xpos_, _cgo_ypos_)
	return
}

func (_self_ *GtkTextView) MoveMarkOnscreen(mark GtkTextMarkKind) (_go__return__ bool) {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_move_mark_onscreen((*C.GtkTextView)(_self_._value_), _cgo_mark_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) MoveVisually(iter *GtkTextIter, count int) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_move_visually((*C.GtkTextView)(_self_._value_), _cgo_iter_, _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) PlaceCursorOnscreen() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_place_cursor_onscreen((*C.GtkTextView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) ResetImContext() () {
	C.gtk_text_view_reset_im_context((*C.GtkTextView)(_self_._value_))
	return
}

func (_self_ *GtkTextView) ScrollMarkOnscreen(mark GtkTextMarkKind) () {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	C.gtk_text_view_scroll_mark_onscreen((*C.GtkTextView)(_self_._value_), _cgo_mark_)
	return
}

func (_self_ *GtkTextView) ScrollToIter(iter *GtkTextIter, within_margin float64, use_align bool, xalign float64, yalign float64) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	_cgo_within_margin_ := (C.gdouble)(within_margin)
	_cgo_xalign_ := (C.gdouble)(xalign)
	_cgo_yalign_ := (C.gdouble)(yalign)
	_cgo_use_align_ := (C.gboolean)(C.FALSE)
	if use_align { _cgo_use_align_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_text_view_scroll_to_iter((*C.GtkTextView)(_self_._value_), _cgo_iter_, _cgo_within_margin_, _cgo_use_align_, _cgo_xalign_, _cgo_yalign_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) ScrollToMark(mark GtkTextMarkKind, within_margin float64, use_align bool, xalign float64, yalign float64) () {
	_cgo_mark_ := (*C.GtkTextMark)(mark._getValue())
	_cgo_within_margin_ := (C.gdouble)(within_margin)
	_cgo_xalign_ := (C.gdouble)(xalign)
	_cgo_yalign_ := (C.gdouble)(yalign)
	_cgo_use_align_ := (C.gboolean)(C.FALSE)
	if use_align { _cgo_use_align_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_view_scroll_to_mark((*C.GtkTextView)(_self_._value_), _cgo_mark_, _cgo_within_margin_, _cgo_use_align_, _cgo_xalign_, _cgo_yalign_)
	return
}

func (_self_ *GtkTextView) SetAcceptsTab(accepts_tab bool) () {
	_cgo_accepts_tab_ := (C.gboolean)(C.FALSE)
	if accepts_tab { _cgo_accepts_tab_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_view_set_accepts_tab((*C.GtkTextView)(_self_._value_), _cgo_accepts_tab_)
	return
}

func (_self_ *GtkTextView) SetBorderWindowSize(type_ C.GtkTextWindowType, size int) () {
	_cgo_size_ := (C.gint)(size)
	C.gtk_text_view_set_border_window_size((*C.GtkTextView)(_self_._value_), type_, _cgo_size_)
	return
}

func (_self_ *GtkTextView) SetBuffer(buffer GtkTextBufferKind) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	C.gtk_text_view_set_buffer((*C.GtkTextView)(_self_._value_), _cgo_buffer_)
	return
}

func (_self_ *GtkTextView) SetCursorVisible(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_view_set_cursor_visible((*C.GtkTextView)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTextView) SetEditable(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_view_set_editable((*C.GtkTextView)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTextView) SetIndent(indent int) () {
	_cgo_indent_ := (C.gint)(indent)
	C.gtk_text_view_set_indent((*C.GtkTextView)(_self_._value_), _cgo_indent_)
	return
}

func (_self_ *GtkTextView) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_text_view_set_input_hints((*C.GtkTextView)(_self_._value_), hints)
	return
}

func (_self_ *GtkTextView) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_text_view_set_input_purpose((*C.GtkTextView)(_self_._value_), purpose)
	return
}

func (_self_ *GtkTextView) SetJustification(justification C.GtkJustification) () {
	C.gtk_text_view_set_justification((*C.GtkTextView)(_self_._value_), justification)
	return
}

func (_self_ *GtkTextView) SetLeftMargin(left_margin int) () {
	_cgo_left_margin_ := (C.gint)(left_margin)
	C.gtk_text_view_set_left_margin((*C.GtkTextView)(_self_._value_), _cgo_left_margin_)
	return
}

func (_self_ *GtkTextView) SetOverwrite(overwrite bool) () {
	_cgo_overwrite_ := (C.gboolean)(C.FALSE)
	if overwrite { _cgo_overwrite_ = (C.gboolean)(C.TRUE) }
	C.gtk_text_view_set_overwrite((*C.GtkTextView)(_self_._value_), _cgo_overwrite_)
	return
}

func (_self_ *GtkTextView) SetPixelsAboveLines(pixels_above_lines int) () {
	_cgo_pixels_above_lines_ := (C.gint)(pixels_above_lines)
	C.gtk_text_view_set_pixels_above_lines((*C.GtkTextView)(_self_._value_), _cgo_pixels_above_lines_)
	return
}

func (_self_ *GtkTextView) SetPixelsBelowLines(pixels_below_lines int) () {
	_cgo_pixels_below_lines_ := (C.gint)(pixels_below_lines)
	C.gtk_text_view_set_pixels_below_lines((*C.GtkTextView)(_self_._value_), _cgo_pixels_below_lines_)
	return
}

func (_self_ *GtkTextView) SetPixelsInsideWrap(pixels_inside_wrap int) () {
	_cgo_pixels_inside_wrap_ := (C.gint)(pixels_inside_wrap)
	C.gtk_text_view_set_pixels_inside_wrap((*C.GtkTextView)(_self_._value_), _cgo_pixels_inside_wrap_)
	return
}

func (_self_ *GtkTextView) SetRightMargin(right_margin int) () {
	_cgo_right_margin_ := (C.gint)(right_margin)
	C.gtk_text_view_set_right_margin((*C.GtkTextView)(_self_._value_), _cgo_right_margin_)
	return
}

func (_self_ *GtkTextView) SetTabs(tabs *C.PangoTabArray) () {
	C.gtk_text_view_set_tabs((*C.GtkTextView)(_self_._value_), tabs)
	return
}

func (_self_ *GtkTextView) SetWrapMode(wrap_mode C.GtkWrapMode) () {
	C.gtk_text_view_set_wrap_mode((*C.GtkTextView)(_self_._value_), wrap_mode)
	return
}

func (_self_ *GtkTextView) StartsDisplayLine(iter *GtkTextIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTextIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C._gtk_text_view_starts_display_line((*C.GtkTextView)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextView) WindowToBufferCoords(win C.GtkTextWindowType, window_x int, window_y int) (_go_buffer_x_ int, _go_buffer_y_ int) {
	_cgo_window_x_ := (C.gint)(window_x)
	_cgo_window_y_ := (C.gint)(window_y)
	var buffer_x C.gint
	var buffer_y C.gint
	C.gtk_text_view_window_to_buffer_coords((*C.GtkTextView)(_self_._value_), win, _cgo_window_x_, _cgo_window_y_, &buffer_x, &buffer_y)
	_go_buffer_x_ = (int)(buffer_x)
	_go_buffer_y_ = (int)(buffer_y)
	return
}

func ThemingEngineLoad(name string) (_go__return__ GtkThemingEngine) {
	var _return_ *C.GtkThemingEngine
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_theming_engine_load(_cgo_name_)
	_go__return__ = ToGtkThemingEngine(unsafe.Pointer(_return_))
	return
}

func ThemingEngineRegisterProperty(name_space string, parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	_cstring_name_space_ := C.CString(name_space)
	_cgo_name_space_ := (*C.gchar)(unsafe.Pointer(_cstring_name_space_))
	defer C.free(unsafe.Pointer(_cstring_name_space_))
	C._gtk_theming_engine_register_property(_cgo_name_space_, parse_func, pspec)
	return
}

func (_self_ *GtkThemingEngine) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_background_color((*C.GtkThemingEngine)(_self_._value_), state, color)
	return
}

func (_self_ *GtkThemingEngine) GetBorder(state C.GtkStateFlags) (border *GtkBorder) {
	var _allocated_border_ C.GtkBorder
	C.gtk_theming_engine_get_border((*C.GtkThemingEngine)(_self_._value_), state, &_allocated_border_)
	border = (*GtkBorder)(unsafe.Pointer(&_allocated_border_))
	return
}

func (_self_ *GtkThemingEngine) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_border_color((*C.GtkThemingEngine)(_self_._value_), state, color)
	return
}

func (_self_ *GtkThemingEngine) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_color((*C.GtkThemingEngine)(_self_._value_), state, color)
	return
}

func (_self_ *GtkThemingEngine) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_theming_engine_get_direction((*C.GtkThemingEngine)(_self_._value_))
	return
}

func (_self_ *GtkThemingEngine) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_theming_engine_get_font((*C.GtkThemingEngine)(_self_._value_), state)
	return
}

func (_self_ *GtkThemingEngine) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_theming_engine_get_junction_sides((*C.GtkThemingEngine)(_self_._value_))
	return
}

func (_self_ *GtkThemingEngine) GetMargin(state C.GtkStateFlags) (margin *GtkBorder) {
	var _allocated_margin_ C.GtkBorder
	C.gtk_theming_engine_get_margin((*C.GtkThemingEngine)(_self_._value_), state, &_allocated_margin_)
	margin = (*GtkBorder)(unsafe.Pointer(&_allocated_margin_))
	return
}

func (_self_ *GtkThemingEngine) GetPadding(state C.GtkStateFlags) (padding *GtkBorder) {
	var _allocated_padding_ C.GtkBorder
	C.gtk_theming_engine_get_padding((*C.GtkThemingEngine)(_self_._value_), state, &_allocated_padding_)
	padding = (*GtkBorder)(unsafe.Pointer(&_allocated_padding_))
	return
}

func (_self_ *GtkThemingEngine) GetPath() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_theming_engine_get_path((*C.GtkThemingEngine)(_self_._value_))
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkThemingEngine) GetProperty(property string, state C.GtkStateFlags) (value *C.GValue) {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._gtk_theming_engine_get_property((*C.GtkThemingEngine)(_self_._value_), _cgo_property_, state, value)
	return
}

func (_self_ *GtkThemingEngine) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_theming_engine_get_screen((*C.GtkThemingEngine)(_self_._value_))
	return
}

func (_self_ *GtkThemingEngine) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_theming_engine_get_state((*C.GtkThemingEngine)(_self_._value_))
	return
}

func (_self_ *GtkThemingEngine) GetStyleProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_theming_engine_get_style_property((*C.GtkThemingEngine)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *GtkThemingEngine) HasClass(style_class string) (_go__return__ bool) {
	_cstring_style_class_ := C.CString(style_class)
	_cgo_style_class_ := (*C.gchar)(unsafe.Pointer(_cstring_style_class_))
	defer C.free(unsafe.Pointer(_cstring_style_class_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_has_class((*C.GtkThemingEngine)(_self_._value_), _cgo_style_class_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkThemingEngine) HasRegion(style_region string) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cstring_style_region_ := C.CString(style_region)
	_cgo_style_region_ := (*C.gchar)(unsafe.Pointer(_cstring_style_region_))
	defer C.free(unsafe.Pointer(_cstring_style_region_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_has_region((*C.GtkThemingEngine)(_self_._value_), _cgo_style_region_, flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkThemingEngine) LookupColor(color_name string) (_go__return__ bool, color *C.GdkRGBA) {
	_cstring_color_name_ := C.CString(color_name)
	_cgo_color_name_ := (*C.gchar)(unsafe.Pointer(_cstring_color_name_))
	defer C.free(unsafe.Pointer(_cstring_color_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_theming_engine_lookup_color((*C.GtkThemingEngine)(_self_._value_), _cgo_color_name_, color)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ToggleActionNew(name string, label string, tooltip string, stock_id string) (_go__return__ GtkToggleAction) {
	var _return_ *C.GtkToggleAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_tooltip_ := C.CString(tooltip)
	_cgo_tooltip_ := (*C.gchar)(unsafe.Pointer(_cstring_tooltip_))
	defer C.free(unsafe.Pointer(_cstring_tooltip_))
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_toggle_action_new(_cgo_name_, _cgo_label_, _cgo_tooltip_, _cgo_stock_id_)
	_go__return__ = ToGtkToggleAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToggleAction) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_action_get_active((*C.GtkToggleAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleAction) GetDrawAsRadio() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_action_get_draw_as_radio((*C.GtkToggleAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleAction) SetActive(is_active bool) () {
	_cgo_is_active_ := (C.gboolean)(C.FALSE)
	if is_active { _cgo_is_active_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_action_set_active((*C.GtkToggleAction)(_self_._value_), _cgo_is_active_)
	return
}

func (_self_ *GtkToggleAction) SetDrawAsRadio(draw_as_radio bool) () {
	_cgo_draw_as_radio_ := (C.gboolean)(C.FALSE)
	if draw_as_radio { _cgo_draw_as_radio_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_action_set_draw_as_radio((*C.GtkToggleAction)(_self_._value_), _cgo_draw_as_radio_)
	return
}

func (_self_ *GtkToggleAction) Toggled() () {
	C.gtk_toggle_action_toggled((*C.GtkToggleAction)(_self_._value_))
	return
}

func ToggleButtonNew() (_go__return__ GtkToggleButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_toggle_button_new()
	_go__return__ = ToGtkToggleButton(unsafe.Pointer(_return_))
	return
}

func ToggleButtonNewWithLabel(label string) (_go__return__ GtkToggleButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_toggle_button_new_with_label(_cgo_label_)
	_go__return__ = ToGtkToggleButton(unsafe.Pointer(_return_))
	return
}

func ToggleButtonNewWithMnemonic(label string) (_go__return__ GtkToggleButton) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_toggle_button_new_with_mnemonic(_cgo_label_)
	_go__return__ = ToGtkToggleButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToggleButton) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_active((*C.GtkToggleButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleButton) GetInconsistent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_inconsistent((*C.GtkToggleButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleButton) GetMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_button_get_mode((*C.GtkToggleButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleButton) SetActive(is_active bool) () {
	_cgo_is_active_ := (C.gboolean)(C.FALSE)
	if is_active { _cgo_is_active_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_button_set_active((*C.GtkToggleButton)(_self_._value_), _cgo_is_active_)
	return
}

func (_self_ *GtkToggleButton) SetInconsistent(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_button_set_inconsistent((*C.GtkToggleButton)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkToggleButton) SetMode(draw_indicator bool) () {
	_cgo_draw_indicator_ := (C.gboolean)(C.FALSE)
	if draw_indicator { _cgo_draw_indicator_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_button_set_mode((*C.GtkToggleButton)(_self_._value_), _cgo_draw_indicator_)
	return
}

func (_self_ *GtkToggleButton) Toggled() () {
	C.gtk_toggle_button_toggled((*C.GtkToggleButton)(_self_._value_))
	return
}

func ToggleToolButtonNew() (_go__return__ GtkToggleToolButton) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_toggle_tool_button_new()
	_go__return__ = ToGtkToggleToolButton(unsafe.Pointer(_return_))
	return
}

func ToggleToolButtonNewFromStock(stock_id string) (_go__return__ GtkToggleToolButton) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_toggle_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = ToGtkToggleToolButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToggleToolButton) GetActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toggle_tool_button_get_active((*C.GtkToggleToolButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToggleToolButton) SetActive(is_active bool) () {
	_cgo_is_active_ := (C.gboolean)(C.FALSE)
	if is_active { _cgo_is_active_ = (C.gboolean)(C.TRUE) }
	C.gtk_toggle_tool_button_set_active((*C.GtkToggleToolButton)(_self_._value_), _cgo_is_active_)
	return
}

func ToolButtonNew(icon_widget GtkWidgetKind, label string) (_go__return__ GtkToolButton) {
	_cgo_icon_widget_ := (*C.GtkWidget)(icon_widget._getValue())
	var _return_ *C.GtkToolItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_tool_button_new(_cgo_icon_widget_, _cgo_label_)
	_go__return__ = ToGtkToolButton(unsafe.Pointer(_return_))
	return
}

func ToolButtonNewFromStock(stock_id string) (_go__return__ GtkToolButton) {
	var _return_ *C.GtkToolItem
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_tool_button_new_from_stock(_cgo_stock_id_)
	_go__return__ = ToGtkToolButton(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolButton) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_icon_name((*C.GtkToolButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkToolButton) GetIconWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_button_get_icon_widget((*C.GtkToolButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolButton) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_label((*C.GtkToolButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkToolButton) GetLabelWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_button_get_label_widget((*C.GtkToolButton)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolButton) GetStockId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_button_get_stock_id((*C.GtkToolButton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkToolButton) GetUseUnderline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_button_get_use_underline((*C.GtkToolButton)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolButton) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_tool_button_set_icon_name((*C.GtkToolButton)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkToolButton) SetIconWidget(icon_widget GtkWidgetKind) () {
	_cgo_icon_widget_ := (*C.GtkWidget)(icon_widget._getValue())
	C.gtk_tool_button_set_icon_widget((*C.GtkToolButton)(_self_._value_), _cgo_icon_widget_)
	return
}

func (_self_ *GtkToolButton) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_tool_button_set_label((*C.GtkToolButton)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkToolButton) SetLabelWidget(label_widget GtkWidgetKind) () {
	_cgo_label_widget_ := (*C.GtkWidget)(label_widget._getValue())
	C.gtk_tool_button_set_label_widget((*C.GtkToolButton)(_self_._value_), _cgo_label_widget_)
	return
}

func (_self_ *GtkToolButton) SetStockId(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_tool_button_set_stock_id((*C.GtkToolButton)(_self_._value_), _cgo_stock_id_)
	return
}

func (_self_ *GtkToolButton) SetUseUnderline(use_underline bool) () {
	_cgo_use_underline_ := (C.gboolean)(C.FALSE)
	if use_underline { _cgo_use_underline_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_button_set_use_underline((*C.GtkToolButton)(_self_._value_), _cgo_use_underline_)
	return
}

func ToolItemNew() (_go__return__ GtkToolItem) {
	var _return_ *C.GtkToolItem
	_return_ = C.gtk_tool_item_new()
	_go__return__ = ToGtkToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItem) GetEllipsizeMode() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_get_ellipsize_mode((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_expand((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_homogeneous((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_item_get_icon_size((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetIsImportant() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_is_important((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) GetOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_orientation((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetProxyMenuItem(menu_item_id string) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cstring_menu_item_id_ := C.CString(menu_item_id)
	_cgo_menu_item_id_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_item_id_))
	defer C.free(unsafe.Pointer(_cstring_menu_item_id_))
	_return_ = C._gtk_tool_item_get_proxy_menu_item((*C.GtkToolItem)(_self_._value_), _cgo_menu_item_id_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItem) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_get_relief_style((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetTextAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_tool_item_get_text_alignment((*C.GtkToolItem)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkToolItem) GetTextOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_text_orientation((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetTextSizeGroup() (_go__return__ GtkSizeGroup) {
	var _return_ *C.GtkSizeGroup
	_return_ = C.gtk_tool_item_get_text_size_group((*C.GtkToolItem)(_self_._value_))
	_go__return__ = ToGtkSizeGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItem) GetToolbarStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_item_get_toolbar_style((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) GetUseDragWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_use_drag_window((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) GetVisibleHorizontal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_visible_horizontal((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) GetVisibleVertical() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_get_visible_vertical((*C.GtkToolItem)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItem) RebuildMenu() () {
	C.gtk_tool_item_rebuild_menu((*C.GtkToolItem)(_self_._value_))
	return
}

func (_self_ *GtkToolItem) RetrieveProxyMenuItem() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_item_retrieve_proxy_menu_item((*C.GtkToolItem)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItem) SetExpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_expand((*C.GtkToolItem)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *GtkToolItem) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_homogeneous((*C.GtkToolItem)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GtkToolItem) SetIsImportant(is_important bool) () {
	_cgo_is_important_ := (C.gboolean)(C.FALSE)
	if is_important { _cgo_is_important_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_is_important((*C.GtkToolItem)(_self_._value_), _cgo_is_important_)
	return
}

func (_self_ *GtkToolItem) SetProxyMenuItem(menu_item_id string, menu_item GtkWidgetKind) () {
	_cgo_menu_item_ := (*C.GtkWidget)(menu_item._getValue())
	_cstring_menu_item_id_ := C.CString(menu_item_id)
	_cgo_menu_item_id_ := (*C.gchar)(unsafe.Pointer(_cstring_menu_item_id_))
	defer C.free(unsafe.Pointer(_cstring_menu_item_id_))
	C._gtk_tool_item_set_proxy_menu_item((*C.GtkToolItem)(_self_._value_), _cgo_menu_item_id_, _cgo_menu_item_)
	return
}

func (_self_ *GtkToolItem) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_tool_item_set_tooltip_markup((*C.GtkToolItem)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *GtkToolItem) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_tool_item_set_tooltip_text((*C.GtkToolItem)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkToolItem) SetUseDragWindow(use_drag_window bool) () {
	_cgo_use_drag_window_ := (C.gboolean)(C.FALSE)
	if use_drag_window { _cgo_use_drag_window_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_use_drag_window((*C.GtkToolItem)(_self_._value_), _cgo_use_drag_window_)
	return
}

func (_self_ *GtkToolItem) SetVisibleHorizontal(visible_horizontal bool) () {
	_cgo_visible_horizontal_ := (C.gboolean)(C.FALSE)
	if visible_horizontal { _cgo_visible_horizontal_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_visible_horizontal((*C.GtkToolItem)(_self_._value_), _cgo_visible_horizontal_)
	return
}

func (_self_ *GtkToolItem) SetVisibleVertical(visible_vertical bool) () {
	_cgo_visible_vertical_ := (C.gboolean)(C.FALSE)
	if visible_vertical { _cgo_visible_vertical_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_set_visible_vertical((*C.GtkToolItem)(_self_._value_), _cgo_visible_vertical_)
	return
}

func (_self_ *GtkToolItem) ToolbarReconfigured() () {
	C.gtk_tool_item_toolbar_reconfigured((*C.GtkToolItem)(_self_._value_))
	return
}

func ToolItemGroupNew(label string) (_go__return__ GtkToolItemGroup) {
	var _return_ *C.GtkWidget
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._gtk_tool_item_group_new(_cgo_label_)
	_go__return__ = ToGtkToolItemGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItemGroup) GetCollapsed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tool_item_group_get_collapsed((*C.GtkToolItemGroup)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolItemGroup) GetDropItem(x int, y int) (_go__return__ GtkToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_item_group_get_drop_item((*C.GtkToolItemGroup)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = ToGtkToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItemGroup) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_group_get_ellipsize((*C.GtkToolItemGroup)(_self_._value_))
	return
}

func (_self_ *GtkToolItemGroup) GetHeaderRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_group_get_header_relief((*C.GtkToolItemGroup)(_self_._value_))
	return
}

func (_self_ *GtkToolItemGroup) GetItemPosition(item GtkToolItemKind) (_go__return__ int) {
	_cgo_item_ := (*C.GtkToolItem)(item._getValue())
	var _return_ C.gint
	_return_ = C.gtk_tool_item_group_get_item_position((*C.GtkToolItemGroup)(_self_._value_), _cgo_item_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkToolItemGroup) GetLabel() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tool_item_group_get_label((*C.GtkToolItemGroup)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkToolItemGroup) GetLabelWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_item_group_get_label_widget((*C.GtkToolItemGroup)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItemGroup) GetNItems() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_tool_item_group_get_n_items((*C.GtkToolItemGroup)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkToolItemGroup) GetNthItem(index uint) (_go__return__ GtkToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_index_ := (C.guint)(index)
	_return_ = C.gtk_tool_item_group_get_nth_item((*C.GtkToolItemGroup)(_self_._value_), _cgo_index_)
	_go__return__ = ToGtkToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolItemGroup) Insert(item GtkToolItemKind, position int) () {
	_cgo_item_ := (*C.GtkToolItem)(item._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_item_group_insert((*C.GtkToolItemGroup)(_self_._value_), _cgo_item_, _cgo_position_)
	return
}

func (_self_ *GtkToolItemGroup) SetCollapsed(collapsed bool) () {
	_cgo_collapsed_ := (C.gboolean)(C.FALSE)
	if collapsed { _cgo_collapsed_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_item_group_set_collapsed((*C.GtkToolItemGroup)(_self_._value_), _cgo_collapsed_)
	return
}

func (_self_ *GtkToolItemGroup) SetEllipsize(ellipsize C.PangoEllipsizeMode) () {
	C.gtk_tool_item_group_set_ellipsize((*C.GtkToolItemGroup)(_self_._value_), ellipsize)
	return
}

func (_self_ *GtkToolItemGroup) SetHeaderRelief(style C.GtkReliefStyle) () {
	C.gtk_tool_item_group_set_header_relief((*C.GtkToolItemGroup)(_self_._value_), style)
	return
}

func (_self_ *GtkToolItemGroup) SetItemPosition(item GtkToolItemKind, position int) () {
	_cgo_item_ := (*C.GtkToolItem)(item._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_item_group_set_item_position((*C.GtkToolItemGroup)(_self_._value_), _cgo_item_, _cgo_position_)
	return
}

func (_self_ *GtkToolItemGroup) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._gtk_tool_item_group_set_label((*C.GtkToolItemGroup)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkToolItemGroup) SetLabelWidget(label_widget GtkWidgetKind) () {
	_cgo_label_widget_ := (*C.GtkWidget)(label_widget._getValue())
	C.gtk_tool_item_group_set_label_widget((*C.GtkToolItemGroup)(_self_._value_), _cgo_label_widget_)
	return
}

func ToolPaletteNew() (_go__return__ GtkToolPalette) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tool_palette_new()
	_go__return__ = ToGtkToolPalette(unsafe.Pointer(_return_))
	return
}

func ToolPaletteGetDragTargetGroup() (_go__return__ *GtkTargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C._gtk_tool_palette_get_drag_target_group()
	_go__return__ = (*GtkTargetEntry)(unsafe.Pointer(_return_))
	return
}

func ToolPaletteGetDragTargetItem() (_go__return__ *GtkTargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C._gtk_tool_palette_get_drag_target_item()
	_go__return__ = (*GtkTargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolPalette) AddDragDest(widget GtkWidgetKind, flags C.GtkDestDefaults, targets C.GtkToolPaletteDragTargets, actions C.GdkDragAction) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_tool_palette_add_drag_dest((*C.GtkToolPalette)(_self_._value_), _cgo_widget_, flags, targets, actions)
	return
}

func (_self_ *GtkToolPalette) GetDragItem(selection *GtkSelectionData) (_go__return__ GtkWidget) {
	_cgo_selection_ := (*C.GtkSelectionData)(unsafe.Pointer(selection))
	var _return_ *C.GtkWidget
	_return_ = C._gtk_tool_palette_get_drag_item((*C.GtkToolPalette)(_self_._value_), _cgo_selection_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolPalette) GetDropGroup(x int, y int) (_go__return__ GtkToolItemGroup) {
	var _return_ *C.GtkToolItemGroup
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_palette_get_drop_group((*C.GtkToolPalette)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = ToGtkToolItemGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolPalette) GetDropItem(x int, y int) (_go__return__ GtkToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.gtk_tool_palette_get_drop_item((*C.GtkToolPalette)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = ToGtkToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolPalette) GetExclusive(group GtkToolItemGroupKind) (_go__return__ bool) {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_tool_palette_get_exclusive((*C.GtkToolPalette)(_self_._value_), _cgo_group_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolPalette) GetExpand(group GtkToolItemGroupKind) (_go__return__ bool) {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_tool_palette_get_expand((*C.GtkToolPalette)(_self_._value_), _cgo_group_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolPalette) GetGroupPosition(group GtkToolItemGroupKind) (_go__return__ int) {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	var _return_ C.gint
	_return_ = C.gtk_tool_palette_get_group_position((*C.GtkToolPalette)(_self_._value_), _cgo_group_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkToolPalette) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_palette_get_icon_size((*C.GtkToolPalette)(_self_._value_))
	return
}

func (_self_ *GtkToolPalette) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_palette_get_style((*C.GtkToolPalette)(_self_._value_))
	return
}

func (_self_ *GtkToolPalette) SetDragSource(targets C.GtkToolPaletteDragTargets) () {
	C.gtk_tool_palette_set_drag_source((*C.GtkToolPalette)(_self_._value_), targets)
	return
}

func (_self_ *GtkToolPalette) SetExclusive(group GtkToolItemGroupKind, exclusive bool) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	_cgo_exclusive_ := (C.gboolean)(C.FALSE)
	if exclusive { _cgo_exclusive_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_palette_set_exclusive((*C.GtkToolPalette)(_self_._value_), _cgo_group_, _cgo_exclusive_)
	return
}

func (_self_ *GtkToolPalette) SetExpand(group GtkToolItemGroupKind, expand bool) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tool_palette_set_expand((*C.GtkToolPalette)(_self_._value_), _cgo_group_, _cgo_expand_)
	return
}

func (_self_ *GtkToolPalette) SetGroupPosition(group GtkToolItemGroupKind, position int) () {
	_cgo_group_ := (*C.GtkToolItemGroup)(group._getValue())
	_cgo_position_ := (C.gint)(position)
	C.gtk_tool_palette_set_group_position((*C.GtkToolPalette)(_self_._value_), _cgo_group_, _cgo_position_)
	return
}

func (_self_ *GtkToolPalette) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_tool_palette_set_icon_size((*C.GtkToolPalette)(_self_._value_), icon_size)
	return
}

func (_self_ *GtkToolPalette) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_tool_palette_set_style((*C.GtkToolPalette)(_self_._value_), style)
	return
}

func (_self_ *GtkToolPalette) UnsetIconSize() () {
	C.gtk_tool_palette_unset_icon_size((*C.GtkToolPalette)(_self_._value_))
	return
}

func (_self_ *GtkToolPalette) UnsetStyle() () {
	C.gtk_tool_palette_unset_style((*C.GtkToolPalette)(_self_._value_))
	return
}

func ToolbarNew() (_go__return__ GtkToolbar) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_toolbar_new()
	_go__return__ = ToGtkToolbar(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolbar) GetDropIndex(x int, y int) (_go__return__ int) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_drop_index((*C.GtkToolbar)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkToolbar) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_toolbar_get_icon_size((*C.GtkToolbar)(_self_._value_))
	return
}

func (_self_ *GtkToolbar) GetItemIndex(item GtkToolItemKind) (_go__return__ int) {
	_cgo_item_ := (*C.GtkToolItem)(item._getValue())
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_item_index((*C.GtkToolbar)(_self_._value_), _cgo_item_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkToolbar) GetNItems() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_toolbar_get_n_items((*C.GtkToolbar)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkToolbar) GetNthItem(n int) (_go__return__ GtkToolItem) {
	var _return_ *C.GtkToolItem
	_cgo_n_ := (C.gint)(n)
	_return_ = C.gtk_toolbar_get_nth_item((*C.GtkToolbar)(_self_._value_), _cgo_n_)
	_go__return__ = ToGtkToolItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkToolbar) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_toolbar_get_relief_style((*C.GtkToolbar)(_self_._value_))
	return
}

func (_self_ *GtkToolbar) GetShowArrow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_toolbar_get_show_arrow((*C.GtkToolbar)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkToolbar) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_toolbar_get_style((*C.GtkToolbar)(_self_._value_))
	return
}

func (_self_ *GtkToolbar) Insert(item GtkToolItemKind, pos int) () {
	_cgo_item_ := (*C.GtkToolItem)(item._getValue())
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_toolbar_insert((*C.GtkToolbar)(_self_._value_), _cgo_item_, _cgo_pos_)
	return
}

func (_self_ *GtkToolbar) SetDropHighlightItem(tool_item GtkToolItemKind, index_ int) () {
	_cgo_tool_item_ := (*C.GtkToolItem)(tool_item._getValue())
	_cgo_index__ := (C.gint)(index_)
	C.gtk_toolbar_set_drop_highlight_item((*C.GtkToolbar)(_self_._value_), _cgo_tool_item_, _cgo_index__)
	return
}

func (_self_ *GtkToolbar) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_toolbar_set_icon_size((*C.GtkToolbar)(_self_._value_), icon_size)
	return
}

func (_self_ *GtkToolbar) SetShowArrow(show_arrow bool) () {
	_cgo_show_arrow_ := (C.gboolean)(C.FALSE)
	if show_arrow { _cgo_show_arrow_ = (C.gboolean)(C.TRUE) }
	C.gtk_toolbar_set_show_arrow((*C.GtkToolbar)(_self_._value_), _cgo_show_arrow_)
	return
}

func (_self_ *GtkToolbar) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_toolbar_set_style((*C.GtkToolbar)(_self_._value_), style)
	return
}

func (_self_ *GtkToolbar) UnsetIconSize() () {
	C.gtk_toolbar_unset_icon_size((*C.GtkToolbar)(_self_._value_))
	return
}

func (_self_ *GtkToolbar) UnsetStyle() () {
	C.gtk_toolbar_unset_style((*C.GtkToolbar)(_self_._value_))
	return
}

func TooltipTriggerTooltipQuery(display *C.GdkDisplay) () {
	C.gtk_tooltip_trigger_tooltip_query(display)
	return
}

func (_self_ *GtkTooltip) SetCustom(custom_widget GtkWidgetKind) () {
	_cgo_custom_widget_ := (*C.GtkWidget)(custom_widget._getValue())
	C.gtk_tooltip_set_custom((*C.GtkTooltip)(_self_._value_), _cgo_custom_widget_)
	return
}

func (_self_ *GtkTooltip) SetIcon(pixbuf *C.GdkPixbuf) () {
	C.gtk_tooltip_set_icon((*C.GtkTooltip)(_self_._value_), pixbuf)
	return
}

func (_self_ *GtkTooltip) SetIconFromGicon(gicon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_tooltip_set_icon_from_gicon((*C.GtkTooltip)(_self_._value_), gicon, size)
	return
}

func (_self_ *GtkTooltip) SetIconFromIconName(icon_name string, size C.GtkIconSize) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_tooltip_set_icon_from_icon_name((*C.GtkTooltip)(_self_._value_), _cgo_icon_name_, size)
	return
}

func (_self_ *GtkTooltip) SetIconFromStock(stock_id string, size C.GtkIconSize) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_tooltip_set_icon_from_stock((*C.GtkTooltip)(_self_._value_), _cgo_stock_id_, size)
	return
}

func (_self_ *GtkTooltip) SetMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_tooltip_set_markup((*C.GtkTooltip)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *GtkTooltip) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_tooltip_set_text((*C.GtkTooltip)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkTooltip) SetTipArea(rect *C.GdkRectangle) () {
	C._gtk_tooltip_set_tip_area((*C.GtkTooltip)(_self_._value_), rect)
	return
}

func (_self_ *GtkTreeModelFilter) ClearCache() () {
	C.gtk_tree_model_filter_clear_cache((*C.GtkTreeModelFilter)(_self_._value_))
	return
}

func (_self_ *GtkTreeModelFilter) ConvertChildIterToIter(child_iter *GtkTreeIter) (_go__return__ bool, filter_iter *GtkTreeIter) {
	_cgo_child_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(child_iter))
	var _allocated_filter_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_filter_convert_child_iter_to_iter((*C.GtkTreeModelFilter)(_self_._value_), &_allocated_filter_iter_, _cgo_child_iter_)
	filter_iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_filter_iter_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeModelFilter) ConvertChildPathToPath(child_path *GtkTreePath) (_go__return__ *GtkTreePath) {
	_cgo_child_path_ := (*C.GtkTreePath)(unsafe.Pointer(child_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_filter_convert_child_path_to_path((*C.GtkTreeModelFilter)(_self_._value_), _cgo_child_path_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeModelFilter) ConvertIterToChildIter(filter_iter *GtkTreeIter) (child_iter *GtkTreeIter) {
	_cgo_filter_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(filter_iter))
	var _allocated_child_iter_ C.GtkTreeIter
	C.gtk_tree_model_filter_convert_iter_to_child_iter((*C.GtkTreeModelFilter)(_self_._value_), &_allocated_child_iter_, _cgo_filter_iter_)
	child_iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_child_iter_))
	return
}

func (_self_ *GtkTreeModelFilter) ConvertPathToChildPath(filter_path *GtkTreePath) (_go__return__ *GtkTreePath) {
	_cgo_filter_path_ := (*C.GtkTreePath)(unsafe.Pointer(filter_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_filter_convert_path_to_child_path((*C.GtkTreeModelFilter)(_self_._value_), _cgo_filter_path_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeModelFilter) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_filter_get_model((*C.GtkTreeModelFilter)(_self_._value_))
	return
}

func (_self_ *GtkTreeModelFilter) Refilter() () {
	C.gtk_tree_model_filter_refilter((*C.GtkTreeModelFilter)(_self_._value_))
	return
}

func (_self_ *GtkTreeModelFilter) SetVisibleColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_model_filter_set_visible_column((*C.GtkTreeModelFilter)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkTreeModelFilter) SetVisibleFunc(func_ C.GtkTreeModelFilterVisibleFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_model_filter_set_visible_func((*C.GtkTreeModelFilter)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkTreeModelSort) ClearCache() () {
	C.gtk_tree_model_sort_clear_cache((*C.GtkTreeModelSort)(_self_._value_))
	return
}

func (_self_ *GtkTreeModelSort) ConvertChildIterToIter(child_iter *GtkTreeIter) (_go__return__ bool, sort_iter *GtkTreeIter) {
	_cgo_child_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(child_iter))
	var _allocated_sort_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_sort_convert_child_iter_to_iter((*C.GtkTreeModelSort)(_self_._value_), &_allocated_sort_iter_, _cgo_child_iter_)
	sort_iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_sort_iter_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeModelSort) ConvertChildPathToPath(child_path *GtkTreePath) (_go__return__ *GtkTreePath) {
	_cgo_child_path_ := (*C.GtkTreePath)(unsafe.Pointer(child_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_sort_convert_child_path_to_path((*C.GtkTreeModelSort)(_self_._value_), _cgo_child_path_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeModelSort) ConvertIterToChildIter(sorted_iter *GtkTreeIter) (child_iter *GtkTreeIter) {
	_cgo_sorted_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(sorted_iter))
	var _allocated_child_iter_ C.GtkTreeIter
	C.gtk_tree_model_sort_convert_iter_to_child_iter((*C.GtkTreeModelSort)(_self_._value_), &_allocated_child_iter_, _cgo_sorted_iter_)
	child_iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_child_iter_))
	return
}

func (_self_ *GtkTreeModelSort) ConvertPathToChildPath(sorted_path *GtkTreePath) (_go__return__ *GtkTreePath) {
	_cgo_sorted_path_ := (*C.GtkTreePath)(unsafe.Pointer(sorted_path))
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_model_sort_convert_path_to_child_path((*C.GtkTreeModelSort)(_self_._value_), _cgo_sorted_path_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeModelSort) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_sort_get_model((*C.GtkTreeModelSort)(_self_._value_))
	return
}

func (_self_ *GtkTreeModelSort) IterIsValid(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_model_sort_iter_is_valid((*C.GtkTreeModelSort)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeModelSort) ResetDefaultSortFunc() () {
	C.gtk_tree_model_sort_reset_default_sort_func((*C.GtkTreeModelSort)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) CountSelectedRows() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_selection_count_selected_rows((*C.GtkTreeSelection)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeSelection) GetMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_tree_selection_get_mode((*C.GtkTreeSelection)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) GetSelectFunction() (_return_ C.GtkTreeSelectionFunc) {
	_return_ = C.gtk_tree_selection_get_select_function((*C.GtkTreeSelection)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) GetSelected() (_go__return__ bool, model unsafe.Pointer, iter *GtkTreeIter) {
	var _allocated_iter_ C.GtkTreeIter
	var _return_ C.gboolean
	_return_ = C._gtk_tree_selection_get_selected((*C.GtkTreeSelection)(_self_._value_), model, &_allocated_iter_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeSelection) GetSelectedRows() (_return_ *C.GList, model unsafe.Pointer) {
	_return_ = C._gtk_tree_selection_get_selected_rows((*C.GtkTreeSelection)(_self_._value_), model)
	return
}

func (_self_ *GtkTreeSelection) GetTreeView() (_go__return__ GtkTreeView) {
	var _return_ *C.GtkTreeView
	_return_ = C.gtk_tree_selection_get_tree_view((*C.GtkTreeSelection)(_self_._value_))
	_go__return__ = ToGtkTreeView(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeSelection) GetUserData() (_return_ C.gpointer) {
	_return_ = C.gtk_tree_selection_get_user_data((*C.GtkTreeSelection)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) IterIsSelected(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_selection_iter_is_selected((*C.GtkTreeSelection)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeSelection) PathIsSelected(path *GtkTreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_selection_path_is_selected((*C.GtkTreeSelection)(_self_._value_), _cgo_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeSelection) SelectAll() () {
	C.gtk_tree_selection_select_all((*C.GtkTreeSelection)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) SelectIter(iter *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_selection_select_iter((*C.GtkTreeSelection)(_self_._value_), _cgo_iter_)
	return
}

func (_self_ *GtkTreeSelection) SelectPath(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_selection_select_path((*C.GtkTreeSelection)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkTreeSelection) SelectRange(start_path *GtkTreePath, end_path *GtkTreePath) () {
	_cgo_start_path_ := (*C.GtkTreePath)(unsafe.Pointer(start_path))
	_cgo_end_path_ := (*C.GtkTreePath)(unsafe.Pointer(end_path))
	C.gtk_tree_selection_select_range((*C.GtkTreeSelection)(_self_._value_), _cgo_start_path_, _cgo_end_path_)
	return
}

func (_self_ *GtkTreeSelection) SelectedForeach(func_ C.GtkTreeSelectionForeachFunc, data C.gpointer) () {
	C.gtk_tree_selection_selected_foreach((*C.GtkTreeSelection)(_self_._value_), func_, data)
	return
}

func (_self_ *GtkTreeSelection) SetMode(type_ C.GtkSelectionMode) () {
	C.gtk_tree_selection_set_mode((*C.GtkTreeSelection)(_self_._value_), type_)
	return
}

func (_self_ *GtkTreeSelection) SetSelectFunction(func_ C.GtkTreeSelectionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_selection_set_select_function((*C.GtkTreeSelection)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkTreeSelection) UnselectAll() () {
	C.gtk_tree_selection_unselect_all((*C.GtkTreeSelection)(_self_._value_))
	return
}

func (_self_ *GtkTreeSelection) UnselectIter(iter *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	C.gtk_tree_selection_unselect_iter((*C.GtkTreeSelection)(_self_._value_), _cgo_iter_)
	return
}

func (_self_ *GtkTreeSelection) UnselectPath(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_selection_unselect_path((*C.GtkTreeSelection)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkTreeSelection) UnselectRange(start_path *GtkTreePath, end_path *GtkTreePath) () {
	_cgo_start_path_ := (*C.GtkTreePath)(unsafe.Pointer(start_path))
	_cgo_end_path_ := (*C.GtkTreePath)(unsafe.Pointer(end_path))
	C.gtk_tree_selection_unselect_range((*C.GtkTreeSelection)(_self_._value_), _cgo_start_path_, _cgo_end_path_)
	return
}

func (_self_ *GtkTreeStore) Append(parent *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_append((*C.GtkTreeStore)(_self_._value_), &_allocated_iter_, _cgo_parent_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTreeStore) Clear() () {
	C.gtk_tree_store_clear((*C.GtkTreeStore)(_self_._value_))
	return
}

func (_self_ *GtkTreeStore) Insert(parent *GtkTreeIter, position int) (iter *GtkTreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	_cgo_position_ := (C.gint)(position)
	C.gtk_tree_store_insert((*C.GtkTreeStore)(_self_._value_), &_allocated_iter_, _cgo_parent_, _cgo_position_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTreeStore) InsertAfter(parent *GtkTreeIter, sibling *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_insert_after((*C.GtkTreeStore)(_self_._value_), &_allocated_iter_, _cgo_parent_, _cgo_sibling_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTreeStore) InsertBefore(parent *GtkTreeIter, sibling *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	_cgo_sibling_ := (*C.GtkTreeIter)(unsafe.Pointer(sibling))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_insert_before((*C.GtkTreeStore)(_self_._value_), &_allocated_iter_, _cgo_parent_, _cgo_sibling_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTreeStore) IsAncestor(iter *GtkTreeIter, descendant *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_descendant_ := (*C.GtkTreeIter)(unsafe.Pointer(descendant))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_is_ancestor((*C.GtkTreeStore)(_self_._value_), _cgo_iter_, _cgo_descendant_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeStore) IterDepth(iter *GtkTreeIter) (_go__return__ int) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gint
	_return_ = C.gtk_tree_store_iter_depth((*C.GtkTreeStore)(_self_._value_), _cgo_iter_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeStore) IterIsValid(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_iter_is_valid((*C.GtkTreeStore)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeStore) MoveAfter(iter *GtkTreeIter, position *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_tree_store_move_after((*C.GtkTreeStore)(_self_._value_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *GtkTreeStore) MoveBefore(iter *GtkTreeIter, position *GtkTreeIter) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_position_ := (*C.GtkTreeIter)(unsafe.Pointer(position))
	C.gtk_tree_store_move_before((*C.GtkTreeStore)(_self_._value_), _cgo_iter_, _cgo_position_)
	return
}

func (_self_ *GtkTreeStore) Prepend(parent *GtkTreeIter) (iter *GtkTreeIter) {
	_cgo_parent_ := (*C.GtkTreeIter)(unsafe.Pointer(parent))
	var _allocated_iter_ C.GtkTreeIter
	C.gtk_tree_store_prepend((*C.GtkTreeStore)(_self_._value_), &_allocated_iter_, _cgo_parent_)
	iter = (*GtkTreeIter)(unsafe.Pointer(&_allocated_iter_))
	return
}

func (_self_ *GtkTreeStore) Remove(iter *GtkTreeIter) (_go__return__ bool) {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_store_remove((*C.GtkTreeStore)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeStore) SetValue(iter *GtkTreeIter, column int, value *C.GValue) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_store_set_value((*C.GtkTreeStore)(_self_._value_), _cgo_iter_, _cgo_column_, value)
	return
}

func (_self_ *GtkTreeStore) Swap(a *GtkTreeIter, b *GtkTreeIter) () {
	_cgo_a_ := (*C.GtkTreeIter)(unsafe.Pointer(a))
	_cgo_b_ := (*C.GtkTreeIter)(unsafe.Pointer(b))
	C.gtk_tree_store_swap((*C.GtkTreeStore)(_self_._value_), _cgo_a_, _cgo_b_)
	return
}

func TreeViewNew() (_go__return__ GtkTreeView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_new()
	_go__return__ = ToGtkTreeView(unsafe.Pointer(_return_))
	return
}

func TreeViewNewWithModel(model *C.GtkTreeModel) (_go__return__ GtkTreeView) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_new_with_model(model)
	_go__return__ = ToGtkTreeView(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeView) AppendColumn(column GtkTreeViewColumnKind) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	var _return_ C.gint
	_return_ = C.gtk_tree_view_append_column((*C.GtkTreeView)(_self_._value_), _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) CollapseAll() () {
	C.gtk_tree_view_collapse_all((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) CollapseRow(path *GtkTreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_collapse_row((*C.GtkTreeView)(_self_._value_), _cgo_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) ColumnsAutosize() () {
	C.gtk_tree_view_columns_autosize((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) ConvertBinWindowToTreeCoords(bx int, by int) (_go_tx_ int, _go_ty_ int) {
	_cgo_bx_ := (C.gint)(bx)
	_cgo_by_ := (C.gint)(by)
	var tx C.gint
	var ty C.gint
	C.gtk_tree_view_convert_bin_window_to_tree_coords((*C.GtkTreeView)(_self_._value_), _cgo_bx_, _cgo_by_, &tx, &ty)
	_go_tx_ = (int)(tx)
	_go_ty_ = (int)(ty)
	return
}

func (_self_ *GtkTreeView) ConvertBinWindowToWidgetCoords(bx int, by int) (_go_wx_ int, _go_wy_ int) {
	_cgo_bx_ := (C.gint)(bx)
	_cgo_by_ := (C.gint)(by)
	var wx C.gint
	var wy C.gint
	C.gtk_tree_view_convert_bin_window_to_widget_coords((*C.GtkTreeView)(_self_._value_), _cgo_bx_, _cgo_by_, &wx, &wy)
	_go_wx_ = (int)(wx)
	_go_wy_ = (int)(wy)
	return
}

func (_self_ *GtkTreeView) ConvertTreeToBinWindowCoords(tx int, ty int) (_go_bx_ int, _go_by_ int) {
	_cgo_tx_ := (C.gint)(tx)
	_cgo_ty_ := (C.gint)(ty)
	var bx C.gint
	var by C.gint
	C.gtk_tree_view_convert_tree_to_bin_window_coords((*C.GtkTreeView)(_self_._value_), _cgo_tx_, _cgo_ty_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *GtkTreeView) ConvertTreeToWidgetCoords(tx int, ty int) (_go_wx_ int, _go_wy_ int) {
	_cgo_tx_ := (C.gint)(tx)
	_cgo_ty_ := (C.gint)(ty)
	var wx C.gint
	var wy C.gint
	C.gtk_tree_view_convert_tree_to_widget_coords((*C.GtkTreeView)(_self_._value_), _cgo_tx_, _cgo_ty_, &wx, &wy)
	_go_wx_ = (int)(wx)
	_go_wy_ = (int)(wy)
	return
}

func (_self_ *GtkTreeView) ConvertWidgetToBinWindowCoords(wx int, wy int) (_go_bx_ int, _go_by_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var bx C.gint
	var by C.gint
	C.gtk_tree_view_convert_widget_to_bin_window_coords((*C.GtkTreeView)(_self_._value_), _cgo_wx_, _cgo_wy_, &bx, &by)
	_go_bx_ = (int)(bx)
	_go_by_ = (int)(by)
	return
}

func (_self_ *GtkTreeView) ConvertWidgetToTreeCoords(wx int, wy int) (_go_tx_ int, _go_ty_ int) {
	_cgo_wx_ := (C.gint)(wx)
	_cgo_wy_ := (C.gint)(wy)
	var tx C.gint
	var ty C.gint
	C.gtk_tree_view_convert_widget_to_tree_coords((*C.GtkTreeView)(_self_._value_), _cgo_wx_, _cgo_wy_, &tx, &ty)
	_go_tx_ = (int)(tx)
	_go_ty_ = (int)(ty)
	return
}

func (_self_ *GtkTreeView) CreateRowDragIcon(path *GtkTreePath) (_return_ *C.cairo_surface_t) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_return_ = C.gtk_tree_view_create_row_drag_icon((*C.GtkTreeView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkTreeView) ExpandAll() () {
	C.gtk_tree_view_expand_all((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) ExpandRow(path *GtkTreePath, open_all bool) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_open_all_ := (C.gboolean)(C.FALSE)
	if open_all { _cgo_open_all_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_expand_row((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_open_all_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) ExpandToPath(path *GtkTreePath) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_expand_to_path((*C.GtkTreeView)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *GtkTreeView) GetBackgroundArea(path *GtkTreePath, column GtkTreeViewColumnKind) (rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	C.gtk_tree_view_get_background_area((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_column_, rect)
	return
}

func (_self_ *GtkTreeView) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_tree_view_get_bin_window((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetCellArea(path *GtkTreePath, column GtkTreeViewColumnKind) (rect *C.GdkRectangle) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	C.gtk_tree_view_get_cell_area((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_column_, rect)
	return
}

func (_self_ *GtkTreeView) GetColumn(n int) (_go__return__ GtkTreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_cgo_n_ := (C.gint)(n)
	_return_ = C.gtk_tree_view_get_column((*C.GtkTreeView)(_self_._value_), _cgo_n_)
	_go__return__ = ToGtkTreeViewColumn(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeView) GetColumns() (_return_ *C.GList) {
	_return_ = C.gtk_tree_view_get_columns((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetCursor() (path *GtkTreePath, focus_column *GtkTreeViewColumn) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_focus_column_ *C.GtkTreeViewColumn
	C._gtk_tree_view_get_cursor((*C.GtkTreeView)(_self_._value_), unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_focus_column_))
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	focus_column = (*GtkTreeViewColumn)(unsafe.Pointer(_allocated_focus_column_))
	return
}

func (_self_ *GtkTreeView) GetDestRowAtPos(drag_x int, drag_y int) (_go__return__ bool, path *GtkTreePath, pos *C.GtkTreeViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	_cgo_drag_x_ := (C.gint)(drag_x)
	_cgo_drag_y_ := (C.gint)(drag_y)
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_dest_row_at_pos((*C.GtkTreeView)(_self_._value_), _cgo_drag_x_, _cgo_drag_y_, unsafe.Pointer(&_allocated_path_), pos)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetDragDestRow() (path *GtkTreePath, pos *C.GtkTreeViewDropPosition) {
	var _allocated_path_ *C.GtkTreePath
	C._gtk_tree_view_get_drag_dest_row((*C.GtkTreeView)(_self_._value_), unsafe.Pointer(&_allocated_path_), pos)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	return
}

func (_self_ *GtkTreeView) GetEnableSearch() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_enable_search((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetEnableTreeLines() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_enable_tree_lines((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetExpanderColumn() (_go__return__ GtkTreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_get_expander_column((*C.GtkTreeView)(_self_._value_))
	_go__return__ = ToGtkTreeViewColumn(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeView) GetFixedHeightMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_fixed_height_mode((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetGridLines() (_return_ C.GtkTreeViewGridLines) {
	_return_ = C.gtk_tree_view_get_grid_lines((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetHeadersClickable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_headers_clickable((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetHeadersVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_headers_visible((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetHoverExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_hover_expand((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetHoverSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_hover_selection((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetLevelIndentation() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_level_indentation((*C.GtkTreeView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_view_get_model((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetNColumns() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_tree_view_get_n_columns((*C.GtkTreeView)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkTreeView) GetPathAtPos(x int, y int) (_go__return__ bool, path *GtkTreePath, column *GtkTreeViewColumn, _go_cell_x_ int, _go_cell_y_ int) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_column_ *C.GtkTreeViewColumn
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var cell_x C.gint
	var cell_y C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_path_at_pos((*C.GtkTreeView)(_self_._value_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_column_), &cell_x, &cell_y)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	column = (*GtkTreeViewColumn)(unsafe.Pointer(_allocated_column_))
	_go_cell_x_ = (int)(cell_x)
	_go_cell_y_ = (int)(cell_y)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_reorderable((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_tree_view_get_row_separator_func((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetRubberBanding() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_rubber_banding((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetRulesHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_rules_hint((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetSearchColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_search_column((*C.GtkTreeView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) GetSearchEntry() (_go__return__ GtkEntry) {
	var _return_ *C.GtkEntry
	_return_ = C.gtk_tree_view_get_search_entry((*C.GtkTreeView)(_self_._value_))
	_go__return__ = ToGtkEntry(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeView) GetSearchEqualFunc() (_return_ C.GtkTreeViewSearchEqualFunc) {
	_return_ = C.gtk_tree_view_get_search_equal_func((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetSearchPositionFunc() (_return_ C.GtkTreeViewSearchPositionFunc) {
	_return_ = C.gtk_tree_view_get_search_position_func((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) GetSelection() (_go__return__ GtkTreeSelection) {
	var _return_ *C.GtkTreeSelection
	_return_ = C.gtk_tree_view_get_selection((*C.GtkTreeView)(_self_._value_))
	_go__return__ = ToGtkTreeSelection(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeView) GetShowExpanders() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_get_show_expanders((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetTooltipColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_get_tooltip_column((*C.GtkTreeView)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) GetVisibleRange() (_go__return__ bool, start_path *GtkTreePath, end_path *GtkTreePath) {
	var _allocated_start_path_ *C.GtkTreePath
	var _allocated_end_path_ *C.GtkTreePath
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_get_visible_range((*C.GtkTreeView)(_self_._value_), unsafe.Pointer(&_allocated_start_path_), unsafe.Pointer(&_allocated_end_path_))
	start_path = (*GtkTreePath)(unsafe.Pointer(_allocated_start_path_))
	end_path = (*GtkTreePath)(unsafe.Pointer(_allocated_end_path_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_tree_view_get_visible_rect((*C.GtkTreeView)(_self_._value_), visible_rect)
	return
}

func (_self_ *GtkTreeView) InsertColumn(column GtkTreeViewColumnKind, position int) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_return_ = C.gtk_tree_view_insert_column((*C.GtkTreeView)(_self_._value_), _cgo_column_, _cgo_position_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) InsertColumnWithDataFunc(position int, title string, cell GtkCellRendererKind, func_ C.GtkTreeCellDataFunc, data C.gpointer, dnotify C.GDestroyNotify) (_go__return__ int) {
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	_cgo_position_ := (C.gint)(position)
	var _return_ C.gint
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	_return_ = C._gtk_tree_view_insert_column_with_data_func((*C.GtkTreeView)(_self_._value_), _cgo_position_, _cgo_title_, _cgo_cell_, func_, data, dnotify)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) IsBlankAtPos(x int, y int) (_go__return__ bool, path *GtkTreePath, column *GtkTreeViewColumn, _go_cell_x_ int, _go_cell_y_ int) {
	var _allocated_path_ *C.GtkTreePath
	var _allocated_column_ *C.GtkTreeViewColumn
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	var cell_x C.gint
	var cell_y C.gint
	var _return_ C.gboolean
	_return_ = C._gtk_tree_view_is_blank_at_pos((*C.GtkTreeView)(_self_._value_), _cgo_x_, _cgo_y_, unsafe.Pointer(&_allocated_path_), unsafe.Pointer(&_allocated_column_), &cell_x, &cell_y)
	path = (*GtkTreePath)(unsafe.Pointer(_allocated_path_))
	column = (*GtkTreeViewColumn)(unsafe.Pointer(_allocated_column_))
	_go_cell_x_ = (int)(cell_x)
	_go_cell_y_ = (int)(cell_y)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) IsRubberBandingActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_is_rubber_banding_active((*C.GtkTreeView)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) MapExpandedRows(func_ C.GtkTreeViewMappingFunc, data C.gpointer) () {
	C.gtk_tree_view_map_expanded_rows((*C.GtkTreeView)(_self_._value_), func_, data)
	return
}

func (_self_ *GtkTreeView) MoveColumnAfter(column GtkTreeViewColumnKind, base_column GtkTreeViewColumnKind) () {
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	_cgo_base_column_ := (*C.GtkTreeViewColumn)(base_column._getValue())
	C.gtk_tree_view_move_column_after((*C.GtkTreeView)(_self_._value_), _cgo_column_, _cgo_base_column_)
	return
}

func (_self_ *GtkTreeView) RemoveColumn(column GtkTreeViewColumnKind) (_go__return__ int) {
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	var _return_ C.gint
	_return_ = C.gtk_tree_view_remove_column((*C.GtkTreeView)(_self_._value_), _cgo_column_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeView) RowActivated(path *GtkTreePath, column GtkTreeViewColumnKind) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	C.gtk_tree_view_row_activated((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_column_)
	return
}

func (_self_ *GtkTreeView) RowExpanded(path *GtkTreePath) (_go__return__ bool) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_row_expanded((*C.GtkTreeView)(_self_._value_), _cgo_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeView) ScrollToCell(path *GtkTreePath, column GtkTreeViewColumnKind, use_align bool, row_align float64, col_align float64) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	_cgo_row_align_ := (C.gfloat)(row_align)
	_cgo_col_align_ := (C.gfloat)(col_align)
	_cgo_use_align_ := (C.gboolean)(C.FALSE)
	if use_align { _cgo_use_align_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_scroll_to_cell((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_column_, _cgo_use_align_, _cgo_row_align_, _cgo_col_align_)
	return
}

func (_self_ *GtkTreeView) ScrollToPoint(tree_x int, tree_y int) () {
	_cgo_tree_x_ := (C.gint)(tree_x)
	_cgo_tree_y_ := (C.gint)(tree_y)
	C.gtk_tree_view_scroll_to_point((*C.GtkTreeView)(_self_._value_), _cgo_tree_x_, _cgo_tree_y_)
	return
}

func (_self_ *GtkTreeView) SetColumnDragFunction(func_ C.GtkTreeViewColumnDropFunc, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_column_drag_function((*C.GtkTreeView)(_self_._value_), func_, user_data, destroy)
	return
}

func (_self_ *GtkTreeView) SetCursor(path *GtkTreePath, focus_column GtkTreeViewColumnKind, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_focus_column_ := (*C.GtkTreeViewColumn)(focus_column._getValue())
	_cgo_start_editing_ := (C.gboolean)(C.FALSE)
	if start_editing { _cgo_start_editing_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_cursor((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_focus_column_, _cgo_start_editing_)
	return
}

func (_self_ *GtkTreeView) SetCursorOnCell(path *GtkTreePath, focus_column GtkTreeViewColumnKind, focus_cell GtkCellRendererKind, start_editing bool) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_focus_column_ := (*C.GtkTreeViewColumn)(focus_column._getValue())
	_cgo_focus_cell_ := (*C.GtkCellRenderer)(focus_cell._getValue())
	_cgo_start_editing_ := (C.gboolean)(C.FALSE)
	if start_editing { _cgo_start_editing_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_cursor_on_cell((*C.GtkTreeView)(_self_._value_), _cgo_path_, _cgo_focus_column_, _cgo_focus_cell_, _cgo_start_editing_)
	return
}

func (_self_ *GtkTreeView) SetDragDestRow(path *GtkTreePath, pos C.GtkTreeViewDropPosition) () {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_set_drag_dest_row((*C.GtkTreeView)(_self_._value_), _cgo_path_, pos)
	return
}

func (_self_ *GtkTreeView) SetEnableSearch(enable_search bool) () {
	_cgo_enable_search_ := (C.gboolean)(C.FALSE)
	if enable_search { _cgo_enable_search_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_enable_search((*C.GtkTreeView)(_self_._value_), _cgo_enable_search_)
	return
}

func (_self_ *GtkTreeView) SetEnableTreeLines(enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_enable_tree_lines((*C.GtkTreeView)(_self_._value_), _cgo_enabled_)
	return
}

func (_self_ *GtkTreeView) SetExpanderColumn(column GtkTreeViewColumnKind) () {
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	C.gtk_tree_view_set_expander_column((*C.GtkTreeView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkTreeView) SetFixedHeightMode(enable bool) () {
	_cgo_enable_ := (C.gboolean)(C.FALSE)
	if enable { _cgo_enable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_fixed_height_mode((*C.GtkTreeView)(_self_._value_), _cgo_enable_)
	return
}

func (_self_ *GtkTreeView) SetGridLines(grid_lines C.GtkTreeViewGridLines) () {
	C.gtk_tree_view_set_grid_lines((*C.GtkTreeView)(_self_._value_), grid_lines)
	return
}

func (_self_ *GtkTreeView) SetHeadersClickable(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_headers_clickable((*C.GtkTreeView)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTreeView) SetHeadersVisible(headers_visible bool) () {
	_cgo_headers_visible_ := (C.gboolean)(C.FALSE)
	if headers_visible { _cgo_headers_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_headers_visible((*C.GtkTreeView)(_self_._value_), _cgo_headers_visible_)
	return
}

func (_self_ *GtkTreeView) SetHoverExpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_hover_expand((*C.GtkTreeView)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *GtkTreeView) SetHoverSelection(hover bool) () {
	_cgo_hover_ := (C.gboolean)(C.FALSE)
	if hover { _cgo_hover_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_hover_selection((*C.GtkTreeView)(_self_._value_), _cgo_hover_)
	return
}

func (_self_ *GtkTreeView) SetLevelIndentation(indentation int) () {
	_cgo_indentation_ := (C.gint)(indentation)
	C.gtk_tree_view_set_level_indentation((*C.GtkTreeView)(_self_._value_), _cgo_indentation_)
	return
}

func (_self_ *GtkTreeView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_tree_view_set_model((*C.GtkTreeView)(_self_._value_), model)
	return
}

func (_self_ *GtkTreeView) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := (C.gboolean)(C.FALSE)
	if reorderable { _cgo_reorderable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_reorderable((*C.GtkTreeView)(_self_._value_), _cgo_reorderable_)
	return
}

func (_self_ *GtkTreeView) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_row_separator_func((*C.GtkTreeView)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkTreeView) SetRubberBanding(enable bool) () {
	_cgo_enable_ := (C.gboolean)(C.FALSE)
	if enable { _cgo_enable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_rubber_banding((*C.GtkTreeView)(_self_._value_), _cgo_enable_)
	return
}

func (_self_ *GtkTreeView) SetRulesHint(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_rules_hint((*C.GtkTreeView)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTreeView) SetSearchColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_view_set_search_column((*C.GtkTreeView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkTreeView) SetSearchEntry(entry GtkEntryKind) () {
	_cgo_entry_ := (*C.GtkEntry)(entry._getValue())
	C.gtk_tree_view_set_search_entry((*C.GtkTreeView)(_self_._value_), _cgo_entry_)
	return
}

func (_self_ *GtkTreeView) SetSearchEqualFunc(search_equal_func C.GtkTreeViewSearchEqualFunc, search_user_data C.gpointer, search_destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_equal_func((*C.GtkTreeView)(_self_._value_), search_equal_func, search_user_data, search_destroy)
	return
}

func (_self_ *GtkTreeView) SetSearchPositionFunc(func_ C.GtkTreeViewSearchPositionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_position_func((*C.GtkTreeView)(_self_._value_), func_, data, destroy)
	return
}

func (_self_ *GtkTreeView) SetShowExpanders(enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_set_show_expanders((*C.GtkTreeView)(_self_._value_), _cgo_enabled_)
	return
}

func (_self_ *GtkTreeView) SetTooltipCell(tooltip GtkTooltipKind, path *GtkTreePath, column GtkTreeViewColumnKind, cell GtkCellRendererKind) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(tooltip._getValue())
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	_cgo_column_ := (*C.GtkTreeViewColumn)(column._getValue())
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	C.gtk_tree_view_set_tooltip_cell((*C.GtkTreeView)(_self_._value_), _cgo_tooltip_, _cgo_path_, _cgo_column_, _cgo_cell_)
	return
}

func (_self_ *GtkTreeView) SetTooltipColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.gtk_tree_view_set_tooltip_column((*C.GtkTreeView)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *GtkTreeView) SetTooltipRow(tooltip GtkTooltipKind, path *GtkTreePath) () {
	_cgo_tooltip_ := (*C.GtkTooltip)(tooltip._getValue())
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	C.gtk_tree_view_set_tooltip_row((*C.GtkTreeView)(_self_._value_), _cgo_tooltip_, _cgo_path_)
	return
}

func (_self_ *GtkTreeView) UnsetRowsDragDest() () {
	C.gtk_tree_view_unset_rows_drag_dest((*C.GtkTreeView)(_self_._value_))
	return
}

func (_self_ *GtkTreeView) UnsetRowsDragSource() () {
	C.gtk_tree_view_unset_rows_drag_source((*C.GtkTreeView)(_self_._value_))
	return
}

func TreeViewColumnNew() (_go__return__ GtkTreeViewColumn) {
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_column_new()
	_go__return__ = ToGtkTreeViewColumn(unsafe.Pointer(_return_))
	return
}

func TreeViewColumnNewWithArea(area GtkCellAreaKind) (_go__return__ GtkTreeViewColumn) {
	_cgo_area_ := (*C.GtkCellArea)(area._getValue())
	var _return_ *C.GtkTreeViewColumn
	_return_ = C.gtk_tree_view_column_new_with_area(_cgo_area_)
	_go__return__ = ToGtkTreeViewColumn(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeViewColumn) AddAttribute(cell_renderer GtkCellRendererKind, attribute string, column int) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer._getValue())
	_cgo_column_ := (C.gint)(column)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._gtk_tree_view_column_add_attribute((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_renderer_, _cgo_attribute_, _cgo_column_)
	return
}

func (_self_ *GtkTreeViewColumn) CellGetPosition(cell_renderer GtkCellRendererKind) (_go__return__ bool, _go_x_offset_ int, _go_width_ int) {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer._getValue())
	var x_offset C.gint
	var width C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_cell_get_position((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_renderer_, &x_offset, &width)
	_go_x_offset_ = (int)(x_offset)
	_go_width_ = (int)(width)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) CellGetSize(cell_area *C.GdkRectangle) (_go_x_offset_ int, _go_y_offset_ int, _go_width_ int, _go_height_ int) {
	var x_offset C.gint
	var y_offset C.gint
	var width C.gint
	var height C.gint
	C._gtk_tree_view_column_cell_get_size((*C.GtkTreeViewColumn)(_self_._value_), cell_area, &x_offset, &y_offset, &width, &height)
	_go_x_offset_ = (int)(x_offset)
	_go_y_offset_ = (int)(y_offset)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkTreeViewColumn) CellIsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_cell_is_visible((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) CellSetCellData(tree_model *C.GtkTreeModel, iter *GtkTreeIter, is_expander bool, is_expanded bool) () {
	_cgo_iter_ := (*C.GtkTreeIter)(unsafe.Pointer(iter))
	_cgo_is_expander_ := (C.gboolean)(C.FALSE)
	if is_expander { _cgo_is_expander_ = (C.gboolean)(C.TRUE) }
	_cgo_is_expanded_ := (C.gboolean)(C.FALSE)
	if is_expanded { _cgo_is_expanded_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_cell_set_cell_data((*C.GtkTreeViewColumn)(_self_._value_), tree_model, _cgo_iter_, _cgo_is_expander_, _cgo_is_expanded_)
	return
}

func (_self_ *GtkTreeViewColumn) Clear() () {
	C.gtk_tree_view_column_clear((*C.GtkTreeViewColumn)(_self_._value_))
	return
}

func (_self_ *GtkTreeViewColumn) ClearAttributes(cell_renderer GtkCellRendererKind) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer._getValue())
	C.gtk_tree_view_column_clear_attributes((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_renderer_)
	return
}

func (_self_ *GtkTreeViewColumn) Clicked() () {
	C.gtk_tree_view_column_clicked((*C.GtkTreeViewColumn)(_self_._value_))
	return
}

func (_self_ *GtkTreeViewColumn) FocusCell(cell GtkCellRendererKind) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	C.gtk_tree_view_column_focus_cell((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_)
	return
}

func (_self_ *GtkTreeViewColumn) GetAlignment() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.gtk_tree_view_column_get_alignment((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetButton() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_button((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeViewColumn) GetClickable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_clickable((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_expand((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetFixedWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_fixed_width((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetMaxWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_max_width((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetMinWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_min_width((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetReorderable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_reorderable((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetResizable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_resizable((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetSizing() (_return_ C.GtkTreeViewColumnSizing) {
	_return_ = C.gtk_tree_view_column_get_sizing((*C.GtkTreeViewColumn)(_self_._value_))
	return
}

func (_self_ *GtkTreeViewColumn) GetSortColumnId() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_sort_column_id((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetSortIndicator() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_sort_indicator((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetSortOrder() (_return_ C.GtkSortType) {
	_return_ = C.gtk_tree_view_column_get_sort_order((*C.GtkTreeViewColumn)(_self_._value_))
	return
}

func (_self_ *GtkTreeViewColumn) GetSpacing() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_spacing((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_tree_view_column_get_title((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTreeViewColumn) GetTreeView() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_tree_view((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeViewColumn) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_view_column_get_visible((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeViewColumn) GetWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_tree_view_column_get_widget((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeViewColumn) GetWidth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_width((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) GetXOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_view_column_get_x_offset((*C.GtkTreeViewColumn)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreeViewColumn) PackEnd(cell GtkCellRendererKind, expand bool) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_pack_end((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_, _cgo_expand_)
	return
}

func (_self_ *GtkTreeViewColumn) PackStart(cell GtkCellRendererKind, expand bool) () {
	_cgo_cell_ := (*C.GtkCellRenderer)(cell._getValue())
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_pack_start((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_, _cgo_expand_)
	return
}

func (_self_ *GtkTreeViewColumn) QueueResize() () {
	C.gtk_tree_view_column_queue_resize((*C.GtkTreeViewColumn)(_self_._value_))
	return
}

func (_self_ *GtkTreeViewColumn) SetAlignment(xalign float64) () {
	_cgo_xalign_ := (C.gfloat)(xalign)
	C.gtk_tree_view_column_set_alignment((*C.GtkTreeViewColumn)(_self_._value_), _cgo_xalign_)
	return
}

func (_self_ *GtkTreeViewColumn) SetCellDataFunc(cell_renderer GtkCellRendererKind, func_ C.GtkTreeCellDataFunc, func_data C.gpointer, destroy C.GDestroyNotify) () {
	_cgo_cell_renderer_ := (*C.GtkCellRenderer)(cell_renderer._getValue())
	C.gtk_tree_view_column_set_cell_data_func((*C.GtkTreeViewColumn)(_self_._value_), _cgo_cell_renderer_, func_, func_data, destroy)
	return
}

func (_self_ *GtkTreeViewColumn) SetClickable(clickable bool) () {
	_cgo_clickable_ := (C.gboolean)(C.FALSE)
	if clickable { _cgo_clickable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_clickable((*C.GtkTreeViewColumn)(_self_._value_), _cgo_clickable_)
	return
}

func (_self_ *GtkTreeViewColumn) SetExpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_expand((*C.GtkTreeViewColumn)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *GtkTreeViewColumn) SetFixedWidth(fixed_width int) () {
	_cgo_fixed_width_ := (C.gint)(fixed_width)
	C.gtk_tree_view_column_set_fixed_width((*C.GtkTreeViewColumn)(_self_._value_), _cgo_fixed_width_)
	return
}

func (_self_ *GtkTreeViewColumn) SetMaxWidth(max_width int) () {
	_cgo_max_width_ := (C.gint)(max_width)
	C.gtk_tree_view_column_set_max_width((*C.GtkTreeViewColumn)(_self_._value_), _cgo_max_width_)
	return
}

func (_self_ *GtkTreeViewColumn) SetMinWidth(min_width int) () {
	_cgo_min_width_ := (C.gint)(min_width)
	C.gtk_tree_view_column_set_min_width((*C.GtkTreeViewColumn)(_self_._value_), _cgo_min_width_)
	return
}

func (_self_ *GtkTreeViewColumn) SetReorderable(reorderable bool) () {
	_cgo_reorderable_ := (C.gboolean)(C.FALSE)
	if reorderable { _cgo_reorderable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_reorderable((*C.GtkTreeViewColumn)(_self_._value_), _cgo_reorderable_)
	return
}

func (_self_ *GtkTreeViewColumn) SetResizable(resizable bool) () {
	_cgo_resizable_ := (C.gboolean)(C.FALSE)
	if resizable { _cgo_resizable_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_resizable((*C.GtkTreeViewColumn)(_self_._value_), _cgo_resizable_)
	return
}

func (_self_ *GtkTreeViewColumn) SetSizing(type_ C.GtkTreeViewColumnSizing) () {
	C.gtk_tree_view_column_set_sizing((*C.GtkTreeViewColumn)(_self_._value_), type_)
	return
}

func (_self_ *GtkTreeViewColumn) SetSortColumnId(sort_column_id int) () {
	_cgo_sort_column_id_ := (C.gint)(sort_column_id)
	C.gtk_tree_view_column_set_sort_column_id((*C.GtkTreeViewColumn)(_self_._value_), _cgo_sort_column_id_)
	return
}

func (_self_ *GtkTreeViewColumn) SetSortIndicator(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_sort_indicator((*C.GtkTreeViewColumn)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkTreeViewColumn) SetSortOrder(order C.GtkSortType) () {
	C.gtk_tree_view_column_set_sort_order((*C.GtkTreeViewColumn)(_self_._value_), order)
	return
}

func (_self_ *GtkTreeViewColumn) SetSpacing(spacing int) () {
	_cgo_spacing_ := (C.gint)(spacing)
	C.gtk_tree_view_column_set_spacing((*C.GtkTreeViewColumn)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GtkTreeViewColumn) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_tree_view_column_set_title((*C.GtkTreeViewColumn)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkTreeViewColumn) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_tree_view_column_set_visible((*C.GtkTreeViewColumn)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkTreeViewColumn) SetWidget(widget GtkWidgetKind) () {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	C.gtk_tree_view_column_set_widget((*C.GtkTreeViewColumn)(_self_._value_), _cgo_widget_)
	return
}

func UIManagerNew() (_go__return__ GtkUIManager) {
	var _return_ *C.GtkUIManager
	_return_ = C.gtk_ui_manager_new()
	_go__return__ = ToGtkUIManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkUIManager) AddUi(merge_id uint, path string, name string, action string, type_ C.GtkUIManagerItemType, top bool) () {
	_cgo_merge_id_ := (C.guint)(merge_id)
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_action_ := C.CString(action)
	_cgo_action_ := (*C.gchar)(unsafe.Pointer(_cstring_action_))
	defer C.free(unsafe.Pointer(_cstring_action_))
	_cgo_top_ := (C.gboolean)(C.FALSE)
	if top { _cgo_top_ = (C.gboolean)(C.TRUE) }
	C._gtk_ui_manager_add_ui((*C.GtkUIManager)(_self_._value_), _cgo_merge_id_, _cgo_path_, _cgo_name_, _cgo_action_, type_, _cgo_top_)
	return
}

func (_self_ *GtkUIManager) AddUiFromFile(filename string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._gtk_ui_manager_add_ui_from_file((*C.GtkUIManager)(_self_._value_), _cgo_filename_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkUIManager) AddUiFromResource(resource_path string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._gtk_ui_manager_add_ui_from_resource((*C.GtkUIManager)(_self_._value_), _cgo_resource_path_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkUIManager) AddUiFromString(buffer string, length int64) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_length_ := (C.gssize)(length)
	var _return_ C.guint
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_return_ = C._gtk_ui_manager_add_ui_from_string((*C.GtkUIManager)(_self_._value_), _cgo_buffer_, _cgo_length_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkUIManager) EnsureUpdate() () {
	C.gtk_ui_manager_ensure_update((*C.GtkUIManager)(_self_._value_))
	return
}

func (_self_ *GtkUIManager) GetAccelGroup() (_go__return__ GtkAccelGroup) {
	var _return_ *C.GtkAccelGroup
	_return_ = C.gtk_ui_manager_get_accel_group((*C.GtkUIManager)(_self_._value_))
	_go__return__ = ToGtkAccelGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkUIManager) GetAction(path string) (_go__return__ GtkAction) {
	var _return_ *C.GtkAction
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_ui_manager_get_action((*C.GtkUIManager)(_self_._value_), _cgo_path_)
	_go__return__ = ToGtkAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkUIManager) GetActionGroups() (_return_ *C.GList) {
	_return_ = C.gtk_ui_manager_get_action_groups((*C.GtkUIManager)(_self_._value_))
	return
}

func (_self_ *GtkUIManager) GetToplevels(types C.GtkUIManagerItemType) (_return_ *C.GSList) {
	_return_ = C.gtk_ui_manager_get_toplevels((*C.GtkUIManager)(_self_._value_), types)
	return
}

func (_self_ *GtkUIManager) GetUi() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_ui_manager_get_ui((*C.GtkUIManager)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkUIManager) GetWidget(path string) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_ui_manager_get_widget((*C.GtkUIManager)(_self_._value_), _cgo_path_)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkUIManager) InsertActionGroup(action_group GtkActionGroupKind, pos int) () {
	_cgo_action_group_ := (*C.GtkActionGroup)(action_group._getValue())
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_ui_manager_insert_action_group((*C.GtkUIManager)(_self_._value_), _cgo_action_group_, _cgo_pos_)
	return
}

func (_self_ *GtkUIManager) NewMergeId() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.gtk_ui_manager_new_merge_id((*C.GtkUIManager)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkUIManager) RemoveActionGroup(action_group GtkActionGroupKind) () {
	_cgo_action_group_ := (*C.GtkActionGroup)(action_group._getValue())
	C.gtk_ui_manager_remove_action_group((*C.GtkUIManager)(_self_._value_), _cgo_action_group_)
	return
}

func (_self_ *GtkUIManager) RemoveUi(merge_id uint) () {
	_cgo_merge_id_ := (C.guint)(merge_id)
	C.gtk_ui_manager_remove_ui((*C.GtkUIManager)(_self_._value_), _cgo_merge_id_)
	return
}

func ViewportNew(hadjustment GtkAdjustmentKind, vadjustment GtkAdjustmentKind) (_go__return__ GtkViewport) {
	_cgo_hadjustment_ := (*C.GtkAdjustment)(hadjustment._getValue())
	_cgo_vadjustment_ := (*C.GtkAdjustment)(vadjustment._getValue())
	var _return_ *C.GtkWidget
	_return_ = C.gtk_viewport_new(_cgo_hadjustment_, _cgo_vadjustment_)
	_go__return__ = ToGtkViewport(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkViewport) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_bin_window((*C.GtkViewport)(_self_._value_))
	return
}

func (_self_ *GtkViewport) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_viewport_get_shadow_type((*C.GtkViewport)(_self_._value_))
	return
}

func (_self_ *GtkViewport) GetViewWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_view_window((*C.GtkViewport)(_self_._value_))
	return
}

func (_self_ *GtkViewport) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_viewport_set_shadow_type((*C.GtkViewport)(_self_._value_), type_)
	return
}

func VolumeButtonNew() (_go__return__ GtkVolumeButton) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_volume_button_new()
	_go__return__ = ToGtkVolumeButton(unsafe.Pointer(_return_))
	return
}

func WidgetGetDefaultDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_default_direction()
	return
}

func WidgetPopCompositeChild() () {
	C.gtk_widget_pop_composite_child()
	return
}

func WidgetPushCompositeChild() () {
	C.gtk_widget_push_composite_child()
	return
}

func WidgetSetDefaultDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_default_direction(dir)
	return
}

func (_self_ *GtkWidget) Activate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_activate((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) AddAccelerator(accel_signal string, accel_group GtkAccelGroupKind, accel_key uint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	_cgo_accel_key_ := (C.guint)(accel_key)
	_cstring_accel_signal_ := C.CString(accel_signal)
	_cgo_accel_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_signal_))
	defer C.free(unsafe.Pointer(_cstring_accel_signal_))
	C._gtk_widget_add_accelerator((*C.GtkWidget)(_self_._value_), _cgo_accel_signal_, _cgo_accel_group_, _cgo_accel_key_, accel_mods, accel_flags)
	return
}

func (_self_ *GtkWidget) AddDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_add_device_events((*C.GtkWidget)(_self_._value_), device, events)
	return
}

func (_self_ *GtkWidget) AddEvents(events int) () {
	_cgo_events_ := (C.gint)(events)
	C.gtk_widget_add_events((*C.GtkWidget)(_self_._value_), _cgo_events_)
	return
}

func (_self_ *GtkWidget) AddMnemonicLabel(label GtkWidgetKind) () {
	_cgo_label_ := (*C.GtkWidget)(label._getValue())
	C.gtk_widget_add_mnemonic_label((*C.GtkWidget)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkWidget) CanActivateAccel(signal_id uint) (_go__return__ bool) {
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.gboolean
	_return_ = C.gtk_widget_can_activate_accel((*C.GtkWidget)(_self_._value_), _cgo_signal_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) ChildFocus(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_child_focus((*C.GtkWidget)(_self_._value_), direction)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) ChildNotify(child_property string) () {
	_cstring_child_property_ := C.CString(child_property)
	_cgo_child_property_ := (*C.gchar)(unsafe.Pointer(_cstring_child_property_))
	defer C.free(unsafe.Pointer(_cstring_child_property_))
	C._gtk_widget_child_notify((*C.GtkWidget)(_self_._value_), _cgo_child_property_)
	return
}

func (_self_ *GtkWidget) ComputeExpand(orientation C.GtkOrientation) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_compute_expand((*C.GtkWidget)(_self_._value_), orientation)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_create_pango_context((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) CreatePangoLayout(text string) (_return_ *C.PangoLayout) {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._gtk_widget_create_pango_layout((*C.GtkWidget)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkWidget) Destroy() () {
	C.gtk_widget_destroy((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DeviceIsShadowed(device *C.GdkDevice) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_device_is_shadowed((*C.GtkWidget)(_self_._value_), device)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) DragBegin(targets *GtkTargetList, actions C.GdkDragAction, button int, event *C.GdkEvent) (_return_ *C.GdkDragContext) {
	_cgo_targets_ := (*C.GtkTargetList)(unsafe.Pointer(targets))
	_cgo_button_ := (C.gint)(button)
	_return_ = C.gtk_drag_begin((*C.GtkWidget)(_self_._value_), _cgo_targets_, actions, _cgo_button_, event)
	return
}

func (_self_ *GtkWidget) DragCheckThreshold(start_x int, start_y int, current_x int, current_y int) (_go__return__ bool) {
	_cgo_start_x_ := (C.gint)(start_x)
	_cgo_start_y_ := (C.gint)(start_y)
	_cgo_current_x_ := (C.gint)(current_x)
	_cgo_current_y_ := (C.gint)(current_y)
	var _return_ C.gboolean
	_return_ = C.gtk_drag_check_threshold((*C.GtkWidget)(_self_._value_), _cgo_start_x_, _cgo_start_y_, _cgo_current_x_, _cgo_current_y_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) DragDestAddImageTargets() () {
	C.gtk_drag_dest_add_image_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragDestAddTextTargets() () {
	C.gtk_drag_dest_add_text_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragDestAddUriTargets() () {
	C.gtk_drag_dest_add_uri_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragDestFindTarget(context *C.GdkDragContext, target_list *GtkTargetList) (_return_ C.GdkAtom) {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	_return_ = C.gtk_drag_dest_find_target((*C.GtkWidget)(_self_._value_), context, _cgo_target_list_)
	return
}

func (_self_ *GtkWidget) DragDestGetTargetList() (_go__return__ *GtkTargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_drag_dest_get_target_list((*C.GtkWidget)(_self_._value_))
	_go__return__ = (*GtkTargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) DragDestGetTrackMotion() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_drag_dest_get_track_motion((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) DragDestSetProxy(proxy_window *C.GdkWindow, protocol C.GdkDragProtocol, use_coordinates bool) () {
	_cgo_use_coordinates_ := (C.gboolean)(C.FALSE)
	if use_coordinates { _cgo_use_coordinates_ = (C.gboolean)(C.TRUE) }
	C.gtk_drag_dest_set_proxy((*C.GtkWidget)(_self_._value_), proxy_window, protocol, _cgo_use_coordinates_)
	return
}

func (_self_ *GtkWidget) DragDestSetTargetList(target_list *GtkTargetList) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_drag_dest_set_target_list((*C.GtkWidget)(_self_._value_), _cgo_target_list_)
	return
}

func (_self_ *GtkWidget) DragDestSetTrackMotion(track_motion bool) () {
	_cgo_track_motion_ := (C.gboolean)(C.FALSE)
	if track_motion { _cgo_track_motion_ = (C.gboolean)(C.TRUE) }
	C.gtk_drag_dest_set_track_motion((*C.GtkWidget)(_self_._value_), _cgo_track_motion_)
	return
}

func (_self_ *GtkWidget) DragDestUnset() () {
	C.gtk_drag_dest_unset((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragGetData(context *C.GdkDragContext, target C.GdkAtom, time_ uint32) () {
	_cgo_time__ := (C.guint32)(time_)
	C.gtk_drag_get_data((*C.GtkWidget)(_self_._value_), context, target, _cgo_time__)
	return
}

func (_self_ *GtkWidget) DragHighlight() () {
	C.gtk_drag_highlight((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragSourceAddImageTargets() () {
	C.gtk_drag_source_add_image_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragSourceAddTextTargets() () {
	C.gtk_drag_source_add_text_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragSourceAddUriTargets() () {
	C.gtk_drag_source_add_uri_targets((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragSourceGetTargetList() (_go__return__ *GtkTargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_drag_source_get_target_list((*C.GtkWidget)(_self_._value_))
	_go__return__ = (*GtkTargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) DragSourceSetIconGicon(icon *C.GIcon) () {
	C.gtk_drag_source_set_icon_gicon((*C.GtkWidget)(_self_._value_), icon)
	return
}

func (_self_ *GtkWidget) DragSourceSetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_drag_source_set_icon_name((*C.GtkWidget)(_self_._value_), _cgo_icon_name_)
	return
}

func (_self_ *GtkWidget) DragSourceSetIconPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_drag_source_set_icon_pixbuf((*C.GtkWidget)(_self_._value_), pixbuf)
	return
}

func (_self_ *GtkWidget) DragSourceSetIconStock(stock_id string) () {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	C._gtk_drag_source_set_icon_stock((*C.GtkWidget)(_self_._value_), _cgo_stock_id_)
	return
}

func (_self_ *GtkWidget) DragSourceSetTargetList(target_list *GtkTargetList) () {
	_cgo_target_list_ := (*C.GtkTargetList)(unsafe.Pointer(target_list))
	C.gtk_drag_source_set_target_list((*C.GtkWidget)(_self_._value_), _cgo_target_list_)
	return
}

func (_self_ *GtkWidget) DragSourceUnset() () {
	C.gtk_drag_source_unset((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) DragUnhighlight() () {
	C.gtk_drag_unhighlight((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Draw(cr *C.cairo_t) () {
	C.gtk_widget_draw((*C.GtkWidget)(_self_._value_), cr)
	return
}

func (_self_ *GtkWidget) ErrorBell() () {
	C.gtk_widget_error_bell((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Event(event *C.GdkEvent) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_event((*C.GtkWidget)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) FreezeChildNotify() () {
	C.gtk_widget_freeze_child_notify((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_widget_get_accessible((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetAllocatedHeight() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_height((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetAllocatedWidth() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_width((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetAllocation() (allocation *C.GtkAllocation) {
	C.gtk_widget_get_allocation((*C.GtkWidget)(_self_._value_), allocation)
	return
}

func (_self_ *GtkWidget) GetAncestor(widget_type C.GType) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_ancestor((*C.GtkWidget)(_self_._value_), widget_type)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetAppPaintable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_app_paintable((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetCanDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_can_default((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetCanFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_can_focus((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetChildVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_child_visible((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetClipboard(selection C.GdkAtom) (_go__return__ GtkClipboard) {
	var _return_ *C.GtkClipboard
	_return_ = C.gtk_widget_get_clipboard((*C.GtkWidget)(_self_._value_), selection)
	_go__return__ = ToGtkClipboard(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetCompositeName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_composite_name((*C.GtkWidget)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidget) GetDeviceEnabled(device *C.GdkDevice) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_device_enabled((*C.GtkWidget)(_self_._value_), device)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetDeviceEvents(device *C.GdkDevice) (_return_ C.GdkEventMask) {
	_return_ = C.gtk_widget_get_device_events((*C.GtkWidget)(_self_._value_), device)
	return
}

func (_self_ *GtkWidget) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_direction((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_widget_get_display((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetDoubleBuffered() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_double_buffered((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetEvents() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_events((*C.GtkWidget)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) GetHalign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_halign((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetHasTooltip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_has_tooltip((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetHasWindow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_has_window((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetHexpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_hexpand((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetHexpandSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_hexpand_set((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetMapped() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_mapped((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetMarginBottom() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_bottom((*C.GtkWidget)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) GetMarginLeft() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_left((*C.GtkWidget)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) GetMarginRight() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_right((*C.GtkWidget)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) GetMarginTop() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_get_margin_top((*C.GtkWidget)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) GetModifierMask(intent C.GdkModifierIntent) (_return_ C.GdkModifierType) {
	_return_ = C.gtk_widget_get_modifier_mask((*C.GtkWidget)(_self_._value_), intent)
	return
}

func (_self_ *GtkWidget) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_widget_get_name((*C.GtkWidget)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidget) GetNoShowAll() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_no_show_all((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetPangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_get_pango_context((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetParent() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_parent((*C.GtkWidget)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetParentWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_parent_window((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetPath() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_get_path((*C.GtkWidget)(_self_._value_))
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetPreferredHeight() (_go_minimum_height_ int, _go_natural_height_ int) {
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_widget_get_preferred_height((*C.GtkWidget)(_self_._value_), &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkWidget) GetPreferredHeightForWidth(width int) (_go_minimum_height_ int, _go_natural_height_ int) {
	_cgo_width_ := (C.gint)(width)
	var minimum_height C.gint
	var natural_height C.gint
	C.gtk_widget_get_preferred_height_for_width((*C.GtkWidget)(_self_._value_), _cgo_width_, &minimum_height, &natural_height)
	_go_minimum_height_ = (int)(minimum_height)
	_go_natural_height_ = (int)(natural_height)
	return
}

func (_self_ *GtkWidget) GetPreferredSize() (minimum_size *GtkRequisition, natural_size *GtkRequisition) {
	var _allocated_minimum_size_ C.GtkRequisition
	var _allocated_natural_size_ C.GtkRequisition
	C.gtk_widget_get_preferred_size((*C.GtkWidget)(_self_._value_), &_allocated_minimum_size_, &_allocated_natural_size_)
	minimum_size = (*GtkRequisition)(unsafe.Pointer(&_allocated_minimum_size_))
	natural_size = (*GtkRequisition)(unsafe.Pointer(&_allocated_natural_size_))
	return
}

func (_self_ *GtkWidget) GetPreferredWidth() (_go_minimum_width_ int, _go_natural_width_ int) {
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_widget_get_preferred_width((*C.GtkWidget)(_self_._value_), &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkWidget) GetPreferredWidthForHeight(height int) (_go_minimum_width_ int, _go_natural_width_ int) {
	_cgo_height_ := (C.gint)(height)
	var minimum_width C.gint
	var natural_width C.gint
	C.gtk_widget_get_preferred_width_for_height((*C.GtkWidget)(_self_._value_), _cgo_height_, &minimum_width, &natural_width)
	_go_minimum_width_ = (int)(minimum_width)
	_go_natural_width_ = (int)(natural_width)
	return
}

func (_self_ *GtkWidget) GetRealized() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_realized((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetReceivesDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_receives_default((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_widget_get_request_mode((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetRootWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_root_window((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_widget_get_screen((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_sensitive((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetSettings() (_go__return__ GtkSettings) {
	var _return_ *C.GtkSettings
	_return_ = C.gtk_widget_get_settings((*C.GtkWidget)(_self_._value_))
	_go__return__ = ToGtkSettings(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetSizeRequest() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_widget_get_size_request((*C.GtkWidget)(_self_._value_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkWidget) GetStateFlags() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_widget_get_state_flags((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetStyleContext() (_go__return__ GtkStyleContext) {
	var _return_ *C.GtkStyleContext
	_return_ = C.gtk_widget_get_style_context((*C.GtkWidget)(_self_._value_))
	_go__return__ = ToGtkStyleContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetSupportMultidevice() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_support_multidevice((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetTooltipMarkup() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_tooltip_markup((*C.GtkWidget)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidget) GetTooltipText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_widget_get_tooltip_text((*C.GtkWidget)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidget) GetTooltipWindow() (_go__return__ GtkWindow) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_widget_get_tooltip_window((*C.GtkWidget)(_self_._value_))
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetToplevel() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_widget_get_toplevel((*C.GtkWidget)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidget) GetValign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_valign((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetVexpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_vexpand((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetVexpandSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_vexpand_set((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_get_visible((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) GetVisual() (_return_ *C.GdkVisual) {
	_return_ = C.gtk_widget_get_visual((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GetWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_window((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GrabAdd() () {
	C.gtk_grab_add((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GrabDefault() () {
	C.gtk_widget_grab_default((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GrabFocus() () {
	C.gtk_widget_grab_focus((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) GrabRemove() () {
	C.gtk_grab_remove((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) HasDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_default((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) HasFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_focus((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) HasGrab() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_grab((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) HasScreen() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_screen((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) HasVisibleFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_has_visible_focus((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) Hide() () {
	C.gtk_widget_hide((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) HideOnDelete() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_hide_on_delete((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) InDestruction() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_in_destruction((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) InputShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_input_shape_combine_region((*C.GtkWidget)(_self_._value_), region)
	return
}

func (_self_ *GtkWidget) InsertActionGroup(name string, group *C.GActionGroup) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_insert_action_group((*C.GtkWidget)(_self_._value_), _cgo_name_, group)
	return
}

func (_self_ *GtkWidget) Intersect(area *C.GdkRectangle, intersection *C.GdkRectangle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_intersect((*C.GtkWidget)(_self_._value_), area, intersection)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsAncestor(ancestor GtkWidgetKind) (_go__return__ bool) {
	_cgo_ancestor_ := (*C.GtkWidget)(ancestor._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_ancestor((*C.GtkWidget)(_self_._value_), _cgo_ancestor_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsComposited() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_composited((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsDrawable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_drawable((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_focus((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsSensitive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_sensitive((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) IsToplevel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_is_toplevel((*C.GtkWidget)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) KeynavFailed(direction C.GtkDirectionType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_keynav_failed((*C.GtkWidget)(_self_._value_), direction)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) ListAccelClosures() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_accel_closures((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) ListMnemonicLabels() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_mnemonic_labels((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Map() () {
	C.gtk_widget_map((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) MnemonicActivate(group_cycling bool) (_go__return__ bool) {
	_cgo_group_cycling_ := (C.gboolean)(C.FALSE)
	if group_cycling { _cgo_group_cycling_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.gtk_widget_mnemonic_activate((*C.GtkWidget)(_self_._value_), _cgo_group_cycling_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) OverrideBackgroundColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_background_color((*C.GtkWidget)(_self_._value_), state, color)
	return
}

func (_self_ *GtkWidget) OverrideColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_color((*C.GtkWidget)(_self_._value_), state, color)
	return
}

func (_self_ *GtkWidget) OverrideCursor(cursor *C.GdkRGBA, secondary_cursor *C.GdkRGBA) () {
	C._gtk_widget_override_cursor((*C.GtkWidget)(_self_._value_), cursor, secondary_cursor)
	return
}

func (_self_ *GtkWidget) OverrideFont(font_desc *C.PangoFontDescription) () {
	C._gtk_widget_override_font((*C.GtkWidget)(_self_._value_), font_desc)
	return
}

func (_self_ *GtkWidget) OverrideSymbolicColor(name string, color *C.GdkRGBA) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_override_symbolic_color((*C.GtkWidget)(_self_._value_), _cgo_name_, color)
	return
}

func (_self_ *GtkWidget) QueueComputeExpand() () {
	C.gtk_widget_queue_compute_expand((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) QueueDraw() () {
	C.gtk_widget_queue_draw((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) QueueDrawArea(x int, y int, width int, height int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_widget_queue_draw_area((*C.GtkWidget)(_self_._value_), _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWidget) QueueDrawRegion(region *C.cairo_region_t) () {
	C._gtk_widget_queue_draw_region((*C.GtkWidget)(_self_._value_), region)
	return
}

func (_self_ *GtkWidget) QueueResize() () {
	C.gtk_widget_queue_resize((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) QueueResizeNoRedraw() () {
	C.gtk_widget_queue_resize_no_redraw((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Realize() () {
	C.gtk_widget_realize((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) RegionIntersect(region *C.cairo_region_t) (_return_ *C.cairo_region_t) {
	_return_ = C._gtk_widget_region_intersect((*C.GtkWidget)(_self_._value_), region)
	return
}

func (_self_ *GtkWidget) RemoveAccelerator(accel_group GtkAccelGroupKind, accel_key uint, accel_mods C.GdkModifierType) (_go__return__ bool) {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	_cgo_accel_key_ := (C.guint)(accel_key)
	var _return_ C.gboolean
	_return_ = C.gtk_widget_remove_accelerator((*C.GtkWidget)(_self_._value_), _cgo_accel_group_, _cgo_accel_key_, accel_mods)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) RemoveMnemonicLabel(label GtkWidgetKind) () {
	_cgo_label_ := (*C.GtkWidget)(label._getValue())
	C.gtk_widget_remove_mnemonic_label((*C.GtkWidget)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GtkWidget) RenderIconPixbuf(stock_id string, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cstring_stock_id_ := C.CString(stock_id)
	_cgo_stock_id_ := (*C.gchar)(unsafe.Pointer(_cstring_stock_id_))
	defer C.free(unsafe.Pointer(_cstring_stock_id_))
	_return_ = C._gtk_widget_render_icon_pixbuf((*C.GtkWidget)(_self_._value_), _cgo_stock_id_, size)
	return
}

func (_self_ *GtkWidget) Reparent(new_parent GtkWidgetKind) () {
	_cgo_new_parent_ := (*C.GtkWidget)(new_parent._getValue())
	C.gtk_widget_reparent((*C.GtkWidget)(_self_._value_), _cgo_new_parent_)
	return
}

func (_self_ *GtkWidget) ResetStyle() () {
	C.gtk_widget_reset_style((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) SendExpose(event *C.GdkEvent) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_send_expose((*C.GtkWidget)(_self_._value_), event)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidget) SendFocusChange(event *C.GdkEvent) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_widget_send_focus_change((*C.GtkWidget)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) SetAccelPath(accel_path string, accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	_cstring_accel_path_ := C.CString(accel_path)
	_cgo_accel_path_ := (*C.gchar)(unsafe.Pointer(_cstring_accel_path_))
	defer C.free(unsafe.Pointer(_cstring_accel_path_))
	C._gtk_widget_set_accel_path((*C.GtkWidget)(_self_._value_), _cgo_accel_path_, _cgo_accel_group_)
	return
}

func (_self_ *GtkWidget) SetAllocation(allocation *C.GtkAllocation) () {
	C._gtk_widget_set_allocation((*C.GtkWidget)(_self_._value_), allocation)
	return
}

func (_self_ *GtkWidget) SetAppPaintable(app_paintable bool) () {
	_cgo_app_paintable_ := (C.gboolean)(C.FALSE)
	if app_paintable { _cgo_app_paintable_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_app_paintable((*C.GtkWidget)(_self_._value_), _cgo_app_paintable_)
	return
}

func (_self_ *GtkWidget) SetCanDefault(can_default bool) () {
	_cgo_can_default_ := (C.gboolean)(C.FALSE)
	if can_default { _cgo_can_default_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_can_default((*C.GtkWidget)(_self_._value_), _cgo_can_default_)
	return
}

func (_self_ *GtkWidget) SetCanFocus(can_focus bool) () {
	_cgo_can_focus_ := (C.gboolean)(C.FALSE)
	if can_focus { _cgo_can_focus_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_can_focus((*C.GtkWidget)(_self_._value_), _cgo_can_focus_)
	return
}

func (_self_ *GtkWidget) SetChildVisible(is_visible bool) () {
	_cgo_is_visible_ := (C.gboolean)(C.FALSE)
	if is_visible { _cgo_is_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_child_visible((*C.GtkWidget)(_self_._value_), _cgo_is_visible_)
	return
}

func (_self_ *GtkWidget) SetCompositeName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_set_composite_name((*C.GtkWidget)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkWidget) SetDeviceEnabled(device *C.GdkDevice, enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_device_enabled((*C.GtkWidget)(_self_._value_), device, _cgo_enabled_)
	return
}

func (_self_ *GtkWidget) SetDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_set_device_events((*C.GtkWidget)(_self_._value_), device, events)
	return
}

func (_self_ *GtkWidget) SetDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_direction((*C.GtkWidget)(_self_._value_), dir)
	return
}

func (_self_ *GtkWidget) SetDoubleBuffered(double_buffered bool) () {
	_cgo_double_buffered_ := (C.gboolean)(C.FALSE)
	if double_buffered { _cgo_double_buffered_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_double_buffered((*C.GtkWidget)(_self_._value_), _cgo_double_buffered_)
	return
}

func (_self_ *GtkWidget) SetEvents(events int) () {
	_cgo_events_ := (C.gint)(events)
	C.gtk_widget_set_events((*C.GtkWidget)(_self_._value_), _cgo_events_)
	return
}

func (_self_ *GtkWidget) SetHalign(align C.GtkAlign) () {
	C.gtk_widget_set_halign((*C.GtkWidget)(_self_._value_), align)
	return
}

func (_self_ *GtkWidget) SetHasTooltip(has_tooltip bool) () {
	_cgo_has_tooltip_ := (C.gboolean)(C.FALSE)
	if has_tooltip { _cgo_has_tooltip_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_has_tooltip((*C.GtkWidget)(_self_._value_), _cgo_has_tooltip_)
	return
}

func (_self_ *GtkWidget) SetHasWindow(has_window bool) () {
	_cgo_has_window_ := (C.gboolean)(C.FALSE)
	if has_window { _cgo_has_window_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_has_window((*C.GtkWidget)(_self_._value_), _cgo_has_window_)
	return
}

func (_self_ *GtkWidget) SetHexpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_hexpand((*C.GtkWidget)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *GtkWidget) SetHexpandSet(set bool) () {
	_cgo_set_ := (C.gboolean)(C.FALSE)
	if set { _cgo_set_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_hexpand_set((*C.GtkWidget)(_self_._value_), _cgo_set_)
	return
}

func (_self_ *GtkWidget) SetMapped(mapped bool) () {
	_cgo_mapped_ := (C.gboolean)(C.FALSE)
	if mapped { _cgo_mapped_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_mapped((*C.GtkWidget)(_self_._value_), _cgo_mapped_)
	return
}

func (_self_ *GtkWidget) SetMarginBottom(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_bottom((*C.GtkWidget)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *GtkWidget) SetMarginLeft(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_left((*C.GtkWidget)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *GtkWidget) SetMarginRight(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_right((*C.GtkWidget)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *GtkWidget) SetMarginTop(margin int) () {
	_cgo_margin_ := (C.gint)(margin)
	C.gtk_widget_set_margin_top((*C.GtkWidget)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *GtkWidget) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_set_name((*C.GtkWidget)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkWidget) SetNoShowAll(no_show_all bool) () {
	_cgo_no_show_all_ := (C.gboolean)(C.FALSE)
	if no_show_all { _cgo_no_show_all_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_no_show_all((*C.GtkWidget)(_self_._value_), _cgo_no_show_all_)
	return
}

func (_self_ *GtkWidget) SetParent(parent GtkWidgetKind) () {
	_cgo_parent_ := (*C.GtkWidget)(parent._getValue())
	C.gtk_widget_set_parent((*C.GtkWidget)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *GtkWidget) SetParentWindow(parent_window *C.GdkWindow) () {
	C.gtk_widget_set_parent_window((*C.GtkWidget)(_self_._value_), parent_window)
	return
}

func (_self_ *GtkWidget) SetRealized(realized bool) () {
	_cgo_realized_ := (C.gboolean)(C.FALSE)
	if realized { _cgo_realized_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_realized((*C.GtkWidget)(_self_._value_), _cgo_realized_)
	return
}

func (_self_ *GtkWidget) SetReceivesDefault(receives_default bool) () {
	_cgo_receives_default_ := (C.gboolean)(C.FALSE)
	if receives_default { _cgo_receives_default_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_receives_default((*C.GtkWidget)(_self_._value_), _cgo_receives_default_)
	return
}

func (_self_ *GtkWidget) SetRedrawOnAllocate(redraw_on_allocate bool) () {
	_cgo_redraw_on_allocate_ := (C.gboolean)(C.FALSE)
	if redraw_on_allocate { _cgo_redraw_on_allocate_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_redraw_on_allocate((*C.GtkWidget)(_self_._value_), _cgo_redraw_on_allocate_)
	return
}

func (_self_ *GtkWidget) SetSensitive(sensitive bool) () {
	_cgo_sensitive_ := (C.gboolean)(C.FALSE)
	if sensitive { _cgo_sensitive_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_sensitive((*C.GtkWidget)(_self_._value_), _cgo_sensitive_)
	return
}

func (_self_ *GtkWidget) SetSizeRequest(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_widget_set_size_request((*C.GtkWidget)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWidget) SetStateFlags(flags C.GtkStateFlags, clear bool) () {
	_cgo_clear_ := (C.gboolean)(C.FALSE)
	if clear { _cgo_clear_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_state_flags((*C.GtkWidget)(_self_._value_), flags, _cgo_clear_)
	return
}

func (_self_ *GtkWidget) SetSupportMultidevice(support_multidevice bool) () {
	_cgo_support_multidevice_ := (C.gboolean)(C.FALSE)
	if support_multidevice { _cgo_support_multidevice_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_support_multidevice((*C.GtkWidget)(_self_._value_), _cgo_support_multidevice_)
	return
}

func (_self_ *GtkWidget) SetTooltipMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._gtk_widget_set_tooltip_markup((*C.GtkWidget)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *GtkWidget) SetTooltipText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._gtk_widget_set_tooltip_text((*C.GtkWidget)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *GtkWidget) SetTooltipWindow(custom_window GtkWindowKind) () {
	_cgo_custom_window_ := (*C.GtkWindow)(custom_window._getValue())
	C.gtk_widget_set_tooltip_window((*C.GtkWidget)(_self_._value_), _cgo_custom_window_)
	return
}

func (_self_ *GtkWidget) SetValign(align C.GtkAlign) () {
	C.gtk_widget_set_valign((*C.GtkWidget)(_self_._value_), align)
	return
}

func (_self_ *GtkWidget) SetVexpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_vexpand((*C.GtkWidget)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *GtkWidget) SetVexpandSet(set bool) () {
	_cgo_set_ := (C.gboolean)(C.FALSE)
	if set { _cgo_set_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_vexpand_set((*C.GtkWidget)(_self_._value_), _cgo_set_)
	return
}

func (_self_ *GtkWidget) SetVisible(visible bool) () {
	_cgo_visible_ := (C.gboolean)(C.FALSE)
	if visible { _cgo_visible_ = (C.gboolean)(C.TRUE) }
	C.gtk_widget_set_visible((*C.GtkWidget)(_self_._value_), _cgo_visible_)
	return
}

func (_self_ *GtkWidget) SetVisual(visual *C.GdkVisual) () {
	C.gtk_widget_set_visual((*C.GtkWidget)(_self_._value_), visual)
	return
}

func (_self_ *GtkWidget) SetWindow(window *C.GdkWindow) () {
	C.gtk_widget_set_window((*C.GtkWidget)(_self_._value_), window)
	return
}

func (_self_ *GtkWidget) ShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_shape_combine_region((*C.GtkWidget)(_self_._value_), region)
	return
}

func (_self_ *GtkWidget) Show() () {
	C.gtk_widget_show((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) ShowAll() () {
	C.gtk_widget_show_all((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) ShowNow() () {
	C.gtk_widget_show_now((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) SizeAllocate(allocation *C.GtkAllocation) () {
	C.gtk_widget_size_allocate((*C.GtkWidget)(_self_._value_), allocation)
	return
}

func (_self_ *GtkWidget) StyleGetProperty(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._gtk_widget_style_get_property((*C.GtkWidget)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *GtkWidget) ThawChildNotify() () {
	C.gtk_widget_thaw_child_notify((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) TranslateCoordinates(dest_widget GtkWidgetKind, src_x int, src_y int) (_go__return__ bool, _go_dest_x_ int, _go_dest_y_ int) {
	_cgo_dest_widget_ := (*C.GtkWidget)(dest_widget._getValue())
	_cgo_src_x_ := (C.gint)(src_x)
	_cgo_src_y_ := (C.gint)(src_y)
	var dest_x C.gint
	var dest_y C.gint
	var _return_ C.gboolean
	_return_ = C.gtk_widget_translate_coordinates((*C.GtkWidget)(_self_._value_), _cgo_dest_widget_, _cgo_src_x_, _cgo_src_y_, &dest_x, &dest_y)
	_go_dest_x_ = (int)(dest_x)
	_go_dest_y_ = (int)(dest_y)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidget) TriggerTooltipQuery() () {
	C.gtk_widget_trigger_tooltip_query((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Unmap() () {
	C.gtk_widget_unmap((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Unparent() () {
	C.gtk_widget_unparent((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) Unrealize() () {
	C.gtk_widget_unrealize((*C.GtkWidget)(_self_._value_))
	return
}

func (_self_ *GtkWidget) UnsetStateFlags(flags C.GtkStateFlags) () {
	C.gtk_widget_unset_state_flags((*C.GtkWidget)(_self_._value_), flags)
	return
}

func WindowNew(type_ C.GtkWindowType) (_go__return__ GtkWindow) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_new(type_)
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func WindowGetDefaultIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_default_icon_list()
	return
}

func WindowGetDefaultIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_default_icon_name()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func WindowListToplevels() (_return_ *C.GList) {
	_return_ = C.gtk_window_list_toplevels()
	return
}

func WindowSetAutoStartupNotification(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_auto_startup_notification(_cgo_setting_)
	return
}

func WindowSetDefaultIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_default_icon(icon)
	return
}

func WindowSetDefaultIconFromFile(filename string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_set_default_icon_from_file(_cgo_filename_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func WindowSetDefaultIconList(list *C.GList) () {
	C.gtk_window_set_default_icon_list(list)
	return
}

func WindowSetDefaultIconName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_window_set_default_icon_name(_cgo_name_)
	return
}

func (_self_ *GtkWindow) ActivateDefault() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_default((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) ActivateFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_focus((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) ActivateKey(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_activate_key((*C.GtkWindow)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) AddAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_window_add_accel_group((*C.GtkWindow)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkWindow) AddMnemonic(keyval uint, target GtkWidgetKind) () {
	_cgo_target_ := (*C.GtkWidget)(target._getValue())
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_window_add_mnemonic((*C.GtkWindow)(_self_._value_), _cgo_keyval_, _cgo_target_)
	return
}

func (_self_ *GtkWindow) BeginMoveDrag(button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_button_ := (C.gint)(button)
	_cgo_root_x_ := (C.gint)(root_x)
	_cgo_root_y_ := (C.gint)(root_y)
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_begin_move_drag((*C.GtkWindow)(_self_._value_), _cgo_button_, _cgo_root_x_, _cgo_root_y_, _cgo_timestamp_)
	return
}

func (_self_ *GtkWindow) BeginResizeDrag(edge C.GdkWindowEdge, button int, root_x int, root_y int, timestamp uint32) () {
	_cgo_button_ := (C.gint)(button)
	_cgo_root_x_ := (C.gint)(root_x)
	_cgo_root_y_ := (C.gint)(root_y)
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_begin_resize_drag((*C.GtkWindow)(_self_._value_), edge, _cgo_button_, _cgo_root_x_, _cgo_root_y_, _cgo_timestamp_)
	return
}

func (_self_ *GtkWindow) Deiconify() () {
	C.gtk_window_deiconify((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) Fullscreen() () {
	C.gtk_window_fullscreen((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetAcceptFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_accept_focus((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetApplication() (_go__return__ GtkApplication) {
	var _return_ *C.GtkApplication
	_return_ = C.gtk_window_get_application((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkApplication(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetAttachedTo() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_attached_to((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetDecorated() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_decorated((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetDefaultSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_window_get_default_size((*C.GtkWindow)(_self_._value_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkWindow) GetDefaultWidget() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_default_widget((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetDeletable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_deletable((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetDestroyWithParent() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_destroy_with_parent((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetFocus() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_get_focus((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetFocusOnMap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_focus_on_map((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetFocusVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_focus_visible((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetGravity() (_return_ C.GdkGravity) {
	_return_ = C.gtk_window_get_gravity((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetGroup() (_go__return__ GtkWindowGroup) {
	var _return_ *C.GtkWindowGroup
	_return_ = C.gtk_window_get_group((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkWindowGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetHasResizeGrip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_has_resize_grip((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetHideTitlebarWhenMaximized() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_hide_titlebar_when_maximized((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetIcon() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_window_get_icon((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_icon_list((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_icon_name((*C.GtkWindow)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWindow) GetMnemonicModifier() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_window_get_mnemonic_modifier((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetMnemonicsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_mnemonics_visible((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetModal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_modal((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetOpacity() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_window_get_opacity((*C.GtkWindow)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkWindow) GetPosition() (_go_root_x_ int, _go_root_y_ int) {
	var root_x C.gint
	var root_y C.gint
	C.gtk_window_get_position((*C.GtkWindow)(_self_._value_), &root_x, &root_y)
	_go_root_x_ = (int)(root_x)
	_go_root_y_ = (int)(root_y)
	return
}

func (_self_ *GtkWindow) GetResizable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_resizable((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetResizeGripArea() (_go__return__ bool, rect *C.GdkRectangle) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_resize_grip_area((*C.GtkWindow)(_self_._value_), rect)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetRole() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_role((*C.GtkWindow)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWindow) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_window_get_screen((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetSize() (_go_width_ int, _go_height_ int) {
	var width C.gint
	var height C.gint
	C.gtk_window_get_size((*C.GtkWindow)(_self_._value_), &width, &height)
	_go_width_ = (int)(width)
	_go_height_ = (int)(height)
	return
}

func (_self_ *GtkWindow) GetSkipPagerHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_skip_pager_hint((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetSkipTaskbarHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_skip_taskbar_hint((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_window_get_title((*C.GtkWindow)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWindow) GetTransientFor() (_go__return__ GtkWindow) {
	var _return_ *C.GtkWindow
	_return_ = C.gtk_window_get_transient_for((*C.GtkWindow)(_self_._value_))
	_go__return__ = ToGtkWindow(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindow) GetTypeHint() (_return_ C.GdkWindowTypeHint) {
	_return_ = C.gtk_window_get_type_hint((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) GetUrgencyHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_get_urgency_hint((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) GetWindowType() (_return_ C.GtkWindowType) {
	_return_ = C.gtk_window_get_window_type((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) HasGroup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_has_group((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) HasToplevelFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_has_toplevel_focus((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) Iconify() () {
	C.gtk_window_iconify((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) IsActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_is_active((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) Maximize() () {
	C.gtk_window_maximize((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) MnemonicActivate(keyval uint, modifier C.GdkModifierType) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_window_mnemonic_activate((*C.GtkWindow)(_self_._value_), _cgo_keyval_, modifier)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) Move(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.gtk_window_move((*C.GtkWindow)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *GtkWindow) ParseGeometry(geometry string) (_go__return__ bool) {
	_cstring_geometry_ := C.CString(geometry)
	_cgo_geometry_ := (*C.gchar)(unsafe.Pointer(_cstring_geometry_))
	defer C.free(unsafe.Pointer(_cstring_geometry_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_parse_geometry((*C.GtkWindow)(_self_._value_), _cgo_geometry_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) Present() () {
	C.gtk_window_present((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) PresentWithTime(timestamp uint32) () {
	_cgo_timestamp_ := (C.guint32)(timestamp)
	C.gtk_window_present_with_time((*C.GtkWindow)(_self_._value_), _cgo_timestamp_)
	return
}

func (_self_ *GtkWindow) PropagateKeyEvent(event *C.GdkEventKey) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_propagate_key_event((*C.GtkWindow)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) RemoveAccelGroup(accel_group GtkAccelGroupKind) () {
	_cgo_accel_group_ := (*C.GtkAccelGroup)(accel_group._getValue())
	C.gtk_window_remove_accel_group((*C.GtkWindow)(_self_._value_), _cgo_accel_group_)
	return
}

func (_self_ *GtkWindow) RemoveMnemonic(keyval uint, target GtkWidgetKind) () {
	_cgo_target_ := (*C.GtkWidget)(target._getValue())
	_cgo_keyval_ := (C.guint)(keyval)
	C.gtk_window_remove_mnemonic((*C.GtkWindow)(_self_._value_), _cgo_keyval_, _cgo_target_)
	return
}

func (_self_ *GtkWindow) ReshowWithInitialSize() () {
	C.gtk_window_reshow_with_initial_size((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) Resize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_resize((*C.GtkWindow)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWindow) ResizeGripIsVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_window_resize_grip_is_visible((*C.GtkWindow)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) ResizeToGeometry(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_resize_to_geometry((*C.GtkWindow)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWindow) SetAcceptFocus(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_accept_focus((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetApplication(application GtkApplicationKind) () {
	_cgo_application_ := (*C.GtkApplication)(application._getValue())
	C.gtk_window_set_application((*C.GtkWindow)(_self_._value_), _cgo_application_)
	return
}

func (_self_ *GtkWindow) SetAttachedTo(attach_widget GtkWidgetKind) () {
	_cgo_attach_widget_ := (*C.GtkWidget)(attach_widget._getValue())
	C.gtk_window_set_attached_to((*C.GtkWindow)(_self_._value_), _cgo_attach_widget_)
	return
}

func (_self_ *GtkWindow) SetDecorated(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_decorated((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetDefault(default_widget GtkWidgetKind) () {
	_cgo_default_widget_ := (*C.GtkWidget)(default_widget._getValue())
	C.gtk_window_set_default((*C.GtkWindow)(_self_._value_), _cgo_default_widget_)
	return
}

func (_self_ *GtkWindow) SetDefaultGeometry(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_set_default_geometry((*C.GtkWindow)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWindow) SetDefaultSize(width int, height int) () {
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.gtk_window_set_default_size((*C.GtkWindow)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GtkWindow) SetDeletable(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_deletable((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetDestroyWithParent(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_destroy_with_parent((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetFocus(focus GtkWidgetKind) () {
	_cgo_focus_ := (*C.GtkWidget)(focus._getValue())
	C.gtk_window_set_focus((*C.GtkWindow)(_self_._value_), _cgo_focus_)
	return
}

func (_self_ *GtkWindow) SetFocusOnMap(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_focus_on_map((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetFocusVisible(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_focus_visible((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetGeometryHints(geometry_widget GtkWidgetKind, geometry *C.GdkGeometry, geom_mask C.GdkWindowHints) () {
	_cgo_geometry_widget_ := (*C.GtkWidget)(geometry_widget._getValue())
	C.gtk_window_set_geometry_hints((*C.GtkWindow)(_self_._value_), _cgo_geometry_widget_, geometry, geom_mask)
	return
}

func (_self_ *GtkWindow) SetGravity(gravity C.GdkGravity) () {
	C.gtk_window_set_gravity((*C.GtkWindow)(_self_._value_), gravity)
	return
}

func (_self_ *GtkWindow) SetHasResizeGrip(value bool) () {
	_cgo_value_ := (C.gboolean)(C.FALSE)
	if value { _cgo_value_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_has_resize_grip((*C.GtkWindow)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *GtkWindow) SetHasUserRefCount(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_has_user_ref_count((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetHideTitlebarWhenMaximized(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_hide_titlebar_when_maximized((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_icon((*C.GtkWindow)(_self_._value_), icon)
	return
}

func (_self_ *GtkWindow) SetIconFromFile(filename string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ C.gboolean
	_return_ = C._gtk_window_set_icon_from_file((*C.GtkWindow)(_self_._value_), _cgo_filename_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWindow) SetIconList(list *C.GList) () {
	C.gtk_window_set_icon_list((*C.GtkWindow)(_self_._value_), list)
	return
}

func (_self_ *GtkWindow) SetIconName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_window_set_icon_name((*C.GtkWindow)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *GtkWindow) SetKeepAbove(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_keep_above((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetKeepBelow(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_keep_below((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetMnemonicModifier(modifier C.GdkModifierType) () {
	C.gtk_window_set_mnemonic_modifier((*C.GtkWindow)(_self_._value_), modifier)
	return
}

func (_self_ *GtkWindow) SetMnemonicsVisible(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_mnemonics_visible((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetModal(modal bool) () {
	_cgo_modal_ := (C.gboolean)(C.FALSE)
	if modal { _cgo_modal_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_modal((*C.GtkWindow)(_self_._value_), _cgo_modal_)
	return
}

func (_self_ *GtkWindow) SetOpacity(opacity float64) () {
	_cgo_opacity_ := (C.gdouble)(opacity)
	C.gtk_window_set_opacity((*C.GtkWindow)(_self_._value_), _cgo_opacity_)
	return
}

func (_self_ *GtkWindow) SetPosition(position C.GtkWindowPosition) () {
	C.gtk_window_set_position((*C.GtkWindow)(_self_._value_), position)
	return
}

func (_self_ *GtkWindow) SetResizable(resizable bool) () {
	_cgo_resizable_ := (C.gboolean)(C.FALSE)
	if resizable { _cgo_resizable_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_resizable((*C.GtkWindow)(_self_._value_), _cgo_resizable_)
	return
}

func (_self_ *GtkWindow) SetRole(role string) () {
	_cstring_role_ := C.CString(role)
	_cgo_role_ := (*C.gchar)(unsafe.Pointer(_cstring_role_))
	defer C.free(unsafe.Pointer(_cstring_role_))
	C._gtk_window_set_role((*C.GtkWindow)(_self_._value_), _cgo_role_)
	return
}

func (_self_ *GtkWindow) SetScreen(screen *C.GdkScreen) () {
	C.gtk_window_set_screen((*C.GtkWindow)(_self_._value_), screen)
	return
}

func (_self_ *GtkWindow) SetSkipPagerHint(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_skip_pager_hint((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetSkipTaskbarHint(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_skip_taskbar_hint((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetStartupId(startup_id string) () {
	_cstring_startup_id_ := C.CString(startup_id)
	_cgo_startup_id_ := (*C.gchar)(unsafe.Pointer(_cstring_startup_id_))
	defer C.free(unsafe.Pointer(_cstring_startup_id_))
	C._gtk_window_set_startup_id((*C.GtkWindow)(_self_._value_), _cgo_startup_id_)
	return
}

func (_self_ *GtkWindow) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._gtk_window_set_title((*C.GtkWindow)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *GtkWindow) SetTransientFor(parent GtkWindowKind) () {
	_cgo_parent_ := (*C.GtkWindow)(parent._getValue())
	C.gtk_window_set_transient_for((*C.GtkWindow)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *GtkWindow) SetTypeHint(hint C.GdkWindowTypeHint) () {
	C.gtk_window_set_type_hint((*C.GtkWindow)(_self_._value_), hint)
	return
}

func (_self_ *GtkWindow) SetUrgencyHint(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_window_set_urgency_hint((*C.GtkWindow)(_self_._value_), _cgo_setting_)
	return
}

func (_self_ *GtkWindow) SetWmclass(wmclass_name string, wmclass_class string) () {
	_cstring_wmclass_name_ := C.CString(wmclass_name)
	_cgo_wmclass_name_ := (*C.gchar)(unsafe.Pointer(_cstring_wmclass_name_))
	defer C.free(unsafe.Pointer(_cstring_wmclass_name_))
	_cstring_wmclass_class_ := C.CString(wmclass_class)
	_cgo_wmclass_class_ := (*C.gchar)(unsafe.Pointer(_cstring_wmclass_class_))
	defer C.free(unsafe.Pointer(_cstring_wmclass_class_))
	C._gtk_window_set_wmclass((*C.GtkWindow)(_self_._value_), _cgo_wmclass_name_, _cgo_wmclass_class_)
	return
}

func (_self_ *GtkWindow) Stick() () {
	C.gtk_window_stick((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) Unfullscreen() () {
	C.gtk_window_unfullscreen((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) Unmaximize() () {
	C.gtk_window_unmaximize((*C.GtkWindow)(_self_._value_))
	return
}

func (_self_ *GtkWindow) Unstick() () {
	C.gtk_window_unstick((*C.GtkWindow)(_self_._value_))
	return
}

func WindowGroupNew() (_go__return__ GtkWindowGroup) {
	var _return_ *C.GtkWindowGroup
	_return_ = C.gtk_window_group_new()
	_go__return__ = ToGtkWindowGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindowGroup) AddWindow(window GtkWindowKind) () {
	_cgo_window_ := (*C.GtkWindow)(window._getValue())
	C.gtk_window_group_add_window((*C.GtkWindowGroup)(_self_._value_), _cgo_window_)
	return
}

func (_self_ *GtkWindowGroup) GetCurrentDeviceGrab(device *C.GdkDevice) (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_group_get_current_device_grab((*C.GtkWindowGroup)(_self_._value_), device)
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindowGroup) GetCurrentGrab() (_go__return__ GtkWidget) {
	var _return_ *C.GtkWidget
	_return_ = C.gtk_window_group_get_current_grab((*C.GtkWindowGroup)(_self_._value_))
	_go__return__ = ToGtkWidget(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWindowGroup) ListWindows() (_return_ *C.GList) {
	_return_ = C.gtk_window_group_list_windows((*C.GtkWindowGroup)(_self_._value_))
	return
}

func (_self_ *GtkWindowGroup) RemoveWindow(window GtkWindowKind) () {
	_cgo_window_ := (*C.GtkWindow)(window._getValue())
	C.gtk_window_group_remove_window((*C.GtkWindowGroup)(_self_._value_), _cgo_window_)
	return
}

func (_self_ *GtkBindingSet) Activate(keyval uint, modifiers C.GdkModifierType, object *C.GObject) (_go__return__ bool) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.gboolean
	_return_ = C.gtk_binding_set_activate((*C.GtkBindingSet)(_self_), _cgo_keyval_, modifiers, object)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func BorderNew() (_go__return__ *GtkBorder) {
	var _return_ *C.GtkBorder
	_return_ = C.gtk_border_new()
	_go__return__ = (*GtkBorder)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkBorder) Copy() (_go__return__ *GtkBorder) {
	var _return_ *C.GtkBorder
	_return_ = C._gtk_border_copy((*C.GtkBorder)(_self_))
	_go__return__ = (*GtkBorder)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkBorder) Free() () {
	C.gtk_border_free((*C.GtkBorder)(_self_))
	return
}

func (_self_ *GtkCellAreaClass) FindCellProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_cell_area_class_find_cell_property((*C.GtkCellAreaClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *GtkCellAreaClass) InstallCellProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_property_id_ := (C.guint)(property_id)
	C.gtk_cell_area_class_install_cell_property((*C.GtkCellAreaClass)(_self_), _cgo_property_id_, pspec)
	return
}

func (_self_ *GtkCellAreaClass) ListCellProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_cell_area_class_list_cell_properties((*C.GtkCellAreaClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *GtkContainerClass) FindChildProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_container_class_find_child_property((*C.GtkContainerClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *GtkContainerClass) HandleBorderWidth() () {
	C.gtk_container_class_handle_border_width((*C.GtkContainerClass)(_self_))
	return
}

func (_self_ *GtkContainerClass) InstallChildProperty(property_id uint, pspec *C.GParamSpec) () {
	_cgo_property_id_ := (C.guint)(property_id)
	C.gtk_container_class_install_child_property((*C.GtkContainerClass)(_self_), _cgo_property_id_, pspec)
	return
}

func (_self_ *GtkContainerClass) ListChildProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_container_class_list_child_properties((*C.GtkContainerClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *GtkCssSection) GetEndLine() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_end_line((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkCssSection) GetEndPosition() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_end_position((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkCssSection) GetFile() (_return_ *C.GFile) {
	_return_ = C._gtk_css_section_get_file((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *GtkCssSection) GetParent() (_go__return__ *GtkCssSection) {
	var _return_ *C.GtkCssSection
	_return_ = C._gtk_css_section_get_parent((*C.GtkCssSection)(_self_))
	_go__return__ = (*GtkCssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCssSection) GetSectionType() (_return_ C.GtkCssSectionType) {
	_return_ = C._gtk_css_section_get_section_type((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *GtkCssSection) GetStartLine() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_start_line((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkCssSection) GetStartPosition() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._gtk_css_section_get_start_position((*C.GtkCssSection)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkCssSection) Ref() (_go__return__ *GtkCssSection) {
	var _return_ *C.GtkCssSection
	_return_ = C.gtk_css_section_ref((*C.GtkCssSection)(_self_))
	_go__return__ = (*GtkCssSection)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkCssSection) Unref() () {
	C.gtk_css_section_unref((*C.GtkCssSection)(_self_))
	return
}

func GradientNewLinear(x0 float64, y0 float64, x1 float64, y1 float64) (_go__return__ *GtkGradient) {
	var _return_ *C.GtkGradient
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	_return_ = C.gtk_gradient_new_linear(_cgo_x0_, _cgo_y0_, _cgo_x1_, _cgo_y1_)
	_go__return__ = (*GtkGradient)(unsafe.Pointer(_return_))
	return
}

func GradientNewRadial(x0 float64, y0 float64, radius0 float64, x1 float64, y1 float64, radius1 float64) (_go__return__ *GtkGradient) {
	var _return_ *C.GtkGradient
	_cgo_x0_ := (C.gdouble)(x0)
	_cgo_y0_ := (C.gdouble)(y0)
	_cgo_radius0_ := (C.gdouble)(radius0)
	_cgo_x1_ := (C.gdouble)(x1)
	_cgo_y1_ := (C.gdouble)(y1)
	_cgo_radius1_ := (C.gdouble)(radius1)
	_return_ = C.gtk_gradient_new_radial(_cgo_x0_, _cgo_y0_, _cgo_radius0_, _cgo_x1_, _cgo_y1_, _cgo_radius1_)
	_go__return__ = (*GtkGradient)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkGradient) AddColorStop(offset float64, color *GtkSymbolicColor) () {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	_cgo_offset_ := (C.gdouble)(offset)
	C.gtk_gradient_add_color_stop((*C.GtkGradient)(_self_), _cgo_offset_, _cgo_color_)
	return
}

func (_self_ *GtkGradient) Ref() (_go__return__ *GtkGradient) {
	var _return_ *C.GtkGradient
	_return_ = C.gtk_gradient_ref((*C.GtkGradient)(_self_))
	_go__return__ = (*GtkGradient)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkGradient) Resolve(props GtkStylePropertiesKind) (_go__return__ bool, resolved_gradient unsafe.Pointer) {
	_cgo_props_ := (*C.GtkStyleProperties)(props._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_gradient_resolve((*C.GtkGradient)(_self_), _cgo_props_, resolved_gradient)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkGradient) ResolveForContext(context GtkStyleContextKind) (_return_ *C.cairo_pattern_t) {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_return_ = C.gtk_gradient_resolve_for_context((*C.GtkGradient)(_self_), _cgo_context_)
	return
}

func (_self_ *GtkGradient) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_gradient_to_string((*C.GtkGradient)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkGradient) Unref() () {
	C.gtk_gradient_unref((*C.GtkGradient)(_self_))
	return
}

func IconInfoNewForPixbuf(icon_theme GtkIconThemeKind, pixbuf *C.GdkPixbuf) (_go__return__ *GtkIconInfo) {
	_cgo_icon_theme_ := (*C.GtkIconTheme)(icon_theme._getValue())
	var _return_ *C.GtkIconInfo
	_return_ = C.gtk_icon_info_new_for_pixbuf(_cgo_icon_theme_, pixbuf)
	_go__return__ = (*GtkIconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconInfo) Copy() (_go__return__ *GtkIconInfo) {
	var _return_ *C.GtkIconInfo
	_return_ = C.gtk_icon_info_copy((*C.GtkIconInfo)(_self_))
	_go__return__ = (*GtkIconInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconInfo) Free() () {
	C.gtk_icon_info_free((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *GtkIconInfo) GetBaseSize() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_icon_info_get_base_size((*C.GtkIconInfo)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkIconInfo) GetBuiltinPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_icon_info_get_builtin_pixbuf((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *GtkIconInfo) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_info_get_display_name((*C.GtkIconInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIconInfo) GetEmbeddedRect() (_go__return__ bool, rectangle *C.GdkRectangle) {
	var _return_ C.gboolean
	_return_ = C.gtk_icon_info_get_embedded_rect((*C.GtkIconInfo)(_self_), rectangle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconInfo) GetFilename() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_info_get_filename((*C.GtkIconInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIconInfo) LoadIcon() (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_icon((*C.GtkIconInfo)(_self_), _error_)
	return
}

func (_self_ *GtkIconInfo) LoadSymbolic(fg *C.GdkRGBA, success_color *C.GdkRGBA, warning_color *C.GdkRGBA, error_color *C.GdkRGBA) (_return_ *C.GdkPixbuf, _go_was_symbolic_ bool, _error_ unsafe.Pointer) {
	var was_symbolic C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic((*C.GtkIconInfo)(_self_), fg, success_color, warning_color, error_color, &was_symbolic, _error_)
	_go_was_symbolic_ = was_symbolic == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconInfo) LoadSymbolicForContext(context GtkStyleContextKind) (_return_ *C.GdkPixbuf, _go_was_symbolic_ bool, _error_ unsafe.Pointer) {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	var was_symbolic C.gboolean
	_return_ = C._gtk_icon_info_load_symbolic_for_context((*C.GtkIconInfo)(_self_), _cgo_context_, &was_symbolic, _error_)
	_go_was_symbolic_ = was_symbolic == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconInfo) SetRawCoordinates(raw_coordinates bool) () {
	_cgo_raw_coordinates_ := (C.gboolean)(C.FALSE)
	if raw_coordinates { _cgo_raw_coordinates_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_info_set_raw_coordinates((*C.GtkIconInfo)(_self_), _cgo_raw_coordinates_)
	return
}

func IconSetNew() (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_new()
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func IconSetNewFromPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_new_from_pixbuf(pixbuf)
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconSet) AddSource(source *GtkIconSource) () {
	_cgo_source_ := (*C.GtkIconSource)(unsafe.Pointer(source))
	C._gtk_icon_set_add_source((*C.GtkIconSet)(_self_), _cgo_source_)
	return
}

func (_self_ *GtkIconSet) Copy() (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_copy((*C.GtkIconSet)(_self_))
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconSet) Ref() (_go__return__ *GtkIconSet) {
	var _return_ *C.GtkIconSet
	_return_ = C.gtk_icon_set_ref((*C.GtkIconSet)(_self_))
	_go__return__ = (*GtkIconSet)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconSet) RenderIconPixbuf(context GtkStyleContextKind, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_cgo_context_ := (*C.GtkStyleContext)(context._getValue())
	_return_ = C.gtk_icon_set_render_icon_pixbuf((*C.GtkIconSet)(_self_), _cgo_context_, size)
	return
}

func (_self_ *GtkIconSet) Unref() () {
	C.gtk_icon_set_unref((*C.GtkIconSet)(_self_))
	return
}

func IconSourceNew() (_go__return__ *GtkIconSource) {
	var _return_ *C.GtkIconSource
	_return_ = C.gtk_icon_source_new()
	_go__return__ = (*GtkIconSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconSource) Copy() (_go__return__ *GtkIconSource) {
	var _return_ *C.GtkIconSource
	_return_ = C._gtk_icon_source_copy((*C.GtkIconSource)(_self_))
	_go__return__ = (*GtkIconSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkIconSource) Free() () {
	C.gtk_icon_source_free((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *GtkIconSource) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_icon_source_get_direction((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *GtkIconSource) GetDirectionWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_direction_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconSource) GetFilename() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_source_get_filename((*C.GtkIconSource)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIconSource) GetIconName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_icon_source_get_icon_name((*C.GtkIconSource)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkIconSource) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_icon_source_get_pixbuf((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *GtkIconSource) GetSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_source_get_size((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *GtkIconSource) GetSizeWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_size_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconSource) GetState() (_return_ C.GtkStateType) {
	_return_ = C._gtk_icon_source_get_state((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *GtkIconSource) GetStateWildcarded() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_icon_source_get_state_wildcarded((*C.GtkIconSource)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkIconSource) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_icon_source_set_direction((*C.GtkIconSource)(_self_), direction)
	return
}

func (_self_ *GtkIconSource) SetDirectionWildcarded(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_source_set_direction_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func (_self_ *GtkIconSource) SetFilename(filename string) () {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	C._gtk_icon_source_set_filename((*C.GtkIconSource)(_self_), _cgo_filename_)
	return
}

func (_self_ *GtkIconSource) SetIconName(icon_name string) () {
	_cstring_icon_name_ := C.CString(icon_name)
	_cgo_icon_name_ := (*C.gchar)(unsafe.Pointer(_cstring_icon_name_))
	defer C.free(unsafe.Pointer(_cstring_icon_name_))
	C._gtk_icon_source_set_icon_name((*C.GtkIconSource)(_self_), _cgo_icon_name_)
	return
}

func (_self_ *GtkIconSource) SetPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_icon_source_set_pixbuf((*C.GtkIconSource)(_self_), pixbuf)
	return
}

func (_self_ *GtkIconSource) SetSize(size C.GtkIconSize) () {
	C.gtk_icon_source_set_size((*C.GtkIconSource)(_self_), size)
	return
}

func (_self_ *GtkIconSource) SetSizeWildcarded(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_source_set_size_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func (_self_ *GtkIconSource) SetState(state C.GtkStateType) () {
	C.gtk_icon_source_set_state((*C.GtkIconSource)(_self_), state)
	return
}

func (_self_ *GtkIconSource) SetStateWildcarded(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.gtk_icon_source_set_state_wildcarded((*C.GtkIconSource)(_self_), _cgo_setting_)
	return
}

func PaperSizeNew(name string) (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_paper_size_new(_cgo_name_)
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewCustom(name string, display_name string, width float64, height float64, unit C.GtkUnit) (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_display_name_ := C.CString(display_name)
	_cgo_display_name_ := (*C.gchar)(unsafe.Pointer(_cstring_display_name_))
	defer C.free(unsafe.Pointer(_cstring_display_name_))
	_return_ = C._gtk_paper_size_new_custom(_cgo_name_, _cgo_display_name_, _cgo_width_, _cgo_height_, unit)
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewFromKeyFile(key_file *C.GKeyFile, group_name string) (_go__return__ *GtkPaperSize, _error_ unsafe.Pointer) {
	var _return_ *C.GtkPaperSize
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	_return_ = C._gtk_paper_size_new_from_key_file(key_file, _cgo_group_name_, _error_)
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func PaperSizeNewFromPpd(ppd_name string, ppd_display_name string, width float64, height float64) (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	_cstring_ppd_name_ := C.CString(ppd_name)
	_cgo_ppd_name_ := (*C.gchar)(unsafe.Pointer(_cstring_ppd_name_))
	defer C.free(unsafe.Pointer(_cstring_ppd_name_))
	_cstring_ppd_display_name_ := C.CString(ppd_display_name)
	_cgo_ppd_display_name_ := (*C.gchar)(unsafe.Pointer(_cstring_ppd_display_name_))
	defer C.free(unsafe.Pointer(_cstring_ppd_display_name_))
	_return_ = C._gtk_paper_size_new_from_ppd(_cgo_ppd_name_, _cgo_ppd_display_name_, _cgo_width_, _cgo_height_)
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPaperSize) Copy() (_go__return__ *GtkPaperSize) {
	var _return_ *C.GtkPaperSize
	_return_ = C.gtk_paper_size_copy((*C.GtkPaperSize)(_self_))
	_go__return__ = (*GtkPaperSize)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkPaperSize) Free() () {
	C.gtk_paper_size_free((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *GtkPaperSize) GetDefaultBottomMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_bottom_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) GetDefaultLeftMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_left_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) GetDefaultRightMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_right_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) GetDefaultTopMargin(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_default_top_margin((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_display_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPaperSize) GetHeight(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_height((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPaperSize) GetPpdName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_paper_size_get_ppd_name((*C.GtkPaperSize)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkPaperSize) GetWidth(unit C.GtkUnit) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.gtk_paper_size_get_width((*C.GtkPaperSize)(_self_), unit)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GtkPaperSize) IsCustom() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_paper_size_is_custom((*C.GtkPaperSize)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPaperSize) IsEqual(size2 *GtkPaperSize) (_go__return__ bool) {
	_cgo_size2_ := (*C.GtkPaperSize)(unsafe.Pointer(size2))
	var _return_ C.gboolean
	_return_ = C.gtk_paper_size_is_equal((*C.GtkPaperSize)(_self_), _cgo_size2_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkPaperSize) SetSize(width float64, height float64, unit C.GtkUnit) () {
	_cgo_width_ := (C.gdouble)(width)
	_cgo_height_ := (C.gdouble)(height)
	C.gtk_paper_size_set_size((*C.GtkPaperSize)(_self_), _cgo_width_, _cgo_height_, unit)
	return
}

func (_self_ *GtkPaperSize) ToKeyFile(key_file *C.GKeyFile, group_name string) () {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	C._gtk_paper_size_to_key_file((*C.GtkPaperSize)(_self_), key_file, _cgo_group_name_)
	return
}

func (_self_ *GtkRecentInfo) CreateAppInfo(app_name string) (_return_ *C.GAppInfo, _error_ unsafe.Pointer) {
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	_return_ = C._gtk_recent_info_create_app_info((*C.GtkRecentInfo)(_self_), _cgo_app_name_, _error_)
	return
}

func (_self_ *GtkRecentInfo) Exists() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_exists((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) GetAdded() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_added((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *GtkRecentInfo) GetAge() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_recent_info_get_age((*C.GtkRecentInfo)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkRecentInfo) GetApplicationInfo(app_name string) (_go__return__ bool, app_exec unsafe.Pointer, _go_count_ uint, time_ C.time_t) {
	var count C.guint
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_get_application_info((*C.GtkRecentInfo)(_self_), _cgo_app_name_, app_exec, &count, &time_)
	_go_count_ = (uint)(count)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) GetApplications() (_return_ unsafe.Pointer, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._gtk_recent_info_get_applications((*C.GtkRecentInfo)(_self_), &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *GtkRecentInfo) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_description((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetDisplayName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_display_name((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_recent_info_get_gicon((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *GtkRecentInfo) GetGroups() (_return_ unsafe.Pointer, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._gtk_recent_info_get_groups((*C.GtkRecentInfo)(_self_), &length)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *GtkRecentInfo) GetIcon(size int) (_return_ *C.GdkPixbuf) {
	_cgo_size_ := (C.gint)(size)
	_return_ = C.gtk_recent_info_get_icon((*C.GtkRecentInfo)(_self_), _cgo_size_)
	return
}

func (_self_ *GtkRecentInfo) GetMimeType() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_mime_type((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetModified() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_modified((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *GtkRecentInfo) GetPrivateHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_get_private_hint((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) GetShortName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_get_short_name((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._gtk_recent_info_get_uri((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetUriDisplay() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_get_uri_display((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) GetVisited() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_visited((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *GtkRecentInfo) HasApplication(app_name string) (_go__return__ bool) {
	_cstring_app_name_ := C.CString(app_name)
	_cgo_app_name_ := (*C.gchar)(unsafe.Pointer(_cstring_app_name_))
	defer C.free(unsafe.Pointer(_cstring_app_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_has_application((*C.GtkRecentInfo)(_self_), _cgo_app_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) HasGroup(group_name string) (_go__return__ bool) {
	_cstring_group_name_ := C.CString(group_name)
	_cgo_group_name_ := (*C.gchar)(unsafe.Pointer(_cstring_group_name_))
	defer C.free(unsafe.Pointer(_cstring_group_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_recent_info_has_group((*C.GtkRecentInfo)(_self_), _cgo_group_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) IsLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_is_local((*C.GtkRecentInfo)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) LastApplication() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_recent_info_last_application((*C.GtkRecentInfo)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkRecentInfo) Match(info_b *GtkRecentInfo) (_go__return__ bool) {
	_cgo_info_b_ := (*C.GtkRecentInfo)(unsafe.Pointer(info_b))
	var _return_ C.gboolean
	_return_ = C.gtk_recent_info_match((*C.GtkRecentInfo)(_self_), _cgo_info_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkRecentInfo) Ref() (_go__return__ *GtkRecentInfo) {
	var _return_ *C.GtkRecentInfo
	_return_ = C.gtk_recent_info_ref((*C.GtkRecentInfo)(_self_))
	_go__return__ = (*GtkRecentInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRecentInfo) Unref() () {
	C.gtk_recent_info_unref((*C.GtkRecentInfo)(_self_))
	return
}

func RequisitionNew() (_go__return__ *GtkRequisition) {
	var _return_ *C.GtkRequisition
	_return_ = C.gtk_requisition_new()
	_go__return__ = (*GtkRequisition)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRequisition) Copy() (_go__return__ *GtkRequisition) {
	var _return_ *C.GtkRequisition
	_return_ = C._gtk_requisition_copy((*C.GtkRequisition)(_self_))
	_go__return__ = (*GtkRequisition)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkRequisition) Free() () {
	C.gtk_requisition_free((*C.GtkRequisition)(_self_))
	return
}

func (_self_ *GtkSelectionData) Copy() (_go__return__ *GtkSelectionData) {
	var _return_ *C.GtkSelectionData
	_return_ = C._gtk_selection_data_copy((*C.GtkSelectionData)(_self_))
	_go__return__ = (*GtkSelectionData)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSelectionData) Free() () {
	C.gtk_selection_data_free((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetData() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_data((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetDataType() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_data_type((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetDataWithLength() (_return_ *C.guchar, _go_length_ int) {
	var length C.gint
	_return_ = C._gtk_selection_data_get_data_with_length((*C.GtkSelectionData)(_self_), &length)
	_go_length_ = (int)(length)
	return
}

func (_self_ *GtkSelectionData) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_selection_data_get_display((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetFormat() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_selection_data_get_format((*C.GtkSelectionData)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkSelectionData) GetLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_selection_data_get_length((*C.GtkSelectionData)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkSelectionData) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_selection_data_get_pixbuf((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetSelection() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_selection((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetTarget() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_target((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) GetText() (_go__return__ string) {
	var _return_ *C.guchar
	_return_ = C._gtk_selection_data_get_text((*C.GtkSelectionData)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkSelectionData) GetUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_selection_data_get_uris((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *GtkSelectionData) SetPixbuf(pixbuf *C.GdkPixbuf) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_selection_data_set_pixbuf((*C.GtkSelectionData)(_self_), pixbuf)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSelectionData) SetText(str string, len_ int) (_go__return__ bool) {
	_cgo_len__ := (C.gint)(len_)
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_set_text((*C.GtkSelectionData)(_self_), _cgo_str_, _cgo_len__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSelectionData) TargetsIncludeImage(writable bool) (_go__return__ bool) {
	_cgo_writable_ := (C.gboolean)(C.FALSE)
	if writable { _cgo_writable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_image((*C.GtkSelectionData)(_self_), _cgo_writable_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSelectionData) TargetsIncludeRichText(buffer GtkTextBufferKind) (_go__return__ bool) {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_rich_text((*C.GtkSelectionData)(_self_), _cgo_buffer_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSelectionData) TargetsIncludeText() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_text((*C.GtkSelectionData)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSelectionData) TargetsIncludeUri() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_selection_data_targets_include_uri((*C.GtkSelectionData)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkStockItem) Copy() (_go__return__ *GtkStockItem) {
	var _return_ *C.GtkStockItem
	_return_ = C._gtk_stock_item_copy((*C.GtkStockItem)(_self_))
	_go__return__ = (*GtkStockItem)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkStockItem) Free() () {
	C.gtk_stock_item_free((*C.GtkStockItem)(_self_))
	return
}

func SymbolicColorNewAlpha(color *GtkSymbolicColor, factor float64) (_go__return__ *GtkSymbolicColor) {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_alpha(_cgo_color_, _cgo_factor_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewLiteral(color *C.GdkRGBA) (_go__return__ *GtkSymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_return_ = C._gtk_symbolic_color_new_literal(color)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewMix(color1 *GtkSymbolicColor, color2 *GtkSymbolicColor, factor float64) (_go__return__ *GtkSymbolicColor) {
	_cgo_color1_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color1))
	_cgo_color2_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color2))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_mix(_cgo_color1_, _cgo_color2_, _cgo_factor_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewName(name string) (_go__return__ *GtkSymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._gtk_symbolic_color_new_name(_cgo_name_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewShade(color *GtkSymbolicColor, factor float64) (_go__return__ *GtkSymbolicColor) {
	_cgo_color_ := (*C.GtkSymbolicColor)(unsafe.Pointer(color))
	var _return_ *C.GtkSymbolicColor
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.gtk_symbolic_color_new_shade(_cgo_color_, _cgo_factor_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func SymbolicColorNewWin32(theme_class string, id int) (_go__return__ *GtkSymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_cgo_id_ := (C.gint)(id)
	_cstring_theme_class_ := C.CString(theme_class)
	_cgo_theme_class_ := (*C.gchar)(unsafe.Pointer(_cstring_theme_class_))
	defer C.free(unsafe.Pointer(_cstring_theme_class_))
	_return_ = C._gtk_symbolic_color_new_win32(_cgo_theme_class_, _cgo_id_)
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSymbolicColor) Ref() (_go__return__ *GtkSymbolicColor) {
	var _return_ *C.GtkSymbolicColor
	_return_ = C.gtk_symbolic_color_ref((*C.GtkSymbolicColor)(_self_))
	_go__return__ = (*GtkSymbolicColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkSymbolicColor) Resolve(props GtkStylePropertiesKind) (_go__return__ bool, resolved_color *C.GdkRGBA) {
	_cgo_props_ := (*C.GtkStyleProperties)(props._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_symbolic_color_resolve((*C.GtkSymbolicColor)(_self_), _cgo_props_, resolved_color)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkSymbolicColor) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.gtk_symbolic_color_to_string((*C.GtkSymbolicColor)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkSymbolicColor) Unref() () {
	C.gtk_symbolic_color_unref((*C.GtkSymbolicColor)(_self_))
	return
}

func TargetEntryNew(target string, flags uint, info uint) (_go__return__ *GtkTargetEntry) {
	var _return_ *C.GtkTargetEntry
	_cgo_flags_ := (C.guint)(flags)
	_cgo_info_ := (C.guint)(info)
	_cstring_target_ := C.CString(target)
	_cgo_target_ := (*C.gchar)(unsafe.Pointer(_cstring_target_))
	defer C.free(unsafe.Pointer(_cstring_target_))
	_return_ = C._gtk_target_entry_new(_cgo_target_, _cgo_flags_, _cgo_info_)
	_go__return__ = (*GtkTargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTargetEntry) Copy() (_go__return__ *GtkTargetEntry) {
	var _return_ *C.GtkTargetEntry
	_return_ = C.gtk_target_entry_copy((*C.GtkTargetEntry)(_self_))
	_go__return__ = (*GtkTargetEntry)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTargetEntry) Free() () {
	C.gtk_target_entry_free((*C.GtkTargetEntry)(_self_))
	return
}

func (_self_ *GtkTargetList) Add(target C.GdkAtom, flags uint, info uint) () {
	_cgo_flags_ := (C.guint)(flags)
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add((*C.GtkTargetList)(_self_), target, _cgo_flags_, _cgo_info_)
	return
}

func (_self_ *GtkTargetList) AddImageTargets(info uint, writable bool) () {
	_cgo_info_ := (C.guint)(info)
	_cgo_writable_ := (C.gboolean)(C.FALSE)
	if writable { _cgo_writable_ = (C.gboolean)(C.TRUE) }
	C.gtk_target_list_add_image_targets((*C.GtkTargetList)(_self_), _cgo_info_, _cgo_writable_)
	return
}

func (_self_ *GtkTargetList) AddRichTextTargets(info uint, deserializable bool, buffer GtkTextBufferKind) () {
	_cgo_buffer_ := (*C.GtkTextBuffer)(buffer._getValue())
	_cgo_info_ := (C.guint)(info)
	_cgo_deserializable_ := (C.gboolean)(C.FALSE)
	if deserializable { _cgo_deserializable_ = (C.gboolean)(C.TRUE) }
	C.gtk_target_list_add_rich_text_targets((*C.GtkTargetList)(_self_), _cgo_info_, _cgo_deserializable_, _cgo_buffer_)
	return
}

func (_self_ *GtkTargetList) AddTextTargets(info uint) () {
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add_text_targets((*C.GtkTargetList)(_self_), _cgo_info_)
	return
}

func (_self_ *GtkTargetList) AddUriTargets(info uint) () {
	_cgo_info_ := (C.guint)(info)
	C.gtk_target_list_add_uri_targets((*C.GtkTargetList)(_self_), _cgo_info_)
	return
}

func (_self_ *GtkTargetList) Find(target C.GdkAtom, info *C.guint) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_target_list_find((*C.GtkTargetList)(_self_), target, info)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTargetList) Ref() (_go__return__ *GtkTargetList) {
	var _return_ *C.GtkTargetList
	_return_ = C.gtk_target_list_ref((*C.GtkTargetList)(_self_))
	_go__return__ = (*GtkTargetList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTargetList) Remove(target C.GdkAtom) () {
	C.gtk_target_list_remove((*C.GtkTargetList)(_self_), target)
	return
}

func (_self_ *GtkTargetList) Unref() () {
	C.gtk_target_list_unref((*C.GtkTargetList)(_self_))
	return
}

func TextAttributesNew() (_go__return__ *GtkTextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_new()
	_go__return__ = (*GtkTextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextAttributes) Copy() (_go__return__ *GtkTextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_copy((*C.GtkTextAttributes)(_self_))
	_go__return__ = (*GtkTextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextAttributes) CopyValues(dest *GtkTextAttributes) () {
	_cgo_dest_ := (*C.GtkTextAttributes)(unsafe.Pointer(dest))
	C.gtk_text_attributes_copy_values((*C.GtkTextAttributes)(_self_), _cgo_dest_)
	return
}

func (_self_ *GtkTextAttributes) Ref() (_go__return__ *GtkTextAttributes) {
	var _return_ *C.GtkTextAttributes
	_return_ = C.gtk_text_attributes_ref((*C.GtkTextAttributes)(_self_))
	_go__return__ = (*GtkTextAttributes)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextAttributes) Unref() () {
	C.gtk_text_attributes_unref((*C.GtkTextAttributes)(_self_))
	return
}

func (_self_ *GtkTextIter) Assign(other *GtkTextIter) () {
	_cgo_other_ := (*C.GtkTextIter)(unsafe.Pointer(other))
	C._gtk_text_iter_assign((*C.GtkTextIter)(_self_), _cgo_other_)
	return
}

func (_self_ *GtkTextIter) BackwardChar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_char((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardChars(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_chars((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *GtkTextIter) (_go__return__ bool) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_backward_find_char((*C.GtkTextIter)(_self_), pred, user_data, _cgo_limit_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardSearch(str string, flags C.GtkTextSearchFlags, limit *GtkTextIter) (_go__return__ bool, match_start *GtkTextIter, match_end *GtkTextIter) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_backward_search((*C.GtkTextIter)(_self_), _cgo_str_, flags, &_allocated_match_start_, &_allocated_match_end_, _cgo_limit_)
	match_start = (*GtkTextIter)(unsafe.Pointer(&_allocated_match_start_))
	match_end = (*GtkTextIter)(unsafe.Pointer(&_allocated_match_end_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardSentenceStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_sentence_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardSentenceStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_sentence_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardToTagToggle(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_to_tag_toggle((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleWordStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_word_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardVisibleWordStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_visible_word_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardWordStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_word_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BackwardWordStarts(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_backward_word_starts((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) BeginsTag(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_begins_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) CanInsert(default_editability bool) (_go__return__ bool) {
	_cgo_default_editability_ := (C.gboolean)(C.FALSE)
	if default_editability { _cgo_default_editability_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_can_insert((*C.GtkTextIter)(_self_), _cgo_default_editability_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) Compare(rhs *GtkTextIter) (_go__return__ int) {
	_cgo_rhs_ := (*C.GtkTextIter)(unsafe.Pointer(rhs))
	var _return_ C.gint
	_return_ = C._gtk_text_iter_compare((*C.GtkTextIter)(_self_), _cgo_rhs_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) Copy() (_go__return__ *GtkTextIter) {
	var _return_ *C.GtkTextIter
	_return_ = C._gtk_text_iter_copy((*C.GtkTextIter)(_self_))
	_go__return__ = (*GtkTextIter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextIter) Editable(default_setting bool) (_go__return__ bool) {
	_cgo_default_setting_ := (C.gboolean)(C.FALSE)
	if default_setting { _cgo_default_setting_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_editable((*C.GtkTextIter)(_self_), _cgo_default_setting_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) EndsLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) EndsSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) EndsTag(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) EndsWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_ends_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) Equal(rhs *GtkTextIter) (_go__return__ bool) {
	_cgo_rhs_ := (*C.GtkTextIter)(unsafe.Pointer(rhs))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_equal((*C.GtkTextIter)(_self_), _cgo_rhs_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardChar() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_char((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardChars(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_chars((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *GtkTextIter) (_go__return__ bool) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_forward_find_char((*C.GtkTextIter)(_self_), pred, user_data, _cgo_limit_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardSearch(str string, flags C.GtkTextSearchFlags, limit *GtkTextIter) (_go__return__ bool, match_start *GtkTextIter, match_end *GtkTextIter) {
	_cgo_limit_ := (*C.GtkTextIter)(unsafe.Pointer(limit))
	var _allocated_match_start_ C.GtkTextIter
	var _allocated_match_end_ C.GtkTextIter
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_forward_search((*C.GtkTextIter)(_self_), _cgo_str_, flags, &_allocated_match_start_, &_allocated_match_end_, _cgo_limit_)
	match_start = (*GtkTextIter)(unsafe.Pointer(&_allocated_match_start_))
	match_end = (*GtkTextIter)(unsafe.Pointer(&_allocated_match_end_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardSentenceEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_sentence_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardSentenceEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_sentence_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardToEnd() () {
	C.gtk_text_iter_forward_to_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) ForwardToLineEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_to_line_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardToTagToggle(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_to_tag_toggle((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleCursorPositions(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_cursor_positions((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleLines(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_lines((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleWordEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_word_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardVisibleWordEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_visible_word_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardWordEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_word_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) ForwardWordEnds(count int) (_go__return__ bool) {
	_cgo_count_ := (C.gint)(count)
	var _return_ C.gboolean
	_return_ = C.gtk_text_iter_forward_word_ends((*C.GtkTextIter)(_self_), _cgo_count_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) Free() () {
	C.gtk_text_iter_free((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetAttributes() (_go__return__ bool, values *GtkTextAttributes) {
	var _allocated_values_ C.GtkTextAttributes
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_get_attributes((*C.GtkTextIter)(_self_), &_allocated_values_)
	values = (*GtkTextAttributes)(unsafe.Pointer(&_allocated_values_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) GetBuffer() (_go__return__ GtkTextBuffer) {
	var _return_ *C.GtkTextBuffer
	_return_ = C._gtk_text_iter_get_buffer((*C.GtkTextIter)(_self_))
	_go__return__ = ToGtkTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextIter) GetBytesInLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_bytes_in_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetChar() (_return_ C.gunichar) {
	_return_ = C._gtk_text_iter_get_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetCharsInLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_chars_in_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetChildAnchor() (_go__return__ GtkTextChildAnchor) {
	var _return_ *C.GtkTextChildAnchor
	_return_ = C._gtk_text_iter_get_child_anchor((*C.GtkTextIter)(_self_))
	_go__return__ = ToGtkTextChildAnchor(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTextIter) GetLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C._gtk_text_iter_get_language((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetLine() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetLineIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line_index((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetLineOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_line_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetMarks() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_marks((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_text_iter_get_pixbuf((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetSlice(end *GtkTextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_slice((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextIter) GetTags() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_tags((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *GtkTextIter) GetText(end *GtkTextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_text((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextIter) GetToggledTags(toggled_on bool) (_return_ *C.GSList) {
	_cgo_toggled_on_ := (C.gboolean)(C.FALSE)
	if toggled_on { _cgo_toggled_on_ = (C.gboolean)(C.TRUE) }
	_return_ = C._gtk_text_iter_get_toggled_tags((*C.GtkTextIter)(_self_), _cgo_toggled_on_)
	return
}

func (_self_ *GtkTextIter) GetVisibleLineIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_visible_line_index((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetVisibleLineOffset() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_text_iter_get_visible_line_offset((*C.GtkTextIter)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTextIter) GetVisibleSlice(end *GtkTextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_visible_slice((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextIter) GetVisibleText(end *GtkTextIter) (_go__return__ string) {
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ *C.gchar
	_return_ = C._gtk_text_iter_get_visible_text((*C.GtkTextIter)(_self_), _cgo_end_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTextIter) HasTag(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_has_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) InRange(start *GtkTextIter, end *GtkTextIter) (_go__return__ bool) {
	_cgo_start_ := (*C.GtkTextIter)(unsafe.Pointer(start))
	_cgo_end_ := (*C.GtkTextIter)(unsafe.Pointer(end))
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_in_range((*C.GtkTextIter)(_self_), _cgo_start_, _cgo_end_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) InsideSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_inside_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) InsideWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_inside_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) IsCursorPosition() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_cursor_position((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) IsEnd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_end((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) IsStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_is_start((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) Order(second *GtkTextIter) () {
	_cgo_second_ := (*C.GtkTextIter)(unsafe.Pointer(second))
	C.gtk_text_iter_order((*C.GtkTextIter)(_self_), _cgo_second_)
	return
}

func (_self_ *GtkTextIter) SetLine(line_number int) () {
	_cgo_line_number_ := (C.gint)(line_number)
	C.gtk_text_iter_set_line((*C.GtkTextIter)(_self_), _cgo_line_number_)
	return
}

func (_self_ *GtkTextIter) SetLineIndex(byte_on_line int) () {
	_cgo_byte_on_line_ := (C.gint)(byte_on_line)
	C.gtk_text_iter_set_line_index((*C.GtkTextIter)(_self_), _cgo_byte_on_line_)
	return
}

func (_self_ *GtkTextIter) SetLineOffset(char_on_line int) () {
	_cgo_char_on_line_ := (C.gint)(char_on_line)
	C.gtk_text_iter_set_line_offset((*C.GtkTextIter)(_self_), _cgo_char_on_line_)
	return
}

func (_self_ *GtkTextIter) SetOffset(char_offset int) () {
	_cgo_char_offset_ := (C.gint)(char_offset)
	C.gtk_text_iter_set_offset((*C.GtkTextIter)(_self_), _cgo_char_offset_)
	return
}

func (_self_ *GtkTextIter) SetVisibleLineIndex(byte_on_line int) () {
	_cgo_byte_on_line_ := (C.gint)(byte_on_line)
	C.gtk_text_iter_set_visible_line_index((*C.GtkTextIter)(_self_), _cgo_byte_on_line_)
	return
}

func (_self_ *GtkTextIter) SetVisibleLineOffset(char_on_line int) () {
	_cgo_char_on_line_ := (C.gint)(char_on_line)
	C.gtk_text_iter_set_visible_line_offset((*C.GtkTextIter)(_self_), _cgo_char_on_line_)
	return
}

func (_self_ *GtkTextIter) StartsLine() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_line((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) StartsSentence() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_sentence((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) StartsWord() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_starts_word((*C.GtkTextIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTextIter) TogglesTag(tag GtkTextTagKind) (_go__return__ bool) {
	_cgo_tag_ := (*C.GtkTextTag)(tag._getValue())
	var _return_ C.gboolean
	_return_ = C._gtk_text_iter_toggles_tag((*C.GtkTextIter)(_self_), _cgo_tag_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreeIter) Copy() (_go__return__ *GtkTreeIter) {
	var _return_ *C.GtkTreeIter
	_return_ = C.gtk_tree_iter_copy((*C.GtkTreeIter)(_self_))
	_go__return__ = (*GtkTreeIter)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeIter) Free() () {
	C.gtk_tree_iter_free((*C.GtkTreeIter)(_self_))
	return
}

func TreePathNew() (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_path_new()
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func TreePathNewFirst() (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_path_new_first()
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func TreePathNewFromString(path string) (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._gtk_tree_path_new_from_string(_cgo_path_)
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreePath) AppendIndex(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_tree_path_append_index((*C.GtkTreePath)(_self_), _cgo_index__)
	return
}

func (_self_ *GtkTreePath) Compare(b *GtkTreePath) (_go__return__ int) {
	_cgo_b_ := (*C.GtkTreePath)(unsafe.Pointer(b))
	var _return_ C.gint
	_return_ = C._gtk_tree_path_compare((*C.GtkTreePath)(_self_), _cgo_b_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreePath) Copy() (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C._gtk_tree_path_copy((*C.GtkTreePath)(_self_))
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreePath) Down() () {
	C.gtk_tree_path_down((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *GtkTreePath) Free() () {
	C.gtk_tree_path_free((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *GtkTreePath) GetDepth() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_tree_path_get_depth((*C.GtkTreePath)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkTreePath) GetIndices() (_return_ *C.gint) {
	_return_ = C.gtk_tree_path_get_indices((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *GtkTreePath) GetIndicesWithDepth() (_return_ *C.gint, _go_depth_ int) {
	var depth C.gint
	_return_ = C.gtk_tree_path_get_indices_with_depth((*C.GtkTreePath)(_self_), &depth)
	_go_depth_ = (int)(depth)
	return
}

func (_self_ *GtkTreePath) IsAncestor(descendant *GtkTreePath) (_go__return__ bool) {
	_cgo_descendant_ := (*C.GtkTreePath)(unsafe.Pointer(descendant))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_is_ancestor((*C.GtkTreePath)(_self_), _cgo_descendant_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreePath) IsDescendant(ancestor *GtkTreePath) (_go__return__ bool) {
	_cgo_ancestor_ := (*C.GtkTreePath)(unsafe.Pointer(ancestor))
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_is_descendant((*C.GtkTreePath)(_self_), _cgo_ancestor_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreePath) Next() () {
	C.gtk_tree_path_next((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *GtkTreePath) PrependIndex(index_ int) () {
	_cgo_index__ := (C.gint)(index_)
	C.gtk_tree_path_prepend_index((*C.GtkTreePath)(_self_), _cgo_index__)
	return
}

func (_self_ *GtkTreePath) Prev() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_prev((*C.GtkTreePath)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkTreePath) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.gtk_tree_path_to_string((*C.GtkTreePath)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkTreePath) Up() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_path_up((*C.GtkTreePath)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TreeRowReferenceNew(model *C.GtkTreeModel, path *GtkTreePath) (_go__return__ *GtkTreeRowReference) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_new(model, _cgo_path_)
	_go__return__ = (*GtkTreeRowReference)(unsafe.Pointer(_return_))
	return
}

func TreeRowReferenceNewProxy(proxy *C.GObject, model *C.GtkTreeModel, path *GtkTreePath) (_go__return__ *GtkTreeRowReference) {
	_cgo_path_ := (*C.GtkTreePath)(unsafe.Pointer(path))
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_new_proxy(proxy, model, _cgo_path_)
	_go__return__ = (*GtkTreeRowReference)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeRowReference) Copy() (_go__return__ *GtkTreeRowReference) {
	var _return_ *C.GtkTreeRowReference
	_return_ = C.gtk_tree_row_reference_copy((*C.GtkTreeRowReference)(_self_))
	_go__return__ = (*GtkTreeRowReference)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeRowReference) Free() () {
	C.gtk_tree_row_reference_free((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *GtkTreeRowReference) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_row_reference_get_model((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *GtkTreeRowReference) GetPath() (_go__return__ *GtkTreePath) {
	var _return_ *C.GtkTreePath
	_return_ = C.gtk_tree_row_reference_get_path((*C.GtkTreeRowReference)(_self_))
	_go__return__ = (*GtkTreePath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkTreeRowReference) Valid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.gtk_tree_row_reference_valid((*C.GtkTreeRowReference)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetClass) FindStyleProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._gtk_widget_class_find_style_property((*C.GtkWidgetClass)(_self_), _cgo_property_name_)
	return
}

func (_self_ *GtkWidgetClass) InstallStyleProperty(pspec *C.GParamSpec) () {
	C.gtk_widget_class_install_style_property((*C.GtkWidgetClass)(_self_), pspec)
	return
}

func (_self_ *GtkWidgetClass) InstallStylePropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_widget_class_install_style_property_parser((*C.GtkWidgetClass)(_self_), pspec, parser)
	return
}

func (_self_ *GtkWidgetClass) ListStyleProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._gtk_widget_class_list_style_properties((*C.GtkWidgetClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *GtkWidgetClass) SetAccessibleRole(role C.AtkRole) () {
	C.gtk_widget_class_set_accessible_role((*C.GtkWidgetClass)(_self_), role)
	return
}

func (_self_ *GtkWidgetClass) SetAccessibleType(type_ C.GType) () {
	C.gtk_widget_class_set_accessible_type((*C.GtkWidgetClass)(_self_), type_)
	return
}

func WidgetPathNew() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_path_new()
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidgetPath) AppendForWidget(widget GtkWidgetKind) (_go__return__ int) {
	_cgo_widget_ := (*C.GtkWidget)(widget._getValue())
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_for_widget((*C.GtkWidgetPath)(_self_), _cgo_widget_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidgetPath) AppendType(type_ C.GType) (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_type((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidgetPath) AppendWithSiblings(siblings *GtkWidgetPath, sibling_index uint) (_go__return__ int) {
	_cgo_siblings_ := (*C.GtkWidgetPath)(unsafe.Pointer(siblings))
	_cgo_sibling_index_ := (C.guint)(sibling_index)
	var _return_ C.gint
	_return_ = C.gtk_widget_path_append_with_siblings((*C.GtkWidgetPath)(_self_), _cgo_siblings_, _cgo_sibling_index_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidgetPath) Copy() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C._gtk_widget_path_copy((*C.GtkWidgetPath)(_self_))
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidgetPath) Free() () {
	C.gtk_widget_path_free((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *GtkWidgetPath) GetObjectType() (_return_ C.GType) {
	_return_ = C._gtk_widget_path_get_object_type((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *GtkWidgetPath) HasParent(type_ C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_has_parent((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IsType(type_ C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_is_type((*C.GtkWidgetPath)(_self_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterAddClass(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_add_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *GtkWidgetPath) IterAddRegion(pos int, name string, flags C.GtkRegionFlags) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_add_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_, flags)
	return
}

func (_self_ *GtkWidgetPath) IterClearClasses(pos int) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_clear_classes((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *GtkWidgetPath) IterClearRegions(pos int) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_clear_regions((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *GtkWidgetPath) IterGetName(pos int) (_go__return__ string) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ *C.gchar
	_return_ = C._gtk_widget_path_iter_get_name((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidgetPath) IterGetObjectType(pos int) (_return_ C.GType) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_get_object_type((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *GtkWidgetPath) IterGetSiblingIndex(pos int) (_go__return__ uint) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.guint
	_return_ = C._gtk_widget_path_iter_get_sibling_index((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GtkWidgetPath) IterGetSiblings(pos int) (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_get_siblings((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidgetPath) IterHasClass(pos int, name string) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterHasName(pos int, name string) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_name((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterHasQclass(pos int, qname C.GQuark) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qclass((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterHasQname(pos int, qname C.GQuark) (_go__return__ bool) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qname((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterHasQregion(pos int, qname C.GQuark) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cgo_pos_ := (C.gint)(pos)
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_qregion((*C.GtkWidgetPath)(_self_), _cgo_pos_, qname, flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterHasRegion(pos int, name string) (_go__return__ bool, flags *C.GtkRegionFlags) {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._gtk_widget_path_iter_has_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_, flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GtkWidgetPath) IterListClasses(pos int) (_return_ *C.GSList) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_classes((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *GtkWidgetPath) IterListRegions(pos int) (_return_ *C.GSList) {
	_cgo_pos_ := (C.gint)(pos)
	_return_ = C._gtk_widget_path_iter_list_regions((*C.GtkWidgetPath)(_self_), _cgo_pos_)
	return
}

func (_self_ *GtkWidgetPath) IterRemoveClass(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_remove_class((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *GtkWidgetPath) IterRemoveRegion(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_remove_region((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *GtkWidgetPath) IterSetName(pos int, name string) () {
	_cgo_pos_ := (C.gint)(pos)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._gtk_widget_path_iter_set_name((*C.GtkWidgetPath)(_self_), _cgo_pos_, _cgo_name_)
	return
}

func (_self_ *GtkWidgetPath) IterSetObjectType(pos int, type_ C.GType) () {
	_cgo_pos_ := (C.gint)(pos)
	C.gtk_widget_path_iter_set_object_type((*C.GtkWidgetPath)(_self_), _cgo_pos_, type_)
	return
}

func (_self_ *GtkWidgetPath) Length() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._gtk_widget_path_length((*C.GtkWidgetPath)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GtkWidgetPath) PrependType(type_ C.GType) () {
	C.gtk_widget_path_prepend_type((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *GtkWidgetPath) Ref() (_go__return__ *GtkWidgetPath) {
	var _return_ *C.GtkWidgetPath
	_return_ = C.gtk_widget_path_ref((*C.GtkWidgetPath)(_self_))
	_go__return__ = (*GtkWidgetPath)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GtkWidgetPath) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._gtk_widget_path_to_string((*C.GtkWidgetPath)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GtkWidgetPath) Unref() () {
	C.gtk_widget_path_unref((*C.GtkWidgetPath)(_self_))
	return
}

const STYLE_CLASS_CALENDAR = C.GTK_STYLE_CLASS_CALENDAR
const FILE_CHOOSER_ACTION_OPEN = C.GTK_FILE_CHOOSER_ACTION_OPEN
const PRINT_ERROR_INVALID_FILE = C.GTK_PRINT_ERROR_INVALID_FILE
const STYLE_CLASS_CELL = C.GTK_STYLE_CLASS_CELL
const JUSTIFY_CENTER = C.GTK_JUSTIFY_CENTER
const SCROLL_ENDS = C.GTK_SCROLL_ENDS
const PRINT_SETTINGS_SCALE = C.GTK_PRINT_SETTINGS_SCALE
const RC_TOKEN_YTHICKNESS = C.GTK_RC_TOKEN_YTHICKNESS
const SENSITIVITY_ON = C.GTK_SENSITIVITY_ON
const PRINT_QUALITY_DRAFT = C.GTK_PRINT_QUALITY_DRAFT
const STATE_FLAG_SELECTED = C.GTK_STATE_FLAG_SELECTED
const PAPER_NAME_A3 = C.GTK_PAPER_NAME_A3
const PAPER_NAME_A4 = C.GTK_PAPER_NAME_A4
const PAPER_NAME_A5 = C.GTK_PAPER_NAME_A5
const STYLE_PROVIDER_PRIORITY_FALLBACK = C.GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
const STOCK_UNINDENT = C.GTK_STOCK_UNINDENT
const STOCK_DIRECTORY = C.GTK_STOCK_DIRECTORY
const STOCK_CONNECT = C.GTK_STOCK_CONNECT
const STYLE_CLASS_TROUGH = C.GTK_STYLE_CLASS_TROUGH
const STOCK_MEDIA_NEXT = C.GTK_STOCK_MEDIA_NEXT
const DIR_TAB_FORWARD = C.GTK_DIR_TAB_FORWARD
const PRINT_DUPLEX_HORIZONTAL = C.GTK_PRINT_DUPLEX_HORIZONTAL
const RC_TOKEN_BASE = C.GTK_RC_TOKEN_BASE
const RESPONSE_HELP = C.GTK_RESPONSE_HELP
const PACK_DIRECTION_TTB = C.GTK_PACK_DIRECTION_TTB
const STOCK_DIALOG_QUESTION = C.GTK_STOCK_DIALOG_QUESTION
const ENTRY_ICON_PRIMARY = C.GTK_ENTRY_ICON_PRIMARY
const ORIENTATION_HORIZONTAL = C.GTK_ORIENTATION_HORIZONTAL
const STOCK_REDO = C.GTK_STOCK_REDO
const MOVEMENT_PARAGRAPH_ENDS = C.GTK_MOVEMENT_PARAGRAPH_ENDS
const STOCK_QUIT = C.GTK_STOCK_QUIT
const STYLE_CLASS_HEADER = C.GTK_STYLE_CLASS_HEADER
const JUNCTION_CORNER_TOPLEFT = C.GTK_JUNCTION_CORNER_TOPLEFT
const BUILDER_ERROR_VERSION_MISMATCH = C.GTK_BUILDER_ERROR_VERSION_MISMATCH
const INPUT_ERROR = C.GTK_INPUT_ERROR
const SIZE_GROUP_NONE = C.GTK_SIZE_GROUP_NONE
const BORDER_STYLE_INSET = C.GTK_BORDER_STYLE_INSET
const PATH_WIDGET = C.GTK_PATH_WIDGET
const BUILDER_ERROR_INVALID_TYPE_FUNCTION = C.GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
const PRINT_SETTINGS_PRINTER_LPI = C.GTK_PRINT_SETTINGS_PRINTER_LPI
const POS_BOTTOM = C.GTK_POS_BOTTOM
const PRINT_OPERATION_RESULT_IN_PROGRESS = C.GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
const FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = C.GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
const STYLE_PROPERTY_PADDING = C.GTK_STYLE_PROPERTY_PADDING
const BUTTONS_OK = C.GTK_BUTTONS_OK
const RC_TEXT = C.GTK_RC_TEXT
const STYLE_PROPERTY_FONT = C.GTK_STYLE_PROPERTY_FONT
const SCROLL_PAGE_FORWARD = C.GTK_SCROLL_PAGE_FORWARD
const RC_TOKEN_LAST = C.GTK_RC_TOKEN_LAST
const STOCK_DIALOG_INFO = C.GTK_STOCK_DIALOG_INFO
const INPUT_PURPOSE_NUMBER = C.GTK_INPUT_PURPOSE_NUMBER
const SCROLL_PAGE_UP = C.GTK_SCROLL_PAGE_UP
const STOCK_PRINT_WARNING = C.GTK_STOCK_PRINT_WARNING
const NOTEBOOK_TAB_FIRST = C.GTK_NOTEBOOK_TAB_FIRST
const RC_TOKEN_RTL = C.GTK_RC_TOKEN_RTL
const TOOL_PALETTE_DRAG_GROUPS = C.GTK_TOOL_PALETTE_DRAG_GROUPS
const MESSAGE_OTHER = C.GTK_MESSAGE_OTHER
const ICON_LOOKUP_FORCE_SVG = C.GTK_ICON_LOOKUP_FORCE_SVG
const STOCK_ZOOM_FIT = C.GTK_STOCK_ZOOM_FIT
const STATE_FLAG_ACTIVE = C.GTK_STATE_FLAG_ACTIVE
const BUTTONBOX_END = C.GTK_BUTTONBOX_END
const MOVEMENT_VISUAL_POSITIONS = C.GTK_MOVEMENT_VISUAL_POSITIONS
const STOCK_FILE = C.GTK_STOCK_FILE
const STOCK_CDROM = C.GTK_STOCK_CDROM
const STATE_PRELIGHT = C.GTK_STATE_PRELIGHT
const FILE_CHOOSER_ACTION_SELECT_FOLDER = C.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
const STATE_FLAG_PRELIGHT = C.GTK_STATE_FLAG_PRELIGHT
const RC_TOKEN_BINDING = C.GTK_RC_TOKEN_BINDING
const UI_MANAGER_POPUP_WITH_ACCELS = C.GTK_UI_MANAGER_POPUP_WITH_ACCELS
const RC_TOKEN_MODULE_PATH = C.GTK_RC_TOKEN_MODULE_PATH
const SCROLL_STEP_FORWARD = C.GTK_SCROLL_STEP_FORWARD
const DRAG_RESULT_SUCCESS = C.GTK_DRAG_RESULT_SUCCESS
const STOCK_MEDIA_PLAY = C.GTK_STOCK_MEDIA_PLAY
const ICON_LOOKUP_GENERIC_FALLBACK = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
const STYLE_CLASS_SPINNER = C.GTK_STYLE_CLASS_SPINNER
const SCROLL_STEP_LEFT = C.GTK_SCROLL_STEP_LEFT
const SCROLL_JUMP = C.GTK_SCROLL_JUMP
const STYLE_CLASS_ERROR = C.GTK_STYLE_CLASS_ERROR
const STOCK_PRINT_PAUSED = C.GTK_STOCK_PRINT_PAUSED
const DELETE_DISPLAY_LINES = C.GTK_DELETE_DISPLAY_LINES
const STYLE_PROPERTY_BORDER_STYLE = C.GTK_STYLE_PROPERTY_BORDER_STYLE
const PRINT_PAGES_RANGES = C.GTK_PRINT_PAGES_RANGES
const STOCK_CLOSE = C.GTK_STOCK_CLOSE
const MOVEMENT_PAGES = C.GTK_MOVEMENT_PAGES
const PRINT_SETTINGS_RESOLUTION = C.GTK_PRINT_SETTINGS_RESOLUTION
const RC_TOKEN_STOCK = C.GTK_RC_TOKEN_STOCK
const SHRINK = C.GTK_SHRINK
const STOCK_GO_UP = C.GTK_STOCK_GO_UP
const PRINT_QUALITY_LOW = C.GTK_PRINT_QUALITY_LOW
const STOCK_EXECUTE = C.GTK_STOCK_EXECUTE
const PRINT_SETTINGS_USE_COLOR = C.GTK_PRINT_SETTINGS_USE_COLOR
const DEBUG_BUILDER = C.GTK_DEBUG_BUILDER
const APPLICATION_INHIBIT_LOGOUT = C.GTK_APPLICATION_INHIBIT_LOGOUT
const IM_PREEDIT_NONE = C.GTK_IM_PREEDIT_NONE
const RESPONSE_CANCEL = C.GTK_RESPONSE_CANCEL
const RC_TOKEN_FG = C.GTK_RC_TOKEN_FG
const UNIT_INCH = C.GTK_UNIT_INCH
const STYLE_CLASS_TOOLTIP = C.GTK_STYLE_CLASS_TOOLTIP
const STOCK_INFO = C.GTK_STOCK_INFO
const RESIZE_IMMEDIATE = C.GTK_RESIZE_IMMEDIATE
const STOCK_PRINT_REPORT = C.GTK_STOCK_PRINT_REPORT
const INPUT_PURPOSE_PASSWORD = C.GTK_INPUT_PURPOSE_PASSWORD
const STYLE_PROVIDER_PRIORITY_SETTINGS = C.GTK_STYLE_PROVIDER_PRIORITY_SETTINGS
const DEBUG_ICONTHEME = C.GTK_DEBUG_ICONTHEME
const RC_TOKEN_BG_PIXMAP = C.GTK_RC_TOKEN_BG_PIXMAP
const PRINT_SETTINGS_MEDIA_TYPE = C.GTK_PRINT_SETTINGS_MEDIA_TYPE
const PRINT_SETTINGS_PRINT_PAGES = C.GTK_PRINT_SETTINGS_PRINT_PAGES
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM
const PAGE_ORIENTATION_REVERSE_PORTRAIT = C.GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT
const IM_PREEDIT_CALLBACK = C.GTK_IM_PREEDIT_CALLBACK
const STYLE_CLASS_QUESTION = C.GTK_STYLE_CLASS_QUESTION
const PATH_PRIO_GTK = C.GTK_PATH_PRIO_GTK
const TREE_VIEW_DROP_AFTER = C.GTK_TREE_VIEW_DROP_AFTER
const PACK_END = C.GTK_PACK_END
const MOVEMENT_BUFFER_ENDS = C.GTK_MOVEMENT_BUFFER_ENDS
const SCROLL_HORIZONTAL_ENDS = C.GTK_SCROLL_HORIZONTAL_ENDS
const STYLE_CLASS_LINKED = C.GTK_STYLE_CLASS_LINKED
const EXPANDER_SEMI_EXPANDED = C.GTK_EXPANDER_SEMI_EXPANDED
const CELL_RENDERER_SORTED = C.GTK_CELL_RENDERER_SORTED
const RESPONSE_ACCEPT = C.GTK_RESPONSE_ACCEPT
const RC_TOKEN_LTR = C.GTK_RC_TOKEN_LTR
const CELL_RENDERER_PRELIT = C.GTK_CELL_RENDERER_PRELIT
const DEBUG_GEOMETRY = C.GTK_DEBUG_GEOMETRY
const TEXT_WINDOW_BOTTOM = C.GTK_TEXT_WINDOW_BOTTOM
const CELL_RENDERER_ACCEL_MODE_OTHER = C.GTK_CELL_RENDERER_ACCEL_MODE_OTHER
const CELL_RENDERER_ACCEL_MODE_GTK = C.GTK_CELL_RENDERER_ACCEL_MODE_GTK
const DIR_TAB_BACKWARD = C.GTK_DIR_TAB_BACKWARD
const STOCK_PASTE = C.GTK_STOCK_PASTE
const TOOLBAR_TEXT = C.GTK_TOOLBAR_TEXT
const PRINT_SETTINGS_COLLATE = C.GTK_PRINT_SETTINGS_COLLATE
const STYLE_CLASS_SLIDER = C.GTK_STYLE_CLASS_SLIDER
const TREE_MODEL_ITERS_PERSIST = C.GTK_TREE_MODEL_ITERS_PERSIST
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT
const POLICY_NEVER = C.GTK_POLICY_NEVER
const RECENT_FILTER_AGE = C.GTK_RECENT_FILTER_AGE
const SHADOW_IN = C.GTK_SHADOW_IN
const WIN_POS_NONE = C.GTK_WIN_POS_NONE
const STOCK_MEDIA_FORWARD = C.GTK_STOCK_MEDIA_FORWARD
const WINDOW_TOPLEVEL = C.GTK_WINDOW_TOPLEVEL
const FILE_CHOOSER_ACTION_CREATE_FOLDER = C.GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
const LEVEL_BAR_MODE_CONTINUOUS = C.GTK_LEVEL_BAR_MODE_CONTINUOUS
const STYLE_CLASS_GRIP = C.GTK_STYLE_CLASS_GRIP
const ALIGN_CENTER = C.GTK_ALIGN_CENTER
const BUILDER_ERROR_MISSING_ATTRIBUTE = C.GTK_BUILDER_ERROR_MISSING_ATTRIBUTE
const FILE_CHOOSER_ACTION_SAVE = C.GTK_FILE_CHOOSER_ACTION_SAVE
const BORDER_STYLE_DASHED = C.GTK_BORDER_STYLE_DASHED
const PAPER_NAME_B5 = C.GTK_PAPER_NAME_B5
const PRINT_OPERATION_ACTION_PREVIEW = C.GTK_PRINT_OPERATION_ACTION_PREVIEW
const UI_MANAGER_MENUBAR = C.GTK_UI_MANAGER_MENUBAR
const RC_TOKEN_STYLE = C.GTK_RC_TOKEN_STYLE
const CALENDAR_SHOW_HEADING = C.GTK_CALENDAR_SHOW_HEADING
const ICON_LOOKUP_USE_BUILTIN = C.GTK_ICON_LOOKUP_USE_BUILTIN
const CSS_SECTION_VALUE = C.GTK_CSS_SECTION_VALUE
const RELIEF_NONE = C.GTK_RELIEF_NONE
const PRINT_SETTINGS_DEFAULT_SOURCE = C.GTK_PRINT_SETTINGS_DEFAULT_SOURCE
const PAPER_NAME_EXECUTIVE = C.GTK_PAPER_NAME_EXECUTIVE
const ARROWS_END = C.GTK_ARROWS_END
const JUSTIFY_FILL = C.GTK_JUSTIFY_FILL
const STOCK_PAGE_SETUP = C.GTK_STOCK_PAGE_SETUP
const RC_TOKEN_SELECTED = C.GTK_RC_TOKEN_SELECTED
const FILE_FILTER_DISPLAY_NAME = C.GTK_FILE_FILTER_DISPLAY_NAME
const UI_MANAGER_AUTO = C.GTK_UI_MANAGER_AUTO
const PRINT_SETTINGS_PAPER_WIDTH = C.GTK_PRINT_SETTINGS_PAPER_WIDTH
const RECENT_SORT_MRU = C.GTK_RECENT_SORT_MRU
const TARGET_SAME_APP = C.GTK_TARGET_SAME_APP
const WIDGET_HELP_WHATS_THIS = C.GTK_WIDGET_HELP_WHATS_THIS
const DEBUG_TREE = C.GTK_DEBUG_TREE
const SCROLL_MINIMUM = C.GTK_SCROLL_MINIMUM
const STYLE_CLASS_VERTICAL = C.GTK_STYLE_CLASS_VERTICAL
const MOVEMENT_DISPLAY_LINES = C.GTK_MOVEMENT_DISPLAY_LINES
const REGION_ONLY = C.GTK_REGION_ONLY
const PRINT_PAGES_CURRENT = C.GTK_PRINT_PAGES_CURRENT
const REGION_LAST = C.GTK_REGION_LAST
const STYLE_CLASS_MENU = C.GTK_STYLE_CLASS_MENU
const STYLE_CLASS_TOP = C.GTK_STYLE_CLASS_TOP
const STOCK_DISCARD = C.GTK_STOCK_DISCARD
const TEXT_WINDOW_TEXT = C.GTK_TEXT_WINDOW_TEXT
const STOCK_FULLSCREEN = C.GTK_STOCK_FULLSCREEN
const STOCK_DIALOG_WARNING = C.GTK_STOCK_DIALOG_WARNING
const RC_TOKEN_INVALID = C.GTK_RC_TOKEN_INVALID
const STOCK_ORIENTATION_REVERSE_PORTRAIT = C.GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
const CSS_SECTION_IMPORT = C.GTK_CSS_SECTION_IMPORT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
const NOTEBOOK_TAB_LAST = C.GTK_NOTEBOOK_TAB_LAST
const STYLE_CLASS_INLINE_TOOLBAR = C.GTK_STYLE_CLASS_INLINE_TOOLBAR
const WRAP_NONE = C.GTK_WRAP_NONE
const STYLE_CLASS_ARROW = C.GTK_STYLE_CLASS_ARROW
const TREE_VIEW_COLUMN_GROW_ONLY = C.GTK_TREE_VIEW_COLUMN_GROW_ONLY
const TEXT_BUFFER_TARGET_INFO_RICH_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT
const SCROLL_PAGE_LEFT = C.GTK_SCROLL_PAGE_LEFT
const CALENDAR_SHOW_DETAILS = C.GTK_CALENDAR_SHOW_DETAILS
const BORDER_STYLE_DOTTED = C.GTK_BORDER_STYLE_DOTTED
const TEXT_DIR_RTL = C.GTK_TEXT_DIR_RTL
const ASSISTANT_PAGE_SUMMARY = C.GTK_ASSISTANT_PAGE_SUMMARY
const STOCK_GOTO_TOP = C.GTK_STOCK_GOTO_TOP
const PRINT_STATUS_PREPARING = C.GTK_PRINT_STATUS_PREPARING
const CSS_SECTION_DECLARATION = C.GTK_CSS_SECTION_DECLARATION
const STOCK_SELECT_COLOR = C.GTK_STOCK_SELECT_COLOR
const ICON_SIZE_INVALID = C.GTK_ICON_SIZE_INVALID
const MENU_DIR_NEXT = C.GTK_MENU_DIR_NEXT
const INPUT_HINT_UPPERCASE_SENTENCES = C.GTK_INPUT_HINT_UPPERCASE_SENTENCES
const BORDER_STYLE_NONE = C.GTK_BORDER_STYLE_NONE
const MESSAGE_WARNING = C.GTK_MESSAGE_WARNING
const UI_MANAGER_ACCELERATOR = C.GTK_UI_MANAGER_ACCELERATOR
const STOCK_UNDERLINE = C.GTK_STOCK_UNDERLINE
const STYLE_CLASS_WARNING = C.GTK_STYLE_CLASS_WARNING
const ICON_VIEW_DROP_BELOW = C.GTK_ICON_VIEW_DROP_BELOW
const TEXT_SEARCH_TEXT_ONLY = C.GTK_TEXT_SEARCH_TEXT_ONLY
const POLICY_AUTOMATIC = C.GTK_POLICY_AUTOMATIC
const STOCK_JUMP_TO = C.GTK_STOCK_JUMP_TO
const STOCK_MEDIA_REWIND = C.GTK_STOCK_MEDIA_REWIND
const FILE_CHOOSER_ERROR_NONEXISTENT = C.GTK_FILE_CHOOSER_ERROR_NONEXISTENT
const UI_MANAGER_TOOLITEM = C.GTK_UI_MANAGER_TOOLITEM
const RECENT_MANAGER_ERROR_INVALID_ENCODING = C.GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING
const MESSAGE_QUESTION = C.GTK_MESSAGE_QUESTION
const SPIN_END = C.GTK_SPIN_END
const MOVEMENT_PARAGRAPHS = C.GTK_MOVEMENT_PARAGRAPHS
const UI_MANAGER_SEPARATOR = C.GTK_UI_MANAGER_SEPARATOR
const JUNCTION_NONE = C.GTK_JUNCTION_NONE
const CORNER_BOTTOM_RIGHT = C.GTK_CORNER_BOTTOM_RIGHT
const RECENT_MANAGER_ERROR_READ = C.GTK_RECENT_MANAGER_ERROR_READ
const ARROWS_BOTH = C.GTK_ARROWS_BOTH
const CALENDAR_SHOW_WEEK_NUMBERS = C.GTK_CALENDAR_SHOW_WEEK_NUMBERS
const STOCK_GOTO_FIRST = C.GTK_STOCK_GOTO_FIRST
const PRINT_OPERATION_ACTION_EXPORT = C.GTK_PRINT_OPERATION_ACTION_EXPORT
const PATH_PRIO_LOWEST = C.GTK_PATH_PRIO_LOWEST
const JUNCTION_BOTTOM = C.GTK_JUNCTION_BOTTOM
const BUILDER_ERROR_DUPLICATE_ID = C.GTK_BUILDER_ERROR_DUPLICATE_ID
const SPIN_USER_DEFINED = C.GTK_SPIN_USER_DEFINED
const SENSITIVITY_AUTO = C.GTK_SENSITIVITY_AUTO
const RC_TOKEN_COLOR = C.GTK_RC_TOKEN_COLOR
const PAGE_SET_EVEN = C.GTK_PAGE_SET_EVEN
const FILE_CHOOSER_ERROR_ALREADY_EXISTS = C.GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS
const STOCK_CUT = C.GTK_STOCK_CUT
const RECENT_FILTER_MIME_TYPE = C.GTK_RECENT_FILTER_MIME_TYPE
const CELL_RENDERER_EXPANDED = C.GTK_CELL_RENDERER_EXPANDED
const CELL_RENDERER_EXPANDABLE = C.GTK_CELL_RENDERER_EXPANDABLE
const DRAG_RESULT_USER_CANCELLED = C.GTK_DRAG_RESULT_USER_CANCELLED
const LICENSE_CUSTOM = C.GTK_LICENSE_CUSTOM
const PRINT_SETTINGS_REVERSE = C.GTK_PRINT_SETTINGS_REVERSE
const WINDOW_POPUP = C.GTK_WINDOW_POPUP
const RC_TOKEN_INSENSITIVE = C.GTK_RC_TOKEN_INSENSITIVE
const MOVEMENT_DISPLAY_LINE_ENDS = C.GTK_MOVEMENT_DISPLAY_LINE_ENDS
const BUTTONBOX_CENTER = C.GTK_BUTTONBOX_CENTER
const STYLE_CLASS_FRAME = C.GTK_STYLE_CLASS_FRAME
const STOCK_PRINT_ERROR = C.GTK_STOCK_PRINT_ERROR
const STOCK_PRINT = C.GTK_STOCK_PRINT
const STOCK_ZOOM_100 = C.GTK_STOCK_ZOOM_100
const FILL = C.GTK_FILL
const TARGET_OTHER_WIDGET = C.GTK_TARGET_OTHER_WIDGET
const RECENT_MANAGER_ERROR_WRITE = C.GTK_RECENT_MANAGER_ERROR_WRITE
const UPDATE_IF_VALID = C.GTK_UPDATE_IF_VALID
const MOVEMENT_LOGICAL_POSITIONS = C.GTK_MOVEMENT_LOGICAL_POSITIONS
const PRINT_DUPLEX_SIMPLEX = C.GTK_PRINT_DUPLEX_SIMPLEX
const STYLE_CLASS_ENTRY = C.GTK_STYLE_CLASS_ENTRY
const PATH_PRIO_MASK = C.GTK_PATH_PRIO_MASK
const SPIN_PAGE_FORWARD = C.GTK_SPIN_PAGE_FORWARD
const SPIN_STEP_BACKWARD = C.GTK_SPIN_STEP_BACKWARD
const SORT_DESCENDING = C.GTK_SORT_DESCENDING
const STOCK_REFRESH = C.GTK_STOCK_REFRESH
const BUTTONS_CLOSE = C.GTK_BUTTONS_CLOSE
const ASSISTANT_PAGE_CUSTOM = C.GTK_ASSISTANT_PAGE_CUSTOM
const LEVEL_BAR_MODE_DISCRETE = C.GTK_LEVEL_BAR_MODE_DISCRETE
const SCROLL_STEP_UP = C.GTK_SCROLL_STEP_UP
const RC_TOKEN_ENGINE = C.GTK_RC_TOKEN_ENGINE
const STOCK_JUSTIFY_LEFT = C.GTK_STOCK_JUSTIFY_LEFT
const SHADOW_ETCHED_OUT = C.GTK_SHADOW_ETCHED_OUT
const MAX_COMPOSE_LEN = C.GTK_MAX_COMPOSE_LEN
const TREE_VIEW_DROP_BEFORE = C.GTK_TREE_VIEW_DROP_BEFORE
const STOCK_DISCONNECT = C.GTK_STOCK_DISCONNECT
const STYLE_REGION_COLUMN = C.GTK_STYLE_REGION_COLUMN
const IM_PREEDIT_NOTHING = C.GTK_IM_PREEDIT_NOTHING
const DELETE_WHITESPACE = C.GTK_DELETE_WHITESPACE
const TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = C.GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS
const FILE_CHOOSER_ERROR_BAD_FILENAME = C.GTK_FILE_CHOOSER_ERROR_BAD_FILENAME
const TEXT_WINDOW_WIDGET = C.GTK_TEXT_WINDOW_WIDGET
const RESIZE_PARENT = C.GTK_RESIZE_PARENT
const DIALOG_DESTROY_WITH_PARENT = C.GTK_DIALOG_DESTROY_WITH_PARENT
const POS_RIGHT = C.GTK_POS_RIGHT
const DEST_DEFAULT_DROP = C.GTK_DEST_DEFAULT_DROP
const BUTTONBOX_EDGE = C.GTK_BUTTONBOX_EDGE
const PRINT_PAGES_ALL = C.GTK_PRINT_PAGES_ALL
const INPUT_PURPOSE_FREE_FORM = C.GTK_INPUT_PURPOSE_FREE_FORM
const PAGE_ORIENTATION_LANDSCAPE = C.GTK_PAGE_ORIENTATION_LANDSCAPE
const DIR_LEFT = C.GTK_DIR_LEFT
const STOCK_JUSTIFY_FILL = C.GTK_STOCK_JUSTIFY_FILL
const CELL_RENDERER_MODE_INERT = C.GTK_CELL_RENDERER_MODE_INERT
const DELETE_DISPLAY_LINE_ENDS = C.GTK_DELETE_DISPLAY_LINE_ENDS
const DEBUG_MULTIHEAD = C.GTK_DEBUG_MULTIHEAD
const TEXT_WINDOW_PRIVATE = C.GTK_TEXT_WINDOW_PRIVATE
const RC_TOKEN_XTHICKNESS = C.GTK_RC_TOKEN_XTHICKNESS
const LICENSE_LGPL_3_0 = C.GTK_LICENSE_LGPL_3_0
const GTK_STATE_SELECTED = C.GTK_STATE_SELECTED
const STYLE_CLASS_MENUBAR = C.GTK_STYLE_CLASS_MENUBAR
const PRINT_STATUS_GENERATING_DATA = C.GTK_PRINT_STATUS_GENERATING_DATA
const BORDER_STYLE_OUTSET = C.GTK_BORDER_STYLE_OUTSET
const POLICY_ALWAYS = C.GTK_POLICY_ALWAYS
const CALENDAR_NO_MONTH_CHANGE = C.GTK_CALENDAR_NO_MONTH_CHANGE
const TEXT_DIR_NONE = C.GTK_TEXT_DIR_NONE
const DELETE_CHARS = C.GTK_DELETE_CHARS
const RC_TOKEN_THEME = C.GTK_RC_TOKEN_THEME
const TEXT_WINDOW_LEFT = C.GTK_TEXT_WINDOW_LEFT
const ICON_VIEW_DROP_ABOVE = C.GTK_ICON_VIEW_DROP_ABOVE
const PATH_PRIO_APPLICATION = C.GTK_PATH_PRIO_APPLICATION
const BORDER_STYLE_DOUBLE = C.GTK_BORDER_STYLE_DOUBLE
const RC_TOKEN_PRELIGHT = C.GTK_RC_TOKEN_PRELIGHT
const STYLE_CLASS_BACKGROUND = C.GTK_STYLE_CLASS_BACKGROUND
const BORDER_STYLE_RIDGE = C.GTK_BORDER_STYLE_RIDGE
const ACCEL_MASK = C.GTK_ACCEL_MASK
const STOCK_SELECT_FONT = C.GTK_STOCK_SELECT_FONT
const STYLE_CLASS_HORIZONTAL = C.GTK_STYLE_CLASS_HORIZONTAL
const STYLE_CLASS_NOTEBOOK = C.GTK_STYLE_CLASS_NOTEBOOK
const INPUT_HINT_UPPERCASE_CHARS = C.GTK_INPUT_HINT_UPPERCASE_CHARS
const WIDGET_HELP_TOOLTIP = C.GTK_WIDGET_HELP_TOOLTIP
const RC_TOKEN_INCLUDE = C.GTK_RC_TOKEN_INCLUDE
const DRAG_RESULT_ERROR = C.GTK_DRAG_RESULT_ERROR
const ICON_SIZE_DND = C.GTK_ICON_SIZE_DND
const STYLE_CLASS_SPINBUTTON = C.GTK_STYLE_CLASS_SPINBUTTON
const STYLE_CLASS_SCALE = C.GTK_STYLE_CLASS_SCALE
const PRINT_OPERATION_RESULT_ERROR = C.GTK_PRINT_OPERATION_RESULT_ERROR
const SORT_ASCENDING = C.GTK_SORT_ASCENDING
const RC_TOKEN_RC = C.GTK_RC_TOKEN_RC
const STYLE_PROPERTY_BACKGROUND_COLOR = C.GTK_STYLE_PROPERTY_BACKGROUND_COLOR
const TEXT_SEARCH_VISIBLE_ONLY = C.GTK_TEXT_SEARCH_VISIBLE_ONLY
const RC_TOKEN_HIGHEST = C.GTK_RC_TOKEN_HIGHEST
const BUTTONS_YES_NO = C.GTK_BUTTONS_YES_NO
const CSS_PROVIDER_ERROR_DEPRECATED = C.GTK_CSS_PROVIDER_ERROR_DEPRECATED
const APPLICATION_INHIBIT_SUSPEND = C.GTK_APPLICATION_INHIBIT_SUSPEND
const STYLE_CLASS_RIGHT = C.GTK_STYLE_CLASS_RIGHT
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = C.GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT
const APPLICATION_INHIBIT_SWITCH = C.GTK_APPLICATION_INHIBIT_SWITCH
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = C.GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT
const INTERFACE_AGE = C.GTK_INTERFACE_AGE
const RECENT_SORT_NONE = C.GTK_RECENT_SORT_NONE
const CSS_PROVIDER_ERROR_FAILED = C.GTK_CSS_PROVIDER_ERROR_FAILED
const MAJOR_VERSION = C.GTK_MAJOR_VERSION
const PRINT_PAGES_SELECTION = C.GTK_PRINT_PAGES_SELECTION
const STATE_INSENSITIVE = C.GTK_STATE_INSENSITIVE
const TARGET_SAME_WIDGET = C.GTK_TARGET_SAME_WIDGET
const STOCK_PREFERENCES = C.GTK_STOCK_PREFERENCES
const STOCK_LEAVE_FULLSCREEN = C.GTK_STOCK_LEAVE_FULLSCREEN
const WIN_POS_MOUSE = C.GTK_WIN_POS_MOUSE
const PAPER_NAME_LETTER = C.GTK_PAPER_NAME_LETTER
const PATH_CLASS = C.GTK_PATH_CLASS
const SCROLL_NATURAL = C.GTK_SCROLL_NATURAL
const DRAG_RESULT_TIMEOUT_EXPIRED = C.GTK_DRAG_RESULT_TIMEOUT_EXPIRED
const STOCK_STOP = C.GTK_STOCK_STOP
const STYLE_PROVIDER_PRIORITY_USER = C.GTK_STYLE_PROVIDER_PRIORITY_USER
const STOCK_JUSTIFY_CENTER = C.GTK_STOCK_JUSTIFY_CENTER
const PRINT_OPERATION_ACTION_PRINT_DIALOG = C.GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
const STYLE_CLASS_COMBOBOX_ENTRY = C.GTK_STYLE_CLASS_COMBOBOX_ENTRY
const PRINT_OPERATION_RESULT_APPLY = C.GTK_PRINT_OPERATION_RESULT_APPLY
const STYLE_PROVIDER_PRIORITY_APPLICATION = C.GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
const STOCK_CLEAR = C.GTK_STOCK_CLEAR
const RC_TOKEN_PIXMAP_PATH = C.GTK_RC_TOKEN_PIXMAP_PATH
const LEVEL_BAR_OFFSET_HIGH = C.GTK_LEVEL_BAR_OFFSET_HIGH
const PRINT_SETTINGS_PAGE_SET = C.GTK_PRINT_SETTINGS_PAGE_SET
const RC_TOKEN_ACTIVE = C.GTK_RC_TOKEN_ACTIVE
const PRINT_SETTINGS_RESOLUTION_X = C.GTK_PRINT_SETTINGS_RESOLUTION_X
const SIZE_REQUEST_CONSTANT_SIZE = C.GTK_SIZE_REQUEST_CONSTANT_SIZE
const SHADOW_NONE = C.GTK_SHADOW_NONE
const RECENT_SORT_LRU = C.GTK_RECENT_SORT_LRU
const STOCK_REVERT_TO_SAVED = C.GTK_STOCK_REVERT_TO_SAVED
const TEXT_VIEW_PRIORITY_VALIDATE = C.GTK_TEXT_VIEW_PRIORITY_VALIDATE
const RECENT_SORT_CUSTOM = C.GTK_RECENT_SORT_CUSTOM
const ICON_SIZE_SMALL_TOOLBAR = C.GTK_ICON_SIZE_SMALL_TOOLBAR
const PRINT_QUALITY_NORMAL = C.GTK_PRINT_QUALITY_NORMAL
const CALENDAR_SHOW_DAY_NAMES = C.GTK_CALENDAR_SHOW_DAY_NAMES
const TREE_VIEW_DROP_INTO_OR_BEFORE = C.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
const STOCK_BOLD = C.GTK_STOCK_BOLD
const PRINT_SETTINGS_N_COPIES = C.GTK_PRINT_SETTINGS_N_COPIES
const STYLE_CLASS_EXPANDER = C.GTK_STYLE_CLASS_EXPANDER
const STOCK_OPEN = C.GTK_STOCK_OPEN
const ENTRY_ICON_SECONDARY = C.GTK_ENTRY_ICON_SECONDARY
const SHADOW_OUT = C.GTK_SHADOW_OUT
const ICON_THEME_FAILED = C.GTK_ICON_THEME_FAILED
const ACCEL_LOCKED = C.GTK_ACCEL_LOCKED
const FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = C.GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME
const DEBUG_KEYBINDINGS = C.GTK_DEBUG_KEYBINDINGS
const UI_MANAGER_PLACEHOLDER = C.GTK_UI_MANAGER_PLACEHOLDER
const STOCK_CANCEL = C.GTK_STOCK_CANCEL
const SCROLL_NONE = C.GTK_SCROLL_NONE
const STYLE_PROPERTY_COLOR = C.GTK_STYLE_PROPERTY_COLOR
const PRINT_SETTINGS_DITHER = C.GTK_PRINT_SETTINGS_DITHER
const SPIN_STEP_FORWARD = C.GTK_SPIN_STEP_FORWARD
const RECENT_CHOOSER_ERROR_INVALID_URI = C.GTK_RECENT_CHOOSER_ERROR_INVALID_URI
const BUILDER_ERROR_INVALID_VALUE = C.GTK_BUILDER_ERROR_INVALID_VALUE
const BUILDER_ERROR_INVALID_ATTRIBUTE = C.GTK_BUILDER_ERROR_INVALID_ATTRIBUTE
const BUTTONS_NONE = C.GTK_BUTTONS_NONE
const STYLE_PROVIDER_PRIORITY_THEME = C.GTK_STYLE_PROVIDER_PRIORITY_THEME
const EXPANDER_EXPANDED = C.GTK_EXPANDER_EXPANDED
const ALIGN_START = C.GTK_ALIGN_START
const ICON_LOOKUP_NO_SVG = C.GTK_ICON_LOOKUP_NO_SVG
const UI_MANAGER_TOOLBAR = C.GTK_UI_MANAGER_TOOLBAR
const STATE_NORMAL = C.GTK_STATE_NORMAL
const DEST_DEFAULT_MOTION = C.GTK_DEST_DEFAULT_MOTION
const STOCK_ADD = C.GTK_STOCK_ADD
const TOOLBAR_SPACE_EMPTY = C.GTK_TOOLBAR_SPACE_EMPTY
const CSS_SECTION_SELECTOR = C.GTK_CSS_SECTION_SELECTOR
const RESIZE_QUEUE = C.GTK_RESIZE_QUEUE
const STOCK_APPLY = C.GTK_STOCK_APPLY
const RECENT_MANAGER_ERROR_INVALID_URI = C.GTK_RECENT_MANAGER_ERROR_INVALID_URI
const CSS_SECTION_KEYFRAMES = C.GTK_CSS_SECTION_KEYFRAMES
const RC_TOKEN_APPLICATION = C.GTK_RC_TOKEN_APPLICATION
const PATH_PRIO_THEME = C.GTK_PATH_PRIO_THEME
const STYLE_CLASS_VIEW = C.GTK_STYLE_CLASS_VIEW
const STOCK_MEDIA_PREVIOUS = C.GTK_STOCK_MEDIA_PREVIOUS
const RECENT_FILTER_URI = C.GTK_RECENT_FILTER_URI
const INPUT_HINT_NONE = C.GTK_INPUT_HINT_NONE
const TOOL_PALETTE_DRAG_ITEMS = C.GTK_TOOL_PALETTE_DRAG_ITEMS
const ACCEL_VISIBLE = C.GTK_ACCEL_VISIBLE
const LICENSE_BSD = C.GTK_LICENSE_BSD
const ALIGN_FILL = C.GTK_ALIGN_FILL
const LICENSE_UNKNOWN = C.GTK_LICENSE_UNKNOWN
const STOCK_MEDIA_STOP = C.GTK_STOCK_MEDIA_STOP
const FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = C.GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
const INPUT_PURPOSE_PHONE = C.GTK_INPUT_PURPOSE_PHONE
const PRINT_ERROR_GENERAL = C.GTK_PRINT_ERROR_GENERAL
const ARROW_UP = C.GTK_ARROW_UP
const MINOR_VERSION = C.GTK_MINOR_VERSION
const SPIN_HOME = C.GTK_SPIN_HOME
const PRINT_ERROR_NOMEM = C.GTK_PRINT_ERROR_NOMEM
const PRINT_QUALITY_HIGH = C.GTK_PRINT_QUALITY_HIGH
const STOCK_FIND = C.GTK_STOCK_FIND
const JUNCTION_CORNER_BOTTOMLEFT = C.GTK_JUNCTION_CORNER_BOTTOMLEFT
const JUNCTION_LEFT = C.GTK_JUNCTION_LEFT
const STOCK_ZOOM_IN = C.GTK_STOCK_ZOOM_IN
const INPUT_PURPOSE_URL = C.GTK_INPUT_PURPOSE_URL
const STYLE_CLASS_SCALE_HAS_MARKS_BELOW = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW
const PRINT_SETTINGS_DUPLEX = C.GTK_PRINT_SETTINGS_DUPLEX
const PRINT_STATUS_PENDING = C.GTK_PRINT_STATUS_PENDING
const STYLE_REGION_ROW = C.GTK_STYLE_REGION_ROW
const SELECTION_BROWSE = C.GTK_SELECTION_BROWSE
const DELETE_PARAGRAPHS = C.GTK_DELETE_PARAGRAPHS
const FILE_CHOOSER_CONFIRMATION_CONFIRM = C.GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM
const LICENSE_LGPL_2_1 = C.GTK_LICENSE_LGPL_2_1
const STYLE_CLASS_RADIO = C.GTK_STYLE_CLASS_RADIO
const FILE_FILTER_MIME_TYPE = C.GTK_FILE_FILTER_MIME_TYPE
const STOCK_COLOR_PICKER = C.GTK_STOCK_COLOR_PICKER
const INPUT_PURPOSE_EMAIL = C.GTK_INPUT_PURPOSE_EMAIL
const STOCK_SAVE = C.GTK_STOCK_SAVE
const MENU_DIR_CHILD = C.GTK_MENU_DIR_CHILD
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT
const STYLE_PROPERTY_BORDER_WIDTH = C.GTK_STYLE_PROPERTY_BORDER_WIDTH
const STYLE_CLASS_DEFAULT = C.GTK_STYLE_CLASS_DEFAULT
const ICON_VIEW_NO_DROP = C.GTK_ICON_VIEW_NO_DROP
const STYLE_PROPERTY_BACKGROUND_IMAGE = C.GTK_STYLE_PROPERTY_BACKGROUND_IMAGE
const TOOLBAR_ICONS = C.GTK_TOOLBAR_ICONS
const PRINT_SETTINGS_OUTPUT_BIN = C.GTK_PRINT_SETTINGS_OUTPUT_BIN
const PRINT_STATUS_FINISHED = C.GTK_PRINT_STATUS_FINISHED
const CORNER_TOP_LEFT = C.GTK_CORNER_TOP_LEFT
const CORNER_TOP_RIGHT = C.GTK_CORNER_TOP_RIGHT
const RC_TOKEN_LOWEST = C.GTK_RC_TOKEN_LOWEST
const ALIGN_END = C.GTK_ALIGN_END
const STOCK_STRIKETHROUGH = C.GTK_STOCK_STRIKETHROUGH
const CELL_RENDERER_FOCUSED = C.GTK_CELL_RENDERER_FOCUSED
const STOCK_GOTO_BOTTOM = C.GTK_STOCK_GOTO_BOTTOM
const UI_MANAGER_MENUITEM = C.GTK_UI_MANAGER_MENUITEM
const MESSAGE_ERROR = C.GTK_MESSAGE_ERROR
const CELL_RENDERER_SELECTED = C.GTK_CELL_RENDERER_SELECTED
const PRINT_OPERATION_RESULT_CANCEL = C.GTK_PRINT_OPERATION_RESULT_CANCEL
const PRINT_STATUS_FINISHED_ABORTED = C.GTK_PRINT_STATUS_FINISHED_ABORTED
const PRINT_SETTINGS_OUTPUT_BASENAME = C.GTK_PRINT_SETTINGS_OUTPUT_BASENAME
const STOCK_MISSING_IMAGE = C.GTK_STOCK_MISSING_IMAGE
const STYLE_CLASS_BUTTON = C.GTK_STYLE_CLASS_BUTTON
const STOCK_EDIT = C.GTK_STOCK_EDIT
const INPUT_HINT_LOWERCASE = C.GTK_INPUT_HINT_LOWERCASE
const DEST_DEFAULT_ALL = C.GTK_DEST_DEFAULT_ALL
const SCROLL_END = C.GTK_SCROLL_END
const TEXT_SEARCH_CASE_INSENSITIVE = C.GTK_TEXT_SEARCH_CASE_INSENSITIVE
const STOCK_CAPS_LOCK_WARNING = C.GTK_STOCK_CAPS_LOCK_WARNING
const ORIENTATION_VERTICAL = C.GTK_ORIENTATION_VERTICAL
const WIN_POS_CENTER_ALWAYS = C.GTK_WIN_POS_CENTER_ALWAYS
const MENU_DIR_PARENT = C.GTK_MENU_DIR_PARENT
const RC_TOKEN_IM_MODULE_PATH = C.GTK_RC_TOKEN_IM_MODULE_PATH
const SPIN_PAGE_BACKWARD = C.GTK_SPIN_PAGE_BACKWARD
const RC_TOKEN_WIDGET = C.GTK_RC_TOKEN_WIDGET
const STYLE_CLASS_IMAGE = C.GTK_STYLE_CLASS_IMAGE
const FILE_FILTER_FILENAME = C.GTK_FILE_FILTER_FILENAME
const SCROLL_STEPS = C.GTK_SCROLL_STEPS
const CSS_SECTION_RULESET = C.GTK_CSS_SECTION_RULESET
const STOCK_GO_BACK = C.GTK_STOCK_GO_BACK
const DEBUG_TEXT = C.GTK_DEBUG_TEXT
const STOCK_NEW = C.GTK_STOCK_NEW
const RECENT_MANAGER_ERROR_UNKNOWN = C.GTK_RECENT_MANAGER_ERROR_UNKNOWN
const PRINT_OPERATION_ACTION_PRINT = C.GTK_PRINT_OPERATION_ACTION_PRINT
const PRINT_STATUS_PENDING_ISSUE = C.GTK_PRINT_STATUS_PENDING_ISSUE
const STYLE_CLASS_SCROLLBARS_JUNCTION = C.GTK_STYLE_CLASS_SCROLLBARS_JUNCTION
const RESPONSE_REJECT = C.GTK_RESPONSE_REJECT
const PRINT_ERROR_INTERNAL_ERROR = C.GTK_PRINT_ERROR_INTERNAL_ERROR
const SCROLL_PAGES = C.GTK_SCROLL_PAGES
const TREE_VIEW_GRID_LINES_BOTH = C.GTK_TREE_VIEW_GRID_LINES_BOTH
const CSS_PROVIDER_ERROR_UNKNOWN_VALUE = C.GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
const STOCK_COPY = C.GTK_STOCK_COPY
const BUILDER_ERROR_INVALID_TAG = C.GTK_BUILDER_ERROR_INVALID_TAG
const STOCK_SORT_ASCENDING = C.GTK_STOCK_SORT_ASCENDING
const IMAGE_ICON_SET = C.GTK_IMAGE_ICON_SET
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT
const MOVEMENT_WORDS = C.GTK_MOVEMENT_WORDS
const STOCK_PROPERTIES = C.GTK_STOCK_PROPERTIES
const STOCK_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
const STYLE_CLASS_LEFT = C.GTK_STYLE_CLASS_LEFT
const SIZE_REQUEST_HEIGHT_FOR_WIDTH = C.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP
const PACK_DIRECTION_LTR = C.GTK_PACK_DIRECTION_LTR
const RESPONSE_CLOSE = C.GTK_RESPONSE_CLOSE
const WRAP_WORD = C.GTK_WRAP_WORD
const STYLE_PROPERTY_BORDER_COLOR = C.GTK_STYLE_PROPERTY_BORDER_COLOR
const TREE_MODEL_LIST_ONLY = C.GTK_TREE_MODEL_LIST_ONLY
const STYLE_CLASS_LEVEL_BAR = C.GTK_STYLE_CLASS_LEVEL_BAR
const CSS_PROVIDER_ERROR_NAME = C.GTK_CSS_PROVIDER_ERROR_NAME
const RC_BASE = C.GTK_RC_BASE
const APPLICATION_INHIBIT_IDLE = C.GTK_APPLICATION_INHIBIT_IDLE
const STYLE_CLASS_PROGRESSBAR = C.GTK_STYLE_CLASS_PROGRESSBAR
const ASSISTANT_PAGE_CONTENT = C.GTK_ASSISTANT_PAGE_CONTENT
const JUNCTION_CORNER_BOTTOMRIGHT = C.GTK_JUNCTION_CORNER_BOTTOMRIGHT
const SCROLL_HORIZONTAL_STEPS = C.GTK_SCROLL_HORIZONTAL_STEPS
const BUTTONBOX_START = C.GTK_BUTTONBOX_START
const DIALOG_MODAL = C.GTK_DIALOG_MODAL
const IMAGE_ICON_NAME = C.GTK_IMAGE_ICON_NAME
const STOCK_PRINT_PREVIEW = C.GTK_STOCK_PRINT_PREVIEW
const RC_TOKEN_IM_MODULE_FILE = C.GTK_RC_TOKEN_IM_MODULE_FILE
const EXPANDER_COLLAPSED = C.GTK_EXPANDER_COLLAPSED
const JUSTIFY_RIGHT = C.GTK_JUSTIFY_RIGHT
const STOCK_INDEX = C.GTK_STOCK_INDEX
const STATE_FLAG_NORMAL = C.GTK_STATE_FLAG_NORMAL
const WIN_POS_CENTER_ON_PARENT = C.GTK_WIN_POS_CENTER_ON_PARENT
const STATE_FLAG_INCONSISTENT = C.GTK_STATE_FLAG_INCONSISTENT
const SIZE_GROUP_VERTICAL = C.GTK_SIZE_GROUP_VERTICAL
const STYLE_CLASS_BOTTOM = C.GTK_STYLE_CLASS_BOTTOM
const ASSISTANT_PAGE_INTRO = C.GTK_ASSISTANT_PAGE_INTRO
const PRINT_SETTINGS_PAGE_RANGES = C.GTK_PRINT_SETTINGS_PAGE_RANGES
const STYLE_CLASS_DND = C.GTK_STYLE_CLASS_DND
const LICENSE_GPL_3_0 = C.GTK_LICENSE_GPL_3_0
const RESPONSE_YES = C.GTK_RESPONSE_YES
const RC_TOKEN_UNBIND = C.GTK_RC_TOKEN_UNBIND
const DEBUG_NO_CSS_CACHE = C.GTK_DEBUG_NO_CSS_CACHE
const PRINT_STATUS_INITIAL = C.GTK_PRINT_STATUS_INITIAL
const JUNCTION_RIGHT = C.GTK_JUNCTION_RIGHT
const REGION_ODD = C.GTK_REGION_ODD
const SENSITIVITY_OFF = C.GTK_SENSITIVITY_OFF
const RC_TOKEN_WIDGET_CLASS = C.GTK_RC_TOKEN_WIDGET_CLASS
const STOCK_HOME = C.GTK_STOCK_HOME
const SCROLL_HORIZONTAL_PAGES = C.GTK_SCROLL_HORIZONTAL_PAGES
const STYLE_CLASS_PANE_SEPARATOR = C.GTK_STYLE_CLASS_PANE_SEPARATOR
const STOCK_GOTO_LAST = C.GTK_STOCK_GOTO_LAST
const CELL_RENDERER_INSENSITIVE = C.GTK_CELL_RENDERER_INSENSITIVE
const CSS_PROVIDER_ERROR_IMPORT = C.GTK_CSS_PROVIDER_ERROR_IMPORT
const IMAGE_STOCK = C.GTK_IMAGE_STOCK
const PRIORITY_RESIZE = C.GTK_PRIORITY_RESIZE
const ARROWS_START = C.GTK_ARROWS_START
const ASSISTANT_PAGE_PROGRESS = C.GTK_ASSISTANT_PAGE_PROGRESS
const DIR_UP = C.GTK_DIR_UP
const TREE_VIEW_GRID_LINES_VERTICAL = C.GTK_TREE_VIEW_GRID_LINES_VERTICAL
const STOCK_UNDO = C.GTK_STOCK_UNDO
const DEBUG_MISC = C.GTK_DEBUG_MISC
const STOCK_REMOVE = C.GTK_STOCK_REMOVE
const SIZE_GROUP_HORIZONTAL = C.GTK_SIZE_GROUP_HORIZONTAL
const INPUT_HINT_UPPERCASE_WORDS = C.GTK_INPUT_HINT_UPPERCASE_WORDS
const PACK_DIRECTION_BTT = C.GTK_PACK_DIRECTION_BTT
const PRINT_SETTINGS_PAPER_HEIGHT = C.GTK_PRINT_SETTINGS_PAPER_HEIGHT
const STOCK_NETWORK = C.GTK_STOCK_NETWORK
const STOCK_HARDDISK = C.GTK_STOCK_HARDDISK
const ICON_VIEW_DROP_RIGHT = C.GTK_ICON_VIEW_DROP_RIGHT
const ASSISTANT_PAGE_CONFIRM = C.GTK_ASSISTANT_PAGE_CONFIRM
const RC_TOKEN_TEXT = C.GTK_RC_TOKEN_TEXT
const PAGE_SET_ALL = C.GTK_PAGE_SET_ALL
const SCROLL_STEP_BACKWARD = C.GTK_SCROLL_STEP_BACKWARD
const TREE_VIEW_COLUMN_AUTOSIZE = C.GTK_TREE_VIEW_COLUMN_AUTOSIZE
const UNIT_NONE = C.GTK_UNIT_NONE
const TOOLBAR_SPACE_LINE = C.GTK_TOOLBAR_SPACE_LINE
const INPUT_PURPOSE_DIGITS = C.GTK_INPUT_PURPOSE_DIGITS
const SCROLL_PAGE_DOWN = C.GTK_SCROLL_PAGE_DOWN
const PAGE_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
const BORDER_STYLE_GROOVE = C.GTK_BORDER_STYLE_GROOVE
const SELECTION_SINGLE = C.GTK_SELECTION_SINGLE
const RC_TOKEN_NORMAL = C.GTK_RC_TOKEN_NORMAL
const STYLE_CLASS_PULSE = C.GTK_STYLE_CLASS_PULSE
const BUTTONS_OK_CANCEL = C.GTK_BUTTONS_OK_CANCEL
const CSS_SECTION_DOCUMENT = C.GTK_CSS_SECTION_DOCUMENT
const RC_TOKEN_FONT_NAME = C.GTK_RC_TOKEN_FONT_NAME
const STOCK_SELECT_ALL = C.GTK_STOCK_SELECT_ALL
const BINARY_AGE = C.GTK_BINARY_AGE
const STYLE_CLASS_DOCK = C.GTK_STYLE_CLASS_DOCK
const RESPONSE_DELETE_EVENT = C.GTK_RESPONSE_DELETE_EVENT
const STYLE_REGION_TAB = C.GTK_STYLE_REGION_TAB
const STOCK_ABOUT = C.GTK_STOCK_ABOUT
const MESSAGE_INFO = C.GTK_MESSAGE_INFO
const CSS_SECTION_BINDING_SET = C.GTK_CSS_SECTION_BINDING_SET
const CORNER_BOTTOM_LEFT = C.GTK_CORNER_BOTTOM_LEFT
const TEXT_BUFFER_TARGET_INFO_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_TEXT
const PRINT_SETTINGS_QUALITY = C.GTK_PRINT_SETTINGS_QUALITY
const STOCK_DELETE = C.GTK_STOCK_DELETE
const STOCK_SORT_DESCENDING = C.GTK_STOCK_SORT_DESCENDING
const GTK_STATE_ACTIVE = C.GTK_STATE_ACTIVE
const STOCK_UNDELETE = C.GTK_STOCK_UNDELETE
const STOCK_DIALOG_AUTHENTICATION = C.GTK_STOCK_DIALOG_AUTHENTICATION
const STOCK_NO = C.GTK_STOCK_NO
const PRINT_SETTINGS_RESOLUTION_Y = C.GTK_PRINT_SETTINGS_RESOLUTION_Y
const STYLE_CLASS_CHECK = C.GTK_STYLE_CLASS_CHECK
const ICON_LOOKUP_FORCE_SIZE = C.GTK_ICON_LOOKUP_FORCE_SIZE
const PRINT_STATUS_SENDING_DATA = C.GTK_PRINT_STATUS_SENDING_DATA
const PAGE_ORIENTATION_PORTRAIT = C.GTK_PAGE_ORIENTATION_PORTRAIT
const RESPONSE_OK = C.GTK_RESPONSE_OK
const TREE_VIEW_GRID_LINES_HORIZONTAL = C.GTK_TREE_VIEW_GRID_LINES_HORIZONTAL
const STOCK_ITALIC = C.GTK_STOCK_ITALIC
const POS_LEFT = C.GTK_POS_LEFT
const SCROLL_PAGE_BACKWARD = C.GTK_SCROLL_PAGE_BACKWARD
const RC_FG = C.GTK_RC_FG
const STOCK_YES = C.GTK_STOCK_YES
const REGION_FIRST = C.GTK_REGION_FIRST
const STYLE_CLASS_MENUITEM = C.GTK_STYLE_CLASS_MENUITEM
const ARROW_DOWN = C.GTK_ARROW_DOWN
const STYLE_CLASS_PRIMARY_TOOLBAR = C.GTK_STYLE_CLASS_PRIMARY_TOOLBAR
const GTK_STATE_FOCUSED = C.GTK_STATE_FOCUSED
const DRAG_RESULT_NO_TARGET = C.GTK_DRAG_RESULT_NO_TARGET
const INPUT_HINT_WORD_COMPLETION = C.GTK_INPUT_HINT_WORD_COMPLETION
const RESPONSE_NONE = C.GTK_RESPONSE_NONE
const PRINT_SETTINGS_ORIENTATION = C.GTK_PRINT_SETTINGS_ORIENTATION
const STYLE_CLASS_RUBBERBAND = C.GTK_STYLE_CLASS_RUBBERBAND
const CELL_RENDERER_MODE_ACTIVATABLE = C.GTK_CELL_RENDERER_MODE_ACTIVATABLE
const ICON_VIEW_DROP_LEFT = C.GTK_ICON_VIEW_DROP_LEFT
const DELETE_WORD_ENDS = C.GTK_DELETE_WORD_ENDS
const POS_TOP = C.GTK_POS_TOP
const STATE_FLAG_INSENSITIVE = C.GTK_STATE_FLAG_INSENSITIVE
const STOCK_GO_FORWARD = C.GTK_STOCK_GO_FORWARD
const INPUT_HINT_SPELLCHECK = C.GTK_INPUT_HINT_SPELLCHECK
const STYLE_CLASS_SEPARATOR = C.GTK_STYLE_CLASS_SEPARATOR
const DEST_DEFAULT_HIGHLIGHT = C.GTK_DEST_DEFAULT_HIGHLIGHT
const IM_STATUS_NOTHING = C.GTK_IM_STATUS_NOTHING
const LICENSE_GPL_2_0 = C.GTK_LICENSE_GPL_2_0
const TOOLBAR_BOTH_HORIZ = C.GTK_TOOLBAR_BOTH_HORIZ
const PACK_DIRECTION_RTL = C.GTK_PACK_DIRECTION_RTL
const STATE_FLAG_BACKDROP = C.GTK_STATE_FLAG_BACKDROP
const RC_TOKEN_FONT = C.GTK_RC_TOKEN_FONT
const PRINT_SETTINGS_OUTPUT_URI = C.GTK_PRINT_SETTINGS_OUTPUT_URI
const STOCK_DIALOG_ERROR = C.GTK_STOCK_DIALOG_ERROR
const ICON_SIZE_BUTTON = C.GTK_ICON_SIZE_BUTTON
const SELECTION_NONE = C.GTK_SELECTION_NONE
const STYLE_CLASS_SIDEBAR = C.GTK_STYLE_CLASS_SIDEBAR
const STATE_INCONSISTENT = C.GTK_STATE_INCONSISTENT
const STOCK_DND_MULTIPLE = C.GTK_STOCK_DND_MULTIPLE
const RC_TOKEN_BIND = C.GTK_RC_TOKEN_BIND
const JUNCTION_CORNER_TOPRIGHT = C.GTK_JUNCTION_CORNER_TOPRIGHT
const EXPANDER_SEMI_COLLAPSED = C.GTK_EXPANDER_SEMI_COLLAPSED
const IMAGE_EMPTY = C.GTK_IMAGE_EMPTY
const INPUT_PURPOSE_PIN = C.GTK_INPUT_PURPOSE_PIN
const STOCK_DND = C.GTK_STOCK_DND
const STOCK_JUSTIFY_RIGHT = C.GTK_STOCK_JUSTIFY_RIGHT
const STYLE_CLASS_OSD = C.GTK_STYLE_CLASS_OSD
const BUTTONS_CANCEL = C.GTK_BUTTONS_CANCEL
const IMAGE_ANIMATION = C.GTK_IMAGE_ANIMATION
const EXPAND = C.GTK_EXPAND
const STOCK_ORIENTATION_PORTRAIT = C.GTK_STOCK_ORIENTATION_PORTRAIT
const DRAG_RESULT_GRAB_BROKEN = C.GTK_DRAG_RESULT_GRAB_BROKEN
const PRINT_SETTINGS_FINISHINGS = C.GTK_PRINT_SETTINGS_FINISHINGS
const BUTTONBOX_SPREAD = C.GTK_BUTTONBOX_SPREAD
const PRINT_STATUS_PRINTING = C.GTK_PRINT_STATUS_PRINTING
const PAPER_NAME_LEGAL = C.GTK_PAPER_NAME_LEGAL
const ARROW_LEFT = C.GTK_ARROW_LEFT
const ARROW_RIGHT = C.GTK_ARROW_RIGHT
const MENU_DIR_PREV = C.GTK_MENU_DIR_PREV
const DIR_RIGHT = C.GTK_DIR_RIGHT
const PRINT_SETTINGS_PRINTER = C.GTK_PRINT_SETTINGS_PRINTER
const STYLE_REGION_COLUMN_HEADER = C.GTK_STYLE_REGION_COLUMN_HEADER
const ICON_SIZE_LARGE_TOOLBAR = C.GTK_ICON_SIZE_LARGE_TOOLBAR
const STATE_FLAG_FOCUSED = C.GTK_STATE_FLAG_FOCUSED
const BUILDER_ERROR_UNHANDLED_TAG = C.GTK_BUILDER_ERROR_UNHANDLED_TAG
const DEBUG_PLUGSOCKET = C.GTK_DEBUG_PLUGSOCKET
const CELL_RENDERER_MODE_EDITABLE = C.GTK_CELL_RENDERER_MODE_EDITABLE
const DEBUG_MODULES = C.GTK_DEBUG_MODULES
const SCROLL_STEP_RIGHT = C.GTK_SCROLL_STEP_RIGHT
const STOCK_GO_DOWN = C.GTK_STOCK_GO_DOWN
const RECENT_FILTER_GROUP = C.GTK_RECENT_FILTER_GROUP
const SIZE_REQUEST_WIDTH_FOR_HEIGHT = C.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT
const STYLE_CLASS_CURSOR_HANDLE = C.GTK_STYLE_CLASS_CURSOR_HANDLE
const INPUT_PURPOSE_ALPHA = C.GTK_INPUT_PURPOSE_ALPHA
const PACK_START = C.GTK_PACK_START
const DEBUG_SIZE_REQUEST = C.GTK_DEBUG_SIZE_REQUEST
const STYLE_PROPERTY_MARGIN = C.GTK_STYLE_PROPERTY_MARGIN
const PAGE_SET_ODD = C.GTK_PAGE_SET_ODD
const RC_BG = C.GTK_RC_BG
const FILE_FILTER_URI = C.GTK_FILE_FILTER_URI
const ICON_SIZE_DIALOG = C.GTK_ICON_SIZE_DIALOG
const STOCK_SAVE_AS = C.GTK_STOCK_SAVE_AS
const STOCK_SPELL_CHECK = C.GTK_STOCK_SPELL_CHECK
const INPUT_HINT_NO_SPELLCHECK = C.GTK_INPUT_HINT_NO_SPELLCHECK
const ICON_VIEW_DROP_INTO = C.GTK_ICON_VIEW_DROP_INTO
const CSS_PROVIDER_ERROR_SYNTAX = C.GTK_CSS_PROVIDER_ERROR_SYNTAX
const STOCK_MEDIA_RECORD = C.GTK_STOCK_MEDIA_RECORD
const UNIT_POINTS = C.GTK_UNIT_POINTS
const TEXT_WINDOW_RIGHT = C.GTK_TEXT_WINDOW_RIGHT
const STYLE_CLASS_RAISED = C.GTK_STYLE_CLASS_RAISED
const LEVEL_BAR_OFFSET_LOW = C.GTK_LEVEL_BAR_OFFSET_LOW
const JUSTIFY_LEFT = C.GTK_JUSTIFY_LEFT
const PRINT_SETTINGS_OUTPUT_DIR = C.GTK_PRINT_SETTINGS_OUTPUT_DIR
const LICENSE_ARTISTIC = C.GTK_LICENSE_ARTISTIC
const RC_TOKEN_FONTSET = C.GTK_RC_TOKEN_FONTSET
const RC_TOKEN_CLASS = C.GTK_RC_TOKEN_CLASS
const INPUT_HINT_INHIBIT_OSK = C.GTK_INPUT_HINT_INHIBIT_OSK
const TOOLBAR_BOTH = C.GTK_TOOLBAR_BOTH
const SCROLL_START = C.GTK_SCROLL_START
const SELECTION_MULTIPLE = C.GTK_SELECTION_MULTIPLE
const JUNCTION_TOP = C.GTK_JUNCTION_TOP
const REGION_SORTED = C.GTK_REGION_SORTED
const LICENSE_MIT_X11 = C.GTK_LICENSE_MIT_X11
const ICON_SIZE_MENU = C.GTK_ICON_SIZE_MENU
const STOCK_HELP = C.GTK_STOCK_HELP
const INPUT_PURPOSE_NAME = C.GTK_INPUT_PURPOSE_NAME
const SCROLL_PAGE_RIGHT = C.GTK_SCROLL_PAGE_RIGHT
const SIZE_GROUP_BOTH = C.GTK_SIZE_GROUP_BOTH
const DEBUG_UPDATES = C.GTK_DEBUG_UPDATES
const WRAP_WORD_CHAR = C.GTK_WRAP_WORD_CHAR
const UPDATE_ALWAYS = C.GTK_UPDATE_ALWAYS
const STOCK_INDENT = C.GTK_STOCK_INDENT
const STYLE_CLASS_HIGHLIGHT = C.GTK_STYLE_CLASS_HIGHLIGHT
const BUILDER_ERROR_MISSING_PROPERTY_VALUE = C.GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
const UI_MANAGER_POPUP = C.GTK_UI_MANAGER_POPUP
const PATH_PRIO_RC = C.GTK_PATH_PRIO_RC
const STYLE_CLASS_TOOLBAR = C.GTK_STYLE_CLASS_TOOLBAR
const MICRO_VERSION = C.GTK_MICRO_VERSION
const DEBUG_PRINTING = C.GTK_DEBUG_PRINTING
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA
const UNIT_MM = C.GTK_UNIT_MM
const ICON_THEME_NOT_FOUND = C.GTK_ICON_THEME_NOT_FOUND
const SHADOW_ETCHED_IN = C.GTK_SHADOW_ETCHED_IN
const STYLE_PROPERTY_BORDER_RADIUS = C.GTK_STYLE_PROPERTY_BORDER_RADIUS
const PATH_WIDGET_CLASS = C.GTK_PATH_WIDGET_CLASS
const IMAGE_GICON = C.GTK_IMAGE_GICON
const STOCK_CONVERT = C.GTK_STOCK_CONVERT
const TARGET_OTHER_APP = C.GTK_TARGET_OTHER_APP
const SCROLL_STEP_DOWN = C.GTK_SCROLL_STEP_DOWN
const TEXT_WINDOW_TOP = C.GTK_TEXT_WINDOW_TOP
const RECENT_MANAGER_ERROR_NOT_FOUND = C.GTK_RECENT_MANAGER_ERROR_NOT_FOUND
const REGION_EVEN = C.GTK_REGION_EVEN
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION
const DIR_DOWN = C.GTK_DIR_DOWN
const IM_STATUS_CALLBACK = C.GTK_IM_STATUS_CALLBACK
const TREE_VIEW_DROP_INTO_OR_AFTER = C.GTK_TREE_VIEW_DROP_INTO_OR_AFTER
const CSS_SECTION_COLOR_DEFINITION = C.GTK_CSS_SECTION_COLOR_DEFINITION
const WIN_POS_CENTER = C.GTK_WIN_POS_CENTER
const RC_TOKEN_GTK = C.GTK_RC_TOKEN_GTK
const PRINT_SETTINGS_NUMBER_UP = C.GTK_PRINT_SETTINGS_NUMBER_UP
const RESPONSE_APPLY = C.GTK_RESPONSE_APPLY
const BORDER_STYLE_HIDDEN = C.GTK_BORDER_STYLE_HIDDEN
const DELETE_WORDS = C.GTK_DELETE_WORDS
const ARROW_NONE = C.GTK_ARROW_NONE
const DELETE_PARAGRAPH_ENDS = C.GTK_DELETE_PARAGRAPH_ENDS
const STOCK_OK = C.GTK_STOCK_OK
const RECENT_CHOOSER_ERROR_NOT_FOUND = C.GTK_RECENT_CHOOSER_ERROR_NOT_FOUND
const WRAP_CHAR = C.GTK_WRAP_CHAR
const STOCK_MEDIA_PAUSE = C.GTK_STOCK_MEDIA_PAUSE
const RELIEF_NORMAL = C.GTK_RELIEF_NORMAL
const RECENT_MANAGER_ERROR_NOT_REGISTERED = C.GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED
const STYLE_CLASS_INFO = C.GTK_STYLE_CLASS_INFO
const RESPONSE_NO = C.GTK_RESPONSE_NO
const RECENT_FILTER_APPLICATION = C.GTK_RECENT_FILTER_APPLICATION
const STYLE_CLASS_DIM_LABEL = C.GTK_STYLE_CLASS_DIM_LABEL
const TREE_VIEW_GRID_LINES_NONE = C.GTK_TREE_VIEW_GRID_LINES_NONE
const TREE_VIEW_COLUMN_FIXED = C.GTK_TREE_VIEW_COLUMN_FIXED
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP
const STOCK_FLOPPY = C.GTK_STOCK_FLOPPY
const IM_STATUS_NONE = C.GTK_IM_STATUS_NONE
const RECENT_FILTER_DISPLAY_NAME = C.GTK_RECENT_FILTER_DISPLAY_NAME
const STOCK_ORIENTATION_LANDSCAPE = C.GTK_STOCK_ORIENTATION_LANDSCAPE
const STYLE_CLASS_ACCELERATOR = C.GTK_STYLE_CLASS_ACCELERATOR
const TEXT_DIR_LTR = C.GTK_TEXT_DIR_LTR
const RC_TOKEN_BG = C.GTK_RC_TOKEN_BG
const UI_MANAGER_MENU = C.GTK_UI_MANAGER_MENU
const PRINT_DUPLEX_VERTICAL = C.GTK_PRINT_DUPLEX_VERTICAL
const STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE
const RELIEF_HALF = C.GTK_RELIEF_HALF
const PRINT_SETTINGS_PAPER_FORMAT = C.GTK_PRINT_SETTINGS_PAPER_FORMAT
const BORDER_STYLE_SOLID = C.GTK_BORDER_STYLE_SOLID
const MOVEMENT_HORIZONTAL_PAGES = C.GTK_MOVEMENT_HORIZONTAL_PAGES
const STYLE_CLASS_SCROLLBAR = C.GTK_STYLE_CLASS_SCROLLBAR
const PATH_PRIO_HIGHEST = C.GTK_PATH_PRIO_HIGHEST
const STYLE_CLASS_MARK = C.GTK_STYLE_CLASS_MARK
const IMAGE_PIXBUF = C.GTK_IMAGE_PIXBUF
const STOCK_ZOOM_OUT = C.GTK_STOCK_ZOOM_OUT
const STOCK_FIND_AND_REPLACE = C.GTK_STOCK_FIND_AND_REPLACE
