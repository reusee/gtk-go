// this file is auto-generated by gtk-go

package gtk

// #cgo pkg-config: gtk+-3.0 gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <gtk/gtkx.h>
/*
void _gtk_about_dialog_add_credit_section(GtkAboutDialog * _self_, gchar * section_name, void * people) {
	(void)gtk_about_dialog_add_credit_section(_self_, (const gchar *)(section_name), (const gchar **)(people));
}
void * _gtk_about_dialog_get_artists(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_artists(_self_);
}
void * _gtk_about_dialog_get_authors(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_authors(_self_);
}
gchar * _gtk_about_dialog_get_comments(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_comments(_self_);
}
gchar * _gtk_about_dialog_get_copyright(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_copyright(_self_);
}
void * _gtk_about_dialog_get_documenters(GtkAboutDialog * _self_) {
	return (void *)gtk_about_dialog_get_documenters(_self_);
}
gchar * _gtk_about_dialog_get_license(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_license(_self_);
}
gchar * _gtk_about_dialog_get_logo_icon_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_logo_icon_name(_self_);
}
gchar * _gtk_about_dialog_get_program_name(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_program_name(_self_);
}
gchar * _gtk_about_dialog_get_translator_credits(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_translator_credits(_self_);
}
gchar * _gtk_about_dialog_get_version(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_version(_self_);
}
gchar * _gtk_about_dialog_get_website(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website(_self_);
}
gchar * _gtk_about_dialog_get_website_label(GtkAboutDialog * _self_) {
	return (gchar *)gtk_about_dialog_get_website_label(_self_);
}
void _gtk_about_dialog_set_artists(GtkAboutDialog * _self_, void * artists) {
	(void)gtk_about_dialog_set_artists(_self_, (const gchar **)(artists));
}
void _gtk_about_dialog_set_authors(GtkAboutDialog * _self_, void * authors) {
	(void)gtk_about_dialog_set_authors(_self_, (const gchar **)(authors));
}
void _gtk_about_dialog_set_comments(GtkAboutDialog * _self_, gchar * comments) {
	(void)gtk_about_dialog_set_comments(_self_, (const gchar *)(comments));
}
void _gtk_about_dialog_set_copyright(GtkAboutDialog * _self_, gchar * copyright) {
	(void)gtk_about_dialog_set_copyright(_self_, (const gchar *)(copyright));
}
void _gtk_about_dialog_set_documenters(GtkAboutDialog * _self_, void * documenters) {
	(void)gtk_about_dialog_set_documenters(_self_, (const gchar **)(documenters));
}
void _gtk_about_dialog_set_license(GtkAboutDialog * _self_, gchar * license) {
	(void)gtk_about_dialog_set_license(_self_, (const gchar *)(license));
}
void _gtk_about_dialog_set_logo_icon_name(GtkAboutDialog * _self_, gchar * icon_name) {
	(void)gtk_about_dialog_set_logo_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_about_dialog_set_program_name(GtkAboutDialog * _self_, gchar * name) {
	(void)gtk_about_dialog_set_program_name(_self_, (const gchar *)(name));
}
void _gtk_about_dialog_set_translator_credits(GtkAboutDialog * _self_, gchar * translator_credits) {
	(void)gtk_about_dialog_set_translator_credits(_self_, (const gchar *)(translator_credits));
}
void _gtk_about_dialog_set_version(GtkAboutDialog * _self_, gchar * version) {
	(void)gtk_about_dialog_set_version(_self_, (const gchar *)(version));
}
void _gtk_about_dialog_set_website(GtkAboutDialog * _self_, gchar * website) {
	(void)gtk_about_dialog_set_website(_self_, (const gchar *)(website));
}
void _gtk_about_dialog_set_website_label(GtkAboutDialog * _self_, gchar * website_label) {
	(void)gtk_about_dialog_set_website_label(_self_, (const gchar *)(website_label));
}
void _gtk_accel_group_connect_by_path(GtkAccelGroup * _self_, gchar * accel_path, GClosure * closure) {
	(void)gtk_accel_group_connect_by_path(_self_, (const gchar *)(accel_path), closure);
}
GtkWidget * _gtk_accel_label_new(gchar * string) {
	return (GtkWidget *)gtk_accel_label_new((const gchar *)(string));
}
void _gtk_accel_map_add_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods) {
	(void)gtk_accel_map_add_entry((const gchar *)(accel_path), accel_key, accel_mods);
}
void _gtk_accel_map_add_filter(gchar * filter_pattern) {
	(void)gtk_accel_map_add_filter((const gchar *)(filter_pattern));
}
gboolean _gtk_accel_map_change_entry(gchar * accel_path, guint accel_key, GdkModifierType accel_mods, gboolean replace) {
	return (gboolean)gtk_accel_map_change_entry((const gchar *)(accel_path), accel_key, accel_mods, replace);
}
void _gtk_accel_map_load(gchar * file_name) {
	(void)gtk_accel_map_load((const gchar *)(file_name));
}
void _gtk_accel_map_lock_path(gchar * accel_path) {
	(void)gtk_accel_map_lock_path((const gchar *)(accel_path));
}
gboolean _gtk_accel_map_lookup_entry(gchar * accel_path, GtkAccelKey * key) {
	return (gboolean)gtk_accel_map_lookup_entry((const gchar *)(accel_path), key);
}
void _gtk_accel_map_save(gchar * file_name) {
	(void)gtk_accel_map_save((const gchar *)(file_name));
}
void _gtk_accel_map_unlock_path(gchar * accel_path) {
	(void)gtk_accel_map_unlock_path((const gchar *)(accel_path));
}
GtkAction * _gtk_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
gchar * _gtk_action_get_accel_path(GtkAction * _self_) {
	return (gchar *)gtk_action_get_accel_path(_self_);
}
gchar * _gtk_action_get_icon_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_icon_name(_self_);
}
gchar * _gtk_action_get_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_label(_self_);
}
gchar * _gtk_action_get_name(GtkAction * _self_) {
	return (gchar *)gtk_action_get_name(_self_);
}
gchar * _gtk_action_get_short_label(GtkAction * _self_) {
	return (gchar *)gtk_action_get_short_label(_self_);
}
gchar * _gtk_action_get_stock_id(GtkAction * _self_) {
	return (gchar *)gtk_action_get_stock_id(_self_);
}
gchar * _gtk_action_get_tooltip(GtkAction * _self_) {
	return (gchar *)gtk_action_get_tooltip(_self_);
}
void _gtk_action_set_accel_path(GtkAction * _self_, gchar * accel_path) {
	(void)gtk_action_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_action_set_icon_name(GtkAction * _self_, gchar * icon_name) {
	(void)gtk_action_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_action_set_label(GtkAction * _self_, gchar * label) {
	(void)gtk_action_set_label(_self_, (const gchar *)(label));
}
void _gtk_action_set_short_label(GtkAction * _self_, gchar * short_label) {
	(void)gtk_action_set_short_label(_self_, (const gchar *)(short_label));
}
void _gtk_action_set_stock_id(GtkAction * _self_, gchar * stock_id) {
	(void)gtk_action_set_stock_id(_self_, (const gchar *)(stock_id));
}
void _gtk_action_set_tooltip(GtkAction * _self_, gchar * tooltip) {
	(void)gtk_action_set_tooltip(_self_, (const gchar *)(tooltip));
}
GtkActionGroup * _gtk_action_group_new(gchar * name) {
	return (GtkActionGroup *)gtk_action_group_new((const gchar *)(name));
}
void _gtk_action_group_add_action_with_accel(GtkActionGroup * _self_, GtkAction * action, gchar * accelerator) {
	(void)gtk_action_group_add_action_with_accel(_self_, action, (const gchar *)(accelerator));
}
void _gtk_action_group_add_actions(GtkActionGroup * _self_, GtkActionEntry * entries, guint n_entries, gpointer user_data) {
	(void)gtk_action_group_add_actions(_self_, (const GtkActionEntry *)(entries), n_entries, user_data);
}
void _gtk_action_group_add_actions_full(GtkActionGroup * _self_, GtkActionEntry * entries, guint n_entries, gpointer user_data, GDestroyNotify destroy) {
	(void)gtk_action_group_add_actions_full(_self_, (const GtkActionEntry *)(entries), n_entries, user_data, destroy);
}
void _gtk_action_group_add_radio_actions(GtkActionGroup * _self_, GtkRadioActionEntry * entries, guint n_entries, gint value, GCallback on_change, gpointer user_data) {
	(void)gtk_action_group_add_radio_actions(_self_, (const GtkRadioActionEntry *)(entries), n_entries, value, on_change, user_data);
}
void _gtk_action_group_add_radio_actions_full(GtkActionGroup * _self_, GtkRadioActionEntry * entries, guint n_entries, gint value, GCallback on_change, gpointer user_data, GDestroyNotify destroy) {
	(void)gtk_action_group_add_radio_actions_full(_self_, (const GtkRadioActionEntry *)(entries), n_entries, value, on_change, user_data, destroy);
}
void _gtk_action_group_add_toggle_actions(GtkActionGroup * _self_, GtkToggleActionEntry * entries, guint n_entries, gpointer user_data) {
	(void)gtk_action_group_add_toggle_actions(_self_, (const GtkToggleActionEntry *)(entries), n_entries, user_data);
}
void _gtk_action_group_add_toggle_actions_full(GtkActionGroup * _self_, GtkToggleActionEntry * entries, guint n_entries, gpointer user_data, GDestroyNotify destroy) {
	(void)gtk_action_group_add_toggle_actions_full(_self_, (const GtkToggleActionEntry *)(entries), n_entries, user_data, destroy);
}
GtkAction * _gtk_action_group_get_action(GtkActionGroup * _self_, gchar * action_name) {
	return (GtkAction *)gtk_action_group_get_action(_self_, (const gchar *)(action_name));
}
gchar * _gtk_action_group_get_name(GtkActionGroup * _self_) {
	return (gchar *)gtk_action_group_get_name(_self_);
}
void _gtk_action_group_set_translation_domain(GtkActionGroup * _self_, gchar * domain) {
	(void)gtk_action_group_set_translation_domain(_self_, (const gchar *)(domain));
}
gchar * _gtk_action_group_translate_string(GtkActionGroup * _self_, gchar * string) {
	return (gchar *)gtk_action_group_translate_string(_self_, (const gchar *)(string));
}
GtkWidget * _gtk_app_chooser_button_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_button_new((const gchar *)(content_type));
}
void _gtk_app_chooser_button_append_custom_item(GtkAppChooserButton * _self_, gchar * name, gchar * label, GIcon * icon) {
	(void)gtk_app_chooser_button_append_custom_item(_self_, (const gchar *)(name), (const gchar *)(label), icon);
}
gchar * _gtk_app_chooser_button_get_heading(GtkAppChooserButton * _self_) {
	return (gchar *)gtk_app_chooser_button_get_heading(_self_);
}
void _gtk_app_chooser_button_set_active_custom_item(GtkAppChooserButton * _self_, gchar * name) {
	(void)gtk_app_chooser_button_set_active_custom_item(_self_, (const gchar *)(name));
}
void _gtk_app_chooser_button_set_heading(GtkAppChooserButton * _self_, gchar * heading) {
	(void)gtk_app_chooser_button_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_dialog_new_for_content_type(GtkWindow * parent, GtkDialogFlags flags, gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_dialog_new_for_content_type(parent, flags, (const gchar *)(content_type));
}
gchar * _gtk_app_chooser_dialog_get_heading(GtkAppChooserDialog * _self_) {
	return (gchar *)gtk_app_chooser_dialog_get_heading(_self_);
}
void _gtk_app_chooser_dialog_set_heading(GtkAppChooserDialog * _self_, gchar * heading) {
	(void)gtk_app_chooser_dialog_set_heading(_self_, (const gchar *)(heading));
}
GtkWidget * _gtk_app_chooser_widget_new(gchar * content_type) {
	return (GtkWidget *)gtk_app_chooser_widget_new((const gchar *)(content_type));
}
gchar * _gtk_app_chooser_widget_get_default_text(GtkAppChooserWidget * _self_) {
	return (gchar *)gtk_app_chooser_widget_get_default_text(_self_);
}
void _gtk_app_chooser_widget_set_default_text(GtkAppChooserWidget * _self_, gchar * text) {
	(void)gtk_app_chooser_widget_set_default_text(_self_, (const gchar *)(text));
}
GtkApplication * _gtk_application_new(gchar * application_id, GApplicationFlags flags) {
	return (GtkApplication *)gtk_application_new((const gchar *)(application_id), flags);
}
void _gtk_application_add_accelerator(GtkApplication * _self_, gchar * accelerator, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_add_accelerator(_self_, (const gchar *)(accelerator), (const gchar *)(action_name), parameter);
}
guint _gtk_application_inhibit(GtkApplication * _self_, GtkWindow * window, GtkApplicationInhibitFlags flags, gchar * reason) {
	return (guint)gtk_application_inhibit(_self_, window, flags, (const gchar *)(reason));
}
void _gtk_application_remove_accelerator(GtkApplication * _self_, gchar * action_name, GVariant * parameter) {
	(void)gtk_application_remove_accelerator(_self_, (const gchar *)(action_name), parameter);
}
GtkWidget * _gtk_aspect_frame_new(gchar * label, gfloat xalign, gfloat yalign, gfloat ratio, gboolean obey_child) {
	return (GtkWidget *)gtk_aspect_frame_new((const gchar *)(label), xalign, yalign, ratio, obey_child);
}
gchar * _gtk_assistant_get_page_title(GtkAssistant * _self_, GtkWidget * page) {
	return (gchar *)gtk_assistant_get_page_title(_self_, page);
}
void _gtk_assistant_set_page_title(GtkAssistant * _self_, GtkWidget * page, gchar * title) {
	(void)gtk_assistant_set_page_title(_self_, page, (const gchar *)(title));
}
GTokenType _gtk_binding_entry_add_signal_from_string(GtkBindingSet * binding_set, gchar * signal_desc) {
	return (GTokenType)gtk_binding_entry_add_signal_from_string(binding_set, (const gchar *)(signal_desc));
}
void _gtk_binding_entry_add_signall(GtkBindingSet * binding_set, guint keyval, GdkModifierType modifiers, gchar * signal_name, GSList * binding_args) {
	(void)gtk_binding_entry_add_signall(binding_set, keyval, modifiers, (const gchar *)(signal_name), binding_args);
}
GtkBindingSet * _gtk_binding_set_find(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_find((const gchar *)(set_name));
}
GtkBindingSet * _gtk_binding_set_new(gchar * set_name) {
	return (GtkBindingSet *)gtk_binding_set_new((const gchar *)(set_name));
}
GtkBorder * _gtk_border_copy(GtkBorder * _self_) {
	return (GtkBorder *)gtk_border_copy((const GtkBorder *)(_self_));
}
guint _gtk_builder_add_from_file(GtkBuilder * _self_, gchar * filename, void * _error_) {
	return (guint)gtk_builder_add_from_file(_self_, (const gchar *)(filename), (GError **)(_error_));
}
guint _gtk_builder_add_from_resource(GtkBuilder * _self_, gchar * resource_path, void * _error_) {
	return (guint)gtk_builder_add_from_resource(_self_, (const gchar *)(resource_path), (GError **)(_error_));
}
guint _gtk_builder_add_from_string(GtkBuilder * _self_, gchar * buffer, gsize length, void * _error_) {
	return (guint)gtk_builder_add_from_string(_self_, (const gchar *)(buffer), length, (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_file(GtkBuilder * _self_, gchar * filename, void * object_ids, void * _error_) {
	return (guint)gtk_builder_add_objects_from_file(_self_, (const gchar *)(filename), (gchar **)(object_ids), (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_resource(GtkBuilder * _self_, gchar * resource_path, void * object_ids, void * _error_) {
	return (guint)gtk_builder_add_objects_from_resource(_self_, (const gchar *)(resource_path), (gchar **)(object_ids), (GError **)(_error_));
}
guint _gtk_builder_add_objects_from_string(GtkBuilder * _self_, gchar * buffer, gsize length, void * object_ids, void * _error_) {
	return (guint)gtk_builder_add_objects_from_string(_self_, (const gchar *)(buffer), length, (gchar **)(object_ids), (GError **)(_error_));
}
GObject * _gtk_builder_get_object(GtkBuilder * _self_, gchar * name) {
	return (GObject *)gtk_builder_get_object(_self_, (const gchar *)(name));
}
gchar * _gtk_builder_get_translation_domain(GtkBuilder * _self_) {
	return (gchar *)gtk_builder_get_translation_domain(_self_);
}
GType _gtk_builder_get_type_from_name(GtkBuilder * _self_, char * type_name) {
	return (GType)gtk_builder_get_type_from_name(_self_, (const char *)(type_name));
}
void _gtk_builder_set_translation_domain(GtkBuilder * _self_, gchar * domain) {
	(void)gtk_builder_set_translation_domain(_self_, (const gchar *)(domain));
}
gboolean _gtk_builder_value_from_string(GtkBuilder * _self_, GParamSpec * pspec, gchar * string, GValue * value, void * _error_) {
	return (gboolean)gtk_builder_value_from_string(_self_, pspec, (const gchar *)(string), value, (GError **)(_error_));
}
gboolean _gtk_builder_value_from_string_type(GtkBuilder * _self_, GType type, gchar * string, GValue * value, void * _error_) {
	return (gboolean)gtk_builder_value_from_string_type(_self_, type, (const gchar *)(string), value, (GError **)(_error_));
}
GtkWidget * _gtk_button_new_from_stock(gchar * stock_id) {
	return (GtkWidget *)gtk_button_new_from_stock((const gchar *)(stock_id));
}
GtkWidget * _gtk_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_button_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_button_get_label(GtkButton * _self_) {
	return (gchar *)gtk_button_get_label(_self_);
}
void _gtk_button_set_label(GtkButton * _self_, gchar * label) {
	(void)gtk_button_set_label(_self_, (const gchar *)(label));
}
gboolean _gtk_cell_area_activate(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean edit_only) {
	return (gboolean)gtk_cell_area_activate(_self_, context, widget, (const GdkRectangle *)(cell_area), flags, edit_only);
}
gboolean _gtk_cell_area_activate_cell(GtkCellArea * _self_, GtkWidget * widget, GtkCellRenderer * renderer, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_area_activate_cell(_self_, widget, renderer, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_attribute_connect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute, gint column) {
	(void)gtk_cell_area_attribute_connect(_self_, renderer, (const gchar *)(attribute), column);
}
void _gtk_cell_area_attribute_disconnect(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * attribute) {
	(void)gtk_cell_area_attribute_disconnect(_self_, renderer, (const gchar *)(attribute));
}
void _gtk_cell_area_cell_get_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_get_property(_self_, renderer, (const gchar *)(property_name), value);
}
void _gtk_cell_area_cell_set_property(GtkCellArea * _self_, GtkCellRenderer * renderer, gchar * property_name, GValue * value) {
	(void)gtk_cell_area_cell_set_property(_self_, renderer, (const gchar *)(property_name), (const GValue *)(value));
}
gint _gtk_cell_area_event(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkEvent * event, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gint)gtk_cell_area_event(_self_, context, widget, event, (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_area_foreach_alloc(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * background_area, GtkCellAllocCallback callback, gpointer callback_data) {
	(void)gtk_cell_area_foreach_alloc(_self_, context, widget, (const GdkRectangle *)(cell_area), (const GdkRectangle *)(background_area), callback, callback_data);
}
void _gtk_cell_area_get_cell_allocation(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GtkCellRenderer * renderer, GdkRectangle * cell_area, GdkRectangle * allocation) {
	(void)gtk_cell_area_get_cell_allocation(_self_, context, widget, renderer, (const GdkRectangle *)(cell_area), allocation);
}
GtkCellRenderer * _gtk_cell_area_get_cell_at_position(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, GdkRectangle * cell_area, gint x, gint y, GdkRectangle * alloc_area) {
	return (GtkCellRenderer *)gtk_cell_area_get_cell_at_position(_self_, context, widget, (const GdkRectangle *)(cell_area), x, y, alloc_area);
}
gchar * _gtk_cell_area_get_current_path_string(GtkCellArea * _self_) {
	return (gchar *)gtk_cell_area_get_current_path_string(_self_);
}
GList * _gtk_cell_area_get_focus_siblings(GtkCellArea * _self_, GtkCellRenderer * renderer) {
	return (GList *)gtk_cell_area_get_focus_siblings(_self_, renderer);
}
void _gtk_cell_area_inner_cell_area(GtkCellArea * _self_, GtkWidget * widget, GdkRectangle * cell_area, GdkRectangle * inner_area) {
	(void)gtk_cell_area_inner_cell_area(_self_, widget, (const GdkRectangle *)(cell_area), inner_area);
}
void _gtk_cell_area_render(GtkCellArea * _self_, GtkCellAreaContext * context, GtkWidget * widget, cairo_t * cr, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags, gboolean paint_focus) {
	(void)gtk_cell_area_render(_self_, context, widget, cr, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags, paint_focus);
}
GParamSpec * _gtk_cell_area_class_find_cell_property(GtkCellAreaClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_cell_area_class_find_cell_property(_self_, (const gchar *)(property_name));
}
void * _gtk_cell_area_class_list_cell_properties(GtkCellAreaClass * _self_, guint * n_properties) {
	return (void *)gtk_cell_area_class_list_cell_properties(_self_, n_properties);
}
gboolean _gtk_cell_renderer_activate(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (gboolean)gtk_cell_renderer_activate(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
void _gtk_cell_renderer_get_aligned_area(GtkCellRenderer * _self_, GtkWidget * widget, GtkCellRendererState flags, GdkRectangle * cell_area, GdkRectangle * aligned_area) {
	(void)gtk_cell_renderer_get_aligned_area(_self_, widget, flags, (const GdkRectangle *)(cell_area), aligned_area);
}
void _gtk_cell_renderer_render(GtkCellRenderer * _self_, cairo_t * cr, GtkWidget * widget, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	(void)gtk_cell_renderer_render(_self_, cr, widget, (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkCellEditable * _gtk_cell_renderer_start_editing(GtkCellRenderer * _self_, GdkEvent * event, GtkWidget * widget, gchar * path, GdkRectangle * background_area, GdkRectangle * cell_area, GtkCellRendererState flags) {
	return (GtkCellEditable *)gtk_cell_renderer_start_editing(_self_, event, widget, (const gchar *)(path), (const GdkRectangle *)(background_area), (const GdkRectangle *)(cell_area), flags);
}
GtkWidget * _gtk_cell_view_new_with_markup(gchar * markup) {
	return (GtkWidget *)gtk_cell_view_new_with_markup((const gchar *)(markup));
}
GtkWidget * _gtk_cell_view_new_with_text(gchar * text) {
	return (GtkWidget *)gtk_cell_view_new_with_text((const gchar *)(text));
}
void _gtk_cell_view_set_background_rgba(GtkCellView * _self_, GdkRGBA * rgba) {
	(void)gtk_cell_view_set_background_rgba(_self_, (const GdkRGBA *)(rgba));
}
GtkWidget * _gtk_check_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_button_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_check_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_check_menu_item_new_with_mnemonic((const gchar *)(label));
}
void _gtk_clipboard_set_can_store(GtkClipboard * _self_, GtkTargetEntry * targets, gint n_targets) {
	(void)gtk_clipboard_set_can_store(_self_, (const GtkTargetEntry *)(targets), n_targets);
}
void _gtk_clipboard_set_text(GtkClipboard * _self_, gchar * text, gint len) {
	(void)gtk_clipboard_set_text(_self_, (const gchar *)(text), len);
}
gboolean _gtk_clipboard_set_with_data(GtkClipboard * _self_, GtkTargetEntry * targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, gpointer user_data) {
	return (gboolean)gtk_clipboard_set_with_data(_self_, (const GtkTargetEntry *)(targets), n_targets, get_func, clear_func, user_data);
}
gboolean _gtk_clipboard_set_with_owner(GtkClipboard * _self_, GtkTargetEntry * targets, guint n_targets, GtkClipboardGetFunc get_func, GtkClipboardClearFunc clear_func, GObject * owner) {
	return (gboolean)gtk_clipboard_set_with_owner(_self_, (const GtkTargetEntry *)(targets), n_targets, get_func, clear_func, owner);
}
gboolean _gtk_clipboard_wait_for_targets(GtkClipboard * _self_, void * targets, gint * n_targets) {
	return (gboolean)gtk_clipboard_wait_for_targets(_self_, (GdkAtom **)(targets), n_targets);
}
void * _gtk_clipboard_wait_for_uris(GtkClipboard * _self_) {
	return (void *)gtk_clipboard_wait_for_uris(_self_);
}
GtkWidget * _gtk_color_button_new_with_rgba(GdkRGBA * rgba) {
	return (GtkWidget *)gtk_color_button_new_with_rgba((const GdkRGBA *)(rgba));
}
gchar * _gtk_color_button_get_title(GtkColorButton * _self_) {
	return (gchar *)gtk_color_button_get_title(_self_);
}
void _gtk_color_button_set_title(GtkColorButton * _self_, gchar * title) {
	(void)gtk_color_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_color_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_color_chooser_dialog_new((const gchar *)(title), parent);
}
gchar * _gtk_combo_box_get_active_id(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_active_id(_self_);
}
gchar * _gtk_combo_box_get_title(GtkComboBox * _self_) {
	return (gchar *)gtk_combo_box_get_title(_self_);
}
gboolean _gtk_combo_box_set_active_id(GtkComboBox * _self_, gchar * active_id) {
	return (gboolean)gtk_combo_box_set_active_id(_self_, (const gchar *)(active_id));
}
void _gtk_combo_box_set_title(GtkComboBox * _self_, gchar * title) {
	(void)gtk_combo_box_set_title(_self_, (const gchar *)(title));
}
void _gtk_combo_box_text_append(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_append(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_append_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_append_text(_self_, (const gchar *)(text));
}
void _gtk_combo_box_text_insert(GtkComboBoxText * _self_, gint position, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_insert(_self_, position, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_insert_text(GtkComboBoxText * _self_, gint position, gchar * text) {
	(void)gtk_combo_box_text_insert_text(_self_, position, (const gchar *)(text));
}
void _gtk_combo_box_text_prepend(GtkComboBoxText * _self_, gchar * id, gchar * text) {
	(void)gtk_combo_box_text_prepend(_self_, (const gchar *)(id), (const gchar *)(text));
}
void _gtk_combo_box_text_prepend_text(GtkComboBoxText * _self_, gchar * text) {
	(void)gtk_combo_box_text_prepend_text(_self_, (const gchar *)(text));
}
void _gtk_container_child_get_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_get_property(_self_, child, (const gchar *)(property_name), value);
}
void _gtk_container_child_notify(GtkContainer * _self_, GtkWidget * child, gchar * child_property) {
	(void)gtk_container_child_notify(_self_, child, (const gchar *)(child_property));
}
void _gtk_container_child_set_property(GtkContainer * _self_, GtkWidget * child, gchar * property_name, GValue * value) {
	(void)gtk_container_child_set_property(_self_, child, (const gchar *)(property_name), (const GValue *)(value));
}
gboolean _gtk_container_get_focus_chain(GtkContainer * _self_, void * focusable_widgets) {
	return (gboolean)gtk_container_get_focus_chain(_self_, (GList **)(focusable_widgets));
}
GParamSpec * _gtk_container_class_find_child_property(GtkContainerClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_container_class_find_child_property((GObjectClass *)(_self_), (const gchar *)(property_name));
}
void * _gtk_container_class_list_child_properties(GtkContainerClass * _self_, guint * n_properties) {
	return (void *)gtk_container_class_list_child_properties((GObjectClass *)(_self_), n_properties);
}
GtkCssProvider * _gtk_css_provider_get_named(gchar * name, gchar * variant) {
	return (GtkCssProvider *)gtk_css_provider_get_named((const gchar *)(name), (const gchar *)(variant));
}
gboolean _gtk_css_provider_load_from_data(GtkCssProvider * _self_, gchar * data, gssize length, void * _error_) {
	return (gboolean)gtk_css_provider_load_from_data(_self_, (const gchar *)(data), length, (GError **)(_error_));
}
gboolean _gtk_css_provider_load_from_file(GtkCssProvider * _self_, GFile * file, void * _error_) {
	return (gboolean)gtk_css_provider_load_from_file(_self_, file, (GError **)(_error_));
}
gboolean _gtk_css_provider_load_from_path(GtkCssProvider * _self_, gchar * path, void * _error_) {
	return (gboolean)gtk_css_provider_load_from_path(_self_, (const gchar *)(path), (GError **)(_error_));
}
guint _gtk_css_section_get_end_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_end_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_end_position((const GtkCssSection *)(_self_));
}
GFile * _gtk_css_section_get_file(GtkCssSection * _self_) {
	return (GFile *)gtk_css_section_get_file((const GtkCssSection *)(_self_));
}
GtkCssSection * _gtk_css_section_get_parent(GtkCssSection * _self_) {
	return (GtkCssSection *)gtk_css_section_get_parent((const GtkCssSection *)(_self_));
}
GtkCssSectionType _gtk_css_section_get_section_type(GtkCssSection * _self_) {
	return (GtkCssSectionType)gtk_css_section_get_section_type((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_line(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_line((const GtkCssSection *)(_self_));
}
guint _gtk_css_section_get_start_position(GtkCssSection * _self_) {
	return (guint)gtk_css_section_get_start_position((const GtkCssSection *)(_self_));
}
GtkWidget * _gtk_dialog_add_button(GtkDialog * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_dialog_add_button(_self_, (const gchar *)(button_text), response_id);
}
gchar * _gtk_entry_get_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_name(_self_, icon_pos);
}
gchar * _gtk_entry_get_icon_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos) {
	return (gchar *)gtk_entry_get_icon_stock(_self_, icon_pos);
}
gchar * _gtk_entry_get_placeholder_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_placeholder_text(_self_);
}
gchar * _gtk_entry_get_text(GtkEntry * _self_) {
	return (gchar *)gtk_entry_get_text(_self_);
}
void _gtk_entry_set_icon_from_icon_name(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * icon_name) {
	(void)gtk_entry_set_icon_from_icon_name(_self_, icon_pos, (const gchar *)(icon_name));
}
void _gtk_entry_set_icon_from_stock(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * stock_id) {
	(void)gtk_entry_set_icon_from_stock(_self_, icon_pos, (const gchar *)(stock_id));
}
void _gtk_entry_set_icon_tooltip_markup(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_markup(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_icon_tooltip_text(GtkEntry * _self_, GtkEntryIconPosition icon_pos, gchar * tooltip) {
	(void)gtk_entry_set_icon_tooltip_text(_self_, icon_pos, (const gchar *)(tooltip));
}
void _gtk_entry_set_placeholder_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_placeholder_text(_self_, (const gchar *)(text));
}
void _gtk_entry_set_text(GtkEntry * _self_, gchar * text) {
	(void)gtk_entry_set_text(_self_, (const gchar *)(text));
}
GtkEntryBuffer * _gtk_entry_buffer_new(gchar * initial_chars, gint n_initial_chars) {
	return (GtkEntryBuffer *)gtk_entry_buffer_new((const gchar *)(initial_chars), n_initial_chars);
}
void _gtk_entry_buffer_emit_inserted_text(GtkEntryBuffer * _self_, guint position, gchar * chars, guint n_chars) {
	(void)gtk_entry_buffer_emit_inserted_text(_self_, position, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_buffer_get_text(GtkEntryBuffer * _self_) {
	return (gchar *)gtk_entry_buffer_get_text(_self_);
}
guint _gtk_entry_buffer_insert_text(GtkEntryBuffer * _self_, guint position, gchar * chars, gint n_chars) {
	return (guint)gtk_entry_buffer_insert_text(_self_, position, (const gchar *)(chars), n_chars);
}
void _gtk_entry_buffer_set_text(GtkEntryBuffer * _self_, gchar * chars, gint n_chars) {
	(void)gtk_entry_buffer_set_text(_self_, (const gchar *)(chars), n_chars);
}
gchar * _gtk_entry_completion_compute_prefix(GtkEntryCompletion * _self_, char * key) {
	return (gchar *)gtk_entry_completion_compute_prefix(_self_, (const char *)(key));
}
gchar * _gtk_entry_completion_get_completion_prefix(GtkEntryCompletion * _self_) {
	return (gchar *)gtk_entry_completion_get_completion_prefix(_self_);
}
void _gtk_entry_completion_insert_action_markup(GtkEntryCompletion * _self_, gint index_, gchar * markup) {
	(void)gtk_entry_completion_insert_action_markup(_self_, index_, (const gchar *)(markup));
}
void _gtk_entry_completion_insert_action_text(GtkEntryCompletion * _self_, gint index_, gchar * text) {
	(void)gtk_entry_completion_insert_action_text(_self_, index_, (const gchar *)(text));
}
GtkWidget * _gtk_expander_new(gchar * label) {
	return (GtkWidget *)gtk_expander_new((const gchar *)(label));
}
GtkWidget * _gtk_expander_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_expander_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_expander_get_label(GtkExpander * _self_) {
	return (gchar *)gtk_expander_get_label(_self_);
}
void _gtk_expander_set_label(GtkExpander * _self_, gchar * label) {
	(void)gtk_expander_set_label(_self_, (const gchar *)(label));
}
GtkWidget * _gtk_file_chooser_button_new(gchar * title, GtkFileChooserAction action) {
	return (GtkWidget *)gtk_file_chooser_button_new((const gchar *)(title), action);
}
gchar * _gtk_file_chooser_button_get_title(GtkFileChooserButton * _self_) {
	return (gchar *)gtk_file_chooser_button_get_title(_self_);
}
void _gtk_file_chooser_button_set_title(GtkFileChooserButton * _self_, gchar * title) {
	(void)gtk_file_chooser_button_set_title(_self_, (const gchar *)(title));
}
void _gtk_file_filter_add_mime_type(GtkFileFilter * _self_, gchar * mime_type) {
	(void)gtk_file_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_file_filter_add_pattern(GtkFileFilter * _self_, gchar * pattern) {
	(void)gtk_file_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_file_filter_filter(GtkFileFilter * _self_, GtkFileFilterInfo * filter_info) {
	return (gboolean)gtk_file_filter_filter(_self_, (const GtkFileFilterInfo *)(filter_info));
}
gchar * _gtk_file_filter_get_name(GtkFileFilter * _self_) {
	return (gchar *)gtk_file_filter_get_name(_self_);
}
void _gtk_file_filter_set_name(GtkFileFilter * _self_, gchar * name) {
	(void)gtk_file_filter_set_name(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_font_button_new_with_font(gchar * fontname) {
	return (GtkWidget *)gtk_font_button_new_with_font((const gchar *)(fontname));
}
gchar * _gtk_font_button_get_font_name(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_font_name(_self_);
}
gchar * _gtk_font_button_get_title(GtkFontButton * _self_) {
	return (gchar *)gtk_font_button_get_title(_self_);
}
gboolean _gtk_font_button_set_font_name(GtkFontButton * _self_, gchar * fontname) {
	return (gboolean)gtk_font_button_set_font_name(_self_, (const gchar *)(fontname));
}
void _gtk_font_button_set_title(GtkFontButton * _self_, gchar * title) {
	(void)gtk_font_button_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_font_chooser_dialog_new(gchar * title, GtkWindow * parent) {
	return (GtkWidget *)gtk_font_chooser_dialog_new((const gchar *)(title), parent);
}
GtkWidget * _gtk_frame_new(gchar * label) {
	return (GtkWidget *)gtk_frame_new((const gchar *)(label));
}
gchar * _gtk_frame_get_label(GtkFrame * _self_) {
	return (gchar *)gtk_frame_get_label(_self_);
}
void _gtk_frame_set_label(GtkFrame * _self_, gchar * label) {
	(void)gtk_frame_set_label(_self_, (const gchar *)(label));
}
gboolean _gtk_gradient_resolve(GtkGradient * _self_, GtkStyleProperties * props, void * resolved_gradient) {
	return (gboolean)gtk_gradient_resolve(_self_, props, (cairo_pattern_t **)(resolved_gradient));
}
void _gtk_im_context_get_preedit_string(GtkIMContext * _self_, void * str, void * attrs, gint * cursor_pos) {
	(void)gtk_im_context_get_preedit_string(_self_, (gchar **)(str), (PangoAttrList **)(attrs), cursor_pos);
}
gboolean _gtk_im_context_get_surrounding(GtkIMContext * _self_, void * text, gint * cursor_index) {
	return (gboolean)gtk_im_context_get_surrounding(_self_, (gchar **)(text), cursor_index);
}
void _gtk_im_context_set_cursor_location(GtkIMContext * _self_, GdkRectangle * area) {
	(void)gtk_im_context_set_cursor_location(_self_, (const GdkRectangle *)(area));
}
void _gtk_im_context_set_surrounding(GtkIMContext * _self_, gchar * text, gint len, gint cursor_index) {
	(void)gtk_im_context_set_surrounding(_self_, (const gchar *)(text), len, cursor_index);
}
char * _gtk_im_multicontext_get_context_id(GtkIMMulticontext * _self_) {
	return (char *)gtk_im_multicontext_get_context_id(_self_);
}
void _gtk_im_multicontext_set_context_id(GtkIMMulticontext * _self_, char * context_id) {
	(void)gtk_im_multicontext_set_context_id(_self_, (const char *)(context_id));
}
GtkIconSet * _gtk_icon_factory_lookup_default(gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup_default((const gchar *)(stock_id));
}
void _gtk_icon_factory_add(GtkIconFactory * _self_, gchar * stock_id, GtkIconSet * icon_set) {
	(void)gtk_icon_factory_add(_self_, (const gchar *)(stock_id), icon_set);
}
GtkIconSet * _gtk_icon_factory_lookup(GtkIconFactory * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_icon_factory_lookup(_self_, (const gchar *)(stock_id));
}
gboolean _gtk_icon_info_get_attach_points(GtkIconInfo * _self_, void * points, gint * n_points) {
	return (gboolean)gtk_icon_info_get_attach_points(_self_, (GdkPoint **)(points), n_points);
}
gchar * _gtk_icon_info_get_display_name(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_display_name(_self_);
}
gchar * _gtk_icon_info_get_filename(GtkIconInfo * _self_) {
	return (gchar *)gtk_icon_info_get_filename(_self_);
}
GdkPixbuf * _gtk_icon_info_load_icon(GtkIconInfo * _self_, void * _error_) {
	return (GdkPixbuf *)gtk_icon_info_load_icon(_self_, (GError **)(_error_));
}
GdkPixbuf * _gtk_icon_info_load_symbolic(GtkIconInfo * _self_, GdkRGBA * fg, GdkRGBA * success_color, GdkRGBA * warning_color, GdkRGBA * error_color, gboolean * was_symbolic, void * _error_) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic(_self_, (const GdkRGBA *)(fg), (const GdkRGBA *)(success_color), (const GdkRGBA *)(warning_color), (const GdkRGBA *)(error_color), was_symbolic, (GError **)(_error_));
}
GdkPixbuf * _gtk_icon_info_load_symbolic_for_context(GtkIconInfo * _self_, GtkStyleContext * context, gboolean * was_symbolic, void * _error_) {
	return (GdkPixbuf *)gtk_icon_info_load_symbolic_for_context(_self_, context, was_symbolic, (GError **)(_error_));
}
void _gtk_icon_set_add_source(GtkIconSet * _self_, GtkIconSource * source) {
	(void)gtk_icon_set_add_source(_self_, (const GtkIconSource *)(source));
}
void _gtk_icon_set_get_sizes(GtkIconSet * _self_, void * sizes, gint * n_sizes) {
	(void)gtk_icon_set_get_sizes(_self_, (GtkIconSize **)(sizes), n_sizes);
}
GtkIconSource * _gtk_icon_source_copy(GtkIconSource * _self_) {
	return (GtkIconSource *)gtk_icon_source_copy((const GtkIconSource *)(_self_));
}
GtkTextDirection _gtk_icon_source_get_direction(GtkIconSource * _self_) {
	return (GtkTextDirection)gtk_icon_source_get_direction((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_direction_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_direction_wildcarded((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_filename(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_filename((const GtkIconSource *)(_self_));
}
gchar * _gtk_icon_source_get_icon_name(GtkIconSource * _self_) {
	return (gchar *)gtk_icon_source_get_icon_name((const GtkIconSource *)(_self_));
}
GdkPixbuf * _gtk_icon_source_get_pixbuf(GtkIconSource * _self_) {
	return (GdkPixbuf *)gtk_icon_source_get_pixbuf((const GtkIconSource *)(_self_));
}
GtkIconSize _gtk_icon_source_get_size(GtkIconSource * _self_) {
	return (GtkIconSize)gtk_icon_source_get_size((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_size_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_size_wildcarded((const GtkIconSource *)(_self_));
}
GtkStateType _gtk_icon_source_get_state(GtkIconSource * _self_) {
	return (GtkStateType)gtk_icon_source_get_state((const GtkIconSource *)(_self_));
}
gboolean _gtk_icon_source_get_state_wildcarded(GtkIconSource * _self_) {
	return (gboolean)gtk_icon_source_get_state_wildcarded((const GtkIconSource *)(_self_));
}
void _gtk_icon_source_set_filename(GtkIconSource * _self_, gchar * filename) {
	(void)gtk_icon_source_set_filename(_self_, (const gchar *)(filename));
}
void _gtk_icon_source_set_icon_name(GtkIconSource * _self_, gchar * icon_name) {
	(void)gtk_icon_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_icon_theme_add_builtin_icon(gchar * icon_name, gint size, GdkPixbuf * pixbuf) {
	(void)gtk_icon_theme_add_builtin_icon((const gchar *)(icon_name), size, pixbuf);
}
void _gtk_icon_theme_append_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_append_search_path(_self_, (const gchar *)(path));
}
GtkIconInfo * _gtk_icon_theme_choose_icon(GtkIconTheme * _self_, void * icon_names, gint size, GtkIconLookupFlags flags) {
	return (GtkIconInfo *)gtk_icon_theme_choose_icon(_self_, (const gchar **)(icon_names), size, flags);
}
gint * _gtk_icon_theme_get_icon_sizes(GtkIconTheme * _self_, gchar * icon_name) {
	return (gint *)gtk_icon_theme_get_icon_sizes(_self_, (const gchar *)(icon_name));
}
void _gtk_icon_theme_get_search_path(GtkIconTheme * _self_, void * path, gint * n_elements) {
	(void)gtk_icon_theme_get_search_path(_self_, (gchar ***)(path), n_elements);
}
gboolean _gtk_icon_theme_has_icon(GtkIconTheme * _self_, gchar * icon_name) {
	return (gboolean)gtk_icon_theme_has_icon(_self_, (const gchar *)(icon_name));
}
GList * _gtk_icon_theme_list_icons(GtkIconTheme * _self_, gchar * context) {
	return (GList *)gtk_icon_theme_list_icons(_self_, (const gchar *)(context));
}
GdkPixbuf * _gtk_icon_theme_load_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags, void * _error_) {
	return (GdkPixbuf *)gtk_icon_theme_load_icon(_self_, (const gchar *)(icon_name), size, flags, (GError **)(_error_));
}
GtkIconInfo * _gtk_icon_theme_lookup_icon(GtkIconTheme * _self_, gchar * icon_name, gint size, GtkIconLookupFlags flags) {
	return (GtkIconInfo *)gtk_icon_theme_lookup_icon(_self_, (const gchar *)(icon_name), size, flags);
}
void _gtk_icon_theme_prepend_search_path(GtkIconTheme * _self_, gchar * path) {
	(void)gtk_icon_theme_prepend_search_path(_self_, (const gchar *)(path));
}
void _gtk_icon_theme_set_custom_theme(GtkIconTheme * _self_, gchar * theme_name) {
	(void)gtk_icon_theme_set_custom_theme(_self_, (const gchar *)(theme_name));
}
void _gtk_icon_theme_set_search_path(GtkIconTheme * _self_, void * path, gint n_elements) {
	(void)gtk_icon_theme_set_search_path(_self_, (const gchar **)(path), n_elements);
}
void _gtk_icon_view_enable_model_drag_dest(GtkIconView * _self_, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_icon_view_enable_model_drag_dest(_self_, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_icon_view_enable_model_drag_source(GtkIconView * _self_, GdkModifierType start_button_mask, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_icon_view_enable_model_drag_source(_self_, start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
gboolean _gtk_icon_view_get_cursor(GtkIconView * _self_, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_dest_item_at_pos(GtkIconView * _self_, gint drag_x, gint drag_y, void * path, GtkIconViewDropPosition * pos) {
	return (gboolean)gtk_icon_view_get_dest_item_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_icon_view_get_drag_dest_item(GtkIconView * _self_, void * path, GtkIconViewDropPosition * pos) {
	(void)gtk_icon_view_get_drag_dest_item(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_icon_view_get_item_at_pos(GtkIconView * _self_, gint x, gint y, void * path, void * cell) {
	return (gboolean)gtk_icon_view_get_item_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkCellRenderer **)(cell));
}
gboolean _gtk_icon_view_get_visible_range(GtkIconView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_icon_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
GtkWidget * _gtk_image_new_from_file(gchar * filename) {
	return (GtkWidget *)gtk_image_new_from_file((const gchar *)(filename));
}
GtkWidget * _gtk_image_new_from_icon_name(gchar * icon_name, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_icon_name((const gchar *)(icon_name), size);
}
GtkWidget * _gtk_image_new_from_resource(gchar * resource_path) {
	return (GtkWidget *)gtk_image_new_from_resource((const gchar *)(resource_path));
}
GtkWidget * _gtk_image_new_from_stock(gchar * stock_id, GtkIconSize size) {
	return (GtkWidget *)gtk_image_new_from_stock((const gchar *)(stock_id), size);
}
void _gtk_image_get_gicon(GtkImage * _self_, void * gicon, GtkIconSize * size) {
	(void)gtk_image_get_gicon(_self_, (GIcon **)(gicon), size);
}
void _gtk_image_get_icon_name(GtkImage * _self_, void * icon_name, GtkIconSize * size) {
	(void)gtk_image_get_icon_name(_self_, (const gchar **)(icon_name), size);
}
void _gtk_image_get_icon_set(GtkImage * _self_, void * icon_set, GtkIconSize * size) {
	(void)gtk_image_get_icon_set(_self_, (GtkIconSet **)(icon_set), size);
}
void _gtk_image_get_stock(GtkImage * _self_, void * stock_id, GtkIconSize * size) {
	(void)gtk_image_get_stock(_self_, (gchar **)(stock_id), size);
}
void _gtk_image_set_from_file(GtkImage * _self_, gchar * filename) {
	(void)gtk_image_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_image_set_from_icon_name(GtkImage * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_image_set_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_image_set_from_resource(GtkImage * _self_, gchar * resource_path) {
	(void)gtk_image_set_from_resource(_self_, (const gchar *)(resource_path));
}
void _gtk_image_set_from_stock(GtkImage * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_image_set_from_stock(_self_, (const gchar *)(stock_id), size);
}
GtkWidget * _gtk_image_menu_item_new_from_stock(gchar * stock_id, GtkAccelGroup * accel_group) {
	return (GtkWidget *)gtk_image_menu_item_new_from_stock((const gchar *)(stock_id), accel_group);
}
GtkWidget * _gtk_image_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_image_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_image_menu_item_new_with_mnemonic((const gchar *)(label));
}
GtkWidget * _gtk_info_bar_add_button(GtkInfoBar * _self_, gchar * button_text, gint response_id) {
	return (GtkWidget *)gtk_info_bar_add_button(_self_, (const gchar *)(button_text), response_id);
}
GtkWidget * _gtk_label_new(gchar * str) {
	return (GtkWidget *)gtk_label_new((const gchar *)(str));
}
GtkWidget * _gtk_label_new_with_mnemonic(gchar * str) {
	return (GtkWidget *)gtk_label_new_with_mnemonic((const gchar *)(str));
}
gchar * _gtk_label_get_current_uri(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_current_uri(_self_);
}
gchar * _gtk_label_get_label(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_label(_self_);
}
gchar * _gtk_label_get_text(GtkLabel * _self_) {
	return (gchar *)gtk_label_get_text(_self_);
}
void _gtk_label_set_label(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_label(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup(_self_, (const gchar *)(str));
}
void _gtk_label_set_markup_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_markup_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_label_set_pattern(GtkLabel * _self_, gchar * pattern) {
	(void)gtk_label_set_pattern(_self_, (const gchar *)(pattern));
}
void _gtk_label_set_text(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text(_self_, (const gchar *)(str));
}
void _gtk_label_set_text_with_mnemonic(GtkLabel * _self_, gchar * str) {
	(void)gtk_label_set_text_with_mnemonic(_self_, (const gchar *)(str));
}
void _gtk_level_bar_add_offset_value(GtkLevelBar * _self_, gchar * name, gdouble value) {
	(void)gtk_level_bar_add_offset_value(_self_, (const gchar *)(name), value);
}
gboolean _gtk_level_bar_get_offset_value(GtkLevelBar * _self_, gchar * name, gdouble * value) {
	return (gboolean)gtk_level_bar_get_offset_value(_self_, (const gchar *)(name), value);
}
void _gtk_level_bar_remove_offset_value(GtkLevelBar * _self_, gchar * name) {
	(void)gtk_level_bar_remove_offset_value(_self_, (const gchar *)(name));
}
GtkWidget * _gtk_link_button_new(gchar * uri) {
	return (GtkWidget *)gtk_link_button_new((const gchar *)(uri));
}
GtkWidget * _gtk_link_button_new_with_label(gchar * uri, gchar * label) {
	return (GtkWidget *)gtk_link_button_new_with_label((const gchar *)(uri), (const gchar *)(label));
}
gchar * _gtk_link_button_get_uri(GtkLinkButton * _self_) {
	return (gchar *)gtk_link_button_get_uri(_self_);
}
void _gtk_link_button_set_uri(GtkLinkButton * _self_, gchar * uri) {
	(void)gtk_link_button_set_uri(_self_, (const gchar *)(uri));
}
gchar * _gtk_menu_get_accel_path(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_accel_path(_self_);
}
gchar * _gtk_menu_get_title(GtkMenu * _self_) {
	return (gchar *)gtk_menu_get_title(_self_);
}
void _gtk_menu_set_accel_path(GtkMenu * _self_, gchar * accel_path) {
	(void)gtk_menu_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_set_title(GtkMenu * _self_, gchar * title) {
	(void)gtk_menu_set_title(_self_, (const gchar *)(title));
}
GtkWidget * _gtk_menu_item_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_menu_item_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_menu_item_new_with_mnemonic((const gchar *)(label));
}
gchar * _gtk_menu_item_get_accel_path(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_accel_path(_self_);
}
gchar * _gtk_menu_item_get_label(GtkMenuItem * _self_) {
	return (gchar *)gtk_menu_item_get_label(_self_);
}
void _gtk_menu_item_set_accel_path(GtkMenuItem * _self_, gchar * accel_path) {
	(void)gtk_menu_item_set_accel_path(_self_, (const gchar *)(accel_path));
}
void _gtk_menu_item_set_label(GtkMenuItem * _self_, gchar * label) {
	(void)gtk_menu_item_set_label(_self_, (const gchar *)(label));
}
void _gtk_menu_shell_bind_model(GtkMenuShell * _self_, GMenuModel * model, gchar * action_namespace, gboolean with_separators) {
	(void)gtk_menu_shell_bind_model(_self_, model, (const gchar *)(action_namespace), with_separators);
}
GtkToolItem * _gtk_menu_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_menu_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_menu_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_menu_tool_button_new_from_stock((const gchar *)(stock_id));
}
void _gtk_menu_tool_button_set_arrow_tooltip_markup(GtkMenuToolButton * _self_, gchar * markup) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_menu_tool_button_set_arrow_tooltip_text(GtkMenuToolButton * _self_, gchar * text) {
	(void)gtk_menu_tool_button_set_arrow_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_message_dialog_set_markup(GtkMessageDialog * _self_, gchar * str) {
	(void)gtk_message_dialog_set_markup(_self_, (const gchar *)(str));
}
gchar * _gtk_notebook_get_group_name(GtkNotebook * _self_) {
	return (gchar *)gtk_notebook_get_group_name(_self_);
}
gchar * _gtk_notebook_get_menu_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_menu_label_text(_self_, child);
}
gchar * _gtk_notebook_get_tab_label_text(GtkNotebook * _self_, GtkWidget * child) {
	return (gchar *)gtk_notebook_get_tab_label_text(_self_, child);
}
void _gtk_notebook_set_group_name(GtkNotebook * _self_, gchar * group_name) {
	(void)gtk_notebook_set_group_name(_self_, (const gchar *)(group_name));
}
void _gtk_notebook_set_menu_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * menu_text) {
	(void)gtk_notebook_set_menu_label_text(_self_, child, (const gchar *)(menu_text));
}
void _gtk_notebook_set_tab_label_text(GtkNotebook * _self_, GtkWidget * child, gchar * tab_text) {
	(void)gtk_notebook_set_tab_label_text(_self_, child, (const gchar *)(tab_text));
}
gchar * _gtk_numerable_icon_get_background_icon_name(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_background_icon_name(_self_);
}
gchar * _gtk_numerable_icon_get_label(GtkNumerableIcon * _self_) {
	return (gchar *)gtk_numerable_icon_get_label(_self_);
}
void _gtk_numerable_icon_set_background_icon_name(GtkNumerableIcon * _self_, gchar * icon_name) {
	(void)gtk_numerable_icon_set_background_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_numerable_icon_set_label(GtkNumerableIcon * _self_, gchar * label) {
	(void)gtk_numerable_icon_set_label(_self_, (const gchar *)(label));
}
GtkPageSetup * _gtk_page_setup_new_from_file(gchar * file_name, void * _error_) {
	return (GtkPageSetup *)gtk_page_setup_new_from_file((const gchar *)(file_name), (GError **)(_error_));
}
GtkPageSetup * _gtk_page_setup_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * _error_) {
	return (GtkPageSetup *)gtk_page_setup_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(_error_));
}
gboolean _gtk_page_setup_load_file(GtkPageSetup * _self_, char * file_name, void * _error_) {
	return (gboolean)gtk_page_setup_load_file(_self_, (const char *)(file_name), (GError **)(_error_));
}
gboolean _gtk_page_setup_load_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name, void * _error_) {
	return (gboolean)gtk_page_setup_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(_error_));
}
gboolean _gtk_page_setup_to_file(GtkPageSetup * _self_, char * file_name, void * _error_) {
	return (gboolean)gtk_page_setup_to_file(_self_, (const char *)(file_name), (GError **)(_error_));
}
void _gtk_page_setup_to_key_file(GtkPageSetup * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_page_setup_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
GtkPaperSize * _gtk_paper_size_new(gchar * name) {
	return (GtkPaperSize *)gtk_paper_size_new((const gchar *)(name));
}
GtkPaperSize * _gtk_paper_size_new_custom(gchar * name, gchar * display_name, gdouble width, gdouble height, GtkUnit unit) {
	return (GtkPaperSize *)gtk_paper_size_new_custom((const gchar *)(name), (const gchar *)(display_name), width, height, unit);
}
GtkPaperSize * _gtk_paper_size_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * _error_) {
	return (GtkPaperSize *)gtk_paper_size_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(_error_));
}
GtkPaperSize * _gtk_paper_size_new_from_ppd(gchar * ppd_name, gchar * ppd_display_name, gdouble width, gdouble height) {
	return (GtkPaperSize *)gtk_paper_size_new_from_ppd((const gchar *)(ppd_name), (const gchar *)(ppd_display_name), width, height);
}
gchar * _gtk_paper_size_get_default() {
	return (gchar *)gtk_paper_size_get_default();
}
gchar * _gtk_paper_size_get_display_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_display_name(_self_);
}
gchar * _gtk_paper_size_get_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_name(_self_);
}
gchar * _gtk_paper_size_get_ppd_name(GtkPaperSize * _self_) {
	return (gchar *)gtk_paper_size_get_ppd_name(_self_);
}
void _gtk_paper_size_to_key_file(GtkPaperSize * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_paper_size_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_operation_get_error(GtkPrintOperation * _self_, void * _error_) {
	(void)gtk_print_operation_get_error(_self_, (GError **)(_error_));
}
gchar * _gtk_print_operation_get_status_string(GtkPrintOperation * _self_) {
	return (gchar *)gtk_print_operation_get_status_string(_self_);
}
GtkPrintOperationResult _gtk_print_operation_run(GtkPrintOperation * _self_, GtkPrintOperationAction action, GtkWindow * parent, void * _error_) {
	return (GtkPrintOperationResult)gtk_print_operation_run(_self_, action, parent, (GError **)(_error_));
}
void _gtk_print_operation_set_custom_tab_label(GtkPrintOperation * _self_, gchar * label) {
	(void)gtk_print_operation_set_custom_tab_label(_self_, (const gchar *)(label));
}
void _gtk_print_operation_set_export_filename(GtkPrintOperation * _self_, gchar * filename) {
	(void)gtk_print_operation_set_export_filename(_self_, (const gchar *)(filename));
}
void _gtk_print_operation_set_job_name(GtkPrintOperation * _self_, gchar * job_name) {
	(void)gtk_print_operation_set_job_name(_self_, (const gchar *)(job_name));
}
GtkPrintSettings * _gtk_print_settings_new_from_file(gchar * file_name, void * _error_) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_file((const gchar *)(file_name), (GError **)(_error_));
}
GtkPrintSettings * _gtk_print_settings_new_from_key_file(GKeyFile * key_file, gchar * group_name, void * _error_) {
	return (GtkPrintSettings *)gtk_print_settings_new_from_key_file(key_file, (const gchar *)(group_name), (GError **)(_error_));
}
gchar * _gtk_print_settings_get(GtkPrintSettings * _self_, gchar * key) {
	return (gchar *)gtk_print_settings_get(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_get_bool(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_get_bool(_self_, (const gchar *)(key));
}
gchar * _gtk_print_settings_get_default_source(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_default_source(_self_);
}
gchar * _gtk_print_settings_get_dither(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_dither(_self_);
}
gdouble _gtk_print_settings_get_double(GtkPrintSettings * _self_, gchar * key) {
	return (gdouble)gtk_print_settings_get_double(_self_, (const gchar *)(key));
}
gdouble _gtk_print_settings_get_double_with_default(GtkPrintSettings * _self_, gchar * key, gdouble def) {
	return (gdouble)gtk_print_settings_get_double_with_default(_self_, (const gchar *)(key), def);
}
gchar * _gtk_print_settings_get_finishings(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_finishings(_self_);
}
gint _gtk_print_settings_get_int(GtkPrintSettings * _self_, gchar * key) {
	return (gint)gtk_print_settings_get_int(_self_, (const gchar *)(key));
}
gint _gtk_print_settings_get_int_with_default(GtkPrintSettings * _self_, gchar * key, gint def) {
	return (gint)gtk_print_settings_get_int_with_default(_self_, (const gchar *)(key), def);
}
gdouble _gtk_print_settings_get_length(GtkPrintSettings * _self_, gchar * key, GtkUnit unit) {
	return (gdouble)gtk_print_settings_get_length(_self_, (const gchar *)(key), unit);
}
gchar * _gtk_print_settings_get_media_type(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_media_type(_self_);
}
gchar * _gtk_print_settings_get_output_bin(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_output_bin(_self_);
}
gchar * _gtk_print_settings_get_printer(GtkPrintSettings * _self_) {
	return (gchar *)gtk_print_settings_get_printer(_self_);
}
gboolean _gtk_print_settings_has_key(GtkPrintSettings * _self_, gchar * key) {
	return (gboolean)gtk_print_settings_has_key(_self_, (const gchar *)(key));
}
gboolean _gtk_print_settings_load_file(GtkPrintSettings * _self_, gchar * file_name, void * _error_) {
	return (gboolean)gtk_print_settings_load_file(_self_, (const gchar *)(file_name), (GError **)(_error_));
}
gboolean _gtk_print_settings_load_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name, void * _error_) {
	return (gboolean)gtk_print_settings_load_key_file(_self_, key_file, (const gchar *)(group_name), (GError **)(_error_));
}
void _gtk_print_settings_set(GtkPrintSettings * _self_, gchar * key, gchar * value) {
	(void)gtk_print_settings_set(_self_, (const gchar *)(key), (const gchar *)(value));
}
void _gtk_print_settings_set_bool(GtkPrintSettings * _self_, gchar * key, gboolean value) {
	(void)gtk_print_settings_set_bool(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_default_source(GtkPrintSettings * _self_, gchar * default_source) {
	(void)gtk_print_settings_set_default_source(_self_, (const gchar *)(default_source));
}
void _gtk_print_settings_set_dither(GtkPrintSettings * _self_, gchar * dither) {
	(void)gtk_print_settings_set_dither(_self_, (const gchar *)(dither));
}
void _gtk_print_settings_set_double(GtkPrintSettings * _self_, gchar * key, gdouble value) {
	(void)gtk_print_settings_set_double(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_finishings(GtkPrintSettings * _self_, gchar * finishings) {
	(void)gtk_print_settings_set_finishings(_self_, (const gchar *)(finishings));
}
void _gtk_print_settings_set_int(GtkPrintSettings * _self_, gchar * key, gint value) {
	(void)gtk_print_settings_set_int(_self_, (const gchar *)(key), value);
}
void _gtk_print_settings_set_length(GtkPrintSettings * _self_, gchar * key, gdouble value, GtkUnit unit) {
	(void)gtk_print_settings_set_length(_self_, (const gchar *)(key), value, unit);
}
void _gtk_print_settings_set_media_type(GtkPrintSettings * _self_, gchar * media_type) {
	(void)gtk_print_settings_set_media_type(_self_, (const gchar *)(media_type));
}
void _gtk_print_settings_set_output_bin(GtkPrintSettings * _self_, gchar * output_bin) {
	(void)gtk_print_settings_set_output_bin(_self_, (const gchar *)(output_bin));
}
void _gtk_print_settings_set_printer(GtkPrintSettings * _self_, gchar * printer) {
	(void)gtk_print_settings_set_printer(_self_, (const gchar *)(printer));
}
gboolean _gtk_print_settings_to_file(GtkPrintSettings * _self_, gchar * file_name, void * _error_) {
	return (gboolean)gtk_print_settings_to_file(_self_, (const gchar *)(file_name), (GError **)(_error_));
}
void _gtk_print_settings_to_key_file(GtkPrintSettings * _self_, GKeyFile * key_file, gchar * group_name) {
	(void)gtk_print_settings_to_key_file(_self_, key_file, (const gchar *)(group_name));
}
void _gtk_print_settings_unset(GtkPrintSettings * _self_, gchar * key) {
	(void)gtk_print_settings_unset(_self_, (const gchar *)(key));
}
gchar * _gtk_progress_bar_get_text(GtkProgressBar * _self_) {
	return (gchar *)gtk_progress_bar_get_text(_self_);
}
void _gtk_progress_bar_set_text(GtkProgressBar * _self_, gchar * text) {
	(void)gtk_progress_bar_set_text(_self_, (const gchar *)(text));
}
GtkRadioAction * _gtk_radio_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, gint value) {
	return (GtkRadioAction *)gtk_radio_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), value);
}
GtkWidget * _gtk_radio_button_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_label_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_label_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_button_new_with_mnemonic_from_widget(GtkRadioButton * radio_group_member, gchar * label) {
	return (GtkWidget *)gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_label_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_label_from_widget(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic(GSList * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic(group, (const gchar *)(label));
}
GtkWidget * _gtk_radio_menu_item_new_with_mnemonic_from_widget(GtkRadioMenuItem * group, gchar * label) {
	return (GtkWidget *)gtk_radio_menu_item_new_with_mnemonic_from_widget(group, (const gchar *)(label));
}
GtkToolItem * _gtk_radio_tool_button_new_from_stock(GSList * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_from_stock(group, (const gchar *)(stock_id));
}
GtkToolItem * _gtk_radio_tool_button_new_with_stock_from_widget(GtkRadioToolButton * group, gchar * stock_id) {
	return (GtkToolItem *)gtk_radio_tool_button_new_with_stock_from_widget(group, (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkAction *)gtk_recent_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkAction * _gtk_recent_action_new_for_manager(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id, GtkRecentManager * manager) {
	return (GtkAction *)gtk_recent_action_new_for_manager((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id), manager);
}
void _gtk_recent_filter_add_application(GtkRecentFilter * _self_, gchar * application) {
	(void)gtk_recent_filter_add_application(_self_, (const gchar *)(application));
}
void _gtk_recent_filter_add_group(GtkRecentFilter * _self_, gchar * group) {
	(void)gtk_recent_filter_add_group(_self_, (const gchar *)(group));
}
void _gtk_recent_filter_add_mime_type(GtkRecentFilter * _self_, gchar * mime_type) {
	(void)gtk_recent_filter_add_mime_type(_self_, (const gchar *)(mime_type));
}
void _gtk_recent_filter_add_pattern(GtkRecentFilter * _self_, gchar * pattern) {
	(void)gtk_recent_filter_add_pattern(_self_, (const gchar *)(pattern));
}
gboolean _gtk_recent_filter_filter(GtkRecentFilter * _self_, GtkRecentFilterInfo * filter_info) {
	return (gboolean)gtk_recent_filter_filter(_self_, (const GtkRecentFilterInfo *)(filter_info));
}
gchar * _gtk_recent_filter_get_name(GtkRecentFilter * _self_) {
	return (gchar *)gtk_recent_filter_get_name(_self_);
}
void _gtk_recent_filter_set_name(GtkRecentFilter * _self_, gchar * name) {
	(void)gtk_recent_filter_set_name(_self_, (const gchar *)(name));
}
GAppInfo * _gtk_recent_info_create_app_info(GtkRecentInfo * _self_, gchar * app_name, void * _error_) {
	return (GAppInfo *)gtk_recent_info_create_app_info(_self_, (const gchar *)(app_name), (GError **)(_error_));
}
gboolean _gtk_recent_info_get_application_info(GtkRecentInfo * _self_, gchar * app_name, void * app_exec, guint * count, time_t * time_) {
	return (gboolean)gtk_recent_info_get_application_info(_self_, (const gchar *)(app_name), (const gchar **)(app_exec), count, time_);
}
void * _gtk_recent_info_get_applications(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_applications(_self_, length);
}
gchar * _gtk_recent_info_get_description(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_description(_self_);
}
gchar * _gtk_recent_info_get_display_name(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_display_name(_self_);
}
void * _gtk_recent_info_get_groups(GtkRecentInfo * _self_, gsize * length) {
	return (void *)gtk_recent_info_get_groups(_self_, length);
}
gchar * _gtk_recent_info_get_mime_type(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_mime_type(_self_);
}
gchar * _gtk_recent_info_get_uri(GtkRecentInfo * _self_) {
	return (gchar *)gtk_recent_info_get_uri(_self_);
}
gboolean _gtk_recent_info_has_application(GtkRecentInfo * _self_, gchar * app_name) {
	return (gboolean)gtk_recent_info_has_application(_self_, (const gchar *)(app_name));
}
gboolean _gtk_recent_info_has_group(GtkRecentInfo * _self_, gchar * group_name) {
	return (gboolean)gtk_recent_info_has_group(_self_, (const gchar *)(group_name));
}
gboolean _gtk_recent_manager_add_full(GtkRecentManager * _self_, gchar * uri, GtkRecentData * recent_data) {
	return (gboolean)gtk_recent_manager_add_full(_self_, (const gchar *)(uri), (const GtkRecentData *)(recent_data));
}
gboolean _gtk_recent_manager_add_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_add_item(_self_, (const gchar *)(uri));
}
gboolean _gtk_recent_manager_has_item(GtkRecentManager * _self_, gchar * uri) {
	return (gboolean)gtk_recent_manager_has_item(_self_, (const gchar *)(uri));
}
GtkRecentInfo * _gtk_recent_manager_lookup_item(GtkRecentManager * _self_, gchar * uri, void * _error_) {
	return (GtkRecentInfo *)gtk_recent_manager_lookup_item(_self_, (const gchar *)(uri), (GError **)(_error_));
}
gboolean _gtk_recent_manager_move_item(GtkRecentManager * _self_, gchar * uri, gchar * new_uri, void * _error_) {
	return (gboolean)gtk_recent_manager_move_item(_self_, (const gchar *)(uri), (const gchar *)(new_uri), (GError **)(_error_));
}
gint _gtk_recent_manager_purge_items(GtkRecentManager * _self_, void * _error_) {
	return (gint)gtk_recent_manager_purge_items(_self_, (GError **)(_error_));
}
gboolean _gtk_recent_manager_remove_item(GtkRecentManager * _self_, gchar * uri, void * _error_) {
	return (gboolean)gtk_recent_manager_remove_item(_self_, (const gchar *)(uri), (GError **)(_error_));
}
GtkRequisition * _gtk_requisition_copy(GtkRequisition * _self_) {
	return (GtkRequisition *)gtk_requisition_copy((const GtkRequisition *)(_self_));
}
void _gtk_scale_add_mark(GtkScale * _self_, gdouble value, GtkPositionType position, gchar * markup) {
	(void)gtk_scale_add_mark(_self_, value, position, (const gchar *)(markup));
}
GtkWidget * _gtk_scale_button_new(GtkIconSize size, gdouble min, gdouble max, gdouble step, void * icons) {
	return (GtkWidget *)gtk_scale_button_new(size, min, max, step, (const gchar **)(icons));
}
void _gtk_scale_button_set_icons(GtkScaleButton * _self_, void * icons) {
	(void)gtk_scale_button_set_icons(_self_, (const gchar **)(icons));
}
GtkSelectionData * _gtk_selection_data_copy(GtkSelectionData * _self_) {
	return (GtkSelectionData *)gtk_selection_data_copy((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_data((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_data_type(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_data_type((const GtkSelectionData *)(_self_));
}
guchar * _gtk_selection_data_get_data_with_length(GtkSelectionData * _self_, gint * length) {
	return (guchar *)gtk_selection_data_get_data_with_length((const GtkSelectionData *)(_self_), length);
}
GdkDisplay * _gtk_selection_data_get_display(GtkSelectionData * _self_) {
	return (GdkDisplay *)gtk_selection_data_get_display((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_format(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_format((const GtkSelectionData *)(_self_));
}
gint _gtk_selection_data_get_length(GtkSelectionData * _self_) {
	return (gint)gtk_selection_data_get_length((const GtkSelectionData *)(_self_));
}
GdkPixbuf * _gtk_selection_data_get_pixbuf(GtkSelectionData * _self_) {
	return (GdkPixbuf *)gtk_selection_data_get_pixbuf((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_selection(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_selection((const GtkSelectionData *)(_self_));
}
GdkAtom _gtk_selection_data_get_target(GtkSelectionData * _self_) {
	return (GdkAtom)gtk_selection_data_get_target((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_get_targets(GtkSelectionData * _self_, void * targets, gint * n_atoms) {
	return (gboolean)gtk_selection_data_get_targets((const GtkSelectionData *)(_self_), (GdkAtom **)(targets), n_atoms);
}
guchar * _gtk_selection_data_get_text(GtkSelectionData * _self_) {
	return (guchar *)gtk_selection_data_get_text((const GtkSelectionData *)(_self_));
}
void * _gtk_selection_data_get_uris(GtkSelectionData * _self_) {
	return (void *)gtk_selection_data_get_uris((const GtkSelectionData *)(_self_));
}
void _gtk_selection_data_set(GtkSelectionData * _self_, GdkAtom type, gint format, guchar * data, gint length) {
	(void)gtk_selection_data_set(_self_, type, format, (const guchar *)(data), length);
}
gboolean _gtk_selection_data_set_text(GtkSelectionData * _self_, gchar * str, gint len) {
	return (gboolean)gtk_selection_data_set_text(_self_, (const gchar *)(str), len);
}
gboolean _gtk_selection_data_set_uris(GtkSelectionData * _self_, void * uris) {
	return (gboolean)gtk_selection_data_set_uris(_self_, (gchar **)(uris));
}
gboolean _gtk_selection_data_targets_include_image(GtkSelectionData * _self_, gboolean writable) {
	return (gboolean)gtk_selection_data_targets_include_image((const GtkSelectionData *)(_self_), writable);
}
gboolean _gtk_selection_data_targets_include_rich_text(GtkSelectionData * _self_, GtkTextBuffer * buffer) {
	return (gboolean)gtk_selection_data_targets_include_rich_text((const GtkSelectionData *)(_self_), buffer);
}
gboolean _gtk_selection_data_targets_include_text(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_text((const GtkSelectionData *)(_self_));
}
gboolean _gtk_selection_data_targets_include_uri(GtkSelectionData * _self_) {
	return (gboolean)gtk_selection_data_targets_include_uri((const GtkSelectionData *)(_self_));
}
void _gtk_settings_set_double_property(GtkSettings * _self_, gchar * name, gdouble v_double, gchar * origin) {
	(void)gtk_settings_set_double_property(_self_, (const gchar *)(name), v_double, (const gchar *)(origin));
}
void _gtk_settings_set_long_property(GtkSettings * _self_, gchar * name, glong v_long, gchar * origin) {
	(void)gtk_settings_set_long_property(_self_, (const gchar *)(name), v_long, (const gchar *)(origin));
}
void _gtk_settings_set_property_value(GtkSettings * _self_, gchar * name, GtkSettingsValue * svalue) {
	(void)gtk_settings_set_property_value(_self_, (const gchar *)(name), (const GtkSettingsValue *)(svalue));
}
void _gtk_settings_set_string_property(GtkSettings * _self_, gchar * name, gchar * v_string, gchar * origin) {
	(void)gtk_settings_set_string_property(_self_, (const gchar *)(name), (const gchar *)(v_string), (const gchar *)(origin));
}
GtkStatusIcon * _gtk_status_icon_new_from_file(gchar * filename) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_file((const gchar *)(filename));
}
GtkStatusIcon * _gtk_status_icon_new_from_icon_name(gchar * icon_name) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_icon_name((const gchar *)(icon_name));
}
GtkStatusIcon * _gtk_status_icon_new_from_stock(gchar * stock_id) {
	return (GtkStatusIcon *)gtk_status_icon_new_from_stock((const gchar *)(stock_id));
}
gboolean _gtk_status_icon_get_geometry(GtkStatusIcon * _self_, void * screen, GdkRectangle * area, GtkOrientation * orientation) {
	return (gboolean)gtk_status_icon_get_geometry(_self_, (GdkScreen **)(screen), area, orientation);
}
gchar * _gtk_status_icon_get_icon_name(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_icon_name(_self_);
}
gchar * _gtk_status_icon_get_stock(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_stock(_self_);
}
gchar * _gtk_status_icon_get_title(GtkStatusIcon * _self_) {
	return (gchar *)gtk_status_icon_get_title(_self_);
}
void _gtk_status_icon_set_from_file(GtkStatusIcon * _self_, gchar * filename) {
	(void)gtk_status_icon_set_from_file(_self_, (const gchar *)(filename));
}
void _gtk_status_icon_set_from_icon_name(GtkStatusIcon * _self_, gchar * icon_name) {
	(void)gtk_status_icon_set_from_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_status_icon_set_from_stock(GtkStatusIcon * _self_, gchar * stock_id) {
	(void)gtk_status_icon_set_from_stock(_self_, (const gchar *)(stock_id));
}
void _gtk_status_icon_set_name(GtkStatusIcon * _self_, gchar * name) {
	(void)gtk_status_icon_set_name(_self_, (const gchar *)(name));
}
void _gtk_status_icon_set_title(GtkStatusIcon * _self_, gchar * title) {
	(void)gtk_status_icon_set_title(_self_, (const gchar *)(title));
}
void _gtk_status_icon_set_tooltip_markup(GtkStatusIcon * _self_, gchar * markup) {
	(void)gtk_status_icon_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_status_icon_set_tooltip_text(GtkStatusIcon * _self_, gchar * text) {
	(void)gtk_status_icon_set_tooltip_text(_self_, (const gchar *)(text));
}
guint _gtk_statusbar_get_context_id(GtkStatusbar * _self_, gchar * context_description) {
	return (guint)gtk_statusbar_get_context_id(_self_, (const gchar *)(context_description));
}
guint _gtk_statusbar_push(GtkStatusbar * _self_, guint context_id, gchar * text) {
	return (guint)gtk_statusbar_push(_self_, context_id, (const gchar *)(text));
}
GtkStockItem * _gtk_stock_item_copy(GtkStockItem * _self_) {
	return (GtkStockItem *)gtk_stock_item_copy((const GtkStockItem *)(_self_));
}
void _gtk_style_context_add_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_add_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_add_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags flags) {
	(void)gtk_style_context_add_region(_self_, (const gchar *)(region_name), flags);
}
PangoFontDescription * _gtk_style_context_get_font(GtkStyleContext * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_style_context_get_font(_self_, state);
}
GtkWidgetPath * _gtk_style_context_get_path(GtkStyleContext * _self_) {
	return (GtkWidgetPath *)gtk_style_context_get_path(_self_);
}
void _gtk_style_context_get_property(GtkStyleContext * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_context_get_property(_self_, (const gchar *)(property), state, value);
}
GtkCssSection * _gtk_style_context_get_section(GtkStyleContext * _self_, gchar * property) {
	return (GtkCssSection *)gtk_style_context_get_section(_self_, (const gchar *)(property));
}
void _gtk_style_context_get_style_property(GtkStyleContext * _self_, gchar * property_name, GValue * value) {
	(void)gtk_style_context_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_style_context_has_class(GtkStyleContext * _self_, gchar * class_name) {
	return (gboolean)gtk_style_context_has_class(_self_, (const gchar *)(class_name));
}
gboolean _gtk_style_context_has_region(GtkStyleContext * _self_, gchar * region_name, GtkRegionFlags * flags_return) {
	return (gboolean)gtk_style_context_has_region(_self_, (const gchar *)(region_name), flags_return);
}
gboolean _gtk_style_context_lookup_color(GtkStyleContext * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_style_context_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkIconSet * _gtk_style_context_lookup_icon_set(GtkStyleContext * _self_, gchar * stock_id) {
	return (GtkIconSet *)gtk_style_context_lookup_icon_set(_self_, (const gchar *)(stock_id));
}
void _gtk_style_context_remove_class(GtkStyleContext * _self_, gchar * class_name) {
	(void)gtk_style_context_remove_class(_self_, (const gchar *)(class_name));
}
void _gtk_style_context_remove_region(GtkStyleContext * _self_, gchar * region_name) {
	(void)gtk_style_context_remove_region(_self_, (const gchar *)(region_name));
}
gboolean _gtk_style_properties_lookup_property(gchar * property_name, GtkStylePropertyParser * parse_func, void * pspec) {
	return (gboolean)gtk_style_properties_lookup_property((const gchar *)(property_name), parse_func, (GParamSpec **)(pspec));
}
gboolean _gtk_style_properties_get_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	return (gboolean)gtk_style_properties_get_property(_self_, (const gchar *)(property), state, value);
}
GtkSymbolicColor * _gtk_style_properties_lookup_color(GtkStyleProperties * _self_, gchar * name) {
	return (GtkSymbolicColor *)gtk_style_properties_lookup_color(_self_, (const gchar *)(name));
}
void _gtk_style_properties_map_color(GtkStyleProperties * _self_, gchar * name, GtkSymbolicColor * color) {
	(void)gtk_style_properties_map_color(_self_, (const gchar *)(name), color);
}
void _gtk_style_properties_merge(GtkStyleProperties * _self_, GtkStyleProperties * props_to_merge, gboolean replace) {
	(void)gtk_style_properties_merge(_self_, (const GtkStyleProperties *)(props_to_merge), replace);
}
void _gtk_style_properties_set_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_style_properties_set_property(_self_, (const gchar *)(property), state, (const GValue *)(value));
}
void _gtk_style_properties_unset_property(GtkStyleProperties * _self_, gchar * property, GtkStateFlags state) {
	(void)gtk_style_properties_unset_property(_self_, (const gchar *)(property), state);
}
GtkSymbolicColor * _gtk_symbolic_color_new_literal(GdkRGBA * color) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_literal((const GdkRGBA *)(color));
}
GtkSymbolicColor * _gtk_symbolic_color_new_name(gchar * name) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_name((const gchar *)(name));
}
GtkSymbolicColor * _gtk_symbolic_color_new_win32(gchar * theme_class, gint id) {
	return (GtkSymbolicColor *)gtk_symbolic_color_new_win32((const gchar *)(theme_class), id);
}
GtkTargetEntry * _gtk_target_entry_new(gchar * target, guint flags, guint info) {
	return (GtkTargetEntry *)gtk_target_entry_new((const gchar *)(target), flags, info);
}
GtkTargetList * _gtk_target_list_new(GtkTargetEntry * targets, guint ntargets) {
	return (GtkTargetList *)gtk_target_list_new((const GtkTargetEntry *)(targets), ntargets);
}
void _gtk_target_list_add_table(GtkTargetList * _self_, GtkTargetEntry * targets, guint ntargets) {
	(void)gtk_target_list_add_table(_self_, (const GtkTargetEntry *)(targets), ntargets);
}
void _gtk_text_buffer_add_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_add_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_apply_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_apply_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_apply_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
GtkTextMark * _gtk_text_buffer_create_mark(GtkTextBuffer * _self_, gchar * mark_name, GtkTextIter * where, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_buffer_create_mark(_self_, (const gchar *)(mark_name), (const GtkTextIter *)(where), left_gravity);
}
void _gtk_text_buffer_delete_mark_by_name(GtkTextBuffer * _self_, gchar * name) {
	(void)gtk_text_buffer_delete_mark_by_name(_self_, (const gchar *)(name));
}
gboolean _gtk_text_buffer_deserialize(GtkTextBuffer * _self_, GtkTextBuffer * content_buffer, GdkAtom format, GtkTextIter * iter, guint8 * data, gsize length, void * _error_) {
	return (gboolean)gtk_text_buffer_deserialize(_self_, content_buffer, format, iter, (const guint8 *)(data), length, (GError **)(_error_));
}
GtkTextMark * _gtk_text_buffer_get_mark(GtkTextBuffer * _self_, gchar * name) {
	return (GtkTextMark *)gtk_text_buffer_get_mark(_self_, (const gchar *)(name));
}
gchar * _gtk_text_buffer_get_slice(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_slice(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
gchar * _gtk_text_buffer_get_text(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end, gboolean include_hidden_chars) {
	return (gchar *)gtk_text_buffer_get_text(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end), include_hidden_chars);
}
void _gtk_text_buffer_insert(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len) {
	(void)gtk_text_buffer_insert(_self_, iter, (const gchar *)(text), len);
}
void _gtk_text_buffer_insert_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_insert_at_cursor(_self_, (const gchar *)(text), len);
}
gboolean _gtk_text_buffer_insert_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive(_self_, iter, (const gchar *)(text), len, default_editable);
}
gboolean _gtk_text_buffer_insert_interactive_at_cursor(GtkTextBuffer * _self_, gchar * text, gint len, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_interactive_at_cursor(_self_, (const gchar *)(text), len, default_editable);
}
void _gtk_text_buffer_insert_range(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_insert_range(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_buffer_insert_range_interactive(GtkTextBuffer * _self_, GtkTextIter * iter, GtkTextIter * start, GtkTextIter * end, gboolean default_editable) {
	return (gboolean)gtk_text_buffer_insert_range_interactive(_self_, iter, (const GtkTextIter *)(start), (const GtkTextIter *)(end), default_editable);
}
void _gtk_text_buffer_move_mark(GtkTextBuffer * _self_, GtkTextMark * mark, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark(_self_, mark, (const GtkTextIter *)(where));
}
void _gtk_text_buffer_move_mark_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * where) {
	(void)gtk_text_buffer_move_mark_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(where));
}
void _gtk_text_buffer_place_cursor(GtkTextBuffer * _self_, GtkTextIter * where) {
	(void)gtk_text_buffer_place_cursor(_self_, (const GtkTextIter *)(where));
}
GdkAtom _gtk_text_buffer_register_deserialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferDeserializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_deserialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_deserialize_tagset(_self_, (const gchar *)(tagset_name));
}
GdkAtom _gtk_text_buffer_register_serialize_format(GtkTextBuffer * _self_, gchar * mime_type, GtkTextBufferSerializeFunc function, gpointer user_data, GDestroyNotify user_data_destroy) {
	return (GdkAtom)gtk_text_buffer_register_serialize_format(_self_, (const gchar *)(mime_type), function, user_data, user_data_destroy);
}
GdkAtom _gtk_text_buffer_register_serialize_tagset(GtkTextBuffer * _self_, gchar * tagset_name) {
	return (GdkAtom)gtk_text_buffer_register_serialize_tagset(_self_, (const gchar *)(tagset_name));
}
void _gtk_text_buffer_remove_all_tags(GtkTextBuffer * _self_, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_all_tags(_self_, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag(GtkTextBuffer * _self_, GtkTextTag * tag, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag(_self_, tag, (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_remove_tag_by_name(GtkTextBuffer * _self_, gchar * name, GtkTextIter * start, GtkTextIter * end) {
	(void)gtk_text_buffer_remove_tag_by_name(_self_, (const gchar *)(name), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
void _gtk_text_buffer_select_range(GtkTextBuffer * _self_, GtkTextIter * ins, GtkTextIter * bound) {
	(void)gtk_text_buffer_select_range(_self_, (const GtkTextIter *)(ins), (const GtkTextIter *)(bound));
}
guint8 * _gtk_text_buffer_serialize(GtkTextBuffer * _self_, GtkTextBuffer * content_buffer, GdkAtom format, GtkTextIter * start, GtkTextIter * end, gsize * length) {
	return (guint8 *)gtk_text_buffer_serialize(_self_, content_buffer, format, (const GtkTextIter *)(start), (const GtkTextIter *)(end), length);
}
void _gtk_text_buffer_set_text(GtkTextBuffer * _self_, gchar * text, gint len) {
	(void)gtk_text_buffer_set_text(_self_, (const gchar *)(text), len);
}
void _gtk_text_iter_assign(GtkTextIter * _self_, GtkTextIter * other) {
	(void)gtk_text_iter_assign(_self_, (const GtkTextIter *)(other));
}
gboolean _gtk_text_iter_backward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_backward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_backward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_begins_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_begins_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_can_insert(GtkTextIter * _self_, gboolean default_editability) {
	return (gboolean)gtk_text_iter_can_insert((const GtkTextIter *)(_self_), default_editability);
}
gint _gtk_text_iter_compare(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gint)gtk_text_iter_compare((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
GtkTextIter * _gtk_text_iter_copy(GtkTextIter * _self_) {
	return (GtkTextIter *)gtk_text_iter_copy((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_editable(GtkTextIter * _self_, gboolean default_setting) {
	return (gboolean)gtk_text_iter_editable((const GtkTextIter *)(_self_), default_setting);
}
gboolean _gtk_text_iter_ends_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_ends_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_ends_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_ends_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_ends_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_equal(GtkTextIter * _self_, GtkTextIter * rhs) {
	return (gboolean)gtk_text_iter_equal((const GtkTextIter *)(_self_), (const GtkTextIter *)(rhs));
}
gboolean _gtk_text_iter_forward_find_char(GtkTextIter * _self_, GtkTextCharPredicate pred, gpointer user_data, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_find_char(_self_, pred, user_data, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_forward_search(GtkTextIter * _self_, gchar * str, GtkTextSearchFlags flags, GtkTextIter * match_start, GtkTextIter * match_end, GtkTextIter * limit) {
	return (gboolean)gtk_text_iter_forward_search((const GtkTextIter *)(_self_), (const gchar *)(str), flags, match_start, match_end, (const GtkTextIter *)(limit));
}
gboolean _gtk_text_iter_get_attributes(GtkTextIter * _self_, GtkTextAttributes * values) {
	return (gboolean)gtk_text_iter_get_attributes((const GtkTextIter *)(_self_), values);
}
GtkTextBuffer * _gtk_text_iter_get_buffer(GtkTextIter * _self_) {
	return (GtkTextBuffer *)gtk_text_iter_get_buffer((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_bytes_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_bytes_in_line((const GtkTextIter *)(_self_));
}
gunichar _gtk_text_iter_get_char(GtkTextIter * _self_) {
	return (gunichar)gtk_text_iter_get_char((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_chars_in_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_chars_in_line((const GtkTextIter *)(_self_));
}
GtkTextChildAnchor * _gtk_text_iter_get_child_anchor(GtkTextIter * _self_) {
	return (GtkTextChildAnchor *)gtk_text_iter_get_child_anchor((const GtkTextIter *)(_self_));
}
PangoLanguage * _gtk_text_iter_get_language(GtkTextIter * _self_) {
	return (PangoLanguage *)gtk_text_iter_get_language((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_line_offset((const GtkTextIter *)(_self_));
}
GSList * _gtk_text_iter_get_marks(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_marks((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_offset((const GtkTextIter *)(_self_));
}
GdkPixbuf * _gtk_text_iter_get_pixbuf(GtkTextIter * _self_) {
	return (GdkPixbuf *)gtk_text_iter_get_pixbuf((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_tags(GtkTextIter * _self_) {
	return (GSList *)gtk_text_iter_get_tags((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
GSList * _gtk_text_iter_get_toggled_tags(GtkTextIter * _self_, gboolean toggled_on) {
	return (GSList *)gtk_text_iter_get_toggled_tags((const GtkTextIter *)(_self_), toggled_on);
}
gint _gtk_text_iter_get_visible_line_index(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_index((const GtkTextIter *)(_self_));
}
gint _gtk_text_iter_get_visible_line_offset(GtkTextIter * _self_) {
	return (gint)gtk_text_iter_get_visible_line_offset((const GtkTextIter *)(_self_));
}
gchar * _gtk_text_iter_get_visible_slice(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_slice((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gchar * _gtk_text_iter_get_visible_text(GtkTextIter * _self_, GtkTextIter * end) {
	return (gchar *)gtk_text_iter_get_visible_text((const GtkTextIter *)(_self_), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_has_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_has_tag((const GtkTextIter *)(_self_), tag);
}
gboolean _gtk_text_iter_in_range(GtkTextIter * _self_, GtkTextIter * start, GtkTextIter * end) {
	return (gboolean)gtk_text_iter_in_range((const GtkTextIter *)(_self_), (const GtkTextIter *)(start), (const GtkTextIter *)(end));
}
gboolean _gtk_text_iter_inside_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_inside_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_inside_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_cursor_position(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_cursor_position((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_end(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_end((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_is_start(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_is_start((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_line(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_line((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_sentence(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_sentence((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_starts_word(GtkTextIter * _self_) {
	return (gboolean)gtk_text_iter_starts_word((const GtkTextIter *)(_self_));
}
gboolean _gtk_text_iter_toggles_tag(GtkTextIter * _self_, GtkTextTag * tag) {
	return (gboolean)gtk_text_iter_toggles_tag((const GtkTextIter *)(_self_), tag);
}
GtkTextMark * _gtk_text_mark_new(gchar * name, gboolean left_gravity) {
	return (GtkTextMark *)gtk_text_mark_new((const gchar *)(name), left_gravity);
}
gchar * _gtk_text_mark_get_name(GtkTextMark * _self_) {
	return (gchar *)gtk_text_mark_get_name(_self_);
}
GtkTextTag * _gtk_text_tag_new(gchar * name) {
	return (GtkTextTag *)gtk_text_tag_new((const gchar *)(name));
}
gboolean _gtk_text_tag_event(GtkTextTag * _self_, GObject * event_object, GdkEvent * event, GtkTextIter * iter) {
	return (gboolean)gtk_text_tag_event(_self_, event_object, event, (const GtkTextIter *)(iter));
}
GtkTextTag * _gtk_text_tag_table_lookup(GtkTextTagTable * _self_, gchar * name) {
	return (GtkTextTag *)gtk_text_tag_table_lookup(_self_, (const gchar *)(name));
}
void _gtk_text_view_get_cursor_locations(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * strong, GdkRectangle * weak) {
	(void)gtk_text_view_get_cursor_locations(_self_, (const GtkTextIter *)(iter), strong, weak);
}
void _gtk_text_view_get_iter_location(GtkTextView * _self_, GtkTextIter * iter, GdkRectangle * location) {
	(void)gtk_text_view_get_iter_location(_self_, (const GtkTextIter *)(iter), location);
}
void _gtk_text_view_get_line_yrange(GtkTextView * _self_, GtkTextIter * iter, gint * y, gint * height) {
	(void)gtk_text_view_get_line_yrange(_self_, (const GtkTextIter *)(iter), y, height);
}
gboolean _gtk_text_view_starts_display_line(GtkTextView * _self_, GtkTextIter * iter) {
	return (gboolean)gtk_text_view_starts_display_line(_self_, (const GtkTextIter *)(iter));
}
GtkThemingEngine * _gtk_theming_engine_load(gchar * name) {
	return (GtkThemingEngine *)gtk_theming_engine_load((const gchar *)(name));
}
void _gtk_theming_engine_register_property(gchar * name_space, GtkStylePropertyParser parse_func, GParamSpec * pspec) {
	(void)gtk_theming_engine_register_property((const gchar *)(name_space), parse_func, pspec);
}
PangoFontDescription * _gtk_theming_engine_get_font(GtkThemingEngine * _self_, GtkStateFlags state) {
	return (PangoFontDescription *)gtk_theming_engine_get_font(_self_, state);
}
GtkWidgetPath * _gtk_theming_engine_get_path(GtkThemingEngine * _self_) {
	return (GtkWidgetPath *)gtk_theming_engine_get_path(_self_);
}
void _gtk_theming_engine_get_property(GtkThemingEngine * _self_, gchar * property, GtkStateFlags state, GValue * value) {
	(void)gtk_theming_engine_get_property(_self_, (const gchar *)(property), state, value);
}
void _gtk_theming_engine_get_style_property(GtkThemingEngine * _self_, gchar * property_name, GValue * value) {
	(void)gtk_theming_engine_get_style_property(_self_, (const gchar *)(property_name), value);
}
gboolean _gtk_theming_engine_has_class(GtkThemingEngine * _self_, gchar * style_class) {
	return (gboolean)gtk_theming_engine_has_class(_self_, (const gchar *)(style_class));
}
gboolean _gtk_theming_engine_has_region(GtkThemingEngine * _self_, gchar * style_region, GtkRegionFlags * flags) {
	return (gboolean)gtk_theming_engine_has_region(_self_, (const gchar *)(style_region), flags);
}
gboolean _gtk_theming_engine_lookup_color(GtkThemingEngine * _self_, gchar * color_name, GdkRGBA * color) {
	return (gboolean)gtk_theming_engine_lookup_color(_self_, (const gchar *)(color_name), color);
}
GtkToggleAction * _gtk_toggle_action_new(gchar * name, gchar * label, gchar * tooltip, gchar * stock_id) {
	return (GtkToggleAction *)gtk_toggle_action_new((const gchar *)(name), (const gchar *)(label), (const gchar *)(tooltip), (const gchar *)(stock_id));
}
GtkWidget * _gtk_toggle_button_new_with_label(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_label((const gchar *)(label));
}
GtkWidget * _gtk_toggle_button_new_with_mnemonic(gchar * label) {
	return (GtkWidget *)gtk_toggle_button_new_with_mnemonic((const gchar *)(label));
}
GtkToolItem * _gtk_toggle_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_toggle_tool_button_new_from_stock((const gchar *)(stock_id));
}
GtkToolItem * _gtk_tool_button_new(GtkWidget * icon_widget, gchar * label) {
	return (GtkToolItem *)gtk_tool_button_new(icon_widget, (const gchar *)(label));
}
GtkToolItem * _gtk_tool_button_new_from_stock(gchar * stock_id) {
	return (GtkToolItem *)gtk_tool_button_new_from_stock((const gchar *)(stock_id));
}
gchar * _gtk_tool_button_get_icon_name(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_icon_name(_self_);
}
gchar * _gtk_tool_button_get_label(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_label(_self_);
}
gchar * _gtk_tool_button_get_stock_id(GtkToolButton * _self_) {
	return (gchar *)gtk_tool_button_get_stock_id(_self_);
}
void _gtk_tool_button_set_icon_name(GtkToolButton * _self_, gchar * icon_name) {
	(void)gtk_tool_button_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_tool_button_set_label(GtkToolButton * _self_, gchar * label) {
	(void)gtk_tool_button_set_label(_self_, (const gchar *)(label));
}
void _gtk_tool_button_set_stock_id(GtkToolButton * _self_, gchar * stock_id) {
	(void)gtk_tool_button_set_stock_id(_self_, (const gchar *)(stock_id));
}
GtkWidget * _gtk_tool_item_get_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id) {
	return (GtkWidget *)gtk_tool_item_get_proxy_menu_item(_self_, (const gchar *)(menu_item_id));
}
void _gtk_tool_item_set_proxy_menu_item(GtkToolItem * _self_, gchar * menu_item_id, GtkWidget * menu_item) {
	(void)gtk_tool_item_set_proxy_menu_item(_self_, (const gchar *)(menu_item_id), menu_item);
}
void _gtk_tool_item_set_tooltip_markup(GtkToolItem * _self_, gchar * markup) {
	(void)gtk_tool_item_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_tool_item_set_tooltip_text(GtkToolItem * _self_, gchar * text) {
	(void)gtk_tool_item_set_tooltip_text(_self_, (const gchar *)(text));
}
GtkWidget * _gtk_tool_item_group_new(gchar * label) {
	return (GtkWidget *)gtk_tool_item_group_new((const gchar *)(label));
}
gchar * _gtk_tool_item_group_get_label(GtkToolItemGroup * _self_) {
	return (gchar *)gtk_tool_item_group_get_label(_self_);
}
void _gtk_tool_item_group_set_label(GtkToolItemGroup * _self_, gchar * label) {
	(void)gtk_tool_item_group_set_label(_self_, (const gchar *)(label));
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_group() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_group();
}
GtkTargetEntry * _gtk_tool_palette_get_drag_target_item() {
	return (GtkTargetEntry *)gtk_tool_palette_get_drag_target_item();
}
GtkWidget * _gtk_tool_palette_get_drag_item(GtkToolPalette * _self_, GtkSelectionData * selection) {
	return (GtkWidget *)gtk_tool_palette_get_drag_item(_self_, (const GtkSelectionData *)(selection));
}
void _gtk_tooltip_set_icon_from_icon_name(GtkTooltip * _self_, gchar * icon_name, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_icon_name(_self_, (const gchar *)(icon_name), size);
}
void _gtk_tooltip_set_icon_from_stock(GtkTooltip * _self_, gchar * stock_id, GtkIconSize size) {
	(void)gtk_tooltip_set_icon_from_stock(_self_, (const gchar *)(stock_id), size);
}
void _gtk_tooltip_set_markup(GtkTooltip * _self_, gchar * markup) {
	(void)gtk_tooltip_set_markup(_self_, (const gchar *)(markup));
}
void _gtk_tooltip_set_text(GtkTooltip * _self_, gchar * text) {
	(void)gtk_tooltip_set_text(_self_, (const gchar *)(text));
}
void _gtk_tooltip_set_tip_area(GtkTooltip * _self_, GdkRectangle * rect) {
	(void)gtk_tooltip_set_tip_area(_self_, (const GdkRectangle *)(rect));
}
GtkTreePath * _gtk_tree_path_new_from_string(gchar * path) {
	return (GtkTreePath *)gtk_tree_path_new_from_string((const gchar *)(path));
}
gint _gtk_tree_path_compare(GtkTreePath * _self_, GtkTreePath * b) {
	return (gint)gtk_tree_path_compare((const GtkTreePath *)(_self_), (const GtkTreePath *)(b));
}
GtkTreePath * _gtk_tree_path_copy(GtkTreePath * _self_) {
	return (GtkTreePath *)gtk_tree_path_copy((const GtkTreePath *)(_self_));
}
gboolean _gtk_tree_selection_get_selected(GtkTreeSelection * _self_, void * model, GtkTreeIter * iter) {
	return (gboolean)gtk_tree_selection_get_selected(_self_, (GtkTreeModel **)(model), iter);
}
GList * _gtk_tree_selection_get_selected_rows(GtkTreeSelection * _self_, void * model) {
	return (GList *)gtk_tree_selection_get_selected_rows(_self_, (GtkTreeModel **)(model));
}
void _gtk_tree_view_enable_model_drag_dest(GtkTreeView * _self_, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_tree_view_enable_model_drag_dest(_self_, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_tree_view_enable_model_drag_source(GtkTreeView * _self_, GdkModifierType start_button_mask, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_tree_view_enable_model_drag_source(_self_, start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_tree_view_get_cursor(GtkTreeView * _self_, void * path, void * focus_column) {
	(void)gtk_tree_view_get_cursor(_self_, (GtkTreePath **)(path), (GtkTreeViewColumn **)(focus_column));
}
gboolean _gtk_tree_view_get_dest_row_at_pos(GtkTreeView * _self_, gint drag_x, gint drag_y, void * path, GtkTreeViewDropPosition * pos) {
	return (gboolean)gtk_tree_view_get_dest_row_at_pos(_self_, drag_x, drag_y, (GtkTreePath **)(path), pos);
}
void _gtk_tree_view_get_drag_dest_row(GtkTreeView * _self_, void * path, GtkTreeViewDropPosition * pos) {
	(void)gtk_tree_view_get_drag_dest_row(_self_, (GtkTreePath **)(path), pos);
}
gboolean _gtk_tree_view_get_path_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_get_path_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
gboolean _gtk_tree_view_get_visible_range(GtkTreeView * _self_, void * start_path, void * end_path) {
	return (gboolean)gtk_tree_view_get_visible_range(_self_, (GtkTreePath **)(start_path), (GtkTreePath **)(end_path));
}
gint _gtk_tree_view_insert_column_with_data_func(GtkTreeView * _self_, gint position, gchar * title, GtkCellRenderer * cell, GtkTreeCellDataFunc func, gpointer data, GDestroyNotify dnotify) {
	return (gint)gtk_tree_view_insert_column_with_data_func(_self_, position, (const gchar *)(title), cell, func, data, dnotify);
}
gboolean _gtk_tree_view_is_blank_at_pos(GtkTreeView * _self_, gint x, gint y, void * path, void * column, gint * cell_x, gint * cell_y) {
	return (gboolean)gtk_tree_view_is_blank_at_pos(_self_, x, y, (GtkTreePath **)(path), (GtkTreeViewColumn **)(column), cell_x, cell_y);
}
void _gtk_tree_view_column_add_attribute(GtkTreeViewColumn * _self_, GtkCellRenderer * cell_renderer, gchar * attribute, gint column) {
	(void)gtk_tree_view_column_add_attribute(_self_, cell_renderer, (const gchar *)(attribute), column);
}
void _gtk_tree_view_column_cell_get_size(GtkTreeViewColumn * _self_, GdkRectangle * cell_area, gint * x_offset, gint * y_offset, gint * width, gint * height) {
	(void)gtk_tree_view_column_cell_get_size(_self_, (const GdkRectangle *)(cell_area), x_offset, y_offset, width, height);
}
gchar * _gtk_tree_view_column_get_title(GtkTreeViewColumn * _self_) {
	return (gchar *)gtk_tree_view_column_get_title(_self_);
}
void _gtk_tree_view_column_set_title(GtkTreeViewColumn * _self_, gchar * title) {
	(void)gtk_tree_view_column_set_title(_self_, (const gchar *)(title));
}
void _gtk_ui_manager_add_ui(GtkUIManager * _self_, guint merge_id, gchar * path, gchar * name, gchar * action, GtkUIManagerItemType type, gboolean top) {
	(void)gtk_ui_manager_add_ui(_self_, merge_id, (const gchar *)(path), (const gchar *)(name), (const gchar *)(action), type, top);
}
guint _gtk_ui_manager_add_ui_from_file(GtkUIManager * _self_, gchar * filename, void * _error_) {
	return (guint)gtk_ui_manager_add_ui_from_file(_self_, (const gchar *)(filename), (GError **)(_error_));
}
guint _gtk_ui_manager_add_ui_from_resource(GtkUIManager * _self_, gchar * resource_path, void * _error_) {
	return (guint)gtk_ui_manager_add_ui_from_resource(_self_, (const gchar *)(resource_path), (GError **)(_error_));
}
guint _gtk_ui_manager_add_ui_from_string(GtkUIManager * _self_, gchar * buffer, gssize length, void * _error_) {
	return (guint)gtk_ui_manager_add_ui_from_string(_self_, (const gchar *)(buffer), length, (GError **)(_error_));
}
GtkAction * _gtk_ui_manager_get_action(GtkUIManager * _self_, gchar * path) {
	return (GtkAction *)gtk_ui_manager_get_action(_self_, (const gchar *)(path));
}
GtkWidget * _gtk_ui_manager_get_widget(GtkUIManager * _self_, gchar * path) {
	return (GtkWidget *)gtk_ui_manager_get_widget(_self_, (const gchar *)(path));
}
void _gtk_widget_add_accelerator(GtkWidget * _self_, gchar * accel_signal, GtkAccelGroup * accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags) {
	(void)gtk_widget_add_accelerator(_self_, (const gchar *)(accel_signal), accel_group, accel_key, accel_mods, accel_flags);
}
void _gtk_widget_child_notify(GtkWidget * _self_, gchar * child_property) {
	(void)gtk_widget_child_notify(_self_, (const gchar *)(child_property));
}
PangoLayout * _gtk_widget_create_pango_layout(GtkWidget * _self_, gchar * text) {
	return (PangoLayout *)gtk_widget_create_pango_layout(_self_, (const gchar *)(text));
}
void _gtk_drag_dest_set(GtkWidget * _self_, GtkDestDefaults flags, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_drag_dest_set(_self_, flags, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_drag_source_set(GtkWidget * _self_, GdkModifierType start_button_mask, GtkTargetEntry * targets, gint n_targets, GdkDragAction actions) {
	(void)gtk_drag_source_set(_self_, start_button_mask, (const GtkTargetEntry *)(targets), n_targets, actions);
}
void _gtk_drag_source_set_icon_name(GtkWidget * _self_, gchar * icon_name) {
	(void)gtk_drag_source_set_icon_name(_self_, (const gchar *)(icon_name));
}
void _gtk_drag_source_set_icon_stock(GtkWidget * _self_, gchar * stock_id) {
	(void)gtk_drag_source_set_icon_stock(_self_, (const gchar *)(stock_id));
}
gchar * _gtk_widget_get_name(GtkWidget * _self_) {
	return (gchar *)gtk_widget_get_name(_self_);
}
void _gtk_widget_insert_action_group(GtkWidget * _self_, gchar * name, GActionGroup * group) {
	(void)gtk_widget_insert_action_group(_self_, (const gchar *)(name), group);
}
gboolean _gtk_widget_intersect(GtkWidget * _self_, GdkRectangle * area, GdkRectangle * intersection) {
	return (gboolean)gtk_widget_intersect(_self_, (const GdkRectangle *)(area), intersection);
}
void _gtk_widget_override_background_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_background_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_color(GtkWidget * _self_, GtkStateFlags state, GdkRGBA * color) {
	(void)gtk_widget_override_color(_self_, state, (const GdkRGBA *)(color));
}
void _gtk_widget_override_cursor(GtkWidget * _self_, GdkRGBA * cursor, GdkRGBA * secondary_cursor) {
	(void)gtk_widget_override_cursor(_self_, (const GdkRGBA *)(cursor), (const GdkRGBA *)(secondary_cursor));
}
void _gtk_widget_override_font(GtkWidget * _self_, PangoFontDescription * font_desc) {
	(void)gtk_widget_override_font(_self_, (const PangoFontDescription *)(font_desc));
}
void _gtk_widget_override_symbolic_color(GtkWidget * _self_, gchar * name, GdkRGBA * color) {
	(void)gtk_widget_override_symbolic_color(_self_, (const gchar *)(name), (const GdkRGBA *)(color));
}
void _gtk_widget_queue_draw_region(GtkWidget * _self_, cairo_region_t * region) {
	(void)gtk_widget_queue_draw_region(_self_, (const cairo_region_t *)(region));
}
cairo_region_t * _gtk_widget_region_intersect(GtkWidget * _self_, cairo_region_t * region) {
	return (cairo_region_t *)gtk_widget_region_intersect(_self_, (const cairo_region_t *)(region));
}
GdkPixbuf * _gtk_widget_render_icon_pixbuf(GtkWidget * _self_, gchar * stock_id, GtkIconSize size) {
	return (GdkPixbuf *)gtk_widget_render_icon_pixbuf(_self_, (const gchar *)(stock_id), size);
}
void _gtk_widget_set_accel_path(GtkWidget * _self_, gchar * accel_path, GtkAccelGroup * accel_group) {
	(void)gtk_widget_set_accel_path(_self_, (const gchar *)(accel_path), accel_group);
}
void _gtk_widget_set_allocation(GtkWidget * _self_, GtkAllocation * allocation) {
	(void)gtk_widget_set_allocation(_self_, (const GtkAllocation *)(allocation));
}
void _gtk_widget_set_composite_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_composite_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_name(GtkWidget * _self_, gchar * name) {
	(void)gtk_widget_set_name(_self_, (const gchar *)(name));
}
void _gtk_widget_set_tooltip_markup(GtkWidget * _self_, gchar * markup) {
	(void)gtk_widget_set_tooltip_markup(_self_, (const gchar *)(markup));
}
void _gtk_widget_set_tooltip_text(GtkWidget * _self_, gchar * text) {
	(void)gtk_widget_set_tooltip_text(_self_, (const gchar *)(text));
}
void _gtk_widget_style_get_property(GtkWidget * _self_, gchar * property_name, GValue * value) {
	(void)gtk_widget_style_get_property(_self_, (const gchar *)(property_name), value);
}
GParamSpec * _gtk_widget_class_find_style_property(GtkWidgetClass * _self_, gchar * property_name) {
	return (GParamSpec *)gtk_widget_class_find_style_property(_self_, (const gchar *)(property_name));
}
void * _gtk_widget_class_list_style_properties(GtkWidgetClass * _self_, guint * n_properties) {
	return (void *)gtk_widget_class_list_style_properties(_self_, n_properties);
}
GtkWidgetPath * _gtk_widget_path_copy(GtkWidgetPath * _self_) {
	return (GtkWidgetPath *)gtk_widget_path_copy((const GtkWidgetPath *)(_self_));
}
GType _gtk_widget_path_get_object_type(GtkWidgetPath * _self_) {
	return (GType)gtk_widget_path_get_object_type((const GtkWidgetPath *)(_self_));
}
gboolean _gtk_widget_path_has_parent(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_has_parent((const GtkWidgetPath *)(_self_), type);
}
gboolean _gtk_widget_path_is_type(GtkWidgetPath * _self_, GType type) {
	return (gboolean)gtk_widget_path_is_type((const GtkWidgetPath *)(_self_), type);
}
void _gtk_widget_path_iter_add_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_add_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_add_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags flags) {
	(void)gtk_widget_path_iter_add_region(_self_, pos, (const gchar *)(name), flags);
}
gchar * _gtk_widget_path_iter_get_name(GtkWidgetPath * _self_, gint pos) {
	return (gchar *)gtk_widget_path_iter_get_name((const GtkWidgetPath *)(_self_), pos);
}
GType _gtk_widget_path_iter_get_object_type(GtkWidgetPath * _self_, gint pos) {
	return (GType)gtk_widget_path_iter_get_object_type((const GtkWidgetPath *)(_self_), pos);
}
guint _gtk_widget_path_iter_get_sibling_index(GtkWidgetPath * _self_, gint pos) {
	return (guint)gtk_widget_path_iter_get_sibling_index((const GtkWidgetPath *)(_self_), pos);
}
GtkWidgetPath * _gtk_widget_path_iter_get_siblings(GtkWidgetPath * _self_, gint pos) {
	return (GtkWidgetPath *)gtk_widget_path_iter_get_siblings((const GtkWidgetPath *)(_self_), pos);
}
gboolean _gtk_widget_path_iter_has_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_class((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	return (gboolean)gtk_widget_path_iter_has_name((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name));
}
gboolean _gtk_widget_path_iter_has_qclass(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qclass((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qname(GtkWidgetPath * _self_, gint pos, GQuark qname) {
	return (gboolean)gtk_widget_path_iter_has_qname((const GtkWidgetPath *)(_self_), pos, qname);
}
gboolean _gtk_widget_path_iter_has_qregion(GtkWidgetPath * _self_, gint pos, GQuark qname, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_qregion((const GtkWidgetPath *)(_self_), pos, qname, flags);
}
gboolean _gtk_widget_path_iter_has_region(GtkWidgetPath * _self_, gint pos, gchar * name, GtkRegionFlags * flags) {
	return (gboolean)gtk_widget_path_iter_has_region((const GtkWidgetPath *)(_self_), pos, (const gchar *)(name), flags);
}
GSList * _gtk_widget_path_iter_list_classes(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_classes((const GtkWidgetPath *)(_self_), pos);
}
GSList * _gtk_widget_path_iter_list_regions(GtkWidgetPath * _self_, gint pos) {
	return (GSList *)gtk_widget_path_iter_list_regions((const GtkWidgetPath *)(_self_), pos);
}
void _gtk_widget_path_iter_remove_class(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_class(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_remove_region(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_remove_region(_self_, pos, (const gchar *)(name));
}
void _gtk_widget_path_iter_set_name(GtkWidgetPath * _self_, gint pos, gchar * name) {
	(void)gtk_widget_path_iter_set_name(_self_, pos, (const gchar *)(name));
}
gint _gtk_widget_path_length(GtkWidgetPath * _self_) {
	return (gint)gtk_widget_path_length((const GtkWidgetPath *)(_self_));
}
char * _gtk_widget_path_to_string(GtkWidgetPath * _self_) {
	return (char *)gtk_widget_path_to_string((const GtkWidgetPath *)(_self_));
}
gchar * _gtk_window_get_default_icon_name() {
	return (gchar *)gtk_window_get_default_icon_name();
}
gboolean _gtk_window_set_default_icon_from_file(gchar * filename, void * _error_) {
	return (gboolean)gtk_window_set_default_icon_from_file((const gchar *)(filename), (GError **)(_error_));
}
void _gtk_window_set_default_icon_name(gchar * name) {
	(void)gtk_window_set_default_icon_name((const gchar *)(name));
}
gchar * _gtk_window_get_icon_name(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_icon_name(_self_);
}
gchar * _gtk_window_get_role(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_role(_self_);
}
gchar * _gtk_window_get_title(GtkWindow * _self_) {
	return (gchar *)gtk_window_get_title(_self_);
}
gboolean _gtk_window_parse_geometry(GtkWindow * _self_, gchar * geometry) {
	return (gboolean)gtk_window_parse_geometry(_self_, (const gchar *)(geometry));
}
gboolean _gtk_window_set_icon_from_file(GtkWindow * _self_, gchar * filename, void * _error_) {
	return (gboolean)gtk_window_set_icon_from_file(_self_, (const gchar *)(filename), (GError **)(_error_));
}
void _gtk_window_set_icon_name(GtkWindow * _self_, gchar * name) {
	(void)gtk_window_set_icon_name(_self_, (const gchar *)(name));
}
void _gtk_window_set_role(GtkWindow * _self_, gchar * role) {
	(void)gtk_window_set_role(_self_, (const gchar *)(role));
}
void _gtk_window_set_startup_id(GtkWindow * _self_, gchar * startup_id) {
	(void)gtk_window_set_startup_id(_self_, (const gchar *)(startup_id));
}
void _gtk_window_set_title(GtkWindow * _self_, gchar * title) {
	(void)gtk_window_set_title(_self_, (const gchar *)(title));
}
void _gtk_window_set_wmclass(GtkWindow * _self_, gchar * wmclass_name, gchar * wmclass_class) {
	(void)gtk_window_set_wmclass(_self_, (const gchar *)(wmclass_name), (const gchar *)(wmclass_class));
}
void _gtk_accelerator_parse(gchar * accelerator, guint * accelerator_key, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse((const gchar *)(accelerator), accelerator_key, accelerator_mods);
}
void _gtk_accelerator_parse_with_keycode(gchar * accelerator, guint * accelerator_key, void * accelerator_codes, GdkModifierType * accelerator_mods) {
	(void)gtk_accelerator_parse_with_keycode((const gchar *)(accelerator), accelerator_key, (guint **)(accelerator_codes), accelerator_mods);
}
gchar * _gtk_check_version(guint required_major, guint required_minor, guint required_micro) {
	return (gchar *)gtk_check_version(required_major, required_minor, required_micro);
}
void _gtk_drag_set_icon_name(GdkDragContext * context, gchar * icon_name, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_name(context, (const gchar *)(icon_name), hot_x, hot_y);
}
void _gtk_drag_set_icon_stock(GdkDragContext * context, gchar * stock_id, gint hot_x, gint hot_y) {
	(void)gtk_drag_set_icon_stock(context, (const gchar *)(stock_id), hot_x, hot_y);
}
GtkIconSize _gtk_icon_size_from_name(gchar * name) {
	return (GtkIconSize)gtk_icon_size_from_name((const gchar *)(name));
}
gchar * _gtk_icon_size_get_name(GtkIconSize size) {
	return (gchar *)gtk_icon_size_get_name(size);
}
GtkIconSize _gtk_icon_size_register(gchar * name, gint width, gint height) {
	return (GtkIconSize)gtk_icon_size_register((const gchar *)(name), width, height);
}
void _gtk_icon_size_register_alias(gchar * alias, GtkIconSize target) {
	(void)gtk_icon_size_register_alias((const gchar *)(alias), target);
}
gboolean _gtk_rc_property_parse_border(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_border((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_color(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_color((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_enum(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_enum((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_flags(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_flags((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
gboolean _gtk_rc_property_parse_requisition(GParamSpec * pspec, GString * gstring, GValue * property_value) {
	return (gboolean)gtk_rc_property_parse_requisition((const GParamSpec *)(pspec), (const GString *)(gstring), property_value);
}
GdkPixbuf * _gtk_render_icon_pixbuf(GtkStyleContext * context, GtkIconSource * source, GtkIconSize size) {
	return (GdkPixbuf *)gtk_render_icon_pixbuf(context, (const GtkIconSource *)(source), size);
}
void _gtk_selection_add_targets(GtkWidget * widget, GdkAtom selection, GtkTargetEntry * targets, guint ntargets) {
	(void)gtk_selection_add_targets(widget, selection, (const GtkTargetEntry *)(targets), ntargets);
}
gboolean _gtk_show_uri(GdkScreen * screen, gchar * uri, guint32 timestamp, void * _error_) {
	return (gboolean)gtk_show_uri(screen, (const gchar *)(uri), timestamp, (GError **)(_error_));
}
void _gtk_stock_add(GtkStockItem * items, guint n_items) {
	(void)gtk_stock_add((const GtkStockItem *)(items), n_items);
}
void _gtk_stock_add_static(GtkStockItem * items, guint n_items) {
	(void)gtk_stock_add_static((const GtkStockItem *)(items), n_items);
}
gboolean _gtk_stock_lookup(gchar * stock_id, GtkStockItem * item) {
	return (gboolean)gtk_stock_lookup((const gchar *)(stock_id), item);
}
void _gtk_stock_set_translate_func(gchar * domain, GtkTranslateFunc func, gpointer data, GDestroyNotify notify) {
	(void)gtk_stock_set_translate_func((const gchar *)(domain), func, data, notify);
}
GtkWidget * _gtk_test_create_simple_window(gchar * window_title, gchar * dialog_text) {
	return (GtkWidget *)gtk_test_create_simple_window((const gchar *)(window_title), (const gchar *)(dialog_text));
}
GtkWidget * _gtk_test_find_label(GtkWidget * widget, gchar * label_pattern) {
	return (GtkWidget *)gtk_test_find_label(widget, (const gchar *)(label_pattern));
}
GtkWidget * _gtk_test_find_widget(GtkWidget * widget, gchar * label_pattern, GType widget_type) {
	return (GtkWidget *)gtk_test_find_widget(widget, (const gchar *)(label_pattern), widget_type);
}
GType * _gtk_test_list_all_types(guint * n_types) {
	return (GType *)gtk_test_list_all_types(n_types);
}
void _gtk_test_text_set(GtkWidget * widget, gchar * string) {
	(void)gtk_test_text_set(widget, (const gchar *)(string));
}
gboolean _gtk_tree_get_row_drag_data(GtkSelectionData * selection_data, void * tree_model, void * path) {
	return (gboolean)gtk_tree_get_row_drag_data(selection_data, (GtkTreeModel **)(tree_model), (GtkTreePath **)(path));
}
gboolean glibtrue() { return TRUE; }
gboolean glibfalse() { return FALSE; }
*/
import "C"
import (
	"unsafe"
)

type ToolbarClass C.GtkToolbarClass
type ListStoreClass C.GtkListStoreClass
type Accessible C.GtkAccessible
type Viewport C.GtkViewport
type InfoBarPrivate C.GtkInfoBarPrivate
type Toolbar C.GtkToolbar
type StyleContextPrivate C.GtkStyleContextPrivate
type CellRendererSpinnerPrivate C.GtkCellRendererSpinnerPrivate
type RecentManager C.GtkRecentManager
type CellRendererClass C.GtkCellRendererClass
type RadioMenuItemClass C.GtkRadioMenuItemClass
type OverlayClass C.GtkOverlayClass
type FixedClass C.GtkFixedClass
type ToolPalettePrivate C.GtkToolPalettePrivate
type FramePrivate C.GtkFramePrivate
type ActionGroup C.GtkActionGroup
type ScaleButtonClass C.GtkScaleButtonClass
type TextAttributes C.GtkTextAttributes
type Window C.GtkWindow
type SelectionData C.GtkSelectionData
type MenuItemClass C.GtkMenuItemClass
type ToggleButton C.GtkToggleButton
type Widget C.GtkWidget
type ToggleActionClass C.GtkToggleActionClass
type Container C.GtkContainer
type CheckMenuItem C.GtkCheckMenuItem
type CellLayoutIface C.GtkCellLayoutIface
type ToolItemGroupPrivate C.GtkToolItemGroupPrivate
type ProgressBar C.GtkProgressBar
type FontChooserDialogPrivate C.GtkFontChooserDialogPrivate
type TreeSelection C.GtkTreeSelection
type HSVPrivate C.GtkHSVPrivate
type ActionableInterface C.GtkActionableInterface
type HScrollbar C.GtkHScrollbar
type InvisibleClass C.GtkInvisibleClass
type TearoffMenuItemPrivate C.GtkTearoffMenuItemPrivate
type FontSelectionDialogPrivate C.GtkFontSelectionDialogPrivate
type ComboBoxPrivate C.GtkComboBoxPrivate
type ToolButton C.GtkToolButton
type RcStyle C.GtkRcStyle
type ColorButton C.GtkColorButton
type Switch C.GtkSwitch
type StatusbarPrivate C.GtkStatusbarPrivate
type ColorButtonPrivate C.GtkColorButtonPrivate
type CellRendererSpinClass C.GtkCellRendererSpinClass
type RecentChooserWidgetPrivate C.GtkRecentChooserWidgetPrivate
type TextView C.GtkTextView
type ComboBoxTextPrivate C.GtkComboBoxTextPrivate
type ColorChooserWidget C.GtkColorChooserWidget
type CellRendererPixbufPrivate C.GtkCellRendererPixbufPrivate
type FileChooserDialog C.GtkFileChooserDialog
type RangePrivate C.GtkRangePrivate
type HSV C.GtkHSV
type ColorSelectionDialogClass C.GtkColorSelectionDialogClass
type FontSelectionClass C.GtkFontSelectionClass
type EditableInterface C.GtkEditableInterface
type SizeGroup C.GtkSizeGroup
type Socket C.GtkSocket
type FontChooserDialog C.GtkFontChooserDialog
type ToggleActionPrivate C.GtkToggleActionPrivate
type SwitchClass C.GtkSwitchClass
type CellRendererClassPrivate C.GtkCellRendererClassPrivate
type FrameClass C.GtkFrameClass
type LevelBarPrivate C.GtkLevelBarPrivate
type Style C.GtkStyle
type PanedClass C.GtkPanedClass
type IconFactory C.GtkIconFactory
type TableChild C.GtkTableChild
type EntryClass C.GtkEntryClass
type Assistant C.GtkAssistant
type ColorChooserDialogPrivate C.GtkColorChooserDialogPrivate
type VScale C.GtkVScale
type ScalePrivate C.GtkScalePrivate
type RadioActionPrivate C.GtkRadioActionPrivate
type HButtonBox C.GtkHButtonBox
type EntryCompletionClass C.GtkEntryCompletionClass
type BoxClass C.GtkBoxClass
type TreeStoreClass C.GtkTreeStoreClass
type CellRendererAccelPrivate C.GtkCellRendererAccelPrivate
type MenuShell C.GtkMenuShell
type SettingsPrivate C.GtkSettingsPrivate
type Paned C.GtkPaned
type LabelPrivate C.GtkLabelPrivate
type AboutDialogPrivate C.GtkAboutDialogPrivate
type TreeModelSortPrivate C.GtkTreeModelSortPrivate
type ApplicationWindowPrivate C.GtkApplicationWindowPrivate
type VScaleClass C.GtkVScaleClass
type TreeModelIface C.GtkTreeModelIface
type MenuToolButtonClass C.GtkMenuToolButtonClass
type OffscreenWindow C.GtkOffscreenWindow
type ToolButtonClass C.GtkToolButtonClass
type ToolItemGroupClass C.GtkToolItemGroupClass
type OverlayPrivate C.GtkOverlayPrivate
type HandleBoxPrivate C.GtkHandleBoxPrivate
type CellRendererAccelClass C.GtkCellRendererAccelClass
type ColorSelectionPrivate C.GtkColorSelectionPrivate
type Builder C.GtkBuilder
type CellRendererPrivate C.GtkCellRendererPrivate
type VPaned C.GtkVPaned
type AppChooserButtonPrivate C.GtkAppChooserButtonPrivate
type Arrow C.GtkArrow
type CellViewClass C.GtkCellViewClass
type ApplicationWindow C.GtkApplicationWindow
type TextTagTable C.GtkTextTagTable
type NotebookPrivate C.GtkNotebookPrivate
type TextTagClass C.GtkTextTagClass
type ImagePrivate C.GtkImagePrivate
type TextTag C.GtkTextTag
type IconFactoryClass C.GtkIconFactoryClass
type CellRendererCombo C.GtkCellRendererCombo
type TextViewClass C.GtkTextViewClass
type TargetList C.GtkTargetList
type Calendar C.GtkCalendar
type ToggleButtonClass C.GtkToggleButtonClass
type FontSelectionDialog C.GtkFontSelectionDialog
type SeparatorClass C.GtkSeparatorClass
type NumerableIconClass C.GtkNumerableIconClass
type ExpanderClass C.GtkExpanderClass
type NumerableIcon C.GtkNumerableIcon
type CellArea C.GtkCellArea
type PrintOperationPreviewIface C.GtkPrintOperationPreviewIface
type Frame C.GtkFrame
type SettingsValue C.GtkSettingsValue
type MessageDialogPrivate C.GtkMessageDialogPrivate
type TextBufferPrivate C.GtkTextBufferPrivate
type ColorChooserInterface C.GtkColorChooserInterface
type EventBoxClass C.GtkEventBoxClass
type BinClass C.GtkBinClass
type SeparatorMenuItemClass C.GtkSeparatorMenuItemClass
type ActionEntry C.GtkActionEntry
type SeparatorToolItemPrivate C.GtkSeparatorToolItemPrivate
type TreeStorePrivate C.GtkTreeStorePrivate
type ToggleAction C.GtkToggleAction
type CssProvider C.GtkCssProvider
type HScaleClass C.GtkHScaleClass
type ContainerClass C.GtkContainerClass
type FontChooserWidgetClass C.GtkFontChooserWidgetClass
type CheckMenuItemClass C.GtkCheckMenuItemClass
type EntryBuffer C.GtkEntryBuffer
type IconView C.GtkIconView
type EventBoxPrivate C.GtkEventBoxPrivate
type LevelBarClass C.GtkLevelBarClass
type ActionGroupPrivate C.GtkActionGroupPrivate
type RecentActionPrivate C.GtkRecentActionPrivate
type Separator C.GtkSeparator
type LockButtonClass C.GtkLockButtonClass
type AppChooserButton C.GtkAppChooserButton
type UIManagerClass C.GtkUIManagerClass
type CellAreaBoxClass C.GtkCellAreaBoxClass
type ScaleClass C.GtkScaleClass
type StatusIconClass C.GtkStatusIconClass
type Expander C.GtkExpander
type Grid C.GtkGrid
type CellRendererSpinPrivate C.GtkCellRendererSpinPrivate
type RecentChooserMenuPrivate C.GtkRecentChooserMenuPrivate
type WidgetClassPrivate C.GtkWidgetClassPrivate
type SpinnerClass C.GtkSpinnerClass
type LinkButton C.GtkLinkButton
type ToolPalette C.GtkToolPalette
type CellRendererTogglePrivate C.GtkCellRendererTogglePrivate
type ComboBox C.GtkComboBox
type IconTheme C.GtkIconTheme
type ToggleToolButtonPrivate C.GtkToggleToolButtonPrivate
type AccelGroup C.GtkAccelGroup
type VPanedClass C.GtkVPanedClass
type Border C.GtkBorder
type FontButton C.GtkFontButton
type CellRendererTextPrivate C.GtkCellRendererTextPrivate
type FileChooserDialogPrivate C.GtkFileChooserDialogPrivate
type MenuShellPrivate C.GtkMenuShellPrivate
type BinPrivate C.GtkBinPrivate
type IMContextInfo C.GtkIMContextInfo
type WindowGroupPrivate C.GtkWindowGroupPrivate
type CellViewPrivate C.GtkCellViewPrivate
type DrawingArea C.GtkDrawingArea
type SpinButtonPrivate C.GtkSpinButtonPrivate
type LockButton C.GtkLockButton
type IconViewPrivate C.GtkIconViewPrivate
type ScrollableInterface C.GtkScrollableInterface
type WindowGroup C.GtkWindowGroup
type ColorChooserDialogClass C.GtkColorChooserDialogClass
type IMMulticontextPrivate C.GtkIMMulticontextPrivate
type VScrollbarClass C.GtkVScrollbarClass
type FileChooserWidgetClass C.GtkFileChooserWidgetClass
type TreeView C.GtkTreeView
type FontSelectionPrivate C.GtkFontSelectionPrivate
type ColorChooserWidgetPrivate C.GtkColorChooserWidgetPrivate
type IconThemePrivate C.GtkIconThemePrivate
type VSeparatorClass C.GtkVSeparatorClass
type PrintContext C.GtkPrintContext
type TextAppearance C.GtkTextAppearance
type Entry C.GtkEntry
type Range C.GtkRange
type CellRendererPixbufClass C.GtkCellRendererPixbufClass
type MountOperationPrivate C.GtkMountOperationPrivate
type VolumeButtonClass C.GtkVolumeButtonClass
type ButtonBox C.GtkButtonBox
type SizeGroupClass C.GtkSizeGroupClass
type TreeModelFilterPrivate C.GtkTreeModelFilterPrivate
type AccelKey C.GtkAccelKey
type LabelSelectionInfo C.GtkLabelSelectionInfo
type HScale C.GtkHScale
type PrintOperationClass C.GtkPrintOperationClass
type TextTagPrivate C.GtkTextTagPrivate
type TreeSortableIface C.GtkTreeSortableIface
type ImageMenuItem C.GtkImageMenuItem
type LinkButtonPrivate C.GtkLinkButtonPrivate
type BindingEntry C.GtkBindingEntry
type AlignmentClass C.GtkAlignmentClass
type FontChooserWidgetPrivate C.GtkFontChooserWidgetPrivate
type TextChildAnchorClass C.GtkTextChildAnchorClass
type TreeViewClass C.GtkTreeViewClass
type IMContextSimplePrivate C.GtkIMContextSimplePrivate
type RecentFilter C.GtkRecentFilter
type CellRendererComboPrivate C.GtkCellRendererComboPrivate
type SocketClass C.GtkSocketClass
type ToggleToolButtonClass C.GtkToggleToolButtonClass
type IconViewClass C.GtkIconViewClass
type AppChooserWidgetClass C.GtkAppChooserWidgetClass
type ToggleActionEntry C.GtkToggleActionEntry
type PrintSettings C.GtkPrintSettings
type HPaned C.GtkHPaned
type TreeSelectionPrivate C.GtkTreeSelectionPrivate
type RecentActionClass C.GtkRecentActionClass
type MenuBar C.GtkMenuBar
type FontButtonClass C.GtkFontButtonClass
type CalendarPrivate C.GtkCalendarPrivate
type SeparatorToolItemClass C.GtkSeparatorToolItemClass
type HPanedClass C.GtkHPanedClass
type RadioButtonClass C.GtkRadioButtonClass
type CalendarClass C.GtkCalendarClass
type MenuToolButton C.GtkMenuToolButton
type FontButtonPrivate C.GtkFontButtonPrivate
type AccessiblePrivate C.GtkAccessiblePrivate
type TreeSelectionClass C.GtkTreeSelectionClass
type EntryCompletion C.GtkEntryCompletion
type MenuItem C.GtkMenuItem
type ToolItemClass C.GtkToolItemClass
type AppChooserWidget C.GtkAppChooserWidget
type Requisition C.GtkRequisition
type LevelBar C.GtkLevelBar
type MenuShellClass C.GtkMenuShellClass
type MenuButtonPrivate C.GtkMenuButtonPrivate
type RadioActionClass C.GtkRadioActionClass
type SpinnerPrivate C.GtkSpinnerPrivate
type ToolShellIface C.GtkToolShellIface
type AccelMapClass C.GtkAccelMapClass
type TreeRowReference C.GtkTreeRowReference
type TreeModelSortClass C.GtkTreeModelSortClass
type MountOperation C.GtkMountOperation
type AboutDialogClass C.GtkAboutDialogClass
type Settings C.GtkSettings
type EntryBufferClass C.GtkEntryBufferClass
type TextIter C.GtkTextIter
type MenuBarClass C.GtkMenuBarClass
type ViewportPrivate C.GtkViewportPrivate
type AppChooserDialogPrivate C.GtkAppChooserDialogPrivate
type LabelClass C.GtkLabelClass
type EntryCompletionPrivate C.GtkEntryCompletionPrivate
type SwitchPrivate C.GtkSwitchPrivate
type SeparatorPrivate C.GtkSeparatorPrivate
type MessageDialog C.GtkMessageDialog
type AccelGroupPrivate C.GtkAccelGroupPrivate
type TreeModelFilter C.GtkTreeModelFilter
type FileFilter C.GtkFileFilter
type CssSection C.GtkCssSection
type MenuItemPrivate C.GtkMenuItemPrivate
type ColorSelectionClass C.GtkColorSelectionClass
type TextTagTablePrivate C.GtkTextTagTablePrivate
type FileChooserDialogClass C.GtkFileChooserDialogClass
type LinkButtonClass C.GtkLinkButtonClass
type ListStore C.GtkListStore
type ThemeEngine C.GtkThemeEngine
type ListStorePrivate C.GtkListStorePrivate
type AdjustmentPrivate C.GtkAdjustmentPrivate
type AppChooserButtonClass C.GtkAppChooserButtonClass
type Dialog C.GtkDialog
type HandleBox C.GtkHandleBox
type CellRendererProgressClass C.GtkCellRendererProgressClass
type AccelGroupEntry C.GtkAccelGroupEntry
type ContainerPrivate C.GtkContainerPrivate
type ToolButtonPrivate C.GtkToolButtonPrivate
type ComboBoxText C.GtkComboBoxText
type IMMulticontext C.GtkIMMulticontext
type ColorButtonClass C.GtkColorButtonClass
type ButtonPrivate C.GtkButtonPrivate
type ActionClass C.GtkActionClass
type ActionPrivate C.GtkActionPrivate
type StatusIconPrivate C.GtkStatusIconPrivate
type MiscPrivate C.GtkMiscPrivate
type IMContextSimple C.GtkIMContextSimple
type BuilderPrivate C.GtkBuilderPrivate
type ProgressBarPrivate C.GtkProgressBarPrivate
type IconSet C.GtkIconSet
type Application C.GtkApplication
type ToolbarPrivate C.GtkToolbarPrivate
type TreeModelFilterClass C.GtkTreeModelFilterClass
type RangeClass C.GtkRangeClass
type RcStyleClass C.GtkRcStyleClass
type AppChooserWidgetPrivate C.GtkAppChooserWidgetPrivate
type RecentData C.GtkRecentData
type Fixed C.GtkFixed
type CellAreaBoxPrivate C.GtkCellAreaBoxPrivate
type TableRowCol C.GtkTableRowCol
type FontSelection C.GtkFontSelection
type FileChooserButtonPrivate C.GtkFileChooserButtonPrivate
type RadioToolButton C.GtkRadioToolButton
type HSVClass C.GtkHSVClass
type TextChildAnchor C.GtkTextChildAnchor
type StylePropertiesPrivate C.GtkStylePropertiesPrivate
type RcContext C.GtkRcContext
type CheckMenuItemPrivate C.GtkCheckMenuItemPrivate
type VolumeButton C.GtkVolumeButton
type FixedPrivate C.GtkFixedPrivate
type IMMulticontextClass C.GtkIMMulticontextClass
type TextBufferClass C.GtkTextBufferClass
type FixedChild C.GtkFixedChild
type Scrollbar C.GtkScrollbar
type AccelLabelClass C.GtkAccelLabelClass
type StatusbarClass C.GtkStatusbarClass
type TreeViewColumnClass C.GtkTreeViewColumnClass
type EventBox C.GtkEventBox
type TreeViewColumnPrivate C.GtkTreeViewColumnPrivate
type VBoxClass C.GtkVBoxClass
type CheckButton C.GtkCheckButton
type ImageMenuItemClass C.GtkImageMenuItemClass
type HSeparatorClass C.GtkHSeparatorClass
type AdjustmentClass C.GtkAdjustmentClass
type WindowClass C.GtkWindowClass
type UIManager C.GtkUIManager
type VButtonBoxClass C.GtkVButtonBoxClass
type BindingSet C.GtkBindingSet
type BuildableIface C.GtkBuildableIface
type SizeGroupPrivate C.GtkSizeGroupPrivate
type RecentManagerClass C.GtkRecentManagerClass
type ColorChooserWidgetClass C.GtkColorChooserWidgetClass
type WidgetPrivate C.GtkWidgetPrivate
type Bin C.GtkBin
type UIManagerPrivate C.GtkUIManagerPrivate
type ApplicationClass C.GtkApplicationClass
type BuilderClass C.GtkBuilderClass
type CheckButtonClass C.GtkCheckButtonClass
type ComboBoxClass C.GtkComboBoxClass
type FileChooserButton C.GtkFileChooserButton
type IMContext C.GtkIMContext
type MenuBarPrivate C.GtkMenuBarPrivate
type Misc C.GtkMisc
type MenuToolButtonPrivate C.GtkMenuToolButtonPrivate
type ToggleToolButton C.GtkToggleToolButton
type AspectFrameClass C.GtkAspectFrameClass
type TreeModelSort C.GtkTreeModelSort
type FontChooserDialogClass C.GtkFontChooserDialogClass
type CellRenderer C.GtkCellRenderer
type StyleContext C.GtkStyleContext
type FileChooserWidget C.GtkFileChooserWidget
type Scale C.GtkScale
type OffscreenWindowClass C.GtkOffscreenWindowClass
type WidgetPath C.GtkWidgetPath
type ThemingEngineClass C.GtkThemingEngineClass
type ViewportClass C.GtkViewportClass
type TearoffMenuItem C.GtkTearoffMenuItem
type TextMarkClass C.GtkTextMarkClass
type Statusbar C.GtkStatusbar
type RadioButtonPrivate C.GtkRadioButtonPrivate
type ScaleButtonPrivate C.GtkScaleButtonPrivate
type FileFilterInfo C.GtkFileFilterInfo
type GridPrivate C.GtkGridPrivate
type IconFactoryPrivate C.GtkIconFactoryPrivate
type PageRange C.GtkPageRange
type Menu C.GtkMenu
type IMContextClass C.GtkIMContextClass
type RadioMenuItemPrivate C.GtkRadioMenuItemPrivate
type LockButtonPrivate C.GtkLockButtonPrivate
type TreeStore C.GtkTreeStore
type CellRendererText C.GtkCellRendererText
type TreeDragDestIface C.GtkTreeDragDestIface
type Notebook C.GtkNotebook
type RecentManagerPrivate C.GtkRecentManagerPrivate
type MountOperationClass C.GtkMountOperationClass
type VBox C.GtkVBox
type DialogPrivate C.GtkDialogPrivate
type PaperSize C.GtkPaperSize
type StylePropertiesClass C.GtkStylePropertiesClass
type Table C.GtkTable
type ToolItemPrivate C.GtkToolItemPrivate
type SpinButtonClass C.GtkSpinButtonClass
type TearoffMenuItemClass C.GtkTearoffMenuItemClass
type Invisible C.GtkInvisible
type ScrolledWindow C.GtkScrolledWindow
type PlugClass C.GtkPlugClass
type RadioToolButtonClass C.GtkRadioToolButtonClass
type Layout C.GtkLayout
type RadioMenuItem C.GtkRadioMenuItem
type PageSetup C.GtkPageSetup
type CellRendererSpin C.GtkCellRendererSpin
type VSeparator C.GtkVSeparator
type CellAreaPrivate C.GtkCellAreaPrivate
type TreeViewPrivate C.GtkTreeViewPrivate
type ToggleButtonPrivate C.GtkToggleButtonPrivate
type AccelMap C.GtkAccelMap
type RecentFilterInfo C.GtkRecentFilterInfo
type RecentChooserWidget C.GtkRecentChooserWidget
type IconInfo C.GtkIconInfo
type Clipboard C.GtkClipboard
type ProgressBarClass C.GtkProgressBarClass
type AccelLabel C.GtkAccelLabel
type FontSelectionDialogClass C.GtkFontSelectionDialogClass
type InfoBar C.GtkInfoBar
type HSeparator C.GtkHSeparator
type SettingsClass C.GtkSettingsClass
type CellEditableIface C.GtkCellEditableIface
type Alignment C.GtkAlignment
type MessageDialogClass C.GtkMessageDialogClass
type Overlay C.GtkOverlay
type TreePath C.GtkTreePath
type ActivatableIface C.GtkActivatableIface
type ScrolledWindowClass C.GtkScrolledWindowClass
type LayoutClass C.GtkLayoutClass
type HBoxClass C.GtkHBoxClass
type LayoutPrivate C.GtkLayoutPrivate
type Spinner C.GtkSpinner
type MiscClass C.GtkMiscClass
type AccelLabelPrivate C.GtkAccelLabelPrivate
type PrintOperation C.GtkPrintOperation
type TreeIter C.GtkTreeIter
type ToolPaletteClass C.GtkToolPaletteClass
type Gradient C.GtkGradient
type CellRendererComboClass C.GtkCellRendererComboClass
type FontChooserWidget C.GtkFontChooserWidget
type CellView C.GtkCellView
type FontChooserIface C.GtkFontChooserIface
type CellRendererTextClass C.GtkCellRendererTextClass
type IconSource C.GtkIconSource
type WindowPrivate C.GtkWindowPrivate
type CssProviderClass C.GtkCssProviderClass
type CellRendererAccel C.GtkCellRendererAccel
type FileChooserButtonClass C.GtkFileChooserButtonClass
type CellRendererSpinner C.GtkCellRendererSpinner
type ColorChooserDialog C.GtkColorChooserDialog
type HScrollbarClass C.GtkHScrollbarClass
type CellRendererToggle C.GtkCellRendererToggle
type Label C.GtkLabel
type VButtonBox C.GtkVButtonBox
type ButtonClass C.GtkButtonClass
type CellAreaContextPrivate C.GtkCellAreaContextPrivate
type OrientableIface C.GtkOrientableIface
type SearchEntryClass C.GtkSearchEntryClass
type CellAreaBox C.GtkCellAreaBox
type RecentInfo C.GtkRecentInfo
type ThemingEnginePrivate C.GtkThemingEnginePrivate
type CssProviderPrivate C.GtkCssProviderPrivate
type ImageClass C.GtkImageClass
type SearchEntry C.GtkSearchEntry
type MenuButton C.GtkMenuButton
type ThemingEngine C.GtkThemingEngine
type RecentAction C.GtkRecentAction
type CellRendererSpinnerClass C.GtkCellRendererSpinnerClass
type StyleClass C.GtkStyleClass
type Button C.GtkButton
type ArrowClass C.GtkArrowClass
type IconThemeClass C.GtkIconThemeClass
type AboutDialog C.GtkAboutDialog
type CellAreaClass C.GtkCellAreaClass
type MenuPrivate C.GtkMenuPrivate
type SeparatorToolItem C.GtkSeparatorToolItem
type AssistantPrivate C.GtkAssistantPrivate
type RecentChooserDialog C.GtkRecentChooserDialog
type ExpanderPrivate C.GtkExpanderPrivate
type SpinButton C.GtkSpinButton
type ScaleButton C.GtkScaleButton
type TreeViewColumn C.GtkTreeViewColumn
type RadioButton C.GtkRadioButton
type ImageMenuItemPrivate C.GtkImageMenuItemPrivate
type RecentChooserMenu C.GtkRecentChooserMenu
type CellRendererPixbuf C.GtkCellRendererPixbuf
type WidgetClass C.GtkWidgetClass
type InvisiblePrivate C.GtkInvisiblePrivate
type RadioAction C.GtkRadioAction
type RecentChooserDialogClass C.GtkRecentChooserDialogClass
type AppChooserDialogClass C.GtkAppChooserDialogClass
type SeparatorMenuItem C.GtkSeparatorMenuItem
type PrintOperationPrivate C.GtkPrintOperationPrivate
type IMContextSimpleClass C.GtkIMContextSimpleClass
type SymbolicColor C.GtkSymbolicColor
type ComboBoxTextClass C.GtkComboBoxTextClass
type TextBuffer C.GtkTextBuffer
type TextMark C.GtkTextMark
type SocketPrivate C.GtkSocketPrivate
type MenuClass C.GtkMenuClass
type ArrowPrivate C.GtkArrowPrivate
type PanedPrivate C.GtkPanedPrivate
type CellRendererProgress C.GtkCellRendererProgress
type AccelGroupClass C.GtkAccelGroupClass
type TextBTree C.GtkTextBTree
type ToolItemGroup C.GtkToolItemGroup
type WindowGroupClass C.GtkWindowGroupClass
type RadioActionEntry C.GtkRadioActionEntry
type RecentChooserWidgetClass C.GtkRecentChooserWidgetClass
type GridClass C.GtkGridClass
type PlugPrivate C.GtkPlugPrivate
type AlignmentPrivate C.GtkAlignmentPrivate
type VScrollbar C.GtkVScrollbar
type TextTagTableClass C.GtkTextTagTableClass
type CellRendererProgressPrivate C.GtkCellRendererProgressPrivate
type BindingSignal C.GtkBindingSignal
type Image C.GtkImage
type WidgetAuxInfo C.GtkWidgetAuxInfo
type TargetEntry C.GtkTargetEntry
type ButtonBoxClass C.GtkButtonBoxClass
type TableClass C.GtkTableClass
type StyleContextClass C.GtkStyleContextClass
type ScrollbarClass C.GtkScrollbarClass
type EntryPrivate C.GtkEntryPrivate
type StatusIcon C.GtkStatusIcon
type Tooltip C.GtkTooltip
type BindingArg C.GtkBindingArg
type ButtonBoxPrivate C.GtkButtonBoxPrivate
type RecentChooserDialogPrivate C.GtkRecentChooserDialogPrivate
type WindowGeometryInfo C.GtkWindowGeometryInfo
type InfoBarClass C.GtkInfoBarClass
type AspectFrame C.GtkAspectFrame
type FileChooserWidgetPrivate C.GtkFileChooserWidgetPrivate
type ColorSelectionDialog C.GtkColorSelectionDialog
type AssistantClass C.GtkAssistantClass
type ApplicationWindowClass C.GtkApplicationWindowClass
type RecentChooserMenuClass C.GtkRecentChooserMenuClass
type RecentChooserIface C.GtkRecentChooserIface
type NotebookClass C.GtkNotebookClass
type CellAreaContextClass C.GtkCellAreaContextClass
type TreeDragSourceIface C.GtkTreeDragSourceIface
type ToolItem C.GtkToolItem
type HandleBoxClass C.GtkHandleBoxClass
type ScrolledWindowPrivate C.GtkScrolledWindowPrivate
type CellRendererToggleClass C.GtkCellRendererToggleClass
type Action C.GtkAction
type Plug C.GtkPlug
type AccessibleClass C.GtkAccessibleClass
type TextViewPrivate C.GtkTextViewPrivate
type StockItem C.GtkStockItem
type MenuButtonClass C.GtkMenuButtonClass
type ColorSelectionDialogPrivate C.GtkColorSelectionDialogPrivate
type HBox C.GtkHBox
type ApplicationPrivate C.GtkApplicationPrivate
type CellAreaContext C.GtkCellAreaContext
type DrawingAreaClass C.GtkDrawingAreaClass
type EntryBufferPrivate C.GtkEntryBufferPrivate
type AppChooserDialog C.GtkAppChooserDialog
type DialogClass C.GtkDialogClass
type RequestedSize C.GtkRequestedSize
type HButtonBoxClass C.GtkHButtonBoxClass
type AspectFramePrivate C.GtkAspectFramePrivate
type StyleProperties C.GtkStyleProperties
type ActionGroupClass C.GtkActionGroupClass
type TablePrivate C.GtkTablePrivate
type BoxPrivate C.GtkBoxPrivate
type Adjustment C.GtkAdjustment
type StyleProviderIface C.GtkStyleProviderIface
type NumerableIconPrivate C.GtkNumerableIconPrivate
type Box C.GtkBox
func AboutDialogNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_about_dialog_new()
	return
}

func (_self_ *AboutDialog) AddCreditSection(section_name *C.gchar, people unsafe.Pointer) () {
	C._gtk_about_dialog_add_credit_section((*C.GtkAboutDialog)(_self_), section_name, people)
	return
}

func (_self_ *AboutDialog) GetArtists() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_artists((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetAuthors() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_authors((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetComments() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_comments((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetCopyright() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_copyright((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetDocumenters() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_about_dialog_get_documenters((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLicense() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_license((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLicenseType() (_return_ C.GtkLicense) {
	_return_ = C.gtk_about_dialog_get_license_type((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogo() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_about_dialog_get_logo((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetLogoIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_logo_icon_name((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetProgramName() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_program_name((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetTranslatorCredits() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_translator_credits((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetVersion() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_version((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetWebsite() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_website((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetWebsiteLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_about_dialog_get_website_label((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) GetWrapLicense() (_return_ C.gboolean) {
	_return_ = C.gtk_about_dialog_get_wrap_license((*C.GtkAboutDialog)(_self_))
	return
}

func (_self_ *AboutDialog) SetArtists(artists unsafe.Pointer) () {
	C._gtk_about_dialog_set_artists((*C.GtkAboutDialog)(_self_), artists)
	return
}

func (_self_ *AboutDialog) SetAuthors(authors unsafe.Pointer) () {
	C._gtk_about_dialog_set_authors((*C.GtkAboutDialog)(_self_), authors)
	return
}

func (_self_ *AboutDialog) SetComments(comments *C.gchar) () {
	C._gtk_about_dialog_set_comments((*C.GtkAboutDialog)(_self_), comments)
	return
}

func (_self_ *AboutDialog) SetCopyright(copyright *C.gchar) () {
	C._gtk_about_dialog_set_copyright((*C.GtkAboutDialog)(_self_), copyright)
	return
}

func (_self_ *AboutDialog) SetDocumenters(documenters unsafe.Pointer) () {
	C._gtk_about_dialog_set_documenters((*C.GtkAboutDialog)(_self_), documenters)
	return
}

func (_self_ *AboutDialog) SetLicense(license *C.gchar) () {
	C._gtk_about_dialog_set_license((*C.GtkAboutDialog)(_self_), license)
	return
}

func (_self_ *AboutDialog) SetLicenseType(license_type C.GtkLicense) () {
	C.gtk_about_dialog_set_license_type((*C.GtkAboutDialog)(_self_), license_type)
	return
}

func (_self_ *AboutDialog) SetLogo(logo *C.GdkPixbuf) () {
	C.gtk_about_dialog_set_logo((*C.GtkAboutDialog)(_self_), logo)
	return
}

func (_self_ *AboutDialog) SetLogoIconName(icon_name *C.gchar) () {
	C._gtk_about_dialog_set_logo_icon_name((*C.GtkAboutDialog)(_self_), icon_name)
	return
}

func (_self_ *AboutDialog) SetProgramName(name *C.gchar) () {
	C._gtk_about_dialog_set_program_name((*C.GtkAboutDialog)(_self_), name)
	return
}

func (_self_ *AboutDialog) SetTranslatorCredits(translator_credits *C.gchar) () {
	C._gtk_about_dialog_set_translator_credits((*C.GtkAboutDialog)(_self_), translator_credits)
	return
}

func (_self_ *AboutDialog) SetVersion(version *C.gchar) () {
	C._gtk_about_dialog_set_version((*C.GtkAboutDialog)(_self_), version)
	return
}

func (_self_ *AboutDialog) SetWebsite(website *C.gchar) () {
	C._gtk_about_dialog_set_website((*C.GtkAboutDialog)(_self_), website)
	return
}

func (_self_ *AboutDialog) SetWebsiteLabel(website_label *C.gchar) () {
	C._gtk_about_dialog_set_website_label((*C.GtkAboutDialog)(_self_), website_label)
	return
}

func (_self_ *AboutDialog) SetWrapLicense(wrap_license C.gboolean) () {
	C.gtk_about_dialog_set_wrap_license((*C.GtkAboutDialog)(_self_), wrap_license)
	return
}

func AccelGroupNew() (_return_ *C.GtkAccelGroup) {
	_return_ = C.gtk_accel_group_new()
	return
}

func AccelGroupFromAccelClosure(closure *C.GClosure) (_return_ *C.GtkAccelGroup) {
	_return_ = C.gtk_accel_group_from_accel_closure(closure)
	return
}

func (_self_ *AccelGroup) Activate(accel_quark C.GQuark, acceleratable *C.GObject, accel_key C.guint, accel_mods C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_accel_group_activate((*C.GtkAccelGroup)(_self_), accel_quark, acceleratable, accel_key, accel_mods)
	return
}

func (_self_ *AccelGroup) Connect(accel_key C.guint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags, closure *C.GClosure) () {
	C.gtk_accel_group_connect((*C.GtkAccelGroup)(_self_), accel_key, accel_mods, accel_flags, closure)
	return
}

func (_self_ *AccelGroup) ConnectByPath(accel_path *C.gchar, closure *C.GClosure) () {
	C._gtk_accel_group_connect_by_path((*C.GtkAccelGroup)(_self_), accel_path, closure)
	return
}

func (_self_ *AccelGroup) Disconnect(closure *C.GClosure) (_return_ C.gboolean) {
	_return_ = C.gtk_accel_group_disconnect((*C.GtkAccelGroup)(_self_), closure)
	return
}

func (_self_ *AccelGroup) DisconnectKey(accel_key C.guint, accel_mods C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_accel_group_disconnect_key((*C.GtkAccelGroup)(_self_), accel_key, accel_mods)
	return
}

func (_self_ *AccelGroup) Find(find_func C.GtkAccelGroupFindFunc, data C.gpointer) (_return_ *C.GtkAccelKey) {
	_return_ = C.gtk_accel_group_find((*C.GtkAccelGroup)(_self_), find_func, data)
	return
}

func (_self_ *AccelGroup) GetIsLocked() (_return_ C.gboolean) {
	_return_ = C.gtk_accel_group_get_is_locked((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) GetModifierMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accel_group_get_modifier_mask((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Lock() () {
	C.gtk_accel_group_lock((*C.GtkAccelGroup)(_self_))
	return
}

func (_self_ *AccelGroup) Query(accel_key C.guint, accel_mods C.GdkModifierType) (_return_ *C.GtkAccelGroupEntry, n_entries *C.guint) {
	_return_ = C.gtk_accel_group_query((*C.GtkAccelGroup)(_self_), accel_key, accel_mods, n_entries)
	return
}

func (_self_ *AccelGroup) Unlock() () {
	C.gtk_accel_group_unlock((*C.GtkAccelGroup)(_self_))
	return
}

func AccelLabelNew(string_ *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_accel_label_new(string_)
	return
}

func (_self_ *AccelLabel) GetAccelWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_accel_label_get_accel_widget((*C.GtkAccelLabel)(_self_))
	return
}

func (_self_ *AccelLabel) GetAccelWidth() (_return_ C.guint) {
	_return_ = C.gtk_accel_label_get_accel_width((*C.GtkAccelLabel)(_self_))
	return
}

func (_self_ *AccelLabel) Refetch() (_return_ C.gboolean) {
	_return_ = C.gtk_accel_label_refetch((*C.GtkAccelLabel)(_self_))
	return
}

func (_self_ *AccelLabel) SetAccel(accelerator_key C.guint, accelerator_mods C.GdkModifierType) () {
	C.gtk_accel_label_set_accel((*C.GtkAccelLabel)(_self_), accelerator_key, accelerator_mods)
	return
}

func (_self_ *AccelLabel) SetAccelClosure(accel_closure *C.GClosure) () {
	C.gtk_accel_label_set_accel_closure((*C.GtkAccelLabel)(_self_), accel_closure)
	return
}

func (_self_ *AccelLabel) SetAccelWidget(accel_widget *C.GtkWidget) () {
	C.gtk_accel_label_set_accel_widget((*C.GtkAccelLabel)(_self_), accel_widget)
	return
}

func AccelMapAddEntry(accel_path *C.gchar, accel_key C.guint, accel_mods C.GdkModifierType) () {
	C._gtk_accel_map_add_entry(accel_path, accel_key, accel_mods)
	return
}

func AccelMapAddFilter(filter_pattern *C.gchar) () {
	C._gtk_accel_map_add_filter(filter_pattern)
	return
}

func AccelMapChangeEntry(accel_path *C.gchar, accel_key C.guint, accel_mods C.GdkModifierType, replace C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_accel_map_change_entry(accel_path, accel_key, accel_mods, replace)
	return
}

func AccelMapForeach(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach(data, foreach_func)
	return
}

func AccelMapForeachUnfiltered(data C.gpointer, foreach_func C.GtkAccelMapForeach) () {
	C.gtk_accel_map_foreach_unfiltered(data, foreach_func)
	return
}

func AccelMapGet() (_return_ *C.GtkAccelMap) {
	_return_ = C.gtk_accel_map_get()
	return
}

func AccelMapLoad(file_name *C.gchar) () {
	C._gtk_accel_map_load(file_name)
	return
}

func AccelMapLoadFd(fd C.gint) () {
	C.gtk_accel_map_load_fd(fd)
	return
}

func AccelMapLoadScanner(scanner *C.GScanner) () {
	C.gtk_accel_map_load_scanner(scanner)
	return
}

func AccelMapLockPath(accel_path *C.gchar) () {
	C._gtk_accel_map_lock_path(accel_path)
	return
}

func AccelMapLookupEntry(accel_path *C.gchar) (_return_ C.gboolean, key *C.GtkAccelKey) {
	_return_ = C._gtk_accel_map_lookup_entry(accel_path, key)
	return
}

func AccelMapSave(file_name *C.gchar) () {
	C._gtk_accel_map_save(file_name)
	return
}

func AccelMapSaveFd(fd C.gint) () {
	C.gtk_accel_map_save_fd(fd)
	return
}

func AccelMapUnlockPath(accel_path *C.gchar) () {
	C._gtk_accel_map_unlock_path(accel_path)
	return
}

func (_self_ *Accessible) GetWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_accessible_get_widget((*C.GtkAccessible)(_self_))
	return
}

func (_self_ *Accessible) SetWidget(widget *C.GtkWidget) () {
	C.gtk_accessible_set_widget((*C.GtkAccessible)(_self_), widget)
	return
}

func ActionNew(name *C.gchar, label *C.gchar, tooltip *C.gchar, stock_id *C.gchar) (_return_ *C.GtkAction) {
	_return_ = C._gtk_action_new(name, label, tooltip, stock_id)
	return
}

func (_self_ *Action) Activate() () {
	C.gtk_action_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) BlockActivate() () {
	C.gtk_action_block_activate((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) ConnectAccelerator() () {
	C.gtk_action_connect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) CreateIcon(icon_size C.GtkIconSize) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_action_create_icon((*C.GtkAction)(_self_), icon_size)
	return
}

func (_self_ *Action) CreateMenu() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_action_create_menu((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) CreateMenuItem() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_action_create_menu_item((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) CreateToolItem() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_action_create_tool_item((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) DisconnectAccelerator() () {
	C.gtk_action_disconnect_accelerator((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelClosure() (_return_ *C.GClosure) {
	_return_ = C.gtk_action_get_accel_closure((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAccelPath() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_accel_path((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetAlwaysShowImage() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_always_show_image((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_action_get_gicon((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_icon_name((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetIsImportant() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_is_important((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_label((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_name((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetProxies() (_return_ *C.GSList) {
	_return_ = C.gtk_action_get_proxies((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_sensitive((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetShortLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_short_label((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetStockId() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_stock_id((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetTooltip() (_return_ *C.gchar) {
	_return_ = C._gtk_action_get_tooltip((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_visible((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetVisibleHorizontal() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_visible_horizontal((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) GetVisibleVertical() (_return_ C.gboolean) {
	_return_ = C.gtk_action_get_visible_vertical((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) IsSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_action_is_sensitive((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) IsVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_action_is_visible((*C.GtkAction)(_self_))
	return
}

func (_self_ *Action) SetAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_action_set_accel_group((*C.GtkAction)(_self_), accel_group)
	return
}

func (_self_ *Action) SetAccelPath(accel_path *C.gchar) () {
	C._gtk_action_set_accel_path((*C.GtkAction)(_self_), accel_path)
	return
}

func (_self_ *Action) SetAlwaysShowImage(always_show C.gboolean) () {
	C.gtk_action_set_always_show_image((*C.GtkAction)(_self_), always_show)
	return
}

func (_self_ *Action) SetGicon(icon *C.GIcon) () {
	C.gtk_action_set_gicon((*C.GtkAction)(_self_), icon)
	return
}

func (_self_ *Action) SetIconName(icon_name *C.gchar) () {
	C._gtk_action_set_icon_name((*C.GtkAction)(_self_), icon_name)
	return
}

func (_self_ *Action) SetIsImportant(is_important C.gboolean) () {
	C.gtk_action_set_is_important((*C.GtkAction)(_self_), is_important)
	return
}

func (_self_ *Action) SetLabel(label *C.gchar) () {
	C._gtk_action_set_label((*C.GtkAction)(_self_), label)
	return
}

func (_self_ *Action) SetSensitive(sensitive C.gboolean) () {
	C.gtk_action_set_sensitive((*C.GtkAction)(_self_), sensitive)
	return
}

func (_self_ *Action) SetShortLabel(short_label *C.gchar) () {
	C._gtk_action_set_short_label((*C.GtkAction)(_self_), short_label)
	return
}

func (_self_ *Action) SetStockId(stock_id *C.gchar) () {
	C._gtk_action_set_stock_id((*C.GtkAction)(_self_), stock_id)
	return
}

func (_self_ *Action) SetTooltip(tooltip *C.gchar) () {
	C._gtk_action_set_tooltip((*C.GtkAction)(_self_), tooltip)
	return
}

func (_self_ *Action) SetVisible(visible C.gboolean) () {
	C.gtk_action_set_visible((*C.GtkAction)(_self_), visible)
	return
}

func (_self_ *Action) SetVisibleHorizontal(visible_horizontal C.gboolean) () {
	C.gtk_action_set_visible_horizontal((*C.GtkAction)(_self_), visible_horizontal)
	return
}

func (_self_ *Action) SetVisibleVertical(visible_vertical C.gboolean) () {
	C.gtk_action_set_visible_vertical((*C.GtkAction)(_self_), visible_vertical)
	return
}

func (_self_ *Action) UnblockActivate() () {
	C.gtk_action_unblock_activate((*C.GtkAction)(_self_))
	return
}

func ActionGroupNew(name *C.gchar) (_return_ *C.GtkActionGroup) {
	_return_ = C._gtk_action_group_new(name)
	return
}

func (_self_ *ActionGroup) AddAction(action *C.GtkAction) () {
	C.gtk_action_group_add_action((*C.GtkActionGroup)(_self_), action)
	return
}

func (_self_ *ActionGroup) AddActionWithAccel(action *C.GtkAction, accelerator *C.gchar) () {
	C._gtk_action_group_add_action_with_accel((*C.GtkActionGroup)(_self_), action, accelerator)
	return
}

func (_self_ *ActionGroup) AddActions(entries *C.GtkActionEntry, n_entries C.guint, user_data C.gpointer) () {
	C._gtk_action_group_add_actions((*C.GtkActionGroup)(_self_), entries, n_entries, user_data)
	return
}

func (_self_ *ActionGroup) AddActionsFull(entries *C.GtkActionEntry, n_entries C.guint, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_action_group_add_actions_full((*C.GtkActionGroup)(_self_), entries, n_entries, user_data, destroy)
	return
}

func (_self_ *ActionGroup) AddRadioActions(entries *C.GtkRadioActionEntry, n_entries C.guint, value C.gint, on_change C.GCallback, user_data C.gpointer) () {
	C._gtk_action_group_add_radio_actions((*C.GtkActionGroup)(_self_), entries, n_entries, value, on_change, user_data)
	return
}

func (_self_ *ActionGroup) AddRadioActionsFull(entries *C.GtkRadioActionEntry, n_entries C.guint, value C.gint, on_change C.GCallback, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_action_group_add_radio_actions_full((*C.GtkActionGroup)(_self_), entries, n_entries, value, on_change, user_data, destroy)
	return
}

func (_self_ *ActionGroup) AddToggleActions(entries *C.GtkToggleActionEntry, n_entries C.guint, user_data C.gpointer) () {
	C._gtk_action_group_add_toggle_actions((*C.GtkActionGroup)(_self_), entries, n_entries, user_data)
	return
}

func (_self_ *ActionGroup) AddToggleActionsFull(entries *C.GtkToggleActionEntry, n_entries C.guint, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C._gtk_action_group_add_toggle_actions_full((*C.GtkActionGroup)(_self_), entries, n_entries, user_data, destroy)
	return
}

func (_self_ *ActionGroup) GetAccelGroup() (_return_ *C.GtkAccelGroup) {
	_return_ = C.gtk_action_group_get_accel_group((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) GetAction(action_name *C.gchar) (_return_ *C.GtkAction) {
	_return_ = C._gtk_action_group_get_action((*C.GtkActionGroup)(_self_), action_name)
	return
}

func (_self_ *ActionGroup) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_action_group_get_name((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) GetSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_action_group_get_sensitive((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_action_group_get_visible((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) ListActions() (_return_ *C.GList) {
	_return_ = C.gtk_action_group_list_actions((*C.GtkActionGroup)(_self_))
	return
}

func (_self_ *ActionGroup) RemoveAction(action *C.GtkAction) () {
	C.gtk_action_group_remove_action((*C.GtkActionGroup)(_self_), action)
	return
}

func (_self_ *ActionGroup) SetAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_action_group_set_accel_group((*C.GtkActionGroup)(_self_), accel_group)
	return
}

func (_self_ *ActionGroup) SetSensitive(sensitive C.gboolean) () {
	C.gtk_action_group_set_sensitive((*C.GtkActionGroup)(_self_), sensitive)
	return
}

func (_self_ *ActionGroup) SetTranslateFunc(func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_action_group_set_translate_func((*C.GtkActionGroup)(_self_), func_, data, notify)
	return
}

func (_self_ *ActionGroup) SetTranslationDomain(domain *C.gchar) () {
	C._gtk_action_group_set_translation_domain((*C.GtkActionGroup)(_self_), domain)
	return
}

func (_self_ *ActionGroup) SetVisible(visible C.gboolean) () {
	C.gtk_action_group_set_visible((*C.GtkActionGroup)(_self_), visible)
	return
}

func (_self_ *ActionGroup) TranslateString(string_ *C.gchar) (_return_ *C.gchar) {
	_return_ = C._gtk_action_group_translate_string((*C.GtkActionGroup)(_self_), string_)
	return
}

func AdjustmentNew(value C.gdouble, lower C.gdouble, upper C.gdouble, step_increment C.gdouble, page_increment C.gdouble, page_size C.gdouble) (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_adjustment_new(value, lower, upper, step_increment, page_increment, page_size)
	return
}

func (_self_ *Adjustment) Changed() () {
	C.gtk_adjustment_changed((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) ClampPage(lower C.gdouble, upper C.gdouble) () {
	C.gtk_adjustment_clamp_page((*C.GtkAdjustment)(_self_), lower, upper)
	return
}

func (_self_ *Adjustment) Configure(value C.gdouble, lower C.gdouble, upper C.gdouble, step_increment C.gdouble, page_increment C.gdouble, page_size C.gdouble) () {
	C.gtk_adjustment_configure((*C.GtkAdjustment)(_self_), value, lower, upper, step_increment, page_increment, page_size)
	return
}

func (_self_ *Adjustment) GetLower() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_lower((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetMinimumIncrement() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_minimum_increment((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetPageIncrement() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_page_increment((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetPageSize() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_page_size((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetStepIncrement() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_step_increment((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetUpper() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_upper((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) GetValue() (_return_ C.gdouble) {
	_return_ = C.gtk_adjustment_get_value((*C.GtkAdjustment)(_self_))
	return
}

func (_self_ *Adjustment) SetLower(lower C.gdouble) () {
	C.gtk_adjustment_set_lower((*C.GtkAdjustment)(_self_), lower)
	return
}

func (_self_ *Adjustment) SetPageIncrement(page_increment C.gdouble) () {
	C.gtk_adjustment_set_page_increment((*C.GtkAdjustment)(_self_), page_increment)
	return
}

func (_self_ *Adjustment) SetPageSize(page_size C.gdouble) () {
	C.gtk_adjustment_set_page_size((*C.GtkAdjustment)(_self_), page_size)
	return
}

func (_self_ *Adjustment) SetStepIncrement(step_increment C.gdouble) () {
	C.gtk_adjustment_set_step_increment((*C.GtkAdjustment)(_self_), step_increment)
	return
}

func (_self_ *Adjustment) SetUpper(upper C.gdouble) () {
	C.gtk_adjustment_set_upper((*C.GtkAdjustment)(_self_), upper)
	return
}

func (_self_ *Adjustment) SetValue(value C.gdouble) () {
	C.gtk_adjustment_set_value((*C.GtkAdjustment)(_self_), value)
	return
}

func (_self_ *Adjustment) ValueChanged() () {
	C.gtk_adjustment_value_changed((*C.GtkAdjustment)(_self_))
	return
}

func AlignmentNew(xalign C.gfloat, yalign C.gfloat, xscale C.gfloat, yscale C.gfloat) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_alignment_new(xalign, yalign, xscale, yscale)
	return
}

func (_self_ *Alignment) GetPadding() (padding_top *C.guint, padding_bottom *C.guint, padding_left *C.guint, padding_right *C.guint) {
	C.gtk_alignment_get_padding((*C.GtkAlignment)(_self_), padding_top, padding_bottom, padding_left, padding_right)
	return
}

func (_self_ *Alignment) Set(xalign C.gfloat, yalign C.gfloat, xscale C.gfloat, yscale C.gfloat) () {
	C.gtk_alignment_set((*C.GtkAlignment)(_self_), xalign, yalign, xscale, yscale)
	return
}

func (_self_ *Alignment) SetPadding(padding_top C.guint, padding_bottom C.guint, padding_left C.guint, padding_right C.guint) () {
	C.gtk_alignment_set_padding((*C.GtkAlignment)(_self_), padding_top, padding_bottom, padding_left, padding_right)
	return
}

func AppChooserButtonNew(content_type *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_app_chooser_button_new(content_type)
	return
}

func (_self_ *AppChooserButton) AppendCustomItem(name *C.gchar, label *C.gchar, icon *C.GIcon) () {
	C._gtk_app_chooser_button_append_custom_item((*C.GtkAppChooserButton)(_self_), name, label, icon)
	return
}

func (_self_ *AppChooserButton) AppendSeparator() () {
	C.gtk_app_chooser_button_append_separator((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) GetHeading() (_return_ *C.gchar) {
	_return_ = C._gtk_app_chooser_button_get_heading((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) GetShowDefaultItem() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_button_get_show_default_item((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) GetShowDialogItem() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_button_get_show_dialog_item((*C.GtkAppChooserButton)(_self_))
	return
}

func (_self_ *AppChooserButton) SetActiveCustomItem(name *C.gchar) () {
	C._gtk_app_chooser_button_set_active_custom_item((*C.GtkAppChooserButton)(_self_), name)
	return
}

func (_self_ *AppChooserButton) SetHeading(heading *C.gchar) () {
	C._gtk_app_chooser_button_set_heading((*C.GtkAppChooserButton)(_self_), heading)
	return
}

func (_self_ *AppChooserButton) SetShowDefaultItem(setting C.gboolean) () {
	C.gtk_app_chooser_button_set_show_default_item((*C.GtkAppChooserButton)(_self_), setting)
	return
}

func (_self_ *AppChooserButton) SetShowDialogItem(setting C.gboolean) () {
	C.gtk_app_chooser_button_set_show_dialog_item((*C.GtkAppChooserButton)(_self_), setting)
	return
}

func AppChooserDialogNew(parent *C.GtkWindow, flags C.GtkDialogFlags, file *C.GFile) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_app_chooser_dialog_new(parent, flags, file)
	return
}

func AppChooserDialogNewForContentType(parent *C.GtkWindow, flags C.GtkDialogFlags, content_type *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_app_chooser_dialog_new_for_content_type(parent, flags, content_type)
	return
}

func (_self_ *AppChooserDialog) GetHeading() (_return_ *C.gchar) {
	_return_ = C._gtk_app_chooser_dialog_get_heading((*C.GtkAppChooserDialog)(_self_))
	return
}

func (_self_ *AppChooserDialog) GetWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_app_chooser_dialog_get_widget((*C.GtkAppChooserDialog)(_self_))
	return
}

func (_self_ *AppChooserDialog) SetHeading(heading *C.gchar) () {
	C._gtk_app_chooser_dialog_set_heading((*C.GtkAppChooserDialog)(_self_), heading)
	return
}

func AppChooserWidgetNew(content_type *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_app_chooser_widget_new(content_type)
	return
}

func (_self_ *AppChooserWidget) GetDefaultText() (_return_ *C.gchar) {
	_return_ = C._gtk_app_chooser_widget_get_default_text((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) GetShowAll() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_widget_get_show_all((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) GetShowDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_widget_get_show_default((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) GetShowFallback() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_widget_get_show_fallback((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) GetShowOther() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_widget_get_show_other((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) GetShowRecommended() (_return_ C.gboolean) {
	_return_ = C.gtk_app_chooser_widget_get_show_recommended((*C.GtkAppChooserWidget)(_self_))
	return
}

func (_self_ *AppChooserWidget) SetDefaultText(text *C.gchar) () {
	C._gtk_app_chooser_widget_set_default_text((*C.GtkAppChooserWidget)(_self_), text)
	return
}

func (_self_ *AppChooserWidget) SetShowAll(setting C.gboolean) () {
	C.gtk_app_chooser_widget_set_show_all((*C.GtkAppChooserWidget)(_self_), setting)
	return
}

func (_self_ *AppChooserWidget) SetShowDefault(setting C.gboolean) () {
	C.gtk_app_chooser_widget_set_show_default((*C.GtkAppChooserWidget)(_self_), setting)
	return
}

func (_self_ *AppChooserWidget) SetShowFallback(setting C.gboolean) () {
	C.gtk_app_chooser_widget_set_show_fallback((*C.GtkAppChooserWidget)(_self_), setting)
	return
}

func (_self_ *AppChooserWidget) SetShowOther(setting C.gboolean) () {
	C.gtk_app_chooser_widget_set_show_other((*C.GtkAppChooserWidget)(_self_), setting)
	return
}

func (_self_ *AppChooserWidget) SetShowRecommended(setting C.gboolean) () {
	C.gtk_app_chooser_widget_set_show_recommended((*C.GtkAppChooserWidget)(_self_), setting)
	return
}

func ApplicationNew(application_id *C.gchar, flags C.GApplicationFlags) (_return_ *C.GtkApplication) {
	_return_ = C._gtk_application_new(application_id, flags)
	return
}

func (_self_ *Application) AddAccelerator(accelerator *C.gchar, action_name *C.gchar, parameter *C.GVariant) () {
	C._gtk_application_add_accelerator((*C.GtkApplication)(_self_), accelerator, action_name, parameter)
	return
}

func (_self_ *Application) AddWindow(window *C.GtkWindow) () {
	C.gtk_application_add_window((*C.GtkApplication)(_self_), window)
	return
}

func (_self_ *Application) GetActiveWindow() (_return_ *C.GtkWindow) {
	_return_ = C.gtk_application_get_active_window((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetAppMenu() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_app_menu((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetMenubar() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_application_get_menubar((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) GetWindowById(id C.guint) (_return_ *C.GtkWindow) {
	_return_ = C.gtk_application_get_window_by_id((*C.GtkApplication)(_self_), id)
	return
}

func (_self_ *Application) GetWindows() (_return_ *C.GList) {
	_return_ = C.gtk_application_get_windows((*C.GtkApplication)(_self_))
	return
}

func (_self_ *Application) Inhibit(window *C.GtkWindow, flags C.GtkApplicationInhibitFlags, reason *C.gchar) (_return_ C.guint) {
	_return_ = C._gtk_application_inhibit((*C.GtkApplication)(_self_), window, flags, reason)
	return
}

func (_self_ *Application) IsInhibited(flags C.GtkApplicationInhibitFlags) (_return_ C.gboolean) {
	_return_ = C.gtk_application_is_inhibited((*C.GtkApplication)(_self_), flags)
	return
}

func (_self_ *Application) RemoveAccelerator(action_name *C.gchar, parameter *C.GVariant) () {
	C._gtk_application_remove_accelerator((*C.GtkApplication)(_self_), action_name, parameter)
	return
}

func (_self_ *Application) RemoveWindow(window *C.GtkWindow) () {
	C.gtk_application_remove_window((*C.GtkApplication)(_self_), window)
	return
}

func (_self_ *Application) SetAppMenu(app_menu *C.GMenuModel) () {
	C.gtk_application_set_app_menu((*C.GtkApplication)(_self_), app_menu)
	return
}

func (_self_ *Application) SetMenubar(menubar *C.GMenuModel) () {
	C.gtk_application_set_menubar((*C.GtkApplication)(_self_), menubar)
	return
}

func (_self_ *Application) Uninhibit(cookie C.guint) () {
	C.gtk_application_uninhibit((*C.GtkApplication)(_self_), cookie)
	return
}

func ApplicationWindowNew(application *C.GtkApplication) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_application_window_new(application)
	return
}

func (_self_ *ApplicationWindow) GetId() (_return_ C.guint) {
	_return_ = C.gtk_application_window_get_id((*C.GtkApplicationWindow)(_self_))
	return
}

func (_self_ *ApplicationWindow) GetShowMenubar() (_return_ C.gboolean) {
	_return_ = C.gtk_application_window_get_show_menubar((*C.GtkApplicationWindow)(_self_))
	return
}

func (_self_ *ApplicationWindow) SetShowMenubar(show_menubar C.gboolean) () {
	C.gtk_application_window_set_show_menubar((*C.GtkApplicationWindow)(_self_), show_menubar)
	return
}

func ArrowNew(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_arrow_new(arrow_type, shadow_type)
	return
}

func (_self_ *Arrow) Set(arrow_type C.GtkArrowType, shadow_type C.GtkShadowType) () {
	C.gtk_arrow_set((*C.GtkArrow)(_self_), arrow_type, shadow_type)
	return
}

func AspectFrameNew(label *C.gchar, xalign C.gfloat, yalign C.gfloat, ratio C.gfloat, obey_child C.gboolean) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_aspect_frame_new(label, xalign, yalign, ratio, obey_child)
	return
}

func (_self_ *AspectFrame) Set(xalign C.gfloat, yalign C.gfloat, ratio C.gfloat, obey_child C.gboolean) () {
	C.gtk_aspect_frame_set((*C.GtkAspectFrame)(_self_), xalign, yalign, ratio, obey_child)
	return
}

func AssistantNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_assistant_new()
	return
}

func (_self_ *Assistant) AddActionWidget(child *C.GtkWidget) () {
	C.gtk_assistant_add_action_widget((*C.GtkAssistant)(_self_), child)
	return
}

func (_self_ *Assistant) AppendPage(page *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_assistant_append_page((*C.GtkAssistant)(_self_), page)
	return
}

func (_self_ *Assistant) Commit() () {
	C.gtk_assistant_commit((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) GetCurrentPage() (_return_ C.gint) {
	_return_ = C.gtk_assistant_get_current_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) GetNPages() (_return_ C.gint) {
	_return_ = C.gtk_assistant_get_n_pages((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) GetNthPage(page_num C.gint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_assistant_get_nth_page((*C.GtkAssistant)(_self_), page_num)
	return
}

func (_self_ *Assistant) GetPageComplete(page *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_assistant_get_page_complete((*C.GtkAssistant)(_self_), page)
	return
}

func (_self_ *Assistant) GetPageTitle(page *C.GtkWidget) (_return_ *C.gchar) {
	_return_ = C._gtk_assistant_get_page_title((*C.GtkAssistant)(_self_), page)
	return
}

func (_self_ *Assistant) GetPageType(page *C.GtkWidget) (_return_ C.GtkAssistantPageType) {
	_return_ = C.gtk_assistant_get_page_type((*C.GtkAssistant)(_self_), page)
	return
}

func (_self_ *Assistant) InsertPage(page *C.GtkWidget, position C.gint) (_return_ C.gint) {
	_return_ = C.gtk_assistant_insert_page((*C.GtkAssistant)(_self_), page, position)
	return
}

func (_self_ *Assistant) NextPage() () {
	C.gtk_assistant_next_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) PrependPage(page *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_assistant_prepend_page((*C.GtkAssistant)(_self_), page)
	return
}

func (_self_ *Assistant) PreviousPage() () {
	C.gtk_assistant_previous_page((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Assistant) RemoveActionWidget(child *C.GtkWidget) () {
	C.gtk_assistant_remove_action_widget((*C.GtkAssistant)(_self_), child)
	return
}

func (_self_ *Assistant) RemovePage(page_num C.gint) () {
	C.gtk_assistant_remove_page((*C.GtkAssistant)(_self_), page_num)
	return
}

func (_self_ *Assistant) SetCurrentPage(page_num C.gint) () {
	C.gtk_assistant_set_current_page((*C.GtkAssistant)(_self_), page_num)
	return
}

func (_self_ *Assistant) SetForwardPageFunc(page_func C.GtkAssistantPageFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_assistant_set_forward_page_func((*C.GtkAssistant)(_self_), page_func, data, destroy)
	return
}

func (_self_ *Assistant) SetPageComplete(page *C.GtkWidget, complete C.gboolean) () {
	C.gtk_assistant_set_page_complete((*C.GtkAssistant)(_self_), page, complete)
	return
}

func (_self_ *Assistant) SetPageTitle(page *C.GtkWidget, title *C.gchar) () {
	C._gtk_assistant_set_page_title((*C.GtkAssistant)(_self_), page, title)
	return
}

func (_self_ *Assistant) SetPageType(page *C.GtkWidget, type_ C.GtkAssistantPageType) () {
	C.gtk_assistant_set_page_type((*C.GtkAssistant)(_self_), page, type_)
	return
}

func (_self_ *Assistant) UpdateButtonsState() () {
	C.gtk_assistant_update_buttons_state((*C.GtkAssistant)(_self_))
	return
}

func (_self_ *Bin) GetChild() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_bin_get_child((*C.GtkBin)(_self_))
	return
}

func BindingEntryAddSignalFromString(binding_set *C.GtkBindingSet, signal_desc *C.gchar) (_return_ C.GTokenType) {
	_return_ = C._gtk_binding_entry_add_signal_from_string(binding_set, signal_desc)
	return
}

func BindingEntryAddSignall(binding_set *C.GtkBindingSet, keyval C.guint, modifiers C.GdkModifierType, signal_name *C.gchar, binding_args *C.GSList) () {
	C._gtk_binding_entry_add_signall(binding_set, keyval, modifiers, signal_name, binding_args)
	return
}

func BindingEntryRemove(binding_set *C.GtkBindingSet, keyval C.guint, modifiers C.GdkModifierType) () {
	C.gtk_binding_entry_remove(binding_set, keyval, modifiers)
	return
}

func BindingEntrySkip(binding_set *C.GtkBindingSet, keyval C.guint, modifiers C.GdkModifierType) () {
	C.gtk_binding_entry_skip(binding_set, keyval, modifiers)
	return
}

func BindingSetByClass(object_class C.gpointer) (_return_ *C.GtkBindingSet) {
	_return_ = C.gtk_binding_set_by_class(object_class)
	return
}

func BindingSetFind(set_name *C.gchar) (_return_ *C.GtkBindingSet) {
	_return_ = C._gtk_binding_set_find(set_name)
	return
}

func BindingSetNew(set_name *C.gchar) (_return_ *C.GtkBindingSet) {
	_return_ = C._gtk_binding_set_new(set_name)
	return
}

func (_self_ *BindingSet) Activate(keyval C.guint, modifiers C.GdkModifierType, object *C.GObject) (_return_ C.gboolean) {
	_return_ = C.gtk_binding_set_activate((*C.GtkBindingSet)(_self_), keyval, modifiers, object)
	return
}

func BorderNew() (_return_ *C.GtkBorder) {
	_return_ = C.gtk_border_new()
	return
}

func (_self_ *Border) Copy() (_return_ *C.GtkBorder) {
	_return_ = C._gtk_border_copy((*C.GtkBorder)(_self_))
	return
}

func (_self_ *Border) Free() () {
	C.gtk_border_free((*C.GtkBorder)(_self_))
	return
}

func BoxNew(orientation C.GtkOrientation, spacing C.gint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_box_new(orientation, spacing)
	return
}

func (_self_ *Box) GetHomogeneous() (_return_ C.gboolean) {
	_return_ = C.gtk_box_get_homogeneous((*C.GtkBox)(_self_))
	return
}

func (_self_ *Box) GetSpacing() (_return_ C.gint) {
	_return_ = C.gtk_box_get_spacing((*C.GtkBox)(_self_))
	return
}

func (_self_ *Box) PackEnd(child *C.GtkWidget, expand C.gboolean, fill C.gboolean, padding C.guint) () {
	C.gtk_box_pack_end((*C.GtkBox)(_self_), child, expand, fill, padding)
	return
}

func (_self_ *Box) PackStart(child *C.GtkWidget, expand C.gboolean, fill C.gboolean, padding C.guint) () {
	C.gtk_box_pack_start((*C.GtkBox)(_self_), child, expand, fill, padding)
	return
}

func (_self_ *Box) QueryChildPacking(child *C.GtkWidget) (expand *C.gboolean, fill *C.gboolean, padding *C.guint, pack_type *C.GtkPackType) {
	C.gtk_box_query_child_packing((*C.GtkBox)(_self_), child, expand, fill, padding, pack_type)
	return
}

func (_self_ *Box) ReorderChild(child *C.GtkWidget, position C.gint) () {
	C.gtk_box_reorder_child((*C.GtkBox)(_self_), child, position)
	return
}

func (_self_ *Box) SetChildPacking(child *C.GtkWidget, expand C.gboolean, fill C.gboolean, padding C.guint, pack_type C.GtkPackType) () {
	C.gtk_box_set_child_packing((*C.GtkBox)(_self_), child, expand, fill, padding, pack_type)
	return
}

func (_self_ *Box) SetHomogeneous(homogeneous C.gboolean) () {
	C.gtk_box_set_homogeneous((*C.GtkBox)(_self_), homogeneous)
	return
}

func (_self_ *Box) SetSpacing(spacing C.gint) () {
	C.gtk_box_set_spacing((*C.GtkBox)(_self_), spacing)
	return
}

func BuilderNew() (_return_ *C.GtkBuilder) {
	_return_ = C.gtk_builder_new()
	return
}

func (_self_ *Builder) AddFromFile(filename *C.gchar) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_from_file((*C.GtkBuilder)(_self_), filename, _error_)
	return
}

func (_self_ *Builder) AddFromResource(resource_path *C.gchar) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_from_resource((*C.GtkBuilder)(_self_), resource_path, _error_)
	return
}

func (_self_ *Builder) AddFromString(buffer *C.gchar, length C.gsize) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_from_string((*C.GtkBuilder)(_self_), buffer, length, _error_)
	return
}

func (_self_ *Builder) AddObjectsFromFile(filename *C.gchar, object_ids unsafe.Pointer) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_objects_from_file((*C.GtkBuilder)(_self_), filename, object_ids, _error_)
	return
}

func (_self_ *Builder) AddObjectsFromResource(resource_path *C.gchar, object_ids unsafe.Pointer) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_objects_from_resource((*C.GtkBuilder)(_self_), resource_path, object_ids, _error_)
	return
}

func (_self_ *Builder) AddObjectsFromString(buffer *C.gchar, length C.gsize, object_ids unsafe.Pointer) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_add_objects_from_string((*C.GtkBuilder)(_self_), buffer, length, object_ids, _error_)
	return
}

func (_self_ *Builder) ConnectSignals(user_data C.gpointer) () {
	C.gtk_builder_connect_signals((*C.GtkBuilder)(_self_), user_data)
	return
}

func (_self_ *Builder) ConnectSignalsFull(func_ C.GtkBuilderConnectFunc, user_data C.gpointer) () {
	C.gtk_builder_connect_signals_full((*C.GtkBuilder)(_self_), func_, user_data)
	return
}

func (_self_ *Builder) GetObject(name *C.gchar) (_return_ *C.GObject) {
	_return_ = C._gtk_builder_get_object((*C.GtkBuilder)(_self_), name)
	return
}

func (_self_ *Builder) GetObjects() (_return_ *C.GSList) {
	_return_ = C.gtk_builder_get_objects((*C.GtkBuilder)(_self_))
	return
}

func (_self_ *Builder) GetTranslationDomain() (_return_ *C.gchar) {
	_return_ = C._gtk_builder_get_translation_domain((*C.GtkBuilder)(_self_))
	return
}

func (_self_ *Builder) GetTypeFromName(type_name *C.char) (_return_ C.GType) {
	_return_ = C._gtk_builder_get_type_from_name((*C.GtkBuilder)(_self_), type_name)
	return
}

func (_self_ *Builder) SetTranslationDomain(domain *C.gchar) () {
	C._gtk_builder_set_translation_domain((*C.GtkBuilder)(_self_), domain)
	return
}

func (_self_ *Builder) ValueFromString(pspec *C.GParamSpec, string_ *C.gchar) (_return_ C.gboolean, value *C.GValue, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_value_from_string((*C.GtkBuilder)(_self_), pspec, string_, value, _error_)
	return
}

func (_self_ *Builder) ValueFromStringType(type_ C.GType, string_ *C.gchar) (_return_ C.gboolean, value *C.GValue, _error_ unsafe.Pointer) {
	_return_ = C._gtk_builder_value_from_string_type((*C.GtkBuilder)(_self_), type_, string_, value, _error_)
	return
}

func ButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_button_new()
	return
}

func ButtonNewFromStock(stock_id *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_button_new_from_stock(stock_id)
	return
}

func ButtonNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_button_new_with_label(label)
	return
}

func ButtonNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_button_new_with_mnemonic(label)
	return
}

func (_self_ *Button) Clicked() () {
	C.gtk_button_clicked((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetAlignment() (xalign *C.gfloat, yalign *C.gfloat) {
	C.gtk_button_get_alignment((*C.GtkButton)(_self_), xalign, yalign)
	return
}

func (_self_ *Button) GetAlwaysShowImage() (_return_ C.gboolean) {
	_return_ = C.gtk_button_get_always_show_image((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetEventWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_button_get_event_window((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetFocusOnClick() (_return_ C.gboolean) {
	_return_ = C.gtk_button_get_focus_on_click((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetImage() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_button_get_image((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetImagePosition() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_button_get_image_position((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_button_get_label((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_button_get_relief((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetUseStock() (_return_ C.gboolean) {
	_return_ = C.gtk_button_get_use_stock((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) GetUseUnderline() (_return_ C.gboolean) {
	_return_ = C.gtk_button_get_use_underline((*C.GtkButton)(_self_))
	return
}

func (_self_ *Button) SetAlignment(xalign C.gfloat, yalign C.gfloat) () {
	C.gtk_button_set_alignment((*C.GtkButton)(_self_), xalign, yalign)
	return
}

func (_self_ *Button) SetAlwaysShowImage(always_show C.gboolean) () {
	C.gtk_button_set_always_show_image((*C.GtkButton)(_self_), always_show)
	return
}

func (_self_ *Button) SetFocusOnClick(focus_on_click C.gboolean) () {
	C.gtk_button_set_focus_on_click((*C.GtkButton)(_self_), focus_on_click)
	return
}

func (_self_ *Button) SetImage(image *C.GtkWidget) () {
	C.gtk_button_set_image((*C.GtkButton)(_self_), image)
	return
}

func (_self_ *Button) SetImagePosition(position C.GtkPositionType) () {
	C.gtk_button_set_image_position((*C.GtkButton)(_self_), position)
	return
}

func (_self_ *Button) SetLabel(label *C.gchar) () {
	C._gtk_button_set_label((*C.GtkButton)(_self_), label)
	return
}

func (_self_ *Button) SetRelief(newstyle C.GtkReliefStyle) () {
	C.gtk_button_set_relief((*C.GtkButton)(_self_), newstyle)
	return
}

func (_self_ *Button) SetUseStock(use_stock C.gboolean) () {
	C.gtk_button_set_use_stock((*C.GtkButton)(_self_), use_stock)
	return
}

func (_self_ *Button) SetUseUnderline(use_underline C.gboolean) () {
	C.gtk_button_set_use_underline((*C.GtkButton)(_self_), use_underline)
	return
}

func ButtonBoxNew(orientation C.GtkOrientation) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_button_box_new(orientation)
	return
}

func (_self_ *ButtonBox) GetChildNonHomogeneous(child *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_button_box_get_child_non_homogeneous((*C.GtkButtonBox)(_self_), child)
	return
}

func (_self_ *ButtonBox) GetChildSecondary(child *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_button_box_get_child_secondary((*C.GtkButtonBox)(_self_), child)
	return
}

func (_self_ *ButtonBox) GetLayout() (_return_ C.GtkButtonBoxStyle) {
	_return_ = C.gtk_button_box_get_layout((*C.GtkButtonBox)(_self_))
	return
}

func (_self_ *ButtonBox) SetChildNonHomogeneous(child *C.GtkWidget, non_homogeneous C.gboolean) () {
	C.gtk_button_box_set_child_non_homogeneous((*C.GtkButtonBox)(_self_), child, non_homogeneous)
	return
}

func (_self_ *ButtonBox) SetChildSecondary(child *C.GtkWidget, is_secondary C.gboolean) () {
	C.gtk_button_box_set_child_secondary((*C.GtkButtonBox)(_self_), child, is_secondary)
	return
}

func (_self_ *ButtonBox) SetLayout(layout_style C.GtkButtonBoxStyle) () {
	C.gtk_button_box_set_layout((*C.GtkButtonBox)(_self_), layout_style)
	return
}

func CalendarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_calendar_new()
	return
}

func (_self_ *Calendar) ClearMarks() () {
	C.gtk_calendar_clear_marks((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) GetDate() (year *C.guint, month *C.guint, day *C.guint) {
	C.gtk_calendar_get_date((*C.GtkCalendar)(_self_), year, month, day)
	return
}

func (_self_ *Calendar) GetDayIsMarked(day C.guint) (_return_ C.gboolean) {
	_return_ = C.gtk_calendar_get_day_is_marked((*C.GtkCalendar)(_self_), day)
	return
}

func (_self_ *Calendar) GetDetailHeightRows() (_return_ C.gint) {
	_return_ = C.gtk_calendar_get_detail_height_rows((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) GetDetailWidthChars() (_return_ C.gint) {
	_return_ = C.gtk_calendar_get_detail_width_chars((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) GetDisplayOptions() (_return_ C.GtkCalendarDisplayOptions) {
	_return_ = C.gtk_calendar_get_display_options((*C.GtkCalendar)(_self_))
	return
}

func (_self_ *Calendar) MarkDay(day C.guint) () {
	C.gtk_calendar_mark_day((*C.GtkCalendar)(_self_), day)
	return
}

func (_self_ *Calendar) SelectDay(day C.guint) () {
	C.gtk_calendar_select_day((*C.GtkCalendar)(_self_), day)
	return
}

func (_self_ *Calendar) SelectMonth(month C.guint, year C.guint) () {
	C.gtk_calendar_select_month((*C.GtkCalendar)(_self_), month, year)
	return
}

func (_self_ *Calendar) SetDetailFunc(func_ C.GtkCalendarDetailFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_calendar_set_detail_func((*C.GtkCalendar)(_self_), func_, data, destroy)
	return
}

func (_self_ *Calendar) SetDetailHeightRows(rows C.gint) () {
	C.gtk_calendar_set_detail_height_rows((*C.GtkCalendar)(_self_), rows)
	return
}

func (_self_ *Calendar) SetDetailWidthChars(chars C.gint) () {
	C.gtk_calendar_set_detail_width_chars((*C.GtkCalendar)(_self_), chars)
	return
}

func (_self_ *Calendar) SetDisplayOptions(flags C.GtkCalendarDisplayOptions) () {
	C.gtk_calendar_set_display_options((*C.GtkCalendar)(_self_), flags)
	return
}

func (_self_ *Calendar) UnmarkDay(day C.guint) () {
	C.gtk_calendar_unmark_day((*C.GtkCalendar)(_self_), day)
	return
}

func (_self_ *CellArea) Activate(context *C.GtkCellAreaContext, widget *C.GtkWidget, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, edit_only C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_cell_area_activate((*C.GtkCellArea)(_self_), context, widget, cell_area, flags, edit_only)
	return
}

func (_self_ *CellArea) ActivateCell(widget *C.GtkWidget, renderer *C.GtkCellRenderer, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ C.gboolean) {
	_return_ = C._gtk_cell_area_activate_cell((*C.GtkCellArea)(_self_), widget, renderer, event, cell_area, flags)
	return
}

func (_self_ *CellArea) Add(renderer *C.GtkCellRenderer) () {
	C.gtk_cell_area_add((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) AddFocusSibling(renderer *C.GtkCellRenderer, sibling *C.GtkCellRenderer) () {
	C.gtk_cell_area_add_focus_sibling((*C.GtkCellArea)(_self_), renderer, sibling)
	return
}

func (_self_ *CellArea) ApplyAttributes(tree_model *C.GtkTreeModel, iter *C.GtkTreeIter, is_expander C.gboolean, is_expanded C.gboolean) () {
	C.gtk_cell_area_apply_attributes((*C.GtkCellArea)(_self_), tree_model, iter, is_expander, is_expanded)
	return
}

func (_self_ *CellArea) AttributeConnect(renderer *C.GtkCellRenderer, attribute *C.gchar, column C.gint) () {
	C._gtk_cell_area_attribute_connect((*C.GtkCellArea)(_self_), renderer, attribute, column)
	return
}

func (_self_ *CellArea) AttributeDisconnect(renderer *C.GtkCellRenderer, attribute *C.gchar) () {
	C._gtk_cell_area_attribute_disconnect((*C.GtkCellArea)(_self_), renderer, attribute)
	return
}

func (_self_ *CellArea) CellGetProperty(renderer *C.GtkCellRenderer, property_name *C.gchar, value *C.GValue) () {
	C._gtk_cell_area_cell_get_property((*C.GtkCellArea)(_self_), renderer, property_name, value)
	return
}

func (_self_ *CellArea) CellSetProperty(renderer *C.GtkCellRenderer, property_name *C.gchar, value *C.GValue) () {
	C._gtk_cell_area_cell_set_property((*C.GtkCellArea)(_self_), renderer, property_name, value)
	return
}

func (_self_ *CellArea) CopyContext(context *C.GtkCellAreaContext) (_return_ *C.GtkCellAreaContext) {
	_return_ = C.gtk_cell_area_copy_context((*C.GtkCellArea)(_self_), context)
	return
}

func (_self_ *CellArea) CreateContext() (_return_ *C.GtkCellAreaContext) {
	_return_ = C.gtk_cell_area_create_context((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) Event(context *C.GtkCellAreaContext, widget *C.GtkWidget, event *C.GdkEvent, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ C.gint) {
	_return_ = C._gtk_cell_area_event((*C.GtkCellArea)(_self_), context, widget, event, cell_area, flags)
	return
}

func (_self_ *CellArea) Focus(direction C.GtkDirectionType) (_return_ C.gboolean) {
	_return_ = C.gtk_cell_area_focus((*C.GtkCellArea)(_self_), direction)
	return
}

func (_self_ *CellArea) Foreach(callback C.GtkCellCallback, callback_data C.gpointer) () {
	C.gtk_cell_area_foreach((*C.GtkCellArea)(_self_), callback, callback_data)
	return
}

func (_self_ *CellArea) ForeachAlloc(context *C.GtkCellAreaContext, widget *C.GtkWidget, cell_area *C.GdkRectangle, background_area *C.GdkRectangle, callback C.GtkCellAllocCallback, callback_data C.gpointer) () {
	C._gtk_cell_area_foreach_alloc((*C.GtkCellArea)(_self_), context, widget, cell_area, background_area, callback, callback_data)
	return
}

func (_self_ *CellArea) GetCellAllocation(context *C.GtkCellAreaContext, widget *C.GtkWidget, renderer *C.GtkCellRenderer, cell_area *C.GdkRectangle) (allocation *C.GdkRectangle) {
	C._gtk_cell_area_get_cell_allocation((*C.GtkCellArea)(_self_), context, widget, renderer, cell_area, allocation)
	return
}

func (_self_ *CellArea) GetCellAtPosition(context *C.GtkCellAreaContext, widget *C.GtkWidget, cell_area *C.GdkRectangle, x C.gint, y C.gint) (_return_ *C.GtkCellRenderer, alloc_area *C.GdkRectangle) {
	_return_ = C._gtk_cell_area_get_cell_at_position((*C.GtkCellArea)(_self_), context, widget, cell_area, x, y, alloc_area)
	return
}

func (_self_ *CellArea) GetCurrentPathString() (_return_ *C.gchar) {
	_return_ = C._gtk_cell_area_get_current_path_string((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetEditWidget() (_return_ *C.GtkCellEditable) {
	_return_ = C.gtk_cell_area_get_edit_widget((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetEditedCell() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_area_get_edited_cell((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetFocusCell() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_area_get_focus_cell((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) GetFocusFromSibling(renderer *C.GtkCellRenderer) (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_area_get_focus_from_sibling((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) GetFocusSiblings(renderer *C.GtkCellRenderer) (_return_ *C.GList) {
	_return_ = C._gtk_cell_area_get_focus_siblings((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) GetPreferredHeight(context *C.GtkCellAreaContext, widget *C.GtkWidget) (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_cell_area_get_preferred_height((*C.GtkCellArea)(_self_), context, widget, minimum_height, natural_height)
	return
}

func (_self_ *CellArea) GetPreferredHeightForWidth(context *C.GtkCellAreaContext, widget *C.GtkWidget, width C.gint) (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_cell_area_get_preferred_height_for_width((*C.GtkCellArea)(_self_), context, widget, width, minimum_height, natural_height)
	return
}

func (_self_ *CellArea) GetPreferredWidth(context *C.GtkCellAreaContext, widget *C.GtkWidget) (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_cell_area_get_preferred_width((*C.GtkCellArea)(_self_), context, widget, minimum_width, natural_width)
	return
}

func (_self_ *CellArea) GetPreferredWidthForHeight(context *C.GtkCellAreaContext, widget *C.GtkWidget, height C.gint) (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_cell_area_get_preferred_width_for_height((*C.GtkCellArea)(_self_), context, widget, height, minimum_width, natural_width)
	return
}

func (_self_ *CellArea) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_area_get_request_mode((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) HasRenderer(renderer *C.GtkCellRenderer) (_return_ C.gboolean) {
	_return_ = C.gtk_cell_area_has_renderer((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) InnerCellArea(widget *C.GtkWidget, cell_area *C.GdkRectangle) (inner_area *C.GdkRectangle) {
	C._gtk_cell_area_inner_cell_area((*C.GtkCellArea)(_self_), widget, cell_area, inner_area)
	return
}

func (_self_ *CellArea) IsActivatable() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_area_is_activatable((*C.GtkCellArea)(_self_))
	return
}

func (_self_ *CellArea) IsFocusSibling(renderer *C.GtkCellRenderer, sibling *C.GtkCellRenderer) (_return_ C.gboolean) {
	_return_ = C.gtk_cell_area_is_focus_sibling((*C.GtkCellArea)(_self_), renderer, sibling)
	return
}

func (_self_ *CellArea) Remove(renderer *C.GtkCellRenderer) () {
	C.gtk_cell_area_remove((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) RemoveFocusSibling(renderer *C.GtkCellRenderer, sibling *C.GtkCellRenderer) () {
	C.gtk_cell_area_remove_focus_sibling((*C.GtkCellArea)(_self_), renderer, sibling)
	return
}

func (_self_ *CellArea) Render(context *C.GtkCellAreaContext, widget *C.GtkWidget, cr *C.cairo_t, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState, paint_focus C.gboolean) () {
	C._gtk_cell_area_render((*C.GtkCellArea)(_self_), context, widget, cr, background_area, cell_area, flags, paint_focus)
	return
}

func (_self_ *CellArea) RequestRenderer(renderer *C.GtkCellRenderer, orientation C.GtkOrientation, widget *C.GtkWidget, for_size C.gint) (minimum_size *C.gint, natural_size *C.gint) {
	C.gtk_cell_area_request_renderer((*C.GtkCellArea)(_self_), renderer, orientation, widget, for_size, minimum_size, natural_size)
	return
}

func (_self_ *CellArea) SetFocusCell(renderer *C.GtkCellRenderer) () {
	C.gtk_cell_area_set_focus_cell((*C.GtkCellArea)(_self_), renderer)
	return
}

func (_self_ *CellArea) StopEditing(canceled C.gboolean) () {
	C.gtk_cell_area_stop_editing((*C.GtkCellArea)(_self_), canceled)
	return
}

func CellAreaBoxNew() (_return_ *C.GtkCellArea) {
	_return_ = C.gtk_cell_area_box_new()
	return
}

func (_self_ *CellAreaBox) GetSpacing() (_return_ C.gint) {
	_return_ = C.gtk_cell_area_box_get_spacing((*C.GtkCellAreaBox)(_self_))
	return
}

func (_self_ *CellAreaBox) PackEnd(renderer *C.GtkCellRenderer, expand C.gboolean, align C.gboolean, fixed C.gboolean) () {
	C.gtk_cell_area_box_pack_end((*C.GtkCellAreaBox)(_self_), renderer, expand, align, fixed)
	return
}

func (_self_ *CellAreaBox) PackStart(renderer *C.GtkCellRenderer, expand C.gboolean, align C.gboolean, fixed C.gboolean) () {
	C.gtk_cell_area_box_pack_start((*C.GtkCellAreaBox)(_self_), renderer, expand, align, fixed)
	return
}

func (_self_ *CellAreaBox) SetSpacing(spacing C.gint) () {
	C.gtk_cell_area_box_set_spacing((*C.GtkCellAreaBox)(_self_), spacing)
	return
}

func (_self_ *CellAreaClass) FindCellProperty(property_name *C.gchar) (_return_ *C.GParamSpec) {
	_return_ = C._gtk_cell_area_class_find_cell_property((*C.GtkCellAreaClass)(_self_), property_name)
	return
}

func (_self_ *CellAreaClass) InstallCellProperty(property_id C.guint, pspec *C.GParamSpec) () {
	C.gtk_cell_area_class_install_cell_property((*C.GtkCellAreaClass)(_self_), property_id, pspec)
	return
}

func (_self_ *CellAreaClass) ListCellProperties() (_return_ unsafe.Pointer, n_properties *C.guint) {
	_return_ = C._gtk_cell_area_class_list_cell_properties((*C.GtkCellAreaClass)(_self_), n_properties)
	return
}

func (_self_ *CellAreaContext) Allocate(width C.gint, height C.gint) () {
	C.gtk_cell_area_context_allocate((*C.GtkCellAreaContext)(_self_), width, height)
	return
}

func (_self_ *CellAreaContext) GetAllocation() (width *C.gint, height *C.gint) {
	C.gtk_cell_area_context_get_allocation((*C.GtkCellAreaContext)(_self_), width, height)
	return
}

func (_self_ *CellAreaContext) GetArea() (_return_ *C.GtkCellArea) {
	_return_ = C.gtk_cell_area_context_get_area((*C.GtkCellAreaContext)(_self_))
	return
}

func (_self_ *CellAreaContext) GetPreferredHeight() (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_cell_area_context_get_preferred_height((*C.GtkCellAreaContext)(_self_), minimum_height, natural_height)
	return
}

func (_self_ *CellAreaContext) GetPreferredHeightForWidth(width C.gint) (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_cell_area_context_get_preferred_height_for_width((*C.GtkCellAreaContext)(_self_), width, minimum_height, natural_height)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidth() (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_cell_area_context_get_preferred_width((*C.GtkCellAreaContext)(_self_), minimum_width, natural_width)
	return
}

func (_self_ *CellAreaContext) GetPreferredWidthForHeight(height C.gint) (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_cell_area_context_get_preferred_width_for_height((*C.GtkCellAreaContext)(_self_), height, minimum_width, natural_width)
	return
}

func (_self_ *CellAreaContext) PushPreferredHeight(minimum_height C.gint, natural_height C.gint) () {
	C.gtk_cell_area_context_push_preferred_height((*C.GtkCellAreaContext)(_self_), minimum_height, natural_height)
	return
}

func (_self_ *CellAreaContext) PushPreferredWidth(minimum_width C.gint, natural_width C.gint) () {
	C.gtk_cell_area_context_push_preferred_width((*C.GtkCellAreaContext)(_self_), minimum_width, natural_width)
	return
}

func (_self_ *CellAreaContext) Reset() () {
	C.gtk_cell_area_context_reset((*C.GtkCellAreaContext)(_self_))
	return
}

func (_self_ *CellRenderer) Activate(event *C.GdkEvent, widget *C.GtkWidget, path *C.gchar, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ C.gboolean) {
	_return_ = C._gtk_cell_renderer_activate((*C.GtkCellRenderer)(_self_), event, widget, path, background_area, cell_area, flags)
	return
}

func (_self_ *CellRenderer) GetAlignedArea(widget *C.GtkWidget, flags C.GtkCellRendererState, cell_area *C.GdkRectangle) (aligned_area *C.GdkRectangle) {
	C._gtk_cell_renderer_get_aligned_area((*C.GtkCellRenderer)(_self_), widget, flags, cell_area, aligned_area)
	return
}

func (_self_ *CellRenderer) GetAlignment() (xalign *C.gfloat, yalign *C.gfloat) {
	C.gtk_cell_renderer_get_alignment((*C.GtkCellRenderer)(_self_), xalign, yalign)
	return
}

func (_self_ *CellRenderer) GetFixedSize() (width *C.gint, height *C.gint) {
	C.gtk_cell_renderer_get_fixed_size((*C.GtkCellRenderer)(_self_), width, height)
	return
}

func (_self_ *CellRenderer) GetPadding() (xpad *C.gint, ypad *C.gint) {
	C.gtk_cell_renderer_get_padding((*C.GtkCellRenderer)(_self_), xpad, ypad)
	return
}

func (_self_ *CellRenderer) GetPreferredHeight(widget *C.GtkWidget) (minimum_size *C.gint, natural_size *C.gint) {
	C.gtk_cell_renderer_get_preferred_height((*C.GtkCellRenderer)(_self_), widget, minimum_size, natural_size)
	return
}

func (_self_ *CellRenderer) GetPreferredHeightForWidth(widget *C.GtkWidget, width C.gint) (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_cell_renderer_get_preferred_height_for_width((*C.GtkCellRenderer)(_self_), widget, width, minimum_height, natural_height)
	return
}

func (_self_ *CellRenderer) GetPreferredSize(widget *C.GtkWidget) (minimum_size *C.GtkRequisition, natural_size *C.GtkRequisition) {
	C.gtk_cell_renderer_get_preferred_size((*C.GtkCellRenderer)(_self_), widget, minimum_size, natural_size)
	return
}

func (_self_ *CellRenderer) GetPreferredWidth(widget *C.GtkWidget) (minimum_size *C.gint, natural_size *C.gint) {
	C.gtk_cell_renderer_get_preferred_width((*C.GtkCellRenderer)(_self_), widget, minimum_size, natural_size)
	return
}

func (_self_ *CellRenderer) GetPreferredWidthForHeight(widget *C.GtkWidget, height C.gint) (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_cell_renderer_get_preferred_width_for_height((*C.GtkCellRenderer)(_self_), widget, height, minimum_width, natural_width)
	return
}

func (_self_ *CellRenderer) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_cell_renderer_get_request_mode((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) GetSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_get_sensitive((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) GetState(widget *C.GtkWidget, cell_state C.GtkCellRendererState) (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_cell_renderer_get_state((*C.GtkCellRenderer)(_self_), widget, cell_state)
	return
}

func (_self_ *CellRenderer) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_get_visible((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) IsActivatable() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_is_activatable((*C.GtkCellRenderer)(_self_))
	return
}

func (_self_ *CellRenderer) Render(cr *C.cairo_t, widget *C.GtkWidget, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) () {
	C._gtk_cell_renderer_render((*C.GtkCellRenderer)(_self_), cr, widget, background_area, cell_area, flags)
	return
}

func (_self_ *CellRenderer) SetAlignment(xalign C.gfloat, yalign C.gfloat) () {
	C.gtk_cell_renderer_set_alignment((*C.GtkCellRenderer)(_self_), xalign, yalign)
	return
}

func (_self_ *CellRenderer) SetFixedSize(width C.gint, height C.gint) () {
	C.gtk_cell_renderer_set_fixed_size((*C.GtkCellRenderer)(_self_), width, height)
	return
}

func (_self_ *CellRenderer) SetPadding(xpad C.gint, ypad C.gint) () {
	C.gtk_cell_renderer_set_padding((*C.GtkCellRenderer)(_self_), xpad, ypad)
	return
}

func (_self_ *CellRenderer) SetSensitive(sensitive C.gboolean) () {
	C.gtk_cell_renderer_set_sensitive((*C.GtkCellRenderer)(_self_), sensitive)
	return
}

func (_self_ *CellRenderer) SetVisible(visible C.gboolean) () {
	C.gtk_cell_renderer_set_visible((*C.GtkCellRenderer)(_self_), visible)
	return
}

func (_self_ *CellRenderer) StartEditing(event *C.GdkEvent, widget *C.GtkWidget, path *C.gchar, background_area *C.GdkRectangle, cell_area *C.GdkRectangle, flags C.GtkCellRendererState) (_return_ *C.GtkCellEditable) {
	_return_ = C._gtk_cell_renderer_start_editing((*C.GtkCellRenderer)(_self_), event, widget, path, background_area, cell_area, flags)
	return
}

func (_self_ *CellRenderer) StopEditing(canceled C.gboolean) () {
	C.gtk_cell_renderer_stop_editing((*C.GtkCellRenderer)(_self_), canceled)
	return
}

func CellRendererAccelNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_accel_new()
	return
}

func CellRendererComboNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_combo_new()
	return
}

func CellRendererPixbufNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_pixbuf_new()
	return
}

func CellRendererProgressNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_progress_new()
	return
}

func CellRendererSpinNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_spin_new()
	return
}

func CellRendererSpinnerNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_spinner_new()
	return
}

func CellRendererTextNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_text_new()
	return
}

func (_self_ *CellRendererText) SetFixedHeightFromFont(number_of_rows C.gint) () {
	C.gtk_cell_renderer_text_set_fixed_height_from_font((*C.GtkCellRendererText)(_self_), number_of_rows)
	return
}

func CellRendererToggleNew() (_return_ *C.GtkCellRenderer) {
	_return_ = C.gtk_cell_renderer_toggle_new()
	return
}

func (_self_ *CellRendererToggle) GetActivatable() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_toggle_get_activatable((*C.GtkCellRendererToggle)(_self_))
	return
}

func (_self_ *CellRendererToggle) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_toggle_get_active((*C.GtkCellRendererToggle)(_self_))
	return
}

func (_self_ *CellRendererToggle) GetRadio() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_renderer_toggle_get_radio((*C.GtkCellRendererToggle)(_self_))
	return
}

func (_self_ *CellRendererToggle) SetActivatable(setting C.gboolean) () {
	C.gtk_cell_renderer_toggle_set_activatable((*C.GtkCellRendererToggle)(_self_), setting)
	return
}

func (_self_ *CellRendererToggle) SetActive(setting C.gboolean) () {
	C.gtk_cell_renderer_toggle_set_active((*C.GtkCellRendererToggle)(_self_), setting)
	return
}

func (_self_ *CellRendererToggle) SetRadio(radio C.gboolean) () {
	C.gtk_cell_renderer_toggle_set_radio((*C.GtkCellRendererToggle)(_self_), radio)
	return
}

func CellViewNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_cell_view_new()
	return
}

func CellViewNewWithContext(area *C.GtkCellArea, context *C.GtkCellAreaContext) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_cell_view_new_with_context(area, context)
	return
}

func CellViewNewWithMarkup(markup *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_cell_view_new_with_markup(markup)
	return
}

func CellViewNewWithPixbuf(pixbuf *C.GdkPixbuf) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_cell_view_new_with_pixbuf(pixbuf)
	return
}

func CellViewNewWithText(text *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_cell_view_new_with_text(text)
	return
}

func (_self_ *CellView) GetDisplayedRow() (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_cell_view_get_displayed_row((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) GetDrawSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_view_get_draw_sensitive((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) GetFitModel() (_return_ C.gboolean) {
	_return_ = C.gtk_cell_view_get_fit_model((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_cell_view_get_model((*C.GtkCellView)(_self_))
	return
}

func (_self_ *CellView) SetBackgroundRgba(rgba *C.GdkRGBA) () {
	C._gtk_cell_view_set_background_rgba((*C.GtkCellView)(_self_), rgba)
	return
}

func (_self_ *CellView) SetDisplayedRow(path *C.GtkTreePath) () {
	C.gtk_cell_view_set_displayed_row((*C.GtkCellView)(_self_), path)
	return
}

func (_self_ *CellView) SetDrawSensitive(draw_sensitive C.gboolean) () {
	C.gtk_cell_view_set_draw_sensitive((*C.GtkCellView)(_self_), draw_sensitive)
	return
}

func (_self_ *CellView) SetFitModel(fit_model C.gboolean) () {
	C.gtk_cell_view_set_fit_model((*C.GtkCellView)(_self_), fit_model)
	return
}

func (_self_ *CellView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_cell_view_set_model((*C.GtkCellView)(_self_), model)
	return
}

func CheckButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_check_button_new()
	return
}

func CheckButtonNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_check_button_new_with_label(label)
	return
}

func CheckButtonNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_check_button_new_with_mnemonic(label)
	return
}

func CheckMenuItemNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_check_menu_item_new()
	return
}

func CheckMenuItemNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_check_menu_item_new_with_label(label)
	return
}

func CheckMenuItemNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_check_menu_item_new_with_mnemonic(label)
	return
}

func (_self_ *CheckMenuItem) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_check_menu_item_get_active((*C.GtkCheckMenuItem)(_self_))
	return
}

func (_self_ *CheckMenuItem) GetDrawAsRadio() (_return_ C.gboolean) {
	_return_ = C.gtk_check_menu_item_get_draw_as_radio((*C.GtkCheckMenuItem)(_self_))
	return
}

func (_self_ *CheckMenuItem) GetInconsistent() (_return_ C.gboolean) {
	_return_ = C.gtk_check_menu_item_get_inconsistent((*C.GtkCheckMenuItem)(_self_))
	return
}

func (_self_ *CheckMenuItem) SetActive(is_active C.gboolean) () {
	C.gtk_check_menu_item_set_active((*C.GtkCheckMenuItem)(_self_), is_active)
	return
}

func (_self_ *CheckMenuItem) SetDrawAsRadio(draw_as_radio C.gboolean) () {
	C.gtk_check_menu_item_set_draw_as_radio((*C.GtkCheckMenuItem)(_self_), draw_as_radio)
	return
}

func (_self_ *CheckMenuItem) SetInconsistent(setting C.gboolean) () {
	C.gtk_check_menu_item_set_inconsistent((*C.GtkCheckMenuItem)(_self_), setting)
	return
}

func (_self_ *CheckMenuItem) Toggled() () {
	C.gtk_check_menu_item_toggled((*C.GtkCheckMenuItem)(_self_))
	return
}

func ClipboardGet(selection C.GdkAtom) (_return_ *C.GtkClipboard) {
	_return_ = C.gtk_clipboard_get(selection)
	return
}

func ClipboardGetForDisplay(display *C.GdkDisplay, selection C.GdkAtom) (_return_ *C.GtkClipboard) {
	_return_ = C.gtk_clipboard_get_for_display(display, selection)
	return
}

func (_self_ *Clipboard) Clear() () {
	C.gtk_clipboard_clear((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_clipboard_get_display((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) GetOwner() (_return_ *C.GObject) {
	_return_ = C.gtk_clipboard_get_owner((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) RequestContents(target C.GdkAtom, callback C.GtkClipboardReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_contents((*C.GtkClipboard)(_self_), target, callback, user_data)
	return
}

func (_self_ *Clipboard) RequestImage(callback C.GtkClipboardImageReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_image((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestRichText(buffer *C.GtkTextBuffer, callback C.GtkClipboardRichTextReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_rich_text((*C.GtkClipboard)(_self_), buffer, callback, user_data)
	return
}

func (_self_ *Clipboard) RequestTargets(callback C.GtkClipboardTargetsReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_targets((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestText(callback C.GtkClipboardTextReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_text((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) RequestUris(callback C.GtkClipboardURIReceivedFunc, user_data C.gpointer) () {
	C.gtk_clipboard_request_uris((*C.GtkClipboard)(_self_), callback, user_data)
	return
}

func (_self_ *Clipboard) SetCanStore(targets *C.GtkTargetEntry, n_targets C.gint) () {
	C._gtk_clipboard_set_can_store((*C.GtkClipboard)(_self_), targets, n_targets)
	return
}

func (_self_ *Clipboard) SetImage(pixbuf *C.GdkPixbuf) () {
	C.gtk_clipboard_set_image((*C.GtkClipboard)(_self_), pixbuf)
	return
}

func (_self_ *Clipboard) SetText(text *C.gchar, len_ C.gint) () {
	C._gtk_clipboard_set_text((*C.GtkClipboard)(_self_), text, len_)
	return
}

func (_self_ *Clipboard) SetWithData(targets *C.GtkTargetEntry, n_targets C.guint, get_func C.GtkClipboardGetFunc, clear_func C.GtkClipboardClearFunc, user_data C.gpointer) (_return_ C.gboolean) {
	_return_ = C._gtk_clipboard_set_with_data((*C.GtkClipboard)(_self_), targets, n_targets, get_func, clear_func, user_data)
	return
}

func (_self_ *Clipboard) SetWithOwner(targets *C.GtkTargetEntry, n_targets C.guint, get_func C.GtkClipboardGetFunc, clear_func C.GtkClipboardClearFunc, owner *C.GObject) (_return_ C.gboolean) {
	_return_ = C._gtk_clipboard_set_with_owner((*C.GtkClipboard)(_self_), targets, n_targets, get_func, clear_func, owner)
	return
}

func (_self_ *Clipboard) Store() () {
	C.gtk_clipboard_store((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForContents(target C.GdkAtom) (_return_ *C.GtkSelectionData) {
	_return_ = C.gtk_clipboard_wait_for_contents((*C.GtkClipboard)(_self_), target)
	return
}

func (_self_ *Clipboard) WaitForImage() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_clipboard_wait_for_image((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForRichText(buffer *C.GtkTextBuffer) (_return_ *C.guint8, format *C.GdkAtom, length *C.gsize) {
	_return_ = C.gtk_clipboard_wait_for_rich_text((*C.GtkClipboard)(_self_), buffer, format, length)
	return
}

func (_self_ *Clipboard) WaitForTargets() (_return_ C.gboolean, targets unsafe.Pointer, n_targets *C.gint) {
	_return_ = C._gtk_clipboard_wait_for_targets((*C.GtkClipboard)(_self_), targets, n_targets)
	return
}

func (_self_ *Clipboard) WaitForText() (_return_ *C.gchar) {
	_return_ = C.gtk_clipboard_wait_for_text((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitForUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_clipboard_wait_for_uris((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitIsImageAvailable() (_return_ C.gboolean) {
	_return_ = C.gtk_clipboard_wait_is_image_available((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitIsRichTextAvailable(buffer *C.GtkTextBuffer) (_return_ C.gboolean) {
	_return_ = C.gtk_clipboard_wait_is_rich_text_available((*C.GtkClipboard)(_self_), buffer)
	return
}

func (_self_ *Clipboard) WaitIsTargetAvailable(target C.GdkAtom) (_return_ C.gboolean) {
	_return_ = C.gtk_clipboard_wait_is_target_available((*C.GtkClipboard)(_self_), target)
	return
}

func (_self_ *Clipboard) WaitIsTextAvailable() (_return_ C.gboolean) {
	_return_ = C.gtk_clipboard_wait_is_text_available((*C.GtkClipboard)(_self_))
	return
}

func (_self_ *Clipboard) WaitIsUrisAvailable() (_return_ C.gboolean) {
	_return_ = C.gtk_clipboard_wait_is_uris_available((*C.GtkClipboard)(_self_))
	return
}

func ColorButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_color_button_new()
	return
}

func ColorButtonNewWithRgba(rgba *C.GdkRGBA) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_color_button_new_with_rgba(rgba)
	return
}

func (_self_ *ColorButton) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_color_button_get_title((*C.GtkColorButton)(_self_))
	return
}

func (_self_ *ColorButton) SetTitle(title *C.gchar) () {
	C._gtk_color_button_set_title((*C.GtkColorButton)(_self_), title)
	return
}

func ColorChooserDialogNew(title *C.gchar, parent *C.GtkWindow) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_color_chooser_dialog_new(title, parent)
	return
}

func ColorChooserWidgetNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_color_chooser_widget_new()
	return
}

func ComboBoxNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new()
	return
}

func ComboBoxNewWithArea(area *C.GtkCellArea) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new_with_area(area)
	return
}

func ComboBoxNewWithAreaAndEntry(area *C.GtkCellArea) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new_with_area_and_entry(area)
	return
}

func ComboBoxNewWithEntry() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new_with_entry()
	return
}

func ComboBoxNewWithModel(model *C.GtkTreeModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new_with_model(model)
	return
}

func ComboBoxNewWithModelAndEntry(model *C.GtkTreeModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_new_with_model_and_entry(model)
	return
}

func (_self_ *ComboBox) GetActive() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_active((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetActiveId() (_return_ *C.gchar) {
	_return_ = C._gtk_combo_box_get_active_id((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetActiveIter() (_return_ C.gboolean, iter *C.GtkTreeIter) {
	_return_ = C.gtk_combo_box_get_active_iter((*C.GtkComboBox)(_self_), iter)
	return
}

func (_self_ *ComboBox) GetAddTearoffs() (_return_ C.gboolean) {
	_return_ = C.gtk_combo_box_get_add_tearoffs((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetButtonSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_combo_box_get_button_sensitivity((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetColumnSpanColumn() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_column_span_column((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetEntryTextColumn() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_entry_text_column((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetFocusOnClick() (_return_ C.gboolean) {
	_return_ = C.gtk_combo_box_get_focus_on_click((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetHasEntry() (_return_ C.gboolean) {
	_return_ = C.gtk_combo_box_get_has_entry((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetIdColumn() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_id_column((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_combo_box_get_model((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_combo_box_get_popup_accessible((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetPopupFixedWidth() (_return_ C.gboolean) {
	_return_ = C.gtk_combo_box_get_popup_fixed_width((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_combo_box_get_row_separator_func((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetRowSpanColumn() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_row_span_column((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_combo_box_get_title((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) GetWrapWidth() (_return_ C.gint) {
	_return_ = C.gtk_combo_box_get_wrap_width((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) Popdown() () {
	C.gtk_combo_box_popdown((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) Popup() () {
	C.gtk_combo_box_popup((*C.GtkComboBox)(_self_))
	return
}

func (_self_ *ComboBox) PopupForDevice(device *C.GdkDevice) () {
	C.gtk_combo_box_popup_for_device((*C.GtkComboBox)(_self_), device)
	return
}

func (_self_ *ComboBox) SetActive(index_ C.gint) () {
	C.gtk_combo_box_set_active((*C.GtkComboBox)(_self_), index_)
	return
}

func (_self_ *ComboBox) SetActiveId(active_id *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_combo_box_set_active_id((*C.GtkComboBox)(_self_), active_id)
	return
}

func (_self_ *ComboBox) SetActiveIter(iter *C.GtkTreeIter) () {
	C.gtk_combo_box_set_active_iter((*C.GtkComboBox)(_self_), iter)
	return
}

func (_self_ *ComboBox) SetAddTearoffs(add_tearoffs C.gboolean) () {
	C.gtk_combo_box_set_add_tearoffs((*C.GtkComboBox)(_self_), add_tearoffs)
	return
}

func (_self_ *ComboBox) SetButtonSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_combo_box_set_button_sensitivity((*C.GtkComboBox)(_self_), sensitivity)
	return
}

func (_self_ *ComboBox) SetColumnSpanColumn(column_span C.gint) () {
	C.gtk_combo_box_set_column_span_column((*C.GtkComboBox)(_self_), column_span)
	return
}

func (_self_ *ComboBox) SetEntryTextColumn(text_column C.gint) () {
	C.gtk_combo_box_set_entry_text_column((*C.GtkComboBox)(_self_), text_column)
	return
}

func (_self_ *ComboBox) SetFocusOnClick(focus_on_click C.gboolean) () {
	C.gtk_combo_box_set_focus_on_click((*C.GtkComboBox)(_self_), focus_on_click)
	return
}

func (_self_ *ComboBox) SetIdColumn(id_column C.gint) () {
	C.gtk_combo_box_set_id_column((*C.GtkComboBox)(_self_), id_column)
	return
}

func (_self_ *ComboBox) SetModel(model *C.GtkTreeModel) () {
	C.gtk_combo_box_set_model((*C.GtkComboBox)(_self_), model)
	return
}

func (_self_ *ComboBox) SetPopupFixedWidth(fixed C.gboolean) () {
	C.gtk_combo_box_set_popup_fixed_width((*C.GtkComboBox)(_self_), fixed)
	return
}

func (_self_ *ComboBox) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_combo_box_set_row_separator_func((*C.GtkComboBox)(_self_), func_, data, destroy)
	return
}

func (_self_ *ComboBox) SetRowSpanColumn(row_span C.gint) () {
	C.gtk_combo_box_set_row_span_column((*C.GtkComboBox)(_self_), row_span)
	return
}

func (_self_ *ComboBox) SetTitle(title *C.gchar) () {
	C._gtk_combo_box_set_title((*C.GtkComboBox)(_self_), title)
	return
}

func (_self_ *ComboBox) SetWrapWidth(width C.gint) () {
	C.gtk_combo_box_set_wrap_width((*C.GtkComboBox)(_self_), width)
	return
}

func ComboBoxTextNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_text_new()
	return
}

func ComboBoxTextNewWithEntry() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_combo_box_text_new_with_entry()
	return
}

func (_self_ *ComboBoxText) Append(id *C.gchar, text *C.gchar) () {
	C._gtk_combo_box_text_append((*C.GtkComboBoxText)(_self_), id, text)
	return
}

func (_self_ *ComboBoxText) AppendText(text *C.gchar) () {
	C._gtk_combo_box_text_append_text((*C.GtkComboBoxText)(_self_), text)
	return
}

func (_self_ *ComboBoxText) GetActiveText() (_return_ *C.gchar) {
	_return_ = C.gtk_combo_box_text_get_active_text((*C.GtkComboBoxText)(_self_))
	return
}

func (_self_ *ComboBoxText) Insert(position C.gint, id *C.gchar, text *C.gchar) () {
	C._gtk_combo_box_text_insert((*C.GtkComboBoxText)(_self_), position, id, text)
	return
}

func (_self_ *ComboBoxText) InsertText(position C.gint, text *C.gchar) () {
	C._gtk_combo_box_text_insert_text((*C.GtkComboBoxText)(_self_), position, text)
	return
}

func (_self_ *ComboBoxText) Prepend(id *C.gchar, text *C.gchar) () {
	C._gtk_combo_box_text_prepend((*C.GtkComboBoxText)(_self_), id, text)
	return
}

func (_self_ *ComboBoxText) PrependText(text *C.gchar) () {
	C._gtk_combo_box_text_prepend_text((*C.GtkComboBoxText)(_self_), text)
	return
}

func (_self_ *ComboBoxText) Remove(position C.gint) () {
	C.gtk_combo_box_text_remove((*C.GtkComboBoxText)(_self_), position)
	return
}

func (_self_ *ComboBoxText) RemoveAll() () {
	C.gtk_combo_box_text_remove_all((*C.GtkComboBoxText)(_self_))
	return
}

func (_self_ *Container) Add(widget *C.GtkWidget) () {
	C.gtk_container_add((*C.GtkContainer)(_self_), widget)
	return
}

func (_self_ *Container) CheckResize() () {
	C.gtk_container_check_resize((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) ChildGetProperty(child *C.GtkWidget, property_name *C.gchar, value *C.GValue) () {
	C._gtk_container_child_get_property((*C.GtkContainer)(_self_), child, property_name, value)
	return
}

func (_self_ *Container) ChildNotify(child *C.GtkWidget, child_property *C.gchar) () {
	C._gtk_container_child_notify((*C.GtkContainer)(_self_), child, child_property)
	return
}

func (_self_ *Container) ChildSetProperty(child *C.GtkWidget, property_name *C.gchar, value *C.GValue) () {
	C._gtk_container_child_set_property((*C.GtkContainer)(_self_), child, property_name, value)
	return
}

func (_self_ *Container) ChildType() (_return_ C.GType) {
	_return_ = C.gtk_container_child_type((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) Forall(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_forall((*C.GtkContainer)(_self_), callback, callback_data)
	return
}

func (_self_ *Container) Foreach(callback C.GtkCallback, callback_data C.gpointer) () {
	C.gtk_container_foreach((*C.GtkContainer)(_self_), callback, callback_data)
	return
}

func (_self_ *Container) GetBorderWidth() (_return_ C.guint) {
	_return_ = C.gtk_container_get_border_width((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetChildren() (_return_ *C.GList) {
	_return_ = C.gtk_container_get_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetFocusChain() (_return_ C.gboolean, focusable_widgets unsafe.Pointer) {
	_return_ = C._gtk_container_get_focus_chain((*C.GtkContainer)(_self_), focusable_widgets)
	return
}

func (_self_ *Container) GetFocusChild() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_container_get_focus_child((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetFocusHadjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_container_get_focus_hadjustment((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetFocusVadjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_container_get_focus_vadjustment((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) GetPathForChild(child *C.GtkWidget) (_return_ *C.GtkWidgetPath) {
	_return_ = C.gtk_container_get_path_for_child((*C.GtkContainer)(_self_), child)
	return
}

func (_self_ *Container) GetResizeMode() (_return_ C.GtkResizeMode) {
	_return_ = C.gtk_container_get_resize_mode((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) PropagateDraw(child *C.GtkWidget, cr *C.cairo_t) () {
	C.gtk_container_propagate_draw((*C.GtkContainer)(_self_), child, cr)
	return
}

func (_self_ *Container) Remove(widget *C.GtkWidget) () {
	C.gtk_container_remove((*C.GtkContainer)(_self_), widget)
	return
}

func (_self_ *Container) ResizeChildren() () {
	C.gtk_container_resize_children((*C.GtkContainer)(_self_))
	return
}

func (_self_ *Container) SetBorderWidth(border_width C.guint) () {
	C.gtk_container_set_border_width((*C.GtkContainer)(_self_), border_width)
	return
}

func (_self_ *Container) SetFocusChain(focusable_widgets *C.GList) () {
	C.gtk_container_set_focus_chain((*C.GtkContainer)(_self_), focusable_widgets)
	return
}

func (_self_ *Container) SetFocusChild(child *C.GtkWidget) () {
	C.gtk_container_set_focus_child((*C.GtkContainer)(_self_), child)
	return
}

func (_self_ *Container) SetFocusHadjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_container_set_focus_hadjustment((*C.GtkContainer)(_self_), adjustment)
	return
}

func (_self_ *Container) SetFocusVadjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_container_set_focus_vadjustment((*C.GtkContainer)(_self_), adjustment)
	return
}

func (_self_ *Container) SetReallocateRedraws(needs_redraws C.gboolean) () {
	C.gtk_container_set_reallocate_redraws((*C.GtkContainer)(_self_), needs_redraws)
	return
}

func (_self_ *Container) SetResizeMode(resize_mode C.GtkResizeMode) () {
	C.gtk_container_set_resize_mode((*C.GtkContainer)(_self_), resize_mode)
	return
}

func (_self_ *Container) UnsetFocusChain() () {
	C.gtk_container_unset_focus_chain((*C.GtkContainer)(_self_))
	return
}

func (_self_ *ContainerClass) FindChildProperty(property_name *C.gchar) (_return_ *C.GParamSpec) {
	_return_ = C._gtk_container_class_find_child_property((*C.GtkContainerClass)(_self_), property_name)
	return
}

func (_self_ *ContainerClass) HandleBorderWidth() () {
	C.gtk_container_class_handle_border_width((*C.GtkContainerClass)(_self_))
	return
}

func (_self_ *ContainerClass) InstallChildProperty(property_id C.guint, pspec *C.GParamSpec) () {
	C.gtk_container_class_install_child_property((*C.GtkContainerClass)(_self_), property_id, pspec)
	return
}

func (_self_ *ContainerClass) ListChildProperties() (_return_ unsafe.Pointer, n_properties *C.guint) {
	_return_ = C._gtk_container_class_list_child_properties((*C.GtkContainerClass)(_self_), n_properties)
	return
}

func CssProviderNew() (_return_ *C.GtkCssProvider) {
	_return_ = C.gtk_css_provider_new()
	return
}

func CssProviderGetDefault() (_return_ *C.GtkCssProvider) {
	_return_ = C.gtk_css_provider_get_default()
	return
}

func CssProviderGetNamed(name *C.gchar, variant *C.gchar) (_return_ *C.GtkCssProvider) {
	_return_ = C._gtk_css_provider_get_named(name, variant)
	return
}

func (_self_ *CssProvider) LoadFromData(data *C.gchar, length C.gssize) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_css_provider_load_from_data((*C.GtkCssProvider)(_self_), data, length, _error_)
	return
}

func (_self_ *CssProvider) LoadFromFile(file *C.GFile) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_css_provider_load_from_file((*C.GtkCssProvider)(_self_), file, _error_)
	return
}

func (_self_ *CssProvider) LoadFromPath(path *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_css_provider_load_from_path((*C.GtkCssProvider)(_self_), path, _error_)
	return
}

func (_self_ *CssProvider) ToString() (_return_ *C.char) {
	_return_ = C.gtk_css_provider_to_string((*C.GtkCssProvider)(_self_))
	return
}

func (_self_ *CssSection) GetEndLine() (_return_ C.guint) {
	_return_ = C._gtk_css_section_get_end_line((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetEndPosition() (_return_ C.guint) {
	_return_ = C._gtk_css_section_get_end_position((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetFile() (_return_ *C.GFile) {
	_return_ = C._gtk_css_section_get_file((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetParent() (_return_ *C.GtkCssSection) {
	_return_ = C._gtk_css_section_get_parent((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetSectionType() (_return_ C.GtkCssSectionType) {
	_return_ = C._gtk_css_section_get_section_type((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetStartLine() (_return_ C.guint) {
	_return_ = C._gtk_css_section_get_start_line((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) GetStartPosition() (_return_ C.guint) {
	_return_ = C._gtk_css_section_get_start_position((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) Ref() (_return_ *C.GtkCssSection) {
	_return_ = C.gtk_css_section_ref((*C.GtkCssSection)(_self_))
	return
}

func (_self_ *CssSection) Unref() () {
	C.gtk_css_section_unref((*C.GtkCssSection)(_self_))
	return
}

func DialogNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_dialog_new()
	return
}

func (_self_ *Dialog) AddActionWidget(child *C.GtkWidget, response_id C.gint) () {
	C.gtk_dialog_add_action_widget((*C.GtkDialog)(_self_), child, response_id)
	return
}

func (_self_ *Dialog) AddButton(button_text *C.gchar, response_id C.gint) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_dialog_add_button((*C.GtkDialog)(_self_), button_text, response_id)
	return
}

func (_self_ *Dialog) GetActionArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_dialog_get_action_area((*C.GtkDialog)(_self_))
	return
}

func (_self_ *Dialog) GetContentArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_dialog_get_content_area((*C.GtkDialog)(_self_))
	return
}

func (_self_ *Dialog) GetResponseForWidget(widget *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_dialog_get_response_for_widget((*C.GtkDialog)(_self_), widget)
	return
}

func (_self_ *Dialog) GetWidgetForResponse(response_id C.gint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_dialog_get_widget_for_response((*C.GtkDialog)(_self_), response_id)
	return
}

func (_self_ *Dialog) Response(response_id C.gint) () {
	C.gtk_dialog_response((*C.GtkDialog)(_self_), response_id)
	return
}

func (_self_ *Dialog) Run() (_return_ C.gint) {
	_return_ = C.gtk_dialog_run((*C.GtkDialog)(_self_))
	return
}

func (_self_ *Dialog) SetAlternativeButtonOrderFromArray(n_params C.gint, new_order *C.gint) () {
	C.gtk_dialog_set_alternative_button_order_from_array((*C.GtkDialog)(_self_), n_params, new_order)
	return
}

func (_self_ *Dialog) SetDefaultResponse(response_id C.gint) () {
	C.gtk_dialog_set_default_response((*C.GtkDialog)(_self_), response_id)
	return
}

func (_self_ *Dialog) SetResponseSensitive(response_id C.gint, setting C.gboolean) () {
	C.gtk_dialog_set_response_sensitive((*C.GtkDialog)(_self_), response_id, setting)
	return
}

func DrawingAreaNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_drawing_area_new()
	return
}

func EntryNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_entry_new()
	return
}

func EntryNewWithBuffer(buffer *C.GtkEntryBuffer) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_entry_new_with_buffer(buffer)
	return
}

func (_self_ *Entry) GetActivatesDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_activates_default((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetAlignment() (_return_ C.gfloat) {
	_return_ = C.gtk_entry_get_alignment((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_entry_get_attributes((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetBuffer() (_return_ *C.GtkEntryBuffer) {
	_return_ = C.gtk_entry_get_buffer((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetCompletion() (_return_ *C.GtkEntryCompletion) {
	_return_ = C.gtk_entry_get_completion((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetCurrentIconDragSource() (_return_ C.gint) {
	_return_ = C.gtk_entry_get_current_icon_drag_source((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetCursorHadjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_entry_get_cursor_hadjustment((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetHasFrame() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_has_frame((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetIconActivatable(icon_pos C.GtkEntryIconPosition) (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_icon_activatable((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconArea(icon_pos C.GtkEntryIconPosition) (icon_area *C.GdkRectangle) {
	C.gtk_entry_get_icon_area((*C.GtkEntry)(_self_), icon_pos, icon_area)
	return
}

func (_self_ *Entry) GetIconAtPos(x C.gint, y C.gint) (_return_ C.gint) {
	_return_ = C.gtk_entry_get_icon_at_pos((*C.GtkEntry)(_self_), x, y)
	return
}

func (_self_ *Entry) GetIconGicon(icon_pos C.GtkEntryIconPosition) (_return_ *C.GIcon) {
	_return_ = C.gtk_entry_get_icon_gicon((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconName(icon_pos C.GtkEntryIconPosition) (_return_ *C.gchar) {
	_return_ = C._gtk_entry_get_icon_name((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconPixbuf(icon_pos C.GtkEntryIconPosition) (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_entry_get_icon_pixbuf((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconSensitive(icon_pos C.GtkEntryIconPosition) (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_icon_sensitive((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconStock(icon_pos C.GtkEntryIconPosition) (_return_ *C.gchar) {
	_return_ = C._gtk_entry_get_icon_stock((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconStorageType(icon_pos C.GtkEntryIconPosition) (_return_ C.GtkImageType) {
	_return_ = C.gtk_entry_get_icon_storage_type((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition) (_return_ *C.gchar) {
	_return_ = C.gtk_entry_get_icon_tooltip_markup((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetIconTooltipText(icon_pos C.GtkEntryIconPosition) (_return_ *C.gchar) {
	_return_ = C.gtk_entry_get_icon_tooltip_text((*C.GtkEntry)(_self_), icon_pos)
	return
}

func (_self_ *Entry) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_entry_get_input_hints((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_entry_get_input_purpose((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetInvisibleChar() (_return_ C.gunichar) {
	_return_ = C.gtk_entry_get_invisible_char((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_entry_get_layout((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetLayoutOffsets() (x *C.gint, y *C.gint) {
	C.gtk_entry_get_layout_offsets((*C.GtkEntry)(_self_), x, y)
	return
}

func (_self_ *Entry) GetMaxLength() (_return_ C.gint) {
	_return_ = C.gtk_entry_get_max_length((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetOverwriteMode() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_overwrite_mode((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetPlaceholderText() (_return_ *C.gchar) {
	_return_ = C._gtk_entry_get_placeholder_text((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetProgressFraction() (_return_ C.gdouble) {
	_return_ = C.gtk_entry_get_progress_fraction((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetProgressPulseStep() (_return_ C.gdouble) {
	_return_ = C.gtk_entry_get_progress_pulse_step((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetText() (_return_ *C.gchar) {
	_return_ = C._gtk_entry_get_text((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetTextArea() (text_area *C.GdkRectangle) {
	C.gtk_entry_get_text_area((*C.GtkEntry)(_self_), text_area)
	return
}

func (_self_ *Entry) GetTextLength() (_return_ C.guint16) {
	_return_ = C.gtk_entry_get_text_length((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetVisibility() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_get_visibility((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) GetWidthChars() (_return_ C.gint) {
	_return_ = C.gtk_entry_get_width_chars((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) ImContextFilterKeypress(event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_entry_im_context_filter_keypress((*C.GtkEntry)(_self_), event)
	return
}

func (_self_ *Entry) LayoutIndexToTextIndex(layout_index C.gint) (_return_ C.gint) {
	_return_ = C.gtk_entry_layout_index_to_text_index((*C.GtkEntry)(_self_), layout_index)
	return
}

func (_self_ *Entry) ProgressPulse() () {
	C.gtk_entry_progress_pulse((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) ResetImContext() () {
	C.gtk_entry_reset_im_context((*C.GtkEntry)(_self_))
	return
}

func (_self_ *Entry) SetActivatesDefault(setting C.gboolean) () {
	C.gtk_entry_set_activates_default((*C.GtkEntry)(_self_), setting)
	return
}

func (_self_ *Entry) SetAlignment(xalign C.gfloat) () {
	C.gtk_entry_set_alignment((*C.GtkEntry)(_self_), xalign)
	return
}

func (_self_ *Entry) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_entry_set_attributes((*C.GtkEntry)(_self_), attrs)
	return
}

func (_self_ *Entry) SetBuffer(buffer *C.GtkEntryBuffer) () {
	C.gtk_entry_set_buffer((*C.GtkEntry)(_self_), buffer)
	return
}

func (_self_ *Entry) SetCompletion(completion *C.GtkEntryCompletion) () {
	C.gtk_entry_set_completion((*C.GtkEntry)(_self_), completion)
	return
}

func (_self_ *Entry) SetCursorHadjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_entry_set_cursor_hadjustment((*C.GtkEntry)(_self_), adjustment)
	return
}

func (_self_ *Entry) SetHasFrame(setting C.gboolean) () {
	C.gtk_entry_set_has_frame((*C.GtkEntry)(_self_), setting)
	return
}

func (_self_ *Entry) SetIconActivatable(icon_pos C.GtkEntryIconPosition, activatable C.gboolean) () {
	C.gtk_entry_set_icon_activatable((*C.GtkEntry)(_self_), icon_pos, activatable)
	return
}

func (_self_ *Entry) SetIconDragSource(icon_pos C.GtkEntryIconPosition, target_list *C.GtkTargetList, actions C.GdkDragAction) () {
	C.gtk_entry_set_icon_drag_source((*C.GtkEntry)(_self_), icon_pos, target_list, actions)
	return
}

func (_self_ *Entry) SetIconFromGicon(icon_pos C.GtkEntryIconPosition, icon *C.GIcon) () {
	C.gtk_entry_set_icon_from_gicon((*C.GtkEntry)(_self_), icon_pos, icon)
	return
}

func (_self_ *Entry) SetIconFromIconName(icon_pos C.GtkEntryIconPosition, icon_name *C.gchar) () {
	C._gtk_entry_set_icon_from_icon_name((*C.GtkEntry)(_self_), icon_pos, icon_name)
	return
}

func (_self_ *Entry) SetIconFromPixbuf(icon_pos C.GtkEntryIconPosition, pixbuf *C.GdkPixbuf) () {
	C.gtk_entry_set_icon_from_pixbuf((*C.GtkEntry)(_self_), icon_pos, pixbuf)
	return
}

func (_self_ *Entry) SetIconFromStock(icon_pos C.GtkEntryIconPosition, stock_id *C.gchar) () {
	C._gtk_entry_set_icon_from_stock((*C.GtkEntry)(_self_), icon_pos, stock_id)
	return
}

func (_self_ *Entry) SetIconSensitive(icon_pos C.GtkEntryIconPosition, sensitive C.gboolean) () {
	C.gtk_entry_set_icon_sensitive((*C.GtkEntry)(_self_), icon_pos, sensitive)
	return
}

func (_self_ *Entry) SetIconTooltipMarkup(icon_pos C.GtkEntryIconPosition, tooltip *C.gchar) () {
	C._gtk_entry_set_icon_tooltip_markup((*C.GtkEntry)(_self_), icon_pos, tooltip)
	return
}

func (_self_ *Entry) SetIconTooltipText(icon_pos C.GtkEntryIconPosition, tooltip *C.gchar) () {
	C._gtk_entry_set_icon_tooltip_text((*C.GtkEntry)(_self_), icon_pos, tooltip)
	return
}

func (_self_ *Entry) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_entry_set_input_hints((*C.GtkEntry)(_self_), hints)
	return
}

func (_self_ *Entry) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_entry_set_input_purpose((*C.GtkEntry)(_self_), purpose)
	return
}

func (_self_ *Entry) SetInvisibleChar(ch C.gunichar) () {
	C.gtk_entry_set_invisible_char((*C.GtkEntry)(_self_), ch)
	return
}

func (_self_ *Entry) SetMaxLength(max C.gint) () {
	C.gtk_entry_set_max_length((*C.GtkEntry)(_self_), max)
	return
}

func (_self_ *Entry) SetOverwriteMode(overwrite C.gboolean) () {
	C.gtk_entry_set_overwrite_mode((*C.GtkEntry)(_self_), overwrite)
	return
}

func (_self_ *Entry) SetPlaceholderText(text *C.gchar) () {
	C._gtk_entry_set_placeholder_text((*C.GtkEntry)(_self_), text)
	return
}

func (_self_ *Entry) SetProgressFraction(fraction C.gdouble) () {
	C.gtk_entry_set_progress_fraction((*C.GtkEntry)(_self_), fraction)
	return
}

func (_self_ *Entry) SetProgressPulseStep(fraction C.gdouble) () {
	C.gtk_entry_set_progress_pulse_step((*C.GtkEntry)(_self_), fraction)
	return
}

func (_self_ *Entry) SetText(text *C.gchar) () {
	C._gtk_entry_set_text((*C.GtkEntry)(_self_), text)
	return
}

func (_self_ *Entry) SetVisibility(visible C.gboolean) () {
	C.gtk_entry_set_visibility((*C.GtkEntry)(_self_), visible)
	return
}

func (_self_ *Entry) SetWidthChars(n_chars C.gint) () {
	C.gtk_entry_set_width_chars((*C.GtkEntry)(_self_), n_chars)
	return
}

func (_self_ *Entry) TextIndexToLayoutIndex(text_index C.gint) (_return_ C.gint) {
	_return_ = C.gtk_entry_text_index_to_layout_index((*C.GtkEntry)(_self_), text_index)
	return
}

func (_self_ *Entry) UnsetInvisibleChar() () {
	C.gtk_entry_unset_invisible_char((*C.GtkEntry)(_self_))
	return
}

func EntryBufferNew(initial_chars *C.gchar, n_initial_chars C.gint) (_return_ *C.GtkEntryBuffer) {
	_return_ = C._gtk_entry_buffer_new(initial_chars, n_initial_chars)
	return
}

func (_self_ *EntryBuffer) DeleteText(position C.guint, n_chars C.gint) (_return_ C.guint) {
	_return_ = C.gtk_entry_buffer_delete_text((*C.GtkEntryBuffer)(_self_), position, n_chars)
	return
}

func (_self_ *EntryBuffer) EmitDeletedText(position C.guint, n_chars C.guint) () {
	C.gtk_entry_buffer_emit_deleted_text((*C.GtkEntryBuffer)(_self_), position, n_chars)
	return
}

func (_self_ *EntryBuffer) EmitInsertedText(position C.guint, chars *C.gchar, n_chars C.guint) () {
	C._gtk_entry_buffer_emit_inserted_text((*C.GtkEntryBuffer)(_self_), position, chars, n_chars)
	return
}

func (_self_ *EntryBuffer) GetBytes() (_return_ C.gsize) {
	_return_ = C.gtk_entry_buffer_get_bytes((*C.GtkEntryBuffer)(_self_))
	return
}

func (_self_ *EntryBuffer) GetLength() (_return_ C.guint) {
	_return_ = C.gtk_entry_buffer_get_length((*C.GtkEntryBuffer)(_self_))
	return
}

func (_self_ *EntryBuffer) GetMaxLength() (_return_ C.gint) {
	_return_ = C.gtk_entry_buffer_get_max_length((*C.GtkEntryBuffer)(_self_))
	return
}

func (_self_ *EntryBuffer) GetText() (_return_ *C.gchar) {
	_return_ = C._gtk_entry_buffer_get_text((*C.GtkEntryBuffer)(_self_))
	return
}

func (_self_ *EntryBuffer) InsertText(position C.guint, chars *C.gchar, n_chars C.gint) (_return_ C.guint) {
	_return_ = C._gtk_entry_buffer_insert_text((*C.GtkEntryBuffer)(_self_), position, chars, n_chars)
	return
}

func (_self_ *EntryBuffer) SetMaxLength(max_length C.gint) () {
	C.gtk_entry_buffer_set_max_length((*C.GtkEntryBuffer)(_self_), max_length)
	return
}

func (_self_ *EntryBuffer) SetText(chars *C.gchar, n_chars C.gint) () {
	C._gtk_entry_buffer_set_text((*C.GtkEntryBuffer)(_self_), chars, n_chars)
	return
}

func EntryCompletionNew() (_return_ *C.GtkEntryCompletion) {
	_return_ = C.gtk_entry_completion_new()
	return
}

func EntryCompletionNewWithArea(area *C.GtkCellArea) (_return_ *C.GtkEntryCompletion) {
	_return_ = C.gtk_entry_completion_new_with_area(area)
	return
}

func (_self_ *EntryCompletion) Complete() () {
	C.gtk_entry_completion_complete((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) ComputePrefix(key *C.char) (_return_ *C.gchar) {
	_return_ = C._gtk_entry_completion_compute_prefix((*C.GtkEntryCompletion)(_self_), key)
	return
}

func (_self_ *EntryCompletion) DeleteAction(index_ C.gint) () {
	C.gtk_entry_completion_delete_action((*C.GtkEntryCompletion)(_self_), index_)
	return
}

func (_self_ *EntryCompletion) GetCompletionPrefix() (_return_ *C.gchar) {
	_return_ = C._gtk_entry_completion_get_completion_prefix((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetEntry() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_entry_completion_get_entry((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetInlineCompletion() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_completion_get_inline_completion((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetInlineSelection() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_completion_get_inline_selection((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetMinimumKeyLength() (_return_ C.gint) {
	_return_ = C.gtk_entry_completion_get_minimum_key_length((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_entry_completion_get_model((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetPopupCompletion() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_completion_get_popup_completion((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetPopupSetWidth() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_completion_get_popup_set_width((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetPopupSingleMatch() (_return_ C.gboolean) {
	_return_ = C.gtk_entry_completion_get_popup_single_match((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) GetTextColumn() (_return_ C.gint) {
	_return_ = C.gtk_entry_completion_get_text_column((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) InsertActionMarkup(index_ C.gint, markup *C.gchar) () {
	C._gtk_entry_completion_insert_action_markup((*C.GtkEntryCompletion)(_self_), index_, markup)
	return
}

func (_self_ *EntryCompletion) InsertActionText(index_ C.gint, text *C.gchar) () {
	C._gtk_entry_completion_insert_action_text((*C.GtkEntryCompletion)(_self_), index_, text)
	return
}

func (_self_ *EntryCompletion) InsertPrefix() () {
	C.gtk_entry_completion_insert_prefix((*C.GtkEntryCompletion)(_self_))
	return
}

func (_self_ *EntryCompletion) SetInlineCompletion(inline_completion C.gboolean) () {
	C.gtk_entry_completion_set_inline_completion((*C.GtkEntryCompletion)(_self_), inline_completion)
	return
}

func (_self_ *EntryCompletion) SetInlineSelection(inline_selection C.gboolean) () {
	C.gtk_entry_completion_set_inline_selection((*C.GtkEntryCompletion)(_self_), inline_selection)
	return
}

func (_self_ *EntryCompletion) SetMatchFunc(func_ C.GtkEntryCompletionMatchFunc, func_data C.gpointer, func_notify C.GDestroyNotify) () {
	C.gtk_entry_completion_set_match_func((*C.GtkEntryCompletion)(_self_), func_, func_data, func_notify)
	return
}

func (_self_ *EntryCompletion) SetMinimumKeyLength(length C.gint) () {
	C.gtk_entry_completion_set_minimum_key_length((*C.GtkEntryCompletion)(_self_), length)
	return
}

func (_self_ *EntryCompletion) SetModel(model *C.GtkTreeModel) () {
	C.gtk_entry_completion_set_model((*C.GtkEntryCompletion)(_self_), model)
	return
}

func (_self_ *EntryCompletion) SetPopupCompletion(popup_completion C.gboolean) () {
	C.gtk_entry_completion_set_popup_completion((*C.GtkEntryCompletion)(_self_), popup_completion)
	return
}

func (_self_ *EntryCompletion) SetPopupSetWidth(popup_set_width C.gboolean) () {
	C.gtk_entry_completion_set_popup_set_width((*C.GtkEntryCompletion)(_self_), popup_set_width)
	return
}

func (_self_ *EntryCompletion) SetPopupSingleMatch(popup_single_match C.gboolean) () {
	C.gtk_entry_completion_set_popup_single_match((*C.GtkEntryCompletion)(_self_), popup_single_match)
	return
}

func (_self_ *EntryCompletion) SetTextColumn(column C.gint) () {
	C.gtk_entry_completion_set_text_column((*C.GtkEntryCompletion)(_self_), column)
	return
}

func EventBoxNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_event_box_new()
	return
}

func (_self_ *EventBox) GetAboveChild() (_return_ C.gboolean) {
	_return_ = C.gtk_event_box_get_above_child((*C.GtkEventBox)(_self_))
	return
}

func (_self_ *EventBox) GetVisibleWindow() (_return_ C.gboolean) {
	_return_ = C.gtk_event_box_get_visible_window((*C.GtkEventBox)(_self_))
	return
}

func (_self_ *EventBox) SetAboveChild(above_child C.gboolean) () {
	C.gtk_event_box_set_above_child((*C.GtkEventBox)(_self_), above_child)
	return
}

func (_self_ *EventBox) SetVisibleWindow(visible_window C.gboolean) () {
	C.gtk_event_box_set_visible_window((*C.GtkEventBox)(_self_), visible_window)
	return
}

func ExpanderNew(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_expander_new(label)
	return
}

func ExpanderNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_expander_new_with_mnemonic(label)
	return
}

func (_self_ *Expander) GetExpanded() (_return_ C.gboolean) {
	_return_ = C.gtk_expander_get_expanded((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_expander_get_label((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetLabelFill() (_return_ C.gboolean) {
	_return_ = C.gtk_expander_get_label_fill((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetLabelWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_expander_get_label_widget((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetResizeToplevel() (_return_ C.gboolean) {
	_return_ = C.gtk_expander_get_resize_toplevel((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetSpacing() (_return_ C.gint) {
	_return_ = C.gtk_expander_get_spacing((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetUseMarkup() (_return_ C.gboolean) {
	_return_ = C.gtk_expander_get_use_markup((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) GetUseUnderline() (_return_ C.gboolean) {
	_return_ = C.gtk_expander_get_use_underline((*C.GtkExpander)(_self_))
	return
}

func (_self_ *Expander) SetExpanded(expanded C.gboolean) () {
	C.gtk_expander_set_expanded((*C.GtkExpander)(_self_), expanded)
	return
}

func (_self_ *Expander) SetLabel(label *C.gchar) () {
	C._gtk_expander_set_label((*C.GtkExpander)(_self_), label)
	return
}

func (_self_ *Expander) SetLabelFill(label_fill C.gboolean) () {
	C.gtk_expander_set_label_fill((*C.GtkExpander)(_self_), label_fill)
	return
}

func (_self_ *Expander) SetLabelWidget(label_widget *C.GtkWidget) () {
	C.gtk_expander_set_label_widget((*C.GtkExpander)(_self_), label_widget)
	return
}

func (_self_ *Expander) SetResizeToplevel(resize_toplevel C.gboolean) () {
	C.gtk_expander_set_resize_toplevel((*C.GtkExpander)(_self_), resize_toplevel)
	return
}

func (_self_ *Expander) SetSpacing(spacing C.gint) () {
	C.gtk_expander_set_spacing((*C.GtkExpander)(_self_), spacing)
	return
}

func (_self_ *Expander) SetUseMarkup(use_markup C.gboolean) () {
	C.gtk_expander_set_use_markup((*C.GtkExpander)(_self_), use_markup)
	return
}

func (_self_ *Expander) SetUseUnderline(use_underline C.gboolean) () {
	C.gtk_expander_set_use_underline((*C.GtkExpander)(_self_), use_underline)
	return
}

func FileChooserButtonNew(title *C.gchar, action C.GtkFileChooserAction) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_file_chooser_button_new(title, action)
	return
}

func FileChooserButtonNewWithDialog(dialog *C.GtkWidget) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_file_chooser_button_new_with_dialog(dialog)
	return
}

func (_self_ *FileChooserButton) GetFocusOnClick() (_return_ C.gboolean) {
	_return_ = C.gtk_file_chooser_button_get_focus_on_click((*C.GtkFileChooserButton)(_self_))
	return
}

func (_self_ *FileChooserButton) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_file_chooser_button_get_title((*C.GtkFileChooserButton)(_self_))
	return
}

func (_self_ *FileChooserButton) GetWidthChars() (_return_ C.gint) {
	_return_ = C.gtk_file_chooser_button_get_width_chars((*C.GtkFileChooserButton)(_self_))
	return
}

func (_self_ *FileChooserButton) SetFocusOnClick(focus_on_click C.gboolean) () {
	C.gtk_file_chooser_button_set_focus_on_click((*C.GtkFileChooserButton)(_self_), focus_on_click)
	return
}

func (_self_ *FileChooserButton) SetTitle(title *C.gchar) () {
	C._gtk_file_chooser_button_set_title((*C.GtkFileChooserButton)(_self_), title)
	return
}

func (_self_ *FileChooserButton) SetWidthChars(n_chars C.gint) () {
	C.gtk_file_chooser_button_set_width_chars((*C.GtkFileChooserButton)(_self_), n_chars)
	return
}

func FileChooserWidgetNew(action C.GtkFileChooserAction) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_file_chooser_widget_new(action)
	return
}

func FileFilterNew() (_return_ *C.GtkFileFilter) {
	_return_ = C.gtk_file_filter_new()
	return
}

func (_self_ *FileFilter) AddCustom(needed C.GtkFileFilterFlags, func_ C.GtkFileFilterFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.gtk_file_filter_add_custom((*C.GtkFileFilter)(_self_), needed, func_, data, notify)
	return
}

func (_self_ *FileFilter) AddMimeType(mime_type *C.gchar) () {
	C._gtk_file_filter_add_mime_type((*C.GtkFileFilter)(_self_), mime_type)
	return
}

func (_self_ *FileFilter) AddPattern(pattern *C.gchar) () {
	C._gtk_file_filter_add_pattern((*C.GtkFileFilter)(_self_), pattern)
	return
}

func (_self_ *FileFilter) AddPixbufFormats() () {
	C.gtk_file_filter_add_pixbuf_formats((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) Filter(filter_info *C.GtkFileFilterInfo) (_return_ C.gboolean) {
	_return_ = C._gtk_file_filter_filter((*C.GtkFileFilter)(_self_), filter_info)
	return
}

func (_self_ *FileFilter) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_file_filter_get_name((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) GetNeeded() (_return_ C.GtkFileFilterFlags) {
	_return_ = C.gtk_file_filter_get_needed((*C.GtkFileFilter)(_self_))
	return
}

func (_self_ *FileFilter) SetName(name *C.gchar) () {
	C._gtk_file_filter_set_name((*C.GtkFileFilter)(_self_), name)
	return
}

func FixedNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_fixed_new()
	return
}

func (_self_ *Fixed) Move(widget *C.GtkWidget, x C.gint, y C.gint) () {
	C.gtk_fixed_move((*C.GtkFixed)(_self_), widget, x, y)
	return
}

func (_self_ *Fixed) Put(widget *C.GtkWidget, x C.gint, y C.gint) () {
	C.gtk_fixed_put((*C.GtkFixed)(_self_), widget, x, y)
	return
}

func FontButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_font_button_new()
	return
}

func FontButtonNewWithFont(fontname *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_font_button_new_with_font(fontname)
	return
}

func (_self_ *FontButton) GetFontName() (_return_ *C.gchar) {
	_return_ = C._gtk_font_button_get_font_name((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) GetShowSize() (_return_ C.gboolean) {
	_return_ = C.gtk_font_button_get_show_size((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) GetShowStyle() (_return_ C.gboolean) {
	_return_ = C.gtk_font_button_get_show_style((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_font_button_get_title((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) GetUseFont() (_return_ C.gboolean) {
	_return_ = C.gtk_font_button_get_use_font((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) GetUseSize() (_return_ C.gboolean) {
	_return_ = C.gtk_font_button_get_use_size((*C.GtkFontButton)(_self_))
	return
}

func (_self_ *FontButton) SetFontName(fontname *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_font_button_set_font_name((*C.GtkFontButton)(_self_), fontname)
	return
}

func (_self_ *FontButton) SetShowSize(show_size C.gboolean) () {
	C.gtk_font_button_set_show_size((*C.GtkFontButton)(_self_), show_size)
	return
}

func (_self_ *FontButton) SetShowStyle(show_style C.gboolean) () {
	C.gtk_font_button_set_show_style((*C.GtkFontButton)(_self_), show_style)
	return
}

func (_self_ *FontButton) SetTitle(title *C.gchar) () {
	C._gtk_font_button_set_title((*C.GtkFontButton)(_self_), title)
	return
}

func (_self_ *FontButton) SetUseFont(use_font C.gboolean) () {
	C.gtk_font_button_set_use_font((*C.GtkFontButton)(_self_), use_font)
	return
}

func (_self_ *FontButton) SetUseSize(use_size C.gboolean) () {
	C.gtk_font_button_set_use_size((*C.GtkFontButton)(_self_), use_size)
	return
}

func FontChooserDialogNew(title *C.gchar, parent *C.GtkWindow) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_font_chooser_dialog_new(title, parent)
	return
}

func FontChooserWidgetNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_font_chooser_widget_new()
	return
}

func FrameNew(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_frame_new(label)
	return
}

func (_self_ *Frame) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_frame_get_label((*C.GtkFrame)(_self_))
	return
}

func (_self_ *Frame) GetLabelAlign() (xalign *C.gfloat, yalign *C.gfloat) {
	C.gtk_frame_get_label_align((*C.GtkFrame)(_self_), xalign, yalign)
	return
}

func (_self_ *Frame) GetLabelWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_frame_get_label_widget((*C.GtkFrame)(_self_))
	return
}

func (_self_ *Frame) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_frame_get_shadow_type((*C.GtkFrame)(_self_))
	return
}

func (_self_ *Frame) SetLabel(label *C.gchar) () {
	C._gtk_frame_set_label((*C.GtkFrame)(_self_), label)
	return
}

func (_self_ *Frame) SetLabelAlign(xalign C.gfloat, yalign C.gfloat) () {
	C.gtk_frame_set_label_align((*C.GtkFrame)(_self_), xalign, yalign)
	return
}

func (_self_ *Frame) SetLabelWidget(label_widget *C.GtkWidget) () {
	C.gtk_frame_set_label_widget((*C.GtkFrame)(_self_), label_widget)
	return
}

func (_self_ *Frame) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_frame_set_shadow_type((*C.GtkFrame)(_self_), type_)
	return
}

func GradientNewLinear(x0 C.gdouble, y0 C.gdouble, x1 C.gdouble, y1 C.gdouble) (_return_ *C.GtkGradient) {
	_return_ = C.gtk_gradient_new_linear(x0, y0, x1, y1)
	return
}

func GradientNewRadial(x0 C.gdouble, y0 C.gdouble, radius0 C.gdouble, x1 C.gdouble, y1 C.gdouble, radius1 C.gdouble) (_return_ *C.GtkGradient) {
	_return_ = C.gtk_gradient_new_radial(x0, y0, radius0, x1, y1, radius1)
	return
}

func (_self_ *Gradient) AddColorStop(offset C.gdouble, color *C.GtkSymbolicColor) () {
	C.gtk_gradient_add_color_stop((*C.GtkGradient)(_self_), offset, color)
	return
}

func (_self_ *Gradient) Ref() (_return_ *C.GtkGradient) {
	_return_ = C.gtk_gradient_ref((*C.GtkGradient)(_self_))
	return
}

func (_self_ *Gradient) Resolve(props *C.GtkStyleProperties) (_return_ C.gboolean, resolved_gradient unsafe.Pointer) {
	_return_ = C._gtk_gradient_resolve((*C.GtkGradient)(_self_), props, resolved_gradient)
	return
}

func (_self_ *Gradient) ResolveForContext(context *C.GtkStyleContext) (_return_ *C.cairo_pattern_t) {
	_return_ = C.gtk_gradient_resolve_for_context((*C.GtkGradient)(_self_), context)
	return
}

func (_self_ *Gradient) ToString() (_return_ *C.char) {
	_return_ = C.gtk_gradient_to_string((*C.GtkGradient)(_self_))
	return
}

func (_self_ *Gradient) Unref() () {
	C.gtk_gradient_unref((*C.GtkGradient)(_self_))
	return
}

func GridNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_grid_new()
	return
}

func (_self_ *Grid) Attach(child *C.GtkWidget, left C.gint, top C.gint, width C.gint, height C.gint) () {
	C.gtk_grid_attach((*C.GtkGrid)(_self_), child, left, top, width, height)
	return
}

func (_self_ *Grid) AttachNextTo(child *C.GtkWidget, sibling *C.GtkWidget, side C.GtkPositionType, width C.gint, height C.gint) () {
	C.gtk_grid_attach_next_to((*C.GtkGrid)(_self_), child, sibling, side, width, height)
	return
}

func (_self_ *Grid) GetChildAt(left C.gint, top C.gint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_grid_get_child_at((*C.GtkGrid)(_self_), left, top)
	return
}

func (_self_ *Grid) GetColumnHomogeneous() (_return_ C.gboolean) {
	_return_ = C.gtk_grid_get_column_homogeneous((*C.GtkGrid)(_self_))
	return
}

func (_self_ *Grid) GetColumnSpacing() (_return_ C.guint) {
	_return_ = C.gtk_grid_get_column_spacing((*C.GtkGrid)(_self_))
	return
}

func (_self_ *Grid) GetRowHomogeneous() (_return_ C.gboolean) {
	_return_ = C.gtk_grid_get_row_homogeneous((*C.GtkGrid)(_self_))
	return
}

func (_self_ *Grid) GetRowSpacing() (_return_ C.guint) {
	_return_ = C.gtk_grid_get_row_spacing((*C.GtkGrid)(_self_))
	return
}

func (_self_ *Grid) InsertColumn(position C.gint) () {
	C.gtk_grid_insert_column((*C.GtkGrid)(_self_), position)
	return
}

func (_self_ *Grid) InsertNextTo(sibling *C.GtkWidget, side C.GtkPositionType) () {
	C.gtk_grid_insert_next_to((*C.GtkGrid)(_self_), sibling, side)
	return
}

func (_self_ *Grid) InsertRow(position C.gint) () {
	C.gtk_grid_insert_row((*C.GtkGrid)(_self_), position)
	return
}

func (_self_ *Grid) SetColumnHomogeneous(homogeneous C.gboolean) () {
	C.gtk_grid_set_column_homogeneous((*C.GtkGrid)(_self_), homogeneous)
	return
}

func (_self_ *Grid) SetColumnSpacing(spacing C.guint) () {
	C.gtk_grid_set_column_spacing((*C.GtkGrid)(_self_), spacing)
	return
}

func (_self_ *Grid) SetRowHomogeneous(homogeneous C.gboolean) () {
	C.gtk_grid_set_row_homogeneous((*C.GtkGrid)(_self_), homogeneous)
	return
}

func (_self_ *Grid) SetRowSpacing(spacing C.guint) () {
	C.gtk_grid_set_row_spacing((*C.GtkGrid)(_self_), spacing)
	return
}

func HSVToRgb(h C.gdouble, s C.gdouble, v C.gdouble) (r *C.gdouble, g *C.gdouble, b *C.gdouble) {
	C.gtk_hsv_to_rgb(h, s, v, r, g, b)
	return
}

func (_self_ *IMContext) DeleteSurrounding(offset C.gint, n_chars C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_im_context_delete_surrounding((*C.GtkIMContext)(_self_), offset, n_chars)
	return
}

func (_self_ *IMContext) FilterKeypress(event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_im_context_filter_keypress((*C.GtkIMContext)(_self_), event)
	return
}

func (_self_ *IMContext) FocusIn() () {
	C.gtk_im_context_focus_in((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) FocusOut() () {
	C.gtk_im_context_focus_out((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) GetPreeditString() (str unsafe.Pointer, attrs unsafe.Pointer, cursor_pos *C.gint) {
	C._gtk_im_context_get_preedit_string((*C.GtkIMContext)(_self_), str, attrs, cursor_pos)
	return
}

func (_self_ *IMContext) GetSurrounding() (_return_ C.gboolean, text unsafe.Pointer, cursor_index *C.gint) {
	_return_ = C._gtk_im_context_get_surrounding((*C.GtkIMContext)(_self_), text, cursor_index)
	return
}

func (_self_ *IMContext) Reset() () {
	C.gtk_im_context_reset((*C.GtkIMContext)(_self_))
	return
}

func (_self_ *IMContext) SetClientWindow(window *C.GdkWindow) () {
	C.gtk_im_context_set_client_window((*C.GtkIMContext)(_self_), window)
	return
}

func (_self_ *IMContext) SetCursorLocation(area *C.GdkRectangle) () {
	C._gtk_im_context_set_cursor_location((*C.GtkIMContext)(_self_), area)
	return
}

func (_self_ *IMContext) SetSurrounding(text *C.gchar, len_ C.gint, cursor_index C.gint) () {
	C._gtk_im_context_set_surrounding((*C.GtkIMContext)(_self_), text, len_, cursor_index)
	return
}

func (_self_ *IMContext) SetUsePreedit(use_preedit C.gboolean) () {
	C.gtk_im_context_set_use_preedit((*C.GtkIMContext)(_self_), use_preedit)
	return
}

func IMContextSimpleNew() (_return_ *C.GtkIMContext) {
	_return_ = C.gtk_im_context_simple_new()
	return
}

func (_self_ *IMContextSimple) AddTable(data *C.guint16, max_seq_len C.gint, n_seqs C.gint) () {
	C.gtk_im_context_simple_add_table((*C.GtkIMContextSimple)(_self_), data, max_seq_len, n_seqs)
	return
}

func IMMulticontextNew() (_return_ *C.GtkIMContext) {
	_return_ = C.gtk_im_multicontext_new()
	return
}

func (_self_ *IMMulticontext) AppendMenuitems(menushell *C.GtkMenuShell) () {
	C.gtk_im_multicontext_append_menuitems((*C.GtkIMMulticontext)(_self_), menushell)
	return
}

func (_self_ *IMMulticontext) GetContextId() (_return_ *C.char) {
	_return_ = C._gtk_im_multicontext_get_context_id((*C.GtkIMMulticontext)(_self_))
	return
}

func (_self_ *IMMulticontext) SetContextId(context_id *C.char) () {
	C._gtk_im_multicontext_set_context_id((*C.GtkIMMulticontext)(_self_), context_id)
	return
}

func IconFactoryNew() (_return_ *C.GtkIconFactory) {
	_return_ = C.gtk_icon_factory_new()
	return
}

func IconFactoryLookupDefault(stock_id *C.gchar) (_return_ *C.GtkIconSet) {
	_return_ = C._gtk_icon_factory_lookup_default(stock_id)
	return
}

func (_self_ *IconFactory) Add(stock_id *C.gchar, icon_set *C.GtkIconSet) () {
	C._gtk_icon_factory_add((*C.GtkIconFactory)(_self_), stock_id, icon_set)
	return
}

func (_self_ *IconFactory) AddDefault() () {
	C.gtk_icon_factory_add_default((*C.GtkIconFactory)(_self_))
	return
}

func (_self_ *IconFactory) Lookup(stock_id *C.gchar) (_return_ *C.GtkIconSet) {
	_return_ = C._gtk_icon_factory_lookup((*C.GtkIconFactory)(_self_), stock_id)
	return
}

func (_self_ *IconFactory) RemoveDefault() () {
	C.gtk_icon_factory_remove_default((*C.GtkIconFactory)(_self_))
	return
}

func IconInfoNewForPixbuf(icon_theme *C.GtkIconTheme, pixbuf *C.GdkPixbuf) (_return_ *C.GtkIconInfo) {
	_return_ = C.gtk_icon_info_new_for_pixbuf(icon_theme, pixbuf)
	return
}

func (_self_ *IconInfo) Copy() (_return_ *C.GtkIconInfo) {
	_return_ = C.gtk_icon_info_copy((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) Free() () {
	C.gtk_icon_info_free((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetAttachPoints() (_return_ C.gboolean, points unsafe.Pointer, n_points *C.gint) {
	_return_ = C._gtk_icon_info_get_attach_points((*C.GtkIconInfo)(_self_), points, n_points)
	return
}

func (_self_ *IconInfo) GetBaseSize() (_return_ C.gint) {
	_return_ = C.gtk_icon_info_get_base_size((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetBuiltinPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_icon_info_get_builtin_pixbuf((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetDisplayName() (_return_ *C.gchar) {
	_return_ = C._gtk_icon_info_get_display_name((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) GetEmbeddedRect() (_return_ C.gboolean, rectangle *C.GdkRectangle) {
	_return_ = C.gtk_icon_info_get_embedded_rect((*C.GtkIconInfo)(_self_), rectangle)
	return
}

func (_self_ *IconInfo) GetFilename() (_return_ *C.gchar) {
	_return_ = C._gtk_icon_info_get_filename((*C.GtkIconInfo)(_self_))
	return
}

func (_self_ *IconInfo) LoadIcon() (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_icon((*C.GtkIconInfo)(_self_), _error_)
	return
}

func (_self_ *IconInfo) LoadSymbolic(fg *C.GdkRGBA, success_color *C.GdkRGBA, warning_color *C.GdkRGBA, error_color *C.GdkRGBA) (_return_ *C.GdkPixbuf, was_symbolic *C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_symbolic((*C.GtkIconInfo)(_self_), fg, success_color, warning_color, error_color, was_symbolic, _error_)
	return
}

func (_self_ *IconInfo) LoadSymbolicForContext(context *C.GtkStyleContext) (_return_ *C.GdkPixbuf, was_symbolic *C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_info_load_symbolic_for_context((*C.GtkIconInfo)(_self_), context, was_symbolic, _error_)
	return
}

func (_self_ *IconInfo) SetRawCoordinates(raw_coordinates C.gboolean) () {
	C.gtk_icon_info_set_raw_coordinates((*C.GtkIconInfo)(_self_), raw_coordinates)
	return
}

func IconSetNew() (_return_ *C.GtkIconSet) {
	_return_ = C.gtk_icon_set_new()
	return
}

func IconSetNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *C.GtkIconSet) {
	_return_ = C.gtk_icon_set_new_from_pixbuf(pixbuf)
	return
}

func (_self_ *IconSet) AddSource(source *C.GtkIconSource) () {
	C._gtk_icon_set_add_source((*C.GtkIconSet)(_self_), source)
	return
}

func (_self_ *IconSet) Copy() (_return_ *C.GtkIconSet) {
	_return_ = C.gtk_icon_set_copy((*C.GtkIconSet)(_self_))
	return
}

func (_self_ *IconSet) GetSizes() (sizes unsafe.Pointer, n_sizes *C.gint) {
	C._gtk_icon_set_get_sizes((*C.GtkIconSet)(_self_), sizes, n_sizes)
	return
}

func (_self_ *IconSet) Ref() (_return_ *C.GtkIconSet) {
	_return_ = C.gtk_icon_set_ref((*C.GtkIconSet)(_self_))
	return
}

func (_self_ *IconSet) RenderIconPixbuf(context *C.GtkStyleContext, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_icon_set_render_icon_pixbuf((*C.GtkIconSet)(_self_), context, size)
	return
}

func (_self_ *IconSet) Unref() () {
	C.gtk_icon_set_unref((*C.GtkIconSet)(_self_))
	return
}

func IconSourceNew() (_return_ *C.GtkIconSource) {
	_return_ = C.gtk_icon_source_new()
	return
}

func (_self_ *IconSource) Copy() (_return_ *C.GtkIconSource) {
	_return_ = C._gtk_icon_source_copy((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) Free() () {
	C.gtk_icon_source_free((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C._gtk_icon_source_get_direction((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetDirectionWildcarded() (_return_ C.gboolean) {
	_return_ = C._gtk_icon_source_get_direction_wildcarded((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetFilename() (_return_ *C.gchar) {
	_return_ = C._gtk_icon_source_get_filename((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_icon_source_get_icon_name((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_icon_source_get_pixbuf((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSize() (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_source_get_size((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetSizeWildcarded() (_return_ C.gboolean) {
	_return_ = C._gtk_icon_source_get_size_wildcarded((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetState() (_return_ C.GtkStateType) {
	_return_ = C._gtk_icon_source_get_state((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) GetStateWildcarded() (_return_ C.gboolean) {
	_return_ = C._gtk_icon_source_get_state_wildcarded((*C.GtkIconSource)(_self_))
	return
}

func (_self_ *IconSource) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_icon_source_set_direction((*C.GtkIconSource)(_self_), direction)
	return
}

func (_self_ *IconSource) SetDirectionWildcarded(setting C.gboolean) () {
	C.gtk_icon_source_set_direction_wildcarded((*C.GtkIconSource)(_self_), setting)
	return
}

func (_self_ *IconSource) SetFilename(filename *C.gchar) () {
	C._gtk_icon_source_set_filename((*C.GtkIconSource)(_self_), filename)
	return
}

func (_self_ *IconSource) SetIconName(icon_name *C.gchar) () {
	C._gtk_icon_source_set_icon_name((*C.GtkIconSource)(_self_), icon_name)
	return
}

func (_self_ *IconSource) SetPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_icon_source_set_pixbuf((*C.GtkIconSource)(_self_), pixbuf)
	return
}

func (_self_ *IconSource) SetSize(size C.GtkIconSize) () {
	C.gtk_icon_source_set_size((*C.GtkIconSource)(_self_), size)
	return
}

func (_self_ *IconSource) SetSizeWildcarded(setting C.gboolean) () {
	C.gtk_icon_source_set_size_wildcarded((*C.GtkIconSource)(_self_), setting)
	return
}

func (_self_ *IconSource) SetState(state C.GtkStateType) () {
	C.gtk_icon_source_set_state((*C.GtkIconSource)(_self_), state)
	return
}

func (_self_ *IconSource) SetStateWildcarded(setting C.gboolean) () {
	C.gtk_icon_source_set_state_wildcarded((*C.GtkIconSource)(_self_), setting)
	return
}

func IconThemeNew() (_return_ *C.GtkIconTheme) {
	_return_ = C.gtk_icon_theme_new()
	return
}

func IconThemeAddBuiltinIcon(icon_name *C.gchar, size C.gint, pixbuf *C.GdkPixbuf) () {
	C._gtk_icon_theme_add_builtin_icon(icon_name, size, pixbuf)
	return
}

func IconThemeGetDefault() (_return_ *C.GtkIconTheme) {
	_return_ = C.gtk_icon_theme_get_default()
	return
}

func IconThemeGetForScreen(screen *C.GdkScreen) (_return_ *C.GtkIconTheme) {
	_return_ = C.gtk_icon_theme_get_for_screen(screen)
	return
}

func (_self_ *IconTheme) AppendSearchPath(path *C.gchar) () {
	C._gtk_icon_theme_append_search_path((*C.GtkIconTheme)(_self_), path)
	return
}

func (_self_ *IconTheme) ChooseIcon(icon_names unsafe.Pointer, size C.gint, flags C.GtkIconLookupFlags) (_return_ *C.GtkIconInfo) {
	_return_ = C._gtk_icon_theme_choose_icon((*C.GtkIconTheme)(_self_), icon_names, size, flags)
	return
}

func (_self_ *IconTheme) GetExampleIconName() (_return_ *C.char) {
	_return_ = C.gtk_icon_theme_get_example_icon_name((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) GetIconSizes(icon_name *C.gchar) (_return_ *C.gint) {
	_return_ = C._gtk_icon_theme_get_icon_sizes((*C.GtkIconTheme)(_self_), icon_name)
	return
}

func (_self_ *IconTheme) GetSearchPath() (path unsafe.Pointer, n_elements *C.gint) {
	C._gtk_icon_theme_get_search_path((*C.GtkIconTheme)(_self_), path, n_elements)
	return
}

func (_self_ *IconTheme) HasIcon(icon_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_icon_theme_has_icon((*C.GtkIconTheme)(_self_), icon_name)
	return
}

func (_self_ *IconTheme) ListContexts() (_return_ *C.GList) {
	_return_ = C.gtk_icon_theme_list_contexts((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) ListIcons(context *C.gchar) (_return_ *C.GList) {
	_return_ = C._gtk_icon_theme_list_icons((*C.GtkIconTheme)(_self_), context)
	return
}

func (_self_ *IconTheme) LoadIcon(icon_name *C.gchar, size C.gint, flags C.GtkIconLookupFlags) (_return_ *C.GdkPixbuf, _error_ unsafe.Pointer) {
	_return_ = C._gtk_icon_theme_load_icon((*C.GtkIconTheme)(_self_), icon_name, size, flags, _error_)
	return
}

func (_self_ *IconTheme) LookupByGicon(icon *C.GIcon, size C.gint, flags C.GtkIconLookupFlags) (_return_ *C.GtkIconInfo) {
	_return_ = C.gtk_icon_theme_lookup_by_gicon((*C.GtkIconTheme)(_self_), icon, size, flags)
	return
}

func (_self_ *IconTheme) LookupIcon(icon_name *C.gchar, size C.gint, flags C.GtkIconLookupFlags) (_return_ *C.GtkIconInfo) {
	_return_ = C._gtk_icon_theme_lookup_icon((*C.GtkIconTheme)(_self_), icon_name, size, flags)
	return
}

func (_self_ *IconTheme) PrependSearchPath(path *C.gchar) () {
	C._gtk_icon_theme_prepend_search_path((*C.GtkIconTheme)(_self_), path)
	return
}

func (_self_ *IconTheme) RescanIfNeeded() (_return_ C.gboolean) {
	_return_ = C.gtk_icon_theme_rescan_if_needed((*C.GtkIconTheme)(_self_))
	return
}

func (_self_ *IconTheme) SetCustomTheme(theme_name *C.gchar) () {
	C._gtk_icon_theme_set_custom_theme((*C.GtkIconTheme)(_self_), theme_name)
	return
}

func (_self_ *IconTheme) SetScreen(screen *C.GdkScreen) () {
	C.gtk_icon_theme_set_screen((*C.GtkIconTheme)(_self_), screen)
	return
}

func (_self_ *IconTheme) SetSearchPath(path unsafe.Pointer, n_elements C.gint) () {
	C._gtk_icon_theme_set_search_path((*C.GtkIconTheme)(_self_), path, n_elements)
	return
}

func IconViewNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_icon_view_new()
	return
}

func IconViewNewWithArea(area *C.GtkCellArea) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_icon_view_new_with_area(area)
	return
}

func IconViewNewWithModel(model *C.GtkTreeModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_icon_view_new_with_model(model)
	return
}

func (_self_ *IconView) ConvertWidgetToBinWindowCoords(wx C.gint, wy C.gint) (bx *C.gint, by *C.gint) {
	C.gtk_icon_view_convert_widget_to_bin_window_coords((*C.GtkIconView)(_self_), wx, wy, bx, by)
	return
}

func (_self_ *IconView) CreateDragIcon(path *C.GtkTreePath) (_return_ *C.cairo_surface_t) {
	_return_ = C.gtk_icon_view_create_drag_icon((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) EnableModelDragDest(targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_icon_view_enable_model_drag_dest((*C.GtkIconView)(_self_), targets, n_targets, actions)
	return
}

func (_self_ *IconView) EnableModelDragSource(start_button_mask C.GdkModifierType, targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_icon_view_enable_model_drag_source((*C.GtkIconView)(_self_), start_button_mask, targets, n_targets, actions)
	return
}

func (_self_ *IconView) GetCellRect(path *C.GtkTreePath, cell *C.GtkCellRenderer) (_return_ C.gboolean, rect *C.GdkRectangle) {
	_return_ = C.gtk_icon_view_get_cell_rect((*C.GtkIconView)(_self_), path, cell, rect)
	return
}

func (_self_ *IconView) GetColumnSpacing() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_column_spacing((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetColumns() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_columns((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetCursor() (_return_ C.gboolean, path unsafe.Pointer, cell unsafe.Pointer) {
	_return_ = C._gtk_icon_view_get_cursor((*C.GtkIconView)(_self_), path, cell)
	return
}

func (_self_ *IconView) GetDestItemAtPos(drag_x C.gint, drag_y C.gint) (_return_ C.gboolean, path unsafe.Pointer, pos *C.GtkIconViewDropPosition) {
	_return_ = C._gtk_icon_view_get_dest_item_at_pos((*C.GtkIconView)(_self_), drag_x, drag_y, path, pos)
	return
}

func (_self_ *IconView) GetDragDestItem() (path unsafe.Pointer, pos *C.GtkIconViewDropPosition) {
	C._gtk_icon_view_get_drag_dest_item((*C.GtkIconView)(_self_), path, pos)
	return
}

func (_self_ *IconView) GetItemAtPos(x C.gint, y C.gint) (_return_ C.gboolean, path unsafe.Pointer, cell unsafe.Pointer) {
	_return_ = C._gtk_icon_view_get_item_at_pos((*C.GtkIconView)(_self_), x, y, path, cell)
	return
}

func (_self_ *IconView) GetItemColumn(path *C.GtkTreePath) (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_item_column((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) GetItemOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_icon_view_get_item_orientation((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetItemPadding() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_item_padding((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetItemRow(path *C.GtkTreePath) (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_item_row((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) GetItemWidth() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_item_width((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetMargin() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_margin((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetMarkupColumn() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_markup_column((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_icon_view_get_model((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetPathAtPos(x C.gint, y C.gint) (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_icon_view_get_path_at_pos((*C.GtkIconView)(_self_), x, y)
	return
}

func (_self_ *IconView) GetPixbufColumn() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_pixbuf_column((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetReorderable() (_return_ C.gboolean) {
	_return_ = C.gtk_icon_view_get_reorderable((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetRowSpacing() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_row_spacing((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSelectedItems() (_return_ *C.GList) {
	_return_ = C.gtk_icon_view_get_selected_items((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSelectionMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_icon_view_get_selection_mode((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetSpacing() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_spacing((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetTextColumn() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_text_column((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetTooltipColumn() (_return_ C.gint) {
	_return_ = C.gtk_icon_view_get_tooltip_column((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) GetVisibleRange() (_return_ C.gboolean, start_path unsafe.Pointer, end_path unsafe.Pointer) {
	_return_ = C._gtk_icon_view_get_visible_range((*C.GtkIconView)(_self_), start_path, end_path)
	return
}

func (_self_ *IconView) ItemActivated(path *C.GtkTreePath) () {
	C.gtk_icon_view_item_activated((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) PathIsSelected(path *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_icon_view_path_is_selected((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) ScrollToPath(path *C.GtkTreePath, use_align C.gboolean, row_align C.gfloat, col_align C.gfloat) () {
	C.gtk_icon_view_scroll_to_path((*C.GtkIconView)(_self_), path, use_align, row_align, col_align)
	return
}

func (_self_ *IconView) SelectAll() () {
	C.gtk_icon_view_select_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) SelectPath(path *C.GtkTreePath) () {
	C.gtk_icon_view_select_path((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) SelectedForeach(func_ C.GtkIconViewForeachFunc, data C.gpointer) () {
	C.gtk_icon_view_selected_foreach((*C.GtkIconView)(_self_), func_, data)
	return
}

func (_self_ *IconView) SetColumnSpacing(column_spacing C.gint) () {
	C.gtk_icon_view_set_column_spacing((*C.GtkIconView)(_self_), column_spacing)
	return
}

func (_self_ *IconView) SetColumns(columns C.gint) () {
	C.gtk_icon_view_set_columns((*C.GtkIconView)(_self_), columns)
	return
}

func (_self_ *IconView) SetCursor(path *C.GtkTreePath, cell *C.GtkCellRenderer, start_editing C.gboolean) () {
	C.gtk_icon_view_set_cursor((*C.GtkIconView)(_self_), path, cell, start_editing)
	return
}

func (_self_ *IconView) SetDragDestItem(path *C.GtkTreePath, pos C.GtkIconViewDropPosition) () {
	C.gtk_icon_view_set_drag_dest_item((*C.GtkIconView)(_self_), path, pos)
	return
}

func (_self_ *IconView) SetItemOrientation(orientation C.GtkOrientation) () {
	C.gtk_icon_view_set_item_orientation((*C.GtkIconView)(_self_), orientation)
	return
}

func (_self_ *IconView) SetItemPadding(item_padding C.gint) () {
	C.gtk_icon_view_set_item_padding((*C.GtkIconView)(_self_), item_padding)
	return
}

func (_self_ *IconView) SetItemWidth(item_width C.gint) () {
	C.gtk_icon_view_set_item_width((*C.GtkIconView)(_self_), item_width)
	return
}

func (_self_ *IconView) SetMargin(margin C.gint) () {
	C.gtk_icon_view_set_margin((*C.GtkIconView)(_self_), margin)
	return
}

func (_self_ *IconView) SetMarkupColumn(column C.gint) () {
	C.gtk_icon_view_set_markup_column((*C.GtkIconView)(_self_), column)
	return
}

func (_self_ *IconView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_icon_view_set_model((*C.GtkIconView)(_self_), model)
	return
}

func (_self_ *IconView) SetPixbufColumn(column C.gint) () {
	C.gtk_icon_view_set_pixbuf_column((*C.GtkIconView)(_self_), column)
	return
}

func (_self_ *IconView) SetReorderable(reorderable C.gboolean) () {
	C.gtk_icon_view_set_reorderable((*C.GtkIconView)(_self_), reorderable)
	return
}

func (_self_ *IconView) SetRowSpacing(row_spacing C.gint) () {
	C.gtk_icon_view_set_row_spacing((*C.GtkIconView)(_self_), row_spacing)
	return
}

func (_self_ *IconView) SetSelectionMode(mode C.GtkSelectionMode) () {
	C.gtk_icon_view_set_selection_mode((*C.GtkIconView)(_self_), mode)
	return
}

func (_self_ *IconView) SetSpacing(spacing C.gint) () {
	C.gtk_icon_view_set_spacing((*C.GtkIconView)(_self_), spacing)
	return
}

func (_self_ *IconView) SetTextColumn(column C.gint) () {
	C.gtk_icon_view_set_text_column((*C.GtkIconView)(_self_), column)
	return
}

func (_self_ *IconView) SetTooltipCell(tooltip *C.GtkTooltip, path *C.GtkTreePath, cell *C.GtkCellRenderer) () {
	C.gtk_icon_view_set_tooltip_cell((*C.GtkIconView)(_self_), tooltip, path, cell)
	return
}

func (_self_ *IconView) SetTooltipColumn(column C.gint) () {
	C.gtk_icon_view_set_tooltip_column((*C.GtkIconView)(_self_), column)
	return
}

func (_self_ *IconView) SetTooltipItem(tooltip *C.GtkTooltip, path *C.GtkTreePath) () {
	C.gtk_icon_view_set_tooltip_item((*C.GtkIconView)(_self_), tooltip, path)
	return
}

func (_self_ *IconView) UnselectAll() () {
	C.gtk_icon_view_unselect_all((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnselectPath(path *C.GtkTreePath) () {
	C.gtk_icon_view_unselect_path((*C.GtkIconView)(_self_), path)
	return
}

func (_self_ *IconView) UnsetModelDragDest() () {
	C.gtk_icon_view_unset_model_drag_dest((*C.GtkIconView)(_self_))
	return
}

func (_self_ *IconView) UnsetModelDragSource() () {
	C.gtk_icon_view_unset_model_drag_source((*C.GtkIconView)(_self_))
	return
}

func ImageNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_new()
	return
}

func ImageNewFromAnimation(animation *C.GdkPixbufAnimation) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_new_from_animation(animation)
	return
}

func ImageNewFromFile(filename *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_new_from_file(filename)
	return
}

func ImageNewFromGicon(icon *C.GIcon, size C.GtkIconSize) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_new_from_gicon(icon, size)
	return
}

func ImageNewFromIconName(icon_name *C.gchar, size C.GtkIconSize) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_new_from_icon_name(icon_name, size)
	return
}

func ImageNewFromIconSet(icon_set *C.GtkIconSet, size C.GtkIconSize) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_new_from_icon_set(icon_set, size)
	return
}

func ImageNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_new_from_pixbuf(pixbuf)
	return
}

func ImageNewFromResource(resource_path *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_new_from_resource(resource_path)
	return
}

func ImageNewFromStock(stock_id *C.gchar, size C.GtkIconSize) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_new_from_stock(stock_id, size)
	return
}

func (_self_ *Image) Clear() () {
	C.gtk_image_clear((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetAnimation() (_return_ *C.GdkPixbufAnimation) {
	_return_ = C.gtk_image_get_animation((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetGicon() (gicon unsafe.Pointer, size *C.GtkIconSize) {
	C._gtk_image_get_gicon((*C.GtkImage)(_self_), gicon, size)
	return
}

func (_self_ *Image) GetIconName() (icon_name unsafe.Pointer, size *C.GtkIconSize) {
	C._gtk_image_get_icon_name((*C.GtkImage)(_self_), icon_name, size)
	return
}

func (_self_ *Image) GetIconSet() (icon_set unsafe.Pointer, size *C.GtkIconSize) {
	C._gtk_image_get_icon_set((*C.GtkImage)(_self_), icon_set, size)
	return
}

func (_self_ *Image) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_image_get_pixbuf((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetPixelSize() (_return_ C.gint) {
	_return_ = C.gtk_image_get_pixel_size((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) GetStock() (stock_id unsafe.Pointer, size *C.GtkIconSize) {
	C._gtk_image_get_stock((*C.GtkImage)(_self_), stock_id, size)
	return
}

func (_self_ *Image) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_image_get_storage_type((*C.GtkImage)(_self_))
	return
}

func (_self_ *Image) SetFromAnimation(animation *C.GdkPixbufAnimation) () {
	C.gtk_image_set_from_animation((*C.GtkImage)(_self_), animation)
	return
}

func (_self_ *Image) SetFromFile(filename *C.gchar) () {
	C._gtk_image_set_from_file((*C.GtkImage)(_self_), filename)
	return
}

func (_self_ *Image) SetFromGicon(icon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_image_set_from_gicon((*C.GtkImage)(_self_), icon, size)
	return
}

func (_self_ *Image) SetFromIconName(icon_name *C.gchar, size C.GtkIconSize) () {
	C._gtk_image_set_from_icon_name((*C.GtkImage)(_self_), icon_name, size)
	return
}

func (_self_ *Image) SetFromIconSet(icon_set *C.GtkIconSet, size C.GtkIconSize) () {
	C.gtk_image_set_from_icon_set((*C.GtkImage)(_self_), icon_set, size)
	return
}

func (_self_ *Image) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_image_set_from_pixbuf((*C.GtkImage)(_self_), pixbuf)
	return
}

func (_self_ *Image) SetFromResource(resource_path *C.gchar) () {
	C._gtk_image_set_from_resource((*C.GtkImage)(_self_), resource_path)
	return
}

func (_self_ *Image) SetFromStock(stock_id *C.gchar, size C.GtkIconSize) () {
	C._gtk_image_set_from_stock((*C.GtkImage)(_self_), stock_id, size)
	return
}

func (_self_ *Image) SetPixelSize(pixel_size C.gint) () {
	C.gtk_image_set_pixel_size((*C.GtkImage)(_self_), pixel_size)
	return
}

func ImageMenuItemNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_menu_item_new()
	return
}

func ImageMenuItemNewFromStock(stock_id *C.gchar, accel_group *C.GtkAccelGroup) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_menu_item_new_from_stock(stock_id, accel_group)
	return
}

func ImageMenuItemNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_menu_item_new_with_label(label)
	return
}

func ImageMenuItemNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_image_menu_item_new_with_mnemonic(label)
	return
}

func (_self_ *ImageMenuItem) GetAlwaysShowImage() (_return_ C.gboolean) {
	_return_ = C.gtk_image_menu_item_get_always_show_image((*C.GtkImageMenuItem)(_self_))
	return
}

func (_self_ *ImageMenuItem) GetImage() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_image_menu_item_get_image((*C.GtkImageMenuItem)(_self_))
	return
}

func (_self_ *ImageMenuItem) GetUseStock() (_return_ C.gboolean) {
	_return_ = C.gtk_image_menu_item_get_use_stock((*C.GtkImageMenuItem)(_self_))
	return
}

func (_self_ *ImageMenuItem) SetAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_image_menu_item_set_accel_group((*C.GtkImageMenuItem)(_self_), accel_group)
	return
}

func (_self_ *ImageMenuItem) SetAlwaysShowImage(always_show C.gboolean) () {
	C.gtk_image_menu_item_set_always_show_image((*C.GtkImageMenuItem)(_self_), always_show)
	return
}

func (_self_ *ImageMenuItem) SetImage(image *C.GtkWidget) () {
	C.gtk_image_menu_item_set_image((*C.GtkImageMenuItem)(_self_), image)
	return
}

func (_self_ *ImageMenuItem) SetUseStock(use_stock C.gboolean) () {
	C.gtk_image_menu_item_set_use_stock((*C.GtkImageMenuItem)(_self_), use_stock)
	return
}

func InfoBarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_info_bar_new()
	return
}

func (_self_ *InfoBar) AddActionWidget(child *C.GtkWidget, response_id C.gint) () {
	C.gtk_info_bar_add_action_widget((*C.GtkInfoBar)(_self_), child, response_id)
	return
}

func (_self_ *InfoBar) AddButton(button_text *C.gchar, response_id C.gint) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_info_bar_add_button((*C.GtkInfoBar)(_self_), button_text, response_id)
	return
}

func (_self_ *InfoBar) GetActionArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_info_bar_get_action_area((*C.GtkInfoBar)(_self_))
	return
}

func (_self_ *InfoBar) GetContentArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_info_bar_get_content_area((*C.GtkInfoBar)(_self_))
	return
}

func (_self_ *InfoBar) GetMessageType() (_return_ C.GtkMessageType) {
	_return_ = C.gtk_info_bar_get_message_type((*C.GtkInfoBar)(_self_))
	return
}

func (_self_ *InfoBar) Response(response_id C.gint) () {
	C.gtk_info_bar_response((*C.GtkInfoBar)(_self_), response_id)
	return
}

func (_self_ *InfoBar) SetDefaultResponse(response_id C.gint) () {
	C.gtk_info_bar_set_default_response((*C.GtkInfoBar)(_self_), response_id)
	return
}

func (_self_ *InfoBar) SetMessageType(message_type C.GtkMessageType) () {
	C.gtk_info_bar_set_message_type((*C.GtkInfoBar)(_self_), message_type)
	return
}

func (_self_ *InfoBar) SetResponseSensitive(response_id C.gint, setting C.gboolean) () {
	C.gtk_info_bar_set_response_sensitive((*C.GtkInfoBar)(_self_), response_id, setting)
	return
}

func InvisibleNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_invisible_new()
	return
}

func InvisibleNewForScreen(screen *C.GdkScreen) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_invisible_new_for_screen(screen)
	return
}

func (_self_ *Invisible) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_invisible_get_screen((*C.GtkInvisible)(_self_))
	return
}

func (_self_ *Invisible) SetScreen(screen *C.GdkScreen) () {
	C.gtk_invisible_set_screen((*C.GtkInvisible)(_self_), screen)
	return
}

func LabelNew(str *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_label_new(str)
	return
}

func LabelNewWithMnemonic(str *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_label_new_with_mnemonic(str)
	return
}

func (_self_ *Label) GetAngle() (_return_ C.gdouble) {
	_return_ = C.gtk_label_get_angle((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.gtk_label_get_attributes((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetCurrentUri() (_return_ *C.gchar) {
	_return_ = C._gtk_label_get_current_uri((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_label_get_ellipsize((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetJustify() (_return_ C.GtkJustification) {
	_return_ = C.gtk_label_get_justify((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_label_get_label((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_label_get_layout((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLayoutOffsets() (x *C.gint, y *C.gint) {
	C.gtk_label_get_layout_offsets((*C.GtkLabel)(_self_), x, y)
	return
}

func (_self_ *Label) GetLineWrap() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_line_wrap((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetLineWrapMode() (_return_ C.PangoWrapMode) {
	_return_ = C.gtk_label_get_line_wrap_mode((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetMaxWidthChars() (_return_ C.gint) {
	_return_ = C.gtk_label_get_max_width_chars((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetMnemonicKeyval() (_return_ C.guint) {
	_return_ = C.gtk_label_get_mnemonic_keyval((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetMnemonicWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_label_get_mnemonic_widget((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetSelectable() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_selectable((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetSelectionBounds() (_return_ C.gboolean, start *C.gint, end *C.gint) {
	_return_ = C.gtk_label_get_selection_bounds((*C.GtkLabel)(_self_), start, end)
	return
}

func (_self_ *Label) GetSingleLineMode() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_single_line_mode((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetText() (_return_ *C.gchar) {
	_return_ = C._gtk_label_get_text((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetTrackVisitedLinks() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_track_visited_links((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetUseMarkup() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_use_markup((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetUseUnderline() (_return_ C.gboolean) {
	_return_ = C.gtk_label_get_use_underline((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) GetWidthChars() (_return_ C.gint) {
	_return_ = C.gtk_label_get_width_chars((*C.GtkLabel)(_self_))
	return
}

func (_self_ *Label) SelectRegion(start_offset C.gint, end_offset C.gint) () {
	C.gtk_label_select_region((*C.GtkLabel)(_self_), start_offset, end_offset)
	return
}

func (_self_ *Label) SetAngle(angle C.gdouble) () {
	C.gtk_label_set_angle((*C.GtkLabel)(_self_), angle)
	return
}

func (_self_ *Label) SetAttributes(attrs *C.PangoAttrList) () {
	C.gtk_label_set_attributes((*C.GtkLabel)(_self_), attrs)
	return
}

func (_self_ *Label) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_label_set_ellipsize((*C.GtkLabel)(_self_), mode)
	return
}

func (_self_ *Label) SetJustify(jtype C.GtkJustification) () {
	C.gtk_label_set_justify((*C.GtkLabel)(_self_), jtype)
	return
}

func (_self_ *Label) SetLabel(str *C.gchar) () {
	C._gtk_label_set_label((*C.GtkLabel)(_self_), str)
	return
}

func (_self_ *Label) SetLineWrap(wrap C.gboolean) () {
	C.gtk_label_set_line_wrap((*C.GtkLabel)(_self_), wrap)
	return
}

func (_self_ *Label) SetLineWrapMode(wrap_mode C.PangoWrapMode) () {
	C.gtk_label_set_line_wrap_mode((*C.GtkLabel)(_self_), wrap_mode)
	return
}

func (_self_ *Label) SetMarkup(str *C.gchar) () {
	C._gtk_label_set_markup((*C.GtkLabel)(_self_), str)
	return
}

func (_self_ *Label) SetMarkupWithMnemonic(str *C.gchar) () {
	C._gtk_label_set_markup_with_mnemonic((*C.GtkLabel)(_self_), str)
	return
}

func (_self_ *Label) SetMaxWidthChars(n_chars C.gint) () {
	C.gtk_label_set_max_width_chars((*C.GtkLabel)(_self_), n_chars)
	return
}

func (_self_ *Label) SetMnemonicWidget(widget *C.GtkWidget) () {
	C.gtk_label_set_mnemonic_widget((*C.GtkLabel)(_self_), widget)
	return
}

func (_self_ *Label) SetPattern(pattern *C.gchar) () {
	C._gtk_label_set_pattern((*C.GtkLabel)(_self_), pattern)
	return
}

func (_self_ *Label) SetSelectable(setting C.gboolean) () {
	C.gtk_label_set_selectable((*C.GtkLabel)(_self_), setting)
	return
}

func (_self_ *Label) SetSingleLineMode(single_line_mode C.gboolean) () {
	C.gtk_label_set_single_line_mode((*C.GtkLabel)(_self_), single_line_mode)
	return
}

func (_self_ *Label) SetText(str *C.gchar) () {
	C._gtk_label_set_text((*C.GtkLabel)(_self_), str)
	return
}

func (_self_ *Label) SetTextWithMnemonic(str *C.gchar) () {
	C._gtk_label_set_text_with_mnemonic((*C.GtkLabel)(_self_), str)
	return
}

func (_self_ *Label) SetTrackVisitedLinks(track_links C.gboolean) () {
	C.gtk_label_set_track_visited_links((*C.GtkLabel)(_self_), track_links)
	return
}

func (_self_ *Label) SetUseMarkup(setting C.gboolean) () {
	C.gtk_label_set_use_markup((*C.GtkLabel)(_self_), setting)
	return
}

func (_self_ *Label) SetUseUnderline(setting C.gboolean) () {
	C.gtk_label_set_use_underline((*C.GtkLabel)(_self_), setting)
	return
}

func (_self_ *Label) SetWidthChars(n_chars C.gint) () {
	C.gtk_label_set_width_chars((*C.GtkLabel)(_self_), n_chars)
	return
}

func LayoutNew(hadjustment *C.GtkAdjustment, vadjustment *C.GtkAdjustment) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_layout_new(hadjustment, vadjustment)
	return
}

func (_self_ *Layout) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_layout_get_bin_window((*C.GtkLayout)(_self_))
	return
}

func (_self_ *Layout) GetSize() (width *C.guint, height *C.guint) {
	C.gtk_layout_get_size((*C.GtkLayout)(_self_), width, height)
	return
}

func (_self_ *Layout) Move(child_widget *C.GtkWidget, x C.gint, y C.gint) () {
	C.gtk_layout_move((*C.GtkLayout)(_self_), child_widget, x, y)
	return
}

func (_self_ *Layout) Put(child_widget *C.GtkWidget, x C.gint, y C.gint) () {
	C.gtk_layout_put((*C.GtkLayout)(_self_), child_widget, x, y)
	return
}

func (_self_ *Layout) SetSize(width C.guint, height C.guint) () {
	C.gtk_layout_set_size((*C.GtkLayout)(_self_), width, height)
	return
}

func LevelBarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_level_bar_new()
	return
}

func LevelBarNewForInterval(min_value C.gdouble, max_value C.gdouble) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_level_bar_new_for_interval(min_value, max_value)
	return
}

func (_self_ *LevelBar) AddOffsetValue(name *C.gchar, value C.gdouble) () {
	C._gtk_level_bar_add_offset_value((*C.GtkLevelBar)(_self_), name, value)
	return
}

func (_self_ *LevelBar) GetMaxValue() (_return_ C.gdouble) {
	_return_ = C.gtk_level_bar_get_max_value((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) GetMinValue() (_return_ C.gdouble) {
	_return_ = C.gtk_level_bar_get_min_value((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) GetMode() (_return_ C.GtkLevelBarMode) {
	_return_ = C.gtk_level_bar_get_mode((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) GetOffsetValue(name *C.gchar) (_return_ C.gboolean, value *C.gdouble) {
	_return_ = C._gtk_level_bar_get_offset_value((*C.GtkLevelBar)(_self_), name, value)
	return
}

func (_self_ *LevelBar) GetValue() (_return_ C.gdouble) {
	_return_ = C.gtk_level_bar_get_value((*C.GtkLevelBar)(_self_))
	return
}

func (_self_ *LevelBar) RemoveOffsetValue(name *C.gchar) () {
	C._gtk_level_bar_remove_offset_value((*C.GtkLevelBar)(_self_), name)
	return
}

func (_self_ *LevelBar) SetMaxValue(value C.gdouble) () {
	C.gtk_level_bar_set_max_value((*C.GtkLevelBar)(_self_), value)
	return
}

func (_self_ *LevelBar) SetMinValue(value C.gdouble) () {
	C.gtk_level_bar_set_min_value((*C.GtkLevelBar)(_self_), value)
	return
}

func (_self_ *LevelBar) SetMode(mode C.GtkLevelBarMode) () {
	C.gtk_level_bar_set_mode((*C.GtkLevelBar)(_self_), mode)
	return
}

func (_self_ *LevelBar) SetValue(value C.gdouble) () {
	C.gtk_level_bar_set_value((*C.GtkLevelBar)(_self_), value)
	return
}

func LinkButtonNew(uri *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_link_button_new(uri)
	return
}

func LinkButtonNewWithLabel(uri *C.gchar, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_link_button_new_with_label(uri, label)
	return
}

func (_self_ *LinkButton) GetUri() (_return_ *C.gchar) {
	_return_ = C._gtk_link_button_get_uri((*C.GtkLinkButton)(_self_))
	return
}

func (_self_ *LinkButton) GetVisited() (_return_ C.gboolean) {
	_return_ = C.gtk_link_button_get_visited((*C.GtkLinkButton)(_self_))
	return
}

func (_self_ *LinkButton) SetUri(uri *C.gchar) () {
	C._gtk_link_button_set_uri((*C.GtkLinkButton)(_self_), uri)
	return
}

func (_self_ *LinkButton) SetVisited(visited C.gboolean) () {
	C.gtk_link_button_set_visited((*C.GtkLinkButton)(_self_), visited)
	return
}

func ListStoreNewv(n_columns C.gint, types *C.GType) (_return_ *C.GtkListStore) {
	_return_ = C.gtk_list_store_newv(n_columns, types)
	return
}

func (_self_ *ListStore) Append() (iter *C.GtkTreeIter) {
	C.gtk_list_store_append((*C.GtkListStore)(_self_), iter)
	return
}

func (_self_ *ListStore) Clear() () {
	C.gtk_list_store_clear((*C.GtkListStore)(_self_))
	return
}

func (_self_ *ListStore) Insert(position C.gint) (iter *C.GtkTreeIter) {
	C.gtk_list_store_insert((*C.GtkListStore)(_self_), iter, position)
	return
}

func (_self_ *ListStore) InsertAfter(sibling *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_list_store_insert_after((*C.GtkListStore)(_self_), iter, sibling)
	return
}

func (_self_ *ListStore) InsertBefore(sibling *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_list_store_insert_before((*C.GtkListStore)(_self_), iter, sibling)
	return
}

func (_self_ *ListStore) InsertWithValuesv(position C.gint, columns *C.gint, values *C.GValue, n_values C.gint) (iter *C.GtkTreeIter) {
	C.gtk_list_store_insert_with_valuesv((*C.GtkListStore)(_self_), iter, position, columns, values, n_values)
	return
}

func (_self_ *ListStore) IterIsValid(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_list_store_iter_is_valid((*C.GtkListStore)(_self_), iter)
	return
}

func (_self_ *ListStore) MoveAfter(iter *C.GtkTreeIter, position *C.GtkTreeIter) () {
	C.gtk_list_store_move_after((*C.GtkListStore)(_self_), iter, position)
	return
}

func (_self_ *ListStore) MoveBefore(iter *C.GtkTreeIter, position *C.GtkTreeIter) () {
	C.gtk_list_store_move_before((*C.GtkListStore)(_self_), iter, position)
	return
}

func (_self_ *ListStore) Prepend() (iter *C.GtkTreeIter) {
	C.gtk_list_store_prepend((*C.GtkListStore)(_self_), iter)
	return
}

func (_self_ *ListStore) Remove(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_list_store_remove((*C.GtkListStore)(_self_), iter)
	return
}

func (_self_ *ListStore) Reorder(new_order *C.gint) () {
	C.gtk_list_store_reorder((*C.GtkListStore)(_self_), new_order)
	return
}

func (_self_ *ListStore) SetColumnTypes(n_columns C.gint, types *C.GType) () {
	C.gtk_list_store_set_column_types((*C.GtkListStore)(_self_), n_columns, types)
	return
}

func (_self_ *ListStore) SetValue(iter *C.GtkTreeIter, column C.gint, value *C.GValue) () {
	C.gtk_list_store_set_value((*C.GtkListStore)(_self_), iter, column, value)
	return
}

func (_self_ *ListStore) SetValuesv(iter *C.GtkTreeIter, columns *C.gint, values *C.GValue, n_values C.gint) () {
	C.gtk_list_store_set_valuesv((*C.GtkListStore)(_self_), iter, columns, values, n_values)
	return
}

func (_self_ *ListStore) Swap(a *C.GtkTreeIter, b *C.GtkTreeIter) () {
	C.gtk_list_store_swap((*C.GtkListStore)(_self_), a, b)
	return
}

func LockButtonNew(permission *C.GPermission) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_lock_button_new(permission)
	return
}

func (_self_ *LockButton) GetPermission() (_return_ *C.GPermission) {
	_return_ = C.gtk_lock_button_get_permission((*C.GtkLockButton)(_self_))
	return
}

func (_self_ *LockButton) SetPermission(permission *C.GPermission) () {
	C.gtk_lock_button_set_permission((*C.GtkLockButton)(_self_), permission)
	return
}

func MenuNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_new()
	return
}

func MenuNewFromModel(model *C.GMenuModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_new_from_model(model)
	return
}

func MenuGetForAttachWidget(widget *C.GtkWidget) (_return_ *C.GList) {
	_return_ = C.gtk_menu_get_for_attach_widget(widget)
	return
}

func (_self_ *Menu) Attach(child *C.GtkWidget, left_attach C.guint, right_attach C.guint, top_attach C.guint, bottom_attach C.guint) () {
	C.gtk_menu_attach((*C.GtkMenu)(_self_), child, left_attach, right_attach, top_attach, bottom_attach)
	return
}

func (_self_ *Menu) AttachToWidget(attach_widget *C.GtkWidget, detacher C.GtkMenuDetachFunc) () {
	C.gtk_menu_attach_to_widget((*C.GtkMenu)(_self_), attach_widget, detacher)
	return
}

func (_self_ *Menu) Detach() () {
	C.gtk_menu_detach((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetAccelGroup() (_return_ *C.GtkAccelGroup) {
	_return_ = C.gtk_menu_get_accel_group((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetAccelPath() (_return_ *C.gchar) {
	_return_ = C._gtk_menu_get_accel_path((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetActive() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_get_active((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetAttachWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_get_attach_widget((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetMonitor() (_return_ C.gint) {
	_return_ = C.gtk_menu_get_monitor((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetReserveToggleSize() (_return_ C.gboolean) {
	_return_ = C.gtk_menu_get_reserve_toggle_size((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetTearoffState() (_return_ C.gboolean) {
	_return_ = C.gtk_menu_get_tearoff_state((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_menu_get_title((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) Popdown() () {
	C.gtk_menu_popdown((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) Popup(parent_menu_shell *C.GtkWidget, parent_menu_item *C.GtkWidget, func_ C.GtkMenuPositionFunc, data C.gpointer, button C.guint, activate_time C.guint32) () {
	C.gtk_menu_popup((*C.GtkMenu)(_self_), parent_menu_shell, parent_menu_item, func_, data, button, activate_time)
	return
}

func (_self_ *Menu) PopupForDevice(device *C.GdkDevice, parent_menu_shell *C.GtkWidget, parent_menu_item *C.GtkWidget, func_ C.GtkMenuPositionFunc, data C.gpointer, destroy C.GDestroyNotify, button C.guint, activate_time C.guint32) () {
	C.gtk_menu_popup_for_device((*C.GtkMenu)(_self_), device, parent_menu_shell, parent_menu_item, func_, data, destroy, button, activate_time)
	return
}

func (_self_ *Menu) ReorderChild(child *C.GtkWidget, position C.gint) () {
	C.gtk_menu_reorder_child((*C.GtkMenu)(_self_), child, position)
	return
}

func (_self_ *Menu) Reposition() () {
	C.gtk_menu_reposition((*C.GtkMenu)(_self_))
	return
}

func (_self_ *Menu) SetAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_menu_set_accel_group((*C.GtkMenu)(_self_), accel_group)
	return
}

func (_self_ *Menu) SetAccelPath(accel_path *C.gchar) () {
	C._gtk_menu_set_accel_path((*C.GtkMenu)(_self_), accel_path)
	return
}

func (_self_ *Menu) SetActive(index C.guint) () {
	C.gtk_menu_set_active((*C.GtkMenu)(_self_), index)
	return
}

func (_self_ *Menu) SetMonitor(monitor_num C.gint) () {
	C.gtk_menu_set_monitor((*C.GtkMenu)(_self_), monitor_num)
	return
}

func (_self_ *Menu) SetReserveToggleSize(reserve_toggle_size C.gboolean) () {
	C.gtk_menu_set_reserve_toggle_size((*C.GtkMenu)(_self_), reserve_toggle_size)
	return
}

func (_self_ *Menu) SetScreen(screen *C.GdkScreen) () {
	C.gtk_menu_set_screen((*C.GtkMenu)(_self_), screen)
	return
}

func (_self_ *Menu) SetTearoffState(torn_off C.gboolean) () {
	C.gtk_menu_set_tearoff_state((*C.GtkMenu)(_self_), torn_off)
	return
}

func (_self_ *Menu) SetTitle(title *C.gchar) () {
	C._gtk_menu_set_title((*C.GtkMenu)(_self_), title)
	return
}

func MenuBarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_bar_new()
	return
}

func MenuBarNewFromModel(model *C.GMenuModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_bar_new_from_model(model)
	return
}

func (_self_ *MenuBar) GetChildPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_child_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) GetPackDirection() (_return_ C.GtkPackDirection) {
	_return_ = C.gtk_menu_bar_get_pack_direction((*C.GtkMenuBar)(_self_))
	return
}

func (_self_ *MenuBar) SetChildPackDirection(child_pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_child_pack_direction((*C.GtkMenuBar)(_self_), child_pack_dir)
	return
}

func (_self_ *MenuBar) SetPackDirection(pack_dir C.GtkPackDirection) () {
	C.gtk_menu_bar_set_pack_direction((*C.GtkMenuBar)(_self_), pack_dir)
	return
}

func MenuButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_button_new()
	return
}

func (_self_ *MenuButton) GetAlignWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_button_get_align_widget((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetDirection() (_return_ C.GtkArrowType) {
	_return_ = C.gtk_menu_button_get_direction((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetMenuModel() (_return_ *C.GMenuModel) {
	_return_ = C.gtk_menu_button_get_menu_model((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) GetPopup() (_return_ *C.GtkMenu) {
	_return_ = C.gtk_menu_button_get_popup((*C.GtkMenuButton)(_self_))
	return
}

func (_self_ *MenuButton) SetAlignWidget(align_widget *C.GtkWidget) () {
	C.gtk_menu_button_set_align_widget((*C.GtkMenuButton)(_self_), align_widget)
	return
}

func (_self_ *MenuButton) SetDirection(direction C.GtkArrowType) () {
	C.gtk_menu_button_set_direction((*C.GtkMenuButton)(_self_), direction)
	return
}

func (_self_ *MenuButton) SetMenuModel(menu_model *C.GMenuModel) () {
	C.gtk_menu_button_set_menu_model((*C.GtkMenuButton)(_self_), menu_model)
	return
}

func (_self_ *MenuButton) SetPopup(popup *C.GtkWidget) () {
	C.gtk_menu_button_set_popup((*C.GtkMenuButton)(_self_), popup)
	return
}

func MenuItemNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_item_new()
	return
}

func MenuItemNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_menu_item_new_with_label(label)
	return
}

func MenuItemNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_menu_item_new_with_mnemonic(label)
	return
}

func (_self_ *MenuItem) Activate() () {
	C.gtk_menu_item_activate((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) Deselect() () {
	C.gtk_menu_item_deselect((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetAccelPath() (_return_ *C.gchar) {
	_return_ = C._gtk_menu_item_get_accel_path((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_menu_item_get_label((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetReserveIndicator() (_return_ C.gboolean) {
	_return_ = C.gtk_menu_item_get_reserve_indicator((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetSubmenu() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_item_get_submenu((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) GetUseUnderline() (_return_ C.gboolean) {
	_return_ = C.gtk_menu_item_get_use_underline((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) Select() () {
	C.gtk_menu_item_select((*C.GtkMenuItem)(_self_))
	return
}

func (_self_ *MenuItem) SetAccelPath(accel_path *C.gchar) () {
	C._gtk_menu_item_set_accel_path((*C.GtkMenuItem)(_self_), accel_path)
	return
}

func (_self_ *MenuItem) SetLabel(label *C.gchar) () {
	C._gtk_menu_item_set_label((*C.GtkMenuItem)(_self_), label)
	return
}

func (_self_ *MenuItem) SetReserveIndicator(reserve C.gboolean) () {
	C.gtk_menu_item_set_reserve_indicator((*C.GtkMenuItem)(_self_), reserve)
	return
}

func (_self_ *MenuItem) SetSubmenu(submenu *C.GtkWidget) () {
	C.gtk_menu_item_set_submenu((*C.GtkMenuItem)(_self_), submenu)
	return
}

func (_self_ *MenuItem) SetUseUnderline(setting C.gboolean) () {
	C.gtk_menu_item_set_use_underline((*C.GtkMenuItem)(_self_), setting)
	return
}

func (_self_ *MenuItem) ToggleSizeAllocate(allocation C.gint) () {
	C.gtk_menu_item_toggle_size_allocate((*C.GtkMenuItem)(_self_), allocation)
	return
}

func (_self_ *MenuItem) ToggleSizeRequest(requisition *C.gint) () {
	C.gtk_menu_item_toggle_size_request((*C.GtkMenuItem)(_self_), requisition)
	return
}

func (_self_ *MenuShell) ActivateItem(menu_item *C.GtkWidget, force_deactivate C.gboolean) () {
	C.gtk_menu_shell_activate_item((*C.GtkMenuShell)(_self_), menu_item, force_deactivate)
	return
}

func (_self_ *MenuShell) Append(child *C.GtkWidget) () {
	C.gtk_menu_shell_append((*C.GtkMenuShell)(_self_), child)
	return
}

func (_self_ *MenuShell) BindModel(model *C.GMenuModel, action_namespace *C.gchar, with_separators C.gboolean) () {
	C._gtk_menu_shell_bind_model((*C.GtkMenuShell)(_self_), model, action_namespace, with_separators)
	return
}

func (_self_ *MenuShell) Cancel() () {
	C.gtk_menu_shell_cancel((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deactivate() () {
	C.gtk_menu_shell_deactivate((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Deselect() () {
	C.gtk_menu_shell_deselect((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) GetParentShell() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_shell_get_parent_shell((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) GetSelectedItem() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_shell_get_selected_item((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) GetTakeFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_menu_shell_get_take_focus((*C.GtkMenuShell)(_self_))
	return
}

func (_self_ *MenuShell) Insert(child *C.GtkWidget, position C.gint) () {
	C.gtk_menu_shell_insert((*C.GtkMenuShell)(_self_), child, position)
	return
}

func (_self_ *MenuShell) Prepend(child *C.GtkWidget) () {
	C.gtk_menu_shell_prepend((*C.GtkMenuShell)(_self_), child)
	return
}

func (_self_ *MenuShell) SelectFirst(search_sensitive C.gboolean) () {
	C.gtk_menu_shell_select_first((*C.GtkMenuShell)(_self_), search_sensitive)
	return
}

func (_self_ *MenuShell) SelectItem(menu_item *C.GtkWidget) () {
	C.gtk_menu_shell_select_item((*C.GtkMenuShell)(_self_), menu_item)
	return
}

func (_self_ *MenuShell) SetTakeFocus(take_focus C.gboolean) () {
	C.gtk_menu_shell_set_take_focus((*C.GtkMenuShell)(_self_), take_focus)
	return
}

func MenuToolButtonNew(icon_widget *C.GtkWidget, label *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_menu_tool_button_new(icon_widget, label)
	return
}

func MenuToolButtonNewFromStock(stock_id *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_menu_tool_button_new_from_stock(stock_id)
	return
}

func (_self_ *MenuToolButton) GetMenu() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_menu_tool_button_get_menu((*C.GtkMenuToolButton)(_self_))
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipMarkup(markup *C.gchar) () {
	C._gtk_menu_tool_button_set_arrow_tooltip_markup((*C.GtkMenuToolButton)(_self_), markup)
	return
}

func (_self_ *MenuToolButton) SetArrowTooltipText(text *C.gchar) () {
	C._gtk_menu_tool_button_set_arrow_tooltip_text((*C.GtkMenuToolButton)(_self_), text)
	return
}

func (_self_ *MenuToolButton) SetMenu(menu *C.GtkWidget) () {
	C.gtk_menu_tool_button_set_menu((*C.GtkMenuToolButton)(_self_), menu)
	return
}

func (_self_ *MessageDialog) GetImage() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_message_dialog_get_image((*C.GtkMessageDialog)(_self_))
	return
}

func (_self_ *MessageDialog) GetMessageArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_message_dialog_get_message_area((*C.GtkMessageDialog)(_self_))
	return
}

func (_self_ *MessageDialog) SetImage(image *C.GtkWidget) () {
	C.gtk_message_dialog_set_image((*C.GtkMessageDialog)(_self_), image)
	return
}

func (_self_ *MessageDialog) SetMarkup(str *C.gchar) () {
	C._gtk_message_dialog_set_markup((*C.GtkMessageDialog)(_self_), str)
	return
}

func (_self_ *Misc) GetAlignment() (xalign *C.gfloat, yalign *C.gfloat) {
	C.gtk_misc_get_alignment((*C.GtkMisc)(_self_), xalign, yalign)
	return
}

func (_self_ *Misc) GetPadding() (xpad *C.gint, ypad *C.gint) {
	C.gtk_misc_get_padding((*C.GtkMisc)(_self_), xpad, ypad)
	return
}

func (_self_ *Misc) SetAlignment(xalign C.gfloat, yalign C.gfloat) () {
	C.gtk_misc_set_alignment((*C.GtkMisc)(_self_), xalign, yalign)
	return
}

func (_self_ *Misc) SetPadding(xpad C.gint, ypad C.gint) () {
	C.gtk_misc_set_padding((*C.GtkMisc)(_self_), xpad, ypad)
	return
}

func MountOperationNew(parent *C.GtkWindow) (_return_ *C.GMountOperation) {
	_return_ = C.gtk_mount_operation_new(parent)
	return
}

func (_self_ *MountOperation) GetParent() (_return_ *C.GtkWindow) {
	_return_ = C.gtk_mount_operation_get_parent((*C.GtkMountOperation)(_self_))
	return
}

func (_self_ *MountOperation) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_mount_operation_get_screen((*C.GtkMountOperation)(_self_))
	return
}

func (_self_ *MountOperation) IsShowing() (_return_ C.gboolean) {
	_return_ = C.gtk_mount_operation_is_showing((*C.GtkMountOperation)(_self_))
	return
}

func (_self_ *MountOperation) SetParent(parent *C.GtkWindow) () {
	C.gtk_mount_operation_set_parent((*C.GtkMountOperation)(_self_), parent)
	return
}

func (_self_ *MountOperation) SetScreen(screen *C.GdkScreen) () {
	C.gtk_mount_operation_set_screen((*C.GtkMountOperation)(_self_), screen)
	return
}

func NotebookNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_notebook_new()
	return
}

func (_self_ *Notebook) AppendPage(child *C.GtkWidget, tab_label *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_notebook_append_page((*C.GtkNotebook)(_self_), child, tab_label)
	return
}

func (_self_ *Notebook) AppendPageMenu(child *C.GtkWidget, tab_label *C.GtkWidget, menu_label *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_notebook_append_page_menu((*C.GtkNotebook)(_self_), child, tab_label, menu_label)
	return
}

func (_self_ *Notebook) GetActionWidget(pack_type C.GtkPackType) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_notebook_get_action_widget((*C.GtkNotebook)(_self_), pack_type)
	return
}

func (_self_ *Notebook) GetCurrentPage() (_return_ C.gint) {
	_return_ = C.gtk_notebook_get_current_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetGroupName() (_return_ *C.gchar) {
	_return_ = C._gtk_notebook_get_group_name((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetMenuLabel(child *C.GtkWidget) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_notebook_get_menu_label((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) GetMenuLabelText(child *C.GtkWidget) (_return_ *C.gchar) {
	_return_ = C._gtk_notebook_get_menu_label_text((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) GetNPages() (_return_ C.gint) {
	_return_ = C.gtk_notebook_get_n_pages((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetNthPage(page_num C.gint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_notebook_get_nth_page((*C.GtkNotebook)(_self_), page_num)
	return
}

func (_self_ *Notebook) GetScrollable() (_return_ C.gboolean) {
	_return_ = C.gtk_notebook_get_scrollable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetShowBorder() (_return_ C.gboolean) {
	_return_ = C.gtk_notebook_get_show_border((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetShowTabs() (_return_ C.gboolean) {
	_return_ = C.gtk_notebook_get_show_tabs((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetTabDetachable(child *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_notebook_get_tab_detachable((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) GetTabLabel(child *C.GtkWidget) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_notebook_get_tab_label((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) GetTabLabelText(child *C.GtkWidget) (_return_ *C.gchar) {
	_return_ = C._gtk_notebook_get_tab_label_text((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) GetTabPos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_notebook_get_tab_pos((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) GetTabReorderable(child *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_notebook_get_tab_reorderable((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) InsertPage(child *C.GtkWidget, tab_label *C.GtkWidget, position C.gint) (_return_ C.gint) {
	_return_ = C.gtk_notebook_insert_page((*C.GtkNotebook)(_self_), child, tab_label, position)
	return
}

func (_self_ *Notebook) InsertPageMenu(child *C.GtkWidget, tab_label *C.GtkWidget, menu_label *C.GtkWidget, position C.gint) (_return_ C.gint) {
	_return_ = C.gtk_notebook_insert_page_menu((*C.GtkNotebook)(_self_), child, tab_label, menu_label, position)
	return
}

func (_self_ *Notebook) NextPage() () {
	C.gtk_notebook_next_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PageNum(child *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_notebook_page_num((*C.GtkNotebook)(_self_), child)
	return
}

func (_self_ *Notebook) PopupDisable() () {
	C.gtk_notebook_popup_disable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PopupEnable() () {
	C.gtk_notebook_popup_enable((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) PrependPage(child *C.GtkWidget, tab_label *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_notebook_prepend_page((*C.GtkNotebook)(_self_), child, tab_label)
	return
}

func (_self_ *Notebook) PrependPageMenu(child *C.GtkWidget, tab_label *C.GtkWidget, menu_label *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_notebook_prepend_page_menu((*C.GtkNotebook)(_self_), child, tab_label, menu_label)
	return
}

func (_self_ *Notebook) PrevPage() () {
	C.gtk_notebook_prev_page((*C.GtkNotebook)(_self_))
	return
}

func (_self_ *Notebook) RemovePage(page_num C.gint) () {
	C.gtk_notebook_remove_page((*C.GtkNotebook)(_self_), page_num)
	return
}

func (_self_ *Notebook) ReorderChild(child *C.GtkWidget, position C.gint) () {
	C.gtk_notebook_reorder_child((*C.GtkNotebook)(_self_), child, position)
	return
}

func (_self_ *Notebook) SetActionWidget(widget *C.GtkWidget, pack_type C.GtkPackType) () {
	C.gtk_notebook_set_action_widget((*C.GtkNotebook)(_self_), widget, pack_type)
	return
}

func (_self_ *Notebook) SetCurrentPage(page_num C.gint) () {
	C.gtk_notebook_set_current_page((*C.GtkNotebook)(_self_), page_num)
	return
}

func (_self_ *Notebook) SetGroupName(group_name *C.gchar) () {
	C._gtk_notebook_set_group_name((*C.GtkNotebook)(_self_), group_name)
	return
}

func (_self_ *Notebook) SetMenuLabel(child *C.GtkWidget, menu_label *C.GtkWidget) () {
	C.gtk_notebook_set_menu_label((*C.GtkNotebook)(_self_), child, menu_label)
	return
}

func (_self_ *Notebook) SetMenuLabelText(child *C.GtkWidget, menu_text *C.gchar) () {
	C._gtk_notebook_set_menu_label_text((*C.GtkNotebook)(_self_), child, menu_text)
	return
}

func (_self_ *Notebook) SetScrollable(scrollable C.gboolean) () {
	C.gtk_notebook_set_scrollable((*C.GtkNotebook)(_self_), scrollable)
	return
}

func (_self_ *Notebook) SetShowBorder(show_border C.gboolean) () {
	C.gtk_notebook_set_show_border((*C.GtkNotebook)(_self_), show_border)
	return
}

func (_self_ *Notebook) SetShowTabs(show_tabs C.gboolean) () {
	C.gtk_notebook_set_show_tabs((*C.GtkNotebook)(_self_), show_tabs)
	return
}

func (_self_ *Notebook) SetTabDetachable(child *C.GtkWidget, detachable C.gboolean) () {
	C.gtk_notebook_set_tab_detachable((*C.GtkNotebook)(_self_), child, detachable)
	return
}

func (_self_ *Notebook) SetTabLabel(child *C.GtkWidget, tab_label *C.GtkWidget) () {
	C.gtk_notebook_set_tab_label((*C.GtkNotebook)(_self_), child, tab_label)
	return
}

func (_self_ *Notebook) SetTabLabelText(child *C.GtkWidget, tab_text *C.gchar) () {
	C._gtk_notebook_set_tab_label_text((*C.GtkNotebook)(_self_), child, tab_text)
	return
}

func (_self_ *Notebook) SetTabPos(pos C.GtkPositionType) () {
	C.gtk_notebook_set_tab_pos((*C.GtkNotebook)(_self_), pos)
	return
}

func (_self_ *Notebook) SetTabReorderable(child *C.GtkWidget, reorderable C.gboolean) () {
	C.gtk_notebook_set_tab_reorderable((*C.GtkNotebook)(_self_), child, reorderable)
	return
}

func NumerableIconNew(base_icon *C.GIcon) (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_new(base_icon)
	return
}

func NumerableIconNewWithStyleContext(base_icon *C.GIcon, context *C.GtkStyleContext) (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_new_with_style_context(base_icon, context)
	return
}

func (_self_ *NumerableIcon) GetBackgroundGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_numerable_icon_get_background_gicon((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetBackgroundIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_numerable_icon_get_background_icon_name((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetCount() (_return_ C.gint) {
	_return_ = C.gtk_numerable_icon_get_count((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_numerable_icon_get_label((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) GetStyleContext() (_return_ *C.GtkStyleContext) {
	_return_ = C.gtk_numerable_icon_get_style_context((*C.GtkNumerableIcon)(_self_))
	return
}

func (_self_ *NumerableIcon) SetBackgroundGicon(icon *C.GIcon) () {
	C.gtk_numerable_icon_set_background_gicon((*C.GtkNumerableIcon)(_self_), icon)
	return
}

func (_self_ *NumerableIcon) SetBackgroundIconName(icon_name *C.gchar) () {
	C._gtk_numerable_icon_set_background_icon_name((*C.GtkNumerableIcon)(_self_), icon_name)
	return
}

func (_self_ *NumerableIcon) SetCount(count C.gint) () {
	C.gtk_numerable_icon_set_count((*C.GtkNumerableIcon)(_self_), count)
	return
}

func (_self_ *NumerableIcon) SetLabel(label *C.gchar) () {
	C._gtk_numerable_icon_set_label((*C.GtkNumerableIcon)(_self_), label)
	return
}

func (_self_ *NumerableIcon) SetStyleContext(style *C.GtkStyleContext) () {
	C.gtk_numerable_icon_set_style_context((*C.GtkNumerableIcon)(_self_), style)
	return
}

func OffscreenWindowNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_offscreen_window_new()
	return
}

func (_self_ *OffscreenWindow) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_offscreen_window_get_pixbuf((*C.GtkOffscreenWindow)(_self_))
	return
}

func (_self_ *OffscreenWindow) GetSurface() (_return_ *C.cairo_surface_t) {
	_return_ = C.gtk_offscreen_window_get_surface((*C.GtkOffscreenWindow)(_self_))
	return
}

func OverlayNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_overlay_new()
	return
}

func (_self_ *Overlay) AddOverlay(widget *C.GtkWidget) () {
	C.gtk_overlay_add_overlay((*C.GtkOverlay)(_self_), widget)
	return
}

func PageSetupNew() (_return_ *C.GtkPageSetup) {
	_return_ = C.gtk_page_setup_new()
	return
}

func PageSetupNewFromFile(file_name *C.gchar) (_return_ *C.GtkPageSetup, _error_ unsafe.Pointer) {
	_return_ = C._gtk_page_setup_new_from_file(file_name, _error_)
	return
}

func PageSetupNewFromKeyFile(key_file *C.GKeyFile, group_name *C.gchar) (_return_ *C.GtkPageSetup, _error_ unsafe.Pointer) {
	_return_ = C._gtk_page_setup_new_from_key_file(key_file, group_name, _error_)
	return
}

func (_self_ *PageSetup) Copy() (_return_ *C.GtkPageSetup) {
	_return_ = C.gtk_page_setup_copy((*C.GtkPageSetup)(_self_))
	return
}

func (_self_ *PageSetup) GetBottomMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_bottom_margin((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetLeftMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_left_margin((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_page_setup_get_orientation((*C.GtkPageSetup)(_self_))
	return
}

func (_self_ *PageSetup) GetPageHeight(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_page_height((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetPageWidth(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_page_width((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetPaperHeight(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_paper_height((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetPaperSize() (_return_ *C.GtkPaperSize) {
	_return_ = C.gtk_page_setup_get_paper_size((*C.GtkPageSetup)(_self_))
	return
}

func (_self_ *PageSetup) GetPaperWidth(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_paper_width((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetRightMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_right_margin((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) GetTopMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_page_setup_get_top_margin((*C.GtkPageSetup)(_self_), unit)
	return
}

func (_self_ *PageSetup) LoadFile(file_name *C.char) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_page_setup_load_file((*C.GtkPageSetup)(_self_), file_name, _error_)
	return
}

func (_self_ *PageSetup) LoadKeyFile(key_file *C.GKeyFile, group_name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_page_setup_load_key_file((*C.GtkPageSetup)(_self_), key_file, group_name, _error_)
	return
}

func (_self_ *PageSetup) SetBottomMargin(margin C.gdouble, unit C.GtkUnit) () {
	C.gtk_page_setup_set_bottom_margin((*C.GtkPageSetup)(_self_), margin, unit)
	return
}

func (_self_ *PageSetup) SetLeftMargin(margin C.gdouble, unit C.GtkUnit) () {
	C.gtk_page_setup_set_left_margin((*C.GtkPageSetup)(_self_), margin, unit)
	return
}

func (_self_ *PageSetup) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_page_setup_set_orientation((*C.GtkPageSetup)(_self_), orientation)
	return
}

func (_self_ *PageSetup) SetPaperSize(size *C.GtkPaperSize) () {
	C.gtk_page_setup_set_paper_size((*C.GtkPageSetup)(_self_), size)
	return
}

func (_self_ *PageSetup) SetPaperSizeAndDefaultMargins(size *C.GtkPaperSize) () {
	C.gtk_page_setup_set_paper_size_and_default_margins((*C.GtkPageSetup)(_self_), size)
	return
}

func (_self_ *PageSetup) SetRightMargin(margin C.gdouble, unit C.GtkUnit) () {
	C.gtk_page_setup_set_right_margin((*C.GtkPageSetup)(_self_), margin, unit)
	return
}

func (_self_ *PageSetup) SetTopMargin(margin C.gdouble, unit C.GtkUnit) () {
	C.gtk_page_setup_set_top_margin((*C.GtkPageSetup)(_self_), margin, unit)
	return
}

func (_self_ *PageSetup) ToFile(file_name *C.char) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_page_setup_to_file((*C.GtkPageSetup)(_self_), file_name, _error_)
	return
}

func (_self_ *PageSetup) ToKeyFile(key_file *C.GKeyFile, group_name *C.gchar) () {
	C._gtk_page_setup_to_key_file((*C.GtkPageSetup)(_self_), key_file, group_name)
	return
}

func PanedNew(orientation C.GtkOrientation) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_paned_new(orientation)
	return
}

func (_self_ *Paned) Add1(child *C.GtkWidget) () {
	C.gtk_paned_add1((*C.GtkPaned)(_self_), child)
	return
}

func (_self_ *Paned) Add2(child *C.GtkWidget) () {
	C.gtk_paned_add2((*C.GtkPaned)(_self_), child)
	return
}

func (_self_ *Paned) GetChild1() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_paned_get_child1((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) GetChild2() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_paned_get_child2((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) GetHandleWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_paned_get_handle_window((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) GetPosition() (_return_ C.gint) {
	_return_ = C.gtk_paned_get_position((*C.GtkPaned)(_self_))
	return
}

func (_self_ *Paned) Pack1(child *C.GtkWidget, resize C.gboolean, shrink C.gboolean) () {
	C.gtk_paned_pack1((*C.GtkPaned)(_self_), child, resize, shrink)
	return
}

func (_self_ *Paned) Pack2(child *C.GtkWidget, resize C.gboolean, shrink C.gboolean) () {
	C.gtk_paned_pack2((*C.GtkPaned)(_self_), child, resize, shrink)
	return
}

func (_self_ *Paned) SetPosition(position C.gint) () {
	C.gtk_paned_set_position((*C.GtkPaned)(_self_), position)
	return
}

func PaperSizeNew(name *C.gchar) (_return_ *C.GtkPaperSize) {
	_return_ = C._gtk_paper_size_new(name)
	return
}

func PaperSizeNewCustom(name *C.gchar, display_name *C.gchar, width C.gdouble, height C.gdouble, unit C.GtkUnit) (_return_ *C.GtkPaperSize) {
	_return_ = C._gtk_paper_size_new_custom(name, display_name, width, height, unit)
	return
}

func PaperSizeNewFromKeyFile(key_file *C.GKeyFile, group_name *C.gchar) (_return_ *C.GtkPaperSize, _error_ unsafe.Pointer) {
	_return_ = C._gtk_paper_size_new_from_key_file(key_file, group_name, _error_)
	return
}

func PaperSizeNewFromPpd(ppd_name *C.gchar, ppd_display_name *C.gchar, width C.gdouble, height C.gdouble) (_return_ *C.GtkPaperSize) {
	_return_ = C._gtk_paper_size_new_from_ppd(ppd_name, ppd_display_name, width, height)
	return
}

func PaperSizeGetDefault() (_return_ *C.gchar) {
	_return_ = C._gtk_paper_size_get_default()
	return
}

func PaperSizeGetPaperSizes(include_custom C.gboolean) (_return_ *C.GList) {
	_return_ = C.gtk_paper_size_get_paper_sizes(include_custom)
	return
}

func (_self_ *PaperSize) Copy() (_return_ *C.GtkPaperSize) {
	_return_ = C.gtk_paper_size_copy((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) Free() () {
	C.gtk_paper_size_free((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetDefaultBottomMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_default_bottom_margin((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) GetDefaultLeftMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_default_left_margin((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) GetDefaultRightMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_default_right_margin((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) GetDefaultTopMargin(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_default_top_margin((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) GetDisplayName() (_return_ *C.gchar) {
	_return_ = C._gtk_paper_size_get_display_name((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetHeight(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_height((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_paper_size_get_name((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetPpdName() (_return_ *C.gchar) {
	_return_ = C._gtk_paper_size_get_ppd_name((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) GetWidth(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_paper_size_get_width((*C.GtkPaperSize)(_self_), unit)
	return
}

func (_self_ *PaperSize) IsCustom() (_return_ C.gboolean) {
	_return_ = C.gtk_paper_size_is_custom((*C.GtkPaperSize)(_self_))
	return
}

func (_self_ *PaperSize) IsEqual(size2 *C.GtkPaperSize) (_return_ C.gboolean) {
	_return_ = C.gtk_paper_size_is_equal((*C.GtkPaperSize)(_self_), size2)
	return
}

func (_self_ *PaperSize) SetSize(width C.gdouble, height C.gdouble, unit C.GtkUnit) () {
	C.gtk_paper_size_set_size((*C.GtkPaperSize)(_self_), width, height, unit)
	return
}

func (_self_ *PaperSize) ToKeyFile(key_file *C.GKeyFile, group_name *C.gchar) () {
	C._gtk_paper_size_to_key_file((*C.GtkPaperSize)(_self_), key_file, group_name)
	return
}

func PlugNew(socket_id C.Window) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_plug_new(socket_id)
	return
}

func PlugNewForDisplay(display *C.GdkDisplay, socket_id C.Window) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_plug_new_for_display(display, socket_id)
	return
}

func (_self_ *Plug) Construct(socket_id C.Window) () {
	C.gtk_plug_construct((*C.GtkPlug)(_self_), socket_id)
	return
}

func (_self_ *Plug) ConstructForDisplay(display *C.GdkDisplay, socket_id C.Window) () {
	C.gtk_plug_construct_for_display((*C.GtkPlug)(_self_), display, socket_id)
	return
}

func (_self_ *Plug) GetEmbedded() (_return_ C.gboolean) {
	_return_ = C.gtk_plug_get_embedded((*C.GtkPlug)(_self_))
	return
}

func (_self_ *Plug) GetId() (_return_ C.Window) {
	_return_ = C.gtk_plug_get_id((*C.GtkPlug)(_self_))
	return
}

func (_self_ *Plug) GetSocketWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_plug_get_socket_window((*C.GtkPlug)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_print_context_create_pango_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) CreatePangoLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_print_context_create_pango_layout((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetCairoContext() (_return_ *C.cairo_t) {
	_return_ = C.gtk_print_context_get_cairo_context((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetDpiX() (_return_ C.gdouble) {
	_return_ = C.gtk_print_context_get_dpi_x((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetDpiY() (_return_ C.gdouble) {
	_return_ = C.gtk_print_context_get_dpi_y((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetHardMargins() (_return_ C.gboolean, top *C.gdouble, bottom *C.gdouble, left *C.gdouble, right *C.gdouble) {
	_return_ = C.gtk_print_context_get_hard_margins((*C.GtkPrintContext)(_self_), top, bottom, left, right)
	return
}

func (_self_ *PrintContext) GetHeight() (_return_ C.gdouble) {
	_return_ = C.gtk_print_context_get_height((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetPageSetup() (_return_ *C.GtkPageSetup) {
	_return_ = C.gtk_print_context_get_page_setup((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetPangoFontmap() (_return_ *C.PangoFontMap) {
	_return_ = C.gtk_print_context_get_pango_fontmap((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) GetWidth() (_return_ C.gdouble) {
	_return_ = C.gtk_print_context_get_width((*C.GtkPrintContext)(_self_))
	return
}

func (_self_ *PrintContext) SetCairoContext(cr *C.cairo_t, dpi_x C.double, dpi_y C.double) () {
	C.gtk_print_context_set_cairo_context((*C.GtkPrintContext)(_self_), cr, dpi_x, dpi_y)
	return
}

func PrintOperationNew() (_return_ *C.GtkPrintOperation) {
	_return_ = C.gtk_print_operation_new()
	return
}

func (_self_ *PrintOperation) Cancel() () {
	C.gtk_print_operation_cancel((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) DrawPageFinish() () {
	C.gtk_print_operation_draw_page_finish((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetDefaultPageSetup() (_return_ *C.GtkPageSetup) {
	_return_ = C.gtk_print_operation_get_default_page_setup((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetEmbedPageSetup() (_return_ C.gboolean) {
	_return_ = C.gtk_print_operation_get_embed_page_setup((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetError() (_error_ unsafe.Pointer) {
	C._gtk_print_operation_get_error((*C.GtkPrintOperation)(_self_), _error_)
	return
}

func (_self_ *PrintOperation) GetHasSelection() (_return_ C.gboolean) {
	_return_ = C.gtk_print_operation_get_has_selection((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetNPagesToPrint() (_return_ C.gint) {
	_return_ = C.gtk_print_operation_get_n_pages_to_print((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetPrintSettings() (_return_ *C.GtkPrintSettings) {
	_return_ = C.gtk_print_operation_get_print_settings((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetStatus() (_return_ C.GtkPrintStatus) {
	_return_ = C.gtk_print_operation_get_status((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetStatusString() (_return_ *C.gchar) {
	_return_ = C._gtk_print_operation_get_status_string((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) GetSupportSelection() (_return_ C.gboolean) {
	_return_ = C.gtk_print_operation_get_support_selection((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) IsFinished() (_return_ C.gboolean) {
	_return_ = C.gtk_print_operation_is_finished((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) Run(action C.GtkPrintOperationAction, parent *C.GtkWindow) (_return_ C.GtkPrintOperationResult, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_operation_run((*C.GtkPrintOperation)(_self_), action, parent, _error_)
	return
}

func (_self_ *PrintOperation) SetAllowAsync(allow_async C.gboolean) () {
	C.gtk_print_operation_set_allow_async((*C.GtkPrintOperation)(_self_), allow_async)
	return
}

func (_self_ *PrintOperation) SetCurrentPage(current_page C.gint) () {
	C.gtk_print_operation_set_current_page((*C.GtkPrintOperation)(_self_), current_page)
	return
}

func (_self_ *PrintOperation) SetCustomTabLabel(label *C.gchar) () {
	C._gtk_print_operation_set_custom_tab_label((*C.GtkPrintOperation)(_self_), label)
	return
}

func (_self_ *PrintOperation) SetDefaultPageSetup(default_page_setup *C.GtkPageSetup) () {
	C.gtk_print_operation_set_default_page_setup((*C.GtkPrintOperation)(_self_), default_page_setup)
	return
}

func (_self_ *PrintOperation) SetDeferDrawing() () {
	C.gtk_print_operation_set_defer_drawing((*C.GtkPrintOperation)(_self_))
	return
}

func (_self_ *PrintOperation) SetEmbedPageSetup(embed C.gboolean) () {
	C.gtk_print_operation_set_embed_page_setup((*C.GtkPrintOperation)(_self_), embed)
	return
}

func (_self_ *PrintOperation) SetExportFilename(filename *C.gchar) () {
	C._gtk_print_operation_set_export_filename((*C.GtkPrintOperation)(_self_), filename)
	return
}

func (_self_ *PrintOperation) SetHasSelection(has_selection C.gboolean) () {
	C.gtk_print_operation_set_has_selection((*C.GtkPrintOperation)(_self_), has_selection)
	return
}

func (_self_ *PrintOperation) SetJobName(job_name *C.gchar) () {
	C._gtk_print_operation_set_job_name((*C.GtkPrintOperation)(_self_), job_name)
	return
}

func (_self_ *PrintOperation) SetNPages(n_pages C.gint) () {
	C.gtk_print_operation_set_n_pages((*C.GtkPrintOperation)(_self_), n_pages)
	return
}

func (_self_ *PrintOperation) SetPrintSettings(print_settings *C.GtkPrintSettings) () {
	C.gtk_print_operation_set_print_settings((*C.GtkPrintOperation)(_self_), print_settings)
	return
}

func (_self_ *PrintOperation) SetShowProgress(show_progress C.gboolean) () {
	C.gtk_print_operation_set_show_progress((*C.GtkPrintOperation)(_self_), show_progress)
	return
}

func (_self_ *PrintOperation) SetSupportSelection(support_selection C.gboolean) () {
	C.gtk_print_operation_set_support_selection((*C.GtkPrintOperation)(_self_), support_selection)
	return
}

func (_self_ *PrintOperation) SetTrackPrintStatus(track_status C.gboolean) () {
	C.gtk_print_operation_set_track_print_status((*C.GtkPrintOperation)(_self_), track_status)
	return
}

func (_self_ *PrintOperation) SetUnit(unit C.GtkUnit) () {
	C.gtk_print_operation_set_unit((*C.GtkPrintOperation)(_self_), unit)
	return
}

func (_self_ *PrintOperation) SetUseFullPage(full_page C.gboolean) () {
	C.gtk_print_operation_set_use_full_page((*C.GtkPrintOperation)(_self_), full_page)
	return
}

func PrintSettingsNew() (_return_ *C.GtkPrintSettings) {
	_return_ = C.gtk_print_settings_new()
	return
}

func PrintSettingsNewFromFile(file_name *C.gchar) (_return_ *C.GtkPrintSettings, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_settings_new_from_file(file_name, _error_)
	return
}

func PrintSettingsNewFromKeyFile(key_file *C.GKeyFile, group_name *C.gchar) (_return_ *C.GtkPrintSettings, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_settings_new_from_key_file(key_file, group_name, _error_)
	return
}

func (_self_ *PrintSettings) Copy() (_return_ *C.GtkPrintSettings) {
	_return_ = C.gtk_print_settings_copy((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) Foreach(func_ C.GtkPrintSettingsFunc, user_data C.gpointer) () {
	C.gtk_print_settings_foreach((*C.GtkPrintSettings)(_self_), func_, user_data)
	return
}

func (_self_ *PrintSettings) Get(key *C.gchar) (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get((*C.GtkPrintSettings)(_self_), key)
	return
}

func (_self_ *PrintSettings) GetBool(key *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_print_settings_get_bool((*C.GtkPrintSettings)(_self_), key)
	return
}

func (_self_ *PrintSettings) GetCollate() (_return_ C.gboolean) {
	_return_ = C.gtk_print_settings_get_collate((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetDefaultSource() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_default_source((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetDither() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_dither((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetDouble(key *C.gchar) (_return_ C.gdouble) {
	_return_ = C._gtk_print_settings_get_double((*C.GtkPrintSettings)(_self_), key)
	return
}

func (_self_ *PrintSettings) GetDoubleWithDefault(key *C.gchar, def C.gdouble) (_return_ C.gdouble) {
	_return_ = C._gtk_print_settings_get_double_with_default((*C.GtkPrintSettings)(_self_), key, def)
	return
}

func (_self_ *PrintSettings) GetDuplex() (_return_ C.GtkPrintDuplex) {
	_return_ = C.gtk_print_settings_get_duplex((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetFinishings() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_finishings((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetInt(key *C.gchar) (_return_ C.gint) {
	_return_ = C._gtk_print_settings_get_int((*C.GtkPrintSettings)(_self_), key)
	return
}

func (_self_ *PrintSettings) GetIntWithDefault(key *C.gchar, def C.gint) (_return_ C.gint) {
	_return_ = C._gtk_print_settings_get_int_with_default((*C.GtkPrintSettings)(_self_), key, def)
	return
}

func (_self_ *PrintSettings) GetLength(key *C.gchar, unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C._gtk_print_settings_get_length((*C.GtkPrintSettings)(_self_), key, unit)
	return
}

func (_self_ *PrintSettings) GetMediaType() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_media_type((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetNCopies() (_return_ C.gint) {
	_return_ = C.gtk_print_settings_get_n_copies((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetNumberUp() (_return_ C.gint) {
	_return_ = C.gtk_print_settings_get_number_up((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetNumberUpLayout() (_return_ C.GtkNumberUpLayout) {
	_return_ = C.gtk_print_settings_get_number_up_layout((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOrientation() (_return_ C.GtkPageOrientation) {
	_return_ = C.gtk_print_settings_get_orientation((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetOutputBin() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_output_bin((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPageRanges() (_return_ *C.GtkPageRange, num_ranges *C.gint) {
	_return_ = C.gtk_print_settings_get_page_ranges((*C.GtkPrintSettings)(_self_), num_ranges)
	return
}

func (_self_ *PrintSettings) GetPageSet() (_return_ C.GtkPageSet) {
	_return_ = C.gtk_print_settings_get_page_set((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPaperHeight(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_print_settings_get_paper_height((*C.GtkPrintSettings)(_self_), unit)
	return
}

func (_self_ *PrintSettings) GetPaperSize() (_return_ *C.GtkPaperSize) {
	_return_ = C.gtk_print_settings_get_paper_size((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPaperWidth(unit C.GtkUnit) (_return_ C.gdouble) {
	_return_ = C.gtk_print_settings_get_paper_width((*C.GtkPrintSettings)(_self_), unit)
	return
}

func (_self_ *PrintSettings) GetPrintPages() (_return_ C.GtkPrintPages) {
	_return_ = C.gtk_print_settings_get_print_pages((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPrinter() (_return_ *C.gchar) {
	_return_ = C._gtk_print_settings_get_printer((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetPrinterLpi() (_return_ C.gdouble) {
	_return_ = C.gtk_print_settings_get_printer_lpi((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetQuality() (_return_ C.GtkPrintQuality) {
	_return_ = C.gtk_print_settings_get_quality((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetResolution() (_return_ C.gint) {
	_return_ = C.gtk_print_settings_get_resolution((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetResolutionX() (_return_ C.gint) {
	_return_ = C.gtk_print_settings_get_resolution_x((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetResolutionY() (_return_ C.gint) {
	_return_ = C.gtk_print_settings_get_resolution_y((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetReverse() (_return_ C.gboolean) {
	_return_ = C.gtk_print_settings_get_reverse((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetScale() (_return_ C.gdouble) {
	_return_ = C.gtk_print_settings_get_scale((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) GetUseColor() (_return_ C.gboolean) {
	_return_ = C.gtk_print_settings_get_use_color((*C.GtkPrintSettings)(_self_))
	return
}

func (_self_ *PrintSettings) HasKey(key *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_print_settings_has_key((*C.GtkPrintSettings)(_self_), key)
	return
}

func (_self_ *PrintSettings) LoadFile(file_name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_settings_load_file((*C.GtkPrintSettings)(_self_), file_name, _error_)
	return
}

func (_self_ *PrintSettings) LoadKeyFile(key_file *C.GKeyFile, group_name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_settings_load_key_file((*C.GtkPrintSettings)(_self_), key_file, group_name, _error_)
	return
}

func (_self_ *PrintSettings) Set(key *C.gchar, value *C.gchar) () {
	C._gtk_print_settings_set((*C.GtkPrintSettings)(_self_), key, value)
	return
}

func (_self_ *PrintSettings) SetBool(key *C.gchar, value C.gboolean) () {
	C._gtk_print_settings_set_bool((*C.GtkPrintSettings)(_self_), key, value)
	return
}

func (_self_ *PrintSettings) SetCollate(collate C.gboolean) () {
	C.gtk_print_settings_set_collate((*C.GtkPrintSettings)(_self_), collate)
	return
}

func (_self_ *PrintSettings) SetDefaultSource(default_source *C.gchar) () {
	C._gtk_print_settings_set_default_source((*C.GtkPrintSettings)(_self_), default_source)
	return
}

func (_self_ *PrintSettings) SetDither(dither *C.gchar) () {
	C._gtk_print_settings_set_dither((*C.GtkPrintSettings)(_self_), dither)
	return
}

func (_self_ *PrintSettings) SetDouble(key *C.gchar, value C.gdouble) () {
	C._gtk_print_settings_set_double((*C.GtkPrintSettings)(_self_), key, value)
	return
}

func (_self_ *PrintSettings) SetDuplex(duplex C.GtkPrintDuplex) () {
	C.gtk_print_settings_set_duplex((*C.GtkPrintSettings)(_self_), duplex)
	return
}

func (_self_ *PrintSettings) SetFinishings(finishings *C.gchar) () {
	C._gtk_print_settings_set_finishings((*C.GtkPrintSettings)(_self_), finishings)
	return
}

func (_self_ *PrintSettings) SetInt(key *C.gchar, value C.gint) () {
	C._gtk_print_settings_set_int((*C.GtkPrintSettings)(_self_), key, value)
	return
}

func (_self_ *PrintSettings) SetLength(key *C.gchar, value C.gdouble, unit C.GtkUnit) () {
	C._gtk_print_settings_set_length((*C.GtkPrintSettings)(_self_), key, value, unit)
	return
}

func (_self_ *PrintSettings) SetMediaType(media_type *C.gchar) () {
	C._gtk_print_settings_set_media_type((*C.GtkPrintSettings)(_self_), media_type)
	return
}

func (_self_ *PrintSettings) SetNCopies(num_copies C.gint) () {
	C.gtk_print_settings_set_n_copies((*C.GtkPrintSettings)(_self_), num_copies)
	return
}

func (_self_ *PrintSettings) SetNumberUp(number_up C.gint) () {
	C.gtk_print_settings_set_number_up((*C.GtkPrintSettings)(_self_), number_up)
	return
}

func (_self_ *PrintSettings) SetNumberUpLayout(number_up_layout C.GtkNumberUpLayout) () {
	C.gtk_print_settings_set_number_up_layout((*C.GtkPrintSettings)(_self_), number_up_layout)
	return
}

func (_self_ *PrintSettings) SetOrientation(orientation C.GtkPageOrientation) () {
	C.gtk_print_settings_set_orientation((*C.GtkPrintSettings)(_self_), orientation)
	return
}

func (_self_ *PrintSettings) SetOutputBin(output_bin *C.gchar) () {
	C._gtk_print_settings_set_output_bin((*C.GtkPrintSettings)(_self_), output_bin)
	return
}

func (_self_ *PrintSettings) SetPageRanges(page_ranges *C.GtkPageRange, num_ranges C.gint) () {
	C.gtk_print_settings_set_page_ranges((*C.GtkPrintSettings)(_self_), page_ranges, num_ranges)
	return
}

func (_self_ *PrintSettings) SetPageSet(page_set C.GtkPageSet) () {
	C.gtk_print_settings_set_page_set((*C.GtkPrintSettings)(_self_), page_set)
	return
}

func (_self_ *PrintSettings) SetPaperHeight(height C.gdouble, unit C.GtkUnit) () {
	C.gtk_print_settings_set_paper_height((*C.GtkPrintSettings)(_self_), height, unit)
	return
}

func (_self_ *PrintSettings) SetPaperSize(paper_size *C.GtkPaperSize) () {
	C.gtk_print_settings_set_paper_size((*C.GtkPrintSettings)(_self_), paper_size)
	return
}

func (_self_ *PrintSettings) SetPaperWidth(width C.gdouble, unit C.GtkUnit) () {
	C.gtk_print_settings_set_paper_width((*C.GtkPrintSettings)(_self_), width, unit)
	return
}

func (_self_ *PrintSettings) SetPrintPages(pages C.GtkPrintPages) () {
	C.gtk_print_settings_set_print_pages((*C.GtkPrintSettings)(_self_), pages)
	return
}

func (_self_ *PrintSettings) SetPrinter(printer *C.gchar) () {
	C._gtk_print_settings_set_printer((*C.GtkPrintSettings)(_self_), printer)
	return
}

func (_self_ *PrintSettings) SetPrinterLpi(lpi C.gdouble) () {
	C.gtk_print_settings_set_printer_lpi((*C.GtkPrintSettings)(_self_), lpi)
	return
}

func (_self_ *PrintSettings) SetQuality(quality C.GtkPrintQuality) () {
	C.gtk_print_settings_set_quality((*C.GtkPrintSettings)(_self_), quality)
	return
}

func (_self_ *PrintSettings) SetResolution(resolution C.gint) () {
	C.gtk_print_settings_set_resolution((*C.GtkPrintSettings)(_self_), resolution)
	return
}

func (_self_ *PrintSettings) SetResolutionXy(resolution_x C.gint, resolution_y C.gint) () {
	C.gtk_print_settings_set_resolution_xy((*C.GtkPrintSettings)(_self_), resolution_x, resolution_y)
	return
}

func (_self_ *PrintSettings) SetReverse(reverse C.gboolean) () {
	C.gtk_print_settings_set_reverse((*C.GtkPrintSettings)(_self_), reverse)
	return
}

func (_self_ *PrintSettings) SetScale(scale C.gdouble) () {
	C.gtk_print_settings_set_scale((*C.GtkPrintSettings)(_self_), scale)
	return
}

func (_self_ *PrintSettings) SetUseColor(use_color C.gboolean) () {
	C.gtk_print_settings_set_use_color((*C.GtkPrintSettings)(_self_), use_color)
	return
}

func (_self_ *PrintSettings) ToFile(file_name *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_print_settings_to_file((*C.GtkPrintSettings)(_self_), file_name, _error_)
	return
}

func (_self_ *PrintSettings) ToKeyFile(key_file *C.GKeyFile, group_name *C.gchar) () {
	C._gtk_print_settings_to_key_file((*C.GtkPrintSettings)(_self_), key_file, group_name)
	return
}

func (_self_ *PrintSettings) Unset(key *C.gchar) () {
	C._gtk_print_settings_unset((*C.GtkPrintSettings)(_self_), key)
	return
}

func ProgressBarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_progress_bar_new()
	return
}

func (_self_ *ProgressBar) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_progress_bar_get_ellipsize((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetFraction() (_return_ C.gdouble) {
	_return_ = C.gtk_progress_bar_get_fraction((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetInverted() (_return_ C.gboolean) {
	_return_ = C.gtk_progress_bar_get_inverted((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetPulseStep() (_return_ C.gdouble) {
	_return_ = C.gtk_progress_bar_get_pulse_step((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetShowText() (_return_ C.gboolean) {
	_return_ = C.gtk_progress_bar_get_show_text((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) GetText() (_return_ *C.gchar) {
	_return_ = C._gtk_progress_bar_get_text((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) Pulse() () {
	C.gtk_progress_bar_pulse((*C.GtkProgressBar)(_self_))
	return
}

func (_self_ *ProgressBar) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.gtk_progress_bar_set_ellipsize((*C.GtkProgressBar)(_self_), mode)
	return
}

func (_self_ *ProgressBar) SetFraction(fraction C.gdouble) () {
	C.gtk_progress_bar_set_fraction((*C.GtkProgressBar)(_self_), fraction)
	return
}

func (_self_ *ProgressBar) SetInverted(inverted C.gboolean) () {
	C.gtk_progress_bar_set_inverted((*C.GtkProgressBar)(_self_), inverted)
	return
}

func (_self_ *ProgressBar) SetPulseStep(fraction C.gdouble) () {
	C.gtk_progress_bar_set_pulse_step((*C.GtkProgressBar)(_self_), fraction)
	return
}

func (_self_ *ProgressBar) SetShowText(show_text C.gboolean) () {
	C.gtk_progress_bar_set_show_text((*C.GtkProgressBar)(_self_), show_text)
	return
}

func (_self_ *ProgressBar) SetText(text *C.gchar) () {
	C._gtk_progress_bar_set_text((*C.GtkProgressBar)(_self_), text)
	return
}

func RadioActionNew(name *C.gchar, label *C.gchar, tooltip *C.gchar, stock_id *C.gchar, value C.gint) (_return_ *C.GtkRadioAction) {
	_return_ = C._gtk_radio_action_new(name, label, tooltip, stock_id, value)
	return
}

func (_self_ *RadioAction) GetCurrentValue() (_return_ C.gint) {
	_return_ = C.gtk_radio_action_get_current_value((*C.GtkRadioAction)(_self_))
	return
}

func (_self_ *RadioAction) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_action_get_group((*C.GtkRadioAction)(_self_))
	return
}

func (_self_ *RadioAction) JoinGroup(group_source *C.GtkRadioAction) () {
	C.gtk_radio_action_join_group((*C.GtkRadioAction)(_self_), group_source)
	return
}

func (_self_ *RadioAction) SetCurrentValue(current_value C.gint) () {
	C.gtk_radio_action_set_current_value((*C.GtkRadioAction)(_self_), current_value)
	return
}

func (_self_ *RadioAction) SetGroup(group *C.GSList) () {
	C.gtk_radio_action_set_group((*C.GtkRadioAction)(_self_), group)
	return
}

func RadioButtonNew(group *C.GSList) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_radio_button_new(group)
	return
}

func RadioButtonNewFromWidget(radio_group_member *C.GtkRadioButton) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_radio_button_new_from_widget(radio_group_member)
	return
}

func RadioButtonNewWithLabel(group *C.GSList, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_button_new_with_label(group, label)
	return
}

func RadioButtonNewWithLabelFromWidget(radio_group_member *C.GtkRadioButton, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_button_new_with_label_from_widget(radio_group_member, label)
	return
}

func RadioButtonNewWithMnemonic(group *C.GSList, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_button_new_with_mnemonic(group, label)
	return
}

func RadioButtonNewWithMnemonicFromWidget(radio_group_member *C.GtkRadioButton, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_button_new_with_mnemonic_from_widget(radio_group_member, label)
	return
}

func (_self_ *RadioButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_button_get_group((*C.GtkRadioButton)(_self_))
	return
}

func (_self_ *RadioButton) JoinGroup(group_source *C.GtkRadioButton) () {
	C.gtk_radio_button_join_group((*C.GtkRadioButton)(_self_), group_source)
	return
}

func (_self_ *RadioButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_button_set_group((*C.GtkRadioButton)(_self_), group)
	return
}

func RadioMenuItemNew(group *C.GSList) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_radio_menu_item_new(group)
	return
}

func RadioMenuItemNewFromWidget(group *C.GtkRadioMenuItem) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_radio_menu_item_new_from_widget(group)
	return
}

func RadioMenuItemNewWithLabel(group *C.GSList, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_menu_item_new_with_label(group, label)
	return
}

func RadioMenuItemNewWithLabelFromWidget(group *C.GtkRadioMenuItem, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_menu_item_new_with_label_from_widget(group, label)
	return
}

func RadioMenuItemNewWithMnemonic(group *C.GSList, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic(group, label)
	return
}

func RadioMenuItemNewWithMnemonicFromWidget(group *C.GtkRadioMenuItem, label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_radio_menu_item_new_with_mnemonic_from_widget(group, label)
	return
}

func (_self_ *RadioMenuItem) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_menu_item_get_group((*C.GtkRadioMenuItem)(_self_))
	return
}

func (_self_ *RadioMenuItem) SetGroup(group *C.GSList) () {
	C.gtk_radio_menu_item_set_group((*C.GtkRadioMenuItem)(_self_), group)
	return
}

func RadioToolButtonNew(group *C.GSList) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_radio_tool_button_new(group)
	return
}

func RadioToolButtonNewFromStock(group *C.GSList, stock_id *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_radio_tool_button_new_from_stock(group, stock_id)
	return
}

func RadioToolButtonNewFromWidget(group *C.GtkRadioToolButton) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_radio_tool_button_new_from_widget(group)
	return
}

func RadioToolButtonNewWithStockFromWidget(group *C.GtkRadioToolButton, stock_id *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_radio_tool_button_new_with_stock_from_widget(group, stock_id)
	return
}

func (_self_ *RadioToolButton) GetGroup() (_return_ *C.GSList) {
	_return_ = C.gtk_radio_tool_button_get_group((*C.GtkRadioToolButton)(_self_))
	return
}

func (_self_ *RadioToolButton) SetGroup(group *C.GSList) () {
	C.gtk_radio_tool_button_set_group((*C.GtkRadioToolButton)(_self_), group)
	return
}

func (_self_ *Range) GetAdjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_range_get_adjustment((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetFillLevel() (_return_ C.gdouble) {
	_return_ = C.gtk_range_get_fill_level((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetFlippable() (_return_ C.gboolean) {
	_return_ = C.gtk_range_get_flippable((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetInverted() (_return_ C.gboolean) {
	_return_ = C.gtk_range_get_inverted((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetLowerStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_lower_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetMinSliderSize() (_return_ C.gint) {
	_return_ = C.gtk_range_get_min_slider_size((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetRangeRect() (range_rect *C.GdkRectangle) {
	C.gtk_range_get_range_rect((*C.GtkRange)(_self_), range_rect)
	return
}

func (_self_ *Range) GetRestrictToFillLevel() (_return_ C.gboolean) {
	_return_ = C.gtk_range_get_restrict_to_fill_level((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetRoundDigits() (_return_ C.gint) {
	_return_ = C.gtk_range_get_round_digits((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetShowFillLevel() (_return_ C.gboolean) {
	_return_ = C.gtk_range_get_show_fill_level((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetSliderRange() (slider_start *C.gint, slider_end *C.gint) {
	C.gtk_range_get_slider_range((*C.GtkRange)(_self_), slider_start, slider_end)
	return
}

func (_self_ *Range) GetSliderSizeFixed() (_return_ C.gboolean) {
	_return_ = C.gtk_range_get_slider_size_fixed((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetUpperStepperSensitivity() (_return_ C.GtkSensitivityType) {
	_return_ = C.gtk_range_get_upper_stepper_sensitivity((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) GetValue() (_return_ C.gdouble) {
	_return_ = C.gtk_range_get_value((*C.GtkRange)(_self_))
	return
}

func (_self_ *Range) SetAdjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_range_set_adjustment((*C.GtkRange)(_self_), adjustment)
	return
}

func (_self_ *Range) SetFillLevel(fill_level C.gdouble) () {
	C.gtk_range_set_fill_level((*C.GtkRange)(_self_), fill_level)
	return
}

func (_self_ *Range) SetFlippable(flippable C.gboolean) () {
	C.gtk_range_set_flippable((*C.GtkRange)(_self_), flippable)
	return
}

func (_self_ *Range) SetIncrements(step C.gdouble, page C.gdouble) () {
	C.gtk_range_set_increments((*C.GtkRange)(_self_), step, page)
	return
}

func (_self_ *Range) SetInverted(setting C.gboolean) () {
	C.gtk_range_set_inverted((*C.GtkRange)(_self_), setting)
	return
}

func (_self_ *Range) SetLowerStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_lower_stepper_sensitivity((*C.GtkRange)(_self_), sensitivity)
	return
}

func (_self_ *Range) SetMinSliderSize(min_size C.gint) () {
	C.gtk_range_set_min_slider_size((*C.GtkRange)(_self_), min_size)
	return
}

func (_self_ *Range) SetRange(min C.gdouble, max C.gdouble) () {
	C.gtk_range_set_range((*C.GtkRange)(_self_), min, max)
	return
}

func (_self_ *Range) SetRestrictToFillLevel(restrict_to_fill_level C.gboolean) () {
	C.gtk_range_set_restrict_to_fill_level((*C.GtkRange)(_self_), restrict_to_fill_level)
	return
}

func (_self_ *Range) SetRoundDigits(round_digits C.gint) () {
	C.gtk_range_set_round_digits((*C.GtkRange)(_self_), round_digits)
	return
}

func (_self_ *Range) SetShowFillLevel(show_fill_level C.gboolean) () {
	C.gtk_range_set_show_fill_level((*C.GtkRange)(_self_), show_fill_level)
	return
}

func (_self_ *Range) SetSliderSizeFixed(size_fixed C.gboolean) () {
	C.gtk_range_set_slider_size_fixed((*C.GtkRange)(_self_), size_fixed)
	return
}

func (_self_ *Range) SetUpperStepperSensitivity(sensitivity C.GtkSensitivityType) () {
	C.gtk_range_set_upper_stepper_sensitivity((*C.GtkRange)(_self_), sensitivity)
	return
}

func (_self_ *Range) SetValue(value C.gdouble) () {
	C.gtk_range_set_value((*C.GtkRange)(_self_), value)
	return
}

func RecentActionNew(name *C.gchar, label *C.gchar, tooltip *C.gchar, stock_id *C.gchar) (_return_ *C.GtkAction) {
	_return_ = C._gtk_recent_action_new(name, label, tooltip, stock_id)
	return
}

func RecentActionNewForManager(name *C.gchar, label *C.gchar, tooltip *C.gchar, stock_id *C.gchar, manager *C.GtkRecentManager) (_return_ *C.GtkAction) {
	_return_ = C._gtk_recent_action_new_for_manager(name, label, tooltip, stock_id, manager)
	return
}

func (_self_ *RecentAction) GetShowNumbers() (_return_ C.gboolean) {
	_return_ = C.gtk_recent_action_get_show_numbers((*C.GtkRecentAction)(_self_))
	return
}

func (_self_ *RecentAction) SetShowNumbers(show_numbers C.gboolean) () {
	C.gtk_recent_action_set_show_numbers((*C.GtkRecentAction)(_self_), show_numbers)
	return
}

func RecentChooserMenuNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_recent_chooser_menu_new()
	return
}

func RecentChooserMenuNewForManager(manager *C.GtkRecentManager) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_recent_chooser_menu_new_for_manager(manager)
	return
}

func (_self_ *RecentChooserMenu) GetShowNumbers() (_return_ C.gboolean) {
	_return_ = C.gtk_recent_chooser_menu_get_show_numbers((*C.GtkRecentChooserMenu)(_self_))
	return
}

func (_self_ *RecentChooserMenu) SetShowNumbers(show_numbers C.gboolean) () {
	C.gtk_recent_chooser_menu_set_show_numbers((*C.GtkRecentChooserMenu)(_self_), show_numbers)
	return
}

func RecentChooserWidgetNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_recent_chooser_widget_new()
	return
}

func RecentChooserWidgetNewForManager(manager *C.GtkRecentManager) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_recent_chooser_widget_new_for_manager(manager)
	return
}

func RecentFilterNew() (_return_ *C.GtkRecentFilter) {
	_return_ = C.gtk_recent_filter_new()
	return
}

func (_self_ *RecentFilter) AddAge(days C.gint) () {
	C.gtk_recent_filter_add_age((*C.GtkRecentFilter)(_self_), days)
	return
}

func (_self_ *RecentFilter) AddApplication(application *C.gchar) () {
	C._gtk_recent_filter_add_application((*C.GtkRecentFilter)(_self_), application)
	return
}

func (_self_ *RecentFilter) AddCustom(needed C.GtkRecentFilterFlags, func_ C.GtkRecentFilterFunc, data C.gpointer, data_destroy C.GDestroyNotify) () {
	C.gtk_recent_filter_add_custom((*C.GtkRecentFilter)(_self_), needed, func_, data, data_destroy)
	return
}

func (_self_ *RecentFilter) AddGroup(group *C.gchar) () {
	C._gtk_recent_filter_add_group((*C.GtkRecentFilter)(_self_), group)
	return
}

func (_self_ *RecentFilter) AddMimeType(mime_type *C.gchar) () {
	C._gtk_recent_filter_add_mime_type((*C.GtkRecentFilter)(_self_), mime_type)
	return
}

func (_self_ *RecentFilter) AddPattern(pattern *C.gchar) () {
	C._gtk_recent_filter_add_pattern((*C.GtkRecentFilter)(_self_), pattern)
	return
}

func (_self_ *RecentFilter) AddPixbufFormats() () {
	C.gtk_recent_filter_add_pixbuf_formats((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) Filter(filter_info *C.GtkRecentFilterInfo) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_filter_filter((*C.GtkRecentFilter)(_self_), filter_info)
	return
}

func (_self_ *RecentFilter) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_recent_filter_get_name((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) GetNeeded() (_return_ C.GtkRecentFilterFlags) {
	_return_ = C.gtk_recent_filter_get_needed((*C.GtkRecentFilter)(_self_))
	return
}

func (_self_ *RecentFilter) SetName(name *C.gchar) () {
	C._gtk_recent_filter_set_name((*C.GtkRecentFilter)(_self_), name)
	return
}

func (_self_ *RecentInfo) CreateAppInfo(app_name *C.gchar) (_return_ *C.GAppInfo, _error_ unsafe.Pointer) {
	_return_ = C._gtk_recent_info_create_app_info((*C.GtkRecentInfo)(_self_), app_name, _error_)
	return
}

func (_self_ *RecentInfo) Exists() (_return_ C.gboolean) {
	_return_ = C.gtk_recent_info_exists((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetAdded() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_added((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetAge() (_return_ C.gint) {
	_return_ = C.gtk_recent_info_get_age((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetApplicationInfo(app_name *C.gchar) (_return_ C.gboolean, app_exec unsafe.Pointer, count *C.guint, time_ *C.time_t) {
	_return_ = C._gtk_recent_info_get_application_info((*C.GtkRecentInfo)(_self_), app_name, app_exec, count, time_)
	return
}

func (_self_ *RecentInfo) GetApplications() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._gtk_recent_info_get_applications((*C.GtkRecentInfo)(_self_), length)
	return
}

func (_self_ *RecentInfo) GetDescription() (_return_ *C.gchar) {
	_return_ = C._gtk_recent_info_get_description((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetDisplayName() (_return_ *C.gchar) {
	_return_ = C._gtk_recent_info_get_display_name((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_recent_info_get_gicon((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetGroups() (_return_ unsafe.Pointer, length *C.gsize) {
	_return_ = C._gtk_recent_info_get_groups((*C.GtkRecentInfo)(_self_), length)
	return
}

func (_self_ *RecentInfo) GetIcon(size C.gint) (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_recent_info_get_icon((*C.GtkRecentInfo)(_self_), size)
	return
}

func (_self_ *RecentInfo) GetMimeType() (_return_ *C.gchar) {
	_return_ = C._gtk_recent_info_get_mime_type((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetModified() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_modified((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetPrivateHint() (_return_ C.gboolean) {
	_return_ = C.gtk_recent_info_get_private_hint((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetShortName() (_return_ *C.gchar) {
	_return_ = C.gtk_recent_info_get_short_name((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetUri() (_return_ *C.gchar) {
	_return_ = C._gtk_recent_info_get_uri((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetUriDisplay() (_return_ *C.gchar) {
	_return_ = C.gtk_recent_info_get_uri_display((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) GetVisited() (_return_ C.time_t) {
	_return_ = C.gtk_recent_info_get_visited((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) HasApplication(app_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_info_has_application((*C.GtkRecentInfo)(_self_), app_name)
	return
}

func (_self_ *RecentInfo) HasGroup(group_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_info_has_group((*C.GtkRecentInfo)(_self_), group_name)
	return
}

func (_self_ *RecentInfo) IsLocal() (_return_ C.gboolean) {
	_return_ = C.gtk_recent_info_is_local((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) LastApplication() (_return_ *C.gchar) {
	_return_ = C.gtk_recent_info_last_application((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) Match(info_b *C.GtkRecentInfo) (_return_ C.gboolean) {
	_return_ = C.gtk_recent_info_match((*C.GtkRecentInfo)(_self_), info_b)
	return
}

func (_self_ *RecentInfo) Ref() (_return_ *C.GtkRecentInfo) {
	_return_ = C.gtk_recent_info_ref((*C.GtkRecentInfo)(_self_))
	return
}

func (_self_ *RecentInfo) Unref() () {
	C.gtk_recent_info_unref((*C.GtkRecentInfo)(_self_))
	return
}

func RecentManagerNew() (_return_ *C.GtkRecentManager) {
	_return_ = C.gtk_recent_manager_new()
	return
}

func RecentManagerGetDefault() (_return_ *C.GtkRecentManager) {
	_return_ = C.gtk_recent_manager_get_default()
	return
}

func (_self_ *RecentManager) AddFull(uri *C.gchar, recent_data *C.GtkRecentData) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_manager_add_full((*C.GtkRecentManager)(_self_), uri, recent_data)
	return
}

func (_self_ *RecentManager) AddItem(uri *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_manager_add_item((*C.GtkRecentManager)(_self_), uri)
	return
}

func (_self_ *RecentManager) GetItems() (_return_ *C.GList) {
	_return_ = C.gtk_recent_manager_get_items((*C.GtkRecentManager)(_self_))
	return
}

func (_self_ *RecentManager) HasItem(uri *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_recent_manager_has_item((*C.GtkRecentManager)(_self_), uri)
	return
}

func (_self_ *RecentManager) LookupItem(uri *C.gchar) (_return_ *C.GtkRecentInfo, _error_ unsafe.Pointer) {
	_return_ = C._gtk_recent_manager_lookup_item((*C.GtkRecentManager)(_self_), uri, _error_)
	return
}

func (_self_ *RecentManager) MoveItem(uri *C.gchar, new_uri *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_recent_manager_move_item((*C.GtkRecentManager)(_self_), uri, new_uri, _error_)
	return
}

func (_self_ *RecentManager) PurgeItems() (_return_ C.gint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_recent_manager_purge_items((*C.GtkRecentManager)(_self_), _error_)
	return
}

func (_self_ *RecentManager) RemoveItem(uri *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_recent_manager_remove_item((*C.GtkRecentManager)(_self_), uri, _error_)
	return
}

func RequisitionNew() (_return_ *C.GtkRequisition) {
	_return_ = C.gtk_requisition_new()
	return
}

func (_self_ *Requisition) Copy() (_return_ *C.GtkRequisition) {
	_return_ = C._gtk_requisition_copy((*C.GtkRequisition)(_self_))
	return
}

func (_self_ *Requisition) Free() () {
	C.gtk_requisition_free((*C.GtkRequisition)(_self_))
	return
}

func ScaleNew(orientation C.GtkOrientation, adjustment *C.GtkAdjustment) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scale_new(orientation, adjustment)
	return
}

func ScaleNewWithRange(orientation C.GtkOrientation, min C.gdouble, max C.gdouble, step C.gdouble) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scale_new_with_range(orientation, min, max, step)
	return
}

func (_self_ *Scale) AddMark(value C.gdouble, position C.GtkPositionType, markup *C.gchar) () {
	C._gtk_scale_add_mark((*C.GtkScale)(_self_), value, position, markup)
	return
}

func (_self_ *Scale) ClearMarks() () {
	C.gtk_scale_clear_marks((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetDigits() (_return_ C.gint) {
	_return_ = C.gtk_scale_get_digits((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetDrawValue() (_return_ C.gboolean) {
	_return_ = C.gtk_scale_get_draw_value((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetHasOrigin() (_return_ C.gboolean) {
	_return_ = C.gtk_scale_get_has_origin((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.gtk_scale_get_layout((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) GetLayoutOffsets() (x *C.gint, y *C.gint) {
	C.gtk_scale_get_layout_offsets((*C.GtkScale)(_self_), x, y)
	return
}

func (_self_ *Scale) GetValuePos() (_return_ C.GtkPositionType) {
	_return_ = C.gtk_scale_get_value_pos((*C.GtkScale)(_self_))
	return
}

func (_self_ *Scale) SetDigits(digits C.gint) () {
	C.gtk_scale_set_digits((*C.GtkScale)(_self_), digits)
	return
}

func (_self_ *Scale) SetDrawValue(draw_value C.gboolean) () {
	C.gtk_scale_set_draw_value((*C.GtkScale)(_self_), draw_value)
	return
}

func (_self_ *Scale) SetHasOrigin(has_origin C.gboolean) () {
	C.gtk_scale_set_has_origin((*C.GtkScale)(_self_), has_origin)
	return
}

func (_self_ *Scale) SetValuePos(pos C.GtkPositionType) () {
	C.gtk_scale_set_value_pos((*C.GtkScale)(_self_), pos)
	return
}

func ScaleButtonNew(size C.GtkIconSize, min C.gdouble, max C.gdouble, step C.gdouble, icons unsafe.Pointer) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_scale_button_new(size, min, max, step, icons)
	return
}

func (_self_ *ScaleButton) GetAdjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_scale_button_get_adjustment((*C.GtkScaleButton)(_self_))
	return
}

func (_self_ *ScaleButton) GetMinusButton() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scale_button_get_minus_button((*C.GtkScaleButton)(_self_))
	return
}

func (_self_ *ScaleButton) GetPlusButton() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scale_button_get_plus_button((*C.GtkScaleButton)(_self_))
	return
}

func (_self_ *ScaleButton) GetPopup() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scale_button_get_popup((*C.GtkScaleButton)(_self_))
	return
}

func (_self_ *ScaleButton) GetValue() (_return_ C.gdouble) {
	_return_ = C.gtk_scale_button_get_value((*C.GtkScaleButton)(_self_))
	return
}

func (_self_ *ScaleButton) SetAdjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_scale_button_set_adjustment((*C.GtkScaleButton)(_self_), adjustment)
	return
}

func (_self_ *ScaleButton) SetIcons(icons unsafe.Pointer) () {
	C._gtk_scale_button_set_icons((*C.GtkScaleButton)(_self_), icons)
	return
}

func (_self_ *ScaleButton) SetValue(value C.gdouble) () {
	C.gtk_scale_button_set_value((*C.GtkScaleButton)(_self_), value)
	return
}

func ScrollbarNew(orientation C.GtkOrientation, adjustment *C.GtkAdjustment) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scrollbar_new(orientation, adjustment)
	return
}

func ScrolledWindowNew(hadjustment *C.GtkAdjustment, vadjustment *C.GtkAdjustment) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scrolled_window_new(hadjustment, vadjustment)
	return
}

func (_self_ *ScrolledWindow) AddWithViewport(child *C.GtkWidget) () {
	C.gtk_scrolled_window_add_with_viewport((*C.GtkScrolledWindow)(_self_), child)
	return
}

func (_self_ *ScrolledWindow) GetCaptureButtonPress() (_return_ C.gboolean) {
	_return_ = C.gtk_scrolled_window_get_capture_button_press((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetHadjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_scrolled_window_get_hadjustment((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetHscrollbar() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scrolled_window_get_hscrollbar((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetKineticScrolling() (_return_ C.gboolean) {
	_return_ = C.gtk_scrolled_window_get_kinetic_scrolling((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetMinContentHeight() (_return_ C.gint) {
	_return_ = C.gtk_scrolled_window_get_min_content_height((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetMinContentWidth() (_return_ C.gint) {
	_return_ = C.gtk_scrolled_window_get_min_content_width((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetPlacement() (_return_ C.GtkCornerType) {
	_return_ = C.gtk_scrolled_window_get_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetPolicy() (hscrollbar_policy *C.GtkPolicyType, vscrollbar_policy *C.GtkPolicyType) {
	C.gtk_scrolled_window_get_policy((*C.GtkScrolledWindow)(_self_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *ScrolledWindow) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_scrolled_window_get_shadow_type((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetVadjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_scrolled_window_get_vadjustment((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) GetVscrollbar() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_scrolled_window_get_vscrollbar((*C.GtkScrolledWindow)(_self_))
	return
}

func (_self_ *ScrolledWindow) SetCaptureButtonPress(capture_button_press C.gboolean) () {
	C.gtk_scrolled_window_set_capture_button_press((*C.GtkScrolledWindow)(_self_), capture_button_press)
	return
}

func (_self_ *ScrolledWindow) SetHadjustment(hadjustment *C.GtkAdjustment) () {
	C.gtk_scrolled_window_set_hadjustment((*C.GtkScrolledWindow)(_self_), hadjustment)
	return
}

func (_self_ *ScrolledWindow) SetKineticScrolling(kinetic_scrolling C.gboolean) () {
	C.gtk_scrolled_window_set_kinetic_scrolling((*C.GtkScrolledWindow)(_self_), kinetic_scrolling)
	return
}

func (_self_ *ScrolledWindow) SetMinContentHeight(height C.gint) () {
	C.gtk_scrolled_window_set_min_content_height((*C.GtkScrolledWindow)(_self_), height)
	return
}

func (_self_ *ScrolledWindow) SetMinContentWidth(width C.gint) () {
	C.gtk_scrolled_window_set_min_content_width((*C.GtkScrolledWindow)(_self_), width)
	return
}

func (_self_ *ScrolledWindow) SetPlacement(window_placement C.GtkCornerType) () {
	C.gtk_scrolled_window_set_placement((*C.GtkScrolledWindow)(_self_), window_placement)
	return
}

func (_self_ *ScrolledWindow) SetPolicy(hscrollbar_policy C.GtkPolicyType, vscrollbar_policy C.GtkPolicyType) () {
	C.gtk_scrolled_window_set_policy((*C.GtkScrolledWindow)(_self_), hscrollbar_policy, vscrollbar_policy)
	return
}

func (_self_ *ScrolledWindow) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_scrolled_window_set_shadow_type((*C.GtkScrolledWindow)(_self_), type_)
	return
}

func (_self_ *ScrolledWindow) SetVadjustment(vadjustment *C.GtkAdjustment) () {
	C.gtk_scrolled_window_set_vadjustment((*C.GtkScrolledWindow)(_self_), vadjustment)
	return
}

func (_self_ *ScrolledWindow) UnsetPlacement() () {
	C.gtk_scrolled_window_unset_placement((*C.GtkScrolledWindow)(_self_))
	return
}

func SearchEntryNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_search_entry_new()
	return
}

func (_self_ *SelectionData) Copy() (_return_ *C.GtkSelectionData) {
	_return_ = C._gtk_selection_data_copy((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) Free() () {
	C.gtk_selection_data_free((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetData() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_data((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataType() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_data_type((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetDataWithLength() (_return_ *C.guchar, length *C.gint) {
	_return_ = C._gtk_selection_data_get_data_with_length((*C.GtkSelectionData)(_self_), length)
	return
}

func (_self_ *SelectionData) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C._gtk_selection_data_get_display((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetFormat() (_return_ C.gint) {
	_return_ = C._gtk_selection_data_get_format((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetLength() (_return_ C.gint) {
	_return_ = C._gtk_selection_data_get_length((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_selection_data_get_pixbuf((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetSelection() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_selection((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetTarget() (_return_ C.GdkAtom) {
	_return_ = C._gtk_selection_data_get_target((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetTargets() (_return_ C.gboolean, targets unsafe.Pointer, n_atoms *C.gint) {
	_return_ = C._gtk_selection_data_get_targets((*C.GtkSelectionData)(_self_), targets, n_atoms)
	return
}

func (_self_ *SelectionData) GetText() (_return_ *C.guchar) {
	_return_ = C._gtk_selection_data_get_text((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) GetUris() (_return_ unsafe.Pointer) {
	_return_ = C._gtk_selection_data_get_uris((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) Set(type_ C.GdkAtom, format C.gint, data *C.guchar, length C.gint) () {
	C._gtk_selection_data_set((*C.GtkSelectionData)(_self_), type_, format, data, length)
	return
}

func (_self_ *SelectionData) SetPixbuf(pixbuf *C.GdkPixbuf) (_return_ C.gboolean) {
	_return_ = C.gtk_selection_data_set_pixbuf((*C.GtkSelectionData)(_self_), pixbuf)
	return
}

func (_self_ *SelectionData) SetText(str *C.gchar, len_ C.gint) (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_set_text((*C.GtkSelectionData)(_self_), str, len_)
	return
}

func (_self_ *SelectionData) SetUris(uris unsafe.Pointer) (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_set_uris((*C.GtkSelectionData)(_self_), uris)
	return
}

func (_self_ *SelectionData) TargetsIncludeImage(writable C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_targets_include_image((*C.GtkSelectionData)(_self_), writable)
	return
}

func (_self_ *SelectionData) TargetsIncludeRichText(buffer *C.GtkTextBuffer) (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_targets_include_rich_text((*C.GtkSelectionData)(_self_), buffer)
	return
}

func (_self_ *SelectionData) TargetsIncludeText() (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_targets_include_text((*C.GtkSelectionData)(_self_))
	return
}

func (_self_ *SelectionData) TargetsIncludeUri() (_return_ C.gboolean) {
	_return_ = C._gtk_selection_data_targets_include_uri((*C.GtkSelectionData)(_self_))
	return
}

func SeparatorNew(orientation C.GtkOrientation) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_separator_new(orientation)
	return
}

func SeparatorMenuItemNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_separator_menu_item_new()
	return
}

func SeparatorToolItemNew() (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_separator_tool_item_new()
	return
}

func (_self_ *SeparatorToolItem) GetDraw() (_return_ C.gboolean) {
	_return_ = C.gtk_separator_tool_item_get_draw((*C.GtkSeparatorToolItem)(_self_))
	return
}

func (_self_ *SeparatorToolItem) SetDraw(draw C.gboolean) () {
	C.gtk_separator_tool_item_set_draw((*C.GtkSeparatorToolItem)(_self_), draw)
	return
}

func SettingsGetDefault() (_return_ *C.GtkSettings) {
	_return_ = C.gtk_settings_get_default()
	return
}

func SettingsGetForScreen(screen *C.GdkScreen) (_return_ *C.GtkSettings) {
	_return_ = C.gtk_settings_get_for_screen(screen)
	return
}

func SettingsInstallProperty(pspec *C.GParamSpec) () {
	C.gtk_settings_install_property(pspec)
	return
}

func SettingsInstallPropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_settings_install_property_parser(pspec, parser)
	return
}

func (_self_ *Settings) SetDoubleProperty(name *C.gchar, v_double C.gdouble, origin *C.gchar) () {
	C._gtk_settings_set_double_property((*C.GtkSettings)(_self_), name, v_double, origin)
	return
}

func (_self_ *Settings) SetLongProperty(name *C.gchar, v_long C.glong, origin *C.gchar) () {
	C._gtk_settings_set_long_property((*C.GtkSettings)(_self_), name, v_long, origin)
	return
}

func (_self_ *Settings) SetPropertyValue(name *C.gchar, svalue *C.GtkSettingsValue) () {
	C._gtk_settings_set_property_value((*C.GtkSettings)(_self_), name, svalue)
	return
}

func (_self_ *Settings) SetStringProperty(name *C.gchar, v_string *C.gchar, origin *C.gchar) () {
	C._gtk_settings_set_string_property((*C.GtkSettings)(_self_), name, v_string, origin)
	return
}

func SizeGroupNew(mode C.GtkSizeGroupMode) (_return_ *C.GtkSizeGroup) {
	_return_ = C.gtk_size_group_new(mode)
	return
}

func (_self_ *SizeGroup) AddWidget(widget *C.GtkWidget) () {
	C.gtk_size_group_add_widget((*C.GtkSizeGroup)(_self_), widget)
	return
}

func (_self_ *SizeGroup) GetIgnoreHidden() (_return_ C.gboolean) {
	_return_ = C.gtk_size_group_get_ignore_hidden((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) GetMode() (_return_ C.GtkSizeGroupMode) {
	_return_ = C.gtk_size_group_get_mode((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) GetWidgets() (_return_ *C.GSList) {
	_return_ = C.gtk_size_group_get_widgets((*C.GtkSizeGroup)(_self_))
	return
}

func (_self_ *SizeGroup) RemoveWidget(widget *C.GtkWidget) () {
	C.gtk_size_group_remove_widget((*C.GtkSizeGroup)(_self_), widget)
	return
}

func (_self_ *SizeGroup) SetIgnoreHidden(ignore_hidden C.gboolean) () {
	C.gtk_size_group_set_ignore_hidden((*C.GtkSizeGroup)(_self_), ignore_hidden)
	return
}

func (_self_ *SizeGroup) SetMode(mode C.GtkSizeGroupMode) () {
	C.gtk_size_group_set_mode((*C.GtkSizeGroup)(_self_), mode)
	return
}

func SocketNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_socket_new()
	return
}

func (_self_ *Socket) AddId(window C.Window) () {
	C.gtk_socket_add_id((*C.GtkSocket)(_self_), window)
	return
}

func (_self_ *Socket) GetId() (_return_ C.Window) {
	_return_ = C.gtk_socket_get_id((*C.GtkSocket)(_self_))
	return
}

func (_self_ *Socket) GetPlugWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_socket_get_plug_window((*C.GtkSocket)(_self_))
	return
}

func SpinButtonNew(adjustment *C.GtkAdjustment, climb_rate C.gdouble, digits C.guint) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_spin_button_new(adjustment, climb_rate, digits)
	return
}

func SpinButtonNewWithRange(min C.gdouble, max C.gdouble, step C.gdouble) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_spin_button_new_with_range(min, max, step)
	return
}

func (_self_ *SpinButton) Configure(adjustment *C.GtkAdjustment, climb_rate C.gdouble, digits C.guint) () {
	C.gtk_spin_button_configure((*C.GtkSpinButton)(_self_), adjustment, climb_rate, digits)
	return
}

func (_self_ *SpinButton) GetAdjustment() (_return_ *C.GtkAdjustment) {
	_return_ = C.gtk_spin_button_get_adjustment((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetDigits() (_return_ C.guint) {
	_return_ = C.gtk_spin_button_get_digits((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetIncrements() (step *C.gdouble, page *C.gdouble) {
	C.gtk_spin_button_get_increments((*C.GtkSpinButton)(_self_), step, page)
	return
}

func (_self_ *SpinButton) GetNumeric() (_return_ C.gboolean) {
	_return_ = C.gtk_spin_button_get_numeric((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetRange() (min *C.gdouble, max *C.gdouble) {
	C.gtk_spin_button_get_range((*C.GtkSpinButton)(_self_), min, max)
	return
}

func (_self_ *SpinButton) GetSnapToTicks() (_return_ C.gboolean) {
	_return_ = C.gtk_spin_button_get_snap_to_ticks((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetUpdatePolicy() (_return_ C.GtkSpinButtonUpdatePolicy) {
	_return_ = C.gtk_spin_button_get_update_policy((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetValue() (_return_ C.gdouble) {
	_return_ = C.gtk_spin_button_get_value((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetValueAsInt() (_return_ C.gint) {
	_return_ = C.gtk_spin_button_get_value_as_int((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) GetWrap() (_return_ C.gboolean) {
	_return_ = C.gtk_spin_button_get_wrap((*C.GtkSpinButton)(_self_))
	return
}

func (_self_ *SpinButton) SetAdjustment(adjustment *C.GtkAdjustment) () {
	C.gtk_spin_button_set_adjustment((*C.GtkSpinButton)(_self_), adjustment)
	return
}

func (_self_ *SpinButton) SetDigits(digits C.guint) () {
	C.gtk_spin_button_set_digits((*C.GtkSpinButton)(_self_), digits)
	return
}

func (_self_ *SpinButton) SetIncrements(step C.gdouble, page C.gdouble) () {
	C.gtk_spin_button_set_increments((*C.GtkSpinButton)(_self_), step, page)
	return
}

func (_self_ *SpinButton) SetNumeric(numeric C.gboolean) () {
	C.gtk_spin_button_set_numeric((*C.GtkSpinButton)(_self_), numeric)
	return
}

func (_self_ *SpinButton) SetRange(min C.gdouble, max C.gdouble) () {
	C.gtk_spin_button_set_range((*C.GtkSpinButton)(_self_), min, max)
	return
}

func (_self_ *SpinButton) SetSnapToTicks(snap_to_ticks C.gboolean) () {
	C.gtk_spin_button_set_snap_to_ticks((*C.GtkSpinButton)(_self_), snap_to_ticks)
	return
}

func (_self_ *SpinButton) SetUpdatePolicy(policy C.GtkSpinButtonUpdatePolicy) () {
	C.gtk_spin_button_set_update_policy((*C.GtkSpinButton)(_self_), policy)
	return
}

func (_self_ *SpinButton) SetValue(value C.gdouble) () {
	C.gtk_spin_button_set_value((*C.GtkSpinButton)(_self_), value)
	return
}

func (_self_ *SpinButton) SetWrap(wrap C.gboolean) () {
	C.gtk_spin_button_set_wrap((*C.GtkSpinButton)(_self_), wrap)
	return
}

func (_self_ *SpinButton) Spin(direction C.GtkSpinType, increment C.gdouble) () {
	C.gtk_spin_button_spin((*C.GtkSpinButton)(_self_), direction, increment)
	return
}

func (_self_ *SpinButton) Update() () {
	C.gtk_spin_button_update((*C.GtkSpinButton)(_self_))
	return
}

func SpinnerNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_spinner_new()
	return
}

func (_self_ *Spinner) Start() () {
	C.gtk_spinner_start((*C.GtkSpinner)(_self_))
	return
}

func (_self_ *Spinner) Stop() () {
	C.gtk_spinner_stop((*C.GtkSpinner)(_self_))
	return
}

func StatusIconNew() (_return_ *C.GtkStatusIcon) {
	_return_ = C.gtk_status_icon_new()
	return
}

func StatusIconNewFromFile(filename *C.gchar) (_return_ *C.GtkStatusIcon) {
	_return_ = C._gtk_status_icon_new_from_file(filename)
	return
}

func StatusIconNewFromGicon(icon *C.GIcon) (_return_ *C.GtkStatusIcon) {
	_return_ = C.gtk_status_icon_new_from_gicon(icon)
	return
}

func StatusIconNewFromIconName(icon_name *C.gchar) (_return_ *C.GtkStatusIcon) {
	_return_ = C._gtk_status_icon_new_from_icon_name(icon_name)
	return
}

func StatusIconNewFromPixbuf(pixbuf *C.GdkPixbuf) (_return_ *C.GtkStatusIcon) {
	_return_ = C.gtk_status_icon_new_from_pixbuf(pixbuf)
	return
}

func StatusIconNewFromStock(stock_id *C.gchar) (_return_ *C.GtkStatusIcon) {
	_return_ = C._gtk_status_icon_new_from_stock(stock_id)
	return
}

func StatusIconPositionMenu(menu *C.GtkMenu, user_data C.gpointer) (x *C.gint, y *C.gint, push_in *C.gboolean) {
	C.gtk_status_icon_position_menu(menu, x, y, push_in, user_data)
	return
}

func (_self_ *StatusIcon) GetGeometry() (_return_ C.gboolean, screen unsafe.Pointer, area *C.GdkRectangle, orientation *C.GtkOrientation) {
	_return_ = C._gtk_status_icon_get_geometry((*C.GtkStatusIcon)(_self_), screen, area, orientation)
	return
}

func (_self_ *StatusIcon) GetGicon() (_return_ *C.GIcon) {
	_return_ = C.gtk_status_icon_get_gicon((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetHasTooltip() (_return_ C.gboolean) {
	_return_ = C.gtk_status_icon_get_has_tooltip((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_status_icon_get_icon_name((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_status_icon_get_pixbuf((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_status_icon_get_screen((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetSize() (_return_ C.gint) {
	_return_ = C.gtk_status_icon_get_size((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetStock() (_return_ *C.gchar) {
	_return_ = C._gtk_status_icon_get_stock((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetStorageType() (_return_ C.GtkImageType) {
	_return_ = C.gtk_status_icon_get_storage_type((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_status_icon_get_title((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetTooltipMarkup() (_return_ *C.gchar) {
	_return_ = C.gtk_status_icon_get_tooltip_markup((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetTooltipText() (_return_ *C.gchar) {
	_return_ = C.gtk_status_icon_get_tooltip_text((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_status_icon_get_visible((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) GetX11WindowId() (_return_ C.guint32) {
	_return_ = C.gtk_status_icon_get_x11_window_id((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) IsEmbedded() (_return_ C.gboolean) {
	_return_ = C.gtk_status_icon_is_embedded((*C.GtkStatusIcon)(_self_))
	return
}

func (_self_ *StatusIcon) SetFromFile(filename *C.gchar) () {
	C._gtk_status_icon_set_from_file((*C.GtkStatusIcon)(_self_), filename)
	return
}

func (_self_ *StatusIcon) SetFromGicon(icon *C.GIcon) () {
	C.gtk_status_icon_set_from_gicon((*C.GtkStatusIcon)(_self_), icon)
	return
}

func (_self_ *StatusIcon) SetFromIconName(icon_name *C.gchar) () {
	C._gtk_status_icon_set_from_icon_name((*C.GtkStatusIcon)(_self_), icon_name)
	return
}

func (_self_ *StatusIcon) SetFromPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_status_icon_set_from_pixbuf((*C.GtkStatusIcon)(_self_), pixbuf)
	return
}

func (_self_ *StatusIcon) SetFromStock(stock_id *C.gchar) () {
	C._gtk_status_icon_set_from_stock((*C.GtkStatusIcon)(_self_), stock_id)
	return
}

func (_self_ *StatusIcon) SetHasTooltip(has_tooltip C.gboolean) () {
	C.gtk_status_icon_set_has_tooltip((*C.GtkStatusIcon)(_self_), has_tooltip)
	return
}

func (_self_ *StatusIcon) SetName(name *C.gchar) () {
	C._gtk_status_icon_set_name((*C.GtkStatusIcon)(_self_), name)
	return
}

func (_self_ *StatusIcon) SetScreen(screen *C.GdkScreen) () {
	C.gtk_status_icon_set_screen((*C.GtkStatusIcon)(_self_), screen)
	return
}

func (_self_ *StatusIcon) SetTitle(title *C.gchar) () {
	C._gtk_status_icon_set_title((*C.GtkStatusIcon)(_self_), title)
	return
}

func (_self_ *StatusIcon) SetTooltipMarkup(markup *C.gchar) () {
	C._gtk_status_icon_set_tooltip_markup((*C.GtkStatusIcon)(_self_), markup)
	return
}

func (_self_ *StatusIcon) SetTooltipText(text *C.gchar) () {
	C._gtk_status_icon_set_tooltip_text((*C.GtkStatusIcon)(_self_), text)
	return
}

func (_self_ *StatusIcon) SetVisible(visible C.gboolean) () {
	C.gtk_status_icon_set_visible((*C.GtkStatusIcon)(_self_), visible)
	return
}

func StatusbarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_statusbar_new()
	return
}

func (_self_ *Statusbar) GetContextId(context_description *C.gchar) (_return_ C.guint) {
	_return_ = C._gtk_statusbar_get_context_id((*C.GtkStatusbar)(_self_), context_description)
	return
}

func (_self_ *Statusbar) GetMessageArea() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_statusbar_get_message_area((*C.GtkStatusbar)(_self_))
	return
}

func (_self_ *Statusbar) Pop(context_id C.guint) () {
	C.gtk_statusbar_pop((*C.GtkStatusbar)(_self_), context_id)
	return
}

func (_self_ *Statusbar) Push(context_id C.guint, text *C.gchar) (_return_ C.guint) {
	_return_ = C._gtk_statusbar_push((*C.GtkStatusbar)(_self_), context_id, text)
	return
}

func (_self_ *Statusbar) Remove(context_id C.guint, message_id C.guint) () {
	C.gtk_statusbar_remove((*C.GtkStatusbar)(_self_), context_id, message_id)
	return
}

func (_self_ *Statusbar) RemoveAll(context_id C.guint) () {
	C.gtk_statusbar_remove_all((*C.GtkStatusbar)(_self_), context_id)
	return
}

func (_self_ *StockItem) Copy() (_return_ *C.GtkStockItem) {
	_return_ = C._gtk_stock_item_copy((*C.GtkStockItem)(_self_))
	return
}

func (_self_ *StockItem) Free() () {
	C.gtk_stock_item_free((*C.GtkStockItem)(_self_))
	return
}

func (_self_ *Style) HasContext() (_return_ C.gboolean) {
	_return_ = C.gtk_style_has_context((*C.GtkStyle)(_self_))
	return
}

func StyleContextNew() (_return_ *C.GtkStyleContext) {
	_return_ = C.gtk_style_context_new()
	return
}

func StyleContextAddProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider, priority C.guint) () {
	C.gtk_style_context_add_provider_for_screen(screen, provider, priority)
	return
}

func StyleContextRemoveProviderForScreen(screen *C.GdkScreen, provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider_for_screen(screen, provider)
	return
}

func StyleContextResetWidgets(screen *C.GdkScreen) () {
	C.gtk_style_context_reset_widgets(screen)
	return
}

func (_self_ *StyleContext) AddClass(class_name *C.gchar) () {
	C._gtk_style_context_add_class((*C.GtkStyleContext)(_self_), class_name)
	return
}

func (_self_ *StyleContext) AddProvider(provider *C.GtkStyleProvider, priority C.guint) () {
	C.gtk_style_context_add_provider((*C.GtkStyleContext)(_self_), provider, priority)
	return
}

func (_self_ *StyleContext) AddRegion(region_name *C.gchar, flags C.GtkRegionFlags) () {
	C._gtk_style_context_add_region((*C.GtkStyleContext)(_self_), region_name, flags)
	return
}

func (_self_ *StyleContext) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_background_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetBorder(state C.GtkStateFlags) (border *C.GtkBorder) {
	C.gtk_style_context_get_border((*C.GtkStyleContext)(_self_), state, border)
	return
}

func (_self_ *StyleContext) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_border_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_style_context_get_color((*C.GtkStyleContext)(_self_), state, color)
	return
}

func (_self_ *StyleContext) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_style_context_get_direction((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_style_context_get_font((*C.GtkStyleContext)(_self_), state)
	return
}

func (_self_ *StyleContext) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_style_context_get_junction_sides((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetMargin(state C.GtkStateFlags) (margin *C.GtkBorder) {
	C.gtk_style_context_get_margin((*C.GtkStyleContext)(_self_), state, margin)
	return
}

func (_self_ *StyleContext) GetPadding(state C.GtkStateFlags) (padding *C.GtkBorder) {
	C.gtk_style_context_get_padding((*C.GtkStyleContext)(_self_), state, padding)
	return
}

func (_self_ *StyleContext) GetParent() (_return_ *C.GtkStyleContext) {
	_return_ = C.gtk_style_context_get_parent((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetPath() (_return_ *C.GtkWidgetPath) {
	_return_ = C._gtk_style_context_get_path((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetProperty(property *C.gchar, state C.GtkStateFlags) (value *C.GValue) {
	C._gtk_style_context_get_property((*C.GtkStyleContext)(_self_), property, state, value)
	return
}

func (_self_ *StyleContext) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_style_context_get_screen((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetSection(property *C.gchar) (_return_ *C.GtkCssSection) {
	_return_ = C._gtk_style_context_get_section((*C.GtkStyleContext)(_self_), property)
	return
}

func (_self_ *StyleContext) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_style_context_get_state((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) GetStyleProperty(property_name *C.gchar, value *C.GValue) () {
	C._gtk_style_context_get_style_property((*C.GtkStyleContext)(_self_), property_name, value)
	return
}

func (_self_ *StyleContext) HasClass(class_name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_style_context_has_class((*C.GtkStyleContext)(_self_), class_name)
	return
}

func (_self_ *StyleContext) HasRegion(region_name *C.gchar) (_return_ C.gboolean, flags_return *C.GtkRegionFlags) {
	_return_ = C._gtk_style_context_has_region((*C.GtkStyleContext)(_self_), region_name, flags_return)
	return
}

func (_self_ *StyleContext) Invalidate() () {
	C.gtk_style_context_invalidate((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListClasses() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_classes((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) ListRegions() (_return_ *C.GList) {
	_return_ = C.gtk_style_context_list_regions((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) LookupColor(color_name *C.gchar) (_return_ C.gboolean, color *C.GdkRGBA) {
	_return_ = C._gtk_style_context_lookup_color((*C.GtkStyleContext)(_self_), color_name, color)
	return
}

func (_self_ *StyleContext) LookupIconSet(stock_id *C.gchar) (_return_ *C.GtkIconSet) {
	_return_ = C._gtk_style_context_lookup_icon_set((*C.GtkStyleContext)(_self_), stock_id)
	return
}

func (_self_ *StyleContext) RemoveClass(class_name *C.gchar) () {
	C._gtk_style_context_remove_class((*C.GtkStyleContext)(_self_), class_name)
	return
}

func (_self_ *StyleContext) RemoveProvider(provider *C.GtkStyleProvider) () {
	C.gtk_style_context_remove_provider((*C.GtkStyleContext)(_self_), provider)
	return
}

func (_self_ *StyleContext) RemoveRegion(region_name *C.gchar) () {
	C._gtk_style_context_remove_region((*C.GtkStyleContext)(_self_), region_name)
	return
}

func (_self_ *StyleContext) Restore() () {
	C.gtk_style_context_restore((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) Save() () {
	C.gtk_style_context_save((*C.GtkStyleContext)(_self_))
	return
}

func (_self_ *StyleContext) SetBackground(window *C.GdkWindow) () {
	C.gtk_style_context_set_background((*C.GtkStyleContext)(_self_), window)
	return
}

func (_self_ *StyleContext) SetDirection(direction C.GtkTextDirection) () {
	C.gtk_style_context_set_direction((*C.GtkStyleContext)(_self_), direction)
	return
}

func (_self_ *StyleContext) SetJunctionSides(sides C.GtkJunctionSides) () {
	C.gtk_style_context_set_junction_sides((*C.GtkStyleContext)(_self_), sides)
	return
}

func (_self_ *StyleContext) SetParent(parent *C.GtkStyleContext) () {
	C.gtk_style_context_set_parent((*C.GtkStyleContext)(_self_), parent)
	return
}

func (_self_ *StyleContext) SetPath(path *C.GtkWidgetPath) () {
	C.gtk_style_context_set_path((*C.GtkStyleContext)(_self_), path)
	return
}

func (_self_ *StyleContext) SetScreen(screen *C.GdkScreen) () {
	C.gtk_style_context_set_screen((*C.GtkStyleContext)(_self_), screen)
	return
}

func (_self_ *StyleContext) SetState(flags C.GtkStateFlags) () {
	C.gtk_style_context_set_state((*C.GtkStyleContext)(_self_), flags)
	return
}

func StylePropertiesNew() (_return_ *C.GtkStyleProperties) {
	_return_ = C.gtk_style_properties_new()
	return
}

func StylePropertiesLookupProperty(property_name *C.gchar) (_return_ C.gboolean, parse_func *C.GtkStylePropertyParser, pspec unsafe.Pointer) {
	_return_ = C._gtk_style_properties_lookup_property(property_name, parse_func, pspec)
	return
}

func StylePropertiesRegisterProperty(parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	C.gtk_style_properties_register_property(parse_func, pspec)
	return
}

func (_self_ *StyleProperties) Clear() () {
	C.gtk_style_properties_clear((*C.GtkStyleProperties)(_self_))
	return
}

func (_self_ *StyleProperties) GetProperty(property *C.gchar, state C.GtkStateFlags) (_return_ C.gboolean, value *C.GValue) {
	_return_ = C._gtk_style_properties_get_property((*C.GtkStyleProperties)(_self_), property, state, value)
	return
}

func (_self_ *StyleProperties) LookupColor(name *C.gchar) (_return_ *C.GtkSymbolicColor) {
	_return_ = C._gtk_style_properties_lookup_color((*C.GtkStyleProperties)(_self_), name)
	return
}

func (_self_ *StyleProperties) MapColor(name *C.gchar, color *C.GtkSymbolicColor) () {
	C._gtk_style_properties_map_color((*C.GtkStyleProperties)(_self_), name, color)
	return
}

func (_self_ *StyleProperties) Merge(props_to_merge *C.GtkStyleProperties, replace C.gboolean) () {
	C._gtk_style_properties_merge((*C.GtkStyleProperties)(_self_), props_to_merge, replace)
	return
}

func (_self_ *StyleProperties) SetProperty(property *C.gchar, state C.GtkStateFlags, value *C.GValue) () {
	C._gtk_style_properties_set_property((*C.GtkStyleProperties)(_self_), property, state, value)
	return
}

func (_self_ *StyleProperties) UnsetProperty(property *C.gchar, state C.GtkStateFlags) () {
	C._gtk_style_properties_unset_property((*C.GtkStyleProperties)(_self_), property, state)
	return
}

func SwitchNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_switch_new()
	return
}

func (_self_ *Switch) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_switch_get_active((*C.GtkSwitch)(_self_))
	return
}

func (_self_ *Switch) SetActive(is_active C.gboolean) () {
	C.gtk_switch_set_active((*C.GtkSwitch)(_self_), is_active)
	return
}

func SymbolicColorNewAlpha(color *C.GtkSymbolicColor, factor C.gdouble) (_return_ *C.GtkSymbolicColor) {
	_return_ = C.gtk_symbolic_color_new_alpha(color, factor)
	return
}

func SymbolicColorNewLiteral(color *C.GdkRGBA) (_return_ *C.GtkSymbolicColor) {
	_return_ = C._gtk_symbolic_color_new_literal(color)
	return
}

func SymbolicColorNewMix(color1 *C.GtkSymbolicColor, color2 *C.GtkSymbolicColor, factor C.gdouble) (_return_ *C.GtkSymbolicColor) {
	_return_ = C.gtk_symbolic_color_new_mix(color1, color2, factor)
	return
}

func SymbolicColorNewName(name *C.gchar) (_return_ *C.GtkSymbolicColor) {
	_return_ = C._gtk_symbolic_color_new_name(name)
	return
}

func SymbolicColorNewShade(color *C.GtkSymbolicColor, factor C.gdouble) (_return_ *C.GtkSymbolicColor) {
	_return_ = C.gtk_symbolic_color_new_shade(color, factor)
	return
}

func SymbolicColorNewWin32(theme_class *C.gchar, id C.gint) (_return_ *C.GtkSymbolicColor) {
	_return_ = C._gtk_symbolic_color_new_win32(theme_class, id)
	return
}

func (_self_ *SymbolicColor) Ref() (_return_ *C.GtkSymbolicColor) {
	_return_ = C.gtk_symbolic_color_ref((*C.GtkSymbolicColor)(_self_))
	return
}

func (_self_ *SymbolicColor) Resolve(props *C.GtkStyleProperties) (_return_ C.gboolean, resolved_color *C.GdkRGBA) {
	_return_ = C.gtk_symbolic_color_resolve((*C.GtkSymbolicColor)(_self_), props, resolved_color)
	return
}

func (_self_ *SymbolicColor) ToString() (_return_ *C.char) {
	_return_ = C.gtk_symbolic_color_to_string((*C.GtkSymbolicColor)(_self_))
	return
}

func (_self_ *SymbolicColor) Unref() () {
	C.gtk_symbolic_color_unref((*C.GtkSymbolicColor)(_self_))
	return
}

func TargetEntryNew(target *C.gchar, flags C.guint, info C.guint) (_return_ *C.GtkTargetEntry) {
	_return_ = C._gtk_target_entry_new(target, flags, info)
	return
}

func (_self_ *TargetEntry) Copy() (_return_ *C.GtkTargetEntry) {
	_return_ = C.gtk_target_entry_copy((*C.GtkTargetEntry)(_self_))
	return
}

func (_self_ *TargetEntry) Free() () {
	C.gtk_target_entry_free((*C.GtkTargetEntry)(_self_))
	return
}

func TargetListNew(targets *C.GtkTargetEntry, ntargets C.guint) (_return_ *C.GtkTargetList) {
	_return_ = C._gtk_target_list_new(targets, ntargets)
	return
}

func (_self_ *TargetList) Add(target C.GdkAtom, flags C.guint, info C.guint) () {
	C.gtk_target_list_add((*C.GtkTargetList)(_self_), target, flags, info)
	return
}

func (_self_ *TargetList) AddImageTargets(info C.guint, writable C.gboolean) () {
	C.gtk_target_list_add_image_targets((*C.GtkTargetList)(_self_), info, writable)
	return
}

func (_self_ *TargetList) AddRichTextTargets(info C.guint, deserializable C.gboolean, buffer *C.GtkTextBuffer) () {
	C.gtk_target_list_add_rich_text_targets((*C.GtkTargetList)(_self_), info, deserializable, buffer)
	return
}

func (_self_ *TargetList) AddTable(targets *C.GtkTargetEntry, ntargets C.guint) () {
	C._gtk_target_list_add_table((*C.GtkTargetList)(_self_), targets, ntargets)
	return
}

func (_self_ *TargetList) AddTextTargets(info C.guint) () {
	C.gtk_target_list_add_text_targets((*C.GtkTargetList)(_self_), info)
	return
}

func (_self_ *TargetList) AddUriTargets(info C.guint) () {
	C.gtk_target_list_add_uri_targets((*C.GtkTargetList)(_self_), info)
	return
}

func (_self_ *TargetList) Find(target C.GdkAtom, info *C.guint) (_return_ C.gboolean) {
	_return_ = C.gtk_target_list_find((*C.GtkTargetList)(_self_), target, info)
	return
}

func (_self_ *TargetList) Ref() (_return_ *C.GtkTargetList) {
	_return_ = C.gtk_target_list_ref((*C.GtkTargetList)(_self_))
	return
}

func (_self_ *TargetList) Remove(target C.GdkAtom) () {
	C.gtk_target_list_remove((*C.GtkTargetList)(_self_), target)
	return
}

func (_self_ *TargetList) Unref() () {
	C.gtk_target_list_unref((*C.GtkTargetList)(_self_))
	return
}

func TextAttributesNew() (_return_ *C.GtkTextAttributes) {
	_return_ = C.gtk_text_attributes_new()
	return
}

func (_self_ *TextAttributes) Copy() (_return_ *C.GtkTextAttributes) {
	_return_ = C.gtk_text_attributes_copy((*C.GtkTextAttributes)(_self_))
	return
}

func (_self_ *TextAttributes) CopyValues(dest *C.GtkTextAttributes) () {
	C.gtk_text_attributes_copy_values((*C.GtkTextAttributes)(_self_), dest)
	return
}

func (_self_ *TextAttributes) Ref() (_return_ *C.GtkTextAttributes) {
	_return_ = C.gtk_text_attributes_ref((*C.GtkTextAttributes)(_self_))
	return
}

func (_self_ *TextAttributes) Unref() () {
	C.gtk_text_attributes_unref((*C.GtkTextAttributes)(_self_))
	return
}

func TextBufferNew(table *C.GtkTextTagTable) (_return_ *C.GtkTextBuffer) {
	_return_ = C.gtk_text_buffer_new(table)
	return
}

func (_self_ *TextBuffer) AddMark(mark *C.GtkTextMark, where *C.GtkTextIter) () {
	C._gtk_text_buffer_add_mark((*C.GtkTextBuffer)(_self_), mark, where)
	return
}

func (_self_ *TextBuffer) AddSelectionClipboard(clipboard *C.GtkClipboard) () {
	C.gtk_text_buffer_add_selection_clipboard((*C.GtkTextBuffer)(_self_), clipboard)
	return
}

func (_self_ *TextBuffer) ApplyTag(tag *C.GtkTextTag, start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_apply_tag((*C.GtkTextBuffer)(_self_), tag, start, end)
	return
}

func (_self_ *TextBuffer) ApplyTagByName(name *C.gchar, start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_apply_tag_by_name((*C.GtkTextBuffer)(_self_), name, start, end)
	return
}

func (_self_ *TextBuffer) Backspace(iter *C.GtkTextIter, interactive C.gboolean, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_backspace((*C.GtkTextBuffer)(_self_), iter, interactive, default_editable)
	return
}

func (_self_ *TextBuffer) BeginUserAction() () {
	C.gtk_text_buffer_begin_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) CopyClipboard(clipboard *C.GtkClipboard) () {
	C.gtk_text_buffer_copy_clipboard((*C.GtkTextBuffer)(_self_), clipboard)
	return
}

func (_self_ *TextBuffer) CreateChildAnchor(iter *C.GtkTextIter) (_return_ *C.GtkTextChildAnchor) {
	_return_ = C.gtk_text_buffer_create_child_anchor((*C.GtkTextBuffer)(_self_), iter)
	return
}

func (_self_ *TextBuffer) CreateMark(mark_name *C.gchar, where *C.GtkTextIter, left_gravity C.gboolean) (_return_ *C.GtkTextMark) {
	_return_ = C._gtk_text_buffer_create_mark((*C.GtkTextBuffer)(_self_), mark_name, where, left_gravity)
	return
}

func (_self_ *TextBuffer) CutClipboard(clipboard *C.GtkClipboard, default_editable C.gboolean) () {
	C.gtk_text_buffer_cut_clipboard((*C.GtkTextBuffer)(_self_), clipboard, default_editable)
	return
}

func (_self_ *TextBuffer) Delete(start *C.GtkTextIter, end *C.GtkTextIter) () {
	C.gtk_text_buffer_delete((*C.GtkTextBuffer)(_self_), start, end)
	return
}

func (_self_ *TextBuffer) DeleteInteractive(start_iter *C.GtkTextIter, end_iter *C.GtkTextIter, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_delete_interactive((*C.GtkTextBuffer)(_self_), start_iter, end_iter, default_editable)
	return
}

func (_self_ *TextBuffer) DeleteMark(mark *C.GtkTextMark) () {
	C.gtk_text_buffer_delete_mark((*C.GtkTextBuffer)(_self_), mark)
	return
}

func (_self_ *TextBuffer) DeleteMarkByName(name *C.gchar) () {
	C._gtk_text_buffer_delete_mark_by_name((*C.GtkTextBuffer)(_self_), name)
	return
}

func (_self_ *TextBuffer) DeleteSelection(interactive C.gboolean, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_delete_selection((*C.GtkTextBuffer)(_self_), interactive, default_editable)
	return
}

func (_self_ *TextBuffer) Deserialize(content_buffer *C.GtkTextBuffer, format C.GdkAtom, iter *C.GtkTextIter, data *C.guint8, length C.gsize) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_text_buffer_deserialize((*C.GtkTextBuffer)(_self_), content_buffer, format, iter, data, length, _error_)
	return
}

func (_self_ *TextBuffer) DeserializeGetCanCreateTags(format C.GdkAtom) (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_deserialize_get_can_create_tags((*C.GtkTextBuffer)(_self_), format)
	return
}

func (_self_ *TextBuffer) DeserializeSetCanCreateTags(format C.GdkAtom, can_create_tags C.gboolean) () {
	C.gtk_text_buffer_deserialize_set_can_create_tags((*C.GtkTextBuffer)(_self_), format, can_create_tags)
	return
}

func (_self_ *TextBuffer) EndUserAction() () {
	C.gtk_text_buffer_end_user_action((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetBounds() (start *C.GtkTextIter, end *C.GtkTextIter) {
	C.gtk_text_buffer_get_bounds((*C.GtkTextBuffer)(_self_), start, end)
	return
}

func (_self_ *TextBuffer) GetCharCount() (_return_ C.gint) {
	_return_ = C.gtk_text_buffer_get_char_count((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetCopyTargetList() (_return_ *C.GtkTargetList) {
	_return_ = C.gtk_text_buffer_get_copy_target_list((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetDeserializeFormats() (_return_ *C.GdkAtom, n_formats *C.gint) {
	_return_ = C.gtk_text_buffer_get_deserialize_formats((*C.GtkTextBuffer)(_self_), n_formats)
	return
}

func (_self_ *TextBuffer) GetEndIter() (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_end_iter((*C.GtkTextBuffer)(_self_), iter)
	return
}

func (_self_ *TextBuffer) GetHasSelection() (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_get_has_selection((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetInsert() (_return_ *C.GtkTextMark) {
	_return_ = C.gtk_text_buffer_get_insert((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetIterAtChildAnchor(anchor *C.GtkTextChildAnchor) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_child_anchor((*C.GtkTextBuffer)(_self_), iter, anchor)
	return
}

func (_self_ *TextBuffer) GetIterAtLine(line_number C.gint) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_line((*C.GtkTextBuffer)(_self_), iter, line_number)
	return
}

func (_self_ *TextBuffer) GetIterAtLineIndex(line_number C.gint, byte_index C.gint) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_line_index((*C.GtkTextBuffer)(_self_), iter, line_number, byte_index)
	return
}

func (_self_ *TextBuffer) GetIterAtLineOffset(line_number C.gint, char_offset C.gint) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_line_offset((*C.GtkTextBuffer)(_self_), iter, line_number, char_offset)
	return
}

func (_self_ *TextBuffer) GetIterAtMark(mark *C.GtkTextMark) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_mark((*C.GtkTextBuffer)(_self_), iter, mark)
	return
}

func (_self_ *TextBuffer) GetIterAtOffset(char_offset C.gint) (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_iter_at_offset((*C.GtkTextBuffer)(_self_), iter, char_offset)
	return
}

func (_self_ *TextBuffer) GetLineCount() (_return_ C.gint) {
	_return_ = C.gtk_text_buffer_get_line_count((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetMark(name *C.gchar) (_return_ *C.GtkTextMark) {
	_return_ = C._gtk_text_buffer_get_mark((*C.GtkTextBuffer)(_self_), name)
	return
}

func (_self_ *TextBuffer) GetModified() (_return_ C.gboolean) {
	_return_ = C.gtk_text_buffer_get_modified((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetPasteTargetList() (_return_ *C.GtkTargetList) {
	_return_ = C.gtk_text_buffer_get_paste_target_list((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetSelectionBound() (_return_ *C.GtkTextMark) {
	_return_ = C.gtk_text_buffer_get_selection_bound((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetSelectionBounds() (_return_ C.gboolean, start *C.GtkTextIter, end *C.GtkTextIter) {
	_return_ = C.gtk_text_buffer_get_selection_bounds((*C.GtkTextBuffer)(_self_), start, end)
	return
}

func (_self_ *TextBuffer) GetSerializeFormats() (_return_ *C.GdkAtom, n_formats *C.gint) {
	_return_ = C.gtk_text_buffer_get_serialize_formats((*C.GtkTextBuffer)(_self_), n_formats)
	return
}

func (_self_ *TextBuffer) GetSlice(start *C.GtkTextIter, end *C.GtkTextIter, include_hidden_chars C.gboolean) (_return_ *C.gchar) {
	_return_ = C._gtk_text_buffer_get_slice((*C.GtkTextBuffer)(_self_), start, end, include_hidden_chars)
	return
}

func (_self_ *TextBuffer) GetStartIter() (iter *C.GtkTextIter) {
	C.gtk_text_buffer_get_start_iter((*C.GtkTextBuffer)(_self_), iter)
	return
}

func (_self_ *TextBuffer) GetTagTable() (_return_ *C.GtkTextTagTable) {
	_return_ = C.gtk_text_buffer_get_tag_table((*C.GtkTextBuffer)(_self_))
	return
}

func (_self_ *TextBuffer) GetText(start *C.GtkTextIter, end *C.GtkTextIter, include_hidden_chars C.gboolean) (_return_ *C.gchar) {
	_return_ = C._gtk_text_buffer_get_text((*C.GtkTextBuffer)(_self_), start, end, include_hidden_chars)
	return
}

func (_self_ *TextBuffer) Insert(iter *C.GtkTextIter, text *C.gchar, len_ C.gint) () {
	C._gtk_text_buffer_insert((*C.GtkTextBuffer)(_self_), iter, text, len_)
	return
}

func (_self_ *TextBuffer) InsertAtCursor(text *C.gchar, len_ C.gint) () {
	C._gtk_text_buffer_insert_at_cursor((*C.GtkTextBuffer)(_self_), text, len_)
	return
}

func (_self_ *TextBuffer) InsertChildAnchor(iter *C.GtkTextIter, anchor *C.GtkTextChildAnchor) () {
	C.gtk_text_buffer_insert_child_anchor((*C.GtkTextBuffer)(_self_), iter, anchor)
	return
}

func (_self_ *TextBuffer) InsertInteractive(iter *C.GtkTextIter, text *C.gchar, len_ C.gint, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_text_buffer_insert_interactive((*C.GtkTextBuffer)(_self_), iter, text, len_, default_editable)
	return
}

func (_self_ *TextBuffer) InsertInteractiveAtCursor(text *C.gchar, len_ C.gint, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_text_buffer_insert_interactive_at_cursor((*C.GtkTextBuffer)(_self_), text, len_, default_editable)
	return
}

func (_self_ *TextBuffer) InsertPixbuf(iter *C.GtkTextIter, pixbuf *C.GdkPixbuf) () {
	C.gtk_text_buffer_insert_pixbuf((*C.GtkTextBuffer)(_self_), iter, pixbuf)
	return
}

func (_self_ *TextBuffer) InsertRange(iter *C.GtkTextIter, start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_insert_range((*C.GtkTextBuffer)(_self_), iter, start, end)
	return
}

func (_self_ *TextBuffer) InsertRangeInteractive(iter *C.GtkTextIter, start *C.GtkTextIter, end *C.GtkTextIter, default_editable C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_text_buffer_insert_range_interactive((*C.GtkTextBuffer)(_self_), iter, start, end, default_editable)
	return
}

func (_self_ *TextBuffer) MoveMark(mark *C.GtkTextMark, where *C.GtkTextIter) () {
	C._gtk_text_buffer_move_mark((*C.GtkTextBuffer)(_self_), mark, where)
	return
}

func (_self_ *TextBuffer) MoveMarkByName(name *C.gchar, where *C.GtkTextIter) () {
	C._gtk_text_buffer_move_mark_by_name((*C.GtkTextBuffer)(_self_), name, where)
	return
}

func (_self_ *TextBuffer) PasteClipboard(clipboard *C.GtkClipboard, override_location *C.GtkTextIter, default_editable C.gboolean) () {
	C.gtk_text_buffer_paste_clipboard((*C.GtkTextBuffer)(_self_), clipboard, override_location, default_editable)
	return
}

func (_self_ *TextBuffer) PlaceCursor(where *C.GtkTextIter) () {
	C._gtk_text_buffer_place_cursor((*C.GtkTextBuffer)(_self_), where)
	return
}

func (_self_ *TextBuffer) RegisterDeserializeFormat(mime_type *C.gchar, function C.GtkTextBufferDeserializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_return_ = C._gtk_text_buffer_register_deserialize_format((*C.GtkTextBuffer)(_self_), mime_type, function, user_data, user_data_destroy)
	return
}

func (_self_ *TextBuffer) RegisterDeserializeTagset(tagset_name *C.gchar) (_return_ C.GdkAtom) {
	_return_ = C._gtk_text_buffer_register_deserialize_tagset((*C.GtkTextBuffer)(_self_), tagset_name)
	return
}

func (_self_ *TextBuffer) RegisterSerializeFormat(mime_type *C.gchar, function C.GtkTextBufferSerializeFunc, user_data C.gpointer, user_data_destroy C.GDestroyNotify) (_return_ C.GdkAtom) {
	_return_ = C._gtk_text_buffer_register_serialize_format((*C.GtkTextBuffer)(_self_), mime_type, function, user_data, user_data_destroy)
	return
}

func (_self_ *TextBuffer) RegisterSerializeTagset(tagset_name *C.gchar) (_return_ C.GdkAtom) {
	_return_ = C._gtk_text_buffer_register_serialize_tagset((*C.GtkTextBuffer)(_self_), tagset_name)
	return
}

func (_self_ *TextBuffer) RemoveAllTags(start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_remove_all_tags((*C.GtkTextBuffer)(_self_), start, end)
	return
}

func (_self_ *TextBuffer) RemoveSelectionClipboard(clipboard *C.GtkClipboard) () {
	C.gtk_text_buffer_remove_selection_clipboard((*C.GtkTextBuffer)(_self_), clipboard)
	return
}

func (_self_ *TextBuffer) RemoveTag(tag *C.GtkTextTag, start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_remove_tag((*C.GtkTextBuffer)(_self_), tag, start, end)
	return
}

func (_self_ *TextBuffer) RemoveTagByName(name *C.gchar, start *C.GtkTextIter, end *C.GtkTextIter) () {
	C._gtk_text_buffer_remove_tag_by_name((*C.GtkTextBuffer)(_self_), name, start, end)
	return
}

func (_self_ *TextBuffer) SelectRange(ins *C.GtkTextIter, bound *C.GtkTextIter) () {
	C._gtk_text_buffer_select_range((*C.GtkTextBuffer)(_self_), ins, bound)
	return
}

func (_self_ *TextBuffer) Serialize(content_buffer *C.GtkTextBuffer, format C.GdkAtom, start *C.GtkTextIter, end *C.GtkTextIter) (_return_ *C.guint8, length *C.gsize) {
	_return_ = C._gtk_text_buffer_serialize((*C.GtkTextBuffer)(_self_), content_buffer, format, start, end, length)
	return
}

func (_self_ *TextBuffer) SetModified(setting C.gboolean) () {
	C.gtk_text_buffer_set_modified((*C.GtkTextBuffer)(_self_), setting)
	return
}

func (_self_ *TextBuffer) SetText(text *C.gchar, len_ C.gint) () {
	C._gtk_text_buffer_set_text((*C.GtkTextBuffer)(_self_), text, len_)
	return
}

func (_self_ *TextBuffer) UnregisterDeserializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_deserialize_format((*C.GtkTextBuffer)(_self_), format)
	return
}

func (_self_ *TextBuffer) UnregisterSerializeFormat(format C.GdkAtom) () {
	C.gtk_text_buffer_unregister_serialize_format((*C.GtkTextBuffer)(_self_), format)
	return
}

func TextChildAnchorNew() (_return_ *C.GtkTextChildAnchor) {
	_return_ = C.gtk_text_child_anchor_new()
	return
}

func (_self_ *TextChildAnchor) GetDeleted() (_return_ C.gboolean) {
	_return_ = C.gtk_text_child_anchor_get_deleted((*C.GtkTextChildAnchor)(_self_))
	return
}

func (_self_ *TextChildAnchor) GetWidgets() (_return_ *C.GList) {
	_return_ = C.gtk_text_child_anchor_get_widgets((*C.GtkTextChildAnchor)(_self_))
	return
}

func (_self_ *TextIter) Assign(other *C.GtkTextIter) () {
	C._gtk_text_iter_assign((*C.GtkTextIter)(_self_), other)
	return
}

func (_self_ *TextIter) BackwardChar() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardChars(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_chars((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardCursorPosition() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_cursor_position((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardCursorPositions(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_cursor_positions((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_backward_find_char((*C.GtkTextIter)(_self_), pred, user_data, limit)
	return
}

func (_self_ *TextIter) BackwardLine() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardLines(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_lines((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardSearch(str *C.gchar, flags C.GtkTextSearchFlags, limit *C.GtkTextIter) (_return_ C.gboolean, match_start *C.GtkTextIter, match_end *C.GtkTextIter) {
	_return_ = C._gtk_text_iter_backward_search((*C.GtkTextIter)(_self_), str, flags, match_start, match_end, limit)
	return
}

func (_self_ *TextIter) BackwardSentenceStart() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_sentence_start((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardSentenceStarts(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_sentence_starts((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardToTagToggle(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_to_tag_toggle((*C.GtkTextIter)(_self_), tag)
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPosition() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_cursor_position((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardVisibleCursorPositions(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_cursor_positions((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardVisibleLine() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardVisibleLines(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_lines((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardVisibleWordStart() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_word_start((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardVisibleWordStarts(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_visible_word_starts((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BackwardWordStart() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_word_start((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) BackwardWordStarts(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_backward_word_starts((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) BeginsTag(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_begins_tag((*C.GtkTextIter)(_self_), tag)
	return
}

func (_self_ *TextIter) CanInsert(default_editability C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_can_insert((*C.GtkTextIter)(_self_), default_editability)
	return
}

func (_self_ *TextIter) Compare(rhs *C.GtkTextIter) (_return_ C.gint) {
	_return_ = C._gtk_text_iter_compare((*C.GtkTextIter)(_self_), rhs)
	return
}

func (_self_ *TextIter) Copy() (_return_ *C.GtkTextIter) {
	_return_ = C._gtk_text_iter_copy((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) Editable(default_setting C.gboolean) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_editable((*C.GtkTextIter)(_self_), default_setting)
	return
}

func (_self_ *TextIter) EndsLine() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_ends_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) EndsSentence() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_ends_sentence((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) EndsTag(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_ends_tag((*C.GtkTextIter)(_self_), tag)
	return
}

func (_self_ *TextIter) EndsWord() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_ends_word((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) Equal(rhs *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_equal((*C.GtkTextIter)(_self_), rhs)
	return
}

func (_self_ *TextIter) ForwardChar() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardChars(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_chars((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardCursorPosition() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_cursor_position((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardCursorPositions(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_cursor_positions((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardFindChar(pred C.GtkTextCharPredicate, user_data C.gpointer, limit *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_forward_find_char((*C.GtkTextIter)(_self_), pred, user_data, limit)
	return
}

func (_self_ *TextIter) ForwardLine() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardLines(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_lines((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardSearch(str *C.gchar, flags C.GtkTextSearchFlags, limit *C.GtkTextIter) (_return_ C.gboolean, match_start *C.GtkTextIter, match_end *C.GtkTextIter) {
	_return_ = C._gtk_text_iter_forward_search((*C.GtkTextIter)(_self_), str, flags, match_start, match_end, limit)
	return
}

func (_self_ *TextIter) ForwardSentenceEnd() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_sentence_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardSentenceEnds(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_sentence_ends((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardToEnd() () {
	C.gtk_text_iter_forward_to_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardToLineEnd() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_to_line_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardToTagToggle(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_to_tag_toggle((*C.GtkTextIter)(_self_), tag)
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPosition() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_cursor_position((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardVisibleCursorPositions(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_cursor_positions((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardVisibleLine() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardVisibleLines(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_lines((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnd() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_word_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardVisibleWordEnds(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_visible_word_ends((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) ForwardWordEnd() (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_word_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) ForwardWordEnds(count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_iter_forward_word_ends((*C.GtkTextIter)(_self_), count)
	return
}

func (_self_ *TextIter) Free() () {
	C.gtk_text_iter_free((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetAttributes() (_return_ C.gboolean, values *C.GtkTextAttributes) {
	_return_ = C._gtk_text_iter_get_attributes((*C.GtkTextIter)(_self_), values)
	return
}

func (_self_ *TextIter) GetBuffer() (_return_ *C.GtkTextBuffer) {
	_return_ = C._gtk_text_iter_get_buffer((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetBytesInLine() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_bytes_in_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetChar() (_return_ C.gunichar) {
	_return_ = C._gtk_text_iter_get_char((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetCharsInLine() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_chars_in_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetChildAnchor() (_return_ *C.GtkTextChildAnchor) {
	_return_ = C._gtk_text_iter_get_child_anchor((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C._gtk_text_iter_get_language((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLine() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLineIndex() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_line_index((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetLineOffset() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_line_offset((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetMarks() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_marks((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetOffset() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_offset((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetPixbuf() (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_text_iter_get_pixbuf((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetSlice(end *C.GtkTextIter) (_return_ *C.gchar) {
	_return_ = C._gtk_text_iter_get_slice((*C.GtkTextIter)(_self_), end)
	return
}

func (_self_ *TextIter) GetTags() (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_tags((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetText(end *C.GtkTextIter) (_return_ *C.gchar) {
	_return_ = C._gtk_text_iter_get_text((*C.GtkTextIter)(_self_), end)
	return
}

func (_self_ *TextIter) GetToggledTags(toggled_on C.gboolean) (_return_ *C.GSList) {
	_return_ = C._gtk_text_iter_get_toggled_tags((*C.GtkTextIter)(_self_), toggled_on)
	return
}

func (_self_ *TextIter) GetVisibleLineIndex() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_visible_line_index((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetVisibleLineOffset() (_return_ C.gint) {
	_return_ = C._gtk_text_iter_get_visible_line_offset((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) GetVisibleSlice(end *C.GtkTextIter) (_return_ *C.gchar) {
	_return_ = C._gtk_text_iter_get_visible_slice((*C.GtkTextIter)(_self_), end)
	return
}

func (_self_ *TextIter) GetVisibleText(end *C.GtkTextIter) (_return_ *C.gchar) {
	_return_ = C._gtk_text_iter_get_visible_text((*C.GtkTextIter)(_self_), end)
	return
}

func (_self_ *TextIter) HasTag(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_has_tag((*C.GtkTextIter)(_self_), tag)
	return
}

func (_self_ *TextIter) InRange(start *C.GtkTextIter, end *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_in_range((*C.GtkTextIter)(_self_), start, end)
	return
}

func (_self_ *TextIter) InsideSentence() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_inside_sentence((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) InsideWord() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_inside_word((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) IsCursorPosition() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_is_cursor_position((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) IsEnd() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_is_end((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) IsStart() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_is_start((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) Order(second *C.GtkTextIter) () {
	C.gtk_text_iter_order((*C.GtkTextIter)(_self_), second)
	return
}

func (_self_ *TextIter) SetLine(line_number C.gint) () {
	C.gtk_text_iter_set_line((*C.GtkTextIter)(_self_), line_number)
	return
}

func (_self_ *TextIter) SetLineIndex(byte_on_line C.gint) () {
	C.gtk_text_iter_set_line_index((*C.GtkTextIter)(_self_), byte_on_line)
	return
}

func (_self_ *TextIter) SetLineOffset(char_on_line C.gint) () {
	C.gtk_text_iter_set_line_offset((*C.GtkTextIter)(_self_), char_on_line)
	return
}

func (_self_ *TextIter) SetOffset(char_offset C.gint) () {
	C.gtk_text_iter_set_offset((*C.GtkTextIter)(_self_), char_offset)
	return
}

func (_self_ *TextIter) SetVisibleLineIndex(byte_on_line C.gint) () {
	C.gtk_text_iter_set_visible_line_index((*C.GtkTextIter)(_self_), byte_on_line)
	return
}

func (_self_ *TextIter) SetVisibleLineOffset(char_on_line C.gint) () {
	C.gtk_text_iter_set_visible_line_offset((*C.GtkTextIter)(_self_), char_on_line)
	return
}

func (_self_ *TextIter) StartsLine() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_starts_line((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) StartsSentence() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_starts_sentence((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) StartsWord() (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_starts_word((*C.GtkTextIter)(_self_))
	return
}

func (_self_ *TextIter) TogglesTag(tag *C.GtkTextTag) (_return_ C.gboolean) {
	_return_ = C._gtk_text_iter_toggles_tag((*C.GtkTextIter)(_self_), tag)
	return
}

func TextMarkNew(name *C.gchar, left_gravity C.gboolean) (_return_ *C.GtkTextMark) {
	_return_ = C._gtk_text_mark_new(name, left_gravity)
	return
}

func (_self_ *TextMark) GetBuffer() (_return_ *C.GtkTextBuffer) {
	_return_ = C.gtk_text_mark_get_buffer((*C.GtkTextMark)(_self_))
	return
}

func (_self_ *TextMark) GetDeleted() (_return_ C.gboolean) {
	_return_ = C.gtk_text_mark_get_deleted((*C.GtkTextMark)(_self_))
	return
}

func (_self_ *TextMark) GetLeftGravity() (_return_ C.gboolean) {
	_return_ = C.gtk_text_mark_get_left_gravity((*C.GtkTextMark)(_self_))
	return
}

func (_self_ *TextMark) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_text_mark_get_name((*C.GtkTextMark)(_self_))
	return
}

func (_self_ *TextMark) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_text_mark_get_visible((*C.GtkTextMark)(_self_))
	return
}

func (_self_ *TextMark) SetVisible(setting C.gboolean) () {
	C.gtk_text_mark_set_visible((*C.GtkTextMark)(_self_), setting)
	return
}

func TextTagNew(name *C.gchar) (_return_ *C.GtkTextTag) {
	_return_ = C._gtk_text_tag_new(name)
	return
}

func (_self_ *TextTag) Event(event_object *C.GObject, event *C.GdkEvent, iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_tag_event((*C.GtkTextTag)(_self_), event_object, event, iter)
	return
}

func (_self_ *TextTag) GetPriority() (_return_ C.gint) {
	_return_ = C.gtk_text_tag_get_priority((*C.GtkTextTag)(_self_))
	return
}

func (_self_ *TextTag) SetPriority(priority C.gint) () {
	C.gtk_text_tag_set_priority((*C.GtkTextTag)(_self_), priority)
	return
}

func TextTagTableNew() (_return_ *C.GtkTextTagTable) {
	_return_ = C.gtk_text_tag_table_new()
	return
}

func (_self_ *TextTagTable) Add(tag *C.GtkTextTag) () {
	C.gtk_text_tag_table_add((*C.GtkTextTagTable)(_self_), tag)
	return
}

func (_self_ *TextTagTable) Foreach(func_ C.GtkTextTagTableForeach, data C.gpointer) () {
	C.gtk_text_tag_table_foreach((*C.GtkTextTagTable)(_self_), func_, data)
	return
}

func (_self_ *TextTagTable) GetSize() (_return_ C.gint) {
	_return_ = C.gtk_text_tag_table_get_size((*C.GtkTextTagTable)(_self_))
	return
}

func (_self_ *TextTagTable) Lookup(name *C.gchar) (_return_ *C.GtkTextTag) {
	_return_ = C._gtk_text_tag_table_lookup((*C.GtkTextTagTable)(_self_), name)
	return
}

func (_self_ *TextTagTable) Remove(tag *C.GtkTextTag) () {
	C.gtk_text_tag_table_remove((*C.GtkTextTagTable)(_self_), tag)
	return
}

func TextViewNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_text_view_new()
	return
}

func TextViewNewWithBuffer(buffer *C.GtkTextBuffer) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_text_view_new_with_buffer(buffer)
	return
}

func (_self_ *TextView) AddChildAtAnchor(child *C.GtkWidget, anchor *C.GtkTextChildAnchor) () {
	C.gtk_text_view_add_child_at_anchor((*C.GtkTextView)(_self_), child, anchor)
	return
}

func (_self_ *TextView) AddChildInWindow(child *C.GtkWidget, which_window C.GtkTextWindowType, xpos C.gint, ypos C.gint) () {
	C.gtk_text_view_add_child_in_window((*C.GtkTextView)(_self_), child, which_window, xpos, ypos)
	return
}

func (_self_ *TextView) BackwardDisplayLine(iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_backward_display_line((*C.GtkTextView)(_self_), iter)
	return
}

func (_self_ *TextView) BackwardDisplayLineStart(iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_backward_display_line_start((*C.GtkTextView)(_self_), iter)
	return
}

func (_self_ *TextView) BufferToWindowCoords(win C.GtkTextWindowType, buffer_x C.gint, buffer_y C.gint) (window_x *C.gint, window_y *C.gint) {
	C.gtk_text_view_buffer_to_window_coords((*C.GtkTextView)(_self_), win, buffer_x, buffer_y, window_x, window_y)
	return
}

func (_self_ *TextView) ForwardDisplayLine(iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_forward_display_line((*C.GtkTextView)(_self_), iter)
	return
}

func (_self_ *TextView) ForwardDisplayLineEnd(iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_forward_display_line_end((*C.GtkTextView)(_self_), iter)
	return
}

func (_self_ *TextView) GetAcceptsTab() (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_get_accepts_tab((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetBorderWindowSize(type_ C.GtkTextWindowType) (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_border_window_size((*C.GtkTextView)(_self_), type_)
	return
}

func (_self_ *TextView) GetBuffer() (_return_ *C.GtkTextBuffer) {
	_return_ = C.gtk_text_view_get_buffer((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetCursorLocations(iter *C.GtkTextIter) (strong *C.GdkRectangle, weak *C.GdkRectangle) {
	C._gtk_text_view_get_cursor_locations((*C.GtkTextView)(_self_), iter, strong, weak)
	return
}

func (_self_ *TextView) GetCursorVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_get_cursor_visible((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetDefaultAttributes() (_return_ *C.GtkTextAttributes) {
	_return_ = C.gtk_text_view_get_default_attributes((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetEditable() (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_get_editable((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetIndent() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_indent((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetInputHints() (_return_ C.GtkInputHints) {
	_return_ = C.gtk_text_view_get_input_hints((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetInputPurpose() (_return_ C.GtkInputPurpose) {
	_return_ = C.gtk_text_view_get_input_purpose((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetIterAtLocation(x C.gint, y C.gint) (iter *C.GtkTextIter) {
	C.gtk_text_view_get_iter_at_location((*C.GtkTextView)(_self_), iter, x, y)
	return
}

func (_self_ *TextView) GetIterAtPosition(x C.gint, y C.gint) (iter *C.GtkTextIter, trailing *C.gint) {
	C.gtk_text_view_get_iter_at_position((*C.GtkTextView)(_self_), iter, trailing, x, y)
	return
}

func (_self_ *TextView) GetIterLocation(iter *C.GtkTextIter) (location *C.GdkRectangle) {
	C._gtk_text_view_get_iter_location((*C.GtkTextView)(_self_), iter, location)
	return
}

func (_self_ *TextView) GetJustification() (_return_ C.GtkJustification) {
	_return_ = C.gtk_text_view_get_justification((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetLeftMargin() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_left_margin((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetLineAtY(y C.gint) (target_iter *C.GtkTextIter, line_top *C.gint) {
	C.gtk_text_view_get_line_at_y((*C.GtkTextView)(_self_), target_iter, y, line_top)
	return
}

func (_self_ *TextView) GetLineYrange(iter *C.GtkTextIter) (y *C.gint, height *C.gint) {
	C._gtk_text_view_get_line_yrange((*C.GtkTextView)(_self_), iter, y, height)
	return
}

func (_self_ *TextView) GetOverwrite() (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_get_overwrite((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetPixelsAboveLines() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_pixels_above_lines((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetPixelsBelowLines() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_pixels_below_lines((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetPixelsInsideWrap() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_pixels_inside_wrap((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetRightMargin() (_return_ C.gint) {
	_return_ = C.gtk_text_view_get_right_margin((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetTabs() (_return_ *C.PangoTabArray) {
	_return_ = C.gtk_text_view_get_tabs((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_text_view_get_visible_rect((*C.GtkTextView)(_self_), visible_rect)
	return
}

func (_self_ *TextView) GetWindow(win C.GtkTextWindowType) (_return_ *C.GdkWindow) {
	_return_ = C.gtk_text_view_get_window((*C.GtkTextView)(_self_), win)
	return
}

func (_self_ *TextView) GetWindowType(window *C.GdkWindow) (_return_ C.GtkTextWindowType) {
	_return_ = C.gtk_text_view_get_window_type((*C.GtkTextView)(_self_), window)
	return
}

func (_self_ *TextView) GetWrapMode() (_return_ C.GtkWrapMode) {
	_return_ = C.gtk_text_view_get_wrap_mode((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ImContextFilterKeypress(event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_im_context_filter_keypress((*C.GtkTextView)(_self_), event)
	return
}

func (_self_ *TextView) MoveChild(child *C.GtkWidget, xpos C.gint, ypos C.gint) () {
	C.gtk_text_view_move_child((*C.GtkTextView)(_self_), child, xpos, ypos)
	return
}

func (_self_ *TextView) MoveMarkOnscreen(mark *C.GtkTextMark) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_move_mark_onscreen((*C.GtkTextView)(_self_), mark)
	return
}

func (_self_ *TextView) MoveVisually(iter *C.GtkTextIter, count C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_move_visually((*C.GtkTextView)(_self_), iter, count)
	return
}

func (_self_ *TextView) PlaceCursorOnscreen() (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_place_cursor_onscreen((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ResetImContext() () {
	C.gtk_text_view_reset_im_context((*C.GtkTextView)(_self_))
	return
}

func (_self_ *TextView) ScrollMarkOnscreen(mark *C.GtkTextMark) () {
	C.gtk_text_view_scroll_mark_onscreen((*C.GtkTextView)(_self_), mark)
	return
}

func (_self_ *TextView) ScrollToIter(iter *C.GtkTextIter, within_margin C.gdouble, use_align C.gboolean, xalign C.gdouble, yalign C.gdouble) (_return_ C.gboolean) {
	_return_ = C.gtk_text_view_scroll_to_iter((*C.GtkTextView)(_self_), iter, within_margin, use_align, xalign, yalign)
	return
}

func (_self_ *TextView) ScrollToMark(mark *C.GtkTextMark, within_margin C.gdouble, use_align C.gboolean, xalign C.gdouble, yalign C.gdouble) () {
	C.gtk_text_view_scroll_to_mark((*C.GtkTextView)(_self_), mark, within_margin, use_align, xalign, yalign)
	return
}

func (_self_ *TextView) SetAcceptsTab(accepts_tab C.gboolean) () {
	C.gtk_text_view_set_accepts_tab((*C.GtkTextView)(_self_), accepts_tab)
	return
}

func (_self_ *TextView) SetBorderWindowSize(type_ C.GtkTextWindowType, size C.gint) () {
	C.gtk_text_view_set_border_window_size((*C.GtkTextView)(_self_), type_, size)
	return
}

func (_self_ *TextView) SetBuffer(buffer *C.GtkTextBuffer) () {
	C.gtk_text_view_set_buffer((*C.GtkTextView)(_self_), buffer)
	return
}

func (_self_ *TextView) SetCursorVisible(setting C.gboolean) () {
	C.gtk_text_view_set_cursor_visible((*C.GtkTextView)(_self_), setting)
	return
}

func (_self_ *TextView) SetEditable(setting C.gboolean) () {
	C.gtk_text_view_set_editable((*C.GtkTextView)(_self_), setting)
	return
}

func (_self_ *TextView) SetIndent(indent C.gint) () {
	C.gtk_text_view_set_indent((*C.GtkTextView)(_self_), indent)
	return
}

func (_self_ *TextView) SetInputHints(hints C.GtkInputHints) () {
	C.gtk_text_view_set_input_hints((*C.GtkTextView)(_self_), hints)
	return
}

func (_self_ *TextView) SetInputPurpose(purpose C.GtkInputPurpose) () {
	C.gtk_text_view_set_input_purpose((*C.GtkTextView)(_self_), purpose)
	return
}

func (_self_ *TextView) SetJustification(justification C.GtkJustification) () {
	C.gtk_text_view_set_justification((*C.GtkTextView)(_self_), justification)
	return
}

func (_self_ *TextView) SetLeftMargin(left_margin C.gint) () {
	C.gtk_text_view_set_left_margin((*C.GtkTextView)(_self_), left_margin)
	return
}

func (_self_ *TextView) SetOverwrite(overwrite C.gboolean) () {
	C.gtk_text_view_set_overwrite((*C.GtkTextView)(_self_), overwrite)
	return
}

func (_self_ *TextView) SetPixelsAboveLines(pixels_above_lines C.gint) () {
	C.gtk_text_view_set_pixels_above_lines((*C.GtkTextView)(_self_), pixels_above_lines)
	return
}

func (_self_ *TextView) SetPixelsBelowLines(pixels_below_lines C.gint) () {
	C.gtk_text_view_set_pixels_below_lines((*C.GtkTextView)(_self_), pixels_below_lines)
	return
}

func (_self_ *TextView) SetPixelsInsideWrap(pixels_inside_wrap C.gint) () {
	C.gtk_text_view_set_pixels_inside_wrap((*C.GtkTextView)(_self_), pixels_inside_wrap)
	return
}

func (_self_ *TextView) SetRightMargin(right_margin C.gint) () {
	C.gtk_text_view_set_right_margin((*C.GtkTextView)(_self_), right_margin)
	return
}

func (_self_ *TextView) SetTabs(tabs *C.PangoTabArray) () {
	C.gtk_text_view_set_tabs((*C.GtkTextView)(_self_), tabs)
	return
}

func (_self_ *TextView) SetWrapMode(wrap_mode C.GtkWrapMode) () {
	C.gtk_text_view_set_wrap_mode((*C.GtkTextView)(_self_), wrap_mode)
	return
}

func (_self_ *TextView) StartsDisplayLine(iter *C.GtkTextIter) (_return_ C.gboolean) {
	_return_ = C._gtk_text_view_starts_display_line((*C.GtkTextView)(_self_), iter)
	return
}

func (_self_ *TextView) WindowToBufferCoords(win C.GtkTextWindowType, window_x C.gint, window_y C.gint) (buffer_x *C.gint, buffer_y *C.gint) {
	C.gtk_text_view_window_to_buffer_coords((*C.GtkTextView)(_self_), win, window_x, window_y, buffer_x, buffer_y)
	return
}

func ThemingEngineLoad(name *C.gchar) (_return_ *C.GtkThemingEngine) {
	_return_ = C._gtk_theming_engine_load(name)
	return
}

func ThemingEngineRegisterProperty(name_space *C.gchar, parse_func C.GtkStylePropertyParser, pspec *C.GParamSpec) () {
	C._gtk_theming_engine_register_property(name_space, parse_func, pspec)
	return
}

func (_self_ *ThemingEngine) GetBackgroundColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_background_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetBorder(state C.GtkStateFlags) (border *C.GtkBorder) {
	C.gtk_theming_engine_get_border((*C.GtkThemingEngine)(_self_), state, border)
	return
}

func (_self_ *ThemingEngine) GetBorderColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_border_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetColor(state C.GtkStateFlags) (color *C.GdkRGBA) {
	C.gtk_theming_engine_get_color((*C.GtkThemingEngine)(_self_), state, color)
	return
}

func (_self_ *ThemingEngine) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_theming_engine_get_direction((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetFont(state C.GtkStateFlags) (_return_ *C.PangoFontDescription) {
	_return_ = C._gtk_theming_engine_get_font((*C.GtkThemingEngine)(_self_), state)
	return
}

func (_self_ *ThemingEngine) GetJunctionSides() (_return_ C.GtkJunctionSides) {
	_return_ = C.gtk_theming_engine_get_junction_sides((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetMargin(state C.GtkStateFlags) (margin *C.GtkBorder) {
	C.gtk_theming_engine_get_margin((*C.GtkThemingEngine)(_self_), state, margin)
	return
}

func (_self_ *ThemingEngine) GetPadding(state C.GtkStateFlags) (padding *C.GtkBorder) {
	C.gtk_theming_engine_get_padding((*C.GtkThemingEngine)(_self_), state, padding)
	return
}

func (_self_ *ThemingEngine) GetPath() (_return_ *C.GtkWidgetPath) {
	_return_ = C._gtk_theming_engine_get_path((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetProperty(property *C.gchar, state C.GtkStateFlags) (value *C.GValue) {
	C._gtk_theming_engine_get_property((*C.GtkThemingEngine)(_self_), property, state, value)
	return
}

func (_self_ *ThemingEngine) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_theming_engine_get_screen((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetState() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_theming_engine_get_state((*C.GtkThemingEngine)(_self_))
	return
}

func (_self_ *ThemingEngine) GetStyleProperty(property_name *C.gchar, value *C.GValue) () {
	C._gtk_theming_engine_get_style_property((*C.GtkThemingEngine)(_self_), property_name, value)
	return
}

func (_self_ *ThemingEngine) HasClass(style_class *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_theming_engine_has_class((*C.GtkThemingEngine)(_self_), style_class)
	return
}

func (_self_ *ThemingEngine) HasRegion(style_region *C.gchar) (_return_ C.gboolean, flags *C.GtkRegionFlags) {
	_return_ = C._gtk_theming_engine_has_region((*C.GtkThemingEngine)(_self_), style_region, flags)
	return
}

func (_self_ *ThemingEngine) LookupColor(color_name *C.gchar) (_return_ C.gboolean, color *C.GdkRGBA) {
	_return_ = C._gtk_theming_engine_lookup_color((*C.GtkThemingEngine)(_self_), color_name, color)
	return
}

func ToggleActionNew(name *C.gchar, label *C.gchar, tooltip *C.gchar, stock_id *C.gchar) (_return_ *C.GtkToggleAction) {
	_return_ = C._gtk_toggle_action_new(name, label, tooltip, stock_id)
	return
}

func (_self_ *ToggleAction) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_action_get_active((*C.GtkToggleAction)(_self_))
	return
}

func (_self_ *ToggleAction) GetDrawAsRadio() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_action_get_draw_as_radio((*C.GtkToggleAction)(_self_))
	return
}

func (_self_ *ToggleAction) SetActive(is_active C.gboolean) () {
	C.gtk_toggle_action_set_active((*C.GtkToggleAction)(_self_), is_active)
	return
}

func (_self_ *ToggleAction) SetDrawAsRadio(draw_as_radio C.gboolean) () {
	C.gtk_toggle_action_set_draw_as_radio((*C.GtkToggleAction)(_self_), draw_as_radio)
	return
}

func (_self_ *ToggleAction) Toggled() () {
	C.gtk_toggle_action_toggled((*C.GtkToggleAction)(_self_))
	return
}

func ToggleButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_toggle_button_new()
	return
}

func ToggleButtonNewWithLabel(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_toggle_button_new_with_label(label)
	return
}

func ToggleButtonNewWithMnemonic(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_toggle_button_new_with_mnemonic(label)
	return
}

func (_self_ *ToggleButton) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_button_get_active((*C.GtkToggleButton)(_self_))
	return
}

func (_self_ *ToggleButton) GetInconsistent() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_button_get_inconsistent((*C.GtkToggleButton)(_self_))
	return
}

func (_self_ *ToggleButton) GetMode() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_button_get_mode((*C.GtkToggleButton)(_self_))
	return
}

func (_self_ *ToggleButton) SetActive(is_active C.gboolean) () {
	C.gtk_toggle_button_set_active((*C.GtkToggleButton)(_self_), is_active)
	return
}

func (_self_ *ToggleButton) SetInconsistent(setting C.gboolean) () {
	C.gtk_toggle_button_set_inconsistent((*C.GtkToggleButton)(_self_), setting)
	return
}

func (_self_ *ToggleButton) SetMode(draw_indicator C.gboolean) () {
	C.gtk_toggle_button_set_mode((*C.GtkToggleButton)(_self_), draw_indicator)
	return
}

func (_self_ *ToggleButton) Toggled() () {
	C.gtk_toggle_button_toggled((*C.GtkToggleButton)(_self_))
	return
}

func ToggleToolButtonNew() (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_toggle_tool_button_new()
	return
}

func ToggleToolButtonNewFromStock(stock_id *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_toggle_tool_button_new_from_stock(stock_id)
	return
}

func (_self_ *ToggleToolButton) GetActive() (_return_ C.gboolean) {
	_return_ = C.gtk_toggle_tool_button_get_active((*C.GtkToggleToolButton)(_self_))
	return
}

func (_self_ *ToggleToolButton) SetActive(is_active C.gboolean) () {
	C.gtk_toggle_tool_button_set_active((*C.GtkToggleToolButton)(_self_), is_active)
	return
}

func ToolButtonNew(icon_widget *C.GtkWidget, label *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_tool_button_new(icon_widget, label)
	return
}

func ToolButtonNewFromStock(stock_id *C.gchar) (_return_ *C.GtkToolItem) {
	_return_ = C._gtk_tool_button_new_from_stock(stock_id)
	return
}

func (_self_ *ToolButton) GetIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_tool_button_get_icon_name((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) GetIconWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tool_button_get_icon_widget((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_tool_button_get_label((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) GetLabelWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tool_button_get_label_widget((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) GetStockId() (_return_ *C.gchar) {
	_return_ = C._gtk_tool_button_get_stock_id((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) GetUseUnderline() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_button_get_use_underline((*C.GtkToolButton)(_self_))
	return
}

func (_self_ *ToolButton) SetIconName(icon_name *C.gchar) () {
	C._gtk_tool_button_set_icon_name((*C.GtkToolButton)(_self_), icon_name)
	return
}

func (_self_ *ToolButton) SetIconWidget(icon_widget *C.GtkWidget) () {
	C.gtk_tool_button_set_icon_widget((*C.GtkToolButton)(_self_), icon_widget)
	return
}

func (_self_ *ToolButton) SetLabel(label *C.gchar) () {
	C._gtk_tool_button_set_label((*C.GtkToolButton)(_self_), label)
	return
}

func (_self_ *ToolButton) SetLabelWidget(label_widget *C.GtkWidget) () {
	C.gtk_tool_button_set_label_widget((*C.GtkToolButton)(_self_), label_widget)
	return
}

func (_self_ *ToolButton) SetStockId(stock_id *C.gchar) () {
	C._gtk_tool_button_set_stock_id((*C.GtkToolButton)(_self_), stock_id)
	return
}

func (_self_ *ToolButton) SetUseUnderline(use_underline C.gboolean) () {
	C.gtk_tool_button_set_use_underline((*C.GtkToolButton)(_self_), use_underline)
	return
}

func ToolItemNew() (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_tool_item_new()
	return
}

func (_self_ *ToolItem) GetEllipsizeMode() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_get_ellipsize_mode((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetExpand() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_expand((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetHomogeneous() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_homogeneous((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_item_get_icon_size((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetIsImportant() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_is_important((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetProxyMenuItem(menu_item_id *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_tool_item_get_proxy_menu_item((*C.GtkToolItem)(_self_), menu_item_id)
	return
}

func (_self_ *ToolItem) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_get_relief_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextAlignment() (_return_ C.gfloat) {
	_return_ = C.gtk_tool_item_get_text_alignment((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextOrientation() (_return_ C.GtkOrientation) {
	_return_ = C.gtk_tool_item_get_text_orientation((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetTextSizeGroup() (_return_ *C.GtkSizeGroup) {
	_return_ = C.gtk_tool_item_get_text_size_group((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetToolbarStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_item_get_toolbar_style((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetUseDragWindow() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_use_drag_window((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetVisibleHorizontal() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_visible_horizontal((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) GetVisibleVertical() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_get_visible_vertical((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) RebuildMenu() () {
	C.gtk_tool_item_rebuild_menu((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) RetrieveProxyMenuItem() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tool_item_retrieve_proxy_menu_item((*C.GtkToolItem)(_self_))
	return
}

func (_self_ *ToolItem) SetExpand(expand C.gboolean) () {
	C.gtk_tool_item_set_expand((*C.GtkToolItem)(_self_), expand)
	return
}

func (_self_ *ToolItem) SetHomogeneous(homogeneous C.gboolean) () {
	C.gtk_tool_item_set_homogeneous((*C.GtkToolItem)(_self_), homogeneous)
	return
}

func (_self_ *ToolItem) SetIsImportant(is_important C.gboolean) () {
	C.gtk_tool_item_set_is_important((*C.GtkToolItem)(_self_), is_important)
	return
}

func (_self_ *ToolItem) SetProxyMenuItem(menu_item_id *C.gchar, menu_item *C.GtkWidget) () {
	C._gtk_tool_item_set_proxy_menu_item((*C.GtkToolItem)(_self_), menu_item_id, menu_item)
	return
}

func (_self_ *ToolItem) SetTooltipMarkup(markup *C.gchar) () {
	C._gtk_tool_item_set_tooltip_markup((*C.GtkToolItem)(_self_), markup)
	return
}

func (_self_ *ToolItem) SetTooltipText(text *C.gchar) () {
	C._gtk_tool_item_set_tooltip_text((*C.GtkToolItem)(_self_), text)
	return
}

func (_self_ *ToolItem) SetUseDragWindow(use_drag_window C.gboolean) () {
	C.gtk_tool_item_set_use_drag_window((*C.GtkToolItem)(_self_), use_drag_window)
	return
}

func (_self_ *ToolItem) SetVisibleHorizontal(visible_horizontal C.gboolean) () {
	C.gtk_tool_item_set_visible_horizontal((*C.GtkToolItem)(_self_), visible_horizontal)
	return
}

func (_self_ *ToolItem) SetVisibleVertical(visible_vertical C.gboolean) () {
	C.gtk_tool_item_set_visible_vertical((*C.GtkToolItem)(_self_), visible_vertical)
	return
}

func (_self_ *ToolItem) ToolbarReconfigured() () {
	C.gtk_tool_item_toolbar_reconfigured((*C.GtkToolItem)(_self_))
	return
}

func ToolItemGroupNew(label *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_tool_item_group_new(label)
	return
}

func (_self_ *ToolItemGroup) GetCollapsed() (_return_ C.gboolean) {
	_return_ = C.gtk_tool_item_group_get_collapsed((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetDropItem(x C.gint, y C.gint) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_tool_item_group_get_drop_item((*C.GtkToolItemGroup)(_self_), x, y)
	return
}

func (_self_ *ToolItemGroup) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.gtk_tool_item_group_get_ellipsize((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetHeaderRelief() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_tool_item_group_get_header_relief((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetItemPosition(item *C.GtkToolItem) (_return_ C.gint) {
	_return_ = C.gtk_tool_item_group_get_item_position((*C.GtkToolItemGroup)(_self_), item)
	return
}

func (_self_ *ToolItemGroup) GetLabel() (_return_ *C.gchar) {
	_return_ = C._gtk_tool_item_group_get_label((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetLabelWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tool_item_group_get_label_widget((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetNItems() (_return_ C.guint) {
	_return_ = C.gtk_tool_item_group_get_n_items((*C.GtkToolItemGroup)(_self_))
	return
}

func (_self_ *ToolItemGroup) GetNthItem(index C.guint) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_tool_item_group_get_nth_item((*C.GtkToolItemGroup)(_self_), index)
	return
}

func (_self_ *ToolItemGroup) Insert(item *C.GtkToolItem, position C.gint) () {
	C.gtk_tool_item_group_insert((*C.GtkToolItemGroup)(_self_), item, position)
	return
}

func (_self_ *ToolItemGroup) SetCollapsed(collapsed C.gboolean) () {
	C.gtk_tool_item_group_set_collapsed((*C.GtkToolItemGroup)(_self_), collapsed)
	return
}

func (_self_ *ToolItemGroup) SetEllipsize(ellipsize C.PangoEllipsizeMode) () {
	C.gtk_tool_item_group_set_ellipsize((*C.GtkToolItemGroup)(_self_), ellipsize)
	return
}

func (_self_ *ToolItemGroup) SetHeaderRelief(style C.GtkReliefStyle) () {
	C.gtk_tool_item_group_set_header_relief((*C.GtkToolItemGroup)(_self_), style)
	return
}

func (_self_ *ToolItemGroup) SetItemPosition(item *C.GtkToolItem, position C.gint) () {
	C.gtk_tool_item_group_set_item_position((*C.GtkToolItemGroup)(_self_), item, position)
	return
}

func (_self_ *ToolItemGroup) SetLabel(label *C.gchar) () {
	C._gtk_tool_item_group_set_label((*C.GtkToolItemGroup)(_self_), label)
	return
}

func (_self_ *ToolItemGroup) SetLabelWidget(label_widget *C.GtkWidget) () {
	C.gtk_tool_item_group_set_label_widget((*C.GtkToolItemGroup)(_self_), label_widget)
	return
}

func ToolPaletteNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tool_palette_new()
	return
}

func ToolPaletteGetDragTargetGroup() (_return_ *C.GtkTargetEntry) {
	_return_ = C._gtk_tool_palette_get_drag_target_group()
	return
}

func ToolPaletteGetDragTargetItem() (_return_ *C.GtkTargetEntry) {
	_return_ = C._gtk_tool_palette_get_drag_target_item()
	return
}

func (_self_ *ToolPalette) AddDragDest(widget *C.GtkWidget, flags C.GtkDestDefaults, targets C.GtkToolPaletteDragTargets, actions C.GdkDragAction) () {
	C.gtk_tool_palette_add_drag_dest((*C.GtkToolPalette)(_self_), widget, flags, targets, actions)
	return
}

func (_self_ *ToolPalette) GetDragItem(selection *C.GtkSelectionData) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_tool_palette_get_drag_item((*C.GtkToolPalette)(_self_), selection)
	return
}

func (_self_ *ToolPalette) GetDropGroup(x C.gint, y C.gint) (_return_ *C.GtkToolItemGroup) {
	_return_ = C.gtk_tool_palette_get_drop_group((*C.GtkToolPalette)(_self_), x, y)
	return
}

func (_self_ *ToolPalette) GetDropItem(x C.gint, y C.gint) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_tool_palette_get_drop_item((*C.GtkToolPalette)(_self_), x, y)
	return
}

func (_self_ *ToolPalette) GetExclusive(group *C.GtkToolItemGroup) (_return_ C.gboolean) {
	_return_ = C.gtk_tool_palette_get_exclusive((*C.GtkToolPalette)(_self_), group)
	return
}

func (_self_ *ToolPalette) GetExpand(group *C.GtkToolItemGroup) (_return_ C.gboolean) {
	_return_ = C.gtk_tool_palette_get_expand((*C.GtkToolPalette)(_self_), group)
	return
}

func (_self_ *ToolPalette) GetGroupPosition(group *C.GtkToolItemGroup) (_return_ C.gint) {
	_return_ = C.gtk_tool_palette_get_group_position((*C.GtkToolPalette)(_self_), group)
	return
}

func (_self_ *ToolPalette) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_tool_palette_get_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_tool_palette_get_style((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) SetDragSource(targets C.GtkToolPaletteDragTargets) () {
	C.gtk_tool_palette_set_drag_source((*C.GtkToolPalette)(_self_), targets)
	return
}

func (_self_ *ToolPalette) SetExclusive(group *C.GtkToolItemGroup, exclusive C.gboolean) () {
	C.gtk_tool_palette_set_exclusive((*C.GtkToolPalette)(_self_), group, exclusive)
	return
}

func (_self_ *ToolPalette) SetExpand(group *C.GtkToolItemGroup, expand C.gboolean) () {
	C.gtk_tool_palette_set_expand((*C.GtkToolPalette)(_self_), group, expand)
	return
}

func (_self_ *ToolPalette) SetGroupPosition(group *C.GtkToolItemGroup, position C.gint) () {
	C.gtk_tool_palette_set_group_position((*C.GtkToolPalette)(_self_), group, position)
	return
}

func (_self_ *ToolPalette) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_tool_palette_set_icon_size((*C.GtkToolPalette)(_self_), icon_size)
	return
}

func (_self_ *ToolPalette) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_tool_palette_set_style((*C.GtkToolPalette)(_self_), style)
	return
}

func (_self_ *ToolPalette) UnsetIconSize() () {
	C.gtk_tool_palette_unset_icon_size((*C.GtkToolPalette)(_self_))
	return
}

func (_self_ *ToolPalette) UnsetStyle() () {
	C.gtk_tool_palette_unset_style((*C.GtkToolPalette)(_self_))
	return
}

func ToolbarNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_toolbar_new()
	return
}

func (_self_ *Toolbar) GetDropIndex(x C.gint, y C.gint) (_return_ C.gint) {
	_return_ = C.gtk_toolbar_get_drop_index((*C.GtkToolbar)(_self_), x, y)
	return
}

func (_self_ *Toolbar) GetIconSize() (_return_ C.GtkIconSize) {
	_return_ = C.gtk_toolbar_get_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetItemIndex(item *C.GtkToolItem) (_return_ C.gint) {
	_return_ = C.gtk_toolbar_get_item_index((*C.GtkToolbar)(_self_), item)
	return
}

func (_self_ *Toolbar) GetNItems() (_return_ C.gint) {
	_return_ = C.gtk_toolbar_get_n_items((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetNthItem(n C.gint) (_return_ *C.GtkToolItem) {
	_return_ = C.gtk_toolbar_get_nth_item((*C.GtkToolbar)(_self_), n)
	return
}

func (_self_ *Toolbar) GetReliefStyle() (_return_ C.GtkReliefStyle) {
	_return_ = C.gtk_toolbar_get_relief_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetShowArrow() (_return_ C.gboolean) {
	_return_ = C.gtk_toolbar_get_show_arrow((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) GetStyle() (_return_ C.GtkToolbarStyle) {
	_return_ = C.gtk_toolbar_get_style((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) Insert(item *C.GtkToolItem, pos C.gint) () {
	C.gtk_toolbar_insert((*C.GtkToolbar)(_self_), item, pos)
	return
}

func (_self_ *Toolbar) SetDropHighlightItem(tool_item *C.GtkToolItem, index_ C.gint) () {
	C.gtk_toolbar_set_drop_highlight_item((*C.GtkToolbar)(_self_), tool_item, index_)
	return
}

func (_self_ *Toolbar) SetIconSize(icon_size C.GtkIconSize) () {
	C.gtk_toolbar_set_icon_size((*C.GtkToolbar)(_self_), icon_size)
	return
}

func (_self_ *Toolbar) SetShowArrow(show_arrow C.gboolean) () {
	C.gtk_toolbar_set_show_arrow((*C.GtkToolbar)(_self_), show_arrow)
	return
}

func (_self_ *Toolbar) SetStyle(style C.GtkToolbarStyle) () {
	C.gtk_toolbar_set_style((*C.GtkToolbar)(_self_), style)
	return
}

func (_self_ *Toolbar) UnsetIconSize() () {
	C.gtk_toolbar_unset_icon_size((*C.GtkToolbar)(_self_))
	return
}

func (_self_ *Toolbar) UnsetStyle() () {
	C.gtk_toolbar_unset_style((*C.GtkToolbar)(_self_))
	return
}

func TooltipTriggerTooltipQuery(display *C.GdkDisplay) () {
	C.gtk_tooltip_trigger_tooltip_query(display)
	return
}

func (_self_ *Tooltip) SetCustom(custom_widget *C.GtkWidget) () {
	C.gtk_tooltip_set_custom((*C.GtkTooltip)(_self_), custom_widget)
	return
}

func (_self_ *Tooltip) SetIcon(pixbuf *C.GdkPixbuf) () {
	C.gtk_tooltip_set_icon((*C.GtkTooltip)(_self_), pixbuf)
	return
}

func (_self_ *Tooltip) SetIconFromGicon(gicon *C.GIcon, size C.GtkIconSize) () {
	C.gtk_tooltip_set_icon_from_gicon((*C.GtkTooltip)(_self_), gicon, size)
	return
}

func (_self_ *Tooltip) SetIconFromIconName(icon_name *C.gchar, size C.GtkIconSize) () {
	C._gtk_tooltip_set_icon_from_icon_name((*C.GtkTooltip)(_self_), icon_name, size)
	return
}

func (_self_ *Tooltip) SetIconFromStock(stock_id *C.gchar, size C.GtkIconSize) () {
	C._gtk_tooltip_set_icon_from_stock((*C.GtkTooltip)(_self_), stock_id, size)
	return
}

func (_self_ *Tooltip) SetMarkup(markup *C.gchar) () {
	C._gtk_tooltip_set_markup((*C.GtkTooltip)(_self_), markup)
	return
}

func (_self_ *Tooltip) SetText(text *C.gchar) () {
	C._gtk_tooltip_set_text((*C.GtkTooltip)(_self_), text)
	return
}

func (_self_ *Tooltip) SetTipArea(rect *C.GdkRectangle) () {
	C._gtk_tooltip_set_tip_area((*C.GtkTooltip)(_self_), rect)
	return
}

func (_self_ *TreeIter) Copy() (_return_ *C.GtkTreeIter) {
	_return_ = C.gtk_tree_iter_copy((*C.GtkTreeIter)(_self_))
	return
}

func (_self_ *TreeIter) Free() () {
	C.gtk_tree_iter_free((*C.GtkTreeIter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ClearCache() () {
	C.gtk_tree_model_filter_clear_cache((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) ConvertChildIterToIter(child_iter *C.GtkTreeIter) (_return_ C.gboolean, filter_iter *C.GtkTreeIter) {
	_return_ = C.gtk_tree_model_filter_convert_child_iter_to_iter((*C.GtkTreeModelFilter)(_self_), filter_iter, child_iter)
	return
}

func (_self_ *TreeModelFilter) ConvertChildPathToPath(child_path *C.GtkTreePath) (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_model_filter_convert_child_path_to_path((*C.GtkTreeModelFilter)(_self_), child_path)
	return
}

func (_self_ *TreeModelFilter) ConvertIterToChildIter(filter_iter *C.GtkTreeIter) (child_iter *C.GtkTreeIter) {
	C.gtk_tree_model_filter_convert_iter_to_child_iter((*C.GtkTreeModelFilter)(_self_), child_iter, filter_iter)
	return
}

func (_self_ *TreeModelFilter) ConvertPathToChildPath(filter_path *C.GtkTreePath) (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_model_filter_convert_path_to_child_path((*C.GtkTreeModelFilter)(_self_), filter_path)
	return
}

func (_self_ *TreeModelFilter) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_filter_get_model((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) Refilter() () {
	C.gtk_tree_model_filter_refilter((*C.GtkTreeModelFilter)(_self_))
	return
}

func (_self_ *TreeModelFilter) SetModifyFunc(n_columns C.gint, types *C.GType, func_ C.GtkTreeModelFilterModifyFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_model_filter_set_modify_func((*C.GtkTreeModelFilter)(_self_), n_columns, types, func_, data, destroy)
	return
}

func (_self_ *TreeModelFilter) SetVisibleColumn(column C.gint) () {
	C.gtk_tree_model_filter_set_visible_column((*C.GtkTreeModelFilter)(_self_), column)
	return
}

func (_self_ *TreeModelFilter) SetVisibleFunc(func_ C.GtkTreeModelFilterVisibleFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_model_filter_set_visible_func((*C.GtkTreeModelFilter)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeModelSort) ClearCache() () {
	C.gtk_tree_model_sort_clear_cache((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) ConvertChildIterToIter(child_iter *C.GtkTreeIter) (_return_ C.gboolean, sort_iter *C.GtkTreeIter) {
	_return_ = C.gtk_tree_model_sort_convert_child_iter_to_iter((*C.GtkTreeModelSort)(_self_), sort_iter, child_iter)
	return
}

func (_self_ *TreeModelSort) ConvertChildPathToPath(child_path *C.GtkTreePath) (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_model_sort_convert_child_path_to_path((*C.GtkTreeModelSort)(_self_), child_path)
	return
}

func (_self_ *TreeModelSort) ConvertIterToChildIter(sorted_iter *C.GtkTreeIter) (child_iter *C.GtkTreeIter) {
	C.gtk_tree_model_sort_convert_iter_to_child_iter((*C.GtkTreeModelSort)(_self_), child_iter, sorted_iter)
	return
}

func (_self_ *TreeModelSort) ConvertPathToChildPath(sorted_path *C.GtkTreePath) (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_model_sort_convert_path_to_child_path((*C.GtkTreeModelSort)(_self_), sorted_path)
	return
}

func (_self_ *TreeModelSort) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_model_sort_get_model((*C.GtkTreeModelSort)(_self_))
	return
}

func (_self_ *TreeModelSort) IterIsValid(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_model_sort_iter_is_valid((*C.GtkTreeModelSort)(_self_), iter)
	return
}

func (_self_ *TreeModelSort) ResetDefaultSortFunc() () {
	C.gtk_tree_model_sort_reset_default_sort_func((*C.GtkTreeModelSort)(_self_))
	return
}

func TreePathNew() (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_path_new()
	return
}

func TreePathNewFirst() (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_path_new_first()
	return
}

func TreePathNewFromString(path *C.gchar) (_return_ *C.GtkTreePath) {
	_return_ = C._gtk_tree_path_new_from_string(path)
	return
}

func (_self_ *TreePath) AppendIndex(index_ C.gint) () {
	C.gtk_tree_path_append_index((*C.GtkTreePath)(_self_), index_)
	return
}

func (_self_ *TreePath) Compare(b *C.GtkTreePath) (_return_ C.gint) {
	_return_ = C._gtk_tree_path_compare((*C.GtkTreePath)(_self_), b)
	return
}

func (_self_ *TreePath) Copy() (_return_ *C.GtkTreePath) {
	_return_ = C._gtk_tree_path_copy((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) Down() () {
	C.gtk_tree_path_down((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) Free() () {
	C.gtk_tree_path_free((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetDepth() (_return_ C.gint) {
	_return_ = C.gtk_tree_path_get_depth((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetIndices() (_return_ *C.gint) {
	_return_ = C.gtk_tree_path_get_indices((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) GetIndicesWithDepth() (_return_ *C.gint, depth *C.gint) {
	_return_ = C.gtk_tree_path_get_indices_with_depth((*C.GtkTreePath)(_self_), depth)
	return
}

func (_self_ *TreePath) IsAncestor(descendant *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_path_is_ancestor((*C.GtkTreePath)(_self_), descendant)
	return
}

func (_self_ *TreePath) IsDescendant(ancestor *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_path_is_descendant((*C.GtkTreePath)(_self_), ancestor)
	return
}

func (_self_ *TreePath) Next() () {
	C.gtk_tree_path_next((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) PrependIndex(index_ C.gint) () {
	C.gtk_tree_path_prepend_index((*C.GtkTreePath)(_self_), index_)
	return
}

func (_self_ *TreePath) Prev() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_path_prev((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) ToString() (_return_ *C.gchar) {
	_return_ = C.gtk_tree_path_to_string((*C.GtkTreePath)(_self_))
	return
}

func (_self_ *TreePath) Up() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_path_up((*C.GtkTreePath)(_self_))
	return
}

func TreeRowReferenceNew(model *C.GtkTreeModel, path *C.GtkTreePath) (_return_ *C.GtkTreeRowReference) {
	_return_ = C.gtk_tree_row_reference_new(model, path)
	return
}

func TreeRowReferenceNewProxy(proxy *C.GObject, model *C.GtkTreeModel, path *C.GtkTreePath) (_return_ *C.GtkTreeRowReference) {
	_return_ = C.gtk_tree_row_reference_new_proxy(proxy, model, path)
	return
}

func TreeRowReferenceDeleted(proxy *C.GObject, path *C.GtkTreePath) () {
	C.gtk_tree_row_reference_deleted(proxy, path)
	return
}

func TreeRowReferenceInserted(proxy *C.GObject, path *C.GtkTreePath) () {
	C.gtk_tree_row_reference_inserted(proxy, path)
	return
}

func TreeRowReferenceReordered(proxy *C.GObject, path *C.GtkTreePath, iter *C.GtkTreeIter, new_order *C.gint) () {
	C.gtk_tree_row_reference_reordered(proxy, path, iter, new_order)
	return
}

func (_self_ *TreeRowReference) Copy() (_return_ *C.GtkTreeRowReference) {
	_return_ = C.gtk_tree_row_reference_copy((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) Free() () {
	C.gtk_tree_row_reference_free((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_row_reference_get_model((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) GetPath() (_return_ *C.GtkTreePath) {
	_return_ = C.gtk_tree_row_reference_get_path((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeRowReference) Valid() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_row_reference_valid((*C.GtkTreeRowReference)(_self_))
	return
}

func (_self_ *TreeSelection) CountSelectedRows() (_return_ C.gint) {
	_return_ = C.gtk_tree_selection_count_selected_rows((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetMode() (_return_ C.GtkSelectionMode) {
	_return_ = C.gtk_tree_selection_get_mode((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelectFunction() (_return_ C.GtkTreeSelectionFunc) {
	_return_ = C.gtk_tree_selection_get_select_function((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetSelected() (_return_ C.gboolean, model unsafe.Pointer, iter *C.GtkTreeIter) {
	_return_ = C._gtk_tree_selection_get_selected((*C.GtkTreeSelection)(_self_), model, iter)
	return
}

func (_self_ *TreeSelection) GetSelectedRows() (_return_ *C.GList, model unsafe.Pointer) {
	_return_ = C._gtk_tree_selection_get_selected_rows((*C.GtkTreeSelection)(_self_), model)
	return
}

func (_self_ *TreeSelection) GetTreeView() (_return_ *C.GtkTreeView) {
	_return_ = C.gtk_tree_selection_get_tree_view((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) GetUserData() (_return_ C.gpointer) {
	_return_ = C.gtk_tree_selection_get_user_data((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) IterIsSelected(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_selection_iter_is_selected((*C.GtkTreeSelection)(_self_), iter)
	return
}

func (_self_ *TreeSelection) PathIsSelected(path *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_selection_path_is_selected((*C.GtkTreeSelection)(_self_), path)
	return
}

func (_self_ *TreeSelection) SelectAll() () {
	C.gtk_tree_selection_select_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) SelectIter(iter *C.GtkTreeIter) () {
	C.gtk_tree_selection_select_iter((*C.GtkTreeSelection)(_self_), iter)
	return
}

func (_self_ *TreeSelection) SelectPath(path *C.GtkTreePath) () {
	C.gtk_tree_selection_select_path((*C.GtkTreeSelection)(_self_), path)
	return
}

func (_self_ *TreeSelection) SelectRange(start_path *C.GtkTreePath, end_path *C.GtkTreePath) () {
	C.gtk_tree_selection_select_range((*C.GtkTreeSelection)(_self_), start_path, end_path)
	return
}

func (_self_ *TreeSelection) SelectedForeach(func_ C.GtkTreeSelectionForeachFunc, data C.gpointer) () {
	C.gtk_tree_selection_selected_foreach((*C.GtkTreeSelection)(_self_), func_, data)
	return
}

func (_self_ *TreeSelection) SetMode(type_ C.GtkSelectionMode) () {
	C.gtk_tree_selection_set_mode((*C.GtkTreeSelection)(_self_), type_)
	return
}

func (_self_ *TreeSelection) SetSelectFunction(func_ C.GtkTreeSelectionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_selection_set_select_function((*C.GtkTreeSelection)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeSelection) UnselectAll() () {
	C.gtk_tree_selection_unselect_all((*C.GtkTreeSelection)(_self_))
	return
}

func (_self_ *TreeSelection) UnselectIter(iter *C.GtkTreeIter) () {
	C.gtk_tree_selection_unselect_iter((*C.GtkTreeSelection)(_self_), iter)
	return
}

func (_self_ *TreeSelection) UnselectPath(path *C.GtkTreePath) () {
	C.gtk_tree_selection_unselect_path((*C.GtkTreeSelection)(_self_), path)
	return
}

func (_self_ *TreeSelection) UnselectRange(start_path *C.GtkTreePath, end_path *C.GtkTreePath) () {
	C.gtk_tree_selection_unselect_range((*C.GtkTreeSelection)(_self_), start_path, end_path)
	return
}

func TreeStoreNewv(n_columns C.gint, types *C.GType) (_return_ *C.GtkTreeStore) {
	_return_ = C.gtk_tree_store_newv(n_columns, types)
	return
}

func (_self_ *TreeStore) Append(parent *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_append((*C.GtkTreeStore)(_self_), iter, parent)
	return
}

func (_self_ *TreeStore) Clear() () {
	C.gtk_tree_store_clear((*C.GtkTreeStore)(_self_))
	return
}

func (_self_ *TreeStore) Insert(parent *C.GtkTreeIter, position C.gint) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_insert((*C.GtkTreeStore)(_self_), iter, parent, position)
	return
}

func (_self_ *TreeStore) InsertAfter(parent *C.GtkTreeIter, sibling *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_insert_after((*C.GtkTreeStore)(_self_), iter, parent, sibling)
	return
}

func (_self_ *TreeStore) InsertBefore(parent *C.GtkTreeIter, sibling *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_insert_before((*C.GtkTreeStore)(_self_), iter, parent, sibling)
	return
}

func (_self_ *TreeStore) InsertWithValuesv(parent *C.GtkTreeIter, position C.gint, columns *C.gint, values *C.GValue, n_values C.gint) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_insert_with_valuesv((*C.GtkTreeStore)(_self_), iter, parent, position, columns, values, n_values)
	return
}

func (_self_ *TreeStore) IsAncestor(iter *C.GtkTreeIter, descendant *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_store_is_ancestor((*C.GtkTreeStore)(_self_), iter, descendant)
	return
}

func (_self_ *TreeStore) IterDepth(iter *C.GtkTreeIter) (_return_ C.gint) {
	_return_ = C.gtk_tree_store_iter_depth((*C.GtkTreeStore)(_self_), iter)
	return
}

func (_self_ *TreeStore) IterIsValid(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_store_iter_is_valid((*C.GtkTreeStore)(_self_), iter)
	return
}

func (_self_ *TreeStore) MoveAfter(iter *C.GtkTreeIter, position *C.GtkTreeIter) () {
	C.gtk_tree_store_move_after((*C.GtkTreeStore)(_self_), iter, position)
	return
}

func (_self_ *TreeStore) MoveBefore(iter *C.GtkTreeIter, position *C.GtkTreeIter) () {
	C.gtk_tree_store_move_before((*C.GtkTreeStore)(_self_), iter, position)
	return
}

func (_self_ *TreeStore) Prepend(parent *C.GtkTreeIter) (iter *C.GtkTreeIter) {
	C.gtk_tree_store_prepend((*C.GtkTreeStore)(_self_), iter, parent)
	return
}

func (_self_ *TreeStore) Remove(iter *C.GtkTreeIter) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_store_remove((*C.GtkTreeStore)(_self_), iter)
	return
}

func (_self_ *TreeStore) Reorder(parent *C.GtkTreeIter, new_order *C.gint) () {
	C.gtk_tree_store_reorder((*C.GtkTreeStore)(_self_), parent, new_order)
	return
}

func (_self_ *TreeStore) SetColumnTypes(n_columns C.gint, types *C.GType) () {
	C.gtk_tree_store_set_column_types((*C.GtkTreeStore)(_self_), n_columns, types)
	return
}

func (_self_ *TreeStore) SetValue(iter *C.GtkTreeIter, column C.gint, value *C.GValue) () {
	C.gtk_tree_store_set_value((*C.GtkTreeStore)(_self_), iter, column, value)
	return
}

func (_self_ *TreeStore) SetValuesv(iter *C.GtkTreeIter, columns *C.gint, values *C.GValue, n_values C.gint) () {
	C.gtk_tree_store_set_valuesv((*C.GtkTreeStore)(_self_), iter, columns, values, n_values)
	return
}

func (_self_ *TreeStore) Swap(a *C.GtkTreeIter, b *C.GtkTreeIter) () {
	C.gtk_tree_store_swap((*C.GtkTreeStore)(_self_), a, b)
	return
}

func TreeViewNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tree_view_new()
	return
}

func TreeViewNewWithModel(model *C.GtkTreeModel) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tree_view_new_with_model(model)
	return
}

func (_self_ *TreeView) AppendColumn(column *C.GtkTreeViewColumn) (_return_ C.gint) {
	_return_ = C.gtk_tree_view_append_column((*C.GtkTreeView)(_self_), column)
	return
}

func (_self_ *TreeView) CollapseAll() () {
	C.gtk_tree_view_collapse_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) CollapseRow(path *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_collapse_row((*C.GtkTreeView)(_self_), path)
	return
}

func (_self_ *TreeView) ColumnsAutosize() () {
	C.gtk_tree_view_columns_autosize((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ConvertBinWindowToTreeCoords(bx C.gint, by C.gint) (tx *C.gint, ty *C.gint) {
	C.gtk_tree_view_convert_bin_window_to_tree_coords((*C.GtkTreeView)(_self_), bx, by, tx, ty)
	return
}

func (_self_ *TreeView) ConvertBinWindowToWidgetCoords(bx C.gint, by C.gint) (wx *C.gint, wy *C.gint) {
	C.gtk_tree_view_convert_bin_window_to_widget_coords((*C.GtkTreeView)(_self_), bx, by, wx, wy)
	return
}

func (_self_ *TreeView) ConvertTreeToBinWindowCoords(tx C.gint, ty C.gint) (bx *C.gint, by *C.gint) {
	C.gtk_tree_view_convert_tree_to_bin_window_coords((*C.GtkTreeView)(_self_), tx, ty, bx, by)
	return
}

func (_self_ *TreeView) ConvertTreeToWidgetCoords(tx C.gint, ty C.gint) (wx *C.gint, wy *C.gint) {
	C.gtk_tree_view_convert_tree_to_widget_coords((*C.GtkTreeView)(_self_), tx, ty, wx, wy)
	return
}

func (_self_ *TreeView) ConvertWidgetToBinWindowCoords(wx C.gint, wy C.gint) (bx *C.gint, by *C.gint) {
	C.gtk_tree_view_convert_widget_to_bin_window_coords((*C.GtkTreeView)(_self_), wx, wy, bx, by)
	return
}

func (_self_ *TreeView) ConvertWidgetToTreeCoords(wx C.gint, wy C.gint) (tx *C.gint, ty *C.gint) {
	C.gtk_tree_view_convert_widget_to_tree_coords((*C.GtkTreeView)(_self_), wx, wy, tx, ty)
	return
}

func (_self_ *TreeView) CreateRowDragIcon(path *C.GtkTreePath) (_return_ *C.cairo_surface_t) {
	_return_ = C.gtk_tree_view_create_row_drag_icon((*C.GtkTreeView)(_self_), path)
	return
}

func (_self_ *TreeView) EnableModelDragDest(targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_tree_view_enable_model_drag_dest((*C.GtkTreeView)(_self_), targets, n_targets, actions)
	return
}

func (_self_ *TreeView) EnableModelDragSource(start_button_mask C.GdkModifierType, targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_tree_view_enable_model_drag_source((*C.GtkTreeView)(_self_), start_button_mask, targets, n_targets, actions)
	return
}

func (_self_ *TreeView) ExpandAll() () {
	C.gtk_tree_view_expand_all((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) ExpandRow(path *C.GtkTreePath, open_all C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_expand_row((*C.GtkTreeView)(_self_), path, open_all)
	return
}

func (_self_ *TreeView) ExpandToPath(path *C.GtkTreePath) () {
	C.gtk_tree_view_expand_to_path((*C.GtkTreeView)(_self_), path)
	return
}

func (_self_ *TreeView) GetBackgroundArea(path *C.GtkTreePath, column *C.GtkTreeViewColumn) (rect *C.GdkRectangle) {
	C.gtk_tree_view_get_background_area((*C.GtkTreeView)(_self_), path, column, rect)
	return
}

func (_self_ *TreeView) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_tree_view_get_bin_window((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCellArea(path *C.GtkTreePath, column *C.GtkTreeViewColumn) (rect *C.GdkRectangle) {
	C.gtk_tree_view_get_cell_area((*C.GtkTreeView)(_self_), path, column, rect)
	return
}

func (_self_ *TreeView) GetColumn(n C.gint) (_return_ *C.GtkTreeViewColumn) {
	_return_ = C.gtk_tree_view_get_column((*C.GtkTreeView)(_self_), n)
	return
}

func (_self_ *TreeView) GetColumns() (_return_ *C.GList) {
	_return_ = C.gtk_tree_view_get_columns((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetCursor() (path unsafe.Pointer, focus_column unsafe.Pointer) {
	C._gtk_tree_view_get_cursor((*C.GtkTreeView)(_self_), path, focus_column)
	return
}

func (_self_ *TreeView) GetDestRowAtPos(drag_x C.gint, drag_y C.gint) (_return_ C.gboolean, path unsafe.Pointer, pos *C.GtkTreeViewDropPosition) {
	_return_ = C._gtk_tree_view_get_dest_row_at_pos((*C.GtkTreeView)(_self_), drag_x, drag_y, path, pos)
	return
}

func (_self_ *TreeView) GetDragDestRow() (path unsafe.Pointer, pos *C.GtkTreeViewDropPosition) {
	C._gtk_tree_view_get_drag_dest_row((*C.GtkTreeView)(_self_), path, pos)
	return
}

func (_self_ *TreeView) GetEnableSearch() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_enable_search((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetEnableTreeLines() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_enable_tree_lines((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetExpanderColumn() (_return_ *C.GtkTreeViewColumn) {
	_return_ = C.gtk_tree_view_get_expander_column((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetFixedHeightMode() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_fixed_height_mode((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetGridLines() (_return_ C.GtkTreeViewGridLines) {
	_return_ = C.gtk_tree_view_get_grid_lines((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHeadersClickable() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_headers_clickable((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHeadersVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_headers_visible((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHoverExpand() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_hover_expand((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetHoverSelection() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_hover_selection((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetLevelIndentation() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_get_level_indentation((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetModel() (_return_ *C.GtkTreeModel) {
	_return_ = C.gtk_tree_view_get_model((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetNColumns() (_return_ C.guint) {
	_return_ = C.gtk_tree_view_get_n_columns((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetPathAtPos(x C.gint, y C.gint) (_return_ C.gboolean, path unsafe.Pointer, column unsafe.Pointer, cell_x *C.gint, cell_y *C.gint) {
	_return_ = C._gtk_tree_view_get_path_at_pos((*C.GtkTreeView)(_self_), x, y, path, column, cell_x, cell_y)
	return
}

func (_self_ *TreeView) GetReorderable() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_reorderable((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetRowSeparatorFunc() (_return_ C.GtkTreeViewRowSeparatorFunc) {
	_return_ = C.gtk_tree_view_get_row_separator_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetRubberBanding() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_rubber_banding((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetRulesHint() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_rules_hint((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchColumn() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_get_search_column((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchEntry() (_return_ *C.GtkEntry) {
	_return_ = C.gtk_tree_view_get_search_entry((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchEqualFunc() (_return_ C.GtkTreeViewSearchEqualFunc) {
	_return_ = C.gtk_tree_view_get_search_equal_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSearchPositionFunc() (_return_ C.GtkTreeViewSearchPositionFunc) {
	_return_ = C.gtk_tree_view_get_search_position_func((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetSelection() (_return_ *C.GtkTreeSelection) {
	_return_ = C.gtk_tree_view_get_selection((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetShowExpanders() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_get_show_expanders((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetTooltipColumn() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_get_tooltip_column((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) GetVisibleRange() (_return_ C.gboolean, start_path unsafe.Pointer, end_path unsafe.Pointer) {
	_return_ = C._gtk_tree_view_get_visible_range((*C.GtkTreeView)(_self_), start_path, end_path)
	return
}

func (_self_ *TreeView) GetVisibleRect() (visible_rect *C.GdkRectangle) {
	C.gtk_tree_view_get_visible_rect((*C.GtkTreeView)(_self_), visible_rect)
	return
}

func (_self_ *TreeView) InsertColumn(column *C.GtkTreeViewColumn, position C.gint) (_return_ C.gint) {
	_return_ = C.gtk_tree_view_insert_column((*C.GtkTreeView)(_self_), column, position)
	return
}

func (_self_ *TreeView) InsertColumnWithDataFunc(position C.gint, title *C.gchar, cell *C.GtkCellRenderer, func_ C.GtkTreeCellDataFunc, data C.gpointer, dnotify C.GDestroyNotify) (_return_ C.gint) {
	_return_ = C._gtk_tree_view_insert_column_with_data_func((*C.GtkTreeView)(_self_), position, title, cell, func_, data, dnotify)
	return
}

func (_self_ *TreeView) IsBlankAtPos(x C.gint, y C.gint) (_return_ C.gboolean, path unsafe.Pointer, column unsafe.Pointer, cell_x *C.gint, cell_y *C.gint) {
	_return_ = C._gtk_tree_view_is_blank_at_pos((*C.GtkTreeView)(_self_), x, y, path, column, cell_x, cell_y)
	return
}

func (_self_ *TreeView) IsRubberBandingActive() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_is_rubber_banding_active((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) MapExpandedRows(func_ C.GtkTreeViewMappingFunc, data C.gpointer) () {
	C.gtk_tree_view_map_expanded_rows((*C.GtkTreeView)(_self_), func_, data)
	return
}

func (_self_ *TreeView) MoveColumnAfter(column *C.GtkTreeViewColumn, base_column *C.GtkTreeViewColumn) () {
	C.gtk_tree_view_move_column_after((*C.GtkTreeView)(_self_), column, base_column)
	return
}

func (_self_ *TreeView) RemoveColumn(column *C.GtkTreeViewColumn) (_return_ C.gint) {
	_return_ = C.gtk_tree_view_remove_column((*C.GtkTreeView)(_self_), column)
	return
}

func (_self_ *TreeView) RowActivated(path *C.GtkTreePath, column *C.GtkTreeViewColumn) () {
	C.gtk_tree_view_row_activated((*C.GtkTreeView)(_self_), path, column)
	return
}

func (_self_ *TreeView) RowExpanded(path *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_row_expanded((*C.GtkTreeView)(_self_), path)
	return
}

func (_self_ *TreeView) ScrollToCell(path *C.GtkTreePath, column *C.GtkTreeViewColumn, use_align C.gboolean, row_align C.gfloat, col_align C.gfloat) () {
	C.gtk_tree_view_scroll_to_cell((*C.GtkTreeView)(_self_), path, column, use_align, row_align, col_align)
	return
}

func (_self_ *TreeView) ScrollToPoint(tree_x C.gint, tree_y C.gint) () {
	C.gtk_tree_view_scroll_to_point((*C.GtkTreeView)(_self_), tree_x, tree_y)
	return
}

func (_self_ *TreeView) SetColumnDragFunction(func_ C.GtkTreeViewColumnDropFunc, user_data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_column_drag_function((*C.GtkTreeView)(_self_), func_, user_data, destroy)
	return
}

func (_self_ *TreeView) SetCursor(path *C.GtkTreePath, focus_column *C.GtkTreeViewColumn, start_editing C.gboolean) () {
	C.gtk_tree_view_set_cursor((*C.GtkTreeView)(_self_), path, focus_column, start_editing)
	return
}

func (_self_ *TreeView) SetCursorOnCell(path *C.GtkTreePath, focus_column *C.GtkTreeViewColumn, focus_cell *C.GtkCellRenderer, start_editing C.gboolean) () {
	C.gtk_tree_view_set_cursor_on_cell((*C.GtkTreeView)(_self_), path, focus_column, focus_cell, start_editing)
	return
}

func (_self_ *TreeView) SetDragDestRow(path *C.GtkTreePath, pos C.GtkTreeViewDropPosition) () {
	C.gtk_tree_view_set_drag_dest_row((*C.GtkTreeView)(_self_), path, pos)
	return
}

func (_self_ *TreeView) SetEnableSearch(enable_search C.gboolean) () {
	C.gtk_tree_view_set_enable_search((*C.GtkTreeView)(_self_), enable_search)
	return
}

func (_self_ *TreeView) SetEnableTreeLines(enabled C.gboolean) () {
	C.gtk_tree_view_set_enable_tree_lines((*C.GtkTreeView)(_self_), enabled)
	return
}

func (_self_ *TreeView) SetExpanderColumn(column *C.GtkTreeViewColumn) () {
	C.gtk_tree_view_set_expander_column((*C.GtkTreeView)(_self_), column)
	return
}

func (_self_ *TreeView) SetFixedHeightMode(enable C.gboolean) () {
	C.gtk_tree_view_set_fixed_height_mode((*C.GtkTreeView)(_self_), enable)
	return
}

func (_self_ *TreeView) SetGridLines(grid_lines C.GtkTreeViewGridLines) () {
	C.gtk_tree_view_set_grid_lines((*C.GtkTreeView)(_self_), grid_lines)
	return
}

func (_self_ *TreeView) SetHeadersClickable(setting C.gboolean) () {
	C.gtk_tree_view_set_headers_clickable((*C.GtkTreeView)(_self_), setting)
	return
}

func (_self_ *TreeView) SetHeadersVisible(headers_visible C.gboolean) () {
	C.gtk_tree_view_set_headers_visible((*C.GtkTreeView)(_self_), headers_visible)
	return
}

func (_self_ *TreeView) SetHoverExpand(expand C.gboolean) () {
	C.gtk_tree_view_set_hover_expand((*C.GtkTreeView)(_self_), expand)
	return
}

func (_self_ *TreeView) SetHoverSelection(hover C.gboolean) () {
	C.gtk_tree_view_set_hover_selection((*C.GtkTreeView)(_self_), hover)
	return
}

func (_self_ *TreeView) SetLevelIndentation(indentation C.gint) () {
	C.gtk_tree_view_set_level_indentation((*C.GtkTreeView)(_self_), indentation)
	return
}

func (_self_ *TreeView) SetModel(model *C.GtkTreeModel) () {
	C.gtk_tree_view_set_model((*C.GtkTreeView)(_self_), model)
	return
}

func (_self_ *TreeView) SetReorderable(reorderable C.gboolean) () {
	C.gtk_tree_view_set_reorderable((*C.GtkTreeView)(_self_), reorderable)
	return
}

func (_self_ *TreeView) SetRowSeparatorFunc(func_ C.GtkTreeViewRowSeparatorFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_row_separator_func((*C.GtkTreeView)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeView) SetRubberBanding(enable C.gboolean) () {
	C.gtk_tree_view_set_rubber_banding((*C.GtkTreeView)(_self_), enable)
	return
}

func (_self_ *TreeView) SetRulesHint(setting C.gboolean) () {
	C.gtk_tree_view_set_rules_hint((*C.GtkTreeView)(_self_), setting)
	return
}

func (_self_ *TreeView) SetSearchColumn(column C.gint) () {
	C.gtk_tree_view_set_search_column((*C.GtkTreeView)(_self_), column)
	return
}

func (_self_ *TreeView) SetSearchEntry(entry *C.GtkEntry) () {
	C.gtk_tree_view_set_search_entry((*C.GtkTreeView)(_self_), entry)
	return
}

func (_self_ *TreeView) SetSearchEqualFunc(search_equal_func C.GtkTreeViewSearchEqualFunc, search_user_data C.gpointer, search_destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_equal_func((*C.GtkTreeView)(_self_), search_equal_func, search_user_data, search_destroy)
	return
}

func (_self_ *TreeView) SetSearchPositionFunc(func_ C.GtkTreeViewSearchPositionFunc, data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_set_search_position_func((*C.GtkTreeView)(_self_), func_, data, destroy)
	return
}

func (_self_ *TreeView) SetShowExpanders(enabled C.gboolean) () {
	C.gtk_tree_view_set_show_expanders((*C.GtkTreeView)(_self_), enabled)
	return
}

func (_self_ *TreeView) SetTooltipCell(tooltip *C.GtkTooltip, path *C.GtkTreePath, column *C.GtkTreeViewColumn, cell *C.GtkCellRenderer) () {
	C.gtk_tree_view_set_tooltip_cell((*C.GtkTreeView)(_self_), tooltip, path, column, cell)
	return
}

func (_self_ *TreeView) SetTooltipColumn(column C.gint) () {
	C.gtk_tree_view_set_tooltip_column((*C.GtkTreeView)(_self_), column)
	return
}

func (_self_ *TreeView) SetTooltipRow(tooltip *C.GtkTooltip, path *C.GtkTreePath) () {
	C.gtk_tree_view_set_tooltip_row((*C.GtkTreeView)(_self_), tooltip, path)
	return
}

func (_self_ *TreeView) UnsetRowsDragDest() () {
	C.gtk_tree_view_unset_rows_drag_dest((*C.GtkTreeView)(_self_))
	return
}

func (_self_ *TreeView) UnsetRowsDragSource() () {
	C.gtk_tree_view_unset_rows_drag_source((*C.GtkTreeView)(_self_))
	return
}

func TreeViewColumnNew() (_return_ *C.GtkTreeViewColumn) {
	_return_ = C.gtk_tree_view_column_new()
	return
}

func TreeViewColumnNewWithArea(area *C.GtkCellArea) (_return_ *C.GtkTreeViewColumn) {
	_return_ = C.gtk_tree_view_column_new_with_area(area)
	return
}

func (_self_ *TreeViewColumn) AddAttribute(cell_renderer *C.GtkCellRenderer, attribute *C.gchar, column C.gint) () {
	C._gtk_tree_view_column_add_attribute((*C.GtkTreeViewColumn)(_self_), cell_renderer, attribute, column)
	return
}

func (_self_ *TreeViewColumn) CellGetPosition(cell_renderer *C.GtkCellRenderer) (_return_ C.gboolean, x_offset *C.gint, width *C.gint) {
	_return_ = C.gtk_tree_view_column_cell_get_position((*C.GtkTreeViewColumn)(_self_), cell_renderer, x_offset, width)
	return
}

func (_self_ *TreeViewColumn) CellGetSize(cell_area *C.GdkRectangle) (x_offset *C.gint, y_offset *C.gint, width *C.gint, height *C.gint) {
	C._gtk_tree_view_column_cell_get_size((*C.GtkTreeViewColumn)(_self_), cell_area, x_offset, y_offset, width, height)
	return
}

func (_self_ *TreeViewColumn) CellIsVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_cell_is_visible((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) CellSetCellData(tree_model *C.GtkTreeModel, iter *C.GtkTreeIter, is_expander C.gboolean, is_expanded C.gboolean) () {
	C.gtk_tree_view_column_cell_set_cell_data((*C.GtkTreeViewColumn)(_self_), tree_model, iter, is_expander, is_expanded)
	return
}

func (_self_ *TreeViewColumn) Clear() () {
	C.gtk_tree_view_column_clear((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) ClearAttributes(cell_renderer *C.GtkCellRenderer) () {
	C.gtk_tree_view_column_clear_attributes((*C.GtkTreeViewColumn)(_self_), cell_renderer)
	return
}

func (_self_ *TreeViewColumn) Clicked() () {
	C.gtk_tree_view_column_clicked((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) FocusCell(cell *C.GtkCellRenderer) () {
	C.gtk_tree_view_column_focus_cell((*C.GtkTreeViewColumn)(_self_), cell)
	return
}

func (_self_ *TreeViewColumn) GetAlignment() (_return_ C.gfloat) {
	_return_ = C.gtk_tree_view_column_get_alignment((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetButton() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tree_view_column_get_button((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetClickable() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_clickable((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetExpand() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_expand((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetFixedWidth() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_fixed_width((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetMaxWidth() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_max_width((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetMinWidth() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_min_width((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetReorderable() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_reorderable((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetResizable() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_resizable((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSizing() (_return_ C.GtkTreeViewColumnSizing) {
	_return_ = C.gtk_tree_view_column_get_sizing((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSortColumnId() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_sort_column_id((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSortIndicator() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_sort_indicator((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSortOrder() (_return_ C.GtkSortType) {
	_return_ = C.gtk_tree_view_column_get_sort_order((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetSpacing() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_spacing((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_tree_view_column_get_title((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetTreeView() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tree_view_column_get_tree_view((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_tree_view_column_get_visible((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_tree_view_column_get_widget((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetWidth() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_width((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) GetXOffset() (_return_ C.gint) {
	_return_ = C.gtk_tree_view_column_get_x_offset((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) PackEnd(cell *C.GtkCellRenderer, expand C.gboolean) () {
	C.gtk_tree_view_column_pack_end((*C.GtkTreeViewColumn)(_self_), cell, expand)
	return
}

func (_self_ *TreeViewColumn) PackStart(cell *C.GtkCellRenderer, expand C.gboolean) () {
	C.gtk_tree_view_column_pack_start((*C.GtkTreeViewColumn)(_self_), cell, expand)
	return
}

func (_self_ *TreeViewColumn) QueueResize() () {
	C.gtk_tree_view_column_queue_resize((*C.GtkTreeViewColumn)(_self_))
	return
}

func (_self_ *TreeViewColumn) SetAlignment(xalign C.gfloat) () {
	C.gtk_tree_view_column_set_alignment((*C.GtkTreeViewColumn)(_self_), xalign)
	return
}

func (_self_ *TreeViewColumn) SetCellDataFunc(cell_renderer *C.GtkCellRenderer, func_ C.GtkTreeCellDataFunc, func_data C.gpointer, destroy C.GDestroyNotify) () {
	C.gtk_tree_view_column_set_cell_data_func((*C.GtkTreeViewColumn)(_self_), cell_renderer, func_, func_data, destroy)
	return
}

func (_self_ *TreeViewColumn) SetClickable(clickable C.gboolean) () {
	C.gtk_tree_view_column_set_clickable((*C.GtkTreeViewColumn)(_self_), clickable)
	return
}

func (_self_ *TreeViewColumn) SetExpand(expand C.gboolean) () {
	C.gtk_tree_view_column_set_expand((*C.GtkTreeViewColumn)(_self_), expand)
	return
}

func (_self_ *TreeViewColumn) SetFixedWidth(fixed_width C.gint) () {
	C.gtk_tree_view_column_set_fixed_width((*C.GtkTreeViewColumn)(_self_), fixed_width)
	return
}

func (_self_ *TreeViewColumn) SetMaxWidth(max_width C.gint) () {
	C.gtk_tree_view_column_set_max_width((*C.GtkTreeViewColumn)(_self_), max_width)
	return
}

func (_self_ *TreeViewColumn) SetMinWidth(min_width C.gint) () {
	C.gtk_tree_view_column_set_min_width((*C.GtkTreeViewColumn)(_self_), min_width)
	return
}

func (_self_ *TreeViewColumn) SetReorderable(reorderable C.gboolean) () {
	C.gtk_tree_view_column_set_reorderable((*C.GtkTreeViewColumn)(_self_), reorderable)
	return
}

func (_self_ *TreeViewColumn) SetResizable(resizable C.gboolean) () {
	C.gtk_tree_view_column_set_resizable((*C.GtkTreeViewColumn)(_self_), resizable)
	return
}

func (_self_ *TreeViewColumn) SetSizing(type_ C.GtkTreeViewColumnSizing) () {
	C.gtk_tree_view_column_set_sizing((*C.GtkTreeViewColumn)(_self_), type_)
	return
}

func (_self_ *TreeViewColumn) SetSortColumnId(sort_column_id C.gint) () {
	C.gtk_tree_view_column_set_sort_column_id((*C.GtkTreeViewColumn)(_self_), sort_column_id)
	return
}

func (_self_ *TreeViewColumn) SetSortIndicator(setting C.gboolean) () {
	C.gtk_tree_view_column_set_sort_indicator((*C.GtkTreeViewColumn)(_self_), setting)
	return
}

func (_self_ *TreeViewColumn) SetSortOrder(order C.GtkSortType) () {
	C.gtk_tree_view_column_set_sort_order((*C.GtkTreeViewColumn)(_self_), order)
	return
}

func (_self_ *TreeViewColumn) SetSpacing(spacing C.gint) () {
	C.gtk_tree_view_column_set_spacing((*C.GtkTreeViewColumn)(_self_), spacing)
	return
}

func (_self_ *TreeViewColumn) SetTitle(title *C.gchar) () {
	C._gtk_tree_view_column_set_title((*C.GtkTreeViewColumn)(_self_), title)
	return
}

func (_self_ *TreeViewColumn) SetVisible(visible C.gboolean) () {
	C.gtk_tree_view_column_set_visible((*C.GtkTreeViewColumn)(_self_), visible)
	return
}

func (_self_ *TreeViewColumn) SetWidget(widget *C.GtkWidget) () {
	C.gtk_tree_view_column_set_widget((*C.GtkTreeViewColumn)(_self_), widget)
	return
}

func UIManagerNew() (_return_ *C.GtkUIManager) {
	_return_ = C.gtk_ui_manager_new()
	return
}

func (_self_ *UIManager) AddUi(merge_id C.guint, path *C.gchar, name *C.gchar, action *C.gchar, type_ C.GtkUIManagerItemType, top C.gboolean) () {
	C._gtk_ui_manager_add_ui((*C.GtkUIManager)(_self_), merge_id, path, name, action, type_, top)
	return
}

func (_self_ *UIManager) AddUiFromFile(filename *C.gchar) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_ui_manager_add_ui_from_file((*C.GtkUIManager)(_self_), filename, _error_)
	return
}

func (_self_ *UIManager) AddUiFromResource(resource_path *C.gchar) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_ui_manager_add_ui_from_resource((*C.GtkUIManager)(_self_), resource_path, _error_)
	return
}

func (_self_ *UIManager) AddUiFromString(buffer *C.gchar, length C.gssize) (_return_ C.guint, _error_ unsafe.Pointer) {
	_return_ = C._gtk_ui_manager_add_ui_from_string((*C.GtkUIManager)(_self_), buffer, length, _error_)
	return
}

func (_self_ *UIManager) EnsureUpdate() () {
	C.gtk_ui_manager_ensure_update((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetAccelGroup() (_return_ *C.GtkAccelGroup) {
	_return_ = C.gtk_ui_manager_get_accel_group((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetAction(path *C.gchar) (_return_ *C.GtkAction) {
	_return_ = C._gtk_ui_manager_get_action((*C.GtkUIManager)(_self_), path)
	return
}

func (_self_ *UIManager) GetActionGroups() (_return_ *C.GList) {
	_return_ = C.gtk_ui_manager_get_action_groups((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetToplevels(types C.GtkUIManagerItemType) (_return_ *C.GSList) {
	_return_ = C.gtk_ui_manager_get_toplevels((*C.GtkUIManager)(_self_), types)
	return
}

func (_self_ *UIManager) GetUi() (_return_ *C.gchar) {
	_return_ = C.gtk_ui_manager_get_ui((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) GetWidget(path *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_ui_manager_get_widget((*C.GtkUIManager)(_self_), path)
	return
}

func (_self_ *UIManager) InsertActionGroup(action_group *C.GtkActionGroup, pos C.gint) () {
	C.gtk_ui_manager_insert_action_group((*C.GtkUIManager)(_self_), action_group, pos)
	return
}

func (_self_ *UIManager) NewMergeId() (_return_ C.guint) {
	_return_ = C.gtk_ui_manager_new_merge_id((*C.GtkUIManager)(_self_))
	return
}

func (_self_ *UIManager) RemoveActionGroup(action_group *C.GtkActionGroup) () {
	C.gtk_ui_manager_remove_action_group((*C.GtkUIManager)(_self_), action_group)
	return
}

func (_self_ *UIManager) RemoveUi(merge_id C.guint) () {
	C.gtk_ui_manager_remove_ui((*C.GtkUIManager)(_self_), merge_id)
	return
}

func ViewportNew(hadjustment *C.GtkAdjustment, vadjustment *C.GtkAdjustment) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_viewport_new(hadjustment, vadjustment)
	return
}

func (_self_ *Viewport) GetBinWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_bin_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetShadowType() (_return_ C.GtkShadowType) {
	_return_ = C.gtk_viewport_get_shadow_type((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) GetViewWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_viewport_get_view_window((*C.GtkViewport)(_self_))
	return
}

func (_self_ *Viewport) SetShadowType(type_ C.GtkShadowType) () {
	C.gtk_viewport_set_shadow_type((*C.GtkViewport)(_self_), type_)
	return
}

func VolumeButtonNew() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_volume_button_new()
	return
}

func WidgetGetDefaultDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_default_direction()
	return
}

func WidgetPopCompositeChild() () {
	C.gtk_widget_pop_composite_child()
	return
}

func WidgetPushCompositeChild() () {
	C.gtk_widget_push_composite_child()
	return
}

func WidgetSetDefaultDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_default_direction(dir)
	return
}

func (_self_ *Widget) Activate() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_activate((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) AddAccelerator(accel_signal *C.gchar, accel_group *C.GtkAccelGroup, accel_key C.guint, accel_mods C.GdkModifierType, accel_flags C.GtkAccelFlags) () {
	C._gtk_widget_add_accelerator((*C.GtkWidget)(_self_), accel_signal, accel_group, accel_key, accel_mods, accel_flags)
	return
}

func (_self_ *Widget) AddDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_add_device_events((*C.GtkWidget)(_self_), device, events)
	return
}

func (_self_ *Widget) AddEvents(events C.gint) () {
	C.gtk_widget_add_events((*C.GtkWidget)(_self_), events)
	return
}

func (_self_ *Widget) AddMnemonicLabel(label *C.GtkWidget) () {
	C.gtk_widget_add_mnemonic_label((*C.GtkWidget)(_self_), label)
	return
}

func (_self_ *Widget) CanActivateAccel(signal_id C.guint) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_can_activate_accel((*C.GtkWidget)(_self_), signal_id)
	return
}

func (_self_ *Widget) ChildFocus(direction C.GtkDirectionType) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_child_focus((*C.GtkWidget)(_self_), direction)
	return
}

func (_self_ *Widget) ChildNotify(child_property *C.gchar) () {
	C._gtk_widget_child_notify((*C.GtkWidget)(_self_), child_property)
	return
}

func (_self_ *Widget) ComputeExpand(orientation C.GtkOrientation) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_compute_expand((*C.GtkWidget)(_self_), orientation)
	return
}

func (_self_ *Widget) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_create_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) CreatePangoLayout(text *C.gchar) (_return_ *C.PangoLayout) {
	_return_ = C._gtk_widget_create_pango_layout((*C.GtkWidget)(_self_), text)
	return
}

func (_self_ *Widget) Destroy() () {
	C.gtk_widget_destroy((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DeviceIsShadowed(device *C.GdkDevice) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_device_is_shadowed((*C.GtkWidget)(_self_), device)
	return
}

func (_self_ *Widget) DragBegin(targets *C.GtkTargetList, actions C.GdkDragAction, button C.gint, event *C.GdkEvent) (_return_ *C.GdkDragContext) {
	_return_ = C.gtk_drag_begin((*C.GtkWidget)(_self_), targets, actions, button, event)
	return
}

func (_self_ *Widget) DragCheckThreshold(start_x C.gint, start_y C.gint, current_x C.gint, current_y C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_drag_check_threshold((*C.GtkWidget)(_self_), start_x, start_y, current_x, current_y)
	return
}

func (_self_ *Widget) DragDestAddImageTargets() () {
	C.gtk_drag_dest_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddTextTargets() () {
	C.gtk_drag_dest_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestAddUriTargets() () {
	C.gtk_drag_dest_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestFindTarget(context *C.GdkDragContext, target_list *C.GtkTargetList) (_return_ C.GdkAtom) {
	_return_ = C.gtk_drag_dest_find_target((*C.GtkWidget)(_self_), context, target_list)
	return
}

func (_self_ *Widget) DragDestGetTargetList() (_return_ *C.GtkTargetList) {
	_return_ = C.gtk_drag_dest_get_target_list((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestGetTrackMotion() (_return_ C.gboolean) {
	_return_ = C.gtk_drag_dest_get_track_motion((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragDestSet(flags C.GtkDestDefaults, targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_drag_dest_set((*C.GtkWidget)(_self_), flags, targets, n_targets, actions)
	return
}

func (_self_ *Widget) DragDestSetProxy(proxy_window *C.GdkWindow, protocol C.GdkDragProtocol, use_coordinates C.gboolean) () {
	C.gtk_drag_dest_set_proxy((*C.GtkWidget)(_self_), proxy_window, protocol, use_coordinates)
	return
}

func (_self_ *Widget) DragDestSetTargetList(target_list *C.GtkTargetList) () {
	C.gtk_drag_dest_set_target_list((*C.GtkWidget)(_self_), target_list)
	return
}

func (_self_ *Widget) DragDestSetTrackMotion(track_motion C.gboolean) () {
	C.gtk_drag_dest_set_track_motion((*C.GtkWidget)(_self_), track_motion)
	return
}

func (_self_ *Widget) DragDestUnset() () {
	C.gtk_drag_dest_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragGetData(context *C.GdkDragContext, target C.GdkAtom, time_ C.guint32) () {
	C.gtk_drag_get_data((*C.GtkWidget)(_self_), context, target, time_)
	return
}

func (_self_ *Widget) DragHighlight() () {
	C.gtk_drag_highlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddImageTargets() () {
	C.gtk_drag_source_add_image_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddTextTargets() () {
	C.gtk_drag_source_add_text_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceAddUriTargets() () {
	C.gtk_drag_source_add_uri_targets((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceGetTargetList() (_return_ *C.GtkTargetList) {
	_return_ = C.gtk_drag_source_get_target_list((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragSourceSet(start_button_mask C.GdkModifierType, targets *C.GtkTargetEntry, n_targets C.gint, actions C.GdkDragAction) () {
	C._gtk_drag_source_set((*C.GtkWidget)(_self_), start_button_mask, targets, n_targets, actions)
	return
}

func (_self_ *Widget) DragSourceSetIconGicon(icon *C.GIcon) () {
	C.gtk_drag_source_set_icon_gicon((*C.GtkWidget)(_self_), icon)
	return
}

func (_self_ *Widget) DragSourceSetIconName(icon_name *C.gchar) () {
	C._gtk_drag_source_set_icon_name((*C.GtkWidget)(_self_), icon_name)
	return
}

func (_self_ *Widget) DragSourceSetIconPixbuf(pixbuf *C.GdkPixbuf) () {
	C.gtk_drag_source_set_icon_pixbuf((*C.GtkWidget)(_self_), pixbuf)
	return
}

func (_self_ *Widget) DragSourceSetIconStock(stock_id *C.gchar) () {
	C._gtk_drag_source_set_icon_stock((*C.GtkWidget)(_self_), stock_id)
	return
}

func (_self_ *Widget) DragSourceSetTargetList(target_list *C.GtkTargetList) () {
	C.gtk_drag_source_set_target_list((*C.GtkWidget)(_self_), target_list)
	return
}

func (_self_ *Widget) DragSourceUnset() () {
	C.gtk_drag_source_unset((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) DragUnhighlight() () {
	C.gtk_drag_unhighlight((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Draw(cr *C.cairo_t) () {
	C.gtk_widget_draw((*C.GtkWidget)(_self_), cr)
	return
}

func (_self_ *Widget) ErrorBell() () {
	C.gtk_widget_error_bell((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Event(event *C.GdkEvent) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_event((*C.GtkWidget)(_self_), event)
	return
}

func (_self_ *Widget) FreezeChildNotify() () {
	C.gtk_widget_freeze_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAccessible() (_return_ *C.AtkObject) {
	_return_ = C.gtk_widget_get_accessible((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedHeight() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_height((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocatedWidth() (_return_ C.int) {
	_return_ = C.gtk_widget_get_allocated_width((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetAllocation() (allocation *C.GtkAllocation) {
	C.gtk_widget_get_allocation((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) GetAncestor(widget_type C.GType) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_widget_get_ancestor((*C.GtkWidget)(_self_), widget_type)
	return
}

func (_self_ *Widget) GetAppPaintable() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_app_paintable((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetCanDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_can_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetCanFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_can_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetChildVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_child_visible((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetClipboard(selection C.GdkAtom) (_return_ *C.GtkClipboard) {
	_return_ = C.gtk_widget_get_clipboard((*C.GtkWidget)(_self_), selection)
	return
}

func (_self_ *Widget) GetCompositeName() (_return_ *C.gchar) {
	_return_ = C.gtk_widget_get_composite_name((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDeviceEnabled(device *C.GdkDevice) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_device_enabled((*C.GtkWidget)(_self_), device)
	return
}

func (_self_ *Widget) GetDeviceEvents(device *C.GdkDevice) (_return_ C.GdkEventMask) {
	_return_ = C.gtk_widget_get_device_events((*C.GtkWidget)(_self_), device)
	return
}

func (_self_ *Widget) GetDirection() (_return_ C.GtkTextDirection) {
	_return_ = C.gtk_widget_get_direction((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDisplay() (_return_ *C.GdkDisplay) {
	_return_ = C.gtk_widget_get_display((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetDoubleBuffered() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_double_buffered((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetEvents() (_return_ C.gint) {
	_return_ = C.gtk_widget_get_events((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHalign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_halign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHasTooltip() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_has_tooltip((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHasWindow() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_has_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHexpand() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_hexpand((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetHexpandSet() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_hexpand_set((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetMapped() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_mapped((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetMarginBottom() (_return_ C.gint) {
	_return_ = C.gtk_widget_get_margin_bottom((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetMarginLeft() (_return_ C.gint) {
	_return_ = C.gtk_widget_get_margin_left((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetMarginRight() (_return_ C.gint) {
	_return_ = C.gtk_widget_get_margin_right((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetMarginTop() (_return_ C.gint) {
	_return_ = C.gtk_widget_get_margin_top((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetModifierMask(intent C.GdkModifierIntent) (_return_ C.GdkModifierType) {
	_return_ = C.gtk_widget_get_modifier_mask((*C.GtkWidget)(_self_), intent)
	return
}

func (_self_ *Widget) GetName() (_return_ *C.gchar) {
	_return_ = C._gtk_widget_get_name((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetNoShowAll() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_no_show_all((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetPangoContext() (_return_ *C.PangoContext) {
	_return_ = C.gtk_widget_get_pango_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetParent() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_widget_get_parent((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetParentWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_parent_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetPath() (_return_ *C.GtkWidgetPath) {
	_return_ = C.gtk_widget_get_path((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetPreferredHeight() (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_widget_get_preferred_height((*C.GtkWidget)(_self_), minimum_height, natural_height)
	return
}

func (_self_ *Widget) GetPreferredHeightForWidth(width C.gint) (minimum_height *C.gint, natural_height *C.gint) {
	C.gtk_widget_get_preferred_height_for_width((*C.GtkWidget)(_self_), width, minimum_height, natural_height)
	return
}

func (_self_ *Widget) GetPreferredSize() (minimum_size *C.GtkRequisition, natural_size *C.GtkRequisition) {
	C.gtk_widget_get_preferred_size((*C.GtkWidget)(_self_), minimum_size, natural_size)
	return
}

func (_self_ *Widget) GetPreferredWidth() (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_widget_get_preferred_width((*C.GtkWidget)(_self_), minimum_width, natural_width)
	return
}

func (_self_ *Widget) GetPreferredWidthForHeight(height C.gint) (minimum_width *C.gint, natural_width *C.gint) {
	C.gtk_widget_get_preferred_width_for_height((*C.GtkWidget)(_self_), height, minimum_width, natural_width)
	return
}

func (_self_ *Widget) GetRealized() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_realized((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetReceivesDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_receives_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetRequestMode() (_return_ C.GtkSizeRequestMode) {
	_return_ = C.gtk_widget_get_request_mode((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetRootWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_root_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_widget_get_screen((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_sensitive((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSettings() (_return_ *C.GtkSettings) {
	_return_ = C.gtk_widget_get_settings((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSizeRequest() (width *C.gint, height *C.gint) {
	C.gtk_widget_get_size_request((*C.GtkWidget)(_self_), width, height)
	return
}

func (_self_ *Widget) GetStateFlags() (_return_ C.GtkStateFlags) {
	_return_ = C.gtk_widget_get_state_flags((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetStyleContext() (_return_ *C.GtkStyleContext) {
	_return_ = C.gtk_widget_get_style_context((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetSupportMultidevice() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_support_multidevice((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetTooltipMarkup() (_return_ *C.gchar) {
	_return_ = C.gtk_widget_get_tooltip_markup((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetTooltipText() (_return_ *C.gchar) {
	_return_ = C.gtk_widget_get_tooltip_text((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetTooltipWindow() (_return_ *C.GtkWindow) {
	_return_ = C.gtk_widget_get_tooltip_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetToplevel() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_widget_get_toplevel((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetValign() (_return_ C.GtkAlign) {
	_return_ = C.gtk_widget_get_valign((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVexpand() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_vexpand((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVexpandSet() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_vexpand_set((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_get_visible((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetVisual() (_return_ *C.GdkVisual) {
	_return_ = C.gtk_widget_get_visual((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GetWindow() (_return_ *C.GdkWindow) {
	_return_ = C.gtk_widget_get_window((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabAdd() () {
	C.gtk_grab_add((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabDefault() () {
	C.gtk_widget_grab_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabFocus() () {
	C.gtk_widget_grab_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) GrabRemove() () {
	C.gtk_grab_remove((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_has_default((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_has_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasGrab() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_has_grab((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasScreen() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_has_screen((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HasVisibleFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_has_visible_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Hide() () {
	C.gtk_widget_hide((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) HideOnDelete() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_hide_on_delete((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) InDestruction() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_in_destruction((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) InputShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_input_shape_combine_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) InsertActionGroup(name *C.gchar, group *C.GActionGroup) () {
	C._gtk_widget_insert_action_group((*C.GtkWidget)(_self_), name, group)
	return
}

func (_self_ *Widget) Intersect(area *C.GdkRectangle, intersection *C.GdkRectangle) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_intersect((*C.GtkWidget)(_self_), area, intersection)
	return
}

func (_self_ *Widget) IsAncestor(ancestor *C.GtkWidget) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_ancestor((*C.GtkWidget)(_self_), ancestor)
	return
}

func (_self_ *Widget) IsComposited() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_composited((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) IsDrawable() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_drawable((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) IsFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_focus((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) IsSensitive() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_sensitive((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) IsToplevel() (_return_ C.gboolean) {
	_return_ = C.gtk_widget_is_toplevel((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) KeynavFailed(direction C.GtkDirectionType) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_keynav_failed((*C.GtkWidget)(_self_), direction)
	return
}

func (_self_ *Widget) ListAccelClosures() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_accel_closures((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ListMnemonicLabels() (_return_ *C.GList) {
	_return_ = C.gtk_widget_list_mnemonic_labels((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Map() () {
	C.gtk_widget_map((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) MnemonicActivate(group_cycling C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_mnemonic_activate((*C.GtkWidget)(_self_), group_cycling)
	return
}

func (_self_ *Widget) OverrideBackgroundColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_background_color((*C.GtkWidget)(_self_), state, color)
	return
}

func (_self_ *Widget) OverrideColor(state C.GtkStateFlags, color *C.GdkRGBA) () {
	C._gtk_widget_override_color((*C.GtkWidget)(_self_), state, color)
	return
}

func (_self_ *Widget) OverrideCursor(cursor *C.GdkRGBA, secondary_cursor *C.GdkRGBA) () {
	C._gtk_widget_override_cursor((*C.GtkWidget)(_self_), cursor, secondary_cursor)
	return
}

func (_self_ *Widget) OverrideFont(font_desc *C.PangoFontDescription) () {
	C._gtk_widget_override_font((*C.GtkWidget)(_self_), font_desc)
	return
}

func (_self_ *Widget) OverrideSymbolicColor(name *C.gchar, color *C.GdkRGBA) () {
	C._gtk_widget_override_symbolic_color((*C.GtkWidget)(_self_), name, color)
	return
}

func (_self_ *Widget) QueueComputeExpand() () {
	C.gtk_widget_queue_compute_expand((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDraw() () {
	C.gtk_widget_queue_draw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueDrawArea(x C.gint, y C.gint, width C.gint, height C.gint) () {
	C.gtk_widget_queue_draw_area((*C.GtkWidget)(_self_), x, y, width, height)
	return
}

func (_self_ *Widget) QueueDrawRegion(region *C.cairo_region_t) () {
	C._gtk_widget_queue_draw_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) QueueResize() () {
	C.gtk_widget_queue_resize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) QueueResizeNoRedraw() () {
	C.gtk_widget_queue_resize_no_redraw((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Realize() () {
	C.gtk_widget_realize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) RegionIntersect(region *C.cairo_region_t) (_return_ *C.cairo_region_t) {
	_return_ = C._gtk_widget_region_intersect((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) RemoveAccelerator(accel_group *C.GtkAccelGroup, accel_key C.guint, accel_mods C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_remove_accelerator((*C.GtkWidget)(_self_), accel_group, accel_key, accel_mods)
	return
}

func (_self_ *Widget) RemoveMnemonicLabel(label *C.GtkWidget) () {
	C.gtk_widget_remove_mnemonic_label((*C.GtkWidget)(_self_), label)
	return
}

func (_self_ *Widget) RenderIconPixbuf(stock_id *C.gchar, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_widget_render_icon_pixbuf((*C.GtkWidget)(_self_), stock_id, size)
	return
}

func (_self_ *Widget) Reparent(new_parent *C.GtkWidget) () {
	C.gtk_widget_reparent((*C.GtkWidget)(_self_), new_parent)
	return
}

func (_self_ *Widget) ResetStyle() () {
	C.gtk_widget_reset_style((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SendExpose(event *C.GdkEvent) (_return_ C.gint) {
	_return_ = C.gtk_widget_send_expose((*C.GtkWidget)(_self_), event)
	return
}

func (_self_ *Widget) SendFocusChange(event *C.GdkEvent) (_return_ C.gboolean) {
	_return_ = C.gtk_widget_send_focus_change((*C.GtkWidget)(_self_), event)
	return
}

func (_self_ *Widget) SetAccelPath(accel_path *C.gchar, accel_group *C.GtkAccelGroup) () {
	C._gtk_widget_set_accel_path((*C.GtkWidget)(_self_), accel_path, accel_group)
	return
}

func (_self_ *Widget) SetAllocation(allocation *C.GtkAllocation) () {
	C._gtk_widget_set_allocation((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) SetAppPaintable(app_paintable C.gboolean) () {
	C.gtk_widget_set_app_paintable((*C.GtkWidget)(_self_), app_paintable)
	return
}

func (_self_ *Widget) SetCanDefault(can_default C.gboolean) () {
	C.gtk_widget_set_can_default((*C.GtkWidget)(_self_), can_default)
	return
}

func (_self_ *Widget) SetCanFocus(can_focus C.gboolean) () {
	C.gtk_widget_set_can_focus((*C.GtkWidget)(_self_), can_focus)
	return
}

func (_self_ *Widget) SetChildVisible(is_visible C.gboolean) () {
	C.gtk_widget_set_child_visible((*C.GtkWidget)(_self_), is_visible)
	return
}

func (_self_ *Widget) SetCompositeName(name *C.gchar) () {
	C._gtk_widget_set_composite_name((*C.GtkWidget)(_self_), name)
	return
}

func (_self_ *Widget) SetDeviceEnabled(device *C.GdkDevice, enabled C.gboolean) () {
	C.gtk_widget_set_device_enabled((*C.GtkWidget)(_self_), device, enabled)
	return
}

func (_self_ *Widget) SetDeviceEvents(device *C.GdkDevice, events C.GdkEventMask) () {
	C.gtk_widget_set_device_events((*C.GtkWidget)(_self_), device, events)
	return
}

func (_self_ *Widget) SetDirection(dir C.GtkTextDirection) () {
	C.gtk_widget_set_direction((*C.GtkWidget)(_self_), dir)
	return
}

func (_self_ *Widget) SetDoubleBuffered(double_buffered C.gboolean) () {
	C.gtk_widget_set_double_buffered((*C.GtkWidget)(_self_), double_buffered)
	return
}

func (_self_ *Widget) SetEvents(events C.gint) () {
	C.gtk_widget_set_events((*C.GtkWidget)(_self_), events)
	return
}

func (_self_ *Widget) SetHalign(align C.GtkAlign) () {
	C.gtk_widget_set_halign((*C.GtkWidget)(_self_), align)
	return
}

func (_self_ *Widget) SetHasTooltip(has_tooltip C.gboolean) () {
	C.gtk_widget_set_has_tooltip((*C.GtkWidget)(_self_), has_tooltip)
	return
}

func (_self_ *Widget) SetHasWindow(has_window C.gboolean) () {
	C.gtk_widget_set_has_window((*C.GtkWidget)(_self_), has_window)
	return
}

func (_self_ *Widget) SetHexpand(expand C.gboolean) () {
	C.gtk_widget_set_hexpand((*C.GtkWidget)(_self_), expand)
	return
}

func (_self_ *Widget) SetHexpandSet(set C.gboolean) () {
	C.gtk_widget_set_hexpand_set((*C.GtkWidget)(_self_), set)
	return
}

func (_self_ *Widget) SetMapped(mapped C.gboolean) () {
	C.gtk_widget_set_mapped((*C.GtkWidget)(_self_), mapped)
	return
}

func (_self_ *Widget) SetMarginBottom(margin C.gint) () {
	C.gtk_widget_set_margin_bottom((*C.GtkWidget)(_self_), margin)
	return
}

func (_self_ *Widget) SetMarginLeft(margin C.gint) () {
	C.gtk_widget_set_margin_left((*C.GtkWidget)(_self_), margin)
	return
}

func (_self_ *Widget) SetMarginRight(margin C.gint) () {
	C.gtk_widget_set_margin_right((*C.GtkWidget)(_self_), margin)
	return
}

func (_self_ *Widget) SetMarginTop(margin C.gint) () {
	C.gtk_widget_set_margin_top((*C.GtkWidget)(_self_), margin)
	return
}

func (_self_ *Widget) SetName(name *C.gchar) () {
	C._gtk_widget_set_name((*C.GtkWidget)(_self_), name)
	return
}

func (_self_ *Widget) SetNoShowAll(no_show_all C.gboolean) () {
	C.gtk_widget_set_no_show_all((*C.GtkWidget)(_self_), no_show_all)
	return
}

func (_self_ *Widget) SetParent(parent *C.GtkWidget) () {
	C.gtk_widget_set_parent((*C.GtkWidget)(_self_), parent)
	return
}

func (_self_ *Widget) SetParentWindow(parent_window *C.GdkWindow) () {
	C.gtk_widget_set_parent_window((*C.GtkWidget)(_self_), parent_window)
	return
}

func (_self_ *Widget) SetRealized(realized C.gboolean) () {
	C.gtk_widget_set_realized((*C.GtkWidget)(_self_), realized)
	return
}

func (_self_ *Widget) SetReceivesDefault(receives_default C.gboolean) () {
	C.gtk_widget_set_receives_default((*C.GtkWidget)(_self_), receives_default)
	return
}

func (_self_ *Widget) SetRedrawOnAllocate(redraw_on_allocate C.gboolean) () {
	C.gtk_widget_set_redraw_on_allocate((*C.GtkWidget)(_self_), redraw_on_allocate)
	return
}

func (_self_ *Widget) SetSensitive(sensitive C.gboolean) () {
	C.gtk_widget_set_sensitive((*C.GtkWidget)(_self_), sensitive)
	return
}

func (_self_ *Widget) SetSizeRequest(width C.gint, height C.gint) () {
	C.gtk_widget_set_size_request((*C.GtkWidget)(_self_), width, height)
	return
}

func (_self_ *Widget) SetStateFlags(flags C.GtkStateFlags, clear C.gboolean) () {
	C.gtk_widget_set_state_flags((*C.GtkWidget)(_self_), flags, clear)
	return
}

func (_self_ *Widget) SetSupportMultidevice(support_multidevice C.gboolean) () {
	C.gtk_widget_set_support_multidevice((*C.GtkWidget)(_self_), support_multidevice)
	return
}

func (_self_ *Widget) SetTooltipMarkup(markup *C.gchar) () {
	C._gtk_widget_set_tooltip_markup((*C.GtkWidget)(_self_), markup)
	return
}

func (_self_ *Widget) SetTooltipText(text *C.gchar) () {
	C._gtk_widget_set_tooltip_text((*C.GtkWidget)(_self_), text)
	return
}

func (_self_ *Widget) SetTooltipWindow(custom_window *C.GtkWindow) () {
	C.gtk_widget_set_tooltip_window((*C.GtkWidget)(_self_), custom_window)
	return
}

func (_self_ *Widget) SetValign(align C.GtkAlign) () {
	C.gtk_widget_set_valign((*C.GtkWidget)(_self_), align)
	return
}

func (_self_ *Widget) SetVexpand(expand C.gboolean) () {
	C.gtk_widget_set_vexpand((*C.GtkWidget)(_self_), expand)
	return
}

func (_self_ *Widget) SetVexpandSet(set C.gboolean) () {
	C.gtk_widget_set_vexpand_set((*C.GtkWidget)(_self_), set)
	return
}

func (_self_ *Widget) SetVisible(visible C.gboolean) () {
	C.gtk_widget_set_visible((*C.GtkWidget)(_self_), visible)
	return
}

func (_self_ *Widget) SetVisual(visual *C.GdkVisual) () {
	C.gtk_widget_set_visual((*C.GtkWidget)(_self_), visual)
	return
}

func (_self_ *Widget) SetWindow(window *C.GdkWindow) () {
	C.gtk_widget_set_window((*C.GtkWidget)(_self_), window)
	return
}

func (_self_ *Widget) ShapeCombineRegion(region *C.cairo_region_t) () {
	C.gtk_widget_shape_combine_region((*C.GtkWidget)(_self_), region)
	return
}

func (_self_ *Widget) Show() () {
	C.gtk_widget_show((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowAll() () {
	C.gtk_widget_show_all((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) ShowNow() () {
	C.gtk_widget_show_now((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) SizeAllocate(allocation *C.GtkAllocation) () {
	C.gtk_widget_size_allocate((*C.GtkWidget)(_self_), allocation)
	return
}

func (_self_ *Widget) StyleGetProperty(property_name *C.gchar, value *C.GValue) () {
	C._gtk_widget_style_get_property((*C.GtkWidget)(_self_), property_name, value)
	return
}

func (_self_ *Widget) ThawChildNotify() () {
	C.gtk_widget_thaw_child_notify((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) TranslateCoordinates(dest_widget *C.GtkWidget, src_x C.gint, src_y C.gint) (_return_ C.gboolean, dest_x *C.gint, dest_y *C.gint) {
	_return_ = C.gtk_widget_translate_coordinates((*C.GtkWidget)(_self_), dest_widget, src_x, src_y, dest_x, dest_y)
	return
}

func (_self_ *Widget) TriggerTooltipQuery() () {
	C.gtk_widget_trigger_tooltip_query((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unmap() () {
	C.gtk_widget_unmap((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unparent() () {
	C.gtk_widget_unparent((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) Unrealize() () {
	C.gtk_widget_unrealize((*C.GtkWidget)(_self_))
	return
}

func (_self_ *Widget) UnsetStateFlags(flags C.GtkStateFlags) () {
	C.gtk_widget_unset_state_flags((*C.GtkWidget)(_self_), flags)
	return
}

func (_self_ *WidgetClass) FindStyleProperty(property_name *C.gchar) (_return_ *C.GParamSpec) {
	_return_ = C._gtk_widget_class_find_style_property((*C.GtkWidgetClass)(_self_), property_name)
	return
}

func (_self_ *WidgetClass) InstallStyleProperty(pspec *C.GParamSpec) () {
	C.gtk_widget_class_install_style_property((*C.GtkWidgetClass)(_self_), pspec)
	return
}

func (_self_ *WidgetClass) InstallStylePropertyParser(pspec *C.GParamSpec, parser C.GtkRcPropertyParser) () {
	C.gtk_widget_class_install_style_property_parser((*C.GtkWidgetClass)(_self_), pspec, parser)
	return
}

func (_self_ *WidgetClass) ListStyleProperties() (_return_ unsafe.Pointer, n_properties *C.guint) {
	_return_ = C._gtk_widget_class_list_style_properties((*C.GtkWidgetClass)(_self_), n_properties)
	return
}

func (_self_ *WidgetClass) SetAccessibleRole(role C.AtkRole) () {
	C.gtk_widget_class_set_accessible_role((*C.GtkWidgetClass)(_self_), role)
	return
}

func (_self_ *WidgetClass) SetAccessibleType(type_ C.GType) () {
	C.gtk_widget_class_set_accessible_type((*C.GtkWidgetClass)(_self_), type_)
	return
}

func WidgetPathNew() (_return_ *C.GtkWidgetPath) {
	_return_ = C.gtk_widget_path_new()
	return
}

func (_self_ *WidgetPath) AppendForWidget(widget *C.GtkWidget) (_return_ C.gint) {
	_return_ = C.gtk_widget_path_append_for_widget((*C.GtkWidgetPath)(_self_), widget)
	return
}

func (_self_ *WidgetPath) AppendType(type_ C.GType) (_return_ C.gint) {
	_return_ = C.gtk_widget_path_append_type((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *WidgetPath) AppendWithSiblings(siblings *C.GtkWidgetPath, sibling_index C.guint) (_return_ C.gint) {
	_return_ = C.gtk_widget_path_append_with_siblings((*C.GtkWidgetPath)(_self_), siblings, sibling_index)
	return
}

func (_self_ *WidgetPath) Copy() (_return_ *C.GtkWidgetPath) {
	_return_ = C._gtk_widget_path_copy((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) Free() () {
	C.gtk_widget_path_free((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) GetObjectType() (_return_ C.GType) {
	_return_ = C._gtk_widget_path_get_object_type((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) HasParent(type_ C.GType) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_has_parent((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *WidgetPath) IsType(type_ C.GType) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_is_type((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *WidgetPath) IterAddClass(pos C.gint, name *C.gchar) () {
	C._gtk_widget_path_iter_add_class((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterAddRegion(pos C.gint, name *C.gchar, flags C.GtkRegionFlags) () {
	C._gtk_widget_path_iter_add_region((*C.GtkWidgetPath)(_self_), pos, name, flags)
	return
}

func (_self_ *WidgetPath) IterClearClasses(pos C.gint) () {
	C.gtk_widget_path_iter_clear_classes((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterClearRegions(pos C.gint) () {
	C.gtk_widget_path_iter_clear_regions((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterGetName(pos C.gint) (_return_ *C.gchar) {
	_return_ = C._gtk_widget_path_iter_get_name((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterGetObjectType(pos C.gint) (_return_ C.GType) {
	_return_ = C._gtk_widget_path_iter_get_object_type((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterGetSiblingIndex(pos C.gint) (_return_ C.guint) {
	_return_ = C._gtk_widget_path_iter_get_sibling_index((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterGetSiblings(pos C.gint) (_return_ *C.GtkWidgetPath) {
	_return_ = C._gtk_widget_path_iter_get_siblings((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterHasClass(pos C.gint, name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_iter_has_class((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterHasName(pos C.gint, name *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_iter_has_name((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterHasQclass(pos C.gint, qname C.GQuark) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_iter_has_qclass((*C.GtkWidgetPath)(_self_), pos, qname)
	return
}

func (_self_ *WidgetPath) IterHasQname(pos C.gint, qname C.GQuark) (_return_ C.gboolean) {
	_return_ = C._gtk_widget_path_iter_has_qname((*C.GtkWidgetPath)(_self_), pos, qname)
	return
}

func (_self_ *WidgetPath) IterHasQregion(pos C.gint, qname C.GQuark) (_return_ C.gboolean, flags *C.GtkRegionFlags) {
	_return_ = C._gtk_widget_path_iter_has_qregion((*C.GtkWidgetPath)(_self_), pos, qname, flags)
	return
}

func (_self_ *WidgetPath) IterHasRegion(pos C.gint, name *C.gchar) (_return_ C.gboolean, flags *C.GtkRegionFlags) {
	_return_ = C._gtk_widget_path_iter_has_region((*C.GtkWidgetPath)(_self_), pos, name, flags)
	return
}

func (_self_ *WidgetPath) IterListClasses(pos C.gint) (_return_ *C.GSList) {
	_return_ = C._gtk_widget_path_iter_list_classes((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterListRegions(pos C.gint) (_return_ *C.GSList) {
	_return_ = C._gtk_widget_path_iter_list_regions((*C.GtkWidgetPath)(_self_), pos)
	return
}

func (_self_ *WidgetPath) IterRemoveClass(pos C.gint, name *C.gchar) () {
	C._gtk_widget_path_iter_remove_class((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterRemoveRegion(pos C.gint, name *C.gchar) () {
	C._gtk_widget_path_iter_remove_region((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterSetName(pos C.gint, name *C.gchar) () {
	C._gtk_widget_path_iter_set_name((*C.GtkWidgetPath)(_self_), pos, name)
	return
}

func (_self_ *WidgetPath) IterSetObjectType(pos C.gint, type_ C.GType) () {
	C.gtk_widget_path_iter_set_object_type((*C.GtkWidgetPath)(_self_), pos, type_)
	return
}

func (_self_ *WidgetPath) Length() (_return_ C.gint) {
	_return_ = C._gtk_widget_path_length((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) PrependType(type_ C.GType) () {
	C.gtk_widget_path_prepend_type((*C.GtkWidgetPath)(_self_), type_)
	return
}

func (_self_ *WidgetPath) Ref() (_return_ *C.GtkWidgetPath) {
	_return_ = C.gtk_widget_path_ref((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) ToString() (_return_ *C.char) {
	_return_ = C._gtk_widget_path_to_string((*C.GtkWidgetPath)(_self_))
	return
}

func (_self_ *WidgetPath) Unref() () {
	C.gtk_widget_path_unref((*C.GtkWidgetPath)(_self_))
	return
}

func WindowNew(type_ C.GtkWindowType) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_new(type_)
	return
}

func WindowGetDefaultIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_default_icon_list()
	return
}

func WindowGetDefaultIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_window_get_default_icon_name()
	return
}

func WindowListToplevels() (_return_ *C.GList) {
	_return_ = C.gtk_window_list_toplevels()
	return
}

func WindowSetAutoStartupNotification(setting C.gboolean) () {
	C.gtk_window_set_auto_startup_notification(setting)
	return
}

func WindowSetDefaultIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_default_icon(icon)
	return
}

func WindowSetDefaultIconFromFile(filename *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_window_set_default_icon_from_file(filename, _error_)
	return
}

func WindowSetDefaultIconList(list *C.GList) () {
	C.gtk_window_set_default_icon_list(list)
	return
}

func WindowSetDefaultIconName(name *C.gchar) () {
	C._gtk_window_set_default_icon_name(name)
	return
}

func (_self_ *Window) ActivateDefault() (_return_ C.gboolean) {
	_return_ = C.gtk_window_activate_default((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) ActivateFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_window_activate_focus((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) ActivateKey(event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_window_activate_key((*C.GtkWindow)(_self_), event)
	return
}

func (_self_ *Window) AddAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_window_add_accel_group((*C.GtkWindow)(_self_), accel_group)
	return
}

func (_self_ *Window) AddMnemonic(keyval C.guint, target *C.GtkWidget) () {
	C.gtk_window_add_mnemonic((*C.GtkWindow)(_self_), keyval, target)
	return
}

func (_self_ *Window) BeginMoveDrag(button C.gint, root_x C.gint, root_y C.gint, timestamp C.guint32) () {
	C.gtk_window_begin_move_drag((*C.GtkWindow)(_self_), button, root_x, root_y, timestamp)
	return
}

func (_self_ *Window) BeginResizeDrag(edge C.GdkWindowEdge, button C.gint, root_x C.gint, root_y C.gint, timestamp C.guint32) () {
	C.gtk_window_begin_resize_drag((*C.GtkWindow)(_self_), edge, button, root_x, root_y, timestamp)
	return
}

func (_self_ *Window) Deiconify() () {
	C.gtk_window_deiconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Fullscreen() () {
	C.gtk_window_fullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetAcceptFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_accept_focus((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetApplication() (_return_ *C.GtkApplication) {
	_return_ = C.gtk_window_get_application((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetAttachedTo() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_get_attached_to((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetDecorated() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_decorated((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetDefaultSize() (width *C.gint, height *C.gint) {
	C.gtk_window_get_default_size((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) GetDefaultWidget() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_get_default_widget((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetDeletable() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_deletable((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetDestroyWithParent() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_destroy_with_parent((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetFocus() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_get_focus((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetFocusOnMap() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_focus_on_map((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetFocusVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_focus_visible((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetGravity() (_return_ C.GdkGravity) {
	_return_ = C.gtk_window_get_gravity((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetGroup() (_return_ *C.GtkWindowGroup) {
	_return_ = C.gtk_window_get_group((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetHasResizeGrip() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_has_resize_grip((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetHideTitlebarWhenMaximized() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_hide_titlebar_when_maximized((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIcon() (_return_ *C.GdkPixbuf) {
	_return_ = C.gtk_window_get_icon((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconList() (_return_ *C.GList) {
	_return_ = C.gtk_window_get_icon_list((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetIconName() (_return_ *C.gchar) {
	_return_ = C._gtk_window_get_icon_name((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetMnemonicModifier() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_window_get_mnemonic_modifier((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetMnemonicsVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_mnemonics_visible((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetModal() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_modal((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetOpacity() (_return_ C.gdouble) {
	_return_ = C.gtk_window_get_opacity((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetPosition() (root_x *C.gint, root_y *C.gint) {
	C.gtk_window_get_position((*C.GtkWindow)(_self_), root_x, root_y)
	return
}

func (_self_ *Window) GetResizable() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_resizable((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetResizeGripArea() (_return_ C.gboolean, rect *C.GdkRectangle) {
	_return_ = C.gtk_window_get_resize_grip_area((*C.GtkWindow)(_self_), rect)
	return
}

func (_self_ *Window) GetRole() (_return_ *C.gchar) {
	_return_ = C._gtk_window_get_role((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetScreen() (_return_ *C.GdkScreen) {
	_return_ = C.gtk_window_get_screen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetSize() (width *C.gint, height *C.gint) {
	C.gtk_window_get_size((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) GetSkipPagerHint() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_skip_pager_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetSkipTaskbarHint() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_skip_taskbar_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetTitle() (_return_ *C.gchar) {
	_return_ = C._gtk_window_get_title((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetTransientFor() (_return_ *C.GtkWindow) {
	_return_ = C.gtk_window_get_transient_for((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetTypeHint() (_return_ C.GdkWindowTypeHint) {
	_return_ = C.gtk_window_get_type_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetUrgencyHint() (_return_ C.gboolean) {
	_return_ = C.gtk_window_get_urgency_hint((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) GetWindowType() (_return_ C.GtkWindowType) {
	_return_ = C.gtk_window_get_window_type((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) HasGroup() (_return_ C.gboolean) {
	_return_ = C.gtk_window_has_group((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) HasToplevelFocus() (_return_ C.gboolean) {
	_return_ = C.gtk_window_has_toplevel_focus((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Iconify() () {
	C.gtk_window_iconify((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) IsActive() (_return_ C.gboolean) {
	_return_ = C.gtk_window_is_active((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Maximize() () {
	C.gtk_window_maximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) MnemonicActivate(keyval C.guint, modifier C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_window_mnemonic_activate((*C.GtkWindow)(_self_), keyval, modifier)
	return
}

func (_self_ *Window) Move(x C.gint, y C.gint) () {
	C.gtk_window_move((*C.GtkWindow)(_self_), x, y)
	return
}

func (_self_ *Window) ParseGeometry(geometry *C.gchar) (_return_ C.gboolean) {
	_return_ = C._gtk_window_parse_geometry((*C.GtkWindow)(_self_), geometry)
	return
}

func (_self_ *Window) Present() () {
	C.gtk_window_present((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) PresentWithTime(timestamp C.guint32) () {
	C.gtk_window_present_with_time((*C.GtkWindow)(_self_), timestamp)
	return
}

func (_self_ *Window) PropagateKeyEvent(event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_window_propagate_key_event((*C.GtkWindow)(_self_), event)
	return
}

func (_self_ *Window) RemoveAccelGroup(accel_group *C.GtkAccelGroup) () {
	C.gtk_window_remove_accel_group((*C.GtkWindow)(_self_), accel_group)
	return
}

func (_self_ *Window) RemoveMnemonic(keyval C.guint, target *C.GtkWidget) () {
	C.gtk_window_remove_mnemonic((*C.GtkWindow)(_self_), keyval, target)
	return
}

func (_self_ *Window) ReshowWithInitialSize() () {
	C.gtk_window_reshow_with_initial_size((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Resize(width C.gint, height C.gint) () {
	C.gtk_window_resize((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) ResizeGripIsVisible() (_return_ C.gboolean) {
	_return_ = C.gtk_window_resize_grip_is_visible((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) ResizeToGeometry(width C.gint, height C.gint) () {
	C.gtk_window_resize_to_geometry((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) SetAcceptFocus(setting C.gboolean) () {
	C.gtk_window_set_accept_focus((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetApplication(application *C.GtkApplication) () {
	C.gtk_window_set_application((*C.GtkWindow)(_self_), application)
	return
}

func (_self_ *Window) SetAttachedTo(attach_widget *C.GtkWidget) () {
	C.gtk_window_set_attached_to((*C.GtkWindow)(_self_), attach_widget)
	return
}

func (_self_ *Window) SetDecorated(setting C.gboolean) () {
	C.gtk_window_set_decorated((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetDefault(default_widget *C.GtkWidget) () {
	C.gtk_window_set_default((*C.GtkWindow)(_self_), default_widget)
	return
}

func (_self_ *Window) SetDefaultGeometry(width C.gint, height C.gint) () {
	C.gtk_window_set_default_geometry((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) SetDefaultSize(width C.gint, height C.gint) () {
	C.gtk_window_set_default_size((*C.GtkWindow)(_self_), width, height)
	return
}

func (_self_ *Window) SetDeletable(setting C.gboolean) () {
	C.gtk_window_set_deletable((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetDestroyWithParent(setting C.gboolean) () {
	C.gtk_window_set_destroy_with_parent((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetFocus(focus *C.GtkWidget) () {
	C.gtk_window_set_focus((*C.GtkWindow)(_self_), focus)
	return
}

func (_self_ *Window) SetFocusOnMap(setting C.gboolean) () {
	C.gtk_window_set_focus_on_map((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetFocusVisible(setting C.gboolean) () {
	C.gtk_window_set_focus_visible((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetGeometryHints(geometry_widget *C.GtkWidget, geometry *C.GdkGeometry, geom_mask C.GdkWindowHints) () {
	C.gtk_window_set_geometry_hints((*C.GtkWindow)(_self_), geometry_widget, geometry, geom_mask)
	return
}

func (_self_ *Window) SetGravity(gravity C.GdkGravity) () {
	C.gtk_window_set_gravity((*C.GtkWindow)(_self_), gravity)
	return
}

func (_self_ *Window) SetHasResizeGrip(value C.gboolean) () {
	C.gtk_window_set_has_resize_grip((*C.GtkWindow)(_self_), value)
	return
}

func (_self_ *Window) SetHasUserRefCount(setting C.gboolean) () {
	C.gtk_window_set_has_user_ref_count((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetHideTitlebarWhenMaximized(setting C.gboolean) () {
	C.gtk_window_set_hide_titlebar_when_maximized((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetIcon(icon *C.GdkPixbuf) () {
	C.gtk_window_set_icon((*C.GtkWindow)(_self_), icon)
	return
}

func (_self_ *Window) SetIconFromFile(filename *C.gchar) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_window_set_icon_from_file((*C.GtkWindow)(_self_), filename, _error_)
	return
}

func (_self_ *Window) SetIconList(list *C.GList) () {
	C.gtk_window_set_icon_list((*C.GtkWindow)(_self_), list)
	return
}

func (_self_ *Window) SetIconName(name *C.gchar) () {
	C._gtk_window_set_icon_name((*C.GtkWindow)(_self_), name)
	return
}

func (_self_ *Window) SetKeepAbove(setting C.gboolean) () {
	C.gtk_window_set_keep_above((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetKeepBelow(setting C.gboolean) () {
	C.gtk_window_set_keep_below((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetMnemonicModifier(modifier C.GdkModifierType) () {
	C.gtk_window_set_mnemonic_modifier((*C.GtkWindow)(_self_), modifier)
	return
}

func (_self_ *Window) SetMnemonicsVisible(setting C.gboolean) () {
	C.gtk_window_set_mnemonics_visible((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetModal(modal C.gboolean) () {
	C.gtk_window_set_modal((*C.GtkWindow)(_self_), modal)
	return
}

func (_self_ *Window) SetOpacity(opacity C.gdouble) () {
	C.gtk_window_set_opacity((*C.GtkWindow)(_self_), opacity)
	return
}

func (_self_ *Window) SetPosition(position C.GtkWindowPosition) () {
	C.gtk_window_set_position((*C.GtkWindow)(_self_), position)
	return
}

func (_self_ *Window) SetResizable(resizable C.gboolean) () {
	C.gtk_window_set_resizable((*C.GtkWindow)(_self_), resizable)
	return
}

func (_self_ *Window) SetRole(role *C.gchar) () {
	C._gtk_window_set_role((*C.GtkWindow)(_self_), role)
	return
}

func (_self_ *Window) SetScreen(screen *C.GdkScreen) () {
	C.gtk_window_set_screen((*C.GtkWindow)(_self_), screen)
	return
}

func (_self_ *Window) SetSkipPagerHint(setting C.gboolean) () {
	C.gtk_window_set_skip_pager_hint((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetSkipTaskbarHint(setting C.gboolean) () {
	C.gtk_window_set_skip_taskbar_hint((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetStartupId(startup_id *C.gchar) () {
	C._gtk_window_set_startup_id((*C.GtkWindow)(_self_), startup_id)
	return
}

func (_self_ *Window) SetTitle(title *C.gchar) () {
	C._gtk_window_set_title((*C.GtkWindow)(_self_), title)
	return
}

func (_self_ *Window) SetTransientFor(parent *C.GtkWindow) () {
	C.gtk_window_set_transient_for((*C.GtkWindow)(_self_), parent)
	return
}

func (_self_ *Window) SetTypeHint(hint C.GdkWindowTypeHint) () {
	C.gtk_window_set_type_hint((*C.GtkWindow)(_self_), hint)
	return
}

func (_self_ *Window) SetUrgencyHint(setting C.gboolean) () {
	C.gtk_window_set_urgency_hint((*C.GtkWindow)(_self_), setting)
	return
}

func (_self_ *Window) SetWmclass(wmclass_name *C.gchar, wmclass_class *C.gchar) () {
	C._gtk_window_set_wmclass((*C.GtkWindow)(_self_), wmclass_name, wmclass_class)
	return
}

func (_self_ *Window) Stick() () {
	C.gtk_window_stick((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unfullscreen() () {
	C.gtk_window_unfullscreen((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unmaximize() () {
	C.gtk_window_unmaximize((*C.GtkWindow)(_self_))
	return
}

func (_self_ *Window) Unstick() () {
	C.gtk_window_unstick((*C.GtkWindow)(_self_))
	return
}

func WindowGroupNew() (_return_ *C.GtkWindowGroup) {
	_return_ = C.gtk_window_group_new()
	return
}

func (_self_ *WindowGroup) AddWindow(window *C.GtkWindow) () {
	C.gtk_window_group_add_window((*C.GtkWindowGroup)(_self_), window)
	return
}

func (_self_ *WindowGroup) GetCurrentDeviceGrab(device *C.GdkDevice) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_group_get_current_device_grab((*C.GtkWindowGroup)(_self_), device)
	return
}

func (_self_ *WindowGroup) GetCurrentGrab() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_window_group_get_current_grab((*C.GtkWindowGroup)(_self_))
	return
}

func (_self_ *WindowGroup) ListWindows() (_return_ *C.GList) {
	_return_ = C.gtk_window_group_list_windows((*C.GtkWindowGroup)(_self_))
	return
}

func (_self_ *WindowGroup) RemoveWindow(window *C.GtkWindow) () {
	C.gtk_window_group_remove_window((*C.GtkWindowGroup)(_self_), window)
	return
}

func AccelGroupsActivate(object *C.GObject, accel_key C.guint, accel_mods C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_accel_groups_activate(object, accel_key, accel_mods)
	return
}

func AccelGroupsFromObject(object *C.GObject) (_return_ *C.GSList) {
	_return_ = C.gtk_accel_groups_from_object(object)
	return
}

func AcceleratorGetDefaultModMask() (_return_ C.GdkModifierType) {
	_return_ = C.gtk_accelerator_get_default_mod_mask()
	return
}

func AcceleratorGetLabel(accelerator_key C.guint, accelerator_mods C.GdkModifierType) (_return_ *C.gchar) {
	_return_ = C.gtk_accelerator_get_label(accelerator_key, accelerator_mods)
	return
}

func AcceleratorGetLabelWithKeycode(display *C.GdkDisplay, accelerator_key C.guint, keycode C.guint, accelerator_mods C.GdkModifierType) (_return_ *C.gchar) {
	_return_ = C.gtk_accelerator_get_label_with_keycode(display, accelerator_key, keycode, accelerator_mods)
	return
}

func AcceleratorName(accelerator_key C.guint, accelerator_mods C.GdkModifierType) (_return_ *C.gchar) {
	_return_ = C.gtk_accelerator_name(accelerator_key, accelerator_mods)
	return
}

func AcceleratorNameWithKeycode(display *C.GdkDisplay, accelerator_key C.guint, keycode C.guint, accelerator_mods C.GdkModifierType) (_return_ *C.gchar) {
	_return_ = C.gtk_accelerator_name_with_keycode(display, accelerator_key, keycode, accelerator_mods)
	return
}

func AcceleratorParse(accelerator *C.gchar) (accelerator_key *C.guint, accelerator_mods *C.GdkModifierType) {
	C._gtk_accelerator_parse(accelerator, accelerator_key, accelerator_mods)
	return
}

func AcceleratorParseWithKeycode(accelerator *C.gchar) (accelerator_key *C.guint, accelerator_codes unsafe.Pointer, accelerator_mods *C.GdkModifierType) {
	C._gtk_accelerator_parse_with_keycode(accelerator, accelerator_key, accelerator_codes, accelerator_mods)
	return
}

func AcceleratorSetDefaultModMask(default_mod_mask C.GdkModifierType) () {
	C.gtk_accelerator_set_default_mod_mask(default_mod_mask)
	return
}

func AcceleratorValid(keyval C.guint, modifiers C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_accelerator_valid(keyval, modifiers)
	return
}

func AlternativeDialogButtonOrder(screen *C.GdkScreen) (_return_ C.gboolean) {
	_return_ = C.gtk_alternative_dialog_button_order(screen)
	return
}

func BindingsActivate(object *C.GObject, keyval C.guint, modifiers C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_bindings_activate(object, keyval, modifiers)
	return
}

func BindingsActivateEvent(object *C.GObject, event *C.GdkEventKey) (_return_ C.gboolean) {
	_return_ = C.gtk_bindings_activate_event(object, event)
	return
}

func BuilderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_builder_error_quark()
	return
}

func CairoShouldDrawWindow(cr *C.cairo_t, window *C.GdkWindow) (_return_ C.gboolean) {
	_return_ = C.gtk_cairo_should_draw_window(cr, window)
	return
}

func CairoTransformToWindow(cr *C.cairo_t, widget *C.GtkWidget, window *C.GdkWindow) () {
	C.gtk_cairo_transform_to_window(cr, widget, window)
	return
}

func CheckVersion(required_major C.guint, required_minor C.guint, required_micro C.guint) (_return_ *C.gchar) {
	_return_ = C._gtk_check_version(required_major, required_minor, required_micro)
	return
}

func CssProviderErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_css_provider_error_quark()
	return
}

func DeviceGrabAdd(widget *C.GtkWidget, device *C.GdkDevice, block_others C.gboolean) () {
	C.gtk_device_grab_add(widget, device, block_others)
	return
}

func DeviceGrabRemove(widget *C.GtkWidget, device *C.GdkDevice) () {
	C.gtk_device_grab_remove(widget, device)
	return
}

func DisableSetlocale() () {
	C.gtk_disable_setlocale()
	return
}

func DistributeNaturalAllocation(extra_space C.gint, n_requested_sizes C.guint, sizes *C.GtkRequestedSize) (_return_ C.gint) {
	_return_ = C.gtk_distribute_natural_allocation(extra_space, n_requested_sizes, sizes)
	return
}

func DragFinish(context *C.GdkDragContext, success C.gboolean, del C.gboolean, time_ C.guint32) () {
	C.gtk_drag_finish(context, success, del, time_)
	return
}

func DragGetSourceWidget(context *C.GdkDragContext) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_drag_get_source_widget(context)
	return
}

func DragSetIconDefault(context *C.GdkDragContext) () {
	C.gtk_drag_set_icon_default(context)
	return
}

func DragSetIconGicon(context *C.GdkDragContext, icon *C.GIcon, hot_x C.gint, hot_y C.gint) () {
	C.gtk_drag_set_icon_gicon(context, icon, hot_x, hot_y)
	return
}

func DragSetIconName(context *C.GdkDragContext, icon_name *C.gchar, hot_x C.gint, hot_y C.gint) () {
	C._gtk_drag_set_icon_name(context, icon_name, hot_x, hot_y)
	return
}

func DragSetIconPixbuf(context *C.GdkDragContext, pixbuf *C.GdkPixbuf, hot_x C.gint, hot_y C.gint) () {
	C.gtk_drag_set_icon_pixbuf(context, pixbuf, hot_x, hot_y)
	return
}

func DragSetIconStock(context *C.GdkDragContext, stock_id *C.gchar, hot_x C.gint, hot_y C.gint) () {
	C._gtk_drag_set_icon_stock(context, stock_id, hot_x, hot_y)
	return
}

func DragSetIconSurface(context *C.GdkDragContext, surface *C.cairo_surface_t) () {
	C.gtk_drag_set_icon_surface(context, surface)
	return
}

func DragSetIconWidget(context *C.GdkDragContext, widget *C.GtkWidget, hot_x C.gint, hot_y C.gint) () {
	C.gtk_drag_set_icon_widget(context, widget, hot_x, hot_y)
	return
}

func EventsPending() (_return_ C.gboolean) {
	_return_ = C.gtk_events_pending()
	return
}

func False() (_return_ C.gboolean) {
	_return_ = C.gtk_false()
	return
}

func FileChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_file_chooser_error_quark()
	return
}

func GetBinaryAge() (_return_ C.guint) {
	_return_ = C.gtk_get_binary_age()
	return
}

func GetCurrentEvent() (_return_ *C.GdkEvent) {
	_return_ = C.gtk_get_current_event()
	return
}

func GetCurrentEventDevice() (_return_ *C.GdkDevice) {
	_return_ = C.gtk_get_current_event_device()
	return
}

func GetCurrentEventState() (_return_ C.gboolean, state *C.GdkModifierType) {
	_return_ = C.gtk_get_current_event_state(state)
	return
}

func GetCurrentEventTime() (_return_ C.guint32) {
	_return_ = C.gtk_get_current_event_time()
	return
}

func GetDebugFlags() (_return_ C.guint) {
	_return_ = C.gtk_get_debug_flags()
	return
}

func GetDefaultLanguage() (_return_ *C.PangoLanguage) {
	_return_ = C.gtk_get_default_language()
	return
}

func GetEventWidget(event *C.GdkEvent) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_get_event_widget(event)
	return
}

func GetInterfaceAge() (_return_ C.guint) {
	_return_ = C.gtk_get_interface_age()
	return
}

func GetMajorVersion() (_return_ C.guint) {
	_return_ = C.gtk_get_major_version()
	return
}

func GetMicroVersion() (_return_ C.guint) {
	_return_ = C.gtk_get_micro_version()
	return
}

func GetMinorVersion() (_return_ C.guint) {
	_return_ = C.gtk_get_minor_version()
	return
}

func GetOptionGroup(open_default_display C.gboolean) (_return_ *C.GOptionGroup) {
	_return_ = C.gtk_get_option_group(open_default_display)
	return
}

func GrabGetCurrent() (_return_ *C.GtkWidget) {
	_return_ = C.gtk_grab_get_current()
	return
}

func IconSizeFromName(name *C.gchar) (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_size_from_name(name)
	return
}

func IconSizeGetName(size C.GtkIconSize) (_return_ *C.gchar) {
	_return_ = C._gtk_icon_size_get_name(size)
	return
}

func IconSizeLookup(size C.GtkIconSize) (_return_ C.gboolean, width *C.gint, height *C.gint) {
	_return_ = C.gtk_icon_size_lookup(size, width, height)
	return
}

func IconSizeLookupForSettings(settings *C.GtkSettings, size C.GtkIconSize) (_return_ C.gboolean, width *C.gint, height *C.gint) {
	_return_ = C.gtk_icon_size_lookup_for_settings(settings, size, width, height)
	return
}

func IconSizeRegister(name *C.gchar, width C.gint, height C.gint) (_return_ C.GtkIconSize) {
	_return_ = C._gtk_icon_size_register(name, width, height)
	return
}

func IconSizeRegisterAlias(alias *C.gchar, target C.GtkIconSize) () {
	C._gtk_icon_size_register_alias(alias, target)
	return
}

func IconThemeErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_icon_theme_error_quark()
	return
}

func Main() () {
	C.gtk_main()
	return
}

func MainDoEvent(event *C.GdkEvent) () {
	C.gtk_main_do_event(event)
	return
}

func MainIteration() (_return_ C.gboolean) {
	_return_ = C.gtk_main_iteration()
	return
}

func MainIterationDo(blocking C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_main_iteration_do(blocking)
	return
}

func MainLevel() (_return_ C.guint) {
	_return_ = C.gtk_main_level()
	return
}

func MainQuit() () {
	C.gtk_main_quit()
	return
}

func PrintErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_print_error_quark()
	return
}

func PrintRunPageSetupDialog(parent *C.GtkWindow, page_setup *C.GtkPageSetup, settings *C.GtkPrintSettings) (_return_ *C.GtkPageSetup) {
	_return_ = C.gtk_print_run_page_setup_dialog(parent, page_setup, settings)
	return
}

func PrintRunPageSetupDialogAsync(parent *C.GtkWindow, page_setup *C.GtkPageSetup, settings *C.GtkPrintSettings, done_cb C.GtkPageSetupDoneFunc, data C.gpointer) () {
	C.gtk_print_run_page_setup_dialog_async(parent, page_setup, settings, done_cb, data)
	return
}

func PropagateEvent(widget *C.GtkWidget, event *C.GdkEvent) () {
	C.gtk_propagate_event(widget, event)
	return
}

func RcPropertyParseBorder(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ C.gboolean) {
	_return_ = C._gtk_rc_property_parse_border(pspec, gstring, property_value)
	return
}

func RcPropertyParseColor(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ C.gboolean) {
	_return_ = C._gtk_rc_property_parse_color(pspec, gstring, property_value)
	return
}

func RcPropertyParseEnum(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ C.gboolean) {
	_return_ = C._gtk_rc_property_parse_enum(pspec, gstring, property_value)
	return
}

func RcPropertyParseFlags(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ C.gboolean) {
	_return_ = C._gtk_rc_property_parse_flags(pspec, gstring, property_value)
	return
}

func RcPropertyParseRequisition(pspec *C.GParamSpec, gstring *C.GString, property_value *C.GValue) (_return_ C.gboolean) {
	_return_ = C._gtk_rc_property_parse_requisition(pspec, gstring, property_value)
	return
}

func RecentChooserErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_chooser_error_quark()
	return
}

func RecentManagerErrorQuark() (_return_ C.GQuark) {
	_return_ = C.gtk_recent_manager_error_quark()
	return
}

func RenderActivity(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_activity(context, cr, x, y, width, height)
	return
}

func RenderArrow(context *C.GtkStyleContext, cr *C.cairo_t, angle C.gdouble, x C.gdouble, y C.gdouble, size C.gdouble) () {
	C.gtk_render_arrow(context, cr, angle, x, y, size)
	return
}

func RenderBackground(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_background(context, cr, x, y, width, height)
	return
}

func RenderCheck(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_check(context, cr, x, y, width, height)
	return
}

func RenderExpander(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_expander(context, cr, x, y, width, height)
	return
}

func RenderExtension(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble, gap_side C.GtkPositionType) () {
	C.gtk_render_extension(context, cr, x, y, width, height, gap_side)
	return
}

func RenderFocus(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_focus(context, cr, x, y, width, height)
	return
}

func RenderFrame(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_frame(context, cr, x, y, width, height)
	return
}

func RenderFrameGap(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble, gap_side C.GtkPositionType, xy0_gap C.gdouble, xy1_gap C.gdouble) () {
	C.gtk_render_frame_gap(context, cr, x, y, width, height, gap_side, xy0_gap, xy1_gap)
	return
}

func RenderHandle(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_handle(context, cr, x, y, width, height)
	return
}

func RenderIcon(context *C.GtkStyleContext, cr *C.cairo_t, pixbuf *C.GdkPixbuf, x C.gdouble, y C.gdouble) () {
	C.gtk_render_icon(context, cr, pixbuf, x, y)
	return
}

func RenderIconPixbuf(context *C.GtkStyleContext, source *C.GtkIconSource, size C.GtkIconSize) (_return_ *C.GdkPixbuf) {
	_return_ = C._gtk_render_icon_pixbuf(context, source, size)
	return
}

func RenderInsertionCursor(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, layout *C.PangoLayout, index C.int, direction C.PangoDirection) () {
	C.gtk_render_insertion_cursor(context, cr, x, y, layout, index, direction)
	return
}

func RenderLayout(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, layout *C.PangoLayout) () {
	C.gtk_render_layout(context, cr, x, y, layout)
	return
}

func RenderLine(context *C.GtkStyleContext, cr *C.cairo_t, x0 C.gdouble, y0 C.gdouble, x1 C.gdouble, y1 C.gdouble) () {
	C.gtk_render_line(context, cr, x0, y0, x1, y1)
	return
}

func RenderOption(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble) () {
	C.gtk_render_option(context, cr, x, y, width, height)
	return
}

func RenderSlider(context *C.GtkStyleContext, cr *C.cairo_t, x C.gdouble, y C.gdouble, width C.gdouble, height C.gdouble, orientation C.GtkOrientation) () {
	C.gtk_render_slider(context, cr, x, y, width, height, orientation)
	return
}

func RgbToHsv(r C.gdouble, g C.gdouble, b C.gdouble) (h *C.gdouble, s *C.gdouble, v *C.gdouble) {
	C.gtk_rgb_to_hsv(r, g, b, h, s, v)
	return
}

func SelectionAddTarget(widget *C.GtkWidget, selection C.GdkAtom, target C.GdkAtom, info C.guint) () {
	C.gtk_selection_add_target(widget, selection, target, info)
	return
}

func SelectionAddTargets(widget *C.GtkWidget, selection C.GdkAtom, targets *C.GtkTargetEntry, ntargets C.guint) () {
	C._gtk_selection_add_targets(widget, selection, targets, ntargets)
	return
}

func SelectionClearTargets(widget *C.GtkWidget, selection C.GdkAtom) () {
	C.gtk_selection_clear_targets(widget, selection)
	return
}

func SelectionConvert(widget *C.GtkWidget, selection C.GdkAtom, target C.GdkAtom, time_ C.guint32) (_return_ C.gboolean) {
	_return_ = C.gtk_selection_convert(widget, selection, target, time_)
	return
}

func SelectionOwnerSet(widget *C.GtkWidget, selection C.GdkAtom, time_ C.guint32) (_return_ C.gboolean) {
	_return_ = C.gtk_selection_owner_set(widget, selection, time_)
	return
}

func SelectionOwnerSetForDisplay(display *C.GdkDisplay, widget *C.GtkWidget, selection C.GdkAtom, time_ C.guint32) (_return_ C.gboolean) {
	_return_ = C.gtk_selection_owner_set_for_display(display, widget, selection, time_)
	return
}

func SelectionRemoveAll(widget *C.GtkWidget) () {
	C.gtk_selection_remove_all(widget)
	return
}

func SetDebugFlags(flags C.guint) () {
	C.gtk_set_debug_flags(flags)
	return
}

func ShowUri(screen *C.GdkScreen, uri *C.gchar, timestamp C.guint32) (_return_ C.gboolean, _error_ unsafe.Pointer) {
	_return_ = C._gtk_show_uri(screen, uri, timestamp, _error_)
	return
}

func StockAdd(items *C.GtkStockItem, n_items C.guint) () {
	C._gtk_stock_add(items, n_items)
	return
}

func StockAddStatic(items *C.GtkStockItem, n_items C.guint) () {
	C._gtk_stock_add_static(items, n_items)
	return
}

func StockListIds() (_return_ *C.GSList) {
	_return_ = C.gtk_stock_list_ids()
	return
}

func StockLookup(stock_id *C.gchar) (_return_ C.gboolean, item *C.GtkStockItem) {
	_return_ = C._gtk_stock_lookup(stock_id, item)
	return
}

func StockSetTranslateFunc(domain *C.gchar, func_ C.GtkTranslateFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C._gtk_stock_set_translate_func(domain, func_, data, notify)
	return
}

func TargetTableFree(targets *C.GtkTargetEntry, n_targets C.gint) () {
	C.gtk_target_table_free(targets, n_targets)
	return
}

func TargetTableNewFromList(list *C.GtkTargetList) (_return_ *C.GtkTargetEntry, n_targets *C.gint) {
	_return_ = C.gtk_target_table_new_from_list(list, n_targets)
	return
}

func TargetsIncludeImage(targets *C.GdkAtom, n_targets C.gint, writable C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_targets_include_image(targets, n_targets, writable)
	return
}

func TargetsIncludeRichText(targets *C.GdkAtom, n_targets C.gint, buffer *C.GtkTextBuffer) (_return_ C.gboolean) {
	_return_ = C.gtk_targets_include_rich_text(targets, n_targets, buffer)
	return
}

func TargetsIncludeText(targets *C.GdkAtom, n_targets C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_targets_include_text(targets, n_targets)
	return
}

func TargetsIncludeUri(targets *C.GdkAtom, n_targets C.gint) (_return_ C.gboolean) {
	_return_ = C.gtk_targets_include_uri(targets, n_targets)
	return
}

func TestCreateSimpleWindow(window_title *C.gchar, dialog_text *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_test_create_simple_window(window_title, dialog_text)
	return
}

func TestFindLabel(widget *C.GtkWidget, label_pattern *C.gchar) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_test_find_label(widget, label_pattern)
	return
}

func TestFindSibling(base_widget *C.GtkWidget, widget_type C.GType) (_return_ *C.GtkWidget) {
	_return_ = C.gtk_test_find_sibling(base_widget, widget_type)
	return
}

func TestFindWidget(widget *C.GtkWidget, label_pattern *C.gchar, widget_type C.GType) (_return_ *C.GtkWidget) {
	_return_ = C._gtk_test_find_widget(widget, label_pattern, widget_type)
	return
}

func TestListAllTypes() (_return_ *C.GType, n_types *C.guint) {
	_return_ = C._gtk_test_list_all_types(n_types)
	return
}

func TestRegisterAllTypes() () {
	C.gtk_test_register_all_types()
	return
}

func TestSliderGetValue(widget *C.GtkWidget) (_return_ C.double) {
	_return_ = C.gtk_test_slider_get_value(widget)
	return
}

func TestSliderSetPerc(widget *C.GtkWidget, percentage C.double) () {
	C.gtk_test_slider_set_perc(widget, percentage)
	return
}

func TestSpinButtonClick(spinner *C.GtkSpinButton, button C.guint, upwards C.gboolean) (_return_ C.gboolean) {
	_return_ = C.gtk_test_spin_button_click(spinner, button, upwards)
	return
}

func TestTextGet(widget *C.GtkWidget) (_return_ *C.gchar) {
	_return_ = C.gtk_test_text_get(widget)
	return
}

func TestTextSet(widget *C.GtkWidget, string_ *C.gchar) () {
	C._gtk_test_text_set(widget, string_)
	return
}

func TestWidgetClick(widget *C.GtkWidget, button C.guint, modifiers C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_test_widget_click(widget, button, modifiers)
	return
}

func TestWidgetSendKey(widget *C.GtkWidget, keyval C.guint, modifiers C.GdkModifierType) (_return_ C.gboolean) {
	_return_ = C.gtk_test_widget_send_key(widget, keyval, modifiers)
	return
}

func TreeGetRowDragData(selection_data *C.GtkSelectionData) (_return_ C.gboolean, tree_model unsafe.Pointer, path unsafe.Pointer) {
	_return_ = C._gtk_tree_get_row_drag_data(selection_data, tree_model, path)
	return
}

func TreeSetRowDragData(selection_data *C.GtkSelectionData, tree_model *C.GtkTreeModel, path *C.GtkTreePath) (_return_ C.gboolean) {
	_return_ = C.gtk_tree_set_row_drag_data(selection_data, tree_model, path)
	return
}

func True() (_return_ C.gboolean) {
	_return_ = C.gtk_true()
	return
}

const ACCEL_VISIBLE = C.GTK_ACCEL_VISIBLE
const ACCEL_LOCKED = C.GTK_ACCEL_LOCKED
const ACCEL_MASK = C.GTK_ACCEL_MASK
const ALIGN_FILL = C.GTK_ALIGN_FILL
const ALIGN_START = C.GTK_ALIGN_START
const ALIGN_END = C.GTK_ALIGN_END
const ALIGN_CENTER = C.GTK_ALIGN_CENTER
const APPLICATION_INHIBIT_LOGOUT = C.GTK_APPLICATION_INHIBIT_LOGOUT
const APPLICATION_INHIBIT_SWITCH = C.GTK_APPLICATION_INHIBIT_SWITCH
const APPLICATION_INHIBIT_SUSPEND = C.GTK_APPLICATION_INHIBIT_SUSPEND
const APPLICATION_INHIBIT_IDLE = C.GTK_APPLICATION_INHIBIT_IDLE
const ARROWS_BOTH = C.GTK_ARROWS_BOTH
const ARROWS_START = C.GTK_ARROWS_START
const ARROWS_END = C.GTK_ARROWS_END
const ARROW_UP = C.GTK_ARROW_UP
const ARROW_DOWN = C.GTK_ARROW_DOWN
const ARROW_LEFT = C.GTK_ARROW_LEFT
const ARROW_RIGHT = C.GTK_ARROW_RIGHT
const ARROW_NONE = C.GTK_ARROW_NONE
const ASSISTANT_PAGE_CONTENT = C.GTK_ASSISTANT_PAGE_CONTENT
const ASSISTANT_PAGE_INTRO = C.GTK_ASSISTANT_PAGE_INTRO
const ASSISTANT_PAGE_CONFIRM = C.GTK_ASSISTANT_PAGE_CONFIRM
const ASSISTANT_PAGE_SUMMARY = C.GTK_ASSISTANT_PAGE_SUMMARY
const ASSISTANT_PAGE_PROGRESS = C.GTK_ASSISTANT_PAGE_PROGRESS
const ASSISTANT_PAGE_CUSTOM = C.GTK_ASSISTANT_PAGE_CUSTOM
const EXPAND = C.GTK_EXPAND
const SHRINK = C.GTK_SHRINK
const FILL = C.GTK_FILL
const BORDER_STYLE_NONE = C.GTK_BORDER_STYLE_NONE
const BORDER_STYLE_SOLID = C.GTK_BORDER_STYLE_SOLID
const BORDER_STYLE_INSET = C.GTK_BORDER_STYLE_INSET
const BORDER_STYLE_OUTSET = C.GTK_BORDER_STYLE_OUTSET
const BORDER_STYLE_HIDDEN = C.GTK_BORDER_STYLE_HIDDEN
const BORDER_STYLE_DOTTED = C.GTK_BORDER_STYLE_DOTTED
const BORDER_STYLE_DASHED = C.GTK_BORDER_STYLE_DASHED
const BORDER_STYLE_DOUBLE = C.GTK_BORDER_STYLE_DOUBLE
const BORDER_STYLE_GROOVE = C.GTK_BORDER_STYLE_GROOVE
const BORDER_STYLE_RIDGE = C.GTK_BORDER_STYLE_RIDGE
const BUILDER_ERROR_INVALID_TYPE_FUNCTION = C.GTK_BUILDER_ERROR_INVALID_TYPE_FUNCTION
const BUILDER_ERROR_UNHANDLED_TAG = C.GTK_BUILDER_ERROR_UNHANDLED_TAG
const BUILDER_ERROR_MISSING_ATTRIBUTE = C.GTK_BUILDER_ERROR_MISSING_ATTRIBUTE
const BUILDER_ERROR_INVALID_ATTRIBUTE = C.GTK_BUILDER_ERROR_INVALID_ATTRIBUTE
const BUILDER_ERROR_INVALID_TAG = C.GTK_BUILDER_ERROR_INVALID_TAG
const BUILDER_ERROR_MISSING_PROPERTY_VALUE = C.GTK_BUILDER_ERROR_MISSING_PROPERTY_VALUE
const BUILDER_ERROR_INVALID_VALUE = C.GTK_BUILDER_ERROR_INVALID_VALUE
const BUILDER_ERROR_VERSION_MISMATCH = C.GTK_BUILDER_ERROR_VERSION_MISMATCH
const BUILDER_ERROR_DUPLICATE_ID = C.GTK_BUILDER_ERROR_DUPLICATE_ID
const BUTTONBOX_SPREAD = C.GTK_BUTTONBOX_SPREAD
const BUTTONBOX_EDGE = C.GTK_BUTTONBOX_EDGE
const BUTTONBOX_START = C.GTK_BUTTONBOX_START
const BUTTONBOX_END = C.GTK_BUTTONBOX_END
const BUTTONBOX_CENTER = C.GTK_BUTTONBOX_CENTER
const BUTTONS_NONE = C.GTK_BUTTONS_NONE
const BUTTONS_OK = C.GTK_BUTTONS_OK
const BUTTONS_CLOSE = C.GTK_BUTTONS_CLOSE
const BUTTONS_CANCEL = C.GTK_BUTTONS_CANCEL
const BUTTONS_YES_NO = C.GTK_BUTTONS_YES_NO
const BUTTONS_OK_CANCEL = C.GTK_BUTTONS_OK_CANCEL
const CALENDAR_SHOW_HEADING = C.GTK_CALENDAR_SHOW_HEADING
const CALENDAR_SHOW_DAY_NAMES = C.GTK_CALENDAR_SHOW_DAY_NAMES
const CALENDAR_NO_MONTH_CHANGE = C.GTK_CALENDAR_NO_MONTH_CHANGE
const CALENDAR_SHOW_WEEK_NUMBERS = C.GTK_CALENDAR_SHOW_WEEK_NUMBERS
const CALENDAR_SHOW_DETAILS = C.GTK_CALENDAR_SHOW_DETAILS
const CELL_RENDERER_ACCEL_MODE_GTK = C.GTK_CELL_RENDERER_ACCEL_MODE_GTK
const CELL_RENDERER_ACCEL_MODE_OTHER = C.GTK_CELL_RENDERER_ACCEL_MODE_OTHER
const CELL_RENDERER_MODE_INERT = C.GTK_CELL_RENDERER_MODE_INERT
const CELL_RENDERER_MODE_ACTIVATABLE = C.GTK_CELL_RENDERER_MODE_ACTIVATABLE
const CELL_RENDERER_MODE_EDITABLE = C.GTK_CELL_RENDERER_MODE_EDITABLE
const CELL_RENDERER_SELECTED = C.GTK_CELL_RENDERER_SELECTED
const CELL_RENDERER_PRELIT = C.GTK_CELL_RENDERER_PRELIT
const CELL_RENDERER_INSENSITIVE = C.GTK_CELL_RENDERER_INSENSITIVE
const CELL_RENDERER_SORTED = C.GTK_CELL_RENDERER_SORTED
const CELL_RENDERER_FOCUSED = C.GTK_CELL_RENDERER_FOCUSED
const CELL_RENDERER_EXPANDABLE = C.GTK_CELL_RENDERER_EXPANDABLE
const CELL_RENDERER_EXPANDED = C.GTK_CELL_RENDERER_EXPANDED
const CORNER_TOP_LEFT = C.GTK_CORNER_TOP_LEFT
const CORNER_BOTTOM_LEFT = C.GTK_CORNER_BOTTOM_LEFT
const CORNER_TOP_RIGHT = C.GTK_CORNER_TOP_RIGHT
const CORNER_BOTTOM_RIGHT = C.GTK_CORNER_BOTTOM_RIGHT
const CSS_PROVIDER_ERROR_FAILED = C.GTK_CSS_PROVIDER_ERROR_FAILED
const CSS_PROVIDER_ERROR_SYNTAX = C.GTK_CSS_PROVIDER_ERROR_SYNTAX
const CSS_PROVIDER_ERROR_IMPORT = C.GTK_CSS_PROVIDER_ERROR_IMPORT
const CSS_PROVIDER_ERROR_NAME = C.GTK_CSS_PROVIDER_ERROR_NAME
const CSS_PROVIDER_ERROR_DEPRECATED = C.GTK_CSS_PROVIDER_ERROR_DEPRECATED
const CSS_PROVIDER_ERROR_UNKNOWN_VALUE = C.GTK_CSS_PROVIDER_ERROR_UNKNOWN_VALUE
const CSS_SECTION_DOCUMENT = C.GTK_CSS_SECTION_DOCUMENT
const CSS_SECTION_IMPORT = C.GTK_CSS_SECTION_IMPORT
const CSS_SECTION_COLOR_DEFINITION = C.GTK_CSS_SECTION_COLOR_DEFINITION
const CSS_SECTION_BINDING_SET = C.GTK_CSS_SECTION_BINDING_SET
const CSS_SECTION_RULESET = C.GTK_CSS_SECTION_RULESET
const CSS_SECTION_SELECTOR = C.GTK_CSS_SECTION_SELECTOR
const CSS_SECTION_DECLARATION = C.GTK_CSS_SECTION_DECLARATION
const CSS_SECTION_VALUE = C.GTK_CSS_SECTION_VALUE
const CSS_SECTION_KEYFRAMES = C.GTK_CSS_SECTION_KEYFRAMES
const DEBUG_MISC = C.GTK_DEBUG_MISC
const DEBUG_PLUGSOCKET = C.GTK_DEBUG_PLUGSOCKET
const DEBUG_TEXT = C.GTK_DEBUG_TEXT
const DEBUG_TREE = C.GTK_DEBUG_TREE
const DEBUG_UPDATES = C.GTK_DEBUG_UPDATES
const DEBUG_KEYBINDINGS = C.GTK_DEBUG_KEYBINDINGS
const DEBUG_MULTIHEAD = C.GTK_DEBUG_MULTIHEAD
const DEBUG_MODULES = C.GTK_DEBUG_MODULES
const DEBUG_GEOMETRY = C.GTK_DEBUG_GEOMETRY
const DEBUG_ICONTHEME = C.GTK_DEBUG_ICONTHEME
const DEBUG_PRINTING = C.GTK_DEBUG_PRINTING
const DEBUG_BUILDER = C.GTK_DEBUG_BUILDER
const DEBUG_SIZE_REQUEST = C.GTK_DEBUG_SIZE_REQUEST
const DEBUG_NO_CSS_CACHE = C.GTK_DEBUG_NO_CSS_CACHE
const DELETE_CHARS = C.GTK_DELETE_CHARS
const DELETE_WORD_ENDS = C.GTK_DELETE_WORD_ENDS
const DELETE_WORDS = C.GTK_DELETE_WORDS
const DELETE_DISPLAY_LINES = C.GTK_DELETE_DISPLAY_LINES
const DELETE_DISPLAY_LINE_ENDS = C.GTK_DELETE_DISPLAY_LINE_ENDS
const DELETE_PARAGRAPH_ENDS = C.GTK_DELETE_PARAGRAPH_ENDS
const DELETE_PARAGRAPHS = C.GTK_DELETE_PARAGRAPHS
const DELETE_WHITESPACE = C.GTK_DELETE_WHITESPACE
const DEST_DEFAULT_MOTION = C.GTK_DEST_DEFAULT_MOTION
const DEST_DEFAULT_HIGHLIGHT = C.GTK_DEST_DEFAULT_HIGHLIGHT
const DEST_DEFAULT_DROP = C.GTK_DEST_DEFAULT_DROP
const DEST_DEFAULT_ALL = C.GTK_DEST_DEFAULT_ALL
const DIALOG_MODAL = C.GTK_DIALOG_MODAL
const DIALOG_DESTROY_WITH_PARENT = C.GTK_DIALOG_DESTROY_WITH_PARENT
const DIR_TAB_FORWARD = C.GTK_DIR_TAB_FORWARD
const DIR_TAB_BACKWARD = C.GTK_DIR_TAB_BACKWARD
const DIR_UP = C.GTK_DIR_UP
const DIR_DOWN = C.GTK_DIR_DOWN
const DIR_LEFT = C.GTK_DIR_LEFT
const DIR_RIGHT = C.GTK_DIR_RIGHT
const DRAG_RESULT_SUCCESS = C.GTK_DRAG_RESULT_SUCCESS
const DRAG_RESULT_NO_TARGET = C.GTK_DRAG_RESULT_NO_TARGET
const DRAG_RESULT_USER_CANCELLED = C.GTK_DRAG_RESULT_USER_CANCELLED
const DRAG_RESULT_TIMEOUT_EXPIRED = C.GTK_DRAG_RESULT_TIMEOUT_EXPIRED
const DRAG_RESULT_GRAB_BROKEN = C.GTK_DRAG_RESULT_GRAB_BROKEN
const DRAG_RESULT_ERROR = C.GTK_DRAG_RESULT_ERROR
const ENTRY_ICON_PRIMARY = C.GTK_ENTRY_ICON_PRIMARY
const ENTRY_ICON_SECONDARY = C.GTK_ENTRY_ICON_SECONDARY
const EXPANDER_COLLAPSED = C.GTK_EXPANDER_COLLAPSED
const EXPANDER_SEMI_COLLAPSED = C.GTK_EXPANDER_SEMI_COLLAPSED
const EXPANDER_SEMI_EXPANDED = C.GTK_EXPANDER_SEMI_EXPANDED
const EXPANDER_EXPANDED = C.GTK_EXPANDER_EXPANDED
const FILE_CHOOSER_ACTION_OPEN = C.GTK_FILE_CHOOSER_ACTION_OPEN
const FILE_CHOOSER_ACTION_SAVE = C.GTK_FILE_CHOOSER_ACTION_SAVE
const FILE_CHOOSER_ACTION_SELECT_FOLDER = C.GTK_FILE_CHOOSER_ACTION_SELECT_FOLDER
const FILE_CHOOSER_ACTION_CREATE_FOLDER = C.GTK_FILE_CHOOSER_ACTION_CREATE_FOLDER
const FILE_CHOOSER_CONFIRMATION_CONFIRM = C.GTK_FILE_CHOOSER_CONFIRMATION_CONFIRM
const FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME = C.GTK_FILE_CHOOSER_CONFIRMATION_ACCEPT_FILENAME
const FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN = C.GTK_FILE_CHOOSER_CONFIRMATION_SELECT_AGAIN
const FILE_CHOOSER_ERROR_NONEXISTENT = C.GTK_FILE_CHOOSER_ERROR_NONEXISTENT
const FILE_CHOOSER_ERROR_BAD_FILENAME = C.GTK_FILE_CHOOSER_ERROR_BAD_FILENAME
const FILE_CHOOSER_ERROR_ALREADY_EXISTS = C.GTK_FILE_CHOOSER_ERROR_ALREADY_EXISTS
const FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME = C.GTK_FILE_CHOOSER_ERROR_INCOMPLETE_HOSTNAME
const FILE_FILTER_FILENAME = C.GTK_FILE_FILTER_FILENAME
const FILE_FILTER_URI = C.GTK_FILE_FILTER_URI
const FILE_FILTER_DISPLAY_NAME = C.GTK_FILE_FILTER_DISPLAY_NAME
const FILE_FILTER_MIME_TYPE = C.GTK_FILE_FILTER_MIME_TYPE
const IM_PREEDIT_NOTHING = C.GTK_IM_PREEDIT_NOTHING
const IM_PREEDIT_CALLBACK = C.GTK_IM_PREEDIT_CALLBACK
const IM_PREEDIT_NONE = C.GTK_IM_PREEDIT_NONE
const IM_STATUS_NOTHING = C.GTK_IM_STATUS_NOTHING
const IM_STATUS_CALLBACK = C.GTK_IM_STATUS_CALLBACK
const IM_STATUS_NONE = C.GTK_IM_STATUS_NONE
const ICON_LOOKUP_NO_SVG = C.GTK_ICON_LOOKUP_NO_SVG
const ICON_LOOKUP_FORCE_SVG = C.GTK_ICON_LOOKUP_FORCE_SVG
const ICON_LOOKUP_USE_BUILTIN = C.GTK_ICON_LOOKUP_USE_BUILTIN
const ICON_LOOKUP_GENERIC_FALLBACK = C.GTK_ICON_LOOKUP_GENERIC_FALLBACK
const ICON_LOOKUP_FORCE_SIZE = C.GTK_ICON_LOOKUP_FORCE_SIZE
const ICON_SIZE_INVALID = C.GTK_ICON_SIZE_INVALID
const ICON_SIZE_MENU = C.GTK_ICON_SIZE_MENU
const ICON_SIZE_SMALL_TOOLBAR = C.GTK_ICON_SIZE_SMALL_TOOLBAR
const ICON_SIZE_LARGE_TOOLBAR = C.GTK_ICON_SIZE_LARGE_TOOLBAR
const ICON_SIZE_BUTTON = C.GTK_ICON_SIZE_BUTTON
const ICON_SIZE_DND = C.GTK_ICON_SIZE_DND
const ICON_SIZE_DIALOG = C.GTK_ICON_SIZE_DIALOG
const ICON_THEME_NOT_FOUND = C.GTK_ICON_THEME_NOT_FOUND
const ICON_THEME_FAILED = C.GTK_ICON_THEME_FAILED
const ICON_VIEW_NO_DROP = C.GTK_ICON_VIEW_NO_DROP
const ICON_VIEW_DROP_INTO = C.GTK_ICON_VIEW_DROP_INTO
const ICON_VIEW_DROP_LEFT = C.GTK_ICON_VIEW_DROP_LEFT
const ICON_VIEW_DROP_RIGHT = C.GTK_ICON_VIEW_DROP_RIGHT
const ICON_VIEW_DROP_ABOVE = C.GTK_ICON_VIEW_DROP_ABOVE
const ICON_VIEW_DROP_BELOW = C.GTK_ICON_VIEW_DROP_BELOW
const IMAGE_EMPTY = C.GTK_IMAGE_EMPTY
const IMAGE_PIXBUF = C.GTK_IMAGE_PIXBUF
const IMAGE_STOCK = C.GTK_IMAGE_STOCK
const IMAGE_ICON_SET = C.GTK_IMAGE_ICON_SET
const IMAGE_ANIMATION = C.GTK_IMAGE_ANIMATION
const IMAGE_ICON_NAME = C.GTK_IMAGE_ICON_NAME
const IMAGE_GICON = C.GTK_IMAGE_GICON
const INPUT_HINT_NONE = C.GTK_INPUT_HINT_NONE
const INPUT_HINT_SPELLCHECK = C.GTK_INPUT_HINT_SPELLCHECK
const INPUT_HINT_NO_SPELLCHECK = C.GTK_INPUT_HINT_NO_SPELLCHECK
const INPUT_HINT_WORD_COMPLETION = C.GTK_INPUT_HINT_WORD_COMPLETION
const INPUT_HINT_LOWERCASE = C.GTK_INPUT_HINT_LOWERCASE
const INPUT_HINT_UPPERCASE_CHARS = C.GTK_INPUT_HINT_UPPERCASE_CHARS
const INPUT_HINT_UPPERCASE_WORDS = C.GTK_INPUT_HINT_UPPERCASE_WORDS
const INPUT_HINT_UPPERCASE_SENTENCES = C.GTK_INPUT_HINT_UPPERCASE_SENTENCES
const INPUT_HINT_INHIBIT_OSK = C.GTK_INPUT_HINT_INHIBIT_OSK
const INPUT_PURPOSE_FREE_FORM = C.GTK_INPUT_PURPOSE_FREE_FORM
const INPUT_PURPOSE_ALPHA = C.GTK_INPUT_PURPOSE_ALPHA
const INPUT_PURPOSE_DIGITS = C.GTK_INPUT_PURPOSE_DIGITS
const INPUT_PURPOSE_NUMBER = C.GTK_INPUT_PURPOSE_NUMBER
const INPUT_PURPOSE_PHONE = C.GTK_INPUT_PURPOSE_PHONE
const INPUT_PURPOSE_URL = C.GTK_INPUT_PURPOSE_URL
const INPUT_PURPOSE_EMAIL = C.GTK_INPUT_PURPOSE_EMAIL
const INPUT_PURPOSE_NAME = C.GTK_INPUT_PURPOSE_NAME
const INPUT_PURPOSE_PASSWORD = C.GTK_INPUT_PURPOSE_PASSWORD
const INPUT_PURPOSE_PIN = C.GTK_INPUT_PURPOSE_PIN
const JUNCTION_NONE = C.GTK_JUNCTION_NONE
const JUNCTION_CORNER_TOPLEFT = C.GTK_JUNCTION_CORNER_TOPLEFT
const JUNCTION_CORNER_TOPRIGHT = C.GTK_JUNCTION_CORNER_TOPRIGHT
const JUNCTION_CORNER_BOTTOMLEFT = C.GTK_JUNCTION_CORNER_BOTTOMLEFT
const JUNCTION_CORNER_BOTTOMRIGHT = C.GTK_JUNCTION_CORNER_BOTTOMRIGHT
const JUNCTION_TOP = C.GTK_JUNCTION_TOP
const JUNCTION_BOTTOM = C.GTK_JUNCTION_BOTTOM
const JUNCTION_LEFT = C.GTK_JUNCTION_LEFT
const JUNCTION_RIGHT = C.GTK_JUNCTION_RIGHT
const JUSTIFY_LEFT = C.GTK_JUSTIFY_LEFT
const JUSTIFY_RIGHT = C.GTK_JUSTIFY_RIGHT
const JUSTIFY_CENTER = C.GTK_JUSTIFY_CENTER
const JUSTIFY_FILL = C.GTK_JUSTIFY_FILL
const LEVEL_BAR_MODE_CONTINUOUS = C.GTK_LEVEL_BAR_MODE_CONTINUOUS
const LEVEL_BAR_MODE_DISCRETE = C.GTK_LEVEL_BAR_MODE_DISCRETE
const LICENSE_UNKNOWN = C.GTK_LICENSE_UNKNOWN
const LICENSE_CUSTOM = C.GTK_LICENSE_CUSTOM
const LICENSE_GPL_2_0 = C.GTK_LICENSE_GPL_2_0
const LICENSE_GPL_3_0 = C.GTK_LICENSE_GPL_3_0
const LICENSE_LGPL_2_1 = C.GTK_LICENSE_LGPL_2_1
const LICENSE_LGPL_3_0 = C.GTK_LICENSE_LGPL_3_0
const LICENSE_BSD = C.GTK_LICENSE_BSD
const LICENSE_MIT_X11 = C.GTK_LICENSE_MIT_X11
const LICENSE_ARTISTIC = C.GTK_LICENSE_ARTISTIC
const MENU_DIR_PARENT = C.GTK_MENU_DIR_PARENT
const MENU_DIR_CHILD = C.GTK_MENU_DIR_CHILD
const MENU_DIR_NEXT = C.GTK_MENU_DIR_NEXT
const MENU_DIR_PREV = C.GTK_MENU_DIR_PREV
const MESSAGE_INFO = C.GTK_MESSAGE_INFO
const MESSAGE_WARNING = C.GTK_MESSAGE_WARNING
const MESSAGE_QUESTION = C.GTK_MESSAGE_QUESTION
const MESSAGE_ERROR = C.GTK_MESSAGE_ERROR
const MESSAGE_OTHER = C.GTK_MESSAGE_OTHER
const MOVEMENT_LOGICAL_POSITIONS = C.GTK_MOVEMENT_LOGICAL_POSITIONS
const MOVEMENT_VISUAL_POSITIONS = C.GTK_MOVEMENT_VISUAL_POSITIONS
const MOVEMENT_WORDS = C.GTK_MOVEMENT_WORDS
const MOVEMENT_DISPLAY_LINES = C.GTK_MOVEMENT_DISPLAY_LINES
const MOVEMENT_DISPLAY_LINE_ENDS = C.GTK_MOVEMENT_DISPLAY_LINE_ENDS
const MOVEMENT_PARAGRAPHS = C.GTK_MOVEMENT_PARAGRAPHS
const MOVEMENT_PARAGRAPH_ENDS = C.GTK_MOVEMENT_PARAGRAPH_ENDS
const MOVEMENT_PAGES = C.GTK_MOVEMENT_PAGES
const MOVEMENT_BUFFER_ENDS = C.GTK_MOVEMENT_BUFFER_ENDS
const MOVEMENT_HORIZONTAL_PAGES = C.GTK_MOVEMENT_HORIZONTAL_PAGES
const NOTEBOOK_TAB_FIRST = C.GTK_NOTEBOOK_TAB_FIRST
const NOTEBOOK_TAB_LAST = C.GTK_NOTEBOOK_TAB_LAST
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM
const NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP = C.GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT
const NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT = C.GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT
const ORIENTATION_HORIZONTAL = C.GTK_ORIENTATION_HORIZONTAL
const ORIENTATION_VERTICAL = C.GTK_ORIENTATION_VERTICAL
const PACK_DIRECTION_LTR = C.GTK_PACK_DIRECTION_LTR
const PACK_DIRECTION_RTL = C.GTK_PACK_DIRECTION_RTL
const PACK_DIRECTION_TTB = C.GTK_PACK_DIRECTION_TTB
const PACK_DIRECTION_BTT = C.GTK_PACK_DIRECTION_BTT
const PACK_START = C.GTK_PACK_START
const PACK_END = C.GTK_PACK_END
const PAGE_ORIENTATION_PORTRAIT = C.GTK_PAGE_ORIENTATION_PORTRAIT
const PAGE_ORIENTATION_LANDSCAPE = C.GTK_PAGE_ORIENTATION_LANDSCAPE
const PAGE_ORIENTATION_REVERSE_PORTRAIT = C.GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT
const PAGE_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE
const PAGE_SET_ALL = C.GTK_PAGE_SET_ALL
const PAGE_SET_EVEN = C.GTK_PAGE_SET_EVEN
const PAGE_SET_ODD = C.GTK_PAGE_SET_ODD
const PATH_PRIO_LOWEST = C.GTK_PATH_PRIO_LOWEST
const PATH_PRIO_GTK = C.GTK_PATH_PRIO_GTK
const PATH_PRIO_APPLICATION = C.GTK_PATH_PRIO_APPLICATION
const PATH_PRIO_THEME = C.GTK_PATH_PRIO_THEME
const PATH_PRIO_RC = C.GTK_PATH_PRIO_RC
const PATH_PRIO_HIGHEST = C.GTK_PATH_PRIO_HIGHEST
const PATH_WIDGET = C.GTK_PATH_WIDGET
const PATH_WIDGET_CLASS = C.GTK_PATH_WIDGET_CLASS
const PATH_CLASS = C.GTK_PATH_CLASS
const POLICY_ALWAYS = C.GTK_POLICY_ALWAYS
const POLICY_AUTOMATIC = C.GTK_POLICY_AUTOMATIC
const POLICY_NEVER = C.GTK_POLICY_NEVER
const POS_LEFT = C.GTK_POS_LEFT
const POS_RIGHT = C.GTK_POS_RIGHT
const POS_TOP = C.GTK_POS_TOP
const POS_BOTTOM = C.GTK_POS_BOTTOM
const PRINT_DUPLEX_SIMPLEX = C.GTK_PRINT_DUPLEX_SIMPLEX
const PRINT_DUPLEX_HORIZONTAL = C.GTK_PRINT_DUPLEX_HORIZONTAL
const PRINT_DUPLEX_VERTICAL = C.GTK_PRINT_DUPLEX_VERTICAL
const PRINT_ERROR_GENERAL = C.GTK_PRINT_ERROR_GENERAL
const PRINT_ERROR_INTERNAL_ERROR = C.GTK_PRINT_ERROR_INTERNAL_ERROR
const PRINT_ERROR_NOMEM = C.GTK_PRINT_ERROR_NOMEM
const PRINT_ERROR_INVALID_FILE = C.GTK_PRINT_ERROR_INVALID_FILE
const PRINT_OPERATION_ACTION_PRINT_DIALOG = C.GTK_PRINT_OPERATION_ACTION_PRINT_DIALOG
const PRINT_OPERATION_ACTION_PRINT = C.GTK_PRINT_OPERATION_ACTION_PRINT
const PRINT_OPERATION_ACTION_PREVIEW = C.GTK_PRINT_OPERATION_ACTION_PREVIEW
const PRINT_OPERATION_ACTION_EXPORT = C.GTK_PRINT_OPERATION_ACTION_EXPORT
const PRINT_OPERATION_RESULT_ERROR = C.GTK_PRINT_OPERATION_RESULT_ERROR
const PRINT_OPERATION_RESULT_APPLY = C.GTK_PRINT_OPERATION_RESULT_APPLY
const PRINT_OPERATION_RESULT_CANCEL = C.GTK_PRINT_OPERATION_RESULT_CANCEL
const PRINT_OPERATION_RESULT_IN_PROGRESS = C.GTK_PRINT_OPERATION_RESULT_IN_PROGRESS
const PRINT_PAGES_ALL = C.GTK_PRINT_PAGES_ALL
const PRINT_PAGES_CURRENT = C.GTK_PRINT_PAGES_CURRENT
const PRINT_PAGES_RANGES = C.GTK_PRINT_PAGES_RANGES
const PRINT_PAGES_SELECTION = C.GTK_PRINT_PAGES_SELECTION
const PRINT_QUALITY_LOW = C.GTK_PRINT_QUALITY_LOW
const PRINT_QUALITY_NORMAL = C.GTK_PRINT_QUALITY_NORMAL
const PRINT_QUALITY_HIGH = C.GTK_PRINT_QUALITY_HIGH
const PRINT_QUALITY_DRAFT = C.GTK_PRINT_QUALITY_DRAFT
const PRINT_STATUS_INITIAL = C.GTK_PRINT_STATUS_INITIAL
const PRINT_STATUS_PREPARING = C.GTK_PRINT_STATUS_PREPARING
const PRINT_STATUS_GENERATING_DATA = C.GTK_PRINT_STATUS_GENERATING_DATA
const PRINT_STATUS_SENDING_DATA = C.GTK_PRINT_STATUS_SENDING_DATA
const PRINT_STATUS_PENDING = C.GTK_PRINT_STATUS_PENDING
const PRINT_STATUS_PENDING_ISSUE = C.GTK_PRINT_STATUS_PENDING_ISSUE
const PRINT_STATUS_PRINTING = C.GTK_PRINT_STATUS_PRINTING
const PRINT_STATUS_FINISHED = C.GTK_PRINT_STATUS_FINISHED
const PRINT_STATUS_FINISHED_ABORTED = C.GTK_PRINT_STATUS_FINISHED_ABORTED
const RC_FG = C.GTK_RC_FG
const RC_BG = C.GTK_RC_BG
const RC_TEXT = C.GTK_RC_TEXT
const RC_BASE = C.GTK_RC_BASE
const RC_TOKEN_INVALID = C.GTK_RC_TOKEN_INVALID
const RC_TOKEN_INCLUDE = C.GTK_RC_TOKEN_INCLUDE
const RC_TOKEN_NORMAL = C.GTK_RC_TOKEN_NORMAL
const RC_TOKEN_ACTIVE = C.GTK_RC_TOKEN_ACTIVE
const RC_TOKEN_PRELIGHT = C.GTK_RC_TOKEN_PRELIGHT
const RC_TOKEN_SELECTED = C.GTK_RC_TOKEN_SELECTED
const RC_TOKEN_INSENSITIVE = C.GTK_RC_TOKEN_INSENSITIVE
const RC_TOKEN_FG = C.GTK_RC_TOKEN_FG
const RC_TOKEN_BG = C.GTK_RC_TOKEN_BG
const RC_TOKEN_TEXT = C.GTK_RC_TOKEN_TEXT
const RC_TOKEN_BASE = C.GTK_RC_TOKEN_BASE
const RC_TOKEN_XTHICKNESS = C.GTK_RC_TOKEN_XTHICKNESS
const RC_TOKEN_YTHICKNESS = C.GTK_RC_TOKEN_YTHICKNESS
const RC_TOKEN_FONT = C.GTK_RC_TOKEN_FONT
const RC_TOKEN_FONTSET = C.GTK_RC_TOKEN_FONTSET
const RC_TOKEN_FONT_NAME = C.GTK_RC_TOKEN_FONT_NAME
const RC_TOKEN_BG_PIXMAP = C.GTK_RC_TOKEN_BG_PIXMAP
const RC_TOKEN_PIXMAP_PATH = C.GTK_RC_TOKEN_PIXMAP_PATH
const RC_TOKEN_STYLE = C.GTK_RC_TOKEN_STYLE
const RC_TOKEN_BINDING = C.GTK_RC_TOKEN_BINDING
const RC_TOKEN_BIND = C.GTK_RC_TOKEN_BIND
const RC_TOKEN_WIDGET = C.GTK_RC_TOKEN_WIDGET
const RC_TOKEN_WIDGET_CLASS = C.GTK_RC_TOKEN_WIDGET_CLASS
const RC_TOKEN_CLASS = C.GTK_RC_TOKEN_CLASS
const RC_TOKEN_LOWEST = C.GTK_RC_TOKEN_LOWEST
const RC_TOKEN_GTK = C.GTK_RC_TOKEN_GTK
const RC_TOKEN_APPLICATION = C.GTK_RC_TOKEN_APPLICATION
const RC_TOKEN_THEME = C.GTK_RC_TOKEN_THEME
const RC_TOKEN_RC = C.GTK_RC_TOKEN_RC
const RC_TOKEN_HIGHEST = C.GTK_RC_TOKEN_HIGHEST
const RC_TOKEN_ENGINE = C.GTK_RC_TOKEN_ENGINE
const RC_TOKEN_MODULE_PATH = C.GTK_RC_TOKEN_MODULE_PATH
const RC_TOKEN_IM_MODULE_PATH = C.GTK_RC_TOKEN_IM_MODULE_PATH
const RC_TOKEN_IM_MODULE_FILE = C.GTK_RC_TOKEN_IM_MODULE_FILE
const RC_TOKEN_STOCK = C.GTK_RC_TOKEN_STOCK
const RC_TOKEN_LTR = C.GTK_RC_TOKEN_LTR
const RC_TOKEN_RTL = C.GTK_RC_TOKEN_RTL
const RC_TOKEN_COLOR = C.GTK_RC_TOKEN_COLOR
const RC_TOKEN_UNBIND = C.GTK_RC_TOKEN_UNBIND
const RC_TOKEN_LAST = C.GTK_RC_TOKEN_LAST
const RECENT_CHOOSER_ERROR_NOT_FOUND = C.GTK_RECENT_CHOOSER_ERROR_NOT_FOUND
const RECENT_CHOOSER_ERROR_INVALID_URI = C.GTK_RECENT_CHOOSER_ERROR_INVALID_URI
const RECENT_FILTER_URI = C.GTK_RECENT_FILTER_URI
const RECENT_FILTER_DISPLAY_NAME = C.GTK_RECENT_FILTER_DISPLAY_NAME
const RECENT_FILTER_MIME_TYPE = C.GTK_RECENT_FILTER_MIME_TYPE
const RECENT_FILTER_APPLICATION = C.GTK_RECENT_FILTER_APPLICATION
const RECENT_FILTER_GROUP = C.GTK_RECENT_FILTER_GROUP
const RECENT_FILTER_AGE = C.GTK_RECENT_FILTER_AGE
const RECENT_MANAGER_ERROR_NOT_FOUND = C.GTK_RECENT_MANAGER_ERROR_NOT_FOUND
const RECENT_MANAGER_ERROR_INVALID_URI = C.GTK_RECENT_MANAGER_ERROR_INVALID_URI
const RECENT_MANAGER_ERROR_INVALID_ENCODING = C.GTK_RECENT_MANAGER_ERROR_INVALID_ENCODING
const RECENT_MANAGER_ERROR_NOT_REGISTERED = C.GTK_RECENT_MANAGER_ERROR_NOT_REGISTERED
const RECENT_MANAGER_ERROR_READ = C.GTK_RECENT_MANAGER_ERROR_READ
const RECENT_MANAGER_ERROR_WRITE = C.GTK_RECENT_MANAGER_ERROR_WRITE
const RECENT_MANAGER_ERROR_UNKNOWN = C.GTK_RECENT_MANAGER_ERROR_UNKNOWN
const RECENT_SORT_NONE = C.GTK_RECENT_SORT_NONE
const RECENT_SORT_MRU = C.GTK_RECENT_SORT_MRU
const RECENT_SORT_LRU = C.GTK_RECENT_SORT_LRU
const RECENT_SORT_CUSTOM = C.GTK_RECENT_SORT_CUSTOM
const REGION_EVEN = C.GTK_REGION_EVEN
const REGION_ODD = C.GTK_REGION_ODD
const REGION_FIRST = C.GTK_REGION_FIRST
const REGION_LAST = C.GTK_REGION_LAST
const REGION_ONLY = C.GTK_REGION_ONLY
const REGION_SORTED = C.GTK_REGION_SORTED
const RELIEF_NORMAL = C.GTK_RELIEF_NORMAL
const RELIEF_HALF = C.GTK_RELIEF_HALF
const RELIEF_NONE = C.GTK_RELIEF_NONE
const RESIZE_PARENT = C.GTK_RESIZE_PARENT
const RESIZE_QUEUE = C.GTK_RESIZE_QUEUE
const RESIZE_IMMEDIATE = C.GTK_RESIZE_IMMEDIATE
const RESPONSE_NONE = C.GTK_RESPONSE_NONE
const RESPONSE_REJECT = C.GTK_RESPONSE_REJECT
const RESPONSE_ACCEPT = C.GTK_RESPONSE_ACCEPT
const RESPONSE_DELETE_EVENT = C.GTK_RESPONSE_DELETE_EVENT
const RESPONSE_OK = C.GTK_RESPONSE_OK
const RESPONSE_CANCEL = C.GTK_RESPONSE_CANCEL
const RESPONSE_CLOSE = C.GTK_RESPONSE_CLOSE
const RESPONSE_YES = C.GTK_RESPONSE_YES
const RESPONSE_NO = C.GTK_RESPONSE_NO
const RESPONSE_APPLY = C.GTK_RESPONSE_APPLY
const RESPONSE_HELP = C.GTK_RESPONSE_HELP
const SCROLL_STEPS = C.GTK_SCROLL_STEPS
const SCROLL_PAGES = C.GTK_SCROLL_PAGES
const SCROLL_ENDS = C.GTK_SCROLL_ENDS
const SCROLL_HORIZONTAL_STEPS = C.GTK_SCROLL_HORIZONTAL_STEPS
const SCROLL_HORIZONTAL_PAGES = C.GTK_SCROLL_HORIZONTAL_PAGES
const SCROLL_HORIZONTAL_ENDS = C.GTK_SCROLL_HORIZONTAL_ENDS
const SCROLL_NONE = C.GTK_SCROLL_NONE
const SCROLL_JUMP = C.GTK_SCROLL_JUMP
const SCROLL_STEP_BACKWARD = C.GTK_SCROLL_STEP_BACKWARD
const SCROLL_STEP_FORWARD = C.GTK_SCROLL_STEP_FORWARD
const SCROLL_PAGE_BACKWARD = C.GTK_SCROLL_PAGE_BACKWARD
const SCROLL_PAGE_FORWARD = C.GTK_SCROLL_PAGE_FORWARD
const SCROLL_STEP_UP = C.GTK_SCROLL_STEP_UP
const SCROLL_STEP_DOWN = C.GTK_SCROLL_STEP_DOWN
const SCROLL_PAGE_UP = C.GTK_SCROLL_PAGE_UP
const SCROLL_PAGE_DOWN = C.GTK_SCROLL_PAGE_DOWN
const SCROLL_STEP_LEFT = C.GTK_SCROLL_STEP_LEFT
const SCROLL_STEP_RIGHT = C.GTK_SCROLL_STEP_RIGHT
const SCROLL_PAGE_LEFT = C.GTK_SCROLL_PAGE_LEFT
const SCROLL_PAGE_RIGHT = C.GTK_SCROLL_PAGE_RIGHT
const SCROLL_START = C.GTK_SCROLL_START
const SCROLL_END = C.GTK_SCROLL_END
const SCROLL_MINIMUM = C.GTK_SCROLL_MINIMUM
const SCROLL_NATURAL = C.GTK_SCROLL_NATURAL
const SELECTION_NONE = C.GTK_SELECTION_NONE
const SELECTION_SINGLE = C.GTK_SELECTION_SINGLE
const SELECTION_BROWSE = C.GTK_SELECTION_BROWSE
const SELECTION_MULTIPLE = C.GTK_SELECTION_MULTIPLE
const SENSITIVITY_AUTO = C.GTK_SENSITIVITY_AUTO
const SENSITIVITY_ON = C.GTK_SENSITIVITY_ON
const SENSITIVITY_OFF = C.GTK_SENSITIVITY_OFF
const SHADOW_NONE = C.GTK_SHADOW_NONE
const SHADOW_IN = C.GTK_SHADOW_IN
const SHADOW_OUT = C.GTK_SHADOW_OUT
const SHADOW_ETCHED_IN = C.GTK_SHADOW_ETCHED_IN
const SHADOW_ETCHED_OUT = C.GTK_SHADOW_ETCHED_OUT
const SIZE_GROUP_NONE = C.GTK_SIZE_GROUP_NONE
const SIZE_GROUP_HORIZONTAL = C.GTK_SIZE_GROUP_HORIZONTAL
const SIZE_GROUP_VERTICAL = C.GTK_SIZE_GROUP_VERTICAL
const SIZE_GROUP_BOTH = C.GTK_SIZE_GROUP_BOTH
const SIZE_REQUEST_HEIGHT_FOR_WIDTH = C.GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH
const SIZE_REQUEST_WIDTH_FOR_HEIGHT = C.GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT
const SIZE_REQUEST_CONSTANT_SIZE = C.GTK_SIZE_REQUEST_CONSTANT_SIZE
const SORT_ASCENDING = C.GTK_SORT_ASCENDING
const SORT_DESCENDING = C.GTK_SORT_DESCENDING
const UPDATE_ALWAYS = C.GTK_UPDATE_ALWAYS
const UPDATE_IF_VALID = C.GTK_UPDATE_IF_VALID
const SPIN_STEP_FORWARD = C.GTK_SPIN_STEP_FORWARD
const SPIN_STEP_BACKWARD = C.GTK_SPIN_STEP_BACKWARD
const SPIN_PAGE_FORWARD = C.GTK_SPIN_PAGE_FORWARD
const SPIN_PAGE_BACKWARD = C.GTK_SPIN_PAGE_BACKWARD
const SPIN_HOME = C.GTK_SPIN_HOME
const SPIN_END = C.GTK_SPIN_END
const SPIN_USER_DEFINED = C.GTK_SPIN_USER_DEFINED
const STATE_FLAG_NORMAL = C.GTK_STATE_FLAG_NORMAL
const STATE_FLAG_ACTIVE = C.GTK_STATE_FLAG_ACTIVE
const STATE_FLAG_PRELIGHT = C.GTK_STATE_FLAG_PRELIGHT
const STATE_FLAG_SELECTED = C.GTK_STATE_FLAG_SELECTED
const STATE_FLAG_INSENSITIVE = C.GTK_STATE_FLAG_INSENSITIVE
const STATE_FLAG_INCONSISTENT = C.GTK_STATE_FLAG_INCONSISTENT
const STATE_FLAG_FOCUSED = C.GTK_STATE_FLAG_FOCUSED
const STATE_FLAG_BACKDROP = C.GTK_STATE_FLAG_BACKDROP
const STATE_NORMAL = C.GTK_STATE_NORMAL
const STATE_ACTIVE = C.GTK_STATE_ACTIVE
const STATE_PRELIGHT = C.GTK_STATE_PRELIGHT
const STATE_SELECTED = C.GTK_STATE_SELECTED
const STATE_INSENSITIVE = C.GTK_STATE_INSENSITIVE
const STATE_INCONSISTENT = C.GTK_STATE_INCONSISTENT
const STATE_FOCUSED = C.GTK_STATE_FOCUSED
const TARGET_SAME_APP = C.GTK_TARGET_SAME_APP
const TARGET_SAME_WIDGET = C.GTK_TARGET_SAME_WIDGET
const TARGET_OTHER_APP = C.GTK_TARGET_OTHER_APP
const TARGET_OTHER_WIDGET = C.GTK_TARGET_OTHER_WIDGET
const TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS = C.GTK_TEXT_BUFFER_TARGET_INFO_BUFFER_CONTENTS
const TEXT_BUFFER_TARGET_INFO_RICH_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_RICH_TEXT
const TEXT_BUFFER_TARGET_INFO_TEXT = C.GTK_TEXT_BUFFER_TARGET_INFO_TEXT
const TEXT_DIR_NONE = C.GTK_TEXT_DIR_NONE
const TEXT_DIR_LTR = C.GTK_TEXT_DIR_LTR
const TEXT_DIR_RTL = C.GTK_TEXT_DIR_RTL
const TEXT_SEARCH_VISIBLE_ONLY = C.GTK_TEXT_SEARCH_VISIBLE_ONLY
const TEXT_SEARCH_TEXT_ONLY = C.GTK_TEXT_SEARCH_TEXT_ONLY
const TEXT_SEARCH_CASE_INSENSITIVE = C.GTK_TEXT_SEARCH_CASE_INSENSITIVE
const TEXT_WINDOW_PRIVATE = C.GTK_TEXT_WINDOW_PRIVATE
const TEXT_WINDOW_WIDGET = C.GTK_TEXT_WINDOW_WIDGET
const TEXT_WINDOW_TEXT = C.GTK_TEXT_WINDOW_TEXT
const TEXT_WINDOW_LEFT = C.GTK_TEXT_WINDOW_LEFT
const TEXT_WINDOW_RIGHT = C.GTK_TEXT_WINDOW_RIGHT
const TEXT_WINDOW_TOP = C.GTK_TEXT_WINDOW_TOP
const TEXT_WINDOW_BOTTOM = C.GTK_TEXT_WINDOW_BOTTOM
const TOOL_PALETTE_DRAG_ITEMS = C.GTK_TOOL_PALETTE_DRAG_ITEMS
const TOOL_PALETTE_DRAG_GROUPS = C.GTK_TOOL_PALETTE_DRAG_GROUPS
const TOOLBAR_SPACE_EMPTY = C.GTK_TOOLBAR_SPACE_EMPTY
const TOOLBAR_SPACE_LINE = C.GTK_TOOLBAR_SPACE_LINE
const TOOLBAR_ICONS = C.GTK_TOOLBAR_ICONS
const TOOLBAR_TEXT = C.GTK_TOOLBAR_TEXT
const TOOLBAR_BOTH = C.GTK_TOOLBAR_BOTH
const TOOLBAR_BOTH_HORIZ = C.GTK_TOOLBAR_BOTH_HORIZ
const TREE_MODEL_ITERS_PERSIST = C.GTK_TREE_MODEL_ITERS_PERSIST
const TREE_MODEL_LIST_ONLY = C.GTK_TREE_MODEL_LIST_ONLY
const TREE_VIEW_COLUMN_GROW_ONLY = C.GTK_TREE_VIEW_COLUMN_GROW_ONLY
const TREE_VIEW_COLUMN_AUTOSIZE = C.GTK_TREE_VIEW_COLUMN_AUTOSIZE
const TREE_VIEW_COLUMN_FIXED = C.GTK_TREE_VIEW_COLUMN_FIXED
const TREE_VIEW_DROP_BEFORE = C.GTK_TREE_VIEW_DROP_BEFORE
const TREE_VIEW_DROP_AFTER = C.GTK_TREE_VIEW_DROP_AFTER
const TREE_VIEW_DROP_INTO_OR_BEFORE = C.GTK_TREE_VIEW_DROP_INTO_OR_BEFORE
const TREE_VIEW_DROP_INTO_OR_AFTER = C.GTK_TREE_VIEW_DROP_INTO_OR_AFTER
const TREE_VIEW_GRID_LINES_NONE = C.GTK_TREE_VIEW_GRID_LINES_NONE
const TREE_VIEW_GRID_LINES_HORIZONTAL = C.GTK_TREE_VIEW_GRID_LINES_HORIZONTAL
const TREE_VIEW_GRID_LINES_VERTICAL = C.GTK_TREE_VIEW_GRID_LINES_VERTICAL
const TREE_VIEW_GRID_LINES_BOTH = C.GTK_TREE_VIEW_GRID_LINES_BOTH
const UI_MANAGER_AUTO = C.GTK_UI_MANAGER_AUTO
const UI_MANAGER_MENUBAR = C.GTK_UI_MANAGER_MENUBAR
const UI_MANAGER_MENU = C.GTK_UI_MANAGER_MENU
const UI_MANAGER_TOOLBAR = C.GTK_UI_MANAGER_TOOLBAR
const UI_MANAGER_PLACEHOLDER = C.GTK_UI_MANAGER_PLACEHOLDER
const UI_MANAGER_POPUP = C.GTK_UI_MANAGER_POPUP
const UI_MANAGER_MENUITEM = C.GTK_UI_MANAGER_MENUITEM
const UI_MANAGER_TOOLITEM = C.GTK_UI_MANAGER_TOOLITEM
const UI_MANAGER_SEPARATOR = C.GTK_UI_MANAGER_SEPARATOR
const UI_MANAGER_ACCELERATOR = C.GTK_UI_MANAGER_ACCELERATOR
const UI_MANAGER_POPUP_WITH_ACCELS = C.GTK_UI_MANAGER_POPUP_WITH_ACCELS
const UNIT_NONE = C.GTK_UNIT_NONE
const UNIT_POINTS = C.GTK_UNIT_POINTS
const UNIT_INCH = C.GTK_UNIT_INCH
const UNIT_MM = C.GTK_UNIT_MM
const WIDGET_HELP_TOOLTIP = C.GTK_WIDGET_HELP_TOOLTIP
const WIDGET_HELP_WHATS_THIS = C.GTK_WIDGET_HELP_WHATS_THIS
const WIN_POS_NONE = C.GTK_WIN_POS_NONE
const WIN_POS_CENTER = C.GTK_WIN_POS_CENTER
const WIN_POS_MOUSE = C.GTK_WIN_POS_MOUSE
const WIN_POS_CENTER_ALWAYS = C.GTK_WIN_POS_CENTER_ALWAYS
const WIN_POS_CENTER_ON_PARENT = C.GTK_WIN_POS_CENTER_ON_PARENT
const WINDOW_TOPLEVEL = C.GTK_WINDOW_TOPLEVEL
const WINDOW_POPUP = C.GTK_WINDOW_POPUP
const WRAP_NONE = C.GTK_WRAP_NONE
const WRAP_CHAR = C.GTK_WRAP_CHAR
const WRAP_WORD = C.GTK_WRAP_WORD
const WRAP_WORD_CHAR = C.GTK_WRAP_WORD_CHAR
const BINARY_AGE = C.GTK_BINARY_AGE
const INPUT_ERROR = C.GTK_INPUT_ERROR
const INTERFACE_AGE = C.GTK_INTERFACE_AGE
const LEVEL_BAR_OFFSET_HIGH = C.GTK_LEVEL_BAR_OFFSET_HIGH
const LEVEL_BAR_OFFSET_LOW = C.GTK_LEVEL_BAR_OFFSET_LOW
const MAJOR_VERSION = C.GTK_MAJOR_VERSION
const MAX_COMPOSE_LEN = C.GTK_MAX_COMPOSE_LEN
const MICRO_VERSION = C.GTK_MICRO_VERSION
const MINOR_VERSION = C.GTK_MINOR_VERSION
const PAPER_NAME_A3 = C.GTK_PAPER_NAME_A3
const PAPER_NAME_A4 = C.GTK_PAPER_NAME_A4
const PAPER_NAME_A5 = C.GTK_PAPER_NAME_A5
const PAPER_NAME_B5 = C.GTK_PAPER_NAME_B5
const PAPER_NAME_EXECUTIVE = C.GTK_PAPER_NAME_EXECUTIVE
const PAPER_NAME_LEGAL = C.GTK_PAPER_NAME_LEGAL
const PAPER_NAME_LETTER = C.GTK_PAPER_NAME_LETTER
const PATH_PRIO_MASK = C.GTK_PATH_PRIO_MASK
const PRINT_SETTINGS_COLLATE = C.GTK_PRINT_SETTINGS_COLLATE
const PRINT_SETTINGS_DEFAULT_SOURCE = C.GTK_PRINT_SETTINGS_DEFAULT_SOURCE
const PRINT_SETTINGS_DITHER = C.GTK_PRINT_SETTINGS_DITHER
const PRINT_SETTINGS_DUPLEX = C.GTK_PRINT_SETTINGS_DUPLEX
const PRINT_SETTINGS_FINISHINGS = C.GTK_PRINT_SETTINGS_FINISHINGS
const PRINT_SETTINGS_MEDIA_TYPE = C.GTK_PRINT_SETTINGS_MEDIA_TYPE
const PRINT_SETTINGS_NUMBER_UP = C.GTK_PRINT_SETTINGS_NUMBER_UP
const PRINT_SETTINGS_NUMBER_UP_LAYOUT = C.GTK_PRINT_SETTINGS_NUMBER_UP_LAYOUT
const PRINT_SETTINGS_N_COPIES = C.GTK_PRINT_SETTINGS_N_COPIES
const PRINT_SETTINGS_ORIENTATION = C.GTK_PRINT_SETTINGS_ORIENTATION
const PRINT_SETTINGS_OUTPUT_BASENAME = C.GTK_PRINT_SETTINGS_OUTPUT_BASENAME
const PRINT_SETTINGS_OUTPUT_BIN = C.GTK_PRINT_SETTINGS_OUTPUT_BIN
const PRINT_SETTINGS_OUTPUT_DIR = C.GTK_PRINT_SETTINGS_OUTPUT_DIR
const PRINT_SETTINGS_OUTPUT_FILE_FORMAT = C.GTK_PRINT_SETTINGS_OUTPUT_FILE_FORMAT
const PRINT_SETTINGS_OUTPUT_URI = C.GTK_PRINT_SETTINGS_OUTPUT_URI
const PRINT_SETTINGS_PAGE_RANGES = C.GTK_PRINT_SETTINGS_PAGE_RANGES
const PRINT_SETTINGS_PAGE_SET = C.GTK_PRINT_SETTINGS_PAGE_SET
const PRINT_SETTINGS_PAPER_FORMAT = C.GTK_PRINT_SETTINGS_PAPER_FORMAT
const PRINT_SETTINGS_PAPER_HEIGHT = C.GTK_PRINT_SETTINGS_PAPER_HEIGHT
const PRINT_SETTINGS_PAPER_WIDTH = C.GTK_PRINT_SETTINGS_PAPER_WIDTH
const PRINT_SETTINGS_PRINTER = C.GTK_PRINT_SETTINGS_PRINTER
const PRINT_SETTINGS_PRINTER_LPI = C.GTK_PRINT_SETTINGS_PRINTER_LPI
const PRINT_SETTINGS_PRINT_PAGES = C.GTK_PRINT_SETTINGS_PRINT_PAGES
const PRINT_SETTINGS_QUALITY = C.GTK_PRINT_SETTINGS_QUALITY
const PRINT_SETTINGS_RESOLUTION = C.GTK_PRINT_SETTINGS_RESOLUTION
const PRINT_SETTINGS_RESOLUTION_X = C.GTK_PRINT_SETTINGS_RESOLUTION_X
const PRINT_SETTINGS_RESOLUTION_Y = C.GTK_PRINT_SETTINGS_RESOLUTION_Y
const PRINT_SETTINGS_REVERSE = C.GTK_PRINT_SETTINGS_REVERSE
const PRINT_SETTINGS_SCALE = C.GTK_PRINT_SETTINGS_SCALE
const PRINT_SETTINGS_USE_COLOR = C.GTK_PRINT_SETTINGS_USE_COLOR
const PRINT_SETTINGS_WIN32_DRIVER_EXTRA = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_EXTRA
const PRINT_SETTINGS_WIN32_DRIVER_VERSION = C.GTK_PRINT_SETTINGS_WIN32_DRIVER_VERSION
const PRIORITY_RESIZE = C.GTK_PRIORITY_RESIZE
const STOCK_ABOUT = C.GTK_STOCK_ABOUT
const STOCK_ADD = C.GTK_STOCK_ADD
const STOCK_APPLY = C.GTK_STOCK_APPLY
const STOCK_BOLD = C.GTK_STOCK_BOLD
const STOCK_CANCEL = C.GTK_STOCK_CANCEL
const STOCK_CAPS_LOCK_WARNING = C.GTK_STOCK_CAPS_LOCK_WARNING
const STOCK_CDROM = C.GTK_STOCK_CDROM
const STOCK_CLEAR = C.GTK_STOCK_CLEAR
const STOCK_CLOSE = C.GTK_STOCK_CLOSE
const STOCK_COLOR_PICKER = C.GTK_STOCK_COLOR_PICKER
const STOCK_CONNECT = C.GTK_STOCK_CONNECT
const STOCK_CONVERT = C.GTK_STOCK_CONVERT
const STOCK_COPY = C.GTK_STOCK_COPY
const STOCK_CUT = C.GTK_STOCK_CUT
const STOCK_DELETE = C.GTK_STOCK_DELETE
const STOCK_DIALOG_AUTHENTICATION = C.GTK_STOCK_DIALOG_AUTHENTICATION
const STOCK_DIALOG_ERROR = C.GTK_STOCK_DIALOG_ERROR
const STOCK_DIALOG_INFO = C.GTK_STOCK_DIALOG_INFO
const STOCK_DIALOG_QUESTION = C.GTK_STOCK_DIALOG_QUESTION
const STOCK_DIALOG_WARNING = C.GTK_STOCK_DIALOG_WARNING
const STOCK_DIRECTORY = C.GTK_STOCK_DIRECTORY
const STOCK_DISCARD = C.GTK_STOCK_DISCARD
const STOCK_DISCONNECT = C.GTK_STOCK_DISCONNECT
const STOCK_DND = C.GTK_STOCK_DND
const STOCK_DND_MULTIPLE = C.GTK_STOCK_DND_MULTIPLE
const STOCK_EDIT = C.GTK_STOCK_EDIT
const STOCK_EXECUTE = C.GTK_STOCK_EXECUTE
const STOCK_FILE = C.GTK_STOCK_FILE
const STOCK_FIND = C.GTK_STOCK_FIND
const STOCK_FIND_AND_REPLACE = C.GTK_STOCK_FIND_AND_REPLACE
const STOCK_FLOPPY = C.GTK_STOCK_FLOPPY
const STOCK_FULLSCREEN = C.GTK_STOCK_FULLSCREEN
const STOCK_GOTO_BOTTOM = C.GTK_STOCK_GOTO_BOTTOM
const STOCK_GOTO_FIRST = C.GTK_STOCK_GOTO_FIRST
const STOCK_GOTO_LAST = C.GTK_STOCK_GOTO_LAST
const STOCK_GOTO_TOP = C.GTK_STOCK_GOTO_TOP
const STOCK_GO_BACK = C.GTK_STOCK_GO_BACK
const STOCK_GO_DOWN = C.GTK_STOCK_GO_DOWN
const STOCK_GO_FORWARD = C.GTK_STOCK_GO_FORWARD
const STOCK_GO_UP = C.GTK_STOCK_GO_UP
const STOCK_HARDDISK = C.GTK_STOCK_HARDDISK
const STOCK_HELP = C.GTK_STOCK_HELP
const STOCK_HOME = C.GTK_STOCK_HOME
const STOCK_INDENT = C.GTK_STOCK_INDENT
const STOCK_INDEX = C.GTK_STOCK_INDEX
const STOCK_INFO = C.GTK_STOCK_INFO
const STOCK_ITALIC = C.GTK_STOCK_ITALIC
const STOCK_JUMP_TO = C.GTK_STOCK_JUMP_TO
const STOCK_JUSTIFY_CENTER = C.GTK_STOCK_JUSTIFY_CENTER
const STOCK_JUSTIFY_FILL = C.GTK_STOCK_JUSTIFY_FILL
const STOCK_JUSTIFY_LEFT = C.GTK_STOCK_JUSTIFY_LEFT
const STOCK_JUSTIFY_RIGHT = C.GTK_STOCK_JUSTIFY_RIGHT
const STOCK_LEAVE_FULLSCREEN = C.GTK_STOCK_LEAVE_FULLSCREEN
const STOCK_MEDIA_FORWARD = C.GTK_STOCK_MEDIA_FORWARD
const STOCK_MEDIA_NEXT = C.GTK_STOCK_MEDIA_NEXT
const STOCK_MEDIA_PAUSE = C.GTK_STOCK_MEDIA_PAUSE
const STOCK_MEDIA_PLAY = C.GTK_STOCK_MEDIA_PLAY
const STOCK_MEDIA_PREVIOUS = C.GTK_STOCK_MEDIA_PREVIOUS
const STOCK_MEDIA_RECORD = C.GTK_STOCK_MEDIA_RECORD
const STOCK_MEDIA_REWIND = C.GTK_STOCK_MEDIA_REWIND
const STOCK_MEDIA_STOP = C.GTK_STOCK_MEDIA_STOP
const STOCK_MISSING_IMAGE = C.GTK_STOCK_MISSING_IMAGE
const STOCK_NETWORK = C.GTK_STOCK_NETWORK
const STOCK_NEW = C.GTK_STOCK_NEW
const STOCK_NO = C.GTK_STOCK_NO
const STOCK_OK = C.GTK_STOCK_OK
const STOCK_OPEN = C.GTK_STOCK_OPEN
const STOCK_ORIENTATION_LANDSCAPE = C.GTK_STOCK_ORIENTATION_LANDSCAPE
const STOCK_ORIENTATION_PORTRAIT = C.GTK_STOCK_ORIENTATION_PORTRAIT
const STOCK_ORIENTATION_REVERSE_LANDSCAPE = C.GTK_STOCK_ORIENTATION_REVERSE_LANDSCAPE
const STOCK_ORIENTATION_REVERSE_PORTRAIT = C.GTK_STOCK_ORIENTATION_REVERSE_PORTRAIT
const STOCK_PAGE_SETUP = C.GTK_STOCK_PAGE_SETUP
const STOCK_PASTE = C.GTK_STOCK_PASTE
const STOCK_PREFERENCES = C.GTK_STOCK_PREFERENCES
const STOCK_PRINT = C.GTK_STOCK_PRINT
const STOCK_PRINT_ERROR = C.GTK_STOCK_PRINT_ERROR
const STOCK_PRINT_PAUSED = C.GTK_STOCK_PRINT_PAUSED
const STOCK_PRINT_PREVIEW = C.GTK_STOCK_PRINT_PREVIEW
const STOCK_PRINT_REPORT = C.GTK_STOCK_PRINT_REPORT
const STOCK_PRINT_WARNING = C.GTK_STOCK_PRINT_WARNING
const STOCK_PROPERTIES = C.GTK_STOCK_PROPERTIES
const STOCK_QUIT = C.GTK_STOCK_QUIT
const STOCK_REDO = C.GTK_STOCK_REDO
const STOCK_REFRESH = C.GTK_STOCK_REFRESH
const STOCK_REMOVE = C.GTK_STOCK_REMOVE
const STOCK_REVERT_TO_SAVED = C.GTK_STOCK_REVERT_TO_SAVED
const STOCK_SAVE = C.GTK_STOCK_SAVE
const STOCK_SAVE_AS = C.GTK_STOCK_SAVE_AS
const STOCK_SELECT_ALL = C.GTK_STOCK_SELECT_ALL
const STOCK_SELECT_COLOR = C.GTK_STOCK_SELECT_COLOR
const STOCK_SELECT_FONT = C.GTK_STOCK_SELECT_FONT
const STOCK_SORT_ASCENDING = C.GTK_STOCK_SORT_ASCENDING
const STOCK_SORT_DESCENDING = C.GTK_STOCK_SORT_DESCENDING
const STOCK_SPELL_CHECK = C.GTK_STOCK_SPELL_CHECK
const STOCK_STOP = C.GTK_STOCK_STOP
const STOCK_STRIKETHROUGH = C.GTK_STOCK_STRIKETHROUGH
const STOCK_UNDELETE = C.GTK_STOCK_UNDELETE
const STOCK_UNDERLINE = C.GTK_STOCK_UNDERLINE
const STOCK_UNDO = C.GTK_STOCK_UNDO
const STOCK_UNINDENT = C.GTK_STOCK_UNINDENT
const STOCK_YES = C.GTK_STOCK_YES
const STOCK_ZOOM_100 = C.GTK_STOCK_ZOOM_100
const STOCK_ZOOM_FIT = C.GTK_STOCK_ZOOM_FIT
const STOCK_ZOOM_IN = C.GTK_STOCK_ZOOM_IN
const STOCK_ZOOM_OUT = C.GTK_STOCK_ZOOM_OUT
const STYLE_CLASS_ACCELERATOR = C.GTK_STYLE_CLASS_ACCELERATOR
const STYLE_CLASS_ARROW = C.GTK_STYLE_CLASS_ARROW
const STYLE_CLASS_BACKGROUND = C.GTK_STYLE_CLASS_BACKGROUND
const STYLE_CLASS_BOTTOM = C.GTK_STYLE_CLASS_BOTTOM
const STYLE_CLASS_BUTTON = C.GTK_STYLE_CLASS_BUTTON
const STYLE_CLASS_CALENDAR = C.GTK_STYLE_CLASS_CALENDAR
const STYLE_CLASS_CELL = C.GTK_STYLE_CLASS_CELL
const STYLE_CLASS_CHECK = C.GTK_STYLE_CLASS_CHECK
const STYLE_CLASS_COMBOBOX_ENTRY = C.GTK_STYLE_CLASS_COMBOBOX_ENTRY
const STYLE_CLASS_CURSOR_HANDLE = C.GTK_STYLE_CLASS_CURSOR_HANDLE
const STYLE_CLASS_DEFAULT = C.GTK_STYLE_CLASS_DEFAULT
const STYLE_CLASS_DIM_LABEL = C.GTK_STYLE_CLASS_DIM_LABEL
const STYLE_CLASS_DND = C.GTK_STYLE_CLASS_DND
const STYLE_CLASS_DOCK = C.GTK_STYLE_CLASS_DOCK
const STYLE_CLASS_ENTRY = C.GTK_STYLE_CLASS_ENTRY
const STYLE_CLASS_ERROR = C.GTK_STYLE_CLASS_ERROR
const STYLE_CLASS_EXPANDER = C.GTK_STYLE_CLASS_EXPANDER
const STYLE_CLASS_FRAME = C.GTK_STYLE_CLASS_FRAME
const STYLE_CLASS_GRIP = C.GTK_STYLE_CLASS_GRIP
const STYLE_CLASS_HEADER = C.GTK_STYLE_CLASS_HEADER
const STYLE_CLASS_HIGHLIGHT = C.GTK_STYLE_CLASS_HIGHLIGHT
const STYLE_CLASS_HORIZONTAL = C.GTK_STYLE_CLASS_HORIZONTAL
const STYLE_CLASS_IMAGE = C.GTK_STYLE_CLASS_IMAGE
const STYLE_CLASS_INFO = C.GTK_STYLE_CLASS_INFO
const STYLE_CLASS_INLINE_TOOLBAR = C.GTK_STYLE_CLASS_INLINE_TOOLBAR
const STYLE_CLASS_LEFT = C.GTK_STYLE_CLASS_LEFT
const STYLE_CLASS_LEVEL_BAR = C.GTK_STYLE_CLASS_LEVEL_BAR
const STYLE_CLASS_LINKED = C.GTK_STYLE_CLASS_LINKED
const STYLE_CLASS_MARK = C.GTK_STYLE_CLASS_MARK
const STYLE_CLASS_MENU = C.GTK_STYLE_CLASS_MENU
const STYLE_CLASS_MENUBAR = C.GTK_STYLE_CLASS_MENUBAR
const STYLE_CLASS_MENUITEM = C.GTK_STYLE_CLASS_MENUITEM
const STYLE_CLASS_NOTEBOOK = C.GTK_STYLE_CLASS_NOTEBOOK
const STYLE_CLASS_OSD = C.GTK_STYLE_CLASS_OSD
const STYLE_CLASS_PANE_SEPARATOR = C.GTK_STYLE_CLASS_PANE_SEPARATOR
const STYLE_CLASS_PRIMARY_TOOLBAR = C.GTK_STYLE_CLASS_PRIMARY_TOOLBAR
const STYLE_CLASS_PROGRESSBAR = C.GTK_STYLE_CLASS_PROGRESSBAR
const STYLE_CLASS_PULSE = C.GTK_STYLE_CLASS_PULSE
const STYLE_CLASS_QUESTION = C.GTK_STYLE_CLASS_QUESTION
const STYLE_CLASS_RADIO = C.GTK_STYLE_CLASS_RADIO
const STYLE_CLASS_RAISED = C.GTK_STYLE_CLASS_RAISED
const STYLE_CLASS_RIGHT = C.GTK_STYLE_CLASS_RIGHT
const STYLE_CLASS_RUBBERBAND = C.GTK_STYLE_CLASS_RUBBERBAND
const STYLE_CLASS_SCALE = C.GTK_STYLE_CLASS_SCALE
const STYLE_CLASS_SCALE_HAS_MARKS_ABOVE = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_ABOVE
const STYLE_CLASS_SCALE_HAS_MARKS_BELOW = C.GTK_STYLE_CLASS_SCALE_HAS_MARKS_BELOW
const STYLE_CLASS_SCROLLBAR = C.GTK_STYLE_CLASS_SCROLLBAR
const STYLE_CLASS_SCROLLBARS_JUNCTION = C.GTK_STYLE_CLASS_SCROLLBARS_JUNCTION
const STYLE_CLASS_SEPARATOR = C.GTK_STYLE_CLASS_SEPARATOR
const STYLE_CLASS_SIDEBAR = C.GTK_STYLE_CLASS_SIDEBAR
const STYLE_CLASS_SLIDER = C.GTK_STYLE_CLASS_SLIDER
const STYLE_CLASS_SPINBUTTON = C.GTK_STYLE_CLASS_SPINBUTTON
const STYLE_CLASS_SPINNER = C.GTK_STYLE_CLASS_SPINNER
const STYLE_CLASS_TOOLBAR = C.GTK_STYLE_CLASS_TOOLBAR
const STYLE_CLASS_TOOLTIP = C.GTK_STYLE_CLASS_TOOLTIP
const STYLE_CLASS_TOP = C.GTK_STYLE_CLASS_TOP
const STYLE_CLASS_TROUGH = C.GTK_STYLE_CLASS_TROUGH
const STYLE_CLASS_VERTICAL = C.GTK_STYLE_CLASS_VERTICAL
const STYLE_CLASS_VIEW = C.GTK_STYLE_CLASS_VIEW
const STYLE_CLASS_WARNING = C.GTK_STYLE_CLASS_WARNING
const STYLE_PROPERTY_BACKGROUND_COLOR = C.GTK_STYLE_PROPERTY_BACKGROUND_COLOR
const STYLE_PROPERTY_BACKGROUND_IMAGE = C.GTK_STYLE_PROPERTY_BACKGROUND_IMAGE
const STYLE_PROPERTY_BORDER_COLOR = C.GTK_STYLE_PROPERTY_BORDER_COLOR
const STYLE_PROPERTY_BORDER_RADIUS = C.GTK_STYLE_PROPERTY_BORDER_RADIUS
const STYLE_PROPERTY_BORDER_STYLE = C.GTK_STYLE_PROPERTY_BORDER_STYLE
const STYLE_PROPERTY_BORDER_WIDTH = C.GTK_STYLE_PROPERTY_BORDER_WIDTH
const STYLE_PROPERTY_COLOR = C.GTK_STYLE_PROPERTY_COLOR
const STYLE_PROPERTY_FONT = C.GTK_STYLE_PROPERTY_FONT
const STYLE_PROPERTY_MARGIN = C.GTK_STYLE_PROPERTY_MARGIN
const STYLE_PROPERTY_PADDING = C.GTK_STYLE_PROPERTY_PADDING
const STYLE_PROVIDER_PRIORITY_APPLICATION = C.GTK_STYLE_PROVIDER_PRIORITY_APPLICATION
const STYLE_PROVIDER_PRIORITY_FALLBACK = C.GTK_STYLE_PROVIDER_PRIORITY_FALLBACK
const STYLE_PROVIDER_PRIORITY_SETTINGS = C.GTK_STYLE_PROVIDER_PRIORITY_SETTINGS
const STYLE_PROVIDER_PRIORITY_THEME = C.GTK_STYLE_PROVIDER_PRIORITY_THEME
const STYLE_PROVIDER_PRIORITY_USER = C.GTK_STYLE_PROVIDER_PRIORITY_USER
const STYLE_REGION_COLUMN = C.GTK_STYLE_REGION_COLUMN
const STYLE_REGION_COLUMN_HEADER = C.GTK_STYLE_REGION_COLUMN_HEADER
const STYLE_REGION_ROW = C.GTK_STYLE_REGION_ROW
const STYLE_REGION_TAB = C.GTK_STYLE_REGION_TAB
const TEXT_VIEW_PRIORITY_VALIDATE = C.GTK_TEXT_VIEW_PRIORITY_VALIDATE
