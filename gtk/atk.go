// this file is auto-generated by gtk-go

package gtk

// #cgo pkg-config: atk gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <atk/atk.h>
/*
guint _atk_add_global_event_listener(GSignalEmissionHook listener, gchar * event_type) {
	return (guint)atk_add_global_event_listener(listener, (const gchar *)(event_type));
}
gchar * _atk_get_toolkit_name() {
	return (gchar *)atk_get_toolkit_name();
}
gchar * _atk_get_toolkit_version() {
	return (gchar *)atk_get_toolkit_version();
}
gchar * _atk_get_version() {
	return (gchar *)atk_get_version();
}
AtkRelationType _atk_relation_type_for_name(gchar * name) {
	return (AtkRelationType)atk_relation_type_for_name((const gchar *)(name));
}
gchar * _atk_relation_type_get_name(AtkRelationType type) {
	return (gchar *)atk_relation_type_get_name(type);
}
AtkRelationType _atk_relation_type_register(gchar * name) {
	return (AtkRelationType)atk_relation_type_register((const gchar *)(name));
}
AtkRole _atk_role_for_name(gchar * name) {
	return (AtkRole)atk_role_for_name((const gchar *)(name));
}
gchar * _atk_role_get_localized_name(AtkRole role) {
	return (gchar *)atk_role_get_localized_name(role);
}
gchar * _atk_role_get_name(AtkRole role) {
	return (gchar *)atk_role_get_name(role);
}
AtkRole _atk_role_register(gchar * name) {
	return (AtkRole)atk_role_register((const gchar *)(name));
}
AtkStateType _atk_state_type_for_name(gchar * name) {
	return (AtkStateType)atk_state_type_for_name((const gchar *)(name));
}
gchar * _atk_state_type_get_name(AtkStateType type) {
	return (gchar *)atk_state_type_get_name(type);
}
AtkStateType _atk_state_type_register(gchar * name) {
	return (AtkStateType)atk_state_type_register((const gchar *)(name));
}
AtkTextAttribute _atk_text_attribute_for_name(gchar * name) {
	return (AtkTextAttribute)atk_text_attribute_for_name((const gchar *)(name));
}
gchar * _atk_text_attribute_get_name(AtkTextAttribute attr) {
	return (gchar *)atk_text_attribute_get_name(attr);
}
gchar * _atk_text_attribute_get_value(AtkTextAttribute attr, gint index_) {
	return (gchar *)atk_text_attribute_get_value(attr, index_);
}
AtkTextAttribute _atk_text_attribute_register(gchar * name) {
	return (AtkTextAttribute)atk_text_attribute_register((const gchar *)(name));
}
void _atk_text_free_ranges(void * ranges) {
	(void)atk_text_free_ranges((AtkTextRange **)(ranges));
}
AtkMisc * _atk_misc_get_instance() {
	return (AtkMisc *)atk_misc_get_instance();
}
gchar * _atk_object_get_description(AtkObject * _self_) {
	return (gchar *)atk_object_get_description(_self_);
}
gchar * _atk_object_get_name(AtkObject * _self_) {
	return (gchar *)atk_object_get_name(_self_);
}
void _atk_object_set_description(AtkObject * _self_, gchar * description) {
	(void)atk_object_set_description(_self_, (const gchar *)(description));
}
void _atk_object_set_name(AtkObject * _self_, gchar * name) {
	(void)atk_object_set_name(_self_, (const gchar *)(name));
}
AtkRelation * _atk_relation_new(void * targets, gint n_targets, AtkRelationType relationship) {
	return (AtkRelation *)atk_relation_new((AtkObject **)(targets), n_targets, relationship);
}
*/
import "C"
import (
	"unsafe"
)

type NoOpObjectFactoryClass C.AtkNoOpObjectFactoryClass
type HypertextIface C.AtkHypertextIface
type AtkObjectClass C.AtkObjectClass
type ImageIface C.AtkImageIface
type DocumentIface C.AtkDocumentIface
type WindowIface C.AtkWindowIface
type ValueIface C.AtkValueIface
type NoOpObjectClass C.AtkNoOpObjectClass
type AtkMiscClass C.AtkMiscClass
type Rectangle C.AtkRectangle
type EditableTextIface C.AtkEditableTextIface
type TextIface C.AtkTextIface
type RelationClass C.AtkRelationClass
type ActionIface C.AtkActionIface
type TextRange C.AtkTextRange
type AtkPlugClass C.AtkPlugClass
type ComponentIface C.AtkComponentIface
type AtkSocketClass C.AtkSocketClass
type SelectionIface C.AtkSelectionIface
type TableIface C.AtkTableIface
type StreamableContentIface C.AtkStreamableContentIface
type GObjectAccessibleClass C.AtkGObjectAccessibleClass
type RelationSetClass C.AtkRelationSetClass
type HyperlinkClass C.AtkHyperlinkClass
type KeyEventStruct C.AtkKeyEventStruct
type Attribute C.AtkAttribute
type StateSetClass C.AtkStateSetClass
type HyperlinkImplIface C.AtkHyperlinkImplIface
type TextRectangle C.AtkTextRectangle
type ObjectFactoryClass C.AtkObjectFactoryClass
type Implementor C.AtkImplementor
type UtilClass C.AtkUtilClass
type NoOpObjectFactory struct { ObjectFactory }
type NoOpObjectFactoryKind interface {
  _IsNoOpObjectFactory()
  GetGObject() unsafe.Pointer
}
func (self NoOpObjectFactory) _IsNoOpObjectFactory () {}
func (self NoOpObjectFactory) GetGObject() unsafe.Pointer { return self._value_ }
func ToNoOpObjectFactory(value unsafe.Pointer) NoOpObjectFactory { return NoOpObjectFactory{ObjectFactory{GObjectObject{value}}} }
type Hyperlink struct { GObjectObject }
type HyperlinkKind interface {
  _IsHyperlink()
  GetGObject() unsafe.Pointer
}
func (self Hyperlink) _IsHyperlink () {}
func (self Hyperlink) GetGObject() unsafe.Pointer { return self._value_ }
func ToHyperlink(value unsafe.Pointer) Hyperlink { return Hyperlink{GObjectObject{value}} }
type StateSet struct { GObjectObject }
type StateSetKind interface {
  _IsStateSet()
  GetGObject() unsafe.Pointer
}
func (self StateSet) _IsStateSet () {}
func (self StateSet) GetGObject() unsafe.Pointer { return self._value_ }
func ToStateSet(value unsafe.Pointer) StateSet { return StateSet{GObjectObject{value}} }
type ObjectFactory struct { GObjectObject }
type ObjectFactoryKind interface {
  _IsObjectFactory()
  GetGObject() unsafe.Pointer
}
func (self ObjectFactory) _IsObjectFactory () {}
func (self ObjectFactory) GetGObject() unsafe.Pointer { return self._value_ }
func ToObjectFactory(value unsafe.Pointer) ObjectFactory { return ObjectFactory{GObjectObject{value}} }
type RelationSet struct { GObjectObject }
type RelationSetKind interface {
  _IsRelationSet()
  GetGObject() unsafe.Pointer
}
func (self RelationSet) _IsRelationSet () {}
func (self RelationSet) GetGObject() unsafe.Pointer { return self._value_ }
func ToRelationSet(value unsafe.Pointer) RelationSet { return RelationSet{GObjectObject{value}} }
type Util struct { GObjectObject }
type UtilKind interface {
  _IsUtil()
  GetGObject() unsafe.Pointer
}
func (self Util) _IsUtil () {}
func (self Util) GetGObject() unsafe.Pointer { return self._value_ }
func ToUtil(value unsafe.Pointer) Util { return Util{GObjectObject{value}} }
type AtkMisc struct { GObjectObject }
type AtkMiscKind interface {
  _IsAtkMisc()
  GetGObject() unsafe.Pointer
}
func (self AtkMisc) _IsAtkMisc () {}
func (self AtkMisc) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkMisc(value unsafe.Pointer) AtkMisc { return AtkMisc{GObjectObject{value}} }
type AtkObject struct { GObjectObject }
type AtkObjectKind interface {
  _IsAtkObject()
  GetGObject() unsafe.Pointer
}
func (self AtkObject) _IsAtkObject () {}
func (self AtkObject) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkObject(value unsafe.Pointer) AtkObject { return AtkObject{GObjectObject{value}} }
type Relation struct { GObjectObject }
type RelationKind interface {
  _IsRelation()
  GetGObject() unsafe.Pointer
}
func (self Relation) _IsRelation () {}
func (self Relation) GetGObject() unsafe.Pointer { return self._value_ }
func ToRelation(value unsafe.Pointer) Relation { return Relation{GObjectObject{value}} }
type GObjectAccessible struct { AtkObject }
type GObjectAccessibleKind interface {
  _IsGObjectAccessible()
  GetGObject() unsafe.Pointer
}
func (self GObjectAccessible) _IsGObjectAccessible () {}
func (self GObjectAccessible) GetGObject() unsafe.Pointer { return self._value_ }
func ToGObjectAccessible(value unsafe.Pointer) GObjectAccessible { return GObjectAccessible{AtkObject{GObjectObject{value}}} }
type NoOpObject struct { AtkObject }
type NoOpObjectKind interface {
  _IsNoOpObject()
  GetGObject() unsafe.Pointer
}
func (self NoOpObject) _IsNoOpObject () {}
func (self NoOpObject) GetGObject() unsafe.Pointer { return self._value_ }
func ToNoOpObject(value unsafe.Pointer) NoOpObject { return NoOpObject{AtkObject{GObjectObject{value}}} }
type AtkSocket struct { AtkObject }
type AtkSocketKind interface {
  _IsAtkSocket()
  GetGObject() unsafe.Pointer
}
func (self AtkSocket) _IsAtkSocket () {}
func (self AtkSocket) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkSocket(value unsafe.Pointer) AtkSocket { return AtkSocket{AtkObject{GObjectObject{value}}} }
type AtkPlug struct { AtkObject }
type AtkPlugKind interface {
  _IsAtkPlug()
  GetGObject() unsafe.Pointer
}
func (self AtkPlug) _IsAtkPlug () {}
func (self AtkPlug) GetGObject() unsafe.Pointer { return self._value_ }
func ToAtkPlug(value unsafe.Pointer) AtkPlug { return AtkPlug{AtkObject{GObjectObject{value}}} }
type Registry struct { GObjectObject }
type RegistryKind interface {
  _IsRegistry()
  GetGObject() unsafe.Pointer
}
func (self Registry) _IsRegistry () {}
func (self Registry) GetGObject() unsafe.Pointer { return self._value_ }
func ToRegistry(value unsafe.Pointer) Registry { return Registry{GObjectObject{value}} }
func AddFocusTracker(focus_tracker C.AtkEventListener) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_add_focus_tracker(focus_tracker)
	_go__return__ = (uint)(_return_)
	return
}

func AddGlobalEventListener(listener C.GSignalEmissionHook, event_type string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_event_type_ := C.CString(event_type)
	_cgo_event_type_ := (*C.gchar)(unsafe.Pointer(_cstring_event_type_))
	defer C.free(unsafe.Pointer(_cstring_event_type_))
	_return_ = C._atk_add_global_event_listener(listener, _cgo_event_type_)
	_go__return__ = (uint)(_return_)
	return
}

func AddKeyEventListener(listener C.AtkKeySnoopFunc, data C.gpointer) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_add_key_event_listener(listener, data)
	_go__return__ = (uint)(_return_)
	return
}

func AttributeSetFree(attrib_set *C.AtkAttributeSet) () {
	C.atk_attribute_set_free(attrib_set)
	return
}

func FocusTrackerInit(init C.AtkEventListenerInit) () {
	C.atk_focus_tracker_init(init)
	return
}

func FocusTrackerNotify(object AtkObjectKind) () {
	_cgo_object_ := (*C.AtkObject)(object.GetGObject())
	C.atk_focus_tracker_notify(_cgo_object_)
	return
}

func GetDefaultRegistry() (_go__return__ Registry) {
	var _return_ *C.AtkRegistry
	_return_ = C.atk_get_default_registry()
	_go__return__ = ToRegistry(unsafe.Pointer(_return_))
	return
}

func GetFocusObject() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_get_focus_object()
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func GetRoot() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_get_root()
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func GetToolkitName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_toolkit_name()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func GetToolkitVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_toolkit_version()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func GetVersion() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_get_version()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RelationTypeForName(name string) (_return_ C.AtkRelationType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_relation_type_for_name(_cgo_name_)
	return
}

func RelationTypeGetName(type_ C.AtkRelationType) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_relation_type_get_name(type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RelationTypeRegister(name string) (_return_ C.AtkRelationType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_relation_type_register(_cgo_name_)
	return
}

func RemoveFocusTracker(tracker_id uint) () {
	_cgo_tracker_id_ := (C.guint)(tracker_id)
	C.atk_remove_focus_tracker(_cgo_tracker_id_)
	return
}

func RemoveGlobalEventListener(listener_id uint) () {
	_cgo_listener_id_ := (C.guint)(listener_id)
	C.atk_remove_global_event_listener(_cgo_listener_id_)
	return
}

func RemoveKeyEventListener(listener_id uint) () {
	_cgo_listener_id_ := (C.guint)(listener_id)
	C.atk_remove_key_event_listener(_cgo_listener_id_)
	return
}

func RoleForName(name string) (_return_ C.AtkRole) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_role_for_name(_cgo_name_)
	return
}

func RoleGetLocalizedName(role C.AtkRole) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_role_get_localized_name(role)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RoleGetName(role C.AtkRole) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_role_get_name(role)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func RoleRegister(name string) (_return_ C.AtkRole) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_role_register(_cgo_name_)
	return
}

func StateTypeForName(name string) (_return_ C.AtkStateType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_state_type_for_name(_cgo_name_)
	return
}

func StateTypeGetName(type_ C.AtkStateType) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_state_type_get_name(type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func StateTypeRegister(name string) (_return_ C.AtkStateType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_state_type_register(_cgo_name_)
	return
}

func TextAttributeForName(name string) (_return_ C.AtkTextAttribute) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_text_attribute_for_name(_cgo_name_)
	return
}

func TextAttributeGetName(attr C.AtkTextAttribute) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_text_attribute_get_name(attr)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TextAttributeGetValue(attr C.AtkTextAttribute, index_ int) (_go__return__ string) {
	_cgo_index__ := (C.gint)(index_)
	var _return_ *C.gchar
	_return_ = C._atk_text_attribute_get_value(attr, _cgo_index__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TextAttributeRegister(name string) (_return_ C.AtkTextAttribute) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._atk_text_attribute_register(_cgo_name_)
	return
}

func TextFreeRanges(ranges *TextRange) () {
	_cgo_ranges_ := (unsafe.Pointer)(unsafe.Pointer(ranges))
	C._atk_text_free_ranges(_cgo_ranges_)
	return
}

func GObjectAccessibleForObject(obj *C.GObject) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_gobject_accessible_for_object(obj)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *GObjectAccessible) GetObject() (_return_ *C.GObject) {
	_return_ = C.atk_gobject_accessible_get_object((*C.AtkGObjectAccessible)(_self_._value_))
	return
}

func (_self_ *Hyperlink) GetEndIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_end_index((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetNAnchors() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_n_anchors((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetObject(i int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_hyperlink_get_object((*C.AtkHyperlink)(_self_._value_), _cgo_i_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Hyperlink) GetStartIndex() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_hyperlink_get_start_index((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Hyperlink) GetUri(i int) (_go__return__ string) {
	_cgo_i_ := (C.gint)(i)
	var _return_ *C.gchar
	_return_ = C.atk_hyperlink_get_uri((*C.AtkHyperlink)(_self_._value_), _cgo_i_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Hyperlink) IsInline() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_hyperlink_is_inline((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Hyperlink) IsValid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_hyperlink_is_valid((*C.AtkHyperlink)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func MiscGetInstance() (_go__return__ AtkMisc) {
	var _return_ *C.AtkMisc
	_return_ = C._atk_misc_get_instance()
	_go__return__ = ToAtkMisc(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkMisc) ThreadsEnter() () {
	C.atk_misc_threads_enter((*C.AtkMisc)(_self_._value_))
	return
}

func (_self_ *AtkMisc) ThreadsLeave() () {
	C.atk_misc_threads_leave((*C.AtkMisc)(_self_._value_))
	return
}

func NoOpObjectNew(obj *C.GObject) (_go__return__ NoOpObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_no_op_object_new(obj)
	_go__return__ = ToNoOpObject(unsafe.Pointer(_return_))
	return
}

func NoOpObjectFactoryNew() (_go__return__ NoOpObjectFactory) {
	var _return_ *C.AtkObjectFactory
	_return_ = C.atk_no_op_object_factory_new()
	_go__return__ = ToNoOpObjectFactory(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) AddRelationship(relationship C.AtkRelationType, target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_object_add_relationship((*C.AtkObject)(_self_._value_), relationship, _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkObject) ConnectPropertyChangeHandler(handler *C.AtkPropertyChangeHandler) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.atk_object_connect_property_change_handler((*C.AtkObject)(_self_._value_), handler)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *AtkObject) GetAttributes() (_return_ *C.AtkAttributeSet) {
	_return_ = C.atk_object_get_attributes((*C.AtkObject)(_self_._value_))
	return
}

func (_self_ *AtkObject) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_object_get_description((*C.AtkObject)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkObject) GetIndexInParent() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_object_get_index_in_parent((*C.AtkObject)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkObject) GetNAccessibleChildren() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_object_get_n_accessible_children((*C.AtkObject)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *AtkObject) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._atk_object_get_name((*C.AtkObject)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *AtkObject) GetParent() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_object_get_parent((*C.AtkObject)(_self_._value_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) GetRole() (_return_ C.AtkRole) {
	_return_ = C.atk_object_get_role((*C.AtkObject)(_self_._value_))
	return
}

func (_self_ *AtkObject) Initialize(data C.gpointer) () {
	C.atk_object_initialize((*C.AtkObject)(_self_._value_), data)
	return
}

func (_self_ *AtkObject) NotifyStateChange(state C.AtkState, value bool) () {
	_cgo_value_ := (C.gboolean)(C.FALSE)
	if value { _cgo_value_ = (C.gboolean)(C.TRUE) }
	C.atk_object_notify_state_change((*C.AtkObject)(_self_._value_), state, _cgo_value_)
	return
}

func (_self_ *AtkObject) RefAccessibleChild(i int) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_object_ref_accessible_child((*C.AtkObject)(_self_._value_), _cgo_i_)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RefRelationSet() (_go__return__ RelationSet) {
	var _return_ *C.AtkRelationSet
	_return_ = C.atk_object_ref_relation_set((*C.AtkObject)(_self_._value_))
	_go__return__ = ToRelationSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RefStateSet() (_go__return__ StateSet) {
	var _return_ *C.AtkStateSet
	_return_ = C.atk_object_ref_state_set((*C.AtkObject)(_self_._value_))
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkObject) RemovePropertyChangeHandler(handler_id uint) () {
	_cgo_handler_id_ := (C.guint)(handler_id)
	C.atk_object_remove_property_change_handler((*C.AtkObject)(_self_._value_), _cgo_handler_id_)
	return
}

func (_self_ *AtkObject) RemoveRelationship(relationship C.AtkRelationType, target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_object_remove_relationship((*C.AtkObject)(_self_._value_), relationship, _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *AtkObject) SetDescription(description string) () {
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	C._atk_object_set_description((*C.AtkObject)(_self_._value_), _cgo_description_)
	return
}

func (_self_ *AtkObject) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._atk_object_set_name((*C.AtkObject)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *AtkObject) SetParent(parent AtkObjectKind) () {
	_cgo_parent_ := (*C.AtkObject)(parent.GetGObject())
	C.atk_object_set_parent((*C.AtkObject)(_self_._value_), _cgo_parent_)
	return
}

func (_self_ *AtkObject) SetRole(role C.AtkRole) () {
	C.atk_object_set_role((*C.AtkObject)(_self_._value_), role)
	return
}

func (_self_ *ObjectFactory) CreateAccessible(obj *C.GObject) (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_object_factory_create_accessible((*C.AtkObjectFactory)(_self_._value_), obj)
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *ObjectFactory) GetAccessibleType() (_return_ C.GType) {
	_return_ = C.atk_object_factory_get_accessible_type((*C.AtkObjectFactory)(_self_._value_))
	return
}

func (_self_ *ObjectFactory) Invalidate() () {
	C.atk_object_factory_invalidate((*C.AtkObjectFactory)(_self_._value_))
	return
}

func AtkPlugNew() (_go__return__ AtkPlug) {
	var _return_ *C.AtkObject
	_return_ = C.atk_plug_new()
	_go__return__ = ToAtkPlug(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkPlug) GetId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.atk_plug_get_id((*C.AtkPlug)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Registry) GetFactory(type_ C.GType) (_go__return__ ObjectFactory) {
	var _return_ *C.AtkObjectFactory
	_return_ = C.atk_registry_get_factory((*C.AtkRegistry)(_self_._value_), type_)
	_go__return__ = ToObjectFactory(unsafe.Pointer(_return_))
	return
}

func (_self_ *Registry) GetFactoryType(type_ C.GType) (_return_ C.GType) {
	_return_ = C.atk_registry_get_factory_type((*C.AtkRegistry)(_self_._value_), type_)
	return
}

func (_self_ *Registry) SetFactoryType(type_ C.GType, factory_type C.GType) () {
	C.atk_registry_set_factory_type((*C.AtkRegistry)(_self_._value_), type_, factory_type)
	return
}

func RelationNew(targets AtkObjectKind, n_targets int, relationship C.AtkRelationType) (_go__return__ Relation) {
	_cgo_targets_ := (unsafe.Pointer)(targets.GetGObject())
	var _return_ *C.AtkRelation
	_cgo_n_targets_ := (C.gint)(n_targets)
	_return_ = C._atk_relation_new(_cgo_targets_, _cgo_n_targets_, relationship)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *Relation) AddTarget(target AtkObjectKind) () {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	C.atk_relation_add_target((*C.AtkRelation)(_self_._value_), _cgo_target_)
	return
}

func (_self_ *Relation) GetRelationType() (_return_ C.AtkRelationType) {
	_return_ = C.atk_relation_get_relation_type((*C.AtkRelation)(_self_._value_))
	return
}

func (_self_ *Relation) GetTarget() (_return_ *C.GPtrArray) {
	_return_ = C.atk_relation_get_target((*C.AtkRelation)(_self_._value_))
	return
}

func (_self_ *Relation) RemoveTarget(target AtkObjectKind) (_go__return__ bool) {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_relation_remove_target((*C.AtkRelation)(_self_._value_), _cgo_target_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func RelationSetNew() (_go__return__ RelationSet) {
	var _return_ *C.AtkRelationSet
	_return_ = C.atk_relation_set_new()
	_go__return__ = ToRelationSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) Add(relation RelationKind) () {
	_cgo_relation_ := (*C.AtkRelation)(relation.GetGObject())
	C.atk_relation_set_add((*C.AtkRelationSet)(_self_._value_), _cgo_relation_)
	return
}

func (_self_ *RelationSet) AddRelationByType(relationship C.AtkRelationType, target AtkObjectKind) () {
	_cgo_target_ := (*C.AtkObject)(target.GetGObject())
	C.atk_relation_set_add_relation_by_type((*C.AtkRelationSet)(_self_._value_), relationship, _cgo_target_)
	return
}

func (_self_ *RelationSet) Contains(relationship C.AtkRelationType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_relation_set_contains((*C.AtkRelationSet)(_self_._value_), relationship)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *RelationSet) ContainsTarget(relationship C.AtkRelationType, targe AtkObjectKind) (_go__return__ bool) {
	_cgo_targe_ := (*C.AtkObject)(targe.GetGObject())
	var _return_ C.gboolean
	_return_ = C.atk_relation_set_contains_target((*C.AtkRelationSet)(_self_._value_), relationship, _cgo_targe_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *RelationSet) GetNRelations() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.atk_relation_set_get_n_relations((*C.AtkRelationSet)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *RelationSet) GetRelation(i int) (_go__return__ Relation) {
	var _return_ *C.AtkRelation
	_cgo_i_ := (C.gint)(i)
	_return_ = C.atk_relation_set_get_relation((*C.AtkRelationSet)(_self_._value_), _cgo_i_)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) GetRelationByType(relationship C.AtkRelationType) (_go__return__ Relation) {
	var _return_ *C.AtkRelation
	_return_ = C.atk_relation_set_get_relation_by_type((*C.AtkRelationSet)(_self_._value_), relationship)
	_go__return__ = ToRelation(unsafe.Pointer(_return_))
	return
}

func (_self_ *RelationSet) Remove(relation RelationKind) () {
	_cgo_relation_ := (*C.AtkRelation)(relation.GetGObject())
	C.atk_relation_set_remove((*C.AtkRelationSet)(_self_._value_), _cgo_relation_)
	return
}

func AtkSocketNew() (_go__return__ AtkSocket) {
	var _return_ *C.AtkObject
	_return_ = C.atk_socket_new()
	_go__return__ = ToAtkSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *AtkSocket) Embed(plug_id string) () {
	_cstring_plug_id_ := C.CString(plug_id)
	_cgo_plug_id_ := (*C.gchar)(unsafe.Pointer(_cstring_plug_id_))
	defer C.free(unsafe.Pointer(_cstring_plug_id_))
	C.atk_socket_embed((*C.AtkSocket)(_self_._value_), _cgo_plug_id_)
	return
}

func (_self_ *AtkSocket) IsOccupied() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_socket_is_occupied((*C.AtkSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func StateSetNew() (_go__return__ StateSet) {
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_new()
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) AddState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_add_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) AddStates(types *C.AtkStateType, n_types int) () {
	_cgo_n_types_ := (C.gint)(n_types)
	C.atk_state_set_add_states((*C.AtkStateSet)(_self_._value_), types, _cgo_n_types_)
	return
}

func (_self_ *StateSet) AndSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_and_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) ClearStates() () {
	C.atk_state_set_clear_states((*C.AtkStateSet)(_self_._value_))
	return
}

func (_self_ *StateSet) ContainsState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_contains_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) ContainsStates(types *C.AtkStateType, n_types int) (_go__return__ bool) {
	_cgo_n_types_ := (C.gint)(n_types)
	var _return_ C.gboolean
	_return_ = C.atk_state_set_contains_states((*C.AtkStateSet)(_self_._value_), types, _cgo_n_types_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) IsEmpty() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_is_empty((*C.AtkStateSet)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) OrSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_or_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *StateSet) RemoveState(type_ C.AtkStateType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.atk_state_set_remove_state((*C.AtkStateSet)(_self_._value_), type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *StateSet) XorSets(compare_set StateSetKind) (_go__return__ StateSet) {
	_cgo_compare_set_ := (*C.AtkStateSet)(compare_set.GetGObject())
	var _return_ *C.AtkStateSet
	_return_ = C.atk_state_set_xor_sets((*C.AtkStateSet)(_self_._value_), _cgo_compare_set_)
	_go__return__ = ToStateSet(unsafe.Pointer(_return_))
	return
}

func (_self_ *Implementor) RefAccessible() (_go__return__ AtkObject) {
	var _return_ *C.AtkObject
	_return_ = C.atk_implementor_ref_accessible((*C.AtkImplementor)(_self_))
	_go__return__ = ToAtkObject(unsafe.Pointer(_return_))
	return
}

const STATE_EXPANDED = C.ATK_STATE_EXPANDED
const STATE_VERTICAL = C.ATK_STATE_VERTICAL
const STATE_SELECTABLE_TEXT = C.ATK_STATE_SELECTABLE_TEXT
const RELATION_PARENT_WINDOW_OF = C.ATK_RELATION_PARENT_WINDOW_OF
const ROLE_SECTION = C.ATK_ROLE_SECTION
const ROLE_TABLE_CELL = C.ATK_ROLE_TABLE_CELL
const ROLE_FILLER = C.ATK_ROLE_FILLER
const TEXT_ATTR_JUSTIFICATION = C.ATK_TEXT_ATTR_JUSTIFICATION
const ROLE_TOGGLE_BUTTON = C.ATK_ROLE_TOGGLE_BUTTON
const ROLE_PAGE = C.ATK_ROLE_PAGE
const ROLE_PROGRESS_BAR = C.ATK_ROLE_PROGRESS_BAR
const ROLE_DIALOG = C.ATK_ROLE_DIALOG
const STATE_FOCUSABLE = C.ATK_STATE_FOCUSABLE
const ROLE_GLASS_PANE = C.ATK_ROLE_GLASS_PANE
const STATE_BUSY = C.ATK_STATE_BUSY
const TEXT_ATTR_WRAP_MODE = C.ATK_TEXT_ATTR_WRAP_MODE
const ROLE_DIAL = C.ATK_ROLE_DIAL
const LAYER_INVALID = C.ATK_LAYER_INVALID
const ROLE_DOCUMENT_SPREADSHEET = C.ATK_ROLE_DOCUMENT_SPREADSHEET
const RELATION_DESCRIBED_BY = C.ATK_RELATION_DESCRIBED_BY
const ROLE_TOOL_BAR = C.ATK_ROLE_TOOL_BAR
const ROLE_ALERT = C.ATK_ROLE_ALERT
const ROLE_COMMENT = C.ATK_ROLE_COMMENT
const STATE_DEFUNCT = C.ATK_STATE_DEFUNCT
const TEXT_CLIP_MAX = C.ATK_TEXT_CLIP_MAX
const ROLE_PAGE_TAB = C.ATK_ROLE_PAGE_TAB
const RELATION_FLOWS_FROM = C.ATK_RELATION_FLOWS_FROM
const ATK_STATE_FOCUSED = C.ATK_STATE_FOCUSED
const ROLE_CHART = C.ATK_ROLE_CHART
const ROLE_ROW_HEADER = C.ATK_ROLE_ROW_HEADER
const TEXT_ATTR_DIRECTION = C.ATK_TEXT_ATTR_DIRECTION
const LAYER_MDI = C.ATK_LAYER_MDI
const TEXT_ATTR_STRETCH = C.ATK_TEXT_ATTR_STRETCH
const STATE_MULTI_LINE = C.ATK_STATE_MULTI_LINE
const TEXT_CLIP_BOTH = C.ATK_TEXT_CLIP_BOTH
const TEXT_ATTR_SCALE = C.ATK_TEXT_ATTR_SCALE
const ATK_STATE_ACTIVE = C.ATK_STATE_ACTIVE
const STATE_OPAQUE = C.ATK_STATE_OPAQUE
const TEXT_ATTR_RISE = C.ATK_TEXT_ATTR_RISE
const ROLE_CALENDAR = C.ATK_ROLE_CALENDAR
const STATE_TRUNCATED = C.ATK_STATE_TRUNCATED
const ROLE_COMBO_BOX = C.ATK_ROLE_COMBO_BOX
const ROLE_SCROLL_BAR = C.ATK_ROLE_SCROLL_BAR
const ROLE_LAST_DEFINED = C.ATK_ROLE_LAST_DEFINED
const ROLE_DOCUMENT_TEXT = C.ATK_ROLE_DOCUMENT_TEXT
const STATE_MULTISELECTABLE = C.ATK_STATE_MULTISELECTABLE
const ROLE_TOOL_TIP = C.ATK_ROLE_TOOL_TIP
const TEXT_ATTR_STYLE = C.ATK_TEXT_ATTR_STYLE
const TEXT_ATTR_BG_COLOR = C.ATK_TEXT_ATTR_BG_COLOR
const ROLE_SPIN_BUTTON = C.ATK_ROLE_SPIN_BUTTON
const ROLE_MENU = C.ATK_ROLE_MENU
const ROLE_FRAME = C.ATK_ROLE_FRAME
const TEXT_ATTR_LEFT_MARGIN = C.ATK_TEXT_ATTR_LEFT_MARGIN
const ROLE_FOOTER = C.ATK_ROLE_FOOTER
const LAYER_BACKGROUND = C.ATK_LAYER_BACKGROUND
const ROLE_FONT_CHOOSER = C.ATK_ROLE_FONT_CHOOSER
const ROLE_TERMINAL = C.ATK_ROLE_TERMINAL
const TEXT_ATTR_BG_FULL_HEIGHT = C.ATK_TEXT_ATTR_BG_FULL_HEIGHT
const LAYER_OVERLAY = C.ATK_LAYER_OVERLAY
const ROLE_LINK = C.ATK_ROLE_LINK
const ROLE_DOCUMENT_FRAME = C.ATK_ROLE_DOCUMENT_FRAME
const ROLE_HTML_CONTAINER = C.ATK_ROLE_HTML_CONTAINER
const ROLE_FORM = C.ATK_ROLE_FORM
const ROLE_TEXT = C.ATK_ROLE_TEXT
const STATE_SUPPORTS_AUTOCOMPLETION = C.ATK_STATE_SUPPORTS_AUTOCOMPLETION
const RELATION_NODE_CHILD_OF = C.ATK_RELATION_NODE_CHILD_OF
const ROLE_CAPTION = C.ATK_ROLE_CAPTION
const ROLE_REDUNDANT_OBJECT = C.ATK_ROLE_REDUNDANT_OBJECT
const TEXT_ATTR_WEIGHT = C.ATK_TEXT_ATTR_WEIGHT
const ROLE_IMAGE_MAP = C.ATK_ROLE_IMAGE_MAP
const ROLE_CANVAS = C.ATK_ROLE_CANVAS
const ROLE_TABLE_COLUMN_HEADER = C.ATK_ROLE_TABLE_COLUMN_HEADER
const RELATION_EMBEDS = C.ATK_RELATION_EMBEDS
const TEXT_ATTR_FG_STIPPLE = C.ATK_TEXT_ATTR_FG_STIPPLE
const TEXT_ATTR_LAST_DEFINED = C.ATK_TEXT_ATTR_LAST_DEFINED
const ROLE_ARROW = C.ATK_ROLE_ARROW
const ROLE_INTERNAL_FRAME = C.ATK_ROLE_INTERNAL_FRAME
const ROLE_SEPARATOR = C.ATK_ROLE_SEPARATOR
const TEXT_ATTR_RIGHT_MARGIN = C.ATK_TEXT_ATTR_RIGHT_MARGIN
const ROLE_TREE = C.ATK_ROLE_TREE
const XY_SCREEN = C.ATK_XY_SCREEN
const TEXT_ATTR_PIXELS_INSIDE_WRAP = C.ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP
const ROLE_ENTRY = C.ATK_ROLE_ENTRY
const ROLE_PASSWORD_TEXT = C.ATK_ROLE_PASSWORD_TEXT
const STATE_TRANSIENT = C.ATK_STATE_TRANSIENT
const RELATION_MEMBER_OF = C.ATK_RELATION_MEMBER_OF
const STATE_INVALID = C.ATK_STATE_INVALID
const ROLE_RADIO_MENU_ITEM = C.ATK_ROLE_RADIO_MENU_ITEM
const TEXT_ATTR_PIXELS_BELOW_LINES = C.ATK_TEXT_ATTR_PIXELS_BELOW_LINES
const LAYER_CANVAS = C.ATK_LAYER_CANVAS
const ROLE_DOCUMENT_WEB = C.ATK_ROLE_DOCUMENT_WEB
const ROLE_PAGE_TAB_LIST = C.ATK_ROLE_PAGE_TAB_LIST
const LAYER_WINDOW = C.ATK_LAYER_WINDOW
const STATE_MANAGES_DESCENDANTS = C.ATK_STATE_MANAGES_DESCENDANTS
const ROLE_EMBEDDED = C.ATK_ROLE_EMBEDDED
const ROLE_SCROLL_PANE = C.ATK_ROLE_SCROLL_PANE
const ROLE_EDITBAR = C.ATK_ROLE_EDITBAR
const ROLE_RADIO_BUTTON = C.ATK_ROLE_RADIO_BUTTON
const ROLE_APPLICATION = C.ATK_ROLE_APPLICATION
const STATE_CHECKED = C.ATK_STATE_CHECKED
const RELATION_CONTROLLED_BY = C.ATK_RELATION_CONTROLLED_BY
const ROLE_DESKTOP_FRAME = C.ATK_ROLE_DESKTOP_FRAME
const ROLE_MENU_ITEM = C.ATK_ROLE_MENU_ITEM
const ROLE_CHECK_MENU_ITEM = C.ATK_ROLE_CHECK_MENU_ITEM
const ROLE_AUTOCOMPLETE = C.ATK_ROLE_AUTOCOMPLETE
const RELATION_POPUP_FOR = C.ATK_RELATION_POPUP_FOR
const STATE_ENABLED = C.ATK_STATE_ENABLED
const ROLE_TREE_ITEM = C.ATK_ROLE_TREE_ITEM
const STATE_LAST_DEFINED = C.ATK_STATE_LAST_DEFINED
const STATE_REQUIRED = C.ATK_STATE_REQUIRED
const ROLE_LIST_BOX = C.ATK_ROLE_LIST_BOX
const ROLE_SLIDER = C.ATK_ROLE_SLIDER
const TEXT_ATTR_VARIANT = C.ATK_TEXT_ATTR_VARIANT
const ROLE_RULER = C.ATK_ROLE_RULER
const STATE_VISIBLE = C.ATK_STATE_VISIBLE
const ROLE_TABLE_ROW = C.ATK_ROLE_TABLE_ROW
const KEY_EVENT_RELEASE = C.ATK_KEY_EVENT_RELEASE
const RELATION_EMBEDDED_BY = C.ATK_RELATION_EMBEDDED_BY
const STATE_INDETERMINATE = C.ATK_STATE_INDETERMINATE
const ROLE_PARAGRAPH = C.ATK_ROLE_PARAGRAPH
const RELATION_NODE_PARENT_OF = C.ATK_RELATION_NODE_PARENT_OF
const RELATION_LAST_DEFINED = C.ATK_RELATION_LAST_DEFINED
const STATE_RESIZABLE = C.ATK_STATE_RESIZABLE
const RELATION_FLOWS_TO = C.ATK_RELATION_FLOWS_TO
const ROLE_GROUPING = C.ATK_ROLE_GROUPING
const ROLE_LAYERED_PANE = C.ATK_ROLE_LAYERED_PANE
const STATE_VISITED = C.ATK_STATE_VISITED
const ROLE_LIST_ITEM = C.ATK_ROLE_LIST_ITEM
const RELATION_SUBWINDOW_OF = C.ATK_RELATION_SUBWINDOW_OF
const ROLE_DATE_EDITOR = C.ATK_ROLE_DATE_EDITOR
const STATE_HORIZONTAL = C.ATK_STATE_HORIZONTAL
const STATE_EDITABLE = C.ATK_STATE_EDITABLE
const XY_WINDOW = C.ATK_XY_WINDOW
const TEXT_CLIP_NONE = C.ATK_TEXT_CLIP_NONE
const TEXT_ATTR_PIXELS_ABOVE_LINES = C.ATK_TEXT_ATTR_PIXELS_ABOVE_LINES
const ROLE_FILE_CHOOSER = C.ATK_ROLE_FILE_CHOOSER
const STATE_SENSITIVE = C.ATK_STATE_SENSITIVE
const ROLE_COLOR_CHOOSER = C.ATK_ROLE_COLOR_CHOOSER
const LAYER_POPUP = C.ATK_LAYER_POPUP
const STATE_MODAL = C.ATK_STATE_MODAL
const LAYER_WIDGET = C.ATK_LAYER_WIDGET
const STATE_SELECTABLE = C.ATK_STATE_SELECTABLE
const TEXT_ATTR_UNDERLINE = C.ATK_TEXT_ATTR_UNDERLINE
const STATE_ARMED = C.ATK_STATE_ARMED
const ROLE_DOCUMENT_PRESENTATION = C.ATK_ROLE_DOCUMENT_PRESENTATION
const STATE_DEFAULT = C.ATK_STATE_DEFAULT
const ROLE_OPTION_PANE = C.ATK_ROLE_OPTION_PANE
const RELATION_LABELLED_BY = C.ATK_RELATION_LABELLED_BY
const TEXT_BOUNDARY_LINE_START = C.ATK_TEXT_BOUNDARY_LINE_START
const STATE_SINGLE_LINE = C.ATK_STATE_SINGLE_LINE
const ROLE_TABLE = C.ATK_ROLE_TABLE
const TEXT_ATTR_STRIKETHROUGH = C.ATK_TEXT_ATTR_STRIKETHROUGH
const ROLE_COLUMN_HEADER = C.ATK_ROLE_COLUMN_HEADER
const ROLE_DOCUMENT_EMAIL = C.ATK_ROLE_DOCUMENT_EMAIL
const STATE_INVALID_ENTRY = C.ATK_STATE_INVALID_ENTRY
const ROLE_DESKTOP_ICON = C.ATK_ROLE_DESKTOP_ICON
const HYPERLINK_IS_INLINE = C.ATK_HYPERLINK_IS_INLINE
const ROLE_HEADER = C.ATK_ROLE_HEADER
const ROLE_ACCEL_LABEL = C.ATK_ROLE_ACCEL_LABEL
const RELATION_CONTROLLER_FOR = C.ATK_RELATION_CONTROLLER_FOR
const ROLE_INVALID = C.ATK_ROLE_INVALID
const ROLE_HEADING = C.ATK_ROLE_HEADING
const ROLE_INFO_BAR = C.ATK_ROLE_INFO_BAR
const TEXT_BOUNDARY_LINE_END = C.ATK_TEXT_BOUNDARY_LINE_END
const ROLE_UNKNOWN = C.ATK_ROLE_UNKNOWN
const STATE_ICONIFIED = C.ATK_STATE_ICONIFIED
const KEY_EVENT_LAST_DEFINED = C.ATK_KEY_EVENT_LAST_DEFINED
const ROLE_PUSH_BUTTON = C.ATK_ROLE_PUSH_BUTTON
const ROLE_PANEL = C.ATK_ROLE_PANEL
const ROLE_LIST = C.ATK_ROLE_LIST
const RELATION_LABEL_FOR = C.ATK_RELATION_LABEL_FOR
const ATK_STATE_SELECTED = C.ATK_STATE_SELECTED
const ROLE_MENU_BAR = C.ATK_ROLE_MENU_BAR
const TEXT_ATTR_INDENT = C.ATK_TEXT_ATTR_INDENT
const TEXT_BOUNDARY_SENTENCE_START = C.ATK_TEXT_BOUNDARY_SENTENCE_START
const RELATION_NULL = C.ATK_RELATION_NULL
const ROLE_INPUT_METHOD_WINDOW = C.ATK_ROLE_INPUT_METHOD_WINDOW
const STATE_EXPANDABLE = C.ATK_STATE_EXPANDABLE
const TEXT_ATTR_EDITABLE = C.ATK_TEXT_ATTR_EDITABLE
const TEXT_ATTR_BG_STIPPLE = C.ATK_TEXT_ATTR_BG_STIPPLE
const STATE_SHOWING = C.ATK_STATE_SHOWING
const KEY_EVENT_PRESS = C.ATK_KEY_EVENT_PRESS
const ROLE_TREE_TABLE = C.ATK_ROLE_TREE_TABLE
const ROLE_TABLE_ROW_HEADER = C.ATK_ROLE_TABLE_ROW_HEADER
const TEXT_BOUNDARY_WORD_START = C.ATK_TEXT_BOUNDARY_WORD_START
const ROLE_DIRECTORY_PANE = C.ATK_ROLE_DIRECTORY_PANE
const ROLE_SPLIT_PANE = C.ATK_ROLE_SPLIT_PANE
const ROLE_LABEL = C.ATK_ROLE_LABEL
const ROLE_NOTIFICATION = C.ATK_ROLE_NOTIFICATION
const TEXT_ATTR_LANGUAGE = C.ATK_TEXT_ATTR_LANGUAGE
const ROLE_ROOT_PANE = C.ATK_ROLE_ROOT_PANE
const TEXT_CLIP_MIN = C.ATK_TEXT_CLIP_MIN
const ROLE_DRAWING_AREA = C.ATK_ROLE_DRAWING_AREA
const STATE_STALE = C.ATK_STATE_STALE
const ROLE_ICON = C.ATK_ROLE_ICON
const TEXT_ATTR_FAMILY_NAME = C.ATK_TEXT_ATTR_FAMILY_NAME
const ROLE_TEAR_OFF_MENU_ITEM = C.ATK_ROLE_TEAR_OFF_MENU_ITEM
const ROLE_WINDOW = C.ATK_ROLE_WINDOW
const STATE_ANIMATED = C.ATK_STATE_ANIMATED
const TEXT_ATTR_INVALID = C.ATK_TEXT_ATTR_INVALID
const TEXT_ATTR_FG_COLOR = C.ATK_TEXT_ATTR_FG_COLOR
const ROLE_VIEWPORT = C.ATK_ROLE_VIEWPORT
const TEXT_BOUNDARY_WORD_END = C.ATK_TEXT_BOUNDARY_WORD_END
const TEXT_BOUNDARY_CHAR = C.ATK_TEXT_BOUNDARY_CHAR
const ROLE_CHECK_BOX = C.ATK_ROLE_CHECK_BOX
const TEXT_ATTR_INVISIBLE = C.ATK_TEXT_ATTR_INVISIBLE
const ROLE_POPUP_MENU = C.ATK_ROLE_POPUP_MENU
const ROLE_ANIMATION = C.ATK_ROLE_ANIMATION
const ROLE_IMAGE = C.ATK_ROLE_IMAGE
const RELATION_DESCRIPTION_FOR = C.ATK_RELATION_DESCRIPTION_FOR
const ROLE_STATUSBAR = C.ATK_ROLE_STATUSBAR
const TEXT_BOUNDARY_SENTENCE_END = C.ATK_TEXT_BOUNDARY_SENTENCE_END
const TEXT_ATTR_SIZE = C.ATK_TEXT_ATTR_SIZE
const STATE_PRESSED = C.ATK_STATE_PRESSED
