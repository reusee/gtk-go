from collections import namedtuple
Spec = namedtuple('Spec', ['return_type', 'parameters'])
Param = namedtuple('Param', ['name', 'type'])
func_specs = {
  '__builtin_bswap32': Spec(
    return_type = 'uint32_t',
    parameters = [
      Param(
        type = 'uint32_t',
        name = 'x',
      ),
    ],
  ),
  '__builtin_bswap64': Spec(
    return_type = 'uint64_t',
    parameters = [
      Param(
        type = 'uint64_t',
        name = 'x',
      ),
    ],
  ),
  'clock': Spec(
    return_type = 'clock_t',
    parameters = [
    ],
  ),
  'time': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'time_t *',
        name = '__timer',
      ),
    ],
  ),
  'difftime': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'time_t',
        name = '__time1',
      ),
      Param(
        type = 'time_t',
        name = '__time0',
      ),
    ],
  ),
  'mktime': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'strftime': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxsize',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'strftime_l': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxsize',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
      Param(
        type = '__locale_t',
        name = '__loc',
      ),
    ],
  ),
  'gmtime': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'localtime': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'gmtime_r': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'localtime_r': Spec(
    return_type = 'struct tm *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'struct tm *restrict',
        name = '__tp',
      ),
    ],
  ),
  'asctime': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'ctime': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__timer',
      ),
    ],
  ),
  'asctime_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const struct tm *restrict',
        name = '__tp',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'ctime_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const time_t *restrict',
        name = '__timer',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'tzset': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'stime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const time_t *',
        name = '__when',
      ),
    ],
  ),
  'timegm': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'timelocal': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'struct tm *',
        name = '__tp',
      ),
    ],
  ),
  'dysize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__year',
      ),
    ],
  ),
  'nanosleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const struct timespec *',
        name = '__requested_time',
      ),
      Param(
        type = 'struct timespec *',
        name = '__remaining',
      ),
    ],
  ),
  'clock_getres': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct timespec *',
        name = '__res',
      ),
    ],
  ),
  'clock_gettime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct timespec *',
        name = '__tp',
      ),
    ],
  ),
  'clock_settime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'const struct timespec *',
        name = '__tp',
      ),
    ],
  ),
  'clock_nanosleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
      Param(
        type = 'const struct timespec *',
        name = '__req',
      ),
      Param(
        type = 'struct timespec *',
        name = '__rem',
      ),
    ],
  ),
  'clock_getcpuclockid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pid_t',
        name = '__pid',
      ),
      Param(
        type = 'clockid_t *',
        name = '__clock_id',
      ),
    ],
  ),
  'timer_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'clockid_t',
        name = '__clock_id',
      ),
      Param(
        type = 'struct sigevent *restrict',
        name = '__evp',
      ),
      Param(
        type = 'timer_t *restrict',
        name = '__timerid',
      ),
    ],
  ),
  'timer_delete': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
    ],
  ),
  'timer_settime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
      Param(
        type = 'const struct itimerspec *restrict',
        name = '__value',
      ),
      Param(
        type = 'struct itimerspec *restrict',
        name = '__ovalue',
      ),
    ],
  ),
  'timer_gettime': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
      Param(
        type = 'struct itimerspec *',
        name = '__value',
      ),
    ],
  ),
  'timer_getoverrun': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'timer_t',
        name = '__timerid',
      ),
    ],
  ),
  'g_array_new': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'zero_terminated',
      ),
      Param(
        type = 'gboolean',
        name = 'clear_',
      ),
      Param(
        type = 'guint',
        name = 'element_size',
      ),
    ],
  ),
  'g_array_sized_new': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'zero_terminated',
      ),
      Param(
        type = 'gboolean',
        name = 'clear_',
      ),
      Param(
        type = 'guint',
        name = 'element_size',
      ),
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_array_free': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_array_ref': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_get_element_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
    ],
  ),
  'g_array_append_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_prepend_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_insert_vals': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_array_set_size': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_array_remove_index': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_array_remove_index_fast': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_array_remove_range': Spec(
    return_type = 'GArray *',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_array_set_clear_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GArray *',
        name = 'array',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'clear_func',
      ),
    ],
  ),
  'g_ptr_array_new': Spec(
    return_type = 'GPtrArray *',
    parameters = [
    ],
  ),
  'g_ptr_array_new_with_free_func': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_sized_new': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_ptr_array_new_full': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_free': Spec(
    return_type = 'gpointer *',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_seg',
      ),
    ],
  ),
  'g_ptr_array_ref': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
    ],
  ),
  'g_ptr_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
    ],
  ),
  'g_ptr_array_set_free_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'element_free_func',
      ),
    ],
  ),
  'g_ptr_array_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_ptr_array_remove_index': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_ptr_array_remove_index_fast': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_ptr_array_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_remove_fast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_remove_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_ptr_array_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_ptr_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_ptr_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_ptr_array_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPtrArray *',
        name = 'array',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_byte_array_new': Spec(
    return_type = 'GByteArray *',
    parameters = [
    ],
  ),
  'g_byte_array_new_take': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'guint8 *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_sized_new': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'reserved_size',
      ),
    ],
  ),
  'g_byte_array_free': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_byte_array_free_to_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_ref': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
    ],
  ),
  'g_byte_array_append': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_prepend': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'len',
      ),
    ],
  ),
  'g_byte_array_set_size': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_byte_array_remove_index': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_byte_array_remove_index_fast': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_byte_array_remove_range': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
    ],
  ),
  'g_byte_array_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_byte_array_sort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GByteArray *',
        name = 'array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_atomic_int_get': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_int_inc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_dec_and_test': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_int_compare_and_exchange': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'oldval',
      ),
      Param(
        type = 'gint',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_int_add': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_and': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_or': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_xor': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'volatile guint *',
        name = 'atomic',
      ),
      Param(
        type = 'guint',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
    ],
  ),
  'g_atomic_pointer_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_pointer_compare_and_exchange': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
    ],
  ),
  'g_atomic_pointer_add': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gssize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_and': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_or': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_pointer_xor': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'atomic',
      ),
      Param(
        type = 'gsize',
        name = 'val',
      ),
    ],
  ),
  'g_atomic_int_exchange_and_add': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'atomic',
      ),
      Param(
        type = 'gint',
        name = 'val',
      ),
    ],
  ),
  'g_quark_try_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_from_static_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_from_string': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_quark_to_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_intern_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_intern_static_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_error_new': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_error_new_literal': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_error_new_valist': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_error_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_error_copy': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_error_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
    ],
  ),
  'g_set_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_error_literal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_propagate_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'dest',
      ),
      Param(
        type = 'GError *',
        name = 'src',
      ),
    ],
  ),
  'g_clear_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'g_prefix_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'err',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_propagate_prefixed_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'dest',
      ),
      Param(
        type = 'GError *',
        name = 'src',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_thread_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_thread_ref': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_new': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_thread_try_new': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_self': Spec(
    return_type = 'GThread *',
    parameters = [
    ],
  ),
  'g_thread_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'retval',
      ),
    ],
  ),
  'g_thread_join': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
    ],
  ),
  'g_thread_yield': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_rw_lock_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_writer_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rw_lock_reader_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRWLock *',
        name = 'rw_lock',
      ),
    ],
  ),
  'g_rec_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_rec_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRecMutex *',
        name = 'rec_mutex',
      ),
    ],
  ),
  'g_cond_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_wait': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_cond_signal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_broadcast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_wait_until': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'gint64',
        name = 'end_time',
      ),
    ],
  ),
  'g_private_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
    ],
  ),
  'g_private_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_private_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPrivate *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_once_impl': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GOnce *',
        name = 'once',
      ),
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'arg',
      ),
    ],
  ),
  'g_once_init_enter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'location',
      ),
    ],
  ),
  'g_once_init_leave': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'location',
      ),
      Param(
        type = 'gsize',
        name = 'result',
      ),
    ],
  ),
  'g_async_queue_new': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
    ],
  ),
  'g_async_queue_new_full': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'item_free_func',
      ),
    ],
  ),
  'g_async_queue_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_ref': Spec(
    return_type = 'GAsyncQueue *',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_ref_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_unref_and_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_async_queue_push_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_async_queue_push_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_push_sorted_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_try_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_try_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_timeout_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint64',
        name = 'timeout',
      ),
    ],
  ),
  'g_async_queue_timeout_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint64',
        name = 'timeout',
      ),
    ],
  ),
  'g_async_queue_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_length_unlocked': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_async_queue_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_sort_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_queue_timed_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'end_time',
      ),
    ],
  ),
  'g_async_queue_timed_pop_unlocked': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'end_time',
      ),
    ],
  ),
  '__sigismember': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const __sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sigaddset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sigdelset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__sigset_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '__sysv_signal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'signal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'kill': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'killpg': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pgrp',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'raise': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'ssignal': Spec(
    return_type = '__sighandler_t',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = '__sighandler_t',
        name = '__handler',
      ),
    ],
  ),
  'gsignal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
    ],
  ),
  'psignal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'psiginfo': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const siginfo_t *',
        name = '__pinfo',
      ),
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  '__sigpause': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig_or_mask',
      ),
      Param(
        type = 'int',
        name = '__is_sig',
      ),
    ],
  ),
  'sigblock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__mask',
      ),
    ],
  ),
  'sigsetmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__mask',
      ),
    ],
  ),
  'siggetmask': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'sigemptyset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigfillset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigaddset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigdelset': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigismember': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *',
        name = '__set',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  'sigprocmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__how',
      ),
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'sigset_t *restrict',
        name = '__oset',
      ),
    ],
  ),
  'sigsuspend': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigaction': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const struct sigaction *restrict',
        name = '__act',
      ),
      Param(
        type = 'struct sigaction *restrict',
        name = '__oact',
      ),
    ],
  ),
  'sigpending': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'sigset_t *',
        name = '__set',
      ),
    ],
  ),
  'sigwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'int *restrict',
        name = '__sig',
      ),
    ],
  ),
  'sigwaitinfo': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'siginfo_t *restrict',
        name = '__info',
      ),
    ],
  ),
  'sigtimedwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const sigset_t *restrict',
        name = '__set',
      ),
      Param(
        type = 'siginfo_t *restrict',
        name = '__info',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__timeout',
      ),
    ],
  ),
  'sigqueue': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const union sigval',
        name = '__val',
      ),
    ],
  ),
  'sigvec': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'const struct sigvec *',
        name = '__vec',
      ),
      Param(
        type = 'struct sigvec *',
        name = '__ovec',
      ),
    ],
  ),
  'sigreturn': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct sigcontext *',
        name = '__scp',
      ),
    ],
  ),
  'siginterrupt': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__sig',
      ),
      Param(
        type = 'int',
        name = '__interrupt',
      ),
    ],
  ),
  'sigstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct sigstack *',
        name = '__ss',
      ),
      Param(
        type = 'struct sigstack *',
        name = '__oss',
      ),
    ],
  ),
  'sigaltstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const struct sigaltstack *restrict',
        name = '__ss',
      ),
      Param(
        type = 'struct sigaltstack *restrict',
        name = '__oss',
      ),
    ],
  ),
  'pthread_sigmask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__how',
      ),
      Param(
        type = 'const __sigset_t *restrict',
        name = '__newmask',
      ),
      Param(
        type = '__sigset_t *restrict',
        name = '__oldmask',
      ),
    ],
  ),
  'pthread_kill': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__threadid',
      ),
      Param(
        type = 'int',
        name = '__signo',
      ),
    ],
  ),
  '__libc_current_sigrtmin': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  '__libc_current_sigrtmax': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'g_on_error_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prg_name',
      ),
    ],
  ),
  'g_on_error_stack_trace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prg_name',
      ),
    ],
  ),
  'g_base64_encode_step': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'in',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
      Param(
        type = 'gboolean',
        name = 'break_lines',
      ),
      Param(
        type = 'gchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'gint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_encode_close': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'break_lines',
      ),
      Param(
        type = 'gchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'gint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_encode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_base64_decode_step': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'in',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
      Param(
        type = 'guchar *',
        name = 'out',
      ),
      Param(
        type = 'gint *',
        name = 'state',
      ),
      Param(
        type = 'guint *',
        name = 'save',
      ),
    ],
  ),
  'g_base64_decode': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gsize *',
        name = 'out_len',
      ),
    ],
  ),
  'g_base64_decode_inplace': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'text',
      ),
      Param(
        type = 'gsize *',
        name = 'out_len',
      ),
    ],
  ),
  'g_bit_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bit_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bit_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile gint *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_pointer_bit_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile void *',
        name = 'address',
      ),
      Param(
        type = 'gint',
        name = 'lock_bit',
      ),
    ],
  ),
  'g_bookmark_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_bookmark_file_new': Spec(
    return_type = 'GBookmarkFile *',
    parameters = [
    ],
  ),
  'g_bookmark_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
    ],
  ),
  'g_bookmark_file_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_load_from_data_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_to_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'g_bookmark_file_get_title': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_bookmark_file_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_mime_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_bookmark_file_get_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_groups': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar **',
        name = 'groups',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_bookmark_file_add_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
    ],
  ),
  'g_bookmark_file_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_groups': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_add_application': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'exec',
      ),
    ],
  ),
  'g_bookmark_file_has_application': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_applications': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_app_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'exec',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
      Param(
        type = 'time_t',
        name = 'stamp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_get_app_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gchar **',
        name = 'exec',
      ),
      Param(
        type = 'guint *',
        name = 'count',
      ),
      Param(
        type = 'time_t *',
        name = 'stamp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_is_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gboolean',
        name = 'is_private',
      ),
    ],
  ),
  'g_bookmark_file_get_is_private': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'href',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_bookmark_file_get_icon': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gchar **',
        name = 'href',
      ),
      Param(
        type = 'gchar **',
        name = 'mime_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_added': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'added',
      ),
    ],
  ),
  'g_bookmark_file_get_added': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_modified': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'modified',
      ),
    ],
  ),
  'g_bookmark_file_get_modified': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_set_visited': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'time_t',
        name = 'visited',
      ),
    ],
  ),
  'g_bookmark_file_get_visited': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_has_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'g_bookmark_file_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
    ],
  ),
  'g_bookmark_file_get_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_bookmark_file_remove_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_remove_application': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_remove_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bookmark_file_move_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBookmarkFile *',
        name = 'bookmark',
      ),
      Param(
        type = 'const gchar *',
        name = 'old_uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'new_uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bytes_new': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_take': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_static': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_new_with_free_func': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_bytes_new_from_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_bytes_get_data': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_ref': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_unref_to_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
    ],
  ),
  'g_bytes_unref_to_array': Spec(
    return_type = 'GByteArray *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes',
      ),
    ],
  ),
  'g_bytes_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'bytes2',
      ),
    ],
  ),
  'g_bytes_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'bytes1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'bytes2',
      ),
    ],
  ),
  'g_get_charset': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'charset',
      ),
    ],
  ),
  'g_get_codeset': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_get_language_names': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_locale_variants': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
    ],
  ),
  'g_checksum_type_get_length': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
    ],
  ),
  'g_checksum_new': Spec(
    return_type = 'GChecksum *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
    ],
  ),
  'g_checksum_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_copy': Spec(
    return_type = 'GChecksum *',
    parameters = [
      Param(
        type = 'const GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_checksum_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
    ],
  ),
  'g_checksum_get_digest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GChecksum *',
        name = 'checksum',
      ),
      Param(
        type = 'guint8 *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'digest_len',
      ),
    ],
  ),
  'g_compute_checksum_for_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_checksum_for_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_checksum_for_bytes': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'checksum_type',
      ),
      Param(
        type = 'GBytes *',
        name = 'data',
      ),
    ],
  ),
  'g_convert_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_iconv_open': Spec(
    return_type = 'GIConv',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
    ],
  ),
  'g_iconv': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
      Param(
        type = 'gchar **',
        name = 'inbuf',
      ),
      Param(
        type = 'gsize *',
        name = 'inbytes_left',
      ),
      Param(
        type = 'gchar **',
        name = 'outbuf',
      ),
      Param(
        type = 'gsize *',
        name = 'outbytes_left',
      ),
    ],
  ),
  'g_iconv_close': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
    ],
  ),
  'g_convert': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_convert_with_iconv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GIConv',
        name = 'converter',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_convert_with_fallback': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'const gchar *',
        name = 'to_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_codeset',
      ),
      Param(
        type = 'const gchar *',
        name = 'fallback',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_locale_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'opsysstring',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_locale_from_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'utf8string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'opsysstring',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_from_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'utf8string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_from_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'gchar **',
        name = 'hostname',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_to_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_filename_display_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_get_filename_charsets': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar ***',
        name = 'charsets',
      ),
    ],
  ),
  'g_filename_display_basename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_uri_list_extract_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri_list',
      ),
    ],
  ),
  'g_datalist_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_datalist_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_datalist_id_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_id_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'g_datalist_id_dup_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_datalist_id_replace_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_datalist_id_remove_no_notify': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'GDataForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_datalist_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_datalist_unset_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_datalist_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
    ],
  ),
  'g_dataset_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
    ],
  ),
  'g_dataset_id_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_datalist_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GData **',
        name = 'datalist',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_dataset_id_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'g_dataset_id_remove_no_notify': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GQuark',
        name = 'key_id',
      ),
    ],
  ),
  'g_dataset_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dataset_location',
      ),
      Param(
        type = 'GDataForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_date_new': Spec(
    return_type = 'GDate *',
    parameters = [
    ],
  ),
  'g_date_new_dmy': Spec(
    return_type = 'GDate *',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_new_julian': Spec(
    return_type = 'GDate *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'julian_day',
      ),
    ],
  ),
  'g_date_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_valid_day': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
    ],
  ),
  'g_date_valid_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
    ],
  ),
  'g_date_valid_year': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_valid_weekday': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateWeekday',
        name = 'weekday',
      ),
    ],
  ),
  'g_date_valid_julian': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint32',
        name = 'julian_date',
      ),
    ],
  ),
  'g_date_valid_dmy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_weekday': Spec(
    return_type = 'GDateWeekday',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_month': Spec(
    return_type = 'GDateMonth',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_year': Spec(
    return_type = 'GDateYear',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_day': Spec(
    return_type = 'GDateDay',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_julian': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_day_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_monday_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_sunday_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_get_iso8601_week_of_year': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_dates',
      ),
    ],
  ),
  'g_date_set_parse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'g_date_set_time_t': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'time_t',
        name = 'timet',
      ),
    ],
  ),
  'g_date_set_time_val': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'g_date_set_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GTime',
        name = 'time_',
      ),
    ],
  ),
  'g_date_set_month': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
    ],
  ),
  'g_date_set_day': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
    ],
  ),
  'g_date_set_year': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_set_dmy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'GDateDay',
        name = 'day',
      ),
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'y',
      ),
    ],
  ),
  'g_date_set_julian': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint32',
        name = 'julian_date',
      ),
    ],
  ),
  'g_date_is_first_of_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_is_last_of_month': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_date_add_days': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_days',
      ),
    ],
  ),
  'g_date_subtract_days': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_days',
      ),
    ],
  ),
  'g_date_add_months': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_months',
      ),
    ],
  ),
  'g_date_subtract_months': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_months',
      ),
    ],
  ),
  'g_date_add_years': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_years',
      ),
    ],
  ),
  'g_date_subtract_years': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'guint',
        name = 'n_years',
      ),
    ],
  ),
  'g_date_is_leap_year': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_days_in_month': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateMonth',
        name = 'month',
      ),
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_monday_weeks_in_year': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_get_sunday_weeks_in_year': Spec(
    return_type = 'guint8',
    parameters = [
      Param(
        type = 'GDateYear',
        name = 'year',
      ),
    ],
  ),
  'g_date_days_between': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date1',
      ),
      Param(
        type = 'const GDate *',
        name = 'date2',
      ),
    ],
  ),
  'g_date_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'lhs',
      ),
      Param(
        type = 'const GDate *',
        name = 'rhs',
      ),
    ],
  ),
  'g_date_to_struct_tm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
      Param(
        type = 'struct tm *',
        name = 'tm',
      ),
    ],
  ),
  'g_date_clamp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date',
      ),
      Param(
        type = 'const GDate *',
        name = 'min_date',
      ),
      Param(
        type = 'const GDate *',
        name = 'max_date',
      ),
    ],
  ),
  'g_date_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDate *',
        name = 'date1',
      ),
      Param(
        type = 'GDate *',
        name = 'date2',
      ),
    ],
  ),
  'g_date_strftime': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 's',
      ),
      Param(
        type = 'gsize',
        name = 'slen',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'const GDate *',
        name = 'date',
      ),
    ],
  ),
  'g_time_zone_new': Spec(
    return_type = 'GTimeZone *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'identifier',
      ),
    ],
  ),
  'g_time_zone_new_utc': Spec(
    return_type = 'GTimeZone *',
    parameters = [
    ],
  ),
  'g_time_zone_new_local': Spec(
    return_type = 'GTimeZone *',
    parameters = [
    ],
  ),
  'g_time_zone_ref': Spec(
    return_type = 'GTimeZone *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_time_zone_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_time_zone_find_interval': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'GTimeType',
        name = 'type',
      ),
      Param(
        type = 'gint64',
        name = 'time_',
      ),
    ],
  ),
  'g_time_zone_adjust_time': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'GTimeType',
        name = 'type',
      ),
      Param(
        type = 'gint64 *',
        name = 'time_',
      ),
    ],
  ),
  'g_time_zone_get_abbreviation': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_time_zone_get_offset': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_time_zone_is_dst': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'interval',
      ),
    ],
  ),
  'g_date_time_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_ref': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_new_now': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_date_time_new_now_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
    ],
  ),
  'g_date_time_new_now_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
    ],
  ),
  'g_date_time_new_from_unix_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint64',
        name = 't',
      ),
    ],
  ),
  'g_date_time_new_from_unix_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint64',
        name = 't',
      ),
    ],
  ),
  'g_date_time_new_from_timeval_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'const GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_new_from_timeval_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'const GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_new': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_new_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_new_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'gint',
        name = 'year',
      ),
      Param(
        type = 'gint',
        name = 'month',
      ),
      Param(
        type = 'gint',
        name = 'day',
      ),
      Param(
        type = 'gint',
        name = 'hour',
      ),
      Param(
        type = 'gint',
        name = 'minute',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_add': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeSpan',
        name = 'timespan',
      ),
    ],
  ),
  'g_date_time_add_years': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'years',
      ),
    ],
  ),
  'g_date_time_add_months': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'months',
      ),
    ],
  ),
  'g_date_time_add_weeks': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'weeks',
      ),
    ],
  ),
  'g_date_time_add_days': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'days',
      ),
    ],
  ),
  'g_date_time_add_hours': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'hours',
      ),
    ],
  ),
  'g_date_time_add_minutes': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'minutes',
      ),
    ],
  ),
  'g_date_time_add_seconds': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_add_full': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint',
        name = 'years',
      ),
      Param(
        type = 'gint',
        name = 'months',
      ),
      Param(
        type = 'gint',
        name = 'days',
      ),
      Param(
        type = 'gint',
        name = 'hours',
      ),
      Param(
        type = 'gint',
        name = 'minutes',
      ),
      Param(
        type = 'gdouble',
        name = 'seconds',
      ),
    ],
  ),
  'g_date_time_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dt1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'dt2',
      ),
    ],
  ),
  'g_date_time_difference': Spec(
    return_type = 'GTimeSpan',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'end',
      ),
      Param(
        type = 'GDateTime *',
        name = 'begin',
      ),
    ],
  ),
  'g_date_time_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'dt1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'dt2',
      ),
    ],
  ),
  'g_date_time_get_ymd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'gint *',
        name = 'year',
      ),
      Param(
        type = 'gint *',
        name = 'month',
      ),
      Param(
        type = 'gint *',
        name = 'day',
      ),
    ],
  ),
  'g_date_time_get_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_month': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_month': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_week_numbering_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_week_of_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_week': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_day_of_year': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_hour': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_minute': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_second': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_microsecond': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_seconds': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_unix': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_timeval': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'tv',
      ),
    ],
  ),
  'g_date_time_get_utc_offset': Spec(
    return_type = 'GTimeSpan',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_get_timezone_abbreviation': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_is_daylight_savings': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_timezone': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'GTimeZone *',
        name = 'tz',
      ),
    ],
  ),
  'g_date_time_to_local': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_to_utc': Spec(
    return_type = 'GDateTime *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
    ],
  ),
  'g_date_time_format': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDateTime *',
        name = 'datetime',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dir_open': Spec(
    return_type = 'GDir *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dir_read_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_dir_rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_dir_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDir *',
        name = 'dir',
      ),
    ],
  ),
  'g_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_setenv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'g_unsetenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_listenv': Spec(
    return_type = 'gchar **',
    parameters = [
    ],
  ),
  'g_get_environ': Spec(
    return_type = 'gchar **',
    parameters = [
    ],
  ),
  'g_environ_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_environ_setenv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'g_environ_unsetenv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'const gchar *',
        name = 'variable',
      ),
    ],
  ),
  'g_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_file_error_from_errno': Spec(
    return_type = 'GFileError',
    parameters = [
      Param(
        type = 'gint',
        name = 'err_no',
      ),
    ],
  ),
  'g_file_test': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GFileTest',
        name = 'test',
      ),
    ],
  ),
  'g_file_get_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gchar **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'contents',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_read_link': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mkdtemp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
    ],
  ),
  'g_mkdtemp_full': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_mkstemp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
    ],
  ),
  'g_mkstemp_full': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gint',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_file_open_tmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'gchar **',
        name = 'name_used',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dir_make_tmp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'tmpl',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_build_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_element',
      ),
    ],
  ),
  'g_build_pathv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'gchar **',
        name = 'args',
      ),
    ],
  ),
  'g_build_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'first_element',
      ),
    ],
  ),
  'g_build_filenamev': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'args',
      ),
    ],
  ),
  'g_mkdir_with_parents': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pathname',
      ),
      Param(
        type = 'gint',
        name = 'mode',
      ),
    ],
  ),
  'g_path_is_absolute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_path_skip_root': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_basename': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_get_current_dir': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_path_get_basename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_path_get_dirname': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'g_strip_context': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgval',
      ),
    ],
  ),
  'g_dgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
    ],
  ),
  'g_dcgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'gint',
        name = 'category',
      ),
    ],
  ),
  'g_dngettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid_plural',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
    ],
  ),
  'g_dpgettext': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgctxtid',
      ),
      Param(
        type = 'gsize',
        name = 'msgidoffset',
      ),
    ],
  ),
  'g_dpgettext2': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'msgid',
      ),
    ],
  ),
  'g_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
    ],
  ),
  'g_clear_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer *',
        name = 'pp',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_malloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_malloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_realloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_malloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_malloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_try_realloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_bytes',
      ),
    ],
  ),
  'g_malloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_malloc0_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_realloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_malloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_malloc0_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_try_realloc_n': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
      Param(
        type = 'gsize',
        name = 'n_blocks',
      ),
      Param(
        type = 'gsize',
        name = 'n_block_bytes',
      ),
    ],
  ),
  'g_mem_set_vtable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemVTable *',
        name = 'vtable',
      ),
    ],
  ),
  'g_mem_is_system_malloc': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_mem_profile': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_node_new': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
    ],
  ),
  'g_node_unlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_copy_deep': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'copy_func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_copy': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert_before': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'sibling',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_insert_after': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'sibling',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_prepend': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'parent',
      ),
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_n_nodes': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_node_get_root': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_is_ancestor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GNode *',
        name = 'descendant',
      ),
    ],
  ),
  'g_node_depth': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_find': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseType',
        name = 'order',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_traverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
      Param(
        type = 'GTraverseType',
        name = 'order',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'max_depth',
      ),
      Param(
        type = 'GNodeTraverseFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_max_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'root',
      ),
    ],
  ),
  'g_node_children_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'GNodeForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_reverse_children': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_n_children': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_nth_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_node_last_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_find_child': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GTraverseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_child_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'GNode *',
        name = 'child',
      ),
    ],
  ),
  'g_node_child_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_node_first_sibling': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_node_last_sibling': Spec(
    return_type = 'GNode *',
    parameters = [
      Param(
        type = 'GNode *',
        name = 'node',
      ),
    ],
  ),
  'g_list_alloc': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_list_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_free_1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_list_append': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_prepend': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_insert': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_list_insert_sorted': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_list_insert_sorted_with_data': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_insert_before': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_concat': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list1',
      ),
      Param(
        type = 'GList *',
        name = 'list2',
      ),
    ],
  ),
  'g_list_remove': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_remove_all': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_remove_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'llink',
      ),
    ],
  ),
  'g_list_delete_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_list_reverse': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_copy': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_copy_deep': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_nth': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_list_nth_prev': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_list_find': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_find_custom': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_list_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GList *',
        name = 'llink',
      ),
    ],
  ),
  'g_list_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_list_last': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_first': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'g_list_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_sort': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_list_sort_with_data': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_list_nth_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_hash_table_new': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_hash_table_new_full': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'value_destroy_func',
      ),
    ],
  ),
  'g_hash_table_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_steal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_steal_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_lookup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_hash_table_lookup_extended': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'gconstpointer',
        name = 'lookup_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'orig_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_find': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'predicate',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_foreach_remove': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_foreach_steal': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
      Param(
        type = 'GHRFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_hash_table_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_get_keys': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_get_values': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_iter_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer *',
        name = 'key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_iter_get_hash_table': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_iter_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_iter_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_hash_table_iter_steal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTableIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_hash_table_ref': Spec(
    return_type = 'GHashTable *',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_hash_table_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHashTable *',
        name = 'hash_table',
      ),
    ],
  ),
  'g_str_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_str_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_int_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_int_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_int64_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_int64_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_double_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_double_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_direct_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v',
      ),
    ],
  ),
  'g_direct_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'v1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v2',
      ),
    ],
  ),
  'g_hmac_new': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
    ],
  ),
  'g_hmac_copy': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'const GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_ref': Spec(
    return_type = 'GHmac *',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_hmac_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
    ],
  ),
  'g_hmac_get_digest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHmac *',
        name = 'hmac',
      ),
      Param(
        type = 'guint8 *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'digest_len',
      ),
    ],
  ),
  'g_compute_hmac_for_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_compute_hmac_for_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GChecksumType',
        name = 'digest_type',
      ),
      Param(
        type = 'const guchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize',
        name = 'key_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_hook_list_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'guint',
        name = 'hook_size',
      ),
    ],
  ),
  'g_hook_list_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
    ],
  ),
  'g_hook_alloc': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
    ],
  ),
  'g_hook_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_ref': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_destroy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_hook_destroy_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'sibling',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
    ],
  ),
  'g_hook_insert_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
      Param(
        type = 'GHookCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_hook_get': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_hook_find': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'GHookFindFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_find_data': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_find_func': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
    ],
  ),
  'g_hook_find_func_data': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'need_valids',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_hook_first_valid': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_in_call',
      ),
    ],
  ),
  'g_hook_next_valid': Spec(
    return_type = 'GHook *',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'GHook *',
        name = 'hook',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_in_call',
      ),
    ],
  ),
  'g_hook_compare_ids': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GHook *',
        name = 'new_hook',
      ),
      Param(
        type = 'GHook *',
        name = 'sibling',
      ),
    ],
  ),
  'g_hook_list_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
    ],
  ),
  'g_hook_list_invoke_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
    ],
  ),
  'g_hook_list_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
      Param(
        type = 'GHookMarshaller',
        name = 'marshaller',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_hook_list_marshal_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GHookList *',
        name = 'hook_list',
      ),
      Param(
        type = 'gboolean',
        name = 'may_recurse',
      ),
      Param(
        type = 'GHookCheckMarshaller',
        name = 'marshaller',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_hostname_is_non_ascii': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_is_ascii_encoded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_is_ip_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_to_ascii': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_hostname_to_unicode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
    ],
  ),
  'g_poll': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'guint',
        name = 'nfds',
      ),
      Param(
        type = 'gint',
        name = 'timeout',
      ),
    ],
  ),
  'g_slist_alloc': Spec(
    return_type = 'GSList *',
    parameters = [
    ],
  ),
  'g_slist_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_free_1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_slist_append': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_prepend': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_insert': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_slist_insert_sorted': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_slist_insert_sorted_with_data': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_insert_before': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'slist',
      ),
      Param(
        type = 'GSList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_concat': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list1',
      ),
      Param(
        type = 'GSList *',
        name = 'list2',
      ),
    ],
  ),
  'g_slist_remove': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_remove_all': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_remove_link': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'link_',
      ),
    ],
  ),
  'g_slist_delete_link': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'link_',
      ),
    ],
  ),
  'g_slist_reverse': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_copy': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_copy_deep': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCopyFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_nth': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_slist_find': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_find_custom': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_slist_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GSList *',
        name = 'llink',
      ),
    ],
  ),
  'g_slist_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_slist_last': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  'g_slist_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_sort': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_slist_sort_with_data': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_slist_nth_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_main_context_new': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_ref': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_iteration': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'may_block',
      ),
    ],
  ),
  'g_main_context_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_find_source_by_id': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'guint',
        name = 'source_id',
      ),
    ],
  ),
  'g_main_context_find_source_by_user_data': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_main_context_find_source_by_funcs_user_data': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_main_context_wakeup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_is_owner': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_main_context_prepare': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'priority',
      ),
    ],
  ),
  'g_main_context_query': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'max_priority',
      ),
      Param(
        type = 'gint *',
        name = 'timeout_',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'gint',
        name = 'n_fds',
      ),
    ],
  ),
  'g_main_context_check': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'max_priority',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fds',
      ),
      Param(
        type = 'gint',
        name = 'n_fds',
      ),
    ],
  ),
  'g_main_context_dispatch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_set_poll_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFunc',
        name = 'func',
      ),
    ],
  ),
  'g_main_context_get_poll_func': Spec(
    return_type = 'GPollFunc',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_add_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_main_context_remove_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_main_depth': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'g_main_current_source': Spec(
    return_type = 'GSource *',
    parameters = [
    ],
  ),
  'g_main_context_push_thread_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_pop_thread_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_main_context_get_thread_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_context_ref_thread_default': Spec(
    return_type = 'GMainContext *',
    parameters = [
    ],
  ),
  'g_main_loop_new': Spec(
    return_type = 'GMainLoop *',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'is_running',
      ),
    ],
  ),
  'g_main_loop_run': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_quit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_ref': Spec(
    return_type = 'GMainLoop *',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_is_running': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_main_loop_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GMainLoop *',
        name = 'loop',
      ),
    ],
  ),
  'g_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSourceFuncs *',
        name = 'source_funcs',
      ),
      Param(
        type = 'guint',
        name = 'struct_size',
      ),
    ],
  ),
  'g_source_ref': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_attach': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
    ],
  ),
  'g_source_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_source_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_can_recurse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gboolean',
        name = 'can_recurse',
      ),
    ],
  ),
  'g_source_get_can_recurse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_get_id': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_callback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_source_set_funcs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
    ],
  ),
  'g_source_is_destroyed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_source_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_source_set_name_by_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'tag',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_source_set_callback_indirect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'GSourceCallbackFuncs *',
        name = 'callback_funcs',
      ),
    ],
  ),
  'g_source_add_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_source_remove_poll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GPollFD *',
        name = 'fd',
      ),
    ],
  ),
  'g_source_add_child_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
    ],
  ),
  'g_source_remove_child_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
    ],
  ),
  'g_source_get_current_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'g_source_get_time': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_idle_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
    ],
  ),
  'g_child_watch_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
    ],
  ),
  'g_timeout_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_timeout_source_new_seconds': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_get_current_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'result',
      ),
    ],
  ),
  'g_get_monotonic_time': Spec(
    return_type = 'gint64',
    parameters = [
    ],
  ),
  'g_get_real_time': Spec(
    return_type = 'gint64',
    parameters = [
    ],
  ),
  'g_source_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'tag',
      ),
    ],
  ),
  'g_source_remove_by_user_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_source_remove_by_funcs_user_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSourceFuncs *',
        name = 'funcs',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_timeout_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_timeout_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_timeout_add_seconds_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_timeout_add_seconds': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_child_watch_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GPid',
        name = 'pid',
      ),
      Param(
        type = 'GChildWatchFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_child_watch_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
      Param(
        type = 'GChildWatchFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_idle_add': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_idle_add_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_idle_remove_by_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_main_context_invoke_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_main_context_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMainContext *',
        name = 'context',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_unicode_script_to_iso15924': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GUnicodeScript',
        name = 'script',
      ),
    ],
  ),
  'g_unicode_script_from_iso15924': Spec(
    return_type = 'GUnicodeScript',
    parameters = [
      Param(
        type = 'guint32',
        name = 'iso15924',
      ),
    ],
  ),
  'g_unichar_isalnum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isalpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iscntrl': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isdigit': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isgraph': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_islower': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isprint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_ispunct': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isspace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isupper': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isxdigit': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_istitle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_isdefined': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iswide': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iswide_cjk': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_iszerowidth': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_ismark': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_toupper': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_tolower': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_totitle': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_digit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_xdigit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_type': Spec(
    return_type = 'GUnicodeType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_break_type': Spec(
    return_type = 'GUnicodeBreakType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_unichar_combining_class': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'uc',
      ),
    ],
  ),
  'g_unichar_get_mirror_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'mirrored_ch',
      ),
    ],
  ),
  'g_unichar_get_script': Spec(
    return_type = 'GUnicodeScript',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_compose': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'a',
      ),
      Param(
        type = 'gunichar',
        name = 'b',
      ),
      Param(
        type = 'gunichar *',
        name = 'ch',
      ),
    ],
  ),
  'g_unichar_decompose': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'a',
      ),
      Param(
        type = 'gunichar *',
        name = 'b',
      ),
    ],
  ),
  'g_unichar_fully_decompose': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gboolean',
        name = 'compat',
      ),
      Param(
        type = 'gunichar *',
        name = 'result',
      ),
      Param(
        type = 'gsize',
        name = 'result_len',
      ),
    ],
  ),
  'g_unicode_canonical_ordering': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gunichar *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_unicode_canonical_decomposition': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gsize *',
        name = 'result_len',
      ),
    ],
  ),
  'g_utf8_get_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_get_char_validated': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'max_len',
      ),
    ],
  ),
  'g_utf8_offset_to_pointer': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'offset',
      ),
    ],
  ),
  'g_utf8_pointer_to_offset': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'pos',
      ),
    ],
  ),
  'g_utf8_prev_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_find_next_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'const gchar *',
        name = 'end',
      ),
    ],
  ),
  'g_utf8_find_prev_char': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
    ],
  ),
  'g_utf8_strlen': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'max',
      ),
    ],
  ),
  'g_utf8_substring': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'start_pos',
      ),
      Param(
        type = 'glong',
        name = 'end_pos',
      ),
    ],
  ),
  'g_utf8_strncpy': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_utf8_strchr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_utf8_strrchr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'p',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'gunichar',
        name = 'c',
      ),
    ],
  ),
  'g_utf8_strreverse': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_to_utf16': Spec(
    return_type = 'gunichar2 *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf8_to_ucs4': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf8_to_ucs4_fast': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
    ],
  ),
  'g_utf16_to_ucs4': Spec(
    return_type = 'gunichar *',
    parameters = [
      Param(
        type = 'const gunichar2 *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_utf16_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gunichar2 *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_ucs4_to_utf16': Spec(
    return_type = 'gunichar2 *',
    parameters = [
      Param(
        type = 'const gunichar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_ucs4_to_utf8': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gunichar *',
        name = 'str',
      ),
      Param(
        type = 'glong',
        name = 'len',
      ),
      Param(
        type = 'glong *',
        name = 'items_read',
      ),
      Param(
        type = 'glong *',
        name = 'items_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unichar_to_utf8': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'c',
      ),
      Param(
        type = 'gchar *',
        name = 'outbuf',
      ),
    ],
  ),
  'g_utf8_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'max_len',
      ),
      Param(
        type = 'const gchar **',
        name = 'end',
      ),
    ],
  ),
  'g_utf8_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_casefold': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_normalize': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GNormalizeMode',
        name = 'mode',
      ),
    ],
  ),
  'g_utf8_collate': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str1',
      ),
      Param(
        type = 'const gchar *',
        name = 'str2',
      ),
    ],
  ),
  'g_utf8_collate_key': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_utf8_collate_key_for_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  '_g_utf8_make_valid': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_get_user_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_real_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_home_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_tmp_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_host_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_prgname': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_set_prgname': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'prgname',
      ),
    ],
  ),
  'g_get_application_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_set_application_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_name',
      ),
    ],
  ),
  'g_reload_user_special_dirs_cache': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_get_user_data_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_config_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_cache_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_system_data_dirs': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_system_config_dirs': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_get_user_runtime_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_get_user_special_dir': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GUserDirectory',
        name = 'directory',
      ),
    ],
  ),
  'g_parse_debug_string': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const GDebugKey *',
        name = 'keys',
      ),
      Param(
        type = 'guint',
        name = 'nkeys',
      ),
    ],
  ),
  'g_snprintf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_vsnprintf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'gulong',
        name = 'n',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_nullify_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer *',
        name = 'nullify_location',
      ),
    ],
  ),
  'g_format_size_full': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'size',
      ),
      Param(
        type = 'GFormatSizeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_format_size': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'size',
      ),
    ],
  ),
  'g_format_size_for_display': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'goffset',
        name = 'size',
      ),
    ],
  ),
  'g_atexit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVoidFunc',
        name = 'func',
      ),
    ],
  ),
  'g_find_program_in_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'program',
      ),
    ],
  ),
  'g_bit_nth_lsf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_nth_msf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_storage': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'number',
      ),
    ],
  ),
  'g_bit_nth_lsf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_nth_msf': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'mask',
      ),
      Param(
        type = 'gint',
        name = 'nth_bit',
      ),
    ],
  ),
  'g_bit_storage': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gulong',
        name = 'number',
      ),
    ],
  ),
  'g_string_new': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'init',
      ),
    ],
  ),
  'g_string_new_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'init',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_sized_new': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'dfl_size',
      ),
    ],
  ),
  'g_string_free': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gboolean',
        name = 'free_segment',
      ),
    ],
  ),
  'g_string_free_to_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GString *',
        name = 'v',
      ),
      Param(
        type = 'const GString *',
        name = 'v2',
      ),
    ],
  ),
  'g_string_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GString *',
        name = 'str',
      ),
    ],
  ),
  'g_string_assign': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'rval',
      ),
    ],
  ),
  'g_string_truncate': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_string_set_size': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_string_insert_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_append': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_append_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_append_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_append_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_prepend': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_prepend_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_prepend_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_prepend_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_insert': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_insert_c': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_insert_unichar': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gunichar',
        name = 'wc',
      ),
    ],
  ),
  'g_string_overwrite': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
    ],
  ),
  'g_string_overwrite_len': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gsize',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'val',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_erase': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'pos',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_ascii_down': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_ascii_up': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_vprintf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_string_printf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_string_append_vprintf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_string_append_printf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_string_append_uri_escaped': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'unescaped',
      ),
      Param(
        type = 'const gchar *',
        name = 'reserved_chars_allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_utf8',
      ),
    ],
  ),
  'g_string_append_c_inline': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'gstring',
      ),
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_string_down': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_string_up': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GString *',
        name = 'string',
      ),
    ],
  ),
  'g_io_channel_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_ref': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_read': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
    ],
  ),
  'g_io_channel_write': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
    ],
  ),
  'g_io_channel_seek': Spec(
    return_type = 'GIOError',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint64',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
    ],
  ),
  'g_io_channel_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_shutdown': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'flush',
      ),
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'g_io_add_watch_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GIOFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_io_create_watch': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
    ],
  ),
  'g_io_add_watch': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GIOFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_channel_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_io_channel_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_get_buffer_condition': Spec(
    return_type = 'GIOCondition',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_flags': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GIOFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_get_flags': Spec(
    return_type = 'GIOFlags',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_line_term': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'line_term',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_io_channel_get_line_term': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'g_io_channel_set_buffered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'buffered',
      ),
    ],
  ),
  'g_io_channel_get_buffered': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_encoding': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'encoding',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_get_encoding': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_set_close_on_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gboolean',
        name = 'do_close',
      ),
    ],
  ),
  'g_io_channel_get_close_on_unref': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_io_channel_flush': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_line': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar **',
        name = 'str_return',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'gsize *',
        name = 'terminator_pos',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_line_string': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'GString *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'terminator_pos',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_to_end': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar **',
        name = 'str_return',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_chars': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_read_unichar': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gunichar *',
        name = 'thechar',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_write_chars': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'const gchar *',
        name = 'buf',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_write_unichar': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gunichar',
        name = 'thechar',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_seek_position': Spec(
    return_type = 'GIOStatus',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
      Param(
        type = 'gint64',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_new_file': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const gchar *',
        name = 'mode',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_channel_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_io_channel_error_from_errno': Spec(
    return_type = 'GIOChannelError',
    parameters = [
      Param(
        type = 'gint',
        name = 'en',
      ),
    ],
  ),
  'g_io_channel_unix_new': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'int',
        name = 'fd',
      ),
    ],
  ),
  'g_io_channel_unix_get_fd': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIOChannel *',
        name = 'channel',
      ),
    ],
  ),
  'g_key_file_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_key_file_new': Spec(
    return_type = 'GKeyFile *',
    parameters = [
    ],
  ),
  'g_key_file_ref': Spec(
    return_type = 'GKeyFile *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_set_list_separator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gchar',
        name = 'separator',
      ),
    ],
  ),
  'g_key_file_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'const gchar **',
        name = 'search_dirs',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_load_from_data_dirs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'gchar **',
        name = 'full_path',
      ),
      Param(
        type = 'GKeyFileFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_to_data': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_start_group': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_key_file_get_groups': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_keys': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'g_key_file_has_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_value': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_key_file_get_locale_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_locale_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_key_file_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_integer': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_integer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint64',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_key_file_get_string_list': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_string_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_locale_string_list': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_locale_string_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'locale',
      ),
      Param(
        type = 'const gchar *const []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_boolean_list': Spec(
    return_type = 'gboolean *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_boolean_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_integer_list': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_double_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_get_double_list': Spec(
    return_type = 'gdouble *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_set_integer_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint []',
        name = 'list',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
    ],
  ),
  'g_key_file_set_comment': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'comment',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_get_comment': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_comment': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_key_file_remove_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_new': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_new_from_fd': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mapped_file_get_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_get_contents': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_get_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_ref': Spec(
    return_type = 'GMappedFile *',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_mapped_file_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMappedFile *',
        name = 'file',
      ),
    ],
  ),
  'g_markup_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_markup_parse_context_new': Spec(
    return_type = 'GMarkupParseContext *',
    parameters = [
      Param(
        type = 'const GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'GMarkupParseFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_dnotify',
      ),
    ],
  ),
  'g_markup_parse_context_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'text_len',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_markup_parse_context_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'const GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_markup_parse_context_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_end_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_markup_parse_context_get_element': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_get_element_stack': Spec(
    return_type = 'const GSList *',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_parse_context_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'line_number',
      ),
      Param(
        type = 'gint *',
        name = 'char_number',
      ),
    ],
  ),
  'g_markup_parse_context_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMarkupParseContext *',
        name = 'context',
      ),
    ],
  ),
  'g_markup_escape_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_markup_printf_escaped': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_markup_vprintf_escaped': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_markup_collect_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'element_name',
      ),
      Param(
        type = 'const gchar **',
        name = 'attribute_names',
      ),
      Param(
        type = 'const gchar **',
        name = 'attribute_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'GMarkupCollectType',
        name = 'first_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_attr',
      ),
    ],
  ),
  'g_printf_string_upper_bound': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_log_set_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_levels',
      ),
      Param(
        type = 'GLogFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_log_remove_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'g_log_default_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'unused_data',
      ),
    ],
  ),
  'g_log_set_default_handler': Spec(
    return_type = 'GLogFunc',
    parameters = [
      Param(
        type = 'GLogFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_log': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_logv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_log_set_fatal_mask': Spec(
    return_type = 'GLogLevelFlags',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'fatal_mask',
      ),
    ],
  ),
  'g_log_set_always_fatal': Spec(
    return_type = 'GLogLevelFlags',
    parameters = [
      Param(
        type = 'GLogLevelFlags',
        name = 'fatal_mask',
      ),
    ],
  ),
  '_g_log_fallback_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'unused_data',
      ),
    ],
  ),
  'g_return_if_fail_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'log_domain',
      ),
      Param(
        type = 'const char *',
        name = 'pretty_function',
      ),
      Param(
        type = 'const char *',
        name = 'expression',
      ),
    ],
  ),
  'g_warn_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'warnexpr',
      ),
    ],
  ),
  'g_assert_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'log_domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'const int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'pretty_function',
      ),
      Param(
        type = 'const char *',
        name = 'expression',
      ),
    ],
  ),
  'g_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_print_handler': Spec(
    return_type = 'GPrintFunc',
    parameters = [
      Param(
        type = 'GPrintFunc',
        name = 'func',
      ),
    ],
  ),
  'g_printerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_set_printerr_handler': Spec(
    return_type = 'GPrintFunc',
    parameters = [
      Param(
        type = 'GPrintFunc',
        name = 'func',
      ),
    ],
  ),
  'g_option_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_option_context_new': Spec(
    return_type = 'GOptionContext *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'parameter_string',
      ),
    ],
  ),
  'g_option_context_set_summary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'summary',
      ),
    ],
  ),
  'g_option_context_get_summary': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_option_context_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_help_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'help_enabled',
      ),
    ],
  ),
  'g_option_context_get_help_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_set_ignore_unknown_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'ignore_unknown',
      ),
    ],
  ),
  'g_option_context_get_ignore_unknown_options': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_add_main_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const GOptionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'const gchar *',
        name = 'translation_domain',
      ),
    ],
  ),
  'g_option_context_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_option_context_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_notify',
      ),
    ],
  ),
  'g_option_context_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_option_context_add_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_context_set_main_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_context_get_main_group': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
    ],
  ),
  'g_option_context_get_help': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GOptionContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'main_help',
      ),
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_group_new': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
      Param(
        type = 'const gchar *',
        name = 'help_description',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_option_group_set_parse_hooks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GOptionParseFunc',
        name = 'pre_parse_func',
      ),
      Param(
        type = 'GOptionParseFunc',
        name = 'post_parse_func',
      ),
    ],
  ),
  'g_option_group_set_error_hook': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GOptionErrorFunc',
        name = 'error_func',
      ),
    ],
  ),
  'g_option_group_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'g_option_group_add_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'const GOptionEntry *',
        name = 'entries',
      ),
    ],
  ),
  'g_option_group_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'GTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_notify',
      ),
    ],
  ),
  'g_option_group_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_pattern_spec_new': Spec(
    return_type = 'GPatternSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'g_pattern_spec_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_pattern_spec_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec1',
      ),
      Param(
        type = 'GPatternSpec *',
        name = 'pspec2',
      ),
    ],
  ),
  'g_pattern_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'guint',
        name = 'string_length',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'string_reversed',
      ),
    ],
  ),
  'g_pattern_match_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPatternSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_pattern_match_simple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_spaced_primes_closest': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'num',
      ),
    ],
  ),
  'g_qsort_with_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'pbase',
      ),
      Param(
        type = 'gint',
        name = 'total_elems',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_new': Spec(
    return_type = 'GQueue *',
    parameters = [
    ],
  ),
  'g_queue_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_free_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'free_func',
      ),
    ],
  ),
  'g_queue_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_is_empty': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_reverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_copy': Spec(
    return_type = 'GQueue *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_find': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_find_custom': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'func',
      ),
    ],
  ),
  'g_queue_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_push_head': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_push_tail': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_push_nth': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_pop_head': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_tail': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_nth': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_peek_head': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_tail': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_nth': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_remove_all': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'sibling',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_queue_insert_sorted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_queue_push_head_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_push_tail_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_push_nth_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_pop_head_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_tail_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_pop_nth_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_peek_head_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_tail_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
    ],
  ),
  'g_queue_peek_nth_link': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_queue_link_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_unlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_queue_delete_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GQueue *',
        name = 'queue',
      ),
      Param(
        type = 'GList *',
        name = 'link_',
      ),
    ],
  ),
  'g_rand_new_with_seed': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_rand_new_with_seed_array': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'const guint32 *',
        name = 'seed',
      ),
      Param(
        type = 'guint',
        name = 'seed_length',
      ),
    ],
  ),
  'g_rand_new': Spec(
    return_type = 'GRand *',
    parameters = [
    ],
  ),
  'g_rand_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_copy': Spec(
    return_type = 'GRand *',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_set_seed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_rand_set_seed_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'const guint32 *',
        name = 'seed',
      ),
      Param(
        type = 'guint',
        name = 'seed_length',
      ),
    ],
  ),
  'g_rand_int': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_rand_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
    ],
  ),
  'g_rand_double_range': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GRand *',
        name = 'rand_',
      ),
      Param(
        type = 'gdouble',
        name = 'begin',
      ),
      Param(
        type = 'gdouble',
        name = 'end',
      ),
    ],
  ),
  'g_random_set_seed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint32',
        name = 'seed',
      ),
    ],
  ),
  'g_random_int': Spec(
    return_type = 'guint32',
    parameters = [
    ],
  ),
  'g_random_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_random_double': Spec(
    return_type = 'gdouble',
    parameters = [
    ],
  ),
  'g_random_double_range': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'begin',
      ),
      Param(
        type = 'gdouble',
        name = 'end',
      ),
    ],
  ),
  'g_regex_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_regex_new': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_ref': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_pattern': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_max_backref': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_capture_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_has_cr_or_lf': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_string_number': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_regex_escape_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_regex_escape_nul': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_regex_get_compile_flags': Spec(
    return_type = 'GRegexCompileFlags',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_get_match_flags': Spec(
    return_type = 'GRegexMatchFlags',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
    ],
  ),
  'g_regex_match_simple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
    ],
  ),
  'g_regex_match_full': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_match_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
    ],
  ),
  'g_regex_match_all_full': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GMatchInfo **',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_split_simple': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexCompileFlags',
        name = 'compile_options',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_split': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
    ],
  ),
  'g_regex_split_full': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace_literal': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_replace_eval': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GRegex *',
        name = 'regex',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'string_len',
      ),
      Param(
        type = 'gint',
        name = 'start_position',
      ),
      Param(
        type = 'GRegexMatchFlags',
        name = 'match_options',
      ),
      Param(
        type = 'GRegexEvalCallback',
        name = 'eval',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_regex_check_replacement': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'replacement',
      ),
      Param(
        type = 'gboolean *',
        name = 'has_references',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_get_regex': Spec(
    return_type = 'GRegex *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_ref': Spec(
    return_type = 'GMatchInfo *',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_get_match_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_is_partial_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_match_info_expand_references': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'string_to_expand',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_match_info_fetch': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'gint',
        name = 'match_num',
      ),
    ],
  ),
  'g_match_info_fetch_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'gint',
        name = 'match_num',
      ),
      Param(
        type = 'gint *',
        name = 'start_pos',
      ),
      Param(
        type = 'gint *',
        name = 'end_pos',
      ),
    ],
  ),
  'g_match_info_fetch_named': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_match_info_fetch_named_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gint *',
        name = 'start_pos',
      ),
      Param(
        type = 'gint *',
        name = 'end_pos',
      ),
    ],
  ),
  'g_match_info_fetch_all': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GMatchInfo *',
        name = 'match_info',
      ),
    ],
  ),
  'g_scanner_new': Spec(
    return_type = 'GScanner *',
    parameters = [
      Param(
        type = 'const GScannerConfig *',
        name = 'config_templ',
      ),
    ],
  ),
  'g_scanner_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_input_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'gint',
        name = 'input_fd',
      ),
    ],
  ),
  'g_scanner_sync_file_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_input_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'guint',
        name = 'text_len',
      ),
    ],
  ),
  'g_scanner_get_next_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_peek_next_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_token': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_value': Spec(
    return_type = 'GTokenValue',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_line': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_cur_position': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_eof': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'g_scanner_set_scope': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
    ],
  ),
  'g_scanner_scope_add_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_scanner_scope_remove_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_scope_lookup_symbol': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_scope_foreach_symbol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'guint',
        name = 'scope_id',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_scanner_lookup_symbol': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol',
      ),
    ],
  ),
  'g_scanner_unexp_token': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GTokenType',
        name = 'expected_token',
      ),
      Param(
        type = 'const gchar *',
        name = 'identifier_spec',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_spec',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
      Param(
        type = 'gint',
        name = 'is_error',
      ),
    ],
  ),
  'g_scanner_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_scanner_warn': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_sequence_new': Spec(
    return_type = 'GSequence *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'g_sequence_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_sequence_foreach_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_sequence_sort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_get_begin_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_end_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
    ],
  ),
  'g_sequence_get_iter_at_pos': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'g_sequence_append': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_prepend': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_insert_before': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'src',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'dest',
      ),
    ],
  ),
  'g_sequence_swap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'a',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'b',
      ),
    ],
  ),
  'g_sequence_insert_sorted': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_insert_sorted_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_sort_changed_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_remove_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_sequence_move_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'dest',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_sequence_search': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_search_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_lookup': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'cmp_func',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_lookup_iter': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequence *',
        name = 'seq',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GSequenceIterCompareFunc',
        name = 'iter_cmp',
      ),
      Param(
        type = 'gpointer',
        name = 'cmp_data',
      ),
    ],
  ),
  'g_sequence_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_sequence_iter_is_begin': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_is_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_next': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_prev': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_get_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_move': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'delta',
      ),
    ],
  ),
  'g_sequence_iter_get_sequence': Spec(
    return_type = 'GSequence *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_sequence_iter_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'a',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'b',
      ),
    ],
  ),
  'g_sequence_range_get_midpoint': Spec(
    return_type = 'GSequenceIter *',
    parameters = [
      Param(
        type = 'GSequenceIter *',
        name = 'begin',
      ),
      Param(
        type = 'GSequenceIter *',
        name = 'end',
      ),
    ],
  ),
  'g_shell_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_shell_quote': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'unquoted_string',
      ),
    ],
  ),
  'g_shell_unquote': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'quoted_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_shell_parse_argv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'gint *',
        name = 'argcp',
      ),
      Param(
        type = 'gchar ***',
        name = 'argvp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_slice_alloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
    ],
  ),
  'g_slice_alloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
    ],
  ),
  'g_slice_copy': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'mem_block',
      ),
    ],
  ),
  'g_slice_free1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gpointer',
        name = 'mem_block',
      ),
    ],
  ),
  'g_slice_free_chain_with_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gsize',
        name = 'block_size',
      ),
      Param(
        type = 'gpointer',
        name = 'mem_chain',
      ),
      Param(
        type = 'gsize',
        name = 'next_offset',
      ),
    ],
  ),
  'g_slice_set_config': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_slice_get_config': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
    ],
  ),
  'g_slice_get_config_state': Spec(
    return_type = 'gint64 *',
    parameters = [
      Param(
        type = 'GSliceConfig',
        name = 'ckey',
      ),
      Param(
        type = 'gint64',
        name = 'address',
      ),
      Param(
        type = 'guint *',
        name = 'n_values',
      ),
    ],
  ),
  'g_spawn_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_spawn_exit_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_spawn_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GPid *',
        name = 'child_pid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_async_with_pipes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GPid *',
        name = 'child_pid',
      ),
      Param(
        type = 'gint *',
        name = 'standard_input',
      ),
      Param(
        type = 'gint *',
        name = 'standard_output',
      ),
      Param(
        type = 'gint *',
        name = 'standard_error',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'working_directory',
      ),
      Param(
        type = 'gchar **',
        name = 'argv',
      ),
      Param(
        type = 'gchar **',
        name = 'envp',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'child_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_output',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_error',
      ),
      Param(
        type = 'gint *',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_command_line_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_output',
      ),
      Param(
        type = 'gchar **',
        name = 'standard_error',
      ),
      Param(
        type = 'gint *',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_command_line_async': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'command_line',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_check_exit_status': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gint',
        name = 'exit_status',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_spawn_close_pid': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPid',
        name = 'pid',
      ),
    ],
  ),
  'g_ascii_tolower': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_toupper': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_digit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_ascii_xdigit_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gchar',
        name = 'c',
      ),
    ],
  ),
  'g_strdelimit': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiters',
      ),
      Param(
        type = 'gchar',
        name = 'new_delimiter',
      ),
    ],
  ),
  'g_strcanon': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'valid_chars',
      ),
      Param(
        type = 'gchar',
        name = 'substitutor',
      ),
    ],
  ),
  'g_strerror': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gint',
        name = 'errnum',
      ),
    ],
  ),
  'g_strsignal': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'gint',
        name = 'signum',
      ),
    ],
  ),
  'g_strreverse': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strlcpy': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'dest_size',
      ),
    ],
  ),
  'g_strlcat': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const gchar *',
        name = 'src',
      ),
      Param(
        type = 'gsize',
        name = 'dest_size',
      ),
    ],
  ),
  'g_strstr_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'gssize',
        name = 'haystack_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_strrstr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_strrstr_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'haystack',
      ),
      Param(
        type = 'gssize',
        name = 'haystack_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'needle',
      ),
    ],
  ),
  'g_str_has_suffix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'suffix',
      ),
    ],
  ),
  'g_str_has_prefix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
    ],
  ),
  'g_strtod': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_ascii_strtod': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_ascii_strtoull': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'guint',
        name = 'base',
      ),
    ],
  ),
  'g_ascii_strtoll': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'nptr',
      ),
      Param(
        type = 'gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'guint',
        name = 'base',
      ),
    ],
  ),
  'g_ascii_dtostr': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'buf_len',
      ),
      Param(
        type = 'gdouble',
        name = 'd',
      ),
    ],
  ),
  'g_ascii_formatd': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'buf_len',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'gdouble',
        name = 'd',
      ),
    ],
  ),
  'g_strchug': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strchomp': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_ascii_strcasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
    ],
  ),
  'g_ascii_strncasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_ascii_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_ascii_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_strcasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
    ],
  ),
  'g_strncasecmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 's1',
      ),
      Param(
        type = 'const gchar *',
        name = 's2',
      ),
      Param(
        type = 'guint',
        name = 'n',
      ),
    ],
  ),
  'g_strdown': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strdup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'g_strdup_printf': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_strdup_vprintf': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_strndup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gsize',
        name = 'n',
      ),
    ],
  ),
  'g_strnfill': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'gchar',
        name = 'fill_char',
      ),
    ],
  ),
  'g_strconcat': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string1',
      ),
    ],
  ),
  'g_strjoin': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
    ],
  ),
  'g_strcompress': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'source',
      ),
    ],
  ),
  'g_strescape': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'exceptions',
      ),
    ],
  ),
  'g_memdup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'mem',
      ),
      Param(
        type = 'guint',
        name = 'byte_size',
      ),
    ],
  ),
  'g_strsplit': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiter',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
    ],
  ),
  'g_strsplit_set': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'delimiters',
      ),
      Param(
        type = 'gint',
        name = 'max_tokens',
      ),
    ],
  ),
  'g_strjoinv': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'separator',
      ),
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strfreev': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strdupv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_strv_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'str_array',
      ),
    ],
  ),
  'g_stpcpy': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'gchar *',
        name = 'dest',
      ),
      Param(
        type = 'const char *',
        name = 'src',
      ),
    ],
  ),
  'g_string_chunk_new': Spec(
    return_type = 'GStringChunk *',
    parameters = [
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_string_chunk_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
    ],
  ),
  'g_string_chunk_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
    ],
  ),
  'g_string_chunk_insert': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_string_chunk_insert_len': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
    ],
  ),
  'g_string_chunk_insert_const': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GStringChunk *',
        name = 'chunk',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_strcmp0': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str1',
      ),
      Param(
        type = 'const char *',
        name = 'str2',
      ),
    ],
  ),
  'g_test_minimized_result': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'double',
        name = 'minimized_quantity',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_maximized_result': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'double',
        name = 'maximized_quantity',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'g_test_run': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'g_test_add_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'GTestFunc',
        name = 'test_func',
      ),
    ],
  ),
  'g_test_add_data_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestDataFunc',
        name = 'test_func',
      ),
    ],
  ),
  'g_test_add_data_func_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestDataFunc',
        name = 'test_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_free_func',
      ),
    ],
  ),
  'g_test_fail': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_test_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_test_bug_base': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri_pattern',
      ),
    ],
  ),
  'g_test_bug': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'bug_uri_snippet',
      ),
    ],
  ),
  'g_test_timer_start': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_test_timer_elapsed': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_timer_last': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_queue_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'gfree_pointer',
      ),
    ],
  ),
  'g_test_queue_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
      Param(
        type = 'gpointer',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_test_trap_fork': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint64',
        name = 'usec_timeout',
      ),
      Param(
        type = 'GTestTrapFlags',
        name = 'test_trap_flags',
      ),
    ],
  ),
  'g_test_trap_has_passed': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_test_trap_reached_timeout': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_test_rand_int': Spec(
    return_type = 'gint32',
    parameters = [
    ],
  ),
  'g_test_rand_int_range': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'gint32',
        name = 'begin',
      ),
      Param(
        type = 'gint32',
        name = 'end',
      ),
    ],
  ),
  'g_test_rand_double': Spec(
    return_type = 'double',
    parameters = [
    ],
  ),
  'g_test_rand_double_range': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'double',
        name = 'range_start',
      ),
      Param(
        type = 'double',
        name = 'range_end',
      ),
    ],
  ),
  'g_test_create_case': Spec(
    return_type = 'GTestCase *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'test_name',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_setup',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_test',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_teardown',
      ),
    ],
  ),
  'g_test_create_suite': Spec(
    return_type = 'GTestSuite *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'suite_name',
      ),
    ],
  ),
  'g_test_get_root': Spec(
    return_type = 'GTestSuite *',
    parameters = [
    ],
  ),
  'g_test_suite_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
      Param(
        type = 'GTestCase *',
        name = 'test_case',
      ),
    ],
  ),
  'g_test_suite_add_suite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
      Param(
        type = 'GTestSuite *',
        name = 'nestedsuite',
      ),
    ],
  ),
  'g_test_run_suite': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GTestSuite *',
        name = 'suite',
      ),
    ],
  ),
  'g_test_trap_assertions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'guint64',
        name = 'assertion_flags',
      ),
      Param(
        type = 'const char *',
        name = 'pattern',
      ),
    ],
  ),
  'g_assertion_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'message',
      ),
    ],
  ),
  'g_assertion_message_expr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
    ],
  ),
  'g_assertion_message_cmpstr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'const char *',
        name = 'arg1',
      ),
      Param(
        type = 'const char *',
        name = 'cmp',
      ),
      Param(
        type = 'const char *',
        name = 'arg2',
      ),
    ],
  ),
  'g_assertion_message_cmpnum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'long double',
        name = 'arg1',
      ),
      Param(
        type = 'const char *',
        name = 'cmp',
      ),
      Param(
        type = 'long double',
        name = 'arg2',
      ),
      Param(
        type = 'char',
        name = 'numtype',
      ),
    ],
  ),
  'g_assertion_message_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
      Param(
        type = 'const char *',
        name = 'expr',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'int',
        name = 'error_code',
      ),
    ],
  ),
  'g_test_add_vtable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'testpath',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gconstpointer',
        name = 'test_data',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_setup',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_test',
      ),
      Param(
        type = 'GTestFixtureFunc',
        name = 'data_teardown',
      ),
    ],
  ),
  'g_test_log_type_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GTestLogType',
        name = 'log_type',
      ),
    ],
  ),
  'g_test_log_buffer_new': Spec(
    return_type = 'GTestLogBuffer *',
    parameters = [
    ],
  ),
  'g_test_log_buffer_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
    ],
  ),
  'g_test_log_buffer_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
      Param(
        type = 'guint',
        name = 'n_bytes',
      ),
      Param(
        type = 'const guint8 *',
        name = 'bytes',
      ),
    ],
  ),
  'g_test_log_buffer_pop': Spec(
    return_type = 'GTestLogMsg *',
    parameters = [
      Param(
        type = 'GTestLogBuffer *',
        name = 'tbuffer',
      ),
    ],
  ),
  'g_test_log_msg_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogMsg *',
        name = 'tmsg',
      ),
    ],
  ),
  'g_test_log_set_fatal_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestLogFatalFunc',
        name = 'log_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_test_expect_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'log_domain',
      ),
      Param(
        type = 'GLogLevelFlags',
        name = 'log_level',
      ),
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'g_test_assert_expected_messages_internal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'domain',
      ),
      Param(
        type = 'const char *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
      Param(
        type = 'const char *',
        name = 'func',
      ),
    ],
  ),
  'g_thread_pool_new': Spec(
    return_type = 'GThreadPool *',
    parameters = [
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
      Param(
        type = 'gboolean',
        name = 'exclusive',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gboolean',
        name = 'immediate',
      ),
      Param(
        type = 'gboolean',
        name = 'wait_',
      ),
    ],
  ),
  'g_thread_pool_push': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_unprocessed': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_set_sort_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_thread_pool_set_max_threads': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_pool_get_max_threads': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_get_num_threads': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GThreadPool *',
        name = 'pool',
      ),
    ],
  ),
  'g_thread_pool_set_max_unused_threads': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint',
        name = 'max_threads',
      ),
    ],
  ),
  'g_thread_pool_get_max_unused_threads': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'g_thread_pool_get_num_unused_threads': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'g_thread_pool_stop_unused_threads': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_thread_pool_set_max_idle_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
    ],
  ),
  'g_thread_pool_get_max_idle_time': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'g_timer_new': Spec(
    return_type = 'GTimer *',
    parameters = [
    ],
  ),
  'g_timer_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_continue': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
    ],
  ),
  'g_timer_elapsed': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GTimer *',
        name = 'timer',
      ),
      Param(
        type = 'gulong *',
        name = 'microseconds',
      ),
    ],
  ),
  'g_usleep': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gulong',
        name = 'microseconds',
      ),
    ],
  ),
  'g_time_val_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
      Param(
        type = 'glong',
        name = 'microseconds',
      ),
    ],
  ),
  'g_time_val_from_iso8601': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'iso_date',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
    ],
  ),
  'g_time_val_to_iso8601': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GTimeVal *',
        name = 'time_',
      ),
    ],
  ),
  'g_trash_stack_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
      Param(
        type = 'gpointer',
        name = 'data_p',
      ),
    ],
  ),
  'g_trash_stack_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
      Param(
        type = 'gpointer',
        name = 'data_p',
      ),
    ],
  ),
  'g_trash_stack_pop': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_trash_stack_height': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GTrashStack **',
        name = 'stack_p',
      ),
    ],
  ),
  'g_tree_new': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareFunc',
        name = 'key_compare_func',
      ),
    ],
  ),
  'g_tree_new_with_data': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareDataFunc',
        name = 'key_compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'key_compare_data',
      ),
    ],
  ),
  'g_tree_new_full': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GCompareDataFunc',
        name = 'key_compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'key_compare_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'value_destroy_func',
      ),
    ],
  ),
  'g_tree_ref': Spec(
    return_type = 'GTree *',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_tree_replace': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'value',
      ),
    ],
  ),
  'g_tree_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_steal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_lookup': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
    ],
  ),
  'g_tree_lookup_extended': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'gconstpointer',
        name = 'lookup_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'orig_key',
      ),
      Param(
        type = 'gpointer *',
        name = 'value',
      ),
    ],
  ),
  'g_tree_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GTraverseFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_traverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GTraverseFunc',
        name = 'traverse_func',
      ),
      Param(
        type = 'GTraverseType',
        name = 'traverse_type',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_search': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'search_func',
      ),
      Param(
        type = 'gconstpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tree_height': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_tree_nnodes': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTree *',
        name = 'tree',
      ),
    ],
  ),
  'g_uri_unescape_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'escaped_string',
      ),
      Param(
        type = 'const char *',
        name = 'illegal_characters',
      ),
    ],
  ),
  'g_uri_unescape_segment': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'escaped_string',
      ),
      Param(
        type = 'const char *',
        name = 'escaped_string_end',
      ),
      Param(
        type = 'const char *',
        name = 'illegal_characters',
      ),
    ],
  ),
  'g_uri_parse_scheme': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_uri_escape_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'unescaped',
      ),
      Param(
        type = 'const char *',
        name = 'reserved_chars_allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_utf8',
      ),
    ],
  ),
  'g_variant_type_string_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type_string',
      ),
    ],
  ),
  'g_variant_type_string_scan': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'const gchar *',
        name = 'limit',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
    ],
  ),
  'g_variant_type_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_copy': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_new': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type_string',
      ),
    ],
  ),
  'g_variant_type_get_string_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_peek_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_definite': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_container': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_basic': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_maybe': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_array': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_tuple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_dict_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_is_variant': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'type1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'type2',
      ),
    ],
  ),
  'g_variant_type_is_subtype_of': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'supertype',
      ),
    ],
  ),
  'g_variant_type_element': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_first': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_next': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_n_items': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_key': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_value': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_type_new_array': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element',
      ),
    ],
  ),
  'g_variant_type_new_maybe': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element',
      ),
    ],
  ),
  'g_variant_type_new_tuple': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *const *',
        name = 'items',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'g_variant_type_new_dict_entry': Spec(
    return_type = 'GVariantType *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'key',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_type_checked_': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = '',
      ),
    ],
  ),
  'g_variant_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_ref': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_ref_sink': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_floating': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_take_ref': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_type_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_of_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_is_container': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_classify': Spec(
    return_type = 'GVariantClass',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_boolean': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_byte': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guchar',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int16': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint16',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint16': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int32': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint32': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_int64': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint64',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_uint64': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'guint64',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_handle': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gint32',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_double': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_string': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_object_path': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_variant_is_object_path': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_signature': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signature',
      ),
    ],
  ),
  'g_variant_is_signature': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_strv': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_objv': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_bytestring': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_variant_new_bytestring_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *const *',
        name = 'strv',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_fixed_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'element_type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'elements',
      ),
      Param(
        type = 'gsize',
        name = 'n_elements',
      ),
      Param(
        type = 'gsize',
        name = 'element_size',
      ),
    ],
  ),
  'g_variant_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_byte': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int16': Spec(
    return_type = 'gint16',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint16': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_handle': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_strv': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_strv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_objv': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_objv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_bytestring': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_dup_bytestring': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_get_bytestring_array': Spec(
    return_type = 'const gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_dup_bytestring_array': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_variant_new_maybe': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'child_type',
      ),
      Param(
        type = 'GVariant *',
        name = 'child',
      ),
    ],
  ),
  'g_variant_new_array': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'child_type',
      ),
      Param(
        type = 'GVariant *const *',
        name = 'children',
      ),
      Param(
        type = 'gsize',
        name = 'n_children',
      ),
    ],
  ),
  'g_variant_new_tuple': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *const *',
        name = 'children',
      ),
      Param(
        type = 'gsize',
        name = 'n_children',
      ),
    ],
  ),
  'g_variant_new_dict_entry': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_maybe': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_n_children': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize',
        name = 'index_',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_get_child_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize',
        name = 'index_',
      ),
    ],
  ),
  'g_variant_lookup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'dictionary',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_lookup_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'dictionary',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_variant_get_fixed_array': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gsize *',
        name = 'n_elements',
      ),
      Param(
        type = 'gsize',
        name = 'element_size',
      ),
    ],
  ),
  'g_variant_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_data': Spec(
    return_type = 'gconstpointer',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_get_data_as_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_store': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_variant_print': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'type_annotate',
      ),
    ],
  ),
  'g_variant_print_string': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GString *',
        name = 'string',
      ),
      Param(
        type = 'gboolean',
        name = 'type_annotate',
      ),
    ],
  ),
  'g_variant_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'value',
      ),
    ],
  ),
  'g_variant_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'one',
      ),
      Param(
        type = 'gconstpointer',
        name = 'two',
      ),
    ],
  ),
  'g_variant_get_normal_form': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_is_normal_form': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_byteswap': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_new_from_bytes': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
    ],
  ),
  'g_variant_new_from_data': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_variant_iter_new': Spec(
    return_type = 'GVariantIter *',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_iter_init': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_iter_copy': Spec(
    return_type = 'GVariantIter *',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_n_children': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_next_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_variant_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_iter_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariantIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_parser_get_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_variant_builder_new': Spec(
    return_type = 'GVariantBuilder *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_ref': Spec(
    return_type = 'GVariantBuilder *',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_end': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_open': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_variant_builder_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'g_variant_builder_add_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_variant_builder_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_builder_add_parsed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariantBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_variant_new': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_variant_new_va': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_get_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_check_format_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_only',
      ),
    ],
  ),
  'g_variant_parse': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'limit',
      ),
      Param(
        type = 'const gchar **',
        name = 'endptr',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_variant_new_parsed': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_variant_new_parsed_va': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list *',
        name = 'app',
      ),
    ],
  ),
  'g_variant_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'one',
      ),
      Param(
        type = 'gconstpointer',
        name = 'two',
      ),
    ],
  ),
  'glib_check_version': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'required_major',
      ),
      Param(
        type = 'guint',
        name = 'required_minor',
      ),
      Param(
        type = 'guint',
        name = 'required_micro',
      ),
    ],
  ),
  'g_mem_chunk_new': Spec(
    return_type = 'GMemChunk *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gint',
        name = 'atom_size',
      ),
      Param(
        type = 'gsize',
        name = 'area_size',
      ),
      Param(
        type = 'gint',
        name = 'type',
      ),
    ],
  ),
  'g_mem_chunk_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_alloc': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_alloc0': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
      Param(
        type = 'gpointer',
        name = 'mem',
      ),
    ],
  ),
  'g_mem_chunk_clean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemChunk *',
        name = 'mem_chunk',
      ),
    ],
  ),
  'g_mem_chunk_info': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_blow_chunks': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_allocator_new': Spec(
    return_type = 'GAllocator *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'guint',
        name = 'n_preallocs',
      ),
    ],
  ),
  'g_allocator_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_list_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_list_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_slist_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_slist_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_node_push_allocator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAllocator *',
        name = 'allocator',
      ),
    ],
  ),
  'g_node_pop_allocator': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_cache_new': Spec(
    return_type = 'GCache *',
    parameters = [
      Param(
        type = 'GCacheNewFunc',
        name = 'value_new_func',
      ),
      Param(
        type = 'GCacheDestroyFunc',
        name = 'value_destroy_func',
      ),
      Param(
        type = 'GCacheDupFunc',
        name = 'key_dup_func',
      ),
      Param(
        type = 'GCacheDestroyFunc',
        name = 'key_destroy_func',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_key_func',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_value_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_cache_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
    ],
  ),
  'g_cache_insert': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'gpointer',
        name = 'key',
      ),
    ],
  ),
  'g_cache_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'gconstpointer',
        name = 'value',
      ),
    ],
  ),
  'g_cache_key_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_cache_value_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCache *',
        name = 'cache',
      ),
      Param(
        type = 'GHFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_completion_new': Spec(
    return_type = 'GCompletion *',
    parameters = [
      Param(
        type = 'GCompletionFunc',
        name = 'func',
      ),
    ],
  ),
  'g_completion_add_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GList *',
        name = 'items',
      ),
    ],
  ),
  'g_completion_remove_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GList *',
        name = 'items',
      ),
    ],
  ),
  'g_completion_clear_items': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
    ],
  ),
  'g_completion_complete': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
      Param(
        type = 'gchar **',
        name = 'new_prefix',
      ),
    ],
  ),
  'g_completion_complete_utf8': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'const gchar *',
        name = 'prefix',
      ),
      Param(
        type = 'gchar **',
        name = 'new_prefix',
      ),
    ],
  ),
  'g_completion_set_compare': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
      Param(
        type = 'GCompletionStrncmpFunc',
        name = 'strncmp_func',
      ),
    ],
  ),
  'g_completion_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCompletion *',
        name = 'cmp',
      ),
    ],
  ),
  'g_relation_new': Spec(
    return_type = 'GRelation *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fields',
      ),
    ],
  ),
  'g_relation_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
      Param(
        type = 'GHashFunc',
        name = 'hash_func',
      ),
      Param(
        type = 'GEqualFunc',
        name = 'key_equal_func',
      ),
    ],
  ),
  'g_relation_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_delete': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_select': Spec(
    return_type = 'GTuples *',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
      Param(
        type = 'gconstpointer',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_relation_exists': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_relation_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRelation *',
        name = 'relation',
      ),
    ],
  ),
  'g_tuples_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTuples *',
        name = 'tuples',
      ),
    ],
  ),
  'g_tuples_index': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTuples *',
        name = 'tuples',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'gint',
        name = 'field',
      ),
    ],
  ),
  'g_thread_create': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'joinable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_create_full': Spec(
    return_type = 'GThread *',
    parameters = [
      Param(
        type = 'GThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gulong',
        name = 'stack_size',
      ),
      Param(
        type = 'gboolean',
        name = 'joinable',
      ),
      Param(
        type = 'gboolean',
        name = 'bound',
      ),
      Param(
        type = 'GThreadPriority',
        name = 'priority',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_thread_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThread *',
        name = 'thread',
      ),
      Param(
        type = 'GThreadPriority',
        name = 'priority',
      ),
    ],
  ),
  'g_thread_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFunc',
        name = 'thread_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  '__bswap_32': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__bsx',
      ),
    ],
  ),
  '__bswap_64': Spec(
    return_type = 'unsigned long long',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__bsx',
      ),
    ],
  ),
  '__sched_cpucount': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'size_t',
        name = '__setsize',
      ),
      Param(
        type = 'const cpu_set_t *',
        name = '__setp',
      ),
    ],
  ),
  '__sched_cpualloc': Spec(
    return_type = 'cpu_set_t *',
    parameters = [
      Param(
        type = 'size_t',
        name = '__count',
      ),
    ],
  ),
  '__sched_cpufree': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cpu_set_t *',
        name = '__set',
      ),
    ],
  ),
  'sched_setparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_getparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_setscheduler': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'sched_getscheduler': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'sched_yield': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'sched_get_priority_max': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__algorithm',
      ),
    ],
  ),
  'sched_get_priority_min': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__algorithm',
      ),
    ],
  ),
  'sched_rr_get_interval': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = 'struct timespec *',
        name = '__t',
      ),
    ],
  ),
  'pthread_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t *restrict',
        name = '__newthread',
      ),
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void *(*)(void *)',
        name = '__start_routine',
      ),
      Param(
        type = 'void *restrict',
        name = '__arg',
      ),
    ],
  ),
  'pthread_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'void *',
        name = '__retval',
      ),
    ],
  ),
  'pthread_join': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
      Param(
        type = 'void **',
        name = '__thread_return',
      ),
    ],
  ),
  'pthread_detach': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
    ],
  ),
  'pthread_self': Spec(
    return_type = 'pthread_t',
    parameters = [
    ],
  ),
  'pthread_equal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__thread1',
      ),
      Param(
        type = 'pthread_t',
        name = '__thread2',
      ),
    ],
  ),
  'pthread_attr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_attr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_attr_getdetachstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int *',
        name = '__detachstate',
      ),
    ],
  ),
  'pthread_attr_setdetachstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__detachstate',
      ),
    ],
  ),
  'pthread_attr_getguardsize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t *',
        name = '__guardsize',
      ),
    ],
  ),
  'pthread_attr_setguardsize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t',
        name = '__guardsize',
      ),
    ],
  ),
  'pthread_attr_getschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_attr_setschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'const struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_attr_getschedpolicy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__policy',
      ),
    ],
  ),
  'pthread_attr_setschedpolicy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
    ],
  ),
  'pthread_attr_getinheritsched': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__inherit',
      ),
    ],
  ),
  'pthread_attr_setinheritsched': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__inherit',
      ),
    ],
  ),
  'pthread_attr_getscope': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__scope',
      ),
    ],
  ),
  'pthread_attr_setscope': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__scope',
      ),
    ],
  ),
  'pthread_attr_getstackaddr': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void **restrict',
        name = '__stackaddr',
      ),
    ],
  ),
  'pthread_attr_setstackaddr': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'void *',
        name = '__stackaddr',
      ),
    ],
  ),
  'pthread_attr_getstacksize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_setstacksize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'size_t',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_getstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_attr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'void **restrict',
        name = '__stackaddr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_attr_setstack': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_attr_t *',
        name = '__attr',
      ),
      Param(
        type = 'void *',
        name = '__stackaddr',
      ),
      Param(
        type = 'size_t',
        name = '__stacksize',
      ),
    ],
  ),
  'pthread_setschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int',
        name = '__policy',
      ),
      Param(
        type = 'const struct sched_param *',
        name = '__param',
      ),
    ],
  ),
  'pthread_getschedparam': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int *restrict',
        name = '__policy',
      ),
      Param(
        type = 'struct sched_param *restrict',
        name = '__param',
      ),
    ],
  ),
  'pthread_setschedprio': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__target_thread',
      ),
      Param(
        type = 'int',
        name = '__prio',
      ),
    ],
  ),
  'pthread_once': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_once_t *',
        name = '__once_control',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__init_routine',
      ),
    ],
  ),
  'pthread_setcancelstate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__state',
      ),
      Param(
        type = 'int *',
        name = '__oldstate',
      ),
    ],
  ),
  'pthread_setcanceltype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__type',
      ),
      Param(
        type = 'int *',
        name = '__oldtype',
      ),
    ],
  ),
  'pthread_cancel': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__th',
      ),
    ],
  ),
  'pthread_testcancel': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  '__pthread_register_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__pthread_unregister_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__pthread_unwind_next': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '__pthread_unwind_buf_t *',
        name = '__buf',
      ),
    ],
  ),
  '__sigsetjmp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct __jmp_buf_tag *',
        name = '__env',
      ),
      Param(
        type = 'int',
        name = '__savemask',
      ),
    ],
  ),
  'pthread_mutex_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
      Param(
        type = 'const pthread_mutexattr_t *',
        name = '__mutexattr',
      ),
    ],
  ),
  'pthread_mutex_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_trylock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_lock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_timedlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_mutex_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutex_getprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'int *restrict',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutex_setprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'int',
        name = '__prioceiling',
      ),
      Param(
        type = 'int *restrict',
        name = '__old_ceiling',
      ),
    ],
  ),
  'pthread_mutex_consistent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutex_t *',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_mutexattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_mutexattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_mutexattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_mutexattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_mutexattr_gettype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__kind',
      ),
    ],
  ),
  'pthread_mutexattr_settype': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__kind',
      ),
    ],
  ),
  'pthread_mutexattr_getprotocol': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__protocol',
      ),
    ],
  ),
  'pthread_mutexattr_setprotocol': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__protocol',
      ),
    ],
  ),
  'pthread_mutexattr_getprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutexattr_setprioceiling': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__prioceiling',
      ),
    ],
  ),
  'pthread_mutexattr_getrobust': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int *',
        name = '__robustness',
      ),
    ],
  ),
  'pthread_mutexattr_setrobust': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_mutexattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__robustness',
      ),
    ],
  ),
  'pthread_rwlock_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlock_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_rdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_tryrdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_timedrdlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_rwlock_wrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_trywrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlock_timedwrlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *restrict',
        name = '__rwlock',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_rwlock_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlock_t *',
        name = '__rwlock',
      ),
    ],
  ),
  'pthread_rwlockattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlockattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_rwlockattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_rwlockattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_rwlockattr_getkind_np': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_rwlockattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pref',
      ),
    ],
  ),
  'pthread_rwlockattr_setkind_np': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_rwlockattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pref',
      ),
    ],
  ),
  'pthread_cond_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__cond_attr',
      ),
    ],
  ),
  'pthread_cond_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_signal': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_broadcast': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *',
        name = '__cond',
      ),
    ],
  ),
  'pthread_cond_wait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
    ],
  ),
  'pthread_cond_timedwait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_cond_t *restrict',
        name = '__cond',
      ),
      Param(
        type = 'pthread_mutex_t *restrict',
        name = '__mutex',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__abstime',
      ),
    ],
  ),
  'pthread_condattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_condattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_condattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_condattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_condattr_getclock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_condattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = '__clockid_t *restrict',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_condattr_setclock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_condattr_t *',
        name = '__attr',
      ),
      Param(
        type = '__clockid_t',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_spin_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_spin_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_lock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_trylock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_spin_unlock': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_spinlock_t *',
        name = '__lock',
      ),
    ],
  ),
  'pthread_barrier_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *restrict',
        name = '__barrier',
      ),
      Param(
        type = 'const pthread_barrierattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'unsigned int',
        name = '__count',
      ),
    ],
  ),
  'pthread_barrier_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *',
        name = '__barrier',
      ),
    ],
  ),
  'pthread_barrier_wait': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrier_t *',
        name = '__barrier',
      ),
    ],
  ),
  'pthread_barrierattr_init': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_barrierattr_destroy': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
    ],
  ),
  'pthread_barrierattr_getpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const pthread_barrierattr_t *restrict',
        name = '__attr',
      ),
      Param(
        type = 'int *restrict',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_barrierattr_setpshared': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_barrierattr_t *',
        name = '__attr',
      ),
      Param(
        type = 'int',
        name = '__pshared',
      ),
    ],
  ),
  'pthread_key_create': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t *',
        name = '__key',
      ),
      Param(
        type = 'void (*)(void *)',
        name = '__destr_function',
      ),
    ],
  ),
  'pthread_key_delete': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
    ],
  ),
  'pthread_getspecific': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
    ],
  ),
  'pthread_setspecific': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_key_t',
        name = '__key',
      ),
      Param(
        type = 'const void *',
        name = '__pointer',
      ),
    ],
  ),
  'pthread_getcpuclockid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'pthread_t',
        name = '__thread_id',
      ),
      Param(
        type = '__clockid_t *',
        name = '__clock_id',
      ),
    ],
  ),
  'pthread_atfork': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'void (*)(void)',
        name = '__prepare',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__parent',
      ),
      Param(
        type = 'void (*)(void)',
        name = '__child',
      ),
    ],
  ),
  'g_static_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_mutex_get_mutex_impl': Spec(
    return_type = 'GMutex *',
    parameters = [
      Param(
        type = 'GStaticMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_lock_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'guint',
        name = 'depth',
      ),
    ],
  ),
  'g_static_rec_mutex_unlock_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rec_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRecMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_static_rw_lock_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_reader_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_trylock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_writer_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_static_rw_lock_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticRWLock *',
        name = 'lock',
      ),
    ],
  ),
  'g_private_new': Spec(
    return_type = 'GPrivate *',
    parameters = [
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_static_private_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_static_private_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_static_private_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_static_private_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticPrivate *',
        name = 'private_key',
      ),
    ],
  ),
  'g_once_init_enter_impl': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'volatile gsize *',
        name = 'location',
      ),
    ],
  ),
  'g_thread_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'vtable',
      ),
    ],
  ),
  'g_thread_init_with_errorcheck_mutexes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'vtable',
      ),
    ],
  ),
  'g_thread_get_initialized': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_mutex_new': Spec(
    return_type = 'GMutex *',
    parameters = [
    ],
  ),
  'g_mutex_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
    ],
  ),
  'g_cond_new': Spec(
    return_type = 'GCond *',
    parameters = [
    ],
  ),
  'g_cond_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
    ],
  ),
  'g_cond_timed_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCond *',
        name = 'cond',
      ),
      Param(
        type = 'GMutex *',
        name = 'mutex',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'timeval',
      ),
    ],
  ),
  'g_type_init': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_type_init_with_debug_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeDebugFlags',
        name = 'debug_flags',
      ),
    ],
  ),
  'g_type_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_qname': Spec(
    return_type = 'GQuark',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_from_name': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_type_parent': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_depth': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_next_base': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'leaf_type',
      ),
      Param(
        type = 'GType',
        name = 'root_type',
      ),
    ],
  ),
  'g_type_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_class_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_peek_static': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_class_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_class_peek_parent': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_interface_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance_class',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_interface_peek_parent': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
    ],
  ),
  'g_type_default_interface_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_type_default_interface_peek': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_type_default_interface_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
    ],
  ),
  'g_type_children': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint *',
        name = 'n_children',
      ),
    ],
  ),
  'g_type_interfaces': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint *',
        name = 'n_interfaces',
      ),
    ],
  ),
  'g_type_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_type_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_type_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GTypeQuery *',
        name = 'query',
      ),
    ],
  ),
  'g_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_static_simple': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'guint',
        name = 'class_size',
      ),
      Param(
        type = 'GClassInitFunc',
        name = 'class_init',
      ),
      Param(
        type = 'guint',
        name = 'instance_size',
      ),
      Param(
        type = 'GInstanceInitFunc',
        name = 'instance_init',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_dynamic': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_register_fundamental': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GTypeFundamentalInfo *',
        name = 'finfo',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_add_interface_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'const GInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_type_add_interface_dynamic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_interface_add_prerequisite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GType',
        name = 'prerequisite_type',
      ),
    ],
  ),
  'g_type_interface_prerequisites': Spec(
    return_type = 'GType *',
    parameters = [
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'guint *',
        name = 'n_prerequisites',
      ),
    ],
  ),
  'g_type_class_add_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
      Param(
        type = 'gsize',
        name = 'private_size',
      ),
    ],
  ),
  'g_type_instance_get_private': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'private_type',
      ),
    ],
  ),
  'g_type_add_class_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'class_type',
      ),
      Param(
        type = 'gsize',
        name = 'private_size',
      ),
    ],
  ),
  'g_type_class_get_private': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'klass',
      ),
      Param(
        type = 'GType',
        name = 'private_type',
      ),
    ],
  ),
  'g_type_ensure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_get_plugin': Spec(
    return_type = 'GTypePlugin *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_interface_get_plugin': Spec(
    return_type = 'GTypePlugin *',
    parameters = [
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
    ],
  ),
  'g_type_fundamental_next': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_fundamental': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GType',
        name = 'type_id',
      ),
    ],
  ),
  'g_type_create_instance': Spec(
    return_type = 'GTypeInstance *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_free_instance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_add_class_cache_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'cache_data',
      ),
      Param(
        type = 'GTypeClassCacheFunc',
        name = 'cache_func',
      ),
    ],
  ),
  'g_type_remove_class_cache_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'cache_data',
      ),
      Param(
        type = 'GTypeClassCacheFunc',
        name = 'cache_func',
      ),
    ],
  ),
  'g_type_class_unref_uncached': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_class',
      ),
    ],
  ),
  'g_type_add_interface_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'check_data',
      ),
      Param(
        type = 'GTypeInterfaceCheckFunc',
        name = 'check_func',
      ),
    ],
  ),
  'g_type_remove_interface_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'check_data',
      ),
      Param(
        type = 'GTypeInterfaceCheckFunc',
        name = 'check_func',
      ),
    ],
  ),
  'g_type_value_table_peek': Spec(
    return_type = 'GTypeValueTable *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_check_instance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_check_instance_cast': Spec(
    return_type = 'GTypeInstance *',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_check_instance_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
      Param(
        type = 'GType',
        name = 'iface_type',
      ),
    ],
  ),
  'g_type_check_class_cast': Spec(
    return_type = 'GTypeClass *',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_check_class_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
    ],
  ),
  'g_type_check_is_value_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_check_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_type_check_value_holds': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_type_test_flags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'g_type_name_from_instance': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTypeInstance *',
        name = 'instance',
      ),
    ],
  ),
  'g_type_name_from_class': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTypeClass *',
        name = 'g_class',
      ),
    ],
  ),
  'g_value_init': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'g_type',
      ),
    ],
  ),
  'g_value_copy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
    ],
  ),
  'g_value_reset': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_unset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_instance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_value_fits_pointer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_peek_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_type_compatible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
    ],
  ),
  'g_value_type_transformable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
    ],
  ),
  'g_value_transform': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
    ],
  ),
  'g_value_register_transform_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'src_type',
      ),
      Param(
        type = 'GType',
        name = 'dest_type',
      ),
      Param(
        type = 'GValueTransform',
        name = 'transform_func',
      ),
    ],
  ),
  'g_param_spec_ref': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_sink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_ref_sink': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_param_spec_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_param_spec_set_qdata_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_param_spec_steal_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_param_spec_get_redirect_target': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_value_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_defaults': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_validate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_param_value_convert': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GValue *',
        name = 'src_value',
      ),
      Param(
        type = 'GValue *',
        name = 'dest_value',
      ),
      Param(
        type = 'gboolean',
        name = 'strict_validation',
      ),
    ],
  ),
  'g_param_values_cmp': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GValue *',
        name = 'value1',
      ),
      Param(
        type = 'const GValue *',
        name = 'value2',
      ),
    ],
  ),
  'g_param_spec_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_nick': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_get_blurb': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_value_set_param': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_value_get_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_take_param': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_value_set_param_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'param',
      ),
    ],
  ),
  'g_param_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GParamSpecTypeInfo *',
        name = 'pspec_info',
      ),
    ],
  ),
  '_g_param_type_register_static_constant': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GParamSpecTypeInfo *',
        name = 'pspec_info',
      ),
      Param(
        type = 'GType',
        name = 'opt_type',
      ),
    ],
  ),
  'g_param_spec_internal': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'param_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_pool_new': Spec(
    return_type = 'GParamSpecPool *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'type_prefixing',
      ),
    ],
  ),
  'g_param_spec_pool_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
    ],
  ),
  'g_param_spec_pool_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_param_spec_pool_lookup': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'const gchar *',
        name = 'param_name',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
      Param(
        type = 'gboolean',
        name = 'walk_ancestors',
      ),
    ],
  ),
  'g_param_spec_pool_list_owned': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
    ],
  ),
  'g_param_spec_pool_list': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GParamSpecPool *',
        name = 'pool',
      ),
      Param(
        type = 'GType',
        name = 'owner_type',
      ),
      Param(
        type = 'guint *',
        name = 'n_pspecs_p',
      ),
    ],
  ),
  'g_cclosure_new': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_cclosure_new_swap': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
    ],
  ),
  'g_signal_type_cclosure_new': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint',
        name = 'struct_offset',
      ),
    ],
  ),
  'g_closure_ref': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_sink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_new_simple': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'guint',
        name = 'sizeof_closure',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_closure_add_finalize_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_remove_finalize_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_add_invalidate_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_remove_invalidate_notifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'notify_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'notify_func',
      ),
    ],
  ),
  'g_closure_add_marshal_guards': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'pre_marshal_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'pre_marshal_notify',
      ),
      Param(
        type = 'gpointer',
        name = 'post_marshal_data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'post_marshal_notify',
      ),
    ],
  ),
  'g_closure_set_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GClosureMarshal',
        name = 'marshal',
      ),
    ],
  ),
  'g_closure_set_meta_marshal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'GClosureMarshal',
        name = 'meta_marshal',
      ),
    ],
  ),
  'g_closure_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_closure_invoke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
    ],
  ),
  'g_cclosure_marshal_generic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_gvalue',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_generic_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args_list',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VOID': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VOIDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOOLEAN': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOOLEANv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__CHAR': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__CHARv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UCHAR': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UCHARv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__INTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__LONG': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__LONGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ULONG': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ULONGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ENUM': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__ENUMv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLAGS': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLAGSv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLOAT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__FLOATv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__DOUBLE': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__DOUBLEv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__STRING': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__STRINGv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__PARAM': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__PARAMv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOXED': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__BOXEDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__OBJECT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__OBJECTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VARIANT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__VARIANTv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT_POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_VOID__UINT_POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__FLAGS': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__FLAGSv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_STRING__OBJECT_POINTER': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_STRING__OBJECT_POINTERv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__BOXED_BOXED': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  'g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
      Param(
        type = 'int',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_signal_newv': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
      Param(
        type = 'GType *',
        name = 'param_types',
      ),
    ],
  ),
  'g_signal_new_valist': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_signal_new': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'guint',
        name = 'class_offset',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
    ],
  ),
  'g_signal_new_class_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'GSignalFlags',
        name = 'signal_flags',
      ),
      Param(
        type = 'GCallback',
        name = 'class_handler',
      ),
      Param(
        type = 'GSignalAccumulator',
        name = 'accumulator',
      ),
      Param(
        type = 'gpointer',
        name = 'accu_data',
      ),
      Param(
        type = 'GSignalCMarshaller',
        name = 'c_marshaller',
      ),
      Param(
        type = 'GType',
        name = 'return_type',
      ),
      Param(
        type = 'guint',
        name = 'n_params',
      ),
    ],
  ),
  'g_signal_set_va_marshaller': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GSignalCVaMarshaller',
        name = 'va_marshaller',
      ),
    ],
  ),
  'g_signal_emitv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'instance_and_params',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
    ],
  ),
  'g_signal_emit_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_signal_emit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
    ],
  ),
  'g_signal_emit_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
    ],
  ),
  'g_signal_lookup': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
    ],
  ),
  'g_signal_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
    ],
  ),
  'g_signal_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GSignalQuery *',
        name = 'query',
      ),
    ],
  ),
  'g_signal_list_ids': Spec(
    return_type = 'guint *',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint *',
        name = 'n_ids',
      ),
    ],
  ),
  'g_signal_parse_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GType',
        name = 'itype',
      ),
      Param(
        type = 'guint *',
        name = 'signal_id_p',
      ),
      Param(
        type = 'GQuark *',
        name = 'detail_p',
      ),
      Param(
        type = 'gboolean',
        name = 'force_detail_quark',
      ),
    ],
  ),
  'g_signal_get_invocation_hint': Spec(
    return_type = 'GSignalInvocationHint *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_signal_stop_emission': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
    ],
  ),
  'g_signal_stop_emission_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
    ],
  ),
  'g_signal_add_emission_hook': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GSignalEmissionHook',
        name = 'hook_func',
      ),
      Param(
        type = 'gpointer',
        name = 'hook_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'g_signal_remove_emission_hook': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'gulong',
        name = 'hook_id',
      ),
    ],
  ),
  'g_signal_has_handler_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'gboolean',
        name = 'may_be_blocked',
      ),
    ],
  ),
  'g_signal_connect_closure_by_id': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gboolean',
        name = 'after',
      ),
    ],
  ),
  'g_signal_connect_closure': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gboolean',
        name = 'after',
      ),
    ],
  ),
  'g_signal_connect_data': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GCallback',
        name = 'c_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GClosureNotify',
        name = 'destroy_data',
      ),
      Param(
        type = 'GConnectFlags',
        name = 'connect_flags',
      ),
    ],
  ),
  'g_signal_handler_block': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_unblock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_signal_handler_find': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_block_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_unblock_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_handlers_disconnect_matched': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'GSignalMatchType',
        name = 'mask',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GQuark',
        name = 'detail',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'gpointer',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_signal_override_class_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GClosure *',
        name = 'class_closure',
      ),
    ],
  ),
  'g_signal_override_class_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GCallback',
        name = 'class_handler',
      ),
    ],
  ),
  'g_signal_chain_from_overridden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'instance_and_params',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
    ],
  ),
  'g_signal_chain_from_overridden_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  'g_signal_accumulator_true_handled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSignalInvocationHint *',
        name = 'ihint',
      ),
      Param(
        type = 'GValue *',
        name = 'return_accu',
      ),
      Param(
        type = 'const GValue *',
        name = 'handler_return',
      ),
      Param(
        type = 'gpointer',
        name = 'dummy',
      ),
    ],
  ),
  'g_signal_accumulator_first_wins': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSignalInvocationHint *',
        name = 'ihint',
      ),
      Param(
        type = 'GValue *',
        name = 'return_accu',
      ),
      Param(
        type = 'const GValue *',
        name = 'handler_return',
      ),
      Param(
        type = 'gpointer',
        name = 'dummy',
      ),
    ],
  ),
  'g_signal_handlers_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
    ],
  ),
  '_g_signals_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'itype',
      ),
    ],
  ),
  'g_date_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_strv_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_gstring_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_hash_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_byte_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_ptr_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bytes_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_type_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_regex_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_match_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_date_time_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_time_zone_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_channel_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_condition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_builder_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_key_file_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_main_loop_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_main_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollfd_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_thread_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_variant_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_boxed_copy': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'gconstpointer',
        name = 'src_boxed',
      ),
    ],
  ),
  'g_boxed_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'gpointer',
        name = 'boxed',
      ),
    ],
  ),
  'g_value_set_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_set_static_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_take_boxed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_set_boxed_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gconstpointer',
        name = 'v_boxed',
      ),
    ],
  ),
  'g_value_get_boxed': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_boxed': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_boxed_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBoxedCopyFunc',
        name = 'boxed_copy',
      ),
      Param(
        type = 'GBoxedFreeFunc',
        name = 'boxed_free',
      ),
    ],
  ),
  'g_closure_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_initially_unowned_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_object_class_install_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_class_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_class_list_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'g_object_class_override_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_object_class_install_properties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'oclass',
      ),
      Param(
        type = 'guint',
        name = 'n_pspecs',
      ),
      Param(
        type = 'GParamSpec **',
        name = 'pspecs',
      ),
    ],
  ),
  'g_object_interface_install_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_interface_find_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_interface_list_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'g_iface',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties_p',
      ),
    ],
  ),
  'g_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_object_new': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_newv': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
    ],
  ),
  'g_object_new_valist': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_object_connect': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_spec',
      ),
    ],
  ),
  'g_object_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_spec',
      ),
    ],
  ),
  'g_object_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_object_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_object_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_object_freeze_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_object_notify_by_pspec': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'g_object_thaw_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_is_floating': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_ref_sink': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_ref': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_object_weak_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GWeakNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_weak_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GWeakNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_add_weak_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'gpointer *',
        name = 'weak_pointer_location',
      ),
    ],
  ),
  'g_object_remove_weak_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'gpointer *',
        name = 'weak_pointer_location',
      ),
    ],
  ),
  'g_object_add_toggle_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GToggleNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_remove_toggle_ref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GToggleNotify',
        name = 'notify',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_get_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_object_set_qdata': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_set_qdata_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_object_steal_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
    ],
  ),
  'g_object_dup_qdata': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_object_replace_qdata': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GQuark',
        name = 'quark',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_object_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_object_set_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_object_set_data_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_object_steal_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_object_dup_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GDuplicateFunc',
        name = 'dup_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_object_replace_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'oldval',
      ),
      Param(
        type = 'gpointer',
        name = 'newval',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'GDestroyNotify *',
        name = 'old_destroy',
      ),
    ],
  ),
  'g_object_watch_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_cclosure_new_object': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_cclosure_new_object_swap': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'callback_func',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_closure_new_object': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'guint',
        name = 'sizeof_closure',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_value_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_value_get_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_signal_connect_object': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'instance',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_signal',
      ),
      Param(
        type = 'GCallback',
        name = 'c_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'gobject',
      ),
      Param(
        type = 'GConnectFlags',
        name = 'connect_flags',
      ),
    ],
  ),
  'g_object_force_floating': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_object_run_dispose': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'g_value_take_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_value_set_object_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_object',
      ),
    ],
  ),
  'g_object_compat_control': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'gsize',
        name = 'what',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_clear_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'volatile GObject **',
        name = 'object_ptr',
      ),
    ],
  ),
  'g_weak_ref_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_weak_ref_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
    ],
  ),
  'g_weak_ref_get': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
    ],
  ),
  'g_weak_ref_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GWeakRef *',
        name = 'weak_ref',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
    ],
  ),
  'g_binding_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_binding_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_binding_get_flags': Spec(
    return_type = 'GBindingFlags',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_source': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_target': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_source_property': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_binding_get_target_property': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GBinding *',
        name = 'binding',
      ),
    ],
  ),
  'g_object_bind_property': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_object_bind_property_full': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBindingTransformFunc',
        name = 'transform_to',
      ),
      Param(
        type = 'GBindingTransformFunc',
        name = 'transform_from',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_object_bind_property_with_closures': Spec(
    return_type = 'GBinding *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'source_property',
      ),
      Param(
        type = 'gpointer',
        name = 'target',
      ),
      Param(
        type = 'const gchar *',
        name = 'target_property',
      ),
      Param(
        type = 'GBindingFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'transform_to',
      ),
      Param(
        type = 'GClosure *',
        name = 'transform_from',
      ),
    ],
  ),
  'g_enum_get_value': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_enum_get_value_by_name': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_enum_get_value_by_nick': Spec(
    return_type = 'GEnumValue *',
    parameters = [
      Param(
        type = 'GEnumClass *',
        name = 'enum_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
    ],
  ),
  'g_flags_get_first_value': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_flags_get_value_by_name': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_flags_get_value_by_nick': Spec(
    return_type = 'GFlagsValue *',
    parameters = [
      Param(
        type = 'GFlagsClass *',
        name = 'flags_class',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
    ],
  ),
  'g_value_set_enum': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'v_enum',
      ),
    ],
  ),
  'g_value_get_enum': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint',
        name = 'v_flags',
      ),
    ],
  ),
  'g_value_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_enum_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_flags_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_enum_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_enum_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_values',
      ),
    ],
  ),
  'g_flags_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_flags_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_values',
      ),
    ],
  ),
  'g_param_spec_char': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint8',
        name = 'minimum',
      ),
      Param(
        type = 'gint8',
        name = 'maximum',
      ),
      Param(
        type = 'gint8',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uchar': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint8',
        name = 'minimum',
      ),
      Param(
        type = 'guint8',
        name = 'maximum',
      ),
      Param(
        type = 'guint8',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_boolean': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gboolean',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_int': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint',
        name = 'minimum',
      ),
      Param(
        type = 'gint',
        name = 'maximum',
      ),
      Param(
        type = 'gint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uint': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint',
        name = 'minimum',
      ),
      Param(
        type = 'guint',
        name = 'maximum',
      ),
      Param(
        type = 'guint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_long': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'glong',
        name = 'minimum',
      ),
      Param(
        type = 'glong',
        name = 'maximum',
      ),
      Param(
        type = 'glong',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_ulong': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gulong',
        name = 'minimum',
      ),
      Param(
        type = 'gulong',
        name = 'maximum',
      ),
      Param(
        type = 'gulong',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_int64': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gint64',
        name = 'minimum',
      ),
      Param(
        type = 'gint64',
        name = 'maximum',
      ),
      Param(
        type = 'gint64',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_uint64': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'guint64',
        name = 'minimum',
      ),
      Param(
        type = 'guint64',
        name = 'maximum',
      ),
      Param(
        type = 'guint64',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_unichar': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gunichar',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_enum': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'enum_type',
      ),
      Param(
        type = 'gint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_flags': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'flags_type',
      ),
      Param(
        type = 'guint',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_float': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gfloat',
        name = 'minimum',
      ),
      Param(
        type = 'gfloat',
        name = 'maximum',
      ),
      Param(
        type = 'gfloat',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_double': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'gdouble',
        name = 'minimum',
      ),
      Param(
        type = 'gdouble',
        name = 'maximum',
      ),
      Param(
        type = 'gdouble',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_string': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'const gchar *',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_param': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'param_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_boxed': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'boxed_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_pointer': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_value_array': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'element_spec',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_object': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_override': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'overridden',
      ),
    ],
  ),
  'g_param_spec_gtype': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'GType',
        name = 'is_a_type',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_param_spec_variant': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'nick',
      ),
      Param(
        type = 'const gchar *',
        name = 'blurb',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
      Param(
        type = 'GVariant *',
        name = 'default_value',
      ),
      Param(
        type = 'GParamFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_source_set_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'g_source_set_dummy_callback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSource *',
        name = 'source',
      ),
    ],
  ),
  'g_type_module_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_module_use': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
    ],
  ),
  'g_type_module_unuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
    ],
  ),
  'g_type_module_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_type_module_register_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'GType',
        name = 'parent_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'type_name',
      ),
      Param(
        type = 'const GTypeInfo *',
        name = 'type_info',
      ),
      Param(
        type = 'GTypeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_type_module_add_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'const GInterfaceInfo *',
        name = 'interface_info',
      ),
    ],
  ),
  'g_type_module_register_enum': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GEnumValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_type_module_register_flags': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTypeModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GFlagsValue *',
        name = 'const_static_values',
      ),
    ],
  ),
  'g_type_plugin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_type_plugin_use': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_plugin_unuse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
    ],
  ),
  'g_type_plugin_complete_type_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GType',
        name = 'g_type',
      ),
      Param(
        type = 'GTypeInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTypeValueTable *',
        name = 'value_table',
      ),
    ],
  ),
  'g_type_plugin_complete_interface_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTypePlugin *',
        name = 'plugin',
      ),
      Param(
        type = 'GType',
        name = 'instance_type',
      ),
      Param(
        type = 'GType',
        name = 'interface_type',
      ),
      Param(
        type = 'GInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_value_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_array_get_nth': Spec(
    return_type = 'GValue *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_value_array_new': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'guint',
        name = 'n_prealloced',
      ),
    ],
  ),
  'g_value_array_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
    ],
  ),
  'g_value_array_copy': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'const GValueArray *',
        name = 'value_array',
      ),
    ],
  ),
  'g_value_array_prepend': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_append': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_insert': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_array_remove': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'g_value_array_sort': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'GCompareFunc',
        name = 'compare_func',
      ),
    ],
  ),
  'g_value_array_sort_with_data': Spec(
    return_type = 'GValueArray *',
    parameters = [
      Param(
        type = 'GValueArray *',
        name = 'value_array',
      ),
      Param(
        type = 'GCompareDataFunc',
        name = 'compare_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_value_set_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar',
        name = 'v_char',
      ),
    ],
  ),
  'g_value_get_char': Spec(
    return_type = 'gchar',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_schar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint8',
        name = 'v_char',
      ),
    ],
  ),
  'g_value_get_schar': Spec(
    return_type = 'gint8',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uchar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guchar',
        name = 'v_uchar',
      ),
    ],
  ),
  'g_value_get_uchar': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'v_boolean',
      ),
    ],
  ),
  'g_value_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint',
        name = 'v_int',
      ),
    ],
  ),
  'g_value_get_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint',
        name = 'v_uint',
      ),
    ],
  ),
  'g_value_get_uint': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_long': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'glong',
        name = 'v_long',
      ),
    ],
  ),
  'g_value_get_long': Spec(
    return_type = 'glong',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_ulong': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gulong',
        name = 'v_ulong',
      ),
    ],
  ),
  'g_value_get_ulong': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gint64',
        name = 'v_int64',
      ),
    ],
  ),
  'g_value_get_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'guint64',
        name = 'v_uint64',
      ),
    ],
  ),
  'g_value_get_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_float': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gfloat',
        name = 'v_float',
      ),
    ],
  ),
  'g_value_get_float': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gdouble',
        name = 'v_double',
      ),
    ],
  ),
  'g_value_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_set_static_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'const gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_get_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gpointer',
        name = 'v_pointer',
      ),
    ],
  ),
  'g_value_get_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_gtype_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_value_set_gtype': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GType',
        name = 'v_gtype',
      ),
    ],
  ),
  'g_value_get_gtype': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_set_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
    ],
  ),
  'g_value_take_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'variant',
      ),
    ],
  ),
  'g_value_get_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_dup_variant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_pointer_type_register_static': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_strdup_value_contents': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'g_value_take_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_value_set_string_take_ownership': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'gchar *',
        name = 'v_string',
      ),
    ],
  ),
  'g_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_parameter_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state_hint': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_get_state': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_change_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_action_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAction *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'g_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_group_has_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_list_actions': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'g_action_group_get_action_parameter_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state_type': Spec(
    return_type = 'const GVariantType *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state_hint': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_get_action_state': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_change_action_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_action_group_activate_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'g_action_group_action_added': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_action_removed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_group_action_enabled_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'g_action_group_action_state_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'state',
      ),
    ],
  ),
  'g_action_group_query_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'gboolean *',
        name = 'enabled',
      ),
      Param(
        type = 'const GVariantType **',
        name = 'parameter_type',
      ),
      Param(
        type = 'const GVariantType **',
        name = 'state_type',
      ),
      Param(
        type = 'GVariant **',
        name = 'state_hint',
      ),
      Param(
        type = 'GVariant **',
        name = 'state',
      ),
    ],
  ),
  'g_dbus_connection_export_action_group': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unexport_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'export_id',
      ),
    ],
  ),
  'g_action_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_action_map_lookup_action': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_map_add_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_action_map_remove_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_action_map_add_action_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GActionMap *',
        name = 'action_map',
      ),
      Param(
        type = 'const GActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'gint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_app_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_app_info_create_from_commandline': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'commandline',
      ),
      Param(
        type = 'const char *',
        name = 'application_name',
      ),
      Param(
        type = 'GAppInfoCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_dup': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo1',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'appinfo2',
      ),
    ],
  ),
  'g_app_info_get_id': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_display_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_description': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_executable': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_commandline': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_launch': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_supports_uris': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_supports_files': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_launch_uris': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'GList *',
        name = 'uris',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_should_show': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_set_as_default_for_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_set_as_default_for_extension': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'extension',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_add_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_can_remove_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_remove_supports_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_get_supported_types': Spec(
    return_type = 'const char **',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_can_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
    ],
  ),
  'g_app_info_set_as_last_used_for_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_info_get_all': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_app_info_get_all_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_recommended_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_fallback_for_type': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_reset_type_associations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_app_info_get_default_for_type': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
      Param(
        type = 'gboolean',
        name = 'must_support_uris',
      ),
    ],
  ),
  'g_app_info_get_default_for_uri_scheme': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri_scheme',
      ),
    ],
  ),
  'g_app_info_launch_default_for_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_app_launch_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_app_launch_context_new': Spec(
    return_type = 'GAppLaunchContext *',
    parameters = [
    ],
  ),
  'g_app_launch_context_setenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'variable',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
    ],
  ),
  'g_app_launch_context_unsetenv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'variable',
      ),
    ],
  ),
  'g_app_launch_context_get_environment': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
    ],
  ),
  'g_app_launch_context_get_display': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
    ],
  ),
  'g_app_launch_context_get_startup_notify_id': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'GList *',
        name = 'files',
      ),
    ],
  ),
  'g_app_launch_context_launch_failed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'startup_notify_id',
      ),
    ],
  ),
  'g_application_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_id_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
    ],
  ),
  'g_application_new': Spec(
    return_type = 'GApplication *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
      Param(
        type = 'GApplicationFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_application_get_application_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_application_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
    ],
  ),
  'g_application_get_dbus_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_dbus_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_inactivity_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_inactivity_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'guint',
        name = 'inactivity_timeout',
      ),
    ],
  ),
  'g_application_get_flags': Spec(
    return_type = 'GApplicationFlags',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GApplicationFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_application_set_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'g_application_get_is_registered': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_is_remote': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_register': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_application_hold': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_open': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'GFile **',
        name = 'files',
      ),
      Param(
        type = 'gint',
        name = 'n_files',
      ),
      Param(
        type = 'const gchar *',
        name = 'hint',
      ),
    ],
  ),
  'g_application_run': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
      Param(
        type = 'int',
        name = 'argc',
      ),
      Param(
        type = 'char **',
        name = 'argv',
      ),
    ],
  ),
  'g_application_quit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_get_default': Spec(
    return_type = 'GApplication *',
    parameters = [
    ],
  ),
  'g_application_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplication *',
        name = 'application',
      ),
    ],
  ),
  'g_application_command_line_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_command_line_get_arguments': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'int *',
        name = 'argc',
      ),
    ],
  ),
  'g_application_command_line_get_environ': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_getenv': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_application_command_line_get_cwd': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_get_is_remote': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_print': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_application_command_line_printerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_application_command_line_get_exit_status': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_application_command_line_set_exit_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
      Param(
        type = 'int',
        name = 'exit_status',
      ),
    ],
  ),
  'g_application_command_line_get_platform_data': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GApplicationCommandLine *',
        name = 'cmdline',
      ),
    ],
  ),
  'g_initable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_initable_init': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_initable_new': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_initable_newv': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_initable_new_valist': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_initable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_async_initable_init_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_init_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_initable_new_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'g_async_initable_newv_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'guint',
        name = 'n_parameters',
      ),
      Param(
        type = 'GParameter *',
        name = 'parameters',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_new_valist_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'object_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_async_initable_new_finish': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GAsyncInitable *',
        name = 'initable',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_async_result_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
    ],
  ),
  'g_async_result_get_source_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
    ],
  ),
  'g_async_result_legacy_propagate_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_async_result_is_tagged': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_input_stream_read': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_skip': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_read_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_read_bytes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_read_bytes_finish': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_skip_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_skip_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_input_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_input_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_input_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_input_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filter_input_stream_get_base_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_get_close_base_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_input_stream_set_close_base_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilterInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_base',
      ),
    ],
  ),
  'g_buffered_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_buffered_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_buffered_input_stream_new_sized': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_input_stream_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_input_stream_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_input_stream_get_available': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_input_stream_peek': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'offset',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
    ],
  ),
  'g_buffered_input_stream_peek_buffer': Spec(
    return_type = 'const void *',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'count',
      ),
    ],
  ),
  'g_buffered_input_stream_fill': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_buffered_input_stream_fill_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gssize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_buffered_input_stream_fill_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_buffered_input_stream_read_byte': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GBufferedInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_output_stream_write': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_bytes': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_splice': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GInputStream *',
        name = 'source',
      ),
      Param(
        type = 'GOutputStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_flush': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_write_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_write_bytes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_write_bytes_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_splice_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GInputStream *',
        name = 'source',
      ),
      Param(
        type = 'GOutputStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_splice_finish': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_flush_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_flush_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_output_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_is_closing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_output_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_output_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filter_output_stream_get_base_stream': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_get_close_base_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_filter_output_stream_set_close_base_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilterOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_base',
      ),
    ],
  ),
  'g_buffered_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_buffered_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_buffered_output_stream_new_sized': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_output_stream_get_buffer_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_output_stream_set_buffer_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
    ],
  ),
  'g_buffered_output_stream_get_auto_grow': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_buffered_output_stream_set_auto_grow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBufferedOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'auto_grow',
      ),
    ],
  ),
  'g_cancellable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_cancellable_new': Spec(
    return_type = 'GCancellable *',
    parameters = [
    ],
  ),
  'g_cancellable_is_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_set_error_if_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_cancellable_get_fd': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_make_pollfd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GPollFD *',
        name = 'pollfd',
      ),
    ],
  ),
  'g_cancellable_release_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_get_current': Spec(
    return_type = 'GCancellable *',
    parameters = [
    ],
  ),
  'g_cancellable_push_current': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_pop_current': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_cancellable_connect': Spec(
    return_type = 'gulong',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy_func',
      ),
    ],
  ),
  'g_cancellable_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'gulong',
        name = 'handler_id',
      ),
    ],
  ),
  'g_cancellable_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_converter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_convert': Spec(
    return_type = 'GConverterResult',
    parameters = [
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
      Param(
        type = 'const void *',
        name = 'inbuf',
      ),
      Param(
        type = 'gsize',
        name = 'inbuf_size',
      ),
      Param(
        type = 'void *',
        name = 'outbuf',
      ),
      Param(
        type = 'gsize',
        name = 'outbuf_size',
      ),
      Param(
        type = 'GConverterFlags',
        name = 'flags',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_read',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_converter_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_charset_converter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_charset_converter_new': Spec(
    return_type = 'GCharsetConverter *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'to_charset',
      ),
      Param(
        type = 'const gchar *',
        name = 'from_charset',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_charset_converter_set_use_fallback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
      Param(
        type = 'gboolean',
        name = 'use_fallback',
      ),
    ],
  ),
  'g_charset_converter_get_use_fallback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_charset_converter_get_num_fallbacks': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GCharsetConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_content_type_equals': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type1',
      ),
      Param(
        type = 'const gchar *',
        name = 'type2',
      ),
    ],
  ),
  'g_content_type_is_a': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'supertype',
      ),
    ],
  ),
  'g_content_type_is_unknown': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_get_generic_icon_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_can_be_executable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'g_content_type_from_mime_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'g_content_type_guess': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'data_size',
      ),
      Param(
        type = 'gboolean *',
        name = 'result_uncertain',
      ),
    ],
  ),
  'g_content_type_guess_for_tree': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'root',
      ),
    ],
  ),
  'g_content_types_get_registered': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'g_converter_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_converter_input_stream_get_converter': Spec(
    return_type = 'GConverter *',
    parameters = [
      Param(
        type = 'GConverterInputStream *',
        name = 'converter_stream',
      ),
    ],
  ),
  'g_converter_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
      Param(
        type = 'GConverter *',
        name = 'converter',
      ),
    ],
  ),
  'g_converter_output_stream_get_converter': Spec(
    return_type = 'GConverter *',
    parameters = [
      Param(
        type = 'GConverterOutputStream *',
        name = 'converter_stream',
      ),
    ],
  ),
  'access': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'int',
        name = '__type',
      ),
    ],
  ),
  'faccessat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'int',
        name = '__type',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'lseek': Spec(
    return_type = '__off_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'close': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'read': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__nbytes',
      ),
    ],
  ),
  'write': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
    ],
  ),
  'pread': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__nbytes',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
    ],
  ),
  'pwrite': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const void *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = '__off_t',
        name = '__offset',
      ),
    ],
  ),
  'pipe': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int [2]',
        name = '__pipedes',
      ),
    ],
  ),
  'alarm': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__seconds',
      ),
    ],
  ),
  'sleep': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__seconds',
      ),
    ],
  ),
  'ualarm': Spec(
    return_type = '__useconds_t',
    parameters = [
      Param(
        type = '__useconds_t',
        name = '__value',
      ),
      Param(
        type = '__useconds_t',
        name = '__interval',
      ),
    ],
  ),
  'usleep': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__useconds_t',
        name = '__useconds',
      ),
    ],
  ),
  'pause': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'chown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'fchown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'lchown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
    ],
  ),
  'fchownat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__uid_t',
        name = '__owner',
      ),
      Param(
        type = '__gid_t',
        name = '__group',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'chdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'fchdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'getcwd': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
    ],
  ),
  'getwd': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__buf',
      ),
    ],
  ),
  'dup': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'dup2': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__fd2',
      ),
    ],
  ),
  'execve': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
      Param(
        type = 'char *const []',
        name = '__envp',
      ),
    ],
  ),
  'fexecve': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
      Param(
        type = 'char *const []',
        name = '__envp',
      ),
    ],
  ),
  'execv': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
    ],
  ),
  'execle': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'execl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'execvp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'char *const []',
        name = '__argv',
      ),
    ],
  ),
  'execlp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = 'const char *',
        name = '__arg',
      ),
    ],
  ),
  'nice': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__inc',
      ),
    ],
  ),
  '_exit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int',
        name = '__status',
      ),
    ],
  ),
  'pathconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'fpathconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'sysconf': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'int',
        name = '__name',
      ),
    ],
  ),
  'confstr': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'int',
        name = '__name',
      ),
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'getpid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getppid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getpgrp': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  '__getpgid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'getpgid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'setpgid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
      Param(
        type = '__pid_t',
        name = '__pgid',
      ),
    ],
  ),
  'setpgrp': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'setsid': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'getsid': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = '__pid_t',
        name = '__pid',
      ),
    ],
  ),
  'getuid': Spec(
    return_type = '__uid_t',
    parameters = [
    ],
  ),
  'geteuid': Spec(
    return_type = '__uid_t',
    parameters = [
    ],
  ),
  'getgid': Spec(
    return_type = '__gid_t',
    parameters = [
    ],
  ),
  'getegid': Spec(
    return_type = '__gid_t',
    parameters = [
    ],
  ),
  'getgroups': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__size',
      ),
      Param(
        type = '__gid_t []',
        name = '__list',
      ),
    ],
  ),
  'setuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__uid',
      ),
    ],
  ),
  'setreuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__ruid',
      ),
      Param(
        type = '__uid_t',
        name = '__euid',
      ),
    ],
  ),
  'seteuid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__uid_t',
        name = '__uid',
      ),
    ],
  ),
  'setgid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__gid',
      ),
    ],
  ),
  'setregid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__rgid',
      ),
      Param(
        type = '__gid_t',
        name = '__egid',
      ),
    ],
  ),
  'setegid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '__gid_t',
        name = '__gid',
      ),
    ],
  ),
  'fork': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'vfork': Spec(
    return_type = '__pid_t',
    parameters = [
    ],
  ),
  'ttyname': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'ttyname_r': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'char *',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__buflen',
      ),
    ],
  ),
  'isatty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'ttyslot': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'link': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'linkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fromfd',
      ),
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'int',
        name = '__tofd',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
      Param(
        type = 'int',
        name = '__flags',
      ),
    ],
  ),
  'symlink': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'readlink': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__path',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'symlinkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__from',
      ),
      Param(
        type = 'int',
        name = '__tofd',
      ),
      Param(
        type = 'const char *',
        name = '__to',
      ),
    ],
  ),
  'readlinkat': Spec(
    return_type = 'ssize_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__path',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'unlink': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'unlinkat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'int',
        name = '__flag',
      ),
    ],
  ),
  'rmdir': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'tcgetpgrp': Spec(
    return_type = '__pid_t',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'tcsetpgrp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__pid_t',
        name = '__pgrp_id',
      ),
    ],
  ),
  'getlogin': Spec(
    return_type = 'char *',
    parameters = [
    ],
  ),
  'getlogin_r': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__name_len',
      ),
    ],
  ),
  'setlogin': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'getopt': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '___argc',
      ),
      Param(
        type = 'char *const *',
        name = '___argv',
      ),
      Param(
        type = 'const char *',
        name = '__shortopts',
      ),
    ],
  ),
  'gethostname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'sethostname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'sethostid': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'long',
        name = '__id',
      ),
    ],
  ),
  'getdomainname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'setdomainname': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
    ],
  ),
  'vhangup': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'revoke': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
    ],
  ),
  'profil': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'unsigned short *',
        name = '__sample_buffer',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__offset',
      ),
      Param(
        type = 'unsigned int',
        name = '__scale',
      ),
    ],
  ),
  'acct': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__name',
      ),
    ],
  ),
  'getusershell': Spec(
    return_type = 'char *',
    parameters = [
    ],
  ),
  'endusershell': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'setusershell': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'daemon': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nochdir',
      ),
      Param(
        type = 'int',
        name = '__noclose',
      ),
    ],
  ),
  'chroot': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__path',
      ),
    ],
  ),
  'getpass': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__prompt',
      ),
    ],
  ),
  'fsync': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
    ],
  ),
  'gethostid': Spec(
    return_type = 'long',
    parameters = [
    ],
  ),
  'sync': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'getpagesize': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'getdtablesize': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'truncate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__file',
      ),
      Param(
        type = '__off_t',
        name = '__length',
      ),
    ],
  ),
  'ftruncate': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = '__off_t',
        name = '__length',
      ),
    ],
  ),
  'brk': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'void *',
        name = '__addr',
      ),
    ],
  ),
  'sbrk': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'intptr_t',
        name = '__delta',
      ),
    ],
  ),
  'syscall': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'long',
        name = '__sysno',
      ),
    ],
  ),
  'lockf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'int',
        name = '__cmd',
      ),
      Param(
        type = '__off_t',
        name = '__len',
      ),
    ],
  ),
  'fdatasync': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fildes',
      ),
    ],
  ),
  'select': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__readfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__writefds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__exceptfds',
      ),
      Param(
        type = 'struct timeval *restrict',
        name = '__timeout',
      ),
    ],
  ),
  'pselect': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__nfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__readfds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__writefds',
      ),
      Param(
        type = 'fd_set *restrict',
        name = '__exceptfds',
      ),
      Param(
        type = 'const struct timespec *restrict',
        name = '__timeout',
      ),
      Param(
        type = 'const __sigset_t *restrict',
        name = '__sigmask',
      ),
    ],
  ),
  'gnu_dev_major': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__dev',
      ),
    ],
  ),
  'gnu_dev_minor': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'unsigned long long',
        name = '__dev',
      ),
    ],
  ),
  'gnu_dev_makedev': Spec(
    return_type = 'unsigned long long',
    parameters = [
      Param(
        type = 'unsigned int',
        name = '__major',
      ),
      Param(
        type = 'unsigned int',
        name = '__minor',
      ),
    ],
  ),
  'g_credentials_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_credentials_new': Spec(
    return_type = 'GCredentials *',
    parameters = [
    ],
  ),
  'g_credentials_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
    ],
  ),
  'g_credentials_get_native': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentialsType',
        name = 'native_type',
      ),
    ],
  ),
  'g_credentials_set_native': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentialsType',
        name = 'native_type',
      ),
      Param(
        type = 'gpointer',
        name = 'native',
      ),
    ],
  ),
  'g_credentials_is_same_user': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GCredentials *',
        name = 'other_credentials',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_credentials_get_unix_user': Spec(
    return_type = 'uid_t',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_credentials_set_unix_user': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
      Param(
        type = 'uid_t',
        name = 'uid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_input_stream_new': Spec(
    return_type = 'GDataInputStream *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_data_input_stream_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamByteOrder',
        name = 'order',
      ),
    ],
  ),
  'g_data_input_stream_get_byte_order': Spec(
    return_type = 'GDataStreamByteOrder',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_input_stream_set_newline_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamNewlineType',
        name = 'type',
      ),
    ],
  ),
  'g_data_input_stream_get_newline_type': Spec(
    return_type = 'GDataStreamNewlineType',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_input_stream_read_byte': Spec(
    return_type = 'guchar',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int16': Spec(
    return_type = 'gint16',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint16': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_utf8': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_line_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_line_finish_utf8': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_until': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_until_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_until_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_upto': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gssize',
        name = 'stop_chars_len',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_input_stream_read_upto_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'stop_chars',
      ),
      Param(
        type = 'gssize',
        name = 'stop_chars_len',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_data_input_stream_read_upto_finish': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDataInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_output_stream_new': Spec(
    return_type = 'GDataOutputStream *',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'base_stream',
      ),
    ],
  ),
  'g_data_output_stream_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GDataStreamByteOrder',
        name = 'order',
      ),
    ],
  ),
  'g_data_output_stream_get_byte_order': Spec(
    return_type = 'GDataStreamByteOrder',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_data_output_stream_put_byte': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guchar',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int16': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint16',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint16': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint16',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint32',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint32',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_int64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint64',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_uint64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'guint64',
        name = 'data',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_data_output_stream_put_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDataOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_is_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_supported_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_stream': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_address_get_stream_finish': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'gchar **',
        name = 'out_guid',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_stream_sync': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'gchar **',
        name = 'out_guid',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_address_get_for_bus_sync': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_auth_observer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_auth_observer_new': Spec(
    return_type = 'GDBusAuthObserver *',
    parameters = [
    ],
  ),
  'g_dbus_auth_observer_authorize_authenticated_peer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
    ],
  ),
  'g_dbus_auth_observer_allow_mechanism': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'const gchar *',
        name = 'mechanism',
      ),
    ],
  ),
  'g_dbus_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_bus_get_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_bus_get_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_new_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address_finish': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_new_for_address_sync': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusConnectionFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_start_message_processing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_stream': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_guid': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_unique_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_peer_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_last_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_get_exit_on_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_set_exit_on_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'gboolean',
        name = 'exit_on_close',
      ),
    ],
  ),
  'g_dbus_connection_get_capabilities': Spec(
    return_type = 'GDBusCapabilityFlags',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_connection_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_close_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_flush_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_flush_sync': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply_finish': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_send_message_with_reply_sync': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusSendMessageFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'volatile guint32 *',
        name = 'out_serial',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_emit_signal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'destination_bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_call_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_call_with_unix_fd_list_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'reply_type',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_register_object': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'interface_info',
      ),
      Param(
        type = 'const GDBusInterfaceVTable *',
        name = 'vtable',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unregister_object': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'registration_id',
      ),
    ],
  ),
  'g_dbus_connection_register_subtree': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const GDBusSubtreeVTable *',
        name = 'vtable',
      ),
      Param(
        type = 'GDBusSubtreeFlags',
        name = 'flags',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unregister_subtree': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'registration_id',
      ),
    ],
  ),
  'g_dbus_connection_signal_subscribe': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'sender',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'member',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'arg0',
      ),
      Param(
        type = 'GDBusSignalFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusSignalCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_dbus_connection_signal_unsubscribe': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'subscription_id',
      ),
    ],
  ),
  'g_dbus_connection_add_filter': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusMessageFilterFunction',
        name = 'filter_function',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_dbus_connection_remove_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'filter_id',
      ),
    ],
  ),
  'g_dbus_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_dbus_error_is_remote_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_get_remote_error': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_strip_remote_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_error_register_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'gint',
        name = 'error_code',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
    ],
  ),
  'g_dbus_error_unregister_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GQuark',
        name = 'error_domain',
      ),
      Param(
        type = 'gint',
        name = 'error_code',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
    ],
  ),
  'g_dbus_error_register_error_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'error_domain_quark_name',
      ),
      Param(
        type = 'volatile gsize *',
        name = 'quark_volatile',
      ),
      Param(
        type = 'const GDBusErrorEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'num_entries',
      ),
    ],
  ),
  'g_dbus_error_new_for_dbus_error': Spec(
    return_type = 'GError *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
    ],
  ),
  'g_dbus_error_set_dbus_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dbus_error_set_dbus_error_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GError **',
        name = 'error',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'dbus_error_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_error_encode_gerror': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_annotation_info_lookup': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo **',
        name = 'annotations',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_method': Spec(
    return_type = 'GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_signal': Spec(
    return_type = 'GDBusSignalInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_lookup_property': Spec(
    return_type = 'GDBusPropertyInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_interface_info_cache_build': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_cache_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_generate_xml': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
      Param(
        type = 'GString *',
        name = 'string_builder',
      ),
    ],
  ),
  'g_dbus_node_info_new_for_xml': Spec(
    return_type = 'GDBusNodeInfo *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'xml_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_node_info_lookup_interface': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_dbus_node_info_generate_xml': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
      Param(
        type = 'GString *',
        name = 'string_builder',
      ),
    ],
  ),
  'g_dbus_node_info_ref': Spec(
    return_type = 'GDBusNodeInfo *',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_ref': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_method_info_ref': Spec(
    return_type = 'GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusMethodInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_signal_info_ref': Spec(
    return_type = 'GDBusSignalInfo *',
    parameters = [
      Param(
        type = 'GDBusSignalInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_property_info_ref': Spec(
    return_type = 'GDBusPropertyInfo *',
    parameters = [
      Param(
        type = 'GDBusPropertyInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_arg_info_ref': Spec(
    return_type = 'GDBusArgInfo *',
    parameters = [
      Param(
        type = 'GDBusArgInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_annotation_info_ref': Spec(
    return_type = 'GDBusAnnotationInfo *',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_node_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusNodeInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_interface_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_method_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_signal_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusSignalInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_property_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusPropertyInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_arg_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusArgInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_annotation_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusAnnotationInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_node_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_method_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_signal_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_property_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_arg_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_annotation_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_new': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
    ],
  ),
  'g_dbus_message_new_signal': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal',
      ),
    ],
  ),
  'g_dbus_message_new_method_call': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_',
      ),
      Param(
        type = 'const gchar *',
        name = 'method',
      ),
    ],
  ),
  'g_dbus_message_new_method_reply': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
    ],
  ),
  'g_dbus_message_new_method_error': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message_format',
      ),
    ],
  ),
  'g_dbus_message_new_method_error_valist': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message_format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_message_new_method_error_literal': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'method_call_message',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message',
      ),
    ],
  ),
  'g_dbus_message_print': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint',
        name = 'indent',
      ),
    ],
  ),
  'g_dbus_message_get_locked': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_copy': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_get_byte_order': Spec(
    return_type = 'GDBusMessageByteOrder',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_byte_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageByteOrder',
        name = 'byte_order',
      ),
    ],
  ),
  'g_dbus_message_get_message_type': Spec(
    return_type = 'GDBusMessageType',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_message_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageType',
        name = 'type',
      ),
    ],
  ),
  'g_dbus_message_get_flags': Spec(
    return_type = 'GDBusMessageFlags',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_dbus_message_get_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_serial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'serial',
      ),
    ],
  ),
  'g_dbus_message_get_header': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageHeaderField',
        name = 'header_field',
      ),
    ],
  ),
  'g_dbus_message_set_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GDBusMessageHeaderField',
        name = 'header_field',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_header_fields': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_get_body': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_body': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GVariant *',
        name = 'body',
      ),
    ],
  ),
  'g_dbus_message_get_unix_fd_list': Spec(
    return_type = 'GUnixFDList *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
    ],
  ),
  'g_dbus_message_get_reply_serial': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_reply_serial': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_interface': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_member': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_member': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_sender': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_sender': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_destination': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_destination': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_error_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_error_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_signature': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_signature': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_num_unix_fds': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_set_num_unix_fds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_message_get_arg0': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_message_new_from_blob': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'blob',
      ),
      Param(
        type = 'gsize',
        name = 'blob_len',
      ),
      Param(
        type = 'GDBusCapabilityFlags',
        name = 'capabilities',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_bytes_needed': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'blob',
      ),
      Param(
        type = 'gsize',
        name = 'blob_len',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_to_blob': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'gsize *',
        name = 'out_size',
      ),
      Param(
        type = 'GDBusCapabilityFlags',
        name = 'capabilities',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_message_to_gerror': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusMessage *',
        name = 'message',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_method_invocation_get_sender': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_interface_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_method_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_method_info': Spec(
    return_type = 'const GDBusMethodInfo *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_message': Spec(
    return_type = 'GDBusMessage *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_parameters': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_value_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_error_literal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const gchar *',
        name = 'message',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_gerror': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_take_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_method_invocation_return_dbus_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusMethodInvocation *',
        name = 'invocation',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'error_message',
      ),
    ],
  ),
  'g_bus_own_name': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusAcquiredCallback',
        name = 'bus_acquired_handler',
      ),
      Param(
        type = 'GBusNameAcquiredCallback',
        name = 'name_acquired_handler',
      ),
      Param(
        type = 'GBusNameLostCallback',
        name = 'name_lost_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_own_name_on_connection': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAcquiredCallback',
        name = 'name_acquired_handler',
      ),
      Param(
        type = 'GBusNameLostCallback',
        name = 'name_lost_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_own_name_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'bus_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_lost_closure',
      ),
    ],
  ),
  'g_bus_own_name_on_connection_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameOwnerFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_acquired_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_lost_closure',
      ),
    ],
  ),
  'g_bus_unown_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'owner_id',
      ),
    ],
  ),
  'g_bus_watch_name': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAppearedCallback',
        name = 'name_appeared_handler',
      ),
      Param(
        type = 'GBusNameVanishedCallback',
        name = 'name_vanished_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_watch_name_on_connection': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GBusNameAppearedCallback',
        name = 'name_appeared_handler',
      ),
      Param(
        type = 'GBusNameVanishedCallback',
        name = 'name_vanished_handler',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_free_func',
      ),
    ],
  ),
  'g_bus_watch_name_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_appeared_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_vanished_closure',
      ),
    ],
  ),
  'g_bus_watch_name_on_connection_with_closures': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GBusNameWatcherFlags',
        name = 'flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_appeared_closure',
      ),
      Param(
        type = 'GClosure *',
        name = 'name_vanished_closure',
      ),
    ],
  ),
  'g_bus_unwatch_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'watcher_id',
      ),
    ],
  ),
  'g_dbus_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_proxy_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_new_finish': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_sync': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus_finish': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_new_for_bus_sync': Spec(
    return_type = 'GDBusProxy *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusProxyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_flags': Spec(
    return_type = 'GDBusProxyFlags',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_name_owner': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_interface_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_get_default_timeout': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_set_default_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
    ],
  ),
  'g_dbus_proxy_get_interface_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_set_interface_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GDBusInterfaceInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_dbus_proxy_get_cached_property': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'g_dbus_proxy_set_cached_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_dbus_proxy_get_cached_property_names': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_proxy_call': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_call_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list_finish': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_proxy_call_with_unix_fd_list_sync': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'const gchar *',
        name = 'method_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameters',
      ),
      Param(
        type = 'GDBusCallFlags',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'timeout_msec',
      ),
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
      Param(
        type = 'GUnixFDList **',
        name = 'out_fd_list',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_server_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_server_new_sync': Spec(
    return_type = 'GDBusServer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'address',
      ),
      Param(
        type = 'GDBusServerFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'guid',
      ),
      Param(
        type = 'GDBusAuthObserver *',
        name = 'observer',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_server_get_client_address': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_get_guid': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_get_flags': Spec(
    return_type = 'GDBusServerFlags',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_server_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusServer *',
        name = 'server',
      ),
    ],
  ),
  'g_dbus_is_guid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_generate_guid': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'g_dbus_is_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_unique_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_member_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_is_interface_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_dbus_gvariant_to_gvalue': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GValue *',
        name = 'out_gvalue',
      ),
    ],
  ),
  'g_dbus_gvalue_to_gvariant': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'const GValue *',
        name = 'gvalue',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'type',
      ),
    ],
  ),
  'g_drive_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_has_volumes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_volumes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_is_media_removable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_has_media': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_is_media_check_automatic': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_poll_for_media': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_poll_for_media': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_poll_for_media_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_get_identifier': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'const char *',
        name = 'kind',
      ),
    ],
  ),
  'g_drive_enumerate_identifiers': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_get_start_stop_type': Spec(
    return_type = 'GDriveStartStopType',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_can_start_degraded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GDriveStartFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_start_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_can_stop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_drive_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_stop_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_drive_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_drive_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDrive *',
        name = 'drive',
      ),
    ],
  ),
  'g_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_icon_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'icon',
      ),
    ],
  ),
  'g_icon_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon1',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon2',
      ),
    ],
  ),
  'g_icon_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_icon_new_for_string': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_emblem_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblem_new': Spec(
    return_type = 'GEmblem *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_emblem_new_with_origin': Spec(
    return_type = 'GEmblem *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GEmblemOrigin',
        name = 'origin',
      ),
    ],
  ),
  'g_emblem_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblem_get_origin': Spec(
    return_type = 'GEmblemOrigin',
    parameters = [
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblemed_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_emblemed_icon_get_emblems': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_emblemed_icon_add_emblem': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
      Param(
        type = 'GEmblem *',
        name = 'emblem',
      ),
    ],
  ),
  'g_emblemed_icon_clear_emblems': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GEmblemedIcon *',
        name = 'emblemed',
      ),
    ],
  ),
  'g_file_attribute_info_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_info_list_new': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
    ],
  ),
  'g_file_attribute_info_list_ref': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_dup': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
    ],
  ),
  'g_file_attribute_info_list_lookup': Spec(
    return_type = 'const GFileAttributeInfo *',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_attribute_info_list_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeInfoList *',
        name = 'list',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'GFileAttributeInfoFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_file_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_enumerator_next_file': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_next_files_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'int',
        name = 'num_files',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerator_next_files_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerator_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerator_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_enumerator_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_enumerator_set_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'gboolean',
        name = 'pending',
      ),
    ],
  ),
  'g_file_enumerator_get_container': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFileEnumerator *',
        name = 'enumerator',
      ),
    ],
  ),
  'g_file_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_new_for_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
    ],
  ),
  'g_file_new_for_uri': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_file_new_for_commandline_arg': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'arg',
      ),
    ],
  ),
  'g_file_new_tmp': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'tmpl',
      ),
      Param(
        type = 'GFileIOStream **',
        name = 'iostream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_parse_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'parse_name',
      ),
    ],
  ),
  'g_file_dup': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'file',
      ),
    ],
  ),
  'g_file_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file1',
      ),
      Param(
        type = 'GFile *',
        name = 'file2',
      ),
    ],
  ),
  'g_file_get_basename': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_path': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_uri': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_parse_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_get_parent': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_has_parent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFile *',
        name = 'parent',
      ),
    ],
  ),
  'g_file_get_child': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_get_child_for_display_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_has_prefix': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFile *',
        name = 'prefix',
      ),
    ],
  ),
  'g_file_get_relative_path': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'parent',
      ),
      Param(
        type = 'GFile *',
        name = 'descendant',
      ),
    ],
  ),
  'g_file_resolve_relative_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'relative_path',
      ),
    ],
  ),
  'g_file_is_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_has_uri_scheme': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'uri_scheme',
      ),
    ],
  ),
  'g_file_get_uri_scheme': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_read': Spec(
    return_type = 'GFileInputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_read_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_read_finish': Spec(
    return_type = 'GFileInputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_append_to': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_append_to_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_append_to_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_create_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_finish': Spec(
    return_type = 'GFileOutputStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_open_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_open_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_open_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_create_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_create_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_readwrite': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_readwrite_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_readwrite_finish': Spec(
    return_type = 'GFileIOStream *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_exists': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_file_query_file_type': Spec(
    return_type = 'GFileType',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_file_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_filesystem_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_filesystem_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_query_filesystem_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_find_enclosing_mount': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_find_enclosing_mount_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_find_enclosing_mount_finish': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerate_children': Spec(
    return_type = 'GFileEnumerator *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_enumerate_children_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_enumerate_children_finish': Spec(
    return_type = 'GFileEnumerator *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_display_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_display_name_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_set_display_name_finish': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_delete_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_delete_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_trash': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_copy_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_move': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileProgressCallback',
        name = 'progress_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'progress_callback_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_directory': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_directory_with_parents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_make_symbolic_link': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'symlink_value',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_settable_attributes': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_writable_namespaces': Spec(
    return_type = 'GFileAttributeInfoList *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'gpointer',
        name = 'value_p',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attributes_from_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attributes_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_set_attributes_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GFileInfo **',
        name = 'info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_byte_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_uint32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint32',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_int32': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint32',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_uint64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint64',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_set_attribute_int64': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint64',
        name = 'value',
      ),
      Param(
        type = 'GFileQueryInfoFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_mount_enclosing_volume': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'location',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_mount_enclosing_volume_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'location',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_mount_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_mount_mountable_finish': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_unmount_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_unmount_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_unmount_mountable_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_unmount_mountable_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_eject_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_eject_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_eject_mountable_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_eject_mountable_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_copy_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'source',
      ),
      Param(
        type = 'GFile *',
        name = 'destination',
      ),
      Param(
        type = 'GFileCopyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor_directory': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor_file': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_monitor': Spec(
    return_type = 'GFileMonitor *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GFileMonitorFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_start_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GDriveStartFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'start_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_start_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_stop_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_stop_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_poll_mountable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_poll_mountable_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_query_default_handler': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_load_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_load_partial_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GFileReadMoreCallback',
        name = 'read_more_callback',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_load_partial_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'contents',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
      Param(
        type = 'char **',
        name = 'etag_out',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_contents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'contents',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'char **',
        name = 'new_etag',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_replace_contents_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'const char *',
        name = 'contents',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'const char *',
        name = 'etag',
      ),
      Param(
        type = 'gboolean',
        name = 'make_backup',
      ),
      Param(
        type = 'GFileCreateFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_replace_contents_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'new_etag',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_supports_thread_contexts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'g_file_icon_get_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GFileIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_info_new': Spec(
    return_type = 'GFileInfo *',
    parameters = [
    ],
  ),
  'g_file_info_dup': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'other',
      ),
    ],
  ),
  'g_file_info_copy_into': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'src_info',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'dest_info',
      ),
    ],
  ),
  'g_file_info_has_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_has_namespace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name_space',
      ),
    ],
  ),
  'g_file_info_list_attributes': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name_space',
      ),
    ],
  ),
  'g_file_info_get_attribute_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType *',
        name = 'type',
      ),
      Param(
        type = 'gpointer *',
        name = 'value_pp',
      ),
      Param(
        type = 'GFileAttributeStatus *',
        name = 'status',
      ),
    ],
  ),
  'g_file_info_get_attribute_type': Spec(
    return_type = 'GFileAttributeType',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_remove_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_status': Spec(
    return_type = 'GFileAttributeStatus',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_set_attribute_status': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeStatus',
        name = 'status',
      ),
    ],
  ),
  'g_file_info_get_attribute_as_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_byte_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_uint32': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_int32': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_uint64': Spec(
    return_type = 'guint64',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_int64': Spec(
    return_type = 'gint64',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_get_attribute_stringv': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_info_set_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GFileAttributeType',
        name = 'type',
      ),
      Param(
        type = 'gpointer',
        name = 'value_p',
      ),
    ],
  ),
  'g_file_info_set_attribute_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_byte_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'const char *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gboolean',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_uint32': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint32',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_int32': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint32',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_uint64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'guint64',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_int64': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'gint64',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'GObject *',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_set_attribute_stringv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
      Param(
        type = 'char **',
        name = 'attr_value',
      ),
    ],
  ),
  'g_file_info_clear_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_file_type': Spec(
    return_type = 'GFileType',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_hidden': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_backup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_is_symlink': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_display_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_edit_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_content_type': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_size': Spec(
    return_type = 'goffset',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_modification_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'result',
      ),
    ],
  ),
  'g_file_info_get_symlink_target': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_etag': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_get_sort_order': Spec(
    return_type = 'gint32',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_set_attribute_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'mask',
      ),
    ],
  ),
  'g_file_info_unset_attribute_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_file_info_set_file_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GFileType',
        name = 'type',
      ),
    ],
  ),
  'g_file_info_set_is_hidden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'is_hidden',
      ),
    ],
  ),
  'g_file_info_set_is_symlink': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'is_symlink',
      ),
    ],
  ),
  'g_file_info_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_file_info_set_display_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'display_name',
      ),
    ],
  ),
  'g_file_info_set_edit_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'edit_name',
      ),
    ],
  ),
  'g_file_info_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_set_symbolic_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_file_info_set_content_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'content_type',
      ),
    ],
  ),
  'g_file_info_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'goffset',
        name = 'size',
      ),
    ],
  ),
  'g_file_info_set_modification_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'GTimeVal *',
        name = 'mtime',
      ),
    ],
  ),
  'g_file_info_set_symlink_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'symlink_target',
      ),
    ],
  ),
  'g_file_info_set_sort_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInfo *',
        name = 'info',
      ),
      Param(
        type = 'gint32',
        name = 'sort_order',
      ),
    ],
  ),
  'g_file_attribute_matcher_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_matcher_new': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
    ],
  ),
  'g_file_attribute_matcher_ref': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_subtract': Spec(
    return_type = 'GFileAttributeMatcher *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'subtract',
      ),
    ],
  ),
  'g_file_attribute_matcher_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_attribute_matcher_matches_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'attribute',
      ),
    ],
  ),
  'g_file_attribute_matcher_enumerate_namespace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
      Param(
        type = 'const char *',
        name = 'ns',
      ),
    ],
  ),
  'g_file_attribute_matcher_enumerate_next': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_attribute_matcher_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileAttributeMatcher *',
        name = 'matcher',
      ),
    ],
  ),
  'g_file_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_input_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_input_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_input_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_io_error_from_errno': Spec(
    return_type = 'GIOErrorEnum',
    parameters = [
      Param(
        type = 'gint',
        name = 'err_no',
      ),
    ],
  ),
  'g_io_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_stream_get_input_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_get_output_stream': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_splice_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream1',
      ),
      Param(
        type = 'GIOStream *',
        name = 'stream2',
      ),
      Param(
        type = 'GIOStreamSpliceFlags',
        name = 'flags',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_stream_splice_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_close_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_io_stream_close_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_io_stream_set_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_io_stream_clear_pending': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_file_io_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_io_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_io_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_io_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_io_stream_get_etag': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileIOStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_file_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_file_monitor_is_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_file_monitor_set_rate_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'gint',
        name = 'limit_msecs',
      ),
    ],
  ),
  'g_file_monitor_emit_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GFile *',
        name = 'child',
      ),
      Param(
        type = 'GFile *',
        name = 'other_file',
      ),
      Param(
        type = 'GFileMonitorEvent',
        name = 'event_type',
      ),
    ],
  ),
  'g_filename_completer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filename_completer_new': Spec(
    return_type = 'GFilenameCompleter *',
    parameters = [
    ],
  ),
  'g_filename_completer_get_completion_suffix': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'const char *',
        name = 'initial_text',
      ),
    ],
  ),
  'g_filename_completer_get_completions': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'const char *',
        name = 'initial_text',
      ),
    ],
  ),
  'g_filename_completer_set_dirs_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFilenameCompleter *',
        name = 'completer',
      ),
      Param(
        type = 'gboolean',
        name = 'dirs_only',
      ),
    ],
  ),
  'g_file_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_output_stream_query_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_output_stream_query_info_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'attributes',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_file_output_stream_query_info_finish': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_file_output_stream_get_etag': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GFileOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_inet_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_address_new_from_string': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'g_inet_address_new_from_bytes': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'const guint8 *',
        name = 'bytes',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_new_loopback': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_new_any': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_inet_address_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'other_address',
      ),
    ],
  ),
  'g_inet_address_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_to_bytes': Spec(
    return_type = 'const guint8 *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_native_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_any': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_loopback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_link_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_site_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_multicast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_global': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_link_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_node_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_org_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_get_is_mc_site_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_address_mask_new': Spec(
    return_type = 'GInetAddressMask *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'addr',
      ),
      Param(
        type = 'guint',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_inet_address_mask_new_from_string': Spec(
    return_type = 'GInetAddressMask *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'mask_string',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_inet_address_mask_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_address': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
    ],
  ),
  'g_inet_address_mask_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_address_mask_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GInetAddressMask *',
        name = 'mask',
      ),
      Param(
        type = 'GInetAddressMask *',
        name = 'mask2',
      ),
    ],
  ),
  'g_socket_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_address_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_socket_address_new_from_native': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'native',
      ),
      Param(
        type = 'gsize',
        name = 'len',
      ),
    ],
  ),
  'g_socket_address_to_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'gpointer',
        name = 'dest',
      ),
      Param(
        type = 'gsize',
        name = 'destlen',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_address_get_native_size': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_inet_socket_address_new': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
    ],
  ),
  'g_inet_socket_address_get_address': Spec(
    return_type = 'GInetAddress *',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_flowinfo': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_inet_socket_address_get_scope_id': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GInetSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_app_info_create_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_converter_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_stream_byte_order_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_data_stream_newline_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_attribute_status_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_query_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_create_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_mount_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_unmount_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_start_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_drive_start_stop_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_copy_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_filesystem_preview_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_file_monitor_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_error_enum_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_ask_password_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_password_save_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_operation_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_output_stream_splice_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_stream_splice_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_emblem_origin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_record_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_lookup_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_family_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_msg_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_protocol_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_compressor_format_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_socket_address_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_name_owner_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_bus_name_watcher_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_proxy_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_connection_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_capability_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_call_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_header_field_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_property_info_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_subtree_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_server_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_signal_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_send_message_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_credentials_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_message_byte_order_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_application_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_certificate_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_authentication_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_rehandshake_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_password_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_interaction_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_skeleton_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_client_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_verify_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_lookup_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_module_scope_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_client_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_test_dbus_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_bind_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_module_supported': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_module_open': Spec(
    return_type = 'GModule *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GModuleFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_module_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_make_resident': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_error': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'g_module_symbol': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
      Param(
        type = 'const gchar *',
        name = 'symbol_name',
      ),
      Param(
        type = 'gpointer *',
        name = 'symbol',
      ),
    ],
  ),
  'g_module_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GModule *',
        name = 'module',
      ),
    ],
  ),
  'g_module_build_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'directory',
      ),
      Param(
        type = 'const gchar *',
        name = 'module_name',
      ),
    ],
  ),
  'g_io_module_scope_new': Spec(
    return_type = 'GIOModuleScope *',
    parameters = [
      Param(
        type = 'GIOModuleScopeFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_io_module_scope_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_module_scope_block': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
      Param(
        type = 'const gchar *',
        name = 'basename',
      ),
    ],
  ),
  'g_io_module_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_io_module_new': Spec(
    return_type = 'GIOModule *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'g_io_modules_scan_all_in_directory': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'dirname',
      ),
    ],
  ),
  'g_io_modules_load_all_in_directory': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
    ],
  ),
  'g_io_modules_scan_all_in_directory_with_scope': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_modules_load_all_in_directory_with_scope': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'dirname',
      ),
      Param(
        type = 'GIOModuleScope *',
        name = 'scope',
      ),
    ],
  ),
  'g_io_extension_point_register': Spec(
    return_type = 'GIOExtensionPoint *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_lookup': Spec(
    return_type = 'GIOExtensionPoint *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_set_required_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'g_io_extension_point_get_required_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
    ],
  ),
  'g_io_extension_point_get_extensions': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
    ],
  ),
  'g_io_extension_point_get_extension_by_name': Spec(
    return_type = 'GIOExtension *',
    parameters = [
      Param(
        type = 'GIOExtensionPoint *',
        name = 'extension_point',
      ),
      Param(
        type = 'const char *',
        name = 'name',
      ),
    ],
  ),
  'g_io_extension_point_implement': Spec(
    return_type = 'GIOExtension *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'extension_point_name',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const char *',
        name = 'extension_name',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_io_extension_get_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_extension_ref_class': Spec(
    return_type = 'GTypeClass *',
    parameters = [
      Param(
        type = 'GIOExtension *',
        name = 'extension',
      ),
    ],
  ),
  'g_io_module_load': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModule *',
        name = 'module',
      ),
    ],
  ),
  'g_io_module_unload': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOModule *',
        name = 'module',
      ),
    ],
  ),
  'g_io_module_query': Spec(
    return_type = 'char **',
    parameters = [
    ],
  ),
  'g_io_scheduler_push_job': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOSchedulerJobFunc',
        name = 'job_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
      Param(
        type = 'gint',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_io_scheduler_cancel_all_jobs': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_io_scheduler_job_send_to_mainloop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GIOSchedulerJob *',
        name = 'job',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_io_scheduler_job_send_to_mainloop_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GIOSchedulerJob *',
        name = 'job',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'g_loadable_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_loadable_icon_load': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'char **',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_loadable_icon_load_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'int',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_loadable_icon_load_finish': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GLoadableIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'char **',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_memory_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_memory_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
    ],
  ),
  'g_memory_input_stream_new_from_data': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'const void *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_memory_input_stream_new_from_bytes': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_memory_input_stream_add_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemoryInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'len',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_memory_input_stream_add_bytes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMemoryInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GBytes *',
        name = 'bytes',
      ),
    ],
  ),
  'g_memory_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_memory_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GReallocFunc',
        name = 'realloc_function',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_function',
      ),
    ],
  ),
  'g_memory_output_stream_get_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_get_data_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_steal_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_memory_output_stream_steal_as_bytes': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GMemoryOutputStream *',
        name = 'ostream',
      ),
    ],
  ),
  'g_mount_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_get_root': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_default_location': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_uuid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_volume': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_get_drive': Spec(
    return_type = 'GDrive *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_can_unmount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unmount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_unmount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_remount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_remount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_guess_content_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'gboolean',
        name = 'force_rescan',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_guess_content_type_finish': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_guess_content_type_sync': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'gboolean',
        name = 'force_rescan',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_is_shadowed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_shadow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unshadow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_unmount_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_unmount_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_mount_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_mount_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_mount_operation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_mount_operation_new': Spec(
    return_type = 'GMountOperation *',
    parameters = [
    ],
  ),
  'g_mount_operation_get_username': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_username': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'username',
      ),
    ],
  ),
  'g_mount_operation_get_password': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_password': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'password',
      ),
    ],
  ),
  'g_mount_operation_get_anonymous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_anonymous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'anonymous',
      ),
    ],
  ),
  'g_mount_operation_get_domain': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'const char *',
        name = 'domain',
      ),
    ],
  ),
  'g_mount_operation_get_password_save': Spec(
    return_type = 'GPasswordSave',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_password_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GPasswordSave',
        name = 'save',
      ),
    ],
  ),
  'g_mount_operation_get_choice': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'g_mount_operation_set_choice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'int',
        name = 'choice',
      ),
    ],
  ),
  'g_mount_operation_reply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GMountOperationResult',
        name = 'result',
      ),
    ],
  ),
  'g_volume_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_volume_monitor_get': Spec(
    return_type = 'GVolumeMonitor *',
    parameters = [
    ],
  ),
  'g_volume_monitor_get_connected_drives': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_volumes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_mounts': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
    ],
  ),
  'g_volume_monitor_get_volume_for_uuid': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
      Param(
        type = 'const char *',
        name = 'uuid',
      ),
    ],
  ),
  'g_volume_monitor_get_mount_for_uuid': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GVolumeMonitor *',
        name = 'volume_monitor',
      ),
      Param(
        type = 'const char *',
        name = 'uuid',
      ),
    ],
  ),
  'g_volume_monitor_adopt_orphan_mount': Spec(
    return_type = 'GVolume *',
    parameters = [
      Param(
        type = 'GMount *',
        name = 'mount',
      ),
    ],
  ),
  'g_native_volume_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_address_new': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
    ],
  ),
  'g_network_address_parse': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_address_parse_uri': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_address_get_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_address_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_address_get_scheme': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkAddress *',
        name = 'addr',
      ),
    ],
  ),
  'g_network_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_monitor_get_default': Spec(
    return_type = 'GNetworkMonitor *',
    parameters = [
    ],
  ),
  'g_network_monitor_get_network_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
    ],
  ),
  'g_network_monitor_can_reach': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_monitor_can_reach_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_network_monitor_can_reach_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GNetworkMonitor *',
        name = 'monitor',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_network_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_network_service_new': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'g_network_service_get_service': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_domain': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_get_scheme': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
    ],
  ),
  'g_network_service_set_scheme': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GNetworkService *',
        name = 'srv',
      ),
      Param(
        type = 'const gchar *',
        name = 'scheme',
      ),
    ],
  ),
  'g_permission_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_permission_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_acquire_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_permission_acquire_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_release': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_release_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_permission_release_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_permission_get_allowed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_get_can_acquire': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_get_can_release': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'g_permission_impl_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
      Param(
        type = 'gboolean',
        name = 'allowed',
      ),
      Param(
        type = 'gboolean',
        name = 'can_acquire',
      ),
      Param(
        type = 'gboolean',
        name = 'can_release',
      ),
    ],
  ),
  'g_pollable_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollable_input_stream_can_poll': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_input_stream_is_readable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_input_stream_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_input_stream_read_nonblocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GPollableInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_pollable_output_stream_can_poll': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_output_stream_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_pollable_output_stream_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_output_stream_write_nonblocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GPollableOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_source_new': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'pollable_stream',
      ),
    ],
  ),
  'g_pollable_source_new_full': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'pollable_stream',
      ),
      Param(
        type = 'GSource *',
        name = 'child_source',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_pollable_stream_read': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_stream_write': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_pollable_stream_write_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const void *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'gsize *',
        name = 'bytes_written',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_get_default_for_protocol': Spec(
    return_type = 'GProxy *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
    ],
  ),
  'g_proxy_connect': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GIOStream *',
        name = 'connection',
      ),
      Param(
        type = 'GProxyAddress *',
        name = 'proxy_address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GIOStream *',
        name = 'connection',
      ),
      Param(
        type = 'GProxyAddress *',
        name = 'proxy_address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_proxy_connect_finish': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_supports_hostname': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_address_new': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GInetAddress *',
        name = 'inetaddr',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'dest_hostname',
      ),
      Param(
        type = 'guint16',
        name = 'dest_port',
      ),
      Param(
        type = 'const gchar *',
        name = 'username',
      ),
      Param(
        type = 'const gchar *',
        name = 'password',
      ),
    ],
  ),
  'g_proxy_address_get_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_protocol': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_destination_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_username': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_password': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_proxy_address_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GProxyAddress *',
        name = 'proxy',
      ),
    ],
  ),
  'g_socket_address_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_address_enumerator_next': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_address_enumerator_next_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_address_enumerator_next_finish': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketAddressEnumerator *',
        name = 'enumerator',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_address_enumerator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_resolver_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_proxy_resolver_get_default': Spec(
    return_type = 'GProxyResolver *',
    parameters = [
    ],
  ),
  'g_proxy_resolver_is_supported': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
    ],
  ),
  'g_proxy_resolver_lookup': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_proxy_resolver_lookup_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_proxy_resolver_lookup_finish': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GProxyResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resolver_get_default': Spec(
    return_type = 'GResolver *',
    parameters = [
    ],
  ),
  'g_resolver_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
    ],
  ),
  'g_resolver_lookup_by_name': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_by_name_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_by_name_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_free_addresses': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'addresses',
      ),
    ],
  ),
  'g_resolver_lookup_by_address': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_by_address_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_by_address_finish': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_service': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_service_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_service_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_records': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'rrname',
      ),
      Param(
        type = 'GResolverRecordType',
        name = 'record_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_lookup_records_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'const gchar *',
        name = 'rrname',
      ),
      Param(
        type = 'GResolverRecordType',
        name = 'record_type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_resolver_lookup_records_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GResolver *',
        name = 'resolver',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resolver_free_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'g_resolver_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_resource_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_resource_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_resource_new_from_data': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GBytes *',
        name = 'data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_ref': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resource_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resource_load': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_open_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_lookup_data': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_enumerate_children': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resource_get_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
      Param(
        type = 'guint32 *',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_register': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resources_unregister': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GResource *',
        name = 'resource',
      ),
    ],
  ),
  'g_resources_open_stream': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_lookup_data': Spec(
    return_type = 'GBytes *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_enumerate_children': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_resources_get_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'path',
      ),
      Param(
        type = 'GResourceLookupFlags',
        name = 'lookup_flags',
      ),
      Param(
        type = 'gsize *',
        name = 'size',
      ),
      Param(
        type = 'guint32 *',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_static_resource_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_static_resource_fini': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_static_resource_get_resource': Spec(
    return_type = 'GResource *',
    parameters = [
      Param(
        type = 'GStaticResource *',
        name = 'static_resource',
      ),
    ],
  ),
  'g_seekable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_seekable_tell': Spec(
    return_type = 'goffset',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_can_seek': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_seek': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
      Param(
        type = 'goffset',
        name = 'offset',
      ),
      Param(
        type = 'GSeekType',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_seekable_can_truncate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
    ],
  ),
  'g_seekable_truncate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSeekable *',
        name = 'seekable',
      ),
      Param(
        type = 'goffset',
        name = 'offset',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_settings_schema_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_schema_source_get_default': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
    ],
  ),
  'g_settings_schema_source_ref': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
    ],
  ),
  'g_settings_schema_source_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
    ],
  ),
  'g_settings_schema_source_new_from_directory': Spec(
    return_type = 'GSettingsSchemaSource *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'directory',
      ),
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'parent',
      ),
      Param(
        type = 'gboolean',
        name = 'trusted',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_settings_schema_source_lookup': Spec(
    return_type = 'GSettingsSchema *',
    parameters = [
      Param(
        type = 'GSettingsSchemaSource *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'gboolean',
        name = 'recursive',
      ),
    ],
  ),
  'g_settings_schema_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_schema_ref': Spec(
    return_type = 'GSettingsSchema *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_get_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_schema_get_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
    ],
  ),
  'g_settings_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_settings_list_schemas': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_settings_list_relocatable_schemas': Spec(
    return_type = 'const gchar *const *',
    parameters = [
    ],
  ),
  'g_settings_new': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
    ],
  ),
  'g_settings_new_with_path': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_new_with_backend': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_settings_new_with_backend_and_path': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'schema_id',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_new_full': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'GSettingsSchema *',
        name = 'schema',
      ),
      Param(
        type = 'GSettingsBackend *',
        name = 'backend',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_settings_list_children': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_list_keys': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_get_range': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_range_check': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_set_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_settings_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'format',
      ),
    ],
  ),
  'g_settings_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_get_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_int': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_uint': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_uint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_double': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_strv': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_strv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *const *',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_enum': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_enum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_flags': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_set_flags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'guint',
        name = 'value',
      ),
    ],
  ),
  'g_settings_get_child': Spec(
    return_type = 'GSettings *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_settings_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'g_settings_delay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_apply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_revert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_get_has_unapplied': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
    ],
  ),
  'g_settings_sync': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_settings_bind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GSettingsBindFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_settings_bind_with_mapping': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GSettingsBindFlags',
        name = 'flags',
      ),
      Param(
        type = 'GSettingsBindGetMapping',
        name = 'get_mapping',
      ),
      Param(
        type = 'GSettingsBindSetMapping',
        name = 'set_mapping',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_settings_bind_writable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'gboolean',
        name = 'inverted',
      ),
    ],
  ),
  'g_settings_unbind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
    ],
  ),
  'g_settings_create_action': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'g_settings_get_mapped': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GSettingsGetMapping',
        name = 'mapping',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_simple_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_action_new': Spec(
    return_type = 'GSimpleAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'parameter_type',
      ),
    ],
  ),
  'g_simple_action_new_stateful': Spec(
    return_type = 'GSimpleAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'parameter_type',
      ),
      Param(
        type = 'GVariant *',
        name = 'state',
      ),
    ],
  ),
  'g_simple_action_set_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAction *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'g_simple_action_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAction *',
        name = 'simple',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_simple_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_action_group_new': Spec(
    return_type = 'GSimpleActionGroup *',
    parameters = [
    ],
  ),
  'g_simple_action_group_lookup': Spec(
    return_type = 'GAction *',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_simple_action_group_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'GAction *',
        name = 'action',
      ),
    ],
  ),
  'g_simple_action_group_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'g_simple_action_group_add_entries': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleActionGroup *',
        name = 'simple',
      ),
      Param(
        type = 'const GActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'gint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_simple_async_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_async_result_new': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_simple_async_result_new_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_result_new_from_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_new_take_error': Spec(
    return_type = 'GSimpleAsyncResult *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gpointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gpointer',
        name = 'op_res',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gpointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gssize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gssize',
        name = 'op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gssize': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_op_res_gboolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'op_res',
      ),
    ],
  ),
  'g_simple_async_result_get_op_res_gboolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_check_cancellable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GCancellable *',
        name = 'check_cancellable',
      ),
    ],
  ),
  'g_simple_async_result_get_source_tag': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_set_handle_cancellation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'gboolean',
        name = 'handle_cancellation',
      ),
    ],
  ),
  'g_simple_async_result_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_complete_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
    ],
  ),
  'g_simple_async_result_run_in_thread': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GSimpleAsyncThreadFunc',
        name = 'func',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_simple_async_result_set_from_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_take_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_result_propagate_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GError **',
        name = 'dest',
      ),
    ],
  ),
  'g_simple_async_result_set_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_result_set_error_va': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSimpleAsyncResult *',
        name = 'simple',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'g_simple_async_result_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject *',
        name = 'source',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_simple_async_report_error_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_simple_async_report_gerror_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_async_report_take_gerror_in_idle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_simple_permission_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_simple_permission_new': Spec(
    return_type = 'GPermission *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'allowed',
      ),
    ],
  ),
  'g_socket_client_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_client_new': Spec(
    return_type = 'GSocketClient *',
    parameters = [
    ],
  ),
  'g_socket_client_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_family': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
    ],
  ),
  'g_socket_client_get_socket_type': Spec(
    return_type = 'GSocketType',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_socket_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
    ],
  ),
  'g_socket_client_get_protocol': Spec(
    return_type = 'GSocketProtocol',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_protocol': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_client_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_local_address': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_socket_client_get_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'guint',
        name = 'timeout',
      ),
    ],
  ),
  'g_socket_client_get_enable_proxy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_enable_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'g_socket_client_get_tls': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_tls': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'gboolean',
        name = 'tls',
      ),
    ],
  ),
  'g_socket_client_get_tls_validation_flags': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
    ],
  ),
  'g_socket_client_set_tls_validation_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_socket_client_connect': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_host': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_service': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_host_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'host_and_port',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_host_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_service_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'const gchar *',
        name = 'service',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_service_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint16',
        name = 'default_port',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_client_connect_to_uri_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_client_add_application_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketClient *',
        name = 'client',
      ),
      Param(
        type = 'const gchar *',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_connectable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_connectable_enumerate': Spec(
    return_type = 'GSocketAddressEnumerator *',
    parameters = [
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
    ],
  ),
  'g_socket_connectable_proxy_enumerate': Spec(
    return_type = 'GSocketAddressEnumerator *',
    parameters = [
      Param(
        type = 'GSocketConnectable *',
        name = 'connectable',
      ),
    ],
  ),
  'g_socket_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_new': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_new_from_fd': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_fd': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_family': Spec(
    return_type = 'GSocketFamily',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_socket_type': Spec(
    return_type = 'GSocketType',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_protocol': Spec(
    return_type = 'GSocketProtocol',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_remote_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_set_blocking': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
    ],
  ),
  'g_socket_get_blocking': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_keepalive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'keepalive',
      ),
    ],
  ),
  'g_socket_get_keepalive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_listen_backlog': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_listen_backlog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gint',
        name = 'backlog',
      ),
    ],
  ),
  'g_socket_get_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_timeout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'timeout',
      ),
    ],
  ),
  'g_socket_get_ttl': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_ttl': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'ttl',
      ),
    ],
  ),
  'g_socket_get_broadcast': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_broadcast': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'broadcast',
      ),
    ],
  ),
  'g_socket_get_multicast_loopback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_multicast_loopback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'loopback',
      ),
    ],
  ),
  'g_socket_get_multicast_ttl': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_set_multicast_ttl': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'guint',
        name = 'ttl',
      ),
    ],
  ),
  'g_socket_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_bind': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_reuse',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_join_multicast_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'source_specific',
      ),
      Param(
        type = 'const gchar *',
        name = 'iface',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_leave_multicast_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GInetAddress *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'source_specific',
      ),
      Param(
        type = 'const gchar *',
        name = 'iface',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_check_connect_result': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_get_available_bytes': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_condition_check': Spec(
    return_type = 'GIOCondition',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
    ],
  ),
  'g_socket_condition_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_condition_timed_wait': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'gint64',
        name = 'timeout',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_accept': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_from': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'address',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_to': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_message': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'address',
      ),
      Param(
        type = 'GInputVector *',
        name = 'vectors',
      ),
      Param(
        type = 'gint',
        name = 'num_vectors',
      ),
      Param(
        type = 'GSocketControlMessage ***',
        name = 'messages',
      ),
      Param(
        type = 'gint *',
        name = 'num_messages',
      ),
      Param(
        type = 'gint *',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_message': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GOutputVector *',
        name = 'vectors',
      ),
      Param(
        type = 'gint',
        name = 'num_vectors',
      ),
      Param(
        type = 'GSocketControlMessage **',
        name = 'messages',
      ),
      Param(
        type = 'gint',
        name = 'num_messages',
      ),
      Param(
        type = 'gint',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_shutdown': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gboolean',
        name = 'shutdown_read',
      ),
      Param(
        type = 'gboolean',
        name = 'shutdown_write',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_create_source': Spec(
    return_type = 'GSource *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GIOCondition',
        name = 'condition',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
    ],
  ),
  'g_socket_speaks_ipv4': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_get_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_receive_with_blocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_send_with_blocking': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_connection_is_connected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_socket_connection_connect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_connect_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_connection_connect_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_socket': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_socket_connection_get_local_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_get_remote_address': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'GSocketConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_connection_factory_register_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GType',
        name = 'g_type',
      ),
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'protocol',
      ),
    ],
  ),
  'g_socket_connection_factory_lookup_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GSocketFamily',
        name = 'family',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'protocol_id',
      ),
    ],
  ),
  'g_socket_connection_factory_create_connection': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_socket_control_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_control_message_get_size': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_get_level': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_get_msg_type': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_socket_control_message_serialize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketControlMessage *',
        name = 'message',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_socket_control_message_deserialize': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
      Param(
        type = 'int',
        name = 'level',
      ),
      Param(
        type = 'int',
        name = 'type',
      ),
      Param(
        type = 'gsize',
        name = 'size',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'g_socket_listener_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_listener_new': Spec(
    return_type = 'GSocketListener *',
    parameters = [
    ],
  ),
  'g_socket_listener_set_backlog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'int',
        name = 'listen_backlog',
      ),
    ],
  ),
  'g_socket_listener_add_socket': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_address': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GSocketAddress *',
        name = 'address',
      ),
      Param(
        type = 'GSocketType',
        name = 'type',
      ),
      Param(
        type = 'GSocketProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GSocketAddress **',
        name = 'effective_address',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_inet_port': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_add_any_inet_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject *',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_socket': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_socket_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_listener_accept_socket_finish': Spec(
    return_type = 'GSocket *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_accept_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_socket_listener_accept_finish': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GObject **',
        name = 'source_object',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_socket_listener_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketListener *',
        name = 'listener',
      ),
    ],
  ),
  'g_socket_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_socket_service_new': Spec(
    return_type = 'GSocketService *',
    parameters = [
    ],
  ),
  'g_socket_service_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_socket_service_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_socket_service_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSocketService *',
        name = 'service',
      ),
    ],
  ),
  'g_srv_target_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_srv_target_new': Spec(
    return_type = 'GSrvTarget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'hostname',
      ),
      Param(
        type = 'guint16',
        name = 'port',
      ),
      Param(
        type = 'guint16',
        name = 'priority',
      ),
      Param(
        type = 'guint16',
        name = 'weight',
      ),
    ],
  ),
  'g_srv_target_copy': Spec(
    return_type = 'GSrvTarget *',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_hostname': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_port': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_priority': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_get_weight': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GSrvTarget *',
        name = 'target',
      ),
    ],
  ),
  'g_srv_target_list_sort': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'g_task_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_task_new': Spec(
    return_type = 'GTask *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'g_task_report_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_task_report_new_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_task_set_task_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'task_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'task_data_destroy',
      ),
    ],
  ),
  'g_task_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'g_task_set_check_cancellable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'check_cancellable',
      ),
    ],
  ),
  'g_task_set_source_tag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'source_tag',
      ),
    ],
  ),
  'g_task_get_source_object': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_task_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_context': Spec(
    return_type = 'GMainContext *',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_cancellable': Spec(
    return_type = 'GCancellable *',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_check_cancellable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_get_source_tag': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'result',
      ),
      Param(
        type = 'gpointer',
        name = 'source_object',
      ),
    ],
  ),
  'g_task_run_in_thread': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GTaskThreadFunc',
        name = 'task_func',
      ),
    ],
  ),
  'g_task_run_in_thread_sync': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GTaskThreadFunc',
        name = 'task_func',
      ),
    ],
  ),
  'g_task_set_return_on_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'return_on_cancel',
      ),
    ],
  ),
  'g_task_get_return_on_cancel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_attach_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GSource *',
        name = 'source',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'callback',
      ),
    ],
  ),
  'g_task_return_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gpointer',
        name = 'result',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'result_destroy',
      ),
    ],
  ),
  'g_task_return_boolean': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gboolean',
        name = 'result',
      ),
    ],
  ),
  'g_task_return_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'gssize',
        name = 'result',
      ),
    ],
  ),
  'g_task_return_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError *',
        name = 'error',
      ),
    ],
  ),
  'g_task_return_new_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GQuark',
        name = 'domain',
      ),
      Param(
        type = 'gint',
        name = 'code',
      ),
      Param(
        type = 'const char *',
        name = 'format',
      ),
    ],
  ),
  'g_task_return_error_if_cancelled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_task_propagate_pointer': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_propagate_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_propagate_int': Spec(
    return_type = 'gssize',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_task_had_error': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTask *',
        name = 'task',
      ),
    ],
  ),
  'g_tcp_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tcp_connection_set_graceful_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTcpConnection *',
        name = 'connection',
      ),
      Param(
        type = 'gboolean',
        name = 'graceful_disconnect',
      ),
    ],
  ),
  'g_tcp_connection_get_graceful_disconnect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTcpConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_tcp_wrapper_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tcp_wrapper_connection_new': Spec(
    return_type = 'GSocketConnection *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GSocket *',
        name = 'socket',
      ),
    ],
  ),
  'g_tcp_wrapper_connection_get_base_io_stream': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GTcpWrapperConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_test_dbus_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_test_dbus_new': Spec(
    return_type = 'GTestDBus *',
    parameters = [
      Param(
        type = 'GTestDBusFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_test_dbus_get_flags': Spec(
    return_type = 'GTestDBusFlags',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_get_bus_address': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_add_service_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_test_dbus_up': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_down': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTestDBus *',
        name = 'self',
      ),
    ],
  ),
  'g_test_dbus_unset': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'g_themed_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_themed_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_new_with_default_fallbacks': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_new_from_names': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'char **',
        name = 'iconnames',
      ),
      Param(
        type = 'int',
        name = 'len',
      ),
    ],
  ),
  'g_themed_icon_prepend_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_append_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
      Param(
        type = 'const char *',
        name = 'iconname',
      ),
    ],
  ),
  'g_themed_icon_get_names': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GThemedIcon *',
        name = 'icon',
      ),
    ],
  ),
  'g_threaded_socket_service_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_threaded_socket_service_new': Spec(
    return_type = 'GSocketService *',
    parameters = [
      Param(
        type = 'int',
        name = 'max_threads',
      ),
    ],
  ),
  'g_tls_backend_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_backend_get_default': Spec(
    return_type = 'GTlsBackend *',
    parameters = [
    ],
  ),
  'g_tls_backend_get_default_database': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_supports_tls': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_certificate_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_client_connection_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_server_connection_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_backend_get_file_database_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GTlsBackend *',
        name = 'backend',
      ),
    ],
  ),
  'g_tls_certificate_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_certificate_new_from_pem': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_new_from_file': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_new_from_files': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'cert_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'key_file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_list_new_from_file': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_certificate_get_issuer': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert',
      ),
    ],
  ),
  'g_tls_certificate_verify': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'trusted_ca',
      ),
    ],
  ),
  'g_tls_certificate_is_same': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsCertificate *',
        name = 'cert_one',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'cert_two',
      ),
    ],
  ),
  'g_tls_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_connection_set_use_system_certdb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'use_system_certdb',
      ),
    ],
  ),
  'g_tls_connection_get_use_system_certdb': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_database': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsDatabase *',
        name = 'database',
      ),
    ],
  ),
  'g_tls_connection_get_database': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_certificate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
    ],
  ),
  'g_tls_connection_get_certificate': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_interaction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
    ],
  ),
  'g_tls_connection_get_interaction': Spec(
    return_type = 'GTlsInteraction *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_get_peer_certificate': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_get_peer_certificate_errors': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_require_close_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'require_close_notify',
      ),
    ],
  ),
  'g_tls_connection_get_require_close_notify': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_set_rehandshake_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsRehandshakeMode',
        name = 'mode',
      ),
    ],
  ),
  'g_tls_connection_get_rehandshake_mode': Spec(
    return_type = 'GTlsRehandshakeMode',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_connection_handshake': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_connection_handshake_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'int',
        name = 'io_priority',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_connection_handshake_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'g_tls_connection_emit_accept_certificate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'peer_cert',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'errors',
      ),
    ],
  ),
  'g_tls_client_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_client_connection_new': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'server_identity',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_client_connection_get_validation_flags': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_validation_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GTlsCertificateFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_tls_client_connection_get_server_identity': Spec(
    return_type = 'GSocketConnectable *',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_server_identity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
    ],
  ),
  'g_tls_client_connection_get_use_ssl3': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_client_connection_set_use_ssl3': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
      Param(
        type = 'gboolean',
        name = 'use_ssl3',
      ),
    ],
  ),
  'g_tls_client_connection_get_accepted_cas': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsClientConnection *',
        name = 'conn',
      ),
    ],
  ),
  'g_tls_database_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_database_verify_chain': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'chain',
      ),
      Param(
        type = 'const gchar *',
        name = 'purpose',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseVerifyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_verify_chain_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'chain',
      ),
      Param(
        type = 'const gchar *',
        name = 'purpose',
      ),
      Param(
        type = 'GSocketConnectable *',
        name = 'identity',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseVerifyFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_verify_chain_finish': Spec(
    return_type = 'GTlsCertificateFlags',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_create_certificate_handle': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'handle',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'handle',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_for_handle_finish': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificate_issuer_finish': Spec(
    return_type = 'GTlsCertificate *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GByteArray *',
        name = 'issuer_raw_dn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GByteArray *',
        name = 'issuer_raw_dn',
      ),
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsDatabaseLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_database_lookup_certificates_issued_by_finish': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GTlsDatabase *',
        name = 'self',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_file_database_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_file_database_new': Spec(
    return_type = 'GTlsDatabase *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'anchors',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_interaction_invoke_ask_password': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_ask_password': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_interaction_ask_password_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_tls_interaction_ask_password_finish': Spec(
    return_type = 'GTlsInteractionResult',
    parameters = [
      Param(
        type = 'GTlsInteraction *',
        name = 'interaction',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_server_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_server_connection_new': Spec(
    return_type = 'GIOStream *',
    parameters = [
      Param(
        type = 'GIOStream *',
        name = 'base_io_stream',
      ),
      Param(
        type = 'GTlsCertificate *',
        name = 'certificate',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_tls_password_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_tls_password_new': Spec(
    return_type = 'GTlsPassword *',
    parameters = [
      Param(
        type = 'GTlsPasswordFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_tls_password_get_value': Spec(
    return_type = 'const guchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'g_tls_password_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const guchar *',
        name = 'value',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
    ],
  ),
  'g_tls_password_set_value_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'guchar *',
        name = 'value',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'g_tls_password_get_flags': Spec(
    return_type = 'GTlsPasswordFlags',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'GTlsPasswordFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_tls_password_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'g_tls_password_get_warning': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
    ],
  ),
  'g_tls_password_set_warning': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GTlsPassword *',
        name = 'password',
      ),
      Param(
        type = 'const gchar *',
        name = 'warning',
      ),
    ],
  ),
  'g_vfs_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_vfs_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
    ],
  ),
  'g_vfs_get_file_for_path': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'path',
      ),
    ],
  ),
  'g_vfs_get_file_for_uri': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'g_vfs_get_supported_uri_schemes': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
    ],
  ),
  'g_vfs_parse_name': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVfs *',
        name = 'vfs',
      ),
      Param(
        type = 'const char *',
        name = 'parse_name',
      ),
    ],
  ),
  'g_vfs_get_default': Spec(
    return_type = 'GVfs *',
    parameters = [
    ],
  ),
  'g_vfs_get_local': Spec(
    return_type = 'GVfs *',
    parameters = [
    ],
  ),
  'g_volume_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_volume_get_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_uuid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_drive': Spec(
    return_type = 'GDrive *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_mount': Spec(
    return_type = 'GMount *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_can_mount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_should_automount': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_mount': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountMountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_mount_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_eject': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_eject_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_get_identifier': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'const char *',
        name = 'kind',
      ),
    ],
  ),
  'g_volume_enumerate_identifiers': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_get_activation_root': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_volume_eject_with_operation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GMountUnmountFlags',
        name = 'flags',
      ),
      Param(
        type = 'GMountOperation *',
        name = 'mount_operation',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_volume_eject_with_operation_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_volume_get_sort_key': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GVolume *',
        name = 'volume',
      ),
    ],
  ),
  'g_zlib_compressor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_compressor_new': Spec(
    return_type = 'GZlibCompressor *',
    parameters = [
      Param(
        type = 'GZlibCompressorFormat',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'level',
      ),
    ],
  ),
  'g_zlib_compressor_get_file_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GZlibCompressor *',
        name = 'compressor',
      ),
    ],
  ),
  'g_zlib_compressor_set_file_info': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GZlibCompressor *',
        name = 'compressor',
      ),
      Param(
        type = 'GFileInfo *',
        name = 'file_info',
      ),
    ],
  ),
  'g_zlib_decompressor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_zlib_decompressor_new': Spec(
    return_type = 'GZlibDecompressor *',
    parameters = [
      Param(
        type = 'GZlibCompressorFormat',
        name = 'format',
      ),
    ],
  ),
  'g_zlib_decompressor_get_file_info': Spec(
    return_type = 'GFileInfo *',
    parameters = [
      Param(
        type = 'GZlibDecompressor *',
        name = 'decompressor',
      ),
    ],
  ),
  'g_dbus_interface_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_get_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_get_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_set_object': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_interface_dup_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusInterface *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_interface_skeleton_get_flags': Spec(
    return_type = 'GDBusInterfaceSkeletonFlags',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_set_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusInterfaceSkeletonFlags',
        name = 'flags',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_info': Spec(
    return_type = 'GDBusInterfaceInfo *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_vtable': Spec(
    return_type = 'GDBusInterfaceVTable *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_properties': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_export': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_unexport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_unexport_from_connection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_connections': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_has_connection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_interface_skeleton_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_get_interfaces': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_get_interface': Spec(
    return_type = 'GDBusInterface *',
    parameters = [
      Param(
        type = 'GDBusObject *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_skeleton_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_skeleton_new': Spec(
    return_type = 'GDBusObjectSkeleton *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_skeleton_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_skeleton_add_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_skeleton_remove_interface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'GDBusInterfaceSkeleton *',
        name = 'interface_',
      ),
    ],
  ),
  'g_dbus_object_skeleton_remove_interface_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_skeleton_set_object_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_proxy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_proxy_new': Spec(
    return_type = 'GDBusObjectProxy *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_proxy_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectProxy *',
        name = 'proxy',
      ),
    ],
  ),
  'g_dbus_object_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_get_object_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_get_objects': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_get_object': Spec(
    return_type = 'GDBusObject *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_manager_get_interface': Spec(
    return_type = 'GDBusInterface *',
    parameters = [
      Param(
        type = 'GDBusObjectManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'const gchar *',
        name = 'interface_name',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_client_new': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_finish': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_sync': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus_finish': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'res',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_new_for_bus_sync': Spec(
    return_type = 'GDBusObjectManager *',
    parameters = [
      Param(
        type = 'GBusType',
        name = 'bus_type',
      ),
      Param(
        type = 'GDBusObjectManagerClientFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GDBusProxyTypeFunc',
        name = 'get_proxy_type_func',
      ),
      Param(
        type = 'gpointer',
        name = 'get_proxy_type_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'get_proxy_type_destroy_notify',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_flags': Spec(
    return_type = 'GDBusObjectManagerClientFlags',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_client_get_name_owner': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerClient *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_server_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_object_manager_server_new': Spec(
    return_type = 'GDBusObjectManagerServer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_object_manager_server_get_connection': Spec(
    return_type = 'GDBusConnection *',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
    ],
  ),
  'g_dbus_object_manager_server_set_connection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
    ],
  ),
  'g_dbus_object_manager_server_export': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_export_uniquely': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_is_exported': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'GDBusObjectSkeleton *',
        name = 'object',
      ),
    ],
  ),
  'g_dbus_object_manager_server_unexport': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDBusObjectManagerServer *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_dbus_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_action_group_get': Spec(
    return_type = 'GDBusActionGroup *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'g_remote_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_remote_action_group_activate_action_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRemoteActionGroup *',
        name = 'remote',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
      Param(
        type = 'GVariant *',
        name = 'platform_data',
      ),
    ],
  ),
  'g_remote_action_group_change_action_state_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GRemoteActionGroup *',
        name = 'remote',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
      Param(
        type = 'GVariant *',
        name = 'platform_data',
      ),
    ],
  ),
  'g_menu_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_model_is_mutable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_model_get_n_items': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_model_iterate_item_attributes': Spec(
    return_type = 'GMenuAttributeIter *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_model_get_item_attribute_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_menu_model_get_item_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_model_iterate_item_links': Spec(
    return_type = 'GMenuLinkIter *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_model_get_item_link': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
    ],
  ),
  'g_menu_model_items_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'gint',
        name = 'removed',
      ),
      Param(
        type = 'gint',
        name = 'added',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_attribute_iter_get_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar **',
        name = 'out_name',
      ),
      Param(
        type = 'GVariant **',
        name = 'value',
      ),
    ],
  ),
  'g_menu_attribute_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_attribute_iter_get_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuAttributeIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_link_iter_get_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar **',
        name = 'out_link',
      ),
      Param(
        type = 'GMenuModel **',
        name = 'value',
      ),
    ],
  ),
  'g_menu_link_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_link_iter_get_value': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuLinkIter *',
        name = 'iter',
      ),
    ],
  ),
  'g_menu_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_new': Spec(
    return_type = 'GMenu *',
    parameters = [
    ],
  ),
  'g_menu_freeze': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
    ],
  ),
  'g_menu_insert_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_prepend_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_append_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GMenuItem *',
        name = 'item',
      ),
    ],
  ),
  'g_menu_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'g_menu_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_insert_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_prepend_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_append_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_insert_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_prepend_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_append_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_menu_item_new': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_menu_item_new_from_model': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'gint',
        name = 'item_index',
      ),
    ],
  ),
  'g_menu_item_new_submenu': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_new_section': Spec(
    return_type = 'GMenuItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_item_get_attribute_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const GVariantType *',
        name = 'expected_type',
      ),
    ],
  ),
  'g_menu_item_get_attribute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_get_link': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
    ],
  ),
  'g_menu_item_set_attribute_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'GVariant *',
        name = 'value',
      ),
    ],
  ),
  'g_menu_item_set_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_set_link': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'link',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'g_menu_item_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'g_menu_item_set_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'submenu',
      ),
    ],
  ),
  'g_menu_item_set_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'section',
      ),
    ],
  ),
  'g_menu_item_set_action_and_target_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'action',
      ),
      Param(
        type = 'GVariant *',
        name = 'target_value',
      ),
    ],
  ),
  'g_menu_item_set_action_and_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'g_menu_item_set_detailed_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action',
      ),
    ],
  ),
  'g_dbus_connection_export_menu_model': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'menu',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_dbus_connection_unexport_menu_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'guint',
        name = 'export_id',
      ),
    ],
  ),
  'g_dbus_menu_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_dbus_menu_model_get': Spec(
    return_type = 'GDBusMenuModel *',
    parameters = [
      Param(
        type = 'GDBusConnection *',
        name = 'connection',
      ),
      Param(
        type = 'const gchar *',
        name = 'bus_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'object_path',
      ),
    ],
  ),
  'pango_coverage_new': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
    ],
  ),
  'pango_coverage_ref': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_copy': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
    ],
  ),
  'pango_coverage_get': Spec(
    return_type = 'PangoCoverageLevel',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
    ],
  ),
  'pango_coverage_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoCoverageLevel',
        name = 'level',
      ),
    ],
  ),
  'pango_coverage_max': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'PangoCoverage *',
        name = 'other',
      ),
    ],
  ),
  'pango_coverage_to_bytes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCoverage *',
        name = 'coverage',
      ),
      Param(
        type = 'guchar **',
        name = 'bytes',
      ),
      Param(
        type = 'int *',
        name = 'n_bytes',
      ),
    ],
  ),
  'pango_coverage_from_bytes': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'bytes',
      ),
      Param(
        type = 'int',
        name = 'n_bytes',
      ),
    ],
  ),
  'pango_units_from_double': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'double',
        name = 'd',
      ),
    ],
  ),
  'pango_units_to_double': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'int',
        name = 'i',
      ),
    ],
  ),
  'pango_extents_to_pixels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRectangle *',
        name = 'inclusive',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'nearest',
      ),
    ],
  ),
  'pango_matrix_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_matrix_copy': Spec(
    return_type = 'PangoMatrix *',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_matrix_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_matrix_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'pango_matrix_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
    ],
  ),
  'pango_matrix_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'degrees',
      ),
    ],
  ),
  'pango_matrix_concat': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'new_matrix',
      ),
    ],
  ),
  'pango_matrix_transform_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'pango_matrix_transform_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'pango_matrix_transform_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'pango_matrix_transform_pixel_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'pango_matrix_get_font_scale_factor': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_script_for_unichar': Spec(
    return_type = 'PangoScript',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_script_iter_new': Spec(
    return_type = 'PangoScriptIter *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_script_iter_get_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
      Param(
        type = 'const char **',
        name = 'start',
      ),
      Param(
        type = 'const char **',
        name = 'end',
      ),
      Param(
        type = 'PangoScript *',
        name = 'script',
      ),
    ],
  ),
  'pango_script_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_script_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoScriptIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_language_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_language_from_string': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_to_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_get_sample_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_language_get_default': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
    ],
  ),
  'pango_language_matches': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'const char *',
        name = 'range_list',
      ),
    ],
  ),
  'pango_language_includes_script': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
    ],
  ),
  'pango_language_get_scripts': Spec(
    return_type = 'const PangoScript *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'int *',
        name = 'num_scripts',
      ),
    ],
  ),
  'pango_script_get_sample_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
    ],
  ),
  'pango_gravity_to_rotation': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_gravity_get_for_matrix': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_gravity_get_for_script': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
      Param(
        type = 'PangoGravity',
        name = 'base_gravity',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_gravity_get_for_script_and_width': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoScript',
        name = 'script',
      ),
      Param(
        type = 'gboolean',
        name = 'wide',
      ),
      Param(
        type = 'PangoGravity',
        name = 'base_gravity',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_bidi_type_for_unichar': Spec(
    return_type = 'PangoBidiType',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_unichar_direction': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_find_base_dir': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'pango_get_mirror_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
      Param(
        type = 'gunichar *',
        name = 'mirrored_ch',
      ),
    ],
  ),
  'pango_font_description_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_description_new': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
    ],
  ),
  'pango_font_description_copy': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_copy_static': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc1',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc2',
      ),
    ],
  ),
  'pango_font_description_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_descriptions_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription **',
        name = 'descs',
      ),
      Param(
        type = 'int',
        name = 'n_descs',
      ),
    ],
  ),
  'pango_font_description_set_family': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_description_set_family_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_description_get_family': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoStyle',
        name = 'style',
      ),
    ],
  ),
  'pango_font_description_get_style': Spec(
    return_type = 'PangoStyle',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoVariant',
        name = 'variant',
      ),
    ],
  ),
  'pango_font_description_get_variant': Spec(
    return_type = 'PangoVariant',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_weight': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoWeight',
        name = 'weight',
      ),
    ],
  ),
  'pango_font_description_get_weight': Spec(
    return_type = 'PangoWeight',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_stretch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoStretch',
        name = 'stretch',
      ),
    ],
  ),
  'pango_font_description_get_stretch': Spec(
    return_type = 'PangoStretch',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
    ],
  ),
  'pango_font_description_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_absolute_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'double',
        name = 'size',
      ),
    ],
  ),
  'pango_font_description_get_size_is_absolute': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_set_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_font_description_get_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_get_set_fields': Spec(
    return_type = 'PangoFontMask',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_unset_fields': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoFontMask',
        name = 'to_unset',
      ),
    ],
  ),
  'pango_font_description_merge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc_to_merge',
      ),
      Param(
        type = 'gboolean',
        name = 'replace_existing',
      ),
    ],
  ),
  'pango_font_description_merge_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc_to_merge',
      ),
      Param(
        type = 'gboolean',
        name = 'replace_existing',
      ),
    ],
  ),
  'pango_font_description_better_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'old_match',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'new_match',
      ),
    ],
  ),
  'pango_font_description_from_string': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_font_description_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_description_to_filename': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_metrics_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_metrics_ref': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_ascent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_descent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_approximate_char_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_approximate_digit_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_underline_position': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_underline_thickness': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_strikethrough_position': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_metrics_get_strikethrough_thickness': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoFontMetrics *',
        name = 'metrics',
      ),
    ],
  ),
  'pango_font_family_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_family_list_faces': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
      Param(
        type = 'PangoFontFace ***',
        name = 'faces',
      ),
      Param(
        type = 'int *',
        name = 'n_faces',
      ),
    ],
  ),
  'pango_font_family_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_family_is_monospace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoFontFamily *',
        name = 'family',
      ),
    ],
  ),
  'pango_font_face_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_face_describe': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_face_get_face_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_face_list_sizes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
      Param(
        type = 'int **',
        name = 'sizes',
      ),
      Param(
        type = 'int *',
        name = 'n_sizes',
      ),
    ],
  ),
  'pango_font_face_is_synthesized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoFontFace *',
        name = 'face',
      ),
    ],
  ),
  'pango_font_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_describe': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_font_describe_with_absolute_size': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_font_get_coverage': Spec(
    return_type = 'PangoCoverage *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_find_shaper': Spec(
    return_type = 'PangoEngineShape *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'guint32',
        name = 'ch',
      ),
    ],
  ),
  'pango_font_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_get_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyph',
        name = 'glyph',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_font_get_font_map': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_color_copy': Spec(
    return_type = 'PangoColor *',
    parameters = [
      Param(
        type = 'const PangoColor *',
        name = 'src',
      ),
    ],
  ),
  'pango_color_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_color_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoColor *',
        name = 'color',
      ),
      Param(
        type = 'const char *',
        name = 'spec',
      ),
    ],
  ),
  'pango_color_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_attr_type_register': Spec(
    return_type = 'PangoAttrType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'pango_attr_type_get_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoAttrType',
        name = 'type',
      ),
    ],
  ),
  'pango_attribute_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
      Param(
        type = 'const PangoAttrClass *',
        name = 'klass',
      ),
    ],
  ),
  'pango_attribute_copy': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attribute_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attribute_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const PangoAttribute *',
        name = 'attr1',
      ),
      Param(
        type = 'const PangoAttribute *',
        name = 'attr2',
      ),
    ],
  ),
  'pango_attr_language_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_attr_family_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'family',
      ),
    ],
  ),
  'pango_attr_foreground_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_background_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_size_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'size',
      ),
    ],
  ),
  'pango_attr_size_new_absolute': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'size',
      ),
    ],
  ),
  'pango_attr_style_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoStyle',
        name = 'style',
      ),
    ],
  ),
  'pango_attr_weight_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoWeight',
        name = 'weight',
      ),
    ],
  ),
  'pango_attr_variant_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoVariant',
        name = 'variant',
      ),
    ],
  ),
  'pango_attr_stretch_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoStretch',
        name = 'stretch',
      ),
    ],
  ),
  'pango_attr_font_desc_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_attr_underline_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoUnderline',
        name = 'underline',
      ),
    ],
  ),
  'pango_attr_underline_color_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_strikethrough_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'strikethrough',
      ),
    ],
  ),
  'pango_attr_strikethrough_color_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'guint16',
        name = 'red',
      ),
      Param(
        type = 'guint16',
        name = 'green',
      ),
      Param(
        type = 'guint16',
        name = 'blue',
      ),
    ],
  ),
  'pango_attr_rise_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'rise',
      ),
    ],
  ),
  'pango_attr_scale_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'double',
        name = 'scale_factor',
      ),
    ],
  ),
  'pango_attr_fallback_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'enable_fallback',
      ),
    ],
  ),
  'pango_attr_letter_spacing_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'int',
        name = 'letter_spacing',
      ),
    ],
  ),
  'pango_attr_shape_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'const PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_attr_shape_new_with_data': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'const PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'const PangoRectangle *',
        name = 'logical_rect',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'PangoAttrDataCopyFunc',
        name = 'copy_func',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy_func',
      ),
    ],
  ),
  'pango_attr_gravity_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_attr_gravity_hint_new': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_attr_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_attr_list_new': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
    ],
  ),
  'pango_attr_list_ref': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_copy': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_list_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttribute *',
        name = 'attr',
      ),
    ],
  ),
  'pango_attr_list_splice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'other',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'pango_attr_list_filter': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
      Param(
        type = 'PangoAttrFilterFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'pango_attr_list_get_iterator': Spec(
    return_type = 'PangoAttrIterator *',
    parameters = [
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_attr_iterator_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'gint *',
        name = 'start',
      ),
      Param(
        type = 'gint *',
        name = 'end',
      ),
    ],
  ),
  'pango_attr_iterator_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_copy': Spec(
    return_type = 'PangoAttrIterator *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_attr_iterator_get': Spec(
    return_type = 'PangoAttribute *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'PangoAttrType',
        name = 'type',
      ),
    ],
  ),
  'pango_attr_iterator_get_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
      Param(
        type = 'PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage **',
        name = 'language',
      ),
      Param(
        type = 'GSList **',
        name = 'extra_attrs',
      ),
    ],
  ),
  'pango_attr_iterator_get_attrs': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoAttrIterator *',
        name = 'iterator',
      ),
    ],
  ),
  'pango_parse_markup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'markup_text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'gunichar',
        name = 'accel_marker',
      ),
      Param(
        type = 'PangoAttrList **',
        name = 'attr_list',
      ),
      Param(
        type = 'char **',
        name = 'text',
      ),
      Param(
        type = 'gunichar *',
        name = 'accel_char',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'pango_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_item_new': Spec(
    return_type = 'PangoItem *',
    parameters = [
    ],
  ),
  'pango_item_copy': Spec(
    return_type = 'PangoItem *',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'item',
      ),
    ],
  ),
  'pango_item_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'item',
      ),
    ],
  ),
  'pango_item_split': Spec(
    return_type = 'PangoItem *',
    parameters = [
      Param(
        type = 'PangoItem *',
        name = 'orig',
      ),
      Param(
        type = 'int',
        name = 'split_index',
      ),
      Param(
        type = 'int',
        name = 'split_offset',
      ),
    ],
  ),
  'pango_break': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'attrs',
      ),
      Param(
        type = 'int',
        name = 'attrs_len',
      ),
    ],
  ),
  'pango_find_paragraph_boundary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gint *',
        name = 'paragraph_delimiter_index',
      ),
      Param(
        type = 'gint *',
        name = 'next_paragraph_start',
      ),
    ],
  ),
  'pango_get_log_attrs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'int',
        name = 'level',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'log_attrs',
      ),
      Param(
        type = 'int',
        name = 'attrs_len',
      ),
    ],
  ),
  'pango_fontset_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_fontset_get_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
      Param(
        type = 'guint',
        name = 'wc',
      ),
    ],
  ),
  'pango_fontset_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
    ],
  ),
  'pango_fontset_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontset *',
        name = 'fontset',
      ),
      Param(
        type = 'PangoFontsetForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'pango_font_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_map_create_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_font_map_load_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_font_map_load_fontset': Spec(
    return_type = 'PangoFontset *',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_font_map_list_families': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'PangoFontFamily ***',
        name = 'families',
      ),
      Param(
        type = 'int *',
        name = 'n_families',
      ),
    ],
  ),
  'pango_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_context_new': Spec(
    return_type = 'PangoContext *',
    parameters = [
    ],
  ),
  'pango_context_set_font_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoFontMap *',
        name = 'font_map',
      ),
    ],
  ),
  'pango_context_get_font_map': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_list_families': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoFontFamily ***',
        name = 'families',
      ),
      Param(
        type = 'int *',
        name = 'n_families',
      ),
    ],
  ),
  'pango_context_load_font': Spec(
    return_type = 'PangoFont *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_context_load_fontset': Spec(
    return_type = 'PangoFontset *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_get_metrics': Spec(
    return_type = 'PangoFontMetrics *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_set_font_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_context_get_font_description': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_get_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_language': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoLanguage *',
        name = 'language',
      ),
    ],
  ),
  'pango_context_set_base_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoDirection',
        name = 'direction',
      ),
    ],
  ),
  'pango_context_get_base_dir': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_base_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoGravity',
        name = 'gravity',
      ),
    ],
  ),
  'pango_context_get_base_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_get_gravity': Spec(
    return_type = 'PangoGravity',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_gravity_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoGravityHint',
        name = 'hint',
      ),
    ],
  ),
  'pango_context_get_gravity_hint': Spec(
    return_type = 'PangoGravityHint',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_context_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_context_get_matrix': Spec(
    return_type = 'const PangoMatrix *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_itemize': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
      Param(
        type = 'PangoAttrIterator *',
        name = 'cached_iter',
      ),
    ],
  ),
  'pango_itemize_with_base_dir': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoDirection',
        name = 'base_dir',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
      Param(
        type = 'PangoAttrIterator *',
        name = 'cached_iter',
      ),
    ],
  ),
  'pango_glyph_string_new': Spec(
    return_type = 'PangoGlyphString *',
    parameters = [
    ],
  ),
  'pango_glyph_string_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'new_len',
      ),
    ],
  ),
  'pango_glyph_string_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_string_copy': Spec(
    return_type = 'PangoGlyphString *',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
    ],
  ),
  'pango_glyph_string_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'string',
      ),
    ],
  ),
  'pango_glyph_string_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_glyph_string_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_glyph_string_extents_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'start',
      ),
      Param(
        type = 'int',
        name = 'end',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_glyph_string_get_logical_widths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'int',
        name = 'embedding_level',
      ),
      Param(
        type = 'int *',
        name = 'logical_widths',
      ),
    ],
  ),
  'pango_glyph_string_index_to_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_glyph_string_x_to_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'int',
        name = 'x_pos',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_shape': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'const PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_shape_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'item_text',
      ),
      Param(
        type = 'gint',
        name = 'item_length',
      ),
      Param(
        type = 'const gchar *',
        name = 'paragraph_text',
      ),
      Param(
        type = 'gint',
        name = 'paragraph_length',
      ),
      Param(
        type = 'const PangoAnalysis *',
        name = 'analysis',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_reorder_items': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GList *',
        name = 'logical_items',
      ),
    ],
  ),
  'pango_attr_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_underline_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_bidi_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_coverage_level_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_variant_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_weight_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_stretch_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_font_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_gravity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_gravity_hint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_wrap_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_ellipsize_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_render_part_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_script_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_tab_align_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_split': Spec(
    return_type = 'PangoGlyphItem *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'orig',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'split_index',
      ),
    ],
  ),
  'pango_glyph_item_copy': Spec(
    return_type = 'PangoGlyphItem *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'orig',
      ),
    ],
  ),
  'pango_glyph_item_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
    ],
  ),
  'pango_glyph_item_apply_attrs': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'list',
      ),
    ],
  ),
  'pango_glyph_item_letter_space': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoLogAttr *',
        name = 'log_attrs',
      ),
      Param(
        type = 'int',
        name = 'letter_spacing',
      ),
    ],
  ),
  'pango_glyph_item_get_logical_widths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int *',
        name = 'logical_widths',
      ),
    ],
  ),
  'pango_glyph_item_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_glyph_item_iter_copy': Spec(
    return_type = 'PangoGlyphItemIter *',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'orig',
      ),
    ],
  ),
  'pango_glyph_item_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_glyph_item_iter_init_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
    ],
  ),
  'pango_glyph_item_iter_init_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
    ],
  ),
  'pango_glyph_item_iter_next_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_glyph_item_iter_prev_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoGlyphItemIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_tab_array_new': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'gint',
        name = 'initial_size',
      ),
      Param(
        type = 'gboolean',
        name = 'positions_in_pixels',
      ),
    ],
  ),
  'pango_tab_array_new_with_positions': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'gboolean',
        name = 'positions_in_pixels',
      ),
      Param(
        type = 'PangoTabAlign',
        name = 'first_alignment',
      ),
      Param(
        type = 'gint',
        name = 'first_position',
      ),
    ],
  ),
  'pango_tab_array_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_tab_array_copy': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'src',
      ),
    ],
  ),
  'pango_tab_array_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_tab_array_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_tab_array_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'new_size',
      ),
    ],
  ),
  'pango_tab_array_set_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'tab_index',
      ),
      Param(
        type = 'PangoTabAlign',
        name = 'alignment',
      ),
      Param(
        type = 'gint',
        name = 'location',
      ),
    ],
  ),
  'pango_tab_array_get_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'gint',
        name = 'tab_index',
      ),
      Param(
        type = 'PangoTabAlign *',
        name = 'alignment',
      ),
      Param(
        type = 'gint *',
        name = 'location',
      ),
    ],
  ),
  'pango_tab_array_get_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
      Param(
        type = 'PangoTabAlign **',
        name = 'alignments',
      ),
      Param(
        type = 'gint **',
        name = 'locations',
      ),
    ],
  ),
  'pango_tab_array_get_positions_in_pixels': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoTabArray *',
        name = 'tab_array',
      ),
    ],
  ),
  'pango_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_new': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_layout_copy': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'src',
      ),
    ],
  ),
  'pango_layout_get_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
    ],
  ),
  'pango_layout_get_attributes': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_layout_get_text': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_character_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'markup',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
    ],
  ),
  'pango_layout_set_markup_with_accel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const char *',
        name = 'markup',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'gunichar',
        name = 'accel_marker',
      ),
      Param(
        type = 'gunichar *',
        name = 'accel_char',
      ),
    ],
  ),
  'pango_layout_set_font_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'desc',
      ),
    ],
  ),
  'pango_layout_get_font_description': Spec(
    return_type = 'const PangoFontDescription *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
    ],
  ),
  'pango_layout_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoWrapMode',
        name = 'wrap',
      ),
    ],
  ),
  'pango_layout_get_wrap': Spec(
    return_type = 'PangoWrapMode',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_is_wrapped': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_indent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'indent',
      ),
    ],
  ),
  'pango_layout_get_indent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'spacing',
      ),
    ],
  ),
  'pango_layout_get_spacing': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_justify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'justify',
      ),
    ],
  ),
  'pango_layout_get_justify': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_auto_dir': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'auto_dir',
      ),
    ],
  ),
  'pango_layout_get_auto_dir': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoAlignment',
        name = 'alignment',
      ),
    ],
  ),
  'pango_layout_get_alignment': Spec(
    return_type = 'PangoAlignment',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoTabArray *',
        name = 'tabs',
      ),
    ],
  ),
  'pango_layout_get_tabs': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_single_paragraph_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'pango_layout_get_single_paragraph_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'ellipsize',
      ),
    ],
  ),
  'pango_layout_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_is_ellipsized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_unknown_glyphs_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_context_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_log_attrs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoLogAttr **',
        name = 'attrs',
      ),
      Param(
        type = 'gint *',
        name = 'n_attrs',
      ),
    ],
  ),
  'pango_layout_get_log_attrs_readonly': Spec(
    return_type = 'const PangoLogAttr *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint *',
        name = 'n_attrs',
      ),
    ],
  ),
  'pango_layout_index_to_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'pos',
      ),
    ],
  ),
  'pango_layout_index_to_line_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'line',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_layout_get_cursor_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'strong_pos',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'weak_pos',
      ),
    ],
  ),
  'pango_layout_move_cursor_visually': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gboolean',
        name = 'strong',
      ),
      Param(
        type = 'int',
        name = 'old_index',
      ),
      Param(
        type = 'int',
        name = 'old_trailing',
      ),
      Param(
        type = 'int',
        name = 'direction',
      ),
      Param(
        type = 'int *',
        name = 'new_index',
      ),
      Param(
        type = 'int *',
        name = 'new_trailing',
      ),
    ],
  ),
  'pango_layout_xy_to_index': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_layout_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_get_pixel_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int *',
        name = 'width',
      ),
      Param(
        type = 'int *',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_pixel_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int *',
        name = 'width',
      ),
      Param(
        type = 'int *',
        name = 'height',
      ),
    ],
  ),
  'pango_layout_get_baseline': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_line_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_get_line_readonly': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_get_lines': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_get_lines_readonly': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_line_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_line_ref': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_line_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_layout_line_x_to_index': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'x_pos',
      ),
      Param(
        type = 'int *',
        name = 'index_',
      ),
      Param(
        type = 'int *',
        name = 'trailing',
      ),
    ],
  ),
  'pango_layout_line_index_to_x': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'index_',
      ),
      Param(
        type = 'gboolean',
        name = 'trailing',
      ),
      Param(
        type = 'int *',
        name = 'x_pos',
      ),
    ],
  ),
  'pango_layout_line_get_x_ranges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'start_index',
      ),
      Param(
        type = 'int',
        name = 'end_index',
      ),
      Param(
        type = 'int **',
        name = 'ranges',
      ),
      Param(
        type = 'int *',
        name = 'n_ranges',
      ),
    ],
  ),
  'pango_layout_line_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_line_get_pixel_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'layout_line',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_layout_get_iter': Spec(
    return_type = 'PangoLayoutIter *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_layout_iter_copy': Spec(
    return_type = 'PangoLayoutIter *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_index': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_run': Spec(
    return_type = 'PangoLayoutRun *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_run_readonly': Spec(
    return_type = 'PangoLayoutRun *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_line_readonly': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_at_last_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_cluster': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_run': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_next_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_layout_iter_get_char_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_cluster_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_run_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_line_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_line_yrange': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'int *',
        name = 'y0_',
      ),
      Param(
        type = 'int *',
        name = 'y1_',
      ),
    ],
  ),
  'pango_layout_iter_get_layout_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'ink_rect',
      ),
      Param(
        type = 'PangoRectangle *',
        name = 'logical_rect',
      ),
    ],
  ),
  'pango_layout_iter_get_baseline': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'PangoLayoutIter *',
        name = 'iter',
      ),
    ],
  ),
  'pango_renderer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_renderer_draw_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_layout_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_glyph_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_draw_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_renderer_draw_error_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'pango_renderer_draw_trapezoid': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'double',
        name = 'y1_',
      ),
      Param(
        type = 'double',
        name = 'x11',
      ),
      Param(
        type = 'double',
        name = 'x21',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x12',
      ),
      Param(
        type = 'double',
        name = 'x22',
      ),
    ],
  ),
  'pango_renderer_draw_glyph': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyph',
        name = 'glyph',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'pango_renderer_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_deactivate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_part_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
    ],
  ),
  'pango_renderer_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
      Param(
        type = 'const PangoColor *',
        name = 'color',
      ),
    ],
  ),
  'pango_renderer_get_color': Spec(
    return_type = 'PangoColor *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'PangoRenderPart',
        name = 'part',
      ),
    ],
  ),
  'pango_renderer_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const PangoMatrix *',
        name = 'matrix',
      ),
    ],
  ),
  'pango_renderer_get_matrix': Spec(
    return_type = 'const PangoMatrix *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'pango_renderer_get_layout_line': Spec(
    return_type = 'PangoLayoutLine *',
    parameters = [
      Param(
        type = 'PangoRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  '__underflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '__uflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '__overflow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_getc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_putc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_feof': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_ferror': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_peekc_locked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '__fp',
      ),
    ],
  ),
  '_IO_flockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_funlockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_ftrylockfile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  '_IO_vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *restrict',
        name = '',
      ),
      Param(
        type = 'const char *restrict',
        name = '',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '',
      ),
      Param(
        type = 'int *restrict',
        name = '',
      ),
    ],
  ),
  '_IO_vfprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = '_IO_FILE *restrict',
        name = '',
      ),
      Param(
        type = 'const char *restrict',
        name = '',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '',
      ),
    ],
  ),
  '_IO_padn': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = '__ssize_t',
        name = '',
      ),
    ],
  ),
  '_IO_sgetn': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = 'void *',
        name = '',
      ),
      Param(
        type = 'size_t',
        name = '',
      ),
    ],
  ),
  '_IO_seekoff': Spec(
    return_type = '__off64_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = '__off64_t',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_seekpos': Spec(
    return_type = '__off64_t',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
      Param(
        type = '__off64_t',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_IO_free_backup_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = '_IO_FILE *',
        name = '',
      ),
    ],
  ),
  'remove': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__filename',
      ),
    ],
  ),
  'rename': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__old',
      ),
      Param(
        type = 'const char *',
        name = '__new',
      ),
    ],
  ),
  'renameat': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__oldfd',
      ),
      Param(
        type = 'const char *',
        name = '__old',
      ),
      Param(
        type = 'int',
        name = '__newfd',
      ),
      Param(
        type = 'const char *',
        name = '__new',
      ),
    ],
  ),
  'tmpfile': Spec(
    return_type = 'FILE *',
    parameters = [
    ],
  ),
  'tmpnam': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'tmpnam_r': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'tempnam': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__dir',
      ),
      Param(
        type = 'const char *',
        name = '__pfx',
      ),
    ],
  ),
  'fclose': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fflush': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fflush_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__filename',
      ),
      Param(
        type = 'const char *restrict',
        name = '__modes',
      ),
    ],
  ),
  'freopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__filename',
      ),
      Param(
        type = 'const char *restrict',
        name = '__modes',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fdopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'fmemopen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'void *',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__len',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'open_memstream': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'char **',
        name = '__bufloc',
      ),
      Param(
        type = 'size_t *',
        name = '__sizeloc',
      ),
    ],
  ),
  'setbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
    ],
  ),
  'setvbuf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'int',
        name = '__modes',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
    ],
  ),
  'setbuffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'char *restrict',
        name = '__buf',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
    ],
  ),
  'setlinebuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'printf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vfprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'snprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxlen',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vsnprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'size_t',
        name = '__maxlen',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vdprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__fmt',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'dprintf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__fd',
      ),
      Param(
        type = 'const char *restrict',
        name = '__fmt',
      ),
    ],
  ),
  'fscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'scanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'fscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'scanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'sscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
    ],
  ),
  'vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vfscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'vsscanf': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'const char *restrict',
        name = '__format',
      ),
      Param(
        type = '__gnuc_va_list',
        name = '__arg',
      ),
    ],
  ),
  'fgetc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getchar': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'getc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'getchar_unlocked': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'fgetc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fputc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putchar': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
    ],
  ),
  'fputc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putc_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putchar_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
    ],
  ),
  'getw': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'putw': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__w',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fgets': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *restrict',
        name = '__s',
      ),
      Param(
        type = 'int',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'gets': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  '__getdelim': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'int',
        name = '__delimiter',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'getdelim': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'int',
        name = '__delimiter',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'getline': Spec(
    return_type = '__ssize_t',
    parameters = [
      Param(
        type = 'char **restrict',
        name = '__lineptr',
      ),
      Param(
        type = 'size_t *restrict',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fputs': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *restrict',
        name = '__s',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'puts': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'ungetc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'int',
        name = '__c',
      ),
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fread': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fwrite': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'const void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__s',
      ),
    ],
  ),
  'fread_unlocked': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fwrite_unlocked': Spec(
    return_type = 'size_t',
    parameters = [
      Param(
        type = 'const void *restrict',
        name = '__ptr',
      ),
      Param(
        type = 'size_t',
        name = '__size',
      ),
      Param(
        type = 'size_t',
        name = '__n',
      ),
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
    ],
  ),
  'fseek': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = 'long',
        name = '__off',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'ftell': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'rewind': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fseeko': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = '__off_t',
        name = '__off',
      ),
      Param(
        type = 'int',
        name = '__whence',
      ),
    ],
  ),
  'ftello': Spec(
    return_type = '__off_t',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fgetpos': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *restrict',
        name = '__stream',
      ),
      Param(
        type = 'fpos_t *restrict',
        name = '__pos',
      ),
    ],
  ),
  'fsetpos': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
      Param(
        type = 'const fpos_t *',
        name = '__pos',
      ),
    ],
  ),
  'clearerr': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'feof': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ferror': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'clearerr_unlocked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'feof_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ferror_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'perror': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = '__s',
      ),
    ],
  ),
  'fileno': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'fileno_unlocked': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'popen': Spec(
    return_type = 'FILE *',
    parameters = [
      Param(
        type = 'const char *',
        name = '__command',
      ),
      Param(
        type = 'const char *',
        name = '__modes',
      ),
    ],
  ),
  'pclose': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ctermid': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'char *',
        name = '__s',
      ),
    ],
  ),
  'flockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'ftrylockfile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'funlockfile': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'FILE *',
        name = '__stream',
      ),
    ],
  ),
  'pango_split_file_list': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_trim_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
    ],
  ),
  'pango_read_line': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'FILE *',
        name = 'stream',
      ),
      Param(
        type = 'GString *',
        name = 'str',
      ),
    ],
  ),
  'pango_skip_space': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
    ],
  ),
  'pango_scan_word': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'GString *',
        name = 'out',
      ),
    ],
  ),
  'pango_scan_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'GString *',
        name = 'out',
      ),
    ],
  ),
  'pango_scan_int': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char **',
        name = 'pos',
      ),
      Param(
        type = 'int *',
        name = 'out',
      ),
    ],
  ),
  'pango_parse_enum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'int *',
        name = 'value',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
      Param(
        type = 'char **',
        name = 'possible_values',
      ),
    ],
  ),
  'pango_parse_style': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoStyle *',
        name = 'style',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_variant': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoVariant *',
        name = 'variant',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_weight': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoWeight *',
        name = 'weight',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_parse_stretch': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'str',
      ),
      Param(
        type = 'PangoStretch *',
        name = 'stretch',
      ),
      Param(
        type = 'gboolean',
        name = 'warn',
      ),
    ],
  ),
  'pango_quantize_line_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'thickness',
      ),
      Param(
        type = 'int *',
        name = 'position',
      ),
    ],
  ),
  'pango_log2vis_get_embedding_levels': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'int',
        name = 'length',
      ),
      Param(
        type = 'PangoDirection *',
        name = 'pbase_dir',
      ),
    ],
  ),
  'pango_is_zero_width': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'pango_version': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'pango_version_string': Spec(
    return_type = 'const char *',
    parameters = [
    ],
  ),
  'pango_version_check': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'int',
        name = 'required_major',
      ),
      Param(
        type = 'int',
        name = 'required_minor',
      ),
      Param(
        type = 'int',
        name = 'required_micro',
      ),
    ],
  ),
  'cairo_version': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'cairo_version_string': Spec(
    return_type = 'const char *',
    parameters = [
    ],
  ),
  'cairo_create': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
    ],
  ),
  'cairo_reference': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_restore': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_push_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_push_group_with_content': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
    ],
  ),
  'cairo_pop_group': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_pop_group_to_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_set_operator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_operator_t',
        name = 'op',
      ),
    ],
  ),
  'cairo_set_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_pattern_t *',
        name = 'source',
      ),
    ],
  ),
  'cairo_set_source_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_set_source_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_set_source_surface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_set_tolerance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'tolerance',
      ),
    ],
  ),
  'cairo_set_antialias': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_antialias_t',
        name = 'antialias',
      ),
    ],
  ),
  'cairo_set_fill_rule': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_fill_rule_t',
        name = 'fill_rule',
      ),
    ],
  ),
  'cairo_set_line_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
    ],
  ),
  'cairo_set_line_cap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_line_cap_t',
        name = 'line_cap',
      ),
    ],
  ),
  'cairo_set_line_join': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_line_join_t',
        name = 'line_join',
      ),
    ],
  ),
  'cairo_set_dash': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const double *',
        name = 'dashes',
      ),
      Param(
        type = 'int',
        name = 'num_dashes',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
    ],
  ),
  'cairo_set_miter_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'limit',
      ),
    ],
  ),
  'cairo_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'angle',
      ),
    ],
  ),
  'cairo_transform': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_identity_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_user_to_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_user_to_device_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_device_to_user': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_device_to_user_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_new_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_new_sub_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
      Param(
        type = 'double',
        name = 'x2',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x3',
      ),
      Param(
        type = 'double',
        name = 'y3',
      ),
    ],
  ),
  'cairo_arc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'xc',
      ),
      Param(
        type = 'double',
        name = 'yc',
      ),
      Param(
        type = 'double',
        name = 'radius',
      ),
      Param(
        type = 'double',
        name = 'angle1',
      ),
      Param(
        type = 'double',
        name = 'angle2',
      ),
    ],
  ),
  'cairo_arc_negative': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'xc',
      ),
      Param(
        type = 'double',
        name = 'yc',
      ),
      Param(
        type = 'double',
        name = 'radius',
      ),
      Param(
        type = 'double',
        name = 'angle1',
      ),
      Param(
        type = 'double',
        name = 'angle2',
      ),
    ],
  ),
  'cairo_rel_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx',
      ),
      Param(
        type = 'double',
        name = 'dy',
      ),
    ],
  ),
  'cairo_rel_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx',
      ),
      Param(
        type = 'double',
        name = 'dy',
      ),
    ],
  ),
  'cairo_rel_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dx1',
      ),
      Param(
        type = 'double',
        name = 'dy1',
      ),
      Param(
        type = 'double',
        name = 'dx2',
      ),
      Param(
        type = 'double',
        name = 'dy2',
      ),
      Param(
        type = 'double',
        name = 'dx3',
      ),
      Param(
        type = 'double',
        name = 'dy3',
      ),
    ],
  ),
  'cairo_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'cairo_close_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_path_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_paint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_paint_with_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mask_surface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'surface_x',
      ),
      Param(
        type = 'double',
        name = 'surface_y',
      ),
    ],
  ),
  'cairo_stroke': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_stroke_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_fill_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_show_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_in_stroke': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_in_fill': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_in_clip': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_stroke_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_fill_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_reset_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip_preserve': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_clip_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'x2',
      ),
      Param(
        type = 'double *',
        name = 'y2',
      ),
    ],
  ),
  'cairo_copy_clip_rectangle_list': Spec(
    return_type = 'cairo_rectangle_list_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_rectangle_list_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_rectangle_list_t *',
        name = 'rectangle_list',
      ),
    ],
  ),
  'cairo_glyph_allocate': Spec(
    return_type = 'cairo_glyph_t *',
    parameters = [
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_glyph_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_glyph_t *',
        name = 'glyphs',
      ),
    ],
  ),
  'cairo_text_cluster_allocate': Spec(
    return_type = 'cairo_text_cluster_t *',
    parameters = [
      Param(
        type = 'int',
        name = 'num_clusters',
      ),
    ],
  ),
  'cairo_text_cluster_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_text_cluster_t *',
        name = 'clusters',
      ),
    ],
  ),
  'cairo_font_options_create': Spec(
    return_type = 'cairo_font_options_t *',
    parameters = [
    ],
  ),
  'cairo_font_options_copy': Spec(
    return_type = 'cairo_font_options_t *',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'original',
      ),
    ],
  ),
  'cairo_font_options_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_merge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_font_options_equal': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_font_options_hash': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_antialias': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_antialias_t',
        name = 'antialias',
      ),
    ],
  ),
  'cairo_font_options_get_antialias': Spec(
    return_type = 'cairo_antialias_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_subpixel_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_subpixel_order_t',
        name = 'subpixel_order',
      ),
    ],
  ),
  'cairo_font_options_get_subpixel_order': Spec(
    return_type = 'cairo_subpixel_order_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_hint_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_hint_style_t',
        name = 'hint_style',
      ),
    ],
  ),
  'cairo_font_options_get_hint_style': Spec(
    return_type = 'cairo_hint_style_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_font_options_set_hint_metrics': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
      Param(
        type = 'cairo_hint_metrics_t',
        name = 'hint_metrics',
      ),
    ],
  ),
  'cairo_font_options_get_hint_metrics': Spec(
    return_type = 'cairo_hint_metrics_t',
    parameters = [
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_select_font_face': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'family',
      ),
      Param(
        type = 'cairo_font_slant_t',
        name = 'slant',
      ),
      Param(
        type = 'cairo_font_weight_t',
        name = 'weight',
      ),
    ],
  ),
  'cairo_set_font_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'size',
      ),
    ],
  ),
  'cairo_set_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_get_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_set_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_set_font_face': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_get_font_face': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_set_scaled_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_get_scaled_font': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_show_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
    ],
  ),
  'cairo_show_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_show_text_glyphs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'int',
        name = 'utf8_len',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'const cairo_text_cluster_t *',
        name = 'clusters',
      ),
      Param(
        type = 'int',
        name = 'num_clusters',
      ),
      Param(
        type = 'cairo_text_cluster_flags_t',
        name = 'cluster_flags',
      ),
    ],
  ),
  'cairo_text_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
    ],
  ),
  'cairo_glyph_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
    ],
  ),
  'cairo_text_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_font_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_font_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_font_face_reference': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_type': Spec(
    return_type = 'cairo_font_type_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_font_face_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_font_face_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_scaled_font_create': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'font_matrix',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'ctm',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_scaled_font_reference': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_type': Spec(
    return_type = 'cairo_font_type_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_scaled_font_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_scaled_font_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_font_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_text_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_glyph_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'const cairo_glyph_t *',
        name = 'glyphs',
      ),
      Param(
        type = 'int',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_extents_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_scaled_font_text_to_glyphs': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'const char *',
        name = 'utf8',
      ),
      Param(
        type = 'int',
        name = 'utf8_len',
      ),
      Param(
        type = 'cairo_glyph_t **',
        name = 'glyphs',
      ),
      Param(
        type = 'int *',
        name = 'num_glyphs',
      ),
      Param(
        type = 'cairo_text_cluster_t **',
        name = 'clusters',
      ),
      Param(
        type = 'int *',
        name = 'num_clusters',
      ),
      Param(
        type = 'cairo_text_cluster_flags_t *',
        name = 'cluster_flags',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_face': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'font_matrix',
      ),
    ],
  ),
  'cairo_scaled_font_get_ctm': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'ctm',
      ),
    ],
  ),
  'cairo_scaled_font_get_scale_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'scale_matrix',
      ),
    ],
  ),
  'cairo_scaled_font_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_scaled_font_t *',
        name = 'scaled_font',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_toy_font_face_create': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'family',
      ),
      Param(
        type = 'cairo_font_slant_t',
        name = 'slant',
      ),
      Param(
        type = 'cairo_font_weight_t',
        name = 'weight',
      ),
    ],
  ),
  'cairo_toy_font_face_get_family': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_toy_font_face_get_slant': Spec(
    return_type = 'cairo_font_slant_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_toy_font_face_get_weight': Spec(
    return_type = 'cairo_font_weight_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_create': Spec(
    return_type = 'cairo_font_face_t *',
    parameters = [
    ],
  ),
  'cairo_user_font_face_set_init_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_init_func_t',
        name = 'init_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_render_glyph_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_render_glyph_func_t',
        name = 'render_glyph_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_text_to_glyphs_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_text_to_glyphs_func_t',
        name = 'text_to_glyphs_func',
      ),
    ],
  ),
  'cairo_user_font_face_set_unicode_to_glyph_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
      Param(
        type = 'cairo_user_scaled_font_unicode_to_glyph_func_t',
        name = 'unicode_to_glyph_func',
      ),
    ],
  ),
  'cairo_user_font_face_get_init_func': Spec(
    return_type = 'cairo_user_scaled_font_init_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_render_glyph_func': Spec(
    return_type = 'cairo_user_scaled_font_render_glyph_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_text_to_glyphs_func': Spec(
    return_type = 'cairo_user_scaled_font_text_to_glyphs_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_user_font_face_get_unicode_to_glyph_func': Spec(
    return_type = 'cairo_user_scaled_font_unicode_to_glyph_func_t',
    parameters = [
      Param(
        type = 'cairo_font_face_t *',
        name = 'font_face',
      ),
    ],
  ),
  'cairo_get_operator': Spec(
    return_type = 'cairo_operator_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_source': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_tolerance': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_antialias': Spec(
    return_type = 'cairo_antialias_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_has_current_point': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_current_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_get_fill_rule': Spec(
    return_type = 'cairo_fill_rule_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_width': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_cap': Spec(
    return_type = 'cairo_line_cap_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_line_join': Spec(
    return_type = 'cairo_line_join_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_miter_limit': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_dash_count': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_dash': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double *',
        name = 'dashes',
      ),
      Param(
        type = 'double *',
        name = 'offset',
      ),
    ],
  ),
  'cairo_get_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_get_target': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_get_group_target': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_path': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_copy_path_flat': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_append_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_path_t *',
        name = 'path',
      ),
    ],
  ),
  'cairo_path_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_path_t *',
        name = 'path',
      ),
    ],
  ),
  'cairo_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'cairo_status_to_string': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'cairo_status_t',
        name = 'status',
      ),
    ],
  ),
  'cairo_device_reference': Spec(
    return_type = 'cairo_device_t *',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_type': Spec(
    return_type = 'cairo_device_type_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_acquire': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_release': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_device_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_surface_create_similar': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'other',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_create_similar_image': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'other',
      ),
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_map_to_image': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_surface_unmap_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'image',
      ),
    ],
  ),
  'cairo_surface_create_for_rectangle': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_create_observer': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'target',
      ),
      Param(
        type = 'cairo_surface_observer_mode_t',
        name = 'mode',
      ),
    ],
  ),
  'cairo_surface_observer_add_paint_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_mask_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_fill_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_stroke_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_glyphs_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_flush_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_add_finish_callback': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'abstract_surface',
      ),
      Param(
        type = 'cairo_surface_observer_callback_t',
        name = 'func',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_surface_observer_print': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_observer_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_device_observer_print': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_device_observer_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_paint_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_mask_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_fill_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_stroke_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_device_observer_glyphs_elapsed': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'cairo_device_t *',
        name = 'device',
      ),
    ],
  ),
  'cairo_surface_reference': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_device': Spec(
    return_type = 'cairo_device_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_type': Spec(
    return_type = 'cairo_surface_type_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_get_content': Spec(
    return_type = 'cairo_content_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_write_to_png': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'cairo_surface_write_to_png_stream': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_write_func_t',
        name = 'write_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_surface_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_surface_get_mime_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'const unsigned char **',
        name = 'data',
      ),
      Param(
        type = 'unsigned long *',
        name = 'length',
      ),
    ],
  ),
  'cairo_surface_set_mime_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'const unsigned char *',
        name = 'data',
      ),
      Param(
        type = 'unsigned long',
        name = 'length',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_surface_supports_mime_type': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
    ],
  ),
  'cairo_surface_get_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'cairo_surface_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_mark_dirty': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_mark_dirty_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_surface_set_device_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x_offset',
      ),
      Param(
        type = 'double',
        name = 'y_offset',
      ),
    ],
  ),
  'cairo_surface_get_device_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x_offset',
      ),
      Param(
        type = 'double *',
        name = 'y_offset',
      ),
    ],
  ),
  'cairo_surface_set_fallback_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double',
        name = 'x_pixels_per_inch',
      ),
      Param(
        type = 'double',
        name = 'y_pixels_per_inch',
      ),
    ],
  ),
  'cairo_surface_get_fallback_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x_pixels_per_inch',
      ),
      Param(
        type = 'double *',
        name = 'y_pixels_per_inch',
      ),
    ],
  ),
  'cairo_surface_copy_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_show_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_surface_has_show_text_glyphs': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_create': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_format_stride_for_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
    ],
  ),
  'cairo_image_surface_create_for_data': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'unsigned char *',
        name = 'data',
      ),
      Param(
        type = 'cairo_format_t',
        name = 'format',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'int',
        name = 'stride',
      ),
    ],
  ),
  'cairo_image_surface_get_data': Spec(
    return_type = 'unsigned char *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_format': Spec(
    return_type = 'cairo_format_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_get_stride': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_image_surface_create_from_png': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'cairo_image_surface_create_from_png_stream': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_read_func_t',
        name = 'read_func',
      ),
      Param(
        type = 'void *',
        name = 'closure',
      ),
    ],
  ),
  'cairo_recording_surface_create': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'const cairo_rectangle_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_recording_surface_ink_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'width',
      ),
      Param(
        type = 'double *',
        name = 'height',
      ),
    ],
  ),
  'cairo_recording_surface_get_extents': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'cairo_rectangle_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_pattern_create_raster_source': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_callback_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'void *',
        name = 'data',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_callback_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_acquire': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_acquire_func_t',
        name = 'acquire',
      ),
      Param(
        type = 'cairo_raster_source_release_func_t',
        name = 'release',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_acquire': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_acquire_func_t *',
        name = 'acquire',
      ),
      Param(
        type = 'cairo_raster_source_release_func_t *',
        name = 'release',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_snapshot': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_snapshot_func_t',
        name = 'snapshot',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_snapshot': Spec(
    return_type = 'cairo_raster_source_snapshot_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_copy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_copy_func_t',
        name = 'copy',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_copy': Spec(
    return_type = 'cairo_raster_source_copy_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_raster_source_pattern_set_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_raster_source_finish_func_t',
        name = 'finish',
      ),
    ],
  ),
  'cairo_raster_source_pattern_get_finish': Spec(
    return_type = 'cairo_raster_source_finish_func_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_create_rgb': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_pattern_create_rgba': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_create_for_surface': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'cairo_pattern_create_linear': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'x0',
      ),
      Param(
        type = 'double',
        name = 'y0',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
    ],
  ),
  'cairo_pattern_create_radial': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'double',
        name = 'cx0',
      ),
      Param(
        type = 'double',
        name = 'cy0',
      ),
      Param(
        type = 'double',
        name = 'radius0',
      ),
      Param(
        type = 'double',
        name = 'cx1',
      ),
      Param(
        type = 'double',
        name = 'cy1',
      ),
      Param(
        type = 'double',
        name = 'radius1',
      ),
    ],
  ),
  'cairo_pattern_create_mesh': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
    ],
  ),
  'cairo_pattern_reference': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_reference_count': Spec(
    return_type = 'unsigned int',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_user_data': Spec(
    return_type = 'void *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
    ],
  ),
  'cairo_pattern_set_user_data': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_user_data_key_t *',
        name = 'key',
      ),
      Param(
        type = 'void *',
        name = 'user_data',
      ),
      Param(
        type = 'cairo_destroy_func_t',
        name = 'destroy',
      ),
    ],
  ),
  'cairo_pattern_get_type': Spec(
    return_type = 'cairo_pattern_type_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_add_color_stop_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_pattern_add_color_stop_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'offset',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mesh_pattern_begin_patch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mesh_pattern_end_patch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_mesh_pattern_curve_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x1',
      ),
      Param(
        type = 'double',
        name = 'y1',
      ),
      Param(
        type = 'double',
        name = 'x2',
      ),
      Param(
        type = 'double',
        name = 'y2',
      ),
      Param(
        type = 'double',
        name = 'x3',
      ),
      Param(
        type = 'double',
        name = 'y3',
      ),
    ],
  ),
  'cairo_mesh_pattern_line_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_move_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_control_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'point_num',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_corner_color_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
    ],
  ),
  'cairo_mesh_pattern_set_corner_color_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double',
        name = 'red',
      ),
      Param(
        type = 'double',
        name = 'green',
      ),
      Param(
        type = 'double',
        name = 'blue',
      ),
      Param(
        type = 'double',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_set_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_pattern_get_matrix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_pattern_set_extend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_extend_t',
        name = 'extend',
      ),
    ],
  ),
  'cairo_pattern_get_extend': Spec(
    return_type = 'cairo_extend_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_set_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_filter_t',
        name = 'filter',
      ),
    ],
  ),
  'cairo_pattern_get_filter': Spec(
    return_type = 'cairo_filter_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'cairo_pattern_get_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_get_surface': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'cairo_surface_t **',
        name = 'surface',
      ),
    ],
  ),
  'cairo_pattern_get_color_stop_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'int',
        name = 'index',
      ),
      Param(
        type = 'double *',
        name = 'offset',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_pattern_get_color_stop_count': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'int *',
        name = 'count',
      ),
    ],
  ),
  'cairo_pattern_get_linear_points': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
    ],
  ),
  'cairo_pattern_get_radial_circles': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'double *',
        name = 'x0',
      ),
      Param(
        type = 'double *',
        name = 'y0',
      ),
      Param(
        type = 'double *',
        name = 'r0',
      ),
      Param(
        type = 'double *',
        name = 'x1',
      ),
      Param(
        type = 'double *',
        name = 'y1',
      ),
      Param(
        type = 'double *',
        name = 'r1',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_patch_count': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int *',
        name = 'count',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_path': Spec(
    return_type = 'cairo_path_t *',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_corner_color_rgba': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
      Param(
        type = 'unsigned int',
        name = 'corner_num',
      ),
      Param(
        type = 'double *',
        name = 'red',
      ),
      Param(
        type = 'double *',
        name = 'green',
      ),
      Param(
        type = 'double *',
        name = 'blue',
      ),
      Param(
        type = 'double *',
        name = 'alpha',
      ),
    ],
  ),
  'cairo_mesh_pattern_get_control_point': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
      Param(
        type = 'unsigned int',
        name = 'patch_num',
      ),
      Param(
        type = 'unsigned int',
        name = 'point_num',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_matrix_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'xx',
      ),
      Param(
        type = 'double',
        name = 'yx',
      ),
      Param(
        type = 'double',
        name = 'xy',
      ),
      Param(
        type = 'double',
        name = 'yy',
      ),
      Param(
        type = 'double',
        name = 'x0',
      ),
      Param(
        type = 'double',
        name = 'y0',
      ),
    ],
  ),
  'cairo_matrix_init_identity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_matrix_init_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_matrix_init_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_matrix_init_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'radians',
      ),
    ],
  ),
  'cairo_matrix_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'tx',
      ),
      Param(
        type = 'double',
        name = 'ty',
      ),
    ],
  ),
  'cairo_matrix_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'sx',
      ),
      Param(
        type = 'double',
        name = 'sy',
      ),
    ],
  ),
  'cairo_matrix_rotate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double',
        name = 'radians',
      ),
    ],
  ),
  'cairo_matrix_invert': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'matrix',
      ),
    ],
  ),
  'cairo_matrix_multiply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_matrix_t *',
        name = 'result',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'a',
      ),
      Param(
        type = 'const cairo_matrix_t *',
        name = 'b',
      ),
    ],
  ),
  'cairo_matrix_transform_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'dx',
      ),
      Param(
        type = 'double *',
        name = 'dy',
      ),
    ],
  ),
  'cairo_matrix_transform_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_matrix_t *',
        name = 'matrix',
      ),
      Param(
        type = 'double *',
        name = 'x',
      ),
      Param(
        type = 'double *',
        name = 'y',
      ),
    ],
  ),
  'cairo_region_create': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
    ],
  ),
  'cairo_region_create_rectangle': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_create_rectangles': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rects',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
    ],
  ),
  'cairo_region_copy': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'original',
      ),
    ],
  ),
  'cairo_region_reference': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_equal': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'a',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'b',
      ),
    ],
  ),
  'cairo_region_status': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'extents',
      ),
    ],
  ),
  'cairo_region_num_rectangles': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_get_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'nth',
      ),
      Param(
        type = 'cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_is_empty': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'cairo_region_contains_rectangle': Spec(
    return_type = 'cairo_region_overlap_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_contains_point': Spec(
    return_type = 'cairo_bool_t',
    parameters = [
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'x',
      ),
      Param(
        type = 'int',
        name = 'y',
      ),
    ],
  ),
  'cairo_region_translate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'int',
        name = 'dx',
      ),
      Param(
        type = 'int',
        name = 'dy',
      ),
    ],
  ),
  'cairo_region_subtract': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_subtract_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_intersect': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_intersect_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_union': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_union_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_region_xor': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'other',
      ),
    ],
  ),
  'cairo_region_xor_rectangle': Spec(
    return_type = 'cairo_status_t',
    parameters = [
      Param(
        type = 'cairo_region_t *',
        name = 'dst',
      ),
      Param(
        type = 'const cairo_rectangle_int_t *',
        name = 'rectangle',
      ),
    ],
  ),
  'cairo_debug_reset_static_data': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_color_copy': Spec(
    return_type = 'GdkColor *',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_color_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_color_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_color_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'colora',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'colorb',
      ),
    ],
  ),
  'gdk_color_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'spec',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_color_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_device_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_device_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_has_cursor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_source': Spec(
    return_type = 'GdkInputSource',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_mode': Spec(
    return_type = 'GdkInputMode',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_set_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkInputMode',
        name = 'mode',
      ),
    ],
  ),
  'gdk_device_get_n_keys': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint *',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'modifiers',
      ),
    ],
  ),
  'gdk_device_set_key': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gdk_device_get_axis_use': Spec(
    return_type = 'GdkAxisUse',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
    ],
  ),
  'gdk_device_set_axis_use': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint',
        name = 'index_',
      ),
      Param(
        type = 'GdkAxisUse',
        name = 'use',
      ),
    ],
  ),
  'gdk_device_get_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble *',
        name = 'axes',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'mask',
      ),
    ],
  ),
  'gdk_device_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkScreen **',
        name = 'screen',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gdk_device_get_window_at_position': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gint *',
        name = 'win_x',
      ),
      Param(
        type = 'gint *',
        name = 'win_y',
      ),
    ],
  ),
  'gdk_device_get_history': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint32',
        name = 'start',
      ),
      Param(
        type = 'guint32',
        name = 'stop',
      ),
      Param(
        type = 'GdkTimeCoord ***',
        name = 'events',
      ),
      Param(
        type = 'gint *',
        name = 'n_events',
      ),
    ],
  ),
  'gdk_device_free_history': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkTimeCoord **',
        name = 'events',
      ),
      Param(
        type = 'gint',
        name = 'n_events',
      ),
    ],
  ),
  'gdk_device_get_n_axes': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_list_axes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_axis_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gdouble *',
        name = 'axes',
      ),
      Param(
        type = 'GdkAtom',
        name = 'axis_label',
      ),
      Param(
        type = 'gdouble *',
        name = 'value',
      ),
    ],
  ),
  'gdk_device_get_axis': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gdouble *',
        name = 'axes',
      ),
      Param(
        type = 'GdkAxisUse',
        name = 'use',
      ),
      Param(
        type = 'gdouble *',
        name = 'value',
      ),
    ],
  ),
  'gdk_device_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_associated_device': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_list_slave_devices': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_get_device_type': Spec(
    return_type = 'GdkDeviceType',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_device_grab': Spec(
    return_type = 'GdkGrabStatus',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkGrabOwnership',
        name = 'grab_ownership',
      ),
      Param(
        type = 'gboolean',
        name = 'owner_events',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'event_mask',
      ),
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_device_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_device_warp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_device_grab_info_libgtk_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkWindow **',
        name = 'grab_window',
      ),
      Param(
        type = 'gboolean *',
        name = 'owner_events',
      ),
    ],
  ),
  'gdk_drag_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_drag_context_set_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_drag_context_get_device': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_list_targets': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_actions': Spec(
    return_type = 'GdkDragAction',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_suggested_action': Spec(
    return_type = 'GdkDragAction',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_selected_action': Spec(
    return_type = 'GdkDragAction',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_source_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_dest_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_context_get_protocol': Spec(
    return_type = 'GdkDragProtocol',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'action',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drop_reply': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'accepted',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drop_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'success',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drag_get_selection': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_drag_begin': Spec(
    return_type = 'GdkDragContext *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'gdk_drag_begin_for_device': Spec(
    return_type = 'GdkDragContext *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GList *',
        name = 'targets',
      ),
    ],
  ),
  'gdk_drag_find_window_for_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'drag_window',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'x_root',
      ),
      Param(
        type = 'gint',
        name = 'y_root',
      ),
      Param(
        type = 'GdkWindow **',
        name = 'dest_window',
      ),
      Param(
        type = 'GdkDragProtocol *',
        name = 'protocol',
      ),
    ],
  ),
  'gdk_drag_motion': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'dest_window',
      ),
      Param(
        type = 'GdkDragProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'gint',
        name = 'x_root',
      ),
      Param(
        type = 'gint',
        name = 'y_root',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'suggested_action',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'possible_actions',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drag_drop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drag_abort': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_drag_drop_succeeded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gdk_event_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_events_pending': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gdk_event_get': Spec(
    return_type = 'GdkEvent *',
    parameters = [
    ],
  ),
  'gdk_event_peek': Spec(
    return_type = 'GdkEvent *',
    parameters = [
    ],
  ),
  'gdk_event_put': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_new': Spec(
    return_type = 'GdkEvent *',
    parameters = [
      Param(
        type = 'GdkEventType',
        name = 'type',
      ),
    ],
  ),
  'gdk_event_copy': Spec(
    return_type = 'GdkEvent *',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_get_time': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_get_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'state',
      ),
    ],
  ),
  'gdk_event_get_coords': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'gdouble *',
        name = 'x_win',
      ),
      Param(
        type = 'gdouble *',
        name = 'y_win',
      ),
    ],
  ),
  'gdk_event_get_root_coords': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'gdouble *',
        name = 'x_root',
      ),
      Param(
        type = 'gdouble *',
        name = 'y_root',
      ),
    ],
  ),
  'gdk_event_get_button': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint *',
        name = 'button',
      ),
    ],
  ),
  'gdk_event_get_click_count': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint *',
        name = 'click_count',
      ),
    ],
  ),
  'gdk_event_get_keyval': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint *',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_event_get_keycode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'guint16 *',
        name = 'keycode',
      ),
    ],
  ),
  'gdk_event_get_scroll_direction': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkScrollDirection *',
        name = 'direction',
      ),
    ],
  ),
  'gdk_event_get_scroll_deltas': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'gdouble *',
        name = 'delta_x',
      ),
      Param(
        type = 'gdouble *',
        name = 'delta_y',
      ),
    ],
  ),
  'gdk_event_get_axis': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkAxisUse',
        name = 'axis_use',
      ),
      Param(
        type = 'gdouble *',
        name = 'value',
      ),
    ],
  ),
  'gdk_event_set_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_event_get_device': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_set_source_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_event_get_source_device': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_request_motions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkEventMotion *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_triggers_context_menu': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_events_get_distance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event1',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event2',
      ),
      Param(
        type = 'gdouble *',
        name = 'distance',
      ),
    ],
  ),
  'gdk_events_get_angle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event1',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event2',
      ),
      Param(
        type = 'gdouble *',
        name = 'angle',
      ),
    ],
  ),
  'gdk_events_get_center': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event1',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event2',
      ),
      Param(
        type = 'gdouble *',
        name = 'x',
      ),
      Param(
        type = 'gdouble *',
        name = 'y',
      ),
    ],
  ),
  'gdk_event_handler_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEventFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gdk_event_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_event_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_event_get_event_sequence': Spec(
    return_type = 'GdkEventSequence *',
    parameters = [
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_set_show_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'show_events',
      ),
    ],
  ),
  'gdk_get_show_events': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gdk_setting_get': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gdk_device_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_device_manager_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkDeviceManager *',
        name = 'device_manager',
      ),
    ],
  ),
  'gdk_device_manager_list_devices': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkDeviceManager *',
        name = 'device_manager',
      ),
      Param(
        type = 'GdkDeviceType',
        name = 'type',
      ),
    ],
  ),
  'gdk_device_manager_get_client_pointer': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'GdkDeviceManager *',
        name = 'device_manager',
      ),
    ],
  ),
  'gdk_display_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_display_open': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'display_name',
      ),
    ],
  ),
  'gdk_display_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_n_screens': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'gint',
        name = 'screen_num',
      ),
    ],
  ),
  'gdk_display_get_default_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_pointer_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_display_keyboard_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_display_pointer_is_grabbed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_device_is_grabbed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_display_beep': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_sync': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_close': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_is_closed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_list_devices': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_event': Spec(
    return_type = 'GdkEvent *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_peek_event': Spec(
    return_type = 'GdkEvent *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_put_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gdk_display_has_pending': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_set_double_click_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint',
        name = 'msec',
      ),
    ],
  ),
  'gdk_display_set_double_click_distance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint',
        name = 'distance',
      ),
    ],
  ),
  'gdk_display_get_default': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
    ],
  ),
  'gdk_display_get_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkScreen **',
        name = 'screen',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'mask',
      ),
    ],
  ),
  'gdk_display_get_window_at_pointer': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'gint *',
        name = 'win_x',
      ),
      Param(
        type = 'gint *',
        name = 'win_y',
      ),
    ],
  ),
  'gdk_display_warp_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_display_open_default_libgtk_only': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
    ],
  ),
  'gdk_display_supports_cursor_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_supports_cursor_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_default_cursor_size': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_maximal_cursor_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint *',
        name = 'width',
      ),
      Param(
        type = 'guint *',
        name = 'height',
      ),
    ],
  ),
  'gdk_display_get_default_group': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_supports_selection_notification': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_request_selection_notification': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gdk_display_supports_clipboard_persistence': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_store_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'clipboard_window',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
      Param(
        type = 'const GdkAtom *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
    ],
  ),
  'gdk_display_supports_shapes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_supports_input_shapes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_supports_composite': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_notify_startup_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'startup_id',
      ),
    ],
  ),
  'gdk_display_get_device_manager': Spec(
    return_type = 'GdkDeviceManager *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_get_app_launch_context': Spec(
    return_type = 'GdkAppLaunchContext *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_screen_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_screen_get_system_visual': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_rgba_visual': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_is_composited': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_root_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_number': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_height': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_width_mm': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_height_mm': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_list_visuals': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_toplevel_windows': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_make_display_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_n_monitors': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_primary_monitor': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_monitor_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'dest',
      ),
    ],
  ),
  'gdk_screen_get_monitor_workarea': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'dest',
      ),
    ],
  ),
  'gdk_screen_get_monitor_at_point': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_screen_get_monitor_at_window': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_screen_get_monitor_width_mm': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
    ],
  ),
  'gdk_screen_get_monitor_height_mm': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
    ],
  ),
  'gdk_screen_get_monitor_plug_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
    ],
  ),
  'gdk_screen_get_default': Spec(
    return_type = 'GdkScreen *',
    parameters = [
    ],
  ),
  'gdk_screen_get_setting': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gdk_screen_set_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'gdk_screen_get_font_options': Spec(
    return_type = 'const cairo_font_options_t *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_set_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gdouble',
        name = 'dpi',
      ),
    ],
  ),
  'gdk_screen_get_resolution': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_active_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_screen_get_window_stack': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_app_launch_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_app_launch_context_new': Spec(
    return_type = 'GdkAppLaunchContext *',
    parameters = [
    ],
  ),
  'gdk_app_launch_context_set_display': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_app_launch_context_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_app_launch_context_set_desktop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'desktop',
      ),
    ],
  ),
  'gdk_app_launch_context_set_timestamp': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_app_launch_context_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gdk_app_launch_context_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkAppLaunchContext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'icon_name',
      ),
    ],
  ),
  'gdk_rgba_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_rgba_copy': Spec(
    return_type = 'GdkRGBA *',
    parameters = [
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gdk_rgba_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gdk_rgba_hash': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'p',
      ),
    ],
  ),
  'gdk_rgba_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gconstpointer',
        name = 'p1',
      ),
      Param(
        type = 'gconstpointer',
        name = 'p2',
      ),
    ],
  ),
  'gdk_rgba_parse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
      Param(
        type = 'const gchar *',
        name = 'spec',
      ),
    ],
  ),
  'gdk_rgba_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gdk_pixbuf_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gdk_pixbuf_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_ref': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_colorspace': Spec(
    return_type = 'GdkColorspace',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_n_channels': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_has_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_bits_per_sample': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_pixels': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_rowstride': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_byte_length': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_get_pixels_with_length': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'guint *',
        name = 'length',
      ),
    ],
  ),
  'gdk_pixbuf_new': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkColorspace',
        name = 'colorspace',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'int',
        name = 'bits_per_sample',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_copy': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_new_subpixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'src_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'src_x',
      ),
      Param(
        type = 'int',
        name = 'src_y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file_at_size': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_file_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_resource': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'resource_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_resource_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'resource_path',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_data': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'GdkColorspace',
        name = 'colorspace',
      ),
      Param(
        type = 'gboolean',
        name = 'has_alpha',
      ),
      Param(
        type = 'int',
        name = 'bits_per_sample',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'int',
        name = 'rowstride',
      ),
      Param(
        type = 'GdkPixbufDestroyNotify',
        name = 'destroy_fn',
      ),
      Param(
        type = 'gpointer',
        name = 'destroy_fn_data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_xpm_data': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const char **',
        name = 'data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_inline': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'gint',
        name = 'data_length',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_pixels',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'guint32',
        name = 'pixel',
      ),
    ],
  ),
  'gdk_pixbuf_save': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_savev': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_callback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GdkPixbufSaveFunc',
        name = 'save_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_callbackv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GdkPixbufSaveFunc',
        name = 'save_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_buffer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gchar **',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'buffer_size',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_bufferv': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gchar **',
        name = 'buffer',
      ),
      Param(
        type = 'gsize *',
        name = 'buffer_size',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'char **',
        name = 'option_keys',
      ),
      Param(
        type = 'char **',
        name = 'option_values',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_finish': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'async_result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_at_scale': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_new_from_stream_at_scale_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gboolean',
        name = 'preserve_aspect_ratio',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const char *',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'GOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_pixbuf_save_to_stream_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GAsyncResult *',
        name = 'async_result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_add_alpha': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gboolean',
        name = 'substitute_color',
      ),
      Param(
        type = 'guchar',
        name = 'r',
      ),
      Param(
        type = 'guchar',
        name = 'g',
      ),
      Param(
        type = 'guchar',
        name = 'b',
      ),
    ],
  ),
  'gdk_pixbuf_copy_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'src_x',
      ),
      Param(
        type = 'int',
        name = 'src_y',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest_pixbuf',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
    ],
  ),
  'gdk_pixbuf_saturate_and_pixelate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'gfloat',
        name = 'saturation',
      ),
      Param(
        type = 'gboolean',
        name = 'pixelate',
      ),
    ],
  ),
  'gdk_pixbuf_apply_embedded_orientation': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'src',
      ),
    ],
  ),
  'gdk_pixbuf_get_option': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gdk_pixbuf_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
    ],
  ),
  'gdk_pixbuf_composite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
    ],
  ),
  'gdk_pixbuf_composite_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'dest',
      ),
      Param(
        type = 'int',
        name = 'dest_x',
      ),
      Param(
        type = 'int',
        name = 'dest_y',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'double',
        name = 'offset_x',
      ),
      Param(
        type = 'double',
        name = 'offset_y',
      ),
      Param(
        type = 'double',
        name = 'scale_x',
      ),
      Param(
        type = 'double',
        name = 'scale_y',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
      Param(
        type = 'int',
        name = 'check_x',
      ),
      Param(
        type = 'int',
        name = 'check_y',
      ),
      Param(
        type = 'int',
        name = 'check_size',
      ),
      Param(
        type = 'guint32',
        name = 'color1',
      ),
      Param(
        type = 'guint32',
        name = 'color2',
      ),
    ],
  ),
  'gdk_pixbuf_scale_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
    ],
  ),
  'gdk_pixbuf_composite_color_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'int',
        name = 'dest_width',
      ),
      Param(
        type = 'int',
        name = 'dest_height',
      ),
      Param(
        type = 'GdkInterpType',
        name = 'interp_type',
      ),
      Param(
        type = 'int',
        name = 'overall_alpha',
      ),
      Param(
        type = 'int',
        name = 'check_size',
      ),
      Param(
        type = 'guint32',
        name = 'color1',
      ),
      Param(
        type = 'guint32',
        name = 'color2',
      ),
    ],
  ),
  'gdk_pixbuf_rotate_simple': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'GdkPixbufRotation',
        name = 'angle',
      ),
    ],
  ),
  'gdk_pixbuf_flip': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixbuf *',
        name = 'src',
      ),
      Param(
        type = 'gboolean',
        name = 'horizontal',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_animation_new_from_file': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_animation_ref': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_is_static_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_static_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_animation_get_iter': Spec(
    return_type = 'GdkPixbufAnimationIter *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
      Param(
        type = 'const GTimeVal *',
        name = 'start_time',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_animation_iter_get_delay_time': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_on_currently_loading_frame': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
    ],
  ),
  'gdk_pixbuf_animation_iter_advance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufAnimationIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GTimeVal *',
        name = 'current_time',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_simple_anim_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_simple_anim_new': Spec(
    return_type = 'GdkPixbufSimpleAnim *',
    parameters = [
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gfloat',
        name = 'rate',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_add_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_set_loop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
      Param(
        type = 'gboolean',
        name = 'loop',
      ),
    ],
  ),
  'gdk_pixbuf_simple_anim_get_loop': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufSimpleAnim *',
        name = 'animation',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_get_formats': Spec(
    return_type = 'GSList *',
    parameters = [
    ],
  ),
  'gdk_pixbuf_format_get_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_description': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_mime_types': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_extensions': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_writable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_scalable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_is_disabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_set_disabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
      Param(
        type = 'gboolean',
        name = 'disabled',
      ),
    ],
  ),
  'gdk_pixbuf_format_get_license': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_get_file_info': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_format_copy': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'const GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_format_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufFormat *',
        name = 'format',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_loader_new': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
    ],
  ),
  'gdk_pixbuf_loader_new_with_type': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'image_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_new_with_mime_type': Spec(
    return_type = 'GdkPixbufLoader *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'mime_type',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_loader_write': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'const guchar *',
        name = 'buf',
      ),
      Param(
        type = 'gsize',
        name = 'count',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_animation': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_loader_close': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixbuf_loader_get_format': Spec(
    return_type = 'GdkPixbufFormat *',
    parameters = [
      Param(
        type = 'GdkPixbufLoader *',
        name = 'loader',
      ),
    ],
  ),
  'gdk_pixbuf_alpha_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_colorspace_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_interp_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_rotation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_pixbuf_get_from_window': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'src_x',
      ),
      Param(
        type = 'gint',
        name = 'src_y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gdk_pixbuf_get_from_surface': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
      Param(
        type = 'gint',
        name = 'src_x',
      ),
      Param(
        type = 'gint',
        name = 'src_y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'pango_cairo_font_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_cairo_font_map_new': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
    ],
  ),
  'pango_cairo_font_map_new_for_font_type': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'cairo_font_type_t',
        name = 'fonttype',
      ),
    ],
  ),
  'pango_cairo_font_map_get_default': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
    ],
  ),
  'pango_cairo_font_map_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCairoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_cairo_font_map_get_font_type': Spec(
    return_type = 'cairo_font_type_t',
    parameters = [
      Param(
        type = 'PangoCairoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_cairo_font_map_set_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoCairoFontMap *',
        name = 'fontmap',
      ),
      Param(
        type = 'double',
        name = 'dpi',
      ),
    ],
  ),
  'pango_cairo_font_map_get_resolution': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'PangoCairoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_cairo_font_map_create_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'PangoCairoFontMap *',
        name = 'fontmap',
      ),
    ],
  ),
  'pango_cairo_font_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'pango_cairo_font_get_scaled_font': Spec(
    return_type = 'cairo_scaled_font_t *',
    parameters = [
      Param(
        type = 'PangoCairoFont *',
        name = 'font',
      ),
    ],
  ),
  'pango_cairo_update_context': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_cairo_context_set_font_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'const cairo_font_options_t *',
        name = 'options',
      ),
    ],
  ),
  'pango_cairo_context_get_font_options': Spec(
    return_type = 'const cairo_font_options_t *',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_cairo_context_set_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'double',
        name = 'dpi',
      ),
    ],
  ),
  'pango_cairo_context_get_resolution': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
    ],
  ),
  'pango_cairo_context_set_shape_renderer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'PangoCairoShapeRendererFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'dnotify',
      ),
    ],
  ),
  'pango_cairo_context_get_shape_renderer': Spec(
    return_type = 'PangoCairoShapeRendererFunc',
    parameters = [
      Param(
        type = 'PangoContext *',
        name = 'context',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  'pango_cairo_create_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'pango_cairo_create_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'pango_cairo_update_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_cairo_show_glyph_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_cairo_show_glyph_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const char *',
        name = 'text',
      ),
      Param(
        type = 'PangoGlyphItem *',
        name = 'glyph_item',
      ),
    ],
  ),
  'pango_cairo_show_layout_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_cairo_show_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_cairo_show_error_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'pango_cairo_glyph_string_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoFont *',
        name = 'font',
      ),
      Param(
        type = 'PangoGlyphString *',
        name = 'glyphs',
      ),
    ],
  ),
  'pango_cairo_layout_line_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
    ],
  ),
  'pango_cairo_layout_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'pango_cairo_error_underline_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'x',
      ),
      Param(
        type = 'double',
        name = 'y',
      ),
      Param(
        type = 'double',
        name = 'width',
      ),
      Param(
        type = 'double',
        name = 'height',
      ),
    ],
  ),
  'gdk_cairo_create': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_cairo_get_clip_rectangle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gdk_cairo_set_source_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gdk_cairo_set_source_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gdouble',
        name = 'pixbuf_x',
      ),
      Param(
        type = 'gdouble',
        name = 'pixbuf_y',
      ),
    ],
  ),
  'gdk_cairo_set_source_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
    ],
  ),
  'gdk_cairo_rectangle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'rectangle',
      ),
    ],
  ),
  'gdk_cairo_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gdk_cairo_region_create_from_surface': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'gdk_cairo_set_source_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_cursor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_cursor_new_for_display': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkCursorType',
        name = 'cursor_type',
      ),
    ],
  ),
  'gdk_cursor_new': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkCursorType',
        name = 'cursor_type',
      ),
    ],
  ),
  'gdk_cursor_new_from_pixbuf': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_cursor_new_from_name': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gdk_cursor_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_cursor_ref': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_cursor_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_cursor_get_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_cursor_get_cursor_type': Spec(
    return_type = 'GdkCursorType',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_display_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_display_manager_get': Spec(
    return_type = 'GdkDisplayManager *',
    parameters = [
    ],
  ),
  'gdk_display_manager_get_default_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkDisplayManager *',
        name = 'manager',
      ),
    ],
  ),
  'gdk_display_manager_set_default_display': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplayManager *',
        name = 'manager',
      ),
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_display_manager_list_displays': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GdkDisplayManager *',
        name = 'manager',
      ),
    ],
  ),
  'gdk_display_manager_open_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkDisplayManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gdk_cursor_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_input_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_input_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_axis_use_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_device_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_drag_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_drag_protocol_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_filter_return_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_event_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_visibility_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_scroll_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_notify_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_crossing_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_property_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_setting_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_owner_change_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_prop_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_byte_order_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_modifier_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_modifier_intent_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_status_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_grab_status_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_grab_ownership_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_event_mask_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_visual_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_window_class_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_attributes_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_hints_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_type_hint_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_wm_decoration_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_wm_function_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_gravity_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_edge_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_keymap_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_keymap_get_default': Spec(
    return_type = 'GdkKeymap *',
    parameters = [
    ],
  ),
  'gdk_keymap_get_for_display': Spec(
    return_type = 'GdkKeymap *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_keymap_lookup_key': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'const GdkKeymapKey *',
        name = 'key',
      ),
    ],
  ),
  'gdk_keymap_translate_keyboard_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'guint',
        name = 'hardware_keycode',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'state',
      ),
      Param(
        type = 'gint',
        name = 'group',
      ),
      Param(
        type = 'guint *',
        name = 'keyval',
      ),
      Param(
        type = 'gint *',
        name = 'effective_group',
      ),
      Param(
        type = 'gint *',
        name = 'level',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'consumed_modifiers',
      ),
    ],
  ),
  'gdk_keymap_get_entries_for_keyval': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkKeymapKey **',
        name = 'keys',
      ),
      Param(
        type = 'gint *',
        name = 'n_keys',
      ),
    ],
  ),
  'gdk_keymap_get_entries_for_keycode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'guint',
        name = 'hardware_keycode',
      ),
      Param(
        type = 'GdkKeymapKey **',
        name = 'keys',
      ),
      Param(
        type = 'guint **',
        name = 'keyvals',
      ),
      Param(
        type = 'gint *',
        name = 'n_entries',
      ),
    ],
  ),
  'gdk_keymap_get_direction': Spec(
    return_type = 'PangoDirection',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
    ],
  ),
  'gdk_keymap_have_bidi_layouts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
    ],
  ),
  'gdk_keymap_get_caps_lock_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
    ],
  ),
  'gdk_keymap_get_num_lock_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
    ],
  ),
  'gdk_keymap_get_modifier_state': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
    ],
  ),
  'gdk_keymap_add_virtual_modifiers': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'state',
      ),
    ],
  ),
  'gdk_keymap_map_virtual_modifiers': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'state',
      ),
    ],
  ),
  'gdk_keymap_get_modifier_mask': Spec(
    return_type = 'GdkModifierType',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'GdkModifierIntent',
        name = 'intent',
      ),
    ],
  ),
  'gdk_keyval_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_keyval_from_name': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'keyval_name',
      ),
    ],
  ),
  'gdk_keyval_convert_case': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'symbol',
      ),
      Param(
        type = 'guint *',
        name = 'lower',
      ),
      Param(
        type = 'guint *',
        name = 'upper',
      ),
    ],
  ),
  'gdk_keyval_to_upper': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_keyval_to_lower': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_keyval_is_upper': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_keyval_is_lower': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_keyval_to_unicode': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
    ],
  ),
  'gdk_unicode_to_keyval': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint32',
        name = 'wc',
      ),
    ],
  ),
  'gdk_parse_args': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
    ],
  ),
  'gdk_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
    ],
  ),
  'gdk_init_check': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
    ],
  ),
  'gdk_add_option_entries_libgtk_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GOptionGroup *',
        name = 'group',
      ),
    ],
  ),
  'gdk_pre_parse_libgtk_only': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_get_program_class': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'gdk_set_program_class': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'program_class',
      ),
    ],
  ),
  'gdk_notify_startup_complete': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_notify_startup_complete_with_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'startup_id',
      ),
    ],
  ),
  'gdk_error_trap_push': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_error_trap_pop': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_error_trap_pop_ignored': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_get_display_arg_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'gdk_get_display': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'gdk_pointer_grab': Spec(
    return_type = 'GdkGrabStatus',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'owner_events',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'event_mask',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'confine_to',
      ),
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_keyboard_grab': Spec(
    return_type = 'GdkGrabStatus',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'owner_events',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_pointer_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_keyboard_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_pointer_is_grabbed': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gdk_screen_width': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_screen_height': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_screen_width_mm': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_screen_height_mm': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_set_double_click_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'msec',
      ),
    ],
  ),
  'gdk_beep': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_flush': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_disable_multidevice': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_pango_context_get_for_screen': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_pango_context_get': Spec(
    return_type = 'PangoContext *',
    parameters = [
    ],
  ),
  'gdk_pango_layout_line_get_clip_region': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'PangoLayoutLine *',
        name = 'line',
      ),
      Param(
        type = 'gint',
        name = 'x_origin',
      ),
      Param(
        type = 'gint',
        name = 'y_origin',
      ),
      Param(
        type = 'const gint *',
        name = 'index_ranges',
      ),
      Param(
        type = 'gint',
        name = 'n_ranges',
      ),
    ],
  ),
  'gdk_pango_layout_get_clip_region': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'gint',
        name = 'x_origin',
      ),
      Param(
        type = 'gint',
        name = 'y_origin',
      ),
      Param(
        type = 'const gint *',
        name = 'index_ranges',
      ),
      Param(
        type = 'gint',
        name = 'n_ranges',
      ),
    ],
  ),
  'gdk_atom_intern': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'atom_name',
      ),
      Param(
        type = 'gboolean',
        name = 'only_if_exists',
      ),
    ],
  ),
  'gdk_atom_intern_static_string': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'atom_name',
      ),
    ],
  ),
  'gdk_atom_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkAtom',
        name = 'atom',
      ),
    ],
  ),
  'gdk_property_get': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
      Param(
        type = 'GdkAtom',
        name = 'type',
      ),
      Param(
        type = 'gulong',
        name = 'offset',
      ),
      Param(
        type = 'gulong',
        name = 'length',
      ),
      Param(
        type = 'gint',
        name = 'pdelete',
      ),
      Param(
        type = 'GdkAtom *',
        name = 'actual_property_type',
      ),
      Param(
        type = 'gint *',
        name = 'actual_format',
      ),
      Param(
        type = 'gint *',
        name = 'actual_length',
      ),
      Param(
        type = 'guchar **',
        name = 'data',
      ),
    ],
  ),
  'gdk_property_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
      Param(
        type = 'GdkAtom',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'format',
      ),
      Param(
        type = 'GdkPropMode',
        name = 'mode',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'nelements',
      ),
    ],
  ),
  'gdk_property_delete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
    ],
  ),
  'gdk_text_property_to_utf8_list_for_display': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'encoding',
      ),
      Param(
        type = 'gint',
        name = 'format',
      ),
      Param(
        type = 'const guchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gchar ***',
        name = 'list',
      ),
    ],
  ),
  'gdk_utf8_to_string_target': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gdk_rectangle_intersect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GdkRectangle *',
        name = 'src1',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'src2',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'dest',
      ),
    ],
  ),
  'gdk_rectangle_union': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkRectangle *',
        name = 'src1',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'src2',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'dest',
      ),
    ],
  ),
  'gdk_rectangle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_selection_owner_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'owner',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
      Param(
        type = 'gboolean',
        name = 'send_event',
      ),
    ],
  ),
  'gdk_selection_owner_get': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gdk_selection_owner_set_for_display': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'owner',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
      Param(
        type = 'gboolean',
        name = 'send_event',
      ),
    ],
  ),
  'gdk_selection_owner_get_for_display': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gdk_selection_convert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'requestor',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_selection_property_get': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'requestor',
      ),
      Param(
        type = 'guchar **',
        name = 'data',
      ),
      Param(
        type = 'GdkAtom *',
        name = 'prop_type',
      ),
      Param(
        type = 'gint *',
        name = 'prop_format',
      ),
    ],
  ),
  'gdk_selection_send_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'requestor',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_selection_send_notify_for_display': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'requestor',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gdk_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_window_new': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GdkWindowAttr *',
        name = 'attributes',
      ),
      Param(
        type = 'gint',
        name = 'attributes_mask',
      ),
    ],
  ),
  'gdk_window_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_window_type': Spec(
    return_type = 'GdkWindowType',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_is_destroyed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_visual': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_at_pointer': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'gint *',
        name = 'win_x',
      ),
      Param(
        type = 'gint *',
        name = 'win_y',
      ),
    ],
  ),
  'gdk_window_show': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_hide': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_withdraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_show_unraised': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gdk_window_move_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gdk_window_reparent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'new_parent',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_raise': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_lower': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_restack': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'sibling',
      ),
      Param(
        type = 'gboolean',
        name = 'above',
      ),
    ],
  ),
  'gdk_window_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_window_set_user_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_window_set_override_redirect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'override_redirect',
      ),
    ],
  ),
  'gdk_window_get_accept_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_accept_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'accept_focus',
      ),
    ],
  ),
  'gdk_window_get_focus_on_map': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_focus_on_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'focus_on_map',
      ),
    ],
  ),
  'gdk_window_add_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkFilterFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gdk_window_remove_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkFilterFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gdk_window_scroll': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'dx',
      ),
      Param(
        type = 'gint',
        name = 'dy',
      ),
    ],
  ),
  'gdk_window_move_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'gint',
        name = 'dx',
      ),
      Param(
        type = 'gint',
        name = 'dy',
      ),
    ],
  ),
  'gdk_window_ensure_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_shape_combine_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'shape_region',
      ),
      Param(
        type = 'gint',
        name = 'offset_x',
      ),
      Param(
        type = 'gint',
        name = 'offset_y',
      ),
    ],
  ),
  'gdk_window_set_child_shapes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_composited': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_composited': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'composited',
      ),
    ],
  ),
  'gdk_window_merge_child_shapes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_input_shape_combine_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'shape_region',
      ),
      Param(
        type = 'gint',
        name = 'offset_x',
      ),
      Param(
        type = 'gint',
        name = 'offset_y',
      ),
    ],
  ),
  'gdk_window_set_child_input_shapes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_merge_child_input_shapes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_is_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_is_viewable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_is_input_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_is_shaped': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_state': Spec(
    return_type = 'GdkWindowState',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_static_gravities': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'use_static',
      ),
    ],
  ),
  'gdk_window_has_native': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_type_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindowTypeHint',
        name = 'hint',
      ),
    ],
  ),
  'gdk_window_get_type_hint': Spec(
    return_type = 'GdkWindowTypeHint',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_modal_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_modal_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'modal',
      ),
    ],
  ),
  'gdk_window_set_skip_taskbar_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'skips_taskbar',
      ),
    ],
  ),
  'gdk_window_set_skip_pager_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'skips_pager',
      ),
    ],
  ),
  'gdk_window_set_urgency_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'urgent',
      ),
    ],
  ),
  'gdk_window_set_geometry_hints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const GdkGeometry *',
        name = 'geometry',
      ),
      Param(
        type = 'GdkWindowHints',
        name = 'geom_mask',
      ),
    ],
  ),
  'gdk_window_get_clip_region': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_visible_region': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_begin_paint_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'rectangle',
      ),
    ],
  ),
  'gdk_window_begin_paint_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gdk_window_end_paint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_flush': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gdk_window_set_role': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'role',
      ),
    ],
  ),
  'gdk_window_set_startup_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'startup_id',
      ),
    ],
  ),
  'gdk_window_set_transient_for': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gdk_window_set_background': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gdk_window_set_background_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gdk_window_set_background_pattern': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'cairo_pattern_t *',
        name = 'pattern',
      ),
    ],
  ),
  'gdk_window_get_background_pattern': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_window_get_cursor': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_device_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_window_get_device_cursor': Spec(
    return_type = 'GdkCursor *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_window_get_user_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  'gdk_window_get_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gdk_window_get_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_get_origin': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_get_root_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'root_x',
      ),
      Param(
        type = 'gint *',
        name = 'root_y',
      ),
    ],
  ),
  'gdk_window_coords_to_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble *',
        name = 'parent_x',
      ),
      Param(
        type = 'gdouble *',
        name = 'parent_y',
      ),
    ],
  ),
  'gdk_window_coords_from_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble',
        name = 'parent_x',
      ),
      Param(
        type = 'gdouble',
        name = 'parent_y',
      ),
      Param(
        type = 'gdouble *',
        name = 'x',
      ),
      Param(
        type = 'gdouble *',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_get_root_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gdk_window_get_frame_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gdk_window_get_pointer': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'mask',
      ),
    ],
  ),
  'gdk_window_get_device_position': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'mask',
      ),
    ],
  ),
  'gdk_window_get_parent': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_toplevel': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_effective_parent': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_effective_toplevel': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_children': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_peek_children': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_events': Spec(
    return_type = 'GdkEventMask',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'event_mask',
      ),
    ],
  ),
  'gdk_window_set_device_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'event_mask',
      ),
    ],
  ),
  'gdk_window_get_device_events': Spec(
    return_type = 'GdkEventMask',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_window_set_source_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkInputSource',
        name = 'source',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'event_mask',
      ),
    ],
  ),
  'gdk_window_get_source_events': Spec(
    return_type = 'GdkEventMask',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkInputSource',
        name = 'source',
      ),
    ],
  ),
  'gdk_window_set_icon_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GList *',
        name = 'pixbufs',
      ),
    ],
  ),
  'gdk_window_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gdk_window_set_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'leader',
      ),
    ],
  ),
  'gdk_window_get_group': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_decorations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWMDecoration',
        name = 'decorations',
      ),
    ],
  ),
  'gdk_window_get_decorations': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWMDecoration *',
        name = 'decorations',
      ),
    ],
  ),
  'gdk_window_set_functions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWMFunction',
        name = 'functions',
      ),
    ],
  ),
  'gdk_window_create_similar_surface': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'cairo_content_t',
        name = 'content',
      ),
      Param(
        type = 'int',
        name = 'width',
      ),
      Param(
        type = 'int',
        name = 'height',
      ),
    ],
  ),
  'gdk_window_beep': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_iconify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_deiconify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_stick': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_unstick': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_maximize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_unmaximize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_fullscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_unfullscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_keep_above': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gdk_window_set_keep_below': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gdk_window_set_opacity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble',
        name = 'opacity',
      ),
    ],
  ),
  'gdk_window_register_dnd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_get_drag_protocol': Spec(
    return_type = 'GdkDragProtocol',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow **',
        name = 'target',
      ),
    ],
  ),
  'gdk_window_begin_resize_drag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindowEdge',
        name = 'edge',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_window_begin_resize_drag_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindowEdge',
        name = 'edge',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_window_begin_move_drag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_window_begin_move_drag_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_window_invalidate_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'rect',
      ),
      Param(
        type = 'gboolean',
        name = 'invalidate_children',
      ),
    ],
  ),
  'gdk_window_invalidate_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'gboolean',
        name = 'invalidate_children',
      ),
    ],
  ),
  'gdk_window_invalidate_maybe_recurse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
      Param(
        type = 'GdkWindowChildFunc',
        name = 'child_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gdk_window_get_update_area': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_freeze_updates': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_thaw_updates': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_freeze_toplevel_updates_libgtk_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_thaw_toplevel_updates_libgtk_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_process_all_updates': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_window_process_updates': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'update_children',
      ),
    ],
  ),
  'gdk_window_set_debug_updates': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gdk_window_constrain_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkGeometry *',
        name = 'geometry',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'new_width',
      ),
      Param(
        type = 'gint *',
        name = 'new_height',
      ),
    ],
  ),
  'gdk_window_enable_synchronized_configure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_configure_finished': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_get_default_root_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
    ],
  ),
  'gdk_offscreen_window_get_surface': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_offscreen_window_set_embedder': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'embedder',
      ),
    ],
  ),
  'gdk_offscreen_window_get_embedder': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_geometry_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_window_set_support_multidevice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'support_multidevice',
      ),
    ],
  ),
  'gdk_window_get_support_multidevice': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_test_render_sync': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_test_simulate_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GdkEventType',
        name = 'key_pressrelease',
      ),
    ],
  ),
  'gdk_test_simulate_button': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'guint',
        name = 'button',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GdkEventType',
        name = 'button_pressrelease',
      ),
    ],
  ),
  'gdk_threads_init': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_threads_enter': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_threads_leave': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_threads_set_lock_functions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GCallback',
        name = 'enter_fn',
      ),
      Param(
        type = 'GCallback',
        name = 'leave_fn',
      ),
    ],
  ),
  'gdk_threads_add_idle_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gdk_threads_add_idle': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gdk_threads_add_timeout_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gdk_threads_add_timeout': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gdk_threads_add_timeout_seconds_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'gint',
        name = 'priority',
      ),
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gdk_threads_add_timeout_seconds': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'guint',
        name = 'interval',
      ),
      Param(
        type = 'GSourceFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gdk_visual_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_visual_get_best_depth': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_visual_get_best_type': Spec(
    return_type = 'GdkVisualType',
    parameters = [
    ],
  ),
  'gdk_visual_get_system': Spec(
    return_type = 'GdkVisual *',
    parameters = [
    ],
  ),
  'gdk_visual_get_best': Spec(
    return_type = 'GdkVisual *',
    parameters = [
    ],
  ),
  'gdk_visual_get_best_with_depth': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'gint',
        name = 'depth',
      ),
    ],
  ),
  'gdk_visual_get_best_with_type': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GdkVisualType',
        name = 'visual_type',
      ),
    ],
  ),
  'gdk_visual_get_best_with_both': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'gint',
        name = 'depth',
      ),
      Param(
        type = 'GdkVisualType',
        name = 'visual_type',
      ),
    ],
  ),
  'gdk_query_depths': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint **',
        name = 'depths',
      ),
      Param(
        type = 'gint *',
        name = 'count',
      ),
    ],
  ),
  'gdk_query_visual_types': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkVisualType **',
        name = 'visual_types',
      ),
      Param(
        type = 'gint *',
        name = 'count',
      ),
    ],
  ),
  'gdk_list_visuals': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'gdk_visual_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_visual_type': Spec(
    return_type = 'GdkVisualType',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_depth': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_byte_order': Spec(
    return_type = 'GdkByteOrder',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_colormap_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_bits_per_rgb': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_visual_get_red_pixel_details': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
      Param(
        type = 'guint32 *',
        name = 'mask',
      ),
      Param(
        type = 'gint *',
        name = 'shift',
      ),
      Param(
        type = 'gint *',
        name = 'precision',
      ),
    ],
  ),
  'gdk_visual_get_green_pixel_details': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
      Param(
        type = 'guint32 *',
        name = 'mask',
      ),
      Param(
        type = 'gint *',
        name = 'shift',
      ),
      Param(
        type = 'gint *',
        name = 'precision',
      ),
    ],
  ),
  'gdk_visual_get_blue_pixel_details': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
      Param(
        type = 'guint32 *',
        name = 'mask',
      ),
      Param(
        type = 'gint *',
        name = 'shift',
      ),
      Param(
        type = 'gint *',
        name = 'precision',
      ),
    ],
  ),
  'gtk_accel_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_accel_group_new': Spec(
    return_type = 'GtkAccelGroup *',
    parameters = [
    ],
  ),
  'gtk_accel_group_get_is_locked': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_accel_group_get_modifier_mask': Spec(
    return_type = 'GdkModifierType',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_accel_group_lock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_accel_group_unlock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_accel_group_connect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
      Param(
        type = 'GtkAccelFlags',
        name = 'accel_flags',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'gtk_accel_group_connect_by_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'gtk_accel_group_disconnect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'gtk_accel_group_disconnect_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
    ],
  ),
  'gtk_accel_group_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GQuark',
        name = 'accel_quark',
      ),
      Param(
        type = 'GObject *',
        name = 'acceleratable',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
    ],
  ),
  '_gtk_accel_group_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  '_gtk_accel_group_detach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'gtk_accel_groups_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
    ],
  ),
  'gtk_accel_groups_from_object': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'gtk_accel_group_find': Spec(
    return_type = 'GtkAccelKey *',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GtkAccelGroupFindFunc',
        name = 'find_func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_accel_group_from_accel_closure': Spec(
    return_type = 'GtkAccelGroup *',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
    ],
  ),
  'gtk_accelerator_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_accelerator_parse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accelerator',
      ),
      Param(
        type = 'guint *',
        name = 'accelerator_key',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_parse_with_keycode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accelerator',
      ),
      Param(
        type = 'guint *',
        name = 'accelerator_key',
      ),
      Param(
        type = 'guint **',
        name = 'accelerator_codes',
      ),
      Param(
        type = 'GdkModifierType *',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_name_with_keycode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'guint',
        name = 'keycode',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_get_label': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_get_label_with_keycode': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'guint',
        name = 'keycode',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accelerator_set_default_mod_mask': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkModifierType',
        name = 'default_mod_mask',
      ),
    ],
  ),
  'gtk_accelerator_get_default_mod_mask': Spec(
    return_type = 'GdkModifierType',
    parameters = [
    ],
  ),
  'gtk_accel_group_query': Spec(
    return_type = 'GtkAccelGroupEntry *',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
      Param(
        type = 'guint *',
        name = 'n_entries',
      ),
    ],
  ),
  '_gtk_accel_group_reconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'GQuark',
        name = 'accel_path_quark',
      ),
    ],
  ),
  '_gtk_accel_group_get_accelerables': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_border_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_border_new': Spec(
    return_type = 'GtkBorder *',
    parameters = [
    ],
  ),
  'gtk_border_copy': Spec(
    return_type = 'GtkBorder *',
    parameters = [
      Param(
        type = 'const GtkBorder *',
        name = 'border_',
      ),
    ],
  ),
  'gtk_border_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBorder *',
        name = 'border_',
      ),
    ],
  ),
  'atk_state_type_register': Spec(
    return_type = 'AtkStateType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_state_type_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_type_for_name': Spec(
    return_type = 'AtkStateType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_role_register': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_implementor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_implementor_ref_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkImplementor *',
        name = 'implementor',
      ),
    ],
  ),
  'atk_object_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_parent': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_n_accessible_children': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_ref_accessible_child': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_object_ref_relation_set': Spec(
    return_type = 'AtkRelationSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_role': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_layer': Spec(
    return_type = 'AtkLayer',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_mdi_zorder': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_ref_state_set': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_get_index_in_parent': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_object_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_set_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_object_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkObject *',
        name = 'parent',
      ),
    ],
  ),
  'atk_object_set_role': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_object_connect_property_change_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkPropertyChangeHandler *',
        name = 'handler',
      ),
    ],
  ),
  'atk_object_remove_property_change_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'atk_object_notify_state_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'AtkState',
        name = 'state',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'atk_object_initialize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'atk_role_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_role_for_name': Spec(
    return_type = 'AtkRole',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_object_add_relationship': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_object_remove_relationship': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_role_get_localized_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'atk_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_action_do_action': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_n_actions': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
    ],
  ),
  'atk_action_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_get_keybinding': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_action_set_description': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
      Param(
        type = 'const gchar *',
        name = 'desc',
      ),
    ],
  ),
  'atk_action_get_localized_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_util_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_add_focus_tracker': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkEventListener',
        name = 'focus_tracker',
      ),
    ],
  ),
  'atk_remove_focus_tracker': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'tracker_id',
      ),
    ],
  ),
  'atk_focus_tracker_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEventListenerInit',
        name = 'init',
      ),
    ],
  ),
  'atk_focus_tracker_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObject *',
        name = 'object',
      ),
    ],
  ),
  'atk_add_global_event_listener': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GSignalEmissionHook',
        name = 'listener',
      ),
      Param(
        type = 'const gchar *',
        name = 'event_type',
      ),
    ],
  ),
  'atk_remove_global_event_listener': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'listener_id',
      ),
    ],
  ),
  'atk_add_key_event_listener': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkKeySnoopFunc',
        name = 'listener',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'atk_remove_key_event_listener': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'listener_id',
      ),
    ],
  ),
  'atk_get_root': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_get_focus_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_get_toolkit_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_get_toolkit_version': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_get_version': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'atk_rectangle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_component_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_component_add_focus_handler': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'AtkFocusHandler',
        name = 'handler',
      ),
    ],
  ),
  'atk_component_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_ref_accessible_at_point': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'atk_component_get_layer': Spec(
    return_type = 'AtkLayer',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_get_mdi_zorder': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_grab_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_component_remove_focus_handler': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'guint',
        name = 'handler_id',
      ),
    ],
  ),
  'atk_component_set_extents': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_set_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_component_set_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'atk_component_get_alpha': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'AtkComponent *',
        name = 'component',
      ),
    ],
  ),
  'atk_document_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_document_get_document_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_document': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_locale': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
    ],
  ),
  'atk_document_get_attribute_value': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_name',
      ),
    ],
  ),
  'atk_document_set_attribute_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkDocument *',
        name = 'document',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute_value',
      ),
    ],
  ),
  'atk_text_attribute_register': Spec(
    return_type = 'AtkTextAttribute',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_text_range_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_text_get_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_character_at_offset': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
    ],
  ),
  'atk_text_get_text_after_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_text_at_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_text_before_offset': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_caret_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_character_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coords',
      ),
    ],
  ),
  'atk_text_get_run_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_get_default_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_character_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_offset_at_point': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coords',
      ),
    ],
  ),
  'atk_text_get_n_selections': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
    ],
  ),
  'atk_text_get_selection': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
      Param(
        type = 'gint *',
        name = 'start_offset',
      ),
      Param(
        type = 'gint *',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_add_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_remove_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
    ],
  ),
  'atk_text_set_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'selection_num',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_text_set_caret_offset': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
    ],
  ),
  'atk_text_get_range_extents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
      Param(
        type = 'AtkTextRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'atk_text_get_bounded_ranges': Spec(
    return_type = 'AtkTextRange **',
    parameters = [
      Param(
        type = 'AtkText *',
        name = 'text',
      ),
      Param(
        type = 'AtkTextRectangle *',
        name = 'rect',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
      Param(
        type = 'AtkTextClipType',
        name = 'x_clip_type',
      ),
      Param(
        type = 'AtkTextClipType',
        name = 'y_clip_type',
      ),
    ],
  ),
  'atk_text_free_ranges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTextRange **',
        name = 'ranges',
      ),
    ],
  ),
  'atk_attribute_set_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkAttributeSet *',
        name = 'attrib_set',
      ),
    ],
  ),
  'atk_text_attribute_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTextAttribute',
        name = 'attr',
      ),
    ],
  ),
  'atk_text_attribute_for_name': Spec(
    return_type = 'AtkTextAttribute',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_text_attribute_get_value': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTextAttribute',
        name = 'attr',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_editable_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_editable_text_set_run_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'AtkAttributeSet *',
        name = 'attrib_set',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'atk_editable_text_set_text_contents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'atk_editable_text_insert_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gint *',
        name = 'position',
      ),
    ],
  ),
  'atk_editable_text_copy_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_cut_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_delete_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'atk_editable_text_paste_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkEditableText *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'atk_gobject_accessible_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_gobject_accessible_for_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_gobject_accessible_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'AtkGObjectAccessible *',
        name = 'obj',
      ),
    ],
  ),
  'atk_hyperlink_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hyperlink_get_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_hyperlink_get_object': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_hyperlink_get_end_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_get_start_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_inline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_get_n_anchors': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_is_selected_link': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkHyperlink *',
        name = 'link_',
      ),
    ],
  ),
  'atk_hyperlink_impl_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hyperlink_impl_get_hyperlink': Spec(
    return_type = 'AtkHyperlink *',
    parameters = [
      Param(
        type = 'AtkHyperlinkImpl *',
        name = 'obj',
      ),
    ],
  ),
  'atk_hypertext_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_hypertext_get_link': Spec(
    return_type = 'AtkHyperlink *',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
      Param(
        type = 'gint',
        name = 'link_index',
      ),
    ],
  ),
  'atk_hypertext_get_n_links': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
    ],
  ),
  'atk_hypertext_get_link_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkHypertext *',
        name = 'hypertext',
      ),
      Param(
        type = 'gint',
        name = 'char_index',
      ),
    ],
  ),
  'atk_image_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_image_get_image_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
    ],
  ),
  'atk_image_get_image_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'atk_image_set_image_description': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_image_get_image_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'AtkCoordType',
        name = 'coord_type',
      ),
    ],
  ),
  'atk_image_get_image_locale': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkImage *',
        name = 'image',
      ),
    ],
  ),
  'atk_no_op_object_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_no_op_object_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_object_factory_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_object_factory_create_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
      Param(
        type = 'GObject *',
        name = 'obj',
      ),
    ],
  ),
  'atk_object_factory_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
    ],
  ),
  'atk_object_factory_get_accessible_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'AtkObjectFactory *',
        name = 'factory',
      ),
    ],
  ),
  'atk_no_op_object_factory_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_no_op_object_factory_new': Spec(
    return_type = 'AtkObjectFactory *',
    parameters = [
    ],
  ),
  'atk_plug_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_plug_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_plug_get_id': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'AtkPlug *',
        name = 'plug',
      ),
    ],
  ),
  'atk_registry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_registry_set_factory_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'GType',
        name = 'factory_type',
      ),
    ],
  ),
  'atk_registry_get_factory_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'atk_registry_get_factory': Spec(
    return_type = 'AtkObjectFactory *',
    parameters = [
      Param(
        type = 'AtkRegistry *',
        name = 'registry',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'atk_get_default_registry': Spec(
    return_type = 'AtkRegistry *',
    parameters = [
    ],
  ),
  'atk_relation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_relation_type_register': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_relation_type_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkRelationType',
        name = 'type',
      ),
    ],
  ),
  'atk_relation_type_for_name': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'atk_relation_new': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkObject **',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_get_relation_type': Spec(
    return_type = 'AtkRelationType',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_get_target': Spec(
    return_type = 'GPtrArray *',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_add_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_relation_remove_target': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_relation_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_relation_set_new': Spec(
    return_type = 'AtkRelationSet *',
    parameters = [
    ],
  ),
  'atk_relation_set_contains': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_set_contains_target': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'targe',
      ),
    ],
  ),
  'atk_relation_set_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_set_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelation *',
        name = 'relation',
      ),
    ],
  ),
  'atk_relation_set_get_n_relations': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_relation_set_get_relation': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_relation_set_get_relation_by_type': Spec(
    return_type = 'AtkRelation *',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
    ],
  ),
  'atk_relation_set_add_relation_by_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkRelationSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkRelationType',
        name = 'relationship',
      ),
      Param(
        type = 'AtkObject *',
        name = 'target',
      ),
    ],
  ),
  'atk_selection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_selection_add_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_clear_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_selection_ref_selection': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_get_selection_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_selection_is_child_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_remove_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_selection_select_all_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSelection *',
        name = 'selection',
      ),
    ],
  ),
  'atk_socket_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_socket_new': Spec(
    return_type = 'AtkObject *',
    parameters = [
    ],
  ),
  'atk_socket_embed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkSocket *',
        name = 'obj',
      ),
      Param(
        type = 'gchar *',
        name = 'plug_id',
      ),
    ],
  ),
  'atk_socket_is_occupied': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkSocket *',
        name = 'obj',
      ),
    ],
  ),
  'atk_state_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_state_set_new': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
    ],
  ),
  'atk_state_set_is_empty': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_state_set_add_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_add_states': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType *',
        name = 'types',
      ),
      Param(
        type = 'gint',
        name = 'n_types',
      ),
    ],
  ),
  'atk_state_set_clear_states': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
    ],
  ),
  'atk_state_set_contains_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_contains_states': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType *',
        name = 'types',
      ),
      Param(
        type = 'gint',
        name = 'n_types',
      ),
    ],
  ),
  'atk_state_set_remove_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateType',
        name = 'type',
      ),
    ],
  ),
  'atk_state_set_and_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_state_set_or_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_state_set_xor_sets': Spec(
    return_type = 'AtkStateSet *',
    parameters = [
      Param(
        type = 'AtkStateSet *',
        name = 'set',
      ),
      Param(
        type = 'AtkStateSet *',
        name = 'compare_set',
      ),
    ],
  ),
  'atk_streamable_content_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_streamable_content_get_n_mime_types': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
    ],
  ),
  'atk_streamable_content_get_mime_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'gint',
        name = 'i',
      ),
    ],
  ),
  'atk_streamable_content_get_stream': Spec(
    return_type = 'GIOChannel *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'atk_streamable_content_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkStreamableContent *',
        name = 'streamable',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'atk_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_table_ref_at': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_index_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_column_at_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_table_get_row_at_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'atk_table_get_n_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_n_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_column_extent_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_row_extent_at': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_caption': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_get_column_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_column_header': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_get_row_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_get_row_header': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_get_summary': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
    ],
  ),
  'atk_table_set_caption': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'AtkObject *',
        name = 'caption',
      ),
    ],
  ),
  'atk_table_set_column_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_table_set_column_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'AtkObject *',
        name = 'header',
      ),
    ],
  ),
  'atk_table_set_row_description': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'const gchar *',
        name = 'description',
      ),
    ],
  ),
  'atk_table_set_row_header': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'AtkObject *',
        name = 'header',
      ),
    ],
  ),
  'atk_table_set_summary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'AtkObject *',
        name = 'accessible',
      ),
    ],
  ),
  'atk_table_get_selected_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint **',
        name = 'selected',
      ),
    ],
  ),
  'atk_table_get_selected_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint **',
        name = 'selected',
      ),
    ],
  ),
  'atk_table_is_column_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_is_row_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_add_row_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_remove_row_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'row',
      ),
    ],
  ),
  'atk_table_add_column_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_table_remove_column_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'atk_misc_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_misc_threads_enter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkMisc *',
        name = 'misc',
      ),
    ],
  ),
  'atk_misc_threads_leave': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkMisc *',
        name = 'misc',
      ),
    ],
  ),
  'atk_misc_get_instance': Spec(
    return_type = 'const AtkMisc *',
    parameters = [
    ],
  ),
  'atk_value_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'atk_value_get_current_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_maximum_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_minimum_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_set_current_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_value_get_minimum_increment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'AtkValue *',
        name = 'obj',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'atk_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'gtk_widget_destroy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_destroyed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget **',
        name = 'widget_pointer',
      ),
    ],
  ),
  'gtk_widget_unparent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_show': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_hide': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_show_now': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_show_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_no_show_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'no_show_all',
      ),
    ],
  ),
  'gtk_widget_get_no_show_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_unmap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_realize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_unrealize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_draw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'gtk_widget_queue_draw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_queue_draw_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_widget_queue_draw_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gtk_widget_queue_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_queue_resize_no_redraw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_size_request': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_widget_size_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkAllocation *',
        name = 'allocation',
      ),
    ],
  ),
  'gtk_widget_get_request_mode': Spec(
    return_type = 'GtkSizeRequestMode',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_widget_get_preferred_height_for_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_widget_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_widget_get_preferred_width_for_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_widget_get_preferred_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'minimum_size',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'natural_size',
      ),
    ],
  ),
  'gtk_widget_get_child_requisition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_widget_add_accelerator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_signal',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
      Param(
        type = 'GtkAccelFlags',
        name = 'accel_flags',
      ),
    ],
  ),
  'gtk_widget_remove_accelerator': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
    ],
  ),
  'gtk_widget_set_accel_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_widget_list_accel_closures': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_can_activate_accel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint',
        name = 'signal_id',
      ),
    ],
  ),
  'gtk_widget_mnemonic_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'group_cycling',
      ),
    ],
  ),
  'gtk_widget_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_widget_send_expose': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_widget_send_focus_change': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_widget_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_reparent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'new_parent',
      ),
    ],
  ),
  'gtk_widget_intersect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'area',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'intersection',
      ),
    ],
  ),
  'gtk_widget_region_intersect': Spec(
    return_type = 'cairo_region_t *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gtk_widget_freeze_child_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_child_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'child_property',
      ),
    ],
  ),
  'gtk_widget_thaw_child_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_can_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'can_focus',
      ),
    ],
  ),
  'gtk_widget_get_can_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_is_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_visible_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_grab_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_can_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'can_default',
      ),
    ],
  ),
  'gtk_widget_get_can_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_grab_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_receives_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'receives_default',
      ),
    ],
  ),
  'gtk_widget_get_receives_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_grab': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_device_is_shadowed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_widget_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
    ],
  ),
  'gtk_widget_get_state': Spec(
    return_type = 'GtkStateType',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_state_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'flags',
      ),
      Param(
        type = 'gboolean',
        name = 'clear',
      ),
    ],
  ),
  'gtk_widget_unset_state_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_widget_get_state_flags': Spec(
    return_type = 'GtkStateFlags',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'sensitive',
      ),
    ],
  ),
  'gtk_widget_get_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_is_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_widget_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_has_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'has_window',
      ),
    ],
  ),
  'gtk_widget_get_has_window': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_is_toplevel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_is_drawable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_realized': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'realized',
      ),
    ],
  ),
  'gtk_widget_get_realized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_mapped': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'mapped',
      ),
    ],
  ),
  'gtk_widget_get_mapped': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_app_paintable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'app_paintable',
      ),
    ],
  ),
  'gtk_widget_get_app_paintable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_double_buffered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'double_buffered',
      ),
    ],
  ),
  'gtk_widget_get_double_buffered': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_redraw_on_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'redraw_on_allocate',
      ),
    ],
  ),
  'gtk_widget_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_widget_get_parent': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_parent_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'parent_window',
      ),
    ],
  ),
  'gtk_widget_get_parent_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_child_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'is_visible',
      ),
    ],
  ),
  'gtk_widget_get_child_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_widget_get_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_allocated_width': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_allocated_height': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkAllocation *',
        name = 'allocation',
      ),
    ],
  ),
  'gtk_widget_set_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GtkAllocation *',
        name = 'allocation',
      ),
    ],
  ),
  'gtk_widget_get_requisition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_widget_child_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkDirectionType',
        name = 'direction',
      ),
    ],
  ),
  'gtk_widget_keynav_failed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkDirectionType',
        name = 'direction',
      ),
    ],
  ),
  'gtk_widget_error_bell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_size_request': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_widget_get_size_request': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_widget_set_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'events',
      ),
    ],
  ),
  'gtk_widget_add_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'events',
      ),
    ],
  ),
  'gtk_widget_set_device_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'events',
      ),
    ],
  ),
  'gtk_widget_add_device_events': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GdkEventMask',
        name = 'events',
      ),
    ],
  ),
  'gtk_widget_set_device_enabled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'gtk_widget_get_device_enabled': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_widget_get_toplevel': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_ancestor': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
    ],
  ),
  'gtk_widget_get_visual': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_visual': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gtk_widget_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_screen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_root_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_settings': Spec(
    return_type = 'GtkSettings *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_clipboard': Spec(
    return_type = 'GtkClipboard *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gtk_widget_get_hexpand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_hexpand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_widget_get_hexpand_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_hexpand_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'set',
      ),
    ],
  ),
  'gtk_widget_get_vexpand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_vexpand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_widget_get_vexpand_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_vexpand_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'set',
      ),
    ],
  ),
  'gtk_widget_queue_compute_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_compute_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_widget_get_support_multidevice': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_support_multidevice': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'support_multidevice',
      ),
    ],
  ),
  'gtk_widget_class_set_accessible_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'widget_class',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_widget_class_set_accessible_role': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'widget_class',
      ),
      Param(
        type = 'AtkRole',
        name = 'role',
      ),
    ],
  ),
  'gtk_widget_get_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_halign': Spec(
    return_type = 'GtkAlign',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_halign': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkAlign',
        name = 'align',
      ),
    ],
  ),
  'gtk_widget_get_valign': Spec(
    return_type = 'GtkAlign',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_valign': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkAlign',
        name = 'align',
      ),
    ],
  ),
  'gtk_widget_get_margin_left': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_margin_left': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'margin',
      ),
    ],
  ),
  'gtk_widget_get_margin_right': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_margin_right': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'margin',
      ),
    ],
  ),
  'gtk_widget_get_margin_top': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_margin_top': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'margin',
      ),
    ],
  ),
  'gtk_widget_get_margin_bottom': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_margin_bottom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'margin',
      ),
    ],
  ),
  'gtk_widget_get_events': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_device_events': Spec(
    return_type = 'GdkEventMask',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_widget_get_pointer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gtk_widget_is_ancestor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'ancestor',
      ),
    ],
  ),
  'gtk_widget_translate_coordinates': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'src_widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'dest_widget',
      ),
      Param(
        type = 'gint',
        name = 'src_x',
      ),
      Param(
        type = 'gint',
        name = 'src_y',
      ),
      Param(
        type = 'gint *',
        name = 'dest_x',
      ),
      Param(
        type = 'gint *',
        name = 'dest_y',
      ),
    ],
  ),
  'gtk_widget_hide_on_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_override_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_override_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_override_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'font_desc',
      ),
    ],
  ),
  'gtk_widget_override_symbolic_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_override_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'cursor',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'secondary_cursor',
      ),
    ],
  ),
  'gtk_widget_reset_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_create_pango_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_pango_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_create_pango_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_widget_render_icon_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_widget_set_composite_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_get_composite_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_push_composite_child': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_widget_pop_composite_child': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_widget_class_install_style_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'klass',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_widget_class_install_style_property_parser': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'klass',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GtkRcPropertyParser',
        name = 'parser',
      ),
    ],
  ),
  'gtk_widget_class_find_style_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'klass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'gtk_widget_class_list_style_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GtkWidgetClass *',
        name = 'klass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'gtk_widget_style_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_widget_style_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_widget_style_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'gtk_widget_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'dir',
      ),
    ],
  ),
  'gtk_widget_get_direction': Spec(
    return_type = 'GtkTextDirection',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_default_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextDirection',
        name = 'dir',
      ),
    ],
  ),
  'gtk_widget_get_default_direction': Spec(
    return_type = 'GtkTextDirection',
    parameters = [
    ],
  ),
  'gtk_widget_is_composited': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_shape_combine_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gtk_widget_input_shape_combine_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'cairo_region_t *',
        name = 'region',
      ),
    ],
  ),
  'gtk_widget_list_mnemonic_labels': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_add_mnemonic_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label',
      ),
    ],
  ),
  'gtk_widget_remove_mnemonic_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label',
      ),
    ],
  ),
  'gtk_widget_set_tooltip_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'custom_window',
      ),
    ],
  ),
  'gtk_widget_get_tooltip_window': Spec(
    return_type = 'GtkWindow *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_trigger_tooltip_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_tooltip_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_widget_get_tooltip_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_tooltip_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_widget_get_tooltip_markup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_has_tooltip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'has_tooltip',
      ),
    ],
  ),
  'gtk_widget_get_has_tooltip': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_cairo_should_draw_window': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_cairo_transform_to_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_requisition_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_requisition_new': Spec(
    return_type = 'GtkRequisition *',
    parameters = [
    ],
  ),
  'gtk_requisition_copy': Spec(
    return_type = 'GtkRequisition *',
    parameters = [
      Param(
        type = 'const GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_requisition_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_widget_in_destruction': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_style_context': Spec(
    return_type = 'GtkStyleContext *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_path': Spec(
    return_type = 'GtkWidgetPath *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_modifier_mask': Spec(
    return_type = 'GdkModifierType',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkModifierIntent',
        name = 'intent',
      ),
    ],
  ),
  'gtk_widget_insert_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GActionGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_application_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_application_new': Spec(
    return_type = 'GtkApplication *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'application_id',
      ),
      Param(
        type = 'GApplicationFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_application_add_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_application_remove_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_application_get_windows': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_application_get_app_menu': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_application_set_app_menu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'app_menu',
      ),
    ],
  ),
  'gtk_application_get_menubar': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_application_set_menubar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'menubar',
      ),
    ],
  ),
  'gtk_application_add_accelerator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'const gchar *',
        name = 'accelerator',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'gtk_application_remove_accelerator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
      Param(
        type = 'GVariant *',
        name = 'parameter',
      ),
    ],
  ),
  'gtk_application_inhibit': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkApplicationInhibitFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'reason',
      ),
    ],
  ),
  'gtk_application_uninhibit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'guint',
        name = 'cookie',
      ),
    ],
  ),
  'gtk_application_is_inhibited': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'GtkApplicationInhibitFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_application_get_window_by_id': Spec(
    return_type = 'GtkWindow *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
      Param(
        type = 'guint',
        name = 'id',
      ),
    ],
  ),
  'gtk_application_get_active_window': Spec(
    return_type = 'GtkWindow *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_container_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_container_set_border_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'guint',
        name = 'border_width',
      ),
    ],
  ),
  'gtk_container_get_border_width': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_container_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_container_set_resize_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkResizeMode',
        name = 'resize_mode',
      ),
    ],
  ),
  'gtk_container_get_resize_mode': Spec(
    return_type = 'GtkResizeMode',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_check_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'gtk_container_get_children': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_propagate_draw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  'gtk_container_set_focus_chain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GList *',
        name = 'focusable_widgets',
      ),
    ],
  ),
  'gtk_container_get_focus_chain': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GList **',
        name = 'focusable_widgets',
      ),
    ],
  ),
  'gtk_container_unset_focus_chain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_set_reallocate_redraws': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'gboolean',
        name = 'needs_redraws',
      ),
    ],
  ),
  'gtk_container_set_focus_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_container_get_focus_child': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_set_focus_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_container_get_focus_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_set_focus_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_container_get_focus_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_resize_children': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_child_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
    ],
  ),
  'gtk_container_class_install_child_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainerClass *',
        name = 'cclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_container_class_find_child_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'cclass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'gtk_container_class_list_child_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GObjectClass *',
        name = 'cclass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'gtk_container_add_with_properties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_container_child_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_container_child_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_container_child_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_container_child_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_container_child_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_container_child_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_container_child_notify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'child_property',
      ),
    ],
  ),
  'gtk_container_forall': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'gtk_container_class_handle_border_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkContainerClass *',
        name = 'klass',
      ),
    ],
  ),
  'gtk_container_get_path_for_child': Spec(
    return_type = 'GtkWidgetPath *',
    parameters = [
      Param(
        type = 'GtkContainer *',
        name = 'container',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_bin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_bin_get_child': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkBin *',
        name = 'bin',
      ),
    ],
  ),
  '_gtk_bin_set_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBin *',
        name = 'bin',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_window_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_window_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_window_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_wmclass': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'wmclass_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'wmclass_class',
      ),
    ],
  ),
  'gtk_window_set_role': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'role',
      ),
    ],
  ),
  'gtk_window_set_startup_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'startup_id',
      ),
    ],
  ),
  'gtk_window_get_role': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_add_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_window_remove_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_window_set_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWindowPosition',
        name = 'position',
      ),
    ],
  ),
  'gtk_window_activate_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'focus',
      ),
    ],
  ),
  'gtk_window_get_focus': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'default_widget',
      ),
    ],
  ),
  'gtk_window_get_default_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_activate_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_transient_for': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_window_get_transient_for': Spec(
    return_type = 'GtkWindow *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_attached_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'attach_widget',
      ),
    ],
  ),
  'gtk_window_get_attached_to': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_opacity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gdouble',
        name = 'opacity',
      ),
    ],
  ),
  'gtk_window_get_opacity': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_type_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindowTypeHint',
        name = 'hint',
      ),
    ],
  ),
  'gtk_window_get_type_hint': Spec(
    return_type = 'GdkWindowTypeHint',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_skip_taskbar_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_skip_taskbar_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_skip_pager_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_skip_pager_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_urgency_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_urgency_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_accept_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_accept_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_focus_on_map': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_focus_on_map': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_destroy_with_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_destroy_with_parent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_hide_titlebar_when_maximized': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_hide_titlebar_when_maximized': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_mnemonics_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_mnemonics_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_focus_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_focus_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_resizable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'resizable',
      ),
    ],
  ),
  'gtk_window_get_resizable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_gravity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkGravity',
        name = 'gravity',
      ),
    ],
  ),
  'gtk_window_get_gravity': Spec(
    return_type = 'GdkGravity',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_geometry_hints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'geometry_widget',
      ),
      Param(
        type = 'GdkGeometry *',
        name = 'geometry',
      ),
      Param(
        type = 'GdkWindowHints',
        name = 'geom_mask',
      ),
    ],
  ),
  'gtk_window_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_window_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_is_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_has_toplevel_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_decorated': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_decorated': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_deletable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_get_deletable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_icon_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'gtk_window_get_icon_list': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_window_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_window_set_icon_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'gtk_window_get_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_default_icon_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GList *',
        name = 'list',
      ),
    ],
  ),
  'gtk_window_get_default_icon_list': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'gtk_window_set_default_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_window_set_default_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_window_get_default_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'gtk_window_set_default_icon_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'err',
      ),
    ],
  ),
  'gtk_window_set_auto_startup_notification': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_set_modal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'modal',
      ),
    ],
  ),
  'gtk_window_get_modal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_list_toplevels': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  'gtk_window_set_has_user_ref_count': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_add_mnemonic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'target',
      ),
    ],
  ),
  'gtk_window_remove_mnemonic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'target',
      ),
    ],
  ),
  'gtk_window_mnemonic_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifier',
      ),
    ],
  ),
  'gtk_window_set_mnemonic_modifier': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifier',
      ),
    ],
  ),
  'gtk_window_get_mnemonic_modifier': Spec(
    return_type = 'GdkModifierType',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_activate_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_window_propagate_key_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_window_present': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_present_with_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gtk_window_iconify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_deiconify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_stick': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_unstick': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_maximize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_unmaximize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_fullscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_unfullscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_keep_above': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_set_keep_below': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_window_begin_resize_drag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkWindowEdge',
        name = 'edge',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gtk_window_begin_move_drag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'root_x',
      ),
      Param(
        type = 'gint',
        name = 'root_y',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gtk_window_set_default_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_get_default_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_window_get_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint *',
        name = 'root_x',
      ),
      Param(
        type = 'gint *',
        name = 'root_y',
      ),
    ],
  ),
  'gtk_window_parse_geometry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'geometry',
      ),
    ],
  ),
  'gtk_window_set_default_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_resize_to_geometry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_window_get_group': Spec(
    return_type = 'GtkWindowGroup *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_reshow_with_initial_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_get_window_type': Spec(
    return_type = 'GtkWindowType',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_window_group_new': Spec(
    return_type = 'GtkWindowGroup *',
    parameters = [
    ],
  ),
  'gtk_window_group_add_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindowGroup *',
        name = 'window_group',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_group_remove_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindowGroup *',
        name = 'window_group',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_group_list_windows': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkWindowGroup *',
        name = 'window_group',
      ),
    ],
  ),
  'gtk_window_group_get_current_grab': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindowGroup *',
        name = 'window_group',
      ),
    ],
  ),
  'gtk_window_group_get_current_device_grab': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindowGroup *',
        name = 'window_group',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_window_get_application': Spec(
    return_type = 'GtkApplication *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_set_application': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_window_set_has_resize_grip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'gtk_window_get_has_resize_grip': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_resize_grip_is_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_window_get_resize_grip_area': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gtk_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_dialog_new_with_buttons': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkDialogFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_dialog_add_action_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_dialog_add_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'const gchar *',
        name = 'button_text',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_dialog_add_buttons': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_dialog_set_response_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_dialog_set_default_response': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_dialog_get_widget_for_response': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_dialog_get_response_for_widget': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_alternative_dialog_button_order': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_dialog_set_alternative_button_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'first_response_id',
      ),
    ],
  ),
  'gtk_dialog_set_alternative_button_order_from_array': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'n_params',
      ),
      Param(
        type = 'gint *',
        name = 'new_order',
      ),
    ],
  ),
  'gtk_dialog_response': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_dialog_run': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
    ],
  ),
  'gtk_dialog_get_action_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
    ],
  ),
  'gtk_dialog_get_content_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkDialog *',
        name = 'dialog',
      ),
    ],
  ),
  'gtk_about_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_about_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_show_about_dialog': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'gtk_about_dialog_get_program_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_program_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_about_dialog_get_version': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_version': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'version',
      ),
    ],
  ),
  'gtk_about_dialog_get_copyright': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_copyright': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'copyright',
      ),
    ],
  ),
  'gtk_about_dialog_get_comments': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_comments': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'comments',
      ),
    ],
  ),
  'gtk_about_dialog_get_license': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_license': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'license',
      ),
    ],
  ),
  'gtk_about_dialog_set_license_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'GtkLicense',
        name = 'license_type',
      ),
    ],
  ),
  'gtk_about_dialog_get_license_type': Spec(
    return_type = 'GtkLicense',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_get_wrap_license': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_wrap_license': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'gboolean',
        name = 'wrap_license',
      ),
    ],
  ),
  'gtk_about_dialog_get_website': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_website': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'website',
      ),
    ],
  ),
  'gtk_about_dialog_get_website_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_website_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'website_label',
      ),
    ],
  ),
  'gtk_about_dialog_get_authors': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_authors': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar **',
        name = 'authors',
      ),
    ],
  ),
  'gtk_about_dialog_get_documenters': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_documenters': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar **',
        name = 'documenters',
      ),
    ],
  ),
  'gtk_about_dialog_get_artists': Spec(
    return_type = 'const gchar *const *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_artists': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar **',
        name = 'artists',
      ),
    ],
  ),
  'gtk_about_dialog_get_translator_credits': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_translator_credits': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'translator_credits',
      ),
    ],
  ),
  'gtk_about_dialog_get_logo': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_logo': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'logo',
      ),
    ],
  ),
  'gtk_about_dialog_get_logo_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
    ],
  ),
  'gtk_about_dialog_set_logo_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_about_dialog_add_credit_section': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAboutDialog *',
        name = 'about',
      ),
      Param(
        type = 'const gchar *',
        name = 'section_name',
      ),
      Param(
        type = 'const gchar **',
        name = 'people',
      ),
    ],
  ),
  'gtk_misc_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_misc_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMisc *',
        name = 'misc',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_misc_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMisc *',
        name = 'misc',
      ),
      Param(
        type = 'gfloat *',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat *',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_misc_set_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMisc *',
        name = 'misc',
      ),
      Param(
        type = 'gint',
        name = 'xpad',
      ),
      Param(
        type = 'gint',
        name = 'ypad',
      ),
    ],
  ),
  'gtk_misc_get_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMisc *',
        name = 'misc',
      ),
      Param(
        type = 'gint *',
        name = 'xpad',
      ),
      Param(
        type = 'gint *',
        name = 'ypad',
      ),
    ],
  ),
  '_gtk_misc_get_padding_and_border': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMisc *',
        name = 'misc',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'border',
      ),
    ],
  ),
  'gtk_menu_shell_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_shell_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_menu_shell_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_menu_shell_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_menu_shell_deactivate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_select_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_shell_deselect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_activate_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'force_deactivate',
      ),
    ],
  ),
  'gtk_menu_shell_select_first': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'gboolean',
        name = 'search_sensitive',
      ),
    ],
  ),
  'gtk_menu_shell_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_get_take_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_set_take_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'gboolean',
        name = 'take_focus',
      ),
    ],
  ),
  'gtk_menu_shell_get_selected_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_get_parent_shell': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
    ],
  ),
  'gtk_menu_shell_bind_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuShell *',
        name = 'menu_shell',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_namespace',
      ),
      Param(
        type = 'gboolean',
        name = 'with_separators',
      ),
    ],
  ),
  'gtk_menu_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_menu_new_from_model': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_menu_popup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'parent_menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'parent_menu_item',
      ),
      Param(
        type = 'GtkMenuPositionFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'guint',
        name = 'button',
      ),
      Param(
        type = 'guint32',
        name = 'activate_time',
      ),
    ],
  ),
  'gtk_menu_popup_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'parent_menu_shell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'parent_menu_item',
      ),
      Param(
        type = 'GtkMenuPositionFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'guint',
        name = 'button',
      ),
      Param(
        type = 'guint32',
        name = 'activate_time',
      ),
    ],
  ),
  'gtk_menu_reposition': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_popdown': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_get_active': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'guint',
        name = 'index',
      ),
    ],
  ),
  'gtk_menu_set_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_menu_get_accel_group': Spec(
    return_type = 'GtkAccelGroup *',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_set_accel_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
    ],
  ),
  'gtk_menu_get_accel_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_attach_to_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'attach_widget',
      ),
      Param(
        type = 'GtkMenuDetachFunc',
        name = 'detacher',
      ),
    ],
  ),
  'gtk_menu_detach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_get_attach_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_set_tearoff_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gboolean',
        name = 'torn_off',
      ),
    ],
  ),
  'gtk_menu_get_tearoff_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_menu_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_reorder_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_menu_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_menu_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'guint',
        name = 'left_attach',
      ),
      Param(
        type = 'guint',
        name = 'right_attach',
      ),
      Param(
        type = 'guint',
        name = 'top_attach',
      ),
      Param(
        type = 'guint',
        name = 'bottom_attach',
      ),
    ],
  ),
  'gtk_menu_set_monitor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
    ],
  ),
  'gtk_menu_get_monitor': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_get_for_attach_widget': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_menu_set_reserve_toggle_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gboolean',
        name = 'reserve_toggle_size',
      ),
    ],
  ),
  'gtk_menu_get_reserve_toggle_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_label_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_label_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
    ],
  ),
  'gtk_label_get_attributes': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_set_use_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_label_get_use_markup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_use_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_label_get_use_underline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_markup_with_mnemonic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_get_mnemonic_keyval': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_mnemonic_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_label_get_mnemonic_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_text_with_mnemonic': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_label_set_justify': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'GtkJustification',
        name = 'jtype',
      ),
    ],
  ),
  'gtk_label_get_justify': Spec(
    return_type = 'GtkJustification',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_label_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_width_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_label_get_width_chars': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_max_width_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_label_get_max_width_chars': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_pattern': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'gtk_label_set_line_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'wrap',
      ),
    ],
  ),
  'gtk_label_get_line_wrap': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_line_wrap_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'PangoWrapMode',
        name = 'wrap_mode',
      ),
    ],
  ),
  'gtk_label_get_line_wrap_mode': Spec(
    return_type = 'PangoWrapMode',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_selectable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_label_get_selectable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_angle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
    ],
  ),
  'gtk_label_get_angle': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_select_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gint',
        name = 'start_offset',
      ),
      Param(
        type = 'gint',
        name = 'end_offset',
      ),
    ],
  ),
  'gtk_label_get_selection_bounds': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gint *',
        name = 'start',
      ),
      Param(
        type = 'gint *',
        name = 'end',
      ),
    ],
  ),
  'gtk_label_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_get_layout_offsets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gtk_label_set_single_line_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'single_line_mode',
      ),
    ],
  ),
  'gtk_label_get_single_line_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_get_current_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_label_set_track_visited_links': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
      Param(
        type = 'gboolean',
        name = 'track_links',
      ),
    ],
  ),
  'gtk_label_get_track_visited_links': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  '_gtk_label_mnemonics_visible_apply_recursively': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'mnemonics_visible',
      ),
    ],
  ),
  '_gtk_label_get_cursor_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  '_gtk_label_get_selection_bound': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkLabel *',
        name = 'label',
      ),
    ],
  ),
  'gtk_accel_label_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_accel_label_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'gtk_accel_label_get_accel_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
    ],
  ),
  'gtk_accel_label_get_accel_width': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
    ],
  ),
  'gtk_accel_label_set_accel_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'accel_widget',
      ),
    ],
  ),
  'gtk_accel_label_set_accel_closure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
      Param(
        type = 'GClosure *',
        name = 'accel_closure',
      ),
    ],
  ),
  'gtk_accel_label_refetch': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
    ],
  ),
  'gtk_accel_label_set_accel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccelLabel *',
        name = 'accel_label',
      ),
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  '_gtk_accel_label_class_get_accelerator_label': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkAccelLabelClass *',
        name = 'klass',
      ),
      Param(
        type = 'guint',
        name = 'accelerator_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accelerator_mods',
      ),
    ],
  ),
  'gtk_accel_map_add_entry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
    ],
  ),
  'gtk_accel_map_lookup_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
      Param(
        type = 'GtkAccelKey *',
        name = 'key',
      ),
    ],
  ),
  'gtk_accel_map_change_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
      Param(
        type = 'guint',
        name = 'accel_key',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'accel_mods',
      ),
      Param(
        type = 'gboolean',
        name = 'replace',
      ),
    ],
  ),
  'gtk_accel_map_load': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'gtk_accel_map_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
    ],
  ),
  'gtk_accel_map_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GtkAccelMapForeach',
        name = 'foreach_func',
      ),
    ],
  ),
  'gtk_accel_map_load_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
    ],
  ),
  'gtk_accel_map_load_scanner': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
    ],
  ),
  'gtk_accel_map_save_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
    ],
  ),
  'gtk_accel_map_lock_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
    ],
  ),
  'gtk_accel_map_unlock_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
    ],
  ),
  'gtk_accel_map_add_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filter_pattern',
      ),
    ],
  ),
  'gtk_accel_map_foreach_unfiltered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GtkAccelMapForeach',
        name = 'foreach_func',
      ),
    ],
  ),
  'gtk_accel_map_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_accel_map_get': Spec(
    return_type = 'GtkAccelMap *',
    parameters = [
    ],
  ),
  'gtk_accessible_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_accessible_set_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccessible *',
        name = 'accessible',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_accessible_get_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAccessible *',
        name = 'accessible',
      ),
    ],
  ),
  'gtk_accessible_connect_widget_destroyed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAccessible *',
        name = 'accessible',
      ),
    ],
  ),
  'gtk_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_action_new': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_action_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_is_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_get_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'sensitive',
      ),
    ],
  ),
  'gtk_action_is_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_action_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_create_icon': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'icon_size',
      ),
    ],
  ),
  'gtk_action_create_menu_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_create_tool_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_create_menu': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_get_proxies': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_connect_accelerator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_disconnect_accelerator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_get_accel_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_get_accel_closure': Spec(
    return_type = 'GClosure *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_block_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_unblock_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  '_gtk_action_add_to_proxy_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'proxy',
      ),
    ],
  ),
  '_gtk_action_remove_from_proxy_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'proxy',
      ),
    ],
  ),
  '_gtk_action_emit_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_accel_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
    ],
  ),
  'gtk_action_set_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  '_gtk_action_sync_menu_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'proxy',
      ),
      Param(
        type = 'gboolean',
        name = 'empty',
      ),
    ],
  ),
  'gtk_action_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_action_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_short_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'short_label',
      ),
    ],
  ),
  'gtk_action_get_short_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_tooltip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
    ],
  ),
  'gtk_action_get_tooltip': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_stock_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_action_get_stock_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_action_get_gicon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_action_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_visible_horizontal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'visible_horizontal',
      ),
    ],
  ),
  'gtk_action_get_visible_horizontal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_visible_vertical': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'visible_vertical',
      ),
    ],
  ),
  'gtk_action_get_visible_vertical': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_is_important': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'is_important',
      ),
    ],
  ),
  'gtk_action_get_is_important': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_set_always_show_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'always_show',
      ),
    ],
  ),
  'gtk_action_get_always_show_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_actionable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_actionable_get_action_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
    ],
  ),
  'gtk_actionable_set_action_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'gtk_actionable_get_action_target_value': Spec(
    return_type = 'GVariant *',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
    ],
  ),
  'gtk_actionable_set_action_target_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
      Param(
        type = 'GVariant *',
        name = 'target_value',
      ),
    ],
  ),
  'gtk_actionable_set_action_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
      Param(
        type = 'const gchar *',
        name = 'format_string',
      ),
    ],
  ),
  'gtk_actionable_set_detailed_action_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionable *',
        name = 'actionable',
      ),
      Param(
        type = 'const gchar *',
        name = 'detailed_action_name',
      ),
    ],
  ),
  'gtk_stock_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GtkStockItem *',
        name = 'items',
      ),
      Param(
        type = 'guint',
        name = 'n_items',
      ),
    ],
  ),
  'gtk_stock_add_static': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GtkStockItem *',
        name = 'items',
      ),
      Param(
        type = 'guint',
        name = 'n_items',
      ),
    ],
  ),
  'gtk_stock_lookup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkStockItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_stock_list_ids': Spec(
    return_type = 'GSList *',
    parameters = [
    ],
  ),
  'gtk_stock_item_copy': Spec(
    return_type = 'GtkStockItem *',
    parameters = [
      Param(
        type = 'const GtkStockItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_stock_item_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStockItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_stock_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
      Param(
        type = 'GtkTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gtk_action_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_action_group_new': Spec(
    return_type = 'GtkActionGroup *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_action_group_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_action_group_get_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_action_group_set_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'gboolean',
        name = 'sensitive',
      ),
    ],
  ),
  'gtk_action_group_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_action_group_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_action_group_get_accel_group': Spec(
    return_type = 'GtkAccelGroup *',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_action_group_set_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_action_group_get_action': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'action_name',
      ),
    ],
  ),
  'gtk_action_group_list_actions': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_action_group_add_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_group_add_action_with_accel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'accelerator',
      ),
    ],
  ),
  'gtk_action_group_remove_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_action_group_add_actions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_action_group_add_toggle_actions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkToggleActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_action_group_add_radio_actions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkRadioActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
      Param(
        type = 'GCallback',
        name = 'on_change',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_action_group_add_actions_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_action_group_add_toggle_actions_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkToggleActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_action_group_add_radio_actions_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const GtkRadioActionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'guint',
        name = 'n_entries',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
      Param(
        type = 'GCallback',
        name = 'on_change',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_action_group_set_translate_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkTranslateFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gtk_action_group_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'gtk_action_group_translate_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  '_gtk_action_group_emit_connect_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'proxy',
      ),
    ],
  ),
  '_gtk_action_group_emit_disconnect_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'proxy',
      ),
    ],
  ),
  '_gtk_action_group_emit_pre_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  '_gtk_action_group_emit_post_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_activatable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_activatable_sync_action_properties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_activatable_set_related_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_activatable_get_related_action': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
    ],
  ),
  'gtk_activatable_set_use_action_appearance': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
      Param(
        type = 'gboolean',
        name = 'use_appearance',
      ),
    ],
  ),
  'gtk_activatable_get_use_action_appearance': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
    ],
  ),
  'gtk_activatable_do_set_related_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkActivatable *',
        name = 'activatable',
      ),
      Param(
        type = 'GtkAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_adjustment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_adjustment_new': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'value',
      ),
      Param(
        type = 'gdouble',
        name = 'lower',
      ),
      Param(
        type = 'gdouble',
        name = 'upper',
      ),
      Param(
        type = 'gdouble',
        name = 'step_increment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_increment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_size',
      ),
    ],
  ),
  'gtk_adjustment_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_value_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_clamp_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'lower',
      ),
      Param(
        type = 'gdouble',
        name = 'upper',
      ),
    ],
  ),
  'gtk_adjustment_get_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_adjustment_get_lower': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_lower': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'lower',
      ),
    ],
  ),
  'gtk_adjustment_get_upper': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_upper': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'upper',
      ),
    ],
  ),
  'gtk_adjustment_get_step_increment': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_step_increment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'step_increment',
      ),
    ],
  ),
  'gtk_adjustment_get_page_increment': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_page_increment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_increment',
      ),
    ],
  ),
  'gtk_adjustment_get_page_size': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_adjustment_set_page_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_size',
      ),
    ],
  ),
  'gtk_adjustment_configure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
      Param(
        type = 'gdouble',
        name = 'lower',
      ),
      Param(
        type = 'gdouble',
        name = 'upper',
      ),
      Param(
        type = 'gdouble',
        name = 'step_increment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_increment',
      ),
      Param(
        type = 'gdouble',
        name = 'page_size',
      ),
    ],
  ),
  'gtk_adjustment_get_minimum_increment': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_alignment_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_alignment_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
      Param(
        type = 'gfloat',
        name = 'xscale',
      ),
      Param(
        type = 'gfloat',
        name = 'yscale',
      ),
    ],
  ),
  'gtk_alignment_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAlignment *',
        name = 'alignment',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
      Param(
        type = 'gfloat',
        name = 'xscale',
      ),
      Param(
        type = 'gfloat',
        name = 'yscale',
      ),
    ],
  ),
  'gtk_alignment_set_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAlignment *',
        name = 'alignment',
      ),
      Param(
        type = 'guint',
        name = 'padding_top',
      ),
      Param(
        type = 'guint',
        name = 'padding_bottom',
      ),
      Param(
        type = 'guint',
        name = 'padding_left',
      ),
      Param(
        type = 'guint',
        name = 'padding_right',
      ),
    ],
  ),
  'gtk_alignment_get_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAlignment *',
        name = 'alignment',
      ),
      Param(
        type = 'guint *',
        name = 'padding_top',
      ),
      Param(
        type = 'guint *',
        name = 'padding_bottom',
      ),
      Param(
        type = 'guint *',
        name = 'padding_left',
      ),
      Param(
        type = 'guint *',
        name = 'padding_right',
      ),
    ],
  ),
  'gtk_app_chooser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_app_chooser_get_app_info': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GtkAppChooser *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_get_content_type': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkAppChooser *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_refresh': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooser *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_app_chooser_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkDialogFlags',
        name = 'flags',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'gtk_app_chooser_dialog_new_for_content_type': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkDialogFlags',
        name = 'flags',
      ),
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'gtk_app_chooser_dialog_get_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAppChooserDialog *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_dialog_set_heading': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserDialog *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'heading',
      ),
    ],
  ),
  'gtk_app_chooser_dialog_get_heading': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAppChooserDialog *',
        name = 'self',
      ),
    ],
  ),
  'gtk_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_box_pack_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'fill',
      ),
      Param(
        type = 'guint',
        name = 'padding',
      ),
    ],
  ),
  'gtk_box_pack_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'fill',
      ),
      Param(
        type = 'guint',
        name = 'padding',
      ),
    ],
  ),
  'gtk_box_set_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_box_get_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
    ],
  ),
  'gtk_box_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_box_get_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
    ],
  ),
  'gtk_box_reorder_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_box_query_child_packing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean *',
        name = 'expand',
      ),
      Param(
        type = 'gboolean *',
        name = 'fill',
      ),
      Param(
        type = 'guint *',
        name = 'padding',
      ),
      Param(
        type = 'GtkPackType *',
        name = 'pack_type',
      ),
    ],
  ),
  'gtk_box_set_child_packing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'fill',
      ),
      Param(
        type = 'guint',
        name = 'padding',
      ),
      Param(
        type = 'GtkPackType',
        name = 'pack_type',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_app_chooser_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_show_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_show_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_show_recommended': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_show_recommended': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_show_fallback': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_show_fallback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_show_other': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_show_other': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_show_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_show_all': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_widget_set_default_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_app_chooser_widget_get_default_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAppChooserWidget *',
        name = 'self',
      ),
    ],
  ),
  'gtk_tree_path_new': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
    ],
  ),
  'gtk_tree_path_new_from_string': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_new_from_indices': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'gint',
        name = 'first_index',
      ),
    ],
  ),
  'gtk_tree_path_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_new_first': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
    ],
  ),
  'gtk_tree_path_append_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'gtk_tree_path_prepend_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'gtk_tree_path_get_depth': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_get_indices': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_get_indices_with_depth': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'gint *',
        name = 'depth',
      ),
    ],
  ),
  'gtk_tree_path_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_copy': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'const GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_path_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTreePath *',
        name = 'a',
      ),
      Param(
        type = 'const GtkTreePath *',
        name = 'b',
      ),
    ],
  ),
  'gtk_tree_path_next': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_prev': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_up': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_down': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_path_is_ancestor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'descendant',
      ),
    ],
  ),
  'gtk_tree_path_is_descendant': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'ancestor',
      ),
    ],
  ),
  'gtk_tree_row_reference_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_row_reference_new': Spec(
    return_type = 'GtkTreeRowReference *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_row_reference_new_proxy': Spec(
    return_type = 'GtkTreeRowReference *',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'proxy',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_row_reference_get_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeRowReference *',
        name = 'reference',
      ),
    ],
  ),
  'gtk_tree_row_reference_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeRowReference *',
        name = 'reference',
      ),
    ],
  ),
  'gtk_tree_row_reference_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeRowReference *',
        name = 'reference',
      ),
    ],
  ),
  'gtk_tree_row_reference_copy': Spec(
    return_type = 'GtkTreeRowReference *',
    parameters = [
      Param(
        type = 'GtkTreeRowReference *',
        name = 'reference',
      ),
    ],
  ),
  'gtk_tree_row_reference_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeRowReference *',
        name = 'reference',
      ),
    ],
  ),
  'gtk_tree_row_reference_inserted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'proxy',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_row_reference_deleted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'proxy',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_row_reference_reordered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'proxy',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'new_order',
      ),
    ],
  ),
  'gtk_tree_iter_copy': Spec(
    return_type = 'GtkTreeIter *',
    parameters = [
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_model_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_model_get_flags': Spec(
    return_type = 'GtkTreeModelFlags',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
    ],
  ),
  'gtk_tree_model_get_n_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
    ],
  ),
  'gtk_tree_model_get_column_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'gtk_tree_model_get_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_model_get_iter_from_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'path_string',
      ),
    ],
  ),
  'gtk_tree_model_get_string_from_iter': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_get_iter_first': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_get_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_get_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_tree_model_iter_previous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_iter_next': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_iter_children': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_tree_model_iter_has_child': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_iter_n_children': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_iter_nth_child': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
    ],
  ),
  'gtk_tree_model_iter_parent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'child',
      ),
    ],
  ),
  'gtk_tree_model_ref_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_unref_node': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_tree_model_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
      Param(
        type = 'GtkTreeModelForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_tree_model_row_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_row_inserted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_row_has_child_toggled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_model_row_deleted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_model_rows_reordered': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'new_order',
      ),
    ],
  ),
  'gtk_cell_editable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_editable_start_editing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellEditable *',
        name = 'cell_editable',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_cell_editable_editing_done': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellEditable *',
        name = 'cell_editable',
      ),
    ],
  ),
  'gtk_cell_editable_remove_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellEditable *',
        name = 'cell_editable',
      ),
    ],
  ),
  'gtk_cell_renderer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_get_request_mode': Spec(
    return_type = 'GtkSizeRequestMode',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_renderer_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_size',
      ),
      Param(
        type = 'gint *',
        name = 'natural_size',
      ),
    ],
  ),
  'gtk_cell_renderer_get_preferred_height_for_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_renderer_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_size',
      ),
      Param(
        type = 'gint *',
        name = 'natural_size',
      ),
    ],
  ),
  'gtk_cell_renderer_get_preferred_width_for_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_renderer_get_preferred_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'minimum_size',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'natural_size',
      ),
    ],
  ),
  'gtk_cell_renderer_get_aligned_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'aligned_area',
      ),
    ],
  ),
  'gtk_cell_renderer_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'gint *',
        name = 'x_offset',
      ),
      Param(
        type = 'gint *',
        name = 'y_offset',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_cell_renderer_render': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'background_area',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
    ],
  ),
  'gtk_cell_renderer_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'background_area',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
    ],
  ),
  'gtk_cell_renderer_start_editing': Spec(
    return_type = 'GtkCellEditable *',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'background_area',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
    ],
  ),
  'gtk_cell_renderer_set_fixed_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_cell_renderer_get_fixed_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_cell_renderer_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_cell_renderer_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gfloat *',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat *',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_cell_renderer_set_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gint',
        name = 'xpad',
      ),
      Param(
        type = 'gint',
        name = 'ypad',
      ),
    ],
  ),
  'gtk_cell_renderer_get_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gint *',
        name = 'xpad',
      ),
      Param(
        type = 'gint *',
        name = 'ypad',
      ),
    ],
  ),
  'gtk_cell_renderer_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_cell_renderer_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_renderer_set_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'sensitive',
      ),
    ],
  ),
  'gtk_cell_renderer_get_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_renderer_is_activatable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_renderer_stop_editing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'canceled',
      ),
    ],
  ),
  '_gtk_cell_renderer_calc_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'x_offset',
      ),
      Param(
        type = 'gint *',
        name = 'y_offset',
      ),
    ],
  ),
  'gtk_cell_renderer_get_state': Spec(
    return_type = 'GtkStateFlags',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'cell_state',
      ),
    ],
  ),
  '_gtk_cell_renderer_class_set_accessible_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRendererClass *',
        name = 'renderer_class',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  '_gtk_cell_renderer_get_accessible_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_tree_sortable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_sortable_sort_column_changed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
    ],
  ),
  'gtk_tree_sortable_get_sort_column_id': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
      Param(
        type = 'gint *',
        name = 'sort_column_id',
      ),
      Param(
        type = 'GtkSortType *',
        name = 'order',
      ),
    ],
  ),
  'gtk_tree_sortable_set_sort_column_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
      Param(
        type = 'gint',
        name = 'sort_column_id',
      ),
      Param(
        type = 'GtkSortType',
        name = 'order',
      ),
    ],
  ),
  'gtk_tree_sortable_set_sort_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
      Param(
        type = 'gint',
        name = 'sort_column_id',
      ),
      Param(
        type = 'GtkTreeIterCompareFunc',
        name = 'sort_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_sortable_set_default_sort_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
      Param(
        type = 'GtkTreeIterCompareFunc',
        name = 'sort_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_sortable_has_default_sort_func': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeSortable *',
        name = 'sortable',
      ),
    ],
  ),
  'gtk_cell_area_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_area_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_has_renderer': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'gtk_cell_area_foreach_alloc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'background_area',
      ),
      Param(
        type = 'GtkCellAllocCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'callback_data',
      ),
    ],
  ),
  'gtk_cell_area_event': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
    ],
  ),
  'gtk_cell_area_render': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'background_area',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
      Param(
        type = 'gboolean',
        name = 'paint_focus',
      ),
    ],
  ),
  'gtk_cell_area_get_cell_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'allocation',
      ),
    ],
  ),
  'gtk_cell_area_get_cell_at_position': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'alloc_area',
      ),
    ],
  ),
  'gtk_cell_area_create_context': Spec(
    return_type = 'GtkCellAreaContext *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_copy_context': Spec(
    return_type = 'GtkCellAreaContext *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_cell_area_get_request_mode': Spec(
    return_type = 'GtkSizeRequestMode',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_area_get_preferred_height_for_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_area_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_area_get_preferred_width_for_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_area_get_current_path_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_apply_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'is_expander',
      ),
      Param(
        type = 'gboolean',
        name = 'is_expanded',
      ),
    ],
  ),
  'gtk_cell_area_attribute_connect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_cell_area_attribute_disconnect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
    ],
  ),
  'gtk_cell_area_class_install_cell_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaClass *',
        name = 'aclass',
      ),
      Param(
        type = 'guint',
        name = 'property_id',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_cell_area_class_find_cell_property': Spec(
    return_type = 'GParamSpec *',
    parameters = [
      Param(
        type = 'GtkCellAreaClass *',
        name = 'aclass',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
    ],
  ),
  'gtk_cell_area_class_list_cell_properties': Spec(
    return_type = 'GParamSpec **',
    parameters = [
      Param(
        type = 'GtkCellAreaClass *',
        name = 'aclass',
      ),
      Param(
        type = 'guint *',
        name = 'n_properties',
      ),
    ],
  ),
  'gtk_cell_area_add_with_properties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_cell_area_cell_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_cell_area_cell_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_prop_name',
      ),
    ],
  ),
  'gtk_cell_area_cell_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_cell_area_cell_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_cell_area_cell_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_cell_area_cell_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_cell_area_is_activatable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
      Param(
        type = 'gboolean',
        name = 'edit_only',
      ),
    ],
  ),
  'gtk_cell_area_focus': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkDirectionType',
        name = 'direction',
      ),
    ],
  ),
  'gtk_cell_area_set_focus_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_get_focus_cell': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_add_focus_sibling': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_cell_area_remove_focus_sibling': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_cell_area_is_focus_sibling': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_cell_area_get_focus_siblings': Spec(
    return_type = 'const GList *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_get_focus_from_sibling': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
    ],
  ),
  'gtk_cell_area_get_edited_cell': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_get_edit_widget': Spec(
    return_type = 'GtkCellEditable *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_cell_area_activate_cell': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GtkCellRendererState',
        name = 'flags',
      ),
    ],
  ),
  'gtk_cell_area_stop_editing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'gboolean',
        name = 'canceled',
      ),
    ],
  ),
  'gtk_cell_area_inner_cell_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'inner_area',
      ),
    ],
  ),
  'gtk_cell_area_request_renderer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'for_size',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_size',
      ),
      Param(
        type = 'gint *',
        name = 'natural_size',
      ),
    ],
  ),
  '_gtk_cell_area_set_cell_data_func_with_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'func_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
      Param(
        type = 'gpointer',
        name = 'proxy',
      ),
    ],
  ),
  'gtk_tree_view_column_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_view_column_new': Spec(
    return_type = 'GtkTreeViewColumn *',
    parameters = [
    ],
  ),
  'gtk_tree_view_column_new_with_area': Spec(
    return_type = 'GtkTreeViewColumn *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_tree_view_column_new_with_attributes': Spec(
    return_type = 'GtkTreeViewColumn *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_tree_view_column_pack_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tree_view_column_pack_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tree_view_column_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_add_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell_renderer',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell_renderer',
      ),
    ],
  ),
  'gtk_tree_view_column_set_cell_data_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell_renderer',
      ),
      Param(
        type = 'GtkTreeCellDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'func_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_view_column_clear_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell_renderer',
      ),
    ],
  ),
  'gtk_tree_view_column_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_tree_view_column_get_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_tree_view_column_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_resizable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'resizable',
      ),
    ],
  ),
  'gtk_tree_view_column_get_resizable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_sizing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkTreeViewColumnSizing',
        name = 'type',
      ),
    ],
  ),
  'gtk_tree_view_column_get_sizing': Spec(
    return_type = 'GtkTreeViewColumnSizing',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_get_x_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_get_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_get_fixed_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_fixed_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gint',
        name = 'fixed_width',
      ),
    ],
  ),
  'gtk_tree_view_column_set_min_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gint',
        name = 'min_width',
      ),
    ],
  ),
  'gtk_tree_view_column_get_min_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_max_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gint',
        name = 'max_width',
      ),
    ],
  ),
  'gtk_tree_view_column_get_max_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_clicked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_tree_view_column_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tree_view_column_get_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_clickable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'clickable',
      ),
    ],
  ),
  'gtk_tree_view_column_get_clickable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_tree_view_column_get_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
    ],
  ),
  'gtk_tree_view_column_get_alignment': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_reorderable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'reorderable',
      ),
    ],
  ),
  'gtk_tree_view_column_get_reorderable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_sort_column_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gint',
        name = 'sort_column_id',
      ),
    ],
  ),
  'gtk_tree_view_column_get_sort_column_id': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_sort_indicator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_tree_view_column_get_sort_indicator': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_set_sort_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkSortType',
        name = 'order',
      ),
    ],
  ),
  'gtk_tree_view_column_get_sort_order': Spec(
    return_type = 'GtkSortType',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_cell_set_cell_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'is_expander',
      ),
      Param(
        type = 'gboolean',
        name = 'is_expanded',
      ),
    ],
  ),
  'gtk_tree_view_column_cell_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'cell_area',
      ),
      Param(
        type = 'gint *',
        name = 'x_offset',
      ),
      Param(
        type = 'gint *',
        name = 'y_offset',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_tree_view_column_cell_is_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_focus_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_tree_view_column_cell_get_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell_renderer',
      ),
      Param(
        type = 'gint *',
        name = 'x_offset',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
    ],
  ),
  'gtk_tree_view_column_queue_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_get_tree_view': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_tree_view_column_get_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'tree_column',
      ),
    ],
  ),
  'gtk_text_attributes_new': Spec(
    return_type = 'GtkTextAttributes *',
    parameters = [
    ],
  ),
  'gtk_text_attributes_copy': Spec(
    return_type = 'GtkTextAttributes *',
    parameters = [
      Param(
        type = 'GtkTextAttributes *',
        name = 'src',
      ),
    ],
  ),
  'gtk_text_attributes_copy_values': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextAttributes *',
        name = 'src',
      ),
      Param(
        type = 'GtkTextAttributes *',
        name = 'dest',
      ),
    ],
  ),
  'gtk_text_attributes_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextAttributes *',
        name = 'values',
      ),
    ],
  ),
  'gtk_text_attributes_ref': Spec(
    return_type = 'GtkTextAttributes *',
    parameters = [
      Param(
        type = 'GtkTextAttributes *',
        name = 'values',
      ),
    ],
  ),
  'gtk_text_attributes_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_child_anchor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_child_anchor_new': Spec(
    return_type = 'GtkTextChildAnchor *',
    parameters = [
    ],
  ),
  'gtk_text_child_anchor_get_widgets': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkTextChildAnchor *',
        name = 'anchor',
      ),
    ],
  ),
  'gtk_text_child_anchor_get_deleted': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextChildAnchor *',
        name = 'anchor',
      ),
    ],
  ),
  'gtk_text_tag_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_tag_new': Spec(
    return_type = 'GtkTextTag *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_text_tag_get_priority': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_tag_set_priority': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
      Param(
        type = 'gint',
        name = 'priority',
      ),
    ],
  ),
  'gtk_text_tag_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
      Param(
        type = 'GObject *',
        name = 'event_object',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_buffer': Spec(
    return_type = 'GtkTextBuffer *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_copy': Spec(
    return_type = 'GtkTextIter *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_assign': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'other',
      ),
    ],
  ),
  'gtk_text_iter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_iter_get_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_line': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_line_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_line_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_visible_line_offset': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_visible_line_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_slice': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_iter_get_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_iter_get_visible_slice': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_iter_get_visible_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_iter_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_marks': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_child_anchor': Spec(
    return_type = 'GtkTextChildAnchor *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_toggled_tags': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'toggled_on',
      ),
    ],
  ),
  'gtk_text_iter_begins_tag': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_ends_tag': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_toggles_tag': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_has_tag': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_get_tags': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_editable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'default_setting',
      ),
    ],
  ),
  'gtk_text_iter_can_insert': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editability',
      ),
    ],
  ),
  'gtk_text_iter_starts_word': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_ends_word': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_inside_word': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_starts_sentence': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_ends_sentence': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_inside_sentence': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_starts_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_ends_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_is_cursor_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_chars_in_line': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_bytes_in_line': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_get_attributes': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextAttributes *',
        name = 'values',
      ),
    ],
  ),
  'gtk_text_iter_get_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_is_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_is_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_chars': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_chars': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_lines': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_lines': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_word_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_word_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_word_ends': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_word_starts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_lines': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_lines': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_word_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_word_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_word_ends': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_word_starts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_sentence_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_sentence_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_sentence_ends': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_sentence_starts': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_cursor_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_cursor_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_cursor_positions': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_cursor_positions': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_cursor_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_cursor_position': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_visible_cursor_positions': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_backward_visible_cursor_positions': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_iter_set_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'char_offset',
      ),
    ],
  ),
  'gtk_text_iter_set_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'line_number',
      ),
    ],
  ),
  'gtk_text_iter_set_line_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'char_on_line',
      ),
    ],
  ),
  'gtk_text_iter_set_line_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'byte_on_line',
      ),
    ],
  ),
  'gtk_text_iter_forward_to_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_forward_to_line_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_iter_set_visible_line_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'char_on_line',
      ),
    ],
  ),
  'gtk_text_iter_set_visible_line_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'byte_on_line',
      ),
    ],
  ),
  'gtk_text_iter_forward_to_tag_toggle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_backward_to_tag_toggle': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_iter_forward_find_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextCharPredicate',
        name = 'pred',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'limit',
      ),
    ],
  ),
  'gtk_text_iter_backward_find_char': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextCharPredicate',
        name = 'pred',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'limit',
      ),
    ],
  ),
  'gtk_text_iter_forward_search': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GtkTextSearchFlags',
        name = 'flags',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'match_start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'match_end',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'limit',
      ),
    ],
  ),
  'gtk_text_iter_backward_search': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GtkTextSearchFlags',
        name = 'flags',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'match_start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'match_end',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'limit',
      ),
    ],
  ),
  'gtk_text_iter_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'lhs',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'rhs',
      ),
    ],
  ),
  'gtk_text_iter_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'lhs',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'rhs',
      ),
    ],
  ),
  'gtk_text_iter_in_range': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_iter_order': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextIter *',
        name = 'first',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'second',
      ),
    ],
  ),
  'gtk_target_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_target_list_new': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'guint',
        name = 'ntargets',
      ),
    ],
  ),
  'gtk_target_list_ref': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
    ],
  ),
  'gtk_target_list_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
    ],
  ),
  'gtk_target_list_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
    ],
  ),
  'gtk_target_list_add_text_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
    ],
  ),
  'gtk_target_list_add_rich_text_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'deserializable',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_target_list_add_image_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
    ],
  ),
  'gtk_target_list_add_uri_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
    ],
  ),
  'gtk_target_list_add_table': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'guint',
        name = 'ntargets',
      ),
    ],
  ),
  'gtk_target_list_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
    ],
  ),
  'gtk_target_list_find': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint *',
        name = 'info',
      ),
    ],
  ),
  'gtk_target_table_new_from_list': Spec(
    return_type = 'GtkTargetEntry *',
    parameters = [
      Param(
        type = 'GtkTargetList *',
        name = 'list',
      ),
      Param(
        type = 'gint *',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_target_table_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_selection_owner_set': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gtk_selection_owner_set_for_display': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gtk_selection_add_target': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
    ],
  ),
  'gtk_selection_add_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'guint',
        name = 'ntargets',
      ),
    ],
  ),
  'gtk_selection_clear_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gtk_selection_convert': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gtk_selection_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_selection_data_get_selection': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_target': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_data_type': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_format': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_data': Spec(
    return_type = 'const guchar *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_data_with_length': Spec(
    return_type = 'const guchar *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'gtk_selection_data_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GdkAtom',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'format',
      ),
      Param(
        type = 'const guchar *',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'gtk_selection_data_set_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'gtk_selection_data_get_text': Spec(
    return_type = 'guchar *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_set_pixbuf': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_selection_data_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_set_uris': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'gchar **',
        name = 'uris',
      ),
    ],
  ),
  'gtk_selection_data_get_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_get_targets': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GdkAtom **',
        name = 'targets',
      ),
      Param(
        type = 'gint *',
        name = 'n_atoms',
      ),
    ],
  ),
  'gtk_selection_data_targets_include_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_selection_data_targets_include_rich_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_selection_data_targets_include_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
    ],
  ),
  'gtk_selection_data_targets_include_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_targets_include_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkAtom *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_targets_include_rich_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkAtom *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_targets_include_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkAtom *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'gboolean',
        name = 'writable',
      ),
    ],
  ),
  'gtk_targets_include_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkAtom *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_selection_data_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_selection_data_copy': Spec(
    return_type = 'GtkSelectionData *',
    parameters = [
      Param(
        type = 'const GtkSelectionData *',
        name = 'data',
      ),
    ],
  ),
  'gtk_selection_data_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'data',
      ),
    ],
  ),
  'gtk_target_entry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_target_entry_new': Spec(
    return_type = 'GtkTargetEntry *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'target',
      ),
      Param(
        type = 'guint',
        name = 'flags',
      ),
      Param(
        type = 'guint',
        name = 'info',
      ),
    ],
  ),
  'gtk_target_entry_copy': Spec(
    return_type = 'GtkTargetEntry *',
    parameters = [
      Param(
        type = 'GtkTargetEntry *',
        name = 'data',
      ),
    ],
  ),
  'gtk_target_entry_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTargetEntry *',
        name = 'data',
      ),
    ],
  ),
  'gtk_drag_get_data': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gtk_drag_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'success',
      ),
      Param(
        type = 'gboolean',
        name = 'del',
      ),
      Param(
        type = 'guint32',
        name = 'time_',
      ),
    ],
  ),
  'gtk_drag_get_source_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_drag_highlight': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_unhighlight': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkDestDefaults',
        name = 'flags',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_drag_dest_set_proxy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'proxy_window',
      ),
      Param(
        type = 'GdkDragProtocol',
        name = 'protocol',
      ),
      Param(
        type = 'gboolean',
        name = 'use_coordinates',
      ),
    ],
  ),
  'gtk_drag_dest_unset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_find_target': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkTargetList *',
        name = 'target_list',
      ),
    ],
  ),
  'gtk_drag_dest_get_target_list': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_set_target_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkTargetList *',
        name = 'target_list',
      ),
    ],
  ),
  'gtk_drag_dest_add_text_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_add_image_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_add_uri_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_dest_set_track_motion': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gboolean',
        name = 'track_motion',
      ),
    ],
  ),
  'gtk_drag_dest_get_track_motion': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'start_button_mask',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_drag_source_unset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_get_target_list': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_set_target_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkTargetList *',
        name = 'target_list',
      ),
    ],
  ),
  'gtk_drag_source_add_text_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_add_image_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_add_uri_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_drag_source_set_icon_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_drag_source_set_icon_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_drag_source_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_drag_source_set_icon_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_drag_begin': Spec(
    return_type = 'GdkDragContext *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkTargetList *',
        name = 'targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
      Param(
        type = 'gint',
        name = 'button',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_drag_set_icon_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'hot_x',
      ),
      Param(
        type = 'gint',
        name = 'hot_y',
      ),
    ],
  ),
  'gtk_drag_set_icon_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gint',
        name = 'hot_x',
      ),
      Param(
        type = 'gint',
        name = 'hot_y',
      ),
    ],
  ),
  'gtk_drag_set_icon_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'gint',
        name = 'hot_x',
      ),
      Param(
        type = 'gint',
        name = 'hot_y',
      ),
    ],
  ),
  'gtk_drag_set_icon_surface': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_surface_t *',
        name = 'surface',
      ),
    ],
  ),
  'gtk_drag_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'gint',
        name = 'hot_x',
      ),
      Param(
        type = 'gint',
        name = 'hot_y',
      ),
    ],
  ),
  'gtk_drag_set_icon_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'gint',
        name = 'hot_x',
      ),
      Param(
        type = 'gint',
        name = 'hot_y',
      ),
    ],
  ),
  'gtk_drag_set_icon_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDragContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_drag_check_threshold': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'start_x',
      ),
      Param(
        type = 'gint',
        name = 'start_y',
      ),
      Param(
        type = 'gint',
        name = 'current_x',
      ),
      Param(
        type = 'gint',
        name = 'current_y',
      ),
    ],
  ),
  '_gtk_drag_source_handle_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  '_gtk_drag_dest_handle_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'toplevel',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_editable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_editable_select_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'gtk_editable_get_selection_bounds': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gint *',
        name = 'start_pos',
      ),
      Param(
        type = 'gint *',
        name = 'end_pos',
      ),
    ],
  ),
  'gtk_editable_insert_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'const gchar *',
        name = 'new_text',
      ),
      Param(
        type = 'gint',
        name = 'new_text_length',
      ),
      Param(
        type = 'gint *',
        name = 'position',
      ),
    ],
  ),
  'gtk_editable_delete_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'gtk_editable_get_chars': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gint',
        name = 'start_pos',
      ),
      Param(
        type = 'gint',
        name = 'end_pos',
      ),
    ],
  ),
  'gtk_editable_cut_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_editable_copy_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_editable_paste_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_editable_delete_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_editable_set_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_editable_get_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_editable_set_editable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
      Param(
        type = 'gboolean',
        name = 'is_editable',
      ),
    ],
  ),
  'gtk_editable_get_editable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEditable *',
        name = 'editable',
      ),
    ],
  ),
  'gtk_im_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_im_context_set_client_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_im_context_get_preedit_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'gchar **',
        name = 'str',
      ),
      Param(
        type = 'PangoAttrList **',
        name = 'attrs',
      ),
      Param(
        type = 'gint *',
        name = 'cursor_pos',
      ),
    ],
  ),
  'gtk_im_context_filter_keypress': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_im_context_focus_in': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_im_context_focus_out': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_im_context_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_im_context_set_cursor_location': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'area',
      ),
    ],
  ),
  'gtk_im_context_set_use_preedit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean',
        name = 'use_preedit',
      ),
    ],
  ),
  'gtk_im_context_set_surrounding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
      Param(
        type = 'gint',
        name = 'cursor_index',
      ),
    ],
  ),
  'gtk_im_context_get_surrounding': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'gchar **',
        name = 'text',
      ),
      Param(
        type = 'gint *',
        name = 'cursor_index',
      ),
    ],
  ),
  'gtk_im_context_delete_surrounding': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIMContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'offset',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_entry_buffer_new': Spec(
    return_type = 'GtkEntryBuffer *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'initial_chars',
      ),
      Param(
        type = 'gint',
        name = 'n_initial_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_get_bytes': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_buffer_get_length': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_buffer_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_buffer_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_set_max_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gint',
        name = 'max_length',
      ),
    ],
  ),
  'gtk_entry_buffer_get_max_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_buffer_insert_text': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_delete_text': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_emit_inserted_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'chars',
      ),
      Param(
        type = 'guint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_buffer_emit_deleted_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'guint',
        name = 'position',
      ),
      Param(
        type = 'guint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_list_store_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_list_store_new': Spec(
    return_type = 'GtkListStore *',
    parameters = [
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
    ],
  ),
  'gtk_list_store_newv': Spec(
    return_type = 'GtkListStore *',
    parameters = [
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
    ],
  ),
  'gtk_list_store_set_column_types': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
    ],
  ),
  'gtk_list_store_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_list_store_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_list_store_set_valuesv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
      Param(
        type = 'gint',
        name = 'n_values',
      ),
    ],
  ),
  'gtk_list_store_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_list_store_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_list_store_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_list_store_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_list_store_insert_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_list_store_insert_with_values': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_list_store_insert_with_valuesv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'gint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
      Param(
        type = 'gint',
        name = 'n_values',
      ),
    ],
  ),
  'gtk_list_store_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_list_store_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_list_store_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
    ],
  ),
  'gtk_list_store_iter_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'list_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_list_store_reorder': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'store',
      ),
      Param(
        type = 'gint *',
        name = 'new_order',
      ),
    ],
  ),
  'gtk_list_store_swap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'a',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'b',
      ),
    ],
  ),
  'gtk_list_store_move_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'position',
      ),
    ],
  ),
  'gtk_list_store_move_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkListStore *',
        name = 'store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'position',
      ),
    ],
  ),
  'gtk_tree_model_filter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_model_filter_new': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'child_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'root',
      ),
    ],
  ),
  'gtk_tree_model_filter_set_visible_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkTreeModelFilterVisibleFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_model_filter_set_modify_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
      Param(
        type = 'GtkTreeModelFilterModifyFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_model_filter_set_visible_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_model_filter_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_tree_model_filter_convert_child_iter_to_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'filter_iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'child_iter',
      ),
    ],
  ),
  'gtk_tree_model_filter_convert_iter_to_child_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'child_iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'filter_iter',
      ),
    ],
  ),
  'gtk_tree_model_filter_convert_child_path_to_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'child_path',
      ),
    ],
  ),
  'gtk_tree_model_filter_convert_path_to_child_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'filter_path',
      ),
    ],
  ),
  'gtk_tree_model_filter_refilter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_tree_model_filter_clear_cache': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_entry_completion_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_entry_completion_new': Spec(
    return_type = 'GtkEntryCompletion *',
    parameters = [
    ],
  ),
  'gtk_entry_completion_new_with_area': Spec(
    return_type = 'GtkEntryCompletion *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_entry_completion_get_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_entry_completion_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_match_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'GtkEntryCompletionMatchFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'func_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'func_notify',
      ),
    ],
  ),
  'gtk_entry_completion_set_minimum_key_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
    ],
  ),
  'gtk_entry_completion_get_minimum_key_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_compute_prefix': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'const char *',
        name = 'key',
      ),
    ],
  ),
  'gtk_entry_completion_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_insert_prefix': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_insert_action_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_entry_completion_insert_action_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_entry_completion_delete_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'gtk_entry_completion_set_inline_completion': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gboolean',
        name = 'inline_completion',
      ),
    ],
  ),
  'gtk_entry_completion_get_inline_completion': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_inline_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gboolean',
        name = 'inline_selection',
      ),
    ],
  ),
  'gtk_entry_completion_get_inline_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_popup_completion': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gboolean',
        name = 'popup_completion',
      ),
    ],
  ),
  'gtk_entry_completion_get_popup_completion': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_popup_set_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gboolean',
        name = 'popup_set_width',
      ),
    ],
  ),
  'gtk_entry_completion_get_popup_set_width': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_popup_single_match': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gboolean',
        name = 'popup_single_match',
      ),
    ],
  ),
  'gtk_entry_completion_get_popup_single_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_get_completion_prefix': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_completion_set_text_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_entry_completion_get_text_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_image_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_image_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_image_new_from_file': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_image_new_from_resource': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
    ],
  ),
  'gtk_image_new_from_pixbuf': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_image_new_from_stock': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_new_from_icon_set': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_new_from_animation': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gtk_image_new_from_icon_name': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_new_from_gicon': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
    ],
  ),
  'gtk_image_set_from_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_image_set_from_resource': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
    ],
  ),
  'gtk_image_set_from_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_image_set_from_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_set_from_icon_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_set_from_animation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GdkPixbufAnimation *',
        name = 'animation',
      ),
    ],
  ),
  'gtk_image_set_from_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_set_from_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_set_pixel_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gint',
        name = 'pixel_size',
      ),
    ],
  ),
  'gtk_image_get_storage_type': Spec(
    return_type = 'GtkImageType',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
    ],
  ),
  'gtk_image_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
    ],
  ),
  'gtk_image_get_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'gchar **',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_get_icon_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GtkIconSet **',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkIconSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_get_animation': Spec(
    return_type = 'GdkPixbufAnimation *',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
    ],
  ),
  'gtk_image_get_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'const gchar **',
        name = 'icon_name',
      ),
      Param(
        type = 'GtkIconSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_get_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
      Param(
        type = 'GIcon **',
        name = 'gicon',
      ),
      Param(
        type = 'GtkIconSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_image_get_pixel_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkImage *',
        name = 'image',
      ),
    ],
  ),
  'gtk_entry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_entry_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_entry_new_with_buffer': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_get_buffer': Spec(
    return_type = 'GtkEntryBuffer *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_entry_get_text_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'text_area',
      ),
    ],
  ),
  'gtk_entry_set_visibility': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_entry_get_visibility': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_invisible_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gunichar',
        name = 'ch',
      ),
    ],
  ),
  'gtk_entry_get_invisible_char': Spec(
    return_type = 'gunichar',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_unset_invisible_char': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_has_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_entry_get_has_frame': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_inner_border': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'const GtkBorder *',
        name = 'border',
      ),
    ],
  ),
  'gtk_entry_get_inner_border': Spec(
    return_type = 'const GtkBorder *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_overwrite_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'gtk_entry_get_overwrite_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_max_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint',
        name = 'max',
      ),
    ],
  ),
  'gtk_entry_get_max_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_get_text_length': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_activates_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_entry_get_activates_default': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_width_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_entry_get_width_chars': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_entry_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_get_layout_offsets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gtk_entry_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
    ],
  ),
  'gtk_entry_get_alignment': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_completion': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryCompletion *',
        name = 'completion',
      ),
    ],
  ),
  'gtk_entry_get_completion': Spec(
    return_type = 'GtkEntryCompletion *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_layout_index_to_text_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint',
        name = 'layout_index',
      ),
    ],
  ),
  'gtk_entry_text_index_to_layout_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint',
        name = 'text_index',
      ),
    ],
  ),
  'gtk_entry_set_cursor_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_entry_get_cursor_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_progress_fraction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gdouble',
        name = 'fraction',
      ),
    ],
  ),
  'gtk_entry_get_progress_fraction': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_progress_pulse_step': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gdouble',
        name = 'fraction',
      ),
    ],
  ),
  'gtk_entry_get_progress_pulse_step': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_progress_pulse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_get_placeholder_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_placeholder_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_entry_set_icon_from_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_entry_set_icon_from_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_entry_set_icon_from_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_entry_set_icon_from_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_entry_get_icon_storage_type': Spec(
    return_type = 'GtkImageType',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_get_icon_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_get_icon_stock': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_get_icon_gicon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_set_icon_activatable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'gboolean',
        name = 'activatable',
      ),
    ],
  ),
  'gtk_entry_get_icon_activatable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_set_icon_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'gboolean',
        name = 'sensitive',
      ),
    ],
  ),
  'gtk_entry_get_icon_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_get_icon_at_pos': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_entry_set_icon_tooltip_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
    ],
  ),
  'gtk_entry_get_icon_tooltip_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_set_icon_tooltip_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
    ],
  ),
  'gtk_entry_get_icon_tooltip_markup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
    ],
  ),
  'gtk_entry_set_icon_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'GtkTargetList *',
        name = 'target_list',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_entry_get_current_icon_drag_source': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_get_icon_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkEntryIconPosition',
        name = 'icon_pos',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'icon_area',
      ),
    ],
  ),
  'gtk_entry_im_context_filter_keypress': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_entry_reset_im_context': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_input_purpose': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkInputPurpose',
        name = 'purpose',
      ),
    ],
  ),
  'gtk_entry_get_input_purpose': Spec(
    return_type = 'GtkInputPurpose',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_input_hints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'GtkInputHints',
        name = 'hints',
      ),
    ],
  ),
  'gtk_entry_get_input_hints': Spec(
    return_type = 'GtkInputHints',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_entry_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
      Param(
        type = 'PangoAttrList *',
        name = 'attrs',
      ),
    ],
  ),
  'gtk_entry_get_attributes': Spec(
    return_type = 'PangoAttrList *',
    parameters = [
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_tree_view_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_view_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_tree_view_new_with_model': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_tree_view_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_tree_view_get_selection': Spec(
    return_type = 'GtkTreeSelection *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_tree_view_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_tree_view_get_headers_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_headers_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'headers_visible',
      ),
    ],
  ),
  'gtk_tree_view_columns_autosize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_headers_clickable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_headers_clickable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_tree_view_set_rules_hint': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_tree_view_get_rules_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_append_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_remove_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_insert_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tree_view_insert_column_with_attributes': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_tree_view_insert_column_with_data_func': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkTreeCellDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'dnotify',
      ),
    ],
  ),
  'gtk_tree_view_get_n_columns': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_column': Spec(
    return_type = 'GtkTreeViewColumn *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
    ],
  ),
  'gtk_tree_view_get_columns': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_move_column_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'base_column',
      ),
    ],
  ),
  'gtk_tree_view_set_expander_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_get_expander_column': Spec(
    return_type = 'GtkTreeViewColumn *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_column_drag_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewColumnDropFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_view_scroll_to_point': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'tree_x',
      ),
      Param(
        type = 'gint',
        name = 'tree_y',
      ),
    ],
  ),
  'gtk_tree_view_scroll_to_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'gboolean',
        name = 'use_align',
      ),
      Param(
        type = 'gfloat',
        name = 'row_align',
      ),
      Param(
        type = 'gfloat',
        name = 'col_align',
      ),
    ],
  ),
  'gtk_tree_view_row_activated': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_expand_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_collapse_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_expand_to_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_view_expand_row': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'gboolean',
        name = 'open_all',
      ),
    ],
  ),
  'gtk_tree_view_collapse_row': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_view_map_expanded_rows': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewMappingFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_tree_view_row_expanded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_view_set_reorderable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'reorderable',
      ),
    ],
  ),
  'gtk_tree_view_get_reorderable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'focus_column',
      ),
      Param(
        type = 'gboolean',
        name = 'start_editing',
      ),
    ],
  ),
  'gtk_tree_view_set_cursor_on_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'focus_column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'focus_cell',
      ),
      Param(
        type = 'gboolean',
        name = 'start_editing',
      ),
    ],
  ),
  'gtk_tree_view_get_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn **',
        name = 'focus_column',
      ),
    ],
  ),
  'gtk_tree_view_get_bin_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_path_at_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn **',
        name = 'column',
      ),
      Param(
        type = 'gint *',
        name = 'cell_x',
      ),
      Param(
        type = 'gint *',
        name = 'cell_y',
      ),
    ],
  ),
  'gtk_tree_view_get_cell_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gtk_tree_view_get_background_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gtk_tree_view_get_visible_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'visible_rect',
      ),
    ],
  ),
  'gtk_tree_view_get_visible_range': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'start_path',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'end_path',
      ),
    ],
  ),
  'gtk_tree_view_is_blank_at_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn **',
        name = 'column',
      ),
      Param(
        type = 'gint *',
        name = 'cell_x',
      ),
      Param(
        type = 'gint *',
        name = 'cell_y',
      ),
    ],
  ),
  'gtk_tree_view_enable_model_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'start_button_mask',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_tree_view_enable_model_drag_dest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_tree_view_unset_rows_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_unset_rows_drag_dest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_drag_dest_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewDropPosition',
        name = 'pos',
      ),
    ],
  ),
  'gtk_tree_view_get_drag_dest_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewDropPosition *',
        name = 'pos',
      ),
    ],
  ),
  'gtk_tree_view_get_dest_row_at_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'drag_x',
      ),
      Param(
        type = 'gint',
        name = 'drag_y',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewDropPosition *',
        name = 'pos',
      ),
    ],
  ),
  'gtk_tree_view_create_row_drag_icon': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_view_set_enable_search': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'enable_search',
      ),
    ],
  ),
  'gtk_tree_view_get_enable_search': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_search_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_search_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_get_search_equal_func': Spec(
    return_type = 'GtkTreeViewSearchEqualFunc',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_search_equal_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewSearchEqualFunc',
        name = 'search_equal_func',
      ),
      Param(
        type = 'gpointer',
        name = 'search_user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'search_destroy',
      ),
    ],
  ),
  'gtk_tree_view_get_search_entry': Spec(
    return_type = 'GtkEntry *',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_search_entry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkEntry *',
        name = 'entry',
      ),
    ],
  ),
  'gtk_tree_view_get_search_position_func': Spec(
    return_type = 'GtkTreeViewSearchPositionFunc',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_search_position_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewSearchPositionFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_view_convert_widget_to_tree_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'wx',
      ),
      Param(
        type = 'gint',
        name = 'wy',
      ),
      Param(
        type = 'gint *',
        name = 'tx',
      ),
      Param(
        type = 'gint *',
        name = 'ty',
      ),
    ],
  ),
  'gtk_tree_view_convert_tree_to_widget_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'tx',
      ),
      Param(
        type = 'gint',
        name = 'ty',
      ),
      Param(
        type = 'gint *',
        name = 'wx',
      ),
      Param(
        type = 'gint *',
        name = 'wy',
      ),
    ],
  ),
  'gtk_tree_view_convert_widget_to_bin_window_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'wx',
      ),
      Param(
        type = 'gint',
        name = 'wy',
      ),
      Param(
        type = 'gint *',
        name = 'bx',
      ),
      Param(
        type = 'gint *',
        name = 'by',
      ),
    ],
  ),
  'gtk_tree_view_convert_bin_window_to_widget_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'bx',
      ),
      Param(
        type = 'gint',
        name = 'by',
      ),
      Param(
        type = 'gint *',
        name = 'wx',
      ),
      Param(
        type = 'gint *',
        name = 'wy',
      ),
    ],
  ),
  'gtk_tree_view_convert_tree_to_bin_window_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'tx',
      ),
      Param(
        type = 'gint',
        name = 'ty',
      ),
      Param(
        type = 'gint *',
        name = 'bx',
      ),
      Param(
        type = 'gint *',
        name = 'by',
      ),
    ],
  ),
  'gtk_tree_view_convert_bin_window_to_tree_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'bx',
      ),
      Param(
        type = 'gint',
        name = 'by',
      ),
      Param(
        type = 'gint *',
        name = 'tx',
      ),
      Param(
        type = 'gint *',
        name = 'ty',
      ),
    ],
  ),
  'gtk_tree_view_set_destroy_count_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeDestroyCountFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_view_set_fixed_height_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'gtk_tree_view_get_fixed_height_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_hover_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'hover',
      ),
    ],
  ),
  'gtk_tree_view_get_hover_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_hover_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tree_view_get_hover_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_rubber_banding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'enable',
      ),
    ],
  ),
  'gtk_tree_view_get_rubber_banding': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_is_rubber_banding_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_get_row_separator_func': Spec(
    return_type = 'GtkTreeViewRowSeparatorFunc',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_row_separator_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewRowSeparatorFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_view_get_grid_lines': Spec(
    return_type = 'GtkTreeViewGridLines',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_grid_lines': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTreeViewGridLines',
        name = 'grid_lines',
      ),
    ],
  ),
  'gtk_tree_view_get_enable_tree_lines': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_enable_tree_lines': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'gtk_tree_view_set_show_expanders': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gboolean',
        name = 'enabled',
      ),
    ],
  ),
  'gtk_tree_view_get_show_expanders': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_level_indentation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'indentation',
      ),
    ],
  ),
  'gtk_tree_view_get_level_indentation': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_tree_view_set_tooltip_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_view_set_tooltip_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeViewColumn *',
        name = 'column',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_tree_view_get_tooltip_context': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gboolean',
        name = 'keyboard_tip',
      ),
      Param(
        type = 'GtkTreeModel **',
        name = 'model',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_view_set_tooltip_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_tree_view_get_tooltip_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeView *',
        name = 'tree_view',
      ),
    ],
  ),
  'gtk_combo_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_combo_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_combo_box_new_with_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_combo_box_new_with_area_and_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_combo_box_new_with_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_combo_box_new_with_model': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_combo_box_new_with_model_and_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_combo_box_get_wrap_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_wrap_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
    ],
  ),
  'gtk_combo_box_get_row_span_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_row_span_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'row_span',
      ),
    ],
  ),
  'gtk_combo_box_get_column_span_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_column_span_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'column_span',
      ),
    ],
  ),
  'gtk_combo_box_get_add_tearoffs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_add_tearoffs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gboolean',
        name = 'add_tearoffs',
      ),
    ],
  ),
  'gtk_combo_box_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_combo_box_get_focus_on_click': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo',
      ),
    ],
  ),
  'gtk_combo_box_set_focus_on_click': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo',
      ),
      Param(
        type = 'gboolean',
        name = 'focus_on_click',
      ),
    ],
  ),
  'gtk_combo_box_get_active': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  'gtk_combo_box_get_active_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_combo_box_set_active_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_combo_box_set_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_combo_box_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_get_row_separator_func': Spec(
    return_type = 'GtkTreeViewRowSeparatorFunc',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_row_separator_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GtkTreeViewRowSeparatorFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_combo_box_set_button_sensitivity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GtkSensitivityType',
        name = 'sensitivity',
      ),
    ],
  ),
  'gtk_combo_box_get_button_sensitivity': Spec(
    return_type = 'GtkSensitivityType',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_get_has_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_entry_text_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'text_column',
      ),
    ],
  ),
  'gtk_combo_box_get_entry_text_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_popup_fixed_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gboolean',
        name = 'fixed',
      ),
    ],
  ),
  'gtk_combo_box_get_popup_fixed_width': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_popup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_popup_for_device': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_combo_box_popdown': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_get_popup_accessible': Spec(
    return_type = 'AtkObject *',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_get_id_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_id_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'id_column',
      ),
    ],
  ),
  'gtk_combo_box_get_active_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_set_active_id': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkComboBox *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'active_id',
      ),
    ],
  ),
  'gtk_app_chooser_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_app_chooser_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'content_type',
      ),
    ],
  ),
  'gtk_app_chooser_button_append_separator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_button_append_custom_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_app_chooser_button_set_active_custom_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_app_chooser_button_set_show_dialog_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_button_get_show_dialog_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_button_set_heading': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'heading',
      ),
    ],
  ),
  'gtk_app_chooser_button_get_heading': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
    ],
  ),
  'gtk_app_chooser_button_set_show_default_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_app_chooser_button_get_show_default_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAppChooserButton *',
        name = 'self',
      ),
    ],
  ),
  'gtk_application_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_application_window_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkApplication *',
        name = 'application',
      ),
    ],
  ),
  'gtk_application_window_set_show_menubar': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkApplicationWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'show_menubar',
      ),
    ],
  ),
  'gtk_application_window_get_show_menubar': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkApplicationWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_application_window_get_id': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkApplicationWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_arrow_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_arrow_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkArrowType',
        name = 'arrow_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
    ],
  ),
  'gtk_arrow_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkArrow *',
        name = 'arrow',
      ),
      Param(
        type = 'GtkArrowType',
        name = 'arrow_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
    ],
  ),
  'gtk_frame_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_frame_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_frame_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_frame_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
    ],
  ),
  'gtk_frame_set_label_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label_widget',
      ),
    ],
  ),
  'gtk_frame_get_label_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
    ],
  ),
  'gtk_frame_set_label_align': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_frame_get_label_align': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
      Param(
        type = 'gfloat *',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat *',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_frame_set_shadow_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_frame_get_shadow_type': Spec(
    return_type = 'GtkShadowType',
    parameters = [
      Param(
        type = 'GtkFrame *',
        name = 'frame',
      ),
    ],
  ),
  'gtk_aspect_frame_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_aspect_frame_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
      Param(
        type = 'gfloat',
        name = 'ratio',
      ),
      Param(
        type = 'gboolean',
        name = 'obey_child',
      ),
    ],
  ),
  'gtk_aspect_frame_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAspectFrame *',
        name = 'aspect_frame',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
      Param(
        type = 'gfloat',
        name = 'ratio',
      ),
      Param(
        type = 'gboolean',
        name = 'obey_child',
      ),
    ],
  ),
  'gtk_assistant_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_assistant_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_assistant_next_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_assistant_previous_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_assistant_get_current_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_assistant_set_current_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_assistant_get_n_pages': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_assistant_get_nth_page': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_assistant_prepend_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_append_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_insert_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_assistant_remove_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_assistant_set_forward_page_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkAssistantPageFunc',
        name = 'page_func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_assistant_set_page_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'GtkAssistantPageType',
        name = 'type',
      ),
    ],
  ),
  'gtk_assistant_get_page_type': Spec(
    return_type = 'GtkAssistantPageType',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_set_page_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_assistant_get_page_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_set_page_header_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_assistant_get_page_header_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_set_page_side_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_assistant_get_page_side_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_set_page_complete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
      Param(
        type = 'gboolean',
        name = 'complete',
      ),
    ],
  ),
  'gtk_assistant_get_page_complete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'page',
      ),
    ],
  ),
  'gtk_assistant_add_action_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_assistant_remove_action_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_assistant_update_buttons_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_assistant_commit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkAssistant *',
        name = 'assistant',
      ),
    ],
  ),
  'gtk_button_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_button_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_button_box_get_layout': Spec(
    return_type = 'GtkButtonBoxStyle',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_button_box_set_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
      Param(
        type = 'GtkButtonBoxStyle',
        name = 'layout_style',
      ),
    ],
  ),
  'gtk_button_box_get_child_secondary': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_button_box_set_child_secondary': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'is_secondary',
      ),
    ],
  ),
  'gtk_button_box_get_child_non_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_button_box_set_child_non_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButtonBox *',
        name = 'widget',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'non_homogeneous',
      ),
    ],
  ),
  'gtk_binding_set_new': Spec(
    return_type = 'GtkBindingSet *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'set_name',
      ),
    ],
  ),
  'gtk_binding_set_by_class': Spec(
    return_type = 'GtkBindingSet *',
    parameters = [
      Param(
        type = 'gpointer',
        name = 'object_class',
      ),
    ],
  ),
  'gtk_binding_set_find': Spec(
    return_type = 'GtkBindingSet *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'set_name',
      ),
    ],
  ),
  'gtk_bindings_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_bindings_activate_event': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GObject *',
        name = 'object',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_binding_set_activate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'GObject *',
        name = 'object',
      ),
    ],
  ),
  'gtk_binding_entry_skip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_binding_entry_add_signal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'guint',
        name = 'n_args',
      ),
    ],
  ),
  'gtk_binding_entry_add_signall': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_name',
      ),
      Param(
        type = 'GSList *',
        name = 'binding_args',
      ),
    ],
  ),
  'gtk_binding_entry_add_signal_from_string': Spec(
    return_type = 'GTokenType',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'const gchar *',
        name = 'signal_desc',
      ),
    ],
  ),
  'gtk_binding_entry_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_binding_set_add_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBindingSet *',
        name = 'binding_set',
      ),
      Param(
        type = 'GtkPathType',
        name = 'path_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'path_pattern',
      ),
      Param(
        type = 'GtkPathPriorityType',
        name = 'priority',
      ),
    ],
  ),
  'gtk_builder_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_builder_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_builder_new': Spec(
    return_type = 'GtkBuilder *',
    parameters = [
    ],
  ),
  'gtk_builder_add_from_file': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_add_from_resource': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_add_from_string': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_add_objects_from_file': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'gchar **',
        name = 'object_ids',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_add_objects_from_resource': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
      Param(
        type = 'gchar **',
        name = 'object_ids',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_add_objects_from_string': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'gchar **',
        name = 'object_ids',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_get_object': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_builder_get_objects': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'gtk_builder_connect_signals': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_builder_connect_signals_full': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GtkBuilderConnectFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_builder_set_translation_domain': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'domain',
      ),
    ],
  ),
  'gtk_builder_get_translation_domain': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'gtk_builder_get_type_from_name': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const char *',
        name = 'type_name',
      ),
    ],
  ),
  'gtk_builder_value_from_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_builder_value_from_string_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_buildable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_buildable_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_buildable_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
    ],
  ),
  'gtk_buildable_add_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'gtk_buildable_set_buildable_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_buildable_construct_child': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_buildable_custom_tag_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagname',
      ),
      Param(
        type = 'GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  'gtk_buildable_custom_tag_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagname',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  'gtk_buildable_custom_finished': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagname',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_buildable_parser_finished': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
    ],
  ),
  'gtk_buildable_get_internal_child': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'const gchar *',
        name = 'childname',
      ),
    ],
  ),
  'gtk_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_button_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_button_new_from_stock': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_button_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_button_clicked': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_pressed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_released': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_enter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_leave': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_relief': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkReliefStyle',
        name = 'newstyle',
      ),
    ],
  ),
  'gtk_button_get_relief': Spec(
    return_type = 'GtkReliefStyle',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_button_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_use_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_underline',
      ),
    ],
  ),
  'gtk_button_get_use_underline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_use_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_stock',
      ),
    ],
  ),
  'gtk_button_get_use_stock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_focus_on_click': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'focus_on_click',
      ),
    ],
  ),
  'gtk_button_get_focus_on_click': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gfloat',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_button_get_alignment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gfloat *',
        name = 'xalign',
      ),
      Param(
        type = 'gfloat *',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_button_set_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'image',
      ),
    ],
  ),
  'gtk_button_get_image': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_image_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'position',
      ),
    ],
  ),
  'gtk_button_get_image_position': Spec(
    return_type = 'GtkPositionType',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_set_always_show_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'always_show',
      ),
    ],
  ),
  'gtk_button_get_always_show_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_button_get_event_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_calendar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_calendar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_calendar_select_month': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint',
        name = 'month',
      ),
      Param(
        type = 'guint',
        name = 'year',
      ),
    ],
  ),
  'gtk_calendar_select_day': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint',
        name = 'day',
      ),
    ],
  ),
  'gtk_calendar_mark_day': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint',
        name = 'day',
      ),
    ],
  ),
  'gtk_calendar_unmark_day': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint',
        name = 'day',
      ),
    ],
  ),
  'gtk_calendar_clear_marks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
    ],
  ),
  'gtk_calendar_set_display_options': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'GtkCalendarDisplayOptions',
        name = 'flags',
      ),
    ],
  ),
  'gtk_calendar_get_display_options': Spec(
    return_type = 'GtkCalendarDisplayOptions',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
    ],
  ),
  'gtk_calendar_get_date': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint *',
        name = 'year',
      ),
      Param(
        type = 'guint *',
        name = 'month',
      ),
      Param(
        type = 'guint *',
        name = 'day',
      ),
    ],
  ),
  'gtk_calendar_set_detail_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'GtkCalendarDetailFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_calendar_set_detail_width_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'gint',
        name = 'chars',
      ),
    ],
  ),
  'gtk_calendar_set_detail_height_rows': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'gint',
        name = 'rows',
      ),
    ],
  ),
  'gtk_calendar_get_detail_width_chars': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
    ],
  ),
  'gtk_calendar_get_detail_height_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
    ],
  ),
  'gtk_calendar_get_day_is_marked': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCalendar *',
        name = 'calendar',
      ),
      Param(
        type = 'guint',
        name = 'day',
      ),
    ],
  ),
  'gtk_cell_area_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_area_box_new': Spec(
    return_type = 'GtkCellArea *',
    parameters = [
    ],
  ),
  'gtk_cell_area_box_pack_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'align',
      ),
      Param(
        type = 'gboolean',
        name = 'fixed',
      ),
    ],
  ),
  'gtk_cell_area_box_pack_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaBox *',
        name = 'box',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'renderer',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
      Param(
        type = 'gboolean',
        name = 'align',
      ),
      Param(
        type = 'gboolean',
        name = 'fixed',
      ),
    ],
  ),
  'gtk_cell_area_box_get_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkCellAreaBox *',
        name = 'box',
      ),
    ],
  ),
  'gtk_cell_area_box_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaBox *',
        name = 'box',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  '_gtk_cell_area_box_group_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellAreaBox *',
        name = 'box',
      ),
      Param(
        type = 'gint',
        name = 'group_idx',
      ),
    ],
  ),
  'gtk_cell_area_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_area_context_get_area': Spec(
    return_type = 'GtkCellArea *',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_cell_area_context_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_cell_area_context_reset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_cell_area_context_get_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_area_context_get_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_area_context_get_preferred_height_for_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint *',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_area_context_get_preferred_width_for_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'gint *',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint *',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_area_context_get_allocation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_cell_area_context_push_preferred_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'minimum_width',
      ),
      Param(
        type = 'gint',
        name = 'natural_width',
      ),
    ],
  ),
  'gtk_cell_area_context_push_preferred_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
      Param(
        type = 'gint',
        name = 'minimum_height',
      ),
      Param(
        type = 'gint',
        name = 'natural_height',
      ),
    ],
  ),
  'gtk_cell_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_layout_pack_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_cell_layout_pack_end': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_cell_layout_get_cells': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
    ],
  ),
  'gtk_cell_layout_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
    ],
  ),
  'gtk_cell_layout_set_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_layout_add_attribute': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'const gchar *',
        name = 'attribute',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_cell_layout_set_cell_data_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GtkCellLayoutDataFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'func_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_cell_layout_clear_attributes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_cell_layout_reorder': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_cell_layout_get_area': Spec(
    return_type = 'GtkCellArea *',
    parameters = [
      Param(
        type = 'GtkCellLayout *',
        name = 'cell_layout',
      ),
    ],
  ),
  '_gtk_cell_layout_buildable_custom_tag_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagname',
      ),
      Param(
        type = 'GMarkupParser *',
        name = 'parser',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  '_gtk_cell_layout_buildable_custom_tag_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagname',
      ),
      Param(
        type = 'gpointer *',
        name = 'data',
      ),
    ],
  ),
  '_gtk_cell_layout_buildable_add_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkBuildable *',
        name = 'buildable',
      ),
      Param(
        type = 'GtkBuilder *',
        name = 'builder',
      ),
      Param(
        type = 'GObject *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'type',
      ),
    ],
  ),
  'gtk_cell_renderer_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_text_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_text_set_fixed_height_from_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRendererText *',
        name = 'renderer',
      ),
      Param(
        type = 'gint',
        name = 'number_of_rows',
      ),
    ],
  ),
  'gtk_cell_renderer_accel_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_accel_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_combo_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_combo_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_pixbuf_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_pixbuf_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_progress_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_progress_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_spin_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_spin_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_spinner_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_spinner_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_toggle_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_toggle_new': Spec(
    return_type = 'GtkCellRenderer *',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_toggle_get_radio': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
    ],
  ),
  'gtk_cell_renderer_toggle_set_radio': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
      Param(
        type = 'gboolean',
        name = 'radio',
      ),
    ],
  ),
  'gtk_cell_renderer_toggle_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
    ],
  ),
  'gtk_cell_renderer_toggle_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_cell_renderer_toggle_get_activatable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
    ],
  ),
  'gtk_cell_renderer_toggle_set_activatable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellRendererToggle *',
        name = 'toggle',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_cell_view_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_view_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_cell_view_new_with_context': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
      Param(
        type = 'GtkCellAreaContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_cell_view_new_with_text': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_cell_view_new_with_markup': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_cell_view_new_with_pixbuf': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_cell_view_set_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_cell_view_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
    ],
  ),
  'gtk_cell_view_set_displayed_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_cell_view_get_displayed_row': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
    ],
  ),
  'gtk_cell_view_set_background_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_cell_view_get_draw_sensitive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
    ],
  ),
  'gtk_cell_view_set_draw_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_sensitive',
      ),
    ],
  ),
  'gtk_cell_view_get_fit_model': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
    ],
  ),
  'gtk_cell_view_set_fit_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'gboolean',
        name = 'fit_model',
      ),
    ],
  ),
  'gtk_cell_view_get_size_of_row': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkRequisition *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_cell_view_set_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCellView *',
        name = 'cell_view',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_toggle_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toggle_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_toggle_button_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_toggle_button_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_toggle_button_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_indicator',
      ),
    ],
  ),
  'gtk_toggle_button_get_mode': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
    ],
  ),
  'gtk_toggle_button_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_toggle_button_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
    ],
  ),
  'gtk_toggle_button_toggled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
    ],
  ),
  'gtk_toggle_button_set_inconsistent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_toggle_button_get_inconsistent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
    ],
  ),
  '_gtk_toggle_button_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleButton *',
        name = 'toggle_button',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_check_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_check_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_check_button_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_check_button_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  '_gtk_check_button_get_props': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckButton *',
        name = 'check_button',
      ),
      Param(
        type = 'gint *',
        name = 'indicator_size',
      ),
      Param(
        type = 'gint *',
        name = 'indicator_spacing',
      ),
    ],
  ),
  'gtk_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_menu_item_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_menu_item_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_menu_item_set_submenu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'submenu',
      ),
    ],
  ),
  'gtk_menu_item_get_submenu': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_select': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_deselect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_activate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_toggle_size_request': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'gint *',
        name = 'requisition',
      ),
    ],
  ),
  'gtk_menu_item_toggle_size_allocate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'gint',
        name = 'allocation',
      ),
    ],
  ),
  'gtk_menu_item_set_right_justified': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'right_justified',
      ),
    ],
  ),
  'gtk_menu_item_get_right_justified': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_set_accel_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'accel_path',
      ),
    ],
  ),
  'gtk_menu_item_get_accel_path': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_menu_item_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_set_use_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_menu_item_get_use_underline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_menu_item_set_reserve_indicator': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'reserve',
      ),
    ],
  ),
  'gtk_menu_item_get_reserve_indicator': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMenuItem *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_check_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_check_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_check_menu_item_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_check_menu_item_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_check_menu_item_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_check_menu_item_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
    ],
  ),
  'gtk_check_menu_item_toggled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
    ],
  ),
  'gtk_check_menu_item_set_inconsistent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_check_menu_item_get_inconsistent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
    ],
  ),
  'gtk_check_menu_item_set_draw_as_radio': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_as_radio',
      ),
    ],
  ),
  'gtk_check_menu_item_get_draw_as_radio': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
    ],
  ),
  '_gtk_check_menu_item_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCheckMenuItem *',
        name = 'check_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_clipboard_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_clipboard_get_for_display': Spec(
    return_type = 'GtkClipboard *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gtk_clipboard_get': Spec(
    return_type = 'GtkClipboard *',
    parameters = [
      Param(
        type = 'GdkAtom',
        name = 'selection',
      ),
    ],
  ),
  'gtk_clipboard_get_display': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_set_with_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'guint',
        name = 'n_targets',
      ),
      Param(
        type = 'GtkClipboardGetFunc',
        name = 'get_func',
      ),
      Param(
        type = 'GtkClipboardClearFunc',
        name = 'clear_func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_set_with_owner': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'guint',
        name = 'n_targets',
      ),
      Param(
        type = 'GtkClipboardGetFunc',
        name = 'get_func',
      ),
      Param(
        type = 'GtkClipboardClearFunc',
        name = 'clear_func',
      ),
      Param(
        type = 'GObject *',
        name = 'owner',
      ),
    ],
  ),
  'gtk_clipboard_get_owner': Spec(
    return_type = 'GObject *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'gtk_clipboard_set_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_clipboard_request_contents': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
      Param(
        type = 'GtkClipboardReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_request_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkClipboardTextReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_request_rich_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboardRichTextReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_request_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkClipboardImageReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_request_uris': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkClipboardURIReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_request_targets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkClipboardTargetsReceivedFunc',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_contents': Spec(
    return_type = 'GtkSelectionData *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_rich_text': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GdkAtom *',
        name = 'format',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_image': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_for_targets': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GdkAtom **',
        name = 'targets',
      ),
      Param(
        type = 'gint *',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_clipboard_wait_is_text_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_is_rich_text_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_clipboard_wait_is_image_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_is_uris_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_clipboard_wait_is_target_available': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GdkAtom',
        name = 'target',
      ),
    ],
  ),
  'gtk_clipboard_set_can_store': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
    ],
  ),
  'gtk_clipboard_store': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  '_gtk_clipboard_handle_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEventOwnerChange *',
        name = 'event',
      ),
    ],
  ),
  '_gtk_clipboard_store_all': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_color_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_color_button_new_with_rgba': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_button_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_color_button_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_color_button_new_with_color': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_button_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_button_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_button_set_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'guint16',
        name = 'alpha',
      ),
    ],
  ),
  'gtk_color_button_get_alpha': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_color_button_set_use_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_alpha',
      ),
    ],
  ),
  'gtk_color_button_get_use_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_color_button_set_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_button_get_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorButton *',
        name = 'button',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_chooser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_chooser_get_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_chooser_set_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_chooser_get_use_alpha': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkColorChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_color_chooser_set_use_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'use_alpha',
      ),
    ],
  ),
  'gtk_color_chooser_add_palette': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'gint',
        name = 'colors_per_line',
      ),
      Param(
        type = 'gint',
        name = 'n_colors',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'colors',
      ),
    ],
  ),
  'gtk_color_chooser_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_chooser_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_color_chooser_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_chooser_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_hsv_to_rgb': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'h',
      ),
      Param(
        type = 'gdouble',
        name = 's',
      ),
      Param(
        type = 'gdouble',
        name = 'v',
      ),
      Param(
        type = 'gdouble *',
        name = 'r',
      ),
      Param(
        type = 'gdouble *',
        name = 'g',
      ),
      Param(
        type = 'gdouble *',
        name = 'b',
      ),
    ],
  ),
  'gtk_rgb_to_hsv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'r',
      ),
      Param(
        type = 'gdouble',
        name = 'g',
      ),
      Param(
        type = 'gdouble',
        name = 'b',
      ),
      Param(
        type = 'gdouble *',
        name = 'h',
      ),
      Param(
        type = 'gdouble *',
        name = 's',
      ),
      Param(
        type = 'gdouble *',
        name = 'v',
      ),
    ],
  ),
  'gtk_combo_box_text_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_combo_box_text_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_combo_box_text_new_with_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_combo_box_text_append_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_combo_box_text_insert_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_combo_box_text_prepend_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_combo_box_text_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_combo_box_text_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_text_get_active_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
    ],
  ),
  'gtk_combo_box_text_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'id',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_combo_box_text_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'id',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_combo_box_text_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkComboBoxText *',
        name = 'combo_box',
      ),
      Param(
        type = 'const gchar *',
        name = 'id',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_css_section_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_css_section_ref': Spec(
    return_type = 'GtkCssSection *',
    parameters = [
      Param(
        type = 'GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_section_type': Spec(
    return_type = 'GtkCssSectionType',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_parent': Spec(
    return_type = 'GtkCssSection *',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_start_line': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_start_position': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_end_line': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_section_get_end_position': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GtkCssSection *',
        name = 'section',
      ),
    ],
  ),
  'gtk_css_provider_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_css_provider_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_css_provider_new': Spec(
    return_type = 'GtkCssProvider *',
    parameters = [
    ],
  ),
  'gtk_css_provider_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkCssProvider *',
        name = 'provider',
      ),
    ],
  ),
  'gtk_css_provider_load_from_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCssProvider *',
        name = 'css_provider',
      ),
      Param(
        type = 'const gchar *',
        name = 'data',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_css_provider_load_from_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCssProvider *',
        name = 'css_provider',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_css_provider_load_from_path': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkCssProvider *',
        name = 'css_provider',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_css_provider_get_default': Spec(
    return_type = 'GtkCssProvider *',
    parameters = [
    ],
  ),
  'gtk_css_provider_get_named': Spec(
    return_type = 'GtkCssProvider *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'variant',
      ),
    ],
  ),
  'gtk_get_debug_flags': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_set_debug_flags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'flags',
      ),
    ],
  ),
  'gtk_drawing_area_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_drawing_area_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_event_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_event_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_event_box_get_visible_window': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEventBox *',
        name = 'event_box',
      ),
    ],
  ),
  'gtk_event_box_set_visible_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEventBox *',
        name = 'event_box',
      ),
      Param(
        type = 'gboolean',
        name = 'visible_window',
      ),
    ],
  ),
  'gtk_event_box_get_above_child': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkEventBox *',
        name = 'event_box',
      ),
    ],
  ),
  'gtk_event_box_set_above_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkEventBox *',
        name = 'event_box',
      ),
      Param(
        type = 'gboolean',
        name = 'above_child',
      ),
    ],
  ),
  'gtk_expander_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_expander_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_expander_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_expander_set_expanded': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gboolean',
        name = 'expanded',
      ),
    ],
  ),
  'gtk_expander_get_expanded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_expander_get_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_expander_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_use_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gboolean',
        name = 'use_underline',
      ),
    ],
  ),
  'gtk_expander_get_use_underline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_use_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gboolean',
        name = 'use_markup',
      ),
    ],
  ),
  'gtk_expander_get_use_markup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_label_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label_widget',
      ),
    ],
  ),
  'gtk_expander_get_label_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_label_fill': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gboolean',
        name = 'label_fill',
      ),
    ],
  ),
  'gtk_expander_get_label_fill': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_expander_set_resize_toplevel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
      Param(
        type = 'gboolean',
        name = 'resize_toplevel',
      ),
    ],
  ),
  'gtk_expander_get_resize_toplevel': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkExpander *',
        name = 'expander',
      ),
    ],
  ),
  'gtk_fixed_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_fixed_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_fixed_put': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFixed *',
        name = 'fixed',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_fixed_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFixed *',
        name = 'fixed',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_file_filter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_filter_new': Spec(
    return_type = 'GtkFileFilter *',
    parameters = [
    ],
  ),
  'gtk_file_filter_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_file_filter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_filter_add_mime_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'gtk_file_filter_add_pattern': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'gtk_file_filter_add_pixbuf_formats': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_filter_add_custom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkFileFilterFlags',
        name = 'needed',
      ),
      Param(
        type = 'GtkFileFilterFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'notify',
      ),
    ],
  ),
  'gtk_file_filter_get_needed': Spec(
    return_type = 'GtkFileFilterFlags',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_filter_filter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const GtkFileFilterInfo *',
        name = 'filter_info',
      ),
    ],
  ),
  'gtk_file_chooser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_file_chooser_set_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkFileChooserAction',
        name = 'action',
      ),
    ],
  ),
  'gtk_file_chooser_get_action': Spec(
    return_type = 'GtkFileChooserAction',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_local_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'local_only',
      ),
    ],
  ),
  'gtk_file_chooser_get_local_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_select_multiple': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'select_multiple',
      ),
    ],
  ),
  'gtk_file_chooser_get_select_multiple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_show_hidden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_hidden',
      ),
    ],
  ),
  'gtk_file_chooser_get_show_hidden': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_do_overwrite_confirmation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'do_overwrite_confirmation',
      ),
    ],
  ),
  'gtk_file_chooser_get_do_overwrite_confirmation': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_create_folders': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'create_folders',
      ),
    ],
  ),
  'gtk_file_chooser_get_create_folders': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_current_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_file_chooser_get_filename': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_filename': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_file_chooser_select_filename': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_file_chooser_unselect_filename': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_file_chooser_select_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_unselect_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_filenames': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_current_folder': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_file_chooser_get_current_folder': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_file_chooser_select_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_file_chooser_unselect_uri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_file_chooser_get_uris': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_current_folder_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_file_chooser_get_current_folder_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_select_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_unselect_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
    ],
  ),
  'gtk_file_chooser_get_files': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_current_folder_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GFile *',
        name = 'file',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_get_current_folder_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_preview_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'preview_widget',
      ),
    ],
  ),
  'gtk_file_chooser_get_preview_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_preview_widget_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'active',
      ),
    ],
  ),
  'gtk_file_chooser_get_preview_widget_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_use_preview_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'use_label',
      ),
    ],
  ),
  'gtk_file_chooser_get_use_preview_label': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_preview_filename': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_preview_uri': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_get_preview_file': Spec(
    return_type = 'GFile *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_extra_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'extra_widget',
      ),
    ],
  ),
  'gtk_file_chooser_get_extra_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_add_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_chooser_remove_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_chooser_list_filters': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_set_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkFileFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_file_chooser_get_filter': Spec(
    return_type = 'GtkFileFilter *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_add_shortcut_folder': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'folder',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_remove_shortcut_folder': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'folder',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_list_shortcut_folders': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_add_shortcut_folder_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_remove_shortcut_folder_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const char *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_file_chooser_list_shortcut_folder_uris': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkFileChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_file_chooser_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkFileChooserAction',
        name = 'action',
      ),
    ],
  ),
  'gtk_file_chooser_button_new_with_dialog': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'dialog',
      ),
    ],
  ),
  'gtk_file_chooser_button_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_file_chooser_button_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_file_chooser_button_get_width_chars': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_file_chooser_button_set_width_chars': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
      Param(
        type = 'gint',
        name = 'n_chars',
      ),
    ],
  ),
  'gtk_file_chooser_button_get_focus_on_click': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_file_chooser_button_set_focus_on_click': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFileChooserButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'focus_on_click',
      ),
    ],
  ),
  'gtk_file_chooser_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkFileChooserAction',
        name = 'action',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_file_chooser_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFileChooserAction',
        name = 'action',
      ),
    ],
  ),
  'gtk_font_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_font_button_new_with_font': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'fontname',
      ),
    ],
  ),
  'gtk_font_button_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_font_button_get_use_font': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_use_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_font',
      ),
    ],
  ),
  'gtk_font_button_get_use_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_use_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_size',
      ),
    ],
  ),
  'gtk_font_button_get_font_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_font_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'const gchar *',
        name = 'fontname',
      ),
    ],
  ),
  'gtk_font_button_get_show_style': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_show_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'gboolean',
        name = 'show_style',
      ),
    ],
  ),
  'gtk_font_button_get_show_size': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
    ],
  ),
  'gtk_font_button_set_show_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontButton *',
        name = 'font_button',
      ),
      Param(
        type = 'gboolean',
        name = 'show_size',
      ),
    ],
  ),
  'gtk_font_chooser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_chooser_get_font_family': Spec(
    return_type = 'PangoFontFamily *',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_get_font_face': Spec(
    return_type = 'PangoFontFace *',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_get_font_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_get_font_desc': Spec(
    return_type = 'PangoFontDescription *',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_set_font_desc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
      Param(
        type = 'const PangoFontDescription *',
        name = 'font_desc',
      ),
    ],
  ),
  'gtk_font_chooser_get_font': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_set_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'fontname',
      ),
    ],
  ),
  'gtk_font_chooser_get_preview_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_set_preview_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_font_chooser_get_show_preview_entry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
    ],
  ),
  'gtk_font_chooser_set_show_preview_entry': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_preview_entry',
      ),
    ],
  ),
  'gtk_font_chooser_set_filter_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontChooser *',
        name = 'fontchooser',
      ),
      Param(
        type = 'GtkFontFilterFunc',
        name = 'filter',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_font_chooser_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_chooser_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_font_chooser_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_chooser_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_icon_factory_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_factory_new': Spec(
    return_type = 'GtkIconFactory *',
    parameters = [
    ],
  ),
  'gtk_icon_factory_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconFactory *',
        name = 'factory',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
    ],
  ),
  'gtk_icon_factory_lookup': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GtkIconFactory *',
        name = 'factory',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_icon_factory_add_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconFactory *',
        name = 'factory',
      ),
    ],
  ),
  'gtk_icon_factory_remove_default': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconFactory *',
        name = 'factory',
      ),
    ],
  ),
  'gtk_icon_factory_lookup_default': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_icon_size_lookup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_icon_size_lookup_for_settings': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'gint *',
        name = 'width',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_icon_size_register': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_icon_size_register_alias': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'alias',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'target',
      ),
    ],
  ),
  'gtk_icon_size_from_name': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_icon_size_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_icon_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_set_new': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
    ],
  ),
  'gtk_icon_set_new_from_pixbuf': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_icon_set_ref': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
    ],
  ),
  'gtk_icon_set_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
    ],
  ),
  'gtk_icon_set_copy': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
    ],
  ),
  'gtk_icon_set_render_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
    ],
  ),
  'gtk_icon_set_add_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_set_get_sizes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkIconSize **',
        name = 'sizes',
      ),
      Param(
        type = 'gint *',
        name = 'n_sizes',
      ),
    ],
  ),
  'gtk_icon_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_source_new': Spec(
    return_type = 'GtkIconSource *',
    parameters = [
    ],
  ),
  'gtk_icon_source_copy': Spec(
    return_type = 'GtkIconSource *',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_set_filename': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_icon_source_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_icon_source_set_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_icon_source_get_filename': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_set_direction_wildcarded': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_icon_source_set_state_wildcarded': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_icon_source_set_size_wildcarded': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_icon_source_get_size_wildcarded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_state_wildcarded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_direction_wildcarded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
    ],
  ),
  'gtk_icon_source_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
    ],
  ),
  'gtk_icon_source_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_icon_source_get_direction': Spec(
    return_type = 'GtkTextDirection',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_state': Spec(
    return_type = 'GtkStateType',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  'gtk_icon_source_get_size': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
    ],
  ),
  '_gtk_icon_set_invalidate_caches': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  '_gtk_icon_factory_list_ids': Spec(
    return_type = 'GList *',
    parameters = [
    ],
  ),
  '_gtk_icon_factory_ensure_default_icons': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_style_properties_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_style_properties_register_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStylePropertyParser',
        name = 'parse_func',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_style_properties_lookup_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GtkStylePropertyParser *',
        name = 'parse_func',
      ),
      Param(
        type = 'GParamSpec **',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_style_properties_new': Spec(
    return_type = 'GtkStyleProperties *',
    parameters = [
    ],
  ),
  'gtk_style_properties_map_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_properties_lookup_color': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_style_properties_set_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'const GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_properties_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_style_properties_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_style_properties_get_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_properties_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_style_properties_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_style_properties_unset_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_style_properties_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
    ],
  ),
  'gtk_style_properties_merge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'const GtkStyleProperties *',
        name = 'props_to_merge',
      ),
      Param(
        type = 'gboolean',
        name = 'replace',
      ),
    ],
  ),
  'gtk_style_provider_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_style_provider_get_style': Spec(
    return_type = 'GtkStyleProperties *',
    parameters = [
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_style_provider_get_style_property': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_provider_get_icon_factory': Spec(
    return_type = 'GtkIconFactory *',
    parameters = [
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_style_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_style_context_new': Spec(
    return_type = 'GtkStyleContext *',
    parameters = [
    ],
  ),
  'gtk_style_context_add_provider_for_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
      Param(
        type = 'guint',
        name = 'priority',
      ),
    ],
  ),
  'gtk_style_context_remove_provider_for_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
    ],
  ),
  'gtk_style_context_add_provider': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
      Param(
        type = 'guint',
        name = 'priority',
      ),
    ],
  ),
  'gtk_style_context_remove_provider': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStyleProvider *',
        name = 'provider',
      ),
    ],
  ),
  'gtk_style_context_save': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_restore': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_get_section': Spec(
    return_type = 'GtkCssSection *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
    ],
  ),
  'gtk_style_context_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_context_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_style_context_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_style_context_set_state': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_style_context_get_state': Spec(
    return_type = 'GtkStateFlags',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_state_is_running': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'gdouble *',
        name = 'progress',
      ),
    ],
  ),
  'gtk_style_context_set_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_style_context_get_path': Spec(
    return_type = 'const GtkWidgetPath *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_style_context_get_parent': Spec(
    return_type = 'GtkStyleContext *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_list_classes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_add_class': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'class_name',
      ),
    ],
  ),
  'gtk_style_context_remove_class': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'class_name',
      ),
    ],
  ),
  'gtk_style_context_has_class': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'class_name',
      ),
    ],
  ),
  'gtk_style_context_list_regions': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_add_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'region_name',
      ),
      Param(
        type = 'GtkRegionFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_style_context_remove_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'region_name',
      ),
    ],
  ),
  'gtk_style_context_has_region': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'region_name',
      ),
      Param(
        type = 'GtkRegionFlags *',
        name = 'flags_return',
      ),
    ],
  ),
  'gtk_style_context_get_style_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_context_get_style_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_style_context_get_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_lookup_icon_set': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_icon_set_render_icon_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconSet *',
        name = 'icon_set',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_style_context_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_style_context_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
    ],
  ),
  'gtk_style_context_get_direction': Spec(
    return_type = 'GtkTextDirection',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_set_junction_sides': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkJunctionSides',
        name = 'sides',
      ),
    ],
  ),
  'gtk_style_context_get_junction_sides': Spec(
    return_type = 'GtkJunctionSides',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_lookup_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const gchar *',
        name = 'color_name',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_context_notify_state_change': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gpointer',
        name = 'region_id',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'gboolean',
        name = 'state_value',
      ),
    ],
  ),
  'gtk_style_context_cancel_animations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'gpointer',
        name = 'region_id',
      ),
    ],
  ),
  'gtk_style_context_scroll_animations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'dx',
      ),
      Param(
        type = 'gint',
        name = 'dy',
      ),
    ],
  ),
  'gtk_style_context_push_animatable_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'gpointer',
        name = 'region_id',
      ),
    ],
  ),
  'gtk_style_context_pop_animatable_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_context_get_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_context_get_border_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_context_get_font': Spec(
    return_type = 'const PangoFontDescription *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_style_context_get_border': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'border',
      ),
    ],
  ),
  'gtk_style_context_get_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'padding',
      ),
    ],
  ),
  'gtk_style_context_get_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'margin',
      ),
    ],
  ),
  'gtk_style_context_invalidate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_style_context_reset_widgets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_style_context_set_background': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_render_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_option': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_arrow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'angle',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'size',
      ),
    ],
  ),
  'gtk_render_background': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_frame': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_expander': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'gtk_render_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x0',
      ),
      Param(
        type = 'gdouble',
        name = 'y0',
      ),
      Param(
        type = 'gdouble',
        name = 'x1',
      ),
      Param(
        type = 'gdouble',
        name = 'y1',
      ),
    ],
  ),
  'gtk_render_slider': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_render_frame_gap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'gap_side',
      ),
      Param(
        type = 'gdouble',
        name = 'xy0_gap',
      ),
      Param(
        type = 'gdouble',
        name = 'xy1_gap',
      ),
    ],
  ),
  'gtk_render_extension': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'gap_side',
      ),
    ],
  ),
  'gtk_render_handle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_activity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_render_icon_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_render_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
    ],
  ),
  'gtk_render_insertion_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'gdouble',
        name = 'x',
      ),
      Param(
        type = 'gdouble',
        name = 'y',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
      Param(
        type = 'int',
        name = 'index',
      ),
      Param(
        type = 'PangoDirection',
        name = 'direction',
      ),
    ],
  ),
  'gtk_draw_insertion_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'location',
      ),
      Param(
        type = 'gboolean',
        name = 'is_primary',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_arrow',
      ),
    ],
  ),
  '_gtk_style_context_get_attributes': Spec(
    return_type = 'AtkAttributeSet *',
    parameters = [
      Param(
        type = 'AtkAttributeSet *',
        name = 'attributes',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_symbolic_color_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_symbolic_color_new_literal': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'const GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_symbolic_color_new_name': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_symbolic_color_new_shade': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'gtk_symbolic_color_new_alpha': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'gtk_symbolic_color_new_mix': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color1',
      ),
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color2',
      ),
      Param(
        type = 'gdouble',
        name = 'factor',
      ),
    ],
  ),
  'gtk_symbolic_color_new_win32': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'theme_class',
      ),
      Param(
        type = 'gint',
        name = 'id',
      ),
    ],
  ),
  'gtk_symbolic_color_ref': Spec(
    return_type = 'GtkSymbolicColor *',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_symbolic_color_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_symbolic_color_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_symbolic_color_resolve': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'resolved_color',
      ),
    ],
  ),
  'gtk_gradient_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_gradient_new_linear': Spec(
    return_type = 'GtkGradient *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'x0',
      ),
      Param(
        type = 'gdouble',
        name = 'y0',
      ),
      Param(
        type = 'gdouble',
        name = 'x1',
      ),
      Param(
        type = 'gdouble',
        name = 'y1',
      ),
    ],
  ),
  'gtk_gradient_new_radial': Spec(
    return_type = 'GtkGradient *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'x0',
      ),
      Param(
        type = 'gdouble',
        name = 'y0',
      ),
      Param(
        type = 'gdouble',
        name = 'radius0',
      ),
      Param(
        type = 'gdouble',
        name = 'x1',
      ),
      Param(
        type = 'gdouble',
        name = 'y1',
      ),
      Param(
        type = 'gdouble',
        name = 'radius1',
      ),
    ],
  ),
  'gtk_gradient_add_color_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
      Param(
        type = 'gdouble',
        name = 'offset',
      ),
      Param(
        type = 'GtkSymbolicColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_gradient_ref': Spec(
    return_type = 'GtkGradient *',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
    ],
  ),
  'gtk_gradient_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
    ],
  ),
  'gtk_gradient_resolve': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
      Param(
        type = 'GtkStyleProperties *',
        name = 'props',
      ),
      Param(
        type = 'cairo_pattern_t **',
        name = 'resolved_gradient',
      ),
    ],
  ),
  'gtk_gradient_resolve_for_context': Spec(
    return_type = 'cairo_pattern_t *',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_gradient_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkGradient *',
        name = 'gradient',
      ),
    ],
  ),
  'gtk_grid_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_grid_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_grid_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'left',
      ),
      Param(
        type = 'gint',
        name = 'top',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_grid_attach_next_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'sibling',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'side',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_grid_get_child_at': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'gint',
        name = 'left',
      ),
      Param(
        type = 'gint',
        name = 'top',
      ),
    ],
  ),
  'gtk_grid_insert_row': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_grid_insert_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_grid_insert_next_to': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'sibling',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'side',
      ),
    ],
  ),
  'gtk_grid_set_row_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_grid_get_row_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
    ],
  ),
  'gtk_grid_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_grid_get_row_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
    ],
  ),
  'gtk_grid_set_column_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_grid_get_column_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
    ],
  ),
  'gtk_grid_set_column_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_grid_get_column_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkGrid *',
        name = 'grid',
      ),
    ],
  ),
  'gtk_icon_theme_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_icon_theme_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_theme_new': Spec(
    return_type = 'GtkIconTheme *',
    parameters = [
    ],
  ),
  'gtk_icon_theme_get_default': Spec(
    return_type = 'GtkIconTheme *',
    parameters = [
    ],
  ),
  'gtk_icon_theme_get_for_screen': Spec(
    return_type = 'GtkIconTheme *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_icon_theme_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_icon_theme_set_search_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *[]',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'n_elements',
      ),
    ],
  ),
  'gtk_icon_theme_get_search_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'gchar **[]',
        name = 'path',
      ),
      Param(
        type = 'gint *',
        name = 'n_elements',
      ),
    ],
  ),
  'gtk_icon_theme_append_search_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_theme_prepend_search_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_theme_set_custom_theme': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'theme_name',
      ),
    ],
  ),
  'gtk_icon_theme_has_icon': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_icon_theme_get_icon_sizes': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_icon_theme_lookup_icon': Spec(
    return_type = 'GtkIconInfo *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'GtkIconLookupFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_icon_theme_choose_icon': Spec(
    return_type = 'GtkIconInfo *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *[]',
        name = 'icon_names',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'GtkIconLookupFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_icon_theme_load_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'GtkIconLookupFlags',
        name = 'flags',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_icon_theme_lookup_by_gicon': Spec(
    return_type = 'GtkIconInfo *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'GtkIconLookupFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_icon_theme_list_icons': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'const gchar *',
        name = 'context',
      ),
    ],
  ),
  'gtk_icon_theme_list_contexts': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
    ],
  ),
  'gtk_icon_theme_get_example_icon_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
    ],
  ),
  'gtk_icon_theme_rescan_if_needed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
    ],
  ),
  'gtk_icon_theme_add_builtin_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_icon_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_info_copy': Spec(
    return_type = 'GtkIconInfo *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  'gtk_icon_info_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  'gtk_icon_info_new_for_pixbuf': Spec(
    return_type = 'GtkIconInfo *',
    parameters = [
      Param(
        type = 'GtkIconTheme *',
        name = 'icon_theme',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_icon_info_get_base_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  'gtk_icon_info_get_filename': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  'gtk_icon_info_get_builtin_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  'gtk_icon_info_load_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_icon_info_load_symbolic': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'fg',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'success_color',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'warning_color',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'error_color',
      ),
      Param(
        type = 'gboolean *',
        name = 'was_symbolic',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_icon_info_load_symbolic_for_context': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
      Param(
        type = 'gboolean *',
        name = 'was_symbolic',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_icon_info_load_symbolic_for_style': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'gboolean *',
        name = 'was_symbolic',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_icon_info_set_raw_coordinates': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'gboolean',
        name = 'raw_coordinates',
      ),
    ],
  ),
  'gtk_icon_info_get_embedded_rect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rectangle',
      ),
    ],
  ),
  'gtk_icon_info_get_attach_points': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
      Param(
        type = 'GdkPoint **',
        name = 'points',
      ),
      Param(
        type = 'gint *',
        name = 'n_points',
      ),
    ],
  ),
  'gtk_icon_info_get_display_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkIconInfo *',
        name = 'icon_info',
      ),
    ],
  ),
  '_gtk_icon_theme_check_reload': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  '_gtk_icon_theme_ensure_builtin_cache': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_tooltip_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tooltip_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_tooltip_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_tooltip_set_icon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_tooltip_set_icon_from_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_tooltip_set_icon_from_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_tooltip_set_icon_from_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GIcon *',
        name = 'gicon',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
    ],
  ),
  'gtk_tooltip_set_custom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'custom_widget',
      ),
    ],
  ),
  'gtk_tooltip_set_tip_area': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'const GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gtk_tooltip_trigger_tooltip_query': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  '_gtk_tooltip_focus_in': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  '_gtk_tooltip_focus_out': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  '_gtk_tooltip_toggle_keyboard_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  '_gtk_tooltip_handle_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  '_gtk_tooltip_hide': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  '_gtk_widget_find_at_coords': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gint',
        name = 'window_x',
      ),
      Param(
        type = 'gint',
        name = 'window_y',
      ),
      Param(
        type = 'gint *',
        name = 'widget_x',
      ),
      Param(
        type = 'gint *',
        name = 'widget_y',
      ),
    ],
  ),
  'gtk_icon_view_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_view_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_icon_view_new_with_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkCellArea *',
        name = 'area',
      ),
    ],
  ),
  'gtk_icon_view_new_with_model': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_icon_view_set_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_icon_view_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_text_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_icon_view_get_text_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_markup_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_icon_view_get_markup_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_pixbuf_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_icon_view_get_pixbuf_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_item_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_icon_view_get_item_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_columns': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'columns',
      ),
    ],
  ),
  'gtk_icon_view_get_columns': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_item_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'item_width',
      ),
    ],
  ),
  'gtk_icon_view_get_item_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_icon_view_get_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'row_spacing',
      ),
    ],
  ),
  'gtk_icon_view_get_row_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_column_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'column_spacing',
      ),
    ],
  ),
  'gtk_icon_view_get_column_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'margin',
      ),
    ],
  ),
  'gtk_icon_view_get_margin': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_item_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'item_padding',
      ),
    ],
  ),
  'gtk_icon_view_get_item_padding': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_get_path_at_pos': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_icon_view_get_item_at_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkCellRenderer **',
        name = 'cell',
      ),
    ],
  ),
  'gtk_icon_view_get_visible_range': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'start_path',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'end_path',
      ),
    ],
  ),
  'gtk_icon_view_selected_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkIconViewForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_icon_view_set_selection_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkSelectionMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_icon_view_get_selection_mode': Spec(
    return_type = 'GtkSelectionMode',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_select_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_unselect_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_path_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_get_item_row': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_get_item_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_get_selected_items': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_select_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_unselect_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_item_activated': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_set_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'gboolean',
        name = 'start_editing',
      ),
    ],
  ),
  'gtk_icon_view_get_cursor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkCellRenderer **',
        name = 'cell',
      ),
    ],
  ),
  'gtk_icon_view_scroll_to_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'gboolean',
        name = 'use_align',
      ),
      Param(
        type = 'gfloat',
        name = 'row_align',
      ),
      Param(
        type = 'gfloat',
        name = 'col_align',
      ),
    ],
  ),
  'gtk_icon_view_enable_model_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'start_button_mask',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_icon_view_enable_model_drag_dest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'const GtkTargetEntry *',
        name = 'targets',
      ),
      Param(
        type = 'gint',
        name = 'n_targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_icon_view_unset_model_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_unset_model_drag_dest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_reorderable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gboolean',
        name = 'reorderable',
      ),
    ],
  ),
  'gtk_icon_view_get_reorderable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_icon_view_set_drag_dest_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkIconViewDropPosition',
        name = 'pos',
      ),
    ],
  ),
  'gtk_icon_view_get_drag_dest_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkIconViewDropPosition *',
        name = 'pos',
      ),
    ],
  ),
  'gtk_icon_view_get_dest_item_at_pos': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'drag_x',
      ),
      Param(
        type = 'gint',
        name = 'drag_y',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkIconViewDropPosition *',
        name = 'pos',
      ),
    ],
  ),
  'gtk_icon_view_create_drag_icon': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_convert_widget_to_bin_window_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'wx',
      ),
      Param(
        type = 'gint',
        name = 'wy',
      ),
      Param(
        type = 'gint *',
        name = 'bx',
      ),
      Param(
        type = 'gint *',
        name = 'by',
      ),
    ],
  ),
  'gtk_icon_view_get_cell_rect': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'rect',
      ),
    ],
  ),
  'gtk_icon_view_set_tooltip_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_icon_view_set_tooltip_cell': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'GtkTooltip *',
        name = 'tooltip',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkCellRenderer *',
        name = 'cell',
      ),
    ],
  ),
  'gtk_icon_view_get_tooltip_context': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gboolean',
        name = 'keyboard_tip',
      ),
      Param(
        type = 'GtkTreeModel **',
        name = 'model',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_icon_view_set_tooltip_column': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
    ],
  ),
  'gtk_icon_view_get_tooltip_column': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkIconView *',
        name = 'icon_view',
      ),
    ],
  ),
  'gtk_image_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_image_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_image_menu_item_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_image_menu_item_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_image_menu_item_new_from_stock': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_image_menu_item_set_always_show_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'always_show',
      ),
    ],
  ),
  'gtk_image_menu_item_get_always_show_image': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
    ],
  ),
  'gtk_image_menu_item_set_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'image',
      ),
    ],
  ),
  'gtk_image_menu_item_get_image': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
    ],
  ),
  'gtk_image_menu_item_set_use_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
      Param(
        type = 'gboolean',
        name = 'use_stock',
      ),
    ],
  ),
  'gtk_image_menu_item_get_use_stock': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
    ],
  ),
  'gtk_image_menu_item_set_accel_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkImageMenuItem *',
        name = 'image_menu_item',
      ),
      Param(
        type = 'GtkAccelGroup *',
        name = 'accel_group',
      ),
    ],
  ),
  'gtk_im_context_simple_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_im_context_simple_new': Spec(
    return_type = 'GtkIMContext *',
    parameters = [
    ],
  ),
  'gtk_im_context_simple_add_table': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMContextSimple *',
        name = 'context_simple',
      ),
      Param(
        type = 'guint16 *',
        name = 'data',
      ),
      Param(
        type = 'gint',
        name = 'max_seq_len',
      ),
      Param(
        type = 'gint',
        name = 'n_seqs',
      ),
    ],
  ),
  'gtk_im_multicontext_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_im_multicontext_new': Spec(
    return_type = 'GtkIMContext *',
    parameters = [
    ],
  ),
  'gtk_im_multicontext_append_menuitems': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMMulticontext *',
        name = 'context',
      ),
      Param(
        type = 'GtkMenuShell *',
        name = 'menushell',
      ),
    ],
  ),
  'gtk_im_multicontext_get_context_id': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GtkIMMulticontext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_im_multicontext_set_context_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkIMMulticontext *',
        name = 'context',
      ),
      Param(
        type = 'const char *',
        name = 'context_id',
      ),
    ],
  ),
  'gtk_info_bar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_info_bar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_info_bar_new_with_buttons': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_info_bar_get_action_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
    ],
  ),
  'gtk_info_bar_get_content_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
    ],
  ),
  'gtk_info_bar_add_action_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_info_bar_add_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'const gchar *',
        name = 'button_text',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_info_bar_add_buttons': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_info_bar_set_response_sensitive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_info_bar_set_default_response': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_info_bar_response': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'gint',
        name = 'response_id',
      ),
    ],
  ),
  'gtk_info_bar_set_message_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
      Param(
        type = 'GtkMessageType',
        name = 'message_type',
      ),
    ],
  ),
  'gtk_info_bar_get_message_type': Spec(
    return_type = 'GtkMessageType',
    parameters = [
      Param(
        type = 'GtkInfoBar *',
        name = 'info_bar',
      ),
    ],
  ),
  'gtk_invisible_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_invisible_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_invisible_new_for_screen': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_invisible_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkInvisible *',
        name = 'invisible',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_invisible_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkInvisible *',
        name = 'invisible',
      ),
    ],
  ),
  'gtk_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_layout_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'hadjustment',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'vadjustment',
      ),
    ],
  ),
  'gtk_layout_get_bin_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
    ],
  ),
  'gtk_layout_put': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child_widget',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_layout_move': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child_widget',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_layout_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint',
        name = 'width',
      ),
      Param(
        type = 'guint',
        name = 'height',
      ),
    ],
  ),
  'gtk_layout_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'guint *',
        name = 'width',
      ),
      Param(
        type = 'guint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_layout_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
    ],
  ),
  'gtk_layout_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
    ],
  ),
  'gtk_layout_set_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_layout_set_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLayout *',
        name = 'layout',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_level_bar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_level_bar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_level_bar_new_for_interval': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'min_value',
      ),
      Param(
        type = 'gdouble',
        name = 'max_value',
      ),
    ],
  ),
  'gtk_level_bar_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'GtkLevelBarMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_level_bar_get_mode': Spec(
    return_type = 'GtkLevelBarMode',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
    ],
  ),
  'gtk_level_bar_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_level_bar_get_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
    ],
  ),
  'gtk_level_bar_set_min_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_level_bar_get_min_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
    ],
  ),
  'gtk_level_bar_set_max_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_level_bar_get_max_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
    ],
  ),
  'gtk_level_bar_add_offset_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_level_bar_remove_offset_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_level_bar_get_offset_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLevelBar *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gdouble *',
        name = 'value',
      ),
    ],
  ),
  'gtk_link_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_link_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_link_button_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_link_button_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkLinkButton *',
        name = 'link_button',
      ),
    ],
  ),
  'gtk_link_button_set_uri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLinkButton *',
        name = 'link_button',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_link_button_get_visited': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkLinkButton *',
        name = 'link_button',
      ),
    ],
  ),
  'gtk_link_button_set_visited': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLinkButton *',
        name = 'link_button',
      ),
      Param(
        type = 'gboolean',
        name = 'visited',
      ),
    ],
  ),
  'gtk_lock_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_lock_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'gtk_lock_button_get_permission': Spec(
    return_type = 'GPermission *',
    parameters = [
      Param(
        type = 'GtkLockButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_lock_button_set_permission': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkLockButton *',
        name = 'button',
      ),
      Param(
        type = 'GPermission *',
        name = 'permission',
      ),
    ],
  ),
  'gtk_get_major_version': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_get_minor_version': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_get_micro_version': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_get_binary_age': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_get_interface_age': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_check_version': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'guint',
        name = 'required_major',
      ),
      Param(
        type = 'guint',
        name = 'required_minor',
      ),
      Param(
        type = 'guint',
        name = 'required_micro',
      ),
    ],
  ),
  'gtk_parse_args': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'gtk_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'gtk_init_check': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'int *',
        name = 'argc',
      ),
      Param(
        type = 'char ***',
        name = 'argv',
      ),
    ],
  ),
  'gtk_init_with_args': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gint *',
        name = 'argc',
      ),
      Param(
        type = 'gchar ***',
        name = 'argv',
      ),
      Param(
        type = 'const gchar *',
        name = 'parameter_string',
      ),
      Param(
        type = 'const GOptionEntry *',
        name = 'entries',
      ),
      Param(
        type = 'const gchar *',
        name = 'translation_domain',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_get_option_group': Spec(
    return_type = 'GOptionGroup *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'open_default_display',
      ),
    ],
  ),
  'gtk_disable_setlocale': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_get_default_language': Spec(
    return_type = 'PangoLanguage *',
    parameters = [
    ],
  ),
  'gtk_events_pending': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gtk_main_do_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_main': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_main_level': Spec(
    return_type = 'guint',
    parameters = [
    ],
  ),
  'gtk_main_quit': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_main_iteration': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gtk_main_iteration_do': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'blocking',
      ),
    ],
  ),
  'gtk_true': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gtk_false': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gtk_grab_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_grab_get_current': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_grab_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_device_grab_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
      Param(
        type = 'gboolean',
        name = 'block_others',
      ),
    ],
  ),
  'gtk_device_grab_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gtk_key_snooper_install': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkKeySnoopFunc',
        name = 'snooper',
      ),
      Param(
        type = 'gpointer',
        name = 'func_data',
      ),
    ],
  ),
  'gtk_key_snooper_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guint',
        name = 'snooper_handler_id',
      ),
    ],
  ),
  'gtk_get_current_event': Spec(
    return_type = 'GdkEvent *',
    parameters = [
    ],
  ),
  'gtk_get_current_event_time': Spec(
    return_type = 'guint32',
    parameters = [
    ],
  ),
  'gtk_get_current_event_state': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkModifierType *',
        name = 'state',
      ),
    ],
  ),
  'gtk_get_current_event_device': Spec(
    return_type = 'GdkDevice *',
    parameters = [
    ],
  ),
  'gtk_get_event_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_propagate_event': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GdkEvent *',
        name = 'event',
      ),
    ],
  ),
  'gtk_menu_bar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_bar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_menu_bar_new_from_model': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GMenuModel *',
        name = 'model',
      ),
    ],
  ),
  'gtk_menu_bar_get_pack_direction': Spec(
    return_type = 'GtkPackDirection',
    parameters = [
      Param(
        type = 'GtkMenuBar *',
        name = 'menubar',
      ),
    ],
  ),
  'gtk_menu_bar_set_pack_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuBar *',
        name = 'menubar',
      ),
      Param(
        type = 'GtkPackDirection',
        name = 'pack_dir',
      ),
    ],
  ),
  'gtk_menu_bar_get_child_pack_direction': Spec(
    return_type = 'GtkPackDirection',
    parameters = [
      Param(
        type = 'GtkMenuBar *',
        name = 'menubar',
      ),
    ],
  ),
  'gtk_menu_bar_set_child_pack_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuBar *',
        name = 'menubar',
      ),
      Param(
        type = 'GtkPackDirection',
        name = 'child_pack_dir',
      ),
    ],
  ),
  '_gtk_menu_bar_cycle_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuBar *',
        name = 'menubar',
      ),
      Param(
        type = 'GtkDirectionType',
        name = 'dir',
      ),
    ],
  ),
  'gtk_menu_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_menu_button_set_popup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'popup',
      ),
    ],
  ),
  'gtk_menu_button_get_popup': Spec(
    return_type = 'GtkMenu *',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
    ],
  ),
  'gtk_menu_button_set_direction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
      Param(
        type = 'GtkArrowType',
        name = 'direction',
      ),
    ],
  ),
  'gtk_menu_button_get_direction': Spec(
    return_type = 'GtkArrowType',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
    ],
  ),
  'gtk_menu_button_set_menu_model': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
      Param(
        type = 'GMenuModel *',
        name = 'menu_model',
      ),
    ],
  ),
  'gtk_menu_button_get_menu_model': Spec(
    return_type = 'GMenuModel *',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
    ],
  ),
  'gtk_menu_button_set_align_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'align_widget',
      ),
    ],
  ),
  'gtk_menu_button_get_align_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenuButton *',
        name = 'menu_button',
      ),
    ],
  ),
  'gtk_size_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_size_group_new': Spec(
    return_type = 'GtkSizeGroup *',
    parameters = [
      Param(
        type = 'GtkSizeGroupMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_size_group_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
      Param(
        type = 'GtkSizeGroupMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_size_group_get_mode': Spec(
    return_type = 'GtkSizeGroupMode',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
    ],
  ),
  'gtk_size_group_set_ignore_hidden': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
      Param(
        type = 'gboolean',
        name = 'ignore_hidden',
      ),
    ],
  ),
  'gtk_size_group_get_ignore_hidden': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
    ],
  ),
  'gtk_size_group_add_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_size_group_remove_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_size_group_get_widgets': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkSizeGroup *',
        name = 'size_group',
      ),
    ],
  ),
  'gtk_tool_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_item_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
    ],
  ),
  'gtk_tool_item_set_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_tool_item_get_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_set_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tool_item_get_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_set_tooltip_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_tool_item_set_tooltip_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_tool_item_set_use_drag_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'use_drag_window',
      ),
    ],
  ),
  'gtk_tool_item_get_use_drag_window': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_set_visible_horizontal': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'visible_horizontal',
      ),
    ],
  ),
  'gtk_tool_item_get_visible_horizontal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_set_visible_vertical': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'visible_vertical',
      ),
    ],
  ),
  'gtk_tool_item_get_visible_vertical': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_is_important': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_set_is_important': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gboolean',
        name = 'is_important',
      ),
    ],
  ),
  'gtk_tool_item_get_ellipsize_mode': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_icon_size': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_toolbar_style': Spec(
    return_type = 'GtkToolbarStyle',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_relief_style': Spec(
    return_type = 'GtkReliefStyle',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_text_alignment': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_text_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_text_size_group': Spec(
    return_type = 'GtkSizeGroup *',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_retrieve_proxy_menu_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_get_proxy_menu_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'menu_item_id',
      ),
    ],
  ),
  'gtk_tool_item_set_proxy_menu_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'const gchar *',
        name = 'menu_item_id',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_item',
      ),
    ],
  ),
  'gtk_tool_item_rebuild_menu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_item_toolbar_reconfigured': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  '_gtk_tool_item_create_menu_proxy': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
    ],
  ),
  'gtk_tool_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_button_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'icon_widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_tool_button_new_from_stock': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_tool_button_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_tool_button_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_tool_button_set_use_underline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'use_underline',
      ),
    ],
  ),
  'gtk_tool_button_get_use_underline': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_tool_button_set_stock_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_tool_button_get_stock_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_tool_button_set_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_tool_button_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_tool_button_set_icon_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'icon_widget',
      ),
    ],
  ),
  'gtk_tool_button_get_icon_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_tool_button_set_label_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label_widget',
      ),
    ],
  ),
  'gtk_tool_button_get_label_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  '_gtk_tool_button_get_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_menu_tool_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_tool_button_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'icon_widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_menu_tool_button_new_from_stock': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_menu_tool_button_set_menu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuToolButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_menu_tool_button_get_menu': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMenuToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_menu_tool_button_set_arrow_tooltip_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuToolButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_menu_tool_button_set_arrow_tooltip_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenuToolButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_message_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_message_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkDialogFlags',
        name = 'flags',
      ),
      Param(
        type = 'GtkMessageType',
        name = 'type',
      ),
      Param(
        type = 'GtkButtonsType',
        name = 'buttons',
      ),
      Param(
        type = 'const gchar *',
        name = 'message_format',
      ),
    ],
  ),
  'gtk_message_dialog_new_with_markup': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkDialogFlags',
        name = 'flags',
      ),
      Param(
        type = 'GtkMessageType',
        name = 'type',
      ),
      Param(
        type = 'GtkButtonsType',
        name = 'buttons',
      ),
      Param(
        type = 'const gchar *',
        name = 'message_format',
      ),
    ],
  ),
  'gtk_message_dialog_set_image': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'dialog',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'image',
      ),
    ],
  ),
  'gtk_message_dialog_get_image': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'dialog',
      ),
    ],
  ),
  'gtk_message_dialog_set_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'message_dialog',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
    ],
  ),
  'gtk_message_dialog_format_secondary_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'message_dialog',
      ),
      Param(
        type = 'const gchar *',
        name = 'message_format',
      ),
    ],
  ),
  'gtk_message_dialog_format_secondary_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'message_dialog',
      ),
      Param(
        type = 'const gchar *',
        name = 'message_format',
      ),
    ],
  ),
  'gtk_message_dialog_get_message_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkMessageDialog *',
        name = 'message_dialog',
      ),
    ],
  ),
  'gtk_mount_operation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_mount_operation_new': Spec(
    return_type = 'GMountOperation *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_mount_operation_is_showing': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_mount_operation_set_parent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_mount_operation_get_parent': Spec(
    return_type = 'GtkWindow *',
    parameters = [
      Param(
        type = 'GtkMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_mount_operation_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMountOperation *',
        name = 'op',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_mount_operation_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkMountOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_notebook_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_notebook_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_notebook_append_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
    ],
  ),
  'gtk_notebook_append_page_menu': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_label',
      ),
    ],
  ),
  'gtk_notebook_prepend_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
    ],
  ),
  'gtk_notebook_prepend_page_menu': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_label',
      ),
    ],
  ),
  'gtk_notebook_insert_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_notebook_insert_page_menu': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_label',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_notebook_remove_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_notebook_set_group_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'gtk_notebook_get_group_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_get_current_page': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_get_nth_page': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_notebook_get_n_pages': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_page_num': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_set_current_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gint',
        name = 'page_num',
      ),
    ],
  ),
  'gtk_notebook_next_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_prev_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_set_show_border': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gboolean',
        name = 'show_border',
      ),
    ],
  ),
  'gtk_notebook_get_show_border': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_set_show_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gboolean',
        name = 'show_tabs',
      ),
    ],
  ),
  'gtk_notebook_get_show_tabs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_set_tab_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'pos',
      ),
    ],
  ),
  'gtk_notebook_get_tab_pos': Spec(
    return_type = 'GtkPositionType',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_set_scrollable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'gboolean',
        name = 'scrollable',
      ),
    ],
  ),
  'gtk_notebook_get_scrollable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_get_tab_hborder': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_get_tab_vborder': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_popup_enable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_popup_disable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
    ],
  ),
  'gtk_notebook_get_tab_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_set_tab_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'tab_label',
      ),
    ],
  ),
  'gtk_notebook_set_tab_label_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'tab_text',
      ),
    ],
  ),
  'gtk_notebook_get_tab_label_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_get_menu_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_set_menu_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'menu_label',
      ),
    ],
  ),
  'gtk_notebook_set_menu_label_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'const gchar *',
        name = 'menu_text',
      ),
    ],
  ),
  'gtk_notebook_get_menu_label_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_reorder_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_notebook_get_tab_reorderable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_set_tab_reorderable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'reorderable',
      ),
    ],
  ),
  'gtk_notebook_get_tab_detachable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_notebook_set_tab_detachable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'detachable',
      ),
    ],
  ),
  'gtk_notebook_get_action_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkPackType',
        name = 'pack_type',
      ),
    ],
  ),
  'gtk_notebook_set_action_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNotebook *',
        name = 'notebook',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkPackType',
        name = 'pack_type',
      ),
    ],
  ),
  'gtk_numerable_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_numerable_icon_new': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'base_icon',
      ),
    ],
  ),
  'gtk_numerable_icon_new_with_style_context': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'base_icon',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_numerable_icon_get_style_context': Spec(
    return_type = 'GtkStyleContext *',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
    ],
  ),
  'gtk_numerable_icon_set_style_context': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
      Param(
        type = 'GtkStyleContext *',
        name = 'style',
      ),
    ],
  ),
  'gtk_numerable_icon_get_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
    ],
  ),
  'gtk_numerable_icon_set_count': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_numerable_icon_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
    ],
  ),
  'gtk_numerable_icon_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_numerable_icon_set_background_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_numerable_icon_get_background_gicon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
    ],
  ),
  'gtk_numerable_icon_set_background_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_numerable_icon_get_background_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkNumerableIcon *',
        name = 'self',
      ),
    ],
  ),
  'gtk_offscreen_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_offscreen_window_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_offscreen_window_get_surface': Spec(
    return_type = 'cairo_surface_t *',
    parameters = [
      Param(
        type = 'GtkOffscreenWindow *',
        name = 'offscreen',
      ),
    ],
  ),
  'gtk_offscreen_window_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkOffscreenWindow *',
        name = 'offscreen',
      ),
    ],
  ),
  'gtk_orientable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_orientable_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkOrientable *',
        name = 'orientable',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_orientable_get_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkOrientable *',
        name = 'orientable',
      ),
    ],
  ),
  'gtk_overlay_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_overlay_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_overlay_add_overlay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkOverlay *',
        name = 'overlay',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_paper_size_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_paper_size_new': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_paper_size_new_from_ppd': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'ppd_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'ppd_display_name',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
    ],
  ),
  'gtk_paper_size_new_custom': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'display_name',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_copy': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'other',
      ),
    ],
  ),
  'gtk_paper_size_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_paper_size_is_equal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size1',
      ),
      Param(
        type = 'GtkPaperSize *',
        name = 'size2',
      ),
    ],
  ),
  'gtk_paper_size_get_paper_sizes': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'include_custom',
      ),
    ],
  ),
  'gtk_paper_size_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_paper_size_get_display_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_paper_size_get_ppd_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_paper_size_get_width': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_height': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_is_custom': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_paper_size_set_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_default_top_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_default_bottom_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_default_left_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_default_right_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_paper_size_get_default': Spec(
    return_type = 'const gchar *',
    parameters = [
    ],
  ),
  'gtk_paper_size_new_from_key_file': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_paper_size_to_key_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'gtk_page_setup_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_page_setup_new': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
    ],
  ),
  'gtk_page_setup_copy': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'other',
      ),
    ],
  ),
  'gtk_page_setup_get_orientation': Spec(
    return_type = 'GtkPageOrientation',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
    ],
  ),
  'gtk_page_setup_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkPageOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_page_setup_get_paper_size': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
    ],
  ),
  'gtk_page_setup_set_paper_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_page_setup_get_top_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_set_top_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'gdouble',
        name = 'margin',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_bottom_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_set_bottom_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'gdouble',
        name = 'margin',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_left_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_set_left_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'gdouble',
        name = 'margin',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_right_margin': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_set_right_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'gdouble',
        name = 'margin',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_set_paper_size_and_default_margins': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkPaperSize *',
        name = 'size',
      ),
    ],
  ),
  'gtk_page_setup_get_paper_width': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_paper_height': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_page_width': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_get_page_height': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_page_setup_new_from_file': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_page_setup_load_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'const char *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_page_setup_to_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'const char *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_page_setup_new_from_key_file': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_page_setup_load_key_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_page_setup_to_key_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPageSetup *',
        name = 'setup',
      ),
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'gtk_paned_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_paned_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_paned_add1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_paned_add2': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_paned_pack1': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'resize',
      ),
      Param(
        type = 'gboolean',
        name = 'shrink',
      ),
    ],
  ),
  'gtk_paned_pack2': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gboolean',
        name = 'resize',
      ),
      Param(
        type = 'gboolean',
        name = 'shrink',
      ),
    ],
  ),
  'gtk_paned_get_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
    ],
  ),
  'gtk_paned_set_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_paned_get_child1': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
    ],
  ),
  'gtk_paned_get_child2': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
    ],
  ),
  'gtk_paned_get_handle_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkPaned *',
        name = 'paned',
      ),
    ],
  ),
  'gtk_print_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_context_get_cairo_context': Spec(
    return_type = 'cairo_t *',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_page_setup': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_width': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_height': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_dpi_x': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_dpi_y': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_get_hard_margins': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
      Param(
        type = 'gdouble *',
        name = 'top',
      ),
      Param(
        type = 'gdouble *',
        name = 'bottom',
      ),
      Param(
        type = 'gdouble *',
        name = 'left',
      ),
      Param(
        type = 'gdouble *',
        name = 'right',
      ),
    ],
  ),
  'gtk_print_context_get_pango_fontmap': Spec(
    return_type = 'PangoFontMap *',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_create_pango_context': Spec(
    return_type = 'PangoContext *',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_create_pango_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
    ],
  ),
  'gtk_print_context_set_cairo_context': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintContext *',
        name = 'context',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'double',
        name = 'dpi_x',
      ),
      Param(
        type = 'double',
        name = 'dpi_y',
      ),
    ],
  ),
  'gtk_print_settings_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_settings_new': Spec(
    return_type = 'GtkPrintSettings *',
    parameters = [
    ],
  ),
  'gtk_print_settings_copy': Spec(
    return_type = 'GtkPrintSettings *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'other',
      ),
    ],
  ),
  'gtk_print_settings_new_from_file': Spec(
    return_type = 'GtkPrintSettings *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_settings_load_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_settings_to_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'file_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_settings_new_from_key_file': Spec(
    return_type = 'GtkPrintSettings *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_settings_load_key_file': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_settings_to_key_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'gtk_print_settings_has_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_get': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'gtk_print_settings_unset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPrintSettingsFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_print_settings_get_bool': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_set_bool': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gboolean',
        name = 'value',
      ),
    ],
  ),
  'gtk_print_settings_get_double': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_get_double_with_default': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'def',
      ),
    ],
  ),
  'gtk_print_settings_set_double': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_print_settings_get_length': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_set_length': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_get_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
    ],
  ),
  'gtk_print_settings_get_int_with_default': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'def',
      ),
    ],
  ),
  'gtk_print_settings_set_int': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'key',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'gtk_print_settings_get_printer': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_printer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'printer',
      ),
    ],
  ),
  'gtk_print_settings_get_orientation': Spec(
    return_type = 'GtkPageOrientation',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_orientation': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPageOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_print_settings_get_paper_size': Spec(
    return_type = 'GtkPaperSize *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_paper_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPaperSize *',
        name = 'paper_size',
      ),
    ],
  ),
  'gtk_print_settings_get_paper_width': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_set_paper_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gdouble',
        name = 'width',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_get_paper_height': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_set_paper_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gdouble',
        name = 'height',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_settings_get_use_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_use_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gboolean',
        name = 'use_color',
      ),
    ],
  ),
  'gtk_print_settings_get_collate': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_collate': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gboolean',
        name = 'collate',
      ),
    ],
  ),
  'gtk_print_settings_get_reverse': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_reverse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gboolean',
        name = 'reverse',
      ),
    ],
  ),
  'gtk_print_settings_get_duplex': Spec(
    return_type = 'GtkPrintDuplex',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_duplex': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPrintDuplex',
        name = 'duplex',
      ),
    ],
  ),
  'gtk_print_settings_get_quality': Spec(
    return_type = 'GtkPrintQuality',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_quality': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPrintQuality',
        name = 'quality',
      ),
    ],
  ),
  'gtk_print_settings_get_n_copies': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_n_copies': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gint',
        name = 'num_copies',
      ),
    ],
  ),
  'gtk_print_settings_get_number_up': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_number_up': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gint',
        name = 'number_up',
      ),
    ],
  ),
  'gtk_print_settings_get_number_up_layout': Spec(
    return_type = 'GtkNumberUpLayout',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_number_up_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkNumberUpLayout',
        name = 'number_up_layout',
      ),
    ],
  ),
  'gtk_print_settings_get_resolution': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_resolution': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gint',
        name = 'resolution',
      ),
    ],
  ),
  'gtk_print_settings_get_resolution_x': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_get_resolution_y': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_resolution_xy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gint',
        name = 'resolution_x',
      ),
      Param(
        type = 'gint',
        name = 'resolution_y',
      ),
    ],
  ),
  'gtk_print_settings_get_printer_lpi': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_printer_lpi': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gdouble',
        name = 'lpi',
      ),
    ],
  ),
  'gtk_print_settings_get_scale': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_scale': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gdouble',
        name = 'scale',
      ),
    ],
  ),
  'gtk_print_settings_get_print_pages': Spec(
    return_type = 'GtkPrintPages',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_print_pages': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPrintPages',
        name = 'pages',
      ),
    ],
  ),
  'gtk_print_settings_get_page_ranges': Spec(
    return_type = 'GtkPageRange *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gint *',
        name = 'num_ranges',
      ),
    ],
  ),
  'gtk_print_settings_set_page_ranges': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPageRange *',
        name = 'page_ranges',
      ),
      Param(
        type = 'gint',
        name = 'num_ranges',
      ),
    ],
  ),
  'gtk_print_settings_get_page_set': Spec(
    return_type = 'GtkPageSet',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_page_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPageSet',
        name = 'page_set',
      ),
    ],
  ),
  'gtk_print_settings_get_default_source': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_default_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'default_source',
      ),
    ],
  ),
  'gtk_print_settings_get_media_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_media_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'media_type',
      ),
    ],
  ),
  'gtk_print_settings_get_dither': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_dither': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'dither',
      ),
    ],
  ),
  'gtk_print_settings_get_finishings': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_finishings': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'finishings',
      ),
    ],
  ),
  'gtk_print_settings_get_output_bin': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_settings_set_output_bin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'output_bin',
      ),
    ],
  ),
  'gtk_print_operation_preview_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_operation_preview_render_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperationPreview *',
        name = 'preview',
      ),
      Param(
        type = 'gint',
        name = 'page_nr',
      ),
    ],
  ),
  'gtk_print_operation_preview_end_preview': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperationPreview *',
        name = 'preview',
      ),
    ],
  ),
  'gtk_print_operation_preview_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintOperationPreview *',
        name = 'preview',
      ),
      Param(
        type = 'gint',
        name = 'page_nr',
      ),
    ],
  ),
  'gtk_print_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_print_operation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_operation_new': Spec(
    return_type = 'GtkPrintOperation *',
    parameters = [
    ],
  ),
  'gtk_print_operation_set_default_page_setup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'GtkPageSetup *',
        name = 'default_page_setup',
      ),
    ],
  ),
  'gtk_print_operation_get_default_page_setup': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_print_settings': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'GtkPrintSettings *',
        name = 'print_settings',
      ),
    ],
  ),
  'gtk_print_operation_get_print_settings': Spec(
    return_type = 'GtkPrintSettings *',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_job_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'const gchar *',
        name = 'job_name',
      ),
    ],
  ),
  'gtk_print_operation_set_n_pages': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gint',
        name = 'n_pages',
      ),
    ],
  ),
  'gtk_print_operation_set_current_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gint',
        name = 'current_page',
      ),
    ],
  ),
  'gtk_print_operation_set_use_full_page': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'full_page',
      ),
    ],
  ),
  'gtk_print_operation_set_unit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'GtkUnit',
        name = 'unit',
      ),
    ],
  ),
  'gtk_print_operation_set_export_filename': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_print_operation_set_track_print_status': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'track_status',
      ),
    ],
  ),
  'gtk_print_operation_set_show_progress': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'show_progress',
      ),
    ],
  ),
  'gtk_print_operation_set_allow_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'allow_async',
      ),
    ],
  ),
  'gtk_print_operation_set_custom_tab_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_print_operation_run': Spec(
    return_type = 'GtkPrintOperationResult',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'GtkPrintOperationAction',
        name = 'action',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_operation_get_error': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_print_operation_get_status': Spec(
    return_type = 'GtkPrintStatus',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_get_status_string': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_is_finished': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_cancel': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_draw_page_finish': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_defer_drawing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_support_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'support_selection',
      ),
    ],
  ),
  'gtk_print_operation_get_support_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_has_selection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'has_selection',
      ),
    ],
  ),
  'gtk_print_operation_get_has_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_set_embed_page_setup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
      Param(
        type = 'gboolean',
        name = 'embed',
      ),
    ],
  ),
  'gtk_print_operation_get_embed_page_setup': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_operation_get_n_pages_to_print': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkPrintOperation *',
        name = 'op',
      ),
    ],
  ),
  'gtk_print_run_page_setup_dialog': Spec(
    return_type = 'GtkPageSetup *',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkPageSetup *',
        name = 'page_setup',
      ),
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_print_run_page_setup_dialog_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkPageSetup *',
        name = 'page_setup',
      ),
      Param(
        type = 'GtkPrintSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GtkPageSetupDoneFunc',
        name = 'done_cb',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_progress_bar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_progress_bar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_progress_bar_pulse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_progress_bar_set_fraction': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'gdouble',
        name = 'fraction',
      ),
    ],
  ),
  'gtk_progress_bar_set_pulse_step': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'gdouble',
        name = 'fraction',
      ),
    ],
  ),
  'gtk_progress_bar_set_inverted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'gboolean',
        name = 'inverted',
      ),
    ],
  ),
  'gtk_progress_bar_get_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_get_fraction': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_get_pulse_step': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_get_inverted': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'mode',
      ),
    ],
  ),
  'gtk_progress_bar_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_progress_bar_set_show_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
      Param(
        type = 'gboolean',
        name = 'show_text',
      ),
    ],
  ),
  'gtk_progress_bar_get_show_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkProgressBar *',
        name = 'pbar',
      ),
    ],
  ),
  'gtk_toggle_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toggle_action_new': Spec(
    return_type = 'GtkToggleAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_toggle_action_toggled': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_toggle_action_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_toggle_action_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_toggle_action_set_draw_as_radio': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_as_radio',
      ),
    ],
  ),
  'gtk_toggle_action_get_draw_as_radio': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'action',
      ),
    ],
  ),
  '_gtk_toggle_action_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleAction *',
        name = 'toggle_action',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_radio_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_radio_action_new': Spec(
    return_type = 'GtkRadioAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'gint',
        name = 'value',
      ),
    ],
  ),
  'gtk_radio_action_get_group': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkRadioAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_radio_action_set_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioAction *',
        name = 'action',
      ),
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_action_join_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioAction *',
        name = 'action',
      ),
      Param(
        type = 'GtkRadioAction *',
        name = 'group_source',
      ),
    ],
  ),
  'gtk_radio_action_get_current_value': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRadioAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_radio_action_set_current_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioAction *',
        name = 'action',
      ),
      Param(
        type = 'gint',
        name = 'current_value',
      ),
    ],
  ),
  'gtk_radio_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_radio_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_button_new_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_group_member',
      ),
    ],
  ),
  'gtk_radio_button_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_button_new_with_label_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_group_member',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_button_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_button_new_with_mnemonic_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_group_member',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_button_get_group': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_button',
      ),
    ],
  ),
  'gtk_radio_button_set_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_button',
      ),
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_button_join_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioButton *',
        name = 'radio_button',
      ),
      Param(
        type = 'GtkRadioButton *',
        name = 'group_source',
      ),
    ],
  ),
  'gtk_radio_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_radio_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_menu_item_new_with_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_menu_item_new_with_mnemonic': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_menu_item_new_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioMenuItem *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_menu_item_new_with_mnemonic_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioMenuItem *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_menu_item_new_with_label_from_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRadioMenuItem *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_radio_menu_item_get_group': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkRadioMenuItem *',
        name = 'radio_menu_item',
      ),
    ],
  ),
  'gtk_radio_menu_item_set_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioMenuItem *',
        name = 'radio_menu_item',
      ),
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_toggle_tool_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toggle_tool_button_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
    ],
  ),
  'gtk_toggle_tool_button_new_from_stock': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_toggle_tool_button_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToggleToolButton *',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_toggle_tool_button_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToggleToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_radio_tool_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_radio_tool_button_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_tool_button_new_from_stock': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_radio_tool_button_new_from_widget': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkRadioToolButton *',
        name = 'group',
      ),
    ],
  ),
  'gtk_radio_tool_button_new_with_stock_from_widget': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkRadioToolButton *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_radio_tool_button_get_group': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkRadioToolButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_radio_tool_button_set_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRadioToolButton *',
        name = 'button',
      ),
      Param(
        type = 'GSList *',
        name = 'group',
      ),
    ],
  ),
  'gtk_range_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_range_set_adjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_range_get_adjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_inverted': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_range_get_inverted': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_flippable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'flippable',
      ),
    ],
  ),
  'gtk_range_get_flippable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_slider_size_fixed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'size_fixed',
      ),
    ],
  ),
  'gtk_range_get_slider_size_fixed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_min_slider_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gint',
        name = 'min_size',
      ),
    ],
  ),
  'gtk_range_get_min_slider_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_get_range_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'range_rect',
      ),
    ],
  ),
  'gtk_range_get_slider_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gint *',
        name = 'slider_start',
      ),
      Param(
        type = 'gint *',
        name = 'slider_end',
      ),
    ],
  ),
  'gtk_range_set_lower_stepper_sensitivity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'GtkSensitivityType',
        name = 'sensitivity',
      ),
    ],
  ),
  'gtk_range_get_lower_stepper_sensitivity': Spec(
    return_type = 'GtkSensitivityType',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_upper_stepper_sensitivity': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'GtkSensitivityType',
        name = 'sensitivity',
      ),
    ],
  ),
  'gtk_range_get_upper_stepper_sensitivity': Spec(
    return_type = 'GtkSensitivityType',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_increments': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
      Param(
        type = 'gdouble',
        name = 'page',
      ),
    ],
  ),
  'gtk_range_set_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
    ],
  ),
  'gtk_range_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_range_get_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_show_fill_level': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'show_fill_level',
      ),
    ],
  ),
  'gtk_range_get_show_fill_level': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_restrict_to_fill_level': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'restrict_to_fill_level',
      ),
    ],
  ),
  'gtk_range_get_restrict_to_fill_level': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_fill_level': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gdouble',
        name = 'fill_level',
      ),
    ],
  ),
  'gtk_range_get_fill_level': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  'gtk_range_set_round_digits': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gint',
        name = 'round_digits',
      ),
    ],
  ),
  'gtk_range_get_round_digits': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  '_gtk_range_get_wheel_delta': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'GdkEventScroll *',
        name = 'event',
      ),
    ],
  ),
  '_gtk_range_set_has_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'has_origin',
      ),
    ],
  ),
  '_gtk_range_get_has_origin': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
    ],
  ),
  '_gtk_range_set_stop_values': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gdouble *',
        name = 'values',
      ),
      Param(
        type = 'gint',
        name = 'n_values',
      ),
    ],
  ),
  '_gtk_range_get_stop_positions': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gint **',
        name = 'values',
      ),
    ],
  ),
  '_gtk_range_set_steppers': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRange *',
        name = 'range',
      ),
      Param(
        type = 'gboolean',
        name = 'has_a',
      ),
      Param(
        type = 'gboolean',
        name = 'has_b',
      ),
      Param(
        type = 'gboolean',
        name = 'has_c',
      ),
      Param(
        type = 'gboolean',
        name = 'has_d',
      ),
    ],
  ),
  'gtk_recent_manager_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_recent_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_manager_new': Spec(
    return_type = 'GtkRecentManager *',
    parameters = [
    ],
  ),
  'gtk_recent_manager_get_default': Spec(
    return_type = 'GtkRecentManager *',
    parameters = [
    ],
  ),
  'gtk_recent_manager_add_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_recent_manager_add_full': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const GtkRecentData *',
        name = 'recent_data',
      ),
    ],
  ),
  'gtk_recent_manager_remove_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_manager_lookup_item': Spec(
    return_type = 'GtkRecentInfo *',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_manager_has_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_recent_manager_move_item': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'const gchar *',
        name = 'new_uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_manager_get_items': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_recent_manager_purge_items': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_info_ref': Spec(
    return_type = 'GtkRecentInfo *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_uri': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_display_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_description': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_mime_type': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_added': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_modified': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_visited': Spec(
    return_type = 'time_t',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_private_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_application_info': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'app_name',
      ),
      Param(
        type = 'const gchar **',
        name = 'app_exec',
      ),
      Param(
        type = 'guint *',
        name = 'count',
      ),
      Param(
        type = 'time_t *',
        name = 'time_',
      ),
    ],
  ),
  'gtk_recent_info_create_app_info': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'app_name',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_info_get_applications': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'gtk_recent_info_last_application': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_has_application': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'app_name',
      ),
    ],
  ),
  'gtk_recent_info_get_groups': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'gtk_recent_info_has_group': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'group_name',
      ),
    ],
  ),
  'gtk_recent_info_get_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
    ],
  ),
  'gtk_recent_info_get_gicon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_short_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_uri_display': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_get_age': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_is_local': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_exists': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info',
      ),
    ],
  ),
  'gtk_recent_info_match': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentInfo *',
        name = 'info_a',
      ),
      Param(
        type = 'GtkRecentInfo *',
        name = 'info_b',
      ),
    ],
  ),
  '_gtk_recent_manager_sync': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_recent_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_action_new': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_recent_action_new_for_manager': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
      Param(
        type = 'const gchar *',
        name = 'tooltip',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_recent_action_get_show_numbers': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentAction *',
        name = 'action',
      ),
    ],
  ),
  'gtk_recent_action_set_show_numbers': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentAction *',
        name = 'action',
      ),
      Param(
        type = 'gboolean',
        name = 'show_numbers',
      ),
    ],
  ),
  'gtk_recent_filter_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_filter_new': Spec(
    return_type = 'GtkRecentFilter *',
    parameters = [
    ],
  ),
  'gtk_recent_filter_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_recent_filter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_filter_add_mime_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
    ],
  ),
  'gtk_recent_filter_add_pattern': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  'gtk_recent_filter_add_pixbuf_formats': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_filter_add_application': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'application',
      ),
    ],
  ),
  'gtk_recent_filter_add_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const gchar *',
        name = 'group',
      ),
    ],
  ),
  'gtk_recent_filter_add_age': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'gint',
        name = 'days',
      ),
    ],
  ),
  'gtk_recent_filter_add_custom': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'GtkRecentFilterFlags',
        name = 'needed',
      ),
      Param(
        type = 'GtkRecentFilterFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'gtk_recent_filter_get_needed': Spec(
    return_type = 'GtkRecentFilterFlags',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_filter_filter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
      Param(
        type = 'const GtkRecentFilterInfo *',
        name = 'filter_info',
      ),
    ],
  ),
  'gtk_recent_chooser_error_quark': Spec(
    return_type = 'GQuark',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_set_show_private': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_private',
      ),
    ],
  ),
  'gtk_recent_chooser_get_show_private': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_show_not_found': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_not_found',
      ),
    ],
  ),
  'gtk_recent_chooser_get_show_not_found': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_select_multiple': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'select_multiple',
      ),
    ],
  ),
  'gtk_recent_chooser_get_select_multiple': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gint',
        name = 'limit',
      ),
    ],
  ),
  'gtk_recent_chooser_get_limit': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_local_only': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'local_only',
      ),
    ],
  ),
  'gtk_recent_chooser_get_local_only': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_show_tips': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_tips',
      ),
    ],
  ),
  'gtk_recent_chooser_get_show_tips': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_show_icons': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gboolean',
        name = 'show_icons',
      ),
    ],
  ),
  'gtk_recent_chooser_get_show_icons': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_sort_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkRecentSortType',
        name = 'sort_type',
      ),
    ],
  ),
  'gtk_recent_chooser_get_sort_type': Spec(
    return_type = 'GtkRecentSortType',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_sort_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkRecentSortFunc',
        name = 'sort_func',
      ),
      Param(
        type = 'gpointer',
        name = 'sort_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'data_destroy',
      ),
    ],
  ),
  'gtk_recent_chooser_set_current_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_chooser_get_current_uri': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_get_current_item': Spec(
    return_type = 'GtkRecentInfo *',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_select_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_recent_chooser_unselect_uri': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
    ],
  ),
  'gtk_recent_chooser_select_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_unselect_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_get_items': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_get_uris': Spec(
    return_type = 'gchar **',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'gtk_recent_chooser_add_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_chooser_remove_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_chooser_list_filters': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_set_filter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
      Param(
        type = 'GtkRecentFilter *',
        name = 'filter',
      ),
    ],
  ),
  'gtk_recent_chooser_get_filter': Spec(
    return_type = 'GtkRecentFilter *',
    parameters = [
      Param(
        type = 'GtkRecentChooser *',
        name = 'chooser',
      ),
    ],
  ),
  'gtk_recent_chooser_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_recent_chooser_dialog_new_for_manager': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
      Param(
        type = 'GtkWindow *',
        name = 'parent',
      ),
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_button_text',
      ),
    ],
  ),
  'gtk_recent_chooser_menu_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_menu_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_menu_new_for_manager': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_recent_chooser_menu_get_show_numbers': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkRecentChooserMenu *',
        name = 'menu',
      ),
    ],
  ),
  'gtk_recent_chooser_menu_set_show_numbers': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkRecentChooserMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gboolean',
        name = 'show_numbers',
      ),
    ],
  ),
  'gtk_recent_chooser_widget_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_widget_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_widget_new_for_manager': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkRecentManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_scale_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scale_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_scale_new_with_range': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
    ],
  ),
  'gtk_scale_set_digits': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'gint',
        name = 'digits',
      ),
    ],
  ),
  'gtk_scale_get_digits': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_set_draw_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'gboolean',
        name = 'draw_value',
      ),
    ],
  ),
  'gtk_scale_get_draw_value': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_set_has_origin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'gboolean',
        name = 'has_origin',
      ),
    ],
  ),
  'gtk_scale_get_has_origin': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_set_value_pos': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'pos',
      ),
    ],
  ),
  'gtk_scale_get_value_pos': Spec(
    return_type = 'GtkPositionType',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_get_layout': Spec(
    return_type = 'PangoLayout *',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_get_layout_offsets': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
    ],
  ),
  'gtk_scale_add_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'position',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_scale_clear_marks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScale *',
        name = 'scale',
      ),
    ],
  ),
  'gtk_scale_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scale_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
      Param(
        type = 'const gchar **',
        name = 'icons',
      ),
    ],
  ),
  'gtk_scale_button_set_icons': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
      Param(
        type = 'const gchar **',
        name = 'icons',
      ),
    ],
  ),
  'gtk_scale_button_get_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_scale_button_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_scale_button_get_adjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_scale_button_set_adjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_scale_button_get_plus_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_scale_button_get_minus_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_scale_button_get_popup': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkScaleButton *',
        name = 'button',
      ),
    ],
  ),
  'gtk_scrollable_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scrollable_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
    ],
  ),
  'gtk_scrollable_set_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'hadjustment',
      ),
    ],
  ),
  'gtk_scrollable_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
    ],
  ),
  'gtk_scrollable_set_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'vadjustment',
      ),
    ],
  ),
  'gtk_scrollable_get_hscroll_policy': Spec(
    return_type = 'GtkScrollablePolicy',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
    ],
  ),
  'gtk_scrollable_set_hscroll_policy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
      Param(
        type = 'GtkScrollablePolicy',
        name = 'policy',
      ),
    ],
  ),
  'gtk_scrollable_get_vscroll_policy': Spec(
    return_type = 'GtkScrollablePolicy',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
    ],
  ),
  'gtk_scrollable_set_vscroll_policy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrollable *',
        name = 'scrollable',
      ),
      Param(
        type = 'GtkScrollablePolicy',
        name = 'policy',
      ),
    ],
  ),
  'gtk_scrollbar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scrollbar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_scrolled_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scrolled_window_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'hadjustment',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'vadjustment',
      ),
    ],
  ),
  'gtk_scrolled_window_set_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'hadjustment',
      ),
    ],
  ),
  'gtk_scrolled_window_set_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'vadjustment',
      ),
    ],
  ),
  'gtk_scrolled_window_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_get_hscrollbar': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_get_vscrollbar': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_set_policy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkPolicyType',
        name = 'hscrollbar_policy',
      ),
      Param(
        type = 'GtkPolicyType',
        name = 'vscrollbar_policy',
      ),
    ],
  ),
  'gtk_scrolled_window_get_policy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkPolicyType *',
        name = 'hscrollbar_policy',
      ),
      Param(
        type = 'GtkPolicyType *',
        name = 'vscrollbar_policy',
      ),
    ],
  ),
  'gtk_scrolled_window_set_placement': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkCornerType',
        name = 'window_placement',
      ),
    ],
  ),
  'gtk_scrolled_window_unset_placement': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_get_placement': Spec(
    return_type = 'GtkCornerType',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_set_shadow_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_scrolled_window_get_shadow_type': Spec(
    return_type = 'GtkShadowType',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_add_with_viewport': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
    ],
  ),
  'gtk_scrolled_window_get_min_content_width': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_set_min_content_width': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
    ],
  ),
  'gtk_scrolled_window_get_min_content_height': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_set_min_content_height': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_scrolled_window_set_kinetic_scrolling': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'gboolean',
        name = 'kinetic_scrolling',
      ),
    ],
  ),
  'gtk_scrolled_window_get_kinetic_scrolling': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_scrolled_window_set_capture_button_press': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
      Param(
        type = 'gboolean',
        name = 'capture_button_press',
      ),
    ],
  ),
  'gtk_scrolled_window_get_capture_button_press': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  '_gtk_scrolled_window_get_scrollbar_spacing': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkScrolledWindow *',
        name = 'scrolled_window',
      ),
    ],
  ),
  'gtk_search_entry_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_search_entry_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_separator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_separator_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_separator_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_separator_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_separator_tool_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_separator_tool_item_new': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
    ],
  ),
  'gtk_separator_tool_item_get_draw': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSeparatorToolItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_separator_tool_item_set_draw': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSeparatorToolItem *',
        name = 'item',
      ),
      Param(
        type = 'gboolean',
        name = 'draw',
      ),
    ],
  ),
  'gtk_settings_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_settings_get_default': Spec(
    return_type = 'GtkSettings *',
    parameters = [
    ],
  ),
  'gtk_settings_get_for_screen': Spec(
    return_type = 'GtkSettings *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_settings_install_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_settings_install_property_parser': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'GtkRcPropertyParser',
        name = 'parser',
      ),
    ],
  ),
  'gtk_rc_property_parse_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GString *',
        name = 'gstring',
      ),
      Param(
        type = 'GValue *',
        name = 'property_value',
      ),
    ],
  ),
  'gtk_rc_property_parse_enum': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GString *',
        name = 'gstring',
      ),
      Param(
        type = 'GValue *',
        name = 'property_value',
      ),
    ],
  ),
  'gtk_rc_property_parse_flags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GString *',
        name = 'gstring',
      ),
      Param(
        type = 'GValue *',
        name = 'property_value',
      ),
    ],
  ),
  'gtk_rc_property_parse_requisition': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GString *',
        name = 'gstring',
      ),
      Param(
        type = 'GValue *',
        name = 'property_value',
      ),
    ],
  ),
  'gtk_rc_property_parse_border': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GParamSpec *',
        name = 'pspec',
      ),
      Param(
        type = 'const GString *',
        name = 'gstring',
      ),
      Param(
        type = 'GValue *',
        name = 'property_value',
      ),
    ],
  ),
  'gtk_settings_set_property_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GtkSettingsValue *',
        name = 'svalue',
      ),
    ],
  ),
  'gtk_settings_set_string_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'v_string',
      ),
      Param(
        type = 'const gchar *',
        name = 'origin',
      ),
    ],
  ),
  'gtk_settings_set_long_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'glong',
        name = 'v_long',
      ),
      Param(
        type = 'const gchar *',
        name = 'origin',
      ),
    ],
  ),
  'gtk_settings_set_double_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gdouble',
        name = 'v_double',
      ),
      Param(
        type = 'const gchar *',
        name = 'origin',
      ),
    ],
  ),
  'gtk_show_uri': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'const gchar *',
        name = 'uri',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_distribute_natural_allocation': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'gint',
        name = 'extra_space',
      ),
      Param(
        type = 'guint',
        name = 'n_requested_sizes',
      ),
      Param(
        type = 'GtkRequestedSize *',
        name = 'sizes',
      ),
    ],
  ),
  'gtk_spin_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_spin_button_configure': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'climb_rate',
      ),
      Param(
        type = 'guint',
        name = 'digits',
      ),
    ],
  ),
  'gtk_spin_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
      Param(
        type = 'gdouble',
        name = 'climb_rate',
      ),
      Param(
        type = 'guint',
        name = 'digits',
      ),
    ],
  ),
  'gtk_spin_button_new_with_range': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
    ],
  ),
  'gtk_spin_button_set_adjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_spin_button_get_adjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_set_digits': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'guint',
        name = 'digits',
      ),
    ],
  ),
  'gtk_spin_button_get_digits': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_set_increments': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
      Param(
        type = 'gdouble',
        name = 'page',
      ),
    ],
  ),
  'gtk_spin_button_get_increments': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gdouble *',
        name = 'step',
      ),
      Param(
        type = 'gdouble *',
        name = 'page',
      ),
    ],
  ),
  'gtk_spin_button_set_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
    ],
  ),
  'gtk_spin_button_get_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gdouble *',
        name = 'min',
      ),
      Param(
        type = 'gdouble *',
        name = 'max',
      ),
    ],
  ),
  'gtk_spin_button_get_value': Spec(
    return_type = 'gdouble',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_get_value_as_int': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gdouble',
        name = 'value',
      ),
    ],
  ),
  'gtk_spin_button_set_update_policy': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'GtkSpinButtonUpdatePolicy',
        name = 'policy',
      ),
    ],
  ),
  'gtk_spin_button_get_update_policy': Spec(
    return_type = 'GtkSpinButtonUpdatePolicy',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_set_numeric': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gboolean',
        name = 'numeric',
      ),
    ],
  ),
  'gtk_spin_button_get_numeric': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_spin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'GtkSpinType',
        name = 'direction',
      ),
      Param(
        type = 'gdouble',
        name = 'increment',
      ),
    ],
  ),
  'gtk_spin_button_set_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gboolean',
        name = 'wrap',
      ),
    ],
  ),
  'gtk_spin_button_get_wrap': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_set_snap_to_ticks': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'gboolean',
        name = 'snap_to_ticks',
      ),
    ],
  ),
  'gtk_spin_button_get_snap_to_ticks': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  'gtk_spin_button_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
    ],
  ),
  '_gtk_spin_button_get_panels': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spin_button',
      ),
      Param(
        type = 'GdkWindow **',
        name = 'down_panel',
      ),
      Param(
        type = 'GdkWindow **',
        name = 'up_panel',
      ),
    ],
  ),
  'gtk_spinner_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_spinner_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_spinner_start': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinner *',
        name = 'spinner',
      ),
    ],
  ),
  'gtk_spinner_stop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSpinner *',
        name = 'spinner',
      ),
    ],
  ),
  'gtk_statusbar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_statusbar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_statusbar_get_context_id': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
      Param(
        type = 'const gchar *',
        name = 'context_description',
      ),
    ],
  ),
  'gtk_statusbar_push': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
      Param(
        type = 'guint',
        name = 'context_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_statusbar_pop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
      Param(
        type = 'guint',
        name = 'context_id',
      ),
    ],
  ),
  'gtk_statusbar_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
      Param(
        type = 'guint',
        name = 'context_id',
      ),
      Param(
        type = 'guint',
        name = 'message_id',
      ),
    ],
  ),
  'gtk_statusbar_remove_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
      Param(
        type = 'guint',
        name = 'context_id',
      ),
    ],
  ),
  'gtk_statusbar_get_message_area': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkStatusbar *',
        name = 'statusbar',
      ),
    ],
  ),
  'gtk_status_icon_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_status_icon_new': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
    ],
  ),
  'gtk_status_icon_new_from_pixbuf': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_status_icon_new_from_file': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_status_icon_new_from_stock': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_status_icon_new_from_icon_name': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_status_icon_new_from_gicon': Spec(
    return_type = 'GtkStatusIcon *',
    parameters = [
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_status_icon_set_from_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_status_icon_set_from_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_status_icon_set_from_stock': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_status_icon_set_from_icon_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'icon_name',
      ),
    ],
  ),
  'gtk_status_icon_set_from_gicon': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'GIcon *',
        name = 'icon',
      ),
    ],
  ),
  'gtk_status_icon_get_storage_type': Spec(
    return_type = 'GtkImageType',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_pixbuf': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_stock': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_icon_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_gicon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_set_screen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gtk_status_icon_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_set_has_tooltip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'gboolean',
        name = 'has_tooltip',
      ),
    ],
  ),
  'gtk_status_icon_set_tooltip_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_status_icon_set_tooltip_markup': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'markup',
      ),
    ],
  ),
  'gtk_status_icon_set_title': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_status_icon_get_title': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_status_icon_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'gboolean',
        name = 'visible',
      ),
    ],
  ),
  'gtk_status_icon_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_is_embedded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_position_menu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkMenu *',
        name = 'menu',
      ),
      Param(
        type = 'gint *',
        name = 'x',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gboolean *',
        name = 'push_in',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'gtk_status_icon_get_geometry': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
      Param(
        type = 'GdkScreen **',
        name = 'screen',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'area',
      ),
      Param(
        type = 'GtkOrientation *',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_status_icon_get_has_tooltip': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_tooltip_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_tooltip_markup': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_status_icon_get_x11_window_id': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GtkStatusIcon *',
        name = 'status_icon',
      ),
    ],
  ),
  'gtk_switch_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_switch_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_switch_set_active': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSwitch *',
        name = 'sw',
      ),
      Param(
        type = 'gboolean',
        name = 'is_active',
      ),
    ],
  ),
  'gtk_switch_get_active': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSwitch *',
        name = 'sw',
      ),
    ],
  ),
  'gtk_text_tag_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_tag_table_new': Spec(
    return_type = 'GtkTextTagTable *',
    parameters = [
    ],
  ),
  'gtk_text_tag_table_add': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_tag_table_remove': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  'gtk_text_tag_table_lookup': Spec(
    return_type = 'GtkTextTag *',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_text_tag_table_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'GtkTextTagTableForeach',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_text_tag_table_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
    ],
  ),
  '_gtk_text_tag_table_add_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'gpointer',
        name = 'buffer',
      ),
    ],
  ),
  '_gtk_text_tag_table_remove_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
      Param(
        type = 'gpointer',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_mark_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_mark_new': Spec(
    return_type = 'GtkTextMark *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'gboolean',
        name = 'left_gravity',
      ),
    ],
  ),
  'gtk_text_mark_set_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_text_mark_get_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_mark_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_mark_get_deleted': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_mark_get_buffer': Spec(
    return_type = 'GtkTextBuffer *',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_mark_get_left_gravity': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_buffer_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_buffer_new': Spec(
    return_type = 'GtkTextBuffer *',
    parameters = [
      Param(
        type = 'GtkTextTagTable *',
        name = 'table',
      ),
    ],
  ),
  'gtk_text_buffer_get_line_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_get_char_count': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_get_tag_table': Spec(
    return_type = 'GtkTextTagTable *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_set_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'gtk_text_buffer_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'gtk_text_buffer_insert_at_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
    ],
  ),
  'gtk_text_buffer_insert_interactive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_insert_interactive_at_cursor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_insert_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_insert_range_interactive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_insert_with_tags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'first_tag',
      ),
    ],
  ),
  'gtk_text_buffer_insert_with_tags_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'len',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_tag_name',
      ),
    ],
  ),
  'gtk_text_buffer_delete': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_delete_interactive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start_iter',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end_iter',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_backspace': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gboolean',
        name = 'interactive',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_get_text': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
      Param(
        type = 'gboolean',
        name = 'include_hidden_chars',
      ),
    ],
  ),
  'gtk_text_buffer_get_slice': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
      Param(
        type = 'gboolean',
        name = 'include_hidden_chars',
      ),
    ],
  ),
  'gtk_text_buffer_insert_pixbuf': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GdkPixbuf *',
        name = 'pixbuf',
      ),
    ],
  ),
  'gtk_text_buffer_insert_child_anchor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextChildAnchor *',
        name = 'anchor',
      ),
    ],
  ),
  'gtk_text_buffer_create_child_anchor': Spec(
    return_type = 'GtkTextChildAnchor *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_buffer_add_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'where',
      ),
    ],
  ),
  'gtk_text_buffer_create_mark': Spec(
    return_type = 'GtkTextMark *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'mark_name',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'where',
      ),
      Param(
        type = 'gboolean',
        name = 'left_gravity',
      ),
    ],
  ),
  'gtk_text_buffer_move_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'where',
      ),
    ],
  ),
  'gtk_text_buffer_delete_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_buffer_get_mark': Spec(
    return_type = 'GtkTextMark *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_text_buffer_move_mark_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'where',
      ),
    ],
  ),
  'gtk_text_buffer_delete_mark_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_text_buffer_get_insert': Spec(
    return_type = 'GtkTextMark *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_get_selection_bound': Spec(
    return_type = 'GtkTextMark *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_place_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'where',
      ),
    ],
  ),
  'gtk_text_buffer_select_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'ins',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'bound',
      ),
    ],
  ),
  'gtk_text_buffer_apply_tag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_remove_tag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_apply_tag_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_remove_tag_by_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_remove_all_tags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_create_tag': Spec(
    return_type = 'GtkTextTag *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'tag_name',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_line_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'line_number',
      ),
      Param(
        type = 'gint',
        name = 'char_offset',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_line_index': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'line_number',
      ),
      Param(
        type = 'gint',
        name = 'byte_index',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_offset': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'char_offset',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'line_number',
      ),
    ],
  ),
  'gtk_text_buffer_get_start_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_buffer_get_end_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_buffer_get_bounds': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_buffer_get_iter_at_child_anchor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTextChildAnchor *',
        name = 'anchor',
      ),
    ],
  ),
  'gtk_text_buffer_get_modified': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_set_modified': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_text_buffer_get_has_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_add_selection_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_text_buffer_remove_selection_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_text_buffer_cut_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_copy_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
    ],
  ),
  'gtk_text_buffer_paste_clipboard': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkClipboard *',
        name = 'clipboard',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'override_location',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_get_selection_bounds': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_delete_selection': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gboolean',
        name = 'interactive',
      ),
      Param(
        type = 'gboolean',
        name = 'default_editable',
      ),
    ],
  ),
  'gtk_text_buffer_begin_user_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_end_user_action': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_get_copy_target_list': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_buffer_get_paste_target_list': Spec(
    return_type = 'GtkTargetList *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  '_gtk_text_buffer_spew': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  '_gtk_text_buffer_get_btree': Spec(
    return_type = 'GtkTextBTree *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  '_gtk_text_buffer_get_line_log_attrs': Spec(
    return_type = 'const PangoLogAttr *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'anywhere_in_line',
      ),
      Param(
        type = 'gint *',
        name = 'char_len',
      ),
    ],
  ),
  '_gtk_text_buffer_notify_will_remove_tag': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GtkTextTag *',
        name = 'tag',
      ),
    ],
  ),
  '_gtk_text_buffer_get_text_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'position',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  '_gtk_text_buffer_get_text_at': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'position',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  '_gtk_text_buffer_get_text_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'AtkTextBoundary',
        name = 'boundary_type',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'position',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'end',
      ),
    ],
  ),
  'gtk_text_buffer_register_serialize_format': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
      Param(
        type = 'GtkTextBufferSerializeFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_destroy',
      ),
    ],
  ),
  'gtk_text_buffer_register_serialize_tagset': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagset_name',
      ),
    ],
  ),
  'gtk_text_buffer_register_deserialize_format': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'mime_type',
      ),
      Param(
        type = 'GtkTextBufferDeserializeFunc',
        name = 'function',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'user_data_destroy',
      ),
    ],
  ),
  'gtk_text_buffer_register_deserialize_tagset': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'const gchar *',
        name = 'tagset_name',
      ),
    ],
  ),
  'gtk_text_buffer_unregister_serialize_format': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
    ],
  ),
  'gtk_text_buffer_unregister_deserialize_format': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
    ],
  ),
  'gtk_text_buffer_deserialize_set_can_create_tags': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
      Param(
        type = 'gboolean',
        name = 'can_create_tags',
      ),
    ],
  ),
  'gtk_text_buffer_deserialize_get_can_create_tags': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
    ],
  ),
  'gtk_text_buffer_get_serialize_formats': Spec(
    return_type = 'GdkAtom *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gint *',
        name = 'n_formats',
      ),
    ],
  ),
  'gtk_text_buffer_get_deserialize_formats': Spec(
    return_type = 'GdkAtom *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
      Param(
        type = 'gint *',
        name = 'n_formats',
      ),
    ],
  ),
  'gtk_text_buffer_serialize': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'register_buffer',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'content_buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'start',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'end',
      ),
      Param(
        type = 'gsize *',
        name = 'length',
      ),
    ],
  ),
  'gtk_text_buffer_deserialize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'register_buffer',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'content_buffer',
      ),
      Param(
        type = 'GdkAtom',
        name = 'format',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'const guint8 *',
        name = 'data',
      ),
      Param(
        type = 'gsize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_text_view_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_view_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_text_view_new_with_buffer': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_view_set_buffer': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextBuffer *',
        name = 'buffer',
      ),
    ],
  ),
  'gtk_text_view_get_buffer': Spec(
    return_type = 'GtkTextBuffer *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_scroll_to_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gdouble',
        name = 'within_margin',
      ),
      Param(
        type = 'gboolean',
        name = 'use_align',
      ),
      Param(
        type = 'gdouble',
        name = 'xalign',
      ),
      Param(
        type = 'gdouble',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_text_view_scroll_to_mark': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
      Param(
        type = 'gdouble',
        name = 'within_margin',
      ),
      Param(
        type = 'gboolean',
        name = 'use_align',
      ),
      Param(
        type = 'gdouble',
        name = 'xalign',
      ),
      Param(
        type = 'gdouble',
        name = 'yalign',
      ),
    ],
  ),
  'gtk_text_view_scroll_mark_onscreen': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_view_move_mark_onscreen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextMark *',
        name = 'mark',
      ),
    ],
  ),
  'gtk_text_view_place_cursor_onscreen': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_get_visible_rect': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'visible_rect',
      ),
    ],
  ),
  'gtk_text_view_set_cursor_visible': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_text_view_get_cursor_visible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_get_cursor_locations': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'strong',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'weak',
      ),
    ],
  ),
  'gtk_text_view_get_iter_location': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'GdkRectangle *',
        name = 'location',
      ),
    ],
  ),
  'gtk_text_view_get_iter_at_location': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_text_view_get_iter_at_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'trailing',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_text_view_get_line_yrange': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'height',
      ),
    ],
  ),
  'gtk_text_view_get_line_at_y': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'target_iter',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint *',
        name = 'line_top',
      ),
    ],
  ),
  'gtk_text_view_buffer_to_window_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'win',
      ),
      Param(
        type = 'gint',
        name = 'buffer_x',
      ),
      Param(
        type = 'gint',
        name = 'buffer_y',
      ),
      Param(
        type = 'gint *',
        name = 'window_x',
      ),
      Param(
        type = 'gint *',
        name = 'window_y',
      ),
    ],
  ),
  'gtk_text_view_window_to_buffer_coords': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'win',
      ),
      Param(
        type = 'gint',
        name = 'window_x',
      ),
      Param(
        type = 'gint',
        name = 'window_y',
      ),
      Param(
        type = 'gint *',
        name = 'buffer_x',
      ),
      Param(
        type = 'gint *',
        name = 'buffer_y',
      ),
    ],
  ),
  'gtk_text_view_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_get_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'win',
      ),
    ],
  ),
  'gtk_text_view_get_window_type': Spec(
    return_type = 'GtkTextWindowType',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_text_view_set_border_window_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'type',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
    ],
  ),
  'gtk_text_view_get_border_window_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_text_view_forward_display_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_view_backward_display_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_view_forward_display_line_end': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_view_backward_display_line_start': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_view_starts_display_line': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'const GtkTextIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_text_view_move_visually': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkTextIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'count',
      ),
    ],
  ),
  'gtk_text_view_im_context_filter_keypress': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GdkEventKey *',
        name = 'event',
      ),
    ],
  ),
  'gtk_text_view_reset_im_context': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_add_child_at_anchor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkTextChildAnchor *',
        name = 'anchor',
      ),
    ],
  ),
  'gtk_text_view_add_child_in_window': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'GtkTextWindowType',
        name = 'which_window',
      ),
      Param(
        type = 'gint',
        name = 'xpos',
      ),
      Param(
        type = 'gint',
        name = 'ypos',
      ),
    ],
  ),
  'gtk_text_view_move_child': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'gint',
        name = 'xpos',
      ),
      Param(
        type = 'gint',
        name = 'ypos',
      ),
    ],
  ),
  'gtk_text_view_set_wrap_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkWrapMode',
        name = 'wrap_mode',
      ),
    ],
  ),
  'gtk_text_view_get_wrap_mode': Spec(
    return_type = 'GtkWrapMode',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_editable': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gboolean',
        name = 'setting',
      ),
    ],
  ),
  'gtk_text_view_get_editable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_overwrite': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gboolean',
        name = 'overwrite',
      ),
    ],
  ),
  'gtk_text_view_get_overwrite': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_accepts_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gboolean',
        name = 'accepts_tab',
      ),
    ],
  ),
  'gtk_text_view_get_accepts_tab': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_pixels_above_lines': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'pixels_above_lines',
      ),
    ],
  ),
  'gtk_text_view_get_pixels_above_lines': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_pixels_below_lines': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'pixels_below_lines',
      ),
    ],
  ),
  'gtk_text_view_get_pixels_below_lines': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_pixels_inside_wrap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'pixels_inside_wrap',
      ),
    ],
  ),
  'gtk_text_view_get_pixels_inside_wrap': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_justification': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkJustification',
        name = 'justification',
      ),
    ],
  ),
  'gtk_text_view_get_justification': Spec(
    return_type = 'GtkJustification',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_left_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'left_margin',
      ),
    ],
  ),
  'gtk_text_view_get_left_margin': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_right_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'right_margin',
      ),
    ],
  ),
  'gtk_text_view_get_right_margin': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_indent': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'gint',
        name = 'indent',
      ),
    ],
  ),
  'gtk_text_view_get_indent': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_tabs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'PangoTabArray *',
        name = 'tabs',
      ),
    ],
  ),
  'gtk_text_view_get_tabs': Spec(
    return_type = 'PangoTabArray *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_get_default_attributes': Spec(
    return_type = 'GtkTextAttributes *',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_input_purpose': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkInputPurpose',
        name = 'purpose',
      ),
    ],
  ),
  'gtk_text_view_get_input_purpose': Spec(
    return_type = 'GtkInputPurpose',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_text_view_set_input_hints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
      Param(
        type = 'GtkInputHints',
        name = 'hints',
      ),
    ],
  ),
  'gtk_text_view_get_input_hints': Spec(
    return_type = 'GtkInputHints',
    parameters = [
      Param(
        type = 'GtkTextView *',
        name = 'text_view',
      ),
    ],
  ),
  'gtk_theming_engine_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_theming_engine_register_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name_space',
      ),
      Param(
        type = 'GtkStylePropertyParser',
        name = 'parse_func',
      ),
      Param(
        type = 'GParamSpec *',
        name = 'pspec',
      ),
    ],
  ),
  'gtk_theming_engine_get_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'const gchar *',
        name = 'property',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_theming_engine_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_theming_engine_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_theming_engine_get_style_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_theming_engine_get_style_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'va_list',
        name = 'args',
      ),
    ],
  ),
  'gtk_theming_engine_get_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_theming_engine_lookup_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'const gchar *',
        name = 'color_name',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_theming_engine_get_path': Spec(
    return_type = 'const GtkWidgetPath *',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_theming_engine_has_class': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'const gchar *',
        name = 'style_class',
      ),
    ],
  ),
  'gtk_theming_engine_has_region': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'const gchar *',
        name = 'style_region',
      ),
      Param(
        type = 'GtkRegionFlags *',
        name = 'flags',
      ),
    ],
  ),
  'gtk_theming_engine_get_state': Spec(
    return_type = 'GtkStateFlags',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_theming_engine_state_is_running': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'gdouble *',
        name = 'progress',
      ),
    ],
  ),
  'gtk_theming_engine_get_direction': Spec(
    return_type = 'GtkTextDirection',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_theming_engine_get_junction_sides': Spec(
    return_type = 'GtkJunctionSides',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_theming_engine_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_theming_engine_get_background_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_theming_engine_get_border_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'color',
      ),
    ],
  ),
  'gtk_theming_engine_get_border': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'border',
      ),
    ],
  ),
  'gtk_theming_engine_get_padding': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'padding',
      ),
    ],
  ),
  'gtk_theming_engine_get_margin': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
      Param(
        type = 'GtkBorder *',
        name = 'margin',
      ),
    ],
  ),
  'gtk_theming_engine_get_font': Spec(
    return_type = 'const PangoFontDescription *',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
      Param(
        type = 'GtkStateFlags',
        name = 'state',
      ),
    ],
  ),
  'gtk_theming_engine_load': Spec(
    return_type = 'GtkThemingEngine *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_theming_engine_get_screen': Spec(
    return_type = 'GdkScreen *',
    parameters = [
      Param(
        type = 'GtkThemingEngine *',
        name = 'engine',
      ),
    ],
  ),
  'gtk_toolbar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toolbar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_toolbar_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'item',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_toolbar_get_item_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_toolbar_get_n_items': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_get_nth_item': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'gint',
        name = 'n',
      ),
    ],
  ),
  'gtk_toolbar_get_show_arrow': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_set_show_arrow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'gboolean',
        name = 'show_arrow',
      ),
    ],
  ),
  'gtk_toolbar_get_style': Spec(
    return_type = 'GtkToolbarStyle',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_set_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'GtkToolbarStyle',
        name = 'style',
      ),
    ],
  ),
  'gtk_toolbar_unset_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_get_icon_size': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_set_icon_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'icon_size',
      ),
    ],
  ),
  'gtk_toolbar_unset_icon_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_get_relief_style': Spec(
    return_type = 'GtkReliefStyle',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
    ],
  ),
  'gtk_toolbar_get_drop_index': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_toolbar_set_drop_highlight_item': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'tool_item',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
    ],
  ),
  '_gtk_toolbar_elide_underscores': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'original',
      ),
    ],
  ),
  '_gtk_toolbar_paint_space_line': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkToolbar *',
        name = 'toolbar',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
    ],
  ),
  '_gtk_toolbar_get_default_space_size': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gtk_tool_item_group_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_item_group_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_tool_item_group_set_label': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'const gchar *',
        name = 'label',
      ),
    ],
  ),
  'gtk_tool_item_group_set_label_widget': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'label_widget',
      ),
    ],
  ),
  'gtk_tool_item_group_set_collapsed': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'collapsed',
      ),
    ],
  ),
  'gtk_tool_item_group_set_ellipsize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'PangoEllipsizeMode',
        name = 'ellipsize',
      ),
    ],
  ),
  'gtk_tool_item_group_set_header_relief': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'GtkReliefStyle',
        name = 'style',
      ),
    ],
  ),
  'gtk_tool_item_group_get_label': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_get_label_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_get_collapsed': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_get_ellipsize': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_get_header_relief': Spec(
    return_type = 'GtkReliefStyle',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'item',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tool_item_group_set_item_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'item',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tool_item_group_get_item_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'GtkToolItem *',
        name = 'item',
      ),
    ],
  ),
  'gtk_tool_item_group_get_n_items': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_item_group_get_nth_item': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'guint',
        name = 'index',
      ),
    ],
  ),
  'gtk_tool_item_group_get_drop_item': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_tool_palette_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_palette_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_tool_palette_set_group_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tool_palette_set_exclusive': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'exclusive',
      ),
    ],
  ),
  'gtk_tool_palette_set_expand': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
      Param(
        type = 'gboolean',
        name = 'expand',
      ),
    ],
  ),
  'gtk_tool_palette_get_group_position': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_palette_get_exclusive': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_palette_get_expand': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolItemGroup *',
        name = 'group',
      ),
    ],
  ),
  'gtk_tool_palette_set_icon_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'icon_size',
      ),
    ],
  ),
  'gtk_tool_palette_unset_icon_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_set_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolbarStyle',
        name = 'style',
      ),
    ],
  ),
  'gtk_tool_palette_unset_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_get_icon_size': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_get_style': Spec(
    return_type = 'GtkToolbarStyle',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_get_drop_item': Spec(
    return_type = 'GtkToolItem *',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_tool_palette_get_drop_group': Spec(
    return_type = 'GtkToolItemGroup *',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_tool_palette_get_drag_item': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'const GtkSelectionData *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tool_palette_set_drag_source': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkToolPaletteDragTargets',
        name = 'targets',
      ),
    ],
  ),
  'gtk_tool_palette_add_drag_dest': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkDestDefaults',
        name = 'flags',
      ),
      Param(
        type = 'GtkToolPaletteDragTargets',
        name = 'targets',
      ),
      Param(
        type = 'GdkDragAction',
        name = 'actions',
      ),
    ],
  ),
  'gtk_tool_palette_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkToolPalette *',
        name = 'palette',
      ),
    ],
  ),
  'gtk_tool_palette_get_drag_target_item': Spec(
    return_type = 'const GtkTargetEntry *',
    parameters = [
    ],
  ),
  'gtk_tool_palette_get_drag_target_group': Spec(
    return_type = 'const GtkTargetEntry *',
    parameters = [
    ],
  ),
  'gtk_tool_shell_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_shell_get_icon_size': Spec(
    return_type = 'GtkIconSize',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_style': Spec(
    return_type = 'GtkToolbarStyle',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_relief_style': Spec(
    return_type = 'GtkReliefStyle',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_rebuild_menu': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_text_orientation': Spec(
    return_type = 'GtkOrientation',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_text_alignment': Spec(
    return_type = 'gfloat',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_ellipsize_mode': Spec(
    return_type = 'PangoEllipsizeMode',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_tool_shell_get_text_size_group': Spec(
    return_type = 'GtkSizeGroup *',
    parameters = [
      Param(
        type = 'GtkToolShell *',
        name = 'shell',
      ),
    ],
  ),
  'gtk_test_init': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'int *',
        name = 'argcp',
      ),
      Param(
        type = 'char ***',
        name = 'argvp',
      ),
    ],
  ),
  'gtk_test_register_all_types': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gtk_test_list_all_types': Spec(
    return_type = 'const GType *',
    parameters = [
      Param(
        type = 'guint *',
        name = 'n_types',
      ),
    ],
  ),
  'gtk_test_find_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'label_pattern',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
    ],
  ),
  'gtk_test_create_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  'gtk_test_create_simple_window': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'window_title',
      ),
      Param(
        type = 'const gchar *',
        name = 'dialog_text',
      ),
    ],
  ),
  'gtk_test_display_button_window': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'window_title',
      ),
      Param(
        type = 'const gchar *',
        name = 'dialog_text',
      ),
    ],
  ),
  'gtk_test_slider_set_perc': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'double',
        name = 'percentage',
      ),
    ],
  ),
  'gtk_test_slider_get_value': Spec(
    return_type = 'double',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_test_spin_button_click': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSpinButton *',
        name = 'spinner',
      ),
      Param(
        type = 'guint',
        name = 'button',
      ),
      Param(
        type = 'gboolean',
        name = 'upwards',
      ),
    ],
  ),
  'gtk_test_widget_click': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint',
        name = 'button',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_test_widget_send_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint',
        name = 'keyval',
      ),
      Param(
        type = 'GdkModifierType',
        name = 'modifiers',
      ),
    ],
  ),
  'gtk_test_text_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'string',
      ),
    ],
  ),
  'gtk_test_text_get': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_test_find_sibling': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'base_widget',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
    ],
  ),
  'gtk_test_find_label': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'label_pattern',
      ),
    ],
  ),
  'gtk_tree_drag_source_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_drag_source_row_draggable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeDragSource *',
        name = 'drag_source',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_drag_source_drag_data_delete': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeDragSource *',
        name = 'drag_source',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_drag_source_drag_data_get': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeDragSource *',
        name = 'drag_source',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_tree_drag_dest_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_drag_dest_drag_data_received': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeDragDest *',
        name = 'drag_dest',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'dest',
      ),
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_tree_drag_dest_row_drop_possible': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeDragDest *',
        name = 'drag_dest',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'dest_path',
      ),
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
    ],
  ),
  'gtk_tree_set_row_drag_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GtkTreeModel *',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_get_row_drag_data': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSelectionData *',
        name = 'selection_data',
      ),
      Param(
        type = 'GtkTreeModel **',
        name = 'tree_model',
      ),
      Param(
        type = 'GtkTreePath **',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_model_sort_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_model_sort_new_with_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeModel *',
        name = 'child_model',
      ),
    ],
  ),
  'gtk_tree_model_sort_get_model': Spec(
    return_type = 'GtkTreeModel *',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model',
      ),
    ],
  ),
  'gtk_tree_model_sort_convert_child_path_to_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'child_path',
      ),
    ],
  ),
  'gtk_tree_model_sort_convert_child_iter_to_iter': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sort_iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'child_iter',
      ),
    ],
  ),
  'gtk_tree_model_sort_convert_path_to_child_path': Spec(
    return_type = 'GtkTreePath *',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'sorted_path',
      ),
    ],
  ),
  'gtk_tree_model_sort_convert_iter_to_child_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'child_iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sorted_iter',
      ),
    ],
  ),
  'gtk_tree_model_sort_reset_default_sort_func': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
    ],
  ),
  'gtk_tree_model_sort_clear_cache': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
    ],
  ),
  'gtk_tree_model_sort_iter_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeModelSort *',
        name = 'tree_model_sort',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_selection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_selection_set_mode': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkSelectionMode',
        name = 'type',
      ),
    ],
  ),
  'gtk_tree_selection_get_mode': Spec(
    return_type = 'GtkSelectionMode',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_set_select_function': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeSelectionFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
      Param(
        type = 'GDestroyNotify',
        name = 'destroy',
      ),
    ],
  ),
  'gtk_tree_selection_get_user_data': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_get_tree_view': Spec(
    return_type = 'GtkTreeView *',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_get_select_function': Spec(
    return_type = 'GtkTreeSelectionFunc',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_get_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeModel **',
        name = 'model',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_selection_get_selected_rows': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeModel **',
        name = 'model',
      ),
    ],
  ),
  'gtk_tree_selection_count_selected_rows': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_selected_foreach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeSelectionForeachFunc',
        name = 'func',
      ),
      Param(
        type = 'gpointer',
        name = 'data',
      ),
    ],
  ),
  'gtk_tree_selection_select_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_selection_unselect_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_selection_select_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_selection_unselect_iter': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_selection_path_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_tree_selection_iter_is_selected': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_selection_select_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_unselect_all': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
    ],
  ),
  'gtk_tree_selection_select_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'start_path',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'end_path',
      ),
    ],
  ),
  'gtk_tree_selection_unselect_range': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeSelection *',
        name = 'selection',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'start_path',
      ),
      Param(
        type = 'GtkTreePath *',
        name = 'end_path',
      ),
    ],
  ),
  'gtk_tree_store_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_store_new': Spec(
    return_type = 'GtkTreeStore *',
    parameters = [
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
    ],
  ),
  'gtk_tree_store_newv': Spec(
    return_type = 'GtkTreeStore *',
    parameters = [
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
    ],
  ),
  'gtk_tree_store_set_column_types': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'gint',
        name = 'n_columns',
      ),
      Param(
        type = 'GType *',
        name = 'types',
      ),
    ],
  ),
  'gtk_tree_store_set_value': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint',
        name = 'column',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_tree_store_set': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_store_set_valuesv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'gint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
      Param(
        type = 'gint',
        name = 'n_values',
      ),
    ],
  ),
  'gtk_tree_store_set_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_tree_store_remove': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_store_insert': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tree_store_insert_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_tree_store_insert_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'sibling',
      ),
    ],
  ),
  'gtk_tree_store_insert_with_values': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
    ],
  ),
  'gtk_tree_store_insert_with_valuesv': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'gint',
        name = 'position',
      ),
      Param(
        type = 'gint *',
        name = 'columns',
      ),
      Param(
        type = 'GValue *',
        name = 'values',
      ),
      Param(
        type = 'gint',
        name = 'n_values',
      ),
    ],
  ),
  'gtk_tree_store_prepend': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_tree_store_append': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
    ],
  ),
  'gtk_tree_store_is_ancestor': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'descendant',
      ),
    ],
  ),
  'gtk_tree_store_iter_depth': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_store_clear': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
    ],
  ),
  'gtk_tree_store_iter_is_valid': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
    ],
  ),
  'gtk_tree_store_reorder': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'parent',
      ),
      Param(
        type = 'gint *',
        name = 'new_order',
      ),
    ],
  ),
  'gtk_tree_store_swap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'a',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'b',
      ),
    ],
  ),
  'gtk_tree_store_move_before': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'position',
      ),
    ],
  ),
  'gtk_tree_store_move_after': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTreeStore *',
        name = 'tree_store',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'iter',
      ),
      Param(
        type = 'GtkTreeIter *',
        name = 'position',
      ),
    ],
  ),
  'gtk_license_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_accel_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_application_inhibit_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_assistant_page_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_builder_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_calendar_display_options_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_state_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_cell_renderer_accel_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_css_provider_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_css_section_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_debug_flag_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_dialog_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_response_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_dest_defaults_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_target_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_entry_icon_position_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_align_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_arrow_placement_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_arrow_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_attach_options_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_button_box_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_delete_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_direction_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_expander_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_size_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_sensitivity_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_justification_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_menu_direction_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_message_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_movement_step_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scroll_step_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_orientation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_corner_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_pack_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_path_priority_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_path_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_policy_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_position_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_relief_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_resize_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scroll_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_selection_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_shadow_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_state_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toolbar_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_window_position_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_window_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_wrap_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_sort_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_im_preedit_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_im_status_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_pack_direction_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_pages_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_page_set_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_number_up_layout_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_page_orientation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_quality_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_duplex_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_unit_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_view_grid_lines_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_drag_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_size_request_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_scrollable_policy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_state_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_region_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_junction_sides_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_border_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_level_bar_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_input_purpose_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_input_hints_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_confirmation_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_chooser_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_file_filter_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_lookup_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_theme_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_icon_view_drop_position_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_image_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_buttons_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_notebook_tab_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_status_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_operation_result_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_operation_action_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_print_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_sort_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_chooser_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_filter_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_recent_manager_error_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_size_group_mode_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_spin_button_update_policy_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_spin_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_buffer_target_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_search_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_text_window_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_toolbar_space_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tool_palette_drag_targets_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_model_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_view_drop_position_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tree_view_column_sizing_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_ui_manager_item_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_widget_help_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_rc_flags_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_rc_token_type_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_ui_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_ui_manager_new': Spec(
    return_type = 'GtkUIManager *',
    parameters = [
    ],
  ),
  'gtk_ui_manager_set_add_tearoffs': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'gboolean',
        name = 'add_tearoffs',
      ),
    ],
  ),
  'gtk_ui_manager_get_add_tearoffs': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_ui_manager_insert_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_ui_manager_remove_action_group': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'GtkActionGroup *',
        name = 'action_group',
      ),
    ],
  ),
  'gtk_ui_manager_get_action_groups': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_ui_manager_get_accel_group': Spec(
    return_type = 'GtkAccelGroup *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_ui_manager_get_widget': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'gtk_ui_manager_get_toplevels': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'GtkUIManagerItemType',
        name = 'types',
      ),
    ],
  ),
  'gtk_ui_manager_get_action': Spec(
    return_type = 'GtkAction *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'gtk_ui_manager_add_ui_from_string': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'buffer',
      ),
      Param(
        type = 'gssize',
        name = 'length',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_ui_manager_add_ui_from_file': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_ui_manager_add_ui_from_resource': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'const gchar *',
        name = 'resource_path',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gtk_ui_manager_add_ui': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'guint',
        name = 'merge_id',
      ),
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'action',
      ),
      Param(
        type = 'GtkUIManagerItemType',
        name = 'type',
      ),
      Param(
        type = 'gboolean',
        name = 'top',
      ),
    ],
  ),
  'gtk_ui_manager_remove_ui': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
      Param(
        type = 'guint',
        name = 'merge_id',
      ),
    ],
  ),
  'gtk_ui_manager_get_ui': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_ui_manager_ensure_update': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_ui_manager_new_merge_id': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkUIManager *',
        name = 'manager',
      ),
    ],
  ),
  'gtk_viewport_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_viewport_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'hadjustment',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'vadjustment',
      ),
    ],
  ),
  'gtk_viewport_get_hadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
    ],
  ),
  'gtk_viewport_get_vadjustment': Spec(
    return_type = 'GtkAdjustment *',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
    ],
  ),
  'gtk_viewport_set_hadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_viewport_set_vadjustment': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_viewport_set_shadow_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_viewport_get_shadow_type': Spec(
    return_type = 'GtkShadowType',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
    ],
  ),
  'gtk_viewport_get_bin_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
    ],
  ),
  'gtk_viewport_get_view_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkViewport *',
        name = 'viewport',
      ),
    ],
  ),
  'gtk_volume_button_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_volume_button_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_widget_path_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_widget_path_new': Spec(
    return_type = 'GtkWidgetPath *',
    parameters = [
    ],
  ),
  'gtk_widget_path_copy': Spec(
    return_type = 'GtkWidgetPath *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_ref': Spec(
    return_type = 'GtkWidgetPath *',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_unref': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_to_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_append_type': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_widget_path_prepend_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_widget_path_append_with_siblings': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'siblings',
      ),
      Param(
        type = 'guint',
        name = 'sibling_index',
      ),
    ],
  ),
  'gtk_widget_path_append_for_widget': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_path_iter_get_object_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_set_object_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_widget_path_iter_get_siblings': Spec(
    return_type = 'const GtkWidgetPath *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_get_sibling_index': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_get_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_set_name': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_qname': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'GQuark',
        name = 'qname',
      ),
    ],
  ),
  'gtk_widget_path_iter_add_class': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_remove_class': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_clear_classes': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_list_classes': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_class': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_qclass': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'GQuark',
        name = 'qname',
      ),
    ],
  ),
  'gtk_widget_path_iter_add_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GtkRegionFlags',
        name = 'flags',
      ),
    ],
  ),
  'gtk_widget_path_iter_remove_region': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
    ],
  ),
  'gtk_widget_path_iter_clear_regions': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_list_regions': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_region': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GtkRegionFlags *',
        name = 'flags',
      ),
    ],
  ),
  'gtk_widget_path_iter_has_qregion': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'pos',
      ),
      Param(
        type = 'GQuark',
        name = 'qname',
      ),
      Param(
        type = 'GtkRegionFlags *',
        name = 'flags',
      ),
    ],
  ),
  'gtk_widget_path_get_object_type': Spec(
    return_type = 'GType',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  'gtk_widget_path_is_type': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_widget_path_has_parent': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const GtkWidgetPath *',
        name = 'path',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_color_selection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_selection_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_color_selection_get_has_opacity_control': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_color_selection_set_has_opacity_control': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'gboolean',
        name = 'has_opacity',
      ),
    ],
  ),
  'gtk_color_selection_get_has_palette': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_color_selection_set_has_palette': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'gboolean',
        name = 'has_palette',
      ),
    ],
  ),
  'gtk_color_selection_set_current_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'guint16',
        name = 'alpha',
      ),
    ],
  ),
  'gtk_color_selection_get_current_alpha': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_color_selection_set_previous_alpha': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'guint16',
        name = 'alpha',
      ),
    ],
  ),
  'gtk_color_selection_get_previous_alpha': Spec(
    return_type = 'guint16',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_color_selection_set_current_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_selection_get_current_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_selection_set_previous_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'const GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_selection_get_previous_rgba': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'GdkRGBA *',
        name = 'rgba',
      ),
    ],
  ),
  'gtk_color_selection_is_adjusting': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_color_selection_palette_from_string': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GdkColor **',
        name = 'colors',
      ),
      Param(
        type = 'gint *',
        name = 'n_colors',
      ),
    ],
  ),
  'gtk_color_selection_palette_to_string': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'colors',
      ),
      Param(
        type = 'gint',
        name = 'n_colors',
      ),
    ],
  ),
  'gtk_color_selection_set_change_palette_with_screen_hook': Spec(
    return_type = 'GtkColorSelectionChangePaletteWithScreenFunc',
    parameters = [
      Param(
        type = 'GtkColorSelectionChangePaletteWithScreenFunc',
        name = 'func',
      ),
    ],
  ),
  'gtk_color_selection_set_current_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_selection_get_current_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_selection_set_previous_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_selection_get_previous_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkColorSelection *',
        name = 'colorsel',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_color_selection_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_color_selection_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_color_selection_dialog_get_color_selection': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkColorSelectionDialog *',
        name = 'colorsel',
      ),
    ],
  ),
  'gtk_font_selection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_selection_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_font_selection_get_family_list': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_face_list': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_size_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_size_list': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_preview_entry': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_family': Spec(
    return_type = 'PangoFontFamily *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_face': Spec(
    return_type = 'PangoFontFace *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_size': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_get_font_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_set_font_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
      Param(
        type = 'const gchar *',
        name = 'fontname',
      ),
    ],
  ),
  'gtk_font_selection_get_preview_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
    ],
  ),
  'gtk_font_selection_set_preview_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontSelection *',
        name = 'fontsel',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_font_selection_dialog_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'title',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_ok_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_cancel_button': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_font_selection': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_font_name': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
    ],
  ),
  'gtk_font_selection_dialog_set_font_name': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
      Param(
        type = 'const gchar *',
        name = 'fontname',
      ),
    ],
  ),
  'gtk_font_selection_dialog_get_preview_text': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
    ],
  ),
  'gtk_font_selection_dialog_set_preview_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkFontSelectionDialog *',
        name = 'fsd',
      ),
      Param(
        type = 'const gchar *',
        name = 'text',
      ),
    ],
  ),
  'gtk_handle_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_handle_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_handle_box_set_shadow_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'type',
      ),
    ],
  ),
  'gtk_handle_box_get_shadow_type': Spec(
    return_type = 'GtkShadowType',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
    ],
  ),
  'gtk_handle_box_set_handle_position': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'position',
      ),
    ],
  ),
  'gtk_handle_box_get_handle_position': Spec(
    return_type = 'GtkPositionType',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
    ],
  ),
  'gtk_handle_box_set_snap_edge': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'edge',
      ),
    ],
  ),
  'gtk_handle_box_get_snap_edge': Spec(
    return_type = 'GtkPositionType',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
    ],
  ),
  'gtk_handle_box_get_child_detached': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkHandleBox *',
        name = 'handle_box',
      ),
    ],
  ),
  'gtk_hbutton_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hbutton_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_hbox_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hbox_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_hpaned_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hpaned_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_hsv_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hsv_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_hsv_set_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHSV *',
        name = 'hsv',
      ),
      Param(
        type = 'double',
        name = 'h',
      ),
      Param(
        type = 'double',
        name = 's',
      ),
      Param(
        type = 'double',
        name = 'v',
      ),
    ],
  ),
  'gtk_hsv_get_color': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHSV *',
        name = 'hsv',
      ),
      Param(
        type = 'gdouble *',
        name = 'h',
      ),
      Param(
        type = 'gdouble *',
        name = 's',
      ),
      Param(
        type = 'gdouble *',
        name = 'v',
      ),
    ],
  ),
  'gtk_hsv_set_metrics': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHSV *',
        name = 'hsv',
      ),
      Param(
        type = 'gint',
        name = 'size',
      ),
      Param(
        type = 'gint',
        name = 'ring_width',
      ),
    ],
  ),
  'gtk_hsv_get_metrics': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkHSV *',
        name = 'hsv',
      ),
      Param(
        type = 'gint *',
        name = 'size',
      ),
      Param(
        type = 'gint *',
        name = 'ring_width',
      ),
    ],
  ),
  'gtk_hsv_is_adjusting': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkHSV *',
        name = 'hsv',
      ),
    ],
  ),
  'gtk_hscale_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hscale_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_hscale_new_with_range': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
    ],
  ),
  'gtk_hscrollbar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hscrollbar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_hseparator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_hseparator_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  '_gtk_rc_parse_widget_class_path': Spec(
    return_type = 'GSList *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'pattern',
      ),
    ],
  ),
  '_gtk_rc_free_widget_class_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
    ],
  ),
  '_gtk_rc_match_widget_class': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GSList *',
        name = 'list',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gchar *',
        name = 'path',
      ),
      Param(
        type = 'gchar *',
        name = 'path_reversed',
      ),
    ],
  ),
  'gtk_rc_add_default_file': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_rc_set_default_files': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'filenames',
      ),
    ],
  ),
  'gtk_rc_get_default_files': Spec(
    return_type = 'gchar **',
    parameters = [
    ],
  ),
  'gtk_rc_get_style': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_rc_get_style_by_paths': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'const char *',
        name = 'widget_path',
      ),
      Param(
        type = 'const char *',
        name = 'class_path',
      ),
      Param(
        type = 'GType',
        name = 'type',
      ),
    ],
  ),
  'gtk_rc_reparse_all_for_settings': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'gboolean',
        name = 'force_load',
      ),
    ],
  ),
  'gtk_rc_reset_styles': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
    ],
  ),
  'gtk_rc_find_pixmap_in_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'GtkSettings *',
        name = 'settings',
      ),
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'const gchar *',
        name = 'pixmap_file',
      ),
    ],
  ),
  'gtk_rc_parse': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'filename',
      ),
    ],
  ),
  'gtk_rc_parse_string': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'rc_string',
      ),
    ],
  ),
  'gtk_rc_reparse_all': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gtk_rc_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_rc_style_new': Spec(
    return_type = 'GtkRcStyle *',
    parameters = [
    ],
  ),
  'gtk_rc_style_copy': Spec(
    return_type = 'GtkRcStyle *',
    parameters = [
      Param(
        type = 'GtkRcStyle *',
        name = 'orig',
      ),
    ],
  ),
  'gtk_rc_find_module_in_path': Spec(
    return_type = 'gchar *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'module_file',
      ),
    ],
  ),
  'gtk_rc_get_theme_dir': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'gtk_rc_get_module_dir': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'gtk_rc_get_im_module_path': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'gtk_rc_get_im_module_file': Spec(
    return_type = 'gchar *',
    parameters = [
    ],
  ),
  'gtk_rc_scanner_new': Spec(
    return_type = 'GScanner *',
    parameters = [
    ],
  ),
  'gtk_rc_parse_color': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_rc_parse_color_full': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GtkRcStyle *',
        name = 'style',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_rc_parse_state': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GtkStateType *',
        name = 'state',
      ),
    ],
  ),
  'gtk_rc_parse_priority': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GScanner *',
        name = 'scanner',
      ),
      Param(
        type = 'GtkPathPriorityType *',
        name = 'priority',
      ),
    ],
  ),
  'gtk_style_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_style_new': Spec(
    return_type = 'GtkStyle *',
    parameters = [
    ],
  ),
  'gtk_style_copy': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
    ],
  ),
  'gtk_style_attach': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gtk_style_detach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
    ],
  ),
  'gtk_style_set_background': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
    ],
  ),
  'gtk_style_apply_default_background': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_style_lookup_icon_set': Spec(
    return_type = 'GtkIconSet *',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
    ],
  ),
  'gtk_style_lookup_color': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'const gchar *',
        name = 'color_name',
      ),
      Param(
        type = 'GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_style_render_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'const GtkIconSource *',
        name = 'source',
      ),
      Param(
        type = 'GtkTextDirection',
        name = 'direction',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
    ],
  ),
  'gtk_paint_hline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x1',
      ),
      Param(
        type = 'gint',
        name = 'x2',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
    ],
  ),
  'gtk_paint_vline': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'y1_',
      ),
      Param(
        type = 'gint',
        name = 'y2_',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
    ],
  ),
  'gtk_paint_shadow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_arrow': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'GtkArrowType',
        name = 'arrow_type',
      ),
      Param(
        type = 'gboolean',
        name = 'fill',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_diamond': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_box': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_flat_box': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_check': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_option': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_tab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_shadow_gap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'gap_side',
      ),
      Param(
        type = 'gint',
        name = 'gap_x',
      ),
      Param(
        type = 'gint',
        name = 'gap_width',
      ),
    ],
  ),
  'gtk_paint_box_gap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'gap_side',
      ),
      Param(
        type = 'gint',
        name = 'gap_x',
      ),
      Param(
        type = 'gint',
        name = 'gap_width',
      ),
    ],
  ),
  'gtk_paint_extension': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'GtkPositionType',
        name = 'gap_side',
      ),
    ],
  ),
  'gtk_paint_focus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_slider': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_paint_handle': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkShadowType',
        name = 'shadow_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
      Param(
        type = 'GtkOrientation',
        name = 'orientation',
      ),
    ],
  ),
  'gtk_paint_expander': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'GtkExpanderStyle',
        name = 'expander_style',
      ),
    ],
  ),
  'gtk_paint_layout': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'gboolean',
        name = 'use_text',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'PangoLayout *',
        name = 'layout',
      ),
    ],
  ),
  'gtk_paint_resize_grip': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'GdkWindowEdge',
        name = 'edge',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_paint_spinner': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'cairo_t *',
        name = 'cr',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state_type',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
      Param(
        type = 'guint',
        name = 'step',
      ),
      Param(
        type = 'gint',
        name = 'x',
      ),
      Param(
        type = 'gint',
        name = 'y',
      ),
      Param(
        type = 'gint',
        name = 'width',
      ),
      Param(
        type = 'gint',
        name = 'height',
      ),
    ],
  ),
  'gtk_style_get_style_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'property_name',
      ),
      Param(
        type = 'GValue *',
        name = 'value',
      ),
    ],
  ),
  'gtk_style_get_valist': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
      Param(
        type = 'va_list',
        name = 'var_args',
      ),
    ],
  ),
  'gtk_style_get': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
      Param(
        type = 'GType',
        name = 'widget_type',
      ),
      Param(
        type = 'const gchar *',
        name = 'first_property_name',
      ),
    ],
  ),
  '_gtk_style_new_for_path': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'GtkWidgetPath *',
        name = 'path',
      ),
    ],
  ),
  '_gtk_style_shade': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const GdkColor *',
        name = 'a',
      ),
      Param(
        type = 'GdkColor *',
        name = 'b',
      ),
      Param(
        type = 'gdouble',
        name = 'k',
      ),
    ],
  ),
  'gtk_style_has_context': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
    ],
  ),
  'gtk_widget_style_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_has_rc_style': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_set_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStyle *',
        name = 'style',
      ),
    ],
  ),
  'gtk_widget_ensure_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_style': Spec(
    return_type = 'GtkStyle *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_modify_style': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkRcStyle *',
        name = 'style',
      ),
    ],
  ),
  'gtk_widget_get_modifier_style': Spec(
    return_type = 'GtkRcStyle *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_modify_fg': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_modify_bg': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_modify_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_modify_base': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'GtkStateType',
        name = 'state',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'color',
      ),
    ],
  ),
  'gtk_widget_modify_cursor': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'primary',
      ),
      Param(
        type = 'const GdkColor *',
        name = 'secondary',
      ),
    ],
  ),
  'gtk_widget_modify_font': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'PangoFontDescription *',
        name = 'font_desc',
      ),
    ],
  ),
  'gtk_widget_reset_rc_styles': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
    ],
  ),
  'gtk_widget_get_default_style': Spec(
    return_type = 'GtkStyle *',
    parameters = [
    ],
  ),
  'gtk_widget_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint *',
        name = 'path_length',
      ),
      Param(
        type = 'gchar **',
        name = 'path',
      ),
      Param(
        type = 'gchar **',
        name = 'path_reversed',
      ),
    ],
  ),
  'gtk_widget_class_path': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint *',
        name = 'path_length',
      ),
      Param(
        type = 'gchar **',
        name = 'path',
      ),
      Param(
        type = 'gchar **',
        name = 'path_reversed',
      ),
    ],
  ),
  'gtk_widget_render_icon': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'const gchar *',
        name = 'stock_id',
      ),
      Param(
        type = 'GtkIconSize',
        name = 'size',
      ),
      Param(
        type = 'const gchar *',
        name = 'detail',
      ),
    ],
  ),
  'gtk_table_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_table_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'guint',
        name = 'rows',
      ),
      Param(
        type = 'guint',
        name = 'columns',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_table_resize': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'rows',
      ),
      Param(
        type = 'guint',
        name = 'columns',
      ),
    ],
  ),
  'gtk_table_attach': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'child',
      ),
      Param(
        type = 'guint',
        name = 'left_attach',
      ),
      Param(
        type = 'guint',
        name = 'right_attach',
      ),
      Param(
        type = 'guint',
        name = 'top_attach',
      ),
      Param(
        type = 'guint',
        name = 'bottom_attach',
      ),
      Param(
        type = 'GtkAttachOptions',
        name = 'xoptions',
      ),
      Param(
        type = 'GtkAttachOptions',
        name = 'yoptions',
      ),
      Param(
        type = 'guint',
        name = 'xpadding',
      ),
      Param(
        type = 'guint',
        name = 'ypadding',
      ),
    ],
  ),
  'gtk_table_attach_defaults': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'GtkWidget *',
        name = 'widget',
      ),
      Param(
        type = 'guint',
        name = 'left_attach',
      ),
      Param(
        type = 'guint',
        name = 'right_attach',
      ),
      Param(
        type = 'guint',
        name = 'top_attach',
      ),
      Param(
        type = 'guint',
        name = 'bottom_attach',
      ),
    ],
  ),
  'gtk_table_set_row_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_table_get_row_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'row',
      ),
    ],
  ),
  'gtk_table_set_col_spacing': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_table_get_col_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'column',
      ),
    ],
  ),
  'gtk_table_set_row_spacings': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_table_get_default_row_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
    ],
  ),
  'gtk_table_set_col_spacings': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_table_get_default_col_spacing': Spec(
    return_type = 'guint',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
    ],
  ),
  'gtk_table_set_homogeneous': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
    ],
  ),
  'gtk_table_get_homogeneous': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
    ],
  ),
  'gtk_table_get_size': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkTable *',
        name = 'table',
      ),
      Param(
        type = 'guint *',
        name = 'rows',
      ),
      Param(
        type = 'guint *',
        name = 'columns',
      ),
    ],
  ),
  'gtk_tearoff_menu_item_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_tearoff_menu_item_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_vbutton_box_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vbutton_box_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_vbox_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vbox_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gboolean',
        name = 'homogeneous',
      ),
      Param(
        type = 'gint',
        name = 'spacing',
      ),
    ],
  ),
  'gtk_vpaned_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vpaned_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_vscale_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vscale_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_vscale_new_with_range': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'gdouble',
        name = 'min',
      ),
      Param(
        type = 'gdouble',
        name = 'max',
      ),
      Param(
        type = 'gdouble',
        name = 'step',
      ),
    ],
  ),
  'gtk_vscrollbar_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vscrollbar_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GtkAdjustment *',
        name = 'adjustment',
      ),
    ],
  ),
  'gtk_vseparator_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_vseparator_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  '_Xmblen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = 'str',
      ),
      Param(
        type = 'int',
        name = 'len',
      ),
    ],
  ),
  'XLoadQueryFont': Spec(
    return_type = 'XFontStruct *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XQueryFont': Spec(
    return_type = 'XFontStruct *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
    ],
  ),
  'XGetMotionEvents': Spec(
    return_type = 'XTimeCoord *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XDeleteModifiermapEntry': Spec(
    return_type = 'XModifierKeymap *',
    parameters = [
      Param(
        type = 'XModifierKeymap *',
        name = '',
      ),
      Param(
        type = 'KeyCode',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetModifierMapping': Spec(
    return_type = 'XModifierKeymap *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XInsertModifiermapEntry': Spec(
    return_type = 'XModifierKeymap *',
    parameters = [
      Param(
        type = 'XModifierKeymap *',
        name = '',
      ),
      Param(
        type = 'KeyCode',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XNewModifiermap': Spec(
    return_type = 'XModifierKeymap *',
    parameters = [
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XCreateImage': Spec(
    return_type = 'XImage *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Visual *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XInitImage': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XImage *',
        name = '',
      ),
    ],
  ),
  'XGetImage': Spec(
    return_type = 'XImage *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetSubImage': Spec(
    return_type = 'XImage *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XImage *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XOpenDisplay': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XrmInitialize': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'XFetchBytes': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XFetchBuffer': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetAtomName': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetAtomNames': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Atom *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XGetDefault': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XDisplayName': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XKeysymToString': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'KeySym',
        name = '',
      ),
    ],
  ),
  'XSynchronize': Spec(
    return_type = 'int (*)(Display *)',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetAfterFunction': Spec(
    return_type = 'int (*)(Display *)',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int (*)(Display *)',
        name = '',
      ),
    ],
  ),
  'XInternAtom': Spec(
    return_type = 'Atom',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XInternAtoms': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Atom *',
        name = '',
      ),
    ],
  ),
  'XCopyColormapAndFree': Spec(
    return_type = 'Colormap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
    ],
  ),
  'XCreateColormap': Spec(
    return_type = 'Colormap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Visual *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XCreatePixmapCursor': Spec(
    return_type = 'Cursor',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XCreateGlyphCursor': Spec(
    return_type = 'Cursor',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Font',
        name = '',
      ),
      Param(
        type = 'Font',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'const XColor *',
        name = '',
      ),
      Param(
        type = 'const XColor *',
        name = '',
      ),
    ],
  ),
  'XCreateFontCursor': Spec(
    return_type = 'Cursor',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XLoadFont': Spec(
    return_type = 'Font',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XCreateGC': Spec(
    return_type = 'GC',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XGCValues *',
        name = '',
      ),
    ],
  ),
  'XGContextFromGC': Spec(
    return_type = 'GContext',
    parameters = [
      Param(
        type = 'GC',
        name = '',
      ),
    ],
  ),
  'XFlushGC': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
    ],
  ),
  'XCreatePixmap': Spec(
    return_type = 'Pixmap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XCreateBitmapFromData': Spec(
    return_type = 'Pixmap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XCreatePixmapFromBitmapData': Spec(
    return_type = 'Pixmap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XCreateSimpleWindow': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XGetSelectionOwner': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XCreateWindow': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Visual *',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XSetWindowAttributes *',
        name = '',
      ),
    ],
  ),
  'XListInstalledColormaps': Spec(
    return_type = 'Colormap *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListFonts': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListFontsWithInfo': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XFontStruct **',
        name = '',
      ),
    ],
  ),
  'XGetFontPath': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListExtensions': Spec(
    return_type = 'char **',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListProperties': Spec(
    return_type = 'Atom *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListHosts': Spec(
    return_type = 'XHostAddress *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XKeycodeToKeysym': Spec(
    return_type = 'KeySym',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'KeyCode',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XLookupKeysym': Spec(
    return_type = 'KeySym',
    parameters = [
      Param(
        type = 'XKeyEvent *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetKeyboardMapping': Spec(
    return_type = 'KeySym *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'KeyCode',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XStringToKeysym': Spec(
    return_type = 'KeySym',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XMaxRequestSize': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XExtendedMaxRequestSize': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XResourceManagerString': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XScreenResourceString': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDisplayMotionBufferSize': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XVisualIDFromVisual': Spec(
    return_type = 'VisualID',
    parameters = [
      Param(
        type = 'Visual *',
        name = '',
      ),
    ],
  ),
  'XInitThreads': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'XLockDisplay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XUnlockDisplay': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XInitExtension': Spec(
    return_type = 'XExtCodes *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XAddExtension': Spec(
    return_type = 'XExtCodes *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XFindOnExtensionList': Spec(
    return_type = 'XExtData *',
    parameters = [
      Param(
        type = 'XExtData **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XEHeadOfExtensionList': Spec(
    return_type = 'XExtData **',
    parameters = [
      Param(
        type = 'XEDataObject',
        name = '',
      ),
    ],
  ),
  'XRootWindow': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultRootWindow': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XRootWindowOfScreen': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDefaultVisual': Spec(
    return_type = 'Visual *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultVisualOfScreen': Spec(
    return_type = 'Visual *',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDefaultGC': Spec(
    return_type = 'GC',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultGCOfScreen': Spec(
    return_type = 'GC',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XBlackPixel': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XWhitePixel': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XAllPlanes': Spec(
    return_type = 'unsigned long',
    parameters = [
    ],
  ),
  'XBlackPixelOfScreen': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XWhitePixelOfScreen': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XNextRequest': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XLastKnownRequestProcessed': Spec(
    return_type = 'unsigned long',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XServerVendor': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XDisplayString': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XDefaultColormap': Spec(
    return_type = 'Colormap',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultColormapOfScreen': Spec(
    return_type = 'Colormap',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDisplayOfScreen': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XScreenOfDisplay': Spec(
    return_type = 'Screen *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultScreenOfDisplay': Spec(
    return_type = 'Screen *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XEventMaskOfScreen': Spec(
    return_type = 'long',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XScreenNumberOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XSetErrorHandler': Spec(
    return_type = 'XErrorHandler',
    parameters = [
      Param(
        type = 'XErrorHandler',
        name = '',
      ),
    ],
  ),
  'XSetIOErrorHandler': Spec(
    return_type = 'XIOErrorHandler',
    parameters = [
      Param(
        type = 'XIOErrorHandler',
        name = '',
      ),
    ],
  ),
  'XListPixmapFormats': Spec(
    return_type = 'XPixmapFormatValues *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XListDepths': Spec(
    return_type = 'int *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XReconfigureWMWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'XWindowChanges *',
        name = '',
      ),
    ],
  ),
  'XGetWMProtocols': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XSetWMProtocols': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XIconifyWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XWithdrawWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetCommand': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'char ***',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetWMColormapWindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XSetWMColormapWindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFreeStringList': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XSetTransientForHint': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XActivateScreenSaver': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XAddHost': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XHostAddress *',
        name = '',
      ),
    ],
  ),
  'XAddHosts': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XHostAddress *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XAddToExtensionList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'struct _XExtData **',
        name = '',
      ),
      Param(
        type = 'XExtData *',
        name = '',
      ),
    ],
  ),
  'XAddToSaveSet': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XAllocColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XAllocColorCells': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XAllocColorPlanes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
    ],
  ),
  'XAllocNamedColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XAllowEvents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XAutoRepeatOff': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XAutoRepeatOn': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XBell': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XBitmapBitOrder': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XBitmapPad': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XBitmapUnit': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XCellsOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XChangeActivePointerGrab': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XChangeGC': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XGCValues *',
        name = '',
      ),
    ],
  ),
  'XChangeKeyboardControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XKeyboardControl *',
        name = '',
      ),
    ],
  ),
  'XChangeKeyboardMapping': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XChangePointerControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XChangeProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const unsigned char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XChangeSaveSet': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XChangeWindowAttributes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XSetWindowAttributes *',
        name = '',
      ),
    ],
  ),
  'XCheckIfEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
      Param(
        type = 'int (*)(Display *, XEvent *, XPointer)',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XCheckMaskEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XCheckTypedEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XCheckTypedWindowEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XCheckWindowEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XCirculateSubwindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XCirculateSubwindowsDown': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XCirculateSubwindowsUp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XClearArea': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XClearWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XCloseDisplay': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XConfigureWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'XWindowChanges *',
        name = '',
      ),
    ],
  ),
  'XConnectionNumber': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XConvertSelection': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XCopyArea': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XCopyGC': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
    ],
  ),
  'XCopyPlane': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XDefaultDepth': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDefaultDepthOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDefaultScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XDefineCursor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
    ],
  ),
  'XDeleteProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XDestroyWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XDestroySubwindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XDoesBackingStore': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDoesSaveUnders': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XDisableAccessControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XDisplayCells': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDisplayHeight': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDisplayHeightMM': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDisplayKeycodes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XDisplayPlanes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDisplayWidth': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDisplayWidthMM': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawArc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawArcs': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XArc *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawImageString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawImageString16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const XChar2b *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawLine': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawLines': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XPoint *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawPoint': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawPoints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XPoint *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawRectangle': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XDrawRectangles': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawSegments': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XSegment *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawString16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const XChar2b *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawText': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XTextItem *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XDrawText16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XTextItem16 *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XEnableAccessControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XEventsQueued': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFetchName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XFillArc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFillArcs': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XArc *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFillPolygon': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XPoint *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFillRectangle': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XFillRectangles': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFlush': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XForceScreenSaver': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFree': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'void *',
        name = '',
      ),
    ],
  ),
  'XFreeColormap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
    ],
  ),
  'XFreeColors': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XFreeCursor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
    ],
  ),
  'XFreeExtensionList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XFreeFont': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
    ],
  ),
  'XFreeFontInfo': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XFreeFontNames': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XFreeFontPath': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XFreeGC': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
    ],
  ),
  'XFreeModifiermap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XModifierKeymap *',
        name = '',
      ),
    ],
  ),
  'XFreePixmap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XGeometry': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetErrorDatabaseText': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetErrorText': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetFontProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
    ],
  ),
  'XGetGCValues': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'XGCValues *',
        name = '',
      ),
    ],
  ),
  'XGetGeometry': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XGetIconName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XGetInputFocus': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetKeyboardControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XKeyboardState *',
        name = '',
      ),
    ],
  ),
  'XGetPointerControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetPointerMapping': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGetScreenSaver': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetTransientForHint': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
    ],
  ),
  'XGetWindowProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Atom *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned long *',
        name = '',
      ),
      Param(
        type = 'unsigned char **',
        name = '',
      ),
    ],
  ),
  'XGetWindowAttributes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XWindowAttributes *',
        name = '',
      ),
    ],
  ),
  'XGrabButton': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
    ],
  ),
  'XGrabKey': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XGrabKeyboard': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XGrabPointer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XGrabServer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XHeightMMOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XHeightOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XIfEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
      Param(
        type = 'int (*)(Display *, XEvent *, XPointer)',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XImageByteOrder': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XInstallColormap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
    ],
  ),
  'XKeysymToKeycode': Spec(
    return_type = 'KeyCode',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'KeySym',
        name = '',
      ),
    ],
  ),
  'XKillClient': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
    ],
  ),
  'XLookupColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XLowerWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XMapRaised': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XMapSubwindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XMapWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XMaskEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XMaxCmapsOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XMinCmapsOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XMoveResizeWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XMoveWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XNextEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XNoOp': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XParseColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XParseGeometry': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XPeekEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XPeekIfEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
      Param(
        type = 'int (*)(Display *, XEvent *, XPointer)',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XPending': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XPlanesOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XProtocolRevision': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XProtocolVersion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XPutBackEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XPutImage': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'XImage *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XQLength': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XQueryBestCursor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XQueryBestSize': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XQueryBestStipple': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XQueryBestTile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XQueryColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XQueryColors': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XQueryExtension': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XQueryKeymap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'char [32]',
        name = '',
      ),
    ],
  ),
  'XQueryPointer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XQueryTextExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XCharStruct *',
        name = '',
      ),
    ],
  ),
  'XQueryTextExtents16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
      Param(
        type = 'const XChar2b *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XCharStruct *',
        name = '',
      ),
    ],
  ),
  'XQueryTree': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'Window **',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
    ],
  ),
  'XRaiseWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XReadBitmapFile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'Pixmap *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XReadBitmapFileData': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned int *',
        name = '',
      ),
      Param(
        type = 'unsigned char **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XRebindKeysym': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'KeySym',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const unsigned char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XRecolorCursor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Cursor',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XRefreshKeyboardMapping': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XMappingEvent *',
        name = '',
      ),
    ],
  ),
  'XRemoveFromSaveSet': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XRemoveHost': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XHostAddress *',
        name = '',
      ),
    ],
  ),
  'XRemoveHosts': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XHostAddress *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XReparentWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XResetScreenSaver': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XResizeWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XRestackWindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XRotateBuffers': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XRotateWindowProperties': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Atom *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XScreenCount': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XSelectInput': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
    ],
  ),
  'XSendEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XSetAccessControl': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetArcMode': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetBackground': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetClipMask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XSetClipOrigin': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetClipRectangles': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetCloseDownMode': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetCommand': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetDashes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetFillRule': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetFillStyle': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetFont': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'Font',
        name = '',
      ),
    ],
  ),
  'XSetFontPath': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetForeground': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetFunction': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetGraphicsExposures': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetIconName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XSetInputFocus': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XSetLineAttributes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetModifierMapping': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XModifierKeymap *',
        name = '',
      ),
    ],
  ),
  'XSetPlaneMask': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetPointerMapping': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const unsigned char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetScreenSaver': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetSelectionOwner': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XSetState': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetStipple': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XSetSubwindowMode': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetTSOrigin': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetTile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XSetWindowBackground': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetWindowBackgroundPixmap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XSetWindowBorder': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
    ],
  ),
  'XSetWindowBorderPixmap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
    ],
  ),
  'XSetWindowBorderWidth': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XSetWindowColormap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
    ],
  ),
  'XStoreBuffer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XStoreBytes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XStoreColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
    ],
  ),
  'XStoreColors': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'XColor *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XStoreName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XStoreNamedColor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned long',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSync': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XTextExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XCharStruct *',
        name = '',
      ),
    ],
  ),
  'XTextExtents16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'const XChar2b *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XCharStruct *',
        name = '',
      ),
    ],
  ),
  'XTextWidth': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XTextWidth16': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontStruct *',
        name = '',
      ),
      Param(
        type = 'const XChar2b *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XTranslateCoordinates': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'Window *',
        name = '',
      ),
    ],
  ),
  'XUndefineCursor': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XUngrabButton': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XUngrabKey': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XUngrabKeyboard': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XUngrabPointer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Time',
        name = '',
      ),
    ],
  ),
  'XUngrabServer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XUninstallColormap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Colormap',
        name = '',
      ),
    ],
  ),
  'XUnloadFont': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Font',
        name = '',
      ),
    ],
  ),
  'XUnmapSubwindows': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XUnmapWindow': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XVendorRelease': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
    ],
  ),
  'XWarpPointer': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XWidthMMOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XWidthOfScreen': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Screen *',
        name = '',
      ),
    ],
  ),
  'XWindowEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XEvent *',
        name = '',
      ),
    ],
  ),
  'XWriteBitmapFile': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSupportsLocale': Spec(
    return_type = 'int',
    parameters = [
    ],
  ),
  'XSetLocaleModifiers': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XOpenOM': Spec(
    return_type = 'XOM',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'struct _XrmHashBucketRec *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XCloseOM': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XSetOMValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XGetOMValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XDisplayOfOM': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XLocaleOfOM': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XCreateOC': Spec(
    return_type = 'XOC',
    parameters = [
      Param(
        type = 'XOM',
        name = '',
      ),
    ],
  ),
  'XDestroyOC': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'XOC',
        name = '',
      ),
    ],
  ),
  'XOMOfOC': Spec(
    return_type = 'XOM',
    parameters = [
      Param(
        type = 'XOC',
        name = '',
      ),
    ],
  ),
  'XSetOCValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XOC',
        name = '',
      ),
    ],
  ),
  'XGetOCValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XOC',
        name = '',
      ),
    ],
  ),
  'XCreateFontSet': Spec(
    return_type = 'XFontSet',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'char ***',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
    ],
  ),
  'XFreeFontSet': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XFontsOfFontSet': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'XFontStruct ***',
        name = '',
      ),
      Param(
        type = 'char ***',
        name = '',
      ),
    ],
  ),
  'XBaseFontNameListOfFontSet': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XLocaleOfFontSet': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XContextDependentDrawing': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XDirectionalDependentDrawing': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XContextualDrawing': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XExtentsOfFontSet': Spec(
    return_type = 'XFontSetExtents *',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
    ],
  ),
  'XmbTextEscapement': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XwcTextEscapement': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'Xutf8TextEscapement': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XmbTextExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'XwcTextExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'Xutf8TextExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'XmbTextPerCharExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'XwcTextPerCharExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'Xutf8TextPerCharExtents': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'XmbDrawText': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XmbTextItem *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XwcDrawText': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XwcTextItem *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'Xutf8DrawText': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XmbTextItem *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XmbDrawString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XwcDrawString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'Xutf8DrawString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XmbDrawImageString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XwcDrawImageString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'Xutf8DrawImageString': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Drawable',
        name = '',
      ),
      Param(
        type = 'XFontSet',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XOpenIM': Spec(
    return_type = 'XIM',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'struct _XrmHashBucketRec *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
    ],
  ),
  'XCloseIM': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XGetIMValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XSetIMValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XDisplayOfIM': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XLocaleOfIM': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XCreateIC': Spec(
    return_type = 'XIC',
    parameters = [
      Param(
        type = 'XIM',
        name = '',
      ),
    ],
  ),
  'XDestroyIC': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XSetICFocus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XUnsetICFocus': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XwcResetIC': Spec(
    return_type = 'wchar_t *',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XmbResetIC': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'Xutf8ResetIC': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XSetICValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XGetICValues': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XIMOfIC': Spec(
    return_type = 'XIM',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
    ],
  ),
  'XFilterEvent': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XEvent *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XmbLookupString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
      Param(
        type = 'XKeyPressedEvent *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XwcLookupString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
      Param(
        type = 'XKeyPressedEvent *',
        name = '',
      ),
      Param(
        type = 'wchar_t *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'Xutf8LookupString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XIC',
        name = '',
      ),
      Param(
        type = 'XKeyPressedEvent *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XVaCreateNestedList': Spec(
    return_type = 'XVaNestedList',
    parameters = [
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XRegisterIMInstantiateCallback': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'struct _XrmHashBucketRec *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'XIDProc',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XUnregisterIMInstantiateCallback': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'struct _XrmHashBucketRec *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'XIDProc',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XInternalConnectionNumbers': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XProcessInternalConnection': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XAddConnectionWatch': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XConnectionWatchProc',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XRemoveConnectionWatch': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XConnectionWatchProc',
        name = '',
      ),
      Param(
        type = 'XPointer',
        name = '',
      ),
    ],
  ),
  'XSetAuthorization': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_Xmbtowc': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'wchar_t *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  '_Xwctomb': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'wchar_t',
        name = '',
      ),
    ],
  ),
  'XGetEventData': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XGenericEventCookie *',
        name = '',
      ),
    ],
  ),
  'XFreeEventData': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XGenericEventCookie *',
        name = '',
      ),
    ],
  ),
  'XAllocClassHint': Spec(
    return_type = 'XClassHint *',
    parameters = [
    ],
  ),
  'XAllocIconSize': Spec(
    return_type = 'XIconSize *',
    parameters = [
    ],
  ),
  'XAllocSizeHints': Spec(
    return_type = 'XSizeHints *',
    parameters = [
    ],
  ),
  'XAllocStandardColormap': Spec(
    return_type = 'XStandardColormap *',
    parameters = [
    ],
  ),
  'XAllocWMHints': Spec(
    return_type = 'XWMHints *',
    parameters = [
    ],
  ),
  'XClipBox': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'XRectangle *',
        name = '',
      ),
    ],
  ),
  'XCreateRegion': Spec(
    return_type = 'Region',
    parameters = [
    ],
  ),
  'XDefaultString': Spec(
    return_type = 'const char *',
    parameters = [
    ],
  ),
  'XDeleteContext': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
      Param(
        type = 'XContext',
        name = '',
      ),
    ],
  ),
  'XDestroyRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XEmptyRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XEqualRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XFindContext': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
      Param(
        type = 'XContext',
        name = '',
      ),
      Param(
        type = 'XPointer *',
        name = '',
      ),
    ],
  ),
  'XGetClassHint': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XClassHint *',
        name = '',
      ),
    ],
  ),
  'XGetIconSizes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XIconSize **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetNormalHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XGetRGBColormaps': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XStandardColormap **',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetSizeHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetStandardColormap': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XStandardColormap *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetTextProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetVisualInfo': Spec(
    return_type = 'XVisualInfo *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'long',
        name = '',
      ),
      Param(
        type = 'XVisualInfo *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XGetWMClientMachine': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XGetWMHints': Spec(
    return_type = 'XWMHints *',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
    ],
  ),
  'XGetWMIconName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XGetWMName': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XGetWMNormalHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'long *',
        name = '',
      ),
    ],
  ),
  'XGetWMSizeHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'long *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XGetZoomHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XIntersectRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XConvertCase': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'KeySym',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
    ],
  ),
  'XLookupString': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XKeyEvent *',
        name = '',
      ),
      Param(
        type = 'char *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'KeySym *',
        name = '',
      ),
      Param(
        type = 'XComposeStatus *',
        name = '',
      ),
    ],
  ),
  'XMatchVisualInfo': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XVisualInfo *',
        name = '',
      ),
    ],
  ),
  'XOffsetRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XPointInRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XPolygonRegion': Spec(
    return_type = 'Region',
    parameters = [
      Param(
        type = 'XPoint *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XRectInRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
    ],
  ),
  'XSaveContext': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'XID',
        name = '',
      ),
      Param(
        type = 'XContext',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
    ],
  ),
  'XSetClassHint': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XClassHint *',
        name = '',
      ),
    ],
  ),
  'XSetIconSizes': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XIconSize *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XSetNormalHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XSetRGBColormaps': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XStandardColormap *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XSetSizeHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XSetStandardProperties': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'Pixmap',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XSetTextProperty': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XSetWMClientMachine': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XSetWMHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XWMHints *',
        name = '',
      ),
    ],
  ),
  'XSetWMIconName': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XSetWMName': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XSetWMNormalHints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XSetWMProperties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'XWMHints *',
        name = '',
      ),
      Param(
        type = 'XClassHint *',
        name = '',
      ),
    ],
  ),
  'XmbSetWMProperties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'XWMHints *',
        name = '',
      ),
      Param(
        type = 'XClassHint *',
        name = '',
      ),
    ],
  ),
  'Xutf8SetWMProperties': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'XWMHints *',
        name = '',
      ),
      Param(
        type = 'XClassHint *',
        name = '',
      ),
    ],
  ),
  'XSetWMSizeHints': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XSetRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'GC',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XSetStandardColormap': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XStandardColormap *',
        name = '',
      ),
      Param(
        type = 'Atom',
        name = '',
      ),
    ],
  ),
  'XSetZoomHints': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'Window',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
    ],
  ),
  'XShrinkRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
    ],
  ),
  'XStringListToTextProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'char **',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
    ],
  ),
  'XSubtractRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XmbTextListToTextProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'char **',
        name = 'list',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'XICCEncodingStyle',
        name = 'style',
      ),
      Param(
        type = 'XTextProperty *',
        name = 'text_prop_return',
      ),
    ],
  ),
  'XwcTextListToTextProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'wchar_t **',
        name = 'list',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'XICCEncodingStyle',
        name = 'style',
      ),
      Param(
        type = 'XTextProperty *',
        name = 'text_prop_return',
      ),
    ],
  ),
  'Xutf8TextListToTextProperty': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'char **',
        name = 'list',
      ),
      Param(
        type = 'int',
        name = 'count',
      ),
      Param(
        type = 'XICCEncodingStyle',
        name = 'style',
      ),
      Param(
        type = 'XTextProperty *',
        name = 'text_prop_return',
      ),
    ],
  ),
  'XwcFreeStringList': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'wchar_t **',
        name = 'list',
      ),
    ],
  ),
  'XTextPropertyToStringList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XTextProperty *',
        name = '',
      ),
      Param(
        type = 'char ***',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XmbTextPropertyToTextList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'const XTextProperty *',
        name = 'text_prop',
      ),
      Param(
        type = 'char ***',
        name = 'list_return',
      ),
      Param(
        type = 'int *',
        name = 'count_return',
      ),
    ],
  ),
  'XwcTextPropertyToTextList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'const XTextProperty *',
        name = 'text_prop',
      ),
      Param(
        type = 'wchar_t ***',
        name = 'list_return',
      ),
      Param(
        type = 'int *',
        name = 'count_return',
      ),
    ],
  ),
  'Xutf8TextPropertyToTextList': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = 'display',
      ),
      Param(
        type = 'const XTextProperty *',
        name = 'text_prop',
      ),
      Param(
        type = 'char ***',
        name = 'list_return',
      ),
      Param(
        type = 'int *',
        name = 'count_return',
      ),
    ],
  ),
  'XUnionRectWithRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'XRectangle *',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XUnionRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'XWMGeometry': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Display *',
        name = '',
      ),
      Param(
        type = 'int',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'const char *',
        name = '',
      ),
      Param(
        type = 'unsigned int',
        name = '',
      ),
      Param(
        type = 'XSizeHints *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
      Param(
        type = 'int *',
        name = '',
      ),
    ],
  ),
  'XXorRegion': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
      Param(
        type = 'Region',
        name = '',
      ),
    ],
  ),
  'gdk_x11_app_launch_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_cursor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_cursor_get_xdisplay': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_x11_cursor_get_xcursor': Spec(
    return_type = 'Cursor',
    parameters = [
      Param(
        type = 'GdkCursor *',
        name = 'cursor',
      ),
    ],
  ),
  'gdk_x11_device_get_id': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDevice *',
        name = 'device',
      ),
    ],
  ),
  'gdk_x11_device_core_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_device_xi2_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_device_manager_lookup': Spec(
    return_type = 'GdkDevice *',
    parameters = [
      Param(
        type = 'GdkDeviceManager *',
        name = 'device_manager',
      ),
      Param(
        type = 'gint',
        name = 'device_id',
      ),
    ],
  ),
  'gdk_x11_device_manager_core_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_device_manager_xi2_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_display_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_display_get_xdisplay': Spec(
    return_type = 'Display *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_get_user_time': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_get_startup_notification_id': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_set_startup_notification_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'startup_id',
      ),
    ],
  ),
  'gdk_x11_display_set_cursor_theme': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'theme',
      ),
      Param(
        type = 'const gint',
        name = 'size',
      ),
    ],
  ),
  'gdk_x11_display_broadcast_startup_message': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const char *',
        name = 'message_type',
      ),
    ],
  ),
  'gdk_x11_lookup_xdisplay': Spec(
    return_type = 'GdkDisplay *',
    parameters = [
      Param(
        type = 'Display *',
        name = 'xdisplay',
      ),
    ],
  ),
  'gdk_x11_display_grab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_ungrab': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_error_trap_push': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_error_trap_pop': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_display_error_trap_pop_ignored': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
    ],
  ),
  'gdk_x11_register_standard_event_type': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'gint',
        name = 'event_base',
      ),
      Param(
        type = 'gint',
        name = 'n_events',
      ),
    ],
  ),
  'gdk_x11_set_sm_client_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'sm_client_id',
      ),
    ],
  ),
  'gdk_x11_display_manager_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_drag_context_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_keymap_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_keymap_get_group_for_state': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'guint',
        name = 'state',
      ),
    ],
  ),
  'gdk_x11_keymap_key_is_modifier': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkKeymap *',
        name = 'keymap',
      ),
      Param(
        type = 'guint',
        name = 'keycode',
      ),
    ],
  ),
  'gdk_x11_atom_to_xatom_for_display': Spec(
    return_type = 'Atom',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'atom',
      ),
    ],
  ),
  'gdk_x11_xatom_to_atom_for_display': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Atom',
        name = 'xatom',
      ),
    ],
  ),
  'gdk_x11_get_xatom_by_name_for_display': Spec(
    return_type = 'Atom',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'atom_name',
      ),
    ],
  ),
  'gdk_x11_get_xatom_name_for_display': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Atom',
        name = 'xatom',
      ),
    ],
  ),
  'gdk_x11_atom_to_xatom': Spec(
    return_type = 'Atom',
    parameters = [
      Param(
        type = 'GdkAtom',
        name = 'atom',
      ),
    ],
  ),
  'gdk_x11_xatom_to_atom': Spec(
    return_type = 'GdkAtom',
    parameters = [
      Param(
        type = 'Atom',
        name = 'xatom',
      ),
    ],
  ),
  'gdk_x11_get_xatom_by_name': Spec(
    return_type = 'Atom',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'atom_name',
      ),
    ],
  ),
  'gdk_x11_get_xatom_name': Spec(
    return_type = 'const gchar *',
    parameters = [
      Param(
        type = 'Atom',
        name = 'xatom',
      ),
    ],
  ),
  'gdk_x11_screen_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_screen_get_xscreen': Spec(
    return_type = 'Screen *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_x11_screen_get_screen_number': Spec(
    return_type = 'int',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_x11_screen_get_window_manager_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
    ],
  ),
  'gdk_x11_get_default_screen': Spec(
    return_type = 'gint',
    parameters = [
    ],
  ),
  'gdk_x11_screen_supports_net_wm_hint': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'GdkAtom',
        name = 'property',
      ),
    ],
  ),
  'gdk_x11_screen_get_monitor_output': Spec(
    return_type = 'XID',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'gint',
        name = 'monitor_num',
      ),
    ],
  ),
  'gdk_x11_display_text_property_to_text_list': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'GdkAtom',
        name = 'encoding',
      ),
      Param(
        type = 'gint',
        name = 'format',
      ),
      Param(
        type = 'const guchar *',
        name = 'text',
      ),
      Param(
        type = 'gint',
        name = 'length',
      ),
      Param(
        type = 'gchar ***',
        name = 'list',
      ),
    ],
  ),
  'gdk_x11_free_text_list': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'gchar **',
        name = 'list',
      ),
    ],
  ),
  'gdk_x11_display_string_to_compound_text': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GdkAtom *',
        name = 'encoding',
      ),
      Param(
        type = 'gint *',
        name = 'format',
      ),
      Param(
        type = 'guchar **',
        name = 'ctext',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'gdk_x11_display_utf8_to_compound_text': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'const gchar *',
        name = 'str',
      ),
      Param(
        type = 'GdkAtom *',
        name = 'encoding',
      ),
      Param(
        type = 'gint *',
        name = 'format',
      ),
      Param(
        type = 'guchar **',
        name = 'ctext',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'gdk_x11_free_compound_text': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'guchar *',
        name = 'ctext',
      ),
    ],
  ),
  'gdk_x11_get_default_root_xwindow': Spec(
    return_type = 'Window',
    parameters = [
    ],
  ),
  'gdk_x11_get_default_xdisplay': Spec(
    return_type = 'Display *',
    parameters = [
    ],
  ),
  'gdk_x11_grab_server': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_x11_ungrab_server': Spec(
    return_type = 'void',
    parameters = [
    ],
  ),
  'gdk_x11_visual_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_visual_get_xvisual': Spec(
    return_type = 'Visual *',
    parameters = [
      Param(
        type = 'GdkVisual *',
        name = 'visual',
      ),
    ],
  ),
  'gdk_x11_screen_lookup_visual': Spec(
    return_type = 'GdkVisual *',
    parameters = [
      Param(
        type = 'GdkScreen *',
        name = 'screen',
      ),
      Param(
        type = 'VisualID',
        name = 'xvisualid',
      ),
    ],
  ),
  'gdk_x11_window_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gdk_x11_window_get_xid': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_x11_window_set_user_time': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'guint32',
        name = 'timestamp',
      ),
    ],
  ),
  'gdk_x11_window_set_utf8_property': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'const gchar *',
        name = 'value',
      ),
    ],
  ),
  'gdk_x11_window_set_theme_variant': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'char *',
        name = 'variant',
      ),
    ],
  ),
  'gdk_x11_window_set_hide_titlebar_when_maximized': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
      Param(
        type = 'gboolean',
        name = 'hide_titlebar_when_maximized',
      ),
    ],
  ),
  'gdk_x11_window_move_to_current_desktop': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_x11_get_server_time': Spec(
    return_type = 'guint32',
    parameters = [
      Param(
        type = 'GdkWindow *',
        name = 'window',
      ),
    ],
  ),
  'gdk_x11_window_foreign_new_for_display': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Window',
        name = 'window',
      ),
    ],
  ),
  'gdk_x11_window_lookup_for_display': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Window',
        name = 'window',
      ),
    ],
  ),
  'gtk_socket_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_socket_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
    ],
  ),
  'gtk_socket_add_id': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkSocket *',
        name = 'socket_',
      ),
      Param(
        type = 'Window',
        name = 'window',
      ),
    ],
  ),
  'gtk_socket_get_id': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'GtkSocket *',
        name = 'socket_',
      ),
    ],
  ),
  'gtk_socket_get_plug_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkSocket *',
        name = 'socket_',
      ),
    ],
  ),
  'gtk_plug_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'gtk_plug_construct': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPlug *',
        name = 'plug',
      ),
      Param(
        type = 'Window',
        name = 'socket_id',
      ),
    ],
  ),
  'gtk_plug_new': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'Window',
        name = 'socket_id',
      ),
    ],
  ),
  'gtk_plug_construct_for_display': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GtkPlug *',
        name = 'plug',
      ),
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Window',
        name = 'socket_id',
      ),
    ],
  ),
  'gtk_plug_new_for_display': Spec(
    return_type = 'GtkWidget *',
    parameters = [
      Param(
        type = 'GdkDisplay *',
        name = 'display',
      ),
      Param(
        type = 'Window',
        name = 'socket_id',
      ),
    ],
  ),
  'gtk_plug_get_id': Spec(
    return_type = 'Window',
    parameters = [
      Param(
        type = 'GtkPlug *',
        name = 'plug',
      ),
    ],
  ),
  'gtk_plug_get_embedded': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GtkPlug *',
        name = 'plug',
      ),
    ],
  ),
  'gtk_plug_get_socket_window': Spec(
    return_type = 'GdkWindow *',
    parameters = [
      Param(
        type = 'GtkPlug *',
        name = 'plug',
      ),
    ],
  ),
  'g_desktop_app_info_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_desktop_app_info_new_from_filename': Spec(
    return_type = 'GDesktopAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'filename',
      ),
    ],
  ),
  'g_desktop_app_info_new_from_keyfile': Spec(
    return_type = 'GDesktopAppInfo *',
    parameters = [
      Param(
        type = 'GKeyFile *',
        name = 'key_file',
      ),
    ],
  ),
  'g_desktop_app_info_get_filename': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_get_generic_name': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_get_categories': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_get_keywords': Spec(
    return_type = 'const char *const *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_get_nodisplay': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_get_show_in': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'const gchar *',
        name = 'desktop_env',
      ),
    ],
  ),
  'g_desktop_app_info_get_startup_wm_class': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_new': Spec(
    return_type = 'GDesktopAppInfo *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'desktop_id',
      ),
    ],
  ),
  'g_desktop_app_info_get_is_hidden': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
    ],
  ),
  'g_desktop_app_info_set_desktop_env': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'const char *',
        name = 'desktop_env',
      ),
    ],
  ),
  'g_desktop_app_info_has_key': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'key',
      ),
    ],
  ),
  'g_desktop_app_info_get_string': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'key',
      ),
    ],
  ),
  'g_desktop_app_info_get_boolean': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'info',
      ),
      Param(
        type = 'const char *',
        name = 'key',
      ),
    ],
  ),
  'g_desktop_app_info_lookup_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_desktop_app_info_lookup_get_default_for_uri_scheme': Spec(
    return_type = 'GAppInfo *',
    parameters = [
      Param(
        type = 'GDesktopAppInfoLookup *',
        name = 'lookup',
      ),
      Param(
        type = 'const char *',
        name = 'uri_scheme',
      ),
    ],
  ),
  'g_desktop_app_info_launch_uris_as_manager': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GDesktopAppInfo *',
        name = 'appinfo',
      ),
      Param(
        type = 'GList *',
        name = 'uris',
      ),
      Param(
        type = 'GAppLaunchContext *',
        name = 'launch_context',
      ),
      Param(
        type = 'GSpawnFlags',
        name = 'spawn_flags',
      ),
      Param(
        type = 'GSpawnChildSetupFunc',
        name = 'user_setup',
      ),
      Param(
        type = 'gpointer',
        name = 'user_setup_data',
      ),
      Param(
        type = 'GDesktopAppLaunchCallback',
        name = 'pid_callback',
      ),
      Param(
        type = 'gpointer',
        name = 'pid_callback_data',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_connection_send_fd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_receive_fd': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_send_credentials': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_send_credentials_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_unix_connection_send_credentials_finish': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_receive_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_connection_receive_credentials_async': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GCancellable *',
        name = 'cancellable',
      ),
      Param(
        type = 'GAsyncReadyCallback',
        name = 'callback',
      ),
      Param(
        type = 'gpointer',
        name = 'user_data',
      ),
    ],
  ),
  'g_unix_connection_receive_credentials_finish': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GUnixConnection *',
        name = 'connection',
      ),
      Param(
        type = 'GAsyncResult *',
        name = 'result',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_credentials_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_credentials_message_new': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
    ],
  ),
  'g_unix_credentials_message_new_with_credentials': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
      Param(
        type = 'GCredentials *',
        name = 'credentials',
      ),
    ],
  ),
  'g_unix_credentials_message_get_credentials': Spec(
    return_type = 'GCredentials *',
    parameters = [
      Param(
        type = 'GUnixCredentialsMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_unix_credentials_message_is_supported': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'g_unix_fd_list_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_fd_list_new': Spec(
    return_type = 'GUnixFDList *',
    parameters = [
    ],
  ),
  'g_unix_fd_list_new_from_array': Spec(
    return_type = 'GUnixFDList *',
    parameters = [
      Param(
        type = 'const gint *',
        name = 'fds',
      ),
      Param(
        type = 'gint',
        name = 'n_fds',
      ),
    ],
  ),
  'g_unix_fd_list_append': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'list',
      ),
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_fd_list_get_length': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'list',
      ),
    ],
  ),
  'g_unix_fd_list_get': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'list',
      ),
      Param(
        type = 'gint',
        name = 'index_',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_fd_list_peek_fds': Spec(
    return_type = 'const gint *',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'list',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'g_unix_fd_list_steal_fds': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'list',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'g_unix_fd_message_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_fd_message_new_with_fd_list': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
      Param(
        type = 'GUnixFDList *',
        name = 'fd_list',
      ),
    ],
  ),
  'g_unix_fd_message_new': Spec(
    return_type = 'GSocketControlMessage *',
    parameters = [
    ],
  ),
  'g_unix_fd_message_get_fd_list': Spec(
    return_type = 'GUnixFDList *',
    parameters = [
      Param(
        type = 'GUnixFDMessage *',
        name = 'message',
      ),
    ],
  ),
  'g_unix_fd_message_steal_fds': Spec(
    return_type = 'gint *',
    parameters = [
      Param(
        type = 'GUnixFDMessage *',
        name = 'message',
      ),
      Param(
        type = 'gint *',
        name = 'length',
      ),
    ],
  ),
  'g_unix_fd_message_append_fd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixFDMessage *',
        name = 'message',
      ),
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'g_unix_input_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_input_stream_new': Spec(
    return_type = 'GInputStream *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'gboolean',
        name = 'close_fd',
      ),
    ],
  ),
  'g_unix_input_stream_set_close_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixInputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_fd',
      ),
    ],
  ),
  'g_unix_input_stream_get_close_fd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_unix_input_stream_get_fd': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixInputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_unix_mount_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_point_free': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount1',
      ),
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount2',
      ),
    ],
  ),
  'g_unix_mount_get_mount_path': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_get_device_path': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_get_fs_type': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_is_readonly': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_is_system_internal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_guess_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_guess_should_display': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_guess_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_guess_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_guess_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GUnixMountEntry *',
        name = 'mount_entry',
      ),
    ],
  ),
  'g_unix_mount_point_compare': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount1',
      ),
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount2',
      ),
    ],
  ),
  'g_unix_mount_point_get_mount_path': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_get_device_path': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_get_fs_type': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_get_options': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_is_readonly': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_is_user_mountable': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_is_loopback': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_guess_can_eject': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_guess_name': Spec(
    return_type = 'char *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_guess_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_point_guess_symbolic_icon': Spec(
    return_type = 'GIcon *',
    parameters = [
      Param(
        type = 'GUnixMountPoint *',
        name = 'mount_point',
      ),
    ],
  ),
  'g_unix_mount_points_get': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'guint64 *',
        name = 'time_read',
      ),
    ],
  ),
  'g_unix_mounts_get': Spec(
    return_type = 'GList *',
    parameters = [
      Param(
        type = 'guint64 *',
        name = 'time_read',
      ),
    ],
  ),
  'g_unix_mount_at': Spec(
    return_type = 'GUnixMountEntry *',
    parameters = [
      Param(
        type = 'const char *',
        name = 'mount_path',
      ),
      Param(
        type = 'guint64 *',
        name = 'time_read',
      ),
    ],
  ),
  'g_unix_mounts_changed_since': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint64',
        name = 'time',
      ),
    ],
  ),
  'g_unix_mount_points_changed_since': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'guint64',
        name = 'time',
      ),
    ],
  ),
  'g_unix_mount_monitor_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_mount_monitor_new': Spec(
    return_type = 'GUnixMountMonitor *',
    parameters = [
    ],
  ),
  'g_unix_mount_monitor_set_rate_limit': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixMountMonitor *',
        name = 'mount_monitor',
      ),
      Param(
        type = 'int',
        name = 'limit_msec',
      ),
    ],
  ),
  'g_unix_is_mount_path_system_internal': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'const char *',
        name = 'mount_path',
      ),
    ],
  ),
  'g_unix_output_stream_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_output_stream_new': Spec(
    return_type = 'GOutputStream *',
    parameters = [
      Param(
        type = 'gint',
        name = 'fd',
      ),
      Param(
        type = 'gboolean',
        name = 'close_fd',
      ),
    ],
  ),
  'g_unix_output_stream_set_close_fd': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GUnixOutputStream *',
        name = 'stream',
      ),
      Param(
        type = 'gboolean',
        name = 'close_fd',
      ),
    ],
  ),
  'g_unix_output_stream_get_close_fd': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_unix_output_stream_get_fd': Spec(
    return_type = 'gint',
    parameters = [
      Param(
        type = 'GUnixOutputStream *',
        name = 'stream',
      ),
    ],
  ),
  'g_unix_socket_address_get_type': Spec(
    return_type = 'GType',
    parameters = [
    ],
  ),
  'g_unix_socket_address_new': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
    ],
  ),
  'g_unix_socket_address_new_abstract': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'path_len',
      ),
    ],
  ),
  'g_unix_socket_address_new_with_type': Spec(
    return_type = 'GSocketAddress *',
    parameters = [
      Param(
        type = 'const gchar *',
        name = 'path',
      ),
      Param(
        type = 'gint',
        name = 'path_len',
      ),
      Param(
        type = 'GUnixSocketAddressType',
        name = 'type',
      ),
    ],
  ),
  'g_unix_socket_address_get_path': Spec(
    return_type = 'const char *',
    parameters = [
      Param(
        type = 'GUnixSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_unix_socket_address_get_path_len': Spec(
    return_type = 'gsize',
    parameters = [
      Param(
        type = 'GUnixSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_unix_socket_address_get_address_type': Spec(
    return_type = 'GUnixSocketAddressType',
    parameters = [
      Param(
        type = 'GUnixSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_unix_socket_address_get_is_abstract': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GUnixSocketAddress *',
        name = 'address',
      ),
    ],
  ),
  'g_unix_socket_address_abstract_names_supported': Spec(
    return_type = 'gboolean',
    parameters = [
    ],
  ),
  'gdk_pixdata_serialize': Spec(
    return_type = 'guint8 *',
    parameters = [
      Param(
        type = 'const GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'guint *',
        name = 'stream_length_p',
      ),
    ],
  ),
  'gdk_pixdata_deserialize': Spec(
    return_type = 'gboolean',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'guint',
        name = 'stream_length',
      ),
      Param(
        type = 'const guint8 *',
        name = 'stream',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixdata_from_pixbuf': Spec(
    return_type = 'gpointer',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'const GdkPixbuf *',
        name = 'pixbuf',
      ),
      Param(
        type = 'gboolean',
        name = 'use_rle',
      ),
    ],
  ),
  'gdk_pixbuf_from_pixdata': Spec(
    return_type = 'GdkPixbuf *',
    parameters = [
      Param(
        type = 'const GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'gboolean',
        name = 'copy_pixels',
      ),
      Param(
        type = 'GError **',
        name = 'error',
      ),
    ],
  ),
  'gdk_pixdata_to_csource': Spec(
    return_type = 'GString *',
    parameters = [
      Param(
        type = 'GdkPixdata *',
        name = 'pixdata',
      ),
      Param(
        type = 'const gchar *',
        name = 'name',
      ),
      Param(
        type = 'GdkPixdataDumpType',
        name = 'dump_type',
      ),
    ],
  ),
  '_gdk_pixbuf_marshal_VOID__INT_INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  '_gdk_pixbuf_marshal_VOID__INT_INT_INT_INT': Spec(
    return_type = 'void',
    parameters = [
      Param(
        type = 'GClosure *',
        name = 'closure',
      ),
      Param(
        type = 'GValue *',
        name = 'return_value',
      ),
      Param(
        type = 'guint',
        name = 'n_param_values',
      ),
      Param(
        type = 'const GValue *',
        name = 'param_values',
      ),
      Param(
        type = 'gpointer',
        name = 'invocation_hint',
      ),
      Param(
        type = 'gpointer',
        name = 'marshal_data',
      ),
    ],
  ),
  '__builtin_bswap32': Spec(
    return_type = 'uint32_t',
    parameters = [
      Param(
        type = 'uint32_t',
        name = 'x',
      ),
    ],
  ),
  '__builtin_bswap64': Spec(
    return_type = 'uint64_t',
    parameters = [
      Param(
        type = 'uint64_t',
        name = 'x',
      ),
    ],
  ),
}