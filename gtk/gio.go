// this file is auto-generated by gtk-go

package gtk

// #cgo pkg-config: gio-unix-2.0 gio-2.0 gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include </usr/include/gio-unix-2.0/gio/gdesktopappinfo.h>
// #include </usr/include/gio-unix-2.0/gio/gfiledescriptorbased.h>
// #include </usr/include/gio-unix-2.0/gio/gunixconnection.h>
// #include </usr/include/gio-unix-2.0/gio/gunixmounts.h>
// #include </usr/include/gio-unix-2.0/gio/gunixfdlist.h>
// #include <gio/gio.h>
// #include </usr/include/gio-unix-2.0/gio/gunixcredentialsmessage.h>
// #include </usr/include/gio-unix-2.0/gio/gunixfdmessage.h>
// #include </usr/include/gio-unix-2.0/gio/gunixoutputstream.h>
// #include </usr/include/gio-unix-2.0/gio/gunixsocketaddress.h>
// #include </usr/include/gio-unix-2.0/gio/gunixinputstream.h>
/*
GAppInfo * _g_app_info_create_from_commandline(char * commandline, char * application_name, GAppInfoCreateFlags flags, void * error) {
	return (GAppInfo *)g_app_info_create_from_commandline((const char *)(commandline), (const char *)(application_name), flags, (GError **)(error));
}
GList * _g_app_info_get_all_for_type(char * content_type) {
	return (GList *)g_app_info_get_all_for_type((const char *)(content_type));
}
GAppInfo * _g_app_info_get_default_for_type(char * content_type, gboolean must_support_uris) {
	return (GAppInfo *)g_app_info_get_default_for_type((const char *)(content_type), must_support_uris);
}
GAppInfo * _g_app_info_get_default_for_uri_scheme(char * uri_scheme) {
	return (GAppInfo *)g_app_info_get_default_for_uri_scheme((const char *)(uri_scheme));
}
GList * _g_app_info_get_fallback_for_type(gchar * content_type) {
	return (GList *)g_app_info_get_fallback_for_type((const gchar *)(content_type));
}
GList * _g_app_info_get_recommended_for_type(gchar * content_type) {
	return (GList *)g_app_info_get_recommended_for_type((const gchar *)(content_type));
}
gboolean _g_app_info_launch_default_for_uri(char * uri, GAppLaunchContext * launch_context, void * error) {
	return (gboolean)g_app_info_launch_default_for_uri((const char *)(uri), launch_context, (GError **)(error));
}
void _g_app_info_reset_type_associations(char * content_type) {
	(void)g_app_info_reset_type_associations((const char *)(content_type));
}
GDBusConnection * _g_bus_get_finish(GAsyncResult * res, void * error) {
	return (GDBusConnection *)g_bus_get_finish(res, (GError **)(error));
}
GDBusConnection * _g_bus_get_sync(GBusType bus_type, GCancellable * cancellable, void * error) {
	return (GDBusConnection *)g_bus_get_sync(bus_type, cancellable, (GError **)(error));
}
guint _g_bus_own_name(GBusType bus_type, gchar * name, GBusNameOwnerFlags flags, GBusAcquiredCallback bus_acquired_handler, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return (guint)g_bus_own_name(bus_type, (const gchar *)(name), flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
}
guint _g_bus_own_name_on_connection(GDBusConnection * connection, gchar * name, GBusNameOwnerFlags flags, GBusNameAcquiredCallback name_acquired_handler, GBusNameLostCallback name_lost_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return (guint)g_bus_own_name_on_connection(connection, (const gchar *)(name), flags, name_acquired_handler, name_lost_handler, user_data, user_data_free_func);
}
guint _g_bus_own_name_on_connection_with_closures(GDBusConnection * connection, gchar * name, GBusNameOwnerFlags flags, GClosure * name_acquired_closure, GClosure * name_lost_closure) {
	return (guint)g_bus_own_name_on_connection_with_closures(connection, (const gchar *)(name), flags, name_acquired_closure, name_lost_closure);
}
guint _g_bus_own_name_with_closures(GBusType bus_type, gchar * name, GBusNameOwnerFlags flags, GClosure * bus_acquired_closure, GClosure * name_acquired_closure, GClosure * name_lost_closure) {
	return (guint)g_bus_own_name_with_closures(bus_type, (const gchar *)(name), flags, bus_acquired_closure, name_acquired_closure, name_lost_closure);
}
guint _g_bus_watch_name(GBusType bus_type, gchar * name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return (guint)g_bus_watch_name(bus_type, (const gchar *)(name), flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
}
guint _g_bus_watch_name_on_connection(GDBusConnection * connection, gchar * name, GBusNameWatcherFlags flags, GBusNameAppearedCallback name_appeared_handler, GBusNameVanishedCallback name_vanished_handler, gpointer user_data, GDestroyNotify user_data_free_func) {
	return (guint)g_bus_watch_name_on_connection(connection, (const gchar *)(name), flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func);
}
guint _g_bus_watch_name_on_connection_with_closures(GDBusConnection * connection, gchar * name, GBusNameWatcherFlags flags, GClosure * name_appeared_closure, GClosure * name_vanished_closure) {
	return (guint)g_bus_watch_name_on_connection_with_closures(connection, (const gchar *)(name), flags, name_appeared_closure, name_vanished_closure);
}
guint _g_bus_watch_name_with_closures(GBusType bus_type, gchar * name, GBusNameWatcherFlags flags, GClosure * name_appeared_closure, GClosure * name_vanished_closure) {
	return (guint)g_bus_watch_name_with_closures(bus_type, (const gchar *)(name), flags, name_appeared_closure, name_vanished_closure);
}
gboolean _g_content_type_can_be_executable(gchar * type) {
	return (gboolean)g_content_type_can_be_executable((const gchar *)(type));
}
gboolean _g_content_type_equals(gchar * type1, gchar * type2) {
	return (gboolean)g_content_type_equals((const gchar *)(type1), (const gchar *)(type2));
}
gchar * _g_content_type_from_mime_type(gchar * mime_type) {
	return (gchar *)g_content_type_from_mime_type((const gchar *)(mime_type));
}
gchar * _g_content_type_get_description(gchar * type) {
	return (gchar *)g_content_type_get_description((const gchar *)(type));
}
gchar * _g_content_type_get_generic_icon_name(gchar * type) {
	return (gchar *)g_content_type_get_generic_icon_name((const gchar *)(type));
}
GIcon * _g_content_type_get_icon(gchar * type) {
	return (GIcon *)g_content_type_get_icon((const gchar *)(type));
}
gchar * _g_content_type_get_mime_type(gchar * type) {
	return (gchar *)g_content_type_get_mime_type((const gchar *)(type));
}
GIcon * _g_content_type_get_symbolic_icon(gchar * type) {
	return (GIcon *)g_content_type_get_symbolic_icon((const gchar *)(type));
}
void * _g_content_type_guess_for_tree(GFile * root) {
	return (void *)g_content_type_guess_for_tree(root);
}
gboolean _g_content_type_is_a(gchar * type, gchar * supertype) {
	return (gboolean)g_content_type_is_a((const gchar *)(type), (const gchar *)(supertype));
}
gboolean _g_content_type_is_unknown(gchar * type) {
	return (gboolean)g_content_type_is_unknown((const gchar *)(type));
}
gchar * _g_dbus_address_get_for_bus_sync(GBusType bus_type, GCancellable * cancellable, void * error) {
	return (gchar *)g_dbus_address_get_for_bus_sync(bus_type, cancellable, (GError **)(error));
}
void _g_dbus_address_get_stream(gchar * address, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_address_get_stream((const gchar *)(address), cancellable, callback, user_data);
}
GIOStream * _g_dbus_address_get_stream_finish(GAsyncResult * res, void * out_guid, void * error) {
	return (GIOStream *)g_dbus_address_get_stream_finish(res, (gchar **)(out_guid), (GError **)(error));
}
GIOStream * _g_dbus_address_get_stream_sync(gchar * address, void * out_guid, GCancellable * cancellable, void * error) {
	return (GIOStream *)g_dbus_address_get_stream_sync((const gchar *)(address), (gchar **)(out_guid), cancellable, (GError **)(error));
}
gchar * _g_dbus_error_encode_gerror(GError * error) {
	return (gchar *)g_dbus_error_encode_gerror((const GError *)(error));
}
gchar * _g_dbus_error_get_remote_error(GError * error) {
	return (gchar *)g_dbus_error_get_remote_error((const GError *)(error));
}
gboolean _g_dbus_error_is_remote_error(GError * error) {
	return (gboolean)g_dbus_error_is_remote_error((const GError *)(error));
}
GError * _g_dbus_error_new_for_dbus_error(gchar * dbus_error_name, gchar * dbus_error_message) {
	return (GError *)g_dbus_error_new_for_dbus_error((const gchar *)(dbus_error_name), (const gchar *)(dbus_error_message));
}
gboolean _g_dbus_error_register_error(GQuark error_domain, gint error_code, gchar * dbus_error_name) {
	return (gboolean)g_dbus_error_register_error(error_domain, error_code, (const gchar *)(dbus_error_name));
}
void _g_dbus_error_register_error_domain(gchar * error_domain_quark_name, volatile gsize * quark_volatile, GDBusErrorEntry * entries, guint num_entries) {
	(void)g_dbus_error_register_error_domain((const gchar *)(error_domain_quark_name), quark_volatile, (const GDBusErrorEntry *)(entries), num_entries);
}
gboolean _g_dbus_error_unregister_error(GQuark error_domain, gint error_code, gchar * dbus_error_name) {
	return (gboolean)g_dbus_error_unregister_error(error_domain, error_code, (const gchar *)(dbus_error_name));
}
GVariant * _g_dbus_gvalue_to_gvariant(GValue * gvalue, GVariantType * type) {
	return (GVariant *)g_dbus_gvalue_to_gvariant((const GValue *)(gvalue), (const GVariantType *)(type));
}
gboolean _g_dbus_is_address(gchar * string) {
	return (gboolean)g_dbus_is_address((const gchar *)(string));
}
gboolean _g_dbus_is_guid(gchar * string) {
	return (gboolean)g_dbus_is_guid((const gchar *)(string));
}
gboolean _g_dbus_is_interface_name(gchar * string) {
	return (gboolean)g_dbus_is_interface_name((const gchar *)(string));
}
gboolean _g_dbus_is_member_name(gchar * string) {
	return (gboolean)g_dbus_is_member_name((const gchar *)(string));
}
gboolean _g_dbus_is_name(gchar * string) {
	return (gboolean)g_dbus_is_name((const gchar *)(string));
}
gboolean _g_dbus_is_supported_address(gchar * string, void * error) {
	return (gboolean)g_dbus_is_supported_address((const gchar *)(string), (GError **)(error));
}
gboolean _g_dbus_is_unique_name(gchar * string) {
	return (gboolean)g_dbus_is_unique_name((const gchar *)(string));
}
GFile * _g_file_new_for_commandline_arg(char * arg) {
	return (GFile *)g_file_new_for_commandline_arg((const char *)(arg));
}
GFile * _g_file_new_for_path(char * path) {
	return (GFile *)g_file_new_for_path((const char *)(path));
}
GFile * _g_file_new_for_uri(char * uri) {
	return (GFile *)g_file_new_for_uri((const char *)(uri));
}
GFile * _g_file_new_tmp(char * tmpl, void * iostream, void * error) {
	return (GFile *)g_file_new_tmp((const char *)(tmpl), (GFileIOStream **)(iostream), (GError **)(error));
}
GFile * _g_file_parse_name(char * parse_name) {
	return (GFile *)g_file_parse_name((const char *)(parse_name));
}
guint _g_icon_hash(gpointer icon) {
	return (guint)g_icon_hash((gconstpointer)(icon));
}
GIcon * _g_icon_new_for_string(gchar * str, void * error) {
	return (GIcon *)g_icon_new_for_string((const gchar *)(str), (GError **)(error));
}
GIOExtension * _g_io_extension_point_implement(char * extension_point_name, GType type, char * extension_name, gint priority) {
	return (GIOExtension *)g_io_extension_point_implement((const char *)(extension_point_name), type, (const char *)(extension_name), priority);
}
GIOExtensionPoint * _g_io_extension_point_lookup(char * name) {
	return (GIOExtensionPoint *)g_io_extension_point_lookup((const char *)(name));
}
GIOExtensionPoint * _g_io_extension_point_register(char * name) {
	return (GIOExtensionPoint *)g_io_extension_point_register((const char *)(name));
}
GList * _g_io_modules_load_all_in_directory(gchar * dirname) {
	return (GList *)g_io_modules_load_all_in_directory((const gchar *)(dirname));
}
GList * _g_io_modules_load_all_in_directory_with_scope(gchar * dirname, GIOModuleScope * scope) {
	return (GList *)g_io_modules_load_all_in_directory_with_scope((const gchar *)(dirname), scope);
}
void _g_io_modules_scan_all_in_directory(char * dirname) {
	(void)g_io_modules_scan_all_in_directory((const char *)(dirname));
}
void _g_io_modules_scan_all_in_directory_with_scope(gchar * dirname, GIOModuleScope * scope) {
	(void)g_io_modules_scan_all_in_directory_with_scope((const gchar *)(dirname), scope);
}
gssize _g_pollable_stream_read(GInputStream * stream, void * buffer, gsize count, gboolean blocking, GCancellable * cancellable, void * error) {
	return (gssize)g_pollable_stream_read(stream, buffer, count, blocking, cancellable, (GError **)(error));
}
GProxy * _g_proxy_get_default_for_protocol(gchar * protocol) {
	return (GProxy *)g_proxy_get_default_for_protocol((const gchar *)(protocol));
}
GResource * _g_resource_load(gchar * filename, void * error) {
	return (GResource *)g_resource_load((const gchar *)(filename), (GError **)(error));
}
void * _g_resources_enumerate_children(char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (void *)g_resources_enumerate_children((const char *)(path), lookup_flags, (GError **)(error));
}
gboolean _g_resources_get_info(char * path, GResourceLookupFlags lookup_flags, gsize * size, guint32 * flags, void * error) {
	return (gboolean)g_resources_get_info((const char *)(path), lookup_flags, size, flags, (GError **)(error));
}
GBytes * _g_resources_lookup_data(char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (GBytes *)g_resources_lookup_data((const char *)(path), lookup_flags, (GError **)(error));
}
GInputStream * _g_resources_open_stream(char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (GInputStream *)g_resources_open_stream((const char *)(path), lookup_flags, (GError **)(error));
}
void _g_simple_async_report_gerror_in_idle(GObject * object, GAsyncReadyCallback callback, gpointer user_data, GError * error) {
	(void)g_simple_async_report_gerror_in_idle(object, callback, user_data, (const GError *)(error));
}
GIOStream * _g_tls_client_connection_new(GIOStream * base_io_stream, GSocketConnectable * server_identity, void * error) {
	return (GIOStream *)g_tls_client_connection_new(base_io_stream, server_identity, (GError **)(error));
}
GTlsDatabase * _g_tls_file_database_new(gchar * anchors, void * error) {
	return (GTlsDatabase *)g_tls_file_database_new((const gchar *)(anchors), (GError **)(error));
}
GIOStream * _g_tls_server_connection_new(GIOStream * base_io_stream, GTlsCertificate * certificate, void * error) {
	return (GIOStream *)g_tls_server_connection_new(base_io_stream, certificate, (GError **)(error));
}
gboolean _g_unix_is_mount_path_system_internal(char * mount_path) {
	return (gboolean)g_unix_is_mount_path_system_internal((const char *)(mount_path));
}
GUnixMountEntry * _g_unix_mount_at(char * mount_path, guint64 * time_read) {
	return (GUnixMountEntry *)g_unix_mount_at((const char *)(mount_path), time_read);
}
char * _g_unix_mount_get_device_path(GUnixMountEntry * mount_entry) {
	return (char *)g_unix_mount_get_device_path(mount_entry);
}
char * _g_unix_mount_get_fs_type(GUnixMountEntry * mount_entry) {
	return (char *)g_unix_mount_get_fs_type(mount_entry);
}
char * _g_unix_mount_get_mount_path(GUnixMountEntry * mount_entry) {
	return (char *)g_unix_mount_get_mount_path(mount_entry);
}
void * _g_app_launch_context_get_environment(GAppLaunchContext * _self_) {
	return (void *)g_app_launch_context_get_environment(_self_);
}
void _g_app_launch_context_launch_failed(GAppLaunchContext * _self_, char * startup_notify_id) {
	(void)g_app_launch_context_launch_failed(_self_, (const char *)(startup_notify_id));
}
void _g_app_launch_context_setenv(GAppLaunchContext * _self_, char * variable, char * value) {
	(void)g_app_launch_context_setenv(_self_, (const char *)(variable), (const char *)(value));
}
void _g_app_launch_context_unsetenv(GAppLaunchContext * _self_, char * variable) {
	(void)g_app_launch_context_unsetenv(_self_, (const char *)(variable));
}
GApplication * _g_application_new(gchar * application_id, GApplicationFlags flags) {
	return (GApplication *)g_application_new((const gchar *)(application_id), flags);
}
gboolean _g_application_id_is_valid(gchar * application_id) {
	return (gboolean)g_application_id_is_valid((const gchar *)(application_id));
}
gchar * _g_application_get_application_id(GApplication * _self_) {
	return (gchar *)g_application_get_application_id(_self_);
}
gchar * _g_application_get_dbus_object_path(GApplication * _self_) {
	return (gchar *)g_application_get_dbus_object_path(_self_);
}
gboolean _g_application_register(GApplication * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_application_register(_self_, cancellable, (GError **)(error));
}
void _g_application_set_application_id(GApplication * _self_, gchar * application_id) {
	(void)g_application_set_application_id(_self_, (const gchar *)(application_id));
}
void * _g_application_command_line_get_arguments(GApplicationCommandLine * _self_, int * argc) {
	return (void *)g_application_command_line_get_arguments(_self_, argc);
}
gchar * _g_application_command_line_get_cwd(GApplicationCommandLine * _self_) {
	return (gchar *)g_application_command_line_get_cwd(_self_);
}
void * _g_application_command_line_get_environ(GApplicationCommandLine * _self_) {
	return (void *)g_application_command_line_get_environ(_self_);
}
gchar * _g_application_command_line_getenv(GApplicationCommandLine * _self_, gchar * name) {
	return (gchar *)g_application_command_line_getenv(_self_, (const gchar *)(name));
}
gssize _g_buffered_input_stream_fill(GBufferedInputStream * _self_, gssize count, GCancellable * cancellable, void * error) {
	return (gssize)g_buffered_input_stream_fill(_self_, count, cancellable, (GError **)(error));
}
gssize _g_buffered_input_stream_fill_finish(GBufferedInputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_buffered_input_stream_fill_finish(_self_, result, (GError **)(error));
}
void * _g_buffered_input_stream_peek_buffer(GBufferedInputStream * _self_, gsize * count) {
	return (void *)g_buffered_input_stream_peek_buffer(_self_, count);
}
int _g_buffered_input_stream_read_byte(GBufferedInputStream * _self_, GCancellable * cancellable, void * error) {
	return (int)g_buffered_input_stream_read_byte(_self_, cancellable, (GError **)(error));
}
gboolean _g_cancellable_set_error_if_cancelled(GCancellable * _self_, void * error) {
	return (gboolean)g_cancellable_set_error_if_cancelled(_self_, (GError **)(error));
}
GCharsetConverter * _g_charset_converter_new(gchar * to_charset, gchar * from_charset, void * error) {
	return (GCharsetConverter *)g_charset_converter_new((const gchar *)(to_charset), (const gchar *)(from_charset), (GError **)(error));
}
uid_t _g_credentials_get_unix_user(GCredentials * _self_, void * error) {
	return (uid_t)g_credentials_get_unix_user(_self_, (GError **)(error));
}
gboolean _g_credentials_is_same_user(GCredentials * _self_, GCredentials * other_credentials, void * error) {
	return (gboolean)g_credentials_is_same_user(_self_, other_credentials, (GError **)(error));
}
gboolean _g_credentials_set_unix_user(GCredentials * _self_, uid_t uid, void * error) {
	return (gboolean)g_credentials_set_unix_user(_self_, uid, (GError **)(error));
}
GDBusActionGroup * _g_dbus_action_group_get(GDBusConnection * connection, gchar * bus_name, gchar * object_path) {
	return (GDBusActionGroup *)g_dbus_action_group_get(connection, (const gchar *)(bus_name), (const gchar *)(object_path));
}
gboolean _g_dbus_auth_observer_allow_mechanism(GDBusAuthObserver * _self_, gchar * mechanism) {
	return (gboolean)g_dbus_auth_observer_allow_mechanism(_self_, (const gchar *)(mechanism));
}
GDBusConnection * _g_dbus_connection_new_finish(GAsyncResult * res, void * error) {
	return (GDBusConnection *)g_dbus_connection_new_finish(res, (GError **)(error));
}
GDBusConnection * _g_dbus_connection_new_for_address_finish(GAsyncResult * res, void * error) {
	return (GDBusConnection *)g_dbus_connection_new_for_address_finish(res, (GError **)(error));
}
GDBusConnection * _g_dbus_connection_new_for_address_sync(gchar * address, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, void * error) {
	return (GDBusConnection *)g_dbus_connection_new_for_address_sync((const gchar *)(address), flags, observer, cancellable, (GError **)(error));
}
GDBusConnection * _g_dbus_connection_new_sync(GIOStream * stream, gchar * guid, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, void * error) {
	return (GDBusConnection *)g_dbus_connection_new_sync(stream, (const gchar *)(guid), flags, observer, cancellable, (GError **)(error));
}
void _g_dbus_connection_new(GIOStream * stream, gchar * guid, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_connection_new(stream, (const gchar *)(guid), flags, observer, cancellable, callback, user_data);
}
void _g_dbus_connection_new_for_address(gchar * address, GDBusConnectionFlags flags, GDBusAuthObserver * observer, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_connection_new_for_address((const gchar *)(address), flags, observer, cancellable, callback, user_data);
}
void _g_dbus_connection_call(GDBusConnection * _self_, gchar * bus_name, gchar * object_path, gchar * interface_name, gchar * method_name, GVariant * parameters, GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_connection_call(_self_, (const gchar *)(bus_name), (const gchar *)(object_path), (const gchar *)(interface_name), (const gchar *)(method_name), parameters, (const GVariantType *)(reply_type), flags, timeout_msec, cancellable, callback, user_data);
}
GVariant * _g_dbus_connection_call_finish(GDBusConnection * _self_, GAsyncResult * res, void * error) {
	return (GVariant *)g_dbus_connection_call_finish(_self_, res, (GError **)(error));
}
GVariant * _g_dbus_connection_call_sync(GDBusConnection * _self_, gchar * bus_name, gchar * object_path, gchar * interface_name, gchar * method_name, GVariant * parameters, GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, void * error) {
	return (GVariant *)g_dbus_connection_call_sync(_self_, (const gchar *)(bus_name), (const gchar *)(object_path), (const gchar *)(interface_name), (const gchar *)(method_name), parameters, (const GVariantType *)(reply_type), flags, timeout_msec, cancellable, (GError **)(error));
}
void _g_dbus_connection_call_with_unix_fd_list(GDBusConnection * _self_, gchar * bus_name, gchar * object_path, gchar * interface_name, gchar * method_name, GVariant * parameters, GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_connection_call_with_unix_fd_list(_self_, (const gchar *)(bus_name), (const gchar *)(object_path), (const gchar *)(interface_name), (const gchar *)(method_name), parameters, (const GVariantType *)(reply_type), flags, timeout_msec, fd_list, cancellable, callback, user_data);
}
GVariant * _g_dbus_connection_call_with_unix_fd_list_finish(GDBusConnection * _self_, void * out_fd_list, GAsyncResult * res, void * error) {
	return (GVariant *)g_dbus_connection_call_with_unix_fd_list_finish(_self_, (GUnixFDList **)(out_fd_list), res, (GError **)(error));
}
GVariant * _g_dbus_connection_call_with_unix_fd_list_sync(GDBusConnection * _self_, gchar * bus_name, gchar * object_path, gchar * interface_name, gchar * method_name, GVariant * parameters, GVariantType * reply_type, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, void * out_fd_list, GCancellable * cancellable, void * error) {
	return (GVariant *)g_dbus_connection_call_with_unix_fd_list_sync(_self_, (const gchar *)(bus_name), (const gchar *)(object_path), (const gchar *)(interface_name), (const gchar *)(method_name), parameters, (const GVariantType *)(reply_type), flags, timeout_msec, fd_list, (GUnixFDList **)(out_fd_list), cancellable, (GError **)(error));
}
gboolean _g_dbus_connection_close_finish(GDBusConnection * _self_, GAsyncResult * res, void * error) {
	return (gboolean)g_dbus_connection_close_finish(_self_, res, (GError **)(error));
}
gboolean _g_dbus_connection_close_sync(GDBusConnection * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_dbus_connection_close_sync(_self_, cancellable, (GError **)(error));
}
gboolean _g_dbus_connection_emit_signal(GDBusConnection * _self_, gchar * destination_bus_name, gchar * object_path, gchar * interface_name, gchar * signal_name, GVariant * parameters, void * error) {
	return (gboolean)g_dbus_connection_emit_signal(_self_, (const gchar *)(destination_bus_name), (const gchar *)(object_path), (const gchar *)(interface_name), (const gchar *)(signal_name), parameters, (GError **)(error));
}
guint _g_dbus_connection_export_action_group(GDBusConnection * _self_, gchar * object_path, GActionGroup * action_group, void * error) {
	return (guint)g_dbus_connection_export_action_group(_self_, (const gchar *)(object_path), action_group, (GError **)(error));
}
guint _g_dbus_connection_export_menu_model(GDBusConnection * _self_, gchar * object_path, GMenuModel * menu, void * error) {
	return (guint)g_dbus_connection_export_menu_model(_self_, (const gchar *)(object_path), menu, (GError **)(error));
}
gboolean _g_dbus_connection_flush_finish(GDBusConnection * _self_, GAsyncResult * res, void * error) {
	return (gboolean)g_dbus_connection_flush_finish(_self_, res, (GError **)(error));
}
gboolean _g_dbus_connection_flush_sync(GDBusConnection * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_dbus_connection_flush_sync(_self_, cancellable, (GError **)(error));
}
gchar * _g_dbus_connection_get_guid(GDBusConnection * _self_) {
	return (gchar *)g_dbus_connection_get_guid(_self_);
}
gchar * _g_dbus_connection_get_unique_name(GDBusConnection * _self_) {
	return (gchar *)g_dbus_connection_get_unique_name(_self_);
}
guint _g_dbus_connection_register_object(GDBusConnection * _self_, gchar * object_path, GDBusInterfaceInfo * interface_info, GDBusInterfaceVTable * vtable, gpointer user_data, GDestroyNotify user_data_free_func, void * error) {
	return (guint)g_dbus_connection_register_object(_self_, (const gchar *)(object_path), interface_info, (const GDBusInterfaceVTable *)(vtable), user_data, user_data_free_func, (GError **)(error));
}
guint _g_dbus_connection_register_subtree(GDBusConnection * _self_, gchar * object_path, GDBusSubtreeVTable * vtable, GDBusSubtreeFlags flags, gpointer user_data, GDestroyNotify user_data_free_func, void * error) {
	return (guint)g_dbus_connection_register_subtree(_self_, (const gchar *)(object_path), (const GDBusSubtreeVTable *)(vtable), flags, user_data, user_data_free_func, (GError **)(error));
}
gboolean _g_dbus_connection_send_message(GDBusConnection * _self_, GDBusMessage * message, GDBusSendMessageFlags flags, volatile guint32 * out_serial, void * error) {
	return (gboolean)g_dbus_connection_send_message(_self_, message, flags, out_serial, (GError **)(error));
}
GDBusMessage * _g_dbus_connection_send_message_with_reply_finish(GDBusConnection * _self_, GAsyncResult * res, void * error) {
	return (GDBusMessage *)g_dbus_connection_send_message_with_reply_finish(_self_, res, (GError **)(error));
}
GDBusMessage * _g_dbus_connection_send_message_with_reply_sync(GDBusConnection * _self_, GDBusMessage * message, GDBusSendMessageFlags flags, gint timeout_msec, volatile guint32 * out_serial, GCancellable * cancellable, void * error) {
	return (GDBusMessage *)g_dbus_connection_send_message_with_reply_sync(_self_, message, flags, timeout_msec, out_serial, cancellable, (GError **)(error));
}
guint _g_dbus_connection_signal_subscribe(GDBusConnection * _self_, gchar * sender, gchar * interface_name, gchar * member, gchar * object_path, gchar * arg0, GDBusSignalFlags flags, GDBusSignalCallback callback, gpointer user_data, GDestroyNotify user_data_free_func) {
	return (guint)g_dbus_connection_signal_subscribe(_self_, (const gchar *)(sender), (const gchar *)(interface_name), (const gchar *)(member), (const gchar *)(object_path), (const gchar *)(arg0), flags, callback, user_data, user_data_free_func);
}
gboolean _g_dbus_interface_skeleton_export(GDBusInterfaceSkeleton * _self_, GDBusConnection * connection, gchar * object_path, void * error) {
	return (gboolean)g_dbus_interface_skeleton_export(_self_, connection, (const gchar *)(object_path), (GError **)(error));
}
gchar * _g_dbus_interface_skeleton_get_object_path(GDBusInterfaceSkeleton * _self_) {
	return (gchar *)g_dbus_interface_skeleton_get_object_path(_self_);
}
GDBusMenuModel * _g_dbus_menu_model_get(GDBusConnection * connection, gchar * bus_name, gchar * object_path) {
	return (GDBusMenuModel *)g_dbus_menu_model_get(connection, (const gchar *)(bus_name), (const gchar *)(object_path));
}
GDBusMessage * _g_dbus_message_new_method_call(gchar * name, gchar * path, gchar * interface_, gchar * method) {
	return (GDBusMessage *)g_dbus_message_new_method_call((const gchar *)(name), (const gchar *)(path), (const gchar *)(interface_), (const gchar *)(method));
}
GDBusMessage * _g_dbus_message_new_signal(gchar * path, gchar * interface_, gchar * signal) {
	return (GDBusMessage *)g_dbus_message_new_signal((const gchar *)(path), (const gchar *)(interface_), (const gchar *)(signal));
}
GDBusMessage * _g_dbus_message_copy(GDBusMessage * _self_, void * error) {
	return (GDBusMessage *)g_dbus_message_copy(_self_, (GError **)(error));
}
gchar * _g_dbus_message_get_arg0(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_arg0(_self_);
}
gchar * _g_dbus_message_get_destination(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_destination(_self_);
}
gchar * _g_dbus_message_get_error_name(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_error_name(_self_);
}
gchar * _g_dbus_message_get_interface(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_interface(_self_);
}
gchar * _g_dbus_message_get_member(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_member(_self_);
}
gchar * _g_dbus_message_get_path(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_path(_self_);
}
gchar * _g_dbus_message_get_sender(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_sender(_self_);
}
gchar * _g_dbus_message_get_signature(GDBusMessage * _self_) {
	return (gchar *)g_dbus_message_get_signature(_self_);
}
GDBusMessage * _g_dbus_message_new_method_error_literal(GDBusMessage * _self_, gchar * error_name, gchar * error_message) {
	return (GDBusMessage *)g_dbus_message_new_method_error_literal(_self_, (const gchar *)(error_name), (const gchar *)(error_message));
}
void _g_dbus_message_set_destination(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_destination(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_error_name(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_error_name(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_interface(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_interface(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_member(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_member(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_path(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_path(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_sender(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_sender(_self_, (const gchar *)(value));
}
void _g_dbus_message_set_signature(GDBusMessage * _self_, gchar * value) {
	(void)g_dbus_message_set_signature(_self_, (const gchar *)(value));
}
guchar * _g_dbus_message_to_blob(GDBusMessage * _self_, gsize * out_size, GDBusCapabilityFlags capabilities, void * error) {
	return (guchar *)g_dbus_message_to_blob(_self_, out_size, capabilities, (GError **)(error));
}
gboolean _g_dbus_message_to_gerror(GDBusMessage * _self_, void * error) {
	return (gboolean)g_dbus_message_to_gerror(_self_, (GError **)(error));
}
gchar * _g_dbus_method_invocation_get_interface_name(GDBusMethodInvocation * _self_) {
	return (gchar *)g_dbus_method_invocation_get_interface_name(_self_);
}
GDBusMethodInfo * _g_dbus_method_invocation_get_method_info(GDBusMethodInvocation * _self_) {
	return (GDBusMethodInfo *)g_dbus_method_invocation_get_method_info(_self_);
}
gchar * _g_dbus_method_invocation_get_method_name(GDBusMethodInvocation * _self_) {
	return (gchar *)g_dbus_method_invocation_get_method_name(_self_);
}
gchar * _g_dbus_method_invocation_get_object_path(GDBusMethodInvocation * _self_) {
	return (gchar *)g_dbus_method_invocation_get_object_path(_self_);
}
gchar * _g_dbus_method_invocation_get_sender(GDBusMethodInvocation * _self_) {
	return (gchar *)g_dbus_method_invocation_get_sender(_self_);
}
void _g_dbus_method_invocation_return_dbus_error(GDBusMethodInvocation * _self_, gchar * error_name, gchar * error_message) {
	(void)g_dbus_method_invocation_return_dbus_error(_self_, (const gchar *)(error_name), (const gchar *)(error_message));
}
void _g_dbus_method_invocation_return_error_literal(GDBusMethodInvocation * _self_, GQuark domain, gint code, gchar * message) {
	(void)g_dbus_method_invocation_return_error_literal(_self_, domain, code, (const gchar *)(message));
}
void _g_dbus_method_invocation_return_gerror(GDBusMethodInvocation * _self_, GError * error) {
	(void)g_dbus_method_invocation_return_gerror(_self_, (const GError *)(error));
}
GDBusObjectManager * _g_dbus_object_manager_client_new_finish(GAsyncResult * res, void * error) {
	return (GDBusObjectManager *)g_dbus_object_manager_client_new_finish(res, (GError **)(error));
}
GDBusObjectManager * _g_dbus_object_manager_client_new_for_bus_finish(GAsyncResult * res, void * error) {
	return (GDBusObjectManager *)g_dbus_object_manager_client_new_for_bus_finish(res, (GError **)(error));
}
GDBusObjectManager * _g_dbus_object_manager_client_new_for_bus_sync(GBusType bus_type, GDBusObjectManagerClientFlags flags, gchar * name, gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, void * error) {
	return (GDBusObjectManager *)g_dbus_object_manager_client_new_for_bus_sync(bus_type, flags, (const gchar *)(name), (const gchar *)(object_path), get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, (GError **)(error));
}
GDBusObjectManager * _g_dbus_object_manager_client_new_sync(GDBusConnection * connection, GDBusObjectManagerClientFlags flags, gchar * name, gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, void * error) {
	return (GDBusObjectManager *)g_dbus_object_manager_client_new_sync(connection, flags, (const gchar *)(name), (const gchar *)(object_path), get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, (GError **)(error));
}
void _g_dbus_object_manager_client_new(GDBusConnection * connection, GDBusObjectManagerClientFlags flags, gchar * name, gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_object_manager_client_new(connection, flags, (const gchar *)(name), (const gchar *)(object_path), get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
}
void _g_dbus_object_manager_client_new_for_bus(GBusType bus_type, GDBusObjectManagerClientFlags flags, gchar * name, gchar * object_path, GDBusProxyTypeFunc get_proxy_type_func, gpointer get_proxy_type_user_data, GDestroyNotify get_proxy_type_destroy_notify, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_object_manager_client_new_for_bus(bus_type, flags, (const gchar *)(name), (const gchar *)(object_path), get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, cancellable, callback, user_data);
}
gchar * _g_dbus_object_manager_client_get_name(GDBusObjectManagerClient * _self_) {
	return (gchar *)g_dbus_object_manager_client_get_name(_self_);
}
GDBusObjectManagerServer * _g_dbus_object_manager_server_new(gchar * object_path) {
	return (GDBusObjectManagerServer *)g_dbus_object_manager_server_new((const gchar *)(object_path));
}
gboolean _g_dbus_object_manager_server_unexport(GDBusObjectManagerServer * _self_, gchar * object_path) {
	return (gboolean)g_dbus_object_manager_server_unexport(_self_, (const gchar *)(object_path));
}
GDBusObjectProxy * _g_dbus_object_proxy_new(GDBusConnection * connection, gchar * object_path) {
	return (GDBusObjectProxy *)g_dbus_object_proxy_new(connection, (const gchar *)(object_path));
}
GDBusObjectSkeleton * _g_dbus_object_skeleton_new(gchar * object_path) {
	return (GDBusObjectSkeleton *)g_dbus_object_skeleton_new((const gchar *)(object_path));
}
void _g_dbus_object_skeleton_remove_interface_by_name(GDBusObjectSkeleton * _self_, gchar * interface_name) {
	(void)g_dbus_object_skeleton_remove_interface_by_name(_self_, (const gchar *)(interface_name));
}
void _g_dbus_object_skeleton_set_object_path(GDBusObjectSkeleton * _self_, gchar * object_path) {
	(void)g_dbus_object_skeleton_set_object_path(_self_, (const gchar *)(object_path));
}
GDBusProxy * _g_dbus_proxy_new_finish(GAsyncResult * res, void * error) {
	return (GDBusProxy *)g_dbus_proxy_new_finish(res, (GError **)(error));
}
GDBusProxy * _g_dbus_proxy_new_for_bus_finish(GAsyncResult * res, void * error) {
	return (GDBusProxy *)g_dbus_proxy_new_for_bus_finish(res, (GError **)(error));
}
GDBusProxy * _g_dbus_proxy_new_for_bus_sync(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo * info, gchar * name, gchar * object_path, gchar * interface_name, GCancellable * cancellable, void * error) {
	return (GDBusProxy *)g_dbus_proxy_new_for_bus_sync(bus_type, flags, info, (const gchar *)(name), (const gchar *)(object_path), (const gchar *)(interface_name), cancellable, (GError **)(error));
}
GDBusProxy * _g_dbus_proxy_new_sync(GDBusConnection * connection, GDBusProxyFlags flags, GDBusInterfaceInfo * info, gchar * name, gchar * object_path, gchar * interface_name, GCancellable * cancellable, void * error) {
	return (GDBusProxy *)g_dbus_proxy_new_sync(connection, flags, info, (const gchar *)(name), (const gchar *)(object_path), (const gchar *)(interface_name), cancellable, (GError **)(error));
}
void _g_dbus_proxy_new(GDBusConnection * connection, GDBusProxyFlags flags, GDBusInterfaceInfo * info, gchar * name, gchar * object_path, gchar * interface_name, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_proxy_new(connection, flags, info, (const gchar *)(name), (const gchar *)(object_path), (const gchar *)(interface_name), cancellable, callback, user_data);
}
void _g_dbus_proxy_new_for_bus(GBusType bus_type, GDBusProxyFlags flags, GDBusInterfaceInfo * info, gchar * name, gchar * object_path, gchar * interface_name, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_proxy_new_for_bus(bus_type, flags, info, (const gchar *)(name), (const gchar *)(object_path), (const gchar *)(interface_name), cancellable, callback, user_data);
}
void _g_dbus_proxy_call(GDBusProxy * _self_, gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_proxy_call(_self_, (const gchar *)(method_name), parameters, flags, timeout_msec, cancellable, callback, user_data);
}
GVariant * _g_dbus_proxy_call_finish(GDBusProxy * _self_, GAsyncResult * res, void * error) {
	return (GVariant *)g_dbus_proxy_call_finish(_self_, res, (GError **)(error));
}
GVariant * _g_dbus_proxy_call_sync(GDBusProxy * _self_, gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GCancellable * cancellable, void * error) {
	return (GVariant *)g_dbus_proxy_call_sync(_self_, (const gchar *)(method_name), parameters, flags, timeout_msec, cancellable, (GError **)(error));
}
void _g_dbus_proxy_call_with_unix_fd_list(GDBusProxy * _self_, gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_dbus_proxy_call_with_unix_fd_list(_self_, (const gchar *)(method_name), parameters, flags, timeout_msec, fd_list, cancellable, callback, user_data);
}
GVariant * _g_dbus_proxy_call_with_unix_fd_list_finish(GDBusProxy * _self_, void * out_fd_list, GAsyncResult * res, void * error) {
	return (GVariant *)g_dbus_proxy_call_with_unix_fd_list_finish(_self_, (GUnixFDList **)(out_fd_list), res, (GError **)(error));
}
GVariant * _g_dbus_proxy_call_with_unix_fd_list_sync(GDBusProxy * _self_, gchar * method_name, GVariant * parameters, GDBusCallFlags flags, gint timeout_msec, GUnixFDList * fd_list, void * out_fd_list, GCancellable * cancellable, void * error) {
	return (GVariant *)g_dbus_proxy_call_with_unix_fd_list_sync(_self_, (const gchar *)(method_name), parameters, flags, timeout_msec, fd_list, (GUnixFDList **)(out_fd_list), cancellable, (GError **)(error));
}
GVariant * _g_dbus_proxy_get_cached_property(GDBusProxy * _self_, gchar * property_name) {
	return (GVariant *)g_dbus_proxy_get_cached_property(_self_, (const gchar *)(property_name));
}
void * _g_dbus_proxy_get_cached_property_names(GDBusProxy * _self_) {
	return (void *)g_dbus_proxy_get_cached_property_names(_self_);
}
gchar * _g_dbus_proxy_get_interface_name(GDBusProxy * _self_) {
	return (gchar *)g_dbus_proxy_get_interface_name(_self_);
}
gchar * _g_dbus_proxy_get_name(GDBusProxy * _self_) {
	return (gchar *)g_dbus_proxy_get_name(_self_);
}
gchar * _g_dbus_proxy_get_object_path(GDBusProxy * _self_) {
	return (gchar *)g_dbus_proxy_get_object_path(_self_);
}
void _g_dbus_proxy_set_cached_property(GDBusProxy * _self_, gchar * property_name, GVariant * value) {
	(void)g_dbus_proxy_set_cached_property(_self_, (const gchar *)(property_name), value);
}
GDBusServer * _g_dbus_server_new_sync(gchar * address, GDBusServerFlags flags, gchar * guid, GDBusAuthObserver * observer, GCancellable * cancellable, void * error) {
	return (GDBusServer *)g_dbus_server_new_sync((const gchar *)(address), flags, (const gchar *)(guid), observer, cancellable, (GError **)(error));
}
gchar * _g_dbus_server_get_client_address(GDBusServer * _self_) {
	return (gchar *)g_dbus_server_get_client_address(_self_);
}
gchar * _g_dbus_server_get_guid(GDBusServer * _self_) {
	return (gchar *)g_dbus_server_get_guid(_self_);
}
guchar _g_data_input_stream_read_byte(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (guchar)g_data_input_stream_read_byte(_self_, cancellable, (GError **)(error));
}
gint16 _g_data_input_stream_read_int16(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (gint16)g_data_input_stream_read_int16(_self_, cancellable, (GError **)(error));
}
gint32 _g_data_input_stream_read_int32(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (gint32)g_data_input_stream_read_int32(_self_, cancellable, (GError **)(error));
}
gint64 _g_data_input_stream_read_int64(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (gint64)g_data_input_stream_read_int64(_self_, cancellable, (GError **)(error));
}
char * _g_data_input_stream_read_line(GDataInputStream * _self_, gsize * length, GCancellable * cancellable, void * error) {
	return (char *)g_data_input_stream_read_line(_self_, length, cancellable, (GError **)(error));
}
char * _g_data_input_stream_read_line_finish(GDataInputStream * _self_, GAsyncResult * result, gsize * length, void * error) {
	return (char *)g_data_input_stream_read_line_finish(_self_, result, length, (GError **)(error));
}
char * _g_data_input_stream_read_line_finish_utf8(GDataInputStream * _self_, GAsyncResult * result, gsize * length, void * error) {
	return (char *)g_data_input_stream_read_line_finish_utf8(_self_, result, length, (GError **)(error));
}
char * _g_data_input_stream_read_line_utf8(GDataInputStream * _self_, gsize * length, GCancellable * cancellable, void * error) {
	return (char *)g_data_input_stream_read_line_utf8(_self_, length, cancellable, (GError **)(error));
}
guint16 _g_data_input_stream_read_uint16(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (guint16)g_data_input_stream_read_uint16(_self_, cancellable, (GError **)(error));
}
guint32 _g_data_input_stream_read_uint32(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (guint32)g_data_input_stream_read_uint32(_self_, cancellable, (GError **)(error));
}
guint64 _g_data_input_stream_read_uint64(GDataInputStream * _self_, GCancellable * cancellable, void * error) {
	return (guint64)g_data_input_stream_read_uint64(_self_, cancellable, (GError **)(error));
}
char * _g_data_input_stream_read_until(GDataInputStream * _self_, gchar * stop_chars, gsize * length, GCancellable * cancellable, void * error) {
	return (char *)g_data_input_stream_read_until(_self_, (const gchar *)(stop_chars), length, cancellable, (GError **)(error));
}
void _g_data_input_stream_read_until_async(GDataInputStream * _self_, gchar * stop_chars, gint io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_data_input_stream_read_until_async(_self_, (const gchar *)(stop_chars), io_priority, cancellable, callback, user_data);
}
char * _g_data_input_stream_read_until_finish(GDataInputStream * _self_, GAsyncResult * result, gsize * length, void * error) {
	return (char *)g_data_input_stream_read_until_finish(_self_, result, length, (GError **)(error));
}
char * _g_data_input_stream_read_upto(GDataInputStream * _self_, gchar * stop_chars, gssize stop_chars_len, gsize * length, GCancellable * cancellable, void * error) {
	return (char *)g_data_input_stream_read_upto(_self_, (const gchar *)(stop_chars), stop_chars_len, length, cancellable, (GError **)(error));
}
void _g_data_input_stream_read_upto_async(GDataInputStream * _self_, gchar * stop_chars, gssize stop_chars_len, gint io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_data_input_stream_read_upto_async(_self_, (const gchar *)(stop_chars), stop_chars_len, io_priority, cancellable, callback, user_data);
}
char * _g_data_input_stream_read_upto_finish(GDataInputStream * _self_, GAsyncResult * result, gsize * length, void * error) {
	return (char *)g_data_input_stream_read_upto_finish(_self_, result, length, (GError **)(error));
}
gboolean _g_data_output_stream_put_byte(GDataOutputStream * _self_, guchar data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_byte(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_int16(GDataOutputStream * _self_, gint16 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_int16(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_int32(GDataOutputStream * _self_, gint32 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_int32(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_int64(GDataOutputStream * _self_, gint64 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_int64(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_string(GDataOutputStream * _self_, char * str, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_string(_self_, (const char *)(str), cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_uint16(GDataOutputStream * _self_, guint16 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_uint16(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_uint32(GDataOutputStream * _self_, guint32 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_uint32(_self_, data, cancellable, (GError **)(error));
}
gboolean _g_data_output_stream_put_uint64(GDataOutputStream * _self_, guint64 data, GCancellable * cancellable, void * error) {
	return (gboolean)g_data_output_stream_put_uint64(_self_, data, cancellable, (GError **)(error));
}
GDesktopAppInfo * _g_desktop_app_info_new(char * desktop_id) {
	return (GDesktopAppInfo *)g_desktop_app_info_new((const char *)(desktop_id));
}
GDesktopAppInfo * _g_desktop_app_info_new_from_filename(char * filename) {
	return (GDesktopAppInfo *)g_desktop_app_info_new_from_filename((const char *)(filename));
}
void _g_desktop_app_info_set_desktop_env(char * desktop_env) {
	(void)g_desktop_app_info_set_desktop_env((const char *)(desktop_env));
}
gboolean _g_desktop_app_info_get_boolean(GDesktopAppInfo * _self_, char * key) {
	return (gboolean)g_desktop_app_info_get_boolean(_self_, (const char *)(key));
}
char * _g_desktop_app_info_get_categories(GDesktopAppInfo * _self_) {
	return (char *)g_desktop_app_info_get_categories(_self_);
}
char * _g_desktop_app_info_get_filename(GDesktopAppInfo * _self_) {
	return (char *)g_desktop_app_info_get_filename(_self_);
}
char * _g_desktop_app_info_get_generic_name(GDesktopAppInfo * _self_) {
	return (char *)g_desktop_app_info_get_generic_name(_self_);
}
void * _g_desktop_app_info_get_keywords(GDesktopAppInfo * _self_) {
	return (void *)g_desktop_app_info_get_keywords(_self_);
}
gboolean _g_desktop_app_info_get_show_in(GDesktopAppInfo * _self_, gchar * desktop_env) {
	return (gboolean)g_desktop_app_info_get_show_in(_self_, (const gchar *)(desktop_env));
}
char * _g_desktop_app_info_get_startup_wm_class(GDesktopAppInfo * _self_) {
	return (char *)g_desktop_app_info_get_startup_wm_class(_self_);
}
char * _g_desktop_app_info_get_string(GDesktopAppInfo * _self_, char * key) {
	return (char *)g_desktop_app_info_get_string(_self_, (const char *)(key));
}
gboolean _g_desktop_app_info_has_key(GDesktopAppInfo * _self_, char * key) {
	return (gboolean)g_desktop_app_info_has_key(_self_, (const char *)(key));
}
gboolean _g_desktop_app_info_launch_uris_as_manager(GDesktopAppInfo * _self_, GList * uris, GAppLaunchContext * launch_context, GSpawnFlags spawn_flags, GSpawnChildSetupFunc user_setup, gpointer user_setup_data, GDesktopAppLaunchCallback pid_callback, gpointer pid_callback_data, void * error) {
	return (gboolean)g_desktop_app_info_launch_uris_as_manager(_self_, uris, launch_context, spawn_flags, user_setup, user_setup_data, pid_callback, pid_callback_data, (GError **)(error));
}
gboolean _g_file_enumerator_close(GFileEnumerator * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_file_enumerator_close(_self_, cancellable, (GError **)(error));
}
gboolean _g_file_enumerator_close_finish(GFileEnumerator * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_file_enumerator_close_finish(_self_, result, (GError **)(error));
}
GFileInfo * _g_file_enumerator_next_file(GFileEnumerator * _self_, GCancellable * cancellable, void * error) {
	return (GFileInfo *)g_file_enumerator_next_file(_self_, cancellable, (GError **)(error));
}
GList * _g_file_enumerator_next_files_finish(GFileEnumerator * _self_, GAsyncResult * result, void * error) {
	return (GList *)g_file_enumerator_next_files_finish(_self_, result, (GError **)(error));
}
GFileInfo * _g_file_io_stream_query_info(GFileIOStream * _self_, char * attributes, GCancellable * cancellable, void * error) {
	return (GFileInfo *)g_file_io_stream_query_info(_self_, (const char *)(attributes), cancellable, (GError **)(error));
}
void _g_file_io_stream_query_info_async(GFileIOStream * _self_, char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_file_io_stream_query_info_async(_self_, (const char *)(attributes), io_priority, cancellable, callback, user_data);
}
GFileInfo * _g_file_io_stream_query_info_finish(GFileIOStream * _self_, GAsyncResult * result, void * error) {
	return (GFileInfo *)g_file_io_stream_query_info_finish(_self_, result, (GError **)(error));
}
char * _g_file_info_get_attribute_as_string(GFileInfo * _self_, char * attribute) {
	return (char *)g_file_info_get_attribute_as_string(_self_, (const char *)(attribute));
}
gboolean _g_file_info_get_attribute_boolean(GFileInfo * _self_, char * attribute) {
	return (gboolean)g_file_info_get_attribute_boolean(_self_, (const char *)(attribute));
}
char * _g_file_info_get_attribute_byte_string(GFileInfo * _self_, char * attribute) {
	return (char *)g_file_info_get_attribute_byte_string(_self_, (const char *)(attribute));
}
gboolean _g_file_info_get_attribute_data(GFileInfo * _self_, char * attribute, GFileAttributeType * type, gpointer * value_pp, GFileAttributeStatus * status) {
	return (gboolean)g_file_info_get_attribute_data(_self_, (const char *)(attribute), type, value_pp, status);
}
gint32 _g_file_info_get_attribute_int32(GFileInfo * _self_, char * attribute) {
	return (gint32)g_file_info_get_attribute_int32(_self_, (const char *)(attribute));
}
gint64 _g_file_info_get_attribute_int64(GFileInfo * _self_, char * attribute) {
	return (gint64)g_file_info_get_attribute_int64(_self_, (const char *)(attribute));
}
GObject * _g_file_info_get_attribute_object(GFileInfo * _self_, char * attribute) {
	return (GObject *)g_file_info_get_attribute_object(_self_, (const char *)(attribute));
}
GFileAttributeStatus _g_file_info_get_attribute_status(GFileInfo * _self_, char * attribute) {
	return (GFileAttributeStatus)g_file_info_get_attribute_status(_self_, (const char *)(attribute));
}
char * _g_file_info_get_attribute_string(GFileInfo * _self_, char * attribute) {
	return (char *)g_file_info_get_attribute_string(_self_, (const char *)(attribute));
}
void * _g_file_info_get_attribute_stringv(GFileInfo * _self_, char * attribute) {
	return (void *)g_file_info_get_attribute_stringv(_self_, (const char *)(attribute));
}
GFileAttributeType _g_file_info_get_attribute_type(GFileInfo * _self_, char * attribute) {
	return (GFileAttributeType)g_file_info_get_attribute_type(_self_, (const char *)(attribute));
}
guint32 _g_file_info_get_attribute_uint32(GFileInfo * _self_, char * attribute) {
	return (guint32)g_file_info_get_attribute_uint32(_self_, (const char *)(attribute));
}
guint64 _g_file_info_get_attribute_uint64(GFileInfo * _self_, char * attribute) {
	return (guint64)g_file_info_get_attribute_uint64(_self_, (const char *)(attribute));
}
char * _g_file_info_get_content_type(GFileInfo * _self_) {
	return (char *)g_file_info_get_content_type(_self_);
}
char * _g_file_info_get_display_name(GFileInfo * _self_) {
	return (char *)g_file_info_get_display_name(_self_);
}
char * _g_file_info_get_edit_name(GFileInfo * _self_) {
	return (char *)g_file_info_get_edit_name(_self_);
}
char * _g_file_info_get_etag(GFileInfo * _self_) {
	return (char *)g_file_info_get_etag(_self_);
}
char * _g_file_info_get_name(GFileInfo * _self_) {
	return (char *)g_file_info_get_name(_self_);
}
char * _g_file_info_get_symlink_target(GFileInfo * _self_) {
	return (char *)g_file_info_get_symlink_target(_self_);
}
gboolean _g_file_info_has_attribute(GFileInfo * _self_, char * attribute) {
	return (gboolean)g_file_info_has_attribute(_self_, (const char *)(attribute));
}
gboolean _g_file_info_has_namespace(GFileInfo * _self_, char * name_space) {
	return (gboolean)g_file_info_has_namespace(_self_, (const char *)(name_space));
}
void * _g_file_info_list_attributes(GFileInfo * _self_, char * name_space) {
	return (void *)g_file_info_list_attributes(_self_, (const char *)(name_space));
}
void _g_file_info_remove_attribute(GFileInfo * _self_, char * attribute) {
	(void)g_file_info_remove_attribute(_self_, (const char *)(attribute));
}
void _g_file_info_set_attribute(GFileInfo * _self_, char * attribute, GFileAttributeType type, gpointer value_p) {
	(void)g_file_info_set_attribute(_self_, (const char *)(attribute), type, value_p);
}
void _g_file_info_set_attribute_boolean(GFileInfo * _self_, char * attribute, gboolean attr_value) {
	(void)g_file_info_set_attribute_boolean(_self_, (const char *)(attribute), attr_value);
}
void _g_file_info_set_attribute_byte_string(GFileInfo * _self_, char * attribute, char * attr_value) {
	(void)g_file_info_set_attribute_byte_string(_self_, (const char *)(attribute), (const char *)(attr_value));
}
void _g_file_info_set_attribute_int32(GFileInfo * _self_, char * attribute, gint32 attr_value) {
	(void)g_file_info_set_attribute_int32(_self_, (const char *)(attribute), attr_value);
}
void _g_file_info_set_attribute_int64(GFileInfo * _self_, char * attribute, gint64 attr_value) {
	(void)g_file_info_set_attribute_int64(_self_, (const char *)(attribute), attr_value);
}
void _g_file_info_set_attribute_object(GFileInfo * _self_, char * attribute, GObject * attr_value) {
	(void)g_file_info_set_attribute_object(_self_, (const char *)(attribute), attr_value);
}
gboolean _g_file_info_set_attribute_status(GFileInfo * _self_, char * attribute, GFileAttributeStatus status) {
	return (gboolean)g_file_info_set_attribute_status(_self_, (const char *)(attribute), status);
}
void _g_file_info_set_attribute_string(GFileInfo * _self_, char * attribute, char * attr_value) {
	(void)g_file_info_set_attribute_string(_self_, (const char *)(attribute), (const char *)(attr_value));
}
void _g_file_info_set_attribute_uint32(GFileInfo * _self_, char * attribute, guint32 attr_value) {
	(void)g_file_info_set_attribute_uint32(_self_, (const char *)(attribute), attr_value);
}
void _g_file_info_set_attribute_uint64(GFileInfo * _self_, char * attribute, guint64 attr_value) {
	(void)g_file_info_set_attribute_uint64(_self_, (const char *)(attribute), attr_value);
}
void _g_file_info_set_content_type(GFileInfo * _self_, char * content_type) {
	(void)g_file_info_set_content_type(_self_, (const char *)(content_type));
}
void _g_file_info_set_display_name(GFileInfo * _self_, char * display_name) {
	(void)g_file_info_set_display_name(_self_, (const char *)(display_name));
}
void _g_file_info_set_edit_name(GFileInfo * _self_, char * edit_name) {
	(void)g_file_info_set_edit_name(_self_, (const char *)(edit_name));
}
void _g_file_info_set_name(GFileInfo * _self_, char * name) {
	(void)g_file_info_set_name(_self_, (const char *)(name));
}
void _g_file_info_set_symlink_target(GFileInfo * _self_, char * symlink_target) {
	(void)g_file_info_set_symlink_target(_self_, (const char *)(symlink_target));
}
GFileInfo * _g_file_input_stream_query_info(GFileInputStream * _self_, char * attributes, GCancellable * cancellable, void * error) {
	return (GFileInfo *)g_file_input_stream_query_info(_self_, (const char *)(attributes), cancellable, (GError **)(error));
}
void _g_file_input_stream_query_info_async(GFileInputStream * _self_, char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_file_input_stream_query_info_async(_self_, (const char *)(attributes), io_priority, cancellable, callback, user_data);
}
GFileInfo * _g_file_input_stream_query_info_finish(GFileInputStream * _self_, GAsyncResult * result, void * error) {
	return (GFileInfo *)g_file_input_stream_query_info_finish(_self_, result, (GError **)(error));
}
GFileInfo * _g_file_output_stream_query_info(GFileOutputStream * _self_, char * attributes, GCancellable * cancellable, void * error) {
	return (GFileInfo *)g_file_output_stream_query_info(_self_, (const char *)(attributes), cancellable, (GError **)(error));
}
void _g_file_output_stream_query_info_async(GFileOutputStream * _self_, char * attributes, int io_priority, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_file_output_stream_query_info_async(_self_, (const char *)(attributes), io_priority, cancellable, callback, user_data);
}
GFileInfo * _g_file_output_stream_query_info_finish(GFileOutputStream * _self_, GAsyncResult * result, void * error) {
	return (GFileInfo *)g_file_output_stream_query_info_finish(_self_, result, (GError **)(error));
}
char * _g_filename_completer_get_completion_suffix(GFilenameCompleter * _self_, char * initial_text) {
	return (char *)g_filename_completer_get_completion_suffix(_self_, (const char *)(initial_text));
}
void * _g_filename_completer_get_completions(GFilenameCompleter * _self_, char * initial_text) {
	return (void *)g_filename_completer_get_completions(_self_, (const char *)(initial_text));
}
GIOModule * _g_io_module_new(gchar * filename) {
	return (GIOModule *)g_io_module_new((const gchar *)(filename));
}
gboolean _g_io_stream_splice_finish(GAsyncResult * result, void * error) {
	return (gboolean)g_io_stream_splice_finish(result, (GError **)(error));
}
gboolean _g_io_stream_close(GIOStream * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_io_stream_close(_self_, cancellable, (GError **)(error));
}
gboolean _g_io_stream_close_finish(GIOStream * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_io_stream_close_finish(_self_, result, (GError **)(error));
}
gboolean _g_io_stream_set_pending(GIOStream * _self_, void * error) {
	return (gboolean)g_io_stream_set_pending(_self_, (GError **)(error));
}
GInetAddress * _g_inet_address_new_from_string(gchar * string) {
	return (GInetAddress *)g_inet_address_new_from_string((const gchar *)(string));
}
guint8 * _g_inet_address_to_bytes(GInetAddress * _self_) {
	return (guint8 *)g_inet_address_to_bytes(_self_);
}
GInetAddressMask * _g_inet_address_mask_new(GInetAddress * addr, guint length, void * error) {
	return (GInetAddressMask *)g_inet_address_mask_new(addr, length, (GError **)(error));
}
GInetAddressMask * _g_inet_address_mask_new_from_string(gchar * mask_string, void * error) {
	return (GInetAddressMask *)g_inet_address_mask_new_from_string((const gchar *)(mask_string), (GError **)(error));
}
gboolean _g_input_stream_close(GInputStream * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_input_stream_close(_self_, cancellable, (GError **)(error));
}
gboolean _g_input_stream_close_finish(GInputStream * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_input_stream_close_finish(_self_, result, (GError **)(error));
}
gssize _g_input_stream_read(GInputStream * _self_, void * buffer, gsize count, GCancellable * cancellable, void * error) {
	return (gssize)g_input_stream_read(_self_, buffer, count, cancellable, (GError **)(error));
}
gboolean _g_input_stream_read_all(GInputStream * _self_, void * buffer, gsize count, gsize * bytes_read, GCancellable * cancellable, void * error) {
	return (gboolean)g_input_stream_read_all(_self_, buffer, count, bytes_read, cancellable, (GError **)(error));
}
GBytes * _g_input_stream_read_bytes(GInputStream * _self_, gsize count, GCancellable * cancellable, void * error) {
	return (GBytes *)g_input_stream_read_bytes(_self_, count, cancellable, (GError **)(error));
}
GBytes * _g_input_stream_read_bytes_finish(GInputStream * _self_, GAsyncResult * result, void * error) {
	return (GBytes *)g_input_stream_read_bytes_finish(_self_, result, (GError **)(error));
}
gssize _g_input_stream_read_finish(GInputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_input_stream_read_finish(_self_, result, (GError **)(error));
}
gboolean _g_input_stream_set_pending(GInputStream * _self_, void * error) {
	return (gboolean)g_input_stream_set_pending(_self_, (GError **)(error));
}
gssize _g_input_stream_skip(GInputStream * _self_, gsize count, GCancellable * cancellable, void * error) {
	return (gssize)g_input_stream_skip(_self_, count, cancellable, (GError **)(error));
}
gssize _g_input_stream_skip_finish(GInputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_input_stream_skip_finish(_self_, result, (GError **)(error));
}
void _g_menu_append(GMenu * _self_, gchar * label, gchar * detailed_action) {
	(void)g_menu_append(_self_, (const gchar *)(label), (const gchar *)(detailed_action));
}
void _g_menu_append_section(GMenu * _self_, gchar * label, GMenuModel * section) {
	(void)g_menu_append_section(_self_, (const gchar *)(label), section);
}
void _g_menu_append_submenu(GMenu * _self_, gchar * label, GMenuModel * submenu) {
	(void)g_menu_append_submenu(_self_, (const gchar *)(label), submenu);
}
void _g_menu_insert(GMenu * _self_, gint position, gchar * label, gchar * detailed_action) {
	(void)g_menu_insert(_self_, position, (const gchar *)(label), (const gchar *)(detailed_action));
}
void _g_menu_insert_section(GMenu * _self_, gint position, gchar * label, GMenuModel * section) {
	(void)g_menu_insert_section(_self_, position, (const gchar *)(label), section);
}
void _g_menu_insert_submenu(GMenu * _self_, gint position, gchar * label, GMenuModel * submenu) {
	(void)g_menu_insert_submenu(_self_, position, (const gchar *)(label), submenu);
}
void _g_menu_prepend(GMenu * _self_, gchar * label, gchar * detailed_action) {
	(void)g_menu_prepend(_self_, (const gchar *)(label), (const gchar *)(detailed_action));
}
void _g_menu_prepend_section(GMenu * _self_, gchar * label, GMenuModel * section) {
	(void)g_menu_prepend_section(_self_, (const gchar *)(label), section);
}
void _g_menu_prepend_submenu(GMenu * _self_, gchar * label, GMenuModel * submenu) {
	(void)g_menu_prepend_submenu(_self_, (const gchar *)(label), submenu);
}
gchar * _g_menu_attribute_iter_get_name(GMenuAttributeIter * _self_) {
	return (gchar *)g_menu_attribute_iter_get_name(_self_);
}
gboolean _g_menu_attribute_iter_get_next(GMenuAttributeIter * _self_, void * out_name, void * value) {
	return (gboolean)g_menu_attribute_iter_get_next(_self_, (const gchar **)(out_name), (GVariant **)(value));
}
GMenuItem * _g_menu_item_new(gchar * label, gchar * detailed_action) {
	return (GMenuItem *)g_menu_item_new((const gchar *)(label), (const gchar *)(detailed_action));
}
GMenuItem * _g_menu_item_new_section(gchar * label, GMenuModel * section) {
	return (GMenuItem *)g_menu_item_new_section((const gchar *)(label), section);
}
GMenuItem * _g_menu_item_new_submenu(gchar * label, GMenuModel * submenu) {
	return (GMenuItem *)g_menu_item_new_submenu((const gchar *)(label), submenu);
}
GVariant * _g_menu_item_get_attribute_value(GMenuItem * _self_, gchar * attribute, GVariantType * expected_type) {
	return (GVariant *)g_menu_item_get_attribute_value(_self_, (const gchar *)(attribute), (const GVariantType *)(expected_type));
}
GMenuModel * _g_menu_item_get_link(GMenuItem * _self_, gchar * link) {
	return (GMenuModel *)g_menu_item_get_link(_self_, (const gchar *)(link));
}
void _g_menu_item_set_action_and_target_value(GMenuItem * _self_, gchar * action, GVariant * target_value) {
	(void)g_menu_item_set_action_and_target_value(_self_, (const gchar *)(action), target_value);
}
void _g_menu_item_set_attribute_value(GMenuItem * _self_, gchar * attribute, GVariant * value) {
	(void)g_menu_item_set_attribute_value(_self_, (const gchar *)(attribute), value);
}
void _g_menu_item_set_detailed_action(GMenuItem * _self_, gchar * detailed_action) {
	(void)g_menu_item_set_detailed_action(_self_, (const gchar *)(detailed_action));
}
void _g_menu_item_set_label(GMenuItem * _self_, gchar * label) {
	(void)g_menu_item_set_label(_self_, (const gchar *)(label));
}
void _g_menu_item_set_link(GMenuItem * _self_, gchar * link, GMenuModel * model) {
	(void)g_menu_item_set_link(_self_, (const gchar *)(link), model);
}
gchar * _g_menu_link_iter_get_name(GMenuLinkIter * _self_) {
	return (gchar *)g_menu_link_iter_get_name(_self_);
}
gboolean _g_menu_link_iter_get_next(GMenuLinkIter * _self_, void * out_link, void * value) {
	return (gboolean)g_menu_link_iter_get_next(_self_, (const gchar **)(out_link), (GMenuModel **)(value));
}
GVariant * _g_menu_model_get_item_attribute_value(GMenuModel * _self_, gint item_index, gchar * attribute, GVariantType * expected_type) {
	return (GVariant *)g_menu_model_get_item_attribute_value(_self_, item_index, (const gchar *)(attribute), (const GVariantType *)(expected_type));
}
GMenuModel * _g_menu_model_get_item_link(GMenuModel * _self_, gint item_index, gchar * link) {
	return (GMenuModel *)g_menu_model_get_item_link(_self_, item_index, (const gchar *)(link));
}
char * _g_mount_operation_get_domain(GMountOperation * _self_) {
	return (char *)g_mount_operation_get_domain(_self_);
}
char * _g_mount_operation_get_password(GMountOperation * _self_) {
	return (char *)g_mount_operation_get_password(_self_);
}
char * _g_mount_operation_get_username(GMountOperation * _self_) {
	return (char *)g_mount_operation_get_username(_self_);
}
void _g_mount_operation_set_domain(GMountOperation * _self_, char * domain) {
	(void)g_mount_operation_set_domain(_self_, (const char *)(domain));
}
void _g_mount_operation_set_password(GMountOperation * _self_, char * password) {
	(void)g_mount_operation_set_password(_self_, (const char *)(password));
}
void _g_mount_operation_set_username(GMountOperation * _self_, char * username) {
	(void)g_mount_operation_set_username(_self_, (const char *)(username));
}
GSocketConnectable * _g_network_address_new(gchar * hostname, guint16 port) {
	return (GSocketConnectable *)g_network_address_new((const gchar *)(hostname), port);
}
GSocketConnectable * _g_network_address_parse(gchar * host_and_port, guint16 default_port, void * error) {
	return (GSocketConnectable *)g_network_address_parse((const gchar *)(host_and_port), default_port, (GError **)(error));
}
GSocketConnectable * _g_network_address_parse_uri(gchar * uri, guint16 default_port, void * error) {
	return (GSocketConnectable *)g_network_address_parse_uri((const gchar *)(uri), default_port, (GError **)(error));
}
gchar * _g_network_address_get_hostname(GNetworkAddress * _self_) {
	return (gchar *)g_network_address_get_hostname(_self_);
}
gchar * _g_network_address_get_scheme(GNetworkAddress * _self_) {
	return (gchar *)g_network_address_get_scheme(_self_);
}
GSocketConnectable * _g_network_service_new(gchar * service, gchar * protocol, gchar * domain) {
	return (GSocketConnectable *)g_network_service_new((const gchar *)(service), (const gchar *)(protocol), (const gchar *)(domain));
}
gchar * _g_network_service_get_domain(GNetworkService * _self_) {
	return (gchar *)g_network_service_get_domain(_self_);
}
gchar * _g_network_service_get_protocol(GNetworkService * _self_) {
	return (gchar *)g_network_service_get_protocol(_self_);
}
gchar * _g_network_service_get_scheme(GNetworkService * _self_) {
	return (gchar *)g_network_service_get_scheme(_self_);
}
gchar * _g_network_service_get_service(GNetworkService * _self_) {
	return (gchar *)g_network_service_get_service(_self_);
}
void _g_network_service_set_scheme(GNetworkService * _self_, gchar * scheme) {
	(void)g_network_service_set_scheme(_self_, (const gchar *)(scheme));
}
gboolean _g_output_stream_close(GOutputStream * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_output_stream_close(_self_, cancellable, (GError **)(error));
}
gboolean _g_output_stream_close_finish(GOutputStream * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_output_stream_close_finish(_self_, result, (GError **)(error));
}
gboolean _g_output_stream_flush(GOutputStream * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_output_stream_flush(_self_, cancellable, (GError **)(error));
}
gboolean _g_output_stream_flush_finish(GOutputStream * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_output_stream_flush_finish(_self_, result, (GError **)(error));
}
gboolean _g_output_stream_set_pending(GOutputStream * _self_, void * error) {
	return (gboolean)g_output_stream_set_pending(_self_, (GError **)(error));
}
gssize _g_output_stream_splice(GOutputStream * _self_, GInputStream * source, GOutputStreamSpliceFlags flags, GCancellable * cancellable, void * error) {
	return (gssize)g_output_stream_splice(_self_, source, flags, cancellable, (GError **)(error));
}
gssize _g_output_stream_splice_finish(GOutputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_output_stream_splice_finish(_self_, result, (GError **)(error));
}
gssize _g_output_stream_write_bytes(GOutputStream * _self_, GBytes * bytes, GCancellable * cancellable, void * error) {
	return (gssize)g_output_stream_write_bytes(_self_, bytes, cancellable, (GError **)(error));
}
gssize _g_output_stream_write_bytes_finish(GOutputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_output_stream_write_bytes_finish(_self_, result, (GError **)(error));
}
gssize _g_output_stream_write_finish(GOutputStream * _self_, GAsyncResult * result, void * error) {
	return (gssize)g_output_stream_write_finish(_self_, result, (GError **)(error));
}
gboolean _g_permission_acquire(GPermission * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_permission_acquire(_self_, cancellable, (GError **)(error));
}
gboolean _g_permission_acquire_finish(GPermission * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_permission_acquire_finish(_self_, result, (GError **)(error));
}
gboolean _g_permission_release(GPermission * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_permission_release(_self_, cancellable, (GError **)(error));
}
gboolean _g_permission_release_finish(GPermission * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_permission_release_finish(_self_, result, (GError **)(error));
}
GSocketAddress * _g_proxy_address_new(GInetAddress * inetaddr, guint16 port, gchar * protocol, gchar * dest_hostname, guint16 dest_port, gchar * username, gchar * password) {
	return (GSocketAddress *)g_proxy_address_new(inetaddr, port, (const gchar *)(protocol), (const gchar *)(dest_hostname), dest_port, (const gchar *)(username), (const gchar *)(password));
}
gchar * _g_proxy_address_get_destination_hostname(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_destination_hostname(_self_);
}
gchar * _g_proxy_address_get_destination_protocol(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_destination_protocol(_self_);
}
gchar * _g_proxy_address_get_password(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_password(_self_);
}
gchar * _g_proxy_address_get_protocol(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_protocol(_self_);
}
gchar * _g_proxy_address_get_uri(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_uri(_self_);
}
gchar * _g_proxy_address_get_username(GProxyAddress * _self_) {
	return (gchar *)g_proxy_address_get_username(_self_);
}
gchar * _g_resolver_lookup_by_address(GResolver * _self_, GInetAddress * address, GCancellable * cancellable, void * error) {
	return (gchar *)g_resolver_lookup_by_address(_self_, address, cancellable, (GError **)(error));
}
gchar * _g_resolver_lookup_by_address_finish(GResolver * _self_, GAsyncResult * result, void * error) {
	return (gchar *)g_resolver_lookup_by_address_finish(_self_, result, (GError **)(error));
}
GList * _g_resolver_lookup_by_name(GResolver * _self_, gchar * hostname, GCancellable * cancellable, void * error) {
	return (GList *)g_resolver_lookup_by_name(_self_, (const gchar *)(hostname), cancellable, (GError **)(error));
}
void _g_resolver_lookup_by_name_async(GResolver * _self_, gchar * hostname, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_resolver_lookup_by_name_async(_self_, (const gchar *)(hostname), cancellable, callback, user_data);
}
GList * _g_resolver_lookup_by_name_finish(GResolver * _self_, GAsyncResult * result, void * error) {
	return (GList *)g_resolver_lookup_by_name_finish(_self_, result, (GError **)(error));
}
GList * _g_resolver_lookup_records(GResolver * _self_, gchar * rrname, GResolverRecordType record_type, GCancellable * cancellable, void * error) {
	return (GList *)g_resolver_lookup_records(_self_, (const gchar *)(rrname), record_type, cancellable, (GError **)(error));
}
void _g_resolver_lookup_records_async(GResolver * _self_, gchar * rrname, GResolverRecordType record_type, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_resolver_lookup_records_async(_self_, (const gchar *)(rrname), record_type, cancellable, callback, user_data);
}
GList * _g_resolver_lookup_records_finish(GResolver * _self_, GAsyncResult * result, void * error) {
	return (GList *)g_resolver_lookup_records_finish(_self_, result, (GError **)(error));
}
GList * _g_resolver_lookup_service(GResolver * _self_, gchar * service, gchar * protocol, gchar * domain, GCancellable * cancellable, void * error) {
	return (GList *)g_resolver_lookup_service(_self_, (const gchar *)(service), (const gchar *)(protocol), (const gchar *)(domain), cancellable, (GError **)(error));
}
void _g_resolver_lookup_service_async(GResolver * _self_, gchar * service, gchar * protocol, gchar * domain, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_resolver_lookup_service_async(_self_, (const gchar *)(service), (const gchar *)(protocol), (const gchar *)(domain), cancellable, callback, user_data);
}
GList * _g_resolver_lookup_service_finish(GResolver * _self_, GAsyncResult * result, void * error) {
	return (GList *)g_resolver_lookup_service_finish(_self_, result, (GError **)(error));
}
GSettings * _g_settings_new(gchar * schema_id) {
	return (GSettings *)g_settings_new((const gchar *)(schema_id));
}
GSettings * _g_settings_new_full(GSettingsSchema * schema, GSettingsBackend * backend, gchar * path) {
	return (GSettings *)g_settings_new_full(schema, backend, (const gchar *)(path));
}
GSettings * _g_settings_new_with_backend(gchar * schema_id, GSettingsBackend * backend) {
	return (GSettings *)g_settings_new_with_backend((const gchar *)(schema_id), backend);
}
GSettings * _g_settings_new_with_backend_and_path(gchar * schema_id, GSettingsBackend * backend, gchar * path) {
	return (GSettings *)g_settings_new_with_backend_and_path((const gchar *)(schema_id), backend, (const gchar *)(path));
}
GSettings * _g_settings_new_with_path(gchar * schema_id, gchar * path) {
	return (GSettings *)g_settings_new_with_path((const gchar *)(schema_id), (const gchar *)(path));
}
void * _g_settings_list_relocatable_schemas() {
	return (void *)g_settings_list_relocatable_schemas();
}
void * _g_settings_list_schemas() {
	return (void *)g_settings_list_schemas();
}
void _g_settings_unbind(gpointer object, gchar * property) {
	(void)g_settings_unbind(object, (const gchar *)(property));
}
void _g_settings_bind(GSettings * _self_, gchar * key, gpointer object, gchar * property, GSettingsBindFlags flags) {
	(void)g_settings_bind(_self_, (const gchar *)(key), object, (const gchar *)(property), flags);
}
void _g_settings_bind_with_mapping(GSettings * _self_, gchar * key, gpointer object, gchar * property, GSettingsBindFlags flags, GSettingsBindGetMapping get_mapping, GSettingsBindSetMapping set_mapping, gpointer user_data, GDestroyNotify destroy) {
	(void)g_settings_bind_with_mapping(_self_, (const gchar *)(key), object, (const gchar *)(property), flags, get_mapping, set_mapping, user_data, destroy);
}
void _g_settings_bind_writable(GSettings * _self_, gchar * key, gpointer object, gchar * property, gboolean inverted) {
	(void)g_settings_bind_writable(_self_, (const gchar *)(key), object, (const gchar *)(property), inverted);
}
GAction * _g_settings_create_action(GSettings * _self_, gchar * key) {
	return (GAction *)g_settings_create_action(_self_, (const gchar *)(key));
}
gboolean _g_settings_get_boolean(GSettings * _self_, gchar * key) {
	return (gboolean)g_settings_get_boolean(_self_, (const gchar *)(key));
}
GSettings * _g_settings_get_child(GSettings * _self_, gchar * name) {
	return (GSettings *)g_settings_get_child(_self_, (const gchar *)(name));
}
gdouble _g_settings_get_double(GSettings * _self_, gchar * key) {
	return (gdouble)g_settings_get_double(_self_, (const gchar *)(key));
}
gint _g_settings_get_enum(GSettings * _self_, gchar * key) {
	return (gint)g_settings_get_enum(_self_, (const gchar *)(key));
}
guint _g_settings_get_flags(GSettings * _self_, gchar * key) {
	return (guint)g_settings_get_flags(_self_, (const gchar *)(key));
}
gint _g_settings_get_int(GSettings * _self_, gchar * key) {
	return (gint)g_settings_get_int(_self_, (const gchar *)(key));
}
gpointer _g_settings_get_mapped(GSettings * _self_, gchar * key, GSettingsGetMapping mapping, gpointer user_data) {
	return (gpointer)g_settings_get_mapped(_self_, (const gchar *)(key), mapping, user_data);
}
GVariant * _g_settings_get_range(GSettings * _self_, gchar * key) {
	return (GVariant *)g_settings_get_range(_self_, (const gchar *)(key));
}
gchar * _g_settings_get_string(GSettings * _self_, gchar * key) {
	return (gchar *)g_settings_get_string(_self_, (const gchar *)(key));
}
void * _g_settings_get_strv(GSettings * _self_, gchar * key) {
	return (void *)g_settings_get_strv(_self_, (const gchar *)(key));
}
guint _g_settings_get_uint(GSettings * _self_, gchar * key) {
	return (guint)g_settings_get_uint(_self_, (const gchar *)(key));
}
GVariant * _g_settings_get_value(GSettings * _self_, gchar * key) {
	return (GVariant *)g_settings_get_value(_self_, (const gchar *)(key));
}
gboolean _g_settings_is_writable(GSettings * _self_, gchar * name) {
	return (gboolean)g_settings_is_writable(_self_, (const gchar *)(name));
}
void * _g_settings_list_children(GSettings * _self_) {
	return (void *)g_settings_list_children(_self_);
}
void * _g_settings_list_keys(GSettings * _self_) {
	return (void *)g_settings_list_keys(_self_);
}
gboolean _g_settings_range_check(GSettings * _self_, gchar * key, GVariant * value) {
	return (gboolean)g_settings_range_check(_self_, (const gchar *)(key), value);
}
void _g_settings_reset(GSettings * _self_, gchar * key) {
	(void)g_settings_reset(_self_, (const gchar *)(key));
}
gboolean _g_settings_set_boolean(GSettings * _self_, gchar * key, gboolean value) {
	return (gboolean)g_settings_set_boolean(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_double(GSettings * _self_, gchar * key, gdouble value) {
	return (gboolean)g_settings_set_double(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_enum(GSettings * _self_, gchar * key, gint value) {
	return (gboolean)g_settings_set_enum(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_flags(GSettings * _self_, gchar * key, guint value) {
	return (gboolean)g_settings_set_flags(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_int(GSettings * _self_, gchar * key, gint value) {
	return (gboolean)g_settings_set_int(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_string(GSettings * _self_, gchar * key, gchar * value) {
	return (gboolean)g_settings_set_string(_self_, (const gchar *)(key), (const gchar *)(value));
}
gboolean _g_settings_set_uint(GSettings * _self_, gchar * key, guint value) {
	return (gboolean)g_settings_set_uint(_self_, (const gchar *)(key), value);
}
gboolean _g_settings_set_value(GSettings * _self_, gchar * key, GVariant * value) {
	return (gboolean)g_settings_set_value(_self_, (const gchar *)(key), value);
}
GSimpleAction * _g_simple_action_new(gchar * name, GVariantType * parameter_type) {
	return (GSimpleAction *)g_simple_action_new((const gchar *)(name), (const GVariantType *)(parameter_type));
}
GSimpleAction * _g_simple_action_new_stateful(gchar * name, GVariantType * parameter_type, GVariant * state) {
	return (GSimpleAction *)g_simple_action_new_stateful((const gchar *)(name), (const GVariantType *)(parameter_type), state);
}
GAction * _g_simple_action_group_lookup(GSimpleActionGroup * _self_, gchar * action_name) {
	return (GAction *)g_simple_action_group_lookup(_self_, (const gchar *)(action_name));
}
void _g_simple_action_group_remove(GSimpleActionGroup * _self_, gchar * action_name) {
	(void)g_simple_action_group_remove(_self_, (const gchar *)(action_name));
}
GSimpleAsyncResult * _g_simple_async_result_new_from_error(GObject * source_object, GAsyncReadyCallback callback, gpointer user_data, GError * error) {
	return (GSimpleAsyncResult *)g_simple_async_result_new_from_error(source_object, callback, user_data, (const GError *)(error));
}
gboolean _g_simple_async_result_propagate_error(GSimpleAsyncResult * _self_, void * dest) {
	return (gboolean)g_simple_async_result_propagate_error(_self_, (GError **)(dest));
}
void _g_simple_async_result_set_from_error(GSimpleAsyncResult * _self_, GError * error) {
	(void)g_simple_async_result_set_from_error(_self_, (const GError *)(error));
}
GSocket * _g_socket_new(GSocketFamily family, GSocketType type, GSocketProtocol protocol, void * error) {
	return (GSocket *)g_socket_new(family, type, protocol, (GError **)(error));
}
GSocket * _g_socket_new_from_fd(gint fd, void * error) {
	return (GSocket *)g_socket_new_from_fd(fd, (GError **)(error));
}
GSocket * _g_socket_accept(GSocket * _self_, GCancellable * cancellable, void * error) {
	return (GSocket *)g_socket_accept(_self_, cancellable, (GError **)(error));
}
gboolean _g_socket_bind(GSocket * _self_, GSocketAddress * address, gboolean allow_reuse, void * error) {
	return (gboolean)g_socket_bind(_self_, address, allow_reuse, (GError **)(error));
}
gboolean _g_socket_check_connect_result(GSocket * _self_, void * error) {
	return (gboolean)g_socket_check_connect_result(_self_, (GError **)(error));
}
gboolean _g_socket_close(GSocket * _self_, void * error) {
	return (gboolean)g_socket_close(_self_, (GError **)(error));
}
gboolean _g_socket_condition_timed_wait(GSocket * _self_, GIOCondition condition, gint64 timeout, GCancellable * cancellable, void * error) {
	return (gboolean)g_socket_condition_timed_wait(_self_, condition, timeout, cancellable, (GError **)(error));
}
gboolean _g_socket_condition_wait(GSocket * _self_, GIOCondition condition, GCancellable * cancellable, void * error) {
	return (gboolean)g_socket_condition_wait(_self_, condition, cancellable, (GError **)(error));
}
gboolean _g_socket_connect(GSocket * _self_, GSocketAddress * address, GCancellable * cancellable, void * error) {
	return (gboolean)g_socket_connect(_self_, address, cancellable, (GError **)(error));
}
GCredentials * _g_socket_get_credentials(GSocket * _self_, void * error) {
	return (GCredentials *)g_socket_get_credentials(_self_, (GError **)(error));
}
GSocketAddress * _g_socket_get_local_address(GSocket * _self_, void * error) {
	return (GSocketAddress *)g_socket_get_local_address(_self_, (GError **)(error));
}
GSocketAddress * _g_socket_get_remote_address(GSocket * _self_, void * error) {
	return (GSocketAddress *)g_socket_get_remote_address(_self_, (GError **)(error));
}
gboolean _g_socket_join_multicast_group(GSocket * _self_, GInetAddress * group, gboolean source_specific, gchar * iface, void * error) {
	return (gboolean)g_socket_join_multicast_group(_self_, group, source_specific, (const gchar *)(iface), (GError **)(error));
}
gboolean _g_socket_leave_multicast_group(GSocket * _self_, GInetAddress * group, gboolean source_specific, gchar * iface, void * error) {
	return (gboolean)g_socket_leave_multicast_group(_self_, group, source_specific, (const gchar *)(iface), (GError **)(error));
}
gboolean _g_socket_listen(GSocket * _self_, void * error) {
	return (gboolean)g_socket_listen(_self_, (GError **)(error));
}
gssize _g_socket_receive(GSocket * _self_, gchar * buffer, gsize size, GCancellable * cancellable, void * error) {
	return (gssize)g_socket_receive(_self_, buffer, size, cancellable, (GError **)(error));
}
gssize _g_socket_receive_with_blocking(GSocket * _self_, gchar * buffer, gsize size, gboolean blocking, GCancellable * cancellable, void * error) {
	return (gssize)g_socket_receive_with_blocking(_self_, buffer, size, blocking, cancellable, (GError **)(error));
}
gboolean _g_socket_shutdown(GSocket * _self_, gboolean shutdown_read, gboolean shutdown_write, void * error) {
	return (gboolean)g_socket_shutdown(_self_, shutdown_read, shutdown_write, (GError **)(error));
}
gboolean _g_socket_address_to_native(GSocketAddress * _self_, gpointer dest, gsize destlen, void * error) {
	return (gboolean)g_socket_address_to_native(_self_, dest, destlen, (GError **)(error));
}
GSocketAddress * _g_socket_address_enumerator_next(GSocketAddressEnumerator * _self_, GCancellable * cancellable, void * error) {
	return (GSocketAddress *)g_socket_address_enumerator_next(_self_, cancellable, (GError **)(error));
}
GSocketAddress * _g_socket_address_enumerator_next_finish(GSocketAddressEnumerator * _self_, GAsyncResult * result, void * error) {
	return (GSocketAddress *)g_socket_address_enumerator_next_finish(_self_, result, (GError **)(error));
}
void _g_socket_client_add_application_proxy(GSocketClient * _self_, gchar * protocol) {
	(void)g_socket_client_add_application_proxy(_self_, (const gchar *)(protocol));
}
GSocketConnection * _g_socket_client_connect(GSocketClient * _self_, GSocketConnectable * connectable, GCancellable * cancellable, void * error) {
	return (GSocketConnection *)g_socket_client_connect(_self_, connectable, cancellable, (GError **)(error));
}
GSocketConnection * _g_socket_client_connect_finish(GSocketClient * _self_, GAsyncResult * result, void * error) {
	return (GSocketConnection *)g_socket_client_connect_finish(_self_, result, (GError **)(error));
}
GSocketConnection * _g_socket_client_connect_to_host(GSocketClient * _self_, gchar * host_and_port, guint16 default_port, GCancellable * cancellable, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_host(_self_, (const gchar *)(host_and_port), default_port, cancellable, (GError **)(error));
}
void _g_socket_client_connect_to_host_async(GSocketClient * _self_, gchar * host_and_port, guint16 default_port, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_socket_client_connect_to_host_async(_self_, (const gchar *)(host_and_port), default_port, cancellable, callback, user_data);
}
GSocketConnection * _g_socket_client_connect_to_host_finish(GSocketClient * _self_, GAsyncResult * result, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_host_finish(_self_, result, (GError **)(error));
}
GSocketConnection * _g_socket_client_connect_to_service(GSocketClient * _self_, gchar * domain, gchar * service, GCancellable * cancellable, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_service(_self_, (const gchar *)(domain), (const gchar *)(service), cancellable, (GError **)(error));
}
void _g_socket_client_connect_to_service_async(GSocketClient * _self_, gchar * domain, gchar * service, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_socket_client_connect_to_service_async(_self_, (const gchar *)(domain), (const gchar *)(service), cancellable, callback, user_data);
}
GSocketConnection * _g_socket_client_connect_to_service_finish(GSocketClient * _self_, GAsyncResult * result, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_service_finish(_self_, result, (GError **)(error));
}
GSocketConnection * _g_socket_client_connect_to_uri(GSocketClient * _self_, gchar * uri, guint16 default_port, GCancellable * cancellable, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_uri(_self_, (const gchar *)(uri), default_port, cancellable, (GError **)(error));
}
void _g_socket_client_connect_to_uri_async(GSocketClient * _self_, gchar * uri, guint16 default_port, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_socket_client_connect_to_uri_async(_self_, (const gchar *)(uri), default_port, cancellable, callback, user_data);
}
GSocketConnection * _g_socket_client_connect_to_uri_finish(GSocketClient * _self_, GAsyncResult * result, void * error) {
	return (GSocketConnection *)g_socket_client_connect_to_uri_finish(_self_, result, (GError **)(error));
}
gboolean _g_socket_connection_connect(GSocketConnection * _self_, GSocketAddress * address, GCancellable * cancellable, void * error) {
	return (gboolean)g_socket_connection_connect(_self_, address, cancellable, (GError **)(error));
}
gboolean _g_socket_connection_connect_finish(GSocketConnection * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_socket_connection_connect_finish(_self_, result, (GError **)(error));
}
GSocketAddress * _g_socket_connection_get_local_address(GSocketConnection * _self_, void * error) {
	return (GSocketAddress *)g_socket_connection_get_local_address(_self_, (GError **)(error));
}
GSocketAddress * _g_socket_connection_get_remote_address(GSocketConnection * _self_, void * error) {
	return (GSocketAddress *)g_socket_connection_get_remote_address(_self_, (GError **)(error));
}
GSocketConnection * _g_socket_listener_accept(GSocketListener * _self_, void * source_object, GCancellable * cancellable, void * error) {
	return (GSocketConnection *)g_socket_listener_accept(_self_, (GObject **)(source_object), cancellable, (GError **)(error));
}
GSocketConnection * _g_socket_listener_accept_finish(GSocketListener * _self_, GAsyncResult * result, void * source_object, void * error) {
	return (GSocketConnection *)g_socket_listener_accept_finish(_self_, result, (GObject **)(source_object), (GError **)(error));
}
GSocket * _g_socket_listener_accept_socket(GSocketListener * _self_, void * source_object, GCancellable * cancellable, void * error) {
	return (GSocket *)g_socket_listener_accept_socket(_self_, (GObject **)(source_object), cancellable, (GError **)(error));
}
GSocket * _g_socket_listener_accept_socket_finish(GSocketListener * _self_, GAsyncResult * result, void * source_object, void * error) {
	return (GSocket *)g_socket_listener_accept_socket_finish(_self_, result, (GObject **)(source_object), (GError **)(error));
}
gboolean _g_socket_listener_add_address(GSocketListener * _self_, GSocketAddress * address, GSocketType type, GSocketProtocol protocol, GObject * source_object, void * effective_address, void * error) {
	return (gboolean)g_socket_listener_add_address(_self_, address, type, protocol, source_object, (GSocketAddress **)(effective_address), (GError **)(error));
}
guint16 _g_socket_listener_add_any_inet_port(GSocketListener * _self_, GObject * source_object, void * error) {
	return (guint16)g_socket_listener_add_any_inet_port(_self_, source_object, (GError **)(error));
}
gboolean _g_socket_listener_add_inet_port(GSocketListener * _self_, guint16 port, GObject * source_object, void * error) {
	return (gboolean)g_socket_listener_add_inet_port(_self_, port, source_object, (GError **)(error));
}
gboolean _g_socket_listener_add_socket(GSocketListener * _self_, GSocket * socket, GObject * source_object, void * error) {
	return (gboolean)g_socket_listener_add_socket(_self_, socket, source_object, (GError **)(error));
}
gboolean _g_task_propagate_boolean(GTask * _self_, void * error) {
	return (gboolean)g_task_propagate_boolean(_self_, (GError **)(error));
}
gssize _g_task_propagate_int(GTask * _self_, void * error) {
	return (gssize)g_task_propagate_int(_self_, (GError **)(error));
}
gpointer _g_task_propagate_pointer(GTask * _self_, void * error) {
	return (gpointer)g_task_propagate_pointer(_self_, (GError **)(error));
}
void _g_test_dbus_add_service_dir(GTestDBus * _self_, gchar * path) {
	(void)g_test_dbus_add_service_dir(_self_, (const gchar *)(path));
}
gchar * _g_test_dbus_get_bus_address(GTestDBus * _self_) {
	return (gchar *)g_test_dbus_get_bus_address(_self_);
}
GIcon * _g_themed_icon_new(char * iconname) {
	return (GIcon *)g_themed_icon_new((const char *)(iconname));
}
GIcon * _g_themed_icon_new_with_default_fallbacks(char * iconname) {
	return (GIcon *)g_themed_icon_new_with_default_fallbacks((const char *)(iconname));
}
void _g_themed_icon_append_name(GThemedIcon * _self_, char * iconname) {
	(void)g_themed_icon_append_name(_self_, (const char *)(iconname));
}
void * _g_themed_icon_get_names(GThemedIcon * _self_) {
	return (void *)g_themed_icon_get_names(_self_);
}
void _g_themed_icon_prepend_name(GThemedIcon * _self_, char * iconname) {
	(void)g_themed_icon_prepend_name(_self_, (const char *)(iconname));
}
GTlsCertificate * _g_tls_certificate_new_from_file(gchar * file, void * error) {
	return (GTlsCertificate *)g_tls_certificate_new_from_file((const gchar *)(file), (GError **)(error));
}
GTlsCertificate * _g_tls_certificate_new_from_files(gchar * cert_file, gchar * key_file, void * error) {
	return (GTlsCertificate *)g_tls_certificate_new_from_files((const gchar *)(cert_file), (const gchar *)(key_file), (GError **)(error));
}
GTlsCertificate * _g_tls_certificate_new_from_pem(gchar * data, gssize length, void * error) {
	return (GTlsCertificate *)g_tls_certificate_new_from_pem((const gchar *)(data), length, (GError **)(error));
}
GList * _g_tls_certificate_list_new_from_file(gchar * file, void * error) {
	return (GList *)g_tls_certificate_list_new_from_file((const gchar *)(file), (GError **)(error));
}
gboolean _g_tls_connection_handshake(GTlsConnection * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_tls_connection_handshake(_self_, cancellable, (GError **)(error));
}
gboolean _g_tls_connection_handshake_finish(GTlsConnection * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_tls_connection_handshake_finish(_self_, result, (GError **)(error));
}
GTlsCertificate * _g_tls_database_lookup_certificate_for_handle(GTlsDatabase * _self_, gchar * handle, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, void * error) {
	return (GTlsCertificate *)g_tls_database_lookup_certificate_for_handle(_self_, (const gchar *)(handle), interaction, flags, cancellable, (GError **)(error));
}
void _g_tls_database_lookup_certificate_for_handle_async(GTlsDatabase * _self_, gchar * handle, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_tls_database_lookup_certificate_for_handle_async(_self_, (const gchar *)(handle), interaction, flags, cancellable, callback, user_data);
}
GTlsCertificate * _g_tls_database_lookup_certificate_for_handle_finish(GTlsDatabase * _self_, GAsyncResult * result, void * error) {
	return (GTlsCertificate *)g_tls_database_lookup_certificate_for_handle_finish(_self_, result, (GError **)(error));
}
GTlsCertificate * _g_tls_database_lookup_certificate_issuer(GTlsDatabase * _self_, GTlsCertificate * certificate, GTlsInteraction * interaction, GTlsDatabaseLookupFlags flags, GCancellable * cancellable, void * error) {
	return (GTlsCertificate *)g_tls_database_lookup_certificate_issuer(_self_, certificate, interaction, flags, cancellable, (GError **)(error));
}
GTlsCertificate * _g_tls_database_lookup_certificate_issuer_finish(GTlsDatabase * _self_, GAsyncResult * result, void * error) {
	return (GTlsCertificate *)g_tls_database_lookup_certificate_issuer_finish(_self_, result, (GError **)(error));
}
GList * _g_tls_database_lookup_certificates_issued_by_finish(GTlsDatabase * _self_, GAsyncResult * result, void * error) {
	return (GList *)g_tls_database_lookup_certificates_issued_by_finish(_self_, result, (GError **)(error));
}
GTlsCertificateFlags _g_tls_database_verify_chain(GTlsDatabase * _self_, GTlsCertificate * chain, gchar * purpose, GSocketConnectable * identity, GTlsInteraction * interaction, GTlsDatabaseVerifyFlags flags, GCancellable * cancellable, void * error) {
	return (GTlsCertificateFlags)g_tls_database_verify_chain(_self_, chain, (const gchar *)(purpose), identity, interaction, flags, cancellable, (GError **)(error));
}
void _g_tls_database_verify_chain_async(GTlsDatabase * _self_, GTlsCertificate * chain, gchar * purpose, GSocketConnectable * identity, GTlsInteraction * interaction, GTlsDatabaseVerifyFlags flags, GCancellable * cancellable, GAsyncReadyCallback callback, gpointer user_data) {
	(void)g_tls_database_verify_chain_async(_self_, chain, (const gchar *)(purpose), identity, interaction, flags, cancellable, callback, user_data);
}
GTlsCertificateFlags _g_tls_database_verify_chain_finish(GTlsDatabase * _self_, GAsyncResult * result, void * error) {
	return (GTlsCertificateFlags)g_tls_database_verify_chain_finish(_self_, result, (GError **)(error));
}
GTlsInteractionResult _g_tls_interaction_ask_password(GTlsInteraction * _self_, GTlsPassword * password, GCancellable * cancellable, void * error) {
	return (GTlsInteractionResult)g_tls_interaction_ask_password(_self_, password, cancellable, (GError **)(error));
}
GTlsInteractionResult _g_tls_interaction_ask_password_finish(GTlsInteraction * _self_, GAsyncResult * result, void * error) {
	return (GTlsInteractionResult)g_tls_interaction_ask_password_finish(_self_, result, (GError **)(error));
}
GTlsInteractionResult _g_tls_interaction_invoke_ask_password(GTlsInteraction * _self_, GTlsPassword * password, GCancellable * cancellable, void * error) {
	return (GTlsInteractionResult)g_tls_interaction_invoke_ask_password(_self_, password, cancellable, (GError **)(error));
}
GTlsPassword * _g_tls_password_new(GTlsPasswordFlags flags, gchar * description) {
	return (GTlsPassword *)g_tls_password_new(flags, (const gchar *)(description));
}
gchar * _g_tls_password_get_description(GTlsPassword * _self_) {
	return (gchar *)g_tls_password_get_description(_self_);
}
guchar * _g_tls_password_get_value(GTlsPassword * _self_, gsize * length) {
	return (guchar *)g_tls_password_get_value(_self_, length);
}
gchar * _g_tls_password_get_warning(GTlsPassword * _self_) {
	return (gchar *)g_tls_password_get_warning(_self_);
}
void _g_tls_password_set_description(GTlsPassword * _self_, gchar * description) {
	(void)g_tls_password_set_description(_self_, (const gchar *)(description));
}
void _g_tls_password_set_value(GTlsPassword * _self_, guchar * value, gssize length) {
	(void)g_tls_password_set_value(_self_, (const guchar *)(value), length);
}
void _g_tls_password_set_warning(GTlsPassword * _self_, gchar * warning) {
	(void)g_tls_password_set_warning(_self_, (const gchar *)(warning));
}
GCredentials * _g_unix_connection_receive_credentials(GUnixConnection * _self_, GCancellable * cancellable, void * error) {
	return (GCredentials *)g_unix_connection_receive_credentials(_self_, cancellable, (GError **)(error));
}
GCredentials * _g_unix_connection_receive_credentials_finish(GUnixConnection * _self_, GAsyncResult * result, void * error) {
	return (GCredentials *)g_unix_connection_receive_credentials_finish(_self_, result, (GError **)(error));
}
gint _g_unix_connection_receive_fd(GUnixConnection * _self_, GCancellable * cancellable, void * error) {
	return (gint)g_unix_connection_receive_fd(_self_, cancellable, (GError **)(error));
}
gboolean _g_unix_connection_send_credentials(GUnixConnection * _self_, GCancellable * cancellable, void * error) {
	return (gboolean)g_unix_connection_send_credentials(_self_, cancellable, (GError **)(error));
}
gboolean _g_unix_connection_send_credentials_finish(GUnixConnection * _self_, GAsyncResult * result, void * error) {
	return (gboolean)g_unix_connection_send_credentials_finish(_self_, result, (GError **)(error));
}
gboolean _g_unix_connection_send_fd(GUnixConnection * _self_, gint fd, GCancellable * cancellable, void * error) {
	return (gboolean)g_unix_connection_send_fd(_self_, fd, cancellable, (GError **)(error));
}
gint _g_unix_fd_list_append(GUnixFDList * _self_, gint fd, void * error) {
	return (gint)g_unix_fd_list_append(_self_, fd, (GError **)(error));
}
gint _g_unix_fd_list_get(GUnixFDList * _self_, gint index_, void * error) {
	return (gint)g_unix_fd_list_get(_self_, index_, (GError **)(error));
}
gint * _g_unix_fd_list_peek_fds(GUnixFDList * _self_, gint * length) {
	return (gint *)g_unix_fd_list_peek_fds(_self_, length);
}
gboolean _g_unix_fd_message_append_fd(GUnixFDMessage * _self_, gint fd, void * error) {
	return (gboolean)g_unix_fd_message_append_fd(_self_, fd, (GError **)(error));
}
GSocketAddress * _g_unix_socket_address_new(gchar * path) {
	return (GSocketAddress *)g_unix_socket_address_new((const gchar *)(path));
}
char * _g_unix_socket_address_get_path(GUnixSocketAddress * _self_) {
	return (char *)g_unix_socket_address_get_path(_self_);
}
GFile * _g_vfs_get_file_for_path(GVfs * _self_, char * path) {
	return (GFile *)g_vfs_get_file_for_path(_self_, (const char *)(path));
}
GFile * _g_vfs_get_file_for_uri(GVfs * _self_, char * uri) {
	return (GFile *)g_vfs_get_file_for_uri(_self_, (const char *)(uri));
}
void * _g_vfs_get_supported_uri_schemes(GVfs * _self_) {
	return (void *)g_vfs_get_supported_uri_schemes(_self_);
}
GFile * _g_vfs_parse_name(GVfs * _self_, char * parse_name) {
	return (GFile *)g_vfs_parse_name(_self_, (const char *)(parse_name));
}
GMount * _g_volume_monitor_get_mount_for_uuid(GVolumeMonitor * _self_, char * uuid) {
	return (GMount *)g_volume_monitor_get_mount_for_uuid(_self_, (const char *)(uuid));
}
GVolume * _g_volume_monitor_get_volume_for_uuid(GVolumeMonitor * _self_, char * uuid) {
	return (GVolume *)g_volume_monitor_get_volume_for_uuid(_self_, (const char *)(uuid));
}
GDBusMethodInfo * _g_dbus_interface_info_lookup_method(GDBusInterfaceInfo * _self_, gchar * name) {
	return (GDBusMethodInfo *)g_dbus_interface_info_lookup_method(_self_, (const gchar *)(name));
}
GDBusPropertyInfo * _g_dbus_interface_info_lookup_property(GDBusInterfaceInfo * _self_, gchar * name) {
	return (GDBusPropertyInfo *)g_dbus_interface_info_lookup_property(_self_, (const gchar *)(name));
}
GDBusSignalInfo * _g_dbus_interface_info_lookup_signal(GDBusInterfaceInfo * _self_, gchar * name) {
	return (GDBusSignalInfo *)g_dbus_interface_info_lookup_signal(_self_, (const gchar *)(name));
}
GDBusNodeInfo * _g_dbus_node_info_new_for_xml(gchar * xml_data, void * error) {
	return (GDBusNodeInfo *)g_dbus_node_info_new_for_xml((const gchar *)(xml_data), (GError **)(error));
}
GDBusInterfaceInfo * _g_dbus_node_info_lookup_interface(GDBusNodeInfo * _self_, gchar * name) {
	return (GDBusInterfaceInfo *)g_dbus_node_info_lookup_interface(_self_, (const gchar *)(name));
}
void _g_file_attribute_info_list_add(GFileAttributeInfoList * _self_, char * name, GFileAttributeType type, GFileAttributeInfoFlags flags) {
	(void)g_file_attribute_info_list_add(_self_, (const char *)(name), type, flags);
}
GFileAttributeInfo * _g_file_attribute_info_list_lookup(GFileAttributeInfoList * _self_, char * name) {
	return (GFileAttributeInfo *)g_file_attribute_info_list_lookup(_self_, (const char *)(name));
}
GFileAttributeMatcher * _g_file_attribute_matcher_new(char * attributes) {
	return (GFileAttributeMatcher *)g_file_attribute_matcher_new((const char *)(attributes));
}
gboolean _g_file_attribute_matcher_enumerate_namespace(GFileAttributeMatcher * _self_, char * ns) {
	return (gboolean)g_file_attribute_matcher_enumerate_namespace(_self_, (const char *)(ns));
}
char * _g_file_attribute_matcher_enumerate_next(GFileAttributeMatcher * _self_) {
	return (char *)g_file_attribute_matcher_enumerate_next(_self_);
}
gboolean _g_file_attribute_matcher_matches(GFileAttributeMatcher * _self_, char * attribute) {
	return (gboolean)g_file_attribute_matcher_matches(_self_, (const char *)(attribute));
}
gboolean _g_file_attribute_matcher_matches_only(GFileAttributeMatcher * _self_, char * attribute) {
	return (gboolean)g_file_attribute_matcher_matches_only(_self_, (const char *)(attribute));
}
char * _g_io_extension_get_name(GIOExtension * _self_) {
	return (char *)g_io_extension_get_name(_self_);
}
GIOExtension * _g_io_extension_point_get_extension_by_name(GIOExtensionPoint * _self_, char * name) {
	return (GIOExtension *)g_io_extension_point_get_extension_by_name(_self_, (const char *)(name));
}
void _g_io_module_scope_block(GIOModuleScope * _self_, gchar * basename) {
	(void)g_io_module_scope_block(_self_, (const gchar *)(basename));
}
GResource * _g_resource_new_from_data(GBytes * data, void * error) {
	return (GResource *)g_resource_new_from_data(data, (GError **)(error));
}
void * _g_resource_enumerate_children(GResource * _self_, char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (void *)g_resource_enumerate_children(_self_, (const char *)(path), lookup_flags, (GError **)(error));
}
gboolean _g_resource_get_info(GResource * _self_, char * path, GResourceLookupFlags lookup_flags, gsize * size, guint32 * flags, void * error) {
	return (gboolean)g_resource_get_info(_self_, (const char *)(path), lookup_flags, size, flags, (GError **)(error));
}
GBytes * _g_resource_lookup_data(GResource * _self_, char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (GBytes *)g_resource_lookup_data(_self_, (const char *)(path), lookup_flags, (GError **)(error));
}
GInputStream * _g_resource_open_stream(GResource * _self_, char * path, GResourceLookupFlags lookup_flags, void * error) {
	return (GInputStream *)g_resource_open_stream(_self_, (const char *)(path), lookup_flags, (GError **)(error));
}
gchar * _g_settings_schema_get_id(GSettingsSchema * _self_) {
	return (gchar *)g_settings_schema_get_id(_self_);
}
gchar * _g_settings_schema_get_path(GSettingsSchema * _self_) {
	return (gchar *)g_settings_schema_get_path(_self_);
}
GSettingsSchemaSource * _g_settings_schema_source_new_from_directory(gchar * directory, GSettingsSchemaSource * parent, gboolean trusted, void * error) {
	return (GSettingsSchemaSource *)g_settings_schema_source_new_from_directory((const gchar *)(directory), parent, trusted, (GError **)(error));
}
GSettingsSchema * _g_settings_schema_source_lookup(GSettingsSchemaSource * _self_, gchar * schema_id, gboolean recursive) {
	return (GSettingsSchema *)g_settings_schema_source_lookup(_self_, (const gchar *)(schema_id), recursive);
}
GSrvTarget * _g_srv_target_new(gchar * hostname, guint16 port, guint16 priority, guint16 weight) {
	return (GSrvTarget *)g_srv_target_new((const gchar *)(hostname), port, priority, weight);
}
gchar * _g_srv_target_get_hostname(GSrvTarget * _self_) {
	return (gchar *)g_srv_target_get_hostname(_self_);
}
char * _g_unix_mount_point_get_device_path(GUnixMountPoint * _self_) {
	return (char *)g_unix_mount_point_get_device_path(_self_);
}
char * _g_unix_mount_point_get_fs_type(GUnixMountPoint * _self_) {
	return (char *)g_unix_mount_point_get_fs_type(_self_);
}
char * _g_unix_mount_point_get_mount_path(GUnixMountPoint * _self_) {
	return (char *)g_unix_mount_point_get_mount_path(_self_);
}
char * _g_unix_mount_point_get_options(GUnixMountPoint * _self_) {
	return (char *)g_unix_mount_point_get_options(_self_);
}
*/
import "C"
import (
	"unsafe"
)

type InitableIface C.GInitableIface
type DBusObjectManagerServerClass C.GDBusObjectManagerServerClass
type InetSocketAddressPrivate C.GInetSocketAddressPrivate
type SocketAddressClass C.GSocketAddressClass
type TcpConnectionClass C.GTcpConnectionClass
type UnixMountMonitorClass C.GUnixMountMonitorClass
type ProxyAddressEnumeratorPrivate C.GProxyAddressEnumeratorPrivate
type InetAddressClass C.GInetAddressClass
type FileIface C.GFileIface
type UnixCredentialsMessagePrivate C.GUnixCredentialsMessagePrivate
type StaticResource C.GStaticResource
type ProxyAddressPrivate C.GProxyAddressPrivate
type UnixOutputStreamClass C.GUnixOutputStreamClass
type TlsDatabaseClass C.GTlsDatabaseClass
type TlsConnectionPrivate C.GTlsConnectionPrivate
type CancellableClass C.GCancellableClass
type TlsFileDatabaseInterface C.GTlsFileDatabaseInterface
type TlsPasswordClass C.GTlsPasswordClass
type InetAddressPrivate C.GInetAddressPrivate
type InetAddressMaskClass C.GInetAddressMaskClass
type MemoryInputStreamClass C.GMemoryInputStreamClass
type ZlibCompressorClass C.GZlibCompressorClass
type DBusObjectManagerServerPrivate C.GDBusObjectManagerServerPrivate
type BufferedInputStreamPrivate C.GBufferedInputStreamPrivate
type GioSettingsPrivate C.GSettingsPrivate
type UnixInputStreamPrivate C.GUnixInputStreamPrivate
type MountIface C.GMountIface
type TlsDatabasePrivate C.GTlsDatabasePrivate
type TcpWrapperConnectionPrivate C.GTcpWrapperConnectionPrivate
type SettingsSchemaSource C.GSettingsSchemaSource
type FileInputStreamClass C.GFileInputStreamClass
type DataOutputStreamPrivate C.GDataOutputStreamPrivate
type ConverterIface C.GConverterIface
type GioApplicationPrivate C.GApplicationPrivate
type DBusInterfaceVTable C.GDBusInterfaceVTable
type DBusObjectProxyClass C.GDBusObjectProxyClass
type ConverterInputStreamClass C.GConverterInputStreamClass
type ThreadedSocketServicePrivate C.GThreadedSocketServicePrivate
type CharsetConverterClass C.GCharsetConverterClass
type SettingsBackend C.GSettingsBackend
type DBusSubtreeVTable C.GDBusSubtreeVTable
type MenuAttributeIterClass C.GMenuAttributeIterClass
type DBusInterfaceSkeletonPrivate C.GDBusInterfaceSkeletonPrivate
type TlsInteractionClass C.GTlsInteractionClass
type TlsCertificatePrivate C.GTlsCertificatePrivate
type GioApplicationClass C.GApplicationClass
type EmblemedIconPrivate C.GEmblemedIconPrivate
type GioSocketClass C.GSocketClass
type UnixFDListPrivate C.GUnixFDListPrivate
type NetworkAddressClass C.GNetworkAddressClass
type DBusObjectSkeletonPrivate C.GDBusObjectSkeletonPrivate
type MemoryOutputStreamClass C.GMemoryOutputStreamClass
type ApplicationCommandLineClass C.GApplicationCommandLineClass
type TlsConnectionClass C.GTlsConnectionClass
type ConverterInputStreamPrivate C.GConverterInputStreamPrivate
type DBusProxyClass C.GDBusProxyClass
type NetworkMonitorInterface C.GNetworkMonitorInterface
type ConverterOutputStreamClass C.GConverterOutputStreamClass
type FilterInputStreamClass C.GFilterInputStreamClass
type IOStreamAdapter C.GIOStreamAdapter
type DBusObjectManagerClientClass C.GDBusObjectManagerClientClass
type FileOutputStreamClass C.GFileOutputStreamClass
type IOExtensionPoint C.GIOExtensionPoint
type DataOutputStreamClass C.GDataOutputStreamClass
type VfsClass C.GVfsClass
type Resource C.GResource
type DesktopAppInfoLookupIface C.GDesktopAppInfoLookupIface
type ThreadedSocketServiceClass C.GThreadedSocketServiceClass
type NetworkServiceClass C.GNetworkServiceClass
type SocketConnectionPrivate C.GSocketConnectionPrivate
type SimpleActionGroupClass C.GSimpleActionGroupClass
type FileInfoClass C.GFileInfoClass
type DBusInterfaceInfo C.GDBusInterfaceInfo
type VolumeIface C.GVolumeIface
type UnixOutputStreamPrivate C.GUnixOutputStreamPrivate
type VolumeMonitorClass C.GVolumeMonitorClass
type SocketClientClass C.GSocketClientClass
type IOStreamClass C.GIOStreamClass
type GioActionEntry C.GActionEntry
type DataInputStreamPrivate C.GDataInputStreamPrivate
type DBusInterfaceSkeletonClass C.GDBusInterfaceSkeletonClass
type GioSettingsClass C.GSettingsClass
type SimpleActionGroupPrivate C.GSimpleActionGroupPrivate
type SocketControlMessagePrivate C.GSocketControlMessagePrivate
type ActionGroupInterface C.GActionGroupInterface
type UnixConnectionClass C.GUnixConnectionClass
type RemoteActionGroupInterface C.GRemoteActionGroupInterface
type UnixMountEntry C.GUnixMountEntry
type CredentialsClass C.GCredentialsClass
type AppLaunchContextClass C.GAppLaunchContextClass
type DBusObjectSkeletonClass C.GDBusObjectSkeletonClass
type ProxyInterface C.GProxyInterface
type DBusAnnotationInfo C.GDBusAnnotationInfo
type DBusInterfaceIface C.GDBusInterfaceIface
type AsyncInitableIface C.GAsyncInitableIface
type SocketServicePrivate C.GSocketServicePrivate
type TlsCertificateClass C.GTlsCertificateClass
type SocketControlMessageClass C.GSocketControlMessageClass
type IconIface C.GIconIface
type TaskClass C.GTaskClass
type SocketConnectionClass C.GSocketConnectionClass
type ProxyAddressEnumeratorClass C.GProxyAddressEnumeratorClass
type GioMountOperationPrivate C.GMountOperationPrivate
type FileEnumeratorClass C.GFileEnumeratorClass
type OutputStreamClass C.GOutputStreamClass
type FileMonitorClass C.GFileMonitorClass
type PollableOutputStreamInterface C.GPollableOutputStreamInterface
type UnixConnectionPrivate C.GUnixConnectionPrivate
type DriveIface C.GDriveIface
type UnixFDListClass C.GUnixFDListClass
type MemoryInputStreamPrivate C.GMemoryInputStreamPrivate
type PermissionClass C.GPermissionClass
type SocketAddressEnumeratorClass C.GSocketAddressEnumeratorClass
type DesktopAppInfoClass C.GDesktopAppInfoClass
type SrvTarget C.GSrvTarget
type TlsInteractionPrivate C.GTlsInteractionPrivate
type NativeVolumeMonitorClass C.GNativeVolumeMonitorClass
type MenuModelClass C.GMenuModelClass
type SeekableIface C.GSeekableIface
type ApplicationCommandLinePrivate C.GApplicationCommandLinePrivate
type MenuAttributeIterPrivate C.GMenuAttributeIterPrivate
type ProxyAddressClass C.GProxyAddressClass
type PermissionPrivate C.GPermissionPrivate
type UnixSocketAddressPrivate C.GUnixSocketAddressPrivate
type DBusObjectIface C.GDBusObjectIface
type DBusNodeInfo C.GDBusNodeInfo
type BufferedInputStreamClass C.GBufferedInputStreamClass
type FileMonitorPrivate C.GFileMonitorPrivate
type ActionInterface C.GActionInterface
type MenuModelPrivate C.GMenuModelPrivate
type MemoryOutputStreamPrivate C.GMemoryOutputStreamPrivate
type DBusProxyPrivate C.GDBusProxyPrivate
type NetworkAddressPrivate C.GNetworkAddressPrivate
type MenuLinkIterPrivate C.GMenuLinkIterPrivate
type TlsClientConnectionInterface C.GTlsClientConnectionInterface
type ConverterOutputStreamPrivate C.GConverterOutputStreamPrivate
type LoadableIconIface C.GLoadableIconIface
type DBusPropertyInfo C.GDBusPropertyInfo
type InputVector C.GInputVector
type FileEnumeratorPrivate C.GFileEnumeratorPrivate
type DBusArgInfo C.GDBusArgInfo
type ResolverPrivate C.GResolverPrivate
type EmblemedIconClass C.GEmblemedIconClass
type IOSchedulerJob C.GIOSchedulerJob
type TlsPasswordPrivate C.GTlsPasswordPrivate
type SocketListenerPrivate C.GSocketListenerPrivate
type FileIconClass C.GFileIconClass
type InetSocketAddressClass C.GInetSocketAddressClass
type InputStreamClass C.GInputStreamClass
type TcpConnectionPrivate C.GTcpConnectionPrivate
type FileAttributeMatcher C.GFileAttributeMatcher
type UnixInputStreamClass C.GUnixInputStreamClass
type ThemedIconClass C.GThemedIconClass
type FileInputStreamPrivate C.GFileInputStreamPrivate
type SocketListenerClass C.GSocketListenerClass
type ZlibDecompressorClass C.GZlibDecompressorClass
type TlsServerConnectionInterface C.GTlsServerConnectionInterface
type FilterOutputStreamClass C.GFilterOutputStreamClass
type SocketConnectableIface C.GSocketConnectableIface
type UnixFDMessagePrivate C.GUnixFDMessagePrivate
type ProxyResolverInterface C.GProxyResolverInterface
type DBusErrorEntry C.GDBusErrorEntry
type IOExtension C.GIOExtension
type PollableInputStreamInterface C.GPollableInputStreamInterface
type UnixMountPoint C.GUnixMountPoint
type DBusSignalInfo C.GDBusSignalInfo
type UnixFDMessageClass C.GUnixFDMessageClass
type ActionMapInterface C.GActionMapInterface
type FileIOStreamPrivate C.GFileIOStreamPrivate
type AppInfoIface C.GAppInfoIface
type GioMountOperationClass C.GMountOperationClass
type SocketClientPrivate C.GSocketClientPrivate
type IOModuleClass C.GIOModuleClass
type GioSocketPrivate C.GSocketPrivate
type BufferedOutputStreamPrivate C.GBufferedOutputStreamPrivate
type FilenameCompleterClass C.GFilenameCompleterClass
type TlsBackendInterface C.GTlsBackendInterface
type TcpWrapperConnectionClass C.GTcpWrapperConnectionClass
type UnixSocketAddressClass C.GUnixSocketAddressClass
type OutputStreamPrivate C.GOutputStreamPrivate
type DBusObjectManagerClientPrivate C.GDBusObjectManagerClientPrivate
type OutputVector C.GOutputVector
type ResolverClass C.GResolverClass
type NetworkServicePrivate C.GNetworkServicePrivate
type MenuLinkIterClass C.GMenuLinkIterClass
type FileOutputStreamPrivate C.GFileOutputStreamPrivate
type DBusMethodInfo C.GDBusMethodInfo
type DBusObjectManagerIface C.GDBusObjectManagerIface
type AppLaunchContextPrivate C.GAppLaunchContextPrivate
type FileIOStreamClass C.GFileIOStreamClass
type FileDescriptorBasedIface C.GFileDescriptorBasedIface
type FileAttributeInfoList C.GFileAttributeInfoList
type IOStreamPrivate C.GIOStreamPrivate
type BufferedOutputStreamClass C.GBufferedOutputStreamClass
type AsyncResultIface C.GAsyncResultIface
type DataInputStreamClass C.GDataInputStreamClass
type EmblemClass C.GEmblemClass
type FileAttributeInfo C.GFileAttributeInfo
type SimpleAsyncResultClass C.GSimpleAsyncResultClass
type UnixCredentialsMessageClass C.GUnixCredentialsMessageClass
type InputStreamPrivate C.GInputStreamPrivate
type DBusObjectProxyPrivate C.GDBusObjectProxyPrivate
type InetAddressMaskPrivate C.GInetAddressMaskPrivate
type SocketServiceClass C.GSocketServiceClass
type SettingsSchema C.GSettingsSchema
type CancellablePrivate C.GCancellablePrivate
type IOModuleScope C.GIOModuleScope
type SimpleActionGroup struct { GObjectObject }
type SimpleActionGroupKind interface {
  _IsSimpleActionGroup()
  GetGObject() unsafe.Pointer
}
func (self SimpleActionGroup) _IsSimpleActionGroup () {}
func (self SimpleActionGroup) GetGObject() unsafe.Pointer { return self._value_ }
func ToSimpleActionGroup(value unsafe.Pointer) SimpleActionGroup { return SimpleActionGroup{GObjectObject{value}} }
type DBusProxy struct { GObjectObject }
type DBusProxyKind interface {
  _IsDBusProxy()
  GetGObject() unsafe.Pointer
}
func (self DBusProxy) _IsDBusProxy () {}
func (self DBusProxy) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusProxy(value unsafe.Pointer) DBusProxy { return DBusProxy{GObjectObject{value}} }
type UnixOutputStream struct { OutputStream }
type UnixOutputStreamKind interface {
  _IsUnixOutputStream()
  GetGObject() unsafe.Pointer
}
func (self UnixOutputStream) _IsUnixOutputStream () {}
func (self UnixOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixOutputStream(value unsafe.Pointer) UnixOutputStream { return UnixOutputStream{OutputStream{GObjectObject{value}}} }
type NativeVolumeMonitor struct { VolumeMonitor }
type NativeVolumeMonitorKind interface {
  _IsNativeVolumeMonitor()
  GetGObject() unsafe.Pointer
}
func (self NativeVolumeMonitor) _IsNativeVolumeMonitor () {}
func (self NativeVolumeMonitor) GetGObject() unsafe.Pointer { return self._value_ }
func ToNativeVolumeMonitor(value unsafe.Pointer) NativeVolumeMonitor { return NativeVolumeMonitor{VolumeMonitor{GObjectObject{value}}} }
type FilenameCompleter struct { GObjectObject }
type FilenameCompleterKind interface {
  _IsFilenameCompleter()
  GetGObject() unsafe.Pointer
}
func (self FilenameCompleter) _IsFilenameCompleter () {}
func (self FilenameCompleter) GetGObject() unsafe.Pointer { return self._value_ }
func ToFilenameCompleter(value unsafe.Pointer) FilenameCompleter { return FilenameCompleter{GObjectObject{value}} }
type TcpConnection struct { SocketConnection }
type TcpConnectionKind interface {
  _IsTcpConnection()
  GetGObject() unsafe.Pointer
}
func (self TcpConnection) _IsTcpConnection () {}
func (self TcpConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToTcpConnection(value unsafe.Pointer) TcpConnection { return TcpConnection{SocketConnection{IOStream{GObjectObject{value}}}} }
type ZlibDecompressor struct { GObjectObject }
type ZlibDecompressorKind interface {
  _IsZlibDecompressor()
  GetGObject() unsafe.Pointer
}
func (self ZlibDecompressor) _IsZlibDecompressor () {}
func (self ZlibDecompressor) GetGObject() unsafe.Pointer { return self._value_ }
func ToZlibDecompressor(value unsafe.Pointer) ZlibDecompressor { return ZlibDecompressor{GObjectObject{value}} }
type SocketAddressEnumerator struct { GObjectObject }
type SocketAddressEnumeratorKind interface {
  _IsSocketAddressEnumerator()
  GetGObject() unsafe.Pointer
}
func (self SocketAddressEnumerator) _IsSocketAddressEnumerator () {}
func (self SocketAddressEnumerator) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketAddressEnumerator(value unsafe.Pointer) SocketAddressEnumerator { return SocketAddressEnumerator{GObjectObject{value}} }
type DataOutputStream struct { FilterOutputStream }
type DataOutputStreamKind interface {
  _IsDataOutputStream()
  GetGObject() unsafe.Pointer
}
func (self DataOutputStream) _IsDataOutputStream () {}
func (self DataOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToDataOutputStream(value unsafe.Pointer) DataOutputStream { return DataOutputStream{FilterOutputStream{OutputStream{GObjectObject{value}}}} }
type UnixMountMonitor struct { GObjectObject }
type UnixMountMonitorKind interface {
  _IsUnixMountMonitor()
  GetGObject() unsafe.Pointer
}
func (self UnixMountMonitor) _IsUnixMountMonitor () {}
func (self UnixMountMonitor) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixMountMonitor(value unsafe.Pointer) UnixMountMonitor { return UnixMountMonitor{GObjectObject{value}} }
type Task struct { GObjectObject }
type TaskKind interface {
  _IsTask()
  GetGObject() unsafe.Pointer
}
func (self Task) _IsTask () {}
func (self Task) GetGObject() unsafe.Pointer { return self._value_ }
func ToTask(value unsafe.Pointer) Task { return Task{GObjectObject{value}} }
type MenuModel struct { GObjectObject }
type MenuModelKind interface {
  _IsMenuModel()
  GetGObject() unsafe.Pointer
}
func (self MenuModel) _IsMenuModel () {}
func (self MenuModel) GetGObject() unsafe.Pointer { return self._value_ }
func ToMenuModel(value unsafe.Pointer) MenuModel { return MenuModel{GObjectObject{value}} }
type SimpleAsyncResult struct { GObjectObject }
type SimpleAsyncResultKind interface {
  _IsSimpleAsyncResult()
  GetGObject() unsafe.Pointer
}
func (self SimpleAsyncResult) _IsSimpleAsyncResult () {}
func (self SimpleAsyncResult) GetGObject() unsafe.Pointer { return self._value_ }
func ToSimpleAsyncResult(value unsafe.Pointer) SimpleAsyncResult { return SimpleAsyncResult{GObjectObject{value}} }
type ConverterInputStream struct { FilterInputStream }
type ConverterInputStreamKind interface {
  _IsConverterInputStream()
  GetGObject() unsafe.Pointer
}
func (self ConverterInputStream) _IsConverterInputStream () {}
func (self ConverterInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToConverterInputStream(value unsafe.Pointer) ConverterInputStream { return ConverterInputStream{FilterInputStream{InputStream{GObjectObject{value}}}} }
type DBusActionGroup struct { GObjectObject }
type DBusActionGroupKind interface {
  _IsDBusActionGroup()
  GetGObject() unsafe.Pointer
}
func (self DBusActionGroup) _IsDBusActionGroup () {}
func (self DBusActionGroup) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusActionGroup(value unsafe.Pointer) DBusActionGroup { return DBusActionGroup{GObjectObject{value}} }
type SocketConnection struct { IOStream }
type SocketConnectionKind interface {
  _IsSocketConnection()
  GetGObject() unsafe.Pointer
}
func (self SocketConnection) _IsSocketConnection () {}
func (self SocketConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketConnection(value unsafe.Pointer) SocketConnection { return SocketConnection{IOStream{GObjectObject{value}}} }
type GioMountOperation struct { GObjectObject }
type GioMountOperationKind interface {
  _IsGioMountOperation()
  GetGObject() unsafe.Pointer
}
func (self GioMountOperation) _IsGioMountOperation () {}
func (self GioMountOperation) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioMountOperation(value unsafe.Pointer) GioMountOperation { return GioMountOperation{GObjectObject{value}} }
type GioSocket struct { GObjectObject }
type GioSocketKind interface {
  _IsGioSocket()
  GetGObject() unsafe.Pointer
}
func (self GioSocket) _IsGioSocket () {}
func (self GioSocket) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioSocket(value unsafe.Pointer) GioSocket { return GioSocket{GObjectObject{value}} }
type DBusConnection struct { GObjectObject }
type DBusConnectionKind interface {
  _IsDBusConnection()
  GetGObject() unsafe.Pointer
}
func (self DBusConnection) _IsDBusConnection () {}
func (self DBusConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusConnection(value unsafe.Pointer) DBusConnection { return DBusConnection{GObjectObject{value}} }
type UnixFDMessage struct { SocketControlMessage }
type UnixFDMessageKind interface {
  _IsUnixFDMessage()
  GetGObject() unsafe.Pointer
}
func (self UnixFDMessage) _IsUnixFDMessage () {}
func (self UnixFDMessage) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixFDMessage(value unsafe.Pointer) UnixFDMessage { return UnixFDMessage{SocketControlMessage{GObjectObject{value}}} }
type ProxyAddress struct { InetSocketAddress }
type ProxyAddressKind interface {
  _IsProxyAddress()
  GetGObject() unsafe.Pointer
}
func (self ProxyAddress) _IsProxyAddress () {}
func (self ProxyAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToProxyAddress(value unsafe.Pointer) ProxyAddress { return ProxyAddress{InetSocketAddress{SocketAddress{GObjectObject{value}}}} }
type CharsetConverter struct { GObjectObject }
type CharsetConverterKind interface {
  _IsCharsetConverter()
  GetGObject() unsafe.Pointer
}
func (self CharsetConverter) _IsCharsetConverter () {}
func (self CharsetConverter) GetGObject() unsafe.Pointer { return self._value_ }
func ToCharsetConverter(value unsafe.Pointer) CharsetConverter { return CharsetConverter{GObjectObject{value}} }
type FilterInputStream struct { InputStream }
type FilterInputStreamKind interface {
  _IsFilterInputStream()
  GetGObject() unsafe.Pointer
}
func (self FilterInputStream) _IsFilterInputStream () {}
func (self FilterInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToFilterInputStream(value unsafe.Pointer) FilterInputStream { return FilterInputStream{InputStream{GObjectObject{value}}} }
type InetAddress struct { GObjectObject }
type InetAddressKind interface {
  _IsInetAddress()
  GetGObject() unsafe.Pointer
}
func (self InetAddress) _IsInetAddress () {}
func (self InetAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToInetAddress(value unsafe.Pointer) InetAddress { return InetAddress{GObjectObject{value}} }
type DBusObjectSkeleton struct { GObjectObject }
type DBusObjectSkeletonKind interface {
  _IsDBusObjectSkeleton()
  GetGObject() unsafe.Pointer
}
func (self DBusObjectSkeleton) _IsDBusObjectSkeleton () {}
func (self DBusObjectSkeleton) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusObjectSkeleton(value unsafe.Pointer) DBusObjectSkeleton { return DBusObjectSkeleton{GObjectObject{value}} }
type DBusInterfaceSkeleton struct { GObjectObject }
type DBusInterfaceSkeletonKind interface {
  _IsDBusInterfaceSkeleton()
  GetGObject() unsafe.Pointer
}
func (self DBusInterfaceSkeleton) _IsDBusInterfaceSkeleton () {}
func (self DBusInterfaceSkeleton) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusInterfaceSkeleton(value unsafe.Pointer) DBusInterfaceSkeleton { return DBusInterfaceSkeleton{GObjectObject{value}} }
type FileIcon struct { GObjectObject }
type FileIconKind interface {
  _IsFileIcon()
  GetGObject() unsafe.Pointer
}
func (self FileIcon) _IsFileIcon () {}
func (self FileIcon) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileIcon(value unsafe.Pointer) FileIcon { return FileIcon{GObjectObject{value}} }
type UnixConnection struct { SocketConnection }
type UnixConnectionKind interface {
  _IsUnixConnection()
  GetGObject() unsafe.Pointer
}
func (self UnixConnection) _IsUnixConnection () {}
func (self UnixConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixConnection(value unsafe.Pointer) UnixConnection { return UnixConnection{SocketConnection{IOStream{GObjectObject{value}}}} }
type IOStream struct { GObjectObject }
type IOStreamKind interface {
  _IsIOStream()
  GetGObject() unsafe.Pointer
}
func (self IOStream) _IsIOStream () {}
func (self IOStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToIOStream(value unsafe.Pointer) IOStream { return IOStream{GObjectObject{value}} }
type Permission struct { GObjectObject }
type PermissionKind interface {
  _IsPermission()
  GetGObject() unsafe.Pointer
}
func (self Permission) _IsPermission () {}
func (self Permission) GetGObject() unsafe.Pointer { return self._value_ }
func ToPermission(value unsafe.Pointer) Permission { return Permission{GObjectObject{value}} }
type BufferedInputStream struct { FilterInputStream }
type BufferedInputStreamKind interface {
  _IsBufferedInputStream()
  GetGObject() unsafe.Pointer
}
func (self BufferedInputStream) _IsBufferedInputStream () {}
func (self BufferedInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToBufferedInputStream(value unsafe.Pointer) BufferedInputStream { return BufferedInputStream{FilterInputStream{InputStream{GObjectObject{value}}}} }
type GioMenuItem struct { GObjectObject }
type GioMenuItemKind interface {
  _IsGioMenuItem()
  GetGObject() unsafe.Pointer
}
func (self GioMenuItem) _IsGioMenuItem () {}
func (self GioMenuItem) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioMenuItem(value unsafe.Pointer) GioMenuItem { return GioMenuItem{GObjectObject{value}} }
type DBusObjectManagerServer struct { GObjectObject }
type DBusObjectManagerServerKind interface {
  _IsDBusObjectManagerServer()
  GetGObject() unsafe.Pointer
}
func (self DBusObjectManagerServer) _IsDBusObjectManagerServer () {}
func (self DBusObjectManagerServer) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusObjectManagerServer(value unsafe.Pointer) DBusObjectManagerServer { return DBusObjectManagerServer{GObjectObject{value}} }
type UnixFDList struct { GObjectObject }
type UnixFDListKind interface {
  _IsUnixFDList()
  GetGObject() unsafe.Pointer
}
func (self UnixFDList) _IsUnixFDList () {}
func (self UnixFDList) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixFDList(value unsafe.Pointer) UnixFDList { return UnixFDList{GObjectObject{value}} }
type EmblemedIcon struct { GObjectObject }
type EmblemedIconKind interface {
  _IsEmblemedIcon()
  GetGObject() unsafe.Pointer
}
func (self EmblemedIcon) _IsEmblemedIcon () {}
func (self EmblemedIcon) GetGObject() unsafe.Pointer { return self._value_ }
func ToEmblemedIcon(value unsafe.Pointer) EmblemedIcon { return EmblemedIcon{GObjectObject{value}} }
type TlsConnection struct { IOStream }
type TlsConnectionKind interface {
  _IsTlsConnection()
  GetGObject() unsafe.Pointer
}
func (self TlsConnection) _IsTlsConnection () {}
func (self TlsConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToTlsConnection(value unsafe.Pointer) TlsConnection { return TlsConnection{IOStream{GObjectObject{value}}} }
type TestDBus struct { GObjectObject }
type TestDBusKind interface {
  _IsTestDBus()
  GetGObject() unsafe.Pointer
}
func (self TestDBus) _IsTestDBus () {}
func (self TestDBus) GetGObject() unsafe.Pointer { return self._value_ }
func ToTestDBus(value unsafe.Pointer) TestDBus { return TestDBus{GObjectObject{value}} }
type SocketControlMessage struct { GObjectObject }
type SocketControlMessageKind interface {
  _IsSocketControlMessage()
  GetGObject() unsafe.Pointer
}
func (self SocketControlMessage) _IsSocketControlMessage () {}
func (self SocketControlMessage) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketControlMessage(value unsafe.Pointer) SocketControlMessage { return SocketControlMessage{GObjectObject{value}} }
type ProxyAddressEnumerator struct { SocketAddressEnumerator }
type ProxyAddressEnumeratorKind interface {
  _IsProxyAddressEnumerator()
  GetGObject() unsafe.Pointer
}
func (self ProxyAddressEnumerator) _IsProxyAddressEnumerator () {}
func (self ProxyAddressEnumerator) GetGObject() unsafe.Pointer { return self._value_ }
func ToProxyAddressEnumerator(value unsafe.Pointer) ProxyAddressEnumerator { return ProxyAddressEnumerator{SocketAddressEnumerator{GObjectObject{value}}} }
type Vfs struct { GObjectObject }
type VfsKind interface {
  _IsVfs()
  GetGObject() unsafe.Pointer
}
func (self Vfs) _IsVfs () {}
func (self Vfs) GetGObject() unsafe.Pointer { return self._value_ }
func ToVfs(value unsafe.Pointer) Vfs { return Vfs{GObjectObject{value}} }
type TlsCertificate struct { GObjectObject }
type TlsCertificateKind interface {
  _IsTlsCertificate()
  GetGObject() unsafe.Pointer
}
func (self TlsCertificate) _IsTlsCertificate () {}
func (self TlsCertificate) GetGObject() unsafe.Pointer { return self._value_ }
func ToTlsCertificate(value unsafe.Pointer) TlsCertificate { return TlsCertificate{GObjectObject{value}} }
type UnixCredentialsMessage struct { SocketControlMessage }
type UnixCredentialsMessageKind interface {
  _IsUnixCredentialsMessage()
  GetGObject() unsafe.Pointer
}
func (self UnixCredentialsMessage) _IsUnixCredentialsMessage () {}
func (self UnixCredentialsMessage) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixCredentialsMessage(value unsafe.Pointer) UnixCredentialsMessage { return UnixCredentialsMessage{SocketControlMessage{GObjectObject{value}}} }
type VolumeMonitor struct { GObjectObject }
type VolumeMonitorKind interface {
  _IsVolumeMonitor()
  GetGObject() unsafe.Pointer
}
func (self VolumeMonitor) _IsVolumeMonitor () {}
func (self VolumeMonitor) GetGObject() unsafe.Pointer { return self._value_ }
func ToVolumeMonitor(value unsafe.Pointer) VolumeMonitor { return VolumeMonitor{GObjectObject{value}} }
type DBusObjectProxy struct { GObjectObject }
type DBusObjectProxyKind interface {
  _IsDBusObjectProxy()
  GetGObject() unsafe.Pointer
}
func (self DBusObjectProxy) _IsDBusObjectProxy () {}
func (self DBusObjectProxy) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusObjectProxy(value unsafe.Pointer) DBusObjectProxy { return DBusObjectProxy{GObjectObject{value}} }
type TlsInteraction struct { GObjectObject }
type TlsInteractionKind interface {
  _IsTlsInteraction()
  GetGObject() unsafe.Pointer
}
func (self TlsInteraction) _IsTlsInteraction () {}
func (self TlsInteraction) GetGObject() unsafe.Pointer { return self._value_ }
func ToTlsInteraction(value unsafe.Pointer) TlsInteraction { return TlsInteraction{GObjectObject{value}} }
type NetworkAddress struct { GObjectObject }
type NetworkAddressKind interface {
  _IsNetworkAddress()
  GetGObject() unsafe.Pointer
}
func (self NetworkAddress) _IsNetworkAddress () {}
func (self NetworkAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToNetworkAddress(value unsafe.Pointer) NetworkAddress { return NetworkAddress{GObjectObject{value}} }
type DBusServer struct { GObjectObject }
type DBusServerKind interface {
  _IsDBusServer()
  GetGObject() unsafe.Pointer
}
func (self DBusServer) _IsDBusServer () {}
func (self DBusServer) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusServer(value unsafe.Pointer) DBusServer { return DBusServer{GObjectObject{value}} }
type ThemedIcon struct { GObjectObject }
type ThemedIconKind interface {
  _IsThemedIcon()
  GetGObject() unsafe.Pointer
}
func (self ThemedIcon) _IsThemedIcon () {}
func (self ThemedIcon) GetGObject() unsafe.Pointer { return self._value_ }
func ToThemedIcon(value unsafe.Pointer) ThemedIcon { return ThemedIcon{GObjectObject{value}} }
type UnixInputStream struct { InputStream }
type UnixInputStreamKind interface {
  _IsUnixInputStream()
  GetGObject() unsafe.Pointer
}
func (self UnixInputStream) _IsUnixInputStream () {}
func (self UnixInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixInputStream(value unsafe.Pointer) UnixInputStream { return UnixInputStream{InputStream{GObjectObject{value}}} }
type InputStream struct { GObjectObject }
type InputStreamKind interface {
  _IsInputStream()
  GetGObject() unsafe.Pointer
}
func (self InputStream) _IsInputStream () {}
func (self InputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToInputStream(value unsafe.Pointer) InputStream { return InputStream{GObjectObject{value}} }
type MemoryInputStream struct { InputStream }
type MemoryInputStreamKind interface {
  _IsMemoryInputStream()
  GetGObject() unsafe.Pointer
}
func (self MemoryInputStream) _IsMemoryInputStream () {}
func (self MemoryInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToMemoryInputStream(value unsafe.Pointer) MemoryInputStream { return MemoryInputStream{InputStream{GObjectObject{value}}} }
type FileMonitor struct { GObjectObject }
type FileMonitorKind interface {
  _IsFileMonitor()
  GetGObject() unsafe.Pointer
}
func (self FileMonitor) _IsFileMonitor () {}
func (self FileMonitor) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileMonitor(value unsafe.Pointer) FileMonitor { return FileMonitor{GObjectObject{value}} }
type ThreadedSocketService struct { SocketService }
type ThreadedSocketServiceKind interface {
  _IsThreadedSocketService()
  GetGObject() unsafe.Pointer
}
func (self ThreadedSocketService) _IsThreadedSocketService () {}
func (self ThreadedSocketService) GetGObject() unsafe.Pointer { return self._value_ }
func ToThreadedSocketService(value unsafe.Pointer) ThreadedSocketService { return ThreadedSocketService{SocketService{SocketListener{GObjectObject{value}}}} }
type MemoryOutputStream struct { OutputStream }
type MemoryOutputStreamKind interface {
  _IsMemoryOutputStream()
  GetGObject() unsafe.Pointer
}
func (self MemoryOutputStream) _IsMemoryOutputStream () {}
func (self MemoryOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToMemoryOutputStream(value unsafe.Pointer) MemoryOutputStream { return MemoryOutputStream{OutputStream{GObjectObject{value}}} }
type FileInputStream struct { InputStream }
type FileInputStreamKind interface {
  _IsFileInputStream()
  GetGObject() unsafe.Pointer
}
func (self FileInputStream) _IsFileInputStream () {}
func (self FileInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileInputStream(value unsafe.Pointer) FileInputStream { return FileInputStream{InputStream{GObjectObject{value}}} }
type ConverterOutputStream struct { FilterOutputStream }
type ConverterOutputStreamKind interface {
  _IsConverterOutputStream()
  GetGObject() unsafe.Pointer
}
func (self ConverterOutputStream) _IsConverterOutputStream () {}
func (self ConverterOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToConverterOutputStream(value unsafe.Pointer) ConverterOutputStream { return ConverterOutputStream{FilterOutputStream{OutputStream{GObjectObject{value}}}} }
type MenuAttributeIter struct { GObjectObject }
type MenuAttributeIterKind interface {
  _IsMenuAttributeIter()
  GetGObject() unsafe.Pointer
}
func (self MenuAttributeIter) _IsMenuAttributeIter () {}
func (self MenuAttributeIter) GetGObject() unsafe.Pointer { return self._value_ }
func ToMenuAttributeIter(value unsafe.Pointer) MenuAttributeIter { return MenuAttributeIter{GObjectObject{value}} }
type TlsPassword struct { GObjectObject }
type TlsPasswordKind interface {
  _IsTlsPassword()
  GetGObject() unsafe.Pointer
}
func (self TlsPassword) _IsTlsPassword () {}
func (self TlsPassword) GetGObject() unsafe.Pointer { return self._value_ }
func ToTlsPassword(value unsafe.Pointer) TlsPassword { return TlsPassword{GObjectObject{value}} }
type Credentials struct { GObjectObject }
type CredentialsKind interface {
  _IsCredentials()
  GetGObject() unsafe.Pointer
}
func (self Credentials) _IsCredentials () {}
func (self Credentials) GetGObject() unsafe.Pointer { return self._value_ }
func ToCredentials(value unsafe.Pointer) Credentials { return Credentials{GObjectObject{value}} }
type DBusMethodInvocation struct { GObjectObject }
type DBusMethodInvocationKind interface {
  _IsDBusMethodInvocation()
  GetGObject() unsafe.Pointer
}
func (self DBusMethodInvocation) _IsDBusMethodInvocation () {}
func (self DBusMethodInvocation) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusMethodInvocation(value unsafe.Pointer) DBusMethodInvocation { return DBusMethodInvocation{GObjectObject{value}} }
type OutputStream struct { GObjectObject }
type OutputStreamKind interface {
  _IsOutputStream()
  GetGObject() unsafe.Pointer
}
func (self OutputStream) _IsOutputStream () {}
func (self OutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToOutputStream(value unsafe.Pointer) OutputStream { return OutputStream{GObjectObject{value}} }
type TlsDatabase struct { GObjectObject }
type TlsDatabaseKind interface {
  _IsTlsDatabase()
  GetGObject() unsafe.Pointer
}
func (self TlsDatabase) _IsTlsDatabase () {}
func (self TlsDatabase) GetGObject() unsafe.Pointer { return self._value_ }
func ToTlsDatabase(value unsafe.Pointer) TlsDatabase { return TlsDatabase{GObjectObject{value}} }
type SocketClient struct { GObjectObject }
type SocketClientKind interface {
  _IsSocketClient()
  GetGObject() unsafe.Pointer
}
func (self SocketClient) _IsSocketClient () {}
func (self SocketClient) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketClient(value unsafe.Pointer) SocketClient { return SocketClient{GObjectObject{value}} }
type MenuLinkIter struct { GObjectObject }
type MenuLinkIterKind interface {
  _IsMenuLinkIter()
  GetGObject() unsafe.Pointer
}
func (self MenuLinkIter) _IsMenuLinkIter () {}
func (self MenuLinkIter) GetGObject() unsafe.Pointer { return self._value_ }
func ToMenuLinkIter(value unsafe.Pointer) MenuLinkIter { return MenuLinkIter{GObjectObject{value}} }
type GioApplication struct { GObjectObject }
type GioApplicationKind interface {
  _IsGioApplication()
  GetGObject() unsafe.Pointer
}
func (self GioApplication) _IsGioApplication () {}
func (self GioApplication) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioApplication(value unsafe.Pointer) GioApplication { return GioApplication{GObjectObject{value}} }
type DBusAuthObserver struct { GObjectObject }
type DBusAuthObserverKind interface {
  _IsDBusAuthObserver()
  GetGObject() unsafe.Pointer
}
func (self DBusAuthObserver) _IsDBusAuthObserver () {}
func (self DBusAuthObserver) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusAuthObserver(value unsafe.Pointer) DBusAuthObserver { return DBusAuthObserver{GObjectObject{value}} }
type DBusMessage struct { GObjectObject }
type DBusMessageKind interface {
  _IsDBusMessage()
  GetGObject() unsafe.Pointer
}
func (self DBusMessage) _IsDBusMessage () {}
func (self DBusMessage) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusMessage(value unsafe.Pointer) DBusMessage { return DBusMessage{GObjectObject{value}} }
type FileInfo struct { GObjectObject }
type FileInfoKind interface {
  _IsFileInfo()
  GetGObject() unsafe.Pointer
}
func (self FileInfo) _IsFileInfo () {}
func (self FileInfo) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileInfo(value unsafe.Pointer) FileInfo { return FileInfo{GObjectObject{value}} }
type UnixSocketAddress struct { SocketAddress }
type UnixSocketAddressKind interface {
  _IsUnixSocketAddress()
  GetGObject() unsafe.Pointer
}
func (self UnixSocketAddress) _IsUnixSocketAddress () {}
func (self UnixSocketAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToUnixSocketAddress(value unsafe.Pointer) UnixSocketAddress { return UnixSocketAddress{SocketAddress{GObjectObject{value}}} }
type FilterOutputStream struct { OutputStream }
type FilterOutputStreamKind interface {
  _IsFilterOutputStream()
  GetGObject() unsafe.Pointer
}
func (self FilterOutputStream) _IsFilterOutputStream () {}
func (self FilterOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToFilterOutputStream(value unsafe.Pointer) FilterOutputStream { return FilterOutputStream{OutputStream{GObjectObject{value}}} }
type InetSocketAddress struct { SocketAddress }
type InetSocketAddressKind interface {
  _IsInetSocketAddress()
  GetGObject() unsafe.Pointer
}
func (self InetSocketAddress) _IsInetSocketAddress () {}
func (self InetSocketAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToInetSocketAddress(value unsafe.Pointer) InetSocketAddress { return InetSocketAddress{SocketAddress{GObjectObject{value}}} }
type GioSettings struct { GObjectObject }
type GioSettingsKind interface {
  _IsGioSettings()
  GetGObject() unsafe.Pointer
}
func (self GioSettings) _IsGioSettings () {}
func (self GioSettings) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioSettings(value unsafe.Pointer) GioSettings { return GioSettings{GObjectObject{value}} }
type ZlibCompressor struct { GObjectObject }
type ZlibCompressorKind interface {
  _IsZlibCompressor()
  GetGObject() unsafe.Pointer
}
func (self ZlibCompressor) _IsZlibCompressor () {}
func (self ZlibCompressor) GetGObject() unsafe.Pointer { return self._value_ }
func ToZlibCompressor(value unsafe.Pointer) ZlibCompressor { return ZlibCompressor{GObjectObject{value}} }
type DBusMenuModel struct { MenuModel }
type DBusMenuModelKind interface {
  _IsDBusMenuModel()
  GetGObject() unsafe.Pointer
}
func (self DBusMenuModel) _IsDBusMenuModel () {}
func (self DBusMenuModel) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusMenuModel(value unsafe.Pointer) DBusMenuModel { return DBusMenuModel{MenuModel{GObjectObject{value}}} }
type GioAppLaunchContext struct { GObjectObject }
type GioAppLaunchContextKind interface {
  _IsGioAppLaunchContext()
  GetGObject() unsafe.Pointer
}
func (self GioAppLaunchContext) _IsGioAppLaunchContext () {}
func (self GioAppLaunchContext) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioAppLaunchContext(value unsafe.Pointer) GioAppLaunchContext { return GioAppLaunchContext{GObjectObject{value}} }
type GioMenu struct { MenuModel }
type GioMenuKind interface {
  _IsGioMenu()
  GetGObject() unsafe.Pointer
}
func (self GioMenu) _IsGioMenu () {}
func (self GioMenu) GetGObject() unsafe.Pointer { return self._value_ }
func ToGioMenu(value unsafe.Pointer) GioMenu { return GioMenu{MenuModel{GObjectObject{value}}} }
type NetworkService struct { GObjectObject }
type NetworkServiceKind interface {
  _IsNetworkService()
  GetGObject() unsafe.Pointer
}
func (self NetworkService) _IsNetworkService () {}
func (self NetworkService) GetGObject() unsafe.Pointer { return self._value_ }
func ToNetworkService(value unsafe.Pointer) NetworkService { return NetworkService{GObjectObject{value}} }
type Emblem struct { GObjectObject }
type EmblemKind interface {
  _IsEmblem()
  GetGObject() unsafe.Pointer
}
func (self Emblem) _IsEmblem () {}
func (self Emblem) GetGObject() unsafe.Pointer { return self._value_ }
func ToEmblem(value unsafe.Pointer) Emblem { return Emblem{GObjectObject{value}} }
type TcpWrapperConnection struct { TcpConnection }
type TcpWrapperConnectionKind interface {
  _IsTcpWrapperConnection()
  GetGObject() unsafe.Pointer
}
func (self TcpWrapperConnection) _IsTcpWrapperConnection () {}
func (self TcpWrapperConnection) GetGObject() unsafe.Pointer { return self._value_ }
func ToTcpWrapperConnection(value unsafe.Pointer) TcpWrapperConnection { return TcpWrapperConnection{TcpConnection{SocketConnection{IOStream{GObjectObject{value}}}}} }
type FileIOStream struct { IOStream }
type FileIOStreamKind interface {
  _IsFileIOStream()
  GetGObject() unsafe.Pointer
}
func (self FileIOStream) _IsFileIOStream () {}
func (self FileIOStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileIOStream(value unsafe.Pointer) FileIOStream { return FileIOStream{IOStream{GObjectObject{value}}} }
type SocketAddress struct { GObjectObject }
type SocketAddressKind interface {
  _IsSocketAddress()
  GetGObject() unsafe.Pointer
}
func (self SocketAddress) _IsSocketAddress () {}
func (self SocketAddress) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketAddress(value unsafe.Pointer) SocketAddress { return SocketAddress{GObjectObject{value}} }
type DBusObjectManagerClient struct { GObjectObject }
type DBusObjectManagerClientKind interface {
  _IsDBusObjectManagerClient()
  GetGObject() unsafe.Pointer
}
func (self DBusObjectManagerClient) _IsDBusObjectManagerClient () {}
func (self DBusObjectManagerClient) GetGObject() unsafe.Pointer { return self._value_ }
func ToDBusObjectManagerClient(value unsafe.Pointer) DBusObjectManagerClient { return DBusObjectManagerClient{GObjectObject{value}} }
type FileOutputStream struct { OutputStream }
type FileOutputStreamKind interface {
  _IsFileOutputStream()
  GetGObject() unsafe.Pointer
}
func (self FileOutputStream) _IsFileOutputStream () {}
func (self FileOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileOutputStream(value unsafe.Pointer) FileOutputStream { return FileOutputStream{OutputStream{GObjectObject{value}}} }
type BufferedOutputStream struct { FilterOutputStream }
type BufferedOutputStreamKind interface {
  _IsBufferedOutputStream()
  GetGObject() unsafe.Pointer
}
func (self BufferedOutputStream) _IsBufferedOutputStream () {}
func (self BufferedOutputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToBufferedOutputStream(value unsafe.Pointer) BufferedOutputStream { return BufferedOutputStream{FilterOutputStream{OutputStream{GObjectObject{value}}}} }
type DesktopAppInfo struct { GObjectObject }
type DesktopAppInfoKind interface {
  _IsDesktopAppInfo()
  GetGObject() unsafe.Pointer
}
func (self DesktopAppInfo) _IsDesktopAppInfo () {}
func (self DesktopAppInfo) GetGObject() unsafe.Pointer { return self._value_ }
func ToDesktopAppInfo(value unsafe.Pointer) DesktopAppInfo { return DesktopAppInfo{GObjectObject{value}} }
type IOModule struct { TypeModule }
type IOModuleKind interface {
  _IsIOModule()
  GetGObject() unsafe.Pointer
}
func (self IOModule) _IsIOModule () {}
func (self IOModule) GetGObject() unsafe.Pointer { return self._value_ }
func ToIOModule(value unsafe.Pointer) IOModule { return IOModule{TypeModule{GObjectObject{value}}} }
type SocketService struct { SocketListener }
type SocketServiceKind interface {
  _IsSocketService()
  GetGObject() unsafe.Pointer
}
func (self SocketService) _IsSocketService () {}
func (self SocketService) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketService(value unsafe.Pointer) SocketService { return SocketService{SocketListener{GObjectObject{value}}} }
type Cancellable struct { GObjectObject }
type CancellableKind interface {
  _IsCancellable()
  GetGObject() unsafe.Pointer
}
func (self Cancellable) _IsCancellable () {}
func (self Cancellable) GetGObject() unsafe.Pointer { return self._value_ }
func ToCancellable(value unsafe.Pointer) Cancellable { return Cancellable{GObjectObject{value}} }
type InetAddressMask struct { GObjectObject }
type InetAddressMaskKind interface {
  _IsInetAddressMask()
  GetGObject() unsafe.Pointer
}
func (self InetAddressMask) _IsInetAddressMask () {}
func (self InetAddressMask) GetGObject() unsafe.Pointer { return self._value_ }
func ToInetAddressMask(value unsafe.Pointer) InetAddressMask { return InetAddressMask{GObjectObject{value}} }
type DataInputStream struct { BufferedInputStream }
type DataInputStreamKind interface {
  _IsDataInputStream()
  GetGObject() unsafe.Pointer
}
func (self DataInputStream) _IsDataInputStream () {}
func (self DataInputStream) GetGObject() unsafe.Pointer { return self._value_ }
func ToDataInputStream(value unsafe.Pointer) DataInputStream { return DataInputStream{BufferedInputStream{FilterInputStream{InputStream{GObjectObject{value}}}}} }
type SimpleAction struct { GObjectObject }
type SimpleActionKind interface {
  _IsSimpleAction()
  GetGObject() unsafe.Pointer
}
func (self SimpleAction) _IsSimpleAction () {}
func (self SimpleAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToSimpleAction(value unsafe.Pointer) SimpleAction { return SimpleAction{GObjectObject{value}} }
type Resolver struct { GObjectObject }
type ResolverKind interface {
  _IsResolver()
  GetGObject() unsafe.Pointer
}
func (self Resolver) _IsResolver () {}
func (self Resolver) GetGObject() unsafe.Pointer { return self._value_ }
func ToResolver(value unsafe.Pointer) Resolver { return Resolver{GObjectObject{value}} }
type ApplicationCommandLine struct { GObjectObject }
type ApplicationCommandLineKind interface {
  _IsApplicationCommandLine()
  GetGObject() unsafe.Pointer
}
func (self ApplicationCommandLine) _IsApplicationCommandLine () {}
func (self ApplicationCommandLine) GetGObject() unsafe.Pointer { return self._value_ }
func ToApplicationCommandLine(value unsafe.Pointer) ApplicationCommandLine { return ApplicationCommandLine{GObjectObject{value}} }
type FileEnumerator struct { GObjectObject }
type FileEnumeratorKind interface {
  _IsFileEnumerator()
  GetGObject() unsafe.Pointer
}
func (self FileEnumerator) _IsFileEnumerator () {}
func (self FileEnumerator) GetGObject() unsafe.Pointer { return self._value_ }
func ToFileEnumerator(value unsafe.Pointer) FileEnumerator { return FileEnumerator{GObjectObject{value}} }
type SimplePermission struct { Permission }
type SimplePermissionKind interface {
  _IsSimplePermission()
  GetGObject() unsafe.Pointer
}
func (self SimplePermission) _IsSimplePermission () {}
func (self SimplePermission) GetGObject() unsafe.Pointer { return self._value_ }
func ToSimplePermission(value unsafe.Pointer) SimplePermission { return SimplePermission{Permission{GObjectObject{value}}} }
type SocketListener struct { GObjectObject }
type SocketListenerKind interface {
  _IsSocketListener()
  GetGObject() unsafe.Pointer
}
func (self SocketListener) _IsSocketListener () {}
func (self SocketListener) GetGObject() unsafe.Pointer { return self._value_ }
func ToSocketListener(value unsafe.Pointer) SocketListener { return SocketListener{GObjectObject{value}} }
func AppInfoCreateFromCommandline(commandline string, application_name string, flags C.GAppInfoCreateFlags) (_return_ *C.GAppInfo, _error_ unsafe.Pointer) {
	_cstring_commandline_ := C.CString(commandline)
	_cgo_commandline_ := (*C.char)(unsafe.Pointer(_cstring_commandline_))
	defer C.free(unsafe.Pointer(_cstring_commandline_))
	_cstring_application_name_ := C.CString(application_name)
	_cgo_application_name_ := (*C.char)(unsafe.Pointer(_cstring_application_name_))
	defer C.free(unsafe.Pointer(_cstring_application_name_))
	_return_ = C._g_app_info_create_from_commandline(_cgo_commandline_, _cgo_application_name_, flags, _error_)
	return
}

func AppInfoGetAll() (_return_ *C.GList) {
	_return_ = C.g_app_info_get_all()
	return
}

func AppInfoGetAllForType(content_type string) (_return_ *C.GList) {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.char)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._g_app_info_get_all_for_type(_cgo_content_type_)
	return
}

func AppInfoGetDefaultForType(content_type string, must_support_uris bool) (_return_ *C.GAppInfo) {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.char)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_cgo_must_support_uris_ := (C.gboolean)(C.FALSE)
	if must_support_uris { _cgo_must_support_uris_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_app_info_get_default_for_type(_cgo_content_type_, _cgo_must_support_uris_)
	return
}

func AppInfoGetDefaultForUriScheme(uri_scheme string) (_return_ *C.GAppInfo) {
	_cstring_uri_scheme_ := C.CString(uri_scheme)
	_cgo_uri_scheme_ := (*C.char)(unsafe.Pointer(_cstring_uri_scheme_))
	defer C.free(unsafe.Pointer(_cstring_uri_scheme_))
	_return_ = C._g_app_info_get_default_for_uri_scheme(_cgo_uri_scheme_)
	return
}

func AppInfoGetFallbackForType(content_type string) (_return_ *C.GList) {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._g_app_info_get_fallback_for_type(_cgo_content_type_)
	return
}

func AppInfoGetRecommendedForType(content_type string) (_return_ *C.GList) {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.gchar)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	_return_ = C._g_app_info_get_recommended_for_type(_cgo_content_type_)
	return
}

func AppInfoLaunchDefaultForUri(uri string, launch_context GioAppLaunchContextKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_launch_context_ := (*C.GAppLaunchContext)(launch_context.GetGObject())
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.char)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	var _return_ C.gboolean
	_return_ = C._g_app_info_launch_default_for_uri(_cgo_uri_, _cgo_launch_context_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func AppInfoResetTypeAssociations(content_type string) () {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.char)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	C._g_app_info_reset_type_associations(_cgo_content_type_)
	return
}

func AsyncInitableNewvAsync(object_type C.GType, n_parameters uint, parameters *C.GParameter, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_n_parameters_ := (C.guint)(n_parameters)
	C.g_async_initable_newv_async(object_type, _cgo_n_parameters_, parameters, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func BusGet(bus_type C.GBusType, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_bus_get(bus_type, _cgo_cancellable_, callback, user_data)
	return
}

func BusGetFinish(res *C.GAsyncResult) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusConnection
	_return_ = C._g_bus_get_finish(res, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func BusGetSync(bus_type C.GBusType, cancellable CancellableKind) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusConnection
	_return_ = C._g_bus_get_sync(bus_type, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func BusOwnName(bus_type C.GBusType, name string, flags C.GBusNameOwnerFlags, bus_acquired_handler C.GBusAcquiredCallback, name_acquired_handler C.GBusNameAcquiredCallback, name_lost_handler C.GBusNameLostCallback, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_own_name(bus_type, _cgo_name_, flags, bus_acquired_handler, name_acquired_handler, name_lost_handler, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func BusOwnNameOnConnection(connection DBusConnectionKind, name string, flags C.GBusNameOwnerFlags, name_acquired_handler C.GBusNameAcquiredCallback, name_lost_handler C.GBusNameLostCallback, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_own_name_on_connection(_cgo_connection_, _cgo_name_, flags, name_acquired_handler, name_lost_handler, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func BusOwnNameOnConnectionWithClosures(connection DBusConnectionKind, name string, flags C.GBusNameOwnerFlags, name_acquired_closure *C.GClosure, name_lost_closure *C.GClosure) (_go__return__ uint) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_own_name_on_connection_with_closures(_cgo_connection_, _cgo_name_, flags, name_acquired_closure, name_lost_closure)
	_go__return__ = (uint)(_return_)
	return
}

func BusOwnNameWithClosures(bus_type C.GBusType, name string, flags C.GBusNameOwnerFlags, bus_acquired_closure *C.GClosure, name_acquired_closure *C.GClosure, name_lost_closure *C.GClosure) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_own_name_with_closures(bus_type, _cgo_name_, flags, bus_acquired_closure, name_acquired_closure, name_lost_closure)
	_go__return__ = (uint)(_return_)
	return
}

func BusUnownName(owner_id uint) () {
	_cgo_owner_id_ := (C.guint)(owner_id)
	C.g_bus_unown_name(_cgo_owner_id_)
	return
}

func BusUnwatchName(watcher_id uint) () {
	_cgo_watcher_id_ := (C.guint)(watcher_id)
	C.g_bus_unwatch_name(_cgo_watcher_id_)
	return
}

func BusWatchName(bus_type C.GBusType, name string, flags C.GBusNameWatcherFlags, name_appeared_handler C.GBusNameAppearedCallback, name_vanished_handler C.GBusNameVanishedCallback, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_watch_name(bus_type, _cgo_name_, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func BusWatchNameOnConnection(connection DBusConnectionKind, name string, flags C.GBusNameWatcherFlags, name_appeared_handler C.GBusNameAppearedCallback, name_vanished_handler C.GBusNameVanishedCallback, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_watch_name_on_connection(_cgo_connection_, _cgo_name_, flags, name_appeared_handler, name_vanished_handler, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func BusWatchNameOnConnectionWithClosures(connection DBusConnectionKind, name string, flags C.GBusNameWatcherFlags, name_appeared_closure *C.GClosure, name_vanished_closure *C.GClosure) (_go__return__ uint) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_watch_name_on_connection_with_closures(_cgo_connection_, _cgo_name_, flags, name_appeared_closure, name_vanished_closure)
	_go__return__ = (uint)(_return_)
	return
}

func BusWatchNameWithClosures(bus_type C.GBusType, name string, flags C.GBusNameWatcherFlags, name_appeared_closure *C.GClosure, name_vanished_closure *C.GClosure) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_bus_watch_name_with_closures(bus_type, _cgo_name_, flags, name_appeared_closure, name_vanished_closure)
	_go__return__ = (uint)(_return_)
	return
}

func ContentTypeCanBeExecutable(type_ string) (_go__return__ bool) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	var _return_ C.gboolean
	_return_ = C._g_content_type_can_be_executable(_cgo_type__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ContentTypeEquals(type1 string, type2 string) (_go__return__ bool) {
	_cstring_type1_ := C.CString(type1)
	_cgo_type1_ := (*C.gchar)(unsafe.Pointer(_cstring_type1_))
	defer C.free(unsafe.Pointer(_cstring_type1_))
	_cstring_type2_ := C.CString(type2)
	_cgo_type2_ := (*C.gchar)(unsafe.Pointer(_cstring_type2_))
	defer C.free(unsafe.Pointer(_cstring_type2_))
	var _return_ C.gboolean
	_return_ = C._g_content_type_equals(_cgo_type1_, _cgo_type2_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ContentTypeFromMimeType(mime_type string) (_go__return__ string) {
	_cstring_mime_type_ := C.CString(mime_type)
	_cgo_mime_type_ := (*C.gchar)(unsafe.Pointer(_cstring_mime_type_))
	defer C.free(unsafe.Pointer(_cstring_mime_type_))
	var _return_ *C.gchar
	_return_ = C._g_content_type_from_mime_type(_cgo_mime_type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ContentTypeGetDescription(type_ string) (_go__return__ string) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	var _return_ *C.gchar
	_return_ = C._g_content_type_get_description(_cgo_type__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ContentTypeGetGenericIconName(type_ string) (_go__return__ string) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	var _return_ *C.gchar
	_return_ = C._g_content_type_get_generic_icon_name(_cgo_type__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ContentTypeGetIcon(type_ string) (_return_ *C.GIcon) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	_return_ = C._g_content_type_get_icon(_cgo_type__)
	return
}

func ContentTypeGetMimeType(type_ string) (_go__return__ string) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	var _return_ *C.gchar
	_return_ = C._g_content_type_get_mime_type(_cgo_type__)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ContentTypeGetSymbolicIcon(type_ string) (_return_ *C.GIcon) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	_return_ = C._g_content_type_get_symbolic_icon(_cgo_type__)
	return
}

func ContentTypeGuessForTree(root *C.GFile) (_return_ unsafe.Pointer) {
	_return_ = C._g_content_type_guess_for_tree(root)
	return
}

func ContentTypeIsA(type_ string, supertype string) (_go__return__ bool) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	_cstring_supertype_ := C.CString(supertype)
	_cgo_supertype_ := (*C.gchar)(unsafe.Pointer(_cstring_supertype_))
	defer C.free(unsafe.Pointer(_cstring_supertype_))
	var _return_ C.gboolean
	_return_ = C._g_content_type_is_a(_cgo_type__, _cgo_supertype_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ContentTypeIsUnknown(type_ string) (_go__return__ bool) {
	_cstring_type__ := C.CString(type_)
	_cgo_type__ := (*C.gchar)(unsafe.Pointer(_cstring_type__))
	defer C.free(unsafe.Pointer(_cstring_type__))
	var _return_ C.gboolean
	_return_ = C._g_content_type_is_unknown(_cgo_type__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ContentTypesGetRegistered() (_return_ *C.GList) {
	_return_ = C.g_content_types_get_registered()
	return
}

func DbusAddressGetForBusSync(bus_type C.GBusType, cancellable CancellableKind) (_go__return__ string, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.gchar
	_return_ = C._g_dbus_address_get_for_bus_sync(bus_type, _cgo_cancellable_, _error_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DbusAddressGetStream(address string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_address_ := C.CString(address)
	_cgo_address_ := (*C.gchar)(unsafe.Pointer(_cstring_address_))
	defer C.free(unsafe.Pointer(_cstring_address_))
	C._g_dbus_address_get_stream(_cgo_address_, _cgo_cancellable_, callback, user_data)
	return
}

func DbusAddressGetStreamFinish(res *C.GAsyncResult, out_guid string) (_go__return__ IOStream, _error_ unsafe.Pointer) {
	var _return_ *C.GIOStream
	_cstring_out_guid_ := C.CString(out_guid)
	_cgo_out_guid_ := (unsafe.Pointer)(unsafe.Pointer(_cstring_out_guid_))
	defer C.free(unsafe.Pointer(_cstring_out_guid_))
	_return_ = C._g_dbus_address_get_stream_finish(res, _cgo_out_guid_, _error_)
	_go__return__ = ToIOStream(unsafe.Pointer(_return_))
	return
}

func DbusAddressGetStreamSync(address string, out_guid string, cancellable CancellableKind) (_go__return__ IOStream, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GIOStream
	_cstring_address_ := C.CString(address)
	_cgo_address_ := (*C.gchar)(unsafe.Pointer(_cstring_address_))
	defer C.free(unsafe.Pointer(_cstring_address_))
	_cstring_out_guid_ := C.CString(out_guid)
	_cgo_out_guid_ := (unsafe.Pointer)(unsafe.Pointer(_cstring_out_guid_))
	defer C.free(unsafe.Pointer(_cstring_out_guid_))
	_return_ = C._g_dbus_address_get_stream_sync(_cgo_address_, _cgo_out_guid_, _cgo_cancellable_, _error_)
	_go__return__ = ToIOStream(unsafe.Pointer(_return_))
	return
}

func DbusErrorEncodeGerror(error_ *C.GError) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_error_encode_gerror(error_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DbusErrorGetRemoteError(error_ *C.GError) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_error_get_remote_error(error_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DbusErrorIsRemoteError(error_ *C.GError) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._g_dbus_error_is_remote_error(error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusErrorNewForDbusError(dbus_error_name string, dbus_error_message string) (_return_ *C.GError) {
	_cstring_dbus_error_name_ := C.CString(dbus_error_name)
	_cgo_dbus_error_name_ := (*C.gchar)(unsafe.Pointer(_cstring_dbus_error_name_))
	defer C.free(unsafe.Pointer(_cstring_dbus_error_name_))
	_cstring_dbus_error_message_ := C.CString(dbus_error_message)
	_cgo_dbus_error_message_ := (*C.gchar)(unsafe.Pointer(_cstring_dbus_error_message_))
	defer C.free(unsafe.Pointer(_cstring_dbus_error_message_))
	_return_ = C._g_dbus_error_new_for_dbus_error(_cgo_dbus_error_name_, _cgo_dbus_error_message_)
	return
}

func DbusErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_dbus_error_quark()
	return
}

func DbusErrorRegisterError(error_domain C.GQuark, error_code int, dbus_error_name string) (_go__return__ bool) {
	_cgo_error_code_ := (C.gint)(error_code)
	_cstring_dbus_error_name_ := C.CString(dbus_error_name)
	_cgo_dbus_error_name_ := (*C.gchar)(unsafe.Pointer(_cstring_dbus_error_name_))
	defer C.free(unsafe.Pointer(_cstring_dbus_error_name_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_error_register_error(error_domain, _cgo_error_code_, _cgo_dbus_error_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusErrorRegisterErrorDomain(error_domain_quark_name string, quark_volatile *C. gsize, entries *DBusErrorEntry, num_entries uint) () {
	_cgo_entries_ := (*C.GDBusErrorEntry)(unsafe.Pointer(entries))
	_cgo_num_entries_ := (C.guint)(num_entries)
	_cstring_error_domain_quark_name_ := C.CString(error_domain_quark_name)
	_cgo_error_domain_quark_name_ := (*C.gchar)(unsafe.Pointer(_cstring_error_domain_quark_name_))
	defer C.free(unsafe.Pointer(_cstring_error_domain_quark_name_))
	C._g_dbus_error_register_error_domain(_cgo_error_domain_quark_name_, quark_volatile, _cgo_entries_, _cgo_num_entries_)
	return
}

func DbusErrorStripRemoteError(error_ *C.GError) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_dbus_error_strip_remote_error(error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusErrorUnregisterError(error_domain C.GQuark, error_code int, dbus_error_name string) (_go__return__ bool) {
	_cgo_error_code_ := (C.gint)(error_code)
	_cstring_dbus_error_name_ := C.CString(dbus_error_name)
	_cgo_dbus_error_name_ := (*C.gchar)(unsafe.Pointer(_cstring_dbus_error_name_))
	defer C.free(unsafe.Pointer(_cstring_dbus_error_name_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_error_unregister_error(error_domain, _cgo_error_code_, _cgo_dbus_error_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusGenerateGuid() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_dbus_generate_guid()
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DbusGvalueToGvariant(gvalue *C.GValue, type_ *C.GVariantType) (_return_ *C.GVariant) {
	_return_ = C._g_dbus_gvalue_to_gvariant(gvalue, type_)
	return
}

func DbusGvariantToGvalue(value *C.GVariant) (out_gvalue *C.GValue) {
	C.g_dbus_gvariant_to_gvalue(value, out_gvalue)
	return
}

func DbusIsAddress(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_address(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsGuid(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_guid(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsInterfaceName(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_interface_name(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsMemberName(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_member_name(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsName(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_name(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsSupportedAddress(string_ string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_supported_address(_cgo_string__, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DbusIsUniqueName(string_ string) (_go__return__ bool) {
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	var _return_ C.gboolean
	_return_ = C._g_dbus_is_unique_name(_cgo_string__)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func FileNewForCommandlineArg(arg string) (_return_ *C.GFile) {
	_cstring_arg_ := C.CString(arg)
	_cgo_arg_ := (*C.char)(unsafe.Pointer(_cstring_arg_))
	defer C.free(unsafe.Pointer(_cstring_arg_))
	_return_ = C._g_file_new_for_commandline_arg(_cgo_arg_)
	return
}

func FileNewForPath(path string) (_return_ *C.GFile) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_file_new_for_path(_cgo_path_)
	return
}

func FileNewForUri(uri string) (_return_ *C.GFile) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.char)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._g_file_new_for_uri(_cgo_uri_)
	return
}

func FileNewTmp(tmpl string) (_return_ *C.GFile, iostream *FileIOStream, _error_ unsafe.Pointer) {
	var _allocated_iostream_ *C.GFileIOStream
	_cstring_tmpl_ := C.CString(tmpl)
	_cgo_tmpl_ := (*C.char)(unsafe.Pointer(_cstring_tmpl_))
	defer C.free(unsafe.Pointer(_cstring_tmpl_))
	_return_ = C._g_file_new_tmp(_cgo_tmpl_, unsafe.Pointer(&_allocated_iostream_), _error_)
	iostream = (*FileIOStream)(unsafe.Pointer(_allocated_iostream_))
	return
}

func FileParseName(parse_name string) (_return_ *C.GFile) {
	_cstring_parse_name_ := C.CString(parse_name)
	_cgo_parse_name_ := (*C.char)(unsafe.Pointer(_cstring_parse_name_))
	defer C.free(unsafe.Pointer(_cstring_parse_name_))
	_return_ = C._g_file_parse_name(_cgo_parse_name_)
	return
}

func IconHash(icon C.gpointer) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._g_icon_hash(icon)
	_go__return__ = (uint)(_return_)
	return
}

func IconNewForString(str string) (_return_ *C.GIcon, _error_ unsafe.Pointer) {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	_return_ = C._g_icon_new_for_string(_cgo_str_, _error_)
	return
}

func IoErrorFromErrno(err_no int) (_return_ C.GIOErrorEnum) {
	_cgo_err_no_ := (C.gint)(err_no)
	_return_ = C.g_io_error_from_errno(_cgo_err_no_)
	return
}

func IoErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_io_error_quark()
	return
}

func IoExtensionPointImplement(extension_point_name string, type_ C.GType, extension_name string, priority int) (_go__return__ *IOExtension) {
	var _return_ *C.GIOExtension
	_cgo_priority_ := (C.gint)(priority)
	_cstring_extension_point_name_ := C.CString(extension_point_name)
	_cgo_extension_point_name_ := (*C.char)(unsafe.Pointer(_cstring_extension_point_name_))
	defer C.free(unsafe.Pointer(_cstring_extension_point_name_))
	_cstring_extension_name_ := C.CString(extension_name)
	_cgo_extension_name_ := (*C.char)(unsafe.Pointer(_cstring_extension_name_))
	defer C.free(unsafe.Pointer(_cstring_extension_name_))
	_return_ = C._g_io_extension_point_implement(_cgo_extension_point_name_, type_, _cgo_extension_name_, _cgo_priority_)
	_go__return__ = (*IOExtension)(unsafe.Pointer(_return_))
	return
}

func IoExtensionPointLookup(name string) (_go__return__ *IOExtensionPoint) {
	var _return_ *C.GIOExtensionPoint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_io_extension_point_lookup(_cgo_name_)
	_go__return__ = (*IOExtensionPoint)(unsafe.Pointer(_return_))
	return
}

func IoExtensionPointRegister(name string) (_go__return__ *IOExtensionPoint) {
	var _return_ *C.GIOExtensionPoint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_io_extension_point_register(_cgo_name_)
	_go__return__ = (*IOExtensionPoint)(unsafe.Pointer(_return_))
	return
}

func IoModulesLoadAllInDirectory(dirname string) (_return_ *C.GList) {
	_cstring_dirname_ := C.CString(dirname)
	_cgo_dirname_ := (*C.gchar)(unsafe.Pointer(_cstring_dirname_))
	defer C.free(unsafe.Pointer(_cstring_dirname_))
	_return_ = C._g_io_modules_load_all_in_directory(_cgo_dirname_)
	return
}

func IoModulesLoadAllInDirectoryWithScope(dirname string, scope *IOModuleScope) (_return_ *C.GList) {
	_cgo_scope_ := (*C.GIOModuleScope)(unsafe.Pointer(scope))
	_cstring_dirname_ := C.CString(dirname)
	_cgo_dirname_ := (*C.gchar)(unsafe.Pointer(_cstring_dirname_))
	defer C.free(unsafe.Pointer(_cstring_dirname_))
	_return_ = C._g_io_modules_load_all_in_directory_with_scope(_cgo_dirname_, _cgo_scope_)
	return
}

func IoModulesScanAllInDirectory(dirname string) () {
	_cstring_dirname_ := C.CString(dirname)
	_cgo_dirname_ := (*C.char)(unsafe.Pointer(_cstring_dirname_))
	defer C.free(unsafe.Pointer(_cstring_dirname_))
	C._g_io_modules_scan_all_in_directory(_cgo_dirname_)
	return
}

func IoModulesScanAllInDirectoryWithScope(dirname string, scope *IOModuleScope) () {
	_cgo_scope_ := (*C.GIOModuleScope)(unsafe.Pointer(scope))
	_cstring_dirname_ := C.CString(dirname)
	_cgo_dirname_ := (*C.gchar)(unsafe.Pointer(_cstring_dirname_))
	defer C.free(unsafe.Pointer(_cstring_dirname_))
	C._g_io_modules_scan_all_in_directory_with_scope(_cgo_dirname_, _cgo_scope_)
	return
}

func NetworkMonitorGetDefault() (_return_ *C.GNetworkMonitor) {
	_return_ = C.g_network_monitor_get_default()
	return
}

func PollableSourceNew(pollable_stream *C.GObject) (_return_ *C.GSource) {
	_return_ = C.g_pollable_source_new(pollable_stream)
	return
}

func PollableSourceNewFull(pollable_stream C.gpointer, child_source *C.GSource, cancellable CancellableKind) (_return_ *C.GSource) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_return_ = C.g_pollable_source_new_full(pollable_stream, child_source, _cgo_cancellable_)
	return
}

func PollableStreamRead(stream InputStreamKind, buffer unsafe.Pointer, count uint64, blocking bool, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_stream_ := (*C.GInputStream)(stream.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	var _return_ C.gssize
	_cgo_blocking_ := (C.gboolean)(C.FALSE)
	if blocking { _cgo_blocking_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_pollable_stream_read(_cgo_stream_, buffer, _cgo_count_, _cgo_blocking_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func ProxyGetDefaultForProtocol(protocol string) (_return_ *C.GProxy) {
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	_return_ = C._g_proxy_get_default_for_protocol(_cgo_protocol_)
	return
}

func ProxyResolverGetDefault() (_return_ *C.GProxyResolver) {
	_return_ = C.g_proxy_resolver_get_default()
	return
}

func ResolverErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_resolver_error_quark()
	return
}

func ResourceErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_resource_error_quark()
	return
}

func ResourceLoad(filename string) (_go__return__ *Resource, _error_ unsafe.Pointer) {
	var _return_ *C.GResource
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._g_resource_load(_cgo_filename_, _error_)
	_go__return__ = (*Resource)(unsafe.Pointer(_return_))
	return
}

func ResourcesEnumerateChildren(path string, lookup_flags C.GResourceLookupFlags) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resources_enumerate_children(_cgo_path_, lookup_flags, _error_)
	return
}

func ResourcesGetInfo(path string, lookup_flags C.GResourceLookupFlags) (_go__return__ bool, _go_size_ uint64, _go_flags_ uint32, _error_ unsafe.Pointer) {
	var size C.gsize
	var flags C.guint32
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._g_resources_get_info(_cgo_path_, lookup_flags, &size, &flags, _error_)
	_go_size_ = (uint64)(size)
	_go_flags_ = (uint32)(flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ResourcesLookupData(path string, lookup_flags C.GResourceLookupFlags) (_return_ *C.GBytes, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resources_lookup_data(_cgo_path_, lookup_flags, _error_)
	return
}

func ResourcesOpenStream(path string, lookup_flags C.GResourceLookupFlags) (_go__return__ InputStream, _error_ unsafe.Pointer) {
	var _return_ *C.GInputStream
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resources_open_stream(_cgo_path_, lookup_flags, _error_)
	_go__return__ = ToInputStream(unsafe.Pointer(_return_))
	return
}

func SettingsSchemaSourceGetDefault() (_go__return__ *SettingsSchemaSource) {
	var _return_ *C.GSettingsSchemaSource
	_return_ = C.g_settings_schema_source_get_default()
	_go__return__ = (*SettingsSchemaSource)(unsafe.Pointer(_return_))
	return
}

func SimpleAsyncReportGerrorInIdle(object *C.GObject, callback C.GAsyncReadyCallback, user_data C.gpointer, error_ *C.GError) () {
	C._g_simple_async_report_gerror_in_idle(object, callback, user_data, error_)
	return
}

func SimpleAsyncReportTakeGerrorInIdle(object *C.GObject, callback C.GAsyncReadyCallback, user_data C.gpointer, error_ *C.GError) () {
	C.g_simple_async_report_take_gerror_in_idle(object, callback, user_data, error_)
	return
}

func SrvTargetListSort(targets *C.GList) (_return_ *C.GList) {
	_return_ = C.g_srv_target_list_sort(targets)
	return
}

func TlsBackendGetDefault() (_return_ *C.GTlsBackend) {
	_return_ = C.g_tls_backend_get_default()
	return
}

func TlsClientConnectionNew(base_io_stream IOStreamKind, server_identity *C.GSocketConnectable) (_return_ *C.GIOStream, _error_ unsafe.Pointer) {
	_cgo_base_io_stream_ := (*C.GIOStream)(base_io_stream.GetGObject())
	_return_ = C._g_tls_client_connection_new(_cgo_base_io_stream_, server_identity, _error_)
	return
}

func TlsErrorQuark() (_return_ C.GQuark) {
	_return_ = C.g_tls_error_quark()
	return
}

func TlsFileDatabaseNew(anchors string) (_return_ *C.GTlsDatabase, _error_ unsafe.Pointer) {
	_cstring_anchors_ := C.CString(anchors)
	_cgo_anchors_ := (*C.gchar)(unsafe.Pointer(_cstring_anchors_))
	defer C.free(unsafe.Pointer(_cstring_anchors_))
	_return_ = C._g_tls_file_database_new(_cgo_anchors_, _error_)
	return
}

func TlsServerConnectionNew(base_io_stream IOStreamKind, certificate TlsCertificateKind) (_return_ *C.GIOStream, _error_ unsafe.Pointer) {
	_cgo_base_io_stream_ := (*C.GIOStream)(base_io_stream.GetGObject())
	_cgo_certificate_ := (*C.GTlsCertificate)(certificate.GetGObject())
	_return_ = C._g_tls_server_connection_new(_cgo_base_io_stream_, _cgo_certificate_, _error_)
	return
}

func UnixIsMountPathSystemInternal(mount_path string) (_go__return__ bool) {
	_cstring_mount_path_ := C.CString(mount_path)
	_cgo_mount_path_ := (*C.char)(unsafe.Pointer(_cstring_mount_path_))
	defer C.free(unsafe.Pointer(_cstring_mount_path_))
	var _return_ C.gboolean
	_return_ = C._g_unix_is_mount_path_system_internal(_cgo_mount_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountAt(mount_path string) (_go__return__ *UnixMountEntry, _go_time_read_ uint64) {
	var _return_ *C.GUnixMountEntry
	var time_read C.guint64
	_cstring_mount_path_ := C.CString(mount_path)
	_cgo_mount_path_ := (*C.char)(unsafe.Pointer(_cstring_mount_path_))
	defer C.free(unsafe.Pointer(_cstring_mount_path_))
	_return_ = C._g_unix_mount_at(_cgo_mount_path_, &time_read)
	_go__return__ = (*UnixMountEntry)(unsafe.Pointer(_return_))
	_go_time_read_ = (uint64)(time_read)
	return
}

func UnixMountCompare(mount1 *UnixMountEntry, mount2 *UnixMountEntry) (_go__return__ int) {
	_cgo_mount1_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount1))
	_cgo_mount2_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount2))
	var _return_ C.gint
	_return_ = C.g_unix_mount_compare(_cgo_mount1_, _cgo_mount2_)
	_go__return__ = (int)(_return_)
	return
}

func UnixMountFree(mount_entry *UnixMountEntry) () {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	C.g_unix_mount_free(_cgo_mount_entry_)
	return
}

func UnixMountGetDevicePath(mount_entry *UnixMountEntry) (_go__return__ string) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ *C.char
	_return_ = C._g_unix_mount_get_device_path(_cgo_mount_entry_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func UnixMountGetFsType(mount_entry *UnixMountEntry) (_go__return__ string) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ *C.char
	_return_ = C._g_unix_mount_get_fs_type(_cgo_mount_entry_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func UnixMountGetMountPath(mount_entry *UnixMountEntry) (_go__return__ string) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ *C.char
	_return_ = C._g_unix_mount_get_mount_path(_cgo_mount_entry_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func UnixMountGuessCanEject(mount_entry *UnixMountEntry) (_go__return__ bool) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_guess_can_eject(_cgo_mount_entry_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountGuessIcon(mount_entry *UnixMountEntry) (_return_ *C.GIcon) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	_return_ = C.g_unix_mount_guess_icon(_cgo_mount_entry_)
	return
}

func UnixMountGuessName(mount_entry *UnixMountEntry) (_go__return__ string) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ *C.char
	_return_ = C.g_unix_mount_guess_name(_cgo_mount_entry_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func UnixMountGuessShouldDisplay(mount_entry *UnixMountEntry) (_go__return__ bool) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_guess_should_display(_cgo_mount_entry_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountGuessSymbolicIcon(mount_entry *UnixMountEntry) (_return_ *C.GIcon) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	_return_ = C.g_unix_mount_guess_symbolic_icon(_cgo_mount_entry_)
	return
}

func UnixMountIsReadonly(mount_entry *UnixMountEntry) (_go__return__ bool) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_is_readonly(_cgo_mount_entry_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountIsSystemInternal(mount_entry *UnixMountEntry) (_go__return__ bool) {
	_cgo_mount_entry_ := (*C.GUnixMountEntry)(unsafe.Pointer(mount_entry))
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_is_system_internal(_cgo_mount_entry_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountPointsChangedSince(time uint64) (_go__return__ bool) {
	_cgo_time_ := (C.guint64)(time)
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_points_changed_since(_cgo_time_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountPointsGet() (_return_ *C.GList, _go_time_read_ uint64) {
	var time_read C.guint64
	_return_ = C.g_unix_mount_points_get(&time_read)
	_go_time_read_ = (uint64)(time_read)
	return
}

func UnixMountsChangedSince(time uint64) (_go__return__ bool) {
	_cgo_time_ := (C.guint64)(time)
	var _return_ C.gboolean
	_return_ = C.g_unix_mounts_changed_since(_cgo_time_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixMountsGet() (_return_ *C.GList, _go_time_read_ uint64) {
	var time_read C.guint64
	_return_ = C.g_unix_mounts_get(&time_read)
	_go_time_read_ = (uint64)(time_read)
	return
}

func AppLaunchContextNew() (_go__return__ GioAppLaunchContext) {
	var _return_ *C.GAppLaunchContext
	_return_ = C.g_app_launch_context_new()
	_go__return__ = ToGioAppLaunchContext(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioAppLaunchContext) GetDisplay(info *C.GAppInfo, files *C.GList) (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_app_launch_context_get_display((*C.GAppLaunchContext)(_self_._value_), info, files)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioAppLaunchContext) GetEnvironment() (_return_ unsafe.Pointer) {
	_return_ = C._g_app_launch_context_get_environment((*C.GAppLaunchContext)(_self_._value_))
	return
}

func (_self_ *GioAppLaunchContext) GetStartupNotifyId(info *C.GAppInfo, files *C.GList) (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_app_launch_context_get_startup_notify_id((*C.GAppLaunchContext)(_self_._value_), info, files)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioAppLaunchContext) LaunchFailed(startup_notify_id string) () {
	_cstring_startup_notify_id_ := C.CString(startup_notify_id)
	_cgo_startup_notify_id_ := (*C.char)(unsafe.Pointer(_cstring_startup_notify_id_))
	defer C.free(unsafe.Pointer(_cstring_startup_notify_id_))
	C._g_app_launch_context_launch_failed((*C.GAppLaunchContext)(_self_._value_), _cgo_startup_notify_id_)
	return
}

func (_self_ *GioAppLaunchContext) Setenv(variable string, value string) () {
	_cstring_variable_ := C.CString(variable)
	_cgo_variable_ := (*C.char)(unsafe.Pointer(_cstring_variable_))
	defer C.free(unsafe.Pointer(_cstring_variable_))
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.char)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_app_launch_context_setenv((*C.GAppLaunchContext)(_self_._value_), _cgo_variable_, _cgo_value_)
	return
}

func (_self_ *GioAppLaunchContext) Unsetenv(variable string) () {
	_cstring_variable_ := C.CString(variable)
	_cgo_variable_ := (*C.char)(unsafe.Pointer(_cstring_variable_))
	defer C.free(unsafe.Pointer(_cstring_variable_))
	C._g_app_launch_context_unsetenv((*C.GAppLaunchContext)(_self_._value_), _cgo_variable_)
	return
}

func GioApplicationNew(application_id string, flags C.GApplicationFlags) (_go__return__ GioApplication) {
	var _return_ *C.GApplication
	_cstring_application_id_ := C.CString(application_id)
	_cgo_application_id_ := (*C.gchar)(unsafe.Pointer(_cstring_application_id_))
	defer C.free(unsafe.Pointer(_cstring_application_id_))
	_return_ = C._g_application_new(_cgo_application_id_, flags)
	_go__return__ = ToGioApplication(unsafe.Pointer(_return_))
	return
}

func ApplicationGetDefault() (_go__return__ GioApplication) {
	var _return_ *C.GApplication
	_return_ = C.g_application_get_default()
	_go__return__ = ToGioApplication(unsafe.Pointer(_return_))
	return
}

func ApplicationIdIsValid(application_id string) (_go__return__ bool) {
	_cstring_application_id_ := C.CString(application_id)
	_cgo_application_id_ := (*C.gchar)(unsafe.Pointer(_cstring_application_id_))
	defer C.free(unsafe.Pointer(_cstring_application_id_))
	var _return_ C.gboolean
	_return_ = C._g_application_id_is_valid(_cgo_application_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioApplication) Activate() () {
	C.g_application_activate((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) GetApplicationId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_application_get_application_id((*C.GApplication)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioApplication) GetDbusConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_application_get_dbus_connection((*C.GApplication)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioApplication) GetDbusObjectPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_application_get_dbus_object_path((*C.GApplication)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioApplication) GetFlags() (_return_ C.GApplicationFlags) {
	_return_ = C.g_application_get_flags((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) GetInactivityTimeout() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_application_get_inactivity_timeout((*C.GApplication)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioApplication) GetIsRegistered() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_application_get_is_registered((*C.GApplication)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioApplication) GetIsRemote() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_application_get_is_remote((*C.GApplication)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioApplication) Hold() () {
	C.g_application_hold((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) Quit() () {
	C.g_application_quit((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) Register(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_application_register((*C.GApplication)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioApplication) Release() () {
	C.g_application_release((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) SetApplicationId(application_id string) () {
	_cstring_application_id_ := C.CString(application_id)
	_cgo_application_id_ := (*C.gchar)(unsafe.Pointer(_cstring_application_id_))
	defer C.free(unsafe.Pointer(_cstring_application_id_))
	C._g_application_set_application_id((*C.GApplication)(_self_._value_), _cgo_application_id_)
	return
}

func (_self_ *GioApplication) SetDefault() () {
	C.g_application_set_default((*C.GApplication)(_self_._value_))
	return
}

func (_self_ *GioApplication) SetFlags(flags C.GApplicationFlags) () {
	C.g_application_set_flags((*C.GApplication)(_self_._value_), flags)
	return
}

func (_self_ *GioApplication) SetInactivityTimeout(inactivity_timeout uint) () {
	_cgo_inactivity_timeout_ := (C.guint)(inactivity_timeout)
	C.g_application_set_inactivity_timeout((*C.GApplication)(_self_._value_), _cgo_inactivity_timeout_)
	return
}

func (_self_ *ApplicationCommandLine) GetArguments() (_return_ unsafe.Pointer, argc C.int) {
	_return_ = C._g_application_command_line_get_arguments((*C.GApplicationCommandLine)(_self_._value_), &argc)
	return
}

func (_self_ *ApplicationCommandLine) GetCwd() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_application_command_line_get_cwd((*C.GApplicationCommandLine)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ApplicationCommandLine) GetEnviron() (_return_ unsafe.Pointer) {
	_return_ = C._g_application_command_line_get_environ((*C.GApplicationCommandLine)(_self_._value_))
	return
}

func (_self_ *ApplicationCommandLine) GetExitStatus() (_return_ C.int) {
	_return_ = C.g_application_command_line_get_exit_status((*C.GApplicationCommandLine)(_self_._value_))
	return
}

func (_self_ *ApplicationCommandLine) GetIsRemote() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_application_command_line_get_is_remote((*C.GApplicationCommandLine)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ApplicationCommandLine) GetPlatformData() (_return_ *C.GVariant) {
	_return_ = C.g_application_command_line_get_platform_data((*C.GApplicationCommandLine)(_self_._value_))
	return
}

func (_self_ *ApplicationCommandLine) Getenv(name string) (_go__return__ string) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ *C.gchar
	_return_ = C._g_application_command_line_getenv((*C.GApplicationCommandLine)(_self_._value_), _cgo_name_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ApplicationCommandLine) SetExitStatus(exit_status C.int) () {
	C.g_application_command_line_set_exit_status((*C.GApplicationCommandLine)(_self_._value_), exit_status)
	return
}

func BufferedInputStreamNew(base_stream InputStreamKind) (_go__return__ BufferedInputStream) {
	_cgo_base_stream_ := (*C.GInputStream)(base_stream.GetGObject())
	var _return_ *C.GInputStream
	_return_ = C.g_buffered_input_stream_new(_cgo_base_stream_)
	_go__return__ = ToBufferedInputStream(unsafe.Pointer(_return_))
	return
}

func BufferedInputStreamNewSized(base_stream InputStreamKind, size uint64) (_go__return__ BufferedInputStream) {
	_cgo_base_stream_ := (*C.GInputStream)(base_stream.GetGObject())
	var _return_ *C.GInputStream
	_cgo_size_ := (C.gsize)(size)
	_return_ = C.g_buffered_input_stream_new_sized(_cgo_base_stream_, _cgo_size_)
	_go__return__ = ToBufferedInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *BufferedInputStream) Fill(count int64, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gssize)(count)
	var _return_ C.gssize
	_return_ = C._g_buffered_input_stream_fill((*C.GBufferedInputStream)(_self_._value_), _cgo_count_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *BufferedInputStream) FillAsync(count int64, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gssize)(count)
	C.g_buffered_input_stream_fill_async((*C.GBufferedInputStream)(_self_._value_), _cgo_count_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *BufferedInputStream) FillFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_buffered_input_stream_fill_finish((*C.GBufferedInputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *BufferedInputStream) GetAvailable() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_buffered_input_stream_get_available((*C.GBufferedInputStream)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *BufferedInputStream) GetBufferSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_buffered_input_stream_get_buffer_size((*C.GBufferedInputStream)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *BufferedInputStream) PeekBuffer() (_return_ unsafe.Pointer, _go_count_ uint64) {
	var count C.gsize
	_return_ = C._g_buffered_input_stream_peek_buffer((*C.GBufferedInputStream)(_self_._value_), &count)
	_go_count_ = (uint64)(count)
	return
}

func (_self_ *BufferedInputStream) ReadByte(cancellable CancellableKind) (_return_ C.int, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_return_ = C._g_buffered_input_stream_read_byte((*C.GBufferedInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	return
}

func (_self_ *BufferedInputStream) SetBufferSize(size uint64) () {
	_cgo_size_ := (C.gsize)(size)
	C.g_buffered_input_stream_set_buffer_size((*C.GBufferedInputStream)(_self_._value_), _cgo_size_)
	return
}

func BufferedOutputStreamNew(base_stream OutputStreamKind) (_go__return__ BufferedOutputStream) {
	_cgo_base_stream_ := (*C.GOutputStream)(base_stream.GetGObject())
	var _return_ *C.GOutputStream
	_return_ = C.g_buffered_output_stream_new(_cgo_base_stream_)
	_go__return__ = ToBufferedOutputStream(unsafe.Pointer(_return_))
	return
}

func BufferedOutputStreamNewSized(base_stream OutputStreamKind, size uint64) (_go__return__ BufferedOutputStream) {
	_cgo_base_stream_ := (*C.GOutputStream)(base_stream.GetGObject())
	var _return_ *C.GOutputStream
	_cgo_size_ := (C.gsize)(size)
	_return_ = C.g_buffered_output_stream_new_sized(_cgo_base_stream_, _cgo_size_)
	_go__return__ = ToBufferedOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *BufferedOutputStream) GetAutoGrow() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_buffered_output_stream_get_auto_grow((*C.GBufferedOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *BufferedOutputStream) GetBufferSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_buffered_output_stream_get_buffer_size((*C.GBufferedOutputStream)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *BufferedOutputStream) SetAutoGrow(auto_grow bool) () {
	_cgo_auto_grow_ := (C.gboolean)(C.FALSE)
	if auto_grow { _cgo_auto_grow_ = (C.gboolean)(C.TRUE) }
	C.g_buffered_output_stream_set_auto_grow((*C.GBufferedOutputStream)(_self_._value_), _cgo_auto_grow_)
	return
}

func (_self_ *BufferedOutputStream) SetBufferSize(size uint64) () {
	_cgo_size_ := (C.gsize)(size)
	C.g_buffered_output_stream_set_buffer_size((*C.GBufferedOutputStream)(_self_._value_), _cgo_size_)
	return
}

func CancellableNew() (_go__return__ Cancellable) {
	var _return_ *C.GCancellable
	_return_ = C.g_cancellable_new()
	_go__return__ = ToCancellable(unsafe.Pointer(_return_))
	return
}

func CancellableGetCurrent() (_go__return__ Cancellable) {
	var _return_ *C.GCancellable
	_return_ = C.g_cancellable_get_current()
	_go__return__ = ToCancellable(unsafe.Pointer(_return_))
	return
}

func (_self_ *Cancellable) Cancel() () {
	C.g_cancellable_cancel((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) Connect(callback C.GCallback, data C.gpointer, data_destroy_func C.GDestroyNotify) (_go__return__ uint64) {
	var _return_ C.gulong
	_return_ = C.g_cancellable_connect((*C.GCancellable)(_self_._value_), callback, data, data_destroy_func)
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *Cancellable) Disconnect(handler_id uint64) () {
	_cgo_handler_id_ := (C.gulong)(handler_id)
	C.g_cancellable_disconnect((*C.GCancellable)(_self_._value_), _cgo_handler_id_)
	return
}

func (_self_ *Cancellable) GetFd() (_return_ C.int) {
	_return_ = C.g_cancellable_get_fd((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) IsCancelled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_cancellable_is_cancelled((*C.GCancellable)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Cancellable) MakePollfd(pollfd *C.GPollFD) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_cancellable_make_pollfd((*C.GCancellable)(_self_._value_), pollfd)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Cancellable) PopCurrent() () {
	C.g_cancellable_pop_current((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) PushCurrent() () {
	C.g_cancellable_push_current((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) ReleaseFd() () {
	C.g_cancellable_release_fd((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) Reset() () {
	C.g_cancellable_reset((*C.GCancellable)(_self_._value_))
	return
}

func (_self_ *Cancellable) SetErrorIfCancelled() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_cancellable_set_error_if_cancelled((*C.GCancellable)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Cancellable) SourceNew() (_return_ *C.GSource) {
	_return_ = C.g_cancellable_source_new((*C.GCancellable)(_self_._value_))
	return
}

func CharsetConverterNew(to_charset string, from_charset string) (_go__return__ CharsetConverter, _error_ unsafe.Pointer) {
	var _return_ *C.GCharsetConverter
	_cstring_to_charset_ := C.CString(to_charset)
	_cgo_to_charset_ := (*C.gchar)(unsafe.Pointer(_cstring_to_charset_))
	defer C.free(unsafe.Pointer(_cstring_to_charset_))
	_cstring_from_charset_ := C.CString(from_charset)
	_cgo_from_charset_ := (*C.gchar)(unsafe.Pointer(_cstring_from_charset_))
	defer C.free(unsafe.Pointer(_cstring_from_charset_))
	_return_ = C._g_charset_converter_new(_cgo_to_charset_, _cgo_from_charset_, _error_)
	_go__return__ = ToCharsetConverter(unsafe.Pointer(_return_))
	return
}

func (_self_ *CharsetConverter) GetNumFallbacks() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_charset_converter_get_num_fallbacks((*C.GCharsetConverter)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CharsetConverter) GetUseFallback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_charset_converter_get_use_fallback((*C.GCharsetConverter)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *CharsetConverter) SetUseFallback(use_fallback bool) () {
	_cgo_use_fallback_ := (C.gboolean)(C.FALSE)
	if use_fallback { _cgo_use_fallback_ = (C.gboolean)(C.TRUE) }
	C.g_charset_converter_set_use_fallback((*C.GCharsetConverter)(_self_._value_), _cgo_use_fallback_)
	return
}

func ConverterInputStreamNew(base_stream InputStreamKind, converter *C.GConverter) (_go__return__ ConverterInputStream) {
	_cgo_base_stream_ := (*C.GInputStream)(base_stream.GetGObject())
	var _return_ *C.GInputStream
	_return_ = C.g_converter_input_stream_new(_cgo_base_stream_, converter)
	_go__return__ = ToConverterInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *ConverterInputStream) GetConverter() (_return_ *C.GConverter) {
	_return_ = C.g_converter_input_stream_get_converter((*C.GConverterInputStream)(_self_._value_))
	return
}

func ConverterOutputStreamNew(base_stream OutputStreamKind, converter *C.GConverter) (_go__return__ ConverterOutputStream) {
	_cgo_base_stream_ := (*C.GOutputStream)(base_stream.GetGObject())
	var _return_ *C.GOutputStream
	_return_ = C.g_converter_output_stream_new(_cgo_base_stream_, converter)
	_go__return__ = ToConverterOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *ConverterOutputStream) GetConverter() (_return_ *C.GConverter) {
	_return_ = C.g_converter_output_stream_get_converter((*C.GConverterOutputStream)(_self_._value_))
	return
}

func CredentialsNew() (_go__return__ Credentials) {
	var _return_ *C.GCredentials
	_return_ = C.g_credentials_new()
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func (_self_ *Credentials) GetNative(native_type C.GCredentialsType) (_return_ C.gpointer) {
	_return_ = C.g_credentials_get_native((*C.GCredentials)(_self_._value_), native_type)
	return
}

func (_self_ *Credentials) GetUnixUser() (_return_ C.uid_t, _error_ unsafe.Pointer) {
	_return_ = C._g_credentials_get_unix_user((*C.GCredentials)(_self_._value_), _error_)
	return
}

func (_self_ *Credentials) IsSameUser(other_credentials CredentialsKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_other_credentials_ := (*C.GCredentials)(other_credentials.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_credentials_is_same_user((*C.GCredentials)(_self_._value_), _cgo_other_credentials_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Credentials) SetNative(native_type C.GCredentialsType, native C.gpointer) () {
	C.g_credentials_set_native((*C.GCredentials)(_self_._value_), native_type, native)
	return
}

func (_self_ *Credentials) SetUnixUser(uid C.uid_t) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_credentials_set_unix_user((*C.GCredentials)(_self_._value_), uid, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Credentials) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_credentials_to_string((*C.GCredentials)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DBusActionGroupGet(connection DBusConnectionKind, bus_name string, object_path string) (_go__return__ DBusActionGroup) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ *C.GDBusActionGroup
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_action_group_get(_cgo_connection_, _cgo_bus_name_, _cgo_object_path_)
	_go__return__ = ToDBusActionGroup(unsafe.Pointer(_return_))
	return
}

func DBusAuthObserverNew() (_go__return__ DBusAuthObserver) {
	var _return_ *C.GDBusAuthObserver
	_return_ = C.g_dbus_auth_observer_new()
	_go__return__ = ToDBusAuthObserver(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusAuthObserver) AllowMechanism(mechanism string) (_go__return__ bool) {
	_cstring_mechanism_ := C.CString(mechanism)
	_cgo_mechanism_ := (*C.gchar)(unsafe.Pointer(_cstring_mechanism_))
	defer C.free(unsafe.Pointer(_cstring_mechanism_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_auth_observer_allow_mechanism((*C.GDBusAuthObserver)(_self_._value_), _cgo_mechanism_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusAuthObserver) AuthorizeAuthenticatedPeer(stream IOStreamKind, credentials CredentialsKind) (_go__return__ bool) {
	_cgo_stream_ := (*C.GIOStream)(stream.GetGObject())
	_cgo_credentials_ := (*C.GCredentials)(credentials.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_dbus_auth_observer_authorize_authenticated_peer((*C.GDBusAuthObserver)(_self_._value_), _cgo_stream_, _cgo_credentials_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DBusConnectionNewFinish(res *C.GAsyncResult) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusConnection
	_return_ = C._g_dbus_connection_new_finish(res, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func DBusConnectionNewForAddressFinish(res *C.GAsyncResult) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusConnection
	_return_ = C._g_dbus_connection_new_for_address_finish(res, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func DBusConnectionNewForAddressSync(address string, flags C.GDBusConnectionFlags, observer DBusAuthObserverKind, cancellable CancellableKind) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	_cgo_observer_ := (*C.GDBusAuthObserver)(observer.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusConnection
	_cstring_address_ := C.CString(address)
	_cgo_address_ := (*C.gchar)(unsafe.Pointer(_cstring_address_))
	defer C.free(unsafe.Pointer(_cstring_address_))
	_return_ = C._g_dbus_connection_new_for_address_sync(_cgo_address_, flags, _cgo_observer_, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func DBusConnectionNewSync(stream IOStreamKind, guid string, flags C.GDBusConnectionFlags, observer DBusAuthObserverKind, cancellable CancellableKind) (_go__return__ DBusConnection, _error_ unsafe.Pointer) {
	_cgo_stream_ := (*C.GIOStream)(stream.GetGObject())
	_cgo_observer_ := (*C.GDBusAuthObserver)(observer.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusConnection
	_cstring_guid_ := C.CString(guid)
	_cgo_guid_ := (*C.gchar)(unsafe.Pointer(_cstring_guid_))
	defer C.free(unsafe.Pointer(_cstring_guid_))
	_return_ = C._g_dbus_connection_new_sync(_cgo_stream_, _cgo_guid_, flags, _cgo_observer_, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func DBusConnectionNew(stream IOStreamKind, guid string, flags C.GDBusConnectionFlags, observer DBusAuthObserverKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_stream_ := (*C.GIOStream)(stream.GetGObject())
	_cgo_observer_ := (*C.GDBusAuthObserver)(observer.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_guid_ := C.CString(guid)
	_cgo_guid_ := (*C.gchar)(unsafe.Pointer(_cstring_guid_))
	defer C.free(unsafe.Pointer(_cstring_guid_))
	C._g_dbus_connection_new(_cgo_stream_, _cgo_guid_, flags, _cgo_observer_, _cgo_cancellable_, callback, user_data)
	return
}

func DBusConnectionNewForAddress(address string, flags C.GDBusConnectionFlags, observer DBusAuthObserverKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_observer_ := (*C.GDBusAuthObserver)(observer.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_address_ := C.CString(address)
	_cgo_address_ := (*C.gchar)(unsafe.Pointer(_cstring_address_))
	defer C.free(unsafe.Pointer(_cstring_address_))
	C._g_dbus_connection_new_for_address(_cgo_address_, flags, _cgo_observer_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) AddFilter(filter_function C.GDBusMessageFilterFunction, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_dbus_connection_add_filter((*C.GDBusConnection)(_self_._value_), filter_function, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) Call(bus_name string, object_path string, interface_name string, method_name string, parameters *C.GVariant, reply_type *C.GVariantType, flags C.GDBusCallFlags, timeout_msec int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	C._g_dbus_connection_call((*C.GDBusConnection)(_self_._value_), _cgo_bus_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_method_name_, parameters, reply_type, flags, _cgo_timeout_msec_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) CallFinish(res *C.GAsyncResult) (_return_ *C.GVariant, _error_ unsafe.Pointer) {
	_return_ = C._g_dbus_connection_call_finish((*C.GDBusConnection)(_self_._value_), res, _error_)
	return
}

func (_self_ *DBusConnection) CallSync(bus_name string, object_path string, interface_name string, method_name string, parameters *C.GVariant, reply_type *C.GVariantType, flags C.GDBusCallFlags, timeout_msec int, cancellable CancellableKind) (_return_ *C.GVariant, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	_return_ = C._g_dbus_connection_call_sync((*C.GDBusConnection)(_self_._value_), _cgo_bus_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_method_name_, parameters, reply_type, flags, _cgo_timeout_msec_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *DBusConnection) CallWithUnixFdList(bus_name string, object_path string, interface_name string, method_name string, parameters *C.GVariant, reply_type *C.GVariantType, flags C.GDBusCallFlags, timeout_msec int, fd_list UnixFDListKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	C._g_dbus_connection_call_with_unix_fd_list((*C.GDBusConnection)(_self_._value_), _cgo_bus_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_method_name_, parameters, reply_type, flags, _cgo_timeout_msec_, _cgo_fd_list_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) CallWithUnixFdListFinish(res *C.GAsyncResult) (_return_ *C.GVariant, out_fd_list *UnixFDList, _error_ unsafe.Pointer) {
	var _allocated_out_fd_list_ *C.GUnixFDList
	_return_ = C._g_dbus_connection_call_with_unix_fd_list_finish((*C.GDBusConnection)(_self_._value_), unsafe.Pointer(&_allocated_out_fd_list_), res, _error_)
	out_fd_list = (*UnixFDList)(unsafe.Pointer(_allocated_out_fd_list_))
	return
}

func (_self_ *DBusConnection) CallWithUnixFdListSync(bus_name string, object_path string, interface_name string, method_name string, parameters *C.GVariant, reply_type *C.GVariantType, flags C.GDBusCallFlags, timeout_msec int, fd_list UnixFDListKind, cancellable CancellableKind) (_return_ *C.GVariant, out_fd_list *UnixFDList, _error_ unsafe.Pointer) {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _allocated_out_fd_list_ *C.GUnixFDList
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	_return_ = C._g_dbus_connection_call_with_unix_fd_list_sync((*C.GDBusConnection)(_self_._value_), _cgo_bus_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_method_name_, parameters, reply_type, flags, _cgo_timeout_msec_, _cgo_fd_list_, unsafe.Pointer(&_allocated_out_fd_list_), _cgo_cancellable_, _error_)
	out_fd_list = (*UnixFDList)(unsafe.Pointer(_allocated_out_fd_list_))
	return
}

func (_self_ *DBusConnection) Close(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_dbus_connection_close((*C.GDBusConnection)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) CloseFinish(res *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_close_finish((*C.GDBusConnection)(_self_._value_), res, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) CloseSync(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_close_sync((*C.GDBusConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) EmitSignal(destination_bus_name string, object_path string, interface_name string, signal_name string, parameters *C.GVariant) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_destination_bus_name_ := C.CString(destination_bus_name)
	_cgo_destination_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_destination_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_destination_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_signal_name_ := C.CString(signal_name)
	_cgo_signal_name_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_name_))
	defer C.free(unsafe.Pointer(_cstring_signal_name_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_emit_signal((*C.GDBusConnection)(_self_._value_), _cgo_destination_bus_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_signal_name_, parameters, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) ExportActionGroup(object_path string, action_group *C.GActionGroup) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_connection_export_action_group((*C.GDBusConnection)(_self_._value_), _cgo_object_path_, action_group, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) ExportMenuModel(object_path string, menu MenuModelKind) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_menu_ := (*C.GMenuModel)(menu.GetGObject())
	var _return_ C.guint
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_connection_export_menu_model((*C.GDBusConnection)(_self_._value_), _cgo_object_path_, _cgo_menu_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) Flush(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_dbus_connection_flush((*C.GDBusConnection)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) FlushFinish(res *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_flush_finish((*C.GDBusConnection)(_self_._value_), res, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) FlushSync(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_flush_sync((*C.GDBusConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) GetCapabilities() (_return_ C.GDBusCapabilityFlags) {
	_return_ = C.g_dbus_connection_get_capabilities((*C.GDBusConnection)(_self_._value_))
	return
}

func (_self_ *DBusConnection) GetExitOnClose() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_dbus_connection_get_exit_on_close((*C.GDBusConnection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) GetGuid() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_connection_get_guid((*C.GDBusConnection)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusConnection) GetLastSerial() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_dbus_connection_get_last_serial((*C.GDBusConnection)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *DBusConnection) GetPeerCredentials() (_go__return__ Credentials) {
	var _return_ *C.GCredentials
	_return_ = C.g_dbus_connection_get_peer_credentials((*C.GDBusConnection)(_self_._value_))
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusConnection) GetStream() (_go__return__ IOStream) {
	var _return_ *C.GIOStream
	_return_ = C.g_dbus_connection_get_stream((*C.GDBusConnection)(_self_._value_))
	_go__return__ = ToIOStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusConnection) GetUniqueName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_connection_get_unique_name((*C.GDBusConnection)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusConnection) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_dbus_connection_is_closed((*C.GDBusConnection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) RegisterObject(object_path string, interface_info *DBusInterfaceInfo, vtable *DBusInterfaceVTable, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_interface_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(interface_info))
	_cgo_vtable_ := (*C.GDBusInterfaceVTable)(unsafe.Pointer(vtable))
	var _return_ C.guint
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_connection_register_object((*C.GDBusConnection)(_self_._value_), _cgo_object_path_, _cgo_interface_info_, _cgo_vtable_, user_data, user_data_free_func, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) RegisterSubtree(object_path string, vtable *DBusSubtreeVTable, flags C.GDBusSubtreeFlags, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_vtable_ := (*C.GDBusSubtreeVTable)(unsafe.Pointer(vtable))
	var _return_ C.guint
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_connection_register_subtree((*C.GDBusConnection)(_self_._value_), _cgo_object_path_, _cgo_vtable_, flags, user_data, user_data_free_func, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) RemoveFilter(filter_id uint) () {
	_cgo_filter_id_ := (C.guint)(filter_id)
	C.g_dbus_connection_remove_filter((*C.GDBusConnection)(_self_._value_), _cgo_filter_id_)
	return
}

func (_self_ *DBusConnection) SendMessage(message DBusMessageKind, flags C.GDBusSendMessageFlags) (_go__return__ bool, out_serial C. guint32, _error_ unsafe.Pointer) {
	_cgo_message_ := (*C.GDBusMessage)(message.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_dbus_connection_send_message((*C.GDBusConnection)(_self_._value_), _cgo_message_, flags, &out_serial, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) SendMessageWithReply(message DBusMessageKind, flags C.GDBusSendMessageFlags, timeout_msec int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) (out_serial C. guint32) {
	_cgo_message_ := (*C.GDBusMessage)(message.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	C.g_dbus_connection_send_message_with_reply((*C.GDBusConnection)(_self_._value_), _cgo_message_, flags, _cgo_timeout_msec_, &out_serial, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusConnection) SendMessageWithReplyFinish(res *C.GAsyncResult) (_go__return__ DBusMessage, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusMessage
	_return_ = C._g_dbus_connection_send_message_with_reply_finish((*C.GDBusConnection)(_self_._value_), res, _error_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusConnection) SendMessageWithReplySync(message DBusMessageKind, flags C.GDBusSendMessageFlags, timeout_msec int, cancellable CancellableKind) (_go__return__ DBusMessage, out_serial C. guint32, _error_ unsafe.Pointer) {
	_cgo_message_ := (*C.GDBusMessage)(message.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusMessage
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_return_ = C._g_dbus_connection_send_message_with_reply_sync((*C.GDBusConnection)(_self_._value_), _cgo_message_, flags, _cgo_timeout_msec_, &out_serial, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusConnection) SetExitOnClose(exit_on_close bool) () {
	_cgo_exit_on_close_ := (C.gboolean)(C.FALSE)
	if exit_on_close { _cgo_exit_on_close_ = (C.gboolean)(C.TRUE) }
	C.g_dbus_connection_set_exit_on_close((*C.GDBusConnection)(_self_._value_), _cgo_exit_on_close_)
	return
}

func (_self_ *DBusConnection) SignalSubscribe(sender string, interface_name string, member string, object_path string, arg0 string, flags C.GDBusSignalFlags, callback C.GDBusSignalCallback, user_data C.gpointer, user_data_free_func C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_sender_ := C.CString(sender)
	_cgo_sender_ := (*C.gchar)(unsafe.Pointer(_cstring_sender_))
	defer C.free(unsafe.Pointer(_cstring_sender_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_cstring_member_ := C.CString(member)
	_cgo_member_ := (*C.gchar)(unsafe.Pointer(_cstring_member_))
	defer C.free(unsafe.Pointer(_cstring_member_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_arg0_ := C.CString(arg0)
	_cgo_arg0_ := (*C.gchar)(unsafe.Pointer(_cstring_arg0_))
	defer C.free(unsafe.Pointer(_cstring_arg0_))
	_return_ = C._g_dbus_connection_signal_subscribe((*C.GDBusConnection)(_self_._value_), _cgo_sender_, _cgo_interface_name_, _cgo_member_, _cgo_object_path_, _cgo_arg0_, flags, callback, user_data, user_data_free_func)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *DBusConnection) SignalUnsubscribe(subscription_id uint) () {
	_cgo_subscription_id_ := (C.guint)(subscription_id)
	C.g_dbus_connection_signal_unsubscribe((*C.GDBusConnection)(_self_._value_), _cgo_subscription_id_)
	return
}

func (_self_ *DBusConnection) StartMessageProcessing() () {
	C.g_dbus_connection_start_message_processing((*C.GDBusConnection)(_self_._value_))
	return
}

func (_self_ *DBusConnection) UnexportActionGroup(export_id uint) () {
	_cgo_export_id_ := (C.guint)(export_id)
	C.g_dbus_connection_unexport_action_group((*C.GDBusConnection)(_self_._value_), _cgo_export_id_)
	return
}

func (_self_ *DBusConnection) UnexportMenuModel(export_id uint) () {
	_cgo_export_id_ := (C.guint)(export_id)
	C.g_dbus_connection_unexport_menu_model((*C.GDBusConnection)(_self_._value_), _cgo_export_id_)
	return
}

func (_self_ *DBusConnection) UnregisterObject(registration_id uint) (_go__return__ bool) {
	_cgo_registration_id_ := (C.guint)(registration_id)
	var _return_ C.gboolean
	_return_ = C.g_dbus_connection_unregister_object((*C.GDBusConnection)(_self_._value_), _cgo_registration_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusConnection) UnregisterSubtree(registration_id uint) (_go__return__ bool) {
	_cgo_registration_id_ := (C.guint)(registration_id)
	var _return_ C.gboolean
	_return_ = C.g_dbus_connection_unregister_subtree((*C.GDBusConnection)(_self_._value_), _cgo_registration_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusInterfaceSkeleton) Export(connection DBusConnectionKind, object_path string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_interface_skeleton_export((*C.GDBusInterfaceSkeleton)(_self_._value_), _cgo_connection_, _cgo_object_path_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusInterfaceSkeleton) Flush() () {
	C.g_dbus_interface_skeleton_flush((*C.GDBusInterfaceSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_interface_skeleton_get_connection((*C.GDBusInterfaceSkeleton)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetConnections() (_return_ *C.GList) {
	_return_ = C.g_dbus_interface_skeleton_get_connections((*C.GDBusInterfaceSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetFlags() (_return_ C.GDBusInterfaceSkeletonFlags) {
	_return_ = C.g_dbus_interface_skeleton_get_flags((*C.GDBusInterfaceSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetInfo() (_go__return__ *DBusInterfaceInfo) {
	var _return_ *C.GDBusInterfaceInfo
	_return_ = C.g_dbus_interface_skeleton_get_info((*C.GDBusInterfaceSkeleton)(_self_._value_))
	_go__return__ = (*DBusInterfaceInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetObjectPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_interface_skeleton_get_object_path((*C.GDBusInterfaceSkeleton)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetProperties() (_return_ *C.GVariant) {
	_return_ = C.g_dbus_interface_skeleton_get_properties((*C.GDBusInterfaceSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusInterfaceSkeleton) GetVtable() (_go__return__ *DBusInterfaceVTable) {
	var _return_ *C.GDBusInterfaceVTable
	_return_ = C.g_dbus_interface_skeleton_get_vtable((*C.GDBusInterfaceSkeleton)(_self_._value_))
	_go__return__ = (*DBusInterfaceVTable)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceSkeleton) HasConnection(connection DBusConnectionKind) (_go__return__ bool) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_dbus_interface_skeleton_has_connection((*C.GDBusInterfaceSkeleton)(_self_._value_), _cgo_connection_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusInterfaceSkeleton) SetFlags(flags C.GDBusInterfaceSkeletonFlags) () {
	C.g_dbus_interface_skeleton_set_flags((*C.GDBusInterfaceSkeleton)(_self_._value_), flags)
	return
}

func (_self_ *DBusInterfaceSkeleton) Unexport() () {
	C.g_dbus_interface_skeleton_unexport((*C.GDBusInterfaceSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusInterfaceSkeleton) UnexportFromConnection(connection DBusConnectionKind) () {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	C.g_dbus_interface_skeleton_unexport_from_connection((*C.GDBusInterfaceSkeleton)(_self_._value_), _cgo_connection_)
	return
}

func DBusMenuModelGet(connection DBusConnectionKind, bus_name string, object_path string) (_go__return__ DBusMenuModel) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ *C.GDBusMenuModel
	_cstring_bus_name_ := C.CString(bus_name)
	_cgo_bus_name_ := (*C.gchar)(unsafe.Pointer(_cstring_bus_name_))
	defer C.free(unsafe.Pointer(_cstring_bus_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_menu_model_get(_cgo_connection_, _cgo_bus_name_, _cgo_object_path_)
	_go__return__ = ToDBusMenuModel(unsafe.Pointer(_return_))
	return
}

func DBusMessageNew() (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_return_ = C.g_dbus_message_new()
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func DBusMessageNewMethodCall(name string, path string, interface_ string, method string) (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_cstring_interface__ := C.CString(interface_)
	_cgo_interface__ := (*C.gchar)(unsafe.Pointer(_cstring_interface__))
	defer C.free(unsafe.Pointer(_cstring_interface__))
	_cstring_method_ := C.CString(method)
	_cgo_method_ := (*C.gchar)(unsafe.Pointer(_cstring_method_))
	defer C.free(unsafe.Pointer(_cstring_method_))
	_return_ = C._g_dbus_message_new_method_call(_cgo_name_, _cgo_path_, _cgo_interface__, _cgo_method_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func DBusMessageNewSignal(path string, interface_ string, signal string) (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_cstring_interface__ := C.CString(interface_)
	_cgo_interface__ := (*C.gchar)(unsafe.Pointer(_cstring_interface__))
	defer C.free(unsafe.Pointer(_cstring_interface__))
	_cstring_signal_ := C.CString(signal)
	_cgo_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_))
	defer C.free(unsafe.Pointer(_cstring_signal_))
	_return_ = C._g_dbus_message_new_signal(_cgo_path_, _cgo_interface__, _cgo_signal_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMessage) Copy() (_go__return__ DBusMessage, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusMessage
	_return_ = C._g_dbus_message_copy((*C.GDBusMessage)(_self_._value_), _error_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMessage) GetArg0() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_arg0((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetBody() (_return_ *C.GVariant) {
	_return_ = C.g_dbus_message_get_body((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) GetByteOrder() (_return_ C.GDBusMessageByteOrder) {
	_return_ = C.g_dbus_message_get_byte_order((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) GetDestination() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_destination((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetErrorName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_error_name((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetFlags() (_return_ C.GDBusMessageFlags) {
	_return_ = C.g_dbus_message_get_flags((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) GetHeader(header_field C.GDBusMessageHeaderField) (_return_ *C.GVariant) {
	_return_ = C.g_dbus_message_get_header((*C.GDBusMessage)(_self_._value_), header_field)
	return
}

func (_self_ *DBusMessage) GetHeaderFields() (_return_ *C.guchar) {
	_return_ = C.g_dbus_message_get_header_fields((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) GetInterface() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_interface((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetLocked() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_dbus_message_get_locked((*C.GDBusMessage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusMessage) GetMember() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_member((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetMessageType() (_return_ C.GDBusMessageType) {
	_return_ = C.g_dbus_message_get_message_type((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) GetNumUnixFds() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_dbus_message_get_num_unix_fds((*C.GDBusMessage)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *DBusMessage) GetPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_path((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetReplySerial() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_dbus_message_get_reply_serial((*C.GDBusMessage)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *DBusMessage) GetSender() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_sender((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetSerial() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_dbus_message_get_serial((*C.GDBusMessage)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *DBusMessage) GetSignature() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_message_get_signature((*C.GDBusMessage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) GetUnixFdList() (_go__return__ UnixFDList) {
	var _return_ *C.GUnixFDList
	_return_ = C.g_dbus_message_get_unix_fd_list((*C.GDBusMessage)(_self_._value_))
	_go__return__ = ToUnixFDList(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMessage) Lock() () {
	C.g_dbus_message_lock((*C.GDBusMessage)(_self_._value_))
	return
}

func (_self_ *DBusMessage) NewMethodErrorLiteral(error_name string, error_message string) (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_cstring_error_name_ := C.CString(error_name)
	_cgo_error_name_ := (*C.gchar)(unsafe.Pointer(_cstring_error_name_))
	defer C.free(unsafe.Pointer(_cstring_error_name_))
	_cstring_error_message_ := C.CString(error_message)
	_cgo_error_message_ := (*C.gchar)(unsafe.Pointer(_cstring_error_message_))
	defer C.free(unsafe.Pointer(_cstring_error_message_))
	_return_ = C._g_dbus_message_new_method_error_literal((*C.GDBusMessage)(_self_._value_), _cgo_error_name_, _cgo_error_message_)
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMessage) NewMethodReply() (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_return_ = C.g_dbus_message_new_method_reply((*C.GDBusMessage)(_self_._value_))
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMessage) Print(indent uint) (_go__return__ string) {
	_cgo_indent_ := (C.guint)(indent)
	var _return_ *C.gchar
	_return_ = C.g_dbus_message_print((*C.GDBusMessage)(_self_._value_), _cgo_indent_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMessage) SetBody(body *C.GVariant) () {
	C.g_dbus_message_set_body((*C.GDBusMessage)(_self_._value_), body)
	return
}

func (_self_ *DBusMessage) SetByteOrder(byte_order C.GDBusMessageByteOrder) () {
	C.g_dbus_message_set_byte_order((*C.GDBusMessage)(_self_._value_), byte_order)
	return
}

func (_self_ *DBusMessage) SetDestination(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_destination((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetErrorName(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_error_name((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetFlags(flags C.GDBusMessageFlags) () {
	C.g_dbus_message_set_flags((*C.GDBusMessage)(_self_._value_), flags)
	return
}

func (_self_ *DBusMessage) SetHeader(header_field C.GDBusMessageHeaderField, value *C.GVariant) () {
	C.g_dbus_message_set_header((*C.GDBusMessage)(_self_._value_), header_field, value)
	return
}

func (_self_ *DBusMessage) SetInterface(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_interface((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetMember(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_member((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetMessageType(type_ C.GDBusMessageType) () {
	C.g_dbus_message_set_message_type((*C.GDBusMessage)(_self_._value_), type_)
	return
}

func (_self_ *DBusMessage) SetNumUnixFds(value uint32) () {
	_cgo_value_ := (C.guint32)(value)
	C.g_dbus_message_set_num_unix_fds((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetPath(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_path((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetReplySerial(value uint32) () {
	_cgo_value_ := (C.guint32)(value)
	C.g_dbus_message_set_reply_serial((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetSender(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_sender((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetSerial(serial uint32) () {
	_cgo_serial_ := (C.guint32)(serial)
	C.g_dbus_message_set_serial((*C.GDBusMessage)(_self_._value_), _cgo_serial_)
	return
}

func (_self_ *DBusMessage) SetSignature(value string) () {
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	C._g_dbus_message_set_signature((*C.GDBusMessage)(_self_._value_), _cgo_value_)
	return
}

func (_self_ *DBusMessage) SetUnixFdList(fd_list UnixFDListKind) () {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	C.g_dbus_message_set_unix_fd_list((*C.GDBusMessage)(_self_._value_), _cgo_fd_list_)
	return
}

func (_self_ *DBusMessage) ToBlob(capabilities C.GDBusCapabilityFlags) (_return_ *C.guchar, _go_out_size_ uint64, _error_ unsafe.Pointer) {
	var out_size C.gsize
	_return_ = C._g_dbus_message_to_blob((*C.GDBusMessage)(_self_._value_), &out_size, capabilities, _error_)
	_go_out_size_ = (uint64)(out_size)
	return
}

func (_self_ *DBusMessage) ToGerror() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_dbus_message_to_gerror((*C.GDBusMessage)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusMethodInvocation) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_method_invocation_get_connection((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMethodInvocation) GetInterfaceName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_method_invocation_get_interface_name((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMethodInvocation) GetMessage() (_go__return__ DBusMessage) {
	var _return_ *C.GDBusMessage
	_return_ = C.g_dbus_method_invocation_get_message((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = ToDBusMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMethodInvocation) GetMethodInfo() (_go__return__ *DBusMethodInfo) {
	var _return_ *C.GDBusMethodInfo
	_return_ = C._g_dbus_method_invocation_get_method_info((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = (*DBusMethodInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMethodInvocation) GetMethodName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_method_invocation_get_method_name((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMethodInvocation) GetObjectPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_method_invocation_get_object_path((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMethodInvocation) GetParameters() (_return_ *C.GVariant) {
	_return_ = C.g_dbus_method_invocation_get_parameters((*C.GDBusMethodInvocation)(_self_._value_))
	return
}

func (_self_ *DBusMethodInvocation) GetSender() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_method_invocation_get_sender((*C.GDBusMethodInvocation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusMethodInvocation) GetUserData() (_return_ C.gpointer) {
	_return_ = C.g_dbus_method_invocation_get_user_data((*C.GDBusMethodInvocation)(_self_._value_))
	return
}

func (_self_ *DBusMethodInvocation) ReturnDbusError(error_name string, error_message string) () {
	_cstring_error_name_ := C.CString(error_name)
	_cgo_error_name_ := (*C.gchar)(unsafe.Pointer(_cstring_error_name_))
	defer C.free(unsafe.Pointer(_cstring_error_name_))
	_cstring_error_message_ := C.CString(error_message)
	_cgo_error_message_ := (*C.gchar)(unsafe.Pointer(_cstring_error_message_))
	defer C.free(unsafe.Pointer(_cstring_error_message_))
	C._g_dbus_method_invocation_return_dbus_error((*C.GDBusMethodInvocation)(_self_._value_), _cgo_error_name_, _cgo_error_message_)
	return
}

func (_self_ *DBusMethodInvocation) ReturnErrorLiteral(domain C.GQuark, code int, message string) () {
	_cgo_code_ := (C.gint)(code)
	_cstring_message_ := C.CString(message)
	_cgo_message_ := (*C.gchar)(unsafe.Pointer(_cstring_message_))
	defer C.free(unsafe.Pointer(_cstring_message_))
	C._g_dbus_method_invocation_return_error_literal((*C.GDBusMethodInvocation)(_self_._value_), domain, _cgo_code_, _cgo_message_)
	return
}

func (_self_ *DBusMethodInvocation) ReturnGerror(error_ *C.GError) () {
	C._g_dbus_method_invocation_return_gerror((*C.GDBusMethodInvocation)(_self_._value_), error_)
	return
}

func (_self_ *DBusMethodInvocation) ReturnValue(parameters *C.GVariant) () {
	C.g_dbus_method_invocation_return_value((*C.GDBusMethodInvocation)(_self_._value_), parameters)
	return
}

func (_self_ *DBusMethodInvocation) ReturnValueWithUnixFdList(parameters *C.GVariant, fd_list UnixFDListKind) () {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	C.g_dbus_method_invocation_return_value_with_unix_fd_list((*C.GDBusMethodInvocation)(_self_._value_), parameters, _cgo_fd_list_)
	return
}

func (_self_ *DBusMethodInvocation) TakeError(error_ *C.GError) () {
	C.g_dbus_method_invocation_take_error((*C.GDBusMethodInvocation)(_self_._value_), error_)
	return
}

func DBusObjectManagerClientNewFinish(res *C.GAsyncResult) (_go__return__ DBusObjectManagerClient, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusObjectManager
	_return_ = C._g_dbus_object_manager_client_new_finish(res, _error_)
	_go__return__ = ToDBusObjectManagerClient(unsafe.Pointer(_return_))
	return
}

func DBusObjectManagerClientNewForBusFinish(res *C.GAsyncResult) (_go__return__ DBusObjectManagerClient, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusObjectManager
	_return_ = C._g_dbus_object_manager_client_new_for_bus_finish(res, _error_)
	_go__return__ = ToDBusObjectManagerClient(unsafe.Pointer(_return_))
	return
}

func DBusObjectManagerClientNewForBusSync(bus_type C.GBusType, flags C.GDBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func C.GDBusProxyTypeFunc, get_proxy_type_user_data C.gpointer, get_proxy_type_destroy_notify C.GDestroyNotify, cancellable CancellableKind) (_go__return__ DBusObjectManagerClient, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusObjectManager
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_object_manager_client_new_for_bus_sync(bus_type, flags, _cgo_name_, _cgo_object_path_, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusObjectManagerClient(unsafe.Pointer(_return_))
	return
}

func DBusObjectManagerClientNewSync(connection DBusConnectionKind, flags C.GDBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func C.GDBusProxyTypeFunc, get_proxy_type_user_data C.gpointer, get_proxy_type_destroy_notify C.GDestroyNotify, cancellable CancellableKind) (_go__return__ DBusObjectManagerClient, _error_ unsafe.Pointer) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusObjectManager
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_object_manager_client_new_sync(_cgo_connection_, flags, _cgo_name_, _cgo_object_path_, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusObjectManagerClient(unsafe.Pointer(_return_))
	return
}

func DBusObjectManagerClientNew(connection DBusConnectionKind, flags C.GDBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func C.GDBusProxyTypeFunc, get_proxy_type_user_data C.gpointer, get_proxy_type_destroy_notify C.GDestroyNotify, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	C._g_dbus_object_manager_client_new(_cgo_connection_, flags, _cgo_name_, _cgo_object_path_, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, _cgo_cancellable_, callback, user_data)
	return
}

func DBusObjectManagerClientNewForBus(bus_type C.GBusType, flags C.GDBusObjectManagerClientFlags, name string, object_path string, get_proxy_type_func C.GDBusProxyTypeFunc, get_proxy_type_user_data C.gpointer, get_proxy_type_destroy_notify C.GDestroyNotify, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	C._g_dbus_object_manager_client_new_for_bus(bus_type, flags, _cgo_name_, _cgo_object_path_, get_proxy_type_func, get_proxy_type_user_data, get_proxy_type_destroy_notify, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusObjectManagerClient) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_object_manager_client_get_connection((*C.GDBusObjectManagerClient)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusObjectManagerClient) GetFlags() (_return_ C.GDBusObjectManagerClientFlags) {
	_return_ = C.g_dbus_object_manager_client_get_flags((*C.GDBusObjectManagerClient)(_self_._value_))
	return
}

func (_self_ *DBusObjectManagerClient) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_object_manager_client_get_name((*C.GDBusObjectManagerClient)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusObjectManagerClient) GetNameOwner() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_dbus_object_manager_client_get_name_owner((*C.GDBusObjectManagerClient)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func DBusObjectManagerServerNew(object_path string) (_go__return__ DBusObjectManagerServer) {
	var _return_ *C.GDBusObjectManagerServer
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_object_manager_server_new(_cgo_object_path_)
	_go__return__ = ToDBusObjectManagerServer(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusObjectManagerServer) Export(object DBusObjectSkeletonKind) () {
	_cgo_object_ := (*C.GDBusObjectSkeleton)(object.GetGObject())
	C.g_dbus_object_manager_server_export((*C.GDBusObjectManagerServer)(_self_._value_), _cgo_object_)
	return
}

func (_self_ *DBusObjectManagerServer) ExportUniquely(object DBusObjectSkeletonKind) () {
	_cgo_object_ := (*C.GDBusObjectSkeleton)(object.GetGObject())
	C.g_dbus_object_manager_server_export_uniquely((*C.GDBusObjectManagerServer)(_self_._value_), _cgo_object_)
	return
}

func (_self_ *DBusObjectManagerServer) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_object_manager_server_get_connection((*C.GDBusObjectManagerServer)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusObjectManagerServer) IsExported(object DBusObjectSkeletonKind) (_go__return__ bool) {
	_cgo_object_ := (*C.GDBusObjectSkeleton)(object.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_dbus_object_manager_server_is_exported((*C.GDBusObjectManagerServer)(_self_._value_), _cgo_object_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusObjectManagerServer) SetConnection(connection DBusConnectionKind) () {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	C.g_dbus_object_manager_server_set_connection((*C.GDBusObjectManagerServer)(_self_._value_), _cgo_connection_)
	return
}

func (_self_ *DBusObjectManagerServer) Unexport(object_path string) (_go__return__ bool) {
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	var _return_ C.gboolean
	_return_ = C._g_dbus_object_manager_server_unexport((*C.GDBusObjectManagerServer)(_self_._value_), _cgo_object_path_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func DBusObjectProxyNew(connection DBusConnectionKind, object_path string) (_go__return__ DBusObjectProxy) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	var _return_ *C.GDBusObjectProxy
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_object_proxy_new(_cgo_connection_, _cgo_object_path_)
	_go__return__ = ToDBusObjectProxy(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusObjectProxy) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_object_proxy_get_connection((*C.GDBusObjectProxy)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func DBusObjectSkeletonNew(object_path string) (_go__return__ DBusObjectSkeleton) {
	var _return_ *C.GDBusObjectSkeleton
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_return_ = C._g_dbus_object_skeleton_new(_cgo_object_path_)
	_go__return__ = ToDBusObjectSkeleton(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusObjectSkeleton) AddInterface(interface_ DBusInterfaceSkeletonKind) () {
	_cgo_interface__ := (*C.GDBusInterfaceSkeleton)(interface_.GetGObject())
	C.g_dbus_object_skeleton_add_interface((*C.GDBusObjectSkeleton)(_self_._value_), _cgo_interface__)
	return
}

func (_self_ *DBusObjectSkeleton) Flush() () {
	C.g_dbus_object_skeleton_flush((*C.GDBusObjectSkeleton)(_self_._value_))
	return
}

func (_self_ *DBusObjectSkeleton) RemoveInterface(interface_ DBusInterfaceSkeletonKind) () {
	_cgo_interface__ := (*C.GDBusInterfaceSkeleton)(interface_.GetGObject())
	C.g_dbus_object_skeleton_remove_interface((*C.GDBusObjectSkeleton)(_self_._value_), _cgo_interface__)
	return
}

func (_self_ *DBusObjectSkeleton) RemoveInterfaceByName(interface_name string) () {
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	C._g_dbus_object_skeleton_remove_interface_by_name((*C.GDBusObjectSkeleton)(_self_._value_), _cgo_interface_name_)
	return
}

func (_self_ *DBusObjectSkeleton) SetObjectPath(object_path string) () {
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	C._g_dbus_object_skeleton_set_object_path((*C.GDBusObjectSkeleton)(_self_._value_), _cgo_object_path_)
	return
}

func DBusProxyNewFinish(res *C.GAsyncResult) (_go__return__ DBusProxy, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusProxy
	_return_ = C._g_dbus_proxy_new_finish(res, _error_)
	_go__return__ = ToDBusProxy(unsafe.Pointer(_return_))
	return
}

func DBusProxyNewForBusFinish(res *C.GAsyncResult) (_go__return__ DBusProxy, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusProxy
	_return_ = C._g_dbus_proxy_new_for_bus_finish(res, _error_)
	_go__return__ = ToDBusProxy(unsafe.Pointer(_return_))
	return
}

func DBusProxyNewForBusSync(bus_type C.GBusType, flags C.GDBusProxyFlags, info *DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable CancellableKind) (_go__return__ DBusProxy, _error_ unsafe.Pointer) {
	_cgo_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(info))
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusProxy
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_return_ = C._g_dbus_proxy_new_for_bus_sync(bus_type, flags, _cgo_info_, _cgo_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusProxy(unsafe.Pointer(_return_))
	return
}

func DBusProxyNewSync(connection DBusConnectionKind, flags C.GDBusProxyFlags, info *DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable CancellableKind) (_go__return__ DBusProxy, _error_ unsafe.Pointer) {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	_cgo_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(info))
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusProxy
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	_return_ = C._g_dbus_proxy_new_sync(_cgo_connection_, flags, _cgo_info_, _cgo_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusProxy(unsafe.Pointer(_return_))
	return
}

func DBusProxyNew(connection DBusConnectionKind, flags C.GDBusProxyFlags, info *DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_connection_ := (*C.GDBusConnection)(connection.GetGObject())
	_cgo_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(info))
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	C._g_dbus_proxy_new(_cgo_connection_, flags, _cgo_info_, _cgo_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_cancellable_, callback, user_data)
	return
}

func DBusProxyNewForBus(bus_type C.GBusType, flags C.GDBusProxyFlags, info *DBusInterfaceInfo, name string, object_path string, interface_name string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(info))
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_object_path_ := C.CString(object_path)
	_cgo_object_path_ := (*C.gchar)(unsafe.Pointer(_cstring_object_path_))
	defer C.free(unsafe.Pointer(_cstring_object_path_))
	_cstring_interface_name_ := C.CString(interface_name)
	_cgo_interface_name_ := (*C.gchar)(unsafe.Pointer(_cstring_interface_name_))
	defer C.free(unsafe.Pointer(_cstring_interface_name_))
	C._g_dbus_proxy_new_for_bus(bus_type, flags, _cgo_info_, _cgo_name_, _cgo_object_path_, _cgo_interface_name_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusProxy) Call(method_name string, parameters *C.GVariant, flags C.GDBusCallFlags, timeout_msec int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	C._g_dbus_proxy_call((*C.GDBusProxy)(_self_._value_), _cgo_method_name_, parameters, flags, _cgo_timeout_msec_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusProxy) CallFinish(res *C.GAsyncResult) (_return_ *C.GVariant, _error_ unsafe.Pointer) {
	_return_ = C._g_dbus_proxy_call_finish((*C.GDBusProxy)(_self_._value_), res, _error_)
	return
}

func (_self_ *DBusProxy) CallSync(method_name string, parameters *C.GVariant, flags C.GDBusCallFlags, timeout_msec int, cancellable CancellableKind) (_return_ *C.GVariant, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	_return_ = C._g_dbus_proxy_call_sync((*C.GDBusProxy)(_self_._value_), _cgo_method_name_, parameters, flags, _cgo_timeout_msec_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *DBusProxy) CallWithUnixFdList(method_name string, parameters *C.GVariant, flags C.GDBusCallFlags, timeout_msec int, fd_list UnixFDListKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	C._g_dbus_proxy_call_with_unix_fd_list((*C.GDBusProxy)(_self_._value_), _cgo_method_name_, parameters, flags, _cgo_timeout_msec_, _cgo_fd_list_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DBusProxy) CallWithUnixFdListFinish(res *C.GAsyncResult) (_return_ *C.GVariant, out_fd_list *UnixFDList, _error_ unsafe.Pointer) {
	var _allocated_out_fd_list_ *C.GUnixFDList
	_return_ = C._g_dbus_proxy_call_with_unix_fd_list_finish((*C.GDBusProxy)(_self_._value_), unsafe.Pointer(&_allocated_out_fd_list_), res, _error_)
	out_fd_list = (*UnixFDList)(unsafe.Pointer(_allocated_out_fd_list_))
	return
}

func (_self_ *DBusProxy) CallWithUnixFdListSync(method_name string, parameters *C.GVariant, flags C.GDBusCallFlags, timeout_msec int, fd_list UnixFDListKind, cancellable CancellableKind) (_return_ *C.GVariant, out_fd_list *UnixFDList, _error_ unsafe.Pointer) {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _allocated_out_fd_list_ *C.GUnixFDList
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	_cstring_method_name_ := C.CString(method_name)
	_cgo_method_name_ := (*C.gchar)(unsafe.Pointer(_cstring_method_name_))
	defer C.free(unsafe.Pointer(_cstring_method_name_))
	_return_ = C._g_dbus_proxy_call_with_unix_fd_list_sync((*C.GDBusProxy)(_self_._value_), _cgo_method_name_, parameters, flags, _cgo_timeout_msec_, _cgo_fd_list_, unsafe.Pointer(&_allocated_out_fd_list_), _cgo_cancellable_, _error_)
	out_fd_list = (*UnixFDList)(unsafe.Pointer(_allocated_out_fd_list_))
	return
}

func (_self_ *DBusProxy) GetCachedProperty(property_name string) (_return_ *C.GVariant) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._g_dbus_proxy_get_cached_property((*C.GDBusProxy)(_self_._value_), _cgo_property_name_)
	return
}

func (_self_ *DBusProxy) GetCachedPropertyNames() (_return_ unsafe.Pointer) {
	_return_ = C._g_dbus_proxy_get_cached_property_names((*C.GDBusProxy)(_self_._value_))
	return
}

func (_self_ *DBusProxy) GetConnection() (_go__return__ DBusConnection) {
	var _return_ *C.GDBusConnection
	_return_ = C.g_dbus_proxy_get_connection((*C.GDBusProxy)(_self_._value_))
	_go__return__ = ToDBusConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusProxy) GetDefaultTimeout() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_dbus_proxy_get_default_timeout((*C.GDBusProxy)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *DBusProxy) GetFlags() (_return_ C.GDBusProxyFlags) {
	_return_ = C.g_dbus_proxy_get_flags((*C.GDBusProxy)(_self_._value_))
	return
}

func (_self_ *DBusProxy) GetInterfaceInfo() (_go__return__ *DBusInterfaceInfo) {
	var _return_ *C.GDBusInterfaceInfo
	_return_ = C.g_dbus_proxy_get_interface_info((*C.GDBusProxy)(_self_._value_))
	_go__return__ = (*DBusInterfaceInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusProxy) GetInterfaceName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_proxy_get_interface_name((*C.GDBusProxy)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusProxy) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_proxy_get_name((*C.GDBusProxy)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusProxy) GetNameOwner() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_dbus_proxy_get_name_owner((*C.GDBusProxy)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusProxy) GetObjectPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_proxy_get_object_path((*C.GDBusProxy)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusProxy) SetCachedProperty(property_name string, value *C.GVariant) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._g_dbus_proxy_set_cached_property((*C.GDBusProxy)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *DBusProxy) SetDefaultTimeout(timeout_msec int) () {
	_cgo_timeout_msec_ := (C.gint)(timeout_msec)
	C.g_dbus_proxy_set_default_timeout((*C.GDBusProxy)(_self_._value_), _cgo_timeout_msec_)
	return
}

func (_self_ *DBusProxy) SetInterfaceInfo(info *DBusInterfaceInfo) () {
	_cgo_info_ := (*C.GDBusInterfaceInfo)(unsafe.Pointer(info))
	C.g_dbus_proxy_set_interface_info((*C.GDBusProxy)(_self_._value_), _cgo_info_)
	return
}

func DBusServerNewSync(address string, flags C.GDBusServerFlags, guid string, observer DBusAuthObserverKind, cancellable CancellableKind) (_go__return__ DBusServer, _error_ unsafe.Pointer) {
	_cgo_observer_ := (*C.GDBusAuthObserver)(observer.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GDBusServer
	_cstring_address_ := C.CString(address)
	_cgo_address_ := (*C.gchar)(unsafe.Pointer(_cstring_address_))
	defer C.free(unsafe.Pointer(_cstring_address_))
	_cstring_guid_ := C.CString(guid)
	_cgo_guid_ := (*C.gchar)(unsafe.Pointer(_cstring_guid_))
	defer C.free(unsafe.Pointer(_cstring_guid_))
	_return_ = C._g_dbus_server_new_sync(_cgo_address_, flags, _cgo_guid_, _cgo_observer_, _cgo_cancellable_, _error_)
	_go__return__ = ToDBusServer(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusServer) GetClientAddress() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_server_get_client_address((*C.GDBusServer)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusServer) GetFlags() (_return_ C.GDBusServerFlags) {
	_return_ = C.g_dbus_server_get_flags((*C.GDBusServer)(_self_._value_))
	return
}

func (_self_ *DBusServer) GetGuid() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_dbus_server_get_guid((*C.GDBusServer)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DBusServer) IsActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_dbus_server_is_active((*C.GDBusServer)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DBusServer) Start() () {
	C.g_dbus_server_start((*C.GDBusServer)(_self_._value_))
	return
}

func (_self_ *DBusServer) Stop() () {
	C.g_dbus_server_stop((*C.GDBusServer)(_self_._value_))
	return
}

func DataInputStreamNew(base_stream InputStreamKind) (_go__return__ DataInputStream) {
	_cgo_base_stream_ := (*C.GInputStream)(base_stream.GetGObject())
	var _return_ *C.GDataInputStream
	_return_ = C.g_data_input_stream_new(_cgo_base_stream_)
	_go__return__ = ToDataInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *DataInputStream) GetByteOrder() (_return_ C.GDataStreamByteOrder) {
	_return_ = C.g_data_input_stream_get_byte_order((*C.GDataInputStream)(_self_._value_))
	return
}

func (_self_ *DataInputStream) GetNewlineType() (_return_ C.GDataStreamNewlineType) {
	_return_ = C.g_data_input_stream_get_newline_type((*C.GDataInputStream)(_self_._value_))
	return
}

func (_self_ *DataInputStream) ReadByte(cancellable CancellableKind) (_go__return__ byte, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.guchar
	_return_ = C._g_data_input_stream_read_byte((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *DataInputStream) ReadInt16(cancellable CancellableKind) (_go__return__ int16, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gint16
	_return_ = C._g_data_input_stream_read_int16((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (int16)(_return_)
	return
}

func (_self_ *DataInputStream) ReadInt32(cancellable CancellableKind) (_go__return__ int32, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gint32
	_return_ = C._g_data_input_stream_read_int32((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (int32)(_return_)
	return
}

func (_self_ *DataInputStream) ReadInt64(cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gint64
	_return_ = C._g_data_input_stream_read_int64((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *DataInputStream) ReadLine(cancellable CancellableKind) (_return_ *C.char, _go_length_ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var length C.gsize
	_return_ = C._g_data_input_stream_read_line((*C.GDataInputStream)(_self_._value_), &length, _cgo_cancellable_, _error_)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *DataInputStream) ReadLineAsync(io_priority int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_io_priority_ := (C.gint)(io_priority)
	C.g_data_input_stream_read_line_async((*C.GDataInputStream)(_self_._value_), _cgo_io_priority_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DataInputStream) ReadLineFinish(result *C.GAsyncResult) (_return_ *C.char, _go_length_ uint64, _error_ unsafe.Pointer) {
	var length C.gsize
	_return_ = C._g_data_input_stream_read_line_finish((*C.GDataInputStream)(_self_._value_), result, &length, _error_)
	_go_length_ = (uint64)(length)
	return
}

func (_self_ *DataInputStream) ReadLineFinishUtf8(result *C.GAsyncResult) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	var length C.gsize
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_line_finish_utf8((*C.GDataInputStream)(_self_._value_), result, &length, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) ReadLineUtf8(cancellable CancellableKind) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var length C.gsize
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_line_utf8((*C.GDataInputStream)(_self_._value_), &length, _cgo_cancellable_, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) ReadUint16(cancellable CancellableKind) (_go__return__ uint16, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.guint16
	_return_ = C._g_data_input_stream_read_uint16((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *DataInputStream) ReadUint32(cancellable CancellableKind) (_go__return__ uint32, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.guint32
	_return_ = C._g_data_input_stream_read_uint32((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *DataInputStream) ReadUint64(cancellable CancellableKind) (_go__return__ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.guint64
	_return_ = C._g_data_input_stream_read_uint64((*C.GDataInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *DataInputStream) ReadUntil(stop_chars string, cancellable CancellableKind) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var length C.gsize
	_cstring_stop_chars_ := C.CString(stop_chars)
	_cgo_stop_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_stop_chars_))
	defer C.free(unsafe.Pointer(_cstring_stop_chars_))
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_until((*C.GDataInputStream)(_self_._value_), _cgo_stop_chars_, &length, _cgo_cancellable_, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) ReadUntilAsync(stop_chars string, io_priority int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_io_priority_ := (C.gint)(io_priority)
	_cstring_stop_chars_ := C.CString(stop_chars)
	_cgo_stop_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_stop_chars_))
	defer C.free(unsafe.Pointer(_cstring_stop_chars_))
	C._g_data_input_stream_read_until_async((*C.GDataInputStream)(_self_._value_), _cgo_stop_chars_, _cgo_io_priority_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DataInputStream) ReadUntilFinish(result *C.GAsyncResult) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	var length C.gsize
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_until_finish((*C.GDataInputStream)(_self_._value_), result, &length, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) ReadUpto(stop_chars string, stop_chars_len int64, cancellable CancellableKind) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_stop_chars_len_ := (C.gssize)(stop_chars_len)
	var length C.gsize
	_cstring_stop_chars_ := C.CString(stop_chars)
	_cgo_stop_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_stop_chars_))
	defer C.free(unsafe.Pointer(_cstring_stop_chars_))
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_upto((*C.GDataInputStream)(_self_._value_), _cgo_stop_chars_, _cgo_stop_chars_len_, &length, _cgo_cancellable_, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) ReadUptoAsync(stop_chars string, stop_chars_len int64, io_priority int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_stop_chars_len_ := (C.gssize)(stop_chars_len)
	_cgo_io_priority_ := (C.gint)(io_priority)
	_cstring_stop_chars_ := C.CString(stop_chars)
	_cgo_stop_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_stop_chars_))
	defer C.free(unsafe.Pointer(_cstring_stop_chars_))
	C._g_data_input_stream_read_upto_async((*C.GDataInputStream)(_self_._value_), _cgo_stop_chars_, _cgo_stop_chars_len_, _cgo_io_priority_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *DataInputStream) ReadUptoFinish(result *C.GAsyncResult) (_go__return__ string, _go_length_ uint64, _error_ unsafe.Pointer) {
	var length C.gsize
	var _return_ *C.char
	_return_ = C._g_data_input_stream_read_upto_finish((*C.GDataInputStream)(_self_._value_), result, &length, _error_)
	_go_length_ = (uint64)(length)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DataInputStream) SetByteOrder(order C.GDataStreamByteOrder) () {
	C.g_data_input_stream_set_byte_order((*C.GDataInputStream)(_self_._value_), order)
	return
}

func (_self_ *DataInputStream) SetNewlineType(type_ C.GDataStreamNewlineType) () {
	C.g_data_input_stream_set_newline_type((*C.GDataInputStream)(_self_._value_), type_)
	return
}

func DataOutputStreamNew(base_stream OutputStreamKind) (_go__return__ DataOutputStream) {
	_cgo_base_stream_ := (*C.GOutputStream)(base_stream.GetGObject())
	var _return_ *C.GDataOutputStream
	_return_ = C.g_data_output_stream_new(_cgo_base_stream_)
	_go__return__ = ToDataOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *DataOutputStream) GetByteOrder() (_return_ C.GDataStreamByteOrder) {
	_return_ = C.g_data_output_stream_get_byte_order((*C.GDataOutputStream)(_self_._value_))
	return
}

func (_self_ *DataOutputStream) PutByte(data byte, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.guchar)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_byte((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutInt16(data int16, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.gint16)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_int16((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutInt32(data int32, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.gint32)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_int32((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutInt64(data int64, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.gint64)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_int64((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutString(str string, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.char)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_string((*C.GDataOutputStream)(_self_._value_), _cgo_str_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutUint16(data uint16, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.guint16)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_uint16((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutUint32(data uint32, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.guint32)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_uint32((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) PutUint64(data uint64, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_data_ := (C.guint64)(data)
	var _return_ C.gboolean
	_return_ = C._g_data_output_stream_put_uint64((*C.GDataOutputStream)(_self_._value_), _cgo_data_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DataOutputStream) SetByteOrder(order C.GDataStreamByteOrder) () {
	C.g_data_output_stream_set_byte_order((*C.GDataOutputStream)(_self_._value_), order)
	return
}

func DesktopAppInfoNew(desktop_id string) (_go__return__ DesktopAppInfo) {
	var _return_ *C.GDesktopAppInfo
	_cstring_desktop_id_ := C.CString(desktop_id)
	_cgo_desktop_id_ := (*C.char)(unsafe.Pointer(_cstring_desktop_id_))
	defer C.free(unsafe.Pointer(_cstring_desktop_id_))
	_return_ = C._g_desktop_app_info_new(_cgo_desktop_id_)
	_go__return__ = ToDesktopAppInfo(unsafe.Pointer(_return_))
	return
}

func DesktopAppInfoNewFromFilename(filename string) (_go__return__ DesktopAppInfo) {
	var _return_ *C.GDesktopAppInfo
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.char)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._g_desktop_app_info_new_from_filename(_cgo_filename_)
	_go__return__ = ToDesktopAppInfo(unsafe.Pointer(_return_))
	return
}

func DesktopAppInfoNewFromKeyfile(key_file *C.GKeyFile) (_go__return__ DesktopAppInfo) {
	var _return_ *C.GDesktopAppInfo
	_return_ = C.g_desktop_app_info_new_from_keyfile(key_file)
	_go__return__ = ToDesktopAppInfo(unsafe.Pointer(_return_))
	return
}

func DesktopAppInfoSetDesktopEnv(desktop_env string) () {
	_cstring_desktop_env_ := C.CString(desktop_env)
	_cgo_desktop_env_ := (*C.char)(unsafe.Pointer(_cstring_desktop_env_))
	defer C.free(unsafe.Pointer(_cstring_desktop_env_))
	C._g_desktop_app_info_set_desktop_env(_cgo_desktop_env_)
	return
}

func (_self_ *DesktopAppInfo) GetBoolean(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.char)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_desktop_app_info_get_boolean((*C.GDesktopAppInfo)(_self_._value_), _cgo_key_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DesktopAppInfo) GetCategories() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_desktop_app_info_get_categories((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DesktopAppInfo) GetFilename() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_desktop_app_info_get_filename((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DesktopAppInfo) GetGenericName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_desktop_app_info_get_generic_name((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DesktopAppInfo) GetIsHidden() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_desktop_app_info_get_is_hidden((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DesktopAppInfo) GetKeywords() (_return_ unsafe.Pointer) {
	_return_ = C._g_desktop_app_info_get_keywords((*C.GDesktopAppInfo)(_self_._value_))
	return
}

func (_self_ *DesktopAppInfo) GetNodisplay() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_desktop_app_info_get_nodisplay((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DesktopAppInfo) GetShowIn(desktop_env string) (_go__return__ bool) {
	_cstring_desktop_env_ := C.CString(desktop_env)
	_cgo_desktop_env_ := (*C.gchar)(unsafe.Pointer(_cstring_desktop_env_))
	defer C.free(unsafe.Pointer(_cstring_desktop_env_))
	var _return_ C.gboolean
	_return_ = C._g_desktop_app_info_get_show_in((*C.GDesktopAppInfo)(_self_._value_), _cgo_desktop_env_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DesktopAppInfo) GetStartupWmClass() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_desktop_app_info_get_startup_wm_class((*C.GDesktopAppInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DesktopAppInfo) GetString(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.char)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.char
	_return_ = C._g_desktop_app_info_get_string((*C.GDesktopAppInfo)(_self_._value_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *DesktopAppInfo) HasKey(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.char)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_desktop_app_info_has_key((*C.GDesktopAppInfo)(_self_._value_), _cgo_key_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DesktopAppInfo) LaunchUrisAsManager(uris *C.GList, launch_context GioAppLaunchContextKind, spawn_flags C.GSpawnFlags, user_setup C.GSpawnChildSetupFunc, user_setup_data C.gpointer, pid_callback C.GDesktopAppLaunchCallback, pid_callback_data C.gpointer) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_launch_context_ := (*C.GAppLaunchContext)(launch_context.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_desktop_app_info_launch_uris_as_manager((*C.GDesktopAppInfo)(_self_._value_), uris, _cgo_launch_context_, spawn_flags, user_setup, user_setup_data, pid_callback, pid_callback_data, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func EmblemNew(icon *C.GIcon) (_go__return__ Emblem) {
	var _return_ *C.GEmblem
	_return_ = C.g_emblem_new(icon)
	_go__return__ = ToEmblem(unsafe.Pointer(_return_))
	return
}

func EmblemNewWithOrigin(icon *C.GIcon, origin C.GEmblemOrigin) (_go__return__ Emblem) {
	var _return_ *C.GEmblem
	_return_ = C.g_emblem_new_with_origin(icon, origin)
	_go__return__ = ToEmblem(unsafe.Pointer(_return_))
	return
}

func (_self_ *Emblem) GetIcon() (_return_ *C.GIcon) {
	_return_ = C.g_emblem_get_icon((*C.GEmblem)(_self_._value_))
	return
}

func (_self_ *Emblem) GetOrigin() (_return_ C.GEmblemOrigin) {
	_return_ = C.g_emblem_get_origin((*C.GEmblem)(_self_._value_))
	return
}

func EmblemedIconNew(icon *C.GIcon, emblem EmblemKind) (_go__return__ EmblemedIcon) {
	_cgo_emblem_ := (*C.GEmblem)(emblem.GetGObject())
	var _return_ *C.GIcon
	_return_ = C.g_emblemed_icon_new(icon, _cgo_emblem_)
	_go__return__ = ToEmblemedIcon(unsafe.Pointer(_return_))
	return
}

func (_self_ *EmblemedIcon) AddEmblem(emblem EmblemKind) () {
	_cgo_emblem_ := (*C.GEmblem)(emblem.GetGObject())
	C.g_emblemed_icon_add_emblem((*C.GEmblemedIcon)(_self_._value_), _cgo_emblem_)
	return
}

func (_self_ *EmblemedIcon) ClearEmblems() () {
	C.g_emblemed_icon_clear_emblems((*C.GEmblemedIcon)(_self_._value_))
	return
}

func (_self_ *EmblemedIcon) GetEmblems() (_return_ *C.GList) {
	_return_ = C.g_emblemed_icon_get_emblems((*C.GEmblemedIcon)(_self_._value_))
	return
}

func (_self_ *EmblemedIcon) GetIcon() (_return_ *C.GIcon) {
	_return_ = C.g_emblemed_icon_get_icon((*C.GEmblemedIcon)(_self_._value_))
	return
}

func (_self_ *FileEnumerator) Close(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_file_enumerator_close((*C.GFileEnumerator)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileEnumerator) CloseAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_file_enumerator_close_async((*C.GFileEnumerator)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *FileEnumerator) CloseFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_file_enumerator_close_finish((*C.GFileEnumerator)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileEnumerator) GetContainer() (_return_ *C.GFile) {
	_return_ = C.g_file_enumerator_get_container((*C.GFileEnumerator)(_self_._value_))
	return
}

func (_self_ *FileEnumerator) HasPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_enumerator_has_pending((*C.GFileEnumerator)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileEnumerator) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_enumerator_is_closed((*C.GFileEnumerator)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileEnumerator) NextFile(cancellable CancellableKind) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GFileInfo
	_return_ = C._g_file_enumerator_next_file((*C.GFileEnumerator)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileEnumerator) NextFilesAsync(num_files C.int, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_file_enumerator_next_files_async((*C.GFileEnumerator)(_self_._value_), num_files, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *FileEnumerator) NextFilesFinish(result *C.GAsyncResult) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_return_ = C._g_file_enumerator_next_files_finish((*C.GFileEnumerator)(_self_._value_), result, _error_)
	return
}

func (_self_ *FileEnumerator) SetPending(pending bool) () {
	_cgo_pending_ := (C.gboolean)(C.FALSE)
	if pending { _cgo_pending_ = (C.gboolean)(C.TRUE) }
	C.g_file_enumerator_set_pending((*C.GFileEnumerator)(_self_._value_), _cgo_pending_)
	return
}

func (_self_ *FileIOStream) GetEtag() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_file_io_stream_get_etag((*C.GFileIOStream)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileIOStream) QueryInfo(attributes string, cancellable CancellableKind) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GFileInfo
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	_return_ = C._g_file_io_stream_query_info((*C.GFileIOStream)(_self_._value_), _cgo_attributes_, _cgo_cancellable_, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileIOStream) QueryInfoAsync(attributes string, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	C._g_file_io_stream_query_info_async((*C.GFileIOStream)(_self_._value_), _cgo_attributes_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *FileIOStream) QueryInfoFinish(result *C.GAsyncResult) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GFileInfo
	_return_ = C._g_file_io_stream_query_info_finish((*C.GFileIOStream)(_self_._value_), result, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func FileIconNew(file *C.GFile) (_go__return__ FileIcon) {
	var _return_ *C.GIcon
	_return_ = C.g_file_icon_new(file)
	_go__return__ = ToFileIcon(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileIcon) GetFile() (_return_ *C.GFile) {
	_return_ = C.g_file_icon_get_file((*C.GFileIcon)(_self_._value_))
	return
}

func FileInfoNew() (_go__return__ FileInfo) {
	var _return_ *C.GFileInfo
	_return_ = C.g_file_info_new()
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileInfo) ClearStatus() () {
	C.g_file_info_clear_status((*C.GFileInfo)(_self_._value_))
	return
}

func (_self_ *FileInfo) CopyInto(dest_info FileInfoKind) () {
	_cgo_dest_info_ := (*C.GFileInfo)(dest_info.GetGObject())
	C.g_file_info_copy_into((*C.GFileInfo)(_self_._value_), _cgo_dest_info_)
	return
}

func (_self_ *FileInfo) Dup() (_go__return__ FileInfo) {
	var _return_ *C.GFileInfo
	_return_ = C.g_file_info_dup((*C.GFileInfo)(_self_._value_))
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileInfo) GetAttributeAsString(attribute string) (_go__return__ string) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ *C.char
	_return_ = C._g_file_info_get_attribute_as_string((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetAttributeBoolean(attribute string) (_go__return__ bool) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_info_get_attribute_boolean((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) GetAttributeByteString(attribute string) (_go__return__ string) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ *C.char
	_return_ = C._g_file_info_get_attribute_byte_string((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetAttributeData(attribute string) (_go__return__ bool, type_ *C.GFileAttributeType, value_pp *C.gpointer, status *C.GFileAttributeStatus) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_info_get_attribute_data((*C.GFileInfo)(_self_._value_), _cgo_attribute_, type_, value_pp, status)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) GetAttributeInt32(attribute string) (_go__return__ int32) {
	var _return_ C.gint32
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_int32((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = (int32)(_return_)
	return
}

func (_self_ *FileInfo) GetAttributeInt64(attribute string) (_go__return__ int64) {
	var _return_ C.gint64
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_int64((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *FileInfo) GetAttributeObject(attribute string) (_return_ *C.GObject) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_object((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	return
}

func (_self_ *FileInfo) GetAttributeStatus(attribute string) (_return_ C.GFileAttributeStatus) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_status((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	return
}

func (_self_ *FileInfo) GetAttributeString(attribute string) (_go__return__ string) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ *C.char
	_return_ = C._g_file_info_get_attribute_string((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetAttributeStringv(attribute string) (_return_ unsafe.Pointer) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_stringv((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	return
}

func (_self_ *FileInfo) GetAttributeType(attribute string) (_return_ C.GFileAttributeType) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_type((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	return
}

func (_self_ *FileInfo) GetAttributeUint32(attribute string) (_go__return__ uint32) {
	var _return_ C.guint32
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_uint32((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *FileInfo) GetAttributeUint64(attribute string) (_go__return__ uint64) {
	var _return_ C.guint64
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_file_info_get_attribute_uint64((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *FileInfo) GetContentType() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_content_type((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetDisplayName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_display_name((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetEditName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_edit_name((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetEtag() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_etag((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetFileType() (_return_ C.GFileType) {
	_return_ = C.g_file_info_get_file_type((*C.GFileInfo)(_self_._value_))
	return
}

func (_self_ *FileInfo) GetIcon() (_return_ *C.GIcon) {
	_return_ = C.g_file_info_get_icon((*C.GFileInfo)(_self_._value_))
	return
}

func (_self_ *FileInfo) GetIsBackup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_info_get_is_backup((*C.GFileInfo)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) GetIsHidden() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_info_get_is_hidden((*C.GFileInfo)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) GetIsSymlink() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_info_get_is_symlink((*C.GFileInfo)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) GetModificationTime() (result *C.GTimeVal) {
	C.g_file_info_get_modification_time((*C.GFileInfo)(_self_._value_), result)
	return
}

func (_self_ *FileInfo) GetName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_name((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) GetSize() (_go__return__ int64) {
	var _return_ C.goffset
	_return_ = C.g_file_info_get_size((*C.GFileInfo)(_self_._value_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *FileInfo) GetSortOrder() (_go__return__ int32) {
	var _return_ C.gint32
	_return_ = C.g_file_info_get_sort_order((*C.GFileInfo)(_self_._value_))
	_go__return__ = (int32)(_return_)
	return
}

func (_self_ *FileInfo) GetSymbolicIcon() (_return_ *C.GIcon) {
	_return_ = C.g_file_info_get_symbolic_icon((*C.GFileInfo)(_self_._value_))
	return
}

func (_self_ *FileInfo) GetSymlinkTarget() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_info_get_symlink_target((*C.GFileInfo)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileInfo) HasAttribute(attribute string) (_go__return__ bool) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_info_has_attribute((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) HasNamespace(name_space string) (_go__return__ bool) {
	_cstring_name_space_ := C.CString(name_space)
	_cgo_name_space_ := (*C.char)(unsafe.Pointer(_cstring_name_space_))
	defer C.free(unsafe.Pointer(_cstring_name_space_))
	var _return_ C.gboolean
	_return_ = C._g_file_info_has_namespace((*C.GFileInfo)(_self_._value_), _cgo_name_space_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) ListAttributes(name_space string) (_return_ unsafe.Pointer) {
	_cstring_name_space_ := C.CString(name_space)
	_cgo_name_space_ := (*C.char)(unsafe.Pointer(_cstring_name_space_))
	defer C.free(unsafe.Pointer(_cstring_name_space_))
	_return_ = C._g_file_info_list_attributes((*C.GFileInfo)(_self_._value_), _cgo_name_space_)
	return
}

func (_self_ *FileInfo) RemoveAttribute(attribute string) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_remove_attribute((*C.GFileInfo)(_self_._value_), _cgo_attribute_)
	return
}

func (_self_ *FileInfo) SetAttribute(attribute string, type_ C.GFileAttributeType, value_p C.gpointer) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute((*C.GFileInfo)(_self_._value_), _cgo_attribute_, type_, value_p)
	return
}

func (_self_ *FileInfo) SetAttributeBoolean(attribute string, attr_value bool) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_cgo_attr_value_ := (C.gboolean)(C.FALSE)
	if attr_value { _cgo_attr_value_ = (C.gboolean)(C.TRUE) }
	C._g_file_info_set_attribute_boolean((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeByteString(attribute string, attr_value string) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_cstring_attr_value_ := C.CString(attr_value)
	_cgo_attr_value_ := (*C.char)(unsafe.Pointer(_cstring_attr_value_))
	defer C.free(unsafe.Pointer(_cstring_attr_value_))
	C._g_file_info_set_attribute_byte_string((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeInt32(attribute string, attr_value int32) () {
	_cgo_attr_value_ := (C.gint32)(attr_value)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute_int32((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeInt64(attribute string, attr_value int64) () {
	_cgo_attr_value_ := (C.gint64)(attr_value)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute_int64((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeMask(mask *FileAttributeMatcher) () {
	_cgo_mask_ := (*C.GFileAttributeMatcher)(unsafe.Pointer(mask))
	C.g_file_info_set_attribute_mask((*C.GFileInfo)(_self_._value_), _cgo_mask_)
	return
}

func (_self_ *FileInfo) SetAttributeObject(attribute string, attr_value *C.GObject) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute_object((*C.GFileInfo)(_self_._value_), _cgo_attribute_, attr_value)
	return
}

func (_self_ *FileInfo) SetAttributeStatus(attribute string, status C.GFileAttributeStatus) (_go__return__ bool) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_info_set_attribute_status((*C.GFileInfo)(_self_._value_), _cgo_attribute_, status)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileInfo) SetAttributeString(attribute string, attr_value string) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_cstring_attr_value_ := C.CString(attr_value)
	_cgo_attr_value_ := (*C.char)(unsafe.Pointer(_cstring_attr_value_))
	defer C.free(unsafe.Pointer(_cstring_attr_value_))
	C._g_file_info_set_attribute_string((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeUint32(attribute string, attr_value uint32) () {
	_cgo_attr_value_ := (C.guint32)(attr_value)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute_uint32((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetAttributeUint64(attribute string, attr_value uint64) () {
	_cgo_attr_value_ := (C.guint64)(attr_value)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_file_info_set_attribute_uint64((*C.GFileInfo)(_self_._value_), _cgo_attribute_, _cgo_attr_value_)
	return
}

func (_self_ *FileInfo) SetContentType(content_type string) () {
	_cstring_content_type_ := C.CString(content_type)
	_cgo_content_type_ := (*C.char)(unsafe.Pointer(_cstring_content_type_))
	defer C.free(unsafe.Pointer(_cstring_content_type_))
	C._g_file_info_set_content_type((*C.GFileInfo)(_self_._value_), _cgo_content_type_)
	return
}

func (_self_ *FileInfo) SetDisplayName(display_name string) () {
	_cstring_display_name_ := C.CString(display_name)
	_cgo_display_name_ := (*C.char)(unsafe.Pointer(_cstring_display_name_))
	defer C.free(unsafe.Pointer(_cstring_display_name_))
	C._g_file_info_set_display_name((*C.GFileInfo)(_self_._value_), _cgo_display_name_)
	return
}

func (_self_ *FileInfo) SetEditName(edit_name string) () {
	_cstring_edit_name_ := C.CString(edit_name)
	_cgo_edit_name_ := (*C.char)(unsafe.Pointer(_cstring_edit_name_))
	defer C.free(unsafe.Pointer(_cstring_edit_name_))
	C._g_file_info_set_edit_name((*C.GFileInfo)(_self_._value_), _cgo_edit_name_)
	return
}

func (_self_ *FileInfo) SetFileType(type_ C.GFileType) () {
	C.g_file_info_set_file_type((*C.GFileInfo)(_self_._value_), type_)
	return
}

func (_self_ *FileInfo) SetIcon(icon *C.GIcon) () {
	C.g_file_info_set_icon((*C.GFileInfo)(_self_._value_), icon)
	return
}

func (_self_ *FileInfo) SetIsHidden(is_hidden bool) () {
	_cgo_is_hidden_ := (C.gboolean)(C.FALSE)
	if is_hidden { _cgo_is_hidden_ = (C.gboolean)(C.TRUE) }
	C.g_file_info_set_is_hidden((*C.GFileInfo)(_self_._value_), _cgo_is_hidden_)
	return
}

func (_self_ *FileInfo) SetIsSymlink(is_symlink bool) () {
	_cgo_is_symlink_ := (C.gboolean)(C.FALSE)
	if is_symlink { _cgo_is_symlink_ = (C.gboolean)(C.TRUE) }
	C.g_file_info_set_is_symlink((*C.GFileInfo)(_self_._value_), _cgo_is_symlink_)
	return
}

func (_self_ *FileInfo) SetModificationTime(mtime *C.GTimeVal) () {
	C.g_file_info_set_modification_time((*C.GFileInfo)(_self_._value_), mtime)
	return
}

func (_self_ *FileInfo) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._g_file_info_set_name((*C.GFileInfo)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *FileInfo) SetSize(size int64) () {
	_cgo_size_ := (C.goffset)(size)
	C.g_file_info_set_size((*C.GFileInfo)(_self_._value_), _cgo_size_)
	return
}

func (_self_ *FileInfo) SetSortOrder(sort_order int32) () {
	_cgo_sort_order_ := (C.gint32)(sort_order)
	C.g_file_info_set_sort_order((*C.GFileInfo)(_self_._value_), _cgo_sort_order_)
	return
}

func (_self_ *FileInfo) SetSymbolicIcon(icon *C.GIcon) () {
	C.g_file_info_set_symbolic_icon((*C.GFileInfo)(_self_._value_), icon)
	return
}

func (_self_ *FileInfo) SetSymlinkTarget(symlink_target string) () {
	_cstring_symlink_target_ := C.CString(symlink_target)
	_cgo_symlink_target_ := (*C.char)(unsafe.Pointer(_cstring_symlink_target_))
	defer C.free(unsafe.Pointer(_cstring_symlink_target_))
	C._g_file_info_set_symlink_target((*C.GFileInfo)(_self_._value_), _cgo_symlink_target_)
	return
}

func (_self_ *FileInfo) UnsetAttributeMask() () {
	C.g_file_info_unset_attribute_mask((*C.GFileInfo)(_self_._value_))
	return
}

func (_self_ *FileInputStream) QueryInfo(attributes string, cancellable CancellableKind) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GFileInfo
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	_return_ = C._g_file_input_stream_query_info((*C.GFileInputStream)(_self_._value_), _cgo_attributes_, _cgo_cancellable_, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileInputStream) QueryInfoAsync(attributes string, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	C._g_file_input_stream_query_info_async((*C.GFileInputStream)(_self_._value_), _cgo_attributes_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *FileInputStream) QueryInfoFinish(result *C.GAsyncResult) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GFileInfo
	_return_ = C._g_file_input_stream_query_info_finish((*C.GFileInputStream)(_self_._value_), result, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileMonitor) Cancel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_monitor_cancel((*C.GFileMonitor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileMonitor) EmitEvent(child *C.GFile, other_file *C.GFile, event_type C.GFileMonitorEvent) () {
	C.g_file_monitor_emit_event((*C.GFileMonitor)(_self_._value_), child, other_file, event_type)
	return
}

func (_self_ *FileMonitor) IsCancelled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_file_monitor_is_cancelled((*C.GFileMonitor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileMonitor) SetRateLimit(limit_msecs int) () {
	_cgo_limit_msecs_ := (C.gint)(limit_msecs)
	C.g_file_monitor_set_rate_limit((*C.GFileMonitor)(_self_._value_), _cgo_limit_msecs_)
	return
}

func (_self_ *FileOutputStream) GetEtag() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_file_output_stream_get_etag((*C.GFileOutputStream)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileOutputStream) QueryInfo(attributes string, cancellable CancellableKind) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GFileInfo
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	_return_ = C._g_file_output_stream_query_info((*C.GFileOutputStream)(_self_._value_), _cgo_attributes_, _cgo_cancellable_, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileOutputStream) QueryInfoAsync(attributes string, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	C._g_file_output_stream_query_info_async((*C.GFileOutputStream)(_self_._value_), _cgo_attributes_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *FileOutputStream) QueryInfoFinish(result *C.GAsyncResult) (_go__return__ FileInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GFileInfo
	_return_ = C._g_file_output_stream_query_info_finish((*C.GFileOutputStream)(_self_._value_), result, _error_)
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func FilenameCompleterNew() (_go__return__ FilenameCompleter) {
	var _return_ *C.GFilenameCompleter
	_return_ = C.g_filename_completer_new()
	_go__return__ = ToFilenameCompleter(unsafe.Pointer(_return_))
	return
}

func (_self_ *FilenameCompleter) GetCompletionSuffix(initial_text string) (_go__return__ string) {
	_cstring_initial_text_ := C.CString(initial_text)
	_cgo_initial_text_ := (*C.char)(unsafe.Pointer(_cstring_initial_text_))
	defer C.free(unsafe.Pointer(_cstring_initial_text_))
	var _return_ *C.char
	_return_ = C._g_filename_completer_get_completion_suffix((*C.GFilenameCompleter)(_self_._value_), _cgo_initial_text_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FilenameCompleter) GetCompletions(initial_text string) (_return_ unsafe.Pointer) {
	_cstring_initial_text_ := C.CString(initial_text)
	_cgo_initial_text_ := (*C.char)(unsafe.Pointer(_cstring_initial_text_))
	defer C.free(unsafe.Pointer(_cstring_initial_text_))
	_return_ = C._g_filename_completer_get_completions((*C.GFilenameCompleter)(_self_._value_), _cgo_initial_text_)
	return
}

func (_self_ *FilenameCompleter) SetDirsOnly(dirs_only bool) () {
	_cgo_dirs_only_ := (C.gboolean)(C.FALSE)
	if dirs_only { _cgo_dirs_only_ = (C.gboolean)(C.TRUE) }
	C.g_filename_completer_set_dirs_only((*C.GFilenameCompleter)(_self_._value_), _cgo_dirs_only_)
	return
}

func (_self_ *FilterInputStream) GetBaseStream() (_go__return__ InputStream) {
	var _return_ *C.GInputStream
	_return_ = C.g_filter_input_stream_get_base_stream((*C.GFilterInputStream)(_self_._value_))
	_go__return__ = ToInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *FilterInputStream) GetCloseBaseStream() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_filter_input_stream_get_close_base_stream((*C.GFilterInputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FilterInputStream) SetCloseBaseStream(close_base bool) () {
	_cgo_close_base_ := (C.gboolean)(C.FALSE)
	if close_base { _cgo_close_base_ = (C.gboolean)(C.TRUE) }
	C.g_filter_input_stream_set_close_base_stream((*C.GFilterInputStream)(_self_._value_), _cgo_close_base_)
	return
}

func (_self_ *FilterOutputStream) GetBaseStream() (_go__return__ OutputStream) {
	var _return_ *C.GOutputStream
	_return_ = C.g_filter_output_stream_get_base_stream((*C.GFilterOutputStream)(_self_._value_))
	_go__return__ = ToOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *FilterOutputStream) GetCloseBaseStream() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_filter_output_stream_get_close_base_stream((*C.GFilterOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FilterOutputStream) SetCloseBaseStream(close_base bool) () {
	_cgo_close_base_ := (C.gboolean)(C.FALSE)
	if close_base { _cgo_close_base_ = (C.gboolean)(C.TRUE) }
	C.g_filter_output_stream_set_close_base_stream((*C.GFilterOutputStream)(_self_._value_), _cgo_close_base_)
	return
}

func IOModuleNew(filename string) (_go__return__ IOModule) {
	var _return_ *C.GIOModule
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._g_io_module_new(_cgo_filename_)
	_go__return__ = ToIOModule(unsafe.Pointer(_return_))
	return
}

func IOStreamSpliceFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_io_stream_splice_finish(result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) ClearPending() () {
	C.g_io_stream_clear_pending((*C.GIOStream)(_self_._value_))
	return
}

func (_self_ *IOStream) Close(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_io_stream_close((*C.GIOStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) CloseAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_io_stream_close_async((*C.GIOStream)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *IOStream) CloseFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_io_stream_close_finish((*C.GIOStream)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) GetInputStream() (_go__return__ InputStream) {
	var _return_ *C.GInputStream
	_return_ = C.g_io_stream_get_input_stream((*C.GIOStream)(_self_._value_))
	_go__return__ = ToInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *IOStream) GetOutputStream() (_go__return__ OutputStream) {
	var _return_ *C.GOutputStream
	_return_ = C.g_io_stream_get_output_stream((*C.GIOStream)(_self_._value_))
	_go__return__ = ToOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *IOStream) HasPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_io_stream_has_pending((*C.GIOStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_io_stream_is_closed((*C.GIOStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) SetPending() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_io_stream_set_pending((*C.GIOStream)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *IOStream) SpliceAsync(stream2 IOStreamKind, flags C.GIOStreamSpliceFlags, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_stream2_ := (*C.GIOStream)(stream2.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_io_stream_splice_async((*C.GIOStream)(_self_._value_), _cgo_stream2_, flags, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func InetAddressNewAny(family C.GSocketFamily) (_go__return__ InetAddress) {
	var _return_ *C.GInetAddress
	_return_ = C.g_inet_address_new_any(family)
	_go__return__ = ToInetAddress(unsafe.Pointer(_return_))
	return
}

func InetAddressNewFromString(string_ string) (_go__return__ InetAddress) {
	var _return_ *C.GInetAddress
	_cstring_string__ := C.CString(string_)
	_cgo_string__ := (*C.gchar)(unsafe.Pointer(_cstring_string__))
	defer C.free(unsafe.Pointer(_cstring_string__))
	_return_ = C._g_inet_address_new_from_string(_cgo_string__)
	_go__return__ = ToInetAddress(unsafe.Pointer(_return_))
	return
}

func InetAddressNewLoopback(family C.GSocketFamily) (_go__return__ InetAddress) {
	var _return_ *C.GInetAddress
	_return_ = C.g_inet_address_new_loopback(family)
	_go__return__ = ToInetAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *InetAddress) Equal(other_address InetAddressKind) (_go__return__ bool) {
	_cgo_other_address_ := (*C.GInetAddress)(other_address.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_inet_address_equal((*C.GInetAddress)(_self_._value_), _cgo_other_address_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetFamily() (_return_ C.GSocketFamily) {
	_return_ = C.g_inet_address_get_family((*C.GInetAddress)(_self_._value_))
	return
}

func (_self_ *InetAddress) GetIsAny() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_any((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsLinkLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_link_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsLoopback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_loopback((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMcGlobal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_mc_global((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMcLinkLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_mc_link_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMcNodeLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_mc_node_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMcOrgLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_mc_org_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMcSiteLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_mc_site_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsMulticast() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_multicast((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetIsSiteLocal() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_inet_address_get_is_site_local((*C.GInetAddress)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddress) GetNativeSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_inet_address_get_native_size((*C.GInetAddress)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *InetAddress) ToBytes() (_return_ *C.guint8) {
	_return_ = C._g_inet_address_to_bytes((*C.GInetAddress)(_self_._value_))
	return
}

func (_self_ *InetAddress) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_inet_address_to_string((*C.GInetAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func InetAddressMaskNew(addr InetAddressKind, length uint) (_go__return__ InetAddressMask, _error_ unsafe.Pointer) {
	_cgo_addr_ := (*C.GInetAddress)(addr.GetGObject())
	var _return_ *C.GInetAddressMask
	_cgo_length_ := (C.guint)(length)
	_return_ = C._g_inet_address_mask_new(_cgo_addr_, _cgo_length_, _error_)
	_go__return__ = ToInetAddressMask(unsafe.Pointer(_return_))
	return
}

func InetAddressMaskNewFromString(mask_string string) (_go__return__ InetAddressMask, _error_ unsafe.Pointer) {
	var _return_ *C.GInetAddressMask
	_cstring_mask_string_ := C.CString(mask_string)
	_cgo_mask_string_ := (*C.gchar)(unsafe.Pointer(_cstring_mask_string_))
	defer C.free(unsafe.Pointer(_cstring_mask_string_))
	_return_ = C._g_inet_address_mask_new_from_string(_cgo_mask_string_, _error_)
	_go__return__ = ToInetAddressMask(unsafe.Pointer(_return_))
	return
}

func (_self_ *InetAddressMask) Equal(mask2 InetAddressMaskKind) (_go__return__ bool) {
	_cgo_mask2_ := (*C.GInetAddressMask)(mask2.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_inet_address_mask_equal((*C.GInetAddressMask)(_self_._value_), _cgo_mask2_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddressMask) GetAddress() (_go__return__ InetAddress) {
	var _return_ *C.GInetAddress
	_return_ = C.g_inet_address_mask_get_address((*C.GInetAddressMask)(_self_._value_))
	_go__return__ = ToInetAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *InetAddressMask) GetFamily() (_return_ C.GSocketFamily) {
	_return_ = C.g_inet_address_mask_get_family((*C.GInetAddressMask)(_self_._value_))
	return
}

func (_self_ *InetAddressMask) GetLength() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_inet_address_mask_get_length((*C.GInetAddressMask)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *InetAddressMask) Matches(address InetAddressKind) (_go__return__ bool) {
	_cgo_address_ := (*C.GInetAddress)(address.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_inet_address_mask_matches((*C.GInetAddressMask)(_self_._value_), _cgo_address_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InetAddressMask) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.g_inet_address_mask_to_string((*C.GInetAddressMask)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func InetSocketAddressNew(address InetAddressKind, port uint16) (_go__return__ InetSocketAddress) {
	_cgo_address_ := (*C.GInetAddress)(address.GetGObject())
	var _return_ *C.GSocketAddress
	_cgo_port_ := (C.guint16)(port)
	_return_ = C.g_inet_socket_address_new(_cgo_address_, _cgo_port_)
	_go__return__ = ToInetSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *InetSocketAddress) GetAddress() (_go__return__ InetAddress) {
	var _return_ *C.GInetAddress
	_return_ = C.g_inet_socket_address_get_address((*C.GInetSocketAddress)(_self_._value_))
	_go__return__ = ToInetAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *InetSocketAddress) GetFlowinfo() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_inet_socket_address_get_flowinfo((*C.GInetSocketAddress)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *InetSocketAddress) GetPort() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_inet_socket_address_get_port((*C.GInetSocketAddress)(_self_._value_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *InetSocketAddress) GetScopeId() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.g_inet_socket_address_get_scope_id((*C.GInetSocketAddress)(_self_._value_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *InputStream) ClearPending() () {
	C.g_input_stream_clear_pending((*C.GInputStream)(_self_._value_))
	return
}

func (_self_ *InputStream) Close(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_input_stream_close((*C.GInputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) CloseAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_input_stream_close_async((*C.GInputStream)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *InputStream) CloseFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_input_stream_close_finish((*C.GInputStream)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) HasPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_input_stream_has_pending((*C.GInputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_input_stream_is_closed((*C.GInputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) Read(buffer unsafe.Pointer, count uint64, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	var _return_ C.gssize
	_return_ = C._g_input_stream_read((*C.GInputStream)(_self_._value_), buffer, _cgo_count_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *InputStream) ReadAll(buffer unsafe.Pointer, count uint64, cancellable CancellableKind) (_go__return__ bool, _go_bytes_read_ uint64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	var bytes_read C.gsize
	var _return_ C.gboolean
	_return_ = C._g_input_stream_read_all((*C.GInputStream)(_self_._value_), buffer, _cgo_count_, &bytes_read, _cgo_cancellable_, _error_)
	_go_bytes_read_ = (uint64)(bytes_read)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) ReadAsync(buffer unsafe.Pointer, count uint64, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	C.g_input_stream_read_async((*C.GInputStream)(_self_._value_), buffer, _cgo_count_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *InputStream) ReadBytes(count uint64, cancellable CancellableKind) (_return_ *C.GBytes, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	_return_ = C._g_input_stream_read_bytes((*C.GInputStream)(_self_._value_), _cgo_count_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *InputStream) ReadBytesAsync(count uint64, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	C.g_input_stream_read_bytes_async((*C.GInputStream)(_self_._value_), _cgo_count_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *InputStream) ReadBytesFinish(result *C.GAsyncResult) (_return_ *C.GBytes, _error_ unsafe.Pointer) {
	_return_ = C._g_input_stream_read_bytes_finish((*C.GInputStream)(_self_._value_), result, _error_)
	return
}

func (_self_ *InputStream) ReadFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_input_stream_read_finish((*C.GInputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *InputStream) SetPending() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_input_stream_set_pending((*C.GInputStream)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputStream) Skip(count uint64, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	var _return_ C.gssize
	_return_ = C._g_input_stream_skip((*C.GInputStream)(_self_._value_), _cgo_count_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *InputStream) SkipAsync(count uint64, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_count_ := (C.gsize)(count)
	C.g_input_stream_skip_async((*C.GInputStream)(_self_._value_), _cgo_count_, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *InputStream) SkipFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_input_stream_skip_finish((*C.GInputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func MemoryInputStreamNew() (_go__return__ MemoryInputStream) {
	var _return_ *C.GInputStream
	_return_ = C.g_memory_input_stream_new()
	_go__return__ = ToMemoryInputStream(unsafe.Pointer(_return_))
	return
}

func MemoryInputStreamNewFromBytes(bytes *C.GBytes) (_go__return__ MemoryInputStream) {
	var _return_ *C.GInputStream
	_return_ = C.g_memory_input_stream_new_from_bytes(bytes)
	_go__return__ = ToMemoryInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *MemoryInputStream) AddBytes(bytes *C.GBytes) () {
	C.g_memory_input_stream_add_bytes((*C.GMemoryInputStream)(_self_._value_), bytes)
	return
}

func MemoryOutputStreamNew(data C.gpointer, size uint64, realloc_function C.GReallocFunc, destroy_function C.GDestroyNotify) (_go__return__ MemoryOutputStream) {
	var _return_ *C.GOutputStream
	_cgo_size_ := (C.gsize)(size)
	_return_ = C.g_memory_output_stream_new(data, _cgo_size_, realloc_function, destroy_function)
	_go__return__ = ToMemoryOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *MemoryOutputStream) GetData() (_return_ C.gpointer) {
	_return_ = C.g_memory_output_stream_get_data((*C.GMemoryOutputStream)(_self_._value_))
	return
}

func (_self_ *MemoryOutputStream) GetDataSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_memory_output_stream_get_data_size((*C.GMemoryOutputStream)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *MemoryOutputStream) GetSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_memory_output_stream_get_size((*C.GMemoryOutputStream)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *MemoryOutputStream) StealAsBytes() (_return_ *C.GBytes) {
	_return_ = C.g_memory_output_stream_steal_as_bytes((*C.GMemoryOutputStream)(_self_._value_))
	return
}

func (_self_ *MemoryOutputStream) StealData() (_return_ C.gpointer) {
	_return_ = C.g_memory_output_stream_steal_data((*C.GMemoryOutputStream)(_self_._value_))
	return
}

func GioMenuNew() (_go__return__ GioMenu) {
	var _return_ *C.GMenu
	_return_ = C.g_menu_new()
	_go__return__ = ToGioMenu(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioMenu) Append(label string, detailed_action string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_detailed_action_ := C.CString(detailed_action)
	_cgo_detailed_action_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_action_))
	defer C.free(unsafe.Pointer(_cstring_detailed_action_))
	C._g_menu_append((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_detailed_action_)
	return
}

func (_self_ *GioMenu) AppendItem(item GioMenuItemKind) () {
	_cgo_item_ := (*C.GMenuItem)(item.GetGObject())
	C.g_menu_append_item((*C.GMenu)(_self_._value_), _cgo_item_)
	return
}

func (_self_ *GioMenu) AppendSection(label string, section MenuModelKind) () {
	_cgo_section_ := (*C.GMenuModel)(section.GetGObject())
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_append_section((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_section_)
	return
}

func (_self_ *GioMenu) AppendSubmenu(label string, submenu MenuModelKind) () {
	_cgo_submenu_ := (*C.GMenuModel)(submenu.GetGObject())
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_append_submenu((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_submenu_)
	return
}

func (_self_ *GioMenu) Freeze() () {
	C.g_menu_freeze((*C.GMenu)(_self_._value_))
	return
}

func (_self_ *GioMenu) Insert(position int, label string, detailed_action string) () {
	_cgo_position_ := (C.gint)(position)
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_detailed_action_ := C.CString(detailed_action)
	_cgo_detailed_action_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_action_))
	defer C.free(unsafe.Pointer(_cstring_detailed_action_))
	C._g_menu_insert((*C.GMenu)(_self_._value_), _cgo_position_, _cgo_label_, _cgo_detailed_action_)
	return
}

func (_self_ *GioMenu) InsertItem(position int, item GioMenuItemKind) () {
	_cgo_item_ := (*C.GMenuItem)(item.GetGObject())
	_cgo_position_ := (C.gint)(position)
	C.g_menu_insert_item((*C.GMenu)(_self_._value_), _cgo_position_, _cgo_item_)
	return
}

func (_self_ *GioMenu) InsertSection(position int, label string, section MenuModelKind) () {
	_cgo_section_ := (*C.GMenuModel)(section.GetGObject())
	_cgo_position_ := (C.gint)(position)
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_insert_section((*C.GMenu)(_self_._value_), _cgo_position_, _cgo_label_, _cgo_section_)
	return
}

func (_self_ *GioMenu) InsertSubmenu(position int, label string, submenu MenuModelKind) () {
	_cgo_submenu_ := (*C.GMenuModel)(submenu.GetGObject())
	_cgo_position_ := (C.gint)(position)
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_insert_submenu((*C.GMenu)(_self_._value_), _cgo_position_, _cgo_label_, _cgo_submenu_)
	return
}

func (_self_ *GioMenu) Prepend(label string, detailed_action string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_detailed_action_ := C.CString(detailed_action)
	_cgo_detailed_action_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_action_))
	defer C.free(unsafe.Pointer(_cstring_detailed_action_))
	C._g_menu_prepend((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_detailed_action_)
	return
}

func (_self_ *GioMenu) PrependItem(item GioMenuItemKind) () {
	_cgo_item_ := (*C.GMenuItem)(item.GetGObject())
	C.g_menu_prepend_item((*C.GMenu)(_self_._value_), _cgo_item_)
	return
}

func (_self_ *GioMenu) PrependSection(label string, section MenuModelKind) () {
	_cgo_section_ := (*C.GMenuModel)(section.GetGObject())
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_prepend_section((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_section_)
	return
}

func (_self_ *GioMenu) PrependSubmenu(label string, submenu MenuModelKind) () {
	_cgo_submenu_ := (*C.GMenuModel)(submenu.GetGObject())
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_prepend_submenu((*C.GMenu)(_self_._value_), _cgo_label_, _cgo_submenu_)
	return
}

func (_self_ *GioMenu) Remove(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.g_menu_remove((*C.GMenu)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *MenuAttributeIter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_menu_attribute_iter_get_name((*C.GMenuAttributeIter)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *MenuAttributeIter) GetNext() (_go__return__ bool, out_name unsafe.Pointer, value unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_menu_attribute_iter_get_next((*C.GMenuAttributeIter)(_self_._value_), out_name, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *MenuAttributeIter) GetValue() (_return_ *C.GVariant) {
	_return_ = C.g_menu_attribute_iter_get_value((*C.GMenuAttributeIter)(_self_._value_))
	return
}

func (_self_ *MenuAttributeIter) Next() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_menu_attribute_iter_next((*C.GMenuAttributeIter)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func GioMenuItemNew(label string, detailed_action string) (_go__return__ GioMenuItem) {
	var _return_ *C.GMenuItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_cstring_detailed_action_ := C.CString(detailed_action)
	_cgo_detailed_action_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_action_))
	defer C.free(unsafe.Pointer(_cstring_detailed_action_))
	_return_ = C._g_menu_item_new(_cgo_label_, _cgo_detailed_action_)
	_go__return__ = ToGioMenuItem(unsafe.Pointer(_return_))
	return
}

func MenuItemNewFromModel(model MenuModelKind, item_index int) (_go__return__ GioMenuItem) {
	_cgo_model_ := (*C.GMenuModel)(model.GetGObject())
	var _return_ *C.GMenuItem
	_cgo_item_index_ := (C.gint)(item_index)
	_return_ = C.g_menu_item_new_from_model(_cgo_model_, _cgo_item_index_)
	_go__return__ = ToGioMenuItem(unsafe.Pointer(_return_))
	return
}

func MenuItemNewSection(label string, section MenuModelKind) (_go__return__ GioMenuItem) {
	_cgo_section_ := (*C.GMenuModel)(section.GetGObject())
	var _return_ *C.GMenuItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._g_menu_item_new_section(_cgo_label_, _cgo_section_)
	_go__return__ = ToGioMenuItem(unsafe.Pointer(_return_))
	return
}

func MenuItemNewSubmenu(label string, submenu MenuModelKind) (_go__return__ GioMenuItem) {
	_cgo_submenu_ := (*C.GMenuModel)(submenu.GetGObject())
	var _return_ *C.GMenuItem
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	_return_ = C._g_menu_item_new_submenu(_cgo_label_, _cgo_submenu_)
	_go__return__ = ToGioMenuItem(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioMenuItem) GetAttributeValue(attribute string, expected_type *C.GVariantType) (_return_ *C.GVariant) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_menu_item_get_attribute_value((*C.GMenuItem)(_self_._value_), _cgo_attribute_, expected_type)
	return
}

func (_self_ *GioMenuItem) GetLink(link string) (_go__return__ MenuModel) {
	var _return_ *C.GMenuModel
	_cstring_link_ := C.CString(link)
	_cgo_link_ := (*C.gchar)(unsafe.Pointer(_cstring_link_))
	defer C.free(unsafe.Pointer(_cstring_link_))
	_return_ = C._g_menu_item_get_link((*C.GMenuItem)(_self_._value_), _cgo_link_)
	_go__return__ = ToMenuModel(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioMenuItem) SetActionAndTargetValue(action string, target_value *C.GVariant) () {
	_cstring_action_ := C.CString(action)
	_cgo_action_ := (*C.gchar)(unsafe.Pointer(_cstring_action_))
	defer C.free(unsafe.Pointer(_cstring_action_))
	C._g_menu_item_set_action_and_target_value((*C.GMenuItem)(_self_._value_), _cgo_action_, target_value)
	return
}

func (_self_ *GioMenuItem) SetAttributeValue(attribute string, value *C.GVariant) () {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	C._g_menu_item_set_attribute_value((*C.GMenuItem)(_self_._value_), _cgo_attribute_, value)
	return
}

func (_self_ *GioMenuItem) SetDetailedAction(detailed_action string) () {
	_cstring_detailed_action_ := C.CString(detailed_action)
	_cgo_detailed_action_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_action_))
	defer C.free(unsafe.Pointer(_cstring_detailed_action_))
	C._g_menu_item_set_detailed_action((*C.GMenuItem)(_self_._value_), _cgo_detailed_action_)
	return
}

func (_self_ *GioMenuItem) SetLabel(label string) () {
	_cstring_label_ := C.CString(label)
	_cgo_label_ := (*C.gchar)(unsafe.Pointer(_cstring_label_))
	defer C.free(unsafe.Pointer(_cstring_label_))
	C._g_menu_item_set_label((*C.GMenuItem)(_self_._value_), _cgo_label_)
	return
}

func (_self_ *GioMenuItem) SetLink(link string, model MenuModelKind) () {
	_cgo_model_ := (*C.GMenuModel)(model.GetGObject())
	_cstring_link_ := C.CString(link)
	_cgo_link_ := (*C.gchar)(unsafe.Pointer(_cstring_link_))
	defer C.free(unsafe.Pointer(_cstring_link_))
	C._g_menu_item_set_link((*C.GMenuItem)(_self_._value_), _cgo_link_, _cgo_model_)
	return
}

func (_self_ *GioMenuItem) SetSection(section MenuModelKind) () {
	_cgo_section_ := (*C.GMenuModel)(section.GetGObject())
	C.g_menu_item_set_section((*C.GMenuItem)(_self_._value_), _cgo_section_)
	return
}

func (_self_ *GioMenuItem) SetSubmenu(submenu MenuModelKind) () {
	_cgo_submenu_ := (*C.GMenuModel)(submenu.GetGObject())
	C.g_menu_item_set_submenu((*C.GMenuItem)(_self_._value_), _cgo_submenu_)
	return
}

func (_self_ *MenuLinkIter) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_menu_link_iter_get_name((*C.GMenuLinkIter)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *MenuLinkIter) GetNext() (_go__return__ bool, out_link unsafe.Pointer, value *MenuModel) {
	var _allocated_value_ *C.GMenuModel
	var _return_ C.gboolean
	_return_ = C._g_menu_link_iter_get_next((*C.GMenuLinkIter)(_self_._value_), out_link, unsafe.Pointer(&_allocated_value_))
	value = (*MenuModel)(unsafe.Pointer(_allocated_value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *MenuLinkIter) GetValue() (_go__return__ MenuModel) {
	var _return_ *C.GMenuModel
	_return_ = C.g_menu_link_iter_get_value((*C.GMenuLinkIter)(_self_._value_))
	_go__return__ = ToMenuModel(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuLinkIter) Next() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_menu_link_iter_next((*C.GMenuLinkIter)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *MenuModel) GetItemAttributeValue(item_index int, attribute string, expected_type *C.GVariantType) (_return_ *C.GVariant) {
	_cgo_item_index_ := (C.gint)(item_index)
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.gchar)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	_return_ = C._g_menu_model_get_item_attribute_value((*C.GMenuModel)(_self_._value_), _cgo_item_index_, _cgo_attribute_, expected_type)
	return
}

func (_self_ *MenuModel) GetItemLink(item_index int, link string) (_go__return__ MenuModel) {
	var _return_ *C.GMenuModel
	_cgo_item_index_ := (C.gint)(item_index)
	_cstring_link_ := C.CString(link)
	_cgo_link_ := (*C.gchar)(unsafe.Pointer(_cstring_link_))
	defer C.free(unsafe.Pointer(_cstring_link_))
	_return_ = C._g_menu_model_get_item_link((*C.GMenuModel)(_self_._value_), _cgo_item_index_, _cgo_link_)
	_go__return__ = ToMenuModel(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuModel) GetNItems() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_menu_model_get_n_items((*C.GMenuModel)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *MenuModel) IsMutable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_menu_model_is_mutable((*C.GMenuModel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *MenuModel) ItemsChanged(position int, removed int, added int) () {
	_cgo_position_ := (C.gint)(position)
	_cgo_removed_ := (C.gint)(removed)
	_cgo_added_ := (C.gint)(added)
	C.g_menu_model_items_changed((*C.GMenuModel)(_self_._value_), _cgo_position_, _cgo_removed_, _cgo_added_)
	return
}

func (_self_ *MenuModel) IterateItemAttributes(item_index int) (_go__return__ MenuAttributeIter) {
	var _return_ *C.GMenuAttributeIter
	_cgo_item_index_ := (C.gint)(item_index)
	_return_ = C.g_menu_model_iterate_item_attributes((*C.GMenuModel)(_self_._value_), _cgo_item_index_)
	_go__return__ = ToMenuAttributeIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *MenuModel) IterateItemLinks(item_index int) (_go__return__ MenuLinkIter) {
	var _return_ *C.GMenuLinkIter
	_cgo_item_index_ := (C.gint)(item_index)
	_return_ = C.g_menu_model_iterate_item_links((*C.GMenuModel)(_self_._value_), _cgo_item_index_)
	_go__return__ = ToMenuLinkIter(unsafe.Pointer(_return_))
	return
}

func GioMountOperationNew() (_go__return__ GioMountOperation) {
	var _return_ *C.GMountOperation
	_return_ = C.g_mount_operation_new()
	_go__return__ = ToGioMountOperation(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioMountOperation) GetAnonymous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_mount_operation_get_anonymous((*C.GMountOperation)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioMountOperation) GetChoice() (_return_ C.int) {
	_return_ = C.g_mount_operation_get_choice((*C.GMountOperation)(_self_._value_))
	return
}

func (_self_ *GioMountOperation) GetDomain() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_mount_operation_get_domain((*C.GMountOperation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioMountOperation) GetPassword() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_mount_operation_get_password((*C.GMountOperation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioMountOperation) GetPasswordSave() (_return_ C.GPasswordSave) {
	_return_ = C.g_mount_operation_get_password_save((*C.GMountOperation)(_self_._value_))
	return
}

func (_self_ *GioMountOperation) GetUsername() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_mount_operation_get_username((*C.GMountOperation)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioMountOperation) Reply(result C.GMountOperationResult) () {
	C.g_mount_operation_reply((*C.GMountOperation)(_self_._value_), result)
	return
}

func (_self_ *GioMountOperation) SetAnonymous(anonymous bool) () {
	_cgo_anonymous_ := (C.gboolean)(C.FALSE)
	if anonymous { _cgo_anonymous_ = (C.gboolean)(C.TRUE) }
	C.g_mount_operation_set_anonymous((*C.GMountOperation)(_self_._value_), _cgo_anonymous_)
	return
}

func (_self_ *GioMountOperation) SetChoice(choice C.int) () {
	C.g_mount_operation_set_choice((*C.GMountOperation)(_self_._value_), choice)
	return
}

func (_self_ *GioMountOperation) SetDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.char)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._g_mount_operation_set_domain((*C.GMountOperation)(_self_._value_), _cgo_domain_)
	return
}

func (_self_ *GioMountOperation) SetPassword(password string) () {
	_cstring_password_ := C.CString(password)
	_cgo_password_ := (*C.char)(unsafe.Pointer(_cstring_password_))
	defer C.free(unsafe.Pointer(_cstring_password_))
	C._g_mount_operation_set_password((*C.GMountOperation)(_self_._value_), _cgo_password_)
	return
}

func (_self_ *GioMountOperation) SetPasswordSave(save C.GPasswordSave) () {
	C.g_mount_operation_set_password_save((*C.GMountOperation)(_self_._value_), save)
	return
}

func (_self_ *GioMountOperation) SetUsername(username string) () {
	_cstring_username_ := C.CString(username)
	_cgo_username_ := (*C.char)(unsafe.Pointer(_cstring_username_))
	defer C.free(unsafe.Pointer(_cstring_username_))
	C._g_mount_operation_set_username((*C.GMountOperation)(_self_._value_), _cgo_username_)
	return
}

func NetworkAddressNew(hostname string, port uint16) (_go__return__ NetworkAddress) {
	var _return_ *C.GSocketConnectable
	_cgo_port_ := (C.guint16)(port)
	_cstring_hostname_ := C.CString(hostname)
	_cgo_hostname_ := (*C.gchar)(unsafe.Pointer(_cstring_hostname_))
	defer C.free(unsafe.Pointer(_cstring_hostname_))
	_return_ = C._g_network_address_new(_cgo_hostname_, _cgo_port_)
	_go__return__ = ToNetworkAddress(unsafe.Pointer(_return_))
	return
}

func NetworkAddressParse(host_and_port string, default_port uint16) (_return_ *C.GSocketConnectable, _error_ unsafe.Pointer) {
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_host_and_port_ := C.CString(host_and_port)
	_cgo_host_and_port_ := (*C.gchar)(unsafe.Pointer(_cstring_host_and_port_))
	defer C.free(unsafe.Pointer(_cstring_host_and_port_))
	_return_ = C._g_network_address_parse(_cgo_host_and_port_, _cgo_default_port_, _error_)
	return
}

func NetworkAddressParseUri(uri string, default_port uint16) (_return_ *C.GSocketConnectable, _error_ unsafe.Pointer) {
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._g_network_address_parse_uri(_cgo_uri_, _cgo_default_port_, _error_)
	return
}

func (_self_ *NetworkAddress) GetHostname() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_address_get_hostname((*C.GNetworkAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NetworkAddress) GetPort() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_network_address_get_port((*C.GNetworkAddress)(_self_._value_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *NetworkAddress) GetScheme() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_address_get_scheme((*C.GNetworkAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func NetworkServiceNew(service string, protocol string, domain string) (_go__return__ NetworkService) {
	var _return_ *C.GSocketConnectable
	_cstring_service_ := C.CString(service)
	_cgo_service_ := (*C.gchar)(unsafe.Pointer(_cstring_service_))
	defer C.free(unsafe.Pointer(_cstring_service_))
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	_return_ = C._g_network_service_new(_cgo_service_, _cgo_protocol_, _cgo_domain_)
	_go__return__ = ToNetworkService(unsafe.Pointer(_return_))
	return
}

func (_self_ *NetworkService) GetDomain() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_service_get_domain((*C.GNetworkService)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NetworkService) GetProtocol() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_service_get_protocol((*C.GNetworkService)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NetworkService) GetScheme() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_service_get_scheme((*C.GNetworkService)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NetworkService) GetService() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_network_service_get_service((*C.GNetworkService)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *NetworkService) SetScheme(scheme string) () {
	_cstring_scheme_ := C.CString(scheme)
	_cgo_scheme_ := (*C.gchar)(unsafe.Pointer(_cstring_scheme_))
	defer C.free(unsafe.Pointer(_cstring_scheme_))
	C._g_network_service_set_scheme((*C.GNetworkService)(_self_._value_), _cgo_scheme_)
	return
}

func (_self_ *OutputStream) ClearPending() () {
	C.g_output_stream_clear_pending((*C.GOutputStream)(_self_._value_))
	return
}

func (_self_ *OutputStream) Close(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_output_stream_close((*C.GOutputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) CloseAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_output_stream_close_async((*C.GOutputStream)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *OutputStream) CloseFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_output_stream_close_finish((*C.GOutputStream)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) Flush(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_output_stream_flush((*C.GOutputStream)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) FlushAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_output_stream_flush_async((*C.GOutputStream)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *OutputStream) FlushFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_output_stream_flush_finish((*C.GOutputStream)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) HasPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_output_stream_has_pending((*C.GOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_output_stream_is_closed((*C.GOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) IsClosing() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_output_stream_is_closing((*C.GOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) SetPending() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_output_stream_set_pending((*C.GOutputStream)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OutputStream) Splice(source InputStreamKind, flags C.GOutputStreamSpliceFlags, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_source_ := (*C.GInputStream)(source.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gssize
	_return_ = C._g_output_stream_splice((*C.GOutputStream)(_self_._value_), _cgo_source_, flags, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *OutputStream) SpliceAsync(source InputStreamKind, flags C.GOutputStreamSpliceFlags, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_source_ := (*C.GInputStream)(source.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_output_stream_splice_async((*C.GOutputStream)(_self_._value_), _cgo_source_, flags, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *OutputStream) SpliceFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_output_stream_splice_finish((*C.GOutputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *OutputStream) WriteBytes(bytes *C.GBytes, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gssize
	_return_ = C._g_output_stream_write_bytes((*C.GOutputStream)(_self_._value_), bytes, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *OutputStream) WriteBytesAsync(bytes *C.GBytes, io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_output_stream_write_bytes_async((*C.GOutputStream)(_self_._value_), bytes, io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *OutputStream) WriteBytesFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_output_stream_write_bytes_finish((*C.GOutputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *OutputStream) WriteFinish(result *C.GAsyncResult) (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_output_stream_write_finish((*C.GOutputStream)(_self_._value_), result, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *Permission) Acquire(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_permission_acquire((*C.GPermission)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) AcquireAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_permission_acquire_async((*C.GPermission)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Permission) AcquireFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_permission_acquire_finish((*C.GPermission)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) GetAllowed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_permission_get_allowed((*C.GPermission)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) GetCanAcquire() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_permission_get_can_acquire((*C.GPermission)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) GetCanRelease() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_permission_get_can_release((*C.GPermission)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) ImplUpdate(allowed bool, can_acquire bool, can_release bool) () {
	_cgo_allowed_ := (C.gboolean)(C.FALSE)
	if allowed { _cgo_allowed_ = (C.gboolean)(C.TRUE) }
	_cgo_can_acquire_ := (C.gboolean)(C.FALSE)
	if can_acquire { _cgo_can_acquire_ = (C.gboolean)(C.TRUE) }
	_cgo_can_release_ := (C.gboolean)(C.FALSE)
	if can_release { _cgo_can_release_ = (C.gboolean)(C.TRUE) }
	C.g_permission_impl_update((*C.GPermission)(_self_._value_), _cgo_allowed_, _cgo_can_acquire_, _cgo_can_release_)
	return
}

func (_self_ *Permission) Release(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_permission_release((*C.GPermission)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Permission) ReleaseAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_permission_release_async((*C.GPermission)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Permission) ReleaseFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_permission_release_finish((*C.GPermission)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ProxyAddressNew(inetaddr InetAddressKind, port uint16, protocol string, dest_hostname string, dest_port uint16, username string, password string) (_go__return__ ProxyAddress) {
	_cgo_inetaddr_ := (*C.GInetAddress)(inetaddr.GetGObject())
	var _return_ *C.GSocketAddress
	_cgo_port_ := (C.guint16)(port)
	_cgo_dest_port_ := (C.guint16)(dest_port)
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	_cstring_dest_hostname_ := C.CString(dest_hostname)
	_cgo_dest_hostname_ := (*C.gchar)(unsafe.Pointer(_cstring_dest_hostname_))
	defer C.free(unsafe.Pointer(_cstring_dest_hostname_))
	_cstring_username_ := C.CString(username)
	_cgo_username_ := (*C.gchar)(unsafe.Pointer(_cstring_username_))
	defer C.free(unsafe.Pointer(_cstring_username_))
	_cstring_password_ := C.CString(password)
	_cgo_password_ := (*C.gchar)(unsafe.Pointer(_cstring_password_))
	defer C.free(unsafe.Pointer(_cstring_password_))
	_return_ = C._g_proxy_address_new(_cgo_inetaddr_, _cgo_port_, _cgo_protocol_, _cgo_dest_hostname_, _cgo_dest_port_, _cgo_username_, _cgo_password_)
	_go__return__ = ToProxyAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *ProxyAddress) GetDestinationHostname() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_destination_hostname((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProxyAddress) GetDestinationPort() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_proxy_address_get_destination_port((*C.GProxyAddress)(_self_._value_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *ProxyAddress) GetDestinationProtocol() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_destination_protocol((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProxyAddress) GetPassword() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_password((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProxyAddress) GetProtocol() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_protocol((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProxyAddress) GetUri() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_uri((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ProxyAddress) GetUsername() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_proxy_address_get_username((*C.GProxyAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ResolverFreeAddresses(addresses *C.GList) () {
	C.g_resolver_free_addresses(addresses)
	return
}

func ResolverFreeTargets(targets *C.GList) () {
	C.g_resolver_free_targets(targets)
	return
}

func ResolverGetDefault() (_go__return__ Resolver) {
	var _return_ *C.GResolver
	_return_ = C.g_resolver_get_default()
	_go__return__ = ToResolver(unsafe.Pointer(_return_))
	return
}

func (_self_ *Resolver) LookupByAddress(address InetAddressKind, cancellable CancellableKind) (_go__return__ string, _error_ unsafe.Pointer) {
	_cgo_address_ := (*C.GInetAddress)(address.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.gchar
	_return_ = C._g_resolver_lookup_by_address((*C.GResolver)(_self_._value_), _cgo_address_, _cgo_cancellable_, _error_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Resolver) LookupByAddressAsync(address InetAddressKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_address_ := (*C.GInetAddress)(address.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_resolver_lookup_by_address_async((*C.GResolver)(_self_._value_), _cgo_address_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Resolver) LookupByAddressFinish(result *C.GAsyncResult) (_go__return__ string, _error_ unsafe.Pointer) {
	var _return_ *C.gchar
	_return_ = C._g_resolver_lookup_by_address_finish((*C.GResolver)(_self_._value_), result, _error_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Resolver) LookupByName(hostname string, cancellable CancellableKind) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_hostname_ := C.CString(hostname)
	_cgo_hostname_ := (*C.gchar)(unsafe.Pointer(_cstring_hostname_))
	defer C.free(unsafe.Pointer(_cstring_hostname_))
	_return_ = C._g_resolver_lookup_by_name((*C.GResolver)(_self_._value_), _cgo_hostname_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *Resolver) LookupByNameAsync(hostname string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_hostname_ := C.CString(hostname)
	_cgo_hostname_ := (*C.gchar)(unsafe.Pointer(_cstring_hostname_))
	defer C.free(unsafe.Pointer(_cstring_hostname_))
	C._g_resolver_lookup_by_name_async((*C.GResolver)(_self_._value_), _cgo_hostname_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Resolver) LookupByNameFinish(result *C.GAsyncResult) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_return_ = C._g_resolver_lookup_by_name_finish((*C.GResolver)(_self_._value_), result, _error_)
	return
}

func (_self_ *Resolver) LookupRecords(rrname string, record_type C.GResolverRecordType, cancellable CancellableKind) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_rrname_ := C.CString(rrname)
	_cgo_rrname_ := (*C.gchar)(unsafe.Pointer(_cstring_rrname_))
	defer C.free(unsafe.Pointer(_cstring_rrname_))
	_return_ = C._g_resolver_lookup_records((*C.GResolver)(_self_._value_), _cgo_rrname_, record_type, _cgo_cancellable_, _error_)
	return
}

func (_self_ *Resolver) LookupRecordsAsync(rrname string, record_type C.GResolverRecordType, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_rrname_ := C.CString(rrname)
	_cgo_rrname_ := (*C.gchar)(unsafe.Pointer(_cstring_rrname_))
	defer C.free(unsafe.Pointer(_cstring_rrname_))
	C._g_resolver_lookup_records_async((*C.GResolver)(_self_._value_), _cgo_rrname_, record_type, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Resolver) LookupRecordsFinish(result *C.GAsyncResult) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_return_ = C._g_resolver_lookup_records_finish((*C.GResolver)(_self_._value_), result, _error_)
	return
}

func (_self_ *Resolver) LookupService(service string, protocol string, domain string, cancellable CancellableKind) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_service_ := C.CString(service)
	_cgo_service_ := (*C.gchar)(unsafe.Pointer(_cstring_service_))
	defer C.free(unsafe.Pointer(_cstring_service_))
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	_return_ = C._g_resolver_lookup_service((*C.GResolver)(_self_._value_), _cgo_service_, _cgo_protocol_, _cgo_domain_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *Resolver) LookupServiceAsync(service string, protocol string, domain string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_service_ := C.CString(service)
	_cgo_service_ := (*C.gchar)(unsafe.Pointer(_cstring_service_))
	defer C.free(unsafe.Pointer(_cstring_service_))
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._g_resolver_lookup_service_async((*C.GResolver)(_self_._value_), _cgo_service_, _cgo_protocol_, _cgo_domain_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *Resolver) LookupServiceFinish(result *C.GAsyncResult) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_return_ = C._g_resolver_lookup_service_finish((*C.GResolver)(_self_._value_), result, _error_)
	return
}

func (_self_ *Resolver) SetDefault() () {
	C.g_resolver_set_default((*C.GResolver)(_self_._value_))
	return
}

func SettingsNew(schema_id string) (_go__return__ GioSettings) {
	var _return_ *C.GSettings
	_cstring_schema_id_ := C.CString(schema_id)
	_cgo_schema_id_ := (*C.gchar)(unsafe.Pointer(_cstring_schema_id_))
	defer C.free(unsafe.Pointer(_cstring_schema_id_))
	_return_ = C._g_settings_new(_cgo_schema_id_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func SettingsNewFull(schema *SettingsSchema, backend *SettingsBackend, path string) (_go__return__ GioSettings) {
	_cgo_schema_ := (*C.GSettingsSchema)(unsafe.Pointer(schema))
	_cgo_backend_ := (*C.GSettingsBackend)(unsafe.Pointer(backend))
	var _return_ *C.GSettings
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_settings_new_full(_cgo_schema_, _cgo_backend_, _cgo_path_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func SettingsNewWithBackend(schema_id string, backend *SettingsBackend) (_go__return__ GioSettings) {
	_cgo_backend_ := (*C.GSettingsBackend)(unsafe.Pointer(backend))
	var _return_ *C.GSettings
	_cstring_schema_id_ := C.CString(schema_id)
	_cgo_schema_id_ := (*C.gchar)(unsafe.Pointer(_cstring_schema_id_))
	defer C.free(unsafe.Pointer(_cstring_schema_id_))
	_return_ = C._g_settings_new_with_backend(_cgo_schema_id_, _cgo_backend_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func SettingsNewWithBackendAndPath(schema_id string, backend *SettingsBackend, path string) (_go__return__ GioSettings) {
	_cgo_backend_ := (*C.GSettingsBackend)(unsafe.Pointer(backend))
	var _return_ *C.GSettings
	_cstring_schema_id_ := C.CString(schema_id)
	_cgo_schema_id_ := (*C.gchar)(unsafe.Pointer(_cstring_schema_id_))
	defer C.free(unsafe.Pointer(_cstring_schema_id_))
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_settings_new_with_backend_and_path(_cgo_schema_id_, _cgo_backend_, _cgo_path_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func SettingsNewWithPath(schema_id string, path string) (_go__return__ GioSettings) {
	var _return_ *C.GSettings
	_cstring_schema_id_ := C.CString(schema_id)
	_cgo_schema_id_ := (*C.gchar)(unsafe.Pointer(_cstring_schema_id_))
	defer C.free(unsafe.Pointer(_cstring_schema_id_))
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_settings_new_with_path(_cgo_schema_id_, _cgo_path_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func SettingsListRelocatableSchemas() (_return_ unsafe.Pointer) {
	_return_ = C._g_settings_list_relocatable_schemas()
	return
}

func SettingsListSchemas() (_return_ unsafe.Pointer) {
	_return_ = C._g_settings_list_schemas()
	return
}

func SettingsSync() () {
	C.g_settings_sync()
	return
}

func SettingsUnbind(object C.gpointer, property string) () {
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._g_settings_unbind(object, _cgo_property_)
	return
}

func (_self_ *GioSettings) Apply() () {
	C.g_settings_apply((*C.GSettings)(_self_._value_))
	return
}

func (_self_ *GioSettings) Bind(key string, object C.gpointer, property string, flags C.GSettingsBindFlags) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._g_settings_bind((*C.GSettings)(_self_._value_), _cgo_key_, object, _cgo_property_, flags)
	return
}

func (_self_ *GioSettings) BindWithMapping(key string, object C.gpointer, property string, flags C.GSettingsBindFlags, get_mapping C.GSettingsBindGetMapping, set_mapping C.GSettingsBindSetMapping, user_data C.gpointer, destroy C.GDestroyNotify) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._g_settings_bind_with_mapping((*C.GSettings)(_self_._value_), _cgo_key_, object, _cgo_property_, flags, get_mapping, set_mapping, user_data, destroy)
	return
}

func (_self_ *GioSettings) BindWritable(key string, object C.gpointer, property string, inverted bool) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	_cgo_inverted_ := (C.gboolean)(C.FALSE)
	if inverted { _cgo_inverted_ = (C.gboolean)(C.TRUE) }
	C._g_settings_bind_writable((*C.GSettings)(_self_._value_), _cgo_key_, object, _cgo_property_, _cgo_inverted_)
	return
}

func (_self_ *GioSettings) CreateAction(key string) (_return_ *C.GAction) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_create_action((*C.GSettings)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *GioSettings) Delay() () {
	C.g_settings_delay((*C.GSettings)(_self_._value_))
	return
}

func (_self_ *GioSettings) GetBoolean(key string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_get_boolean((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) GetChild(name string) (_go__return__ GioSettings) {
	var _return_ *C.GSettings
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_settings_get_child((*C.GSettings)(_self_._value_), _cgo_name_)
	_go__return__ = ToGioSettings(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSettings) GetDouble(key string) (_go__return__ float64) {
	var _return_ C.gdouble
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_double((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *GioSettings) GetEnum(key string) (_go__return__ int) {
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_enum((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GioSettings) GetFlags(key string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_flags((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioSettings) GetHasUnapplied() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_settings_get_has_unapplied((*C.GSettings)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) GetInt(key string) (_go__return__ int) {
	var _return_ C.gint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_int((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GioSettings) GetMapped(key string, mapping C.GSettingsGetMapping, user_data C.gpointer) (_return_ C.gpointer) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_mapped((*C.GSettings)(_self_._value_), _cgo_key_, mapping, user_data)
	return
}

func (_self_ *GioSettings) GetRange(key string) (_return_ *C.GVariant) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_range((*C.GSettings)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *GioSettings) GetString(key string) (_go__return__ string) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ *C.gchar
	_return_ = C._g_settings_get_string((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *GioSettings) GetStrv(key string) (_return_ unsafe.Pointer) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_strv((*C.GSettings)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *GioSettings) GetUint(key string) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_uint((*C.GSettings)(_self_._value_), _cgo_key_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioSettings) GetValue(key string) (_return_ *C.GVariant) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_settings_get_value((*C.GSettings)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *GioSettings) IsWritable(name string) (_go__return__ bool) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._g_settings_is_writable((*C.GSettings)(_self_._value_), _cgo_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) ListChildren() (_return_ unsafe.Pointer) {
	_return_ = C._g_settings_list_children((*C.GSettings)(_self_._value_))
	return
}

func (_self_ *GioSettings) ListKeys() (_return_ unsafe.Pointer) {
	_return_ = C._g_settings_list_keys((*C.GSettings)(_self_._value_))
	return
}

func (_self_ *GioSettings) RangeCheck(key string, value *C.GVariant) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_range_check((*C.GSettings)(_self_._value_), _cgo_key_, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) Reset(key string) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._g_settings_reset((*C.GSettings)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *GioSettings) Revert() () {
	C.g_settings_revert((*C.GSettings)(_self_._value_))
	return
}

func (_self_ *GioSettings) SetBoolean(key string, value bool) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cgo_value_ := (C.gboolean)(C.FALSE)
	if value { _cgo_value_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_settings_set_boolean((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetDouble(key string, value float64) (_go__return__ bool) {
	_cgo_value_ := (C.gdouble)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_double((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetEnum(key string, value int) (_go__return__ bool) {
	_cgo_value_ := (C.gint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_enum((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetFlags(key string, value uint) (_go__return__ bool) {
	_cgo_value_ := (C.guint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_flags((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetInt(key string, value int) (_go__return__ bool) {
	_cgo_value_ := (C.gint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_int((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetString(key string, value string) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_cstring_value_ := C.CString(value)
	_cgo_value_ := (*C.gchar)(unsafe.Pointer(_cstring_value_))
	defer C.free(unsafe.Pointer(_cstring_value_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_string((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetUint(key string, value uint) (_go__return__ bool) {
	_cgo_value_ := (C.guint)(value)
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_uint((*C.GSettings)(_self_._value_), _cgo_key_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSettings) SetValue(key string, value *C.GVariant) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_settings_set_value((*C.GSettings)(_self_._value_), _cgo_key_, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SimpleActionNew(name string, parameter_type *C.GVariantType) (_go__return__ SimpleAction) {
	var _return_ *C.GSimpleAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_simple_action_new(_cgo_name_, parameter_type)
	_go__return__ = ToSimpleAction(unsafe.Pointer(_return_))
	return
}

func SimpleActionNewStateful(name string, parameter_type *C.GVariantType, state *C.GVariant) (_go__return__ SimpleAction) {
	var _return_ *C.GSimpleAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_simple_action_new_stateful(_cgo_name_, parameter_type, state)
	_go__return__ = ToSimpleAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *SimpleAction) SetEnabled(enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.g_simple_action_set_enabled((*C.GSimpleAction)(_self_._value_), _cgo_enabled_)
	return
}

func (_self_ *SimpleAction) SetState(value *C.GVariant) () {
	C.g_simple_action_set_state((*C.GSimpleAction)(_self_._value_), value)
	return
}

func SimpleActionGroupNew() (_go__return__ SimpleActionGroup) {
	var _return_ *C.GSimpleActionGroup
	_return_ = C.g_simple_action_group_new()
	_go__return__ = ToSimpleActionGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *SimpleActionGroup) Insert(action *C.GAction) () {
	C.g_simple_action_group_insert((*C.GSimpleActionGroup)(_self_._value_), action)
	return
}

func (_self_ *SimpleActionGroup) Lookup(action_name string) (_return_ *C.GAction) {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	_return_ = C._g_simple_action_group_lookup((*C.GSimpleActionGroup)(_self_._value_), _cgo_action_name_)
	return
}

func (_self_ *SimpleActionGroup) Remove(action_name string) () {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._g_simple_action_group_remove((*C.GSimpleActionGroup)(_self_._value_), _cgo_action_name_)
	return
}

func SimpleAsyncResultNew(source_object *C.GObject, callback C.GAsyncReadyCallback, user_data C.gpointer, source_tag C.gpointer) (_go__return__ SimpleAsyncResult) {
	var _return_ *C.GSimpleAsyncResult
	_return_ = C.g_simple_async_result_new(source_object, callback, user_data, source_tag)
	_go__return__ = ToSimpleAsyncResult(unsafe.Pointer(_return_))
	return
}

func SimpleAsyncResultNewFromError(source_object *C.GObject, callback C.GAsyncReadyCallback, user_data C.gpointer, error_ *C.GError) (_go__return__ SimpleAsyncResult) {
	var _return_ *C.GSimpleAsyncResult
	_return_ = C._g_simple_async_result_new_from_error(source_object, callback, user_data, error_)
	_go__return__ = ToSimpleAsyncResult(unsafe.Pointer(_return_))
	return
}

func SimpleAsyncResultNewTakeError(source_object *C.GObject, callback C.GAsyncReadyCallback, user_data C.gpointer, error_ *C.GError) (_go__return__ SimpleAsyncResult) {
	var _return_ *C.GSimpleAsyncResult
	_return_ = C.g_simple_async_result_new_take_error(source_object, callback, user_data, error_)
	_go__return__ = ToSimpleAsyncResult(unsafe.Pointer(_return_))
	return
}

func SimpleAsyncResultIsValid(result *C.GAsyncResult, source *C.GObject, source_tag C.gpointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_simple_async_result_is_valid(result, source, source_tag)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SimpleAsyncResult) Complete() () {
	C.g_simple_async_result_complete((*C.GSimpleAsyncResult)(_self_._value_))
	return
}

func (_self_ *SimpleAsyncResult) CompleteInIdle() () {
	C.g_simple_async_result_complete_in_idle((*C.GSimpleAsyncResult)(_self_._value_))
	return
}

func (_self_ *SimpleAsyncResult) GetOpResGboolean() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_simple_async_result_get_op_res_gboolean((*C.GSimpleAsyncResult)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SimpleAsyncResult) GetOpResGpointer() (_return_ C.gpointer) {
	_return_ = C.g_simple_async_result_get_op_res_gpointer((*C.GSimpleAsyncResult)(_self_._value_))
	return
}

func (_self_ *SimpleAsyncResult) GetOpResGssize() (_go__return__ int64) {
	var _return_ C.gssize
	_return_ = C.g_simple_async_result_get_op_res_gssize((*C.GSimpleAsyncResult)(_self_._value_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *SimpleAsyncResult) GetSourceTag() (_return_ C.gpointer) {
	_return_ = C.g_simple_async_result_get_source_tag((*C.GSimpleAsyncResult)(_self_._value_))
	return
}

func (_self_ *SimpleAsyncResult) PropagateError() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_simple_async_result_propagate_error((*C.GSimpleAsyncResult)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SimpleAsyncResult) RunInThread(func_ C.GSimpleAsyncThreadFunc, io_priority C.int, cancellable CancellableKind) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_simple_async_result_run_in_thread((*C.GSimpleAsyncResult)(_self_._value_), func_, io_priority, _cgo_cancellable_)
	return
}

func (_self_ *SimpleAsyncResult) SetCheckCancellable(check_cancellable CancellableKind) () {
	_cgo_check_cancellable_ := (*C.GCancellable)(check_cancellable.GetGObject())
	C.g_simple_async_result_set_check_cancellable((*C.GSimpleAsyncResult)(_self_._value_), _cgo_check_cancellable_)
	return
}

func (_self_ *SimpleAsyncResult) SetFromError(error_ *C.GError) () {
	C._g_simple_async_result_set_from_error((*C.GSimpleAsyncResult)(_self_._value_), error_)
	return
}

func (_self_ *SimpleAsyncResult) SetHandleCancellation(handle_cancellation bool) () {
	_cgo_handle_cancellation_ := (C.gboolean)(C.FALSE)
	if handle_cancellation { _cgo_handle_cancellation_ = (C.gboolean)(C.TRUE) }
	C.g_simple_async_result_set_handle_cancellation((*C.GSimpleAsyncResult)(_self_._value_), _cgo_handle_cancellation_)
	return
}

func (_self_ *SimpleAsyncResult) SetOpResGboolean(op_res bool) () {
	_cgo_op_res_ := (C.gboolean)(C.FALSE)
	if op_res { _cgo_op_res_ = (C.gboolean)(C.TRUE) }
	C.g_simple_async_result_set_op_res_gboolean((*C.GSimpleAsyncResult)(_self_._value_), _cgo_op_res_)
	return
}

func (_self_ *SimpleAsyncResult) SetOpResGpointer(op_res C.gpointer, destroy_op_res C.GDestroyNotify) () {
	C.g_simple_async_result_set_op_res_gpointer((*C.GSimpleAsyncResult)(_self_._value_), op_res, destroy_op_res)
	return
}

func (_self_ *SimpleAsyncResult) SetOpResGssize(op_res int64) () {
	_cgo_op_res_ := (C.gssize)(op_res)
	C.g_simple_async_result_set_op_res_gssize((*C.GSimpleAsyncResult)(_self_._value_), _cgo_op_res_)
	return
}

func (_self_ *SimpleAsyncResult) TakeError(error_ *C.GError) () {
	C.g_simple_async_result_take_error((*C.GSimpleAsyncResult)(_self_._value_), error_)
	return
}

func SimplePermissionNew(allowed bool) (_go__return__ SimplePermission) {
	var _return_ *C.GPermission
	_cgo_allowed_ := (C.gboolean)(C.FALSE)
	if allowed { _cgo_allowed_ = (C.gboolean)(C.TRUE) }
	_return_ = C.g_simple_permission_new(_cgo_allowed_)
	_go__return__ = ToSimplePermission(unsafe.Pointer(_return_))
	return
}

func GioSocketNew(family C.GSocketFamily, type_ C.GSocketType, protocol C.GSocketProtocol) (_go__return__ GioSocket, _error_ unsafe.Pointer) {
	var _return_ *C.GSocket
	_return_ = C._g_socket_new(family, type_, protocol, _error_)
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func SocketNewFromFd(fd int) (_go__return__ GioSocket, _error_ unsafe.Pointer) {
	var _return_ *C.GSocket
	_cgo_fd_ := (C.gint)(fd)
	_return_ = C._g_socket_new_from_fd(_cgo_fd_, _error_)
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) Accept(cancellable CancellableKind) (_go__return__ GioSocket, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocket
	_return_ = C._g_socket_accept((*C.GSocket)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) Bind(address SocketAddressKind, allow_reuse bool) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	_cgo_allow_reuse_ := (C.gboolean)(C.FALSE)
	if allow_reuse { _cgo_allow_reuse_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_socket_bind((*C.GSocket)(_self_._value_), _cgo_address_, _cgo_allow_reuse_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) CheckConnectResult() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_socket_check_connect_result((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) Close() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_socket_close((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) ConditionCheck(condition C.GIOCondition) (_return_ C.GIOCondition) {
	_return_ = C.g_socket_condition_check((*C.GSocket)(_self_._value_), condition)
	return
}

func (_self_ *GioSocket) ConditionTimedWait(condition C.GIOCondition, timeout int64, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_timeout_ := (C.gint64)(timeout)
	var _return_ C.gboolean
	_return_ = C._g_socket_condition_timed_wait((*C.GSocket)(_self_._value_), condition, _cgo_timeout_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) ConditionWait(condition C.GIOCondition, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_socket_condition_wait((*C.GSocket)(_self_._value_), condition, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) Connect(address SocketAddressKind, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_socket_connect((*C.GSocket)(_self_._value_), _cgo_address_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) ConnectionFactoryCreateConnection() (_go__return__ SocketConnection) {
	var _return_ *C.GSocketConnection
	_return_ = C.g_socket_connection_factory_create_connection((*C.GSocket)(_self_._value_))
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) CreateSource(condition C.GIOCondition, cancellable CancellableKind) (_return_ *C.GSource) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_return_ = C.g_socket_create_source((*C.GSocket)(_self_._value_), condition, _cgo_cancellable_)
	return
}

func (_self_ *GioSocket) GetAvailableBytes() (_go__return__ int64) {
	var _return_ C.gssize
	_return_ = C.g_socket_get_available_bytes((*C.GSocket)(_self_._value_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *GioSocket) GetBlocking() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_get_blocking((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) GetBroadcast() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_get_broadcast((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) GetCredentials() (_go__return__ Credentials, _error_ unsafe.Pointer) {
	var _return_ *C.GCredentials
	_return_ = C._g_socket_get_credentials((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) GetFamily() (_return_ C.GSocketFamily) {
	_return_ = C.g_socket_get_family((*C.GSocket)(_self_._value_))
	return
}

func (_self_ *GioSocket) GetFd() (_return_ C.int) {
	_return_ = C.g_socket_get_fd((*C.GSocket)(_self_._value_))
	return
}

func (_self_ *GioSocket) GetKeepalive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_get_keepalive((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) GetListenBacklog() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_socket_get_listen_backlog((*C.GSocket)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GioSocket) GetLocalAddress() (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_get_local_address((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) GetMulticastLoopback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_get_multicast_loopback((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) GetMulticastTtl() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_socket_get_multicast_ttl((*C.GSocket)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioSocket) GetProtocol() (_return_ C.GSocketProtocol) {
	_return_ = C.g_socket_get_protocol((*C.GSocket)(_self_._value_))
	return
}

func (_self_ *GioSocket) GetRemoteAddress() (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_get_remote_address((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *GioSocket) GetSocketType() (_return_ C.GSocketType) {
	_return_ = C.g_socket_get_socket_type((*C.GSocket)(_self_._value_))
	return
}

func (_self_ *GioSocket) GetTimeout() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_socket_get_timeout((*C.GSocket)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioSocket) GetTtl() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_socket_get_ttl((*C.GSocket)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GioSocket) IsClosed() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_is_closed((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) IsConnected() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_is_connected((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) JoinMulticastGroup(group InetAddressKind, source_specific bool, iface string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_group_ := (*C.GInetAddress)(group.GetGObject())
	_cstring_iface_ := C.CString(iface)
	_cgo_iface_ := (*C.gchar)(unsafe.Pointer(_cstring_iface_))
	defer C.free(unsafe.Pointer(_cstring_iface_))
	_cgo_source_specific_ := (C.gboolean)(C.FALSE)
	if source_specific { _cgo_source_specific_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_socket_join_multicast_group((*C.GSocket)(_self_._value_), _cgo_group_, _cgo_source_specific_, _cgo_iface_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) LeaveMulticastGroup(group InetAddressKind, source_specific bool, iface string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_group_ := (*C.GInetAddress)(group.GetGObject())
	_cstring_iface_ := C.CString(iface)
	_cgo_iface_ := (*C.gchar)(unsafe.Pointer(_cstring_iface_))
	defer C.free(unsafe.Pointer(_cstring_iface_))
	_cgo_source_specific_ := (C.gboolean)(C.FALSE)
	if source_specific { _cgo_source_specific_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_socket_leave_multicast_group((*C.GSocket)(_self_._value_), _cgo_group_, _cgo_source_specific_, _cgo_iface_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) Listen() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_socket_listen((*C.GSocket)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) Receive(buffer string, size uint64, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_size_ := (C.gsize)(size)
	var _return_ C.gssize
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_return_ = C._g_socket_receive((*C.GSocket)(_self_._value_), _cgo_buffer_, _cgo_size_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *GioSocket) ReceiveWithBlocking(buffer string, size uint64, blocking bool, cancellable CancellableKind) (_go__return__ int64, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_size_ := (C.gsize)(size)
	var _return_ C.gssize
	_cstring_buffer_ := C.CString(buffer)
	_cgo_buffer_ := (*C.gchar)(unsafe.Pointer(_cstring_buffer_))
	defer C.free(unsafe.Pointer(_cstring_buffer_))
	_cgo_blocking_ := (C.gboolean)(C.FALSE)
	if blocking { _cgo_blocking_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_socket_receive_with_blocking((*C.GSocket)(_self_._value_), _cgo_buffer_, _cgo_size_, _cgo_blocking_, _cgo_cancellable_, _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *GioSocket) SetBlocking(blocking bool) () {
	_cgo_blocking_ := (C.gboolean)(C.FALSE)
	if blocking { _cgo_blocking_ = (C.gboolean)(C.TRUE) }
	C.g_socket_set_blocking((*C.GSocket)(_self_._value_), _cgo_blocking_)
	return
}

func (_self_ *GioSocket) SetBroadcast(broadcast bool) () {
	_cgo_broadcast_ := (C.gboolean)(C.FALSE)
	if broadcast { _cgo_broadcast_ = (C.gboolean)(C.TRUE) }
	C.g_socket_set_broadcast((*C.GSocket)(_self_._value_), _cgo_broadcast_)
	return
}

func (_self_ *GioSocket) SetKeepalive(keepalive bool) () {
	_cgo_keepalive_ := (C.gboolean)(C.FALSE)
	if keepalive { _cgo_keepalive_ = (C.gboolean)(C.TRUE) }
	C.g_socket_set_keepalive((*C.GSocket)(_self_._value_), _cgo_keepalive_)
	return
}

func (_self_ *GioSocket) SetListenBacklog(backlog int) () {
	_cgo_backlog_ := (C.gint)(backlog)
	C.g_socket_set_listen_backlog((*C.GSocket)(_self_._value_), _cgo_backlog_)
	return
}

func (_self_ *GioSocket) SetMulticastLoopback(loopback bool) () {
	_cgo_loopback_ := (C.gboolean)(C.FALSE)
	if loopback { _cgo_loopback_ = (C.gboolean)(C.TRUE) }
	C.g_socket_set_multicast_loopback((*C.GSocket)(_self_._value_), _cgo_loopback_)
	return
}

func (_self_ *GioSocket) SetMulticastTtl(ttl uint) () {
	_cgo_ttl_ := (C.guint)(ttl)
	C.g_socket_set_multicast_ttl((*C.GSocket)(_self_._value_), _cgo_ttl_)
	return
}

func (_self_ *GioSocket) SetTimeout(timeout uint) () {
	_cgo_timeout_ := (C.guint)(timeout)
	C.g_socket_set_timeout((*C.GSocket)(_self_._value_), _cgo_timeout_)
	return
}

func (_self_ *GioSocket) SetTtl(ttl uint) () {
	_cgo_ttl_ := (C.guint)(ttl)
	C.g_socket_set_ttl((*C.GSocket)(_self_._value_), _cgo_ttl_)
	return
}

func (_self_ *GioSocket) Shutdown(shutdown_read bool, shutdown_write bool) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_shutdown_read_ := (C.gboolean)(C.FALSE)
	if shutdown_read { _cgo_shutdown_read_ = (C.gboolean)(C.TRUE) }
	_cgo_shutdown_write_ := (C.gboolean)(C.FALSE)
	if shutdown_write { _cgo_shutdown_write_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_socket_shutdown((*C.GSocket)(_self_._value_), _cgo_shutdown_read_, _cgo_shutdown_write_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GioSocket) SpeaksIpv4() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_speaks_ipv4((*C.GSocket)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SocketAddressNewFromNative(native C.gpointer, len_ uint64) (_go__return__ SocketAddress) {
	var _return_ *C.GSocketAddress
	_cgo_len__ := (C.gsize)(len_)
	_return_ = C.g_socket_address_new_from_native(native, _cgo_len__)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketAddress) GetFamily() (_return_ C.GSocketFamily) {
	_return_ = C.g_socket_address_get_family((*C.GSocketAddress)(_self_._value_))
	return
}

func (_self_ *SocketAddress) GetNativeSize() (_go__return__ int64) {
	var _return_ C.gssize
	_return_ = C.g_socket_address_get_native_size((*C.GSocketAddress)(_self_._value_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *SocketAddress) ToNative(dest C.gpointer, destlen uint64) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_destlen_ := (C.gsize)(destlen)
	var _return_ C.gboolean
	_return_ = C._g_socket_address_to_native((*C.GSocketAddress)(_self_._value_), dest, _cgo_destlen_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketAddressEnumerator) Next(cancellable CancellableKind) (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_address_enumerator_next((*C.GSocketAddressEnumerator)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketAddressEnumerator) NextAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_socket_address_enumerator_next_async((*C.GSocketAddressEnumerator)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketAddressEnumerator) NextFinish(result *C.GAsyncResult) (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_address_enumerator_next_finish((*C.GSocketAddressEnumerator)(_self_._value_), result, _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func SocketClientNew() (_go__return__ SocketClient) {
	var _return_ *C.GSocketClient
	_return_ = C.g_socket_client_new()
	_go__return__ = ToSocketClient(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) AddApplicationProxy(protocol string) () {
	_cstring_protocol_ := C.CString(protocol)
	_cgo_protocol_ := (*C.gchar)(unsafe.Pointer(_cstring_protocol_))
	defer C.free(unsafe.Pointer(_cstring_protocol_))
	C._g_socket_client_add_application_proxy((*C.GSocketClient)(_self_._value_), _cgo_protocol_)
	return
}

func (_self_ *SocketClient) Connect(connectable *C.GSocketConnectable, cancellable CancellableKind) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_client_connect((*C.GSocketClient)(_self_._value_), connectable, _cgo_cancellable_, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectAsync(connectable *C.GSocketConnectable, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_socket_client_connect_async((*C.GSocketClient)(_self_._value_), connectable, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketClient) ConnectFinish(result *C.GAsyncResult) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_client_connect_finish((*C.GSocketClient)(_self_._value_), result, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToHost(host_and_port string, default_port uint16, cancellable CancellableKind) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketConnection
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_host_and_port_ := C.CString(host_and_port)
	_cgo_host_and_port_ := (*C.gchar)(unsafe.Pointer(_cstring_host_and_port_))
	defer C.free(unsafe.Pointer(_cstring_host_and_port_))
	_return_ = C._g_socket_client_connect_to_host((*C.GSocketClient)(_self_._value_), _cgo_host_and_port_, _cgo_default_port_, _cgo_cancellable_, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToHostAsync(host_and_port string, default_port uint16, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_host_and_port_ := C.CString(host_and_port)
	_cgo_host_and_port_ := (*C.gchar)(unsafe.Pointer(_cstring_host_and_port_))
	defer C.free(unsafe.Pointer(_cstring_host_and_port_))
	C._g_socket_client_connect_to_host_async((*C.GSocketClient)(_self_._value_), _cgo_host_and_port_, _cgo_default_port_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketClient) ConnectToHostFinish(result *C.GAsyncResult) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_client_connect_to_host_finish((*C.GSocketClient)(_self_._value_), result, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToService(domain string, service string, cancellable CancellableKind) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketConnection
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	_cstring_service_ := C.CString(service)
	_cgo_service_ := (*C.gchar)(unsafe.Pointer(_cstring_service_))
	defer C.free(unsafe.Pointer(_cstring_service_))
	_return_ = C._g_socket_client_connect_to_service((*C.GSocketClient)(_self_._value_), _cgo_domain_, _cgo_service_, _cgo_cancellable_, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToServiceAsync(domain string, service string, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	_cstring_service_ := C.CString(service)
	_cgo_service_ := (*C.gchar)(unsafe.Pointer(_cstring_service_))
	defer C.free(unsafe.Pointer(_cstring_service_))
	C._g_socket_client_connect_to_service_async((*C.GSocketClient)(_self_._value_), _cgo_domain_, _cgo_service_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketClient) ConnectToServiceFinish(result *C.GAsyncResult) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_client_connect_to_service_finish((*C.GSocketClient)(_self_._value_), result, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToUri(uri string, default_port uint16, cancellable CancellableKind) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketConnection
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._g_socket_client_connect_to_uri((*C.GSocketClient)(_self_._value_), _cgo_uri_, _cgo_default_port_, _cgo_cancellable_, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) ConnectToUriAsync(uri string, default_port uint16, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_default_port_ := (C.guint16)(default_port)
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.gchar)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	C._g_socket_client_connect_to_uri_async((*C.GSocketClient)(_self_._value_), _cgo_uri_, _cgo_default_port_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketClient) ConnectToUriFinish(result *C.GAsyncResult) (_go__return__ SocketConnection, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_client_connect_to_uri_finish((*C.GSocketClient)(_self_._value_), result, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) GetEnableProxy() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_client_get_enable_proxy((*C.GSocketClient)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketClient) GetFamily() (_return_ C.GSocketFamily) {
	_return_ = C.g_socket_client_get_family((*C.GSocketClient)(_self_._value_))
	return
}

func (_self_ *SocketClient) GetLocalAddress() (_go__return__ SocketAddress) {
	var _return_ *C.GSocketAddress
	_return_ = C.g_socket_client_get_local_address((*C.GSocketClient)(_self_._value_))
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketClient) GetProtocol() (_return_ C.GSocketProtocol) {
	_return_ = C.g_socket_client_get_protocol((*C.GSocketClient)(_self_._value_))
	return
}

func (_self_ *SocketClient) GetSocketType() (_return_ C.GSocketType) {
	_return_ = C.g_socket_client_get_socket_type((*C.GSocketClient)(_self_._value_))
	return
}

func (_self_ *SocketClient) GetTimeout() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_socket_client_get_timeout((*C.GSocketClient)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *SocketClient) GetTls() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_client_get_tls((*C.GSocketClient)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketClient) GetTlsValidationFlags() (_return_ C.GTlsCertificateFlags) {
	_return_ = C.g_socket_client_get_tls_validation_flags((*C.GSocketClient)(_self_._value_))
	return
}

func (_self_ *SocketClient) SetEnableProxy(enable bool) () {
	_cgo_enable_ := (C.gboolean)(C.FALSE)
	if enable { _cgo_enable_ = (C.gboolean)(C.TRUE) }
	C.g_socket_client_set_enable_proxy((*C.GSocketClient)(_self_._value_), _cgo_enable_)
	return
}

func (_self_ *SocketClient) SetFamily(family C.GSocketFamily) () {
	C.g_socket_client_set_family((*C.GSocketClient)(_self_._value_), family)
	return
}

func (_self_ *SocketClient) SetLocalAddress(address SocketAddressKind) () {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	C.g_socket_client_set_local_address((*C.GSocketClient)(_self_._value_), _cgo_address_)
	return
}

func (_self_ *SocketClient) SetProtocol(protocol C.GSocketProtocol) () {
	C.g_socket_client_set_protocol((*C.GSocketClient)(_self_._value_), protocol)
	return
}

func (_self_ *SocketClient) SetSocketType(type_ C.GSocketType) () {
	C.g_socket_client_set_socket_type((*C.GSocketClient)(_self_._value_), type_)
	return
}

func (_self_ *SocketClient) SetTimeout(timeout uint) () {
	_cgo_timeout_ := (C.guint)(timeout)
	C.g_socket_client_set_timeout((*C.GSocketClient)(_self_._value_), _cgo_timeout_)
	return
}

func (_self_ *SocketClient) SetTls(tls bool) () {
	_cgo_tls_ := (C.gboolean)(C.FALSE)
	if tls { _cgo_tls_ = (C.gboolean)(C.TRUE) }
	C.g_socket_client_set_tls((*C.GSocketClient)(_self_._value_), _cgo_tls_)
	return
}

func (_self_ *SocketClient) SetTlsValidationFlags(flags C.GTlsCertificateFlags) () {
	C.g_socket_client_set_tls_validation_flags((*C.GSocketClient)(_self_._value_), flags)
	return
}

func SocketConnectionFactoryLookupType(family C.GSocketFamily, type_ C.GSocketType, protocol_id int) (_return_ C.GType) {
	_cgo_protocol_id_ := (C.gint)(protocol_id)
	_return_ = C.g_socket_connection_factory_lookup_type(family, type_, _cgo_protocol_id_)
	return
}

func SocketConnectionFactoryRegisterType(g_type C.GType, family C.GSocketFamily, type_ C.GSocketType, protocol int) () {
	_cgo_protocol_ := (C.gint)(protocol)
	C.g_socket_connection_factory_register_type(g_type, family, type_, _cgo_protocol_)
	return
}

func (_self_ *SocketConnection) Connect(address SocketAddressKind, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_socket_connection_connect((*C.GSocketConnection)(_self_._value_), _cgo_address_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketConnection) ConnectAsync(address SocketAddressKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_socket_connection_connect_async((*C.GSocketConnection)(_self_._value_), _cgo_address_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketConnection) ConnectFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_socket_connection_connect_finish((*C.GSocketConnection)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketConnection) GetLocalAddress() (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_connection_get_local_address((*C.GSocketConnection)(_self_._value_), _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketConnection) GetRemoteAddress() (_go__return__ SocketAddress, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketAddress
	_return_ = C._g_socket_connection_get_remote_address((*C.GSocketConnection)(_self_._value_), _error_)
	_go__return__ = ToSocketAddress(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketConnection) GetSocket() (_go__return__ GioSocket) {
	var _return_ *C.GSocket
	_return_ = C.g_socket_connection_get_socket((*C.GSocketConnection)(_self_._value_))
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketConnection) IsConnected() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_connection_is_connected((*C.GSocketConnection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketControlMessage) GetLevel() (_return_ C.int) {
	_return_ = C.g_socket_control_message_get_level((*C.GSocketControlMessage)(_self_._value_))
	return
}

func (_self_ *SocketControlMessage) GetMsgType() (_return_ C.int) {
	_return_ = C.g_socket_control_message_get_msg_type((*C.GSocketControlMessage)(_self_._value_))
	return
}

func (_self_ *SocketControlMessage) GetSize() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_socket_control_message_get_size((*C.GSocketControlMessage)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *SocketControlMessage) Serialize(data C.gpointer) () {
	C.g_socket_control_message_serialize((*C.GSocketControlMessage)(_self_._value_), data)
	return
}

func SocketListenerNew() (_go__return__ SocketListener) {
	var _return_ *C.GSocketListener
	_return_ = C.g_socket_listener_new()
	_go__return__ = ToSocketListener(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketListener) Accept(cancellable CancellableKind) (_go__return__ SocketConnection, source_object unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_listener_accept((*C.GSocketListener)(_self_._value_), source_object, _cgo_cancellable_, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketListener) AcceptAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_socket_listener_accept_async((*C.GSocketListener)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketListener) AcceptFinish(result *C.GAsyncResult) (_go__return__ SocketConnection, source_object unsafe.Pointer, _error_ unsafe.Pointer) {
	var _return_ *C.GSocketConnection
	_return_ = C._g_socket_listener_accept_finish((*C.GSocketListener)(_self_._value_), result, source_object, _error_)
	_go__return__ = ToSocketConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketListener) AcceptSocket(cancellable CancellableKind) (_go__return__ GioSocket, source_object unsafe.Pointer, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GSocket
	_return_ = C._g_socket_listener_accept_socket((*C.GSocketListener)(_self_._value_), source_object, _cgo_cancellable_, _error_)
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketListener) AcceptSocketAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_socket_listener_accept_socket_async((*C.GSocketListener)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *SocketListener) AcceptSocketFinish(result *C.GAsyncResult) (_go__return__ GioSocket, source_object unsafe.Pointer, _error_ unsafe.Pointer) {
	var _return_ *C.GSocket
	_return_ = C._g_socket_listener_accept_socket_finish((*C.GSocketListener)(_self_._value_), result, source_object, _error_)
	_go__return__ = ToGioSocket(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketListener) AddAddress(address SocketAddressKind, type_ C.GSocketType, protocol C.GSocketProtocol, source_object *C.GObject) (_go__return__ bool, effective_address *SocketAddress, _error_ unsafe.Pointer) {
	_cgo_address_ := (*C.GSocketAddress)(address.GetGObject())
	var _allocated_effective_address_ *C.GSocketAddress
	var _return_ C.gboolean
	_return_ = C._g_socket_listener_add_address((*C.GSocketListener)(_self_._value_), _cgo_address_, type_, protocol, source_object, unsafe.Pointer(&_allocated_effective_address_), _error_)
	effective_address = (*SocketAddress)(unsafe.Pointer(_allocated_effective_address_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketListener) AddAnyInetPort(source_object *C.GObject) (_go__return__ uint16, _error_ unsafe.Pointer) {
	var _return_ C.guint16
	_return_ = C._g_socket_listener_add_any_inet_port((*C.GSocketListener)(_self_._value_), source_object, _error_)
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *SocketListener) AddInetPort(port uint16, source_object *C.GObject) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_port_ := (C.guint16)(port)
	var _return_ C.gboolean
	_return_ = C._g_socket_listener_add_inet_port((*C.GSocketListener)(_self_._value_), _cgo_port_, source_object, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketListener) AddSocket(socket GioSocketKind, source_object *C.GObject) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_socket_ := (*C.GSocket)(socket.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_socket_listener_add_socket((*C.GSocketListener)(_self_._value_), _cgo_socket_, source_object, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketListener) Close() () {
	C.g_socket_listener_close((*C.GSocketListener)(_self_._value_))
	return
}

func (_self_ *SocketListener) SetBacklog(listen_backlog C.int) () {
	C.g_socket_listener_set_backlog((*C.GSocketListener)(_self_._value_), listen_backlog)
	return
}

func SocketServiceNew() (_go__return__ SocketService) {
	var _return_ *C.GSocketService
	_return_ = C.g_socket_service_new()
	_go__return__ = ToSocketService(unsafe.Pointer(_return_))
	return
}

func (_self_ *SocketService) IsActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_socket_service_is_active((*C.GSocketService)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *SocketService) Start() () {
	C.g_socket_service_start((*C.GSocketService)(_self_._value_))
	return
}

func (_self_ *SocketService) Stop() () {
	C.g_socket_service_stop((*C.GSocketService)(_self_._value_))
	return
}

func TaskNew(source_object C.gpointer, cancellable CancellableKind, callback C.GAsyncReadyCallback, callback_data C.gpointer) (_go__return__ Task) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GTask
	_return_ = C.g_task_new(source_object, _cgo_cancellable_, callback, callback_data)
	_go__return__ = ToTask(unsafe.Pointer(_return_))
	return
}

func TaskIsValid(result C.gpointer, source_object C.gpointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_task_is_valid(result, source_object)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TaskReportError(source_object C.gpointer, callback C.GAsyncReadyCallback, callback_data C.gpointer, source_tag C.gpointer, error_ *C.GError) () {
	C.g_task_report_error(source_object, callback, callback_data, source_tag, error_)
	return
}

func (_self_ *Task) AttachSource(source *C.GSource, callback C.GSourceFunc) () {
	C.g_task_attach_source((*C.GTask)(_self_._value_), source, callback)
	return
}

func (_self_ *Task) GetCancellable() (_go__return__ Cancellable) {
	var _return_ *C.GCancellable
	_return_ = C.g_task_get_cancellable((*C.GTask)(_self_._value_))
	_go__return__ = ToCancellable(unsafe.Pointer(_return_))
	return
}

func (_self_ *Task) GetCheckCancellable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_task_get_check_cancellable((*C.GTask)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) GetContext() (_return_ *C.GMainContext) {
	_return_ = C.g_task_get_context((*C.GTask)(_self_._value_))
	return
}

func (_self_ *Task) GetPriority() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_task_get_priority((*C.GTask)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Task) GetReturnOnCancel() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_task_get_return_on_cancel((*C.GTask)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) GetSourceObject() (_return_ C.gpointer) {
	_return_ = C.g_task_get_source_object((*C.GTask)(_self_._value_))
	return
}

func (_self_ *Task) GetSourceTag() (_return_ C.gpointer) {
	_return_ = C.g_task_get_source_tag((*C.GTask)(_self_._value_))
	return
}

func (_self_ *Task) GetTaskData() (_return_ C.gpointer) {
	_return_ = C.g_task_get_task_data((*C.GTask)(_self_._value_))
	return
}

func (_self_ *Task) HadError() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_task_had_error((*C.GTask)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) PropagateBoolean() (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_task_propagate_boolean((*C.GTask)(_self_._value_), _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) PropagateInt() (_go__return__ int64, _error_ unsafe.Pointer) {
	var _return_ C.gssize
	_return_ = C._g_task_propagate_int((*C.GTask)(_self_._value_), _error_)
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *Task) PropagatePointer() (_return_ C.gpointer, _error_ unsafe.Pointer) {
	_return_ = C._g_task_propagate_pointer((*C.GTask)(_self_._value_), _error_)
	return
}

func (_self_ *Task) ReturnBoolean(result bool) () {
	_cgo_result_ := (C.gboolean)(C.FALSE)
	if result { _cgo_result_ = (C.gboolean)(C.TRUE) }
	C.g_task_return_boolean((*C.GTask)(_self_._value_), _cgo_result_)
	return
}

func (_self_ *Task) ReturnError(error_ *C.GError) () {
	C.g_task_return_error((*C.GTask)(_self_._value_), error_)
	return
}

func (_self_ *Task) ReturnErrorIfCancelled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_task_return_error_if_cancelled((*C.GTask)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) ReturnInt(result int64) () {
	_cgo_result_ := (C.gssize)(result)
	C.g_task_return_int((*C.GTask)(_self_._value_), _cgo_result_)
	return
}

func (_self_ *Task) ReturnPointer(result C.gpointer, result_destroy C.GDestroyNotify) () {
	C.g_task_return_pointer((*C.GTask)(_self_._value_), result, result_destroy)
	return
}

func (_self_ *Task) RunInThread(task_func C.GTaskThreadFunc) () {
	C.g_task_run_in_thread((*C.GTask)(_self_._value_), task_func)
	return
}

func (_self_ *Task) RunInThreadSync(task_func C.GTaskThreadFunc) () {
	C.g_task_run_in_thread_sync((*C.GTask)(_self_._value_), task_func)
	return
}

func (_self_ *Task) SetCheckCancellable(check_cancellable bool) () {
	_cgo_check_cancellable_ := (C.gboolean)(C.FALSE)
	if check_cancellable { _cgo_check_cancellable_ = (C.gboolean)(C.TRUE) }
	C.g_task_set_check_cancellable((*C.GTask)(_self_._value_), _cgo_check_cancellable_)
	return
}

func (_self_ *Task) SetPriority(priority int) () {
	_cgo_priority_ := (C.gint)(priority)
	C.g_task_set_priority((*C.GTask)(_self_._value_), _cgo_priority_)
	return
}

func (_self_ *Task) SetReturnOnCancel(return_on_cancel bool) (_go__return__ bool) {
	_cgo_return_on_cancel_ := (C.gboolean)(C.FALSE)
	if return_on_cancel { _cgo_return_on_cancel_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.g_task_set_return_on_cancel((*C.GTask)(_self_._value_), _cgo_return_on_cancel_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Task) SetSourceTag(source_tag C.gpointer) () {
	C.g_task_set_source_tag((*C.GTask)(_self_._value_), source_tag)
	return
}

func (_self_ *Task) SetTaskData(task_data C.gpointer, task_data_destroy C.GDestroyNotify) () {
	C.g_task_set_task_data((*C.GTask)(_self_._value_), task_data, task_data_destroy)
	return
}

func (_self_ *TcpConnection) GetGracefulDisconnect() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_tcp_connection_get_graceful_disconnect((*C.GTcpConnection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TcpConnection) SetGracefulDisconnect(graceful_disconnect bool) () {
	_cgo_graceful_disconnect_ := (C.gboolean)(C.FALSE)
	if graceful_disconnect { _cgo_graceful_disconnect_ = (C.gboolean)(C.TRUE) }
	C.g_tcp_connection_set_graceful_disconnect((*C.GTcpConnection)(_self_._value_), _cgo_graceful_disconnect_)
	return
}

func TcpWrapperConnectionNew(base_io_stream IOStreamKind, socket GioSocketKind) (_go__return__ TcpWrapperConnection) {
	_cgo_base_io_stream_ := (*C.GIOStream)(base_io_stream.GetGObject())
	_cgo_socket_ := (*C.GSocket)(socket.GetGObject())
	var _return_ *C.GSocketConnection
	_return_ = C.g_tcp_wrapper_connection_new(_cgo_base_io_stream_, _cgo_socket_)
	_go__return__ = ToTcpWrapperConnection(unsafe.Pointer(_return_))
	return
}

func (_self_ *TcpWrapperConnection) GetBaseIoStream() (_go__return__ IOStream) {
	var _return_ *C.GIOStream
	_return_ = C.g_tcp_wrapper_connection_get_base_io_stream((*C.GTcpWrapperConnection)(_self_._value_))
	_go__return__ = ToIOStream(unsafe.Pointer(_return_))
	return
}

func TestDBusNew(flags C.GTestDBusFlags) (_go__return__ TestDBus) {
	var _return_ *C.GTestDBus
	_return_ = C.g_test_dbus_new(flags)
	_go__return__ = ToTestDBus(unsafe.Pointer(_return_))
	return
}

func TestDBusUnset() () {
	C.g_test_dbus_unset()
	return
}

func (_self_ *TestDBus) AddServiceDir(path string) () {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	C._g_test_dbus_add_service_dir((*C.GTestDBus)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *TestDBus) Down() () {
	C.g_test_dbus_down((*C.GTestDBus)(_self_._value_))
	return
}

func (_self_ *TestDBus) GetBusAddress() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_test_dbus_get_bus_address((*C.GTestDBus)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TestDBus) GetFlags() (_return_ C.GTestDBusFlags) {
	_return_ = C.g_test_dbus_get_flags((*C.GTestDBus)(_self_._value_))
	return
}

func (_self_ *TestDBus) Stop() () {
	C.g_test_dbus_stop((*C.GTestDBus)(_self_._value_))
	return
}

func (_self_ *TestDBus) Up() () {
	C.g_test_dbus_up((*C.GTestDBus)(_self_._value_))
	return
}

func ThemedIconNew(iconname string) (_go__return__ ThemedIcon) {
	var _return_ *C.GIcon
	_cstring_iconname_ := C.CString(iconname)
	_cgo_iconname_ := (*C.char)(unsafe.Pointer(_cstring_iconname_))
	defer C.free(unsafe.Pointer(_cstring_iconname_))
	_return_ = C._g_themed_icon_new(_cgo_iconname_)
	_go__return__ = ToThemedIcon(unsafe.Pointer(_return_))
	return
}

func ThemedIconNewWithDefaultFallbacks(iconname string) (_go__return__ ThemedIcon) {
	var _return_ *C.GIcon
	_cstring_iconname_ := C.CString(iconname)
	_cgo_iconname_ := (*C.char)(unsafe.Pointer(_cstring_iconname_))
	defer C.free(unsafe.Pointer(_cstring_iconname_))
	_return_ = C._g_themed_icon_new_with_default_fallbacks(_cgo_iconname_)
	_go__return__ = ToThemedIcon(unsafe.Pointer(_return_))
	return
}

func (_self_ *ThemedIcon) AppendName(iconname string) () {
	_cstring_iconname_ := C.CString(iconname)
	_cgo_iconname_ := (*C.char)(unsafe.Pointer(_cstring_iconname_))
	defer C.free(unsafe.Pointer(_cstring_iconname_))
	C._g_themed_icon_append_name((*C.GThemedIcon)(_self_._value_), _cgo_iconname_)
	return
}

func (_self_ *ThemedIcon) GetNames() (_return_ unsafe.Pointer) {
	_return_ = C._g_themed_icon_get_names((*C.GThemedIcon)(_self_._value_))
	return
}

func (_self_ *ThemedIcon) PrependName(iconname string) () {
	_cstring_iconname_ := C.CString(iconname)
	_cgo_iconname_ := (*C.char)(unsafe.Pointer(_cstring_iconname_))
	defer C.free(unsafe.Pointer(_cstring_iconname_))
	C._g_themed_icon_prepend_name((*C.GThemedIcon)(_self_._value_), _cgo_iconname_)
	return
}

func ThreadedSocketServiceNew(max_threads C.int) (_go__return__ ThreadedSocketService) {
	var _return_ *C.GSocketService
	_return_ = C.g_threaded_socket_service_new(max_threads)
	_go__return__ = ToThreadedSocketService(unsafe.Pointer(_return_))
	return
}

func TlsCertificateNewFromFile(file string) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	var _return_ *C.GTlsCertificate
	_cstring_file_ := C.CString(file)
	_cgo_file_ := (*C.gchar)(unsafe.Pointer(_cstring_file_))
	defer C.free(unsafe.Pointer(_cstring_file_))
	_return_ = C._g_tls_certificate_new_from_file(_cgo_file_, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func TlsCertificateNewFromFiles(cert_file string, key_file string) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	var _return_ *C.GTlsCertificate
	_cstring_cert_file_ := C.CString(cert_file)
	_cgo_cert_file_ := (*C.gchar)(unsafe.Pointer(_cstring_cert_file_))
	defer C.free(unsafe.Pointer(_cstring_cert_file_))
	_cstring_key_file_ := C.CString(key_file)
	_cgo_key_file_ := (*C.gchar)(unsafe.Pointer(_cstring_key_file_))
	defer C.free(unsafe.Pointer(_cstring_key_file_))
	_return_ = C._g_tls_certificate_new_from_files(_cgo_cert_file_, _cgo_key_file_, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func TlsCertificateNewFromPem(data string, length int64) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	var _return_ *C.GTlsCertificate
	_cgo_length_ := (C.gssize)(length)
	_cstring_data_ := C.CString(data)
	_cgo_data_ := (*C.gchar)(unsafe.Pointer(_cstring_data_))
	defer C.free(unsafe.Pointer(_cstring_data_))
	_return_ = C._g_tls_certificate_new_from_pem(_cgo_data_, _cgo_length_, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func TlsCertificateListNewFromFile(file string) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_cstring_file_ := C.CString(file)
	_cgo_file_ := (*C.gchar)(unsafe.Pointer(_cstring_file_))
	defer C.free(unsafe.Pointer(_cstring_file_))
	_return_ = C._g_tls_certificate_list_new_from_file(_cgo_file_, _error_)
	return
}

func (_self_ *TlsCertificate) GetIssuer() (_go__return__ TlsCertificate) {
	var _return_ *C.GTlsCertificate
	_return_ = C.g_tls_certificate_get_issuer((*C.GTlsCertificate)(_self_._value_))
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsCertificate) IsSame(cert_two TlsCertificateKind) (_go__return__ bool) {
	_cgo_cert_two_ := (*C.GTlsCertificate)(cert_two.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_tls_certificate_is_same((*C.GTlsCertificate)(_self_._value_), _cgo_cert_two_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TlsCertificate) Verify(identity *C.GSocketConnectable, trusted_ca TlsCertificateKind) (_return_ C.GTlsCertificateFlags) {
	_cgo_trusted_ca_ := (*C.GTlsCertificate)(trusted_ca.GetGObject())
	_return_ = C.g_tls_certificate_verify((*C.GTlsCertificate)(_self_._value_), identity, _cgo_trusted_ca_)
	return
}

func (_self_ *TlsConnection) EmitAcceptCertificate(peer_cert TlsCertificateKind, errors C.GTlsCertificateFlags) (_go__return__ bool) {
	_cgo_peer_cert_ := (*C.GTlsCertificate)(peer_cert.GetGObject())
	var _return_ C.gboolean
	_return_ = C.g_tls_connection_emit_accept_certificate((*C.GTlsConnection)(_self_._value_), _cgo_peer_cert_, errors)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TlsConnection) GetCertificate() (_go__return__ TlsCertificate) {
	var _return_ *C.GTlsCertificate
	_return_ = C.g_tls_connection_get_certificate((*C.GTlsConnection)(_self_._value_))
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsConnection) GetDatabase() (_go__return__ TlsDatabase) {
	var _return_ *C.GTlsDatabase
	_return_ = C.g_tls_connection_get_database((*C.GTlsConnection)(_self_._value_))
	_go__return__ = ToTlsDatabase(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsConnection) GetInteraction() (_go__return__ TlsInteraction) {
	var _return_ *C.GTlsInteraction
	_return_ = C.g_tls_connection_get_interaction((*C.GTlsConnection)(_self_._value_))
	_go__return__ = ToTlsInteraction(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsConnection) GetPeerCertificate() (_go__return__ TlsCertificate) {
	var _return_ *C.GTlsCertificate
	_return_ = C.g_tls_connection_get_peer_certificate((*C.GTlsConnection)(_self_._value_))
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsConnection) GetPeerCertificateErrors() (_return_ C.GTlsCertificateFlags) {
	_return_ = C.g_tls_connection_get_peer_certificate_errors((*C.GTlsConnection)(_self_._value_))
	return
}

func (_self_ *TlsConnection) GetRehandshakeMode() (_return_ C.GTlsRehandshakeMode) {
	_return_ = C.g_tls_connection_get_rehandshake_mode((*C.GTlsConnection)(_self_._value_))
	return
}

func (_self_ *TlsConnection) GetRequireCloseNotify() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_tls_connection_get_require_close_notify((*C.GTlsConnection)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TlsConnection) Handshake(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_tls_connection_handshake((*C.GTlsConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TlsConnection) HandshakeAsync(io_priority C.int, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_tls_connection_handshake_async((*C.GTlsConnection)(_self_._value_), io_priority, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *TlsConnection) HandshakeFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_tls_connection_handshake_finish((*C.GTlsConnection)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *TlsConnection) SetCertificate(certificate TlsCertificateKind) () {
	_cgo_certificate_ := (*C.GTlsCertificate)(certificate.GetGObject())
	C.g_tls_connection_set_certificate((*C.GTlsConnection)(_self_._value_), _cgo_certificate_)
	return
}

func (_self_ *TlsConnection) SetDatabase(database TlsDatabaseKind) () {
	_cgo_database_ := (*C.GTlsDatabase)(database.GetGObject())
	C.g_tls_connection_set_database((*C.GTlsConnection)(_self_._value_), _cgo_database_)
	return
}

func (_self_ *TlsConnection) SetInteraction(interaction TlsInteractionKind) () {
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	C.g_tls_connection_set_interaction((*C.GTlsConnection)(_self_._value_), _cgo_interaction_)
	return
}

func (_self_ *TlsConnection) SetRehandshakeMode(mode C.GTlsRehandshakeMode) () {
	C.g_tls_connection_set_rehandshake_mode((*C.GTlsConnection)(_self_._value_), mode)
	return
}

func (_self_ *TlsConnection) SetRequireCloseNotify(require_close_notify bool) () {
	_cgo_require_close_notify_ := (C.gboolean)(C.FALSE)
	if require_close_notify { _cgo_require_close_notify_ = (C.gboolean)(C.TRUE) }
	C.g_tls_connection_set_require_close_notify((*C.GTlsConnection)(_self_._value_), _cgo_require_close_notify_)
	return
}

func (_self_ *TlsDatabase) CreateCertificateHandle(certificate TlsCertificateKind) (_go__return__ string) {
	_cgo_certificate_ := (*C.GTlsCertificate)(certificate.GetGObject())
	var _return_ *C.gchar
	_return_ = C.g_tls_database_create_certificate_handle((*C.GTlsDatabase)(_self_._value_), _cgo_certificate_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TlsDatabase) LookupCertificateForHandle(handle string, interaction TlsInteractionKind, flags C.GTlsDatabaseLookupFlags, cancellable CancellableKind) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GTlsCertificate
	_cstring_handle_ := C.CString(handle)
	_cgo_handle_ := (*C.gchar)(unsafe.Pointer(_cstring_handle_))
	defer C.free(unsafe.Pointer(_cstring_handle_))
	_return_ = C._g_tls_database_lookup_certificate_for_handle((*C.GTlsDatabase)(_self_._value_), _cgo_handle_, _cgo_interaction_, flags, _cgo_cancellable_, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsDatabase) LookupCertificateForHandleAsync(handle string, interaction TlsInteractionKind, flags C.GTlsDatabaseLookupFlags, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_handle_ := C.CString(handle)
	_cgo_handle_ := (*C.gchar)(unsafe.Pointer(_cstring_handle_))
	defer C.free(unsafe.Pointer(_cstring_handle_))
	C._g_tls_database_lookup_certificate_for_handle_async((*C.GTlsDatabase)(_self_._value_), _cgo_handle_, _cgo_interaction_, flags, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *TlsDatabase) LookupCertificateForHandleFinish(result *C.GAsyncResult) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	var _return_ *C.GTlsCertificate
	_return_ = C._g_tls_database_lookup_certificate_for_handle_finish((*C.GTlsDatabase)(_self_._value_), result, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsDatabase) LookupCertificateIssuer(certificate TlsCertificateKind, interaction TlsInteractionKind, flags C.GTlsDatabaseLookupFlags, cancellable CancellableKind) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	_cgo_certificate_ := (*C.GTlsCertificate)(certificate.GetGObject())
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GTlsCertificate
	_return_ = C._g_tls_database_lookup_certificate_issuer((*C.GTlsDatabase)(_self_._value_), _cgo_certificate_, _cgo_interaction_, flags, _cgo_cancellable_, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsDatabase) LookupCertificateIssuerAsync(certificate TlsCertificateKind, interaction TlsInteractionKind, flags C.GTlsDatabaseLookupFlags, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_certificate_ := (*C.GTlsCertificate)(certificate.GetGObject())
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_tls_database_lookup_certificate_issuer_async((*C.GTlsDatabase)(_self_._value_), _cgo_certificate_, _cgo_interaction_, flags, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *TlsDatabase) LookupCertificateIssuerFinish(result *C.GAsyncResult) (_go__return__ TlsCertificate, _error_ unsafe.Pointer) {
	var _return_ *C.GTlsCertificate
	_return_ = C._g_tls_database_lookup_certificate_issuer_finish((*C.GTlsDatabase)(_self_._value_), result, _error_)
	_go__return__ = ToTlsCertificate(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsDatabase) LookupCertificatesIssuedByFinish(result *C.GAsyncResult) (_return_ *C.GList, _error_ unsafe.Pointer) {
	_return_ = C._g_tls_database_lookup_certificates_issued_by_finish((*C.GTlsDatabase)(_self_._value_), result, _error_)
	return
}

func (_self_ *TlsDatabase) VerifyChain(chain TlsCertificateKind, purpose string, identity *C.GSocketConnectable, interaction TlsInteractionKind, flags C.GTlsDatabaseVerifyFlags, cancellable CancellableKind) (_return_ C.GTlsCertificateFlags, _error_ unsafe.Pointer) {
	_cgo_chain_ := (*C.GTlsCertificate)(chain.GetGObject())
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_purpose_ := C.CString(purpose)
	_cgo_purpose_ := (*C.gchar)(unsafe.Pointer(_cstring_purpose_))
	defer C.free(unsafe.Pointer(_cstring_purpose_))
	_return_ = C._g_tls_database_verify_chain((*C.GTlsDatabase)(_self_._value_), _cgo_chain_, _cgo_purpose_, identity, _cgo_interaction_, flags, _cgo_cancellable_, _error_)
	return
}

func (_self_ *TlsDatabase) VerifyChainAsync(chain TlsCertificateKind, purpose string, identity *C.GSocketConnectable, interaction TlsInteractionKind, flags C.GTlsDatabaseVerifyFlags, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_chain_ := (*C.GTlsCertificate)(chain.GetGObject())
	_cgo_interaction_ := (*C.GTlsInteraction)(interaction.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cstring_purpose_ := C.CString(purpose)
	_cgo_purpose_ := (*C.gchar)(unsafe.Pointer(_cstring_purpose_))
	defer C.free(unsafe.Pointer(_cstring_purpose_))
	C._g_tls_database_verify_chain_async((*C.GTlsDatabase)(_self_._value_), _cgo_chain_, _cgo_purpose_, identity, _cgo_interaction_, flags, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *TlsDatabase) VerifyChainFinish(result *C.GAsyncResult) (_return_ C.GTlsCertificateFlags, _error_ unsafe.Pointer) {
	_return_ = C._g_tls_database_verify_chain_finish((*C.GTlsDatabase)(_self_._value_), result, _error_)
	return
}

func (_self_ *TlsInteraction) AskPassword(password TlsPasswordKind, cancellable CancellableKind) (_return_ C.GTlsInteractionResult, _error_ unsafe.Pointer) {
	_cgo_password_ := (*C.GTlsPassword)(password.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_return_ = C._g_tls_interaction_ask_password((*C.GTlsInteraction)(_self_._value_), _cgo_password_, _cgo_cancellable_, _error_)
	return
}

func (_self_ *TlsInteraction) AskPasswordAsync(password TlsPasswordKind, cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_password_ := (*C.GTlsPassword)(password.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_tls_interaction_ask_password_async((*C.GTlsInteraction)(_self_._value_), _cgo_password_, _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *TlsInteraction) AskPasswordFinish(result *C.GAsyncResult) (_return_ C.GTlsInteractionResult, _error_ unsafe.Pointer) {
	_return_ = C._g_tls_interaction_ask_password_finish((*C.GTlsInteraction)(_self_._value_), result, _error_)
	return
}

func (_self_ *TlsInteraction) InvokeAskPassword(password TlsPasswordKind, cancellable CancellableKind) (_return_ C.GTlsInteractionResult, _error_ unsafe.Pointer) {
	_cgo_password_ := (*C.GTlsPassword)(password.GetGObject())
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_return_ = C._g_tls_interaction_invoke_ask_password((*C.GTlsInteraction)(_self_._value_), _cgo_password_, _cgo_cancellable_, _error_)
	return
}

func TlsPasswordNew(flags C.GTlsPasswordFlags, description string) (_go__return__ TlsPassword) {
	var _return_ *C.GTlsPassword
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	_return_ = C._g_tls_password_new(flags, _cgo_description_)
	_go__return__ = ToTlsPassword(unsafe.Pointer(_return_))
	return
}

func (_self_ *TlsPassword) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_tls_password_get_description((*C.GTlsPassword)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TlsPassword) GetFlags() (_return_ C.GTlsPasswordFlags) {
	_return_ = C.g_tls_password_get_flags((*C.GTlsPassword)(_self_._value_))
	return
}

func (_self_ *TlsPassword) GetValue(length *C.gsize) (_return_ *C.guchar) {
	_return_ = C._g_tls_password_get_value((*C.GTlsPassword)(_self_._value_), length)
	return
}

func (_self_ *TlsPassword) GetWarning() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_tls_password_get_warning((*C.GTlsPassword)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TlsPassword) SetDescription(description string) () {
	_cstring_description_ := C.CString(description)
	_cgo_description_ := (*C.gchar)(unsafe.Pointer(_cstring_description_))
	defer C.free(unsafe.Pointer(_cstring_description_))
	C._g_tls_password_set_description((*C.GTlsPassword)(_self_._value_), _cgo_description_)
	return
}

func (_self_ *TlsPassword) SetFlags(flags C.GTlsPasswordFlags) () {
	C.g_tls_password_set_flags((*C.GTlsPassword)(_self_._value_), flags)
	return
}

func (_self_ *TlsPassword) SetValue(value *C.guchar, length int64) () {
	_cgo_length_ := (C.gssize)(length)
	C._g_tls_password_set_value((*C.GTlsPassword)(_self_._value_), value, _cgo_length_)
	return
}

func (_self_ *TlsPassword) SetValueFull(value *C.guchar, length int64, destroy C.GDestroyNotify) () {
	_cgo_length_ := (C.gssize)(length)
	C.g_tls_password_set_value_full((*C.GTlsPassword)(_self_._value_), value, _cgo_length_, destroy)
	return
}

func (_self_ *TlsPassword) SetWarning(warning string) () {
	_cstring_warning_ := C.CString(warning)
	_cgo_warning_ := (*C.gchar)(unsafe.Pointer(_cstring_warning_))
	defer C.free(unsafe.Pointer(_cstring_warning_))
	C._g_tls_password_set_warning((*C.GTlsPassword)(_self_._value_), _cgo_warning_)
	return
}

func (_self_ *UnixConnection) ReceiveCredentials(cancellable CancellableKind) (_go__return__ Credentials, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ *C.GCredentials
	_return_ = C._g_unix_connection_receive_credentials((*C.GUnixConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixConnection) ReceiveCredentialsAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_unix_connection_receive_credentials_async((*C.GUnixConnection)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *UnixConnection) ReceiveCredentialsFinish(result *C.GAsyncResult) (_go__return__ Credentials, _error_ unsafe.Pointer) {
	var _return_ *C.GCredentials
	_return_ = C._g_unix_connection_receive_credentials_finish((*C.GUnixConnection)(_self_._value_), result, _error_)
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixConnection) ReceiveFd(cancellable CancellableKind) (_go__return__ int, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gint
	_return_ = C._g_unix_connection_receive_fd((*C.GUnixConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixConnection) SendCredentials(cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	var _return_ C.gboolean
	_return_ = C._g_unix_connection_send_credentials((*C.GUnixConnection)(_self_._value_), _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixConnection) SendCredentialsAsync(cancellable CancellableKind, callback C.GAsyncReadyCallback, user_data C.gpointer) () {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	C.g_unix_connection_send_credentials_async((*C.GUnixConnection)(_self_._value_), _cgo_cancellable_, callback, user_data)
	return
}

func (_self_ *UnixConnection) SendCredentialsFinish(result *C.GAsyncResult) (_go__return__ bool, _error_ unsafe.Pointer) {
	var _return_ C.gboolean
	_return_ = C._g_unix_connection_send_credentials_finish((*C.GUnixConnection)(_self_._value_), result, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixConnection) SendFd(fd int, cancellable CancellableKind) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_cancellable_ := (*C.GCancellable)(cancellable.GetGObject())
	_cgo_fd_ := (C.gint)(fd)
	var _return_ C.gboolean
	_return_ = C._g_unix_connection_send_fd((*C.GUnixConnection)(_self_._value_), _cgo_fd_, _cgo_cancellable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func UnixCredentialsMessageNew() (_go__return__ UnixCredentialsMessage) {
	var _return_ *C.GSocketControlMessage
	_return_ = C.g_unix_credentials_message_new()
	_go__return__ = ToUnixCredentialsMessage(unsafe.Pointer(_return_))
	return
}

func UnixCredentialsMessageNewWithCredentials(credentials CredentialsKind) (_go__return__ UnixCredentialsMessage) {
	_cgo_credentials_ := (*C.GCredentials)(credentials.GetGObject())
	var _return_ *C.GSocketControlMessage
	_return_ = C.g_unix_credentials_message_new_with_credentials(_cgo_credentials_)
	_go__return__ = ToUnixCredentialsMessage(unsafe.Pointer(_return_))
	return
}

func UnixCredentialsMessageIsSupported() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_credentials_message_is_supported()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixCredentialsMessage) GetCredentials() (_go__return__ Credentials) {
	var _return_ *C.GCredentials
	_return_ = C.g_unix_credentials_message_get_credentials((*C.GUnixCredentialsMessage)(_self_._value_))
	_go__return__ = ToCredentials(unsafe.Pointer(_return_))
	return
}

func UnixFDListNew() (_go__return__ UnixFDList) {
	var _return_ *C.GUnixFDList
	_return_ = C.g_unix_fd_list_new()
	_go__return__ = ToUnixFDList(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixFDList) Append(fd int) (_go__return__ int, _error_ unsafe.Pointer) {
	_cgo_fd_ := (C.gint)(fd)
	var _return_ C.gint
	_return_ = C._g_unix_fd_list_append((*C.GUnixFDList)(_self_._value_), _cgo_fd_, _error_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixFDList) Get(index_ int) (_go__return__ int, _error_ unsafe.Pointer) {
	_cgo_index__ := (C.gint)(index_)
	var _return_ C.gint
	_return_ = C._g_unix_fd_list_get((*C.GUnixFDList)(_self_._value_), _cgo_index__, _error_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixFDList) GetLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_unix_fd_list_get_length((*C.GUnixFDList)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixFDList) PeekFds() (_return_ *C.gint, _go_length_ int) {
	var length C.gint
	_return_ = C._g_unix_fd_list_peek_fds((*C.GUnixFDList)(_self_._value_), &length)
	_go_length_ = (int)(length)
	return
}

func (_self_ *UnixFDList) StealFds() (_return_ *C.gint, _go_length_ int) {
	var length C.gint
	_return_ = C.g_unix_fd_list_steal_fds((*C.GUnixFDList)(_self_._value_), &length)
	_go_length_ = (int)(length)
	return
}

func UnixFDMessageNew() (_go__return__ UnixFDMessage) {
	var _return_ *C.GSocketControlMessage
	_return_ = C.g_unix_fd_message_new()
	_go__return__ = ToUnixFDMessage(unsafe.Pointer(_return_))
	return
}

func UnixFDMessageNewWithFdList(fd_list UnixFDListKind) (_go__return__ UnixFDMessage) {
	_cgo_fd_list_ := (*C.GUnixFDList)(fd_list.GetGObject())
	var _return_ *C.GSocketControlMessage
	_return_ = C.g_unix_fd_message_new_with_fd_list(_cgo_fd_list_)
	_go__return__ = ToUnixFDMessage(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixFDMessage) AppendFd(fd int) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_fd_ := (C.gint)(fd)
	var _return_ C.gboolean
	_return_ = C._g_unix_fd_message_append_fd((*C.GUnixFDMessage)(_self_._value_), _cgo_fd_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixFDMessage) GetFdList() (_go__return__ UnixFDList) {
	var _return_ *C.GUnixFDList
	_return_ = C.g_unix_fd_message_get_fd_list((*C.GUnixFDMessage)(_self_._value_))
	_go__return__ = ToUnixFDList(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixFDMessage) StealFds() (_return_ *C.gint, _go_length_ int) {
	var length C.gint
	_return_ = C.g_unix_fd_message_steal_fds((*C.GUnixFDMessage)(_self_._value_), &length)
	_go_length_ = (int)(length)
	return
}

func UnixInputStreamNew(fd int, close_fd bool) (_go__return__ UnixInputStream) {
	var _return_ *C.GInputStream
	_cgo_fd_ := (C.gint)(fd)
	_cgo_close_fd_ := (C.gboolean)(C.FALSE)
	if close_fd { _cgo_close_fd_ = (C.gboolean)(C.TRUE) }
	_return_ = C.g_unix_input_stream_new(_cgo_fd_, _cgo_close_fd_)
	_go__return__ = ToUnixInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixInputStream) GetCloseFd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_input_stream_get_close_fd((*C.GUnixInputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixInputStream) GetFd() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_unix_input_stream_get_fd((*C.GUnixInputStream)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixInputStream) SetCloseFd(close_fd bool) () {
	_cgo_close_fd_ := (C.gboolean)(C.FALSE)
	if close_fd { _cgo_close_fd_ = (C.gboolean)(C.TRUE) }
	C.g_unix_input_stream_set_close_fd((*C.GUnixInputStream)(_self_._value_), _cgo_close_fd_)
	return
}

func UnixMountMonitorNew() (_go__return__ UnixMountMonitor) {
	var _return_ *C.GUnixMountMonitor
	_return_ = C.g_unix_mount_monitor_new()
	_go__return__ = ToUnixMountMonitor(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixMountMonitor) SetRateLimit(limit_msec C.int) () {
	C.g_unix_mount_monitor_set_rate_limit((*C.GUnixMountMonitor)(_self_._value_), limit_msec)
	return
}

func UnixOutputStreamNew(fd int, close_fd bool) (_go__return__ UnixOutputStream) {
	var _return_ *C.GOutputStream
	_cgo_fd_ := (C.gint)(fd)
	_cgo_close_fd_ := (C.gboolean)(C.FALSE)
	if close_fd { _cgo_close_fd_ = (C.gboolean)(C.TRUE) }
	_return_ = C.g_unix_output_stream_new(_cgo_fd_, _cgo_close_fd_)
	_go__return__ = ToUnixOutputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *UnixOutputStream) GetCloseFd() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_output_stream_get_close_fd((*C.GUnixOutputStream)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixOutputStream) GetFd() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_unix_output_stream_get_fd((*C.GUnixOutputStream)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixOutputStream) SetCloseFd(close_fd bool) () {
	_cgo_close_fd_ := (C.gboolean)(C.FALSE)
	if close_fd { _cgo_close_fd_ = (C.gboolean)(C.TRUE) }
	C.g_unix_output_stream_set_close_fd((*C.GUnixOutputStream)(_self_._value_), _cgo_close_fd_)
	return
}

func UnixSocketAddressNew(path string) (_go__return__ UnixSocketAddress) {
	var _return_ *C.GSocketAddress
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.gchar)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_unix_socket_address_new(_cgo_path_)
	_go__return__ = ToUnixSocketAddress(unsafe.Pointer(_return_))
	return
}

func UnixSocketAddressAbstractNamesSupported() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_socket_address_abstract_names_supported()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixSocketAddress) GetAddressType() (_return_ C.GUnixSocketAddressType) {
	_return_ = C.g_unix_socket_address_get_address_type((*C.GUnixSocketAddress)(_self_._value_))
	return
}

func (_self_ *UnixSocketAddress) GetPath() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_unix_socket_address_get_path((*C.GUnixSocketAddress)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixSocketAddress) GetPathLen() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.g_unix_socket_address_get_path_len((*C.GUnixSocketAddress)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func VfsGetDefault() (_go__return__ Vfs) {
	var _return_ *C.GVfs
	_return_ = C.g_vfs_get_default()
	_go__return__ = ToVfs(unsafe.Pointer(_return_))
	return
}

func VfsGetLocal() (_go__return__ Vfs) {
	var _return_ *C.GVfs
	_return_ = C.g_vfs_get_local()
	_go__return__ = ToVfs(unsafe.Pointer(_return_))
	return
}

func (_self_ *Vfs) GetFileForPath(path string) (_return_ *C.GFile) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_vfs_get_file_for_path((*C.GVfs)(_self_._value_), _cgo_path_)
	return
}

func (_self_ *Vfs) GetFileForUri(uri string) (_return_ *C.GFile) {
	_cstring_uri_ := C.CString(uri)
	_cgo_uri_ := (*C.char)(unsafe.Pointer(_cstring_uri_))
	defer C.free(unsafe.Pointer(_cstring_uri_))
	_return_ = C._g_vfs_get_file_for_uri((*C.GVfs)(_self_._value_), _cgo_uri_)
	return
}

func (_self_ *Vfs) GetSupportedUriSchemes() (_return_ unsafe.Pointer) {
	_return_ = C._g_vfs_get_supported_uri_schemes((*C.GVfs)(_self_._value_))
	return
}

func (_self_ *Vfs) IsActive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_vfs_is_active((*C.GVfs)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Vfs) ParseName(parse_name string) (_return_ *C.GFile) {
	_cstring_parse_name_ := C.CString(parse_name)
	_cgo_parse_name_ := (*C.char)(unsafe.Pointer(_cstring_parse_name_))
	defer C.free(unsafe.Pointer(_cstring_parse_name_))
	_return_ = C._g_vfs_parse_name((*C.GVfs)(_self_._value_), _cgo_parse_name_)
	return
}

func VolumeMonitorGet() (_go__return__ VolumeMonitor) {
	var _return_ *C.GVolumeMonitor
	_return_ = C.g_volume_monitor_get()
	_go__return__ = ToVolumeMonitor(unsafe.Pointer(_return_))
	return
}

func (_self_ *VolumeMonitor) GetConnectedDrives() (_return_ *C.GList) {
	_return_ = C.g_volume_monitor_get_connected_drives((*C.GVolumeMonitor)(_self_._value_))
	return
}

func (_self_ *VolumeMonitor) GetMountForUuid(uuid string) (_return_ *C.GMount) {
	_cstring_uuid_ := C.CString(uuid)
	_cgo_uuid_ := (*C.char)(unsafe.Pointer(_cstring_uuid_))
	defer C.free(unsafe.Pointer(_cstring_uuid_))
	_return_ = C._g_volume_monitor_get_mount_for_uuid((*C.GVolumeMonitor)(_self_._value_), _cgo_uuid_)
	return
}

func (_self_ *VolumeMonitor) GetMounts() (_return_ *C.GList) {
	_return_ = C.g_volume_monitor_get_mounts((*C.GVolumeMonitor)(_self_._value_))
	return
}

func (_self_ *VolumeMonitor) GetVolumeForUuid(uuid string) (_return_ *C.GVolume) {
	_cstring_uuid_ := C.CString(uuid)
	_cgo_uuid_ := (*C.char)(unsafe.Pointer(_cstring_uuid_))
	defer C.free(unsafe.Pointer(_cstring_uuid_))
	_return_ = C._g_volume_monitor_get_volume_for_uuid((*C.GVolumeMonitor)(_self_._value_), _cgo_uuid_)
	return
}

func (_self_ *VolumeMonitor) GetVolumes() (_return_ *C.GList) {
	_return_ = C.g_volume_monitor_get_volumes((*C.GVolumeMonitor)(_self_._value_))
	return
}

func ZlibCompressorNew(format C.GZlibCompressorFormat, level C.int) (_go__return__ ZlibCompressor) {
	var _return_ *C.GZlibCompressor
	_return_ = C.g_zlib_compressor_new(format, level)
	_go__return__ = ToZlibCompressor(unsafe.Pointer(_return_))
	return
}

func (_self_ *ZlibCompressor) GetFileInfo() (_go__return__ FileInfo) {
	var _return_ *C.GFileInfo
	_return_ = C.g_zlib_compressor_get_file_info((*C.GZlibCompressor)(_self_._value_))
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *ZlibCompressor) SetFileInfo(file_info FileInfoKind) () {
	_cgo_file_info_ := (*C.GFileInfo)(file_info.GetGObject())
	C.g_zlib_compressor_set_file_info((*C.GZlibCompressor)(_self_._value_), _cgo_file_info_)
	return
}

func ZlibDecompressorNew(format C.GZlibCompressorFormat) (_go__return__ ZlibDecompressor) {
	var _return_ *C.GZlibDecompressor
	_return_ = C.g_zlib_decompressor_new(format)
	_go__return__ = ToZlibDecompressor(unsafe.Pointer(_return_))
	return
}

func (_self_ *ZlibDecompressor) GetFileInfo() (_go__return__ FileInfo) {
	var _return_ *C.GFileInfo
	_return_ = C.g_zlib_decompressor_get_file_info((*C.GZlibDecompressor)(_self_._value_))
	_go__return__ = ToFileInfo(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusAnnotationInfo) Ref() (_go__return__ *DBusAnnotationInfo) {
	var _return_ *C.GDBusAnnotationInfo
	_return_ = C.g_dbus_annotation_info_ref((*C.GDBusAnnotationInfo)(_self_))
	_go__return__ = (*DBusAnnotationInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusAnnotationInfo) Unref() () {
	C.g_dbus_annotation_info_unref((*C.GDBusAnnotationInfo)(_self_))
	return
}

func (_self_ *DBusArgInfo) Ref() (_go__return__ *DBusArgInfo) {
	var _return_ *C.GDBusArgInfo
	_return_ = C.g_dbus_arg_info_ref((*C.GDBusArgInfo)(_self_))
	_go__return__ = (*DBusArgInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusArgInfo) Unref() () {
	C.g_dbus_arg_info_unref((*C.GDBusArgInfo)(_self_))
	return
}

func (_self_ *DBusInterfaceInfo) CacheBuild() () {
	C.g_dbus_interface_info_cache_build((*C.GDBusInterfaceInfo)(_self_))
	return
}

func (_self_ *DBusInterfaceInfo) CacheRelease() () {
	C.g_dbus_interface_info_cache_release((*C.GDBusInterfaceInfo)(_self_))
	return
}

func (_self_ *DBusInterfaceInfo) GenerateXml(indent uint) (string_builder *C.GString) {
	_cgo_indent_ := (C.guint)(indent)
	C.g_dbus_interface_info_generate_xml((*C.GDBusInterfaceInfo)(_self_), _cgo_indent_, string_builder)
	return
}

func (_self_ *DBusInterfaceInfo) LookupMethod(name string) (_go__return__ *DBusMethodInfo) {
	var _return_ *C.GDBusMethodInfo
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_dbus_interface_info_lookup_method((*C.GDBusInterfaceInfo)(_self_), _cgo_name_)
	_go__return__ = (*DBusMethodInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceInfo) LookupProperty(name string) (_go__return__ *DBusPropertyInfo) {
	var _return_ *C.GDBusPropertyInfo
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_dbus_interface_info_lookup_property((*C.GDBusInterfaceInfo)(_self_), _cgo_name_)
	_go__return__ = (*DBusPropertyInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceInfo) LookupSignal(name string) (_go__return__ *DBusSignalInfo) {
	var _return_ *C.GDBusSignalInfo
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_dbus_interface_info_lookup_signal((*C.GDBusInterfaceInfo)(_self_), _cgo_name_)
	_go__return__ = (*DBusSignalInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceInfo) Ref() (_go__return__ *DBusInterfaceInfo) {
	var _return_ *C.GDBusInterfaceInfo
	_return_ = C.g_dbus_interface_info_ref((*C.GDBusInterfaceInfo)(_self_))
	_go__return__ = (*DBusInterfaceInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusInterfaceInfo) Unref() () {
	C.g_dbus_interface_info_unref((*C.GDBusInterfaceInfo)(_self_))
	return
}

func (_self_ *DBusMethodInfo) Ref() (_go__return__ *DBusMethodInfo) {
	var _return_ *C.GDBusMethodInfo
	_return_ = C.g_dbus_method_info_ref((*C.GDBusMethodInfo)(_self_))
	_go__return__ = (*DBusMethodInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusMethodInfo) Unref() () {
	C.g_dbus_method_info_unref((*C.GDBusMethodInfo)(_self_))
	return
}

func DBusNodeInfoNewForXml(xml_data string) (_go__return__ *DBusNodeInfo, _error_ unsafe.Pointer) {
	var _return_ *C.GDBusNodeInfo
	_cstring_xml_data_ := C.CString(xml_data)
	_cgo_xml_data_ := (*C.gchar)(unsafe.Pointer(_cstring_xml_data_))
	defer C.free(unsafe.Pointer(_cstring_xml_data_))
	_return_ = C._g_dbus_node_info_new_for_xml(_cgo_xml_data_, _error_)
	_go__return__ = (*DBusNodeInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusNodeInfo) GenerateXml(indent uint) (string_builder *C.GString) {
	_cgo_indent_ := (C.guint)(indent)
	C.g_dbus_node_info_generate_xml((*C.GDBusNodeInfo)(_self_), _cgo_indent_, string_builder)
	return
}

func (_self_ *DBusNodeInfo) LookupInterface(name string) (_go__return__ *DBusInterfaceInfo) {
	var _return_ *C.GDBusInterfaceInfo
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_dbus_node_info_lookup_interface((*C.GDBusNodeInfo)(_self_), _cgo_name_)
	_go__return__ = (*DBusInterfaceInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusNodeInfo) Ref() (_go__return__ *DBusNodeInfo) {
	var _return_ *C.GDBusNodeInfo
	_return_ = C.g_dbus_node_info_ref((*C.GDBusNodeInfo)(_self_))
	_go__return__ = (*DBusNodeInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusNodeInfo) Unref() () {
	C.g_dbus_node_info_unref((*C.GDBusNodeInfo)(_self_))
	return
}

func (_self_ *DBusPropertyInfo) Ref() (_go__return__ *DBusPropertyInfo) {
	var _return_ *C.GDBusPropertyInfo
	_return_ = C.g_dbus_property_info_ref((*C.GDBusPropertyInfo)(_self_))
	_go__return__ = (*DBusPropertyInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusPropertyInfo) Unref() () {
	C.g_dbus_property_info_unref((*C.GDBusPropertyInfo)(_self_))
	return
}

func (_self_ *DBusSignalInfo) Ref() (_go__return__ *DBusSignalInfo) {
	var _return_ *C.GDBusSignalInfo
	_return_ = C.g_dbus_signal_info_ref((*C.GDBusSignalInfo)(_self_))
	_go__return__ = (*DBusSignalInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *DBusSignalInfo) Unref() () {
	C.g_dbus_signal_info_unref((*C.GDBusSignalInfo)(_self_))
	return
}

func FileAttributeInfoListNew() (_go__return__ *FileAttributeInfoList) {
	var _return_ *C.GFileAttributeInfoList
	_return_ = C.g_file_attribute_info_list_new()
	_go__return__ = (*FileAttributeInfoList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeInfoList) Add(name string, type_ C.GFileAttributeType, flags C.GFileAttributeInfoFlags) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._g_file_attribute_info_list_add((*C.GFileAttributeInfoList)(_self_), _cgo_name_, type_, flags)
	return
}

func (_self_ *FileAttributeInfoList) Dup() (_go__return__ *FileAttributeInfoList) {
	var _return_ *C.GFileAttributeInfoList
	_return_ = C.g_file_attribute_info_list_dup((*C.GFileAttributeInfoList)(_self_))
	_go__return__ = (*FileAttributeInfoList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeInfoList) Lookup(name string) (_go__return__ *FileAttributeInfo) {
	var _return_ *C.GFileAttributeInfo
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_file_attribute_info_list_lookup((*C.GFileAttributeInfoList)(_self_), _cgo_name_)
	_go__return__ = (*FileAttributeInfo)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeInfoList) Ref() (_go__return__ *FileAttributeInfoList) {
	var _return_ *C.GFileAttributeInfoList
	_return_ = C.g_file_attribute_info_list_ref((*C.GFileAttributeInfoList)(_self_))
	_go__return__ = (*FileAttributeInfoList)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeInfoList) Unref() () {
	C.g_file_attribute_info_list_unref((*C.GFileAttributeInfoList)(_self_))
	return
}

func FileAttributeMatcherNew(attributes string) (_go__return__ *FileAttributeMatcher) {
	var _return_ *C.GFileAttributeMatcher
	_cstring_attributes_ := C.CString(attributes)
	_cgo_attributes_ := (*C.char)(unsafe.Pointer(_cstring_attributes_))
	defer C.free(unsafe.Pointer(_cstring_attributes_))
	_return_ = C._g_file_attribute_matcher_new(_cgo_attributes_)
	_go__return__ = (*FileAttributeMatcher)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeMatcher) EnumerateNamespace(ns string) (_go__return__ bool) {
	_cstring_ns_ := C.CString(ns)
	_cgo_ns_ := (*C.char)(unsafe.Pointer(_cstring_ns_))
	defer C.free(unsafe.Pointer(_cstring_ns_))
	var _return_ C.gboolean
	_return_ = C._g_file_attribute_matcher_enumerate_namespace((*C.GFileAttributeMatcher)(_self_), _cgo_ns_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileAttributeMatcher) EnumerateNext() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_file_attribute_matcher_enumerate_next((*C.GFileAttributeMatcher)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileAttributeMatcher) Matches(attribute string) (_go__return__ bool) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_attribute_matcher_matches((*C.GFileAttributeMatcher)(_self_), _cgo_attribute_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileAttributeMatcher) MatchesOnly(attribute string) (_go__return__ bool) {
	_cstring_attribute_ := C.CString(attribute)
	_cgo_attribute_ := (*C.char)(unsafe.Pointer(_cstring_attribute_))
	defer C.free(unsafe.Pointer(_cstring_attribute_))
	var _return_ C.gboolean
	_return_ = C._g_file_attribute_matcher_matches_only((*C.GFileAttributeMatcher)(_self_), _cgo_attribute_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FileAttributeMatcher) Ref() (_go__return__ *FileAttributeMatcher) {
	var _return_ *C.GFileAttributeMatcher
	_return_ = C.g_file_attribute_matcher_ref((*C.GFileAttributeMatcher)(_self_))
	_go__return__ = (*FileAttributeMatcher)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeMatcher) Subtract(subtract *FileAttributeMatcher) (_go__return__ *FileAttributeMatcher) {
	_cgo_subtract_ := (*C.GFileAttributeMatcher)(unsafe.Pointer(subtract))
	var _return_ *C.GFileAttributeMatcher
	_return_ = C.g_file_attribute_matcher_subtract((*C.GFileAttributeMatcher)(_self_), _cgo_subtract_)
	_go__return__ = (*FileAttributeMatcher)(unsafe.Pointer(_return_))
	return
}

func (_self_ *FileAttributeMatcher) ToString() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_file_attribute_matcher_to_string((*C.GFileAttributeMatcher)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *FileAttributeMatcher) Unref() () {
	C.g_file_attribute_matcher_unref((*C.GFileAttributeMatcher)(_self_))
	return
}

func (_self_ *IOExtension) GetName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_io_extension_get_name((*C.GIOExtension)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *IOExtension) GetPriority() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.g_io_extension_get_priority((*C.GIOExtension)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *IOExtension) GetType() (_return_ C.GType) {
	_return_ = C.g_io_extension_get_type((*C.GIOExtension)(_self_))
	return
}

func (_self_ *IOExtension) RefClass() (_return_ *C.GTypeClass) {
	_return_ = C.g_io_extension_ref_class((*C.GIOExtension)(_self_))
	return
}

func (_self_ *IOExtensionPoint) GetExtensionByName(name string) (_go__return__ *IOExtension) {
	var _return_ *C.GIOExtension
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_io_extension_point_get_extension_by_name((*C.GIOExtensionPoint)(_self_), _cgo_name_)
	_go__return__ = (*IOExtension)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IOExtensionPoint) GetExtensions() (_return_ *C.GList) {
	_return_ = C.g_io_extension_point_get_extensions((*C.GIOExtensionPoint)(_self_))
	return
}

func (_self_ *IOExtensionPoint) GetRequiredType() (_return_ C.GType) {
	_return_ = C.g_io_extension_point_get_required_type((*C.GIOExtensionPoint)(_self_))
	return
}

func (_self_ *IOExtensionPoint) SetRequiredType(type_ C.GType) () {
	C.g_io_extension_point_set_required_type((*C.GIOExtensionPoint)(_self_), type_)
	return
}

func IOModuleScopeNew(flags C.GIOModuleScopeFlags) (_go__return__ *IOModuleScope) {
	var _return_ *C.GIOModuleScope
	_return_ = C.g_io_module_scope_new(flags)
	_go__return__ = (*IOModuleScope)(unsafe.Pointer(_return_))
	return
}

func (_self_ *IOModuleScope) Block(basename string) () {
	_cstring_basename_ := C.CString(basename)
	_cgo_basename_ := (*C.gchar)(unsafe.Pointer(_cstring_basename_))
	defer C.free(unsafe.Pointer(_cstring_basename_))
	C._g_io_module_scope_block((*C.GIOModuleScope)(_self_), _cgo_basename_)
	return
}

func (_self_ *IOModuleScope) Free() () {
	C.g_io_module_scope_free((*C.GIOModuleScope)(_self_))
	return
}

func ResourceNewFromData(data *C.GBytes) (_go__return__ *Resource, _error_ unsafe.Pointer) {
	var _return_ *C.GResource
	_return_ = C._g_resource_new_from_data(data, _error_)
	_go__return__ = (*Resource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Resource) Register() () {
	C.g_resources_register((*C.GResource)(_self_))
	return
}

func (_self_ *Resource) Unregister() () {
	C.g_resources_unregister((*C.GResource)(_self_))
	return
}

func (_self_ *Resource) EnumerateChildren(path string, lookup_flags C.GResourceLookupFlags) (_return_ unsafe.Pointer, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resource_enumerate_children((*C.GResource)(_self_), _cgo_path_, lookup_flags, _error_)
	return
}

func (_self_ *Resource) GetInfo(path string, lookup_flags C.GResourceLookupFlags) (_go__return__ bool, _go_size_ uint64, _go_flags_ uint32, _error_ unsafe.Pointer) {
	var size C.gsize
	var flags C.guint32
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	var _return_ C.gboolean
	_return_ = C._g_resource_get_info((*C.GResource)(_self_), _cgo_path_, lookup_flags, &size, &flags, _error_)
	_go_size_ = (uint64)(size)
	_go_flags_ = (uint32)(flags)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Resource) LookupData(path string, lookup_flags C.GResourceLookupFlags) (_return_ *C.GBytes, _error_ unsafe.Pointer) {
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resource_lookup_data((*C.GResource)(_self_), _cgo_path_, lookup_flags, _error_)
	return
}

func (_self_ *Resource) OpenStream(path string, lookup_flags C.GResourceLookupFlags) (_go__return__ InputStream, _error_ unsafe.Pointer) {
	var _return_ *C.GInputStream
	_cstring_path_ := C.CString(path)
	_cgo_path_ := (*C.char)(unsafe.Pointer(_cstring_path_))
	defer C.free(unsafe.Pointer(_cstring_path_))
	_return_ = C._g_resource_open_stream((*C.GResource)(_self_), _cgo_path_, lookup_flags, _error_)
	_go__return__ = ToInputStream(unsafe.Pointer(_return_))
	return
}

func (_self_ *Resource) Ref() (_go__return__ *Resource) {
	var _return_ *C.GResource
	_return_ = C.g_resource_ref((*C.GResource)(_self_))
	_go__return__ = (*Resource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Resource) Unref() () {
	C.g_resource_unref((*C.GResource)(_self_))
	return
}

func (_self_ *SettingsSchema) GetId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_settings_schema_get_id((*C.GSettingsSchema)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *SettingsSchema) GetPath() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_settings_schema_get_path((*C.GSettingsSchema)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *SettingsSchema) Ref() (_go__return__ *SettingsSchema) {
	var _return_ *C.GSettingsSchema
	_return_ = C.g_settings_schema_ref((*C.GSettingsSchema)(_self_))
	_go__return__ = (*SettingsSchema)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SettingsSchema) Unref() () {
	C.g_settings_schema_unref((*C.GSettingsSchema)(_self_))
	return
}

func SettingsSchemaSourceNewFromDirectory(directory string, parent *SettingsSchemaSource, trusted bool) (_go__return__ *SettingsSchemaSource, _error_ unsafe.Pointer) {
	_cgo_parent_ := (*C.GSettingsSchemaSource)(unsafe.Pointer(parent))
	var _return_ *C.GSettingsSchemaSource
	_cstring_directory_ := C.CString(directory)
	_cgo_directory_ := (*C.gchar)(unsafe.Pointer(_cstring_directory_))
	defer C.free(unsafe.Pointer(_cstring_directory_))
	_cgo_trusted_ := (C.gboolean)(C.FALSE)
	if trusted { _cgo_trusted_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_settings_schema_source_new_from_directory(_cgo_directory_, _cgo_parent_, _cgo_trusted_, _error_)
	_go__return__ = (*SettingsSchemaSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SettingsSchemaSource) Lookup(schema_id string, recursive bool) (_go__return__ *SettingsSchema) {
	var _return_ *C.GSettingsSchema
	_cstring_schema_id_ := C.CString(schema_id)
	_cgo_schema_id_ := (*C.gchar)(unsafe.Pointer(_cstring_schema_id_))
	defer C.free(unsafe.Pointer(_cstring_schema_id_))
	_cgo_recursive_ := (C.gboolean)(C.FALSE)
	if recursive { _cgo_recursive_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_settings_schema_source_lookup((*C.GSettingsSchemaSource)(_self_), _cgo_schema_id_, _cgo_recursive_)
	_go__return__ = (*SettingsSchema)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SettingsSchemaSource) Ref() (_go__return__ *SettingsSchemaSource) {
	var _return_ *C.GSettingsSchemaSource
	_return_ = C.g_settings_schema_source_ref((*C.GSettingsSchemaSource)(_self_))
	_go__return__ = (*SettingsSchemaSource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SettingsSchemaSource) Unref() () {
	C.g_settings_schema_source_unref((*C.GSettingsSchemaSource)(_self_))
	return
}

func SrvTargetNew(hostname string, port uint16, priority uint16, weight uint16) (_go__return__ *SrvTarget) {
	var _return_ *C.GSrvTarget
	_cgo_port_ := (C.guint16)(port)
	_cgo_priority_ := (C.guint16)(priority)
	_cgo_weight_ := (C.guint16)(weight)
	_cstring_hostname_ := C.CString(hostname)
	_cgo_hostname_ := (*C.gchar)(unsafe.Pointer(_cstring_hostname_))
	defer C.free(unsafe.Pointer(_cstring_hostname_))
	_return_ = C._g_srv_target_new(_cgo_hostname_, _cgo_port_, _cgo_priority_, _cgo_weight_)
	_go__return__ = (*SrvTarget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SrvTarget) Copy() (_go__return__ *SrvTarget) {
	var _return_ *C.GSrvTarget
	_return_ = C.g_srv_target_copy((*C.GSrvTarget)(_self_))
	_go__return__ = (*SrvTarget)(unsafe.Pointer(_return_))
	return
}

func (_self_ *SrvTarget) Free() () {
	C.g_srv_target_free((*C.GSrvTarget)(_self_))
	return
}

func (_self_ *SrvTarget) GetHostname() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_srv_target_get_hostname((*C.GSrvTarget)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *SrvTarget) GetPort() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_srv_target_get_port((*C.GSrvTarget)(_self_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *SrvTarget) GetPriority() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_srv_target_get_priority((*C.GSrvTarget)(_self_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *SrvTarget) GetWeight() (_go__return__ uint16) {
	var _return_ C.guint16
	_return_ = C.g_srv_target_get_weight((*C.GSrvTarget)(_self_))
	_go__return__ = (uint16)(_return_)
	return
}

func (_self_ *StaticResource) Fini() () {
	C.g_static_resource_fini((*C.GStaticResource)(_self_))
	return
}

func (_self_ *StaticResource) GetResource() (_go__return__ *Resource) {
	var _return_ *C.GResource
	_return_ = C.g_static_resource_get_resource((*C.GStaticResource)(_self_))
	_go__return__ = (*Resource)(unsafe.Pointer(_return_))
	return
}

func (_self_ *StaticResource) Init() () {
	C.g_static_resource_init((*C.GStaticResource)(_self_))
	return
}

func (_self_ *UnixMountPoint) Compare(mount2 *UnixMountPoint) (_go__return__ int) {
	_cgo_mount2_ := (*C.GUnixMountPoint)(unsafe.Pointer(mount2))
	var _return_ C.gint
	_return_ = C.g_unix_mount_point_compare((*C.GUnixMountPoint)(_self_), _cgo_mount2_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *UnixMountPoint) Free() () {
	C.g_unix_mount_point_free((*C.GUnixMountPoint)(_self_))
	return
}

func (_self_ *UnixMountPoint) GetDevicePath() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_unix_mount_point_get_device_path((*C.GUnixMountPoint)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixMountPoint) GetFsType() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_unix_mount_point_get_fs_type((*C.GUnixMountPoint)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixMountPoint) GetMountPath() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_unix_mount_point_get_mount_path((*C.GUnixMountPoint)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixMountPoint) GetOptions() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._g_unix_mount_point_get_options((*C.GUnixMountPoint)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixMountPoint) GuessCanEject() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_point_guess_can_eject((*C.GUnixMountPoint)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixMountPoint) GuessIcon() (_return_ *C.GIcon) {
	_return_ = C.g_unix_mount_point_guess_icon((*C.GUnixMountPoint)(_self_))
	return
}

func (_self_ *UnixMountPoint) GuessName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.g_unix_mount_point_guess_name((*C.GUnixMountPoint)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *UnixMountPoint) GuessSymbolicIcon() (_return_ *C.GIcon) {
	_return_ = C.g_unix_mount_point_guess_symbolic_icon((*C.GUnixMountPoint)(_self_))
	return
}

func (_self_ *UnixMountPoint) IsLoopback() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_point_is_loopback((*C.GUnixMountPoint)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixMountPoint) IsReadonly() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_point_is_readonly((*C.GUnixMountPoint)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *UnixMountPoint) IsUserMountable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_unix_mount_point_is_user_mountable((*C.GUnixMountPoint)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

const FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = C.G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS
const IO_ERROR_READ_ONLY = C.G_IO_ERROR_READ_ONLY
const BUS_TYPE_NONE = C.G_BUS_TYPE_NONE
const IO_ERROR_NOT_REGULAR_FILE = C.G_IO_ERROR_NOT_REGULAR_FILE
const SOCKET_TYPE_DATAGRAM = C.G_SOCKET_TYPE_DATAGRAM
const DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = C.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START
const DBUS_ERROR_FAILED = C.G_DBUS_ERROR_FAILED
const IO_ERROR_INVALID_ARGUMENT = C.G_IO_ERROR_INVALID_ARGUMENT
const DBUS_ERROR_NO_NETWORK = C.G_DBUS_ERROR_NO_NETWORK
const FILE_ATTRIBUTE_FILESYSTEM_TYPE = C.G_FILE_ATTRIBUTE_FILESYSTEM_TYPE
const FILE_CREATE_PRIVATE = C.G_FILE_CREATE_PRIVATE
const FILE_TYPE_SPECIAL = C.G_FILE_TYPE_SPECIAL
const DBUS_ERROR_LIMITS_EXCEEDED = C.G_DBUS_ERROR_LIMITS_EXCEEDED
const APPLICATION_SEND_ENVIRONMENT = C.G_APPLICATION_SEND_ENVIRONMENT
const IO_STREAM_SPLICE_WAIT_FOR_BOTH = C.G_IO_STREAM_SPLICE_WAIT_FOR_BOTH
const TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER = C.G_TLS_DATABASE_PURPOSE_AUTHENTICATE_SERVER
const DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START = C.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_DO_NOT_AUTO_START
const FILE_ATTRIBUTE_UNIX_MODE = C.G_FILE_ATTRIBUTE_UNIX_MODE
const FILE_ATTRIBUTE_TYPE_INT32 = C.G_FILE_ATTRIBUTE_TYPE_INT32
const TLS_DATABASE_VERIFY_NONE = C.G_TLS_DATABASE_VERIFY_NONE
const DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = C.G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES
const FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = C.G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL
const DBUS_ERROR_SPAWN_CHILD_SIGNALED = C.G_DBUS_ERROR_SPAWN_CHILD_SIGNALED
const DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
const IO_ERROR_TOO_MANY_LINKS = C.G_IO_ERROR_TOO_MANY_LINKS
const DBUS_ERROR_SPAWN_FAILED = C.G_DBUS_ERROR_SPAWN_FAILED
const FILE_ATTRIBUTE_UNIX_BLOCKS = C.G_FILE_ATTRIBUTE_UNIX_BLOCKS
const IO_ERROR_PROXY_NOT_ALLOWED = C.G_IO_ERROR_PROXY_NOT_ALLOWED
const SOCKET_CLIENT_RESOLVED = C.G_SOCKET_CLIENT_RESOLVED
const DBUS_ERROR_SERVICE_UNKNOWN = C.G_DBUS_ERROR_SERVICE_UNKNOWN
const TLS_ERROR_CERTIFICATE_REQUIRED = C.G_TLS_ERROR_CERTIFICATE_REQUIRED
const DBUS_ERROR_NO_REPLY = C.G_DBUS_ERROR_NO_REPLY
const CREDENTIALS_TYPE_FREEBSD_CMSGCRED = C.G_CREDENTIALS_TYPE_FREEBSD_CMSGCRED
const DBUS_SEND_MESSAGE_FLAGS_NONE = C.G_DBUS_SEND_MESSAGE_FLAGS_NONE
const MENU_LINK_SUBMENU = C.G_MENU_LINK_SUBMENU
const NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME = C.G_NATIVE_VOLUME_MONITOR_EXTENSION_POINT_NAME
const TLS_BACKEND_EXTENSION_POINT_NAME = C.G_TLS_BACKEND_EXTENSION_POINT_NAME
const SOCKET_FAMILY_INVALID = C.G_SOCKET_FAMILY_INVALID
const FILE_ATTRIBUTE_STANDARD_SORT_ORDER = C.G_FILE_ATTRIBUTE_STANDARD_SORT_ORDER
const FILE_COPY_OVERWRITE = C.G_FILE_COPY_OVERWRITE
const IO_ERROR_WOULD_RECURSE = C.G_IO_ERROR_WOULD_RECURSE
const SETTINGS_BIND_GET = C.G_SETTINGS_BIND_GET
const SOCKET_CLIENT_COMPLETE = C.G_SOCKET_CLIENT_COMPLETE
const SOCKET_TYPE_STREAM = C.G_SOCKET_TYPE_STREAM
const RESOURCE_LOOKUP_FLAGS_NONE = C.G_RESOURCE_LOOKUP_FLAGS_NONE
const DBUS_ERROR_FILE_EXISTS = C.G_DBUS_ERROR_FILE_EXISTS
const DBUS_ERROR_OBJECT_PATH_IN_USE = C.G_DBUS_ERROR_OBJECT_PATH_IN_USE
const FILE_ATTRIBUTE_GVFS_BACKEND = C.G_FILE_ATTRIBUTE_GVFS_BACKEND
const DBUS_ERROR_NOT_SUPPORTED = C.G_DBUS_ERROR_NOT_SUPPORTED
const TLS_CERTIFICATE_VALIDATE_ALL = C.G_TLS_CERTIFICATE_VALIDATE_ALL
const FILE_ATTRIBUTE_TYPE_BYTE_STRING = C.G_FILE_ATTRIBUTE_TYPE_BYTE_STRING
const SETTINGS_BIND_SET = C.G_SETTINGS_BIND_SET
const ZLIB_COMPRESSOR_FORMAT_ZLIB = C.G_ZLIB_COMPRESSOR_FORMAT_ZLIB
const FILE_ATTRIBUTE_UNIX_DEVICE = C.G_FILE_ATTRIBUTE_UNIX_DEVICE
const SOCKET_CLIENT_CONNECTED = C.G_SOCKET_CLIENT_CONNECTED
const FILESYSTEM_PREVIEW_TYPE_NEVER = C.G_FILESYSTEM_PREVIEW_TYPE_NEVER
const DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER = C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_SERVER
const DBUS_MESSAGE_HEADER_FIELD_DESTINATION = C.G_DBUS_MESSAGE_HEADER_FIELD_DESTINATION
const TLS_ERROR_BAD_CERTIFICATE = C.G_TLS_ERROR_BAD_CERTIFICATE
const IO_ERROR_CANT_CREATE_BACKUP = C.G_IO_ERROR_CANT_CREATE_BACKUP
const DATA_STREAM_NEWLINE_TYPE_LF = C.G_DATA_STREAM_NEWLINE_TYPE_LF
const RESOURCE_ERROR_INTERNAL = C.G_RESOURCE_ERROR_INTERNAL
const FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE = C.G_FILE_ATTRIBUTE_STANDARD_ALLOCATED_SIZE
const SOCKET_PROTOCOL_UDP = C.G_SOCKET_PROTOCOL_UDP
const DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN
const FILE_ATTRIBUTE_TYPE_UINT64 = C.G_FILE_ATTRIBUTE_TYPE_UINT64
const SETTINGS_BIND_GET_NO_CHANGES = C.G_SETTINGS_BIND_GET_NO_CHANGES
const FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME = C.G_FILE_ATTRIBUTE_STANDARD_DISPLAY_NAME
const FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = C.G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS
const FILE_ATTRIBUTE_STATUS_SET = C.G_FILE_ATTRIBUTE_STATUS_SET
const FILE_MONITOR_EVENT_PRE_UNMOUNT = C.G_FILE_MONITOR_EVENT_PRE_UNMOUNT
const FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = C.G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED
const FILE_ATTRIBUTE_OWNER_USER_REAL = C.G_FILE_ATTRIBUTE_OWNER_USER_REAL
const FILE_ATTRIBUTE_STANDARD_IS_BACKUP = C.G_FILE_ATTRIBUTE_STANDARD_IS_BACKUP
const IO_STREAM_SPLICE_NONE = C.G_IO_STREAM_SPLICE_NONE
const DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS = C.G_DBUS_MESSAGE_HEADER_FIELD_NUM_UNIX_FDS
const FILE_ATTRIBUTE_TRASH_ITEM_COUNT = C.G_FILE_ATTRIBUTE_TRASH_ITEM_COUNT
const FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_CONTENT_TYPE
const IO_ERROR_INVALID_DATA = C.G_IO_ERROR_INVALID_DATA
const FILE_ATTRIBUTE_ACCESS_CAN_TRASH = C.G_FILE_ATTRIBUTE_ACCESS_CAN_TRASH
const FILE_ATTRIBUTE_ACCESS_CAN_WRITE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_WRITE
const FILE_ATTRIBUTE_TIME_ACCESS_USEC = C.G_FILE_ATTRIBUTE_TIME_ACCESS_USEC
const MOUNT_OPERATION_UNHANDLED = C.G_MOUNT_OPERATION_UNHANDLED
const TLS_PASSWORD_FINAL_TRY = C.G_TLS_PASSWORD_FINAL_TRY
const DATA_STREAM_NEWLINE_TYPE_ANY = C.G_DATA_STREAM_NEWLINE_TYPE_ANY
const FILE_MONITOR_EVENT_DELETED = C.G_FILE_MONITOR_EVENT_DELETED
const DATA_STREAM_NEWLINE_TYPE_CR_LF = C.G_DATA_STREAM_NEWLINE_TYPE_CR_LF
const SOCKET_TYPE_SEQPACKET = C.G_SOCKET_TYPE_SEQPACKET
const FILE_ATTRIBUTE_UNIX_NLINK = C.G_FILE_ATTRIBUTE_UNIX_NLINK
const DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL = C.G_DBUS_MESSAGE_HEADER_FIELD_REPLY_SERIAL
const SOCKET_MSG_PEEK = C.G_SOCKET_MSG_PEEK
const FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_EJECT
const TLS_INTERACTION_UNHANDLED = C.G_TLS_INTERACTION_UNHANDLED
const FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_MOUNT
const FILE_ATTRIBUTE_ID_FILE = C.G_FILE_ATTRIBUTE_ID_FILE
const FILE_ATTRIBUTE_STANDARD_NAME = C.G_FILE_ATTRIBUTE_STANDARD_NAME
const TLS_ERROR_UNAVAILABLE = C.G_TLS_ERROR_UNAVAILABLE
const TLS_ERROR_MISC = C.G_TLS_ERROR_MISC
const DBUS_MESSAGE_TYPE_SIGNAL = C.G_DBUS_MESSAGE_TYPE_SIGNAL
const FILE_ATTRIBUTE_TIME_CREATED_USEC = C.G_FILE_ATTRIBUTE_TIME_CREATED_USEC
const FILE_MONITOR_SEND_MOVED = C.G_FILE_MONITOR_SEND_MOVED
const FILE_ATTRIBUTE_TRASH_ORIG_PATH = C.G_FILE_ATTRIBUTE_TRASH_ORIG_PATH
const FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON = C.G_FILE_ATTRIBUTE_STANDARD_SYMBOLIC_ICON
const FILE_CREATE_REPLACE_DESTINATION = C.G_FILE_CREATE_REPLACE_DESTINATION
const FILE_CREATE_NONE = C.G_FILE_CREATE_NONE
const DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN = C.G_DBUS_MESSAGE_BYTE_ORDER_BIG_ENDIAN
const FILE_ATTRIBUTE_TYPE_BOOLEAN = C.G_FILE_ATTRIBUTE_TYPE_BOOLEAN
const IO_ERROR_WOULD_BLOCK = C.G_IO_ERROR_WOULD_BLOCK
const DBUS_ERROR_SPAWN_FORK_FAILED = C.G_DBUS_ERROR_SPAWN_FORK_FAILED
const FILE_ATTRIBUTE_STATUS_ERROR_SETTING = C.G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING
const IO_ERROR_ADDRESS_IN_USE = C.G_IO_ERROR_ADDRESS_IN_USE
const DBUS_ERROR_SPAWN_SERVICE_INVALID = C.G_DBUS_ERROR_SPAWN_SERVICE_INVALID
const FILE_ATTRIBUTE_FILESYSTEM_USED = C.G_FILE_ATTRIBUTE_FILESYSTEM_USED
const DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN = C.G_DBUS_MESSAGE_BYTE_ORDER_LITTLE_ENDIAN
const SOCKET_PROTOCOL_DEFAULT = C.G_SOCKET_PROTOCOL_DEFAULT
const FILE_ATTRIBUTE_ACCESS_CAN_READ = C.G_FILE_ATTRIBUTE_ACCESS_CAN_READ
const APPLICATION_FLAGS_NONE = C.G_APPLICATION_FLAGS_NONE
const FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL = C.G_FILE_ATTRIBUTE_STANDARD_IS_VIRTUAL
const FILE_ATTRIBUTE_THUMBNAILING_FAILED = C.G_FILE_ATTRIBUTE_THUMBNAILING_FAILED
const FILE_ATTRIBUTE_ETAG_VALUE = C.G_FILE_ATTRIBUTE_ETAG_VALUE
const FILE_ATTRIBUTE_ID_FILESYSTEM = C.G_FILE_ATTRIBUTE_ID_FILESYSTEM
const APP_INFO_CREATE_SUPPORTS_URIS = C.G_APP_INFO_CREATE_SUPPORTS_URIS
const CONVERTER_ERROR = C.G_CONVERTER_ERROR
const FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START_DEGRADED
const FILE_MONITOR_EVENT_CHANGES_DONE_HINT = C.G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT
const DBUS_ERROR_TIMEOUT = C.G_DBUS_ERROR_TIMEOUT
const APP_INFO_CREATE_NEEDS_TERMINAL = C.G_APP_INFO_CREATE_NEEDS_TERMINAL
const TLS_CERTIFICATE_GENERIC_ERROR = C.G_TLS_CERTIFICATE_GENERIC_ERROR
const MOUNT_UNMOUNT_FORCE = C.G_MOUNT_UNMOUNT_FORCE
const FILE_ATTRIBUTE_UNIX_UID = C.G_FILE_ATTRIBUTE_UNIX_UID
const ASK_PASSWORD_NEED_DOMAIN = C.G_ASK_PASSWORD_NEED_DOMAIN
const EMBLEM_ORIGIN_TAG = C.G_EMBLEM_ORIGIN_TAG
const SOCKET_CLIENT_PROXY_NEGOTIATED = C.G_SOCKET_CLIENT_PROXY_NEGOTIATED
const DBUS_CONNECTION_FLAGS_NONE = C.G_DBUS_CONNECTION_FLAGS_NONE
const DBUS_PROPERTY_INFO_FLAGS_READABLE = C.G_DBUS_PROPERTY_INFO_FLAGS_READABLE
const SOCKET_PROTOCOL_UNKNOWN = C.G_SOCKET_PROTOCOL_UNKNOWN
const DBUS_ERROR_INVALID_SIGNATURE = C.G_DBUS_ERROR_INVALID_SIGNATURE
const FILE_COPY_NONE = C.G_FILE_COPY_NONE
const FILE_ATTRIBUTE_STANDARD_EDIT_NAME = C.G_FILE_ATTRIBUTE_STANDARD_EDIT_NAME
const CONVERTER_NO_FLAGS = C.G_CONVERTER_NO_FLAGS
const FILE_COPY_TARGET_DEFAULT_PERMS = C.G_FILE_COPY_TARGET_DEFAULT_PERMS
const FILE_ATTRIBUTE_TIME_CHANGED_USEC = C.G_FILE_ATTRIBUTE_TIME_CHANGED_USEC
const IO_ERROR_CANCELLED = C.G_IO_ERROR_CANCELLED
const TLS_PASSWORD_MANY_TRIES = C.G_TLS_PASSWORD_MANY_TRIES
const DBUS_ERROR_NO_MEMORY = C.G_DBUS_ERROR_NO_MEMORY
const DBUS_ERROR_INVALID_FILE_CONTENT = C.G_DBUS_ERROR_INVALID_FILE_CONTENT
const TLS_PASSWORD_RETRY = C.G_TLS_PASSWORD_RETRY
const RESOLVER_ERROR_INTERNAL = C.G_RESOLVER_ERROR_INTERNAL
const DBUS_ERROR_SPAWN_PERMISSIONS_INVALID = C.G_DBUS_ERROR_SPAWN_PERMISSIONS_INVALID
const MENU_ATTRIBUTE_TARGET = C.G_MENU_ATTRIBUTE_TARGET
const FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI = C.G_FILE_ATTRIBUTE_MOUNTABLE_HAL_UDI
const IO_MODULE_SCOPE_NONE = C.G_IO_MODULE_SCOPE_NONE
const FILE_TYPE_MOUNTABLE = C.G_FILE_TYPE_MOUNTABLE
const VOLUME_IDENTIFIER_KIND_UUID = C.G_VOLUME_IDENTIFIER_KIND_UUID
const RESOLVER_RECORD_TXT = C.G_RESOLVER_RECORD_TXT
const FILE_ATTRIBUTE_STANDARD_DESCRIPTION = C.G_FILE_ATTRIBUTE_STANDARD_DESCRIPTION
const DBUS_PROXY_FLAGS_NONE = C.G_DBUS_PROXY_FLAGS_NONE
const CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED = C.G_CREDENTIALS_TYPE_OPENBSD_SOCKPEERCRED
const TLS_CERTIFICATE_UNKNOWN_CA = C.G_TLS_CERTIFICATE_UNKNOWN_CA
const DBUS_SERVER_FLAGS_NONE = C.G_DBUS_SERVER_FLAGS_NONE
const APPLICATION_NON_UNIQUE = C.G_APPLICATION_NON_UNIQUE
const CONVERTER_FLUSH = C.G_CONVERTER_FLUSH
const IO_ERROR_NOT_MOUNTED = C.G_IO_ERROR_NOT_MOUNTED
const DRIVE_START_STOP_TYPE_PASSWORD = C.G_DRIVE_START_STOP_TYPE_PASSWORD
const EMBLEM_ORIGIN_DEVICE = C.G_EMBLEM_ORIGIN_DEVICE
const FILE_ATTRIBUTE_TYPE_STRING = C.G_FILE_ATTRIBUTE_TYPE_STRING
const BUS_NAME_OWNER_FLAGS_NONE = C.G_BUS_NAME_OWNER_FLAGS_NONE
const SOCKET_CLIENT_TLS_HANDSHAKED = C.G_SOCKET_CLIENT_TLS_HANDSHAKED
const FILE_ATTRIBUTE_DOS_IS_SYSTEM = C.G_FILE_ATTRIBUTE_DOS_IS_SYSTEM
const DBUS_MESSAGE_TYPE_INVALID = C.G_DBUS_MESSAGE_TYPE_INVALID
const FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT = C.G_FILE_ATTRIBUTE_UNIX_IS_MOUNTPOINT
const DBUS_ERROR_NAME_HAS_NO_OWNER = C.G_DBUS_ERROR_NAME_HAS_NO_OWNER
const PROXY_EXTENSION_POINT_NAME = C.G_PROXY_EXTENSION_POINT_NAME
const IO_ERROR_INVALID_FILENAME = C.G_IO_ERROR_INVALID_FILENAME
const DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME = C.G_DBUS_MESSAGE_HEADER_FIELD_ERROR_NAME
const IO_ERROR_WRONG_ETAG = C.G_IO_ERROR_WRONG_ETAG
const DBUS_SUBTREE_FLAGS_NONE = C.G_DBUS_SUBTREE_FLAGS_NONE
const ASK_PASSWORD_ANONYMOUS_SUPPORTED = C.G_ASK_PASSWORD_ANONYMOUS_SUPPORTED
const ASK_PASSWORD_NEED_USERNAME = C.G_ASK_PASSWORD_NEED_USERNAME
const FILE_ATTRIBUTE_UNIX_RDEV = C.G_FILE_ATTRIBUTE_UNIX_RDEV
const APPLICATION_HANDLES_OPEN = C.G_APPLICATION_HANDLES_OPEN
const DBUS_MESSAGE_HEADER_FIELD_INTERFACE = C.G_DBUS_MESSAGE_HEADER_FIELD_INTERFACE
const SETTINGS_BIND_INVERT_BOOLEAN = C.G_SETTINGS_BIND_INVERT_BOOLEAN
const ASK_PASSWORD_SAVING_SUPPORTED = C.G_ASK_PASSWORD_SAVING_SUPPORTED
const DBUS_CALL_FLAGS_NO_AUTO_START = C.G_DBUS_CALL_FLAGS_NO_AUTO_START
const DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT = C.G_DBUS_CONNECTION_FLAGS_AUTHENTICATION_CLIENT
const MOUNT_MOUNT_NONE = C.G_MOUNT_MOUNT_NONE
const TLS_ERROR_NOT_TLS = C.G_TLS_ERROR_NOT_TLS
const UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = C.G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED
const IO_ERROR_TOO_MANY_OPEN_FILES = C.G_IO_ERROR_TOO_MANY_OPEN_FILES
const DBUS_SIGNAL_FLAGS_NONE = C.G_DBUS_SIGNAL_FLAGS_NONE
const SOCKET_FAMILY_IPV4 = C.G_SOCKET_FAMILY_IPV4
const RESOLVER_RECORD_SOA = C.G_RESOLVER_RECORD_SOA
const DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE = C.G_DBUS_OBJECT_MANAGER_CLIENT_FLAGS_NONE
const APPLICATION_HANDLES_COMMAND_LINE = C.G_APPLICATION_HANDLES_COMMAND_LINE
const BUS_TYPE_SYSTEM = C.G_BUS_TYPE_SYSTEM
const MOUNT_UNMOUNT_NONE = C.G_MOUNT_UNMOUNT_NONE
const APPLICATION_IS_SERVICE = C.G_APPLICATION_IS_SERVICE
const DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES = C.G_DBUS_SUBTREE_FLAGS_DISPATCH_TO_UNENUMERATED_NODES
const VOLUME_IDENTIFIER_KIND_UNIX_DEVICE = C.G_VOLUME_IDENTIFIER_KIND_UNIX_DEVICE
const IO_ERROR_FAILED = C.G_IO_ERROR_FAILED
const SOCKET_MSG_NONE = C.G_SOCKET_MSG_NONE
const IO_ERROR_CLOSED = C.G_IO_ERROR_CLOSED
const FILE_ATTRIBUTE_MOUNTABLE_CAN_START = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_START
const DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN = C.G_DBUS_ERROR_SELINUX_SECURITY_CONTEXT_UNKNOWN
const SETTINGS_BIND_DEFAULT = C.G_SETTINGS_BIND_DEFAULT
const FILE_TYPE_SYMBOLIC_LINK = C.G_FILE_TYPE_SYMBOLIC_LINK
const IO_ERROR_CONNECTION_REFUSED = C.G_IO_ERROR_CONNECTION_REFUSED
const IO_ERROR_PARTIAL_INPUT = C.G_IO_ERROR_PARTIAL_INPUT
const DBUS_MESSAGE_TYPE_METHOD_RETURN = C.G_DBUS_MESSAGE_TYPE_METHOD_RETURN
const DBUS_MESSAGE_TYPE_ERROR = C.G_DBUS_MESSAGE_TYPE_ERROR
const DBUS_CAPABILITY_FLAGS_NONE = C.G_DBUS_CAPABILITY_FLAGS_NONE
const TLS_AUTHENTICATION_REQUESTED = C.G_TLS_AUTHENTICATION_REQUESTED
const DBUS_ERROR_FILE_NOT_FOUND = C.G_DBUS_ERROR_FILE_NOT_FOUND
const FILE_ATTRIBUTE_TIME_MODIFIED_USEC = C.G_FILE_ATTRIBUTE_TIME_MODIFIED_USEC
const DBUS_SIGNAL_FLAGS_NO_MATCH_RULE = C.G_DBUS_SIGNAL_FLAGS_NO_MATCH_RULE
const IO_ERROR_HOST_NOT_FOUND = C.G_IO_ERROR_HOST_NOT_FOUND
const APPLICATION_IS_LAUNCHER = C.G_APPLICATION_IS_LAUNCHER
const PROXY_RESOLVER_EXTENSION_POINT_NAME = C.G_PROXY_RESOLVER_EXTENSION_POINT_NAME
const MOUNT_OPERATION_HANDLED = C.G_MOUNT_OPERATION_HANDLED
const DBUS_MESSAGE_HEADER_FIELD_SENDER = C.G_DBUS_MESSAGE_HEADER_FIELD_SENDER
const FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW = C.G_FILE_ATTRIBUTE_FILESYSTEM_USE_PREVIEW
const VOLUME_IDENTIFIER_KIND_CLASS = C.G_VOLUME_IDENTIFIER_KIND_CLASS
const DRIVE_START_STOP_TYPE_MULTIDISK = C.G_DRIVE_START_STOP_TYPE_MULTIDISK
const FILE_ATTRIBUTE_TIME_MODIFIED = C.G_FILE_ATTRIBUTE_TIME_MODIFIED
const BUS_TYPE_SESSION = C.G_BUS_TYPE_SESSION
const FILE_MONITOR_EVENT_UNMOUNTED = C.G_FILE_MONITOR_EVENT_UNMOUNTED
const DRIVE_START_STOP_TYPE_NETWORK = C.G_DRIVE_START_STOP_TYPE_NETWORK
const DBUS_ERROR_SPAWN_FILE_INVALID = C.G_DBUS_ERROR_SPAWN_FILE_INVALID
const DBUS_ERROR_SPAWN_CONFIG_INVALID = C.G_DBUS_ERROR_SPAWN_CONFIG_INVALID
const FILE_TYPE_UNKNOWN = C.G_FILE_TYPE_UNKNOWN
const FILE_TYPE_DIRECTORY = C.G_FILE_TYPE_DIRECTORY
const VOLUME_IDENTIFIER_KIND_LABEL = C.G_VOLUME_IDENTIFIER_KIND_LABEL
const APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = C.G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION
const DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND = C.G_DBUS_ERROR_SPAWN_SERVICE_NOT_FOUND
const ASK_PASSWORD_NEED_PASSWORD = C.G_ASK_PASSWORD_NEED_PASSWORD
const FILE_ATTRIBUTE_DOS_IS_ARCHIVE = C.G_FILE_ATTRIBUTE_DOS_IS_ARCHIVE
const CONVERTER_FLUSHED = C.G_CONVERTER_FLUSHED
const FILE_ATTRIBUTE_STANDARD_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_TYPE
const SOCKET_FAMILY_UNIX = C.G_SOCKET_FAMILY_UNIX
const TLS_INTERACTION_HANDLED = C.G_TLS_INTERACTION_HANDLED
const MENU_LINK_SECTION = C.G_MENU_LINK_SECTION
const TLS_PASSWORD_NONE = C.G_TLS_PASSWORD_NONE
const FILE_MONITOR_WATCH_MOUNTS = C.G_FILE_MONITOR_WATCH_MOUNTS
const DBUS_ERROR_IO_ERROR = C.G_DBUS_ERROR_IO_ERROR
const FILE_ATTRIBUTE_STANDARD_SIZE = C.G_FILE_ATTRIBUTE_STANDARD_SIZE
const DBUS_ERROR_MATCH_RULE_NOT_FOUND = C.G_DBUS_ERROR_MATCH_RULE_NOT_FOUND
const TLS_DATABASE_LOOKUP_NONE = C.G_TLS_DATABASE_LOOKUP_NONE
const IO_ERROR_TIMED_OUT = C.G_IO_ERROR_TIMED_OUT
const FILE_ATTRIBUTE_STANDARD_COPY_NAME = C.G_FILE_ATTRIBUTE_STANDARD_COPY_NAME
const DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING = C.G_DBUS_CONNECTION_FLAGS_DELAY_MESSAGE_PROCESSING
const DBUS_PROPERTY_INFO_FLAGS_NONE = C.G_DBUS_PROPERTY_INFO_FLAGS_NONE
const DBUS_MESSAGE_HEADER_FIELD_PATH = C.G_DBUS_MESSAGE_HEADER_FIELD_PATH
const SOCKET_PROTOCOL_SCTP = C.G_SOCKET_PROTOCOL_SCTP
const IO_STREAM_SPLICE_CLOSE_STREAM1 = C.G_IO_STREAM_SPLICE_CLOSE_STREAM1
const IO_STREAM_SPLICE_CLOSE_STREAM2 = C.G_IO_STREAM_SPLICE_CLOSE_STREAM2
const DBUS_ERROR_MATCH_RULE_INVALID = C.G_DBUS_ERROR_MATCH_RULE_INVALID
const BUS_TYPE_STARTER = C.G_BUS_TYPE_STARTER
const FILE_MONITOR_EVENT_CREATED = C.G_FILE_MONITOR_EVENT_CREATED
const FILE_ATTRIBUTE_TRASH_DELETION_DATE = C.G_FILE_ATTRIBUTE_TRASH_DELETION_DATE
const DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL = C.G_DBUS_SEND_MESSAGE_FLAGS_PRESERVE_SERIAL
const DBUS_MESSAGE_TYPE_METHOD_CALL = C.G_DBUS_MESSAGE_TYPE_METHOD_CALL
const UNIX_SOCKET_ADDRESS_PATH = C.G_UNIX_SOCKET_ADDRESS_PATH
const FILE_ATTRIBUTE_STANDARD_IS_HIDDEN = C.G_FILE_ATTRIBUTE_STANDARD_IS_HIDDEN
const IO_ERROR_EXISTS = C.G_IO_ERROR_EXISTS
const DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN
const FILE_ATTRIBUTE_TYPE_INT64 = C.G_FILE_ATTRIBUTE_TYPE_INT64
const FILE_COPY_ALL_METADATA = C.G_FILE_COPY_ALL_METADATA
const CONVERTER_FINISHED = C.G_CONVERTER_FINISHED
const FILE_ATTRIBUTE_STANDARD_IS_SYMLINK = C.G_FILE_ATTRIBUTE_STANDARD_IS_SYMLINK
const TLS_AUTHENTICATION_NONE = C.G_TLS_AUTHENTICATION_NONE
const CREDENTIALS_TYPE_LINUX_UCRED = C.G_CREDENTIALS_TYPE_LINUX_UCRED
const IO_ERROR_NOT_FOUND = C.G_IO_ERROR_NOT_FOUND
const FILE_ATTRIBUTE_STATUS_UNSET = C.G_FILE_ATTRIBUTE_STATUS_UNSET
const UNIX_SOCKET_ADDRESS_ABSTRACT = C.G_UNIX_SOCKET_ADDRESS_ABSTRACT
const DBUS_ERROR_INVALID_ARGS = C.G_DBUS_ERROR_INVALID_ARGS
const FILE_ATTRIBUTE_OWNER_USER = C.G_FILE_ATTRIBUTE_OWNER_USER
const DBUS_ERROR_ADDRESS_IN_USE = C.G_DBUS_ERROR_ADDRESS_IN_USE
const FILE_TYPE_REGULAR = C.G_FILE_TYPE_REGULAR
const FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET = C.G_FILE_ATTRIBUTE_STANDARD_SYMLINK_TARGET
const DBUS_ERROR_SPAWN_CHILD_EXITED = C.G_DBUS_ERROR_SPAWN_CHILD_EXITED
const FILE_ATTRIBUTE_TIME_CHANGED = C.G_FILE_ATTRIBUTE_TIME_CHANGED
const DBUS_SERVER_FLAGS_RUN_IN_THREAD = C.G_DBUS_SERVER_FLAGS_RUN_IN_THREAD
const SOCKET_CLIENT_PROXY_NEGOTIATING = C.G_SOCKET_CLIENT_PROXY_NEGOTIATING
const DBUS_MESSAGE_HEADER_FIELD_INVALID = C.G_DBUS_MESSAGE_HEADER_FIELD_INVALID
const FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_STOP
const TLS_DATABASE_LOOKUP_KEYPAIR = C.G_TLS_DATABASE_LOOKUP_KEYPAIR
const FILE_ATTRIBUTE_PREVIEW_ICON = C.G_FILE_ATTRIBUTE_PREVIEW_ICON
const IO_ERROR_NOT_MOUNTABLE_FILE = C.G_IO_ERROR_NOT_MOUNTABLE_FILE
const FILE_QUERY_INFO_NONE = C.G_FILE_QUERY_INFO_NONE
const FILE_TYPE_SHORTCUT = C.G_FILE_TYPE_SHORTCUT
const DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS = C.G_DBUS_SERVER_FLAGS_AUTHENTICATION_ALLOW_ANONYMOUS
const DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN = C.G_DBUS_ERROR_UNIX_PROCESS_ID_UNKNOWN
const TLS_ERROR_HANDSHAKE = C.G_TLS_ERROR_HANDSHAKE
const DBUS_ERROR_UNKNOWN_METHOD = C.G_DBUS_ERROR_UNKNOWN_METHOD
const IO_ERROR_PROXY_NEED_AUTH = C.G_IO_ERROR_PROXY_NEED_AUTH
const TLS_CERTIFICATE_BAD_IDENTITY = C.G_TLS_CERTIFICATE_BAD_IDENTITY
const VOLUME_IDENTIFIER_KIND_NFS_MOUNT = C.G_VOLUME_IDENTIFIER_KIND_NFS_MOUNT
const DBUS_MESSAGE_FLAGS_NO_AUTO_START = C.G_DBUS_MESSAGE_FLAGS_NO_AUTO_START
const FILE_ATTRIBUTE_STANDARD_TARGET_URI = C.G_FILE_ATTRIBUTE_STANDARD_TARGET_URI
const SETTINGS_BIND_NO_SENSITIVITY = C.G_SETTINGS_BIND_NO_SENSITIVITY
const OUTPUT_STREAM_SPLICE_CLOSE_TARGET = C.G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET
const IO_ERROR_FAILED_HANDLED = C.G_IO_ERROR_FAILED_HANDLED
const DBUS_ERROR_BAD_ADDRESS = C.G_DBUS_ERROR_BAD_ADDRESS
const MOUNT_OPERATION_ABORTED = C.G_MOUNT_OPERATION_ABORTED
const FILE_ATTRIBUTE_TIME_ACCESS = C.G_FILE_ATTRIBUTE_TIME_ACCESS
const DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN = C.G_DBUS_ERROR_ADT_AUDIT_DATA_UNKNOWN
const CREDENTIALS_TYPE_INVALID = C.G_CREDENTIALS_TYPE_INVALID
const IO_ERROR_PROXY_FAILED = C.G_IO_ERROR_PROXY_FAILED
const DBUS_PROPERTY_INFO_FLAGS_WRITABLE = C.G_DBUS_PROPERTY_INFO_FLAGS_WRITABLE
const SOCKET_MSG_OOB = C.G_SOCKET_MSG_OOB
const FILE_ATTRIBUTE_TYPE_UINT32 = C.G_FILE_ATTRIBUTE_TYPE_UINT32
const TLS_REHANDSHAKE_NEVER = C.G_TLS_REHANDSHAKE_NEVER
const SOCKET_CLIENT_TLS_HANDSHAKING = C.G_SOCKET_CLIENT_TLS_HANDSHAKING
const DATA_STREAM_NEWLINE_TYPE_CR = C.G_DATA_STREAM_NEWLINE_TYPE_CR
const IO_ERROR_HOST_UNREACHABLE = C.G_IO_ERROR_HOST_UNREACHABLE
const IO_ERROR_DBUS_ERROR = C.G_IO_ERROR_DBUS_ERROR
const IO_ERROR_NO_SPACE = C.G_IO_ERROR_NO_SPACE
const DRIVE_START_NONE = C.G_DRIVE_START_NONE
const DBUS_ERROR_SPAWN_NO_MEMORY = C.G_DBUS_ERROR_SPAWN_NO_MEMORY
const SOCKET_CLIENT_RESOLVING = C.G_SOCKET_CLIENT_RESOLVING
const IO_ERROR_PENDING = C.G_IO_ERROR_PENDING
const UNIX_SOCKET_ADDRESS_INVALID = C.G_UNIX_SOCKET_ADDRESS_INVALID
const MENU_ATTRIBUTE_ACTION = C.G_MENU_ATTRIBUTE_ACTION
const FILE_ATTRIBUTE_ACCESS_CAN_RENAME = C.G_FILE_ATTRIBUTE_ACCESS_CAN_RENAME
const DBUS_ERROR_NO_SERVER = C.G_DBUS_ERROR_NO_SERVER
const DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION = C.G_DBUS_CONNECTION_FLAGS_MESSAGE_BUS_CONNECTION
const FILE_MONITOR_EVENT_MOVED = C.G_FILE_MONITOR_EVENT_MOVED
const FILE_ATTRIBUTE_UNIX_INODE = C.G_FILE_ATTRIBUTE_UNIX_INODE
const FILE_ATTRIBUTE_TYPE_INVALID = C.G_FILE_ATTRIBUTE_TYPE_INVALID
const RESOURCE_ERROR_NOT_FOUND = C.G_RESOURCE_ERROR_NOT_FOUND
const SOCKET_TYPE_INVALID = C.G_SOCKET_TYPE_INVALID
const DBUS_MESSAGE_HEADER_FIELD_SIGNATURE = C.G_DBUS_MESSAGE_HEADER_FIELD_SIGNATURE
const CONVERTER_CONVERTED = C.G_CONVERTER_CONVERTED
const FILE_ATTRIBUTE_UNIX_BLOCK_SIZE = C.G_FILE_ATTRIBUTE_UNIX_BLOCK_SIZE
const FILE_ATTRIBUTE_THUMBNAIL_PATH = C.G_FILE_ATTRIBUTE_THUMBNAIL_PATH
const FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_EXECUTE
const RESOLVER_RECORD_SRV = C.G_RESOLVER_RECORD_SRV
const IO_ERROR_NOT_INITIALIZED = C.G_IO_ERROR_NOT_INITIALIZED
const RESOLVER_RECORD_MX = C.G_RESOLVER_RECORD_MX
const DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING = C.G_DBUS_CAPABILITY_FLAGS_UNIX_FD_PASSING
const VOLUME_MONITOR_EXTENSION_POINT_NAME = C.G_VOLUME_MONITOR_EXTENSION_POINT_NAME
const FILE_MONITOR_NONE = C.G_FILE_MONITOR_NONE
const VFS_EXTENSION_POINT_NAME = C.G_VFS_EXTENSION_POINT_NAME
const TLS_REHANDSHAKE_UNSAFELY = C.G_TLS_REHANDSHAKE_UNSAFELY
const EMBLEM_ORIGIN_UNKNOWN = C.G_EMBLEM_ORIGIN_UNKNOWN
const FILE_ATTRIBUTE_TYPE_OBJECT = C.G_FILE_ATTRIBUTE_TYPE_OBJECT
const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE = C.G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE
const DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME = C.G_DESKTOP_APP_INFO_LOOKUP_EXTENSION_POINT_NAME
const SOCKET_MSG_DONTROUTE = C.G_SOCKET_MSG_DONTROUTE
const IO_ERROR_ALREADY_MOUNTED = C.G_IO_ERROR_ALREADY_MOUNTED
const RESOLVER_ERROR_TEMPORARY_FAILURE = C.G_RESOLVER_ERROR_TEMPORARY_FAILURE
const FILE_ATTRIBUTE_OWNER_GROUP = C.G_FILE_ATTRIBUTE_OWNER_GROUP
const RESOLVER_ERROR_NOT_FOUND = C.G_RESOLVER_ERROR_NOT_FOUND
const DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = C.G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN
const DBUS_MESSAGE_FLAGS_NONE = C.G_DBUS_MESSAGE_FLAGS_NONE
const IO_ERROR_WOULD_MERGE = C.G_IO_ERROR_WOULD_MERGE
const ZLIB_COMPRESSOR_FORMAT_GZIP = C.G_ZLIB_COMPRESSOR_FORMAT_GZIP
const ZLIB_COMPRESSOR_FORMAT_RAW = C.G_ZLIB_COMPRESSOR_FORMAT_RAW
const TLS_ERROR_EOF = C.G_TLS_ERROR_EOF
const FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_POLL
const VOLUME_IDENTIFIER_KIND_HAL_UDI = C.G_VOLUME_IDENTIFIER_KIND_HAL_UDI
const TLS_CERTIFICATE_NOT_ACTIVATED = C.G_TLS_CERTIFICATE_NOT_ACTIVATED
const IO_ERROR_PERMISSION_DENIED = C.G_IO_ERROR_PERMISSION_DENIED
const FILE_ATTRIBUTE_UNIX_GID = C.G_FILE_ATTRIBUTE_UNIX_GID
const EMBLEM_ORIGIN_LIVEMETADATA = C.G_EMBLEM_ORIGIN_LIVEMETADATA
const TLS_CERTIFICATE_INSECURE = C.G_TLS_CERTIFICATE_INSECURE
const PASSWORD_SAVE_NEVER = C.G_PASSWORD_SAVE_NEVER
const IO_ERROR_IS_DIRECTORY = C.G_IO_ERROR_IS_DIRECTORY
const DBUS_ERROR_ACCESS_DENIED = C.G_DBUS_ERROR_ACCESS_DENIED
const FILE_ATTRIBUTE_STANDARD_ICON = C.G_FILE_ATTRIBUTE_STANDARD_ICON
const FILE_ATTRIBUTE_SELINUX_CONTEXT = C.G_FILE_ATTRIBUTE_SELINUX_CONTEXT
const FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT = C.G_FILE_ATTRIBUTE_MOUNTABLE_CAN_UNMOUNT
const UNIX_SOCKET_ADDRESS_ANONYMOUS = C.G_UNIX_SOCKET_ADDRESS_ANONYMOUS
const FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC = C.G_FILE_ATTRIBUTE_MOUNTABLE_IS_MEDIA_CHECK_AUTOMATIC
const FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = C.G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE
const FILE_ATTRIBUTE_FILESYSTEM_SIZE = C.G_FILE_ATTRIBUTE_FILESYSTEM_SIZE
const TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT = C.G_TLS_DATABASE_PURPOSE_AUTHENTICATE_CLIENT
const DBUS_INTERFACE_SKELETON_FLAGS_NONE = C.G_DBUS_INTERFACE_SKELETON_FLAGS_NONE
const FILE_ATTRIBUTE_TYPE_STRINGV = C.G_FILE_ATTRIBUTE_TYPE_STRINGV
const FILE_MONITOR_EVENT_CHANGED = C.G_FILE_MONITOR_EVENT_CHANGED
const RESOURCE_FLAGS_NONE = C.G_RESOURCE_FLAGS_NONE
const FILE_ATTRIBUTE_INFO_NONE = C.G_FILE_ATTRIBUTE_INFO_NONE
const BUS_NAME_OWNER_FLAGS_REPLACE = C.G_BUS_NAME_OWNER_FLAGS_REPLACE
const BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = C.G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT
const RESOLVER_RECORD_NS = C.G_RESOLVER_RECORD_NS
const FILE_ATTRIBUTE_TIME_CREATED = C.G_FILE_ATTRIBUTE_TIME_CREATED
const BUS_NAME_WATCHER_FLAGS_NONE = C.G_BUS_NAME_WATCHER_FLAGS_NONE
const OUTPUT_STREAM_SPLICE_NONE = C.G_OUTPUT_STREAM_SPLICE_NONE
const FILE_COPY_NOFOLLOW_SYMLINKS = C.G_FILE_COPY_NOFOLLOW_SYMLINKS
const SOCKET_CLIENT_CONNECTING = C.G_SOCKET_CLIENT_CONNECTING
const DRIVE_START_STOP_TYPE_UNKNOWN = C.G_DRIVE_START_STOP_TYPE_UNKNOWN
const TLS_CERTIFICATE_EXPIRED = C.G_TLS_CERTIFICATE_EXPIRED
const IO_MODULE_SCOPE_BLOCK_DUPLICATES = C.G_IO_MODULE_SCOPE_BLOCK_DUPLICATES
const DBUS_ERROR_DISCONNECTED = C.G_DBUS_ERROR_DISCONNECTED
const TLS_REHANDSHAKE_SAFELY = C.G_TLS_REHANDSHAKE_SAFELY
const FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE = C.G_FILE_ATTRIBUTE_MOUNTABLE_START_STOP_TYPE
const IO_ERROR_PROXY_AUTH_FAILED = C.G_IO_ERROR_PROXY_AUTH_FAILED
const DBUS_CALL_FLAGS_NONE = C.G_DBUS_CALL_FLAGS_NONE
const DBUS_ERROR_TIMED_OUT = C.G_DBUS_ERROR_TIMED_OUT
const IO_ERROR_FILENAME_TOO_LONG = C.G_IO_ERROR_FILENAME_TOO_LONG
const DBUS_ERROR_SPAWN_SETUP_FAILED = C.G_DBUS_ERROR_SPAWN_SETUP_FAILED
const DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = C.G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS
const SOCKET_FAMILY_IPV6 = C.G_SOCKET_FAMILY_IPV6
const FILE_COPY_NO_FALLBACK_FOR_MOVE = C.G_FILE_COPY_NO_FALLBACK_FOR_MOVE
const FILE_ATTRIBUTE_FILESYSTEM_READONLY = C.G_FILE_ATTRIBUTE_FILESYSTEM_READONLY
const PASSWORD_SAVE_PERMANENTLY = C.G_PASSWORD_SAVE_PERMANENTLY
const DRIVE_START_STOP_TYPE_SHUTDOWN = C.G_DRIVE_START_STOP_TYPE_SHUTDOWN
const DBUS_ERROR_AUTH_FAILED = C.G_DBUS_ERROR_AUTH_FAILED
const TEST_DBUS_NONE = C.G_TEST_DBUS_NONE
const DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD = C.G_DBUS_INTERFACE_SKELETON_FLAGS_HANDLE_METHOD_INVOCATIONS_IN_THREAD
const IO_ERROR_NOT_SYMBOLIC_LINK = C.G_IO_ERROR_NOT_SYMBOLIC_LINK
const NETWORK_MONITOR_EXTENSION_POINT_NAME = C.G_NETWORK_MONITOR_EXTENSION_POINT_NAME
const IO_ERROR_NOT_EMPTY = C.G_IO_ERROR_NOT_EMPTY
const DBUS_MESSAGE_HEADER_FIELD_MEMBER = C.G_DBUS_MESSAGE_HEADER_FIELD_MEMBER
const DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = C.G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES
const MENU_ATTRIBUTE_LABEL = C.G_MENU_ATTRIBUTE_LABEL
const FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE = C.G_FILE_ATTRIBUTE_MOUNTABLE_UNIX_DEVICE_FILE
const BUS_NAME_WATCHER_FLAGS_AUTO_START = C.G_BUS_NAME_WATCHER_FLAGS_AUTO_START
const TLS_INTERACTION_FAILED = C.G_TLS_INTERACTION_FAILED
const IO_ERROR_NETWORK_UNREACHABLE = C.G_IO_ERROR_NETWORK_UNREACHABLE
const FILE_ATTRIBUTE_ACCESS_CAN_DELETE = C.G_FILE_ATTRIBUTE_ACCESS_CAN_DELETE
const PASSWORD_SAVE_FOR_SESSION = C.G_PASSWORD_SAVE_FOR_SESSION
const IO_ERROR_NOT_SUPPORTED = C.G_IO_ERROR_NOT_SUPPORTED
const CONVERTER_INPUT_AT_END = C.G_CONVERTER_INPUT_AT_END
const FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = C.G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED
const DBUS_ERROR_SPAWN_EXEC_FAILED = C.G_DBUS_ERROR_SPAWN_EXEC_FAILED
const FILE_ATTRIBUTE_FILESYSTEM_FREE = C.G_FILE_ATTRIBUTE_FILESYSTEM_FREE
const APP_INFO_CREATE_NONE = C.G_APP_INFO_CREATE_NONE
const DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED = C.G_DBUS_MESSAGE_FLAGS_NO_REPLY_EXPECTED
const RESOURCE_FLAGS_COMPRESSED = C.G_RESOURCE_FLAGS_COMPRESSED
const TLS_CERTIFICATE_REVOKED = C.G_TLS_CERTIFICATE_REVOKED
const TLS_AUTHENTICATION_REQUIRED = C.G_TLS_AUTHENTICATION_REQUIRED
const OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = C.G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE
const SOCKET_PROTOCOL_TCP = C.G_SOCKET_PROTOCOL_TCP
const IO_ERROR_NOT_DIRECTORY = C.G_IO_ERROR_NOT_DIRECTORY
const FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE = C.G_FILE_ATTRIBUTE_STANDARD_FAST_CONTENT_TYPE
const IO_ERROR_BUSY = C.G_IO_ERROR_BUSY
const FILE_COPY_BACKUP = C.G_FILE_COPY_BACKUP
