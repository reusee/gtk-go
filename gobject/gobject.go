// this file is auto-generated by go-gi

package gobject

// #cgo pkg-config: gobject-2.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <glib-object.h>
/*
typedef long double longdouble;
gboolean _true() { return TRUE; }
gboolean _false() { return FALSE; }
void _g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_BOOLEAN__FLAGS(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_BOOLEAN__FLAGS(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_STRING__OBJECT_POINTER(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__BOOLEAN(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__BOOLEAN(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__BOXED(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__BOXED(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__CHAR(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__CHAR(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__DOUBLE(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__DOUBLE(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__ENUM(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__ENUM(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__FLAGS(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__FLAGS(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__FLOAT(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__FLOAT(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__INT(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__INT(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__LONG(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__LONG(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__OBJECT(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__OBJECT(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__PARAM(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__PARAM(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__POINTER(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__POINTER(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__STRING(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__STRING(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UCHAR(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__UCHAR(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UINT(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__UINT(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UINT_POINTER(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__UINT_POINTER(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__ULONG(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__ULONG(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__VARIANT(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__VARIANT(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__VOID(GClosure* closure, GValue* return_value, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_VOID__VOID(closure, return_value, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_generic(GClosure* closure, GValue* return_gvalue, guint n_param_values, void* param_values, gpointer invocation_hint, gpointer marshal_data) {
	g_cclosure_marshal_generic(closure, return_gvalue, n_param_values, (const GValue*)(param_values), invocation_hint, marshal_data);
}
GType _g_boxed_type_register_static(void* name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free) {
	return g_boxed_type_register_static((const gchar*)(name), boxed_copy, boxed_free);
}
void _g_clear_object(void* object_ptr) {
	g_clear_object((volatile GObject**)(object_ptr));
}
void _g_enum_complete_type_info(GType g_enum_type, GTypeInfo* info, void* const_values) {
	g_enum_complete_type_info(g_enum_type, info, (const GEnumValue*)(const_values));
}
GEnumValue* _g_enum_get_value_by_name(GEnumClass* enum_class, void* name) {
	return g_enum_get_value_by_name(enum_class, (const gchar*)(name));
}
GEnumValue* _g_enum_get_value_by_nick(GEnumClass* enum_class, void* nick) {
	return g_enum_get_value_by_nick(enum_class, (const gchar*)(nick));
}
GType _g_enum_register_static(void* name, void* const_static_values) {
	return g_enum_register_static((const gchar*)(name), (const GEnumValue*)(const_static_values));
}
void _g_flags_complete_type_info(GType g_flags_type, GTypeInfo* info, void* const_values) {
	g_flags_complete_type_info(g_flags_type, info, (const GFlagsValue*)(const_values));
}
GFlagsValue* _g_flags_get_value_by_name(GFlagsClass* flags_class, void* name) {
	return g_flags_get_value_by_name(flags_class, (const gchar*)(name));
}
GFlagsValue* _g_flags_get_value_by_nick(GFlagsClass* flags_class, void* nick) {
	return g_flags_get_value_by_nick(flags_class, (const gchar*)(nick));
}
GType _g_flags_register_static(void* name, void* const_static_values) {
	return g_flags_register_static((const gchar*)(name), (const GFlagsValue*)(const_static_values));
}
GParamSpec* _g_param_spec_boolean(void* name, void* nick, void* blurb, gboolean default_value, GParamFlags flags) {
	return g_param_spec_boolean((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), default_value, flags);
}
GParamSpec* _g_param_spec_boxed(void* name, void* nick, void* blurb, GType boxed_type, GParamFlags flags) {
	return g_param_spec_boxed((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), boxed_type, flags);
}
GParamSpec* _g_param_spec_char(void* name, void* nick, void* blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags) {
	return g_param_spec_char((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_double(void* name, void* nick, void* blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags) {
	return g_param_spec_double((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_enum(void* name, void* nick, void* blurb, GType enum_type, gint default_value, GParamFlags flags) {
	return g_param_spec_enum((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), enum_type, default_value, flags);
}
GParamSpec* _g_param_spec_flags(void* name, void* nick, void* blurb, GType flags_type, guint default_value, GParamFlags flags) {
	return g_param_spec_flags((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), flags_type, default_value, flags);
}
GParamSpec* _g_param_spec_float(void* name, void* nick, void* blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags) {
	return g_param_spec_float((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_gtype(void* name, void* nick, void* blurb, GType is_a_type, GParamFlags flags) {
	return g_param_spec_gtype((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), is_a_type, flags);
}
GParamSpec* _g_param_spec_int(void* name, void* nick, void* blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags) {
	return g_param_spec_int((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_int64(void* name, void* nick, void* blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags) {
	return g_param_spec_int64((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_long(void* name, void* nick, void* blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags) {
	return g_param_spec_long((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_object(void* name, void* nick, void* blurb, GType object_type, GParamFlags flags) {
	return g_param_spec_object((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), object_type, flags);
}
GParamSpec* _g_param_spec_override(void* name, GParamSpec* overridden) {
	return g_param_spec_override((const gchar*)(name), overridden);
}
GParamSpec* _g_param_spec_param(void* name, void* nick, void* blurb, GType param_type, GParamFlags flags) {
	return g_param_spec_param((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), param_type, flags);
}
GParamSpec* _g_param_spec_pointer(void* name, void* nick, void* blurb, GParamFlags flags) {
	return g_param_spec_pointer((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), flags);
}
GParamSpec* _g_param_spec_string(void* name, void* nick, void* blurb, void* default_value, GParamFlags flags) {
	return g_param_spec_string((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), (const gchar*)(default_value), flags);
}
GParamSpec* _g_param_spec_uchar(void* name, void* nick, void* blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags) {
	return g_param_spec_uchar((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_uint(void* name, void* nick, void* blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags) {
	return g_param_spec_uint((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_uint64(void* name, void* nick, void* blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags) {
	return g_param_spec_uint64((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_ulong(void* name, void* nick, void* blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags) {
	return g_param_spec_ulong((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec* _g_param_spec_unichar(void* name, void* nick, void* blurb, gunichar default_value, GParamFlags flags) {
	return g_param_spec_unichar((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), default_value, flags);
}
GParamSpec* _g_param_spec_value_array(void* name, void* nick, void* blurb, GParamSpec* element_spec, GParamFlags flags) {
	return g_param_spec_value_array((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), element_spec, flags);
}
GParamSpec* _g_param_spec_variant(void* name, void* nick, void* blurb, void* type_, GVariant* default_value, GParamFlags flags) {
	return g_param_spec_variant((const gchar*)(name), (const gchar*)(nick), (const gchar*)(blurb), (const GVariantType*)(type_), default_value, flags);
}
GType _g_param_type_register_static(void* name, void* pspec_info) {
	return g_param_type_register_static((const gchar*)(name), (const GParamSpecTypeInfo*)(pspec_info));
}
gboolean _g_param_value_convert(GParamSpec* pspec, void* src_value, GValue* dest_value, gboolean strict_validation) {
	return g_param_value_convert(pspec, (const GValue*)(src_value), dest_value, strict_validation);
}
gint _g_param_values_cmp(GParamSpec* pspec, void* value1, void* value2) {
	return g_param_values_cmp(pspec, (const GValue*)(value1), (const GValue*)(value2));
}
GType _g_pointer_type_register_static(void* name) {
	return g_pointer_type_register_static((const gchar*)(name));
}
gboolean _g_signal_accumulator_first_wins(GSignalInvocationHint* ihint, GValue* return_accu, void* handler_return, gpointer dummy) {
	return g_signal_accumulator_first_wins(ihint, return_accu, (const GValue*)(handler_return), dummy);
}
gboolean _g_signal_accumulator_true_handled(GSignalInvocationHint* ihint, GValue* return_accu, void* handler_return, gpointer dummy) {
	return g_signal_accumulator_true_handled(ihint, return_accu, (const GValue*)(handler_return), dummy);
}
gulong _g_signal_connect_closure(gpointer instance, void* detailed_signal, GClosure* closure, gboolean after) {
	return g_signal_connect_closure(instance, (const gchar*)(detailed_signal), closure, after);
}
gulong _g_signal_connect_data(gpointer instance, void* detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags) {
	return g_signal_connect_data(instance, (const gchar*)(detailed_signal), c_handler, data, destroy_data, connect_flags);
}
gulong _g_signal_connect_object(gpointer instance, void* detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags) {
	return g_signal_connect_object(instance, (const gchar*)(detailed_signal), c_handler, gobject, connect_flags);
}
guint _g_signal_lookup(void* name, GType itype) {
	return g_signal_lookup((const gchar*)(name), itype);
}
guint _g_signal_newv(void* signal_name, GType itype, GSignalFlags signal_flags, GClosure* class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType* param_types) {
	return g_signal_newv((const gchar*)(signal_name), itype, signal_flags, class_closure, accumulator, accu_data, c_marshaller, return_type, n_params, param_types);
}
void _g_signal_override_class_handler(void* signal_name, GType instance_type, GCallback class_handler) {
	g_signal_override_class_handler((const gchar*)(signal_name), instance_type, class_handler);
}
gboolean _g_signal_parse_name(void* detailed_signal, GType itype, guint* signal_id_p, GQuark* detail_p, gboolean force_detail_quark) {
	return g_signal_parse_name((const gchar*)(detailed_signal), itype, signal_id_p, detail_p, force_detail_quark);
}
void _g_signal_stop_emission_by_name(gpointer instance, void* detailed_signal) {
	g_signal_stop_emission_by_name(instance, (const gchar*)(detailed_signal));
}
gchar* _g_strdup_value_contents(void* value) {
	return g_strdup_value_contents((const GValue*)(value));
}
void _g_type_add_interface_static(GType instance_type, GType interface_type, void* info) {
	g_type_add_interface_static(instance_type, interface_type, (const GInterfaceInfo*)(info));
}
GType _g_type_from_name(void* name) {
	return g_type_from_name((const gchar*)(name));
}
GType _g_type_register_dynamic(GType parent_type, void* type_name, GTypePlugin* plugin, GTypeFlags flags) {
	return g_type_register_dynamic(parent_type, (const gchar*)(type_name), plugin, flags);
}
GType _g_type_register_fundamental(GType type_id, void* type_name, void* info, void* finfo, GTypeFlags flags) {
	return g_type_register_fundamental(type_id, (const gchar*)(type_name), (const GTypeInfo*)(info), (const GTypeFundamentalInfo*)(finfo), flags);
}
GType _g_type_register_static(GType parent_type, void* type_name, void* info, GTypeFlags flags) {
	return g_type_register_static(parent_type, (const gchar*)(type_name), (const GTypeInfo*)(info), flags);
}
GType _g_type_register_static_simple(GType parent_type, void* type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags) {
	return g_type_register_static_simple(parent_type, (const gchar*)(type_name), class_size, class_init, instance_size, instance_init, flags);
}
*/
import "C"
import (
	"unsafe"
	"runtime"
)

func CClosureMarshalBooleanBoxedBoxed(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_BOOLEAN__BOXED_BOXED(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_BOOLEAN__BOXED_BOXEDv

func CClosureMarshalBooleanFlags(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_BOOLEAN__FLAGS(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_BOOLEAN__FLAGSv

func CClosureMarshalStringObjectPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_STRING__OBJECT_POINTER(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_STRING__OBJECT_POINTERv

func CClosureMarshalVoidBoolean(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__BOOLEAN(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__BOOLEANv

func CClosureMarshalVoidBoxed(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__BOXED(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__BOXEDv

func CClosureMarshalVoidChar(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__CHAR(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__CHARv

func CClosureMarshalVoidDouble(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__DOUBLE(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__DOUBLEv

func CClosureMarshalVoidEnum(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__ENUM(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__ENUMv

func CClosureMarshalVoidFlags(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__FLAGS(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__FLAGSv

func CClosureMarshalVoidFloat(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__FLOAT(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__FLOATv

func CClosureMarshalVoidInt(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__INT(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__INTv

func CClosureMarshalVoidLong(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__LONG(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__LONGv

func CClosureMarshalVoidObject(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__OBJECT(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__OBJECTv

func CClosureMarshalVoidParam(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__PARAM(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__PARAMv

func CClosureMarshalVoidPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__POINTER(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__POINTERv

func CClosureMarshalVoidString(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__STRING(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__STRINGv

func CClosureMarshalVoidUchar(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__UCHAR(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__UCHARv

func CClosureMarshalVoidUint(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__UINT(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

func CClosureMarshalVoidUintPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__UINT_POINTER(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__UINT_POINTERv

//TODO g_cclosure_marshal_VOID__UINTv

func CClosureMarshalVoidUlong(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__ULONG(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__ULONGv

func CClosureMarshalVoidVariant(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__VARIANT(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__VARIANTv

func CClosureMarshalVoidVoid(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_value_ := (*C.GValue)(return_value)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_VOID__VOID(_cp_closure_, _cp_return_value_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_VOID__VOIDv

func CClosureMarshalGeneric(closure *Closure, return_gvalue *Value, n_param_values uint, param_values *Value, invocation_hint unsafe.Pointer, marshal_data unsafe.Pointer) {
	_cp_closure_ := (*C.GClosure)(closure)
	_cp_return_gvalue_ := (*C.GValue)(return_gvalue)
	_guint_n_param_values := C.guint(n_param_values)
	_cp_param_values_ := (*C.GValue)(param_values)
	_gpointer_invocation_hint := (C.gpointer)(invocation_hint)
	_gpointer_marshal_data := (C.gpointer)(marshal_data)
	C._g_cclosure_marshal_generic(_cp_closure_, _cp_return_gvalue_, _guint_n_param_values, unsafe.Pointer(_cp_param_values_), _gpointer_invocation_hint, _gpointer_marshal_data)
}

//TODO g_cclosure_marshal_generic_va

func CClosureNew(callback_func C.GCallback, user_data unsafe.Pointer, destroy_data C.GClosureNotify) *Closure {
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_cclosure_new(callback_func, _gpointer_user_data, destroy_data)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func CClosureNewObject(callback_func C.GCallback, object *C.GObject) *Closure {
	_c_return_ := C.g_cclosure_new_object(callback_func, object)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func CClosureNewObjectSwap(callback_func C.GCallback, object *C.GObject) *Closure {
	_c_return_ := C.g_cclosure_new_object_swap(callback_func, object)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func CClosureNewSwap(callback_func C.GCallback, user_data unsafe.Pointer, destroy_data C.GClosureNotify) *Closure {
	_gpointer_user_data := (C.gpointer)(user_data)
	_c_return_ := C.g_cclosure_new_swap(callback_func, _gpointer_user_data, destroy_data)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ClosureNewObject(sizeof_closure uint, object *C.GObject) *Closure {
	_guint_sizeof_closure := C.guint(sizeof_closure)
	_c_return_ := C.g_closure_new_object(_guint_sizeof_closure, object)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ClosureNewSimple(sizeof_closure uint, data unsafe.Pointer) *Closure {
	_guint_sizeof_closure := C.guint(sizeof_closure)
	_gpointer_data := (C.gpointer)(data)
	_c_return_ := C.g_closure_new_simple(_guint_sizeof_closure, _gpointer_data)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ParamSpecPoolNew(type_prefixing bool) *ParamSpecPool {
	_gbool_type_prefixing := C._false()
	if type_prefixing { _gbool_type_prefixing = C._true() }
	_c_return_ := C.g_param_spec_pool_new(_gbool_type_prefixing)
	_go_return_ := (*ParamSpecPool)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **ParamSpecPool) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TypeClassAddPrivate(g_class unsafe.Pointer, private_size uint64) {
	_gpointer_g_class := (C.gpointer)(g_class)
	_gsize_private_size := C.gsize(private_size)
	C.g_type_class_add_private(_gpointer_g_class, _gsize_private_size)
}

func TypeClassPeek(type_ C.GType) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_class_peek(type_))
}

func TypeClassPeekStatic(type_ C.GType) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_class_peek_static(type_))
}

func TypeClassRef(type_ C.GType) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_class_ref(type_))
}

func TypeInterfaceAddPrerequisite(interface_type C.GType, prerequisite_type C.GType) {
	C.g_type_interface_add_prerequisite(interface_type, prerequisite_type)
}

func TypeInterfaceGetPlugin(instance_type C.GType, interface_type C.GType) *C.GTypePlugin {
	return C.g_type_interface_get_plugin(instance_type, interface_type)
}

func TypeInterfacePeek(instance_class unsafe.Pointer, iface_type C.GType) unsafe.Pointer {
	_gpointer_instance_class := (C.gpointer)(instance_class)
	return unsafe.Pointer(C.g_type_interface_peek(_gpointer_instance_class, iface_type))
}

func TypeInterfacePrerequisites(interface_type C.GType, n_prerequisites *uint) *C.GType {
	_c_guint_n_prerequisites := C.guint(*n_prerequisites)
	_cp_guint_n_prerequisites := (*C.guint)(&_c_guint_n_prerequisites)
	return C.g_type_interface_prerequisites(interface_type, _cp_guint_n_prerequisites)
}

func TypeValueTablePeek(type_ C.GType) *TypeValueTable {
	_c_return_ := C.g_type_value_table_peek(type_)
	_go_return_ := (*TypeValueTable)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TypeValueTable) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func ValueRegisterTransformFunc(src_type C.GType, dest_type C.GType, transform_func C.GValueTransform) {
	C.g_value_register_transform_func(src_type, dest_type, transform_func)
}

func ValueTypeCompatible(src_type C.GType, dest_type C.GType) bool {
	return gboolean2bool(C.g_value_type_compatible(src_type, dest_type))
}

func ValueTypeTransformable(src_type C.GType, dest_type C.GType) bool {
	return gboolean2bool(C.g_value_type_transformable(src_type, dest_type))
}

//Skipped g_value_array_new

func BoxedCopy(boxed_type C.GType, src_boxed unsafe.Pointer) unsafe.Pointer {
	_gpointer_src_boxed := (C.gconstpointer)(src_boxed)
	return unsafe.Pointer(C.g_boxed_copy(boxed_type, _gpointer_src_boxed))
}

func BoxedFree(boxed_type C.GType, boxed unsafe.Pointer) {
	_gpointer_boxed := (C.gpointer)(boxed)
	C.g_boxed_free(boxed_type, _gpointer_boxed)
}

func BoxedTypeRegisterStatic(name string, boxed_copy C.GBoxedCopyFunc, boxed_free C.GBoxedFreeFunc) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return C._g_boxed_type_register_static(unsafe.Pointer(_gstr_name), boxed_copy, boxed_free)
}

func ClearObject(object_ptr unsafe.Pointer) {
	C._g_clear_object(unsafe.Pointer(object_ptr))
}

func EnumCompleteTypeInfo(g_enum_type C.GType, info *TypeInfo, const_values *EnumValue) {
	_cp_info_ := (*C.GTypeInfo)(info)
	_cp_const_values_ := (*C.GEnumValue)(const_values)
	C._g_enum_complete_type_info(g_enum_type, _cp_info_, unsafe.Pointer(_cp_const_values_))
}

func EnumGetValue(enum_class *EnumClass, value int) *EnumValue {
	_cp_enum_class_ := (*C.GEnumClass)(enum_class)
	_gint_value := C.gint(value)
	_c_return_ := C.g_enum_get_value(_cp_enum_class_, _gint_value)
	_go_return_ := (*EnumValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **EnumValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func EnumGetValueByName(enum_class *EnumClass, name string) *EnumValue {
	_cp_enum_class_ := (*C.GEnumClass)(enum_class)
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_c_return_ := C._g_enum_get_value_by_name(_cp_enum_class_, unsafe.Pointer(_gstr_name))
	_go_return_ := (*EnumValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **EnumValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func EnumGetValueByNick(enum_class *EnumClass, nick string) *EnumValue {
	_cp_enum_class_ := (*C.GEnumClass)(enum_class)
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_c_return_ := C._g_enum_get_value_by_nick(_cp_enum_class_, unsafe.Pointer(_gstr_nick))
	_go_return_ := (*EnumValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **EnumValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func EnumRegisterStatic(name string, const_static_values *EnumValue) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cp_const_static_values_ := (*C.GEnumValue)(const_static_values)
	return C._g_enum_register_static(unsafe.Pointer(_gstr_name), unsafe.Pointer(_cp_const_static_values_))
}

func FlagsCompleteTypeInfo(g_flags_type C.GType, info *TypeInfo, const_values *FlagsValue) {
	_cp_info_ := (*C.GTypeInfo)(info)
	_cp_const_values_ := (*C.GFlagsValue)(const_values)
	C._g_flags_complete_type_info(g_flags_type, _cp_info_, unsafe.Pointer(_cp_const_values_))
}

func FlagsGetFirstValue(flags_class *FlagsClass, value uint) *FlagsValue {
	_cp_flags_class_ := (*C.GFlagsClass)(flags_class)
	_guint_value := C.guint(value)
	_c_return_ := C.g_flags_get_first_value(_cp_flags_class_, _guint_value)
	_go_return_ := (*FlagsValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **FlagsValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func FlagsGetValueByName(flags_class *FlagsClass, name string) *FlagsValue {
	_cp_flags_class_ := (*C.GFlagsClass)(flags_class)
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_c_return_ := C._g_flags_get_value_by_name(_cp_flags_class_, unsafe.Pointer(_gstr_name))
	_go_return_ := (*FlagsValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **FlagsValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func FlagsGetValueByNick(flags_class *FlagsClass, nick string) *FlagsValue {
	_cp_flags_class_ := (*C.GFlagsClass)(flags_class)
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_c_return_ := C._g_flags_get_value_by_nick(_cp_flags_class_, unsafe.Pointer(_gstr_nick))
	_go_return_ := (*FlagsValue)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **FlagsValue) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func FlagsRegisterStatic(name string, const_static_values *FlagsValue) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cp_const_static_values_ := (*C.GFlagsValue)(const_static_values)
	return C._g_flags_register_static(unsafe.Pointer(_gstr_name), unsafe.Pointer(_cp_const_static_values_))
}

func GtypeGetType() C.GType {
	return C.g_gtype_get_type()
}

func ParamSpecBoolean(name string, nick string, blurb string, default_value bool, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gbool_default_value := C._false()
	if default_value { _gbool_default_value = C._true() }
	return C._g_param_spec_boolean(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gbool_default_value, flags)
}

func ParamSpecBoxed(name string, nick string, blurb string, boxed_type C.GType, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_boxed(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), boxed_type, flags)
}

func ParamSpecChar(name string, nick string, blurb string, minimum int8, maximum int8, default_value int8, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gint8_minimum := C.gint8(minimum)
	_gint8_maximum := C.gint8(maximum)
	_gint8_default_value := C.gint8(default_value)
	return C._g_param_spec_char(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gint8_minimum, _gint8_maximum, _gint8_default_value, flags)
}

func ParamSpecDouble(name string, nick string, blurb string, minimum float64, maximum float64, default_value float64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gdouble_minimum := C.gdouble(minimum)
	_gdouble_maximum := C.gdouble(maximum)
	_gdouble_default_value := C.gdouble(default_value)
	return C._g_param_spec_double(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gdouble_minimum, _gdouble_maximum, _gdouble_default_value, flags)
}

func ParamSpecEnum(name string, nick string, blurb string, enum_type C.GType, default_value int, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gint_default_value := C.gint(default_value)
	return C._g_param_spec_enum(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), enum_type, _gint_default_value, flags)
}

func ParamSpecFlags(name string, nick string, blurb string, flags_type C.GType, default_value uint, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_guint_default_value := C.guint(default_value)
	return C._g_param_spec_flags(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), flags_type, _guint_default_value, flags)
}

func ParamSpecFloat(name string, nick string, blurb string, minimum float64, maximum float64, default_value float64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gfloat_minimum := C.gfloat(minimum)
	_gfloat_maximum := C.gfloat(maximum)
	_gfloat_default_value := C.gfloat(default_value)
	return C._g_param_spec_float(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gfloat_minimum, _gfloat_maximum, _gfloat_default_value, flags)
}

func ParamSpecGtype(name string, nick string, blurb string, is_a_type C.GType, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_gtype(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), is_a_type, flags)
}

func ParamSpecInt(name string, nick string, blurb string, minimum int, maximum int, default_value int, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gint_minimum := C.gint(minimum)
	_gint_maximum := C.gint(maximum)
	_gint_default_value := C.gint(default_value)
	return C._g_param_spec_int(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gint_minimum, _gint_maximum, _gint_default_value, flags)
}

func ParamSpecInt64(name string, nick string, blurb string, minimum int64, maximum int64, default_value int64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gint64_minimum := C.gint64(minimum)
	_gint64_maximum := C.gint64(maximum)
	_gint64_default_value := C.gint64(default_value)
	return C._g_param_spec_int64(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gint64_minimum, _gint64_maximum, _gint64_default_value, flags)
}

func ParamSpecLong(name string, nick string, blurb string, minimum int64, maximum int64, default_value int64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_glong_minimum := C.glong(minimum)
	_glong_maximum := C.glong(maximum)
	_glong_default_value := C.glong(default_value)
	return C._g_param_spec_long(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _glong_minimum, _glong_maximum, _glong_default_value, flags)
}

func ParamSpecObject(name string, nick string, blurb string, object_type C.GType, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_object(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), object_type, flags)
}

func ParamSpecOverride(name string, overridden *C.GParamSpec) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return C._g_param_spec_override(unsafe.Pointer(_gstr_name), overridden)
}

func ParamSpecParam(name string, nick string, blurb string, param_type C.GType, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_param(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), param_type, flags)
}

func ParamSpecPointer(name string, nick string, blurb string, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_pointer(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), flags)
}

func ParamSpecString(name string, nick string, blurb string, default_value string, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_cstr_default_value := unsafe.Pointer(C.CString(default_value))
	defer C.free(_cstr_default_value)
	_gstr_default_value := (*C.gchar)(unsafe.Pointer(_cstr_default_value))
	return C._g_param_spec_string(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), unsafe.Pointer(_gstr_default_value), flags)
}

func ParamSpecUchar(name string, nick string, blurb string, minimum uint8, maximum uint8, default_value uint8, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_guint8_minimum := C.guint8(minimum)
	_guint8_maximum := C.guint8(maximum)
	_guint8_default_value := C.guint8(default_value)
	return C._g_param_spec_uchar(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _guint8_minimum, _guint8_maximum, _guint8_default_value, flags)
}

func ParamSpecUint(name string, nick string, blurb string, minimum uint, maximum uint, default_value uint, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_guint_minimum := C.guint(minimum)
	_guint_maximum := C.guint(maximum)
	_guint_default_value := C.guint(default_value)
	return C._g_param_spec_uint(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _guint_minimum, _guint_maximum, _guint_default_value, flags)
}

func ParamSpecUint64(name string, nick string, blurb string, minimum uint64, maximum uint64, default_value uint64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_guint64_minimum := C.guint64(minimum)
	_guint64_maximum := C.guint64(maximum)
	_guint64_default_value := C.guint64(default_value)
	return C._g_param_spec_uint64(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _guint64_minimum, _guint64_maximum, _guint64_default_value, flags)
}

func ParamSpecUlong(name string, nick string, blurb string, minimum uint64, maximum uint64, default_value uint64, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	_gulong_minimum := C.gulong(minimum)
	_gulong_maximum := C.gulong(maximum)
	_gulong_default_value := C.gulong(default_value)
	return C._g_param_spec_ulong(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), _gulong_minimum, _gulong_maximum, _gulong_default_value, flags)
}

func ParamSpecUnichar(name string, nick string, blurb string, default_value C.gunichar, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_unichar(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), default_value, flags)
}

func ParamSpecValueArray(name string, nick string, blurb string, element_spec *C.GParamSpec, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_value_array(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), element_spec, flags)
}

func ParamSpecVariant(name string, nick string, blurb string, type_ *C.GVariantType, default_value *C.GVariant, flags C.GParamFlags) *C.GParamSpec {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cstr_nick := unsafe.Pointer(C.CString(nick))
	defer C.free(_cstr_nick)
	_gstr_nick := (*C.gchar)(unsafe.Pointer(_cstr_nick))
	_cstr_blurb := unsafe.Pointer(C.CString(blurb))
	defer C.free(_cstr_blurb)
	_gstr_blurb := (*C.gchar)(unsafe.Pointer(_cstr_blurb))
	return C._g_param_spec_variant(unsafe.Pointer(_gstr_name), unsafe.Pointer(_gstr_nick), unsafe.Pointer(_gstr_blurb), unsafe.Pointer(type_), default_value, flags)
}

func ParamTypeRegisterStatic(name string, pspec_info *ParamSpecTypeInfo) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	_cp_pspec_info_ := (*C.GParamSpecTypeInfo)(pspec_info)
	return C._g_param_type_register_static(unsafe.Pointer(_gstr_name), unsafe.Pointer(_cp_pspec_info_))
}

func ParamValueConvert(pspec *C.GParamSpec, src_value *Value, dest_value *Value, strict_validation bool) bool {
	_cp_src_value_ := (*C.GValue)(src_value)
	_cp_dest_value_ := (*C.GValue)(dest_value)
	_gbool_strict_validation := C._false()
	if strict_validation { _gbool_strict_validation = C._true() }
	return gboolean2bool(C._g_param_value_convert(pspec, unsafe.Pointer(_cp_src_value_), _cp_dest_value_, _gbool_strict_validation))
}

func ParamValueDefaults(pspec *C.GParamSpec, value *Value) bool {
	_cp_value_ := (*C.GValue)(value)
	return gboolean2bool(C.g_param_value_defaults(pspec, _cp_value_))
}

func ParamValueSetDefault(pspec *C.GParamSpec, value *Value) {
	_cp_value_ := (*C.GValue)(value)
	C.g_param_value_set_default(pspec, _cp_value_)
}

func ParamValueValidate(pspec *C.GParamSpec, value *Value) bool {
	_cp_value_ := (*C.GValue)(value)
	return gboolean2bool(C.g_param_value_validate(pspec, _cp_value_))
}

func ParamValuesCmp(pspec *C.GParamSpec, value1 *Value, value2 *Value) int {
	_cp_value1_ := (*C.GValue)(value1)
	_cp_value2_ := (*C.GValue)(value2)
	return gint2int(C._g_param_values_cmp(pspec, unsafe.Pointer(_cp_value1_), unsafe.Pointer(_cp_value2_)))
}

func PointerTypeRegisterStatic(name string) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return C._g_pointer_type_register_static(unsafe.Pointer(_gstr_name))
}

func SignalAccumulatorFirstWins(ihint *SignalInvocationHint, return_accu *Value, handler_return *Value, dummy unsafe.Pointer) bool {
	_cp_ihint_ := (*C.GSignalInvocationHint)(ihint)
	_cp_return_accu_ := (*C.GValue)(return_accu)
	_cp_handler_return_ := (*C.GValue)(handler_return)
	_gpointer_dummy := (C.gpointer)(dummy)
	return gboolean2bool(C._g_signal_accumulator_first_wins(_cp_ihint_, _cp_return_accu_, unsafe.Pointer(_cp_handler_return_), _gpointer_dummy))
}

func SignalAccumulatorTrueHandled(ihint *SignalInvocationHint, return_accu *Value, handler_return *Value, dummy unsafe.Pointer) bool {
	_cp_ihint_ := (*C.GSignalInvocationHint)(ihint)
	_cp_return_accu_ := (*C.GValue)(return_accu)
	_cp_handler_return_ := (*C.GValue)(handler_return)
	_gpointer_dummy := (C.gpointer)(dummy)
	return gboolean2bool(C._g_signal_accumulator_true_handled(_cp_ihint_, _cp_return_accu_, unsafe.Pointer(_cp_handler_return_), _gpointer_dummy))
}

func SignalAddEmissionHook(signal_id uint, detail C.GQuark, hook_func C.GSignalEmissionHook, hook_data unsafe.Pointer, data_destroy C.GDestroyNotify) uint64 {
	_guint_signal_id := C.guint(signal_id)
	_gpointer_hook_data := (C.gpointer)(hook_data)
	return gulong2uint64(C.g_signal_add_emission_hook(_guint_signal_id, detail, hook_func, _gpointer_hook_data, data_destroy))
}

func SignalChainFromOverridden(instance_and_params *Value, return_value *Value) {
	_cp_instance_and_params_ := (*C.GValue)(instance_and_params)
	_cp_return_value_ := (*C.GValue)(return_value)
	C.g_signal_chain_from_overridden(_cp_instance_and_params_, _cp_return_value_)
}

//TODO g_signal_chain_from_overridden_handler

func SignalConnectClosure(instance unsafe.Pointer, detailed_signal string, closure *Closure, after bool) uint64 {
	_gpointer_instance := (C.gpointer)(instance)
	_cstr_detailed_signal := unsafe.Pointer(C.CString(detailed_signal))
	defer C.free(_cstr_detailed_signal)
	_gstr_detailed_signal := (*C.gchar)(unsafe.Pointer(_cstr_detailed_signal))
	_cp_closure_ := (*C.GClosure)(closure)
	_gbool_after := C._false()
	if after { _gbool_after = C._true() }
	return gulong2uint64(C._g_signal_connect_closure(_gpointer_instance, unsafe.Pointer(_gstr_detailed_signal), _cp_closure_, _gbool_after))
}

func SignalConnectClosureById(instance unsafe.Pointer, signal_id uint, detail C.GQuark, closure *Closure, after bool) uint64 {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_cp_closure_ := (*C.GClosure)(closure)
	_gbool_after := C._false()
	if after { _gbool_after = C._true() }
	return gulong2uint64(C.g_signal_connect_closure_by_id(_gpointer_instance, _guint_signal_id, detail, _cp_closure_, _gbool_after))
}

func SignalConnectData(instance unsafe.Pointer, detailed_signal string, c_handler C.GCallback, data unsafe.Pointer, destroy_data C.GClosureNotify, connect_flags C.GConnectFlags) uint64 {
	_gpointer_instance := (C.gpointer)(instance)
	_cstr_detailed_signal := unsafe.Pointer(C.CString(detailed_signal))
	defer C.free(_cstr_detailed_signal)
	_gstr_detailed_signal := (*C.gchar)(unsafe.Pointer(_cstr_detailed_signal))
	_gpointer_data := (C.gpointer)(data)
	return gulong2uint64(C._g_signal_connect_data(_gpointer_instance, unsafe.Pointer(_gstr_detailed_signal), c_handler, _gpointer_data, destroy_data, connect_flags))
}

func SignalConnectObject(instance unsafe.Pointer, detailed_signal string, c_handler C.GCallback, gobject unsafe.Pointer, connect_flags C.GConnectFlags) uint64 {
	_gpointer_instance := (C.gpointer)(instance)
	_cstr_detailed_signal := unsafe.Pointer(C.CString(detailed_signal))
	defer C.free(_cstr_detailed_signal)
	_gstr_detailed_signal := (*C.gchar)(unsafe.Pointer(_cstr_detailed_signal))
	_gpointer_gobject := (C.gpointer)(gobject)
	return gulong2uint64(C._g_signal_connect_object(_gpointer_instance, unsafe.Pointer(_gstr_detailed_signal), c_handler, _gpointer_gobject, connect_flags))
}

//TODO g_signal_emit

//TODO g_signal_emit_by_name

//TODO g_signal_emit_valist

func SignalEmitv(instance_and_params *Value, signal_id uint, detail C.GQuark, return_value *Value) {
	_cp_instance_and_params_ := (*C.GValue)(instance_and_params)
	_guint_signal_id := C.guint(signal_id)
	_cp_return_value_ := (*C.GValue)(return_value)
	C.g_signal_emitv(_cp_instance_and_params_, _guint_signal_id, detail, _cp_return_value_)
}

func SignalGetInvocationHint(instance unsafe.Pointer) *SignalInvocationHint {
	_gpointer_instance := (C.gpointer)(instance)
	_c_return_ := C.g_signal_get_invocation_hint(_gpointer_instance)
	_go_return_ := (*SignalInvocationHint)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **SignalInvocationHint) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SignalHandlerBlock(instance unsafe.Pointer, handler_id uint64) {
	_gpointer_instance := (C.gpointer)(instance)
	_gulong_handler_id := C.gulong(handler_id)
	C.g_signal_handler_block(_gpointer_instance, _gulong_handler_id)
}

func SignalHandlerDisconnect(instance unsafe.Pointer, handler_id uint64) {
	_gpointer_instance := (C.gpointer)(instance)
	_gulong_handler_id := C.gulong(handler_id)
	C.g_signal_handler_disconnect(_gpointer_instance, _gulong_handler_id)
}

func SignalHandlerFind(instance unsafe.Pointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ unsafe.Pointer, data unsafe.Pointer) uint64 {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_cp_closure_ := (*C.GClosure)(closure)
	_gpointer_func_ := (C.gpointer)(func_)
	_gpointer_data := (C.gpointer)(data)
	return gulong2uint64(C.g_signal_handler_find(_gpointer_instance, mask, _guint_signal_id, detail, _cp_closure_, _gpointer_func_, _gpointer_data))
}

func SignalHandlerIsConnected(instance unsafe.Pointer, handler_id uint64) bool {
	_gpointer_instance := (C.gpointer)(instance)
	_gulong_handler_id := C.gulong(handler_id)
	return gboolean2bool(C.g_signal_handler_is_connected(_gpointer_instance, _gulong_handler_id))
}

func SignalHandlerUnblock(instance unsafe.Pointer, handler_id uint64) {
	_gpointer_instance := (C.gpointer)(instance)
	_gulong_handler_id := C.gulong(handler_id)
	C.g_signal_handler_unblock(_gpointer_instance, _gulong_handler_id)
}

func SignalHandlersBlockMatched(instance unsafe.Pointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ unsafe.Pointer, data unsafe.Pointer) uint {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_cp_closure_ := (*C.GClosure)(closure)
	_gpointer_func_ := (C.gpointer)(func_)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_signal_handlers_block_matched(_gpointer_instance, mask, _guint_signal_id, detail, _cp_closure_, _gpointer_func_, _gpointer_data))
}

func SignalHandlersDestroy(instance unsafe.Pointer) {
	_gpointer_instance := (C.gpointer)(instance)
	C.g_signal_handlers_destroy(_gpointer_instance)
}

func SignalHandlersDisconnectMatched(instance unsafe.Pointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ unsafe.Pointer, data unsafe.Pointer) uint {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_cp_closure_ := (*C.GClosure)(closure)
	_gpointer_func_ := (C.gpointer)(func_)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_signal_handlers_disconnect_matched(_gpointer_instance, mask, _guint_signal_id, detail, _cp_closure_, _gpointer_func_, _gpointer_data))
}

func SignalHandlersUnblockMatched(instance unsafe.Pointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ unsafe.Pointer, data unsafe.Pointer) uint {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_cp_closure_ := (*C.GClosure)(closure)
	_gpointer_func_ := (C.gpointer)(func_)
	_gpointer_data := (C.gpointer)(data)
	return guint2uint(C.g_signal_handlers_unblock_matched(_gpointer_instance, mask, _guint_signal_id, detail, _cp_closure_, _gpointer_func_, _gpointer_data))
}

func SignalHasHandlerPending(instance unsafe.Pointer, signal_id uint, detail C.GQuark, may_be_blocked bool) bool {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	_gbool_may_be_blocked := C._false()
	if may_be_blocked { _gbool_may_be_blocked = C._true() }
	return gboolean2bool(C.g_signal_has_handler_pending(_gpointer_instance, _guint_signal_id, detail, _gbool_may_be_blocked))
}

func SignalListIds(itype C.GType, n_ids *uint) *uint {
	_c_guint_n_ids := C.guint(*n_ids)
	_cp_guint_n_ids := (*C.guint)(&_c_guint_n_ids)
	return guintp2uintp(C.g_signal_list_ids(itype, _cp_guint_n_ids))
}

func SignalLookup(name string, itype C.GType) uint {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return guint2uint(C._g_signal_lookup(unsafe.Pointer(_gstr_name), itype))
}

func SignalName(signal_id uint) string {
	_guint_signal_id := C.guint(signal_id)
	return gcharp2string(C.g_signal_name(_guint_signal_id))
}

//TODO g_signal_new

//TODO g_signal_new_class_handler

//TODO g_signal_new_valist

func SignalNewv(signal_name string, itype C.GType, signal_flags C.GSignalFlags, class_closure *Closure, accumulator C.GSignalAccumulator, accu_data unsafe.Pointer, c_marshaller C.GSignalCMarshaller, return_type C.GType, n_params uint, param_types *C.GType) uint {
	_cstr_signal_name := unsafe.Pointer(C.CString(signal_name))
	defer C.free(_cstr_signal_name)
	_gstr_signal_name := (*C.gchar)(unsafe.Pointer(_cstr_signal_name))
	_cp_class_closure_ := (*C.GClosure)(class_closure)
	_gpointer_accu_data := (C.gpointer)(accu_data)
	_guint_n_params := C.guint(n_params)
	return guint2uint(C._g_signal_newv(unsafe.Pointer(_gstr_signal_name), itype, signal_flags, _cp_class_closure_, accumulator, _gpointer_accu_data, c_marshaller, return_type, _guint_n_params, param_types))
}

func SignalOverrideClassClosure(signal_id uint, instance_type C.GType, class_closure *Closure) {
	_guint_signal_id := C.guint(signal_id)
	_cp_class_closure_ := (*C.GClosure)(class_closure)
	C.g_signal_override_class_closure(_guint_signal_id, instance_type, _cp_class_closure_)
}

func SignalOverrideClassHandler(signal_name string, instance_type C.GType, class_handler C.GCallback) {
	_cstr_signal_name := unsafe.Pointer(C.CString(signal_name))
	defer C.free(_cstr_signal_name)
	_gstr_signal_name := (*C.gchar)(unsafe.Pointer(_cstr_signal_name))
	C._g_signal_override_class_handler(unsafe.Pointer(_gstr_signal_name), instance_type, class_handler)
}

func SignalParseName(detailed_signal string, itype C.GType, signal_id_p *uint, detail_p *C.GQuark, force_detail_quark bool) bool {
	_cstr_detailed_signal := unsafe.Pointer(C.CString(detailed_signal))
	defer C.free(_cstr_detailed_signal)
	_gstr_detailed_signal := (*C.gchar)(unsafe.Pointer(_cstr_detailed_signal))
	_c_guint_signal_id_p := C.guint(*signal_id_p)
	_cp_guint_signal_id_p := (*C.guint)(&_c_guint_signal_id_p)
	_gbool_force_detail_quark := C._false()
	if force_detail_quark { _gbool_force_detail_quark = C._true() }
	return gboolean2bool(C._g_signal_parse_name(unsafe.Pointer(_gstr_detailed_signal), itype, _cp_guint_signal_id_p, detail_p, _gbool_force_detail_quark))
}

func SignalQuery(signal_id uint, query *SignalQuery) {
	_guint_signal_id := C.guint(signal_id)
	_cp_query_ := (*C.GSignalQuery)(query)
	C.g_signal_query(_guint_signal_id, _cp_query_)
}

func SignalRemoveEmissionHook(signal_id uint, hook_id uint64) {
	_guint_signal_id := C.guint(signal_id)
	_gulong_hook_id := C.gulong(hook_id)
	C.g_signal_remove_emission_hook(_guint_signal_id, _gulong_hook_id)
}

func SignalSetVaMarshaller(signal_id uint, instance_type C.GType, va_marshaller C.GSignalCVaMarshaller) {
	_guint_signal_id := C.guint(signal_id)
	C.g_signal_set_va_marshaller(_guint_signal_id, instance_type, va_marshaller)
}

func SignalStopEmission(instance unsafe.Pointer, signal_id uint, detail C.GQuark) {
	_gpointer_instance := (C.gpointer)(instance)
	_guint_signal_id := C.guint(signal_id)
	C.g_signal_stop_emission(_gpointer_instance, _guint_signal_id, detail)
}

func SignalStopEmissionByName(instance unsafe.Pointer, detailed_signal string) {
	_gpointer_instance := (C.gpointer)(instance)
	_cstr_detailed_signal := unsafe.Pointer(C.CString(detailed_signal))
	defer C.free(_cstr_detailed_signal)
	_gstr_detailed_signal := (*C.gchar)(unsafe.Pointer(_cstr_detailed_signal))
	C._g_signal_stop_emission_by_name(_gpointer_instance, unsafe.Pointer(_gstr_detailed_signal))
}

func SignalTypeCclosureNew(itype C.GType, struct_offset uint) *Closure {
	_guint_struct_offset := C.guint(struct_offset)
	_c_return_ := C.g_signal_type_cclosure_new(itype, _guint_struct_offset)
	_go_return_ := (*Closure)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **Closure) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func SourceSetClosure(source *C.GSource, closure *Closure) {
	_cp_closure_ := (*C.GClosure)(closure)
	C.g_source_set_closure(source, _cp_closure_)
}

func SourceSetDummyCallback(source *C.GSource) {
	C.g_source_set_dummy_callback(source)
}

func StrdupValueContents(value *Value) string {
	_cp_value_ := (*C.GValue)(value)
	return gcharp2string(C._g_strdup_value_contents(unsafe.Pointer(_cp_value_)))
}

func TypeAddClassCacheFunc(cache_data unsafe.Pointer, cache_func C.GTypeClassCacheFunc) {
	_gpointer_cache_data := (C.gpointer)(cache_data)
	C.g_type_add_class_cache_func(_gpointer_cache_data, cache_func)
}

func TypeAddClassPrivate(class_type C.GType, private_size uint64) {
	_gsize_private_size := C.gsize(private_size)
	C.g_type_add_class_private(class_type, _gsize_private_size)
}

func TypeAddInterfaceCheck(check_data unsafe.Pointer, check_func C.GTypeInterfaceCheckFunc) {
	_gpointer_check_data := (C.gpointer)(check_data)
	C.g_type_add_interface_check(_gpointer_check_data, check_func)
}

func TypeAddInterfaceDynamic(instance_type C.GType, interface_type C.GType, plugin *C.GTypePlugin) {
	C.g_type_add_interface_dynamic(instance_type, interface_type, plugin)
}

func TypeAddInterfaceStatic(instance_type C.GType, interface_type C.GType, info *InterfaceInfo) {
	_cp_info_ := (*C.GInterfaceInfo)(info)
	C._g_type_add_interface_static(instance_type, interface_type, unsafe.Pointer(_cp_info_))
}

func TypeCheckClassCast(g_class *TypeClass, is_a_type C.GType) *TypeClass {
	_cp_g_class_ := (*C.GTypeClass)(g_class)
	_c_return_ := C.g_type_check_class_cast(_cp_g_class_, is_a_type)
	_go_return_ := (*TypeClass)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TypeClass) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TypeCheckClassIsA(g_class *TypeClass, is_a_type C.GType) bool {
	_cp_g_class_ := (*C.GTypeClass)(g_class)
	return gboolean2bool(C.g_type_check_class_is_a(_cp_g_class_, is_a_type))
}

func TypeCheckInstance(instance *TypeInstance) bool {
	_cp_instance_ := (*C.GTypeInstance)(instance)
	return gboolean2bool(C.g_type_check_instance(_cp_instance_))
}

func TypeCheckInstanceCast(instance *TypeInstance, iface_type C.GType) *TypeInstance {
	_cp_instance_ := (*C.GTypeInstance)(instance)
	_c_return_ := C.g_type_check_instance_cast(_cp_instance_, iface_type)
	_go_return_ := (*TypeInstance)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TypeInstance) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TypeCheckInstanceIsA(instance *TypeInstance, iface_type C.GType) bool {
	_cp_instance_ := (*C.GTypeInstance)(instance)
	return gboolean2bool(C.g_type_check_instance_is_a(_cp_instance_, iface_type))
}

func TypeCheckIsValueType(type_ C.GType) bool {
	return gboolean2bool(C.g_type_check_is_value_type(type_))
}

func TypeCheckValue(value *Value) bool {
	_cp_value_ := (*C.GValue)(value)
	return gboolean2bool(C.g_type_check_value(_cp_value_))
}

func TypeCheckValueHolds(value *Value, type_ C.GType) bool {
	_cp_value_ := (*C.GValue)(value)
	return gboolean2bool(C.g_type_check_value_holds(_cp_value_, type_))
}

func TypeChildren(type_ C.GType, n_children *uint) *C.GType {
	_c_guint_n_children := C.guint(*n_children)
	_cp_guint_n_children := (*C.guint)(&_c_guint_n_children)
	return C.g_type_children(type_, _cp_guint_n_children)
}

func TypeCreateInstance(type_ C.GType) *TypeInstance {
	_c_return_ := C.g_type_create_instance(type_)
	_go_return_ := (*TypeInstance)(_c_return_)
	runtime.SetFinalizer(&_go_return_, func (x **TypeInstance) {
		C.g_object_unref(C.gpointer(_c_return_))
	})
	return _go_return_
}

func TypeDefaultInterfacePeek(g_type C.GType) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_default_interface_peek(g_type))
}

func TypeDefaultInterfaceRef(g_type C.GType) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_default_interface_ref(g_type))
}

func TypeDefaultInterfaceUnref(g_iface unsafe.Pointer) {
	_gpointer_g_iface := (C.gpointer)(g_iface)
	C.g_type_default_interface_unref(_gpointer_g_iface)
}

func TypeDepth(type_ C.GType) uint {
	return guint2uint(C.g_type_depth(type_))
}

func TypeEnsure(type_ C.GType) {
	C.g_type_ensure(type_)
}

func TypeFreeInstance(instance *TypeInstance) {
	_cp_instance_ := (*C.GTypeInstance)(instance)
	C.g_type_free_instance(_cp_instance_)
}

func TypeFromName(name string) C.GType {
	_cstr_name := unsafe.Pointer(C.CString(name))
	defer C.free(_cstr_name)
	_gstr_name := (*C.gchar)(unsafe.Pointer(_cstr_name))
	return C._g_type_from_name(unsafe.Pointer(_gstr_name))
}

func TypeFundamental(type_id C.GType) C.GType {
	return C.g_type_fundamental(type_id)
}

func TypeFundamentalNext() C.GType {
	return C.g_type_fundamental_next()
}

func TypeGetPlugin(type_ C.GType) *C.GTypePlugin {
	return C.g_type_get_plugin(type_)
}

func TypeGetQdata(type_ C.GType, quark C.GQuark) unsafe.Pointer {
	return unsafe.Pointer(C.g_type_get_qdata(type_, quark))
}

//Skipped g_type_init

//Skipped g_type_init_with_debug_flags

func TypeInterfaces(type_ C.GType, n_interfaces *uint) *C.GType {
	_c_guint_n_interfaces := C.guint(*n_interfaces)
	_cp_guint_n_interfaces := (*C.guint)(&_c_guint_n_interfaces)
	return C.g_type_interfaces(type_, _cp_guint_n_interfaces)
}

func TypeIsA(type_ C.GType, is_a_type C.GType) bool {
	return gboolean2bool(C.g_type_is_a(type_, is_a_type))
}

func TypeName(type_ C.GType) string {
	return gcharp2string(C.g_type_name(type_))
}

func TypeNameFromClass(g_class *TypeClass) string {
	_cp_g_class_ := (*C.GTypeClass)(g_class)
	return gcharp2string(C.g_type_name_from_class(_cp_g_class_))
}

func TypeNameFromInstance(instance *TypeInstance) string {
	_cp_instance_ := (*C.GTypeInstance)(instance)
	return gcharp2string(C.g_type_name_from_instance(_cp_instance_))
}

func TypeNextBase(leaf_type C.GType, root_type C.GType) C.GType {
	return C.g_type_next_base(leaf_type, root_type)
}

func TypeParent(type_ C.GType) C.GType {
	return C.g_type_parent(type_)
}

func TypeQname(type_ C.GType) C.GQuark {
	return C.g_type_qname(type_)
}

func TypeQuery(type_ C.GType, query *TypeQuery) {
	_cp_query_ := (*C.GTypeQuery)(query)
	C.g_type_query(type_, _cp_query_)
}

func TypeRegisterDynamic(parent_type C.GType, type_name string, plugin *C.GTypePlugin, flags C.GTypeFlags) C.GType {
	_cstr_type_name := unsafe.Pointer(C.CString(type_name))
	defer C.free(_cstr_type_name)
	_gstr_type_name := (*C.gchar)(unsafe.Pointer(_cstr_type_name))
	return C._g_type_register_dynamic(parent_type, unsafe.Pointer(_gstr_type_name), plugin, flags)
}

func TypeRegisterFundamental(type_id C.GType, type_name string, info *TypeInfo, finfo *TypeFundamentalInfo, flags C.GTypeFlags) C.GType {
	_cstr_type_name := unsafe.Pointer(C.CString(type_name))
	defer C.free(_cstr_type_name)
	_gstr_type_name := (*C.gchar)(unsafe.Pointer(_cstr_type_name))
	_cp_info_ := (*C.GTypeInfo)(info)
	_cp_finfo_ := (*C.GTypeFundamentalInfo)(finfo)
	return C._g_type_register_fundamental(type_id, unsafe.Pointer(_gstr_type_name), unsafe.Pointer(_cp_info_), unsafe.Pointer(_cp_finfo_), flags)
}

func TypeRegisterStatic(parent_type C.GType, type_name string, info *TypeInfo, flags C.GTypeFlags) C.GType {
	_cstr_type_name := unsafe.Pointer(C.CString(type_name))
	defer C.free(_cstr_type_name)
	_gstr_type_name := (*C.gchar)(unsafe.Pointer(_cstr_type_name))
	_cp_info_ := (*C.GTypeInfo)(info)
	return C._g_type_register_static(parent_type, unsafe.Pointer(_gstr_type_name), unsafe.Pointer(_cp_info_), flags)
}

func TypeRegisterStaticSimple(parent_type C.GType, type_name string, class_size uint, class_init C.GClassInitFunc, instance_size uint, instance_init C.GInstanceInitFunc, flags C.GTypeFlags) C.GType {
	_cstr_type_name := unsafe.Pointer(C.CString(type_name))
	defer C.free(_cstr_type_name)
	_gstr_type_name := (*C.gchar)(unsafe.Pointer(_cstr_type_name))
	_guint_class_size := C.guint(class_size)
	_guint_instance_size := C.guint(instance_size)
	return C._g_type_register_static_simple(parent_type, unsafe.Pointer(_gstr_type_name), _guint_class_size, class_init, _guint_instance_size, instance_init, flags)
}

func TypeRemoveClassCacheFunc(cache_data unsafe.Pointer, cache_func C.GTypeClassCacheFunc) {
	_gpointer_cache_data := (C.gpointer)(cache_data)
	C.g_type_remove_class_cache_func(_gpointer_cache_data, cache_func)
}

func TypeRemoveInterfaceCheck(check_data unsafe.Pointer, check_func C.GTypeInterfaceCheckFunc) {
	_gpointer_check_data := (C.gpointer)(check_data)
	C.g_type_remove_interface_check(_gpointer_check_data, check_func)
}

func TypeSetQdata(type_ C.GType, quark C.GQuark, data unsafe.Pointer) {
	_gpointer_data := (C.gpointer)(data)
	C.g_type_set_qdata(type_, quark, _gpointer_data)
}

func TypeTestFlags(type_ C.GType, flags uint) bool {
	_guint_flags := C.guint(flags)
	return gboolean2bool(C.g_type_test_flags(type_, _guint_flags))
}

const PARAM_MASK = C.G_PARAM_MASK
const PARAM_READWRITE = C.G_PARAM_READWRITE
const PARAM_STATIC_STRINGS = C.G_PARAM_STATIC_STRINGS
const PARAM_USER_SHIFT = C.G_PARAM_USER_SHIFT
const SIGNAL_FLAGS_MASK = C.G_SIGNAL_FLAGS_MASK
const SIGNAL_MATCH_MASK = C.G_SIGNAL_MATCH_MASK
const TYPE_FLAG_RESERVED_ID_BIT = C.G_TYPE_FLAG_RESERVED_ID_BIT
const TYPE_FUNDAMENTAL_MAX = C.G_TYPE_FUNDAMENTAL_MAX
const TYPE_FUNDAMENTAL_SHIFT = C.G_TYPE_FUNDAMENTAL_SHIFT
const TYPE_RESERVED_BSE_FIRST = C.G_TYPE_RESERVED_BSE_FIRST
const TYPE_RESERVED_BSE_LAST = C.G_TYPE_RESERVED_BSE_LAST
const TYPE_RESERVED_GLIB_FIRST = C.G_TYPE_RESERVED_GLIB_FIRST
const TYPE_RESERVED_GLIB_LAST = C.G_TYPE_RESERVED_GLIB_LAST
const TYPE_RESERVED_USER_FIRST = C.G_TYPE_RESERVED_USER_FIRST
const VALUE_COLLECT_FORMAT_MAX_LENGTH = C.G_VALUE_COLLECT_FORMAT_MAX_LENGTH
const VALUE_NOCOPY_CONTENTS = C.G_VALUE_NOCOPY_CONTENTS
func gboolean2bool(b C.gboolean) bool {
  return b == C._true()
}
func gulong2uint64(i C.gulong) uint64 {
  return uint64(i)
}
func gint2int(i C.gint) int {
  return int(i)
}
func gcharp2string(str *C.gchar) string {
  return C.GoString((*C.char)(str))
}
func guint2uint(i C.guint) uint {
  return uint(i)
}
func guintp2uintp(p *C.guint) *uint {
  i := uint(*p)
  return &i
}
type TypeModuleClass C.GTypeModuleClass
type TypeInstance C.GTypeInstance
type EnumClass C.GEnumClass
type SignalQuery C.GSignalQuery
type ParamSpecClass C.GParamSpecClass
type EnumValue C.GEnumValue
type Closure C.GClosure
type FlagsValue C.GFlagsValue
type TypeFundamentalInfo C.GTypeFundamentalInfo
type Parameter C.GParameter
type InitiallyUnownedClass C.GInitiallyUnownedClass
type TypeInterface C.GTypeInterface
type ValueArray C.GValueArray
type ParamSpecPool C.GParamSpecPool
type ObjectClass C.GObjectClass
type FlagsClass C.GFlagsClass
type InterfaceInfo C.GInterfaceInfo
type CClosure C.GCClosure
type ClosureNotifyData C.GClosureNotifyData
type WeakRef C.GWeakRef
type TypeQuery C.GTypeQuery
type ObjectConstructParam C.GObjectConstructParam
type SignalInvocationHint C.GSignalInvocationHint
type TypePluginClass C.GTypePluginClass
type TypeValueTable C.GTypeValueTable
type Value C.GValue
type ParamSpecTypeInfo C.GParamSpecTypeInfo
type TypeInfo C.GTypeInfo
type TypeClass C.GTypeClass
