// this file is auto-generated by gtk-go

package clutter

// #cgo pkg-config: clutter-1.0 gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <clutter/clutter.h>
/*
void _clutter_cairo_set_source_color(cairo_t * cr, ClutterColor * color) {
	(void)clutter_cairo_set_source_color(cr, (const ClutterColor *)(color));
}
gboolean _clutter_check_windowing_backend(char * backend_type) {
	return (gboolean)clutter_check_windowing_backend((const char *)(backend_type));
}
ClutterColor * _clutter_color_get_static(ClutterStaticColor color) {
	return (ClutterColor *)clutter_color_get_static(color);
}
GParamSpec * _clutter_container_class_find_child_property(GObjectClass * klass, gchar * property_name) {
	return (GParamSpec *)clutter_container_class_find_child_property(klass, (const gchar *)(property_name));
}
void * _clutter_container_class_list_child_properties(GObjectClass * klass, guint * n_properties) {
	return (void *)clutter_container_class_list_child_properties(klass, n_properties);
}
ClutterEvent * _clutter_get_current_event() {
	return (ClutterEvent *)clutter_get_current_event();
}
gchar * _clutter_get_script_id(GObject * gobject) {
	return (gchar *)clutter_get_script_id(gobject);
}
ClutterMatrix * _clutter_matrix_init_from_matrix(ClutterMatrix * a, ClutterMatrix * b) {
	return (ClutterMatrix *)clutter_matrix_init_from_matrix(a, (const ClutterMatrix *)(b));
}
GParamSpec * _clutter_param_spec_color(gchar * name, gchar * nick, gchar * blurb, ClutterColor * default_value, GParamFlags flags) {
	return (GParamSpec *)clutter_param_spec_color((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), (const ClutterColor *)(default_value), flags);
}
GParamSpec * _clutter_param_spec_units(gchar * name, gchar * nick, gchar * blurb, ClutterUnitType default_type, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags) {
	return (GParamSpec *)clutter_param_spec_units((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), default_type, minimum, maximum, default_value, flags);
}
ClutterPoint * _clutter_point_zero() {
	return (ClutterPoint *)clutter_point_zero();
}
ClutterRect * _clutter_rect_zero() {
	return (ClutterRect *)clutter_rect_zero();
}
gpointer _clutter_value_dup_paint_node(GValue * value) {
	return (gpointer)clutter_value_dup_paint_node((const GValue *)(value));
}
ClutterColor * _clutter_value_get_color(GValue * value) {
	return (ClutterColor *)clutter_value_get_color((const GValue *)(value));
}
gpointer _clutter_value_get_paint_node(GValue * value) {
	return (gpointer)clutter_value_get_paint_node((const GValue *)(value));
}
gfloat * _clutter_value_get_shader_float(GValue * value, gsize * length) {
	return (gfloat *)clutter_value_get_shader_float((const GValue *)(value), length);
}
gint * _clutter_value_get_shader_int(GValue * value, gsize * length) {
	return (gint *)clutter_value_get_shader_int((const GValue *)(value), length);
}
gfloat * _clutter_value_get_shader_matrix(GValue * value, gsize * length) {
	return (gfloat *)clutter_value_get_shader_matrix((const GValue *)(value), length);
}
ClutterUnits * _clutter_value_get_units(GValue * value) {
	return (ClutterUnits *)clutter_value_get_units((const GValue *)(value));
}
void _clutter_value_set_color(GValue * value, ClutterColor * color) {
	(void)clutter_value_set_color(value, (const ClutterColor *)(color));
}
void _clutter_value_set_units(GValue * value, ClutterUnits * units) {
	(void)clutter_value_set_units(value, (const ClutterUnits *)(units));
}
void _clutter_actor_add_action_with_name(ClutterActor * _self_, gchar * name, ClutterAction * action) {
	(void)clutter_actor_add_action_with_name(_self_, (const gchar *)(name), action);
}
void _clutter_actor_add_constraint_with_name(ClutterActor * _self_, gchar * name, ClutterConstraint * constraint) {
	(void)clutter_actor_add_constraint_with_name(_self_, (const gchar *)(name), constraint);
}
void _clutter_actor_add_effect_with_name(ClutterActor * _self_, gchar * name, ClutterEffect * effect) {
	(void)clutter_actor_add_effect_with_name(_self_, (const gchar *)(name), effect);
}
void _clutter_actor_add_transition(ClutterActor * _self_, char * name, ClutterTransition * transition) {
	(void)clutter_actor_add_transition(_self_, (const char *)(name), transition);
}
void _clutter_actor_allocate(ClutterActor * _self_, ClutterActorBox * box, ClutterAllocationFlags flags) {
	(void)clutter_actor_allocate(_self_, (const ClutterActorBox *)(box), flags);
}
void _clutter_actor_allocate_align_fill(ClutterActor * _self_, ClutterActorBox * box, gdouble x_align, gdouble y_align, gboolean x_fill, gboolean y_fill, ClutterAllocationFlags flags) {
	(void)clutter_actor_allocate_align_fill(_self_, (const ClutterActorBox *)(box), x_align, y_align, x_fill, y_fill, flags);
}
void _clutter_actor_apply_relative_transform_to_point(ClutterActor * _self_, ClutterActor * ancestor, ClutterVertex * point, ClutterVertex * vertex) {
	(void)clutter_actor_apply_relative_transform_to_point(_self_, ancestor, (const ClutterVertex *)(point), vertex);
}
void _clutter_actor_apply_transform_to_point(ClutterActor * _self_, ClutterVertex * point, ClutterVertex * vertex) {
	(void)clutter_actor_apply_transform_to_point(_self_, (const ClutterVertex *)(point), vertex);
}
PangoLayout * _clutter_actor_create_pango_layout(ClutterActor * _self_, gchar * text) {
	return (PangoLayout *)clutter_actor_create_pango_layout(_self_, (const gchar *)(text));
}
gboolean _clutter_actor_event(ClutterActor * _self_, ClutterEvent * event, gboolean capture) {
	return (gboolean)clutter_actor_event(_self_, (const ClutterEvent *)(event), capture);
}
ClutterAction * _clutter_actor_get_action(ClutterActor * _self_, gchar * name) {
	return (ClutterAction *)clutter_actor_get_action(_self_, (const gchar *)(name));
}
ClutterConstraint * _clutter_actor_get_constraint(ClutterActor * _self_, gchar * name) {
	return (ClutterConstraint *)clutter_actor_get_constraint(_self_, (const gchar *)(name));
}
ClutterPaintVolume * _clutter_actor_get_default_paint_volume(ClutterActor * _self_) {
	return (ClutterPaintVolume *)clutter_actor_get_default_paint_volume(_self_);
}
ClutterEffect * _clutter_actor_get_effect(ClutterActor * _self_, gchar * name) {
	return (ClutterEffect *)clutter_actor_get_effect(_self_, (const gchar *)(name));
}
gchar * _clutter_actor_get_name(ClutterActor * _self_) {
	return (gchar *)clutter_actor_get_name(_self_);
}
ClutterPaintVolume * _clutter_actor_get_paint_volume(ClutterActor * _self_) {
	return (ClutterPaintVolume *)clutter_actor_get_paint_volume(_self_);
}
ClutterPaintVolume * _clutter_actor_get_transformed_paint_volume(ClutterActor * _self_, ClutterActor * relative_to_ancestor) {
	return (ClutterPaintVolume *)clutter_actor_get_transformed_paint_volume(_self_, relative_to_ancestor);
}
ClutterTransition * _clutter_actor_get_transition(ClutterActor * _self_, char * name) {
	return (ClutterTransition *)clutter_actor_get_transition(_self_, (const char *)(name));
}
void _clutter_actor_queue_redraw_with_clip(ClutterActor * _self_, cairo_rectangle_int_t * clip) {
	(void)clutter_actor_queue_redraw_with_clip(_self_, (const cairo_rectangle_int_t *)(clip));
}
void _clutter_actor_remove_action_by_name(ClutterActor * _self_, gchar * name) {
	(void)clutter_actor_remove_action_by_name(_self_, (const gchar *)(name));
}
void _clutter_actor_remove_constraint_by_name(ClutterActor * _self_, gchar * name) {
	(void)clutter_actor_remove_constraint_by_name(_self_, (const gchar *)(name));
}
void _clutter_actor_remove_effect_by_name(ClutterActor * _self_, gchar * name) {
	(void)clutter_actor_remove_effect_by_name(_self_, (const gchar *)(name));
}
void _clutter_actor_remove_transition(ClutterActor * _self_, char * name) {
	(void)clutter_actor_remove_transition(_self_, (const char *)(name));
}
void _clutter_actor_set_allocation(ClutterActor * _self_, ClutterActorBox * box, ClutterAllocationFlags flags) {
	(void)clutter_actor_set_allocation(_self_, (const ClutterActorBox *)(box), flags);
}
void _clutter_actor_set_background_color(ClutterActor * _self_, ClutterColor * color) {
	(void)clutter_actor_set_background_color(_self_, (const ClutterColor *)(color));
}
void _clutter_actor_set_child_transform(ClutterActor * _self_, ClutterMatrix * transform) {
	(void)clutter_actor_set_child_transform(_self_, (const ClutterMatrix *)(transform));
}
void _clutter_actor_set_margin(ClutterActor * _self_, ClutterMargin * margin) {
	(void)clutter_actor_set_margin(_self_, (const ClutterMargin *)(margin));
}
void _clutter_actor_set_name(ClutterActor * _self_, gchar * name) {
	(void)clutter_actor_set_name(_self_, (const gchar *)(name));
}
void _clutter_actor_set_transform(ClutterActor * _self_, ClutterMatrix * transform) {
	(void)clutter_actor_set_transform(_self_, (const ClutterMatrix *)(transform));
}
gchar * _clutter_actor_meta_get_name(ClutterActorMeta * _self_) {
	return (gchar *)clutter_actor_meta_get_name(_self_);
}
void _clutter_actor_meta_set_name(ClutterActorMeta * _self_, gchar * name) {
	(void)clutter_actor_meta_set_name(_self_, (const gchar *)(name));
}
cairo_font_options_t * _clutter_backend_get_font_options(ClutterBackend * _self_) {
	return (cairo_font_options_t *)clutter_backend_get_font_options(_self_);
}
void _clutter_backend_set_font_options(ClutterBackend * _self_, cairo_font_options_t * options) {
	(void)clutter_backend_set_font_options(_self_, (const cairo_font_options_t *)(options));
}
ClutterBindingPool * _clutter_binding_pool_new(gchar * name) {
	return (ClutterBindingPool *)clutter_binding_pool_new((const gchar *)(name));
}
ClutterBindingPool * _clutter_binding_pool_find(gchar * name) {
	return (ClutterBindingPool *)clutter_binding_pool_find((const gchar *)(name));
}
void _clutter_binding_pool_block_action(ClutterBindingPool * _self_, gchar * action_name) {
	(void)clutter_binding_pool_block_action(_self_, (const gchar *)(action_name));
}
gchar * _clutter_binding_pool_find_action(ClutterBindingPool * _self_, guint key_val, ClutterModifierType modifiers) {
	return (gchar *)clutter_binding_pool_find_action(_self_, key_val, modifiers);
}
void _clutter_binding_pool_install_action(ClutterBindingPool * _self_, gchar * action_name, guint key_val, ClutterModifierType modifiers, GCallback callback, gpointer data, GDestroyNotify notify) {
	(void)clutter_binding_pool_install_action(_self_, (const gchar *)(action_name), key_val, modifiers, callback, data, notify);
}
void _clutter_binding_pool_install_closure(ClutterBindingPool * _self_, gchar * action_name, guint key_val, ClutterModifierType modifiers, GClosure * closure) {
	(void)clutter_binding_pool_install_closure(_self_, (const gchar *)(action_name), key_val, modifiers, closure);
}
void _clutter_binding_pool_unblock_action(ClutterBindingPool * _self_, gchar * action_name) {
	(void)clutter_binding_pool_unblock_action(_self_, (const gchar *)(action_name));
}
ClutterPaintNode * _clutter_color_node_new(ClutterColor * color) {
	return (ClutterPaintNode *)clutter_color_node_new((const ClutterColor *)(color));
}
ClutterEffect * _clutter_colorize_effect_new(ClutterColor * tint) {
	return (ClutterEffect *)clutter_colorize_effect_new((const ClutterColor *)(tint));
}
void _clutter_colorize_effect_set_tint(ClutterColorizeEffect * _self_, ClutterColor * tint) {
	(void)clutter_colorize_effect_set_tint(_self_, (const ClutterColor *)(tint));
}
GSList * _clutter_device_manager_peek_devices(ClutterDeviceManager * _self_) {
	return (GSList *)clutter_device_manager_peek_devices(_self_);
}
void _clutter_drag_action_set_drag_area(ClutterDragAction * _self_, ClutterRect * drag_area) {
	(void)clutter_drag_action_set_drag_area(_self_, (const ClutterRect *)(drag_area));
}
gboolean _clutter_image_set_area(ClutterImage * _self_, guint8 * data, CoglPixelFormat pixel_format, cairo_rectangle_int_t * rect, guint row_stride, void * error) {
	return (gboolean)clutter_image_set_area(_self_, (const guint8 *)(data), pixel_format, (const cairo_rectangle_int_t *)(rect), row_stride, (GError **)(error));
}
gboolean _clutter_image_set_bytes(ClutterImage * _self_, GBytes * data, CoglPixelFormat pixel_format, guint width, guint height, guint row_stride, void * error) {
	return (gboolean)clutter_image_set_bytes(_self_, data, pixel_format, width, height, row_stride, (GError **)(error));
}
gboolean _clutter_image_set_data(ClutterImage * _self_, guint8 * data, CoglPixelFormat pixel_format, guint width, guint height, guint row_stride, void * error) {
	return (gboolean)clutter_image_set_data(_self_, (const guint8 *)(data), pixel_format, width, height, row_stride, (GError **)(error));
}
gchar * _clutter_input_device_get_device_name(ClutterInputDevice * _self_) {
	return (gchar *)clutter_input_device_get_device_name(_self_);
}
ClutterInterval * _clutter_interval_new_with_values(GType gtype, GValue * initial, GValue * final) {
	return (ClutterInterval *)clutter_interval_new_with_values(gtype, (const GValue *)(initial), (const GValue *)(final));
}
GValue * _clutter_interval_compute(ClutterInterval * _self_, gdouble factor) {
	return (GValue *)clutter_interval_compute(_self_, factor);
}
void _clutter_interval_set_final_value(ClutterInterval * _self_, GValue * value) {
	(void)clutter_interval_set_final_value(_self_, (const GValue *)(value));
}
void _clutter_interval_set_initial_value(ClutterInterval * _self_, GValue * value) {
	(void)clutter_interval_set_initial_value(_self_, (const GValue *)(value));
}
ClutterTransition * _clutter_keyframe_transition_new(char * property_name) {
	return (ClutterTransition *)clutter_keyframe_transition_new((const char *)(property_name));
}
void _clutter_keyframe_transition_set_key_frame(ClutterKeyframeTransition * _self_, guint index_, double key, ClutterAnimationMode mode, GValue * value) {
	(void)clutter_keyframe_transition_set_key_frame(_self_, index_, key, mode, (const GValue *)(value));
}
void _clutter_layout_manager_allocate(ClutterLayoutManager * _self_, ClutterContainer * container, ClutterActorBox * allocation, ClutterAllocationFlags flags) {
	(void)clutter_layout_manager_allocate(_self_, container, (const ClutterActorBox *)(allocation), flags);
}
void _clutter_layout_manager_child_get_property(ClutterLayoutManager * _self_, ClutterContainer * container, ClutterActor * actor, gchar * property_name, GValue * value) {
	(void)clutter_layout_manager_child_get_property(_self_, container, actor, (const gchar *)(property_name), value);
}
void _clutter_layout_manager_child_set_property(ClutterLayoutManager * _self_, ClutterContainer * container, ClutterActor * actor, gchar * property_name, GValue * value) {
	(void)clutter_layout_manager_child_set_property(_self_, container, actor, (const gchar *)(property_name), (const GValue *)(value));
}
GParamSpec * _clutter_layout_manager_find_child_property(ClutterLayoutManager * _self_, gchar * name) {
	return (GParamSpec *)clutter_layout_manager_find_child_property(_self_, (const gchar *)(name));
}
void * _clutter_layout_manager_list_child_properties(ClutterLayoutManager * _self_, guint * n_pspecs) {
	return (void *)clutter_layout_manager_list_child_properties(_self_, n_pspecs);
}
gchar * _clutter_model_get_column_name(ClutterModel * _self_, guint column) {
	return (gchar *)clutter_model_get_column_name(_self_, column);
}
void _clutter_model_insert_value(ClutterModel * _self_, guint row, guint column, GValue * value) {
	(void)clutter_model_insert_value(_self_, row, column, (const GValue *)(value));
}
void _clutter_model_iter_set_value(ClutterModelIter * _self_, guint column, GValue * value) {
	(void)clutter_model_iter_set_value(_self_, column, (const GValue *)(value));
}
void _clutter_paint_node_add_rectangle(ClutterPaintNode * _self_, ClutterActorBox * rect) {
	(void)clutter_paint_node_add_rectangle(_self_, (const ClutterActorBox *)(rect));
}
void _clutter_paint_node_add_texture_rectangle(ClutterPaintNode * _self_, ClutterActorBox * rect, float x_1, float y_1, float x_2, float y_2) {
	(void)clutter_paint_node_add_texture_rectangle(_self_, (const ClutterActorBox *)(rect), x_1, y_1, x_2, y_2);
}
void _clutter_paint_node_set_name(ClutterPaintNode * _self_, char * name) {
	(void)clutter_paint_node_set_name(_self_, (const char *)(name));
}
ClutterPath * _clutter_path_new_with_description(gchar * desc) {
	return (ClutterPath *)clutter_path_new_with_description((const gchar *)(desc));
}
void _clutter_path_add_cairo_path(ClutterPath * _self_, cairo_path_t * cpath) {
	(void)clutter_path_add_cairo_path(_self_, (const cairo_path_t *)(cpath));
}
void _clutter_path_add_node(ClutterPath * _self_, ClutterPathNode * node) {
	(void)clutter_path_add_node(_self_, (const ClutterPathNode *)(node));
}
gboolean _clutter_path_add_string(ClutterPath * _self_, gchar * str) {
	return (gboolean)clutter_path_add_string(_self_, (const gchar *)(str));
}
void _clutter_path_insert_node(ClutterPath * _self_, gint index_, ClutterPathNode * node) {
	(void)clutter_path_insert_node(_self_, index_, (const ClutterPathNode *)(node));
}
void _clutter_path_replace_node(ClutterPath * _self_, guint index_, ClutterPathNode * node) {
	(void)clutter_path_replace_node(_self_, index_, (const ClutterPathNode *)(node));
}
gboolean _clutter_path_set_description(ClutterPath * _self_, gchar * str) {
	return (gboolean)clutter_path_set_description(_self_, (const gchar *)(str));
}
ClutterTransition * _clutter_property_transition_new(char * property_name) {
	return (ClutterTransition *)clutter_property_transition_new((const char *)(property_name));
}
char * _clutter_property_transition_get_property_name(ClutterPropertyTransition * _self_) {
	return (char *)clutter_property_transition_get_property_name(_self_);
}
void _clutter_property_transition_set_property_name(ClutterPropertyTransition * _self_, char * property_name) {
	(void)clutter_property_transition_set_property_name(_self_, (const char *)(property_name));
}
GObject * _clutter_script_get_object(ClutterScript * _self_, gchar * name) {
	return (GObject *)clutter_script_get_object(_self_, (const gchar *)(name));
}
gchar * _clutter_script_get_translation_domain(ClutterScript * _self_) {
	return (gchar *)clutter_script_get_translation_domain(_self_);
}
GType _clutter_script_get_type_from_name(ClutterScript * _self_, gchar * type_name) {
	return (GType)clutter_script_get_type_from_name(_self_, (const gchar *)(type_name));
}
guint _clutter_script_load_from_data(ClutterScript * _self_, gchar * data, gssize length, void * error) {
	return (guint)clutter_script_load_from_data(_self_, (const gchar *)(data), length, (GError **)(error));
}
guint _clutter_script_load_from_file(ClutterScript * _self_, gchar * filename, void * error) {
	return (guint)clutter_script_load_from_file(_self_, (const gchar *)(filename), (GError **)(error));
}
guint _clutter_script_load_from_resource(ClutterScript * _self_, gchar * resource_path, void * error) {
	return (guint)clutter_script_load_from_resource(_self_, (const gchar *)(resource_path), (GError **)(error));
}
gchar * _clutter_script_lookup_filename(ClutterScript * _self_, gchar * filename) {
	return (gchar *)clutter_script_lookup_filename(_self_, (const gchar *)(filename));
}
void _clutter_script_set_translation_domain(ClutterScript * _self_, gchar * domain) {
	(void)clutter_script_set_translation_domain(_self_, (const gchar *)(domain));
}
void _clutter_scroll_actor_scroll_to_point(ClutterScrollActor * _self_, ClutterPoint * point) {
	(void)clutter_scroll_actor_scroll_to_point(_self_, (const ClutterPoint *)(point));
}
void _clutter_scroll_actor_scroll_to_rect(ClutterScrollActor * _self_, ClutterRect * rect) {
	(void)clutter_scroll_actor_scroll_to_rect(_self_, (const ClutterRect *)(rect));
}
gboolean _clutter_shader_effect_set_shader_source(ClutterShaderEffect * _self_, gchar * source) {
	return (gboolean)clutter_shader_effect_set_shader_source(_self_, (const gchar *)(source));
}
void _clutter_shader_effect_set_uniform_value(ClutterShaderEffect * _self_, gchar * name, GValue * value) {
	(void)clutter_shader_effect_set_uniform_value(_self_, (const gchar *)(name), (const GValue *)(value));
}
gchar * _clutter_stage_get_title(ClutterStage * _self_) {
	return (gchar *)clutter_stage_get_title(_self_);
}
void _clutter_stage_set_title(ClutterStage * _self_, gchar * title) {
	(void)clutter_stage_set_title(_self_, (const gchar *)(title));
}
GSList * _clutter_stage_manager_peek_stages(ClutterStageManager * _self_) {
	return (GSList *)clutter_stage_manager_peek_stages(_self_);
}
ClutterActor * _clutter_text_new_full(gchar * font_name, gchar * text, ClutterColor * color) {
	return (ClutterActor *)clutter_text_new_full((const gchar *)(font_name), (const gchar *)(text), (const ClutterColor *)(color));
}
ClutterActor * _clutter_text_new_with_text(gchar * font_name, gchar * text) {
	return (ClutterActor *)clutter_text_new_with_text((const gchar *)(font_name), (const gchar *)(text));
}
gchar * _clutter_text_get_font_name(ClutterText * _self_) {
	return (gchar *)clutter_text_get_font_name(_self_);
}
gchar * _clutter_text_get_text(ClutterText * _self_) {
	return (gchar *)clutter_text_get_text(_self_);
}
void _clutter_text_insert_text(ClutterText * _self_, gchar * text, gssize position) {
	(void)clutter_text_insert_text(_self_, (const gchar *)(text), position);
}
void _clutter_text_set_color(ClutterText * _self_, ClutterColor * color) {
	(void)clutter_text_set_color(_self_, (const ClutterColor *)(color));
}
void _clutter_text_set_cursor_color(ClutterText * _self_, ClutterColor * color) {
	(void)clutter_text_set_cursor_color(_self_, (const ClutterColor *)(color));
}
void _clutter_text_set_font_name(ClutterText * _self_, gchar * font_name) {
	(void)clutter_text_set_font_name(_self_, (const gchar *)(font_name));
}
void _clutter_text_set_markup(ClutterText * _self_, gchar * markup) {
	(void)clutter_text_set_markup(_self_, (const gchar *)(markup));
}
void _clutter_text_set_preedit_string(ClutterText * _self_, gchar * preedit_str, PangoAttrList * preedit_attrs, guint cursor_pos) {
	(void)clutter_text_set_preedit_string(_self_, (const gchar *)(preedit_str), preedit_attrs, cursor_pos);
}
void _clutter_text_set_selected_text_color(ClutterText * _self_, ClutterColor * color) {
	(void)clutter_text_set_selected_text_color(_self_, (const ClutterColor *)(color));
}
void _clutter_text_set_selection_color(ClutterText * _self_, ClutterColor * color) {
	(void)clutter_text_set_selection_color(_self_, (const ClutterColor *)(color));
}
void _clutter_text_set_text(ClutterText * _self_, gchar * text) {
	(void)clutter_text_set_text(_self_, (const gchar *)(text));
}
ClutterTextBuffer * _clutter_text_buffer_new_with_text(gchar * text, gssize text_len) {
	return (ClutterTextBuffer *)clutter_text_buffer_new_with_text((const gchar *)(text), text_len);
}
void _clutter_text_buffer_emit_inserted_text(ClutterTextBuffer * _self_, guint position, gchar * chars, guint n_chars) {
	(void)clutter_text_buffer_emit_inserted_text(_self_, position, (const gchar *)(chars), n_chars);
}
gchar * _clutter_text_buffer_get_text(ClutterTextBuffer * _self_) {
	return (gchar *)clutter_text_buffer_get_text(_self_);
}
guint _clutter_text_buffer_insert_text(ClutterTextBuffer * _self_, guint position, gchar * chars, gint n_chars) {
	return (guint)clutter_text_buffer_insert_text(_self_, position, (const gchar *)(chars), n_chars);
}
void _clutter_text_buffer_set_text(ClutterTextBuffer * _self_, gchar * chars, gint n_chars) {
	(void)clutter_text_buffer_set_text(_self_, (const gchar *)(chars), n_chars);
}
ClutterPaintNode * _clutter_text_node_new(PangoLayout * layout, ClutterColor * color) {
	return (ClutterPaintNode *)clutter_text_node_new(layout, (const ClutterColor *)(color));
}
ClutterPaintNode * _clutter_texture_node_new(CoglTexture * texture, ClutterColor * color, ClutterScalingFilter min_filter, ClutterScalingFilter mag_filter) {
	return (ClutterPaintNode *)clutter_texture_node_new(texture, (const ClutterColor *)(color), min_filter, mag_filter);
}
void _clutter_timeline_add_marker_at_time(ClutterTimeline * _self_, gchar * marker_name, guint msecs) {
	(void)clutter_timeline_add_marker_at_time(_self_, (const gchar *)(marker_name), msecs);
}
void _clutter_timeline_advance_to_marker(ClutterTimeline * _self_, gchar * marker_name) {
	(void)clutter_timeline_advance_to_marker(_self_, (const gchar *)(marker_name));
}
gboolean _clutter_timeline_has_marker(ClutterTimeline * _self_, gchar * marker_name) {
	return (gboolean)clutter_timeline_has_marker(_self_, (const gchar *)(marker_name));
}
void * _clutter_timeline_list_markers(ClutterTimeline * _self_, gint msecs, gsize * n_markers) {
	return (void *)clutter_timeline_list_markers(_self_, msecs, n_markers);
}
void _clutter_timeline_remove_marker(ClutterTimeline * _self_, gchar * marker_name) {
	(void)clutter_timeline_remove_marker(_self_, (const gchar *)(marker_name));
}
void _clutter_timeline_set_cubic_bezier_progress(ClutterTimeline * _self_, ClutterPoint * c_1, ClutterPoint * c_2) {
	(void)clutter_timeline_set_cubic_bezier_progress(_self_, (const ClutterPoint *)(c_1), (const ClutterPoint *)(c_2));
}
void _clutter_transition_set_from_value(ClutterTransition * _self_, GValue * value) {
	(void)clutter_transition_set_from_value(_self_, (const GValue *)(value));
}
void _clutter_transition_set_to_value(ClutterTransition * _self_, GValue * value) {
	(void)clutter_transition_set_to_value(_self_, (const GValue *)(value));
}
gboolean _clutter_actor_box_contains(ClutterActorBox * _self_, gfloat x, gfloat y) {
	return (gboolean)clutter_actor_box_contains((const ClutterActorBox *)(_self_), x, y);
}
ClutterActorBox * _clutter_actor_box_copy(ClutterActorBox * _self_) {
	return (ClutterActorBox *)clutter_actor_box_copy((const ClutterActorBox *)(_self_));
}
gboolean _clutter_actor_box_equal(ClutterActorBox * _self_, ClutterActorBox * box_b) {
	return (gboolean)clutter_actor_box_equal((const ClutterActorBox *)(_self_), (const ClutterActorBox *)(box_b));
}
gfloat _clutter_actor_box_get_area(ClutterActorBox * _self_) {
	return (gfloat)clutter_actor_box_get_area((const ClutterActorBox *)(_self_));
}
gfloat _clutter_actor_box_get_height(ClutterActorBox * _self_) {
	return (gfloat)clutter_actor_box_get_height((const ClutterActorBox *)(_self_));
}
void _clutter_actor_box_get_origin(ClutterActorBox * _self_, gfloat * x, gfloat * y) {
	(void)clutter_actor_box_get_origin((const ClutterActorBox *)(_self_), x, y);
}
void _clutter_actor_box_get_size(ClutterActorBox * _self_, gfloat * width, gfloat * height) {
	(void)clutter_actor_box_get_size((const ClutterActorBox *)(_self_), width, height);
}
gfloat _clutter_actor_box_get_width(ClutterActorBox * _self_) {
	return (gfloat)clutter_actor_box_get_width((const ClutterActorBox *)(_self_));
}
gfloat _clutter_actor_box_get_x(ClutterActorBox * _self_) {
	return (gfloat)clutter_actor_box_get_x((const ClutterActorBox *)(_self_));
}
gfloat _clutter_actor_box_get_y(ClutterActorBox * _self_) {
	return (gfloat)clutter_actor_box_get_y((const ClutterActorBox *)(_self_));
}
void _clutter_actor_box_interpolate(ClutterActorBox * _self_, ClutterActorBox * final, gdouble progress, ClutterActorBox * result) {
	(void)clutter_actor_box_interpolate((const ClutterActorBox *)(_self_), (const ClutterActorBox *)(final), progress, result);
}
void _clutter_actor_box_union(ClutterActorBox * _self_, ClutterActorBox * b, ClutterActorBox * result) {
	(void)clutter_actor_box_union((const ClutterActorBox *)(_self_), (const ClutterActorBox *)(b), result);
}
gboolean _clutter_actor_iter_is_valid(ClutterActorIter * _self_) {
	return (gboolean)clutter_actor_iter_is_valid((const ClutterActorIter *)(_self_));
}
gboolean _clutter_actor_iter_next(ClutterActorIter * _self_, void * child) {
	return (gboolean)clutter_actor_iter_next(_self_, (ClutterActor **)(child));
}
gboolean _clutter_actor_iter_prev(ClutterActorIter * _self_, void * child) {
	return (gboolean)clutter_actor_iter_prev(_self_, (ClutterActor **)(child));
}
void _clutter_color_add(ClutterColor * _self_, ClutterColor * b, ClutterColor * result) {
	(void)clutter_color_add((const ClutterColor *)(_self_), (const ClutterColor *)(b), result);
}
ClutterColor * _clutter_color_copy(ClutterColor * _self_) {
	return (ClutterColor *)clutter_color_copy((const ClutterColor *)(_self_));
}
void _clutter_color_darken(ClutterColor * _self_, ClutterColor * result) {
	(void)clutter_color_darken((const ClutterColor *)(_self_), result);
}
gboolean _clutter_color_equal(ClutterColor * _self_, gpointer v2) {
	return (gboolean)clutter_color_equal((gconstpointer)(_self_), (gconstpointer)(v2));
}
gboolean _clutter_color_from_string(ClutterColor * _self_, gchar * str) {
	return (gboolean)clutter_color_from_string(_self_, (const gchar *)(str));
}
guint _clutter_color_hash(ClutterColor * _self_) {
	return (guint)clutter_color_hash((gconstpointer)(_self_));
}
void _clutter_color_interpolate(ClutterColor * _self_, ClutterColor * final, gdouble progress, ClutterColor * result) {
	(void)clutter_color_interpolate((const ClutterColor *)(_self_), (const ClutterColor *)(final), progress, result);
}
void _clutter_color_lighten(ClutterColor * _self_, ClutterColor * result) {
	(void)clutter_color_lighten((const ClutterColor *)(_self_), result);
}
void _clutter_color_shade(ClutterColor * _self_, gdouble factor, ClutterColor * result) {
	(void)clutter_color_shade((const ClutterColor *)(_self_), factor, result);
}
void _clutter_color_subtract(ClutterColor * _self_, ClutterColor * b, ClutterColor * result) {
	(void)clutter_color_subtract((const ClutterColor *)(_self_), (const ClutterColor *)(b), result);
}
void _clutter_color_to_hls(ClutterColor * _self_, gfloat * hue, gfloat * luminance, gfloat * saturation) {
	(void)clutter_color_to_hls((const ClutterColor *)(_self_), hue, luminance, saturation);
}
guint32 _clutter_color_to_pixel(ClutterColor * _self_) {
	return (guint32)clutter_color_to_pixel((const ClutterColor *)(_self_));
}
gchar * _clutter_color_to_string(ClutterColor * _self_) {
	return (gchar *)clutter_color_to_string((const ClutterColor *)(_self_));
}
gboolean _clutter_geometry_intersects(ClutterGeometry * _self_, ClutterGeometry * geometry1) {
	return (gboolean)clutter_geometry_intersects((const ClutterGeometry *)(_self_), (const ClutterGeometry *)(geometry1));
}
void _clutter_geometry_union(ClutterGeometry * _self_, ClutterGeometry * geometry_b, ClutterGeometry * result) {
	(void)clutter_geometry_union((const ClutterGeometry *)(_self_), (const ClutterGeometry *)(geometry_b), result);
}
ClutterKnot * _clutter_knot_copy(ClutterKnot * _self_) {
	return (ClutterKnot *)clutter_knot_copy((const ClutterKnot *)(_self_));
}
gboolean _clutter_knot_equal(ClutterKnot * _self_, ClutterKnot * knot_b) {
	return (gboolean)clutter_knot_equal((const ClutterKnot *)(_self_), (const ClutterKnot *)(knot_b));
}
ClutterMargin * _clutter_margin_copy(ClutterMargin * _self_) {
	return (ClutterMargin *)clutter_margin_copy((const ClutterMargin *)(_self_));
}
ClutterPaintVolume * _clutter_paint_volume_copy(ClutterPaintVolume * _self_) {
	return (ClutterPaintVolume *)clutter_paint_volume_copy((const ClutterPaintVolume *)(_self_));
}
gfloat _clutter_paint_volume_get_depth(ClutterPaintVolume * _self_) {
	return (gfloat)clutter_paint_volume_get_depth((const ClutterPaintVolume *)(_self_));
}
gfloat _clutter_paint_volume_get_height(ClutterPaintVolume * _self_) {
	return (gfloat)clutter_paint_volume_get_height((const ClutterPaintVolume *)(_self_));
}
void _clutter_paint_volume_get_origin(ClutterPaintVolume * _self_, ClutterVertex * vertex) {
	(void)clutter_paint_volume_get_origin((const ClutterPaintVolume *)(_self_), vertex);
}
gfloat _clutter_paint_volume_get_width(ClutterPaintVolume * _self_) {
	return (gfloat)clutter_paint_volume_get_width((const ClutterPaintVolume *)(_self_));
}
void _clutter_paint_volume_set_origin(ClutterPaintVolume * _self_, ClutterVertex * origin) {
	(void)clutter_paint_volume_set_origin(_self_, (const ClutterVertex *)(origin));
}
void _clutter_paint_volume_union(ClutterPaintVolume * _self_, ClutterPaintVolume * another_pv) {
	(void)clutter_paint_volume_union(_self_, (const ClutterPaintVolume *)(another_pv));
}
void _clutter_paint_volume_union_box(ClutterPaintVolume * _self_, ClutterActorBox * box) {
	(void)clutter_paint_volume_union_box(_self_, (const ClutterActorBox *)(box));
}
ClutterPathNode * _clutter_path_node_copy(ClutterPathNode * _self_) {
	return (ClutterPathNode *)clutter_path_node_copy((const ClutterPathNode *)(_self_));
}
gboolean _clutter_path_node_equal(ClutterPathNode * _self_, ClutterPathNode * node_b) {
	return (gboolean)clutter_path_node_equal((const ClutterPathNode *)(_self_), (const ClutterPathNode *)(node_b));
}
ClutterPoint * _clutter_point_copy(ClutterPoint * _self_) {
	return (ClutterPoint *)clutter_point_copy((const ClutterPoint *)(_self_));
}
float _clutter_point_distance(ClutterPoint * _self_, ClutterPoint * b, float * x_distance, float * y_distance) {
	return (float)clutter_point_distance((const ClutterPoint *)(_self_), (const ClutterPoint *)(b), x_distance, y_distance);
}
gboolean _clutter_point_equals(ClutterPoint * _self_, ClutterPoint * b) {
	return (gboolean)clutter_point_equals((const ClutterPoint *)(_self_), (const ClutterPoint *)(b));
}
ClutterRect * _clutter_rect_copy(ClutterRect * _self_) {
	return (ClutterRect *)clutter_rect_copy((const ClutterRect *)(_self_));
}
ClutterSize * _clutter_size_copy(ClutterSize * _self_) {
	return (ClutterSize *)clutter_size_copy((const ClutterSize *)(_self_));
}
gboolean _clutter_size_equals(ClutterSize * _self_, ClutterSize * b) {
	return (gboolean)clutter_size_equals((const ClutterSize *)(_self_), (const ClutterSize *)(b));
}
ClutterUnits * _clutter_units_copy(ClutterUnits * _self_) {
	return (ClutterUnits *)clutter_units_copy((const ClutterUnits *)(_self_));
}
void _clutter_units_from_em_for_font(ClutterUnits * _self_, gchar * font_name, gfloat em) {
	(void)clutter_units_from_em_for_font(_self_, (const gchar *)(font_name), em);
}
gboolean _clutter_units_from_string(ClutterUnits * _self_, gchar * str) {
	return (gboolean)clutter_units_from_string(_self_, (const gchar *)(str));
}
ClutterUnitType _clutter_units_get_unit_type(ClutterUnits * _self_) {
	return (ClutterUnitType)clutter_units_get_unit_type((const ClutterUnits *)(_self_));
}
gfloat _clutter_units_get_unit_value(ClutterUnits * _self_) {
	return (gfloat)clutter_units_get_unit_value((const ClutterUnits *)(_self_));
}
gchar * _clutter_units_to_string(ClutterUnits * _self_) {
	return (gchar *)clutter_units_to_string((const ClutterUnits *)(_self_));
}
ClutterVertex * _clutter_vertex_copy(ClutterVertex * _self_) {
	return (ClutterVertex *)clutter_vertex_copy((const ClutterVertex *)(_self_));
}
gboolean _clutter_vertex_equal(ClutterVertex * _self_, ClutterVertex * vertex_b) {
	return (gboolean)clutter_vertex_equal((const ClutterVertex *)(_self_), (const ClutterVertex *)(vertex_b));
}
GParamSpec * _clutter_animatable_find_property(ClutterAnimatable * _self_, gchar * property_name) {
	return (GParamSpec *)clutter_animatable_find_property(_self_, (const gchar *)(property_name));
}
void _clutter_animatable_get_initial_state(ClutterAnimatable * _self_, gchar * property_name, GValue * value) {
	(void)clutter_animatable_get_initial_state(_self_, (const gchar *)(property_name), value);
}
gboolean _clutter_animatable_interpolate_value(ClutterAnimatable * _self_, gchar * property_name, ClutterInterval * interval, gdouble progress, GValue * value) {
	return (gboolean)clutter_animatable_interpolate_value(_self_, (const gchar *)(property_name), interval, progress, value);
}
void _clutter_animatable_set_final_state(ClutterAnimatable * _self_, gchar * property_name, GValue * value) {
	(void)clutter_animatable_set_final_state(_self_, (const gchar *)(property_name), (const GValue *)(value));
}
void _clutter_container_child_get_property(ClutterContainer * _self_, ClutterActor * child, gchar * property, GValue * value) {
	(void)clutter_container_child_get_property(_self_, child, (const gchar *)(property), value);
}
void _clutter_container_child_set_property(ClutterContainer * _self_, ClutterActor * child, gchar * property, GValue * value) {
	(void)clutter_container_child_set_property(_self_, child, (const gchar *)(property), (const GValue *)(value));
}
ClutterActor * _clutter_container_find_child_by_name(ClutterContainer * _self_, gchar * child_name) {
	return (ClutterActor *)clutter_container_find_child_by_name(_self_, (const gchar *)(child_name));
}
gchar * _clutter_scriptable_get_id(ClutterScriptable * _self_) {
	return (gchar *)clutter_scriptable_get_id(_self_);
}
gboolean _clutter_scriptable_parse_custom_node(ClutterScriptable * _self_, ClutterScript * script, GValue * value, gchar * name, JsonNode * node) {
	return (gboolean)clutter_scriptable_parse_custom_node(_self_, script, value, (const gchar *)(name), node);
}
void _clutter_scriptable_set_custom_property(ClutterScriptable * _self_, ClutterScript * script, gchar * name, GValue * value) {
	(void)clutter_scriptable_set_custom_property(_self_, script, (const gchar *)(name), (const GValue *)(value));
}
void _clutter_scriptable_set_id(ClutterScriptable * _self_, gchar * id_) {
	(void)clutter_scriptable_set_id(_self_, (const gchar *)(id_));
}
*/
import "C"
import (
	"unsafe"
)

type LayoutMetaClass C.ClutterLayoutMetaClass
type ContentIface C.ClutterContentIface
type ColorNodeClass C.ClutterColorNodeClass
type BehaviourClass C.ClutterBehaviourClass
type BehaviourScaleClass C.ClutterBehaviourScaleClass
type PropertyTransitionPrivate C.ClutterPropertyTransitionPrivate
type CairoTextureClass C.ClutterCairoTextureClass
type RectangleClass C.ClutterRectangleClass
type EventSequence C.ClutterEventSequence
type BehaviourPrivate C.ClutterBehaviourPrivate
type StatePrivate C.ClutterStatePrivate
type Vertex C.ClutterVertex
type PathPrivate C.ClutterPathPrivate
type GroupPrivate C.ClutterGroupPrivate
type BoxLayoutClass C.ClutterBoxLayoutClass
type Rect C.ClutterRect
type SwipeActionClass C.ClutterSwipeActionClass
type TextureClass C.ClutterTextureClass
type CanvasClass C.ClutterCanvasClass
type ScriptPrivate C.ClutterScriptPrivate
type PanActionPrivate C.ClutterPanActionPrivate
type BehaviourDepthPrivate C.ClutterBehaviourDepthPrivate
type PaintVolume C.ClutterPaintVolume
type BlurEffectClass C.ClutterBlurEffectClass
type AnimatorClass C.ClutterAnimatorClass
type ClickActionPrivate C.ClutterClickActionPrivate
type InputDeviceClass C.ClutterInputDeviceClass
type TouchEvent C.ClutterTouchEvent
type IntervalPrivate C.ClutterIntervalPrivate
type ModelPrivate C.ClutterModelPrivate
type ShaderEffectClass C.ClutterShaderEffectClass
type StageStateEvent C.ClutterStageStateEvent
type KeyEvent C.ClutterKeyEvent
type ParamSpecUnits C.ClutterParamSpecUnits
type TransitionPrivate C.ClutterTransitionPrivate
type ScriptClass C.ClutterScriptClass
type FlowLayoutPrivate C.ClutterFlowLayoutPrivate
type ActorIter C.ClutterActorIter
type AlphaPrivate C.ClutterAlphaPrivate
type KeyframeTransitionClass C.ClutterKeyframeTransitionClass
type IntervalClass C.ClutterIntervalClass
type CloneClass C.ClutterCloneClass
type TextBufferPrivate C.ClutterTextBufferPrivate
type TextNodeClass C.ClutterTextNodeClass
type ImagePrivate C.ClutterImagePrivate
type ShaderEffectPrivate C.ClutterShaderEffectPrivate
type Fog C.ClutterFog
type ActionClass C.ClutterActionClass
type Units C.ClutterUnits
type OffscreenEffectClass C.ClutterOffscreenEffectClass
type PathClass C.ClutterPathClass
type GridLayoutClass C.ClutterGridLayoutClass
type BrightnessContrastEffectClass C.ClutterBrightnessContrastEffectClass
type StateClass C.ClutterStateClass
type DragActionClass C.ClutterDragActionClass
type DeviceManagerClass C.ClutterDeviceManagerClass
type PaintNodeClass C.ClutterPaintNodeClass
type TransitionGroupPrivate C.ClutterTransitionGroupPrivate
type KeyframeTransitionPrivate C.ClutterKeyframeTransitionPrivate
type PageTurnEffectClass C.ClutterPageTurnEffectClass
type StageClass C.ClutterStageClass
type GestureActionPrivate C.ClutterGestureActionPrivate
type AnimatableIface C.ClutterAnimatableIface
type TimelineClass C.ClutterTimelineClass
type TimeoutPool C.ClutterTimeoutPool
type ShaderClass C.ClutterShaderClass
type AnyEvent C.ClutterAnyEvent
type Margin C.ClutterMargin
type GestureActionClass C.ClutterGestureActionClass
type AnimationClass C.ClutterAnimationClass
type Point C.ClutterPoint
type DropActionClass C.ClutterDropActionClass
type TextClass C.ClutterTextClass
type AnimatorPrivate C.ClutterAnimatorPrivate
type StageManagerClass C.ClutterStageManagerClass
type CanvasPrivate C.ClutterCanvasPrivate
type TransitionClass C.ClutterTransitionClass
type EffectClass C.ClutterEffectClass
type ScorePrivate C.ClutterScorePrivate
type ClutterColor C.ClutterColor
type BoxClass C.ClutterBoxClass
type Size C.ClutterSize
type TextPrivate C.ClutterTextPrivate
type GridLayoutPrivate C.ClutterGridLayoutPrivate
type DragActionPrivate C.ClutterDragActionPrivate
type AnimationPrivate C.ClutterAnimationPrivate
type ActorClass C.ClutterActorClass
type TimelinePrivate C.ClutterTimelinePrivate
type DropActionPrivate C.ClutterDropActionPrivate
type TransitionGroupClass C.ClutterTransitionGroupClass
type StateKey C.ClutterStateKey
type BoxPrivate C.ClutterBoxPrivate
type ActorBox C.ClutterActorBox
type BehaviourDepthClass C.ClutterBehaviourDepthClass
type TableLayoutClass C.ClutterTableLayoutClass
type TextureNodeClass C.ClutterTextureNodeClass
type ModelIterClass C.ClutterModelIterClass
type ZoomActionClass C.ClutterZoomActionClass
type DeformEffectClass C.ClutterDeformEffectClass
type AlphaClass C.ClutterAlphaClass
type PipelineNodeClass C.ClutterPipelineNodeClass
type FlowLayoutClass C.ClutterFlowLayoutClass
type RotateActionPrivate C.ClutterRotateActionPrivate
type Geometry C.ClutterGeometry
type BehaviourPathPrivate C.ClutterBehaviourPathPrivate
type CairoTexturePrivate C.ClutterCairoTexturePrivate
type BehaviourScalePrivate C.ClutterBehaviourScalePrivate
type ClonePrivate C.ClutterClonePrivate
type BindingPoolClass C.ClutterBindingPoolClass
type PathNode C.ClutterPathNode
type BoxLayoutPrivate C.ClutterBoxLayoutPrivate
type ModelIterPrivate C.ClutterModelIterPrivate
type ButtonEvent C.ClutterButtonEvent
type SettingsClass C.ClutterSettingsClass
type DeviceManagerPrivate C.ClutterDeviceManagerPrivate
type BehaviourEllipsePrivate C.ClutterBehaviourEllipsePrivate
type ZoomActionPrivate C.ClutterZoomActionPrivate
type Perspective C.ClutterPerspective
type ClickActionClass C.ClutterClickActionClass
type RotateActionClass C.ClutterRotateActionClass
type BehaviourOpacityClass C.ClutterBehaviourOpacityClass
type ShaderPrivate C.ClutterShaderPrivate
type MediaIface C.ClutterMediaIface
type PaintNodePrivate C.ClutterPaintNodePrivate
type PanActionClass C.ClutterPanActionClass
type ListModelPrivate C.ClutterListModelPrivate
type BehaviourRotatePrivate C.ClutterBehaviourRotatePrivate
type DeformEffectPrivate C.ClutterDeformEffectPrivate
type ConstraintClass C.ClutterConstraintClass
type ActorMetaPrivate C.ClutterActorMetaPrivate
type ContainerIface C.ClutterContainerIface
type LayoutManagerPrivate C.ClutterLayoutManagerPrivate
type SwipeActionPrivate C.ClutterSwipeActionPrivate
type BehaviourRotateClass C.ClutterBehaviourRotateClass
type ScriptableIface C.ClutterScriptableIface
type ModelClass C.ClutterModelClass
type BinLayoutClass C.ClutterBinLayoutClass
type MotionEvent C.ClutterMotionEvent
type CrossingEvent C.ClutterCrossingEvent
type DesaturateEffectClass C.ClutterDesaturateEffectClass
type ClipNodeClass C.ClutterClipNodeClass
type TexturePrivate C.ClutterTexturePrivate
type AlignConstraintClass C.ClutterAlignConstraintClass
type ScrollActorPrivate C.ClutterScrollActorPrivate
type TableLayoutPrivate C.ClutterTableLayoutPrivate
type RectanglePrivate C.ClutterRectanglePrivate
type Knot C.ClutterKnot
type BinLayoutPrivate C.ClutterBinLayoutPrivate
type BackendClass C.ClutterBackendClass
type BehaviourPathClass C.ClutterBehaviourPathClass
type TextBufferClass C.ClutterTextBufferClass
type FixedLayoutClass C.ClutterFixedLayoutClass
type BehaviourEllipseClass C.ClutterBehaviourEllipseClass
type ImageClass C.ClutterImageClass
type ScrollActorClass C.ClutterScrollActorClass
type ListModelClass C.ClutterListModelClass
type BehaviourOpacityPrivate C.ClutterBehaviourOpacityPrivate
type PropertyTransitionClass C.ClutterPropertyTransitionClass
type ActorPrivate C.ClutterActorPrivate
type ScoreClass C.ClutterScoreClass
type ColorizeEffectClass C.ClutterColorizeEffectClass
type AnimatorKey C.ClutterAnimatorKey
type ScrollEvent C.ClutterScrollEvent
type ActorMetaClass C.ClutterActorMetaClass
type LayoutManagerClass C.ClutterLayoutManagerClass
type GroupClass C.ClutterGroupClass
type PathConstraintClass C.ClutterPathConstraintClass
type ChildMetaClass C.ClutterChildMetaClass
type StagePrivate C.ClutterStagePrivate
type OffscreenEffectPrivate C.ClutterOffscreenEffectPrivate
type SnapConstraintClass C.ClutterSnapConstraintClass
type BindConstraintClass C.ClutterBindConstraintClass
type Canvas struct {
	GObjectObject
	Content
	_value_ unsafe.Pointer
}
type CanvasKind interface {
  _IsCanvas()
  GetGObject() unsafe.Pointer
}
func (self Canvas) _IsCanvas() {}
func (self Canvas) GetGObject() unsafe.Pointer { return self._value_ }
func ToCanvas(value unsafe.Pointer) Canvas {
	return Canvas{
		ToGObjectObject(value),
		ToContent(value),
		value,
	}
}
func (self Canvas) _IsContent () {}
type ClutterAction struct {
	ActorMeta
	_value_ unsafe.Pointer
}
type ClutterActionKind interface {
  _IsClutterAction()
  GetGObject() unsafe.Pointer
}
func (self ClutterAction) _IsClutterAction() {}
func (self ClutterAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterAction(value unsafe.Pointer) ClutterAction {
	return ClutterAction{
		ToActorMeta(value),
		value,
	}
}
type FixedLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type FixedLayoutKind interface {
  _IsFixedLayout()
  GetGObject() unsafe.Pointer
}
func (self FixedLayout) _IsFixedLayout() {}
func (self FixedLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToFixedLayout(value unsafe.Pointer) FixedLayout {
	return FixedLayout{
		ToLayoutManager(value),
		value,
	}
}
type DesaturateEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type DesaturateEffectKind interface {
  _IsDesaturateEffect()
  GetGObject() unsafe.Pointer
}
func (self DesaturateEffect) _IsDesaturateEffect() {}
func (self DesaturateEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToDesaturateEffect(value unsafe.Pointer) DesaturateEffect {
	return DesaturateEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type BehaviourDepth struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourDepthKind interface {
  _IsBehaviourDepth()
  GetGObject() unsafe.Pointer
}
func (self BehaviourDepth) _IsBehaviourDepth() {}
func (self BehaviourDepth) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourDepth(value unsafe.Pointer) BehaviourDepth {
	return BehaviourDepth{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourDepth) _IsScriptable () {}
type ClutterPath struct {
	InitiallyUnowned
	_value_ unsafe.Pointer
}
type ClutterPathKind interface {
  _IsClutterPath()
  GetGObject() unsafe.Pointer
}
func (self ClutterPath) _IsClutterPath() {}
func (self ClutterPath) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterPath(value unsafe.Pointer) ClutterPath {
	return ClutterPath{
		ToInitiallyUnowned(value),
		value,
	}
}
type FlowLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type FlowLayoutKind interface {
  _IsFlowLayout()
  GetGObject() unsafe.Pointer
}
func (self FlowLayout) _IsFlowLayout() {}
func (self FlowLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToFlowLayout(value unsafe.Pointer) FlowLayout {
	return FlowLayout{
		ToLayoutManager(value),
		value,
	}
}
type ShaderMatrix struct {
	_value_ unsafe.Pointer
}
type ShaderMatrixKind interface {
  _IsShaderMatrix()
  GetGObject() unsafe.Pointer
}
func (self ShaderMatrix) _IsShaderMatrix() {}
func (self ShaderMatrix) GetGObject() unsafe.Pointer { return self._value_ }
func ToShaderMatrix(value unsafe.Pointer) ShaderMatrix {
	return ShaderMatrix{
		value,
	}
}
type TableLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type TableLayoutKind interface {
  _IsTableLayout()
  GetGObject() unsafe.Pointer
}
func (self TableLayout) _IsTableLayout() {}
func (self TableLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToTableLayout(value unsafe.Pointer) TableLayout {
	return TableLayout{
		ToLayoutManager(value),
		value,
	}
}
type BoxLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type BoxLayoutKind interface {
  _IsBoxLayout()
  GetGObject() unsafe.Pointer
}
func (self BoxLayout) _IsBoxLayout() {}
func (self BoxLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToBoxLayout(value unsafe.Pointer) BoxLayout {
	return BoxLayout{
		ToLayoutManager(value),
		value,
	}
}
type LayoutManager struct {
	InitiallyUnowned
	_value_ unsafe.Pointer
}
type LayoutManagerKind interface {
  _IsLayoutManager()
  GetGObject() unsafe.Pointer
}
func (self LayoutManager) _IsLayoutManager() {}
func (self LayoutManager) GetGObject() unsafe.Pointer { return self._value_ }
func ToLayoutManager(value unsafe.Pointer) LayoutManager {
	return LayoutManager{
		ToInitiallyUnowned(value),
		value,
	}
}
type TextNode struct {
	PaintNode
	_value_ unsafe.Pointer
}
type TextNodeKind interface {
  _IsTextNode()
  GetGObject() unsafe.Pointer
}
func (self TextNode) _IsTextNode() {}
func (self TextNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToTextNode(value unsafe.Pointer) TextNode {
	return TextNode{
		ToPaintNode(value),
		value,
	}
}
type Shader struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ShaderKind interface {
  _IsShader()
  GetGObject() unsafe.Pointer
}
func (self Shader) _IsShader() {}
func (self Shader) GetGObject() unsafe.Pointer { return self._value_ }
func ToShader(value unsafe.Pointer) Shader {
	return Shader{
		ToGObjectObject(value),
		value,
	}
}
type ClipNode struct {
	PaintNode
	_value_ unsafe.Pointer
}
type ClipNodeKind interface {
  _IsClipNode()
  GetGObject() unsafe.Pointer
}
func (self ClipNode) _IsClipNode() {}
func (self ClipNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToClipNode(value unsafe.Pointer) ClipNode {
	return ClipNode{
		ToPaintNode(value),
		value,
	}
}
type Media struct {
	_value_ unsafe.Pointer
}
type MediaKind interface {
  _IsMedia()
  GetGObject() unsafe.Pointer
}
func (self Media) _IsMedia() {}
func (self Media) GetGObject() unsafe.Pointer { return self._value_ }
func ToMedia(value unsafe.Pointer) Media {
	return Media{
		value,
	}
}
type Animator struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type AnimatorKind interface {
  _IsAnimator()
  GetGObject() unsafe.Pointer
}
func (self Animator) _IsAnimator() {}
func (self Animator) GetGObject() unsafe.Pointer { return self._value_ }
func ToAnimator(value unsafe.Pointer) Animator {
	return Animator{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self Animator) _IsScriptable () {}
type ClutterTexture struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type ClutterTextureKind interface {
  _IsClutterTexture()
  GetGObject() unsafe.Pointer
}
func (self ClutterTexture) _IsClutterTexture() {}
func (self ClutterTexture) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterTexture(value unsafe.Pointer) ClutterTexture {
	return ClutterTexture{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self ClutterTexture) _IsImplementorIface () {}
func (self ClutterTexture) _IsAnimatable () {}
func (self ClutterTexture) _IsContainer () {}
func (self ClutterTexture) _IsScriptable () {}
type BlurEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type BlurEffectKind interface {
  _IsBlurEffect()
  GetGObject() unsafe.Pointer
}
func (self BlurEffect) _IsBlurEffect() {}
func (self BlurEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToBlurEffect(value unsafe.Pointer) BlurEffect {
	return BlurEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type BehaviourScale struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourScaleKind interface {
  _IsBehaviourScale()
  GetGObject() unsafe.Pointer
}
func (self BehaviourScale) _IsBehaviourScale() {}
func (self BehaviourScale) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourScale(value unsafe.Pointer) BehaviourScale {
	return BehaviourScale{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourScale) _IsScriptable () {}
type StageManager struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type StageManagerKind interface {
  _IsStageManager()
  GetGObject() unsafe.Pointer
}
func (self StageManager) _IsStageManager() {}
func (self StageManager) GetGObject() unsafe.Pointer { return self._value_ }
func ToStageManager(value unsafe.Pointer) StageManager {
	return StageManager{
		ToGObjectObject(value),
		value,
	}
}
type PaintNode struct {
	_value_ unsafe.Pointer
}
type PaintNodeKind interface {
  _IsPaintNode()
  GetGObject() unsafe.Pointer
}
func (self PaintNode) _IsPaintNode() {}
func (self PaintNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToPaintNode(value unsafe.Pointer) PaintNode {
	return PaintNode{
		value,
	}
}
type Script struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ScriptKind interface {
  _IsScript()
  GetGObject() unsafe.Pointer
}
func (self Script) _IsScript() {}
func (self Script) GetGObject() unsafe.Pointer { return self._value_ }
func ToScript(value unsafe.Pointer) Script {
	return Script{
		ToGObjectObject(value),
		value,
	}
}
type Actor struct {
	InitiallyUnowned
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type ActorKind interface {
  _IsActor()
  GetGObject() unsafe.Pointer
}
func (self Actor) _IsActor() {}
func (self Actor) GetGObject() unsafe.Pointer { return self._value_ }
func ToActor(value unsafe.Pointer) Actor {
	return Actor{
		ToInitiallyUnowned(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self Actor) _IsImplementorIface () {}
func (self Actor) _IsAnimatable () {}
func (self Actor) _IsContainer () {}
func (self Actor) _IsScriptable () {}
type State struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type StateKind interface {
  _IsState()
  GetGObject() unsafe.Pointer
}
func (self State) _IsState() {}
func (self State) GetGObject() unsafe.Pointer { return self._value_ }
func ToState(value unsafe.Pointer) State {
	return State{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self State) _IsScriptable () {}
type GridLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type GridLayoutKind interface {
  _IsGridLayout()
  GetGObject() unsafe.Pointer
}
func (self GridLayout) _IsGridLayout() {}
func (self GridLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToGridLayout(value unsafe.Pointer) GridLayout {
	return GridLayout{
		ToLayoutManager(value),
		value,
	}
}
type ScrollActor struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type ScrollActorKind interface {
  _IsScrollActor()
  GetGObject() unsafe.Pointer
}
func (self ScrollActor) _IsScrollActor() {}
func (self ScrollActor) GetGObject() unsafe.Pointer { return self._value_ }
func ToScrollActor(value unsafe.Pointer) ScrollActor {
	return ScrollActor{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self ScrollActor) _IsImplementorIface () {}
func (self ScrollActor) _IsAnimatable () {}
func (self ScrollActor) _IsContainer () {}
func (self ScrollActor) _IsScriptable () {}
type PanAction struct {
	GestureAction
	_value_ unsafe.Pointer
}
type PanActionKind interface {
  _IsPanAction()
  GetGObject() unsafe.Pointer
}
func (self PanAction) _IsPanAction() {}
func (self PanAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToPanAction(value unsafe.Pointer) PanAction {
	return PanAction{
		ToGestureAction(value),
		value,
	}
}
type BehaviourRotate struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourRotateKind interface {
  _IsBehaviourRotate()
  GetGObject() unsafe.Pointer
}
func (self BehaviourRotate) _IsBehaviourRotate() {}
func (self BehaviourRotate) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourRotate(value unsafe.Pointer) BehaviourRotate {
	return BehaviourRotate{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourRotate) _IsScriptable () {}
type BehaviourPath struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourPathKind interface {
  _IsBehaviourPath()
  GetGObject() unsafe.Pointer
}
func (self BehaviourPath) _IsBehaviourPath() {}
func (self BehaviourPath) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourPath(value unsafe.Pointer) BehaviourPath {
	return BehaviourPath{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourPath) _IsScriptable () {}
type Behaviour struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourKind interface {
  _IsBehaviour()
  GetGObject() unsafe.Pointer
}
func (self Behaviour) _IsBehaviour() {}
func (self Behaviour) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviour(value unsafe.Pointer) Behaviour {
	return Behaviour{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self Behaviour) _IsScriptable () {}
type SwipeAction struct {
	GestureAction
	_value_ unsafe.Pointer
}
type SwipeActionKind interface {
  _IsSwipeAction()
  GetGObject() unsafe.Pointer
}
func (self SwipeAction) _IsSwipeAction() {}
func (self SwipeAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToSwipeAction(value unsafe.Pointer) SwipeAction {
	return SwipeAction{
		ToGestureAction(value),
		value,
	}
}
type KeyframeTransition struct {
	PropertyTransition
	Scriptable
	_value_ unsafe.Pointer
}
type KeyframeTransitionKind interface {
  _IsKeyframeTransition()
  GetGObject() unsafe.Pointer
}
func (self KeyframeTransition) _IsKeyframeTransition() {}
func (self KeyframeTransition) GetGObject() unsafe.Pointer { return self._value_ }
func ToKeyframeTransition(value unsafe.Pointer) KeyframeTransition {
	return KeyframeTransition{
		ToPropertyTransition(value),
		ToScriptable(value),
		value,
	}
}
func (self KeyframeTransition) _IsScriptable () {}
type Stage struct {
	Group
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type StageKind interface {
  _IsStage()
  GetGObject() unsafe.Pointer
}
func (self Stage) _IsStage() {}
func (self Stage) GetGObject() unsafe.Pointer { return self._value_ }
func ToStage(value unsafe.Pointer) Stage {
	return Stage{
		ToGroup(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self Stage) _IsImplementorIface () {}
func (self Stage) _IsAnimatable () {}
func (self Stage) _IsContainer () {}
func (self Stage) _IsScriptable () {}
type Box struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type BoxKind interface {
  _IsBox()
  GetGObject() unsafe.Pointer
}
func (self Box) _IsBox() {}
func (self Box) GetGObject() unsafe.Pointer { return self._value_ }
func ToBox(value unsafe.Pointer) Box {
	return Box{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self Box) _IsImplementorIface () {}
func (self Box) _IsAnimatable () {}
func (self Box) _IsContainer () {}
func (self Box) _IsScriptable () {}
type ColorNode struct {
	PipelineNode
	_value_ unsafe.Pointer
}
type ColorNodeKind interface {
  _IsColorNode()
  GetGObject() unsafe.Pointer
}
func (self ColorNode) _IsColorNode() {}
func (self ColorNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToColorNode(value unsafe.Pointer) ColorNode {
	return ColorNode{
		ToPipelineNode(value),
		value,
	}
}
type Settings struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type SettingsKind interface {
  _IsSettings()
  GetGObject() unsafe.Pointer
}
func (self Settings) _IsSettings() {}
func (self Settings) GetGObject() unsafe.Pointer { return self._value_ }
func ToSettings(value unsafe.Pointer) Settings {
	return Settings{
		ToGObjectObject(value),
		value,
	}
}
type Animatable struct {
	_value_ unsafe.Pointer
}
type AnimatableKind interface {
  _IsAnimatable()
  GetGObject() unsafe.Pointer
}
func (self Animatable) _IsAnimatable() {}
func (self Animatable) GetGObject() unsafe.Pointer { return self._value_ }
func ToAnimatable(value unsafe.Pointer) Animatable {
	return Animatable{
		value,
	}
}
type GestureAction struct {
	ClutterAction
	_value_ unsafe.Pointer
}
type GestureActionKind interface {
  _IsGestureAction()
  GetGObject() unsafe.Pointer
}
func (self GestureAction) _IsGestureAction() {}
func (self GestureAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToGestureAction(value unsafe.Pointer) GestureAction {
	return GestureAction{
		ToClutterAction(value),
		value,
	}
}
type OffscreenEffect struct {
	Effect
	_value_ unsafe.Pointer
}
type OffscreenEffectKind interface {
  _IsOffscreenEffect()
  GetGObject() unsafe.Pointer
}
func (self OffscreenEffect) _IsOffscreenEffect() {}
func (self OffscreenEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToOffscreenEffect(value unsafe.Pointer) OffscreenEffect {
	return OffscreenEffect{
		ToEffect(value),
		value,
	}
}
type Model struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type ModelKind interface {
  _IsModel()
  GetGObject() unsafe.Pointer
}
func (self Model) _IsModel() {}
func (self Model) GetGObject() unsafe.Pointer { return self._value_ }
func ToModel(value unsafe.Pointer) Model {
	return Model{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self Model) _IsScriptable () {}
type TextBuffer struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type TextBufferKind interface {
  _IsTextBuffer()
  GetGObject() unsafe.Pointer
}
func (self TextBuffer) _IsTextBuffer() {}
func (self TextBuffer) GetGObject() unsafe.Pointer { return self._value_ }
func ToTextBuffer(value unsafe.Pointer) TextBuffer {
	return TextBuffer{
		ToGObjectObject(value),
		value,
	}
}
type BindConstraint struct {
	Constraint
	_value_ unsafe.Pointer
}
type BindConstraintKind interface {
  _IsBindConstraint()
  GetGObject() unsafe.Pointer
}
func (self BindConstraint) _IsBindConstraint() {}
func (self BindConstraint) GetGObject() unsafe.Pointer { return self._value_ }
func ToBindConstraint(value unsafe.Pointer) BindConstraint {
	return BindConstraint{
		ToConstraint(value),
		value,
	}
}
type ActorMeta struct {
	InitiallyUnowned
	_value_ unsafe.Pointer
}
type ActorMetaKind interface {
  _IsActorMeta()
  GetGObject() unsafe.Pointer
}
func (self ActorMeta) _IsActorMeta() {}
func (self ActorMeta) GetGObject() unsafe.Pointer { return self._value_ }
func ToActorMeta(value unsafe.Pointer) ActorMeta {
	return ActorMeta{
		ToInitiallyUnowned(value),
		value,
	}
}
type Backend struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type BackendKind interface {
  _IsBackend()
  GetGObject() unsafe.Pointer
}
func (self Backend) _IsBackend() {}
func (self Backend) GetGObject() unsafe.Pointer { return self._value_ }
func ToBackend(value unsafe.Pointer) Backend {
	return Backend{
		ToGObjectObject(value),
		value,
	}
}
type Group struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type GroupKind interface {
  _IsGroup()
  GetGObject() unsafe.Pointer
}
func (self Group) _IsGroup() {}
func (self Group) GetGObject() unsafe.Pointer { return self._value_ }
func ToGroup(value unsafe.Pointer) Group {
	return Group{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self Group) _IsImplementorIface () {}
func (self Group) _IsAnimatable () {}
func (self Group) _IsContainer () {}
func (self Group) _IsScriptable () {}
type ModelIter struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ModelIterKind interface {
  _IsModelIter()
  GetGObject() unsafe.Pointer
}
func (self ModelIter) _IsModelIter() {}
func (self ModelIter) GetGObject() unsafe.Pointer { return self._value_ }
func ToModelIter(value unsafe.Pointer) ModelIter {
	return ModelIter{
		ToGObjectObject(value),
		value,
	}
}
type ClickAction struct {
	ClutterAction
	_value_ unsafe.Pointer
}
type ClickActionKind interface {
  _IsClickAction()
  GetGObject() unsafe.Pointer
}
func (self ClickAction) _IsClickAction() {}
func (self ClickAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToClickAction(value unsafe.Pointer) ClickAction {
	return ClickAction{
		ToClutterAction(value),
		value,
	}
}
type BinLayout struct {
	LayoutManager
	_value_ unsafe.Pointer
}
type BinLayoutKind interface {
  _IsBinLayout()
  GetGObject() unsafe.Pointer
}
func (self BinLayout) _IsBinLayout() {}
func (self BinLayout) GetGObject() unsafe.Pointer { return self._value_ }
func ToBinLayout(value unsafe.Pointer) BinLayout {
	return BinLayout{
		ToLayoutManager(value),
		value,
	}
}
type DeformEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type DeformEffectKind interface {
  _IsDeformEffect()
  GetGObject() unsafe.Pointer
}
func (self DeformEffect) _IsDeformEffect() {}
func (self DeformEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToDeformEffect(value unsafe.Pointer) DeformEffect {
	return DeformEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type ParamSpecFixed struct {
	ParamSpec
	_value_ unsafe.Pointer
}
type ParamSpecFixedKind interface {
  _IsParamSpecFixed()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecFixed) _IsParamSpecFixed() {}
func (self ParamSpecFixed) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecFixed(value unsafe.Pointer) ParamSpecFixed {
	return ParamSpecFixed{
		ToParamSpec(value),
		value,
	}
}
type Timeline struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type TimelineKind interface {
  _IsTimeline()
  GetGObject() unsafe.Pointer
}
func (self Timeline) _IsTimeline() {}
func (self Timeline) GetGObject() unsafe.Pointer { return self._value_ }
func ToTimeline(value unsafe.Pointer) Timeline {
	return Timeline{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self Timeline) _IsScriptable () {}
type RotateAction struct {
	GestureAction
	_value_ unsafe.Pointer
}
type RotateActionKind interface {
  _IsRotateAction()
  GetGObject() unsafe.Pointer
}
func (self RotateAction) _IsRotateAction() {}
func (self RotateAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToRotateAction(value unsafe.Pointer) RotateAction {
	return RotateAction{
		ToGestureAction(value),
		value,
	}
}
type Effect struct {
	ActorMeta
	_value_ unsafe.Pointer
}
type EffectKind interface {
  _IsEffect()
  GetGObject() unsafe.Pointer
}
func (self Effect) _IsEffect() {}
func (self Effect) GetGObject() unsafe.Pointer { return self._value_ }
func ToEffect(value unsafe.Pointer) Effect {
	return Effect{
		ToActorMeta(value),
		value,
	}
}
type ClutterRectangle struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type ClutterRectangleKind interface {
  _IsClutterRectangle()
  GetGObject() unsafe.Pointer
}
func (self ClutterRectangle) _IsClutterRectangle() {}
func (self ClutterRectangle) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterRectangle(value unsafe.Pointer) ClutterRectangle {
	return ClutterRectangle{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self ClutterRectangle) _IsImplementorIface () {}
func (self ClutterRectangle) _IsAnimatable () {}
func (self ClutterRectangle) _IsContainer () {}
func (self ClutterRectangle) _IsScriptable () {}
type InputDevice struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type InputDeviceKind interface {
  _IsInputDevice()
  GetGObject() unsafe.Pointer
}
func (self InputDevice) _IsInputDevice() {}
func (self InputDevice) GetGObject() unsafe.Pointer { return self._value_ }
func ToInputDevice(value unsafe.Pointer) InputDevice {
	return InputDevice{
		ToGObjectObject(value),
		value,
	}
}
type PageTurnEffect struct {
	DeformEffect
	_value_ unsafe.Pointer
}
type PageTurnEffectKind interface {
  _IsPageTurnEffect()
  GetGObject() unsafe.Pointer
}
func (self PageTurnEffect) _IsPageTurnEffect() {}
func (self PageTurnEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToPageTurnEffect(value unsafe.Pointer) PageTurnEffect {
	return PageTurnEffect{
		ToDeformEffect(value),
		value,
	}
}
type ParamSpecColor struct {
	ParamSpec
	_value_ unsafe.Pointer
}
type ParamSpecColorKind interface {
  _IsParamSpecColor()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecColor) _IsParamSpecColor() {}
func (self ParamSpecColor) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecColor(value unsafe.Pointer) ParamSpecColor {
	return ParamSpecColor{
		ToParamSpec(value),
		value,
	}
}
type PropertyTransition struct {
	Transition
	Scriptable
	_value_ unsafe.Pointer
}
type PropertyTransitionKind interface {
  _IsPropertyTransition()
  GetGObject() unsafe.Pointer
}
func (self PropertyTransition) _IsPropertyTransition() {}
func (self PropertyTransition) GetGObject() unsafe.Pointer { return self._value_ }
func ToPropertyTransition(value unsafe.Pointer) PropertyTransition {
	return PropertyTransition{
		ToTransition(value),
		ToScriptable(value),
		value,
	}
}
func (self PropertyTransition) _IsScriptable () {}
type BehaviourOpacity struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourOpacityKind interface {
  _IsBehaviourOpacity()
  GetGObject() unsafe.Pointer
}
func (self BehaviourOpacity) _IsBehaviourOpacity() {}
func (self BehaviourOpacity) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourOpacity(value unsafe.Pointer) BehaviourOpacity {
	return BehaviourOpacity{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourOpacity) _IsScriptable () {}
type ClutterText struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type ClutterTextKind interface {
  _IsClutterText()
  GetGObject() unsafe.Pointer
}
func (self ClutterText) _IsClutterText() {}
func (self ClutterText) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterText(value unsafe.Pointer) ClutterText {
	return ClutterText{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self ClutterText) _IsImplementorIface () {}
func (self ClutterText) _IsAnimatable () {}
func (self ClutterText) _IsContainer () {}
func (self ClutterText) _IsScriptable () {}
type Constraint struct {
	ActorMeta
	_value_ unsafe.Pointer
}
type ConstraintKind interface {
  _IsConstraint()
  GetGObject() unsafe.Pointer
}
func (self Constraint) _IsConstraint() {}
func (self Constraint) GetGObject() unsafe.Pointer { return self._value_ }
func ToConstraint(value unsafe.Pointer) Constraint {
	return Constraint{
		ToActorMeta(value),
		value,
	}
}
type Transition struct {
	Timeline
	Scriptable
	_value_ unsafe.Pointer
}
type TransitionKind interface {
  _IsTransition()
  GetGObject() unsafe.Pointer
}
func (self Transition) _IsTransition() {}
func (self Transition) GetGObject() unsafe.Pointer { return self._value_ }
func ToTransition(value unsafe.Pointer) Transition {
	return Transition{
		ToTimeline(value),
		ToScriptable(value),
		value,
	}
}
func (self Transition) _IsScriptable () {}
type Scriptable struct {
	_value_ unsafe.Pointer
}
type ScriptableKind interface {
  _IsScriptable()
  GetGObject() unsafe.Pointer
}
func (self Scriptable) _IsScriptable() {}
func (self Scriptable) GetGObject() unsafe.Pointer { return self._value_ }
func ToScriptable(value unsafe.Pointer) Scriptable {
	return Scriptable{
		value,
	}
}
type ChildMeta struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ChildMetaKind interface {
  _IsChildMeta()
  GetGObject() unsafe.Pointer
}
func (self ChildMeta) _IsChildMeta() {}
func (self ChildMeta) GetGObject() unsafe.Pointer { return self._value_ }
func ToChildMeta(value unsafe.Pointer) ChildMeta {
	return ChildMeta{
		ToGObjectObject(value),
		value,
	}
}
type BindingPool struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type BindingPoolKind interface {
  _IsBindingPool()
  GetGObject() unsafe.Pointer
}
func (self BindingPool) _IsBindingPool() {}
func (self BindingPool) GetGObject() unsafe.Pointer { return self._value_ }
func ToBindingPool(value unsafe.Pointer) BindingPool {
	return BindingPool{
		ToGObjectObject(value),
		value,
	}
}
type ColorizeEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type ColorizeEffectKind interface {
  _IsColorizeEffect()
  GetGObject() unsafe.Pointer
}
func (self ColorizeEffect) _IsColorizeEffect() {}
func (self ColorizeEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToColorizeEffect(value unsafe.Pointer) ColorizeEffect {
	return ColorizeEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type PipelineNode struct {
	PaintNode
	_value_ unsafe.Pointer
}
type PipelineNodeKind interface {
  _IsPipelineNode()
  GetGObject() unsafe.Pointer
}
func (self PipelineNode) _IsPipelineNode() {}
func (self PipelineNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToPipelineNode(value unsafe.Pointer) PipelineNode {
	return PipelineNode{
		ToPaintNode(value),
		value,
	}
}
type Interval struct {
	InitiallyUnowned
	_value_ unsafe.Pointer
}
type IntervalKind interface {
  _IsInterval()
  GetGObject() unsafe.Pointer
}
func (self Interval) _IsInterval() {}
func (self Interval) GetGObject() unsafe.Pointer { return self._value_ }
func ToInterval(value unsafe.Pointer) Interval {
	return Interval{
		ToInitiallyUnowned(value),
		value,
	}
}
type BehaviourEllipse struct {
	Behaviour
	Scriptable
	_value_ unsafe.Pointer
}
type BehaviourEllipseKind interface {
  _IsBehaviourEllipse()
  GetGObject() unsafe.Pointer
}
func (self BehaviourEllipse) _IsBehaviourEllipse() {}
func (self BehaviourEllipse) GetGObject() unsafe.Pointer { return self._value_ }
func ToBehaviourEllipse(value unsafe.Pointer) BehaviourEllipse {
	return BehaviourEllipse{
		ToBehaviour(value),
		ToScriptable(value),
		value,
	}
}
func (self BehaviourEllipse) _IsScriptable () {}
type ListModel struct {
	Model
	Scriptable
	_value_ unsafe.Pointer
}
type ListModelKind interface {
  _IsListModel()
  GetGObject() unsafe.Pointer
}
func (self ListModel) _IsListModel() {}
func (self ListModel) GetGObject() unsafe.Pointer { return self._value_ }
func ToListModel(value unsafe.Pointer) ListModel {
	return ListModel{
		ToModel(value),
		ToScriptable(value),
		value,
	}
}
func (self ListModel) _IsScriptable () {}
type Score struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type ScoreKind interface {
  _IsScore()
  GetGObject() unsafe.Pointer
}
func (self Score) _IsScore() {}
func (self Score) GetGObject() unsafe.Pointer { return self._value_ }
func ToScore(value unsafe.Pointer) Score {
	return Score{
		ToGObjectObject(value),
		value,
	}
}
type ShaderInt struct {
	_value_ unsafe.Pointer
}
type ShaderIntKind interface {
  _IsShaderInt()
  GetGObject() unsafe.Pointer
}
func (self ShaderInt) _IsShaderInt() {}
func (self ShaderInt) GetGObject() unsafe.Pointer { return self._value_ }
func ToShaderInt(value unsafe.Pointer) ShaderInt {
	return ShaderInt{
		value,
	}
}
type Container struct {
	_value_ unsafe.Pointer
}
type ContainerKind interface {
  _IsContainer()
  GetGObject() unsafe.Pointer
}
func (self Container) _IsContainer() {}
func (self Container) GetGObject() unsafe.Pointer { return self._value_ }
func ToContainer(value unsafe.Pointer) Container {
	return Container{
		value,
	}
}
type AlignConstraint struct {
	Constraint
	_value_ unsafe.Pointer
}
type AlignConstraintKind interface {
  _IsAlignConstraint()
  GetGObject() unsafe.Pointer
}
func (self AlignConstraint) _IsAlignConstraint() {}
func (self AlignConstraint) GetGObject() unsafe.Pointer { return self._value_ }
func ToAlignConstraint(value unsafe.Pointer) AlignConstraint {
	return AlignConstraint{
		ToConstraint(value),
		value,
	}
}
type Content struct {
	_value_ unsafe.Pointer
}
type ContentKind interface {
  _IsContent()
  GetGObject() unsafe.Pointer
}
func (self Content) _IsContent() {}
func (self Content) GetGObject() unsafe.Pointer { return self._value_ }
func ToContent(value unsafe.Pointer) Content {
	return Content{
		value,
	}
}
type TextureNode struct {
	PipelineNode
	_value_ unsafe.Pointer
}
type TextureNodeKind interface {
  _IsTextureNode()
  GetGObject() unsafe.Pointer
}
func (self TextureNode) _IsTextureNode() {}
func (self TextureNode) GetGObject() unsafe.Pointer { return self._value_ }
func ToTextureNode(value unsafe.Pointer) TextureNode {
	return TextureNode{
		ToPipelineNode(value),
		value,
	}
}
type Animation struct {
	GObjectObject
	Scriptable
	_value_ unsafe.Pointer
}
type AnimationKind interface {
  _IsAnimation()
  GetGObject() unsafe.Pointer
}
func (self Animation) _IsAnimation() {}
func (self Animation) GetGObject() unsafe.Pointer { return self._value_ }
func ToAnimation(value unsafe.Pointer) Animation {
	return Animation{
		ToGObjectObject(value),
		ToScriptable(value),
		value,
	}
}
func (self Animation) _IsScriptable () {}
type ZoomAction struct {
	GestureAction
	_value_ unsafe.Pointer
}
type ZoomActionKind interface {
  _IsZoomAction()
  GetGObject() unsafe.Pointer
}
func (self ZoomAction) _IsZoomAction() {}
func (self ZoomAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToZoomAction(value unsafe.Pointer) ZoomAction {
	return ZoomAction{
		ToGestureAction(value),
		value,
	}
}
type DragAction struct {
	ClutterAction
	_value_ unsafe.Pointer
}
type DragActionKind interface {
  _IsDragAction()
  GetGObject() unsafe.Pointer
}
func (self DragAction) _IsDragAction() {}
func (self DragAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToDragAction(value unsafe.Pointer) DragAction {
	return DragAction{
		ToClutterAction(value),
		value,
	}
}
type TransitionGroup struct {
	Transition
	Scriptable
	_value_ unsafe.Pointer
}
type TransitionGroupKind interface {
  _IsTransitionGroup()
  GetGObject() unsafe.Pointer
}
func (self TransitionGroup) _IsTransitionGroup() {}
func (self TransitionGroup) GetGObject() unsafe.Pointer { return self._value_ }
func ToTransitionGroup(value unsafe.Pointer) TransitionGroup {
	return TransitionGroup{
		ToTransition(value),
		ToScriptable(value),
		value,
	}
}
func (self TransitionGroup) _IsScriptable () {}
type ClutterImage struct {
	GObjectObject
	Content
	_value_ unsafe.Pointer
}
type ClutterImageKind interface {
  _IsClutterImage()
  GetGObject() unsafe.Pointer
}
func (self ClutterImage) _IsClutterImage() {}
func (self ClutterImage) GetGObject() unsafe.Pointer { return self._value_ }
func ToClutterImage(value unsafe.Pointer) ClutterImage {
	return ClutterImage{
		ToGObjectObject(value),
		ToContent(value),
		value,
	}
}
func (self ClutterImage) _IsContent () {}
type Clone struct {
	Actor
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type CloneKind interface {
  _IsClone()
  GetGObject() unsafe.Pointer
}
func (self Clone) _IsClone() {}
func (self Clone) GetGObject() unsafe.Pointer { return self._value_ }
func ToClone(value unsafe.Pointer) Clone {
	return Clone{
		ToActor(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self Clone) _IsImplementorIface () {}
func (self Clone) _IsAnimatable () {}
func (self Clone) _IsContainer () {}
func (self Clone) _IsScriptable () {}
type SnapConstraint struct {
	Constraint
	_value_ unsafe.Pointer
}
type SnapConstraintKind interface {
  _IsSnapConstraint()
  GetGObject() unsafe.Pointer
}
func (self SnapConstraint) _IsSnapConstraint() {}
func (self SnapConstraint) GetGObject() unsafe.Pointer { return self._value_ }
func ToSnapConstraint(value unsafe.Pointer) SnapConstraint {
	return SnapConstraint{
		ToConstraint(value),
		value,
	}
}
type BrightnessContrastEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type BrightnessContrastEffectKind interface {
  _IsBrightnessContrastEffect()
  GetGObject() unsafe.Pointer
}
func (self BrightnessContrastEffect) _IsBrightnessContrastEffect() {}
func (self BrightnessContrastEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToBrightnessContrastEffect(value unsafe.Pointer) BrightnessContrastEffect {
	return BrightnessContrastEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type ShaderEffect struct {
	OffscreenEffect
	_value_ unsafe.Pointer
}
type ShaderEffectKind interface {
  _IsShaderEffect()
  GetGObject() unsafe.Pointer
}
func (self ShaderEffect) _IsShaderEffect() {}
func (self ShaderEffect) GetGObject() unsafe.Pointer { return self._value_ }
func ToShaderEffect(value unsafe.Pointer) ShaderEffect {
	return ShaderEffect{
		ToOffscreenEffect(value),
		value,
	}
}
type Alpha struct {
	InitiallyUnowned
	Scriptable
	_value_ unsafe.Pointer
}
type AlphaKind interface {
  _IsAlpha()
  GetGObject() unsafe.Pointer
}
func (self Alpha) _IsAlpha() {}
func (self Alpha) GetGObject() unsafe.Pointer { return self._value_ }
func ToAlpha(value unsafe.Pointer) Alpha {
	return Alpha{
		ToInitiallyUnowned(value),
		ToScriptable(value),
		value,
	}
}
func (self Alpha) _IsScriptable () {}
type LayoutMeta struct {
	ChildMeta
	_value_ unsafe.Pointer
}
type LayoutMetaKind interface {
  _IsLayoutMeta()
  GetGObject() unsafe.Pointer
}
func (self LayoutMeta) _IsLayoutMeta() {}
func (self LayoutMeta) GetGObject() unsafe.Pointer { return self._value_ }
func ToLayoutMeta(value unsafe.Pointer) LayoutMeta {
	return LayoutMeta{
		ToChildMeta(value),
		value,
	}
}
type DropAction struct {
	ClutterAction
	_value_ unsafe.Pointer
}
type DropActionKind interface {
  _IsDropAction()
  GetGObject() unsafe.Pointer
}
func (self DropAction) _IsDropAction() {}
func (self DropAction) GetGObject() unsafe.Pointer { return self._value_ }
func ToDropAction(value unsafe.Pointer) DropAction {
	return DropAction{
		ToClutterAction(value),
		value,
	}
}
type ShaderFloat struct {
	_value_ unsafe.Pointer
}
type ShaderFloatKind interface {
  _IsShaderFloat()
  GetGObject() unsafe.Pointer
}
func (self ShaderFloat) _IsShaderFloat() {}
func (self ShaderFloat) GetGObject() unsafe.Pointer { return self._value_ }
func ToShaderFloat(value unsafe.Pointer) ShaderFloat {
	return ShaderFloat{
		value,
	}
}
type PathConstraint struct {
	Constraint
	_value_ unsafe.Pointer
}
type PathConstraintKind interface {
  _IsPathConstraint()
  GetGObject() unsafe.Pointer
}
func (self PathConstraint) _IsPathConstraint() {}
func (self PathConstraint) GetGObject() unsafe.Pointer { return self._value_ }
func ToPathConstraint(value unsafe.Pointer) PathConstraint {
	return PathConstraint{
		ToConstraint(value),
		value,
	}
}
type DeviceManager struct {
	GObjectObject
	_value_ unsafe.Pointer
}
type DeviceManagerKind interface {
  _IsDeviceManager()
  GetGObject() unsafe.Pointer
}
func (self DeviceManager) _IsDeviceManager() {}
func (self DeviceManager) GetGObject() unsafe.Pointer { return self._value_ }
func ToDeviceManager(value unsafe.Pointer) DeviceManager {
	return DeviceManager{
		ToGObjectObject(value),
		value,
	}
}
type CairoTexture struct {
	ClutterTexture
	ImplementorIface
	Animatable
	Container
	Scriptable
	_value_ unsafe.Pointer
}
type CairoTextureKind interface {
  _IsCairoTexture()
  GetGObject() unsafe.Pointer
}
func (self CairoTexture) _IsCairoTexture() {}
func (self CairoTexture) GetGObject() unsafe.Pointer { return self._value_ }
func ToCairoTexture(value unsafe.Pointer) CairoTexture {
	return CairoTexture{
		ToClutterTexture(value),
		ToImplementorIface(value),
		ToAnimatable(value),
		ToContainer(value),
		ToScriptable(value),
		value,
	}
}
func (self CairoTexture) _IsImplementorIface () {}
func (self CairoTexture) _IsAnimatable () {}
func (self CairoTexture) _IsContainer () {}
func (self CairoTexture) _IsScriptable () {}
func ActorBoxAlloc() (_go__return__ *ActorBox) {
	var _return_ *C.ClutterActorBox
	_return_ = C.clutter_actor_box_alloc()
	_go__return__ = (*ActorBox)(unsafe.Pointer(_return_))
	return
}

func BaseInit() () {
	C.clutter_base_init()
	return
}

func CairoClear(cr *C.cairo_t) () {
	C.clutter_cairo_clear(cr)
	return
}

func CairoSetSourceColor(cr *C.cairo_t, color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_cairo_set_source_color(cr, _cgo_color_)
	return
}

func CheckVersion(major uint, minor uint, micro uint) (_go__return__ bool) {
	_cgo_major_ := (C.guint)(major)
	_cgo_minor_ := (C.guint)(minor)
	_cgo_micro_ := (C.guint)(micro)
	var _return_ C.gboolean
	_return_ = C.clutter_check_version(_cgo_major_, _cgo_minor_, _cgo_micro_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func CheckWindowingBackend(backend_type string) (_go__return__ bool) {
	_cstring_backend_type_ := C.CString(backend_type)
	_cgo_backend_type_ := (*C.char)(unsafe.Pointer(_cstring_backend_type_))
	defer C.free(unsafe.Pointer(_cstring_backend_type_))
	var _return_ C.gboolean
	_return_ = C._clutter_check_windowing_backend(_cgo_backend_type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ColorAlloc() (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_return_ = C.clutter_color_alloc()
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func ColorGetStatic(color C.ClutterStaticColor) (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_return_ = C._clutter_color_get_static(color)
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func ContainerClassFindChildProperty(klass *C.GObjectClass, property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._clutter_container_class_find_child_property(klass, _cgo_property_name_)
	return
}

func ContainerClassListChildProperties(klass *C.GObjectClass) (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._clutter_container_class_list_child_properties(klass, &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func DoEvent(event *C.ClutterEvent) () {
	C.clutter_do_event(event)
	return
}

func EventGet() (_return_ *C.ClutterEvent) {
	_return_ = C.clutter_event_get()
	return
}

func EventPeek() (_return_ *C.ClutterEvent) {
	_return_ = C.clutter_event_peek()
	return
}

func EventsPending() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_events_pending()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func FeatureAvailable(feature C.ClutterFeatureFlags) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_feature_available(feature)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func FeatureGetAll() (_return_ C.ClutterFeatureFlags) {
	_return_ = C.clutter_feature_get_all()
	return
}

func GetAccessibilityEnabled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_get_accessibility_enabled()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func GetCurrentEvent() (_return_ *C.ClutterEvent) {
	_return_ = C._clutter_get_current_event()
	return
}

func GetCurrentEventTime() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C.clutter_get_current_event_time()
	_go__return__ = (uint32)(_return_)
	return
}

func GetDefaultBackend() (_go__return__ Backend) {
	var _return_ *C.ClutterBackend
	_return_ = C.clutter_get_default_backend()
	_go__return__ = ToBackend(unsafe.Pointer(_return_))
	return
}

func GetDefaultFrameRate() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_get_default_frame_rate()
	_go__return__ = (uint)(_return_)
	return
}

func GetDefaultTextDirection() (_return_ C.ClutterTextDirection) {
	_return_ = C.clutter_get_default_text_direction()
	return
}

func GetFontMap() (_return_ *C.PangoFontMap) {
	_return_ = C.clutter_get_font_map()
	return
}

func GetKeyboardGrab() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_get_keyboard_grab()
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func GetOptionGroup() (_return_ *C.GOptionGroup) {
	_return_ = C.clutter_get_option_group()
	return
}

func GetOptionGroupWithoutInit() (_return_ *C.GOptionGroup) {
	_return_ = C.clutter_get_option_group_without_init()
	return
}

func GetPointerGrab() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_get_pointer_grab()
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func GetScriptId(gobject *C.GObject) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_get_script_id(gobject)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func GrabKeyboard(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_grab_keyboard(_cgo_actor_)
	return
}

func GrabPointer(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_grab_pointer(_cgo_actor_)
	return
}

func ImageErrorQuark() (_return_ C.GQuark) {
	_return_ = C.clutter_image_error_quark()
	return
}

func InitErrorQuark() (_return_ C.GQuark) {
	_return_ = C.clutter_init_error_quark()
	return
}

func KeysymToUnicode(keyval uint) (_go__return__ uint32) {
	_cgo_keyval_ := (C.guint)(keyval)
	var _return_ C.guint32
	_return_ = C.clutter_keysym_to_unicode(_cgo_keyval_)
	_go__return__ = (uint32)(_return_)
	return
}

func Main() () {
	C.clutter_main()
	return
}

func MainLevel() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_main_level()
	_go__return__ = (int)(_return_)
	return
}

func MainQuit() () {
	C.clutter_main_quit()
	return
}

func MatrixAlloc() (_return_ *C.ClutterMatrix) {
	_return_ = C.clutter_matrix_alloc()
	return
}

func MatrixFree(matrix *C.ClutterMatrix) () {
	C.clutter_matrix_free(matrix)
	return
}

func MatrixGetType() (_return_ C.GType) {
	_return_ = C.clutter_matrix_get_type()
	return
}

func MatrixInitFromMatrix(a *C.ClutterMatrix, b *C.ClutterMatrix) (_return_ *C.ClutterMatrix) {
	_return_ = C._clutter_matrix_init_from_matrix(a, b)
	return
}

func MatrixInitIdentity(matrix *C.ClutterMatrix) (_return_ *C.ClutterMatrix) {
	_return_ = C.clutter_matrix_init_identity(matrix)
	return
}

func ClutterParamSpecColor(name string, nick string, blurb string, default_value *ClutterColor, flags C.GParamFlags) (_return_ *C.GParamSpec) {
	_cgo_default_value_ := (*C.ClutterColor)(unsafe.Pointer(default_value))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._clutter_param_spec_color(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_default_value_, flags)
	return
}

func ClutterParamSpecUnits(name string, nick string, blurb string, default_type C.ClutterUnitType, minimum float64, maximum float64, default_value float64, flags C.GParamFlags) (_return_ *C.GParamSpec) {
	_cgo_minimum_ := (C.gfloat)(minimum)
	_cgo_maximum_ := (C.gfloat)(maximum)
	_cgo_default_value_ := (C.gfloat)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._clutter_param_spec_units(_cgo_name_, _cgo_nick_, _cgo_blurb_, default_type, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	return
}

func PointZero() (_go__return__ *Point) {
	var _return_ *C.ClutterPoint
	_return_ = C._clutter_point_zero()
	_go__return__ = (*Point)(unsafe.Pointer(_return_))
	return
}

func RectZero() (_go__return__ *Rect) {
	var _return_ *C.ClutterRect
	_return_ = C._clutter_rect_zero()
	_go__return__ = (*Rect)(unsafe.Pointer(_return_))
	return
}

func ScriptErrorQuark() (_return_ C.GQuark) {
	_return_ = C.clutter_script_error_quark()
	return
}

func TextureErrorQuark() (_return_ C.GQuark) {
	_return_ = C.clutter_texture_error_quark()
	return
}

func ThreadsAddIdle(func_ C.GSourceFunc, data C.gpointer) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_threads_add_idle(func_, data)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsAddIdleFull(priority int, func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_go__return__ uint) {
	_cgo_priority_ := (C.gint)(priority)
	var _return_ C.guint
	_return_ = C.clutter_threads_add_idle_full(_cgo_priority_, func_, data, notify)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsAddRepaintFunc(func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_threads_add_repaint_func(func_, data, notify)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsAddRepaintFuncFull(flags C.ClutterRepaintFlags, func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_threads_add_repaint_func_full(flags, func_, data, notify)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsAddTimeout(interval uint, func_ C.GSourceFunc, data C.gpointer) (_go__return__ uint) {
	_cgo_interval_ := (C.guint)(interval)
	var _return_ C.guint
	_return_ = C.clutter_threads_add_timeout(_cgo_interval_, func_, data)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsAddTimeoutFull(priority int, interval uint, func_ C.GSourceFunc, data C.gpointer, notify C.GDestroyNotify) (_go__return__ uint) {
	_cgo_priority_ := (C.gint)(priority)
	_cgo_interval_ := (C.guint)(interval)
	var _return_ C.guint
	_return_ = C.clutter_threads_add_timeout_full(_cgo_priority_, _cgo_interval_, func_, data, notify)
	_go__return__ = (uint)(_return_)
	return
}

func ThreadsRemoveRepaintFunc(handle_id uint) () {
	_cgo_handle_id_ := (C.guint)(handle_id)
	C.clutter_threads_remove_repaint_func(_cgo_handle_id_)
	return
}

func ThreadsSetLockFunctions(enter_fn C.GCallback, leave_fn C.GCallback) () {
	C.clutter_threads_set_lock_functions(enter_fn, leave_fn)
	return
}

func UngrabKeyboard() () {
	C.clutter_ungrab_keyboard()
	return
}

func UngrabPointer() () {
	C.clutter_ungrab_pointer()
	return
}

func UnicodeToKeysym(wc uint32) (_go__return__ uint) {
	_cgo_wc_ := (C.guint32)(wc)
	var _return_ C.guint
	_return_ = C.clutter_unicode_to_keysym(_cgo_wc_)
	_go__return__ = (uint)(_return_)
	return
}

func ValueDupPaintNode(value *C.GValue) (_go__return__ PaintNode) {
	var _return_ C.gpointer
	_return_ = C._clutter_value_dup_paint_node(value)
	_go__return__ = ToPaintNode(unsafe.Pointer(_return_))
	return
}

func ValueGetColor(value *C.GValue) (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_return_ = C._clutter_value_get_color(value)
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func ValueGetPaintNode(value *C.GValue) (_go__return__ PaintNode) {
	var _return_ C.gpointer
	_return_ = C._clutter_value_get_paint_node(value)
	_go__return__ = ToPaintNode(unsafe.Pointer(_return_))
	return
}

func ValueGetShaderFloat(value *C.GValue) (_return_ *C.gfloat, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._clutter_value_get_shader_float(value, &length)
	_go_length_ = (uint64)(length)
	return
}

func ValueGetShaderInt(value *C.GValue) (_return_ *C.gint, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._clutter_value_get_shader_int(value, &length)
	_go_length_ = (uint64)(length)
	return
}

func ValueGetShaderMatrix(value *C.GValue) (_return_ *C.gfloat, _go_length_ uint64) {
	var length C.gsize
	_return_ = C._clutter_value_get_shader_matrix(value, &length)
	_go_length_ = (uint64)(length)
	return
}

func ValueGetUnits(value *C.GValue) (_go__return__ *Units) {
	var _return_ *C.ClutterUnits
	_return_ = C._clutter_value_get_units(value)
	_go__return__ = (*Units)(unsafe.Pointer(_return_))
	return
}

func ValueSetColor(value *C.GValue, color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_value_set_color(value, _cgo_color_)
	return
}

func ValueSetPaintNode(value *C.GValue, node PaintNodeKind) () {
	_cgo_node_ := (C.gpointer)(node.GetGObject())
	C.clutter_value_set_paint_node(value, _cgo_node_)
	return
}

func ValueSetUnits(value *C.GValue, units *Units) () {
	_cgo_units_ := (*C.ClutterUnits)(unsafe.Pointer(units))
	C._clutter_value_set_units(value, _cgo_units_)
	return
}

func ValueTakePaintNode(value *C.GValue, node PaintNodeKind) () {
	_cgo_node_ := (C.gpointer)(node.GetGObject())
	C.clutter_value_take_paint_node(value, _cgo_node_)
	return
}

func ActorNew() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_new()
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) AddAction(action ClutterActionKind) () {
	_cgo_action_ := (*C.ClutterAction)(action.GetGObject())
	C.clutter_actor_add_action((*C.ClutterActor)(_self_._value_), _cgo_action_)
	return
}

func (_self_ *Actor) AddActionWithName(name string, action ClutterActionKind) () {
	_cgo_action_ := (*C.ClutterAction)(action.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_add_action_with_name((*C.ClutterActor)(_self_._value_), _cgo_name_, _cgo_action_)
	return
}

func (_self_ *Actor) AddChild(child ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	C.clutter_actor_add_child((*C.ClutterActor)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *Actor) AddConstraint(constraint ConstraintKind) () {
	_cgo_constraint_ := (*C.ClutterConstraint)(constraint.GetGObject())
	C.clutter_actor_add_constraint((*C.ClutterActor)(_self_._value_), _cgo_constraint_)
	return
}

func (_self_ *Actor) AddConstraintWithName(name string, constraint ConstraintKind) () {
	_cgo_constraint_ := (*C.ClutterConstraint)(constraint.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_add_constraint_with_name((*C.ClutterActor)(_self_._value_), _cgo_name_, _cgo_constraint_)
	return
}

func (_self_ *Actor) AddEffect(effect EffectKind) () {
	_cgo_effect_ := (*C.ClutterEffect)(effect.GetGObject())
	C.clutter_actor_add_effect((*C.ClutterActor)(_self_._value_), _cgo_effect_)
	return
}

func (_self_ *Actor) AddEffectWithName(name string, effect EffectKind) () {
	_cgo_effect_ := (*C.ClutterEffect)(effect.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_add_effect_with_name((*C.ClutterActor)(_self_._value_), _cgo_name_, _cgo_effect_)
	return
}

func (_self_ *Actor) AddTransition(name string, transition TransitionKind) () {
	_cgo_transition_ := (*C.ClutterTransition)(transition.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_add_transition((*C.ClutterActor)(_self_._value_), _cgo_name_, _cgo_transition_)
	return
}

func (_self_ *Actor) Allocate(box *ActorBox, flags C.ClutterAllocationFlags) () {
	_cgo_box_ := (*C.ClutterActorBox)(unsafe.Pointer(box))
	C._clutter_actor_allocate((*C.ClutterActor)(_self_._value_), _cgo_box_, flags)
	return
}

func (_self_ *Actor) AllocateAlignFill(box *ActorBox, x_align float64, y_align float64, x_fill bool, y_fill bool, flags C.ClutterAllocationFlags) () {
	_cgo_box_ := (*C.ClutterActorBox)(unsafe.Pointer(box))
	_cgo_x_align_ := (C.gdouble)(x_align)
	_cgo_y_align_ := (C.gdouble)(y_align)
	_cgo_x_fill_ := (C.gboolean)(C.FALSE)
	if x_fill { _cgo_x_fill_ = (C.gboolean)(C.TRUE) }
	_cgo_y_fill_ := (C.gboolean)(C.FALSE)
	if y_fill { _cgo_y_fill_ = (C.gboolean)(C.TRUE) }
	C._clutter_actor_allocate_align_fill((*C.ClutterActor)(_self_._value_), _cgo_box_, _cgo_x_align_, _cgo_y_align_, _cgo_x_fill_, _cgo_y_fill_, flags)
	return
}

func (_self_ *Actor) AllocateAvailableSize(x float64, y float64, available_width float64, available_height float64, flags C.ClutterAllocationFlags) () {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	_cgo_available_width_ := (C.gfloat)(available_width)
	_cgo_available_height_ := (C.gfloat)(available_height)
	C.clutter_actor_allocate_available_size((*C.ClutterActor)(_self_._value_), _cgo_x_, _cgo_y_, _cgo_available_width_, _cgo_available_height_, flags)
	return
}

func (_self_ *Actor) AllocatePreferredSize(flags C.ClutterAllocationFlags) () {
	C.clutter_actor_allocate_preferred_size((*C.ClutterActor)(_self_._value_), flags)
	return
}

func (_self_ *Actor) ApplyRelativeTransformToPoint(ancestor ActorKind, point *Vertex) (vertex *Vertex) {
	_cgo_ancestor_ := (*C.ClutterActor)(ancestor.GetGObject())
	_cgo_point_ := (*C.ClutterVertex)(unsafe.Pointer(point))
	var _allocated_vertex_ C.ClutterVertex
	C._clutter_actor_apply_relative_transform_to_point((*C.ClutterActor)(_self_._value_), _cgo_ancestor_, _cgo_point_, &_allocated_vertex_)
	vertex = (*Vertex)(unsafe.Pointer(&_allocated_vertex_))
	return
}

func (_self_ *Actor) ApplyTransformToPoint(point *Vertex) (vertex *Vertex) {
	_cgo_point_ := (*C.ClutterVertex)(unsafe.Pointer(point))
	var _allocated_vertex_ C.ClutterVertex
	C._clutter_actor_apply_transform_to_point((*C.ClutterActor)(_self_._value_), _cgo_point_, &_allocated_vertex_)
	vertex = (*Vertex)(unsafe.Pointer(&_allocated_vertex_))
	return
}

func (_self_ *Actor) ClearActions() () {
	C.clutter_actor_clear_actions((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) ClearConstraints() () {
	C.clutter_actor_clear_constraints((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) ClearEffects() () {
	C.clutter_actor_clear_effects((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) Contains(descendant ActorKind) (_go__return__ bool) {
	_cgo_descendant_ := (*C.ClutterActor)(descendant.GetGObject())
	var _return_ C.gboolean
	_return_ = C.clutter_actor_contains((*C.ClutterActor)(_self_._value_), _cgo_descendant_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) ContinuePaint() () {
	C.clutter_actor_continue_paint((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) CreatePangoContext() (_return_ *C.PangoContext) {
	_return_ = C.clutter_actor_create_pango_context((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) CreatePangoLayout(text string) (_return_ *C.PangoLayout) {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._clutter_actor_create_pango_layout((*C.ClutterActor)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *Actor) Destroy() () {
	C.clutter_actor_destroy((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) DestroyAllChildren() () {
	C.clutter_actor_destroy_all_children((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) Event(event *C.ClutterEvent, capture bool) (_go__return__ bool) {
	_cgo_capture_ := (C.gboolean)(C.FALSE)
	if capture { _cgo_capture_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._clutter_actor_event((*C.ClutterActor)(_self_._value_), event, _cgo_capture_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetAccessible() (_return_ *C.AtkObject) {
	_return_ = C.clutter_actor_get_accessible((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetAction(name string) (_go__return__ ClutterAction) {
	var _return_ *C.ClutterAction
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_actor_get_action((*C.ClutterActor)(_self_._value_), _cgo_name_)
	_go__return__ = ToClutterAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetActions() (_return_ *C.GList) {
	_return_ = C.clutter_actor_get_actions((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetAllocationBox() (box *ActorBox) {
	var _allocated_box_ C.ClutterActorBox
	C.clutter_actor_get_allocation_box((*C.ClutterActor)(_self_._value_), &_allocated_box_)
	box = (*ActorBox)(unsafe.Pointer(&_allocated_box_))
	return
}

func (_self_ *Actor) GetBackgroundColor() (color *ClutterColor) {
	var _allocated_color_ C.ClutterColor
	C.clutter_actor_get_background_color((*C.ClutterActor)(_self_._value_), &_allocated_color_)
	color = (*ClutterColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *Actor) GetChildAtIndex(index_ int) (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_cgo_index__ := (C.gint)(index_)
	_return_ = C.clutter_actor_get_child_at_index((*C.ClutterActor)(_self_._value_), _cgo_index__)
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetChildTransform() (transform *C.ClutterMatrix) {
	C.clutter_actor_get_child_transform((*C.ClutterActor)(_self_._value_), transform)
	return
}

func (_self_ *Actor) GetChildren() (_return_ *C.GList) {
	_return_ = C.clutter_actor_get_children((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetClip() (_go_xoff_ float64, _go_yoff_ float64, _go_width_ float64, _go_height_ float64) {
	var xoff C.gfloat
	var yoff C.gfloat
	var width C.gfloat
	var height C.gfloat
	C.clutter_actor_get_clip((*C.ClutterActor)(_self_._value_), &xoff, &yoff, &width, &height)
	_go_xoff_ = (float64)(xoff)
	_go_yoff_ = (float64)(yoff)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	return
}

func (_self_ *Actor) GetClipToAllocation() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_clip_to_allocation((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetConstraint(name string) (_go__return__ Constraint) {
	var _return_ *C.ClutterConstraint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_actor_get_constraint((*C.ClutterActor)(_self_._value_), _cgo_name_)
	_go__return__ = ToConstraint(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetConstraints() (_return_ *C.GList) {
	_return_ = C.clutter_actor_get_constraints((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetContent() (_go__return__ Content) {
	var _return_ *C.ClutterContent
	_return_ = C.clutter_actor_get_content((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToContent(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetContentBox() (box *ActorBox) {
	var _allocated_box_ C.ClutterActorBox
	C.clutter_actor_get_content_box((*C.ClutterActor)(_self_._value_), &_allocated_box_)
	box = (*ActorBox)(unsafe.Pointer(&_allocated_box_))
	return
}

func (_self_ *Actor) GetContentGravity() (_return_ C.ClutterContentGravity) {
	_return_ = C.clutter_actor_get_content_gravity((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetContentRepeat() (_return_ C.ClutterContentRepeat) {
	_return_ = C.clutter_actor_get_content_repeat((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetContentScalingFilters() (min_filter *C.ClutterScalingFilter, mag_filter *C.ClutterScalingFilter) {
	C.clutter_actor_get_content_scaling_filters((*C.ClutterActor)(_self_._value_), min_filter, mag_filter)
	return
}

func (_self_ *Actor) GetDefaultPaintVolume() (_go__return__ *PaintVolume) {
	var _return_ *C.ClutterPaintVolume
	_return_ = C._clutter_actor_get_default_paint_volume((*C.ClutterActor)(_self_._value_))
	_go__return__ = (*PaintVolume)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetEasingDelay() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_actor_get_easing_delay((*C.ClutterActor)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Actor) GetEasingDuration() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_actor_get_easing_duration((*C.ClutterActor)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Actor) GetEasingMode() (_return_ C.ClutterAnimationMode) {
	_return_ = C.clutter_actor_get_easing_mode((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetEffect(name string) (_go__return__ Effect) {
	var _return_ *C.ClutterEffect
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_actor_get_effect((*C.ClutterActor)(_self_._value_), _cgo_name_)
	_go__return__ = ToEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetEffects() (_return_ *C.GList) {
	_return_ = C.clutter_actor_get_effects((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetFirstChild() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_first_child((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetFixedPositionSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_fixed_position_set((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetFlags() (_return_ C.ClutterActorFlags) {
	_return_ = C.clutter_actor_get_flags((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetHeight() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_height((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetLastChild() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_last_child((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetLayoutManager() (_go__return__ LayoutManager) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_actor_get_layout_manager((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToLayoutManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetMargin() (margin *Margin) {
	var _allocated_margin_ C.ClutterMargin
	C.clutter_actor_get_margin((*C.ClutterActor)(_self_._value_), &_allocated_margin_)
	margin = (*Margin)(unsafe.Pointer(&_allocated_margin_))
	return
}

func (_self_ *Actor) GetMarginBottom() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_margin_bottom((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetMarginLeft() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_margin_left((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetMarginRight() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_margin_right((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetMarginTop() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_margin_top((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetNChildren() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_actor_get_n_children((*C.ClutterActor)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Actor) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_actor_get_name((*C.ClutterActor)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Actor) GetNextSibling() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_next_sibling((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetOffscreenRedirect() (_return_ C.ClutterOffscreenRedirect) {
	_return_ = C.clutter_actor_get_offscreen_redirect((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetOpacity() (_go__return__ uint8) {
	var _return_ C.guint8
	_return_ = C.clutter_actor_get_opacity((*C.ClutterActor)(_self_._value_))
	_go__return__ = (uint8)(_return_)
	return
}

func (_self_ *Actor) GetPaintBox() (_go__return__ bool, box *ActorBox) {
	var _allocated_box_ C.ClutterActorBox
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_paint_box((*C.ClutterActor)(_self_._value_), &_allocated_box_)
	box = (*ActorBox)(unsafe.Pointer(&_allocated_box_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetPaintOpacity() (_go__return__ uint8) {
	var _return_ C.guint8
	_return_ = C.clutter_actor_get_paint_opacity((*C.ClutterActor)(_self_._value_))
	_go__return__ = (uint8)(_return_)
	return
}

func (_self_ *Actor) GetPaintVisibility() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_paint_visibility((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetPaintVolume() (_go__return__ *PaintVolume) {
	var _return_ *C.ClutterPaintVolume
	_return_ = C._clutter_actor_get_paint_volume((*C.ClutterActor)(_self_._value_))
	_go__return__ = (*PaintVolume)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetPangoContext() (_return_ *C.PangoContext) {
	_return_ = C.clutter_actor_get_pango_context((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetParent() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_parent((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetPivotPoint() (_go_pivot_x_ float64, _go_pivot_y_ float64) {
	var pivot_x C.gfloat
	var pivot_y C.gfloat
	C.clutter_actor_get_pivot_point((*C.ClutterActor)(_self_._value_), &pivot_x, &pivot_y)
	_go_pivot_x_ = (float64)(pivot_x)
	_go_pivot_y_ = (float64)(pivot_y)
	return
}

func (_self_ *Actor) GetPivotPointZ() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_pivot_point_z((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetPosition() (_go_x_ float64, _go_y_ float64) {
	var x C.gfloat
	var y C.gfloat
	C.clutter_actor_get_position((*C.ClutterActor)(_self_._value_), &x, &y)
	_go_x_ = (float64)(x)
	_go_y_ = (float64)(y)
	return
}

func (_self_ *Actor) GetPreferredHeight(for_width float64) (_go_min_height_p_ float64, _go_natural_height_p_ float64) {
	_cgo_for_width_ := (C.gfloat)(for_width)
	var min_height_p C.gfloat
	var natural_height_p C.gfloat
	C.clutter_actor_get_preferred_height((*C.ClutterActor)(_self_._value_), _cgo_for_width_, &min_height_p, &natural_height_p)
	_go_min_height_p_ = (float64)(min_height_p)
	_go_natural_height_p_ = (float64)(natural_height_p)
	return
}

func (_self_ *Actor) GetPreferredSize() (_go_min_width_p_ float64, _go_min_height_p_ float64, _go_natural_width_p_ float64, _go_natural_height_p_ float64) {
	var min_width_p C.gfloat
	var min_height_p C.gfloat
	var natural_width_p C.gfloat
	var natural_height_p C.gfloat
	C.clutter_actor_get_preferred_size((*C.ClutterActor)(_self_._value_), &min_width_p, &min_height_p, &natural_width_p, &natural_height_p)
	_go_min_width_p_ = (float64)(min_width_p)
	_go_min_height_p_ = (float64)(min_height_p)
	_go_natural_width_p_ = (float64)(natural_width_p)
	_go_natural_height_p_ = (float64)(natural_height_p)
	return
}

func (_self_ *Actor) GetPreferredWidth(for_height float64) (_go_min_width_p_ float64, _go_natural_width_p_ float64) {
	_cgo_for_height_ := (C.gfloat)(for_height)
	var min_width_p C.gfloat
	var natural_width_p C.gfloat
	C.clutter_actor_get_preferred_width((*C.ClutterActor)(_self_._value_), _cgo_for_height_, &min_width_p, &natural_width_p)
	_go_min_width_p_ = (float64)(min_width_p)
	_go_natural_width_p_ = (float64)(natural_width_p)
	return
}

func (_self_ *Actor) GetPreviousSibling() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_previous_sibling((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetReactive() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_reactive((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetRequestMode() (_return_ C.ClutterRequestMode) {
	_return_ = C.clutter_actor_get_request_mode((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetRotationAngle(axis C.ClutterRotateAxis) (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_actor_get_rotation_angle((*C.ClutterActor)(_self_._value_), axis)
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetScale() (_go_scale_x_ float64, _go_scale_y_ float64) {
	var scale_x C.gdouble
	var scale_y C.gdouble
	C.clutter_actor_get_scale((*C.ClutterActor)(_self_._value_), &scale_x, &scale_y)
	_go_scale_x_ = (float64)(scale_x)
	_go_scale_y_ = (float64)(scale_y)
	return
}

func (_self_ *Actor) GetScaleZ() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_actor_get_scale_z((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetSize() (_go_width_ float64, _go_height_ float64) {
	var width C.gfloat
	var height C.gfloat
	C.clutter_actor_get_size((*C.ClutterActor)(_self_._value_), &width, &height)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	return
}

func (_self_ *Actor) GetStage() (_go__return__ Stage) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_get_stage((*C.ClutterActor)(_self_._value_))
	_go__return__ = ToStage(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetTextDirection() (_return_ C.ClutterTextDirection) {
	_return_ = C.clutter_actor_get_text_direction((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetTransform() (transform *C.ClutterMatrix) {
	C.clutter_actor_get_transform((*C.ClutterActor)(_self_._value_), transform)
	return
}

func (_self_ *Actor) GetTransformedPaintVolume(relative_to_ancestor ActorKind) (_go__return__ *PaintVolume) {
	_cgo_relative_to_ancestor_ := (*C.ClutterActor)(relative_to_ancestor.GetGObject())
	var _return_ *C.ClutterPaintVolume
	_return_ = C._clutter_actor_get_transformed_paint_volume((*C.ClutterActor)(_self_._value_), _cgo_relative_to_ancestor_)
	_go__return__ = (*PaintVolume)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetTransformedPosition() (_go_x_ float64, _go_y_ float64) {
	var x C.gfloat
	var y C.gfloat
	C.clutter_actor_get_transformed_position((*C.ClutterActor)(_self_._value_), &x, &y)
	_go_x_ = (float64)(x)
	_go_y_ = (float64)(y)
	return
}

func (_self_ *Actor) GetTransformedSize() (_go_width_ float64, _go_height_ float64) {
	var width C.gfloat
	var height C.gfloat
	C.clutter_actor_get_transformed_size((*C.ClutterActor)(_self_._value_), &width, &height)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	return
}

func (_self_ *Actor) GetTransition(name string) (_go__return__ Transition) {
	var _return_ *C.ClutterTransition
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_actor_get_transition((*C.ClutterActor)(_self_._value_), _cgo_name_)
	_go__return__ = ToTransition(unsafe.Pointer(_return_))
	return
}

func (_self_ *Actor) GetTranslation() (_go_translate_x_ float64, _go_translate_y_ float64, _go_translate_z_ float64) {
	var translate_x C.gfloat
	var translate_y C.gfloat
	var translate_z C.gfloat
	C.clutter_actor_get_translation((*C.ClutterActor)(_self_._value_), &translate_x, &translate_y, &translate_z)
	_go_translate_x_ = (float64)(translate_x)
	_go_translate_y_ = (float64)(translate_y)
	_go_translate_z_ = (float64)(translate_z)
	return
}

func (_self_ *Actor) GetWidth() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_width((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetX() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_x((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetXAlign() (_return_ C.ClutterActorAlign) {
	_return_ = C.clutter_actor_get_x_align((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetXExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_x_expand((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetY() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_y((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GetYAlign() (_return_ C.ClutterActorAlign) {
	_return_ = C.clutter_actor_get_y_align((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) GetYExpand() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_get_y_expand((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) GetZPosition() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_actor_get_z_position((*C.ClutterActor)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Actor) GrabKeyFocus() () {
	C.clutter_actor_grab_key_focus((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) HasActions() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_actions((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasAllocation() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_allocation((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasClip() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_clip((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasConstraints() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_constraints((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasEffects() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_effects((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasKeyFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_key_focus((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasOverlaps() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_overlaps((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) HasPointer() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_has_pointer((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) Hide() () {
	C.clutter_actor_hide((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) InsertChildAbove(child ActorKind, sibling ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	C.clutter_actor_insert_child_above((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_sibling_)
	return
}

func (_self_ *Actor) InsertChildAtIndex(child ActorKind, index_ int) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_index__ := (C.gint)(index_)
	C.clutter_actor_insert_child_at_index((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_index__)
	return
}

func (_self_ *Actor) InsertChildBelow(child ActorKind, sibling ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	C.clutter_actor_insert_child_below((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_sibling_)
	return
}

func (_self_ *Actor) IsInClonePaint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_is_in_clone_paint((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) IsRotated() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_is_rotated((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) IsScaled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_is_scaled((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) Map() () {
	C.clutter_actor_map((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) MoveBy(dx float64, dy float64) () {
	_cgo_dx_ := (C.gfloat)(dx)
	_cgo_dy_ := (C.gfloat)(dy)
	C.clutter_actor_move_by((*C.ClutterActor)(_self_._value_), _cgo_dx_, _cgo_dy_)
	return
}

func (_self_ *Actor) NeedsExpand(orientation C.ClutterOrientation) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_needs_expand((*C.ClutterActor)(_self_._value_), orientation)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) Paint() () {
	C.clutter_actor_paint((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) QueueRedraw() () {
	C.clutter_actor_queue_redraw((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) QueueRedrawWithClip(clip *C.cairo_rectangle_int_t) () {
	C._clutter_actor_queue_redraw_with_clip((*C.ClutterActor)(_self_._value_), clip)
	return
}

func (_self_ *Actor) QueueRelayout() () {
	C.clutter_actor_queue_relayout((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) Realize() () {
	C.clutter_actor_realize((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) RemoveAction(action ClutterActionKind) () {
	_cgo_action_ := (*C.ClutterAction)(action.GetGObject())
	C.clutter_actor_remove_action((*C.ClutterActor)(_self_._value_), _cgo_action_)
	return
}

func (_self_ *Actor) RemoveActionByName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_remove_action_by_name((*C.ClutterActor)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Actor) RemoveAllChildren() () {
	C.clutter_actor_remove_all_children((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) RemoveAllTransitions() () {
	C.clutter_actor_remove_all_transitions((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) RemoveChild(child ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	C.clutter_actor_remove_child((*C.ClutterActor)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *Actor) RemoveClip() () {
	C.clutter_actor_remove_clip((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) RemoveConstraint(constraint ConstraintKind) () {
	_cgo_constraint_ := (*C.ClutterConstraint)(constraint.GetGObject())
	C.clutter_actor_remove_constraint((*C.ClutterActor)(_self_._value_), _cgo_constraint_)
	return
}

func (_self_ *Actor) RemoveConstraintByName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_remove_constraint_by_name((*C.ClutterActor)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Actor) RemoveEffect(effect EffectKind) () {
	_cgo_effect_ := (*C.ClutterEffect)(effect.GetGObject())
	C.clutter_actor_remove_effect((*C.ClutterActor)(_self_._value_), _cgo_effect_)
	return
}

func (_self_ *Actor) RemoveEffectByName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_remove_effect_by_name((*C.ClutterActor)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Actor) RemoveTransition(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_remove_transition((*C.ClutterActor)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Actor) ReplaceChild(old_child ActorKind, new_child ActorKind) () {
	_cgo_old_child_ := (*C.ClutterActor)(old_child.GetGObject())
	_cgo_new_child_ := (*C.ClutterActor)(new_child.GetGObject())
	C.clutter_actor_replace_child((*C.ClutterActor)(_self_._value_), _cgo_old_child_, _cgo_new_child_)
	return
}

func (_self_ *Actor) RestoreEasingState() () {
	C.clutter_actor_restore_easing_state((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) SaveEasingState() () {
	C.clutter_actor_save_easing_state((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) SetAllocation(box *ActorBox, flags C.ClutterAllocationFlags) () {
	_cgo_box_ := (*C.ClutterActorBox)(unsafe.Pointer(box))
	C._clutter_actor_set_allocation((*C.ClutterActor)(_self_._value_), _cgo_box_, flags)
	return
}

func (_self_ *Actor) SetBackgroundColor(color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_actor_set_background_color((*C.ClutterActor)(_self_._value_), _cgo_color_)
	return
}

func (_self_ *Actor) SetChildAboveSibling(child ActorKind, sibling ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	C.clutter_actor_set_child_above_sibling((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_sibling_)
	return
}

func (_self_ *Actor) SetChildAtIndex(child ActorKind, index_ int) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_index__ := (C.gint)(index_)
	C.clutter_actor_set_child_at_index((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_index__)
	return
}

func (_self_ *Actor) SetChildBelowSibling(child ActorKind, sibling ActorKind) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	C.clutter_actor_set_child_below_sibling((*C.ClutterActor)(_self_._value_), _cgo_child_, _cgo_sibling_)
	return
}

func (_self_ *Actor) SetChildTransform(transform *C.ClutterMatrix) () {
	C._clutter_actor_set_child_transform((*C.ClutterActor)(_self_._value_), transform)
	return
}

func (_self_ *Actor) SetClip(xoff float64, yoff float64, width float64, height float64) () {
	_cgo_xoff_ := (C.gfloat)(xoff)
	_cgo_yoff_ := (C.gfloat)(yoff)
	_cgo_width_ := (C.gfloat)(width)
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_actor_set_clip((*C.ClutterActor)(_self_._value_), _cgo_xoff_, _cgo_yoff_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Actor) SetClipToAllocation(clip_set bool) () {
	_cgo_clip_set_ := (C.gboolean)(C.FALSE)
	if clip_set { _cgo_clip_set_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_set_clip_to_allocation((*C.ClutterActor)(_self_._value_), _cgo_clip_set_)
	return
}

func (_self_ *Actor) SetContent(content ContentKind) () {
	_cgo_content_ := (*C.ClutterContent)(content.GetGObject())
	C.clutter_actor_set_content((*C.ClutterActor)(_self_._value_), _cgo_content_)
	return
}

func (_self_ *Actor) SetContentGravity(gravity C.ClutterContentGravity) () {
	C.clutter_actor_set_content_gravity((*C.ClutterActor)(_self_._value_), gravity)
	return
}

func (_self_ *Actor) SetContentRepeat(repeat C.ClutterContentRepeat) () {
	C.clutter_actor_set_content_repeat((*C.ClutterActor)(_self_._value_), repeat)
	return
}

func (_self_ *Actor) SetContentScalingFilters(min_filter C.ClutterScalingFilter, mag_filter C.ClutterScalingFilter) () {
	C.clutter_actor_set_content_scaling_filters((*C.ClutterActor)(_self_._value_), min_filter, mag_filter)
	return
}

func (_self_ *Actor) SetEasingDelay(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_actor_set_easing_delay((*C.ClutterActor)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Actor) SetEasingDuration(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_actor_set_easing_duration((*C.ClutterActor)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Actor) SetEasingMode(mode C.ClutterAnimationMode) () {
	C.clutter_actor_set_easing_mode((*C.ClutterActor)(_self_._value_), mode)
	return
}

func (_self_ *Actor) SetFixedPositionSet(is_set bool) () {
	_cgo_is_set_ := (C.gboolean)(C.FALSE)
	if is_set { _cgo_is_set_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_set_fixed_position_set((*C.ClutterActor)(_self_._value_), _cgo_is_set_)
	return
}

func (_self_ *Actor) SetFlags(flags C.ClutterActorFlags) () {
	C.clutter_actor_set_flags((*C.ClutterActor)(_self_._value_), flags)
	return
}

func (_self_ *Actor) SetHeight(height float64) () {
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_actor_set_height((*C.ClutterActor)(_self_._value_), _cgo_height_)
	return
}

func (_self_ *Actor) SetLayoutManager(manager LayoutManagerKind) () {
	_cgo_manager_ := (*C.ClutterLayoutManager)(manager.GetGObject())
	C.clutter_actor_set_layout_manager((*C.ClutterActor)(_self_._value_), _cgo_manager_)
	return
}

func (_self_ *Actor) SetMargin(margin *Margin) () {
	_cgo_margin_ := (*C.ClutterMargin)(unsafe.Pointer(margin))
	C._clutter_actor_set_margin((*C.ClutterActor)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *Actor) SetMarginBottom(margin float64) () {
	_cgo_margin_ := (C.gfloat)(margin)
	C.clutter_actor_set_margin_bottom((*C.ClutterActor)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *Actor) SetMarginLeft(margin float64) () {
	_cgo_margin_ := (C.gfloat)(margin)
	C.clutter_actor_set_margin_left((*C.ClutterActor)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *Actor) SetMarginRight(margin float64) () {
	_cgo_margin_ := (C.gfloat)(margin)
	C.clutter_actor_set_margin_right((*C.ClutterActor)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *Actor) SetMarginTop(margin float64) () {
	_cgo_margin_ := (C.gfloat)(margin)
	C.clutter_actor_set_margin_top((*C.ClutterActor)(_self_._value_), _cgo_margin_)
	return
}

func (_self_ *Actor) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_set_name((*C.ClutterActor)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Actor) SetOffscreenRedirect(redirect C.ClutterOffscreenRedirect) () {
	C.clutter_actor_set_offscreen_redirect((*C.ClutterActor)(_self_._value_), redirect)
	return
}

func (_self_ *Actor) SetOpacity(opacity uint8) () {
	_cgo_opacity_ := (C.guint8)(opacity)
	C.clutter_actor_set_opacity((*C.ClutterActor)(_self_._value_), _cgo_opacity_)
	return
}

func (_self_ *Actor) SetPivotPoint(pivot_x float64, pivot_y float64) () {
	_cgo_pivot_x_ := (C.gfloat)(pivot_x)
	_cgo_pivot_y_ := (C.gfloat)(pivot_y)
	C.clutter_actor_set_pivot_point((*C.ClutterActor)(_self_._value_), _cgo_pivot_x_, _cgo_pivot_y_)
	return
}

func (_self_ *Actor) SetPivotPointZ(pivot_z float64) () {
	_cgo_pivot_z_ := (C.gfloat)(pivot_z)
	C.clutter_actor_set_pivot_point_z((*C.ClutterActor)(_self_._value_), _cgo_pivot_z_)
	return
}

func (_self_ *Actor) SetPosition(x float64, y float64) () {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	C.clutter_actor_set_position((*C.ClutterActor)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *Actor) SetReactive(reactive bool) () {
	_cgo_reactive_ := (C.gboolean)(C.FALSE)
	if reactive { _cgo_reactive_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_set_reactive((*C.ClutterActor)(_self_._value_), _cgo_reactive_)
	return
}

func (_self_ *Actor) SetRequestMode(mode C.ClutterRequestMode) () {
	C.clutter_actor_set_request_mode((*C.ClutterActor)(_self_._value_), mode)
	return
}

func (_self_ *Actor) SetRotationAngle(axis C.ClutterRotateAxis, angle float64) () {
	_cgo_angle_ := (C.gdouble)(angle)
	C.clutter_actor_set_rotation_angle((*C.ClutterActor)(_self_._value_), axis, _cgo_angle_)
	return
}

func (_self_ *Actor) SetScale(scale_x float64, scale_y float64) () {
	_cgo_scale_x_ := (C.gdouble)(scale_x)
	_cgo_scale_y_ := (C.gdouble)(scale_y)
	C.clutter_actor_set_scale((*C.ClutterActor)(_self_._value_), _cgo_scale_x_, _cgo_scale_y_)
	return
}

func (_self_ *Actor) SetScaleZ(scale_z float64) () {
	_cgo_scale_z_ := (C.gdouble)(scale_z)
	C.clutter_actor_set_scale_z((*C.ClutterActor)(_self_._value_), _cgo_scale_z_)
	return
}

func (_self_ *Actor) SetSize(width float64, height float64) () {
	_cgo_width_ := (C.gfloat)(width)
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_actor_set_size((*C.ClutterActor)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Actor) SetTextDirection(text_dir C.ClutterTextDirection) () {
	C.clutter_actor_set_text_direction((*C.ClutterActor)(_self_._value_), text_dir)
	return
}

func (_self_ *Actor) SetTransform(transform *C.ClutterMatrix) () {
	C._clutter_actor_set_transform((*C.ClutterActor)(_self_._value_), transform)
	return
}

func (_self_ *Actor) SetTranslation(translate_x float64, translate_y float64, translate_z float64) () {
	_cgo_translate_x_ := (C.gfloat)(translate_x)
	_cgo_translate_y_ := (C.gfloat)(translate_y)
	_cgo_translate_z_ := (C.gfloat)(translate_z)
	C.clutter_actor_set_translation((*C.ClutterActor)(_self_._value_), _cgo_translate_x_, _cgo_translate_y_, _cgo_translate_z_)
	return
}

func (_self_ *Actor) SetWidth(width float64) () {
	_cgo_width_ := (C.gfloat)(width)
	C.clutter_actor_set_width((*C.ClutterActor)(_self_._value_), _cgo_width_)
	return
}

func (_self_ *Actor) SetX(x float64) () {
	_cgo_x_ := (C.gfloat)(x)
	C.clutter_actor_set_x((*C.ClutterActor)(_self_._value_), _cgo_x_)
	return
}

func (_self_ *Actor) SetXAlign(x_align C.ClutterActorAlign) () {
	C.clutter_actor_set_x_align((*C.ClutterActor)(_self_._value_), x_align)
	return
}

func (_self_ *Actor) SetXExpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_set_x_expand((*C.ClutterActor)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *Actor) SetY(y float64) () {
	_cgo_y_ := (C.gfloat)(y)
	C.clutter_actor_set_y((*C.ClutterActor)(_self_._value_), _cgo_y_)
	return
}

func (_self_ *Actor) SetYAlign(y_align C.ClutterActorAlign) () {
	C.clutter_actor_set_y_align((*C.ClutterActor)(_self_._value_), y_align)
	return
}

func (_self_ *Actor) SetYExpand(expand bool) () {
	_cgo_expand_ := (C.gboolean)(C.FALSE)
	if expand { _cgo_expand_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_set_y_expand((*C.ClutterActor)(_self_._value_), _cgo_expand_)
	return
}

func (_self_ *Actor) SetZPosition(z_position float64) () {
	_cgo_z_position_ := (C.gfloat)(z_position)
	C.clutter_actor_set_z_position((*C.ClutterActor)(_self_._value_), _cgo_z_position_)
	return
}

func (_self_ *Actor) ShouldPickPaint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_should_pick_paint((*C.ClutterActor)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) Show() () {
	C.clutter_actor_show((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) TransformStagePoint(x float64, y float64) (_go__return__ bool, _go_x_out_ float64, _go_y_out_ float64) {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	var x_out C.gfloat
	var y_out C.gfloat
	var _return_ C.gboolean
	_return_ = C.clutter_actor_transform_stage_point((*C.ClutterActor)(_self_._value_), _cgo_x_, _cgo_y_, &x_out, &y_out)
	_go_x_out_ = (float64)(x_out)
	_go_y_out_ = (float64)(y_out)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Actor) Unmap() () {
	C.clutter_actor_unmap((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) Unrealize() () {
	C.clutter_actor_unrealize((*C.ClutterActor)(_self_._value_))
	return
}

func (_self_ *Actor) UnsetFlags(flags C.ClutterActorFlags) () {
	C.clutter_actor_unset_flags((*C.ClutterActor)(_self_._value_), flags)
	return
}

func (_self_ *ActorMeta) GetActor() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_actor_meta_get_actor((*C.ClutterActorMeta)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActorMeta) GetEnabled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_actor_meta_get_enabled((*C.ClutterActorMeta)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorMeta) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_actor_meta_get_name((*C.ClutterActorMeta)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ActorMeta) SetEnabled(is_enabled bool) () {
	_cgo_is_enabled_ := (C.gboolean)(C.FALSE)
	if is_enabled { _cgo_is_enabled_ = (C.gboolean)(C.TRUE) }
	C.clutter_actor_meta_set_enabled((*C.ClutterActorMeta)(_self_._value_), _cgo_is_enabled_)
	return
}

func (_self_ *ActorMeta) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_actor_meta_set_name((*C.ClutterActorMeta)(_self_._value_), _cgo_name_)
	return
}

func AlignConstraintNew(source ActorKind, axis C.ClutterAlignAxis, factor float64) (_go__return__ AlignConstraint) {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	var _return_ *C.ClutterConstraint
	_cgo_factor_ := (C.gfloat)(factor)
	_return_ = C.clutter_align_constraint_new(_cgo_source_, axis, _cgo_factor_)
	_go__return__ = ToAlignConstraint(unsafe.Pointer(_return_))
	return
}

func (_self_ *AlignConstraint) GetAlignAxis() (_return_ C.ClutterAlignAxis) {
	_return_ = C.clutter_align_constraint_get_align_axis((*C.ClutterAlignConstraint)(_self_._value_))
	return
}

func (_self_ *AlignConstraint) GetFactor() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_align_constraint_get_factor((*C.ClutterAlignConstraint)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *AlignConstraint) GetSource() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_align_constraint_get_source((*C.ClutterAlignConstraint)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *AlignConstraint) SetAlignAxis(axis C.ClutterAlignAxis) () {
	C.clutter_align_constraint_set_align_axis((*C.ClutterAlignConstraint)(_self_._value_), axis)
	return
}

func (_self_ *AlignConstraint) SetFactor(factor float64) () {
	_cgo_factor_ := (C.gfloat)(factor)
	C.clutter_align_constraint_set_factor((*C.ClutterAlignConstraint)(_self_._value_), _cgo_factor_)
	return
}

func (_self_ *AlignConstraint) SetSource(source ActorKind) () {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	C.clutter_align_constraint_set_source((*C.ClutterAlignConstraint)(_self_._value_), _cgo_source_)
	return
}

func (_self_ *Backend) GetFontOptions() (_return_ *C.cairo_font_options_t) {
	_return_ = C._clutter_backend_get_font_options((*C.ClutterBackend)(_self_._value_))
	return
}

func (_self_ *Backend) GetResolution() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_backend_get_resolution((*C.ClutterBackend)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Backend) SetFontOptions(options *C.cairo_font_options_t) () {
	C._clutter_backend_set_font_options((*C.ClutterBackend)(_self_._value_), options)
	return
}

func BinLayoutNew(x_align C.ClutterBinAlignment, y_align C.ClutterBinAlignment) (_go__return__ BinLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_bin_layout_new(x_align, y_align)
	_go__return__ = ToBinLayout(unsafe.Pointer(_return_))
	return
}

func BindConstraintNew(source ActorKind, coordinate C.ClutterBindCoordinate, offset float64) (_go__return__ BindConstraint) {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	var _return_ *C.ClutterConstraint
	_cgo_offset_ := (C.gfloat)(offset)
	_return_ = C.clutter_bind_constraint_new(_cgo_source_, coordinate, _cgo_offset_)
	_go__return__ = ToBindConstraint(unsafe.Pointer(_return_))
	return
}

func (_self_ *BindConstraint) GetCoordinate() (_return_ C.ClutterBindCoordinate) {
	_return_ = C.clutter_bind_constraint_get_coordinate((*C.ClutterBindConstraint)(_self_._value_))
	return
}

func (_self_ *BindConstraint) GetOffset() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_bind_constraint_get_offset((*C.ClutterBindConstraint)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *BindConstraint) GetSource() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_bind_constraint_get_source((*C.ClutterBindConstraint)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *BindConstraint) SetCoordinate(coordinate C.ClutterBindCoordinate) () {
	C.clutter_bind_constraint_set_coordinate((*C.ClutterBindConstraint)(_self_._value_), coordinate)
	return
}

func (_self_ *BindConstraint) SetOffset(offset float64) () {
	_cgo_offset_ := (C.gfloat)(offset)
	C.clutter_bind_constraint_set_offset((*C.ClutterBindConstraint)(_self_._value_), _cgo_offset_)
	return
}

func (_self_ *BindConstraint) SetSource(source ActorKind) () {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	C.clutter_bind_constraint_set_source((*C.ClutterBindConstraint)(_self_._value_), _cgo_source_)
	return
}

func BindingPoolNew(name string) (_go__return__ BindingPool) {
	var _return_ *C.ClutterBindingPool
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_binding_pool_new(_cgo_name_)
	_go__return__ = ToBindingPool(unsafe.Pointer(_return_))
	return
}

func BindingPoolFind(name string) (_go__return__ BindingPool) {
	var _return_ *C.ClutterBindingPool
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_binding_pool_find(_cgo_name_)
	_go__return__ = ToBindingPool(unsafe.Pointer(_return_))
	return
}

func BindingPoolGetForClass(klass C.gpointer) (_go__return__ BindingPool) {
	var _return_ *C.ClutterBindingPool
	_return_ = C.clutter_binding_pool_get_for_class(klass)
	_go__return__ = ToBindingPool(unsafe.Pointer(_return_))
	return
}

func (_self_ *BindingPool) Activate(key_val uint, modifiers C.ClutterModifierType, gobject *C.GObject) (_go__return__ bool) {
	_cgo_key_val_ := (C.guint)(key_val)
	var _return_ C.gboolean
	_return_ = C.clutter_binding_pool_activate((*C.ClutterBindingPool)(_self_._value_), _cgo_key_val_, modifiers, gobject)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *BindingPool) BlockAction(action_name string) () {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._clutter_binding_pool_block_action((*C.ClutterBindingPool)(_self_._value_), _cgo_action_name_)
	return
}

func (_self_ *BindingPool) FindAction(key_val uint, modifiers C.ClutterModifierType) (_go__return__ string) {
	_cgo_key_val_ := (C.guint)(key_val)
	var _return_ *C.gchar
	_return_ = C._clutter_binding_pool_find_action((*C.ClutterBindingPool)(_self_._value_), _cgo_key_val_, modifiers)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *BindingPool) InstallAction(action_name string, key_val uint, modifiers C.ClutterModifierType, callback C.GCallback, data C.gpointer, notify C.GDestroyNotify) () {
	_cgo_key_val_ := (C.guint)(key_val)
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._clutter_binding_pool_install_action((*C.ClutterBindingPool)(_self_._value_), _cgo_action_name_, _cgo_key_val_, modifiers, callback, data, notify)
	return
}

func (_self_ *BindingPool) InstallClosure(action_name string, key_val uint, modifiers C.ClutterModifierType, closure *C.GClosure) () {
	_cgo_key_val_ := (C.guint)(key_val)
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._clutter_binding_pool_install_closure((*C.ClutterBindingPool)(_self_._value_), _cgo_action_name_, _cgo_key_val_, modifiers, closure)
	return
}

func (_self_ *BindingPool) OverrideAction(key_val uint, modifiers C.ClutterModifierType, callback C.GCallback, data C.gpointer, notify C.GDestroyNotify) () {
	_cgo_key_val_ := (C.guint)(key_val)
	C.clutter_binding_pool_override_action((*C.ClutterBindingPool)(_self_._value_), _cgo_key_val_, modifiers, callback, data, notify)
	return
}

func (_self_ *BindingPool) OverrideClosure(key_val uint, modifiers C.ClutterModifierType, closure *C.GClosure) () {
	_cgo_key_val_ := (C.guint)(key_val)
	C.clutter_binding_pool_override_closure((*C.ClutterBindingPool)(_self_._value_), _cgo_key_val_, modifiers, closure)
	return
}

func (_self_ *BindingPool) RemoveAction(key_val uint, modifiers C.ClutterModifierType) () {
	_cgo_key_val_ := (C.guint)(key_val)
	C.clutter_binding_pool_remove_action((*C.ClutterBindingPool)(_self_._value_), _cgo_key_val_, modifiers)
	return
}

func (_self_ *BindingPool) UnblockAction(action_name string) () {
	_cstring_action_name_ := C.CString(action_name)
	_cgo_action_name_ := (*C.gchar)(unsafe.Pointer(_cstring_action_name_))
	defer C.free(unsafe.Pointer(_cstring_action_name_))
	C._clutter_binding_pool_unblock_action((*C.ClutterBindingPool)(_self_._value_), _cgo_action_name_)
	return
}

func BlurEffectNew() (_go__return__ BlurEffect) {
	var _return_ *C.ClutterEffect
	_return_ = C.clutter_blur_effect_new()
	_go__return__ = ToBlurEffect(unsafe.Pointer(_return_))
	return
}

func BoxLayoutNew() (_go__return__ BoxLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_box_layout_new()
	_go__return__ = ToBoxLayout(unsafe.Pointer(_return_))
	return
}

func (_self_ *BoxLayout) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_box_layout_get_homogeneous((*C.ClutterBoxLayout)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *BoxLayout) GetOrientation() (_return_ C.ClutterOrientation) {
	_return_ = C.clutter_box_layout_get_orientation((*C.ClutterBoxLayout)(_self_._value_))
	return
}

func (_self_ *BoxLayout) GetPackStart() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_box_layout_get_pack_start((*C.ClutterBoxLayout)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *BoxLayout) GetSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_box_layout_get_spacing((*C.ClutterBoxLayout)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *BoxLayout) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.clutter_box_layout_set_homogeneous((*C.ClutterBoxLayout)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *BoxLayout) SetOrientation(orientation C.ClutterOrientation) () {
	C.clutter_box_layout_set_orientation((*C.ClutterBoxLayout)(_self_._value_), orientation)
	return
}

func (_self_ *BoxLayout) SetPackStart(pack_start bool) () {
	_cgo_pack_start_ := (C.gboolean)(C.FALSE)
	if pack_start { _cgo_pack_start_ = (C.gboolean)(C.TRUE) }
	C.clutter_box_layout_set_pack_start((*C.ClutterBoxLayout)(_self_._value_), _cgo_pack_start_)
	return
}

func (_self_ *BoxLayout) SetSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.clutter_box_layout_set_spacing((*C.ClutterBoxLayout)(_self_._value_), _cgo_spacing_)
	return
}

func BrightnessContrastEffectNew() (_go__return__ BrightnessContrastEffect) {
	var _return_ *C.ClutterEffect
	_return_ = C.clutter_brightness_contrast_effect_new()
	_go__return__ = ToBrightnessContrastEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *BrightnessContrastEffect) GetBrightness() (red C.float, green C.float, blue C.float) {
	C.clutter_brightness_contrast_effect_get_brightness((*C.ClutterBrightnessContrastEffect)(_self_._value_), &red, &green, &blue)
	return
}

func (_self_ *BrightnessContrastEffect) GetContrast() (red C.float, green C.float, blue C.float) {
	C.clutter_brightness_contrast_effect_get_contrast((*C.ClutterBrightnessContrastEffect)(_self_._value_), &red, &green, &blue)
	return
}

func (_self_ *BrightnessContrastEffect) SetBrightness(brightness C.float) () {
	C.clutter_brightness_contrast_effect_set_brightness((*C.ClutterBrightnessContrastEffect)(_self_._value_), brightness)
	return
}

func (_self_ *BrightnessContrastEffect) SetBrightnessFull(red C.float, green C.float, blue C.float) () {
	C.clutter_brightness_contrast_effect_set_brightness_full((*C.ClutterBrightnessContrastEffect)(_self_._value_), red, green, blue)
	return
}

func (_self_ *BrightnessContrastEffect) SetContrast(contrast C.float) () {
	C.clutter_brightness_contrast_effect_set_contrast((*C.ClutterBrightnessContrastEffect)(_self_._value_), contrast)
	return
}

func (_self_ *BrightnessContrastEffect) SetContrastFull(red C.float, green C.float, blue C.float) () {
	C.clutter_brightness_contrast_effect_set_contrast_full((*C.ClutterBrightnessContrastEffect)(_self_._value_), red, green, blue)
	return
}

func CanvasNew() (_go__return__ Canvas) {
	var _return_ *C.ClutterContent
	_return_ = C.clutter_canvas_new()
	_go__return__ = ToCanvas(unsafe.Pointer(_return_))
	return
}

func (_self_ *Canvas) SetSize(width C.int, height C.int) () {
	C.clutter_canvas_set_size((*C.ClutterCanvas)(_self_._value_), width, height)
	return
}

func (_self_ *ChildMeta) GetActor() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_child_meta_get_actor((*C.ClutterChildMeta)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *ChildMeta) GetContainer() (_go__return__ Container) {
	var _return_ *C.ClutterContainer
	_return_ = C.clutter_child_meta_get_container((*C.ClutterChildMeta)(_self_._value_))
	_go__return__ = ToContainer(unsafe.Pointer(_return_))
	return
}

func ClickActionNew() (_go__return__ ClickAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_click_action_new()
	_go__return__ = ToClickAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClickAction) GetButton() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_click_action_get_button((*C.ClutterClickAction)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClickAction) GetCoords() (_go_press_x_ float64, _go_press_y_ float64) {
	var press_x C.gfloat
	var press_y C.gfloat
	C.clutter_click_action_get_coords((*C.ClutterClickAction)(_self_._value_), &press_x, &press_y)
	_go_press_x_ = (float64)(press_x)
	_go_press_y_ = (float64)(press_y)
	return
}

func (_self_ *ClickAction) GetState() (_return_ C.ClutterModifierType) {
	_return_ = C.clutter_click_action_get_state((*C.ClutterClickAction)(_self_._value_))
	return
}

func (_self_ *ClickAction) Release() () {
	C.clutter_click_action_release((*C.ClutterClickAction)(_self_._value_))
	return
}

func ClipNodeNew() (_go__return__ ClipNode) {
	var _return_ *C.ClutterPaintNode
	_return_ = C.clutter_clip_node_new()
	_go__return__ = ToClipNode(unsafe.Pointer(_return_))
	return
}

func CloneNew(source ActorKind) (_go__return__ Clone) {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	var _return_ *C.ClutterActor
	_return_ = C.clutter_clone_new(_cgo_source_)
	_go__return__ = ToClone(unsafe.Pointer(_return_))
	return
}

func (_self_ *Clone) GetSource() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_clone_get_source((*C.ClutterClone)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Clone) SetSource(source ActorKind) () {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	C.clutter_clone_set_source((*C.ClutterClone)(_self_._value_), _cgo_source_)
	return
}

func ColorNodeNew(color *ClutterColor) (_go__return__ ColorNode) {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	var _return_ *C.ClutterPaintNode
	_return_ = C._clutter_color_node_new(_cgo_color_)
	_go__return__ = ToColorNode(unsafe.Pointer(_return_))
	return
}

func ColorizeEffectNew(tint *ClutterColor) (_go__return__ ColorizeEffect) {
	_cgo_tint_ := (*C.ClutterColor)(unsafe.Pointer(tint))
	var _return_ *C.ClutterEffect
	_return_ = C._clutter_colorize_effect_new(_cgo_tint_)
	_go__return__ = ToColorizeEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *ColorizeEffect) GetTint() (tint *ClutterColor) {
	var _allocated_tint_ C.ClutterColor
	C.clutter_colorize_effect_get_tint((*C.ClutterColorizeEffect)(_self_._value_), &_allocated_tint_)
	tint = (*ClutterColor)(unsafe.Pointer(&_allocated_tint_))
	return
}

func (_self_ *ColorizeEffect) SetTint(tint *ClutterColor) () {
	_cgo_tint_ := (*C.ClutterColor)(unsafe.Pointer(tint))
	C._clutter_colorize_effect_set_tint((*C.ClutterColorizeEffect)(_self_._value_), _cgo_tint_)
	return
}

func (_self_ *DeformEffect) GetBackMaterial() (_return_ C.CoglHandle) {
	_return_ = C.clutter_deform_effect_get_back_material((*C.ClutterDeformEffect)(_self_._value_))
	return
}

func (_self_ *DeformEffect) GetNTiles() (_go_x_tiles_ uint, _go_y_tiles_ uint) {
	var x_tiles C.guint
	var y_tiles C.guint
	C.clutter_deform_effect_get_n_tiles((*C.ClutterDeformEffect)(_self_._value_), &x_tiles, &y_tiles)
	_go_x_tiles_ = (uint)(x_tiles)
	_go_y_tiles_ = (uint)(y_tiles)
	return
}

func (_self_ *DeformEffect) Invalidate() () {
	C.clutter_deform_effect_invalidate((*C.ClutterDeformEffect)(_self_._value_))
	return
}

func (_self_ *DeformEffect) SetBackMaterial(material C.CoglHandle) () {
	C.clutter_deform_effect_set_back_material((*C.ClutterDeformEffect)(_self_._value_), material)
	return
}

func (_self_ *DeformEffect) SetNTiles(x_tiles uint, y_tiles uint) () {
	_cgo_x_tiles_ := (C.guint)(x_tiles)
	_cgo_y_tiles_ := (C.guint)(y_tiles)
	C.clutter_deform_effect_set_n_tiles((*C.ClutterDeformEffect)(_self_._value_), _cgo_x_tiles_, _cgo_y_tiles_)
	return
}

func DesaturateEffectNew(factor float64) (_go__return__ DesaturateEffect) {
	var _return_ *C.ClutterEffect
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C.clutter_desaturate_effect_new(_cgo_factor_)
	_go__return__ = ToDesaturateEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *DesaturateEffect) GetFactor() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_desaturate_effect_get_factor((*C.ClutterDesaturateEffect)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *DesaturateEffect) SetFactor(factor float64) () {
	_cgo_factor_ := (C.gdouble)(factor)
	C.clutter_desaturate_effect_set_factor((*C.ClutterDesaturateEffect)(_self_._value_), _cgo_factor_)
	return
}

func DeviceManagerGetDefault() (_go__return__ DeviceManager) {
	var _return_ *C.ClutterDeviceManager
	_return_ = C.clutter_device_manager_get_default()
	_go__return__ = ToDeviceManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *DeviceManager) GetCoreDevice(device_type C.ClutterInputDeviceType) (_go__return__ InputDevice) {
	var _return_ *C.ClutterInputDevice
	_return_ = C.clutter_device_manager_get_core_device((*C.ClutterDeviceManager)(_self_._value_), device_type)
	_go__return__ = ToInputDevice(unsafe.Pointer(_return_))
	return
}

func (_self_ *DeviceManager) GetDevice(device_id int) (_go__return__ InputDevice) {
	var _return_ *C.ClutterInputDevice
	_cgo_device_id_ := (C.gint)(device_id)
	_return_ = C.clutter_device_manager_get_device((*C.ClutterDeviceManager)(_self_._value_), _cgo_device_id_)
	_go__return__ = ToInputDevice(unsafe.Pointer(_return_))
	return
}

func (_self_ *DeviceManager) ListDevices() (_return_ *C.GSList) {
	_return_ = C.clutter_device_manager_list_devices((*C.ClutterDeviceManager)(_self_._value_))
	return
}

func (_self_ *DeviceManager) PeekDevices() (_return_ *C.GSList) {
	_return_ = C._clutter_device_manager_peek_devices((*C.ClutterDeviceManager)(_self_._value_))
	return
}

func DragActionNew() (_go__return__ DragAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_drag_action_new()
	_go__return__ = ToDragAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *DragAction) GetDragArea() (_go__return__ bool, drag_area *Rect) {
	var _allocated_drag_area_ C.ClutterRect
	var _return_ C.gboolean
	_return_ = C.clutter_drag_action_get_drag_area((*C.ClutterDragAction)(_self_._value_), &_allocated_drag_area_)
	drag_area = (*Rect)(unsafe.Pointer(&_allocated_drag_area_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *DragAction) GetDragAxis() (_return_ C.ClutterDragAxis) {
	_return_ = C.clutter_drag_action_get_drag_axis((*C.ClutterDragAction)(_self_._value_))
	return
}

func (_self_ *DragAction) GetDragHandle() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_drag_action_get_drag_handle((*C.ClutterDragAction)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *DragAction) GetDragThreshold() (_go_x_threshold_ uint, _go_y_threshold_ uint) {
	var x_threshold C.guint
	var y_threshold C.guint
	C.clutter_drag_action_get_drag_threshold((*C.ClutterDragAction)(_self_._value_), &x_threshold, &y_threshold)
	_go_x_threshold_ = (uint)(x_threshold)
	_go_y_threshold_ = (uint)(y_threshold)
	return
}

func (_self_ *DragAction) GetMotionCoords() (_go_motion_x_ float64, _go_motion_y_ float64) {
	var motion_x C.gfloat
	var motion_y C.gfloat
	C.clutter_drag_action_get_motion_coords((*C.ClutterDragAction)(_self_._value_), &motion_x, &motion_y)
	_go_motion_x_ = (float64)(motion_x)
	_go_motion_y_ = (float64)(motion_y)
	return
}

func (_self_ *DragAction) GetPressCoords() (_go_press_x_ float64, _go_press_y_ float64) {
	var press_x C.gfloat
	var press_y C.gfloat
	C.clutter_drag_action_get_press_coords((*C.ClutterDragAction)(_self_._value_), &press_x, &press_y)
	_go_press_x_ = (float64)(press_x)
	_go_press_y_ = (float64)(press_y)
	return
}

func (_self_ *DragAction) SetDragArea(drag_area *Rect) () {
	_cgo_drag_area_ := (*C.ClutterRect)(unsafe.Pointer(drag_area))
	C._clutter_drag_action_set_drag_area((*C.ClutterDragAction)(_self_._value_), _cgo_drag_area_)
	return
}

func (_self_ *DragAction) SetDragAxis(axis C.ClutterDragAxis) () {
	C.clutter_drag_action_set_drag_axis((*C.ClutterDragAction)(_self_._value_), axis)
	return
}

func (_self_ *DragAction) SetDragHandle(handle ActorKind) () {
	_cgo_handle_ := (*C.ClutterActor)(handle.GetGObject())
	C.clutter_drag_action_set_drag_handle((*C.ClutterDragAction)(_self_._value_), _cgo_handle_)
	return
}

func (_self_ *DragAction) SetDragThreshold(x_threshold int, y_threshold int) () {
	_cgo_x_threshold_ := (C.gint)(x_threshold)
	_cgo_y_threshold_ := (C.gint)(y_threshold)
	C.clutter_drag_action_set_drag_threshold((*C.ClutterDragAction)(_self_._value_), _cgo_x_threshold_, _cgo_y_threshold_)
	return
}

func DropActionNew() (_go__return__ DropAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_drop_action_new()
	_go__return__ = ToDropAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *Effect) QueueRepaint() () {
	C.clutter_effect_queue_repaint((*C.ClutterEffect)(_self_._value_))
	return
}

func FixedLayoutNew() (_go__return__ FixedLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_fixed_layout_new()
	_go__return__ = ToFixedLayout(unsafe.Pointer(_return_))
	return
}

func FlowLayoutNew(orientation C.ClutterFlowOrientation) (_go__return__ FlowLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_flow_layout_new(orientation)
	_go__return__ = ToFlowLayout(unsafe.Pointer(_return_))
	return
}

func (_self_ *FlowLayout) GetColumnSpacing() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_flow_layout_get_column_spacing((*C.ClutterFlowLayout)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *FlowLayout) GetColumnWidth() (_go_min_width_ float64, _go_max_width_ float64) {
	var min_width C.gfloat
	var max_width C.gfloat
	C.clutter_flow_layout_get_column_width((*C.ClutterFlowLayout)(_self_._value_), &min_width, &max_width)
	_go_min_width_ = (float64)(min_width)
	_go_max_width_ = (float64)(max_width)
	return
}

func (_self_ *FlowLayout) GetHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_flow_layout_get_homogeneous((*C.ClutterFlowLayout)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *FlowLayout) GetOrientation() (_return_ C.ClutterFlowOrientation) {
	_return_ = C.clutter_flow_layout_get_orientation((*C.ClutterFlowLayout)(_self_._value_))
	return
}

func (_self_ *FlowLayout) GetRowHeight() (_go_min_height_ float64, _go_max_height_ float64) {
	var min_height C.gfloat
	var max_height C.gfloat
	C.clutter_flow_layout_get_row_height((*C.ClutterFlowLayout)(_self_._value_), &min_height, &max_height)
	_go_min_height_ = (float64)(min_height)
	_go_max_height_ = (float64)(max_height)
	return
}

func (_self_ *FlowLayout) GetRowSpacing() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_flow_layout_get_row_spacing((*C.ClutterFlowLayout)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *FlowLayout) SetColumnSpacing(spacing float64) () {
	_cgo_spacing_ := (C.gfloat)(spacing)
	C.clutter_flow_layout_set_column_spacing((*C.ClutterFlowLayout)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *FlowLayout) SetColumnWidth(min_width float64, max_width float64) () {
	_cgo_min_width_ := (C.gfloat)(min_width)
	_cgo_max_width_ := (C.gfloat)(max_width)
	C.clutter_flow_layout_set_column_width((*C.ClutterFlowLayout)(_self_._value_), _cgo_min_width_, _cgo_max_width_)
	return
}

func (_self_ *FlowLayout) SetHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.clutter_flow_layout_set_homogeneous((*C.ClutterFlowLayout)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *FlowLayout) SetOrientation(orientation C.ClutterFlowOrientation) () {
	C.clutter_flow_layout_set_orientation((*C.ClutterFlowLayout)(_self_._value_), orientation)
	return
}

func (_self_ *FlowLayout) SetRowHeight(min_height float64, max_height float64) () {
	_cgo_min_height_ := (C.gfloat)(min_height)
	_cgo_max_height_ := (C.gfloat)(max_height)
	C.clutter_flow_layout_set_row_height((*C.ClutterFlowLayout)(_self_._value_), _cgo_min_height_, _cgo_max_height_)
	return
}

func (_self_ *FlowLayout) SetRowSpacing(spacing float64) () {
	_cgo_spacing_ := (C.gfloat)(spacing)
	C.clutter_flow_layout_set_row_spacing((*C.ClutterFlowLayout)(_self_._value_), _cgo_spacing_)
	return
}

func GestureActionNew() (_go__return__ GestureAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_gesture_action_new()
	_go__return__ = ToGestureAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *GestureAction) Cancel() () {
	C.clutter_gesture_action_cancel((*C.ClutterGestureAction)(_self_._value_))
	return
}

func (_self_ *GestureAction) GetDevice(point uint) (_go__return__ InputDevice) {
	var _return_ *C.ClutterInputDevice
	_cgo_point_ := (C.guint)(point)
	_return_ = C.clutter_gesture_action_get_device((*C.ClutterGestureAction)(_self_._value_), _cgo_point_)
	_go__return__ = ToInputDevice(unsafe.Pointer(_return_))
	return
}

func (_self_ *GestureAction) GetMotionCoords(device uint) (_go_motion_x_ float64, _go_motion_y_ float64) {
	_cgo_device_ := (C.guint)(device)
	var motion_x C.gfloat
	var motion_y C.gfloat
	C.clutter_gesture_action_get_motion_coords((*C.ClutterGestureAction)(_self_._value_), _cgo_device_, &motion_x, &motion_y)
	_go_motion_x_ = (float64)(motion_x)
	_go_motion_y_ = (float64)(motion_y)
	return
}

func (_self_ *GestureAction) GetMotionDelta(device uint) (_go__return__ float64, _go_delta_x_ float64, _go_delta_y_ float64) {
	_cgo_device_ := (C.guint)(device)
	var _return_ C.gfloat
	var delta_x C.gfloat
	var delta_y C.gfloat
	_return_ = C.clutter_gesture_action_get_motion_delta((*C.ClutterGestureAction)(_self_._value_), _cgo_device_, &delta_x, &delta_y)
	_go__return__ = (float64)(_return_)
	_go_delta_x_ = (float64)(delta_x)
	_go_delta_y_ = (float64)(delta_y)
	return
}

func (_self_ *GestureAction) GetNCurrentPoints() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_gesture_action_get_n_current_points((*C.ClutterGestureAction)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GestureAction) GetNTouchPoints() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_gesture_action_get_n_touch_points((*C.ClutterGestureAction)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *GestureAction) GetPressCoords(device uint) (_go_press_x_ float64, _go_press_y_ float64) {
	_cgo_device_ := (C.guint)(device)
	var press_x C.gfloat
	var press_y C.gfloat
	C.clutter_gesture_action_get_press_coords((*C.ClutterGestureAction)(_self_._value_), _cgo_device_, &press_x, &press_y)
	_go_press_x_ = (float64)(press_x)
	_go_press_y_ = (float64)(press_y)
	return
}

func (_self_ *GestureAction) GetReleaseCoords(device uint) (_go_release_x_ float64, _go_release_y_ float64) {
	_cgo_device_ := (C.guint)(device)
	var release_x C.gfloat
	var release_y C.gfloat
	C.clutter_gesture_action_get_release_coords((*C.ClutterGestureAction)(_self_._value_), _cgo_device_, &release_x, &release_y)
	_go_release_x_ = (float64)(release_x)
	_go_release_y_ = (float64)(release_y)
	return
}

func (_self_ *GestureAction) GetSequence(point uint) (_go__return__ *EventSequence) {
	var _return_ *C.ClutterEventSequence
	_cgo_point_ := (C.guint)(point)
	_return_ = C.clutter_gesture_action_get_sequence((*C.ClutterGestureAction)(_self_._value_), _cgo_point_)
	_go__return__ = (*EventSequence)(unsafe.Pointer(_return_))
	return
}

func (_self_ *GestureAction) GetVelocity(device uint) (_go__return__ float64, _go_velocity_x_ float64, _go_velocity_y_ float64) {
	_cgo_device_ := (C.guint)(device)
	var _return_ C.gfloat
	var velocity_x C.gfloat
	var velocity_y C.gfloat
	_return_ = C.clutter_gesture_action_get_velocity((*C.ClutterGestureAction)(_self_._value_), _cgo_device_, &velocity_x, &velocity_y)
	_go__return__ = (float64)(_return_)
	_go_velocity_x_ = (float64)(velocity_x)
	_go_velocity_y_ = (float64)(velocity_y)
	return
}

func (_self_ *GestureAction) SetNTouchPoints(nb_points int) () {
	_cgo_nb_points_ := (C.gint)(nb_points)
	C.clutter_gesture_action_set_n_touch_points((*C.ClutterGestureAction)(_self_._value_), _cgo_nb_points_)
	return
}

func GridLayoutNew() (_go__return__ GridLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_grid_layout_new()
	_go__return__ = ToGridLayout(unsafe.Pointer(_return_))
	return
}

func (_self_ *GridLayout) Attach(child ActorKind, left int, top int, width int, height int) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.clutter_grid_layout_attach((*C.ClutterGridLayout)(_self_._value_), _cgo_child_, _cgo_left_, _cgo_top_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GridLayout) AttachNextTo(child ActorKind, sibling ActorKind, side C.ClutterGridPosition, width int, height int) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	C.clutter_grid_layout_attach_next_to((*C.ClutterGridLayout)(_self_._value_), _cgo_child_, _cgo_sibling_, side, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *GridLayout) GetChildAt(left int, top int) (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_cgo_left_ := (C.gint)(left)
	_cgo_top_ := (C.gint)(top)
	_return_ = C.clutter_grid_layout_get_child_at((*C.ClutterGridLayout)(_self_._value_), _cgo_left_, _cgo_top_)
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *GridLayout) GetColumnHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_grid_layout_get_column_homogeneous((*C.ClutterGridLayout)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GridLayout) GetColumnSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_grid_layout_get_column_spacing((*C.ClutterGridLayout)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GridLayout) GetOrientation() (_return_ C.ClutterOrientation) {
	_return_ = C.clutter_grid_layout_get_orientation((*C.ClutterGridLayout)(_self_._value_))
	return
}

func (_self_ *GridLayout) GetRowHomogeneous() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_grid_layout_get_row_homogeneous((*C.ClutterGridLayout)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *GridLayout) GetRowSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_grid_layout_get_row_spacing((*C.ClutterGridLayout)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *GridLayout) InsertColumn(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.clutter_grid_layout_insert_column((*C.ClutterGridLayout)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *GridLayout) InsertNextTo(sibling ActorKind, side C.ClutterGridPosition) () {
	_cgo_sibling_ := (*C.ClutterActor)(sibling.GetGObject())
	C.clutter_grid_layout_insert_next_to((*C.ClutterGridLayout)(_self_._value_), _cgo_sibling_, side)
	return
}

func (_self_ *GridLayout) InsertRow(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.clutter_grid_layout_insert_row((*C.ClutterGridLayout)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *GridLayout) SetColumnHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.clutter_grid_layout_set_column_homogeneous((*C.ClutterGridLayout)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GridLayout) SetColumnSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.clutter_grid_layout_set_column_spacing((*C.ClutterGridLayout)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *GridLayout) SetOrientation(orientation C.ClutterOrientation) () {
	C.clutter_grid_layout_set_orientation((*C.ClutterGridLayout)(_self_._value_), orientation)
	return
}

func (_self_ *GridLayout) SetRowHomogeneous(homogeneous bool) () {
	_cgo_homogeneous_ := (C.gboolean)(C.FALSE)
	if homogeneous { _cgo_homogeneous_ = (C.gboolean)(C.TRUE) }
	C.clutter_grid_layout_set_row_homogeneous((*C.ClutterGridLayout)(_self_._value_), _cgo_homogeneous_)
	return
}

func (_self_ *GridLayout) SetRowSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.clutter_grid_layout_set_row_spacing((*C.ClutterGridLayout)(_self_._value_), _cgo_spacing_)
	return
}

func ImageNew() (_go__return__ ClutterImage) {
	var _return_ *C.ClutterContent
	_return_ = C.clutter_image_new()
	_go__return__ = ToClutterImage(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterImage) SetArea(data []byte, pixel_format C.CoglPixelFormat, rect *C.cairo_rectangle_int_t, row_stride uint) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_row_stride_ := (C.guint)(row_stride)
	var _return_ C.gboolean
	_cstring_data_ := C.CString(string(data))
	defer C.free(unsafe.Pointer(_cstring_data_))
	_cgo_data_ := (*C.guint8)(unsafe.Pointer(_cstring_data_))
	_return_ = C._clutter_image_set_area((*C.ClutterImage)(_self_._value_), _cgo_data_, pixel_format, rect, _cgo_row_stride_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterImage) SetBytes(data *C.GBytes, pixel_format C.CoglPixelFormat, width uint, height uint, row_stride uint) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	_cgo_row_stride_ := (C.guint)(row_stride)
	var _return_ C.gboolean
	_return_ = C._clutter_image_set_bytes((*C.ClutterImage)(_self_._value_), data, pixel_format, _cgo_width_, _cgo_height_, _cgo_row_stride_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterImage) SetData(data []byte, pixel_format int, width uint, height uint, row_stride uint) (_go__return__ bool, _error_ unsafe.Pointer) {
  _cgo_pixel_format_ := C.CoglPixelFormat(pixel_format)
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	_cgo_row_stride_ := (C.guint)(row_stride)
	var _return_ C.gboolean
	_cstring_data_ := C.CString(string(data))
	defer C.free(unsafe.Pointer(_cstring_data_))
	_cgo_data_ := (*C.guint8)(unsafe.Pointer(_cstring_data_))
	_return_ = C._clutter_image_set_data((*C.ClutterImage)(_self_._value_), _cgo_data_, _cgo_pixel_format_, _cgo_width_, _cgo_height_, _cgo_row_stride_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) GetAssociatedDevice() (_go__return__ InputDevice) {
	var _return_ *C.ClutterInputDevice
	_return_ = C.clutter_input_device_get_associated_device((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = ToInputDevice(unsafe.Pointer(_return_))
	return
}

func (_self_ *InputDevice) GetAxis(index_ uint) (_return_ C.ClutterInputAxis) {
	_cgo_index__ := (C.guint)(index_)
	_return_ = C.clutter_input_device_get_axis((*C.ClutterInputDevice)(_self_._value_), _cgo_index__)
	return
}

func (_self_ *InputDevice) GetCoords(sequence *EventSequence) (_go__return__ bool, point *Point) {
	_cgo_sequence_ := (*C.ClutterEventSequence)(unsafe.Pointer(sequence))
	var _allocated_point_ C.ClutterPoint
	var _return_ C.gboolean
	_return_ = C.clutter_input_device_get_coords((*C.ClutterInputDevice)(_self_._value_), _cgo_sequence_, &_allocated_point_)
	point = (*Point)(unsafe.Pointer(&_allocated_point_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) GetDeviceId() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_input_device_get_device_id((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *InputDevice) GetDeviceMode() (_return_ C.ClutterInputMode) {
	_return_ = C.clutter_input_device_get_device_mode((*C.ClutterInputDevice)(_self_._value_))
	return
}

func (_self_ *InputDevice) GetDeviceName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_input_device_get_device_name((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *InputDevice) GetDeviceType() (_return_ C.ClutterInputDeviceType) {
	_return_ = C.clutter_input_device_get_device_type((*C.ClutterInputDevice)(_self_._value_))
	return
}

func (_self_ *InputDevice) GetEnabled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_input_device_get_enabled((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) GetGrabbedActor() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_input_device_get_grabbed_actor((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *InputDevice) GetHasCursor() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_input_device_get_has_cursor((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) GetKey(index_ uint) (_go__return__ bool, _go_keyval_ uint, modifiers *C.ClutterModifierType) {
	_cgo_index__ := (C.guint)(index_)
	var keyval C.guint
	var _return_ C.gboolean
	_return_ = C.clutter_input_device_get_key((*C.ClutterInputDevice)(_self_._value_), _cgo_index__, &keyval, modifiers)
	_go_keyval_ = (uint)(keyval)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) GetNAxes() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_input_device_get_n_axes((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *InputDevice) GetNKeys() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_input_device_get_n_keys((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *InputDevice) GetPointerActor() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_input_device_get_pointer_actor((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *InputDevice) GetPointerStage() (_go__return__ Stage) {
	var _return_ *C.ClutterStage
	_return_ = C.clutter_input_device_get_pointer_stage((*C.ClutterInputDevice)(_self_._value_))
	_go__return__ = ToStage(unsafe.Pointer(_return_))
	return
}

func (_self_ *InputDevice) GetSlaveDevices() (_return_ *C.GList) {
	_return_ = C.clutter_input_device_get_slave_devices((*C.ClutterInputDevice)(_self_._value_))
	return
}

func (_self_ *InputDevice) Grab(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_input_device_grab((*C.ClutterInputDevice)(_self_._value_), _cgo_actor_)
	return
}

func (_self_ *InputDevice) KeycodeToEvdev(hardware_keycode uint, evdev_keycode *C.guint) (_go__return__ bool) {
	_cgo_hardware_keycode_ := (C.guint)(hardware_keycode)
	var _return_ C.gboolean
	_return_ = C.clutter_input_device_keycode_to_evdev((*C.ClutterInputDevice)(_self_._value_), _cgo_hardware_keycode_, evdev_keycode)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *InputDevice) SequenceGetGrabbedActor(sequence *EventSequence) (_go__return__ Actor) {
	_cgo_sequence_ := (*C.ClutterEventSequence)(unsafe.Pointer(sequence))
	var _return_ *C.ClutterActor
	_return_ = C.clutter_input_device_sequence_get_grabbed_actor((*C.ClutterInputDevice)(_self_._value_), _cgo_sequence_)
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *InputDevice) SequenceGrab(sequence *EventSequence, actor ActorKind) () {
	_cgo_sequence_ := (*C.ClutterEventSequence)(unsafe.Pointer(sequence))
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_input_device_sequence_grab((*C.ClutterInputDevice)(_self_._value_), _cgo_sequence_, _cgo_actor_)
	return
}

func (_self_ *InputDevice) SequenceUngrab(sequence *EventSequence) () {
	_cgo_sequence_ := (*C.ClutterEventSequence)(unsafe.Pointer(sequence))
	C.clutter_input_device_sequence_ungrab((*C.ClutterInputDevice)(_self_._value_), _cgo_sequence_)
	return
}

func (_self_ *InputDevice) SetEnabled(enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.clutter_input_device_set_enabled((*C.ClutterInputDevice)(_self_._value_), _cgo_enabled_)
	return
}

func (_self_ *InputDevice) SetKey(index_ uint, keyval uint, modifiers C.ClutterModifierType) () {
	_cgo_index__ := (C.guint)(index_)
	_cgo_keyval_ := (C.guint)(keyval)
	C.clutter_input_device_set_key((*C.ClutterInputDevice)(_self_._value_), _cgo_index__, _cgo_keyval_, modifiers)
	return
}

func (_self_ *InputDevice) Ungrab() () {
	C.clutter_input_device_ungrab((*C.ClutterInputDevice)(_self_._value_))
	return
}

func (_self_ *InputDevice) UpdateFromEvent(event *C.ClutterEvent, update_stage bool) () {
	_cgo_update_stage_ := (C.gboolean)(C.FALSE)
	if update_stage { _cgo_update_stage_ = (C.gboolean)(C.TRUE) }
	C.clutter_input_device_update_from_event((*C.ClutterInputDevice)(_self_._value_), event, _cgo_update_stage_)
	return
}

func IntervalNewWithValues(gtype C.GType, initial *C.GValue, final *C.GValue) (_go__return__ Interval) {
	var _return_ *C.ClutterInterval
	_return_ = C._clutter_interval_new_with_values(gtype, initial, final)
	_go__return__ = ToInterval(unsafe.Pointer(_return_))
	return
}

func IntervalRegisterProgressFunc(value_type C.GType, func_ C.ClutterProgressFunc) () {
	C.clutter_interval_register_progress_func(value_type, func_)
	return
}

func (_self_ *Interval) Clone() (_go__return__ Interval) {
	var _return_ *C.ClutterInterval
	_return_ = C.clutter_interval_clone((*C.ClutterInterval)(_self_._value_))
	_go__return__ = ToInterval(unsafe.Pointer(_return_))
	return
}

func (_self_ *Interval) Compute(factor float64) (_return_ *C.GValue) {
	_cgo_factor_ := (C.gdouble)(factor)
	_return_ = C._clutter_interval_compute((*C.ClutterInterval)(_self_._value_), _cgo_factor_)
	return
}

func (_self_ *Interval) ComputeValue(factor float64) (_go__return__ bool, value *C.GValue) {
	_cgo_factor_ := (C.gdouble)(factor)
	var _return_ C.gboolean
	_return_ = C.clutter_interval_compute_value((*C.ClutterInterval)(_self_._value_), _cgo_factor_, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Interval) GetFinalValue() (value *C.GValue) {
	C.clutter_interval_get_final_value((*C.ClutterInterval)(_self_._value_), value)
	return
}

func (_self_ *Interval) GetInitialValue() (value *C.GValue) {
	C.clutter_interval_get_initial_value((*C.ClutterInterval)(_self_._value_), value)
	return
}

func (_self_ *Interval) GetValueType() (_return_ C.GType) {
	_return_ = C.clutter_interval_get_value_type((*C.ClutterInterval)(_self_._value_))
	return
}

func (_self_ *Interval) IsValid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_interval_is_valid((*C.ClutterInterval)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Interval) PeekFinalValue() (_return_ *C.GValue) {
	_return_ = C.clutter_interval_peek_final_value((*C.ClutterInterval)(_self_._value_))
	return
}

func (_self_ *Interval) PeekInitialValue() (_return_ *C.GValue) {
	_return_ = C.clutter_interval_peek_initial_value((*C.ClutterInterval)(_self_._value_))
	return
}

func (_self_ *Interval) SetFinalValue(value *C.GValue) () {
	C._clutter_interval_set_final_value((*C.ClutterInterval)(_self_._value_), value)
	return
}

func (_self_ *Interval) SetInitialValue(value *C.GValue) () {
	C._clutter_interval_set_initial_value((*C.ClutterInterval)(_self_._value_), value)
	return
}

func (_self_ *Interval) Validate(pspec *C.GParamSpec) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_interval_validate((*C.ClutterInterval)(_self_._value_), pspec)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func KeyframeTransitionNew(property_name string) (_go__return__ KeyframeTransition) {
	var _return_ *C.ClutterTransition
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.char)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._clutter_keyframe_transition_new(_cgo_property_name_)
	_go__return__ = ToKeyframeTransition(unsafe.Pointer(_return_))
	return
}

func (_self_ *KeyframeTransition) Clear() () {
	C.clutter_keyframe_transition_clear((*C.ClutterKeyframeTransition)(_self_._value_))
	return
}

func (_self_ *KeyframeTransition) GetKeyFrame(index_ uint) (key C.double, mode *C.ClutterAnimationMode, value *C.GValue) {
	_cgo_index__ := (C.guint)(index_)
	C.clutter_keyframe_transition_get_key_frame((*C.ClutterKeyframeTransition)(_self_._value_), _cgo_index__, &key, mode, value)
	return
}

func (_self_ *KeyframeTransition) GetNKeyFrames() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_keyframe_transition_get_n_key_frames((*C.ClutterKeyframeTransition)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *KeyframeTransition) SetKeyFrame(index_ uint, key C.double, mode C.ClutterAnimationMode, value *C.GValue) () {
	_cgo_index__ := (C.guint)(index_)
	C._clutter_keyframe_transition_set_key_frame((*C.ClutterKeyframeTransition)(_self_._value_), _cgo_index__, key, mode, value)
	return
}

func (_self_ *LayoutManager) Allocate(container ContainerKind, allocation *ActorBox, flags C.ClutterAllocationFlags) () {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_allocation_ := (*C.ClutterActorBox)(unsafe.Pointer(allocation))
	C._clutter_layout_manager_allocate((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_allocation_, flags)
	return
}

func (_self_ *LayoutManager) ChildGetProperty(container ContainerKind, actor ActorKind, property_name string, value *C.GValue) () {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._clutter_layout_manager_child_get_property((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_actor_, _cgo_property_name_, value)
	return
}

func (_self_ *LayoutManager) ChildSetProperty(container ContainerKind, actor ActorKind, property_name string, value *C.GValue) () {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._clutter_layout_manager_child_set_property((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_actor_, _cgo_property_name_, value)
	return
}

func (_self_ *LayoutManager) FindChildProperty(name string) (_return_ *C.GParamSpec) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_layout_manager_find_child_property((*C.ClutterLayoutManager)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *LayoutManager) GetChildMeta(container ContainerKind, actor ActorKind) (_go__return__ LayoutMeta) {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	var _return_ *C.ClutterLayoutMeta
	_return_ = C.clutter_layout_manager_get_child_meta((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_actor_)
	_go__return__ = ToLayoutMeta(unsafe.Pointer(_return_))
	return
}

func (_self_ *LayoutManager) GetPreferredHeight(container ContainerKind, for_width float64) (_go_min_height_p_ float64, _go_nat_height_p_ float64) {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_for_width_ := (C.gfloat)(for_width)
	var min_height_p C.gfloat
	var nat_height_p C.gfloat
	C.clutter_layout_manager_get_preferred_height((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_for_width_, &min_height_p, &nat_height_p)
	_go_min_height_p_ = (float64)(min_height_p)
	_go_nat_height_p_ = (float64)(nat_height_p)
	return
}

func (_self_ *LayoutManager) GetPreferredWidth(container ContainerKind, for_height float64) (_go_min_width_p_ float64, _go_nat_width_p_ float64) {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	_cgo_for_height_ := (C.gfloat)(for_height)
	var min_width_p C.gfloat
	var nat_width_p C.gfloat
	C.clutter_layout_manager_get_preferred_width((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_, _cgo_for_height_, &min_width_p, &nat_width_p)
	_go_min_width_p_ = (float64)(min_width_p)
	_go_nat_width_p_ = (float64)(nat_width_p)
	return
}

func (_self_ *LayoutManager) LayoutChanged() () {
	C.clutter_layout_manager_layout_changed((*C.ClutterLayoutManager)(_self_._value_))
	return
}

func (_self_ *LayoutManager) ListChildProperties() (_return_ unsafe.Pointer, _go_n_pspecs_ uint) {
	var n_pspecs C.guint
	_return_ = C._clutter_layout_manager_list_child_properties((*C.ClutterLayoutManager)(_self_._value_), &n_pspecs)
	_go_n_pspecs_ = (uint)(n_pspecs)
	return
}

func (_self_ *LayoutManager) SetContainer(container ContainerKind) () {
	_cgo_container_ := (*C.ClutterContainer)(container.GetGObject())
	C.clutter_layout_manager_set_container((*C.ClutterLayoutManager)(_self_._value_), _cgo_container_)
	return
}

func (_self_ *LayoutMeta) GetManager() (_go__return__ LayoutManager) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_layout_meta_get_manager((*C.ClutterLayoutMeta)(_self_._value_))
	_go__return__ = ToLayoutManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *Model) FilterIter(iter ModelIterKind) (_go__return__ bool) {
	_cgo_iter_ := (*C.ClutterModelIter)(iter.GetGObject())
	var _return_ C.gboolean
	_return_ = C.clutter_model_filter_iter((*C.ClutterModel)(_self_._value_), _cgo_iter_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Model) FilterRow(row uint) (_go__return__ bool) {
	_cgo_row_ := (C.guint)(row)
	var _return_ C.gboolean
	_return_ = C.clutter_model_filter_row((*C.ClutterModel)(_self_._value_), _cgo_row_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Model) Foreach(func_ C.ClutterModelForeachFunc, user_data C.gpointer) () {
	C.clutter_model_foreach((*C.ClutterModel)(_self_._value_), func_, user_data)
	return
}

func (_self_ *Model) GetColumnName(column uint) (_go__return__ string) {
	_cgo_column_ := (C.guint)(column)
	var _return_ *C.gchar
	_return_ = C._clutter_model_get_column_name((*C.ClutterModel)(_self_._value_), _cgo_column_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Model) GetColumnType(column uint) (_return_ C.GType) {
	_cgo_column_ := (C.guint)(column)
	_return_ = C.clutter_model_get_column_type((*C.ClutterModel)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *Model) GetFilterSet() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_model_get_filter_set((*C.ClutterModel)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Model) GetFirstIter() (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_return_ = C.clutter_model_get_first_iter((*C.ClutterModel)(_self_._value_))
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *Model) GetIterAtRow(row uint) (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_cgo_row_ := (C.guint)(row)
	_return_ = C.clutter_model_get_iter_at_row((*C.ClutterModel)(_self_._value_), _cgo_row_)
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *Model) GetLastIter() (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_return_ = C.clutter_model_get_last_iter((*C.ClutterModel)(_self_._value_))
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *Model) GetNColumns() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_model_get_n_columns((*C.ClutterModel)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Model) GetNRows() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_model_get_n_rows((*C.ClutterModel)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Model) GetSortingColumn() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_model_get_sorting_column((*C.ClutterModel)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Model) InsertValue(row uint, column uint, value *C.GValue) () {
	_cgo_row_ := (C.guint)(row)
	_cgo_column_ := (C.guint)(column)
	C._clutter_model_insert_value((*C.ClutterModel)(_self_._value_), _cgo_row_, _cgo_column_, value)
	return
}

func (_self_ *Model) Remove(row uint) () {
	_cgo_row_ := (C.guint)(row)
	C.clutter_model_remove((*C.ClutterModel)(_self_._value_), _cgo_row_)
	return
}

func (_self_ *Model) Resort() () {
	C.clutter_model_resort((*C.ClutterModel)(_self_._value_))
	return
}

func (_self_ *Model) SetFilter(func_ C.ClutterModelFilterFunc, user_data C.gpointer, notify C.GDestroyNotify) () {
	C.clutter_model_set_filter((*C.ClutterModel)(_self_._value_), func_, user_data, notify)
	return
}

func (_self_ *Model) SetSort(column int, func_ C.ClutterModelSortFunc, user_data C.gpointer, notify C.GDestroyNotify) () {
	_cgo_column_ := (C.gint)(column)
	C.clutter_model_set_sort((*C.ClutterModel)(_self_._value_), _cgo_column_, func_, user_data, notify)
	return
}

func (_self_ *Model) SetSortingColumn(column int) () {
	_cgo_column_ := (C.gint)(column)
	C.clutter_model_set_sorting_column((*C.ClutterModel)(_self_._value_), _cgo_column_)
	return
}

func (_self_ *ModelIter) Copy() (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_return_ = C.clutter_model_iter_copy((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *ModelIter) GetModel() (_go__return__ Model) {
	var _return_ *C.ClutterModel
	_return_ = C.clutter_model_iter_get_model((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = ToModel(unsafe.Pointer(_return_))
	return
}

func (_self_ *ModelIter) GetRow() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_model_iter_get_row((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ModelIter) GetValue(column uint) (value *C.GValue) {
	_cgo_column_ := (C.guint)(column)
	C.clutter_model_iter_get_value((*C.ClutterModelIter)(_self_._value_), _cgo_column_, value)
	return
}

func (_self_ *ModelIter) IsFirst() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_model_iter_is_first((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ModelIter) IsLast() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_model_iter_is_last((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ModelIter) Next() (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_return_ = C.clutter_model_iter_next((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *ModelIter) Prev() (_go__return__ ModelIter) {
	var _return_ *C.ClutterModelIter
	_return_ = C.clutter_model_iter_prev((*C.ClutterModelIter)(_self_._value_))
	_go__return__ = ToModelIter(unsafe.Pointer(_return_))
	return
}

func (_self_ *ModelIter) SetValue(column uint, value *C.GValue) () {
	_cgo_column_ := (C.guint)(column)
	C._clutter_model_iter_set_value((*C.ClutterModelIter)(_self_._value_), _cgo_column_, value)
	return
}

func (_self_ *OffscreenEffect) CreateTexture(width float64, height float64) (_return_ C.CoglHandle) {
	_cgo_width_ := (C.gfloat)(width)
	_cgo_height_ := (C.gfloat)(height)
	_return_ = C.clutter_offscreen_effect_create_texture((*C.ClutterOffscreenEffect)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *OffscreenEffect) GetTarget() (_return_ *C.CoglMaterial) {
	_return_ = C.clutter_offscreen_effect_get_target((*C.ClutterOffscreenEffect)(_self_._value_))
	return
}

func (_self_ *OffscreenEffect) GetTargetSize() (_go__return__ bool, _go_width_ float64, _go_height_ float64) {
	var width C.gfloat
	var height C.gfloat
	var _return_ C.gboolean
	_return_ = C.clutter_offscreen_effect_get_target_size((*C.ClutterOffscreenEffect)(_self_._value_), &width, &height)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *OffscreenEffect) GetTexture() (_return_ C.CoglHandle) {
	_return_ = C.clutter_offscreen_effect_get_texture((*C.ClutterOffscreenEffect)(_self_._value_))
	return
}

func (_self_ *OffscreenEffect) PaintTarget() () {
	C.clutter_offscreen_effect_paint_target((*C.ClutterOffscreenEffect)(_self_._value_))
	return
}

func PageTurnEffectNew(period float64, angle float64, radius float64) (_go__return__ PageTurnEffect) {
	var _return_ *C.ClutterEffect
	_cgo_period_ := (C.gdouble)(period)
	_cgo_angle_ := (C.gdouble)(angle)
	_cgo_radius_ := (C.gfloat)(radius)
	_return_ = C.clutter_page_turn_effect_new(_cgo_period_, _cgo_angle_, _cgo_radius_)
	_go__return__ = ToPageTurnEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *PageTurnEffect) GetAngle() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_page_turn_effect_get_angle((*C.ClutterPageTurnEffect)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageTurnEffect) GetPeriod() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_page_turn_effect_get_period((*C.ClutterPageTurnEffect)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageTurnEffect) GetRadius() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_page_turn_effect_get_radius((*C.ClutterPageTurnEffect)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PageTurnEffect) SetAngle(angle float64) () {
	_cgo_angle_ := (C.gdouble)(angle)
	C.clutter_page_turn_effect_set_angle((*C.ClutterPageTurnEffect)(_self_._value_), _cgo_angle_)
	return
}

func (_self_ *PageTurnEffect) SetPeriod(period float64) () {
	_cgo_period_ := (C.gdouble)(period)
	C.clutter_page_turn_effect_set_period((*C.ClutterPageTurnEffect)(_self_._value_), _cgo_period_)
	return
}

func (_self_ *PageTurnEffect) SetRadius(radius float64) () {
	_cgo_radius_ := (C.gfloat)(radius)
	C.clutter_page_turn_effect_set_radius((*C.ClutterPageTurnEffect)(_self_._value_), _cgo_radius_)
	return
}

func (_self_ *PaintNode) AddChild(child PaintNodeKind) () {
	_cgo_child_ := (*C.ClutterPaintNode)(child.GetGObject())
	C.clutter_paint_node_add_child((*C.ClutterPaintNode)(_self_._value_), _cgo_child_)
	return
}

func (_self_ *PaintNode) AddRectangle(rect *ActorBox) () {
	_cgo_rect_ := (*C.ClutterActorBox)(unsafe.Pointer(rect))
	C._clutter_paint_node_add_rectangle((*C.ClutterPaintNode)(_self_._value_), _cgo_rect_)
	return
}

func (_self_ *PaintNode) AddTextureRectangle(rect *ActorBox, x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float) () {
	_cgo_rect_ := (*C.ClutterActorBox)(unsafe.Pointer(rect))
	C._clutter_paint_node_add_texture_rectangle((*C.ClutterPaintNode)(_self_._value_), _cgo_rect_, x_1, y_1, x_2, y_2)
	return
}

func (_self_ *PaintNode) Ref() (_go__return__ PaintNode) {
	var _return_ *C.ClutterPaintNode
	_return_ = C.clutter_paint_node_ref((*C.ClutterPaintNode)(_self_._value_))
	_go__return__ = ToPaintNode(unsafe.Pointer(_return_))
	return
}

func (_self_ *PaintNode) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_paint_node_set_name((*C.ClutterPaintNode)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *PaintNode) Unref() () {
	C.clutter_paint_node_unref((*C.ClutterPaintNode)(_self_._value_))
	return
}

func PanActionNew() (_go__return__ PanAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_pan_action_new()
	_go__return__ = ToPanAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *PanAction) GetAccelerationFactor() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_pan_action_get_acceleration_factor((*C.ClutterPanAction)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PanAction) GetDeceleration() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_pan_action_get_deceleration((*C.ClutterPanAction)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PanAction) GetInterpolate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_pan_action_get_interpolate((*C.ClutterPanAction)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *PanAction) GetInterpolatedCoords() (_go_interpolated_x_ float64, _go_interpolated_y_ float64) {
	var interpolated_x C.gfloat
	var interpolated_y C.gfloat
	C.clutter_pan_action_get_interpolated_coords((*C.ClutterPanAction)(_self_._value_), &interpolated_x, &interpolated_y)
	_go_interpolated_x_ = (float64)(interpolated_x)
	_go_interpolated_y_ = (float64)(interpolated_y)
	return
}

func (_self_ *PanAction) GetInterpolatedDelta() (_go_delta_x_ float64, _go_delta_y_ float64) {
	var delta_x C.gfloat
	var delta_y C.gfloat
	C.clutter_pan_action_get_interpolated_delta((*C.ClutterPanAction)(_self_._value_), &delta_x, &delta_y)
	_go_delta_x_ = (float64)(delta_x)
	_go_delta_y_ = (float64)(delta_y)
	return
}

func (_self_ *PanAction) GetPanAxis() (_return_ C.ClutterPanAxis) {
	_return_ = C.clutter_pan_action_get_pan_axis((*C.ClutterPanAction)(_self_._value_))
	return
}

func (_self_ *PanAction) SetAccelerationFactor(factor float64) () {
	_cgo_factor_ := (C.gdouble)(factor)
	C.clutter_pan_action_set_acceleration_factor((*C.ClutterPanAction)(_self_._value_), _cgo_factor_)
	return
}

func (_self_ *PanAction) SetDeceleration(rate float64) () {
	_cgo_rate_ := (C.gdouble)(rate)
	C.clutter_pan_action_set_deceleration((*C.ClutterPanAction)(_self_._value_), _cgo_rate_)
	return
}

func (_self_ *PanAction) SetInterpolate(should_interpolate bool) () {
	_cgo_should_interpolate_ := (C.gboolean)(C.FALSE)
	if should_interpolate { _cgo_should_interpolate_ = (C.gboolean)(C.TRUE) }
	C.clutter_pan_action_set_interpolate((*C.ClutterPanAction)(_self_._value_), _cgo_should_interpolate_)
	return
}

func (_self_ *PanAction) SetPanAxis(axis C.ClutterPanAxis) () {
	C.clutter_pan_action_set_pan_axis((*C.ClutterPanAction)(_self_._value_), axis)
	return
}

func PathNew() (_go__return__ ClutterPath) {
	var _return_ *C.ClutterPath
	_return_ = C.clutter_path_new()
	_go__return__ = ToClutterPath(unsafe.Pointer(_return_))
	return
}

func PathNewWithDescription(desc string) (_go__return__ ClutterPath) {
	var _return_ *C.ClutterPath
	_cstring_desc_ := C.CString(desc)
	_cgo_desc_ := (*C.gchar)(unsafe.Pointer(_cstring_desc_))
	defer C.free(unsafe.Pointer(_cstring_desc_))
	_return_ = C._clutter_path_new_with_description(_cgo_desc_)
	_go__return__ = ToClutterPath(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterPath) AddCairoPath(cpath *C.cairo_path_t) () {
	C._clutter_path_add_cairo_path((*C.ClutterPath)(_self_._value_), cpath)
	return
}

func (_self_ *ClutterPath) AddClose() () {
	C.clutter_path_add_close((*C.ClutterPath)(_self_._value_))
	return
}

func (_self_ *ClutterPath) AddCurveTo(x_1 int, y_1 int, x_2 int, y_2 int, x_3 int, y_3 int) () {
	_cgo_x_1_ := (C.gint)(x_1)
	_cgo_y_1_ := (C.gint)(y_1)
	_cgo_x_2_ := (C.gint)(x_2)
	_cgo_y_2_ := (C.gint)(y_2)
	_cgo_x_3_ := (C.gint)(x_3)
	_cgo_y_3_ := (C.gint)(y_3)
	C.clutter_path_add_curve_to((*C.ClutterPath)(_self_._value_), _cgo_x_1_, _cgo_y_1_, _cgo_x_2_, _cgo_y_2_, _cgo_x_3_, _cgo_y_3_)
	return
}

func (_self_ *ClutterPath) AddLineTo(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.clutter_path_add_line_to((*C.ClutterPath)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *ClutterPath) AddMoveTo(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.clutter_path_add_move_to((*C.ClutterPath)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *ClutterPath) AddNode(node *PathNode) () {
	_cgo_node_ := (*C.ClutterPathNode)(unsafe.Pointer(node))
	C._clutter_path_add_node((*C.ClutterPath)(_self_._value_), _cgo_node_)
	return
}

func (_self_ *ClutterPath) AddRelCurveTo(x_1 int, y_1 int, x_2 int, y_2 int, x_3 int, y_3 int) () {
	_cgo_x_1_ := (C.gint)(x_1)
	_cgo_y_1_ := (C.gint)(y_1)
	_cgo_x_2_ := (C.gint)(x_2)
	_cgo_y_2_ := (C.gint)(y_2)
	_cgo_x_3_ := (C.gint)(x_3)
	_cgo_y_3_ := (C.gint)(y_3)
	C.clutter_path_add_rel_curve_to((*C.ClutterPath)(_self_._value_), _cgo_x_1_, _cgo_y_1_, _cgo_x_2_, _cgo_y_2_, _cgo_x_3_, _cgo_y_3_)
	return
}

func (_self_ *ClutterPath) AddRelLineTo(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.clutter_path_add_rel_line_to((*C.ClutterPath)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *ClutterPath) AddRelMoveTo(x int, y int) () {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	C.clutter_path_add_rel_move_to((*C.ClutterPath)(_self_._value_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *ClutterPath) AddString(str string) (_go__return__ bool) {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._clutter_path_add_string((*C.ClutterPath)(_self_._value_), _cgo_str_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterPath) Clear() () {
	C.clutter_path_clear((*C.ClutterPath)(_self_._value_))
	return
}

func (_self_ *ClutterPath) Foreach(callback C.ClutterPathCallback, user_data C.gpointer) () {
	C.clutter_path_foreach((*C.ClutterPath)(_self_._value_), callback, user_data)
	return
}

func (_self_ *ClutterPath) GetDescription() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.clutter_path_get_description((*C.ClutterPath)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ClutterPath) GetLength() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_path_get_length((*C.ClutterPath)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClutterPath) GetNNodes() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_path_get_n_nodes((*C.ClutterPath)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClutterPath) GetNode(index_ uint) (node *PathNode) {
	var _allocated_node_ C.ClutterPathNode
	_cgo_index__ := (C.guint)(index_)
	C.clutter_path_get_node((*C.ClutterPath)(_self_._value_), _cgo_index__, &_allocated_node_)
	node = (*PathNode)(unsafe.Pointer(&_allocated_node_))
	return
}

func (_self_ *ClutterPath) GetNodes() (_return_ *C.GSList) {
	_return_ = C.clutter_path_get_nodes((*C.ClutterPath)(_self_._value_))
	return
}

func (_self_ *ClutterPath) GetPosition(progress float64) (_go__return__ uint, position *Knot) {
	var _allocated_position_ C.ClutterKnot
	_cgo_progress_ := (C.gdouble)(progress)
	var _return_ C.guint
	_return_ = C.clutter_path_get_position((*C.ClutterPath)(_self_._value_), _cgo_progress_, &_allocated_position_)
	position = (*Knot)(unsafe.Pointer(&_allocated_position_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClutterPath) InsertNode(index_ int, node *PathNode) () {
	_cgo_node_ := (*C.ClutterPathNode)(unsafe.Pointer(node))
	_cgo_index__ := (C.gint)(index_)
	C._clutter_path_insert_node((*C.ClutterPath)(_self_._value_), _cgo_index__, _cgo_node_)
	return
}

func (_self_ *ClutterPath) RemoveNode(index_ uint) () {
	_cgo_index__ := (C.guint)(index_)
	C.clutter_path_remove_node((*C.ClutterPath)(_self_._value_), _cgo_index__)
	return
}

func (_self_ *ClutterPath) ReplaceNode(index_ uint, node *PathNode) () {
	_cgo_node_ := (*C.ClutterPathNode)(unsafe.Pointer(node))
	_cgo_index__ := (C.guint)(index_)
	C._clutter_path_replace_node((*C.ClutterPath)(_self_._value_), _cgo_index__, _cgo_node_)
	return
}

func (_self_ *ClutterPath) SetDescription(str string) (_go__return__ bool) {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._clutter_path_set_description((*C.ClutterPath)(_self_._value_), _cgo_str_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterPath) ToCairoPath(cr *C.cairo_t) () {
	C.clutter_path_to_cairo_path((*C.ClutterPath)(_self_._value_), cr)
	return
}

func PathConstraintNew(path ClutterPathKind, offset float64) (_go__return__ PathConstraint) {
	_cgo_path_ := (*C.ClutterPath)(path.GetGObject())
	var _return_ *C.ClutterConstraint
	_cgo_offset_ := (C.gfloat)(offset)
	_return_ = C.clutter_path_constraint_new(_cgo_path_, _cgo_offset_)
	_go__return__ = ToPathConstraint(unsafe.Pointer(_return_))
	return
}

func (_self_ *PathConstraint) GetOffset() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_path_constraint_get_offset((*C.ClutterPathConstraint)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PathConstraint) GetPath() (_go__return__ ClutterPath) {
	var _return_ *C.ClutterPath
	_return_ = C.clutter_path_constraint_get_path((*C.ClutterPathConstraint)(_self_._value_))
	_go__return__ = ToClutterPath(unsafe.Pointer(_return_))
	return
}

func (_self_ *PathConstraint) SetOffset(offset float64) () {
	_cgo_offset_ := (C.gfloat)(offset)
	C.clutter_path_constraint_set_offset((*C.ClutterPathConstraint)(_self_._value_), _cgo_offset_)
	return
}

func (_self_ *PathConstraint) SetPath(path ClutterPathKind) () {
	_cgo_path_ := (*C.ClutterPath)(path.GetGObject())
	C.clutter_path_constraint_set_path((*C.ClutterPathConstraint)(_self_._value_), _cgo_path_)
	return
}

func PropertyTransitionNew(property_name string) (_go__return__ PropertyTransition) {
	var _return_ *C.ClutterTransition
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.char)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._clutter_property_transition_new(_cgo_property_name_)
	_go__return__ = ToPropertyTransition(unsafe.Pointer(_return_))
	return
}

func (_self_ *PropertyTransition) GetPropertyName() (_go__return__ string) {
	var _return_ *C.char
	_return_ = C._clutter_property_transition_get_property_name((*C.ClutterPropertyTransition)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *PropertyTransition) SetPropertyName(property_name string) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.char)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._clutter_property_transition_set_property_name((*C.ClutterPropertyTransition)(_self_._value_), _cgo_property_name_)
	return
}

func RotateActionNew() (_go__return__ RotateAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_rotate_action_new()
	_go__return__ = ToRotateAction(unsafe.Pointer(_return_))
	return
}

func ScriptNew() (_go__return__ Script) {
	var _return_ *C.ClutterScript
	_return_ = C.clutter_script_new()
	_go__return__ = ToScript(unsafe.Pointer(_return_))
	return
}

func (_self_ *Script) ConnectSignals(user_data C.gpointer) () {
	C.clutter_script_connect_signals((*C.ClutterScript)(_self_._value_), user_data)
	return
}

func (_self_ *Script) ConnectSignalsFull(func_ C.ClutterScriptConnectFunc, user_data C.gpointer) () {
	C.clutter_script_connect_signals_full((*C.ClutterScript)(_self_._value_), func_, user_data)
	return
}

func (_self_ *Script) EnsureObjects() () {
	C.clutter_script_ensure_objects((*C.ClutterScript)(_self_._value_))
	return
}

func (_self_ *Script) GetObject(name string) (_return_ *C.GObject) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._clutter_script_get_object((*C.ClutterScript)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *Script) GetTranslationDomain() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_script_get_translation_domain((*C.ClutterScript)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Script) GetTypeFromName(type_name string) (_return_ C.GType) {
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._clutter_script_get_type_from_name((*C.ClutterScript)(_self_._value_), _cgo_type_name_)
	return
}

func (_self_ *Script) ListObjects() (_return_ *C.GList) {
	_return_ = C.clutter_script_list_objects((*C.ClutterScript)(_self_._value_))
	return
}

func (_self_ *Script) LoadFromData(data string, length int64) (_go__return__ uint, _error_ unsafe.Pointer) {
	_cgo_length_ := (C.gssize)(length)
	var _return_ C.guint
	_cstring_data_ := C.CString(data)
	_cgo_data_ := (*C.gchar)(unsafe.Pointer(_cstring_data_))
	defer C.free(unsafe.Pointer(_cstring_data_))
	_return_ = C._clutter_script_load_from_data((*C.ClutterScript)(_self_._value_), _cgo_data_, _cgo_length_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Script) LoadFromFile(filename string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._clutter_script_load_from_file((*C.ClutterScript)(_self_._value_), _cgo_filename_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Script) LoadFromResource(resource_path string) (_go__return__ uint, _error_ unsafe.Pointer) {
	var _return_ C.guint
	_cstring_resource_path_ := C.CString(resource_path)
	_cgo_resource_path_ := (*C.gchar)(unsafe.Pointer(_cstring_resource_path_))
	defer C.free(unsafe.Pointer(_cstring_resource_path_))
	_return_ = C._clutter_script_load_from_resource((*C.ClutterScript)(_self_._value_), _cgo_resource_path_, _error_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Script) LookupFilename(filename string) (_go__return__ string) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.gchar)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ *C.gchar
	_return_ = C._clutter_script_lookup_filename((*C.ClutterScript)(_self_._value_), _cgo_filename_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Script) SetTranslationDomain(domain string) () {
	_cstring_domain_ := C.CString(domain)
	_cgo_domain_ := (*C.gchar)(unsafe.Pointer(_cstring_domain_))
	defer C.free(unsafe.Pointer(_cstring_domain_))
	C._clutter_script_set_translation_domain((*C.ClutterScript)(_self_._value_), _cgo_domain_)
	return
}

func (_self_ *Script) UnmergeObjects(merge_id uint) () {
	_cgo_merge_id_ := (C.guint)(merge_id)
	C.clutter_script_unmerge_objects((*C.ClutterScript)(_self_._value_), _cgo_merge_id_)
	return
}

func ScrollActorNew() (_go__return__ ScrollActor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_scroll_actor_new()
	_go__return__ = ToScrollActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *ScrollActor) GetScrollMode() (_return_ C.ClutterScrollMode) {
	_return_ = C.clutter_scroll_actor_get_scroll_mode((*C.ClutterScrollActor)(_self_._value_))
	return
}

func (_self_ *ScrollActor) ScrollToPoint(point *Point) () {
	_cgo_point_ := (*C.ClutterPoint)(unsafe.Pointer(point))
	C._clutter_scroll_actor_scroll_to_point((*C.ClutterScrollActor)(_self_._value_), _cgo_point_)
	return
}

func (_self_ *ScrollActor) ScrollToRect(rect *Rect) () {
	_cgo_rect_ := (*C.ClutterRect)(unsafe.Pointer(rect))
	C._clutter_scroll_actor_scroll_to_rect((*C.ClutterScrollActor)(_self_._value_), _cgo_rect_)
	return
}

func (_self_ *ScrollActor) SetScrollMode(mode C.ClutterScrollMode) () {
	C.clutter_scroll_actor_set_scroll_mode((*C.ClutterScrollActor)(_self_._value_), mode)
	return
}

func SettingsGetDefault() (_go__return__ Settings) {
	var _return_ *C.ClutterSettings
	_return_ = C.clutter_settings_get_default()
	_go__return__ = ToSettings(unsafe.Pointer(_return_))
	return
}

func ShaderEffectNew(shader_type C.ClutterShaderType) (_go__return__ ShaderEffect) {
	var _return_ *C.ClutterEffect
	_return_ = C.clutter_shader_effect_new(shader_type)
	_go__return__ = ToShaderEffect(unsafe.Pointer(_return_))
	return
}

func (_self_ *ShaderEffect) GetProgram() (_return_ C.CoglHandle) {
	_return_ = C.clutter_shader_effect_get_program((*C.ClutterShaderEffect)(_self_._value_))
	return
}

func (_self_ *ShaderEffect) GetShader() (_return_ C.CoglHandle) {
	_return_ = C.clutter_shader_effect_get_shader((*C.ClutterShaderEffect)(_self_._value_))
	return
}

func (_self_ *ShaderEffect) SetShaderSource(source string) (_go__return__ bool) {
	_cstring_source_ := C.CString(source)
	_cgo_source_ := (*C.gchar)(unsafe.Pointer(_cstring_source_))
	defer C.free(unsafe.Pointer(_cstring_source_))
	var _return_ C.gboolean
	_return_ = C._clutter_shader_effect_set_shader_source((*C.ClutterShaderEffect)(_self_._value_), _cgo_source_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ShaderEffect) SetUniformValue(name string, value *C.GValue) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_shader_effect_set_uniform_value((*C.ClutterShaderEffect)(_self_._value_), _cgo_name_, value)
	return
}

func SnapConstraintNew(source ActorKind, from_edge C.ClutterSnapEdge, to_edge C.ClutterSnapEdge, offset float64) (_go__return__ SnapConstraint) {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	var _return_ *C.ClutterConstraint
	_cgo_offset_ := (C.gfloat)(offset)
	_return_ = C.clutter_snap_constraint_new(_cgo_source_, from_edge, to_edge, _cgo_offset_)
	_go__return__ = ToSnapConstraint(unsafe.Pointer(_return_))
	return
}

func (_self_ *SnapConstraint) GetEdges() (from_edge *C.ClutterSnapEdge, to_edge *C.ClutterSnapEdge) {
	C.clutter_snap_constraint_get_edges((*C.ClutterSnapConstraint)(_self_._value_), from_edge, to_edge)
	return
}

func (_self_ *SnapConstraint) GetOffset() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_snap_constraint_get_offset((*C.ClutterSnapConstraint)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *SnapConstraint) GetSource() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_snap_constraint_get_source((*C.ClutterSnapConstraint)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *SnapConstraint) SetEdges(from_edge C.ClutterSnapEdge, to_edge C.ClutterSnapEdge) () {
	C.clutter_snap_constraint_set_edges((*C.ClutterSnapConstraint)(_self_._value_), from_edge, to_edge)
	return
}

func (_self_ *SnapConstraint) SetOffset(offset float64) () {
	_cgo_offset_ := (C.gfloat)(offset)
	C.clutter_snap_constraint_set_offset((*C.ClutterSnapConstraint)(_self_._value_), _cgo_offset_)
	return
}

func (_self_ *SnapConstraint) SetSource(source ActorKind) () {
	_cgo_source_ := (*C.ClutterActor)(source.GetGObject())
	C.clutter_snap_constraint_set_source((*C.ClutterSnapConstraint)(_self_._value_), _cgo_source_)
	return
}

func StageNew() (_go__return__ Stage) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_stage_new()
	_go__return__ = ToStage(unsafe.Pointer(_return_))
	return
}

func (_self_ *Stage) EnsureCurrent() () {
	C.clutter_stage_ensure_current((*C.ClutterStage)(_self_._value_))
	return
}

func (_self_ *Stage) EnsureRedraw() () {
	C.clutter_stage_ensure_redraw((*C.ClutterStage)(_self_._value_))
	return
}

func (_self_ *Stage) EnsureViewport() () {
	C.clutter_stage_ensure_viewport((*C.ClutterStage)(_self_._value_))
	return
}

func (_self_ *Stage) Event(event *C.ClutterEvent) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_event((*C.ClutterStage)(_self_._value_), event)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetAcceptFocus() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_accept_focus((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetActorAtPos(pick_mode C.ClutterPickMode, x int, y int) (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_return_ = C.clutter_stage_get_actor_at_pos((*C.ClutterStage)(_self_._value_), pick_mode, _cgo_x_, _cgo_y_)
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Stage) GetFullscreen() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_fullscreen((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetKeyFocus() (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_stage_get_key_focus((*C.ClutterStage)(_self_._value_))
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Stage) GetMinimumSize() (_go_width_ uint, _go_height_ uint) {
	var width C.guint
	var height C.guint
	C.clutter_stage_get_minimum_size((*C.ClutterStage)(_self_._value_), &width, &height)
	_go_width_ = (uint)(width)
	_go_height_ = (uint)(height)
	return
}

func (_self_ *Stage) GetMotionEventsEnabled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_motion_events_enabled((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetNoClearHint() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_no_clear_hint((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetPerspective() (perspective *Perspective) {
	var _allocated_perspective_ C.ClutterPerspective
	C.clutter_stage_get_perspective((*C.ClutterStage)(_self_._value_), &_allocated_perspective_)
	perspective = (*Perspective)(unsafe.Pointer(&_allocated_perspective_))
	return
}

func (_self_ *Stage) GetRedrawClipBounds() (clip *C.cairo_rectangle_int_t) {
	C.clutter_stage_get_redraw_clip_bounds((*C.ClutterStage)(_self_._value_), clip)
	return
}

func (_self_ *Stage) GetThrottleMotionEvents() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_throttle_motion_events((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetTitle() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_stage_get_title((*C.ClutterStage)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Stage) GetUseAlpha() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_use_alpha((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) GetUserResizable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_stage_get_user_resizable((*C.ClutterStage)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Stage) HideCursor() () {
	C.clutter_stage_hide_cursor((*C.ClutterStage)(_self_._value_))
	return
}

func (_self_ *Stage) ReadPixels(x int, y int, width int, height int) (_go__return__ []byte) {
	_cgo_x_ := (C.gint)(x)
	_cgo_y_ := (C.gint)(y)
	_cgo_width_ := (C.gint)(width)
	_cgo_height_ := (C.gint)(height)
	var _return_ *C.guchar
	_return_ = C.clutter_stage_read_pixels((*C.ClutterStage)(_self_._value_), _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	_go__return__ = C.GoBytes(unsafe.Pointer(_return_), C.int(C.strlen((*C.char)(unsafe.Pointer(_return_)))))
	return
}

func (_self_ *Stage) SetAcceptFocus(accept_focus bool) () {
	_cgo_accept_focus_ := (C.gboolean)(C.FALSE)
	if accept_focus { _cgo_accept_focus_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_accept_focus((*C.ClutterStage)(_self_._value_), _cgo_accept_focus_)
	return
}

func (_self_ *Stage) SetFullscreen(fullscreen bool) () {
	_cgo_fullscreen_ := (C.gboolean)(C.FALSE)
	if fullscreen { _cgo_fullscreen_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_fullscreen((*C.ClutterStage)(_self_._value_), _cgo_fullscreen_)
	return
}

func (_self_ *Stage) SetKeyFocus(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_stage_set_key_focus((*C.ClutterStage)(_self_._value_), _cgo_actor_)
	return
}

func (_self_ *Stage) SetMinimumSize(width uint, height uint) () {
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	C.clutter_stage_set_minimum_size((*C.ClutterStage)(_self_._value_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *Stage) SetMotionEventsEnabled(enabled bool) () {
	_cgo_enabled_ := (C.gboolean)(C.FALSE)
	if enabled { _cgo_enabled_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_motion_events_enabled((*C.ClutterStage)(_self_._value_), _cgo_enabled_)
	return
}

func (_self_ *Stage) SetNoClearHint(no_clear bool) () {
	_cgo_no_clear_ := (C.gboolean)(C.FALSE)
	if no_clear { _cgo_no_clear_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_no_clear_hint((*C.ClutterStage)(_self_._value_), _cgo_no_clear_)
	return
}

func (_self_ *Stage) SetPerspective(perspective *Perspective) () {
	_cgo_perspective_ := (*C.ClutterPerspective)(unsafe.Pointer(perspective))
	C.clutter_stage_set_perspective((*C.ClutterStage)(_self_._value_), _cgo_perspective_)
	return
}

func (_self_ *Stage) SetThrottleMotionEvents(throttle bool) () {
	_cgo_throttle_ := (C.gboolean)(C.FALSE)
	if throttle { _cgo_throttle_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_throttle_motion_events((*C.ClutterStage)(_self_._value_), _cgo_throttle_)
	return
}

func (_self_ *Stage) SetTitle(title string) () {
	_cstring_title_ := C.CString(title)
	_cgo_title_ := (*C.gchar)(unsafe.Pointer(_cstring_title_))
	defer C.free(unsafe.Pointer(_cstring_title_))
	C._clutter_stage_set_title((*C.ClutterStage)(_self_._value_), _cgo_title_)
	return
}

func (_self_ *Stage) SetUseAlpha(use_alpha bool) () {
	_cgo_use_alpha_ := (C.gboolean)(C.FALSE)
	if use_alpha { _cgo_use_alpha_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_use_alpha((*C.ClutterStage)(_self_._value_), _cgo_use_alpha_)
	return
}

func (_self_ *Stage) SetUserResizable(resizable bool) () {
	_cgo_resizable_ := (C.gboolean)(C.FALSE)
	if resizable { _cgo_resizable_ = (C.gboolean)(C.TRUE) }
	C.clutter_stage_set_user_resizable((*C.ClutterStage)(_self_._value_), _cgo_resizable_)
	return
}

func (_self_ *Stage) ShowCursor() () {
	C.clutter_stage_show_cursor((*C.ClutterStage)(_self_._value_))
	return
}

func StageManagerGetDefault() (_go__return__ StageManager) {
	var _return_ *C.ClutterStageManager
	_return_ = C.clutter_stage_manager_get_default()
	_go__return__ = ToStageManager(unsafe.Pointer(_return_))
	return
}

func (_self_ *StageManager) GetDefaultStage() (_go__return__ Stage) {
	var _return_ *C.ClutterStage
	_return_ = C.clutter_stage_manager_get_default_stage((*C.ClutterStageManager)(_self_._value_))
	_go__return__ = ToStage(unsafe.Pointer(_return_))
	return
}

func (_self_ *StageManager) ListStages() (_return_ *C.GSList) {
	_return_ = C.clutter_stage_manager_list_stages((*C.ClutterStageManager)(_self_._value_))
	return
}

func (_self_ *StageManager) PeekStages() (_return_ *C.GSList) {
	_return_ = C._clutter_stage_manager_peek_stages((*C.ClutterStageManager)(_self_._value_))
	return
}

func SwipeActionNew() (_go__return__ SwipeAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_swipe_action_new()
	_go__return__ = ToSwipeAction(unsafe.Pointer(_return_))
	return
}

func TableLayoutNew() (_go__return__ TableLayout) {
	var _return_ *C.ClutterLayoutManager
	_return_ = C.clutter_table_layout_new()
	_go__return__ = ToTableLayout(unsafe.Pointer(_return_))
	return
}

func (_self_ *TableLayout) GetColumnCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_table_layout_get_column_count((*C.ClutterTableLayout)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TableLayout) GetColumnSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_table_layout_get_column_spacing((*C.ClutterTableLayout)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TableLayout) GetRowCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_table_layout_get_row_count((*C.ClutterTableLayout)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TableLayout) GetRowSpacing() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_table_layout_get_row_spacing((*C.ClutterTableLayout)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TableLayout) GetSpan(actor ActorKind) (_go_column_span_ int, _go_row_span_ int) {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	var column_span C.gint
	var row_span C.gint
	C.clutter_table_layout_get_span((*C.ClutterTableLayout)(_self_._value_), _cgo_actor_, &column_span, &row_span)
	_go_column_span_ = (int)(column_span)
	_go_row_span_ = (int)(row_span)
	return
}

func (_self_ *TableLayout) Pack(actor ActorKind, column int, row int) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	_cgo_column_ := (C.gint)(column)
	_cgo_row_ := (C.gint)(row)
	C.clutter_table_layout_pack((*C.ClutterTableLayout)(_self_._value_), _cgo_actor_, _cgo_column_, _cgo_row_)
	return
}

func (_self_ *TableLayout) SetColumnSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.clutter_table_layout_set_column_spacing((*C.ClutterTableLayout)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *TableLayout) SetRowSpacing(spacing uint) () {
	_cgo_spacing_ := (C.guint)(spacing)
	C.clutter_table_layout_set_row_spacing((*C.ClutterTableLayout)(_self_._value_), _cgo_spacing_)
	return
}

func (_self_ *TableLayout) SetSpan(actor ActorKind, column_span int, row_span int) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	_cgo_column_span_ := (C.gint)(column_span)
	_cgo_row_span_ := (C.gint)(row_span)
	C.clutter_table_layout_set_span((*C.ClutterTableLayout)(_self_._value_), _cgo_actor_, _cgo_column_span_, _cgo_row_span_)
	return
}

func TextNew() (_go__return__ ClutterText) {
	var _return_ *C.ClutterActor
	_return_ = C.clutter_text_new()
	_go__return__ = ToClutterText(unsafe.Pointer(_return_))
	return
}

func TextNewFull(font_name string, text string, color *ClutterColor) (_go__return__ ClutterText) {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	var _return_ *C.ClutterActor
	_cstring_font_name_ := C.CString(font_name)
	_cgo_font_name_ := (*C.gchar)(unsafe.Pointer(_cstring_font_name_))
	defer C.free(unsafe.Pointer(_cstring_font_name_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._clutter_text_new_full(_cgo_font_name_, _cgo_text_, _cgo_color_)
	_go__return__ = ToClutterText(unsafe.Pointer(_return_))
	return
}

func TextNewWithBuffer(buffer TextBufferKind) (_go__return__ ClutterText) {
	_cgo_buffer_ := (*C.ClutterTextBuffer)(buffer.GetGObject())
	var _return_ *C.ClutterActor
	_return_ = C.clutter_text_new_with_buffer(_cgo_buffer_)
	_go__return__ = ToClutterText(unsafe.Pointer(_return_))
	return
}

func TextNewWithText(font_name string, text string) (_go__return__ ClutterText) {
	var _return_ *C.ClutterActor
	_cstring_font_name_ := C.CString(font_name)
	_cgo_font_name_ := (*C.gchar)(unsafe.Pointer(_cstring_font_name_))
	defer C.free(unsafe.Pointer(_cstring_font_name_))
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._clutter_text_new_with_text(_cgo_font_name_, _cgo_text_)
	_go__return__ = ToClutterText(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterText) Activate() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_activate((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) CoordsToPosition(x float64, y float64) (_go__return__ int) {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	var _return_ C.gint
	_return_ = C.clutter_text_coords_to_position((*C.ClutterText)(_self_._value_), _cgo_x_, _cgo_y_)
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ClutterText) DeleteChars(n_chars uint) () {
	_cgo_n_chars_ := (C.guint)(n_chars)
	C.clutter_text_delete_chars((*C.ClutterText)(_self_._value_), _cgo_n_chars_)
	return
}

func (_self_ *ClutterText) DeleteSelection() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_delete_selection((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) DeleteText(start_pos int64, end_pos int64) () {
	_cgo_start_pos_ := (C.gssize)(start_pos)
	_cgo_end_pos_ := (C.gssize)(end_pos)
	C.clutter_text_delete_text((*C.ClutterText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	return
}

func (_self_ *ClutterText) GetActivatable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_activatable((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetAttributes() (_return_ *C.PangoAttrList) {
	_return_ = C.clutter_text_get_attributes((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetBuffer() (_go__return__ TextBuffer) {
	var _return_ *C.ClutterTextBuffer
	_return_ = C.clutter_text_get_buffer((*C.ClutterText)(_self_._value_))
	_go__return__ = ToTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterText) GetChars(start_pos int64, end_pos int64) (_go__return__ string) {
	_cgo_start_pos_ := (C.gssize)(start_pos)
	_cgo_end_pos_ := (C.gssize)(end_pos)
	var _return_ *C.gchar
	_return_ = C.clutter_text_get_chars((*C.ClutterText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ClutterText) GetColor() (color *ClutterColor) {
	var _allocated_color_ C.ClutterColor
	C.clutter_text_get_color((*C.ClutterText)(_self_._value_), &_allocated_color_)
	color = (*ClutterColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *ClutterText) GetCursorColor() (color *ClutterColor) {
	var _allocated_color_ C.ClutterColor
	C.clutter_text_get_cursor_color((*C.ClutterText)(_self_._value_), &_allocated_color_)
	color = (*ClutterColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *ClutterText) GetCursorPosition() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_text_get_cursor_position((*C.ClutterText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ClutterText) GetCursorSize() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_text_get_cursor_size((*C.ClutterText)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClutterText) GetCursorVisible() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_cursor_visible((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetEditable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_editable((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetEllipsize() (_return_ C.PangoEllipsizeMode) {
	_return_ = C.clutter_text_get_ellipsize((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetFontDescription() (_return_ *C.PangoFontDescription) {
	_return_ = C.clutter_text_get_font_description((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetFontName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_text_get_font_name((*C.ClutterText)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ClutterText) GetJustify() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_justify((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetLayout() (_return_ *C.PangoLayout) {
	_return_ = C.clutter_text_get_layout((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetLayoutOffsets() (_go_x_ int, _go_y_ int) {
	var x C.gint
	var y C.gint
	C.clutter_text_get_layout_offsets((*C.ClutterText)(_self_._value_), &x, &y)
	_go_x_ = (int)(x)
	_go_y_ = (int)(y)
	return
}

func (_self_ *ClutterText) GetLineAlignment() (_return_ C.PangoAlignment) {
	_return_ = C.clutter_text_get_line_alignment((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetLineWrap() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_line_wrap((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetLineWrapMode() (_return_ C.PangoWrapMode) {
	_return_ = C.clutter_text_get_line_wrap_mode((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_text_get_max_length((*C.ClutterText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ClutterText) GetPasswordChar() (_return_ C.gunichar) {
	_return_ = C.clutter_text_get_password_char((*C.ClutterText)(_self_._value_))
	return
}

func (_self_ *ClutterText) GetSelectable() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_selectable((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetSelectedTextColor() (color *ClutterColor) {
	var _allocated_color_ C.ClutterColor
	C.clutter_text_get_selected_text_color((*C.ClutterText)(_self_._value_), &_allocated_color_)
	color = (*ClutterColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *ClutterText) GetSelection() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C.clutter_text_get_selection((*C.ClutterText)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ClutterText) GetSelectionBound() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_text_get_selection_bound((*C.ClutterText)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *ClutterText) GetSelectionColor() (color *ClutterColor) {
	var _allocated_color_ C.ClutterColor
	C.clutter_text_get_selection_color((*C.ClutterText)(_self_._value_), &_allocated_color_)
	color = (*ClutterColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *ClutterText) GetSingleLineMode() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_single_line_mode((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_text_get_text((*C.ClutterText)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ClutterText) GetUseMarkup() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_text_get_use_markup((*C.ClutterText)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) InsertText(text string, position int64) () {
	_cgo_position_ := (C.gssize)(position)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._clutter_text_insert_text((*C.ClutterText)(_self_._value_), _cgo_text_, _cgo_position_)
	return
}

func (_self_ *ClutterText) InsertUnichar(wc C.gunichar) () {
	C.clutter_text_insert_unichar((*C.ClutterText)(_self_._value_), wc)
	return
}

func (_self_ *ClutterText) PositionToCoords(position int) (_go__return__ bool, _go_x_ float64, _go_y_ float64, _go_line_height_ float64) {
	_cgo_position_ := (C.gint)(position)
	var x C.gfloat
	var y C.gfloat
	var line_height C.gfloat
	var _return_ C.gboolean
	_return_ = C.clutter_text_position_to_coords((*C.ClutterText)(_self_._value_), _cgo_position_, &x, &y, &line_height)
	_go_x_ = (float64)(x)
	_go_y_ = (float64)(y)
	_go_line_height_ = (float64)(line_height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterText) SetActivatable(activatable bool) () {
	_cgo_activatable_ := (C.gboolean)(C.FALSE)
	if activatable { _cgo_activatable_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_activatable((*C.ClutterText)(_self_._value_), _cgo_activatable_)
	return
}

func (_self_ *ClutterText) SetAttributes(attrs *C.PangoAttrList) () {
	C.clutter_text_set_attributes((*C.ClutterText)(_self_._value_), attrs)
	return
}

func (_self_ *ClutterText) SetBuffer(buffer TextBufferKind) () {
	_cgo_buffer_ := (*C.ClutterTextBuffer)(buffer.GetGObject())
	C.clutter_text_set_buffer((*C.ClutterText)(_self_._value_), _cgo_buffer_)
	return
}

func (_self_ *ClutterText) SetColor(color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_text_set_color((*C.ClutterText)(_self_._value_), _cgo_color_)
	return
}

func (_self_ *ClutterText) SetCursorColor(color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_text_set_cursor_color((*C.ClutterText)(_self_._value_), _cgo_color_)
	return
}

func (_self_ *ClutterText) SetCursorPosition(position int) () {
	_cgo_position_ := (C.gint)(position)
	C.clutter_text_set_cursor_position((*C.ClutterText)(_self_._value_), _cgo_position_)
	return
}

func (_self_ *ClutterText) SetCursorSize(size int) () {
	_cgo_size_ := (C.gint)(size)
	C.clutter_text_set_cursor_size((*C.ClutterText)(_self_._value_), _cgo_size_)
	return
}

func (_self_ *ClutterText) SetCursorVisible(cursor_visible bool) () {
	_cgo_cursor_visible_ := (C.gboolean)(C.FALSE)
	if cursor_visible { _cgo_cursor_visible_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_cursor_visible((*C.ClutterText)(_self_._value_), _cgo_cursor_visible_)
	return
}

func (_self_ *ClutterText) SetEditable(editable bool) () {
	_cgo_editable_ := (C.gboolean)(C.FALSE)
	if editable { _cgo_editable_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_editable((*C.ClutterText)(_self_._value_), _cgo_editable_)
	return
}

func (_self_ *ClutterText) SetEllipsize(mode C.PangoEllipsizeMode) () {
	C.clutter_text_set_ellipsize((*C.ClutterText)(_self_._value_), mode)
	return
}

func (_self_ *ClutterText) SetFontDescription(font_desc *C.PangoFontDescription) () {
	C.clutter_text_set_font_description((*C.ClutterText)(_self_._value_), font_desc)
	return
}

func (_self_ *ClutterText) SetFontName(font_name string) () {
	_cstring_font_name_ := C.CString(font_name)
	_cgo_font_name_ := (*C.gchar)(unsafe.Pointer(_cstring_font_name_))
	defer C.free(unsafe.Pointer(_cstring_font_name_))
	C._clutter_text_set_font_name((*C.ClutterText)(_self_._value_), _cgo_font_name_)
	return
}

func (_self_ *ClutterText) SetJustify(justify bool) () {
	_cgo_justify_ := (C.gboolean)(C.FALSE)
	if justify { _cgo_justify_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_justify((*C.ClutterText)(_self_._value_), _cgo_justify_)
	return
}

func (_self_ *ClutterText) SetLineAlignment(alignment C.PangoAlignment) () {
	C.clutter_text_set_line_alignment((*C.ClutterText)(_self_._value_), alignment)
	return
}

func (_self_ *ClutterText) SetLineWrap(line_wrap bool) () {
	_cgo_line_wrap_ := (C.gboolean)(C.FALSE)
	if line_wrap { _cgo_line_wrap_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_line_wrap((*C.ClutterText)(_self_._value_), _cgo_line_wrap_)
	return
}

func (_self_ *ClutterText) SetLineWrapMode(wrap_mode C.PangoWrapMode) () {
	C.clutter_text_set_line_wrap_mode((*C.ClutterText)(_self_._value_), wrap_mode)
	return
}

func (_self_ *ClutterText) SetMarkup(markup string) () {
	_cstring_markup_ := C.CString(markup)
	_cgo_markup_ := (*C.gchar)(unsafe.Pointer(_cstring_markup_))
	defer C.free(unsafe.Pointer(_cstring_markup_))
	C._clutter_text_set_markup((*C.ClutterText)(_self_._value_), _cgo_markup_)
	return
}

func (_self_ *ClutterText) SetMaxLength(max int) () {
	_cgo_max_ := (C.gint)(max)
	C.clutter_text_set_max_length((*C.ClutterText)(_self_._value_), _cgo_max_)
	return
}

func (_self_ *ClutterText) SetPasswordChar(wc C.gunichar) () {
	C.clutter_text_set_password_char((*C.ClutterText)(_self_._value_), wc)
	return
}

func (_self_ *ClutterText) SetPreeditString(preedit_str string, preedit_attrs *C.PangoAttrList, cursor_pos uint) () {
	_cgo_cursor_pos_ := (C.guint)(cursor_pos)
	_cstring_preedit_str_ := C.CString(preedit_str)
	_cgo_preedit_str_ := (*C.gchar)(unsafe.Pointer(_cstring_preedit_str_))
	defer C.free(unsafe.Pointer(_cstring_preedit_str_))
	C._clutter_text_set_preedit_string((*C.ClutterText)(_self_._value_), _cgo_preedit_str_, preedit_attrs, _cgo_cursor_pos_)
	return
}

func (_self_ *ClutterText) SetSelectable(selectable bool) () {
	_cgo_selectable_ := (C.gboolean)(C.FALSE)
	if selectable { _cgo_selectable_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_selectable((*C.ClutterText)(_self_._value_), _cgo_selectable_)
	return
}

func (_self_ *ClutterText) SetSelectedTextColor(color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_text_set_selected_text_color((*C.ClutterText)(_self_._value_), _cgo_color_)
	return
}

func (_self_ *ClutterText) SetSelection(start_pos int64, end_pos int64) () {
	_cgo_start_pos_ := (C.gssize)(start_pos)
	_cgo_end_pos_ := (C.gssize)(end_pos)
	C.clutter_text_set_selection((*C.ClutterText)(_self_._value_), _cgo_start_pos_, _cgo_end_pos_)
	return
}

func (_self_ *ClutterText) SetSelectionBound(selection_bound int) () {
	_cgo_selection_bound_ := (C.gint)(selection_bound)
	C.clutter_text_set_selection_bound((*C.ClutterText)(_self_._value_), _cgo_selection_bound_)
	return
}

func (_self_ *ClutterText) SetSelectionColor(color *ClutterColor) () {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	C._clutter_text_set_selection_color((*C.ClutterText)(_self_._value_), _cgo_color_)
	return
}

func (_self_ *ClutterText) SetSingleLineMode(single_line bool) () {
	_cgo_single_line_ := (C.gboolean)(C.FALSE)
	if single_line { _cgo_single_line_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_single_line_mode((*C.ClutterText)(_self_._value_), _cgo_single_line_)
	return
}

func (_self_ *ClutterText) SetText(text string) () {
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	C._clutter_text_set_text((*C.ClutterText)(_self_._value_), _cgo_text_)
	return
}

func (_self_ *ClutterText) SetUseMarkup(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.clutter_text_set_use_markup((*C.ClutterText)(_self_._value_), _cgo_setting_)
	return
}

func TextBufferNew() (_go__return__ TextBuffer) {
	var _return_ *C.ClutterTextBuffer
	_return_ = C.clutter_text_buffer_new()
	_go__return__ = ToTextBuffer(unsafe.Pointer(_return_))
	return
}

func TextBufferNewWithText(text string, text_len int64) (_go__return__ TextBuffer) {
	var _return_ *C.ClutterTextBuffer
	_cgo_text_len_ := (C.gssize)(text_len)
	_cstring_text_ := C.CString(text)
	_cgo_text_ := (*C.gchar)(unsafe.Pointer(_cstring_text_))
	defer C.free(unsafe.Pointer(_cstring_text_))
	_return_ = C._clutter_text_buffer_new_with_text(_cgo_text_, _cgo_text_len_)
	_go__return__ = ToTextBuffer(unsafe.Pointer(_return_))
	return
}

func (_self_ *TextBuffer) DeleteText(position uint, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_return_ = C.clutter_text_buffer_delete_text((*C.ClutterTextBuffer)(_self_._value_), _cgo_position_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TextBuffer) EmitDeletedText(position uint, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	C.clutter_text_buffer_emit_deleted_text((*C.ClutterTextBuffer)(_self_._value_), _cgo_position_, _cgo_n_chars_)
	return
}

func (_self_ *TextBuffer) EmitInsertedText(position uint, chars string, n_chars uint) () {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.guint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._clutter_text_buffer_emit_inserted_text((*C.ClutterTextBuffer)(_self_._value_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	return
}

func (_self_ *TextBuffer) GetBytes() (_go__return__ uint64) {
	var _return_ C.gsize
	_return_ = C.clutter_text_buffer_get_bytes((*C.ClutterTextBuffer)(_self_._value_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *TextBuffer) GetLength() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_text_buffer_get_length((*C.ClutterTextBuffer)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TextBuffer) GetMaxLength() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_text_buffer_get_max_length((*C.ClutterTextBuffer)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *TextBuffer) GetText() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_text_buffer_get_text((*C.ClutterTextBuffer)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *TextBuffer) InsertText(position uint, chars string, n_chars int) (_go__return__ uint) {
	_cgo_position_ := (C.guint)(position)
	_cgo_n_chars_ := (C.gint)(n_chars)
	var _return_ C.guint
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	_return_ = C._clutter_text_buffer_insert_text((*C.ClutterTextBuffer)(_self_._value_), _cgo_position_, _cgo_chars_, _cgo_n_chars_)
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *TextBuffer) SetMaxLength(max_length int) () {
	_cgo_max_length_ := (C.gint)(max_length)
	C.clutter_text_buffer_set_max_length((*C.ClutterTextBuffer)(_self_._value_), _cgo_max_length_)
	return
}

func (_self_ *TextBuffer) SetText(chars string, n_chars int) () {
	_cgo_n_chars_ := (C.gint)(n_chars)
	_cstring_chars_ := C.CString(chars)
	_cgo_chars_ := (*C.gchar)(unsafe.Pointer(_cstring_chars_))
	defer C.free(unsafe.Pointer(_cstring_chars_))
	C._clutter_text_buffer_set_text((*C.ClutterTextBuffer)(_self_._value_), _cgo_chars_, _cgo_n_chars_)
	return
}

func TextNodeNew(layout *C.PangoLayout, color *ClutterColor) (_go__return__ TextNode) {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	var _return_ *C.ClutterPaintNode
	_return_ = C._clutter_text_node_new(layout, _cgo_color_)
	_go__return__ = ToTextNode(unsafe.Pointer(_return_))
	return
}

func TextureNodeNew(texture *C.CoglTexture, color *ClutterColor, min_filter C.ClutterScalingFilter, mag_filter C.ClutterScalingFilter) (_go__return__ TextureNode) {
	_cgo_color_ := (*C.ClutterColor)(unsafe.Pointer(color))
	var _return_ *C.ClutterPaintNode
	_return_ = C._clutter_texture_node_new(texture, _cgo_color_, min_filter, mag_filter)
	_go__return__ = ToTextureNode(unsafe.Pointer(_return_))
	return
}

func TimelineNew(msecs uint) (_go__return__ Timeline) {
	var _return_ *C.ClutterTimeline
	_cgo_msecs_ := (C.guint)(msecs)
	_return_ = C.clutter_timeline_new(_cgo_msecs_)
	_go__return__ = ToTimeline(unsafe.Pointer(_return_))
	return
}

func (_self_ *Timeline) AddMarkerAtTime(marker_name string, msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	_cstring_marker_name_ := C.CString(marker_name)
	_cgo_marker_name_ := (*C.gchar)(unsafe.Pointer(_cstring_marker_name_))
	defer C.free(unsafe.Pointer(_cstring_marker_name_))
	C._clutter_timeline_add_marker_at_time((*C.ClutterTimeline)(_self_._value_), _cgo_marker_name_, _cgo_msecs_)
	return
}

func (_self_ *Timeline) Advance(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_timeline_advance((*C.ClutterTimeline)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Timeline) AdvanceToMarker(marker_name string) () {
	_cstring_marker_name_ := C.CString(marker_name)
	_cgo_marker_name_ := (*C.gchar)(unsafe.Pointer(_cstring_marker_name_))
	defer C.free(unsafe.Pointer(_cstring_marker_name_))
	C._clutter_timeline_advance_to_marker((*C.ClutterTimeline)(_self_._value_), _cgo_marker_name_)
	return
}

func (_self_ *Timeline) GetAutoReverse() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_timeline_get_auto_reverse((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Timeline) GetCubicBezierProgress() (_go__return__ bool, c_1 *Point, c_2 *Point) {
	var _allocated_c_1_ C.ClutterPoint
	var _allocated_c_2_ C.ClutterPoint
	var _return_ C.gboolean
	_return_ = C.clutter_timeline_get_cubic_bezier_progress((*C.ClutterTimeline)(_self_._value_), &_allocated_c_1_, &_allocated_c_2_)
	c_1 = (*Point)(unsafe.Pointer(&_allocated_c_1_))
	c_2 = (*Point)(unsafe.Pointer(&_allocated_c_2_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Timeline) GetCurrentRepeat() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_timeline_get_current_repeat((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Timeline) GetDelay() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_timeline_get_delay((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Timeline) GetDelta() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_timeline_get_delta((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Timeline) GetDirection() (_return_ C.ClutterTimelineDirection) {
	_return_ = C.clutter_timeline_get_direction((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Timeline) GetDuration() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_timeline_get_duration((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Timeline) GetDurationHint() (_go__return__ int64) {
	var _return_ C.gint64
	_return_ = C.clutter_timeline_get_duration_hint((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *Timeline) GetElapsedTime() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.clutter_timeline_get_elapsed_time((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Timeline) GetProgress() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C.clutter_timeline_get_progress((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Timeline) GetProgressMode() (_return_ C.ClutterAnimationMode) {
	_return_ = C.clutter_timeline_get_progress_mode((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Timeline) GetRepeatCount() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C.clutter_timeline_get_repeat_count((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Timeline) GetStepProgress() (_go__return__ bool, _go_n_steps_ int, step_mode *C.ClutterStepMode) {
	var n_steps C.gint
	var _return_ C.gboolean
	_return_ = C.clutter_timeline_get_step_progress((*C.ClutterTimeline)(_self_._value_), &n_steps, step_mode)
	_go_n_steps_ = (int)(n_steps)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Timeline) HasMarker(marker_name string) (_go__return__ bool) {
	_cstring_marker_name_ := C.CString(marker_name)
	_cgo_marker_name_ := (*C.gchar)(unsafe.Pointer(_cstring_marker_name_))
	defer C.free(unsafe.Pointer(_cstring_marker_name_))
	var _return_ C.gboolean
	_return_ = C._clutter_timeline_has_marker((*C.ClutterTimeline)(_self_._value_), _cgo_marker_name_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Timeline) IsPlaying() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_timeline_is_playing((*C.ClutterTimeline)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Timeline) ListMarkers(msecs int) (_return_ unsafe.Pointer, _go_n_markers_ uint64) {
	_cgo_msecs_ := (C.gint)(msecs)
	var n_markers C.gsize
	_return_ = C._clutter_timeline_list_markers((*C.ClutterTimeline)(_self_._value_), _cgo_msecs_, &n_markers)
	_go_n_markers_ = (uint64)(n_markers)
	return
}

func (_self_ *Timeline) Pause() () {
	C.clutter_timeline_pause((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Timeline) RemoveMarker(marker_name string) () {
	_cstring_marker_name_ := C.CString(marker_name)
	_cgo_marker_name_ := (*C.gchar)(unsafe.Pointer(_cstring_marker_name_))
	defer C.free(unsafe.Pointer(_cstring_marker_name_))
	C._clutter_timeline_remove_marker((*C.ClutterTimeline)(_self_._value_), _cgo_marker_name_)
	return
}

func (_self_ *Timeline) Rewind() () {
	C.clutter_timeline_rewind((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Timeline) SetAutoReverse(reverse bool) () {
	_cgo_reverse_ := (C.gboolean)(C.FALSE)
	if reverse { _cgo_reverse_ = (C.gboolean)(C.TRUE) }
	C.clutter_timeline_set_auto_reverse((*C.ClutterTimeline)(_self_._value_), _cgo_reverse_)
	return
}

func (_self_ *Timeline) SetCubicBezierProgress(c_1 *Point, c_2 *Point) () {
	_cgo_c_1_ := (*C.ClutterPoint)(unsafe.Pointer(c_1))
	_cgo_c_2_ := (*C.ClutterPoint)(unsafe.Pointer(c_2))
	C._clutter_timeline_set_cubic_bezier_progress((*C.ClutterTimeline)(_self_._value_), _cgo_c_1_, _cgo_c_2_)
	return
}

func (_self_ *Timeline) SetDelay(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_timeline_set_delay((*C.ClutterTimeline)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Timeline) SetDirection(direction C.ClutterTimelineDirection) () {
	C.clutter_timeline_set_direction((*C.ClutterTimeline)(_self_._value_), direction)
	return
}

func (_self_ *Timeline) SetDuration(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_timeline_set_duration((*C.ClutterTimeline)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Timeline) SetProgressFunc(func_ C.ClutterTimelineProgressFunc, data C.gpointer, notify C.GDestroyNotify) () {
	C.clutter_timeline_set_progress_func((*C.ClutterTimeline)(_self_._value_), func_, data, notify)
	return
}

func (_self_ *Timeline) SetProgressMode(mode C.ClutterAnimationMode) () {
	C.clutter_timeline_set_progress_mode((*C.ClutterTimeline)(_self_._value_), mode)
	return
}

func (_self_ *Timeline) SetRepeatCount(count int) () {
	_cgo_count_ := (C.gint)(count)
	C.clutter_timeline_set_repeat_count((*C.ClutterTimeline)(_self_._value_), _cgo_count_)
	return
}

func (_self_ *Timeline) SetStepProgress(n_steps int, step_mode C.ClutterStepMode) () {
	_cgo_n_steps_ := (C.gint)(n_steps)
	C.clutter_timeline_set_step_progress((*C.ClutterTimeline)(_self_._value_), _cgo_n_steps_, step_mode)
	return
}

func (_self_ *Timeline) Skip(msecs uint) () {
	_cgo_msecs_ := (C.guint)(msecs)
	C.clutter_timeline_skip((*C.ClutterTimeline)(_self_._value_), _cgo_msecs_)
	return
}

func (_self_ *Timeline) Start() () {
	C.clutter_timeline_start((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Timeline) Stop() () {
	C.clutter_timeline_stop((*C.ClutterTimeline)(_self_._value_))
	return
}

func (_self_ *Transition) GetAnimatable() (_go__return__ Animatable) {
	var _return_ *C.ClutterAnimatable
	_return_ = C.clutter_transition_get_animatable((*C.ClutterTransition)(_self_._value_))
	_go__return__ = ToAnimatable(unsafe.Pointer(_return_))
	return
}

func (_self_ *Transition) GetInterval() (_go__return__ Interval) {
	var _return_ *C.ClutterInterval
	_return_ = C.clutter_transition_get_interval((*C.ClutterTransition)(_self_._value_))
	_go__return__ = ToInterval(unsafe.Pointer(_return_))
	return
}

func (_self_ *Transition) GetRemoveOnComplete() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.clutter_transition_get_remove_on_complete((*C.ClutterTransition)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Transition) SetAnimatable(animatable AnimatableKind) () {
	_cgo_animatable_ := (*C.ClutterAnimatable)(animatable.GetGObject())
	C.clutter_transition_set_animatable((*C.ClutterTransition)(_self_._value_), _cgo_animatable_)
	return
}

func (_self_ *Transition) SetFromValue(value *C.GValue) () {
	C._clutter_transition_set_from_value((*C.ClutterTransition)(_self_._value_), value)
	return
}

func (_self_ *Transition) SetInterval(interval IntervalKind) () {
	_cgo_interval_ := (*C.ClutterInterval)(interval.GetGObject())
	C.clutter_transition_set_interval((*C.ClutterTransition)(_self_._value_), _cgo_interval_)
	return
}

func (_self_ *Transition) SetRemoveOnComplete(remove_complete bool) () {
	_cgo_remove_complete_ := (C.gboolean)(C.FALSE)
	if remove_complete { _cgo_remove_complete_ = (C.gboolean)(C.TRUE) }
	C.clutter_transition_set_remove_on_complete((*C.ClutterTransition)(_self_._value_), _cgo_remove_complete_)
	return
}

func (_self_ *Transition) SetToValue(value *C.GValue) () {
	C._clutter_transition_set_to_value((*C.ClutterTransition)(_self_._value_), value)
	return
}

func TransitionGroupNew() (_go__return__ TransitionGroup) {
	var _return_ *C.ClutterTransition
	_return_ = C.clutter_transition_group_new()
	_go__return__ = ToTransitionGroup(unsafe.Pointer(_return_))
	return
}

func (_self_ *TransitionGroup) AddTransition(transition TransitionKind) () {
	_cgo_transition_ := (*C.ClutterTransition)(transition.GetGObject())
	C.clutter_transition_group_add_transition((*C.ClutterTransitionGroup)(_self_._value_), _cgo_transition_)
	return
}

func (_self_ *TransitionGroup) RemoveAll() () {
	C.clutter_transition_group_remove_all((*C.ClutterTransitionGroup)(_self_._value_))
	return
}

func (_self_ *TransitionGroup) RemoveTransition(transition TransitionKind) () {
	_cgo_transition_ := (*C.ClutterTransition)(transition.GetGObject())
	C.clutter_transition_group_remove_transition((*C.ClutterTransitionGroup)(_self_._value_), _cgo_transition_)
	return
}

func ZoomActionNew() (_go__return__ ZoomAction) {
	var _return_ *C.ClutterAction
	_return_ = C.clutter_zoom_action_new()
	_go__return__ = ToZoomAction(unsafe.Pointer(_return_))
	return
}

func (_self_ *ZoomAction) GetFocalPoint() (point *Point) {
	var _allocated_point_ C.ClutterPoint
	C.clutter_zoom_action_get_focal_point((*C.ClutterZoomAction)(_self_._value_), &_allocated_point_)
	point = (*Point)(unsafe.Pointer(&_allocated_point_))
	return
}

func (_self_ *ZoomAction) GetTransformedFocalPoint() (point *Point) {
	var _allocated_point_ C.ClutterPoint
	C.clutter_zoom_action_get_transformed_focal_point((*C.ClutterZoomAction)(_self_._value_), &_allocated_point_)
	point = (*Point)(unsafe.Pointer(&_allocated_point_))
	return
}

func (_self_ *ZoomAction) GetZoomAxis() (_return_ C.ClutterZoomAxis) {
	_return_ = C.clutter_zoom_action_get_zoom_axis((*C.ClutterZoomAction)(_self_._value_))
	return
}

func (_self_ *ZoomAction) SetZoomAxis(axis C.ClutterZoomAxis) () {
	C.clutter_zoom_action_set_zoom_axis((*C.ClutterZoomAction)(_self_._value_), axis)
	return
}

func ActorBoxNew(x_1 float64, y_1 float64, x_2 float64, y_2 float64) (_go__return__ *ActorBox) {
	var _return_ *C.ClutterActorBox
	_cgo_x_1_ := (C.gfloat)(x_1)
	_cgo_y_1_ := (C.gfloat)(y_1)
	_cgo_x_2_ := (C.gfloat)(x_2)
	_cgo_y_2_ := (C.gfloat)(y_2)
	_return_ = C.clutter_actor_box_new(_cgo_x_1_, _cgo_y_1_, _cgo_x_2_, _cgo_y_2_)
	_go__return__ = (*ActorBox)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActorBox) ClampToPixel() () {
	C.clutter_actor_box_clamp_to_pixel((*C.ClutterActorBox)(_self_))
	return
}

func (_self_ *ActorBox) Contains(x float64, y float64) (_go__return__ bool) {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	var _return_ C.gboolean
	_return_ = C._clutter_actor_box_contains((*C.ClutterActorBox)(_self_), _cgo_x_, _cgo_y_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorBox) Copy() (_go__return__ *ActorBox) {
	var _return_ *C.ClutterActorBox
	_return_ = C._clutter_actor_box_copy((*C.ClutterActorBox)(_self_))
	_go__return__ = (*ActorBox)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActorBox) Equal(box_b *ActorBox) (_go__return__ bool) {
	_cgo_box_b_ := (*C.ClutterActorBox)(unsafe.Pointer(box_b))
	var _return_ C.gboolean
	_return_ = C._clutter_actor_box_equal((*C.ClutterActorBox)(_self_), _cgo_box_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorBox) Free() () {
	C.clutter_actor_box_free((*C.ClutterActorBox)(_self_))
	return
}

func (_self_ *ActorBox) GetArea() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_actor_box_get_area((*C.ClutterActorBox)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ActorBox) GetHeight() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_actor_box_get_height((*C.ClutterActorBox)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ActorBox) GetOrigin() (_go_x_ float64, _go_y_ float64) {
	var x C.gfloat
	var y C.gfloat
	C._clutter_actor_box_get_origin((*C.ClutterActorBox)(_self_), &x, &y)
	_go_x_ = (float64)(x)
	_go_y_ = (float64)(y)
	return
}

func (_self_ *ActorBox) GetSize() (_go_width_ float64, _go_height_ float64) {
	var width C.gfloat
	var height C.gfloat
	C._clutter_actor_box_get_size((*C.ClutterActorBox)(_self_), &width, &height)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	return
}

func (_self_ *ActorBox) GetWidth() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_actor_box_get_width((*C.ClutterActorBox)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ActorBox) GetX() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_actor_box_get_x((*C.ClutterActorBox)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ActorBox) GetY() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_actor_box_get_y((*C.ClutterActorBox)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *ActorBox) Init(x_1 float64, y_1 float64, x_2 float64, y_2 float64) (_go__return__ *ActorBox) {
	var _return_ *C.ClutterActorBox
	_cgo_x_1_ := (C.gfloat)(x_1)
	_cgo_y_1_ := (C.gfloat)(y_1)
	_cgo_x_2_ := (C.gfloat)(x_2)
	_cgo_y_2_ := (C.gfloat)(y_2)
	_return_ = C.clutter_actor_box_init((*C.ClutterActorBox)(_self_), _cgo_x_1_, _cgo_y_1_, _cgo_x_2_, _cgo_y_2_)
	_go__return__ = (*ActorBox)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ActorBox) InitRect(x float64, y float64, width float64, height float64) () {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	_cgo_width_ := (C.gfloat)(width)
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_actor_box_init_rect((*C.ClutterActorBox)(_self_), _cgo_x_, _cgo_y_, _cgo_width_, _cgo_height_)
	return
}

func (_self_ *ActorBox) Interpolate(final *ActorBox, progress float64) (result *ActorBox) {
	_cgo_final_ := (*C.ClutterActorBox)(unsafe.Pointer(final))
	var _allocated_result_ C.ClutterActorBox
	_cgo_progress_ := (C.gdouble)(progress)
	C._clutter_actor_box_interpolate((*C.ClutterActorBox)(_self_), _cgo_final_, _cgo_progress_, &_allocated_result_)
	result = (*ActorBox)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ActorBox) SetOrigin(x float64, y float64) () {
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	C.clutter_actor_box_set_origin((*C.ClutterActorBox)(_self_), _cgo_x_, _cgo_y_)
	return
}

func (_self_ *ActorBox) SetSize(width float64, height float64) () {
	_cgo_width_ := (C.gfloat)(width)
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_actor_box_set_size((*C.ClutterActorBox)(_self_), _cgo_width_, _cgo_height_)
	return
}

func (_self_ *ActorBox) Union(b *ActorBox) (result *ActorBox) {
	_cgo_b_ := (*C.ClutterActorBox)(unsafe.Pointer(b))
	var _allocated_result_ C.ClutterActorBox
	C._clutter_actor_box_union((*C.ClutterActorBox)(_self_), _cgo_b_, &_allocated_result_)
	result = (*ActorBox)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ActorIter) Destroy() () {
	C.clutter_actor_iter_destroy((*C.ClutterActorIter)(_self_))
	return
}

func (_self_ *ActorIter) Init(root ActorKind) () {
	_cgo_root_ := (*C.ClutterActor)(root.GetGObject())
	C.clutter_actor_iter_init((*C.ClutterActorIter)(_self_), _cgo_root_)
	return
}

func (_self_ *ActorIter) IsValid() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._clutter_actor_iter_is_valid((*C.ClutterActorIter)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorIter) Next() (_go__return__ bool, child *Actor) {
	var _allocated_child_ *C.ClutterActor
	var _return_ C.gboolean
	_return_ = C._clutter_actor_iter_next((*C.ClutterActorIter)(_self_), unsafe.Pointer(&_allocated_child_))
	child = (*Actor)(unsafe.Pointer(_allocated_child_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorIter) Prev() (_go__return__ bool, child *Actor) {
	var _allocated_child_ *C.ClutterActor
	var _return_ C.gboolean
	_return_ = C._clutter_actor_iter_prev((*C.ClutterActorIter)(_self_), unsafe.Pointer(&_allocated_child_))
	child = (*Actor)(unsafe.Pointer(_allocated_child_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ActorIter) Remove() () {
	C.clutter_actor_iter_remove((*C.ClutterActorIter)(_self_))
	return
}

func ColorNew(red uint8, green uint8, blue uint8, alpha uint8) (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_cgo_red_ := (C.guint8)(red)
	_cgo_green_ := (C.guint8)(green)
	_cgo_blue_ := (C.guint8)(blue)
	_cgo_alpha_ := (C.guint8)(alpha)
	_return_ = C.clutter_color_new(_cgo_red_, _cgo_green_, _cgo_blue_, _cgo_alpha_)
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterColor) Add(b *ClutterColor) (result *ClutterColor) {
	_cgo_b_ := (*C.ClutterColor)(unsafe.Pointer(b))
	var _allocated_result_ C.ClutterColor
	C._clutter_color_add((*C.ClutterColor)(_self_), _cgo_b_, &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) Copy() (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_return_ = C._clutter_color_copy((*C.ClutterColor)(_self_))
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterColor) Darken() (result *ClutterColor) {
	var _allocated_result_ C.ClutterColor
	C._clutter_color_darken((*C.ClutterColor)(_self_), &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) Equal(v2 *ClutterColor) (_go__return__ bool) {
	_cgo_v2_ := (C.gpointer)(unsafe.Pointer(v2))
	var _return_ C.gboolean
	_return_ = C._clutter_color_equal((*C.ClutterColor)(_self_), _cgo_v2_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterColor) Free() () {
	C.clutter_color_free((*C.ClutterColor)(_self_))
	return
}

func (_self_ *ClutterColor) FromHls(hue float64, luminance float64, saturation float64) () {
	_cgo_hue_ := (C.gfloat)(hue)
	_cgo_luminance_ := (C.gfloat)(luminance)
	_cgo_saturation_ := (C.gfloat)(saturation)
	C.clutter_color_from_hls((*C.ClutterColor)(_self_), _cgo_hue_, _cgo_luminance_, _cgo_saturation_)
	return
}

func (_self_ *ClutterColor) FromPixel(pixel uint32) () {
	_cgo_pixel_ := (C.guint32)(pixel)
	C.clutter_color_from_pixel((*C.ClutterColor)(_self_), _cgo_pixel_)
	return
}

func (_self_ *ClutterColor) FromString(str string) (_go__return__ bool) {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._clutter_color_from_string((*C.ClutterColor)(_self_), _cgo_str_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *ClutterColor) Hash() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._clutter_color_hash((*C.ClutterColor)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *ClutterColor) Init(red uint8, green uint8, blue uint8, alpha uint8) (_go__return__ *ClutterColor) {
	var _return_ *C.ClutterColor
	_cgo_red_ := (C.guint8)(red)
	_cgo_green_ := (C.guint8)(green)
	_cgo_blue_ := (C.guint8)(blue)
	_cgo_alpha_ := (C.guint8)(alpha)
	_return_ = C.clutter_color_init((*C.ClutterColor)(_self_), _cgo_red_, _cgo_green_, _cgo_blue_, _cgo_alpha_)
	_go__return__ = (*ClutterColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *ClutterColor) Interpolate(final *ClutterColor, progress float64) (result *ClutterColor) {
	_cgo_final_ := (*C.ClutterColor)(unsafe.Pointer(final))
	var _allocated_result_ C.ClutterColor
	_cgo_progress_ := (C.gdouble)(progress)
	C._clutter_color_interpolate((*C.ClutterColor)(_self_), _cgo_final_, _cgo_progress_, &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) Lighten() (result *ClutterColor) {
	var _allocated_result_ C.ClutterColor
	C._clutter_color_lighten((*C.ClutterColor)(_self_), &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) Shade(factor float64) (result *ClutterColor) {
	var _allocated_result_ C.ClutterColor
	_cgo_factor_ := (C.gdouble)(factor)
	C._clutter_color_shade((*C.ClutterColor)(_self_), _cgo_factor_, &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) Subtract(b *ClutterColor) (result *ClutterColor) {
	_cgo_b_ := (*C.ClutterColor)(unsafe.Pointer(b))
	var _allocated_result_ C.ClutterColor
	C._clutter_color_subtract((*C.ClutterColor)(_self_), _cgo_b_, &_allocated_result_)
	result = (*ClutterColor)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *ClutterColor) ToHls() (_go_hue_ float64, _go_luminance_ float64, _go_saturation_ float64) {
	var hue C.gfloat
	var luminance C.gfloat
	var saturation C.gfloat
	C._clutter_color_to_hls((*C.ClutterColor)(_self_), &hue, &luminance, &saturation)
	_go_hue_ = (float64)(hue)
	_go_luminance_ = (float64)(luminance)
	_go_saturation_ = (float64)(saturation)
	return
}

func (_self_ *ClutterColor) ToPixel() (_go__return__ uint32) {
	var _return_ C.guint32
	_return_ = C._clutter_color_to_pixel((*C.ClutterColor)(_self_))
	_go__return__ = (uint32)(_return_)
	return
}

func (_self_ *ClutterColor) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_color_to_string((*C.ClutterColor)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Geometry) Intersects(geometry1 *Geometry) (_go__return__ bool) {
	_cgo_geometry1_ := (*C.ClutterGeometry)(unsafe.Pointer(geometry1))
	var _return_ C.gboolean
	_return_ = C._clutter_geometry_intersects((*C.ClutterGeometry)(_self_), _cgo_geometry1_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Geometry) Union(geometry_b *Geometry) (result *Geometry) {
	_cgo_geometry_b_ := (*C.ClutterGeometry)(unsafe.Pointer(geometry_b))
	var _allocated_result_ C.ClutterGeometry
	C._clutter_geometry_union((*C.ClutterGeometry)(_self_), _cgo_geometry_b_, &_allocated_result_)
	result = (*Geometry)(unsafe.Pointer(&_allocated_result_))
	return
}

func (_self_ *Knot) Copy() (_go__return__ *Knot) {
	var _return_ *C.ClutterKnot
	_return_ = C._clutter_knot_copy((*C.ClutterKnot)(_self_))
	_go__return__ = (*Knot)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Knot) Equal(knot_b *Knot) (_go__return__ bool) {
	_cgo_knot_b_ := (*C.ClutterKnot)(unsafe.Pointer(knot_b))
	var _return_ C.gboolean
	_return_ = C._clutter_knot_equal((*C.ClutterKnot)(_self_), _cgo_knot_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Knot) Free() () {
	C.clutter_knot_free((*C.ClutterKnot)(_self_))
	return
}

func MarginNew() (_go__return__ *Margin) {
	var _return_ *C.ClutterMargin
	_return_ = C.clutter_margin_new()
	_go__return__ = (*Margin)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Margin) Copy() (_go__return__ *Margin) {
	var _return_ *C.ClutterMargin
	_return_ = C._clutter_margin_copy((*C.ClutterMargin)(_self_))
	_go__return__ = (*Margin)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Margin) Free() () {
	C.clutter_margin_free((*C.ClutterMargin)(_self_))
	return
}

func (_self_ *PaintVolume) Copy() (_go__return__ *PaintVolume) {
	var _return_ *C.ClutterPaintVolume
	_return_ = C._clutter_paint_volume_copy((*C.ClutterPaintVolume)(_self_))
	_go__return__ = (*PaintVolume)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PaintVolume) Free() () {
	C.clutter_paint_volume_free((*C.ClutterPaintVolume)(_self_))
	return
}

func (_self_ *PaintVolume) GetDepth() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_paint_volume_get_depth((*C.ClutterPaintVolume)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaintVolume) GetHeight() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_paint_volume_get_height((*C.ClutterPaintVolume)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaintVolume) GetOrigin() (vertex *Vertex) {
	var _allocated_vertex_ C.ClutterVertex
	C._clutter_paint_volume_get_origin((*C.ClutterPaintVolume)(_self_), &_allocated_vertex_)
	vertex = (*Vertex)(unsafe.Pointer(&_allocated_vertex_))
	return
}

func (_self_ *PaintVolume) GetWidth() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_paint_volume_get_width((*C.ClutterPaintVolume)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *PaintVolume) SetDepth(depth float64) () {
	_cgo_depth_ := (C.gfloat)(depth)
	C.clutter_paint_volume_set_depth((*C.ClutterPaintVolume)(_self_), _cgo_depth_)
	return
}

func (_self_ *PaintVolume) SetFromAllocation(actor ActorKind) (_go__return__ bool) {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	var _return_ C.gboolean
	_return_ = C.clutter_paint_volume_set_from_allocation((*C.ClutterPaintVolume)(_self_), _cgo_actor_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *PaintVolume) SetHeight(height float64) () {
	_cgo_height_ := (C.gfloat)(height)
	C.clutter_paint_volume_set_height((*C.ClutterPaintVolume)(_self_), _cgo_height_)
	return
}

func (_self_ *PaintVolume) SetOrigin(origin *Vertex) () {
	_cgo_origin_ := (*C.ClutterVertex)(unsafe.Pointer(origin))
	C._clutter_paint_volume_set_origin((*C.ClutterPaintVolume)(_self_), _cgo_origin_)
	return
}

func (_self_ *PaintVolume) SetWidth(width float64) () {
	_cgo_width_ := (C.gfloat)(width)
	C.clutter_paint_volume_set_width((*C.ClutterPaintVolume)(_self_), _cgo_width_)
	return
}

func (_self_ *PaintVolume) Union(another_pv *PaintVolume) () {
	_cgo_another_pv_ := (*C.ClutterPaintVolume)(unsafe.Pointer(another_pv))
	C._clutter_paint_volume_union((*C.ClutterPaintVolume)(_self_), _cgo_another_pv_)
	return
}

func (_self_ *PaintVolume) UnionBox(box *ActorBox) () {
	_cgo_box_ := (*C.ClutterActorBox)(unsafe.Pointer(box))
	C._clutter_paint_volume_union_box((*C.ClutterPaintVolume)(_self_), _cgo_box_)
	return
}

func (_self_ *PathNode) Copy() (_go__return__ *PathNode) {
	var _return_ *C.ClutterPathNode
	_return_ = C._clutter_path_node_copy((*C.ClutterPathNode)(_self_))
	_go__return__ = (*PathNode)(unsafe.Pointer(_return_))
	return
}

func (_self_ *PathNode) Equal(node_b *PathNode) (_go__return__ bool) {
	_cgo_node_b_ := (*C.ClutterPathNode)(unsafe.Pointer(node_b))
	var _return_ C.gboolean
	_return_ = C._clutter_path_node_equal((*C.ClutterPathNode)(_self_), _cgo_node_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *PathNode) Free() () {
	C.clutter_path_node_free((*C.ClutterPathNode)(_self_))
	return
}

func PointAlloc() (_go__return__ *Point) {
	var _return_ *C.ClutterPoint
	_return_ = C.clutter_point_alloc()
	_go__return__ = (*Point)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Point) Copy() (_go__return__ *Point) {
	var _return_ *C.ClutterPoint
	_return_ = C._clutter_point_copy((*C.ClutterPoint)(_self_))
	_go__return__ = (*Point)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Point) Distance(b *Point) (_return_ C.float, x_distance C.float, y_distance C.float) {
	_cgo_b_ := (*C.ClutterPoint)(unsafe.Pointer(b))
	_return_ = C._clutter_point_distance((*C.ClutterPoint)(_self_), _cgo_b_, &x_distance, &y_distance)
	return
}

func (_self_ *Point) Equals(b *Point) (_go__return__ bool) {
	_cgo_b_ := (*C.ClutterPoint)(unsafe.Pointer(b))
	var _return_ C.gboolean
	_return_ = C._clutter_point_equals((*C.ClutterPoint)(_self_), _cgo_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Point) Free() () {
	C.clutter_point_free((*C.ClutterPoint)(_self_))
	return
}

func (_self_ *Point) Init(x C.float, y C.float) (_go__return__ *Point) {
	var _return_ *C.ClutterPoint
	_return_ = C.clutter_point_init((*C.ClutterPoint)(_self_), x, y)
	_go__return__ = (*Point)(unsafe.Pointer(_return_))
	return
}

func RectAlloc() (_go__return__ *Rect) {
	var _return_ *C.ClutterRect
	_return_ = C.clutter_rect_alloc()
	_go__return__ = (*Rect)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Rect) ClampToPixel() () {
	C.clutter_rect_clamp_to_pixel((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) ContainsPoint(point *Point) (_go__return__ bool) {
	_cgo_point_ := (*C.ClutterPoint)(unsafe.Pointer(point))
	var _return_ C.gboolean
	_return_ = C.clutter_rect_contains_point((*C.ClutterRect)(_self_), _cgo_point_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Rect) ContainsRect(b *Rect) (_go__return__ bool) {
	_cgo_b_ := (*C.ClutterRect)(unsafe.Pointer(b))
	var _return_ C.gboolean
	_return_ = C.clutter_rect_contains_rect((*C.ClutterRect)(_self_), _cgo_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Rect) Copy() (_go__return__ *Rect) {
	var _return_ *C.ClutterRect
	_return_ = C._clutter_rect_copy((*C.ClutterRect)(_self_))
	_go__return__ = (*Rect)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Rect) Equals(b *Rect) (_go__return__ bool) {
	_cgo_b_ := (*C.ClutterRect)(unsafe.Pointer(b))
	var _return_ C.gboolean
	_return_ = C.clutter_rect_equals((*C.ClutterRect)(_self_), _cgo_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Rect) Free() () {
	C.clutter_rect_free((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) GetCenter() (center *Point) {
	var _allocated_center_ C.ClutterPoint
	C.clutter_rect_get_center((*C.ClutterRect)(_self_), &_allocated_center_)
	center = (*Point)(unsafe.Pointer(&_allocated_center_))
	return
}

func (_self_ *Rect) GetHeight() (_return_ C.float) {
	_return_ = C.clutter_rect_get_height((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) GetWidth() (_return_ C.float) {
	_return_ = C.clutter_rect_get_width((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) GetX() (_return_ C.float) {
	_return_ = C.clutter_rect_get_x((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) GetY() (_return_ C.float) {
	_return_ = C.clutter_rect_get_y((*C.ClutterRect)(_self_))
	return
}

func (_self_ *Rect) Init(x C.float, y C.float, width C.float, height C.float) (_go__return__ *Rect) {
	var _return_ *C.ClutterRect
	_return_ = C.clutter_rect_init((*C.ClutterRect)(_self_), x, y, width, height)
	_go__return__ = (*Rect)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Rect) Inset(d_x C.float, d_y C.float) () {
	C.clutter_rect_inset((*C.ClutterRect)(_self_), d_x, d_y)
	return
}

func (_self_ *Rect) Intersection(b *Rect) (_go__return__ bool, res *Rect) {
	_cgo_b_ := (*C.ClutterRect)(unsafe.Pointer(b))
	var _allocated_res_ C.ClutterRect
	var _return_ C.gboolean
	_return_ = C.clutter_rect_intersection((*C.ClutterRect)(_self_), _cgo_b_, &_allocated_res_)
	res = (*Rect)(unsafe.Pointer(&_allocated_res_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Rect) Normalize() (_go__return__ *Rect) {
	var _return_ *C.ClutterRect
	_return_ = C.clutter_rect_normalize((*C.ClutterRect)(_self_))
	_go__return__ = (*Rect)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Rect) Offset(d_x C.float, d_y C.float) () {
	C.clutter_rect_offset((*C.ClutterRect)(_self_), d_x, d_y)
	return
}

func (_self_ *Rect) Union(b *Rect) (res *Rect) {
	_cgo_b_ := (*C.ClutterRect)(unsafe.Pointer(b))
	var _allocated_res_ C.ClutterRect
	C.clutter_rect_union((*C.ClutterRect)(_self_), _cgo_b_, &_allocated_res_)
	res = (*Rect)(unsafe.Pointer(&_allocated_res_))
	return
}

func SizeAlloc() (_go__return__ *Size) {
	var _return_ *C.ClutterSize
	_return_ = C.clutter_size_alloc()
	_go__return__ = (*Size)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Size) Copy() (_go__return__ *Size) {
	var _return_ *C.ClutterSize
	_return_ = C._clutter_size_copy((*C.ClutterSize)(_self_))
	_go__return__ = (*Size)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Size) Equals(b *Size) (_go__return__ bool) {
	_cgo_b_ := (*C.ClutterSize)(unsafe.Pointer(b))
	var _return_ C.gboolean
	_return_ = C._clutter_size_equals((*C.ClutterSize)(_self_), _cgo_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Size) Free() () {
	C.clutter_size_free((*C.ClutterSize)(_self_))
	return
}

func (_self_ *Size) Init(width C.float, height C.float) (_go__return__ *Size) {
	var _return_ *C.ClutterSize
	_return_ = C.clutter_size_init((*C.ClutterSize)(_self_), width, height)
	_go__return__ = (*Size)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Units) Copy() (_go__return__ *Units) {
	var _return_ *C.ClutterUnits
	_return_ = C._clutter_units_copy((*C.ClutterUnits)(_self_))
	_go__return__ = (*Units)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Units) Free() () {
	C.clutter_units_free((*C.ClutterUnits)(_self_))
	return
}

func (_self_ *Units) FromCm(cm float64) () {
	_cgo_cm_ := (C.gfloat)(cm)
	C.clutter_units_from_cm((*C.ClutterUnits)(_self_), _cgo_cm_)
	return
}

func (_self_ *Units) FromEm(em float64) () {
	_cgo_em_ := (C.gfloat)(em)
	C.clutter_units_from_em((*C.ClutterUnits)(_self_), _cgo_em_)
	return
}

func (_self_ *Units) FromEmForFont(font_name string, em float64) () {
	_cgo_em_ := (C.gfloat)(em)
	_cstring_font_name_ := C.CString(font_name)
	_cgo_font_name_ := (*C.gchar)(unsafe.Pointer(_cstring_font_name_))
	defer C.free(unsafe.Pointer(_cstring_font_name_))
	C._clutter_units_from_em_for_font((*C.ClutterUnits)(_self_), _cgo_font_name_, _cgo_em_)
	return
}

func (_self_ *Units) FromMm(mm float64) () {
	_cgo_mm_ := (C.gfloat)(mm)
	C.clutter_units_from_mm((*C.ClutterUnits)(_self_), _cgo_mm_)
	return
}

func (_self_ *Units) FromPixels(px int) () {
	_cgo_px_ := (C.gint)(px)
	C.clutter_units_from_pixels((*C.ClutterUnits)(_self_), _cgo_px_)
	return
}

func (_self_ *Units) FromPt(pt float64) () {
	_cgo_pt_ := (C.gfloat)(pt)
	C.clutter_units_from_pt((*C.ClutterUnits)(_self_), _cgo_pt_)
	return
}

func (_self_ *Units) FromString(str string) (_go__return__ bool) {
	_cstring_str_ := C.CString(str)
	_cgo_str_ := (*C.gchar)(unsafe.Pointer(_cstring_str_))
	defer C.free(unsafe.Pointer(_cstring_str_))
	var _return_ C.gboolean
	_return_ = C._clutter_units_from_string((*C.ClutterUnits)(_self_), _cgo_str_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Units) GetUnitType() (_return_ C.ClutterUnitType) {
	_return_ = C._clutter_units_get_unit_type((*C.ClutterUnits)(_self_))
	return
}

func (_self_ *Units) GetUnitValue() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._clutter_units_get_unit_value((*C.ClutterUnits)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Units) ToPixels() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C.clutter_units_to_pixels((*C.ClutterUnits)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Units) ToString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_units_to_string((*C.ClutterUnits)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func VertexAlloc() (_go__return__ *Vertex) {
	var _return_ *C.ClutterVertex
	_return_ = C.clutter_vertex_alloc()
	_go__return__ = (*Vertex)(unsafe.Pointer(_return_))
	return
}

func VertexNew(x float64, y float64, z float64) (_go__return__ *Vertex) {
	var _return_ *C.ClutterVertex
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	_cgo_z_ := (C.gfloat)(z)
	_return_ = C.clutter_vertex_new(_cgo_x_, _cgo_y_, _cgo_z_)
	_go__return__ = (*Vertex)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Vertex) Copy() (_go__return__ *Vertex) {
	var _return_ *C.ClutterVertex
	_return_ = C._clutter_vertex_copy((*C.ClutterVertex)(_self_))
	_go__return__ = (*Vertex)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Vertex) Equal(vertex_b *Vertex) (_go__return__ bool) {
	_cgo_vertex_b_ := (*C.ClutterVertex)(unsafe.Pointer(vertex_b))
	var _return_ C.gboolean
	_return_ = C._clutter_vertex_equal((*C.ClutterVertex)(_self_), _cgo_vertex_b_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Vertex) Free() () {
	C.clutter_vertex_free((*C.ClutterVertex)(_self_))
	return
}

func (_self_ *Vertex) Init(x float64, y float64, z float64) (_go__return__ *Vertex) {
	var _return_ *C.ClutterVertex
	_cgo_x_ := (C.gfloat)(x)
	_cgo_y_ := (C.gfloat)(y)
	_cgo_z_ := (C.gfloat)(z)
	_return_ = C.clutter_vertex_init((*C.ClutterVertex)(_self_), _cgo_x_, _cgo_y_, _cgo_z_)
	_go__return__ = (*Vertex)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Animatable) FindProperty(property_name string) (_return_ *C.GParamSpec) {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._clutter_animatable_find_property((*C.ClutterAnimatable)(_self_._value_), _cgo_property_name_)
	return
}

func (_self_ *Animatable) GetInitialState(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._clutter_animatable_get_initial_state((*C.ClutterAnimatable)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *Animatable) InterpolateValue(property_name string, interval IntervalKind, progress float64) (_go__return__ bool, value *C.GValue) {
	_cgo_interval_ := (*C.ClutterInterval)(interval.GetGObject())
	_cgo_progress_ := (C.gdouble)(progress)
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	var _return_ C.gboolean
	_return_ = C._clutter_animatable_interpolate_value((*C.ClutterAnimatable)(_self_._value_), _cgo_property_name_, _cgo_interval_, _cgo_progress_, value)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Animatable) SetFinalState(property_name string, value *C.GValue) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._clutter_animatable_set_final_state((*C.ClutterAnimatable)(_self_._value_), _cgo_property_name_, value)
	return
}

func (_self_ *Container) ChildGetProperty(child ActorKind, property string, value *C.GValue) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._clutter_container_child_get_property((*C.ClutterContainer)(_self_._value_), _cgo_child_, _cgo_property_, value)
	return
}

func (_self_ *Container) ChildNotify(child ActorKind, pspec *C.GParamSpec) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	C.clutter_container_child_notify((*C.ClutterContainer)(_self_._value_), _cgo_child_, pspec)
	return
}

func (_self_ *Container) ChildSetProperty(child ActorKind, property string, value *C.GValue) () {
	_cgo_child_ := (*C.ClutterActor)(child.GetGObject())
	_cstring_property_ := C.CString(property)
	_cgo_property_ := (*C.gchar)(unsafe.Pointer(_cstring_property_))
	defer C.free(unsafe.Pointer(_cstring_property_))
	C._clutter_container_child_set_property((*C.ClutterContainer)(_self_._value_), _cgo_child_, _cgo_property_, value)
	return
}

func (_self_ *Container) CreateChildMeta(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_container_create_child_meta((*C.ClutterContainer)(_self_._value_), _cgo_actor_)
	return
}

func (_self_ *Container) DestroyChildMeta(actor ActorKind) () {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	C.clutter_container_destroy_child_meta((*C.ClutterContainer)(_self_._value_), _cgo_actor_)
	return
}

func (_self_ *Container) FindChildByName(child_name string) (_go__return__ Actor) {
	var _return_ *C.ClutterActor
	_cstring_child_name_ := C.CString(child_name)
	_cgo_child_name_ := (*C.gchar)(unsafe.Pointer(_cstring_child_name_))
	defer C.free(unsafe.Pointer(_cstring_child_name_))
	_return_ = C._clutter_container_find_child_by_name((*C.ClutterContainer)(_self_._value_), _cgo_child_name_)
	_go__return__ = ToActor(unsafe.Pointer(_return_))
	return
}

func (_self_ *Container) GetChildMeta(actor ActorKind) (_go__return__ ChildMeta) {
	_cgo_actor_ := (*C.ClutterActor)(actor.GetGObject())
	var _return_ *C.ClutterChildMeta
	_return_ = C.clutter_container_get_child_meta((*C.ClutterContainer)(_self_._value_), _cgo_actor_)
	_go__return__ = ToChildMeta(unsafe.Pointer(_return_))
	return
}

func (_self_ *Content) GetPreferredSize() (_go__return__ bool, _go_width_ float64, _go_height_ float64) {
	var width C.gfloat
	var height C.gfloat
	var _return_ C.gboolean
	_return_ = C.clutter_content_get_preferred_size((*C.ClutterContent)(_self_._value_), &width, &height)
	_go_width_ = (float64)(width)
	_go_height_ = (float64)(height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Content) Invalidate() () {
	C.clutter_content_invalidate((*C.ClutterContent)(_self_._value_))
	return
}

func (_self_ *Scriptable) GetId() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._clutter_scriptable_get_id((*C.ClutterScriptable)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Scriptable) ParseCustomNode(script ScriptKind, value *C.GValue, name string, node *C.JsonNode) (_go__return__ bool) {
	_cgo_script_ := (*C.ClutterScript)(script.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	var _return_ C.gboolean
	_return_ = C._clutter_scriptable_parse_custom_node((*C.ClutterScriptable)(_self_._value_), _cgo_script_, value, _cgo_name_, node)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Scriptable) SetCustomProperty(script ScriptKind, name string, value *C.GValue) () {
	_cgo_script_ := (*C.ClutterScript)(script.GetGObject())
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._clutter_scriptable_set_custom_property((*C.ClutterScriptable)(_self_._value_), _cgo_script_, _cgo_name_, value)
	return
}

func (_self_ *Scriptable) SetId(id_ string) () {
	_cstring_id__ := C.CString(id_)
	_cgo_id__ := (*C.gchar)(unsafe.Pointer(_cstring_id__))
	defer C.free(unsafe.Pointer(_cstring_id__))
	C._clutter_scriptable_set_id((*C.ClutterScriptable)(_self_._value_), _cgo_id__)
	return
}

const CLUTTER_Thai_thothong = C.CLUTTER_Thai_thothong
const CLUTTER_hebrew_he = C.CLUTTER_hebrew_he
const CLUTTER_Sinh_ri = C.CLUTTER_Sinh_ri
const CLUTTER_ORIENTATION_VERTICAL = C.CLUTTER_ORIENTATION_VERTICAL
const CLUTTER_UNIT_MM = C.CLUTTER_UNIT_MM
const CLUTTER_MODIFIER_RESERVED_15_MASK = C.CLUTTER_MODIFIER_RESERVED_15_MASK
const CLUTTER_KEY_acircumflexhook = C.CLUTTER_KEY_acircumflexhook
const CLUTTER_KEY_KP_Left = C.CLUTTER_KEY_KP_Left
const CLUTTER_COLOR_BLACK = C.CLUTTER_COLOR_BLACK
const CLUTTER_KEY_Hangul_SunkyeongeumPieub = C.CLUTTER_KEY_Hangul_SunkyeongeumPieub
const CLUTTER_Mabovedot = C.CLUTTER_Mabovedot
const CLUTTER_Greek_GAMMA = C.CLUTTER_Greek_GAMMA
const CLUTTER_KEY_Hangul_Pieub = C.CLUTTER_KEY_Hangul_Pieub
const CLUTTER_signaturemark = C.CLUTTER_signaturemark
const CLUTTER_Thai_leknung = C.CLUTTER_Thai_leknung
const CLUTTER_KEY_Ugrave = C.CLUTTER_KEY_Ugrave
const CLUTTER_Hangul_J_Sios = C.CLUTTER_Hangul_J_Sios
const CLUTTER_Thai_maitaikhu = C.CLUTTER_Thai_maitaikhu
const CLUTTER_KEY_Greek_ETAaccent = C.CLUTTER_KEY_Greek_ETAaccent
const CLUTTER_KEY_MillSign = C.CLUTTER_KEY_MillSign
const CLUTTER_Clear = C.CLUTTER_Clear
const CLUTTER_Arabic_ddal = C.CLUTTER_Arabic_ddal
const CLUTTER_KEY_Return = C.CLUTTER_KEY_Return
const CLUTTER_User2KB = C.CLUTTER_User2KB
const CLUTTER_KEY_Armenian_tche = C.CLUTTER_KEY_Armenian_tche
const CLUTTER_HotLinks = C.CLUTTER_HotLinks
const CLUTTER_braille_dots_268 = C.CLUTTER_braille_dots_268
const CLUTTER_KEY_Arabic_hah = C.CLUTTER_KEY_Arabic_hah
const CLUTTER_ISO_Discontinuous_Underline = C.CLUTTER_ISO_Discontinuous_Underline
const CLUTTER_KEY_Thai_saraam = C.CLUTTER_KEY_Thai_saraam
const CLUTTER_KEY_grave = C.CLUTTER_KEY_grave
const CLUTTER_Greek_beta = C.CLUTTER_Greek_beta
const CLUTTER_KEY_Arabic_fatha = C.CLUTTER_KEY_Arabic_fatha
const CLUTTER_KEY_Thai_saraae = C.CLUTTER_KEY_Thai_saraae
const CLUTTER_Greek_iota = C.CLUTTER_Greek_iota
const CLUTTER_Zabovedot = C.CLUTTER_Zabovedot
const CLUTTER_KEY_Pointer_Right = C.CLUTTER_KEY_Pointer_Right
const CLUTTER_KEY_Pointer_DblClick3 = C.CLUTTER_KEY_Pointer_DblClick3
const CLUTTER_KEY_Cyrillic_SOFTSIGN = C.CLUTTER_KEY_Cyrillic_SOFTSIGN
const CLUTTER_Sinh_ra = C.CLUTTER_Sinh_ra
const CLUTTER_MOD4_MASK = C.CLUTTER_MOD4_MASK
const CLUTTER_KEY_Fabovedot = C.CLUTTER_KEY_Fabovedot
const CLUTTER_KEY_Pointer_DblClick2 = C.CLUTTER_KEY_Pointer_DblClick2
const CLUTTER_KEY_Hangul_J_Tieut = C.CLUTTER_KEY_Hangul_J_Tieut
const CLUTTER_KEY_Ocircumflexgrave = C.CLUTTER_KEY_Ocircumflexgrave
const CLUTTER_KEY_Pointer_DblClick1 = C.CLUTTER_KEY_Pointer_DblClick1
const CLUTTER_INPUT_AXIS_LAST = C.CLUTTER_INPUT_AXIS_LAST
const CLUTTER_Serbian_TSHE = C.CLUTTER_Serbian_TSHE
const CLUTTER_Arabic_noon_ghunna = C.CLUTTER_Arabic_noon_ghunna
const CLUTTER_Armenian_amanak = C.CLUTTER_Armenian_amanak
const CLUTTER_KEY_Begin = C.CLUTTER_KEY_Begin
const CLUTTER_period = C.CLUTTER_period
const CLUTTER_KEY_braille_dots_123467 = C.CLUTTER_KEY_braille_dots_123467
const CLUTTER_KEY_Sinh_bha = C.CLUTTER_KEY_Sinh_bha
const CLUTTER_KEY_Hangul_NieunHieuh = C.CLUTTER_KEY_Hangul_NieunHieuh
const CLUTTER_MODIFIER_RESERVED_20_MASK = C.CLUTTER_MODIFIER_RESERVED_20_MASK
const CLUTTER_KEY_Hangul_YE = C.CLUTTER_KEY_Hangul_YE
const CLUTTER_braille_dots_467 = C.CLUTTER_braille_dots_467
const CLUTTER_KEY_leftopentriangle = C.CLUTTER_KEY_leftopentriangle
const CLUTTER_KEY_Hangul_YI = C.CLUTTER_KEY_Hangul_YI
const CLUTTER_BIND_Y = C.CLUTTER_BIND_Y
const CLUTTER_KEY_Hangul_YO = C.CLUTTER_KEY_Hangul_YO
const CLUTTER_KEY_braille_dots_123468 = C.CLUTTER_KEY_braille_dots_123468
const CLUTTER_KEY_Sinh_lla = C.CLUTTER_KEY_Sinh_lla
const CLUTTER_Armenian_DZA = C.CLUTTER_Armenian_DZA
const CLUTTER_braille_dots_1238 = C.CLUTTER_braille_dots_1238
const CLUTTER_Greek_phi = C.CLUTTER_Greek_phi
const CLUTTER_KEY_braille_dots_34567 = C.CLUTTER_KEY_braille_dots_34567
const CLUTTER_KEY_3270_ExSelect = C.CLUTTER_KEY_3270_ExSelect
const CLUTTER_KEY_Kanji = C.CLUTTER_KEY_Kanji
const CLUTTER_KEY_Armenian_but = C.CLUTTER_KEY_Armenian_but
const CLUTTER_KEY_downarrow = C.CLUTTER_KEY_downarrow
const CLUTTER_KEY_Icircumflex = C.CLUTTER_KEY_Icircumflex
const CLUTTER_braille_dots_1237 = C.CLUTTER_braille_dots_1237
const CLUTTER_braille_dots_1234 = C.CLUTTER_braille_dots_1234
const CLUTTER_Arabic_yeh = C.CLUTTER_Arabic_yeh
const CLUTTER_Greek_iotaaccentdieresis = C.CLUTTER_Greek_iotaaccentdieresis
const CLUTTER_MillSign = C.CLUTTER_MillSign
const CLUTTER_INTERPOLATION_CUBIC = C.CLUTTER_INTERPOLATION_CUBIC
const CLUTTER_racute = C.CLUTTER_racute
const CLUTTER_Calculator = C.CLUTTER_Calculator
const CLUTTER_KEY_braille_dots_14678 = C.CLUTTER_KEY_braille_dots_14678
const CLUTTER_periodcentered = C.CLUTTER_periodcentered
const CLUTTER_KEY_Launch6 = C.CLUTTER_KEY_Launch6
const CLUTTER_KEY_Launch7 = C.CLUTTER_KEY_Launch7
const CLUTTER_KEY_Launch4 = C.CLUTTER_KEY_Launch4
const CLUTTER_KEY_Launch5 = C.CLUTTER_KEY_Launch5
const CLUTTER_KEY_Launch2 = C.CLUTTER_KEY_Launch2
const CLUTTER_KEY_Launch3 = C.CLUTTER_KEY_Launch3
const CLUTTER_KEY_Launch0 = C.CLUTTER_KEY_Launch0
const CLUTTER_KEY_Launch1 = C.CLUTTER_KEY_Launch1
const CLUTTER_Caps_Lock = C.CLUTTER_Caps_Lock
const CLUTTER_KEY_Greek_omicronaccent = C.CLUTTER_KEY_Greek_omicronaccent
const CLUTTER_KEY_includedin = C.CLUTTER_KEY_includedin
const CLUTTER_KEY_Launch8 = C.CLUTTER_KEY_Launch8
const CLUTTER_KEY_Launch9 = C.CLUTTER_KEY_Launch9
const CLUTTER_Hangul_U = C.CLUTTER_Hangul_U
const CLUTTER_KEY_plus = C.CLUTTER_KEY_plus
const CLUTTER_KEY_Hangul_EU = C.CLUTTER_KEY_Hangul_EU
const CLUTTER_COLOR_BUTTER_DARK = C.CLUTTER_COLOR_BUTTER_DARK
const CLUTTER_Sinh_ttha = C.CLUTTER_Sinh_ttha
const CLUTTER_Udoubleacute = C.CLUTTER_Udoubleacute
const CLUTTER_Thai_lakkhangyao = C.CLUTTER_Thai_lakkhangyao
const CLUTTER_KEY_Imacron = C.CLUTTER_KEY_Imacron
const CLUTTER_KEY_Arabic_gaf = C.CLUTTER_KEY_Arabic_gaf
const CLUTTER_COLOR_ALUMINIUM_3 = C.CLUTTER_COLOR_ALUMINIUM_3
const CLUTTER_TIMELINE_FORWARD = C.CLUTTER_TIMELINE_FORWARD
const CLUTTER_COLOR_SKY_BLUE_LIGHT = C.CLUTTER_COLOR_SKY_BLUE_LIGHT
const CLUTTER_KEY_ocircumflex = C.CLUTTER_KEY_ocircumflex
const CLUTTER_KEY_Calculator = C.CLUTTER_KEY_Calculator
const CLUTTER_KEY_upstile = C.CLUTTER_KEY_upstile
const CLUTTER_Hangul_A = C.CLUTTER_Hangul_A
const CLUTTER_oslash = C.CLUTTER_oslash
const CLUTTER_Greek_rho = C.CLUTTER_Greek_rho
const CLUTTER_KEY_ModeLock = C.CLUTTER_KEY_ModeLock
const CLUTTER_KEY_Hangul_EO = C.CLUTTER_KEY_Hangul_EO
const CLUTTER_Hangul_O = C.CLUTTER_Hangul_O
const CLUTTER_ecircumflexacute = C.CLUTTER_ecircumflexacute
const CLUTTER_Hangul_I = C.CLUTTER_Hangul_I
const CLUTTER_CONTENT_GRAVITY_LEFT = C.CLUTTER_CONTENT_GRAVITY_LEFT
const CLUTTER_DOS = C.CLUTTER_DOS
const CLUTTER_Sinh_lu = C.CLUTTER_Sinh_lu
const CLUTTER_KEY_yhook = C.CLUTTER_KEY_yhook
const CLUTTER_KEY_tslash = C.CLUTTER_KEY_tslash
const CLUTTER_Sinh_ii2 = C.CLUTTER_Sinh_ii2
const CLUTTER_KEY_uparrow = C.CLUTTER_KEY_uparrow
const CLUTTER_KEY_Cyrillic_ya = C.CLUTTER_KEY_Cyrillic_ya
const CLUTTER_EASE_OUT_SINE = C.CLUTTER_EASE_OUT_SINE
const CLUTTER_PowerOff = C.CLUTTER_PowerOff
const CLUTTER_KEY_sterling = C.CLUTTER_KEY_sterling
const CLUTTER_Udiaeresis = C.CLUTTER_Udiaeresis
const CLUTTER_foursuperior = C.CLUTTER_foursuperior
const CLUTTER_KEY_Aring = C.CLUTTER_KEY_Aring
const CLUTTER_KEY_Next_VMode = C.CLUTTER_KEY_Next_VMode
const CLUTTER_KEY_Sinh_ru2 = C.CLUTTER_KEY_Sinh_ru2
const CLUTTER_GRAVITY_NONE = C.CLUTTER_GRAVITY_NONE
const CLUTTER_KEY_hebrew_tet = C.CLUTTER_KEY_hebrew_tet
const CLUTTER_KEY_Arabic_heh_doachashmee = C.CLUTTER_KEY_Arabic_heh_doachashmee
const CLUTTER_KEY_LaunchF = C.CLUTTER_KEY_LaunchF
const CLUTTER_KEY_Travel = C.CLUTTER_KEY_Travel
const CLUTTER_KEY_LaunchD = C.CLUTTER_KEY_LaunchD
const CLUTTER_Dabovedot = C.CLUTTER_Dabovedot
const CLUTTER_KEY_LaunchB = C.CLUTTER_KEY_LaunchB
const CLUTTER_KEY_LaunchC = C.CLUTTER_KEY_LaunchC
const CLUTTER_KEY_LaunchA = C.CLUTTER_KEY_LaunchA
const CLUTTER_hebrew_zayin = C.CLUTTER_hebrew_zayin
const CLUTTER_KEY_quotedbl = C.CLUTTER_KEY_quotedbl
const CLUTTER_KEY_Thorn = C.CLUTTER_KEY_Thorn
const CLUTTER_KEY_KP_Prior = C.CLUTTER_KEY_KP_Prior
const CLUTTER_Arabic_seen = C.CLUTTER_Arabic_seen
const CLUTTER_KEY_notapproxeq = C.CLUTTER_KEY_notapproxeq
const CLUTTER_COLOR_DARK_YELLOW = C.CLUTTER_COLOR_DARK_YELLOW
const CLUTTER_KEY_braille_dots_1234578 = C.CLUTTER_KEY_braille_dots_1234578
const CLUTTER_question = C.CLUTTER_question
const CLUTTER_Hiragana_Katakana = C.CLUTTER_Hiragana_Katakana
const CLUTTER_threesubscript = C.CLUTTER_threesubscript
const CLUTTER_Cyrillic_VE = C.CLUTTER_Cyrillic_VE
const CLUTTER_Return = C.CLUTTER_Return
const CLUTTER_KEY_DOS = C.CLUTTER_KEY_DOS
const CLUTTER_Greek_ALPHA = C.CLUTTER_Greek_ALPHA
const CLUTTER_Kanji = C.CLUTTER_Kanji
const CLUTTER_KEY_Armenian_to = C.CLUTTER_KEY_Armenian_to
const CLUTTER_braille_dots_1235678 = C.CLUTTER_braille_dots_1235678
const CLUTTER_Farsi_7 = C.CLUTTER_Farsi_7
const CLUTTER_Farsi_6 = C.CLUTTER_Farsi_6
const CLUTTER_Farsi_5 = C.CLUTTER_Farsi_5
const CLUTTER_Farsi_4 = C.CLUTTER_Farsi_4
const CLUTTER_Farsi_3 = C.CLUTTER_Farsi_3
const CLUTTER_Farsi_2 = C.CLUTTER_Farsi_2
const CLUTTER_Farsi_1 = C.CLUTTER_Farsi_1
const CLUTTER_Farsi_0 = C.CLUTTER_Farsi_0
const CLUTTER_KEY_Away = C.CLUTTER_KEY_Away
const CLUTTER_braille_dots_23 = C.CLUTTER_braille_dots_23
const CLUTTER_KEY_maltesecross = C.CLUTTER_KEY_maltesecross
const CLUTTER_braille_dots_26 = C.CLUTTER_braille_dots_26
const CLUTTER_Thai_chochan = C.CLUTTER_Thai_chochan
const CLUTTER_Georgian_zen = C.CLUTTER_Georgian_zen
const CLUTTER_Farsi_8 = C.CLUTTER_Farsi_8
const CLUTTER_Market = C.CLUTTER_Market
const CLUTTER_Acircumflexbelowdot = C.CLUTTER_Acircumflexbelowdot
const CLUTTER_Thai_leksam = C.CLUTTER_Thai_leksam
const CLUTTER_Armenian_za = C.CLUTTER_Armenian_za
const CLUTTER_KEY_ibreve = C.CLUTTER_KEY_ibreve
const CLUTTER_KEY_toprightsqbracket = C.CLUTTER_KEY_toprightsqbracket
const CLUTTER_igrave = C.CLUTTER_igrave
const CLUTTER_schwa = C.CLUTTER_schwa
const CLUTTER_digitspace = C.CLUTTER_digitspace
const CLUTTER_kappa = C.CLUTTER_kappa
const CLUTTER_Sinh_nja = C.CLUTTER_Sinh_nja
const CLUTTER_ebelowdot = C.CLUTTER_ebelowdot
const CLUTTER_CURSOR_DEVICE = C.CLUTTER_CURSOR_DEVICE
const CLUTTER_leftpointer = C.CLUTTER_leftpointer
const CLUTTER_yen = C.CLUTTER_yen
const CLUTTER_KEY_SlowKeys_Enable = C.CLUTTER_KEY_SlowKeys_Enable
const CLUTTER_3270_ChangeScreen = C.CLUTTER_3270_ChangeScreen
const CLUTTER_Sinh_sha = C.CLUTTER_Sinh_sha
const CLUTTER_KEY_braille_dots_17 = C.CLUTTER_KEY_braille_dots_17
const CLUTTER_Arabic_hamza_below = C.CLUTTER_Arabic_hamza_below
const CLUTTER_KEY_Thai_chochang = C.CLUTTER_KEY_Thai_chochang
const CLUTTER_braille_dots_346 = C.CLUTTER_braille_dots_346
const CLUTTER_KEY_ApplicationRight = C.CLUTTER_KEY_ApplicationRight
const CLUTTER_braille_dots_13457 = C.CLUTTER_braille_dots_13457
const CLUTTER_KEY_braille_dots_78 = C.CLUTTER_KEY_braille_dots_78
const CLUTTER_braille_dots_8 = C.CLUTTER_braille_dots_8
const CLUTTER_opentribulletup = C.CLUTTER_opentribulletup
const CLUTTER_KP_Insert = C.CLUTTER_KP_Insert
const CLUTTER_lcaron = C.CLUTTER_lcaron
const CLUTTER_FEATURE_SHADERS_GLSL = C.CLUTTER_FEATURE_SHADERS_GLSL
const CLUTTER_GRAVITY_SOUTH_EAST = C.CLUTTER_GRAVITY_SOUTH_EAST
const CLUTTER_parenleft = C.CLUTTER_parenleft
const CLUTTER_KEY_hebrew_he = C.CLUTTER_KEY_hebrew_he
const CLUTTER_Travel = C.CLUTTER_Travel
const CLUTTER_KEY_downcaret = C.CLUTTER_KEY_downcaret
const CLUTTER_braille_dots_345 = C.CLUTTER_braille_dots_345
const CLUTTER_Hangul_J_KkogjiDalrinIeung = C.CLUTTER_Hangul_J_KkogjiDalrinIeung
const CLUTTER_KEY_Greek_DELTA = C.CLUTTER_KEY_Greek_DELTA
const CLUTTER_Pointer_DownRight = C.CLUTTER_Pointer_DownRight
const CLUTTER_KEY_Hangul_J_Sios = C.CLUTTER_KEY_Hangul_J_Sios
const CLUTTER_Thai_nikhahit = C.CLUTTER_Thai_nikhahit
const CLUTTER_KEY_Blue = C.CLUTTER_KEY_Blue
const CLUTTER_KEY_ISO_Group_Lock = C.CLUTTER_KEY_ISO_Group_Lock
const CLUTTER_similarequal = C.CLUTTER_similarequal
const CLUTTER_KEY_Hangul_RieulKiyeog = C.CLUTTER_KEY_Hangul_RieulKiyeog
const CLUTTER_HomePage = C.CLUTTER_HomePage
const CLUTTER_fivesuperior = C.CLUTTER_fivesuperior
const CLUTTER_rightshoe = C.CLUTTER_rightshoe
const CLUTTER_BIND_SIZE = C.CLUTTER_BIND_SIZE
const CLUTTER_KEY_Cyrillic_ka = C.CLUTTER_KEY_Cyrillic_ka
const CLUTTER_Rcedilla = C.CLUTTER_Rcedilla
const CLUTTER_space = C.CLUTTER_space
const CLUTTER_KEY_cuberoot = C.CLUTTER_KEY_cuberoot
const CLUTTER_AccessX_Feedback_Enable = C.CLUTTER_AccessX_Feedback_Enable
const CLUTTER_KEY_underscore = C.CLUTTER_KEY_underscore
const CLUTTER_KEY_KP_Subtract = C.CLUTTER_KEY_KP_Subtract
const CLUTTER_KEY_Sinh_ae2 = C.CLUTTER_KEY_Sinh_ae2
const CLUTTER_braille_dots_1357 = C.CLUTTER_braille_dots_1357
const CLUTTER_Thai_lekpaet = C.CLUTTER_Thai_lekpaet
const CLUTTER_KEY_Arabic_ra = C.CLUTTER_KEY_Arabic_ra
const CLUTTER_3270_PA2 = C.CLUTTER_3270_PA2
const CLUTTER_3270_PA3 = C.CLUTTER_3270_PA3
const CLUTTER_Hangul_Ieung = C.CLUTTER_Hangul_Ieung
const CLUTTER_3270_PA1 = C.CLUTTER_3270_PA1
const CLUTTER_KEY_SCHWA = C.CLUTTER_KEY_SCHWA
const CLUTTER_KEY_Thai_dodek = C.CLUTTER_KEY_Thai_dodek
const CLUTTER_Hcircumflex = C.CLUTTER_Hcircumflex
const CLUTTER_eacute = C.CLUTTER_eacute
const CLUTTER_KEY_cedilla = C.CLUTTER_KEY_cedilla
const CLUTTER_KEY_Hangul_Sios = C.CLUTTER_KEY_Hangul_Sios
const CLUTTER_KEY_Paste = C.CLUTTER_KEY_Paste
const CLUTTER_KEY_Thai_nonen = C.CLUTTER_KEY_Thai_nonen
const CLUTTER_KEY_braille_dots_34578 = C.CLUTTER_KEY_braille_dots_34578
const CLUTTER_Uhorngrave = C.CLUTTER_Uhorngrave
const CLUTTER_KEY_UWB = C.CLUTTER_KEY_UWB
const CLUTTER_KEY_Hangul_J_Dikeud = C.CLUTTER_KEY_Hangul_J_Dikeud
const CLUTTER_KEY_Armenian_fe = C.CLUTTER_KEY_Armenian_fe
const CLUTTER_KEY_Hangul_YEO = C.CLUTTER_KEY_Hangul_YEO
const CLUTTER_KEY_Sinh_sa = C.CLUTTER_KEY_Sinh_sa
const CLUTTER_LogOff = C.CLUTTER_LogOff
const CLUTTER_KEY_braille_dots_2468 = C.CLUTTER_KEY_braille_dots_2468
const CLUTTER_KEY_Sinh_ng2 = C.CLUTTER_KEY_Sinh_ng2
const CLUTTER_KEY_botvertsummationconnector = C.CLUTTER_KEY_botvertsummationconnector
const CLUTTER_KEY_Greek_theta = C.CLUTTER_KEY_Greek_theta
const CLUTTER_META_MASK = C.CLUTTER_META_MASK
const CLUTTER_KEY_Ukranian_yi = C.CLUTTER_KEY_Ukranian_yi
const CLUTTER_REPEAT_Y_AXIS = C.CLUTTER_REPEAT_Y_AXIS
const CLUTTER_KEY_braille_dots_2467 = C.CLUTTER_KEY_braille_dots_2467
const CLUTTER_Cyrillic_CHE = C.CLUTTER_Cyrillic_CHE
const CLUTTER_hebrew_samekh = C.CLUTTER_hebrew_samekh
const CLUTTER_KEY_Armenian_separation_mark = C.CLUTTER_KEY_Armenian_separation_mark
const CLUTTER_AudioPlay = C.CLUTTER_AudioPlay
const CLUTTER_KEY_rightshoe = C.CLUTTER_KEY_rightshoe
const CLUTTER_hebrew_nun = C.CLUTTER_hebrew_nun
const CLUTTER_KEY_exclamdown = C.CLUTTER_KEY_exclamdown
const CLUTTER_KEY_TouchpadOff = C.CLUTTER_KEY_TouchpadOff
const CLUTTER_KEY_acircumflexacute = C.CLUTTER_KEY_acircumflexacute
const CLUTTER_OfficeHome = C.CLUTTER_OfficeHome
const CLUTTER_Zenkaku_Hankaku = C.CLUTTER_Zenkaku_Hankaku
const CLUTTER_Greek_tau = C.CLUTTER_Greek_tau
const CLUTTER_3270_EraseInput = C.CLUTTER_3270_EraseInput
const CLUTTER_braille_dots_126 = C.CLUTTER_braille_dots_126
const CLUTTER_KEY_Greek_epsilonaccent = C.CLUTTER_KEY_Greek_epsilonaccent
const CLUTTER_KEY_Thai_saraaa = C.CLUTTER_KEY_Thai_saraaa
const CLUTTER_KEY_Subtitle = C.CLUTTER_KEY_Subtitle
const CLUTTER_KEY_braille_blank = C.CLUTTER_KEY_braille_blank
const CLUTTER_KEY_Hangul_SsangKiyeog = C.CLUTTER_KEY_Hangul_SsangKiyeog
const CLUTTER_ALIGN_X_AXIS = C.CLUTTER_ALIGN_X_AXIS
const CLUTTER_COLOR_WHITE = C.CLUTTER_COLOR_WHITE
const CLUTTER_Prev_Virtual_Screen = C.CLUTTER_Prev_Virtual_Screen
const CLUTTER_KEY_Armenian_KEN = C.CLUTTER_KEY_Armenian_KEN
const CLUTTER_KEY_Georgian_char = C.CLUTTER_KEY_Georgian_char
const CLUTTER_KEY_Ncaron = C.CLUTTER_KEY_Ncaron
const CLUTTER_Armenian_TSO = C.CLUTTER_Armenian_TSO
const CLUTTER_KEY_Sinh_nga = C.CLUTTER_KEY_Sinh_nga
const CLUTTER_KEY_Omacron = C.CLUTTER_KEY_Omacron
const CLUTTER_hexagram = C.CLUTTER_hexagram
const CLUTTER_Armenian_TSA = C.CLUTTER_Armenian_TSA
const CLUTTER_braille_dots_34578 = C.CLUTTER_braille_dots_34578
const CLUTTER_KEY_Georgian_rae = C.CLUTTER_KEY_Georgian_rae
const CLUTTER_KEY_cabovedot = C.CLUTTER_KEY_cabovedot
const CLUTTER_braille_dots_127 = C.CLUTTER_braille_dots_127
const CLUTTER_KEY_kana_HE = C.CLUTTER_KEY_kana_HE
const CLUTTER_braille_dots_12578 = C.CLUTTER_braille_dots_12578
const CLUTTER_Cyrillic_NJE = C.CLUTTER_Cyrillic_NJE
const CLUTTER_KEY_Ecaron = C.CLUTTER_KEY_Ecaron
const CLUTTER_Sinh_kha = C.CLUTTER_Sinh_kha
const CLUTTER_KEY_kana_HO = C.CLUTTER_KEY_kana_HO
const CLUTTER_Lstroke = C.CLUTTER_Lstroke
const CLUTTER_KEY_kana_HI = C.CLUTTER_KEY_kana_HI
const CLUTTER_Ibreve = C.CLUTTER_Ibreve
const CLUTTER_hebrew_finalmem = C.CLUTTER_hebrew_finalmem
const CLUTTER_Insert = C.CLUTTER_Insert
const CLUTTER_Thai_sarauu = C.CLUTTER_Thai_sarauu
const CLUTTER_KEY_ISO_Prev_Group = C.CLUTTER_KEY_ISO_Prev_Group
const CLUTTER_onefifth = C.CLUTTER_onefifth
const CLUTTER_KEY_braille_dots_346 = C.CLUTTER_KEY_braille_dots_346
const CLUTTER_KEY_VoidSymbol = C.CLUTTER_KEY_VoidSymbol
const CLUTTER_threesuperior = C.CLUTTER_threesuperior
const CLUTTER_KEY_braille_dots_345 = C.CLUTTER_KEY_braille_dots_345
const CLUTTER_KEY_Eject = C.CLUTTER_KEY_Eject
const CLUTTER_KEY_PreviousCandidate = C.CLUTTER_KEY_PreviousCandidate
const CLUTTER_KEY_Cyrillic_che_vertstroke = C.CLUTTER_KEY_Cyrillic_che_vertstroke
const CLUTTER_TEXTURE_RGB_FLAG_PREMULT = C.CLUTTER_TEXTURE_RGB_FLAG_PREMULT
const CLUTTER_KEY_implies = C.CLUTTER_KEY_implies
const CLUTTER_KEY_ocaron = C.CLUTTER_KEY_ocaron
const CLUTTER_KEY_braille_dots_348 = C.CLUTTER_KEY_braille_dots_348
const CLUTTER_KEY_Pause = C.CLUTTER_KEY_Pause
const CLUTTER_KEY_rightmiddlesummation = C.CLUTTER_KEY_rightmiddlesummation
const CLUTTER_KEY_Cyrillic_dzhe = C.CLUTTER_KEY_Cyrillic_dzhe
const CLUTTER_KEY_Next_Virtual_Screen = C.CLUTTER_KEY_Next_Virtual_Screen
const CLUTTER_TEXT_DIRECTION_RTL = C.CLUTTER_TEXT_DIRECTION_RTL
const CLUTTER_Hangul_Start = C.CLUTTER_Hangul_Start
const CLUTTER_abrevegrave = C.CLUTTER_abrevegrave
const CLUTTER_braille_dots_12378 = C.CLUTTER_braille_dots_12378
const CLUTTER_Arabic_maddaonalef = C.CLUTTER_Arabic_maddaonalef
const CLUTTER_KEY_equal = C.CLUTTER_KEY_equal
const CLUTTER_KEY_Babovedot = C.CLUTTER_KEY_Babovedot
const CLUTTER_dead_psili = C.CLUTTER_dead_psili
const CLUTTER_AudioRecord = C.CLUTTER_AudioRecord
const CLUTTER_braille_dots_123478 = C.CLUTTER_braille_dots_123478
const CLUTTER_KEY_Scircumflex = C.CLUTTER_KEY_Scircumflex
const CLUTTER_KEY_ch = C.CLUTTER_KEY_ch
const CLUTTER_KEY_Cyrillic_ZHE_descender = C.CLUTTER_KEY_Cyrillic_ZHE_descender
const CLUTTER_KEY_Armenian_LYUN = C.CLUTTER_KEY_Armenian_LYUN
const CLUTTER_hebrew_mem = C.CLUTTER_hebrew_mem
const CLUTTER_KEY_Hangul_PieubSios = C.CLUTTER_KEY_Hangul_PieubSios
const CLUTTER_KEY_Arabic_thal = C.CLUTTER_KEY_Arabic_thal
const CLUTTER_KEY_Excel = C.CLUTTER_KEY_Excel
const CLUTTER_KEY_Igrave = C.CLUTTER_KEY_Igrave
const CLUTTER_KEY_hairspace = C.CLUTTER_KEY_hairspace
const CLUTTER_breve = C.CLUTTER_breve
const CLUTTER_KEY_Reply = C.CLUTTER_KEY_Reply
const CLUTTER_FEATURE_STAGE_STATIC = C.CLUTTER_FEATURE_STAGE_STATIC
const CLUTTER_KEY_approximate = C.CLUTTER_KEY_approximate
const CLUTTER_permille = C.CLUTTER_permille
const CLUTTER_hebrew_yod = C.CLUTTER_hebrew_yod
const CLUTTER_KEY_Copy = C.CLUTTER_KEY_Copy
const CLUTTER_COLOR_BUTTER_LIGHT = C.CLUTTER_COLOR_BUTTER_LIGHT
const CLUTTER_KEY_ISO_Continuous_Underline = C.CLUTTER_KEY_ISO_Continuous_Underline
const CLUTTER_Ukrainian_YI = C.CLUTTER_Ukrainian_YI
const CLUTTER_KEY_Sinh_ma = C.CLUTTER_KEY_Sinh_ma
const CLUTTER_KEY_Thai_paiyannoi = C.CLUTTER_KEY_Thai_paiyannoi
const CLUTTER_KEY_Cyrillic_hardsign = C.CLUTTER_KEY_Cyrillic_hardsign
const CLUTTER_UWB = C.CLUTTER_UWB
const CLUTTER_ZoomIn = C.CLUTTER_ZoomIn
const CLUTTER_Cyrillic_SHHA = C.CLUTTER_Cyrillic_SHHA
const CLUTTER_KEY_braille_dots_5678 = C.CLUTTER_KEY_braille_dots_5678
const CLUTTER_KEY_Greek_mu = C.CLUTTER_KEY_Greek_mu
const CLUTTER_KEY_kana_tu = C.CLUTTER_KEY_kana_tu
const CLUTTER_ifonlyif = C.CLUTTER_ifonlyif
const CLUTTER_KEY_Wdiaeresis = C.CLUTTER_KEY_Wdiaeresis
const CLUTTER_KEY_Byelorussian_shortu = C.CLUTTER_KEY_Byelorussian_shortu
const CLUTTER_KEY_Hangul_J_NieunJieuj = C.CLUTTER_KEY_Hangul_J_NieunJieuj
const CLUTTER_KEY_braille_dots_1234 = C.CLUTTER_KEY_braille_dots_1234
const CLUTTER_Sacute = C.CLUTTER_Sacute
const CLUTTER_dead_belowcomma = C.CLUTTER_dead_belowcomma
const CLUTTER_KEY_Armenian_at = C.CLUTTER_KEY_Armenian_at
const CLUTTER_KEY_braille_dots_128 = C.CLUTTER_KEY_braille_dots_128
const CLUTTER_KEY_braille_dots_126 = C.CLUTTER_KEY_braille_dots_126
const CLUTTER_KEY_braille_dots_127 = C.CLUTTER_KEY_braille_dots_127
const CLUTTER_KEY_braille_dots_124 = C.CLUTTER_KEY_braille_dots_124
const CLUTTER_KEY_Thai_fofan = C.CLUTTER_KEY_Thai_fofan
const CLUTTER_KEY_degree = C.CLUTTER_KEY_degree
const CLUTTER_ISO_Level5_Shift = C.CLUTTER_ISO_Level5_Shift
const CLUTTER_rightsinglequotemark = C.CLUTTER_rightsinglequotemark
const CLUTTER_KEY_braille_dots_123678 = C.CLUTTER_KEY_braille_dots_123678
const CLUTTER_ETH = C.CLUTTER_ETH
const CLUTTER_KEY_Ycircumflex = C.CLUTTER_KEY_Ycircumflex
const CLUTTER_KEY_fabovedot = C.CLUTTER_KEY_fabovedot
const CLUTTER_Lcedilla = C.CLUTTER_Lcedilla
const CLUTTER_ISO_Level5_Lock = C.CLUTTER_ISO_Level5_Lock
const CLUTTER_Scedilla = C.CLUTTER_Scedilla
const CLUTTER_Thai_dochada = C.CLUTTER_Thai_dochada
const CLUTTER_Hangul_J_PanSios = C.CLUTTER_Hangul_J_PanSios
const CLUTTER_Greek_pi = C.CLUTTER_Greek_pi
const CLUTTER_Greek_UPSILON = C.CLUTTER_Greek_UPSILON
const CLUTTER_KEY_abelowdot = C.CLUTTER_KEY_abelowdot
const CLUTTER_KEY_zacute = C.CLUTTER_KEY_zacute
const CLUTTER_acircumflextilde = C.CLUTTER_acircumflextilde
const CLUTTER_COLOR_SKY_BLUE_DARK = C.CLUTTER_COLOR_SKY_BLUE_DARK
const CLUTTER_KEY_ycircumflex = C.CLUTTER_KEY_ycircumflex
const CLUTTER_Hangul_OE = C.CLUTTER_Hangul_OE
const CLUTTER_KEY_ampersand = C.CLUTTER_KEY_ampersand
const CLUTTER_SCHWA = C.CLUTTER_SCHWA
const CLUTTER_KEY_Armenian_yentamna = C.CLUTTER_KEY_Armenian_yentamna
const CLUTTER_rightpointer = C.CLUTTER_rightpointer
const CLUTTER_upshoe = C.CLUTTER_upshoe
const CLUTTER_KEY_Hangul_J_RieulTieut = C.CLUTTER_KEY_Hangul_J_RieulTieut
const CLUTTER_Hangul_Cieuc = C.CLUTTER_Hangul_Cieuc
const CLUTTER_Arabic_madda_above = C.CLUTTER_Arabic_madda_above
const CLUTTER_Arabic_heh_doachashmee = C.CLUTTER_Arabic_heh_doachashmee
const CLUTTER_KEY_hebrew_gimmel = C.CLUTTER_KEY_hebrew_gimmel
const CLUTTER_KP_Prior = C.CLUTTER_KP_Prior
const CLUTTER_braille_dots_457 = C.CLUTTER_braille_dots_457
const CLUTTER_implies = C.CLUTTER_implies
const CLUTTER_KEY_Alt_L = C.CLUTTER_KEY_Alt_L
const CLUTTER_diaeresis = C.CLUTTER_diaeresis
const CLUTTER_braille_dots_458 = C.CLUTTER_braille_dots_458
const CLUTTER_c_h = C.CLUTTER_c_h
const CLUTTER_Calendar = C.CLUTTER_Calendar
const CLUTTER_JOYSTICK_DEVICE = C.CLUTTER_JOYSTICK_DEVICE
const CLUTTER_KEY_braille_dots_145678 = C.CLUTTER_KEY_braille_dots_145678
const CLUTTER_KEY_Greek_sigma = C.CLUTTER_KEY_Greek_sigma
const CLUTTER_comma = C.CLUTTER_comma
const CLUTTER_3270_Right2 = C.CLUTTER_3270_Right2
const CLUTTER_KEY_Alt_R = C.CLUTTER_KEY_Alt_R
const CLUTTER_KEY_ocircumflexbelowdot = C.CLUTTER_KEY_ocircumflexbelowdot
const CLUTTER_KEY_KP_Decimal = C.CLUTTER_KEY_KP_Decimal
const CLUTTER_KEY_Greek_ZETA = C.CLUTTER_KEY_Greek_ZETA
const CLUTTER_braille_dots_25 = C.CLUTTER_braille_dots_25
const CLUTTER_Sinh_o2 = C.CLUTTER_Sinh_o2
const CLUTTER_downcaret = C.CLUTTER_downcaret
const CLUTTER_KEY_Armenian_lyun = C.CLUTTER_KEY_Armenian_lyun
const CLUTTER_KEY_Thai_sorusi = C.CLUTTER_KEY_Thai_sorusi
const CLUTTER_KEY_Hangul_YU = C.CLUTTER_KEY_Hangul_YU
const CLUTTER_Gcircumflex = C.CLUTTER_Gcircumflex
const CLUTTER_Sinh_uu2 = C.CLUTTER_Sinh_uu2
const CLUTTER_braille_dots_148 = C.CLUTTER_braille_dots_148
const CLUTTER_slash = C.CLUTTER_slash
const CLUTTER_KEY_3270_Quit = C.CLUTTER_KEY_3270_Quit
const CLUTTER_KEY_braille_dots_23457 = C.CLUTTER_KEY_braille_dots_23457
const CLUTTER_KEY_braille_dots_23456 = C.CLUTTER_KEY_braille_dots_23456
const CLUTTER_3270_Reset = C.CLUTTER_3270_Reset
const CLUTTER_x = C.CLUTTER_x
const CLUTTER_KEY_Odoubleacute = C.CLUTTER_KEY_Odoubleacute
const CLUTTER_KEY_Tabovedot = C.CLUTTER_KEY_Tabovedot
const CLUTTER_Zen_Koho = C.CLUTTER_Zen_Koho
const CLUTTER_braille_dots_146 = C.CLUTTER_braille_dots_146
const CLUTTER_braille_dots_147 = C.CLUTTER_braille_dots_147
const CLUTTER_MenuPB = C.CLUTTER_MenuPB
const CLUTTER_KEY_Cyrillic_ha_descender = C.CLUTTER_KEY_Cyrillic_ha_descender
const CLUTTER_KEY_Hangul_SunkyeongeumMieum = C.CLUTTER_KEY_Hangul_SunkyeongeumMieum
const CLUTTER_Igrave = C.CLUTTER_Igrave
const CLUTTER_identical = C.CLUTTER_identical
const CLUTTER_KEY_braille_dots_12345678 = C.CLUTTER_KEY_braille_dots_12345678
const CLUTTER_KEY_ISO_Fast_Cursor_Up = C.CLUTTER_KEY_ISO_Fast_Cursor_Up
const CLUTTER_COLOR_ALUMINIUM_6 = C.CLUTTER_COLOR_ALUMINIUM_6
const CLUTTER_braille_dots_1236 = C.CLUTTER_braille_dots_1236
const CLUTTER_Excel = C.CLUTTER_Excel
const CLUTTER_KEY_minus = C.CLUTTER_KEY_minus
const CLUTTER_KEY_tabovedot = C.CLUTTER_KEY_tabovedot
const CLUTTER_KEY_horizlinescan1 = C.CLUTTER_KEY_horizlinescan1
const CLUTTER_ISO_Lock = C.CLUTTER_ISO_Lock
const CLUTTER_KEY_horizlinescan3 = C.CLUTTER_KEY_horizlinescan3
const CLUTTER_braille_dots_2678 = C.CLUTTER_braille_dots_2678
const CLUTTER_Henkan_Mode = C.CLUTTER_Henkan_Mode
const CLUTTER_KEY_horizlinescan7 = C.CLUTTER_KEY_horizlinescan7
const CLUTTER_KP_Subtract = C.CLUTTER_KP_Subtract
const CLUTTER_Hangul_Banja = C.CLUTTER_Hangul_Banja
const CLUTTER_Thai_saraae = C.CLUTTER_Thai_saraae
const CLUTTER_KEY_Cyrillic_HA = C.CLUTTER_KEY_Cyrillic_HA
const CLUTTER_braille_dots_1235 = C.CLUTTER_braille_dots_1235
const CLUTTER_Thai_saraaa = C.CLUTTER_Thai_saraaa
const CLUTTER_Hangul = C.CLUTTER_Hangul
const CLUTTER_Begin = C.CLUTTER_Begin
const CLUTTER_KEY_hebrew_shin = C.CLUTTER_KEY_hebrew_shin
const CLUTTER_KEY_Armenian_ligature_ew = C.CLUTTER_KEY_Armenian_ligature_ew
const CLUTTER_KEY_braille_dots_258 = C.CLUTTER_KEY_braille_dots_258
const CLUTTER_Next = C.CLUTTER_Next
const CLUTTER_KEY_abovedot = C.CLUTTER_KEY_abovedot
const CLUTTER_KEY_lacute = C.CLUTTER_KEY_lacute
const CLUTTER_3270_AltCursor = C.CLUTTER_3270_AltCursor
const CLUTTER_braille_dots_23456 = C.CLUTTER_braille_dots_23456
const CLUTTER_KP_Page_Down = C.CLUTTER_KP_Page_Down
const CLUTTER_Start = C.CLUTTER_Start
const CLUTTER_EASE_OUT_EXPO = C.CLUTTER_EASE_OUT_EXPO
const CLUTTER_dagger = C.CLUTTER_dagger
const CLUTTER_ISO_Release_Margin_Right = C.CLUTTER_ISO_Release_Margin_Right
const CLUTTER_braille_dots_23458 = C.CLUTTER_braille_dots_23458
const CLUTTER_KEY_sabovedot = C.CLUTTER_KEY_sabovedot
const CLUTTER_braille_dots_2347 = C.CLUTTER_braille_dots_2347
const CLUTTER_KEY_rightsinglequotemark = C.CLUTTER_KEY_rightsinglequotemark
const CLUTTER_Ccaron = C.CLUTTER_Ccaron
const CLUTTER_Greek_CHI = C.CLUTTER_Greek_CHI
const CLUTTER_OFFSCREEN_REDIRECT_ALWAYS = C.CLUTTER_OFFSCREEN_REDIRECT_ALWAYS
const CLUTTER_KEY_Cyrillic_de = C.CLUTTER_KEY_Cyrillic_de
const CLUTTER_ybelowdot = C.CLUTTER_ybelowdot
const CLUTTER_KEY_Georgian_har = C.CLUTTER_KEY_Georgian_har
const CLUTTER_KEY_seveneighths = C.CLUTTER_KEY_seveneighths
const CLUTTER_Babovedot = C.CLUTTER_Babovedot
const CLUTTER_Sinh_ga = C.CLUTTER_Sinh_ga
const CLUTTER_CLIENT_MESSAGE = C.CLUTTER_CLIENT_MESSAGE
const CLUTTER_FEATURE_TEXTURE_NPOT = C.CLUTTER_FEATURE_TEXTURE_NPOT
const CLUTTER_KEY_wgrave = C.CLUTTER_KEY_wgrave
const CLUTTER_KEY_parenleft = C.CLUTTER_KEY_parenleft
const CLUTTER_onesubscript = C.CLUTTER_onesubscript
const CLUTTER_KEY_Georgian_hae = C.CLUTTER_KEY_Georgian_hae
const CLUTTER_braille_dots_2346 = C.CLUTTER_braille_dots_2346
const CLUTTER_uhorntilde = C.CLUTTER_uhorntilde
const CLUTTER_KEY_braille_dots_68 = C.CLUTTER_KEY_braille_dots_68
const CLUTTER_KEY_Thai_wowaen = C.CLUTTER_KEY_Thai_wowaen
const CLUTTER_KEY_Ydiaeresis = C.CLUTTER_KEY_Ydiaeresis
const CLUTTER_KEY_Greek_switch = C.CLUTTER_KEY_Greek_switch
const CLUTTER_FrameForward = C.CLUTTER_FrameForward
const CLUTTER_Armenian_je = C.CLUTTER_Armenian_je
const CLUTTER_KEY_braille_dots_1467 = C.CLUTTER_KEY_braille_dots_1467
const CLUTTER_dead_abovedot = C.CLUTTER_dead_abovedot
const CLUTTER_Thai_lekhok = C.CLUTTER_Thai_lekhok
const CLUTTER_Arabic_lam = C.CLUTTER_Arabic_lam
const CLUTTER_KEY_PowerOff = C.CLUTTER_KEY_PowerOff
const CLUTTER_Hangul_J_Ieung = C.CLUTTER_Hangul_J_Ieung
const CLUTTER_KEY_ISO_Prev_Group_Lock = C.CLUTTER_KEY_ISO_Prev_Group_Lock
const CLUTTER_dead_breve = C.CLUTTER_dead_breve
const CLUTTER_semivoicedsound = C.CLUTTER_semivoicedsound
const CLUTTER_braille_dots_3478 = C.CLUTTER_braille_dots_3478
const CLUTTER_KEY_Cyrillic_ghe = C.CLUTTER_KEY_Cyrillic_ghe
const CLUTTER_Next_VMode = C.CLUTTER_Next_VMode
const CLUTTER_overbar = C.CLUTTER_overbar
const CLUTTER_KEY_threesubscript = C.CLUTTER_KEY_threesubscript
const CLUTTER_KEY_voicedsound = C.CLUTTER_KEY_voicedsound
const CLUTTER_KEY_Hangul_Romaja = C.CLUTTER_KEY_Hangul_Romaja
const CLUTTER_KEY_Cyrillic_ze = C.CLUTTER_KEY_Cyrillic_ze
const CLUTTER_KEY_hebrew_qoph = C.CLUTTER_KEY_hebrew_qoph
const CLUTTER_KEY_Uhornacute = C.CLUTTER_KEY_Uhornacute
const CLUTTER_News = C.CLUTTER_News
const CLUTTER_KEY_Ntilde = C.CLUTTER_KEY_Ntilde
const CLUTTER_FrameBack = C.CLUTTER_FrameBack
const CLUTTER_Spell = C.CLUTTER_Spell
const CLUTTER_downstile = C.CLUTTER_downstile
const CLUTTER_Thai_lekkao = C.CLUTTER_Thai_lekkao
const CLUTTER_enopensquarebullet = C.CLUTTER_enopensquarebullet
const CLUTTER_KEY_marker = C.CLUTTER_KEY_marker
const CLUTTER_AudioPause = C.CLUTTER_AudioPause
const CLUTTER_KEY_Hangul_J_SsangSios = C.CLUTTER_KEY_Hangul_J_SsangSios
const CLUTTER_Arabic_peh = C.CLUTTER_Arabic_peh
const CLUTTER_KEY_Cyrillic_shorti = C.CLUTTER_KEY_Cyrillic_shorti
const CLUTTER_abreveacute = C.CLUTTER_abreveacute
const CLUTTER_KEY_lefttack = C.CLUTTER_KEY_lefttack
const CLUTTER_dintegral = C.CLUTTER_dintegral
const CLUTTER_COLOR_PLUM = C.CLUTTER_COLOR_PLUM
const CLUTTER_Thai_sosua = C.CLUTTER_Thai_sosua
const CLUTTER_r = C.CLUTTER_r
const CLUTTER_dead_abovereversedcomma = C.CLUTTER_dead_abovereversedcomma
const CLUTTER_braille_dots_134678 = C.CLUTTER_braille_dots_134678
const CLUTTER_KEY_Hangul_J_Hieuh = C.CLUTTER_KEY_Hangul_J_Hieuh
const CLUTTER_Adiaeresis = C.CLUTTER_Adiaeresis
const CLUTTER_3270_Jump = C.CLUTTER_3270_Jump
const CLUTTER_KEY_braille_dots_4 = C.CLUTTER_KEY_braille_dots_4
const CLUTTER_KEY_braille_dots_3 = C.CLUTTER_KEY_braille_dots_3
const CLUTTER_KEY_braille_dots_2 = C.CLUTTER_KEY_braille_dots_2
const CLUTTER_ISO_Partial_Space_Left = C.CLUTTER_ISO_Partial_Space_Left
const CLUTTER_KEY_braille_dots_1268 = C.CLUTTER_KEY_braille_dots_1268
const CLUTTER_TEXTURE_ERROR_OUT_OF_MEMORY = C.CLUTTER_TEXTURE_ERROR_OUT_OF_MEMORY
const CLUTTER_KEY_enopensquarebullet = C.CLUTTER_KEY_enopensquarebullet
const CLUTTER_KEY_ISO_Level3_Shift = C.CLUTTER_KEY_ISO_Level3_Shift
const CLUTTER_KEY_braille_dots_8 = C.CLUTTER_KEY_braille_dots_8
const CLUTTER_braille_dots_1456 = C.CLUTTER_braille_dots_1456
const CLUTTER_braille_dots_1457 = C.CLUTTER_braille_dots_1457
const CLUTTER_KEY_Georgian_kan = C.CLUTTER_KEY_Georgian_kan
const CLUTTER_KEY_ugrave = C.CLUTTER_KEY_ugrave
const CLUTTER_Cyrillic_o_bar = C.CLUTTER_Cyrillic_o_bar
const CLUTTER_ocircumflexhook = C.CLUTTER_ocircumflexhook
const CLUTTER_Greek_OMEGA = C.CLUTTER_Greek_OMEGA
const CLUTTER_braille_dots_1458 = C.CLUTTER_braille_dots_1458
const CLUTTER_zerosubscript = C.CLUTTER_zerosubscript
const CLUTTER_KEY_Sinh_rii = C.CLUTTER_KEY_Sinh_rii
const CLUTTER_KEY_Arabic_9 = C.CLUTTER_KEY_Arabic_9
const CLUTTER_KEY_Arabic_8 = C.CLUTTER_KEY_Arabic_8
const CLUTTER_ohorngrave = C.CLUTTER_ohorngrave
const CLUTTER_KEY_ecircumflexhook = C.CLUTTER_KEY_ecircumflexhook
const CLUTTER_KEY_Arabic_3 = C.CLUTTER_KEY_Arabic_3
const CLUTTER_KEY_Arabic_2 = C.CLUTTER_KEY_Arabic_2
const CLUTTER_KEY_Arabic_1 = C.CLUTTER_KEY_Arabic_1
const CLUTTER_KEY_Arabic_0 = C.CLUTTER_KEY_Arabic_0
const CLUTTER_KEY_Arabic_7 = C.CLUTTER_KEY_Arabic_7
const CLUTTER_KEY_Arabic_6 = C.CLUTTER_KEY_Arabic_6
const CLUTTER_KEY_Arabic_5 = C.CLUTTER_KEY_Arabic_5
const CLUTTER_KEY_Arabic_4 = C.CLUTTER_KEY_Arabic_4
const CLUTTER_KEY_Arabic_yeh_baree = C.CLUTTER_KEY_Arabic_yeh_baree
const CLUTTER_KEY_Thai_nonu = C.CLUTTER_KEY_Thai_nonu
const CLUTTER_KEY_Macedonia_GJE = C.CLUTTER_KEY_Macedonia_GJE
const CLUTTER_Thai_phophan = C.CLUTTER_Thai_phophan
const CLUTTER_KEY_icircumflex = C.CLUTTER_KEY_icircumflex
const CLUTTER_ISO_Enter = C.CLUTTER_ISO_Enter
const CLUTTER_KEY_braille_dots_12567 = C.CLUTTER_KEY_braille_dots_12567
const CLUTTER_KEY_braille_dots_2456 = C.CLUTTER_KEY_braille_dots_2456
const CLUTTER_LaunchD = C.CLUTTER_LaunchD
const CLUTTER_KEY_braille_dots_13568 = C.CLUTTER_KEY_braille_dots_13568
const CLUTTER_dead_e = C.CLUTTER_dead_e
const CLUTTER_KEY_braille_dots_34568 = C.CLUTTER_KEY_braille_dots_34568
const CLUTTER_KEY_Cyrillic_YERU = C.CLUTTER_KEY_Cyrillic_YERU
const CLUTTER_Georgian_nar = C.CLUTTER_Georgian_nar
const CLUTTER_KEY_Hangul_WAE = C.CLUTTER_KEY_Hangul_WAE
const CLUTTER_KEY_Adiaeresis = C.CLUTTER_KEY_Adiaeresis
const CLUTTER_KEY_u = C.CLUTTER_KEY_u
const CLUTTER_KEY_braille_dots_12568 = C.CLUTTER_KEY_braille_dots_12568
const CLUTTER_KEY_sevensuperior = C.CLUTTER_KEY_sevensuperior
const CLUTTER_MICRO_VERSION = C.CLUTTER_MICRO_VERSION
const CLUTTER_Serbian_nje = C.CLUTTER_Serbian_nje
const CLUTTER_KEY_SingleCandidate = C.CLUTTER_KEY_SingleCandidate
const CLUTTER_KEY_Armenian_JE = C.CLUTTER_KEY_Armenian_JE
const CLUTTER_itilde = C.CLUTTER_itilde
const CLUTTER_Cyrillic_KA_vertstroke = C.CLUTTER_Cyrillic_KA_vertstroke
const CLUTTER_braille_dots_1467 = C.CLUTTER_braille_dots_1467
const CLUTTER_KEY_ISO_Partial_Space_Left = C.CLUTTER_KEY_ISO_Partial_Space_Left
const CLUTTER_KEY_Itilde = C.CLUTTER_KEY_Itilde
const CLUTTER_KEY_braille_dots_124578 = C.CLUTTER_KEY_braille_dots_124578
const CLUTTER_braille_dots_2348 = C.CLUTTER_braille_dots_2348
const CLUTTER_Sinh_kunddaliya = C.CLUTTER_Sinh_kunddaliya
const CLUTTER_Thai_hohip = C.CLUTTER_Thai_hohip
const CLUTTER_KEY_kana_openingbracket = C.CLUTTER_KEY_kana_openingbracket
const CLUTTER_Thai_saraaimaimalai = C.CLUTTER_Thai_saraaimaimalai
const CLUTTER_Hangul_SsangJieuj = C.CLUTTER_Hangul_SsangJieuj
const CLUTTER_KEY_Cyrillic_es = C.CLUTTER_KEY_Cyrillic_es
const CLUTTER_Xfer = C.CLUTTER_Xfer
const CLUTTER_KEY_rightmiddlecurlybrace = C.CLUTTER_KEY_rightmiddlecurlybrace
const CLUTTER_KEY_C_H = C.CLUTTER_KEY_C_H
const CLUTTER_sacute = C.CLUTTER_sacute
const CLUTTER_KEY_braille_dots_12367 = C.CLUTTER_KEY_braille_dots_12367
const CLUTTER_KEY_Acircumflextilde = C.CLUTTER_KEY_Acircumflextilde
const CLUTTER_KEY_Hangul_RieulPhieuf = C.CLUTTER_KEY_Hangul_RieulPhieuf
const CLUTTER_KEY_xabovedot = C.CLUTTER_KEY_xabovedot
const CLUTTER_KEY_infinity = C.CLUTTER_KEY_infinity
const CLUTTER_Sinh_u2 = C.CLUTTER_Sinh_u2
const CLUTTER_KEY_topleftsqbracket = C.CLUTTER_KEY_topleftsqbracket
const CLUTTER_KEY_emfilledrect = C.CLUTTER_KEY_emfilledrect
const CLUTTER_braille_dots_34568 = C.CLUTTER_braille_dots_34568
const CLUTTER_KEY_Arabic_feh = C.CLUTTER_KEY_Arabic_feh
const CLUTTER_braille_dots_124 = C.CLUTTER_braille_dots_124
const CLUTTER_KEY_3270_Test = C.CLUTTER_KEY_3270_Test
const CLUTTER_LEAVE = C.CLUTTER_LEAVE
const CLUTTER_KEY_3270_Play = C.CLUTTER_KEY_3270_Play
const CLUTTER_STAGE_STATE = C.CLUTTER_STAGE_STATE
const CLUTTER_KEY_therefore = C.CLUTTER_KEY_therefore
const CLUTTER_Greek_EPSILON = C.CLUTTER_Greek_EPSILON
const CLUTTER_KEY_Sinh_lu = C.CLUTTER_KEY_Sinh_lu
const CLUTTER_KEY_wacute = C.CLUTTER_KEY_wacute
const CLUTTER_KEY_Greek_psi = C.CLUTTER_KEY_Greek_psi
const CLUTTER_KEY_openstar = C.CLUTTER_KEY_openstar
const CLUTTER_KEY_C_h = C.CLUTTER_KEY_C_h
const CLUTTER_kana_RI = C.CLUTTER_kana_RI
const CLUTTER_Dstroke = C.CLUTTER_Dstroke
const CLUTTER_dead_belowdot = C.CLUTTER_dead_belowdot
const CLUTTER_Itilde = C.CLUTTER_Itilde
const CLUTTER_kana_RE = C.CLUTTER_kana_RE
const CLUTTER_KEY_Ocaron = C.CLUTTER_KEY_Ocaron
const CLUTTER_kana_RA = C.CLUTTER_kana_RA
const CLUTTER_KEY_Armenian_tyun = C.CLUTTER_KEY_Armenian_tyun
const CLUTTER_KEY_ohorn = C.CLUTTER_KEY_ohorn
const CLUTTER_KP_Enter = C.CLUTTER_KP_Enter
const CLUTTER_KEY_Greek_zeta = C.CLUTTER_KEY_Greek_zeta
const CLUTTER_KEY_braille_dots_357 = C.CLUTTER_KEY_braille_dots_357
const CLUTTER_KEY_backslash = C.CLUTTER_KEY_backslash
const CLUTTER_KEY_Armenian_VO = C.CLUTTER_KEY_Armenian_VO
const CLUTTER_3270_ExSelect = C.CLUTTER_3270_ExSelect
const CLUTTER_ohornhook = C.CLUTTER_ohornhook
const CLUTTER_Help = C.CLUTTER_Help
const CLUTTER_KEY_Armenian_ben = C.CLUTTER_KEY_Armenian_ben
const CLUTTER_kana_SU = C.CLUTTER_kana_SU
const CLUTTER_KEY_bott = C.CLUTTER_KEY_bott
const CLUTTER_Hangul_J_Dikeud = C.CLUTTER_Hangul_J_Dikeud
const CLUTTER_Hangul_Sios = C.CLUTTER_Hangul_Sios
const CLUTTER_Umacron = C.CLUTTER_Umacron
const CLUTTER_CURRENT_TIME = C.CLUTTER_CURRENT_TIME
const CLUTTER_KEY_Farsi_7 = C.CLUTTER_KEY_Farsi_7
const CLUTTER_ISO_Fast_Cursor_Down = C.CLUTTER_ISO_Fast_Cursor_Down
const CLUTTER_KEY_Georgian_khar = C.CLUTTER_KEY_Georgian_khar
const CLUTTER_Hangul_Jieuj = C.CLUTTER_Hangul_Jieuj
const CLUTTER_Greek_etaaccent = C.CLUTTER_Greek_etaaccent
const CLUTTER_KEY_figdash = C.CLUTTER_KEY_figdash
const CLUTTER_Arabic_tcheh = C.CLUTTER_Arabic_tcheh
const CLUTTER_BUTTON1_MASK = C.CLUTTER_BUTTON1_MASK
const CLUTTER_KEY_Sinh_ra = C.CLUTTER_KEY_Sinh_ra
const CLUTTER_KP_Add = C.CLUTTER_KP_Add
const CLUTTER_KEY_sacute = C.CLUTTER_KEY_sacute
const CLUTTER_KEY_braille_dots_23567 = C.CLUTTER_KEY_braille_dots_23567
const CLUTTER_LiraSign = C.CLUTTER_LiraSign
const CLUTTER_ncedilla = C.CLUTTER_ncedilla
const CLUTTER_KEY_Sinh_ri = C.CLUTTER_KEY_Sinh_ri
const CLUTTER_KEY_Hangul_AraeAE = C.CLUTTER_KEY_Hangul_AraeAE
const CLUTTER_Arabic_zah = C.CLUTTER_Arabic_zah
const CLUTTER_braille_dots_245 = C.CLUTTER_braille_dots_245
const CLUTTER_KEY_Armenian_gim = C.CLUTTER_KEY_Armenian_gim
const CLUTTER_Control_L = C.CLUTTER_Control_L
const CLUTTER_KEY_Arabic_rreh = C.CLUTTER_KEY_Arabic_rreh
const CLUTTER_Sinh_dhha = C.CLUTTER_Sinh_dhha
const CLUTTER_KEY_abrevehook = C.CLUTTER_KEY_abrevehook
const CLUTTER_vt = C.CLUTTER_vt
const CLUTTER_Muhenkan = C.CLUTTER_Muhenkan
const CLUTTER_ScrollDown = C.CLUTTER_ScrollDown
const CLUTTER_Hangul_J_RieulPieub = C.CLUTTER_Hangul_J_RieulPieub
const CLUTTER_KEY_Hangul_J_Pieub = C.CLUTTER_KEY_Hangul_J_Pieub
const CLUTTER_KEY_WebCam = C.CLUTTER_KEY_WebCam
const CLUTTER_Thai_sorusi = C.CLUTTER_Thai_sorusi
const CLUTTER_braille_dots_456 = C.CLUTTER_braille_dots_456
const CLUTTER_KEY_Cyrillic_nje = C.CLUTTER_KEY_Cyrillic_nje
const CLUTTER_Control_R = C.CLUTTER_Control_R
const CLUTTER_musicalflat = C.CLUTTER_musicalflat
const CLUTTER_GRAVITY_EAST = C.CLUTTER_GRAVITY_EAST
const CLUTTER_KEY_Hangul_J_Kiyeog = C.CLUTTER_KEY_Hangul_J_Kiyeog
const CLUTTER_KEY_Sinh_sha = C.CLUTTER_KEY_Sinh_sha
const CLUTTER_INTERPOLATION_LINEAR = C.CLUTTER_INTERPOLATION_LINEAR
const CLUTTER_KEY_Hangul_RieulMieum = C.CLUTTER_KEY_Hangul_RieulMieum
const CLUTTER_INIT_ERROR_INTERNAL = C.CLUTTER_INIT_ERROR_INTERNAL
const CLUTTER_ORIENTATION_HORIZONTAL = C.CLUTTER_ORIENTATION_HORIZONTAL
const CLUTTER_EASE_IN_QUAD = C.CLUTTER_EASE_IN_QUAD
const CLUTTER_Armenian_lyun = C.CLUTTER_Armenian_lyun
const CLUTTER_Armenian_khe = C.CLUTTER_Armenian_khe
const CLUTTER_ROTATE_CCW = C.CLUTTER_ROTATE_CCW
const CLUTTER_KEY_Armenian_question = C.CLUTTER_KEY_Armenian_question
const CLUTTER_TouchpadToggle = C.CLUTTER_TouchpadToggle
const CLUTTER_SNAP_EDGE_TOP = C.CLUTTER_SNAP_EDGE_TOP
const CLUTTER_braille_dots_156 = C.CLUTTER_braille_dots_156
const CLUTTER_KEY_TouchpadOn = C.CLUTTER_KEY_TouchpadOn
const CLUTTER_Yellow = C.CLUTTER_Yellow
const CLUTTER_leftmiddlecurlybrace = C.CLUTTER_leftmiddlecurlybrace
const CLUTTER_LogGrabInfo = C.CLUTTER_LogGrabInfo
const CLUTTER_KEY_upleftcorner = C.CLUTTER_KEY_upleftcorner
const CLUTTER_Greek_PSI = C.CLUTTER_Greek_PSI
const CLUTTER_leftarrow = C.CLUTTER_leftarrow
const CLUTTER_KEY_Thai_ru = C.CLUTTER_KEY_Thai_ru
const CLUTTER_KEY_braille_dots_138 = C.CLUTTER_KEY_braille_dots_138
const CLUTTER_KEY_OpenURL = C.CLUTTER_KEY_OpenURL
const CLUTTER_script_switch = C.CLUTTER_script_switch
const CLUTTER_KEY_braille_dots_24678 = C.CLUTTER_KEY_braille_dots_24678
const CLUTTER_braille_dots_1234578 = C.CLUTTER_braille_dots_1234578
const CLUTTER_Eject = C.CLUTTER_Eject
const CLUTTER_KEY_braille_dots_135 = C.CLUTTER_KEY_braille_dots_135
const CLUTTER_KEY_braille_dots_134 = C.CLUTTER_KEY_braille_dots_134
const CLUTTER_Armenian_NU = C.CLUTTER_Armenian_NU
const CLUTTER_KEY_braille_dots_136 = C.CLUTTER_KEY_braille_dots_136
const CLUTTER_kana_ya = C.CLUTTER_kana_ya
const CLUTTER_dead_abovering = C.CLUTTER_dead_abovering
const CLUTTER_ninesubscript = C.CLUTTER_ninesubscript
const CLUTTER_KEY_Armenian_hyphen = C.CLUTTER_KEY_Armenian_hyphen
const CLUTTER_KEY_Switch_VT_6 = C.CLUTTER_KEY_Switch_VT_6
const CLUTTER_KEY_Cyrillic_IO = C.CLUTTER_KEY_Cyrillic_IO
const CLUTTER_KEY_Hangul_SsangSios = C.CLUTTER_KEY_Hangul_SsangSios
const CLUTTER_INIT_ERROR_UNKNOWN = C.CLUTTER_INIT_ERROR_UNKNOWN
const CLUTTER_KEY_Hangul_J_Khieuq = C.CLUTTER_KEY_Hangul_J_Khieuq
const CLUTTER_KEY_Search = C.CLUTTER_KEY_Search
const CLUTTER_KEY_Cyrillic_IE = C.CLUTTER_KEY_Cyrillic_IE
const CLUTTER_KEY_ccedilla = C.CLUTTER_KEY_ccedilla
const CLUTTER_KEY_Armenian_da = C.CLUTTER_KEY_Armenian_da
const CLUTTER_BIND_WIDTH = C.CLUTTER_BIND_WIDTH
const CLUTTER_KEY_Arabic_dammatan = C.CLUTTER_KEY_Arabic_dammatan
const CLUTTER_KEY_Sinh_jnya = C.CLUTTER_KEY_Sinh_jnya
const CLUTTER_KEY_dcaron = C.CLUTTER_KEY_dcaron
const CLUTTER_KEY_Greek_iotaaccentdieresis = C.CLUTTER_KEY_Greek_iotaaccentdieresis
const CLUTTER_C_H = C.CLUTTER_C_H
const CLUTTER_TouchpadOn = C.CLUTTER_TouchpadOn
const CLUTTER_ApplicationLeft = C.CLUTTER_ApplicationLeft
const CLUTTER_Right = C.CLUTTER_Right
const CLUTTER_KEY_downstile = C.CLUTTER_KEY_downstile
const CLUTTER_SCRIPT_ERROR_INVALID_VALUE = C.CLUTTER_SCRIPT_ERROR_INVALID_VALUE
const CLUTTER_KEY_ISO_Partial_Line_Down = C.CLUTTER_KEY_ISO_Partial_Line_Down
const CLUTTER_UserPB = C.CLUTTER_UserPB
const CLUTTER_dead_macron = C.CLUTTER_dead_macron
const CLUTTER_DRAG_AXIS_NONE = C.CLUTTER_DRAG_AXIS_NONE
const CLUTTER_Ohornbelowdot = C.CLUTTER_Ohornbelowdot
const CLUTTER_3270_Enter = C.CLUTTER_3270_Enter
const CLUTTER_KEY_braille_dots_2345678 = C.CLUTTER_KEY_braille_dots_2345678
const CLUTTER_KEY_Thai_khorakhang = C.CLUTTER_KEY_Thai_khorakhang
const CLUTTER_SCALING_FILTER_TRILINEAR = C.CLUTTER_SCALING_FILTER_TRILINEAR
const CLUTTER_Armenian_SHA = C.CLUTTER_Armenian_SHA
const CLUTTER_braille_dots_24678 = C.CLUTTER_braille_dots_24678
const CLUTTER_apostrophe = C.CLUTTER_apostrophe
const CLUTTER_Ohornacute = C.CLUTTER_Ohornacute
const CLUTTER_KEY_prescription = C.CLUTTER_KEY_prescription
const CLUTTER_C_h = C.CLUTTER_C_h
const CLUTTER_INIT_ERROR_THREADS = C.CLUTTER_INIT_ERROR_THREADS
const CLUTTER_Georgian_hie = C.CLUTTER_Georgian_hie
const CLUTTER_f = C.CLUTTER_f
const CLUTTER_Z_AXIS = C.CLUTTER_Z_AXIS
const CLUTTER_KEY_ohorngrave = C.CLUTTER_KEY_ohorngrave
const CLUTTER_Ygrave = C.CLUTTER_Ygrave
const CLUTTER_dead_circumflex = C.CLUTTER_dead_circumflex
const CLUTTER_BrightnessAdjust = C.CLUTTER_BrightnessAdjust
const CLUTTER_ohornbelowdot = C.CLUTTER_ohornbelowdot
const CLUTTER_TEXTURE_NONE = C.CLUTTER_TEXTURE_NONE
const CLUTTER_KEY_Hangul_J_NieunHieuh = C.CLUTTER_KEY_Hangul_J_NieunHieuh
const CLUTTER_ALLOCATION_NONE = C.CLUTTER_ALLOCATION_NONE
const CLUTTER_Sinh_la = C.CLUTTER_Sinh_la
const CLUTTER_union = C.CLUTTER_union
const CLUTTER_Uring = C.CLUTTER_Uring
const CLUTTER_KEY_Georgian_on = C.CLUTTER_KEY_Georgian_on
const CLUTTER_Arabic_hamzaonalef = C.CLUTTER_Arabic_hamzaonalef
const CLUTTER_Arabic_kasratan = C.CLUTTER_Arabic_kasratan
const CLUTTER_REPAINT_FLAGS_POST_PAINT = C.CLUTTER_REPAINT_FLAGS_POST_PAINT
const CLUTTER_ALIGN_BOTH = C.CLUTTER_ALIGN_BOTH
const CLUTTER_Sinh_aee2 = C.CLUTTER_Sinh_aee2
const CLUTTER_Ecircumflex = C.CLUTTER_Ecircumflex
const CLUTTER_braille_dots_157 = C.CLUTTER_braille_dots_157
const CLUTTER_Hangul_RieulKiyeog = C.CLUTTER_Hangul_RieulKiyeog
const CLUTTER_TEXTURE_QUALITY_MEDIUM = C.CLUTTER_TEXTURE_QUALITY_MEDIUM
const CLUTTER_KEY_braille_dots_6 = C.CLUTTER_KEY_braille_dots_6
const CLUTTER_fabovedot = C.CLUTTER_fabovedot
const CLUTTER_fivesixths = C.CLUTTER_fivesixths
const CLUTTER_KEY_Hangul_NieunJieuj = C.CLUTTER_KEY_Hangul_NieunJieuj
const CLUTTER_KEY_ISO_Group_Latch = C.CLUTTER_KEY_ISO_Group_Latch
const CLUTTER_rightanglebracket = C.CLUTTER_rightanglebracket
const CLUTTER_KEY_Hiragana_Katakana = C.CLUTTER_KEY_Hiragana_Katakana
const CLUTTER_KEY_Sinh_ndda = C.CLUTTER_KEY_Sinh_ndda
const CLUTTER_KEY_TouchpadToggle = C.CLUTTER_KEY_TouchpadToggle
const CLUTTER_Ukranian_yi = C.CLUTTER_Ukranian_yi
const CLUTTER_KEY_Cyrillic_yu = C.CLUTTER_KEY_Cyrillic_yu
const CLUTTER_Armenian_cha = C.CLUTTER_Armenian_cha
const CLUTTER_KP_Home = C.CLUTTER_KP_Home
const CLUTTER_R8 = C.CLUTTER_R8
const CLUTTER_R9 = C.CLUTTER_R9
const CLUTTER_KEY_Serbian_nje = C.CLUTTER_KEY_Serbian_nje
const CLUTTER_KEY_Menu = C.CLUTTER_KEY_Menu
const CLUTTER_R2 = C.CLUTTER_R2
const CLUTTER_R3 = C.CLUTTER_R3
const CLUTTER_R1 = C.CLUTTER_R1
const CLUTTER_R6 = C.CLUTTER_R6
const CLUTTER_R7 = C.CLUTTER_R7
const CLUTTER_R4 = C.CLUTTER_R4
const CLUTTER_KEY_Spell = C.CLUTTER_KEY_Spell
const CLUTTER_kana_middledot = C.CLUTTER_kana_middledot
const CLUTTER_KEY_Serbian_lje = C.CLUTTER_KEY_Serbian_lje
const CLUTTER_braille_dots_1247 = C.CLUTTER_braille_dots_1247
const CLUTTER_Georgian_shin = C.CLUTTER_Georgian_shin
const CLUTTER_c = C.CLUTTER_c
const CLUTTER_KEY_LaunchE = C.CLUTTER_KEY_LaunchE
const CLUTTER_Abrevetilde = C.CLUTTER_Abrevetilde
const CLUTTER_Last_Virtual_Screen = C.CLUTTER_Last_Virtual_Screen
const CLUTTER_ZOOM_X_AXIS = C.CLUTTER_ZOOM_X_AXIS
const CLUTTER_PATH_RELATIVE = C.CLUTTER_PATH_RELATIVE
const CLUTTER_Lacute = C.CLUTTER_Lacute
const CLUTTER_View = C.CLUTTER_View
const CLUTTER_Arabic_semicolon = C.CLUTTER_Arabic_semicolon
const CLUTTER_Jcircumflex = C.CLUTTER_Jcircumflex
const CLUTTER_Cyrillic_PE = C.CLUTTER_Cyrillic_PE
const CLUTTER_KEY_ISO_Discontinuous_Underline = C.CLUTTER_KEY_ISO_Discontinuous_Underline
const CLUTTER_KEY_RotationKB = C.CLUTTER_KEY_RotationKB
const CLUTTER_KEY_Pointer_DblClick5 = C.CLUTTER_KEY_Pointer_DblClick5
const CLUTTER_KEY_Pointer_DblClick4 = C.CLUTTER_KEY_Pointer_DblClick4
const CLUTTER_eng = C.CLUTTER_eng
const CLUTTER_FFrancSign = C.CLUTTER_FFrancSign
const CLUTTER_caron = C.CLUTTER_caron
const CLUTTER_KP_Space = C.CLUTTER_KP_Space
const CLUTTER_KEY_Armenian_vyun = C.CLUTTER_KEY_Armenian_vyun
const CLUTTER_KEY_careof = C.CLUTTER_KEY_careof
const CLUTTER_KEY_KP_Enter = C.CLUTTER_KEY_KP_Enter
const CLUTTER_Hangul_J_RieulHieuh = C.CLUTTER_Hangul_J_RieulHieuh
const CLUTTER_KEY_Tcaron = C.CLUTTER_KEY_Tcaron
const CLUTTER_KEY_ehook = C.CLUTTER_KEY_ehook
const CLUTTER_KEY_Armenian_ra = C.CLUTTER_KEY_Armenian_ra
const CLUTTER_currency = C.CLUTTER_currency
const CLUTTER_KEY_Armenian_re = C.CLUTTER_KEY_Armenian_re
const CLUTTER_KEY_Thai_maiyamok = C.CLUTTER_KEY_Thai_maiyamok
const CLUTTER_KEY_Abrevegrave = C.CLUTTER_KEY_Abrevegrave
const CLUTTER_KEY_Georgian_shin = C.CLUTTER_KEY_Georgian_shin
const CLUTTER_KEY_braille_dots_18 = C.CLUTTER_KEY_braille_dots_18
const CLUTTER_KEY_Hangul_J_KkogjiDalrinIeung = C.CLUTTER_KEY_Hangul_J_KkogjiDalrinIeung
const CLUTTER_KEY_braille_dots_16 = C.CLUTTER_KEY_braille_dots_16
const CLUTTER_KEY_braille_dots_15 = C.CLUTTER_KEY_braille_dots_15
const CLUTTER_KEY_braille_dots_14 = C.CLUTTER_KEY_braille_dots_14
const CLUTTER_KEY_braille_dots_13 = C.CLUTTER_KEY_braille_dots_13
const CLUTTER_KEY_braille_dots_12 = C.CLUTTER_KEY_braille_dots_12
const CLUTTER_leftanglebracket = C.CLUTTER_leftanglebracket
const CLUTTER_notsign = C.CLUTTER_notsign
const CLUTTER_KEY_Amacron = C.CLUTTER_KEY_Amacron
const CLUTTER_LaunchB = C.CLUTTER_LaunchB
const CLUTTER_KEY_thinspace = C.CLUTTER_KEY_thinspace
const CLUTTER_sixsuperior = C.CLUTTER_sixsuperior
const CLUTTER_braille_dots_3457 = C.CLUTTER_braille_dots_3457
const CLUTTER_braille_dots_3578 = C.CLUTTER_braille_dots_3578
const CLUTTER_KEY_Sinh_dda = C.CLUTTER_KEY_Sinh_dda
const CLUTTER_Lcaron = C.CLUTTER_Lcaron
const CLUTTER_KEY_Cyrillic_HA_descender = C.CLUTTER_KEY_Cyrillic_HA_descender
const CLUTTER_EcuSign = C.CLUTTER_EcuSign
const CLUTTER_KEY_Armenian_KE = C.CLUTTER_KEY_Armenian_KE
const CLUTTER_Sinh_o = C.CLUTTER_Sinh_o
const CLUTTER_KEY_KP_Space = C.CLUTTER_KEY_KP_Space
const CLUTTER_KEY_Greek_OMEGAaccent = C.CLUTTER_KEY_Greek_OMEGAaccent
const CLUTTER_KEY_abreveacute = C.CLUTTER_KEY_abreveacute
const CLUTTER_ht = C.CLUTTER_ht
const CLUTTER_ISO_Next_Group_Lock = C.CLUTTER_ISO_Next_Group_Lock
const CLUTTER_greater = C.CLUTTER_greater
const CLUTTER_LONG_PRESS_ACTIVATE = C.CLUTTER_LONG_PRESS_ACTIVATE
const CLUTTER_KEY_braille_dots_1367 = C.CLUTTER_KEY_braille_dots_1367
const CLUTTER_KEY_MonBrightnessUp = C.CLUTTER_KEY_MonBrightnessUp
const CLUTTER_KEY_braille_dots_1238 = C.CLUTTER_KEY_braille_dots_1238
const CLUTTER_KEY_braille_dots_1236 = C.CLUTTER_KEY_braille_dots_1236
const CLUTTER_KEY_braille_dots_1237 = C.CLUTTER_KEY_braille_dots_1237
const CLUTTER_KEY_ISO_Fast_Cursor_Down = C.CLUTTER_KEY_ISO_Fast_Cursor_Down
const CLUTTER_KEY_braille_dots_1235 = C.CLUTTER_KEY_braille_dots_1235
const CLUTTER_kana_a = C.CLUTTER_kana_a
const CLUTTER_Yhook = C.CLUTTER_Yhook
const CLUTTER_KEY_masculine = C.CLUTTER_KEY_masculine
const CLUTTER_EASE_OUT_CIRC = C.CLUTTER_EASE_OUT_CIRC
const CLUTTER_UNIT_PIXEL = C.CLUTTER_UNIT_PIXEL
const CLUTTER_Hangul_Hieuh = C.CLUTTER_Hangul_Hieuh
const CLUTTER_Display = C.CLUTTER_Display
const CLUTTER_KEY_Georgian_vin = C.CLUTTER_KEY_Georgian_vin
const CLUTTER_Armenian_vev = C.CLUTTER_Armenian_vev
const CLUTTER_Georgian_on = C.CLUTTER_Georgian_on
const CLUTTER_KEY_kana_HU = C.CLUTTER_KEY_kana_HU
const CLUTTER_KEY_phonographcopyright = C.CLUTTER_KEY_phonographcopyright
const CLUTTER_includes = C.CLUTTER_includes
const CLUTTER_rightt = C.CLUTTER_rightt
const CLUTTER_ISO_Partial_Space_Right = C.CLUTTER_ISO_Partial_Space_Right
const CLUTTER_Cyrillic_BE = C.CLUTTER_Cyrillic_BE
const CLUTTER_Hangul_Mieum = C.CLUTTER_Hangul_Mieum
const CLUTTER_KEY_dead_doublegrave = C.CLUTTER_KEY_dead_doublegrave
const CLUTTER_KEY_Cyrillic_el = C.CLUTTER_KEY_Cyrillic_el
const CLUTTER_KEY_Cyrillic_em = C.CLUTTER_KEY_Cyrillic_em
const CLUTTER_KEY_Break = C.CLUTTER_KEY_Break
const CLUTTER_KEY_Sinh_ttha = C.CLUTTER_KEY_Sinh_ttha
const CLUTTER_sabovedot = C.CLUTTER_sabovedot
const CLUTTER_KEY_Hstroke = C.CLUTTER_KEY_Hstroke
const CLUTTER_braille_dots_124567 = C.CLUTTER_braille_dots_124567
const CLUTTER_KEY_Arabic_hamzaonwaw = C.CLUTTER_KEY_Arabic_hamzaonwaw
const CLUTTER_KEY_Cyrillic_ef = C.CLUTTER_KEY_Cyrillic_ef
const CLUTTER_Book = C.CLUTTER_Book
const CLUTTER_braille_dots_1468 = C.CLUTTER_braille_dots_1468
const CLUTTER_KEY_ISO_First_Group_Lock = C.CLUTTER_KEY_ISO_First_Group_Lock
const CLUTTER_ZOOM_Y_AXIS = C.CLUTTER_ZOOM_Y_AXIS
const CLUTTER_KEY_wdiaeresis = C.CLUTTER_KEY_wdiaeresis
const CLUTTER_KEY_User2KB = C.CLUTTER_KEY_User2KB
const CLUTTER_KEY_Select = C.CLUTTER_KEY_Select
const CLUTTER_braille_dots_234678 = C.CLUTTER_braille_dots_234678
const CLUTTER_KEY_Cyrillic_er = C.CLUTTER_KEY_Cyrillic_er
const CLUTTER_KEY_Arabic_hamzaonalef = C.CLUTTER_KEY_Arabic_hamzaonalef
const CLUTTER_KEY_Sabovedot = C.CLUTTER_KEY_Sabovedot
const CLUTTER_KEY_leftarrow = C.CLUTTER_KEY_leftarrow
const CLUTTER_KEY_Hangul_Hanja = C.CLUTTER_KEY_Hangul_Hanja
const CLUTTER_Cyrillic_SHCHA = C.CLUTTER_Cyrillic_SHCHA
const CLUTTER_KEY_WLAN = C.CLUTTER_KEY_WLAN
const CLUTTER_Thai_paiyannoi = C.CLUTTER_Thai_paiyannoi
const CLUTTER_KEY_Hangul_KkogjiDalrinIeung = C.CLUTTER_KEY_Hangul_KkogjiDalrinIeung
const CLUTTER_KEY_BackSpace = C.CLUTTER_KEY_BackSpace
const CLUTTER_kana_yu = C.CLUTTER_kana_yu
const CLUTTER_Arabic_fullstop = C.CLUTTER_Arabic_fullstop
const CLUTTER_KEY_braille_dots_13578 = C.CLUTTER_KEY_braille_dots_13578
const CLUTTER_WWW = C.CLUTTER_WWW
const CLUTTER_Ohorngrave = C.CLUTTER_Ohorngrave
const CLUTTER_KEY_Greek_alpha = C.CLUTTER_KEY_Greek_alpha
const CLUTTER_KEY_Display = C.CLUTTER_KEY_Display
const CLUTTER_KEY_Iogonek = C.CLUTTER_KEY_Iogonek
const CLUTTER_KEY_kappa = C.CLUTTER_KEY_kappa
const CLUTTER_Byelorussian_shortu = C.CLUTTER_Byelorussian_shortu
const CLUTTER_KEY_MyComputer = C.CLUTTER_KEY_MyComputer
const CLUTTER_KEY_braille_dots_12357 = C.CLUTTER_KEY_braille_dots_12357
const CLUTTER_KEY_braille_dots_234568 = C.CLUTTER_KEY_braille_dots_234568
const CLUTTER_KEY_hebrew_beth = C.CLUTTER_KEY_hebrew_beth
const CLUTTER_KEYBOARD_DEVICE = C.CLUTTER_KEYBOARD_DEVICE
const CLUTTER_Ntilde = C.CLUTTER_Ntilde
const CLUTTER_crossinglines = C.CLUTTER_crossinglines
const CLUTTER_Ukranian_I = C.CLUTTER_Ukranian_I
const CLUTTER_KEY_zstroke = C.CLUTTER_KEY_zstroke
const CLUTTER_KEY_ninesubscript = C.CLUTTER_KEY_ninesubscript
const CLUTTER_KEY_Armenian_TSO = C.CLUTTER_KEY_Armenian_TSO
const CLUTTER_acircumflexbelowdot = C.CLUTTER_acircumflexbelowdot
const CLUTTER_Sinh_lla = C.CLUTTER_Sinh_lla
const CLUTTER_KEY_Cyrillic_che_descender = C.CLUTTER_KEY_Cyrillic_che_descender
const CLUTTER_KEY_q = C.CLUTTER_KEY_q
const CLUTTER_WINDOWING_GLX = C.CLUTTER_WINDOWING_GLX
const CLUTTER_KEY_Cyrillic_schwa = C.CLUTTER_KEY_Cyrillic_schwa
const CLUTTER_KEY_Ibreve = C.CLUTTER_KEY_Ibreve
const CLUTTER_KEY_dead_abovering = C.CLUTTER_KEY_dead_abovering
const CLUTTER_Ukrainian_I = C.CLUTTER_Ukrainian_I
const CLUTTER_Armenian_vo = C.CLUTTER_Armenian_vo
const CLUTTER_KEY_Armenian_ghat = C.CLUTTER_KEY_Armenian_ghat
const CLUTTER_KEY_braille_dots_124568 = C.CLUTTER_KEY_braille_dots_124568
const CLUTTER_rightarrow = C.CLUTTER_rightarrow
const CLUTTER_KEY_AudioRewind = C.CLUTTER_KEY_AudioRewind
const CLUTTER_KEY_kana_WA = C.CLUTTER_KEY_kana_WA
const CLUTTER_KEY_AudibleBell_Enable = C.CLUTTER_KEY_AudibleBell_Enable
const CLUTTER_KEY_ISO_Move_Line_Down = C.CLUTTER_KEY_ISO_Move_Line_Down
const CLUTTER_Atilde = C.CLUTTER_Atilde
const CLUTTER_SelectButton = C.CLUTTER_SelectButton
const CLUTTER_KEY_Cyrillic_O_bar = C.CLUTTER_KEY_Cyrillic_O_bar
const CLUTTER_KEY_Thai_thothong = C.CLUTTER_KEY_Thai_thothong
const CLUTTER_braille_dots_27 = C.CLUTTER_braille_dots_27
const CLUTTER_KEY_WWW = C.CLUTTER_KEY_WWW
const CLUTTER_Cyrillic_shha = C.CLUTTER_Cyrillic_shha
const CLUTTER_KEY_braille_dots_12458 = C.CLUTTER_KEY_braille_dots_12458
const CLUTTER_KEY_braille_dots_12358 = C.CLUTTER_KEY_braille_dots_12358
const CLUTTER_Farsi_9 = C.CLUTTER_Farsi_9
const CLUTTER_braille_dots_13578 = C.CLUTTER_braille_dots_13578
const CLUTTER_COLOR_CHOCOLATE = C.CLUTTER_COLOR_CHOCOLATE
const CLUTTER_KEY_braille_dots_12356 = C.CLUTTER_KEY_braille_dots_12356
const CLUTTER_KEY_Thai_popla = C.CLUTTER_KEY_Thai_popla
const CLUTTER_Georgian_phar = C.CLUTTER_Georgian_phar
const CLUTTER_KEY_Cyrillic_u_straight = C.CLUTTER_KEY_Cyrillic_u_straight
const CLUTTER_braille_dots_367 = C.CLUTTER_braille_dots_367
const CLUTTER_KEY_braille_dots_123458 = C.CLUTTER_KEY_braille_dots_123458
const CLUTTER_Abelowdot = C.CLUTTER_Abelowdot
const CLUTTER_KEY_hexagram = C.CLUTTER_KEY_hexagram
const CLUTTER_KEY_quoteleft = C.CLUTTER_KEY_quoteleft
const CLUTTER_ClearGrab = C.CLUTTER_ClearGrab
const CLUTTER_xabovedot = C.CLUTTER_xabovedot
const CLUTTER_Utilde = C.CLUTTER_Utilde
const CLUTTER_Greek_lambda = C.CLUTTER_Greek_lambda
const CLUTTER_KEY_Switch_VT_3 = C.CLUTTER_KEY_Switch_VT_3
const CLUTTER_Armenian_ghat = C.CLUTTER_Armenian_ghat
const CLUTTER_KEY_Switch_VT_5 = C.CLUTTER_KEY_Switch_VT_5
const CLUTTER_KEY_Switch_VT_4 = C.CLUTTER_KEY_Switch_VT_4
const CLUTTER_KEY_Switch_VT_7 = C.CLUTTER_KEY_Switch_VT_7
const CLUTTER_Eisu_Shift = C.CLUTTER_Eisu_Shift
const CLUTTER_KEY_Switch_VT_9 = C.CLUTTER_KEY_Switch_VT_9
const CLUTTER_KEY_Switch_VT_8 = C.CLUTTER_KEY_Switch_VT_8
const CLUTTER_braille_blank = C.CLUTTER_braille_blank
const CLUTTER_Ukrainian_i = C.CLUTTER_Ukrainian_i
const CLUTTER_KEY_Muhenkan = C.CLUTTER_KEY_Muhenkan
const CLUTTER_KEY_Hangul_J_YeorinHieuh = C.CLUTTER_KEY_Hangul_J_YeorinHieuh
const CLUTTER_KEY_asterisk = C.CLUTTER_KEY_asterisk
const CLUTTER_KEY_Hangul_Nieun = C.CLUTTER_KEY_Hangul_Nieun
const CLUTTER_hebrew_tet = C.CLUTTER_hebrew_tet
const CLUTTER_Greek_horizbar = C.CLUTTER_Greek_horizbar
const CLUTTER_because = C.CLUTTER_because
const CLUTTER_braille_dots_12358 = C.CLUTTER_braille_dots_12358
const CLUTTER_KEY_botleftsummation = C.CLUTTER_KEY_botleftsummation
const CLUTTER_vertbar = C.CLUTTER_vertbar
const CLUTTER_KEY_emopencircle = C.CLUTTER_KEY_emopencircle
const CLUTTER_Georgian_kan = C.CLUTTER_Georgian_kan
const CLUTTER_KEY_twosuperior = C.CLUTTER_KEY_twosuperior
const CLUTTER_KEY_Sinh_o2 = C.CLUTTER_KEY_Sinh_o2
const CLUTTER_KEY_Greek_finalsmallsigma = C.CLUTTER_KEY_Greek_finalsmallsigma
const CLUTTER_KEY_Switch_VT_1 = C.CLUTTER_KEY_Switch_VT_1
const CLUTTER_X_AXIS = C.CLUTTER_X_AXIS
const CLUTTER_FLOW_VERTICAL = C.CLUTTER_FLOW_VERTICAL
const CLUTTER_endash = C.CLUTTER_endash
const CLUTTER_KEY_braille_dots_135678 = C.CLUTTER_KEY_braille_dots_135678
const CLUTTER_KEY_Ebelowdot = C.CLUTTER_KEY_Ebelowdot
const CLUTTER_KEY_Kana_Lock = C.CLUTTER_KEY_Kana_Lock
const CLUTTER_dollar = C.CLUTTER_dollar
const CLUTTER_KP_6 = C.CLUTTER_KP_6
const CLUTTER_kana_conjunctive = C.CLUTTER_kana_conjunctive
const CLUTTER_kana_ME = C.CLUTTER_kana_ME
const CLUTTER_AudioPrev = C.CLUTTER_AudioPrev
const CLUTTER_KEY_Switch_VT_2 = C.CLUTTER_KEY_Switch_VT_2
const CLUTTER_ycircumflex = C.CLUTTER_ycircumflex
const CLUTTER_KEY_braille_dots_1234567 = C.CLUTTER_KEY_braille_dots_1234567
const CLUTTER_3270_Copy = C.CLUTTER_3270_Copy
const CLUTTER_CruzeiroSign = C.CLUTTER_CruzeiroSign
const CLUTTER_dead_grave = C.CLUTTER_dead_grave
const CLUTTER_KEY_braille_dots_1234568 = C.CLUTTER_KEY_braille_dots_1234568
const CLUTTER_KEY_filledrighttribullet = C.CLUTTER_KEY_filledrighttribullet
const CLUTTER_kana_MI = C.CLUTTER_kana_MI
const CLUTTER_KEY_braille_dots_24567 = C.CLUTTER_KEY_braille_dots_24567
const CLUTTER_Ukranian_i = C.CLUTTER_Ukranian_i
const CLUTTER_Launch8 = C.CLUTTER_Launch8
const CLUTTER_KEY_Sinh_oo = C.CLUTTER_KEY_Sinh_oo
const CLUTTER_KEY_Arabic_farsi_yeh = C.CLUTTER_KEY_Arabic_farsi_yeh
const CLUTTER_KEY_History = C.CLUTTER_KEY_History
const CLUTTER_KEY_AudioMedia = C.CLUTTER_KEY_AudioMedia
const CLUTTER_quad = C.CLUTTER_quad
const CLUTTER_KEY_leftdoublequotemark = C.CLUTTER_KEY_leftdoublequotemark
const CLUTTER_KEY_Greek_PHI = C.CLUTTER_KEY_Greek_PHI
const CLUTTER_KEY_Abrevehook = C.CLUTTER_KEY_Abrevehook
const CLUTTER_Armenian_dza = C.CLUTTER_Armenian_dza
const CLUTTER_KEY_Greek_accentdieresis = C.CLUTTER_KEY_Greek_accentdieresis
const CLUTTER_INPUT_AXIS_X = C.CLUTTER_INPUT_AXIS_X
const CLUTTER_KEY_AudioRaiseVolume = C.CLUTTER_KEY_AudioRaiseVolume
const CLUTTER_KP_Decimal = C.CLUTTER_KP_Decimal
const CLUTTER_KEY_igrave = C.CLUTTER_KEY_igrave
const CLUTTER_SplitScreen = C.CLUTTER_SplitScreen
const CLUTTER_KEY_Thai_soso = C.CLUTTER_KEY_Thai_soso
const CLUTTER_KEY_parenright = C.CLUTTER_KEY_parenright
const CLUTTER_braille_dots_123467 = C.CLUTTER_braille_dots_123467
const CLUTTER_KEY_AudioCycleTrack = C.CLUTTER_KEY_AudioCycleTrack
const CLUTTER_AudioRepeat = C.CLUTTER_AudioRepeat
const CLUTTER_kana_SO = C.CLUTTER_kana_SO
const CLUTTER_KEY_Arabic_percent = C.CLUTTER_KEY_Arabic_percent
const CLUTTER_Hangul_NieunJieuj = C.CLUTTER_Hangul_NieunJieuj
const CLUTTER_hebrew_kaph = C.CLUTTER_hebrew_kaph
const CLUTTER_Sleep = C.CLUTTER_Sleep
const CLUTTER_MouseKeys_Enable = C.CLUTTER_MouseKeys_Enable
const CLUTTER_KEY_Obelowdot = C.CLUTTER_KEY_Obelowdot
const CLUTTER_STEPS = C.CLUTTER_STEPS
const CLUTTER_kana_SE = C.CLUTTER_kana_SE
const CLUTTER_KEY_kana_closingbracket = C.CLUTTER_KEY_kana_closingbracket
const CLUTTER_dead_ogonek = C.CLUTTER_dead_ogonek
const CLUTTER_KEY_Georgian_par = C.CLUTTER_KEY_Georgian_par
const CLUTTER_botintegral = C.CLUTTER_botintegral
const CLUTTER_braille_dots_234 = C.CLUTTER_braille_dots_234
const CLUTTER_braille_dots_235 = C.CLUTTER_braille_dots_235
const CLUTTER_braille_dots_238 = C.CLUTTER_braille_dots_238
const CLUTTER_Hangul_Special = C.CLUTTER_Hangul_Special
const CLUTTER_braille_dots_35 = C.CLUTTER_braille_dots_35
const CLUTTER_KEY_hebrew_finalmem = C.CLUTTER_KEY_hebrew_finalmem
const CLUTTER_Cyrillic_ha = C.CLUTTER_Cyrillic_ha
const CLUTTER_KP_Page_Up = C.CLUTTER_KP_Page_Up
const CLUTTER_KEY_Hangul_PostHanja = C.CLUTTER_KEY_Hangul_PostHanja
const CLUTTER_g = C.CLUTTER_g
const CLUTTER_KEY_Cyrillic_softsign = C.CLUTTER_KEY_Cyrillic_softsign
const CLUTTER_partdifferential = C.CLUTTER_partdifferential
const CLUTTER_KEY_Thai_phophan = C.CLUTTER_KEY_Thai_phophan
const CLUTTER_dead_horn = C.CLUTTER_dead_horn
const CLUTTER_semicolon = C.CLUTTER_semicolon
const CLUTTER_KEY_Thai_saraa = C.CLUTTER_KEY_Thai_saraa
const CLUTTER_TEXT_DIRECTION_LTR = C.CLUTTER_TEXT_DIRECTION_LTR
const CLUTTER_u = C.CLUTTER_u
const CLUTTER_KEY_Thai_sarae = C.CLUTTER_KEY_Thai_sarae
const CLUTTER_KEY_Uhorntilde = C.CLUTTER_KEY_Uhorntilde
const CLUTTER_KEY_Ocircumflextilde = C.CLUTTER_KEY_Ocircumflextilde
const CLUTTER_TOUCH_UPDATE = C.CLUTTER_TOUCH_UPDATE
const CLUTTER_KEY_Thai_sarao = C.CLUTTER_KEY_Thai_sarao
const CLUTTER_KEY_Messenger = C.CLUTTER_KEY_Messenger
const CLUTTER_hebrew_aleph = C.CLUTTER_hebrew_aleph
const CLUTTER_braille_dots_24568 = C.CLUTTER_braille_dots_24568
const CLUTTER_KEY_AudioRepeat = C.CLUTTER_KEY_AudioRepeat
const CLUTTER_aacute = C.CLUTTER_aacute
const CLUTTER_Greek_KAPPA = C.CLUTTER_Greek_KAPPA
const CLUTTER_DongSign = C.CLUTTER_DongSign
const CLUTTER_Finance = C.CLUTTER_Finance
const CLUTTER_BOX_ALIGNMENT_CENTER = C.CLUTTER_BOX_ALIGNMENT_CENTER
const CLUTTER_INPUT_MODE_SLAVE = C.CLUTTER_INPUT_MODE_SLAVE
const CLUTTER_KbdLightOnOff = C.CLUTTER_KbdLightOnOff
const CLUTTER_braille_dots_1267 = C.CLUTTER_braille_dots_1267
const CLUTTER_KEY_Eth = C.CLUTTER_KEY_Eth
const CLUTTER_KEY_Mode_switch = C.CLUTTER_KEY_Mode_switch
const CLUTTER_KEY_hebrew_dalet = C.CLUTTER_KEY_hebrew_dalet
const CLUTTER_Greek_epsilon = C.CLUTTER_Greek_epsilon
const CLUTTER_KEY_Armenian_se = C.CLUTTER_KEY_Armenian_se
const CLUTTER_Sinh_cha = C.CLUTTER_Sinh_cha
const CLUTTER_braille_dots_124678 = C.CLUTTER_braille_dots_124678
const CLUTTER_BIN_ALIGNMENT_FIXED = C.CLUTTER_BIN_ALIGNMENT_FIXED
const CLUTTER_Thai_lu = C.CLUTTER_Thai_lu
const CLUTTER_KEY_Cyrillic_SHA = C.CLUTTER_KEY_Cyrillic_SHA
const CLUTTER_COLOR_CHAMELEON = C.CLUTTER_COLOR_CHAMELEON
const CLUTTER_Thai_maiek = C.CLUTTER_Thai_maiek
const CLUTTER_ihook = C.CLUTTER_ihook
const CLUTTER_Shift_R = C.CLUTTER_Shift_R
const CLUTTER_KEY_KP_Next = C.CLUTTER_KEY_KP_Next
const CLUTTER_logicaland = C.CLUTTER_logicaland
const CLUTTER_KEY_Ohorngrave = C.CLUTTER_KEY_Ohorngrave
const CLUTTER_Thai_nonu = C.CLUTTER_Thai_nonu
const CLUTTER_STAGE_STATE_OFFSCREEN = C.CLUTTER_STAGE_STATE_OFFSCREEN
const CLUTTER_braille_dots_168 = C.CLUTTER_braille_dots_168
const CLUTTER_KEY_braille_dots_123567 = C.CLUTTER_KEY_braille_dots_123567
const CLUTTER_Pointer_DfltBtnPrev = C.CLUTTER_Pointer_DfltBtnPrev
const CLUTTER_ScrollUp = C.CLUTTER_ScrollUp
const CLUTTER_braille_dots_567 = C.CLUTTER_braille_dots_567
const CLUTTER_KEY_Cyrillic_JE = C.CLUTTER_KEY_Cyrillic_JE
const CLUTTER_kana_TO = C.CLUTTER_kana_TO
const CLUTTER_KEY_uring = C.CLUTTER_KEY_uring
const CLUTTER_KEY_Greek_UPSILONdieresis = C.CLUTTER_KEY_Greek_UPSILONdieresis
const CLUTTER_logicalor = C.CLUTTER_logicalor
const CLUTTER_threequarters = C.CLUTTER_threequarters
const CLUTTER_KEY_Cyrillic_shcha = C.CLUTTER_KEY_Cyrillic_shcha
const CLUTTER_Reload = C.CLUTTER_Reload
const CLUTTER_Support = C.CLUTTER_Support
const CLUTTER_TEXT_DIRECTION_DEFAULT = C.CLUTTER_TEXT_DIRECTION_DEFAULT
const CLUTTER_KEY_Greek_IOTAdiaeresis = C.CLUTTER_KEY_Greek_IOTAdiaeresis
const CLUTTER_MouseKeys_Accel_Enable = C.CLUTTER_MouseKeys_Accel_Enable
const CLUTTER_braille_dots_568 = C.CLUTTER_braille_dots_568
const CLUTTER_Massyo = C.CLUTTER_Massyo
const CLUTTER_KEY_multiply = C.CLUTTER_KEY_multiply
const CLUTTER_Ocircumflextilde = C.CLUTTER_Ocircumflextilde
const CLUTTER_Sinh_nga = C.CLUTTER_Sinh_nga
const CLUTTER_KEY_paragraph = C.CLUTTER_KEY_paragraph
const CLUTTER_Greek_IOTAdieresis = C.CLUTTER_Greek_IOTAdieresis
const CLUTTER_KEY_logicaland = C.CLUTTER_KEY_logicaland
const CLUTTER_ocircumflextilde = C.CLUTTER_ocircumflextilde
const CLUTTER_KEY_itilde = C.CLUTTER_KEY_itilde
const CLUTTER_KEY_Aacute = C.CLUTTER_KEY_Aacute
const CLUTTER_KEY_Uhorn = C.CLUTTER_KEY_Uhorn
const CLUTTER_Option = C.CLUTTER_Option
const CLUTTER_dead_voiced_sound = C.CLUTTER_dead_voiced_sound
const CLUTTER_KEY_braille_dots_1368 = C.CLUTTER_KEY_braille_dots_1368
const CLUTTER_DRAG_Y_AXIS = C.CLUTTER_DRAG_Y_AXIS
const CLUTTER_KEY_ediaeresis = C.CLUTTER_KEY_ediaeresis
const CLUTTER_Thai_khokhwai = C.CLUTTER_Thai_khokhwai
const CLUTTER_kana_TE = C.CLUTTER_kana_TE
const CLUTTER_KEY_Hangul_J_RieulMieum = C.CLUTTER_KEY_Hangul_J_RieulMieum
const CLUTTER_dstroke = C.CLUTTER_dstroke
const CLUTTER_KEY_Arabic_sukun = C.CLUTTER_KEY_Arabic_sukun
const CLUTTER_KEY_notequal = C.CLUTTER_KEY_notequal
const CLUTTER_KEY_kana_YA = C.CLUTTER_KEY_kana_YA
const CLUTTER_Thai_thothahan = C.CLUTTER_Thai_thothahan
const CLUTTER_notelementof = C.CLUTTER_notelementof
const CLUTTER_KEY_kana_YO = C.CLUTTER_KEY_kana_YO
const CLUTTER_KEY_THORN = C.CLUTTER_KEY_THORN
const CLUTTER_KEY_jot = C.CLUTTER_KEY_jot
const CLUTTER_KEY_Cyrillic_en = C.CLUTTER_KEY_Cyrillic_en
const CLUTTER_KEY_braille_dots_4567 = C.CLUTTER_KEY_braille_dots_4567
const CLUTTER_KEY_hebrew_resh = C.CLUTTER_KEY_hebrew_resh
const CLUTTER_kana_closingbracket = C.CLUTTER_kana_closingbracket
const CLUTTER_KEY_Ukranian_je = C.CLUTTER_KEY_Ukranian_je
const CLUTTER_minus = C.CLUTTER_minus
const CLUTTER_MailForward = C.CLUTTER_MailForward
const CLUTTER_Georgian_gan = C.CLUTTER_Georgian_gan
const CLUTTER_eabovedot = C.CLUTTER_eabovedot
const CLUTTER_Hangul_AraeA = C.CLUTTER_Hangul_AraeA
const CLUTTER_EASE_IN_EXPO = C.CLUTTER_EASE_IN_EXPO
const CLUTTER_SHADER_ERROR_NO_GLSL = C.CLUTTER_SHADER_ERROR_NO_GLSL
const CLUTTER_kana_MU = C.CLUTTER_kana_MU
const CLUTTER_gabovedot = C.CLUTTER_gabovedot
const CLUTTER_KEY_Market = C.CLUTTER_KEY_Market
const CLUTTER_KEY_colon = C.CLUTTER_KEY_colon
const CLUTTER_Time = C.CLUTTER_Time
const CLUTTER_KEY_semicolon = C.CLUTTER_KEY_semicolon
const CLUTTER_Cyrillic_yeru = C.CLUTTER_Cyrillic_yeru
const CLUTTER_Hangul_SunkyeongeumPieub = C.CLUTTER_Hangul_SunkyeongeumPieub
const CLUTTER_KEY_Ukrainian_IE = C.CLUTTER_KEY_Ukrainian_IE
const CLUTTER_lf = C.CLUTTER_lf
const CLUTTER_braille_dots_2568 = C.CLUTTER_braille_dots_2568
const CLUTTER_downtack = C.CLUTTER_downtack
const CLUTTER_Sinh_ii = C.CLUTTER_Sinh_ii
const CLUTTER_KEY_Cyrillic_U_straight_bar = C.CLUTTER_KEY_Cyrillic_U_straight_bar
const CLUTTER_KEY_ydiaeresis = C.CLUTTER_KEY_ydiaeresis
const CLUTTER_braille_dots_2368 = C.CLUTTER_braille_dots_2368
const CLUTTER_Shift_L = C.CLUTTER_Shift_L
const CLUTTER_braille_dots_2367 = C.CLUTTER_braille_dots_2367
const CLUTTER_braille_dots_12458 = C.CLUTTER_braille_dots_12458
const CLUTTER_Armenian_ken = C.CLUTTER_Armenian_ken
const CLUTTER_KEY_leftpointer = C.CLUTTER_KEY_leftpointer
const CLUTTER_KEY_Thai_khokhon = C.CLUTTER_KEY_Thai_khokhon
const CLUTTER_Down = C.CLUTTER_Down
const CLUTTER_KEY_Greek_upsilonaccentdieresis = C.CLUTTER_KEY_Greek_upsilonaccentdieresis
const CLUTTER_brokenbar = C.CLUTTER_brokenbar
const CLUTTER_Meta_R = C.CLUTTER_Meta_R
const CLUTTER_braille_dots_12456 = C.CLUTTER_braille_dots_12456
const CLUTTER_KEY_Community = C.CLUTTER_KEY_Community
const CLUTTER_Greek_BETA = C.CLUTTER_Greek_BETA
const CLUTTER_KEY_Cyrillic_te = C.CLUTTER_KEY_Cyrillic_te
const CLUTTER_KEY_Explorer = C.CLUTTER_KEY_Explorer
const CLUTTER_Sinh_ng = C.CLUTTER_Sinh_ng
const CLUTTER_KEY_Ooblique = C.CLUTTER_KEY_Ooblique
const CLUTTER_braille_dots_4578 = C.CLUTTER_braille_dots_4578
const CLUTTER_KEY_Arabic_beh = C.CLUTTER_KEY_Arabic_beh
const CLUTTER_KEY_Cyrillic_en_descender = C.CLUTTER_KEY_Cyrillic_en_descender
const CLUTTER_KEY_dead_greek = C.CLUTTER_KEY_dead_greek
const CLUTTER_KEY_Greek_chi = C.CLUTTER_KEY_Greek_chi
const CLUTTER_integral = C.CLUTTER_integral
const CLUTTER_KEY_Armenian_ayb = C.CLUTTER_KEY_Armenian_ayb
const CLUTTER_KEY_NairaSign = C.CLUTTER_KEY_NairaSign
const CLUTTER_KEY_kana_KO = C.CLUTTER_KEY_kana_KO
const CLUTTER_rightdoublequotemark = C.CLUTTER_rightdoublequotemark
const CLUTTER_dead_greek = C.CLUTTER_dead_greek
const CLUTTER_braille_dots_2468 = C.CLUTTER_braille_dots_2468
const CLUTTER_KEY_ucircumflex = C.CLUTTER_KEY_ucircumflex
const CLUTTER_KEY_kana_KI = C.CLUTTER_KEY_kana_KI
const CLUTTER_Arabic_fathatan = C.CLUTTER_Arabic_fathatan
const CLUTTER_Cyrillic_DZHE = C.CLUTTER_Cyrillic_DZHE
const CLUTTER_KEY_kana_KA = C.CLUTTER_KEY_kana_KA
const CLUTTER_Greek_XI = C.CLUTTER_Greek_XI
const CLUTTER_braille_dots_1678 = C.CLUTTER_braille_dots_1678
const CLUTTER_SCROLL_DOWN = C.CLUTTER_SCROLL_DOWN
const CLUTTER_SUPER_MASK = C.CLUTTER_SUPER_MASK
const CLUTTER_Cyrillic_CHE_descender = C.CLUTTER_Cyrillic_CHE_descender
const CLUTTER_COLOR_SCARLET_RED = C.CLUTTER_COLOR_SCARLET_RED
const CLUTTER_KEY_filledrectbullet = C.CLUTTER_KEY_filledrectbullet
const CLUTTER_Sinh_ruu2 = C.CLUTTER_Sinh_ruu2
const CLUTTER_KEY_aacute = C.CLUTTER_KEY_aacute
const CLUTTER_KEY_etilde = C.CLUTTER_KEY_etilde
const CLUTTER_braille_dots_1478 = C.CLUTTER_braille_dots_1478
const CLUTTER_odoubleacute = C.CLUTTER_odoubleacute
const CLUTTER_KEY_View = C.CLUTTER_KEY_View
const CLUTTER_TEXTURE_QUALITY_HIGH = C.CLUTTER_TEXTURE_QUALITY_HIGH
const CLUTTER_KEY_Thai_yoyak = C.CLUTTER_KEY_Thai_yoyak
const CLUTTER_Cyrillic_che = C.CLUTTER_Cyrillic_che
const CLUTTER_kana_MA = C.CLUTTER_kana_MA
const CLUTTER_KEY_bracketright = C.CLUTTER_KEY_bracketright
const CLUTTER_BUTTON_SECONDARY = C.CLUTTER_BUTTON_SECONDARY
const CLUTTER_FLAVOUR = C.CLUTTER_FLAVOUR
const CLUTTER_KEY_ISO_Enter = C.CLUTTER_KEY_ISO_Enter
const CLUTTER_KEY_Greek_upsilonaccent = C.CLUTTER_KEY_Greek_upsilonaccent
const CLUTTER_KEY_Ukrainian_yi = C.CLUTTER_KEY_Ukrainian_yi
const CLUTTER_BIND_HEIGHT = C.CLUTTER_BIND_HEIGHT
const CLUTTER_BIND_X = C.CLUTTER_BIND_X
const CLUTTER_KEY_Ocircumflexhook = C.CLUTTER_KEY_Ocircumflexhook
const CLUTTER_KEY_Greek_eta = C.CLUTTER_KEY_Greek_eta
const CLUTTER_Cyrillic_lje = C.CLUTTER_Cyrillic_lje
const CLUTTER_Greek_EPSILONaccent = C.CLUTTER_Greek_EPSILONaccent
const CLUTTER_KEY_ISO_Center_Object = C.CLUTTER_KEY_ISO_Center_Object
const CLUTTER_KEY_Sys_Req = C.CLUTTER_KEY_Sys_Req
const CLUTTER_Ybelowdot = C.CLUTTER_Ybelowdot
const CLUTTER_KEY_Otilde = C.CLUTTER_KEY_Otilde
const CLUTTER_prolongedsound = C.CLUTTER_prolongedsound
const CLUTTER_PATH_REL_LINE_TO = C.CLUTTER_PATH_REL_LINE_TO
const CLUTTER_uacute = C.CLUTTER_uacute
const CLUTTER_KEY_ISO_Level3_Latch = C.CLUTTER_KEY_ISO_Level3_Latch
const CLUTTER_KEY_dead_abovecomma = C.CLUTTER_KEY_dead_abovecomma
const CLUTTER_KEY_Armenian_HO = C.CLUTTER_KEY_Armenian_HO
const CLUTTER_kana_MO = C.CLUTTER_kana_MO
const CLUTTER_KEY_Armenian_HI = C.CLUTTER_KEY_Armenian_HI
const CLUTTER_Sinh_ndha = C.CLUTTER_Sinh_ndha
const CLUTTER_KEY_KP_Begin = C.CLUTTER_KEY_KP_Begin
const CLUTTER_User1KB = C.CLUTTER_User1KB
const CLUTTER_KEY_3270_CursorBlink = C.CLUTTER_KEY_3270_CursorBlink
const CLUTTER_KEY_Music = C.CLUTTER_KEY_Music
const CLUTTER_udiaeresis = C.CLUTTER_udiaeresis
const CLUTTER_Thai_totao = C.CLUTTER_Thai_totao
const CLUTTER_KEY_Ukrainian_ghe_with_upturn = C.CLUTTER_KEY_Ukrainian_ghe_with_upturn
const CLUTTER_KEY_underbar = C.CLUTTER_KEY_underbar
const CLUTTER_INPUT_AXIS_YTILT = C.CLUTTER_INPUT_AXIS_YTILT
const CLUTTER_figdash = C.CLUTTER_figdash
const CLUTTER_KEY_RotationPB = C.CLUTTER_KEY_RotationPB
const CLUTTER_Tcaron = C.CLUTTER_Tcaron
const CLUTTER_BUTTON2_MASK = C.CLUTTER_BUTTON2_MASK
const CLUTTER_KEY_Dstroke = C.CLUTTER_KEY_Dstroke
const CLUTTER_KEY_Codeinput = C.CLUTTER_KEY_Codeinput
const CLUTTER_Armenian_pyur = C.CLUTTER_Armenian_pyur
const CLUTTER_KEY_threeeighths = C.CLUTTER_KEY_threeeighths
const CLUTTER_KEY_Kcedilla = C.CLUTTER_KEY_Kcedilla
const CLUTTER_3270_PrintScreen = C.CLUTTER_3270_PrintScreen
const CLUTTER_KEY_dead_u = C.CLUTTER_KEY_dead_u
const CLUTTER_Thai_topatak = C.CLUTTER_Thai_topatak
const CLUTTER_Armenian_MEN = C.CLUTTER_Armenian_MEN
const CLUTTER_aring = C.CLUTTER_aring
const CLUTTER_aogonek = C.CLUTTER_aogonek
const CLUTTER_Greek_NU = C.CLUTTER_Greek_NU
const CLUTTER_Pictures = C.CLUTTER_Pictures
const CLUTTER_lcedilla = C.CLUTTER_lcedilla
const CLUTTER_KEY_dead_e = C.CLUTTER_KEY_dead_e
const CLUTTER_Arabic_kaf = C.CLUTTER_Arabic_kaf
const CLUTTER_KEY_ecircumflexgrave = C.CLUTTER_KEY_ecircumflexgrave
const CLUTTER_KEY_dead_a = C.CLUTTER_KEY_dead_a
const CLUTTER_KEY_dead_o = C.CLUTTER_KEY_dead_o
const CLUTTER_KEY_Arabic_superscript_alef = C.CLUTTER_KEY_Arabic_superscript_alef
const CLUTTER_KEY_braille_dots_12347 = C.CLUTTER_KEY_braille_dots_12347
const CLUTTER_KEY_braille_dots_12346 = C.CLUTTER_KEY_braille_dots_12346
const CLUTTER_KEY_braille_dots_12345 = C.CLUTTER_KEY_braille_dots_12345
const CLUTTER_KEY_jcircumflex = C.CLUTTER_KEY_jcircumflex
const CLUTTER_Select = C.CLUTTER_Select
const CLUTTER_KEY_dead_U = C.CLUTTER_KEY_dead_U
const CLUTTER_Zcaron = C.CLUTTER_Zcaron
const CLUTTER_KEY_kra = C.CLUTTER_KEY_kra
const CLUTTER_righttack = C.CLUTTER_righttack
const CLUTTER_EASE_IN_OUT_SINE = C.CLUTTER_EASE_IN_OUT_SINE
const CLUTTER_KEY_egrave = C.CLUTTER_KEY_egrave
const CLUTTER_Georgian_ghan = C.CLUTTER_Georgian_ghan
const CLUTTER_KEY_Hangul_Kiyeog = C.CLUTTER_KEY_Hangul_Kiyeog
const CLUTTER_Sinh_na = C.CLUTTER_Sinh_na
const CLUTTER_KEY_Arabic_hamza = C.CLUTTER_KEY_Arabic_hamza
const CLUTTER_Cyrillic_io = C.CLUTTER_Cyrillic_io
const CLUTTER_Arabic_zain = C.CLUTTER_Arabic_zain
const CLUTTER_KEY_dead_A = C.CLUTTER_KEY_dead_A
const CLUTTER_mu = C.CLUTTER_mu
const CLUTTER_INPUT_X11 = C.CLUTTER_INPUT_X11
const CLUTTER_Cyrillic_ie = C.CLUTTER_Cyrillic_ie
const CLUTTER_KEY_ezh = C.CLUTTER_KEY_ezh
const CLUTTER_KEY_fiveeighths = C.CLUTTER_KEY_fiveeighths
const CLUTTER_REPEAT_BOTH = C.CLUTTER_REPEAT_BOTH
const CLUTTER_KEY_zerosubscript = C.CLUTTER_KEY_zerosubscript
const CLUTTER_KEY_Armenian_TO = C.CLUTTER_KEY_Armenian_TO
const CLUTTER_KEY_diamond = C.CLUTTER_KEY_diamond
const CLUTTER_variation = C.CLUTTER_variation
const CLUTTER_KEY_Armenian_FE = C.CLUTTER_KEY_Armenian_FE
const CLUTTER_Mode_switch = C.CLUTTER_Mode_switch
const CLUTTER_Pointer_DblClick5 = C.CLUTTER_Pointer_DblClick5
const CLUTTER_KEY_Scedilla = C.CLUTTER_KEY_Scedilla
const CLUTTER_braille_dots_1234568 = C.CLUTTER_braille_dots_1234568
const CLUTTER_ScrollClick = C.CLUTTER_ScrollClick
const CLUTTER_minutes = C.CLUTTER_minutes
const CLUTTER_Farsi_yeh = C.CLUTTER_Farsi_yeh
const CLUTTER_Georgian_las = C.CLUTTER_Georgian_las
const CLUTTER_KEY_braille_dots_14578 = C.CLUTTER_KEY_braille_dots_14578
const CLUTTER_kana_e = C.CLUTTER_kana_e
const CLUTTER_braille_dots_234568 = C.CLUTTER_braille_dots_234568
const CLUTTER_KEY_Thai_khokhuat = C.CLUTTER_KEY_Thai_khokhuat
const CLUTTER_dead_dasia = C.CLUTTER_dead_dasia
const CLUTTER_zabovedot = C.CLUTTER_zabovedot
const CLUTTER_braille_dots_12348 = C.CLUTTER_braille_dots_12348
const CLUTTER_braille_dots_12347 = C.CLUTTER_braille_dots_12347
const CLUTTER_Save = C.CLUTTER_Save
const CLUTTER_Messenger = C.CLUTTER_Messenger
const CLUTTER_Arabic_jeem = C.CLUTTER_Arabic_jeem
const CLUTTER_L1 = C.CLUTTER_L1
const CLUTTER_L2 = C.CLUTTER_L2
const CLUTTER_L3 = C.CLUTTER_L3
const CLUTTER_KEY_braille_dots_1456 = C.CLUTTER_KEY_braille_dots_1456
const CLUTTER_KEY_braille_dots_1457 = C.CLUTTER_KEY_braille_dots_1457
const CLUTTER_AudioMute = C.CLUTTER_AudioMute
const CLUTTER_MODIFIER_RESERVED_22_MASK = C.CLUTTER_MODIFIER_RESERVED_22_MASK
const CLUTTER_L8 = C.CLUTTER_L8
const CLUTTER_L9 = C.CLUTTER_L9
const CLUTTER_KEY_braille_dots_1458 = C.CLUTTER_KEY_braille_dots_1458
const CLUTTER_KEY_Acircumflexhook = C.CLUTTER_KEY_Acircumflexhook
const CLUTTER_gcircumflex = C.CLUTTER_gcircumflex
const CLUTTER_kana_E = C.CLUTTER_kana_E
const CLUTTER_KEY_Home = C.CLUTTER_KEY_Home
const CLUTTER_KEY_braille_dots_345678 = C.CLUTTER_KEY_braille_dots_345678
const CLUTTER_Arabic_hah = C.CLUTTER_Arabic_hah
const CLUTTER_KEY_less = C.CLUTTER_KEY_less
const CLUTTER_KP_F1 = C.CLUTTER_KP_F1
const CLUTTER_KP_F3 = C.CLUTTER_KP_F3
const CLUTTER_KEY_Hangul_RieulYeorinHieuh = C.CLUTTER_KEY_Hangul_RieulYeorinHieuh
const CLUTTER_KEY_Ocircumflexacute = C.CLUTTER_KEY_Ocircumflexacute
const CLUTTER_KEY_3270_EraseInput = C.CLUTTER_KEY_3270_EraseInput
const CLUTTER_kana_U = C.CLUTTER_kana_U
const CLUTTER_KEY_macron = C.CLUTTER_KEY_macron
const CLUTTER_plus = C.CLUTTER_plus
const CLUTTER_Pointer_Down = C.CLUTTER_Pointer_Down
const CLUTTER_Georgian_khar = C.CLUTTER_Georgian_khar
const CLUTTER_TOUCH_END = C.CLUTTER_TOUCH_END
const CLUTTER_hebrew_finalnun = C.CLUTTER_hebrew_finalnun
const CLUTTER_botleftsqbracket = C.CLUTTER_botleftsqbracket
const CLUTTER_KEY_Greek_PI = C.CLUTTER_KEY_Greek_PI
const CLUTTER_Greek_omega = C.CLUTTER_Greek_omega
const CLUTTER_KEY_Greek_horizbar = C.CLUTTER_KEY_Greek_horizbar
const CLUTTER_eth = C.CLUTTER_eth
const CLUTTER_KEY_Right = C.CLUTTER_KEY_Right
const CLUTTER_KEY_Armenian_apostrophe = C.CLUTTER_KEY_Armenian_apostrophe
const CLUTTER_Hangul_Rieul = C.CLUTTER_Hangul_Rieul
const CLUTTER_Cyrillic_SCHWA = C.CLUTTER_Cyrillic_SCHWA
const CLUTTER_ISO_Center_Object = C.CLUTTER_ISO_Center_Object
const CLUTTER_cent = C.CLUTTER_cent
const CLUTTER_KEY_uhook = C.CLUTTER_KEY_uhook
const CLUTTER_KEY_Thai_maiek = C.CLUTTER_KEY_Thai_maiek
const CLUTTER_KEY_ISO_Fast_Cursor_Left = C.CLUTTER_KEY_ISO_Fast_Cursor_Left
const CLUTTER_ISO_Release_Margin_Left = C.CLUTTER_ISO_Release_Margin_Left
const CLUTTER_KEY_l = C.CLUTTER_KEY_l
const CLUTTER_Arabic_noon = C.CLUTTER_Arabic_noon
const CLUTTER_emopencircle = C.CLUTTER_emopencircle
const CLUTTER_COLOR_TRANSPARENT = C.CLUTTER_COLOR_TRANSPARENT
const CLUTTER_KEY_Idiaeresis = C.CLUTTER_KEY_Idiaeresis
const CLUTTER_COLOR_GRAY = C.CLUTTER_COLOR_GRAY
const CLUTTER_KEY_StickyKeys_Enable = C.CLUTTER_KEY_StickyKeys_Enable
const CLUTTER_ISO_Fast_Cursor_Right = C.CLUTTER_ISO_Fast_Cursor_Right
const CLUTTER_Thai_maitho = C.CLUTTER_Thai_maitho
const CLUTTER_COLOR_DARK_GRAY = C.CLUTTER_COLOR_DARK_GRAY
const CLUTTER_KEY_Greek_LAMBDA = C.CLUTTER_KEY_Greek_LAMBDA
const CLUTTER_Codeinput = C.CLUTTER_Codeinput
const CLUTTER_ncaron = C.CLUTTER_ncaron
const CLUTTER_KEY_Sinh_ii2 = C.CLUTTER_KEY_Sinh_ii2
const CLUTTER_KEY_Cyrillic_YA = C.CLUTTER_KEY_Cyrillic_YA
const CLUTTER_KEY_filledtribulletdown = C.CLUTTER_KEY_filledtribulletdown
const CLUTTER_KEY_Ukrainian_GHE_WITH_UPTURN = C.CLUTTER_KEY_Ukrainian_GHE_WITH_UPTURN
const CLUTTER_KEY_Georgian_jhan = C.CLUTTER_KEY_Georgian_jhan
const CLUTTER_KEY_filledtribulletup = C.CLUTTER_KEY_filledtribulletup
const CLUTTER_KEY_eth = C.CLUTTER_KEY_eth
const CLUTTER_Georgian_hoe = C.CLUTTER_Georgian_hoe
const CLUTTER_KEY_onefifth = C.CLUTTER_KEY_onefifth
const CLUTTER_ediaeresis = C.CLUTTER_ediaeresis
const CLUTTER_KEY_Cyrillic_YU = C.CLUTTER_KEY_Cyrillic_YU
const CLUTTER_MODIFIER_RESERVED_25_MASK = C.CLUTTER_MODIFIER_RESERVED_25_MASK
const CLUTTER_KEY_ballotcross = C.CLUTTER_KEY_ballotcross
const CLUTTER_braille_dots_134567 = C.CLUTTER_braille_dots_134567
const CLUTTER_KEY_F18 = C.CLUTTER_KEY_F18
const CLUTTER_KEY_hebrew_kuf = C.CLUTTER_KEY_hebrew_kuf
const CLUTTER_KEY_AudioRecord = C.CLUTTER_KEY_AudioRecord
const CLUTTER_icircumflex = C.CLUTTER_icircumflex
const CLUTTER_KP_7 = C.CLUTTER_KP_7
const CLUTTER_elementof = C.CLUTTER_elementof
const CLUTTER_ssharp = C.CLUTTER_ssharp
const CLUTTER_braille_dots_134568 = C.CLUTTER_braille_dots_134568
const CLUTTER_Greek_epsilonaccent = C.CLUTTER_Greek_epsilonaccent
const CLUTTER_KEY_Arabic_comma = C.CLUTTER_KEY_Arabic_comma
const CLUTTER_KEY_Sinh_na = C.CLUTTER_KEY_Sinh_na
const CLUTTER_KEY_Thai_phosamphao = C.CLUTTER_KEY_Thai_phosamphao
const CLUTTER_KEY_Sinh_ng = C.CLUTTER_KEY_Sinh_ng
const CLUTTER_KEY_acircumflexbelowdot = C.CLUTTER_KEY_acircumflexbelowdot
const CLUTTER_INPUT_AXIS_DISTANCE = C.CLUTTER_INPUT_AXIS_DISTANCE
const CLUTTER_kana_NI = C.CLUTTER_kana_NI
const CLUTTER_Pointer_Drag4 = C.CLUTTER_Pointer_Drag4
const CLUTTER_underbar = C.CLUTTER_underbar
const CLUTTER_braille_dots_1278 = C.CLUTTER_braille_dots_1278
const CLUTTER_emopenrectangle = C.CLUTTER_emopenrectangle
const CLUTTER_KEY_Georgian_an = C.CLUTTER_KEY_Georgian_an
const CLUTTER_kana_SA = C.CLUTTER_kana_SA
const CLUTTER_KEY_Hangul_RieulTieut = C.CLUTTER_KEY_Hangul_RieulTieut
const CLUTTER_KEY_Thai_moma = C.CLUTTER_KEY_Thai_moma
const CLUTTER_KEY_question = C.CLUTTER_KEY_question
const CLUTTER_KEY_hebrew_daleth = C.CLUTTER_KEY_hebrew_daleth
const CLUTTER_Georgian_char = C.CLUTTER_Georgian_char
const CLUTTER_em3space = C.CLUTTER_em3space
const CLUTTER_acircumflex = C.CLUTTER_acircumflex
const CLUTTER_Thai_khorakhang = C.CLUTTER_Thai_khorakhang
const CLUTTER_KEY_dead_small_schwa = C.CLUTTER_KEY_dead_small_schwa
const CLUTTER_Linefeed = C.CLUTTER_Linefeed
const CLUTTER_Hangul_Codeinput = C.CLUTTER_Hangul_Codeinput
const CLUTTER_Armenian_ZA = C.CLUTTER_Armenian_ZA
const CLUTTER_KEY_braille_dots_12478 = C.CLUTTER_KEY_braille_dots_12478
const CLUTTER_KEY_Hangul_Khieuq = C.CLUTTER_KEY_Hangul_Khieuq
const CLUTTER_KEY_braille_dots_356 = C.CLUTTER_KEY_braille_dots_356
const CLUTTER_ISO_Level3_Latch = C.CLUTTER_ISO_Level3_Latch
const CLUTTER_KEY_lcaron = C.CLUTTER_KEY_lcaron
const CLUTTER_Cyrillic_ha_descender = C.CLUTTER_Cyrillic_ha_descender
const CLUTTER_KEY_LiraSign = C.CLUTTER_KEY_LiraSign
const CLUTTER_ISO_Prev_Group = C.CLUTTER_ISO_Prev_Group
const CLUTTER_KEY_Abelowdot = C.CLUTTER_KEY_Abelowdot
const CLUTTER_KEY_F13 = C.CLUTTER_KEY_F13
const CLUTTER_KEY_vertconnector = C.CLUTTER_KEY_vertconnector
const CLUTTER_Sinh_ha = C.CLUTTER_Sinh_ha
const CLUTTER_KEY_Arabic_waw = C.CLUTTER_KEY_Arabic_waw
const CLUTTER_EASE_IN_OUT_BACK = C.CLUTTER_EASE_IN_OUT_BACK
const CLUTTER_COLOR_SCARLET_RED_LIGHT = C.CLUTTER_COLOR_SCARLET_RED_LIGHT
const CLUTTER_KEY_Cyrillic_shha = C.CLUTTER_KEY_Cyrillic_shha
const CLUTTER_KEY_Ohook = C.CLUTTER_KEY_Ohook
const CLUTTER_Ograve = C.CLUTTER_Ograve
const CLUTTER_EZH = C.CLUTTER_EZH
const CLUTTER_Greek_kappa = C.CLUTTER_Greek_kappa
const CLUTTER_KEY_Greek_THETA = C.CLUTTER_KEY_Greek_THETA
const CLUTTER_braille_dots_236 = C.CLUTTER_braille_dots_236
const CLUTTER_MODIFIER_RESERVED_29_MASK = C.CLUTTER_MODIFIER_RESERVED_29_MASK
const CLUTTER_KP_9 = C.CLUTTER_KP_9
const CLUTTER_INPUT_AXIS_IGNORE = C.CLUTTER_INPUT_AXIS_IGNORE
const CLUTTER_KEY_Hangul_AE = C.CLUTTER_KEY_Hangul_AE
const CLUTTER_KEY_braille_dots_2347 = C.CLUTTER_KEY_braille_dots_2347
const CLUTTER_botvertsummationconnector = C.CLUTTER_botvertsummationconnector
const CLUTTER_emacron = C.CLUTTER_emacron
const CLUTTER_KEY_Hangul_WI = C.CLUTTER_KEY_Hangul_WI
const CLUTTER_KEY_Hangul_WE = C.CLUTTER_KEY_Hangul_WE
const CLUTTER_KEY_fourfifths = C.CLUTTER_KEY_fourfifths
const CLUTTER_dead_belowcircumflex = C.CLUTTER_dead_belowcircumflex
const CLUTTER_Greek_omegaaccent = C.CLUTTER_Greek_omegaaccent
const CLUTTER_KEY_topt = C.CLUTTER_KEY_topt
const CLUTTER_KEY_script_switch = C.CLUTTER_KEY_script_switch
const CLUTTER_KEY_KP_Home = C.CLUTTER_KEY_KP_Home
const CLUTTER_Thai_maiyamok = C.CLUTTER_Thai_maiyamok
const CLUTTER_braille_dots_2467 = C.CLUTTER_braille_dots_2467
const CLUTTER_braille_dot_10 = C.CLUTTER_braille_dot_10
const CLUTTER_telephone = C.CLUTTER_telephone
const CLUTTER_3270_Play = C.CLUTTER_3270_Play
const CLUTTER_KEY_Serbian_dze = C.CLUTTER_KEY_Serbian_dze
const CLUTTER_KEY_Armenian_pe = C.CLUTTER_KEY_Armenian_pe
const CLUTTER_Switch_VT_10 = C.CLUTTER_Switch_VT_10
const CLUTTER_Stop = C.CLUTTER_Stop
const CLUTTER_approximate = C.CLUTTER_approximate
const CLUTTER_KEY_Udoubleacute = C.CLUTTER_KEY_Udoubleacute
const CLUTTER_TABLET_DEVICE = C.CLUTTER_TABLET_DEVICE
const CLUTTER_KEY_NewSheqelSign = C.CLUTTER_KEY_NewSheqelSign
const CLUTTER_KEY_checkmark = C.CLUTTER_KEY_checkmark
const CLUTTER_KEY_hebrew_finalpe = C.CLUTTER_KEY_hebrew_finalpe
const CLUTTER_Greek_ETAaccent = C.CLUTTER_Greek_ETAaccent
const CLUTTER_Prior = C.CLUTTER_Prior
const CLUTTER_Greek_LAMBDA = C.CLUTTER_Greek_LAMBDA
const CLUTTER_Armenian_GHAT = C.CLUTTER_Armenian_GHAT
const CLUTTER_KEY_leftcaret = C.CLUTTER_KEY_leftcaret
const CLUTTER_KEY_R8 = C.CLUTTER_KEY_R8
const CLUTTER_KEY_R9 = C.CLUTTER_KEY_R9
const CLUTTER_KEY_R6 = C.CLUTTER_KEY_R6
const CLUTTER_KEY_R7 = C.CLUTTER_KEY_R7
const CLUTTER_KEY_R4 = C.CLUTTER_KEY_R4
const CLUTTER_KEY_R5 = C.CLUTTER_KEY_R5
const CLUTTER_KEY_R2 = C.CLUTTER_KEY_R2
const CLUTTER_KEY_R3 = C.CLUTTER_KEY_R3
const CLUTTER_KEY_L10 = C.CLUTTER_KEY_L10
const CLUTTER_KEY_R1 = C.CLUTTER_KEY_R1
const CLUTTER_WINDOWING_X11 = C.CLUTTER_WINDOWING_X11
const CLUTTER_approxeq = C.CLUTTER_approxeq
const CLUTTER_KEY_kana_u = C.CLUTTER_KEY_kana_u
const CLUTTER_KEY_braille_dots_35 = C.CLUTTER_KEY_braille_dots_35
const CLUTTER_KEY_braille_dots_34 = C.CLUTTER_KEY_braille_dots_34
const CLUTTER_Armenian_fe = C.CLUTTER_Armenian_fe
const CLUTTER_KEY_braille_dots_36 = C.CLUTTER_KEY_braille_dots_36
const CLUTTER_KEY_braille_dots_38 = C.CLUTTER_KEY_braille_dots_38
const CLUTTER_kana_TSU = C.CLUTTER_kana_TSU
const CLUTTER_notidentical = C.CLUTTER_notidentical
const CLUTTER_KEY_FFrancSign = C.CLUTTER_KEY_FFrancSign
const CLUTTER_MonBrightnessDown = C.CLUTTER_MonBrightnessDown
const CLUTTER_KEY_zabovedot = C.CLUTTER_KEY_zabovedot
const CLUTTER_KEY_kana_e = C.CLUTTER_KEY_kana_e
const CLUTTER_COLOR_DARK_CYAN = C.CLUTTER_COLOR_DARK_CYAN
const CLUTTER_KEY_kana_a = C.CLUTTER_KEY_kana_a
const CLUTTER_KEY_Hangul_switch = C.CLUTTER_KEY_Hangul_switch
const CLUTTER_KEY_Pointer_Drag5 = C.CLUTTER_KEY_Pointer_Drag5
const CLUTTER_KEY_Pointer_Drag4 = C.CLUTTER_KEY_Pointer_Drag4
const CLUTTER_KEY_Pointer_Drag3 = C.CLUTTER_KEY_Pointer_Drag3
const CLUTTER_KEY_Pointer_Drag2 = C.CLUTTER_KEY_Pointer_Drag2
const CLUTTER_KEY_Pointer_Drag1 = C.CLUTTER_KEY_Pointer_Drag1
const CLUTTER_KEY_kana_i = C.CLUTTER_KEY_kana_i
const CLUTTER_KEY_y = C.CLUTTER_KEY_y
const CLUTTER_KEY_AudioMute = C.CLUTTER_KEY_AudioMute
const CLUTTER_KEY_kana_U = C.CLUTTER_KEY_kana_U
const CLUTTER_KEY_Arabic_veh = C.CLUTTER_KEY_Arabic_veh
const CLUTTER_Cyrillic_u_straight = C.CLUTTER_Cyrillic_u_straight
const CLUTTER_braille_dots_2378 = C.CLUTTER_braille_dots_2378
const CLUTTER_Hangul_NieunHieuh = C.CLUTTER_Hangul_NieunHieuh
const CLUTTER_KEY_union = C.CLUTTER_KEY_union
const CLUTTER_KEY_Armenian_accent = C.CLUTTER_KEY_Armenian_accent
const CLUTTER_KEY_hebrew_kaph = C.CLUTTER_KEY_hebrew_kaph
const CLUTTER_Sinh_e2 = C.CLUTTER_Sinh_e2
const CLUTTER_KEY_Arabic_qaf = C.CLUTTER_KEY_Arabic_qaf
const CLUTTER_KEY_kana_E = C.CLUTTER_KEY_kana_E
const CLUTTER_braille_dots_2357 = C.CLUTTER_braille_dots_2357
const CLUTTER_KEY_Sleep = C.CLUTTER_KEY_Sleep
const CLUTTER_KEY_kana_A = C.CLUTTER_KEY_kana_A
const CLUTTER_KEY_kana_N = C.CLUTTER_KEY_kana_N
const CLUTTER_KEY_Armenian_ZHE = C.CLUTTER_KEY_Armenian_ZHE
const CLUTTER_upstile = C.CLUTTER_upstile
const CLUTTER_KEY_Armenian_GHAT = C.CLUTTER_KEY_Armenian_GHAT
const CLUTTER_KEY_caret = C.CLUTTER_KEY_caret
const CLUTTER_KEY_asciicircum = C.CLUTTER_KEY_asciicircum
const CLUTTER_KEY_dead_belowring = C.CLUTTER_KEY_dead_belowring
const CLUTTER_P = C.CLUTTER_P
const CLUTTER_KEY_3270_CursorSelect = C.CLUTTER_KEY_3270_CursorSelect
const CLUTTER_Georgian_an = C.CLUTTER_Georgian_an
const CLUTTER_KEY_similarequal = C.CLUTTER_KEY_similarequal
const CLUTTER_cursor = C.CLUTTER_cursor
const CLUTTER_KEY_Thai_thonangmontho = C.CLUTTER_KEY_Thai_thonangmontho
const CLUTTER_KEY_prolongedsound = C.CLUTTER_KEY_prolongedsound
const CLUTTER_checkmark = C.CLUTTER_checkmark
const CLUTTER_KEY_eacute = C.CLUTTER_KEY_eacute
const CLUTTER_KEY_Cyrillic_ka_vertstroke = C.CLUTTER_KEY_Cyrillic_ka_vertstroke
const CLUTTER_seconds = C.CLUTTER_seconds
const CLUTTER_KEY_Ubelowdot = C.CLUTTER_KEY_Ubelowdot
const CLUTTER_botleftsummation = C.CLUTTER_botleftsummation
const CLUTTER_Sinh_dda = C.CLUTTER_Sinh_dda
const CLUTTER_dead_currency = C.CLUTTER_dead_currency
const CLUTTER_KEY_Georgian_san = C.CLUTTER_KEY_Georgian_san
const CLUTTER_KEY_KP_Page_Down = C.CLUTTER_KEY_KP_Page_Down
const CLUTTER_KEY_ContrastAdjust = C.CLUTTER_KEY_ContrastAdjust
const CLUTTER_Armenian_hi = C.CLUTTER_Armenian_hi
const CLUTTER_KEY_emptyset = C.CLUTTER_KEY_emptyset
const CLUTTER_Armenian_ho = C.CLUTTER_Armenian_ho
const CLUTTER_KEY_Thai_maichattawa = C.CLUTTER_KEY_Thai_maichattawa
const CLUTTER_KEY_Armenian_ini = C.CLUTTER_KEY_Armenian_ini
const CLUTTER_braille_dots_125 = C.CLUTTER_braille_dots_125
const CLUTTER_KEY_Hangul_YeorinHieuh = C.CLUTTER_KEY_Hangul_YeorinHieuh
const CLUTTER_braille_dots_123457 = C.CLUTTER_braille_dots_123457
const CLUTTER_Ohook = C.CLUTTER_Ohook
const CLUTTER_KEY_ifonlyif = C.CLUTTER_KEY_ifonlyif
const CLUTTER_COLOR_GREEN = C.CLUTTER_COLOR_GREEN
const CLUTTER_MODIFIER_RESERVED_24_MASK = C.CLUTTER_MODIFIER_RESERVED_24_MASK
const CLUTTER_uparrow = C.CLUTTER_uparrow
const CLUTTER_telephonerecorder = C.CLUTTER_telephonerecorder
const CLUTTER_Shop = C.CLUTTER_Shop
const CLUTTER_CONTENT_GRAVITY_TOP_RIGHT = C.CLUTTER_CONTENT_GRAVITY_TOP_RIGHT
const CLUTTER_COLOR_BLUE = C.CLUTTER_COLOR_BLUE
const CLUTTER_dead_invertedbreve = C.CLUTTER_dead_invertedbreve
const CLUTTER_KEY_Arabic_kasra = C.CLUTTER_KEY_Arabic_kasra
const CLUTTER_PICK_ALL = C.CLUTTER_PICK_ALL
const CLUTTER_Thai_bobaimai = C.CLUTTER_Thai_bobaimai
const CLUTTER_COLOR_SKY_BLUE = C.CLUTTER_COLOR_SKY_BLUE
const CLUTTER_L = C.CLUTTER_L
const CLUTTER_KEY_Greek_IOTAdieresis = C.CLUTTER_KEY_Greek_IOTAdieresis
const CLUTTER_leftdoublequotemark = C.CLUTTER_leftdoublequotemark
const CLUTTER_ballotcross = C.CLUTTER_ballotcross
const CLUTTER_C = C.CLUTTER_C
const CLUTTER_AudioRaiseVolume = C.CLUTTER_AudioRaiseVolume
const CLUTTER_KEY_doubledagger = C.CLUTTER_KEY_doubledagger
const CLUTTER_braille_dots_58 = C.CLUTTER_braille_dots_58
const CLUTTER_Arabic_ha = C.CLUTTER_Arabic_ha
const CLUTTER_KEY_AccessX_Feedback_Enable = C.CLUTTER_KEY_AccessX_Feedback_Enable
const CLUTTER_blank = C.CLUTTER_blank
const CLUTTER_Armenian_INI = C.CLUTTER_Armenian_INI
const CLUTTER_KEY_Hangul_RieulPieub = C.CLUTTER_KEY_Hangul_RieulPieub
const CLUTTER_3270_Left2 = C.CLUTTER_3270_Left2
const CLUTTER_ZoomOut = C.CLUTTER_ZoomOut
const CLUTTER_hebrew_het = C.CLUTTER_hebrew_het
const CLUTTER_KEY_kana_FU = C.CLUTTER_KEY_kana_FU
const CLUTTER_kana_YA = C.CLUTTER_kana_YA
const CLUTTER_KEY_Thai_sarai = C.CLUTTER_KEY_Thai_sarai
const CLUTTER_leftopentriangle = C.CLUTTER_leftopentriangle
const CLUTTER_Pabovedot = C.CLUTTER_Pabovedot
const CLUTTER_Thai_chochoe = C.CLUTTER_Thai_chochoe
const CLUTTER_Arabic_percent = C.CLUTTER_Arabic_percent
const CLUTTER_Greek_upsilonaccentdieresis = C.CLUTTER_Greek_upsilonaccentdieresis
const CLUTTER_KEY_Hangul_YAE = C.CLUTTER_KEY_Hangul_YAE
const CLUTTER_KEY_Greek_lamda = C.CLUTTER_KEY_Greek_lamda
const CLUTTER_KEY_Multi_key = C.CLUTTER_KEY_Multi_key
const CLUTTER_KEY_Ograve = C.CLUTTER_KEY_Ograve
const CLUTTER_onethird = C.CLUTTER_onethird
const CLUTTER_KEY_musicalsharp = C.CLUTTER_KEY_musicalsharp
const CLUTTER_Armenian_to = C.CLUTTER_Armenian_to
const CLUTTER_registered = C.CLUTTER_registered
const CLUTTER_KEY_braille_dots_12378 = C.CLUTTER_KEY_braille_dots_12378
const CLUTTER_MODIFIER_RESERVED_13_MASK = C.CLUTTER_MODIFIER_RESERVED_13_MASK
const CLUTTER_KEY_Hangul_J_Mieum = C.CLUTTER_KEY_Hangul_J_Mieum
const CLUTTER_KEY_agrave = C.CLUTTER_KEY_agrave
const CLUTTER_KEY_kana_TA = C.CLUTTER_KEY_kana_TA
const CLUTTER_KEY_DongSign = C.CLUTTER_KEY_DongSign
const CLUTTER_KEY_braille_dots_1267 = C.CLUTTER_KEY_braille_dots_1267
const CLUTTER_KEY_kana_TE = C.CLUTTER_KEY_kana_TE
const CLUTTER_Greek_chi = C.CLUTTER_Greek_chi
const CLUTTER_KEY_kana_TI = C.CLUTTER_KEY_kana_TI
const CLUTTER_KEY_kana_TO = C.CLUTTER_KEY_kana_TO
const CLUTTER_KEY_mabovedot = C.CLUTTER_KEY_mabovedot
const CLUTTER_braille_dots_234567 = C.CLUTTER_braille_dots_234567
const CLUTTER_KEY_braille_dots_1346 = C.CLUTTER_KEY_braille_dots_1346
const CLUTTER_EFFECT_PAINT_ACTOR_DIRTY = C.CLUTTER_EFFECT_PAINT_ACTOR_DIRTY
const CLUTTER_COLOR_SCARLET_RED_DARK = C.CLUTTER_COLOR_SCARLET_RED_DARK
const CLUTTER_KEY_kana_TU = C.CLUTTER_KEY_kana_TU
const CLUTTER_Armenian_GIM = C.CLUTTER_Armenian_GIM
const CLUTTER_ACTOR_NO_LAYOUT = C.CLUTTER_ACTOR_NO_LAYOUT
const CLUTTER_KEY_braille_dots_3578 = C.CLUTTER_KEY_braille_dots_3578
const CLUTTER_BIN_ALIGNMENT_FILL = C.CLUTTER_BIN_ALIGNMENT_FILL
const CLUTTER_Forward = C.CLUTTER_Forward
const CLUTTER_KEY_Utilde = C.CLUTTER_KEY_Utilde
const CLUTTER_KEY_braille_dots_1345 = C.CLUTTER_KEY_braille_dots_1345
const CLUTTER_braille_dots_2345678 = C.CLUTTER_braille_dots_2345678
const CLUTTER_KEY_hebrew_taf = C.CLUTTER_KEY_hebrew_taf
const CLUTTER_N_DEVICE_TYPES = C.CLUTTER_N_DEVICE_TYPES
const CLUTTER_atilde = C.CLUTTER_atilde
const CLUTTER_Phone = C.CLUTTER_Phone
const CLUTTER_Ohorntilde = C.CLUTTER_Ohorntilde
const CLUTTER_KEY_Zacute = C.CLUTTER_KEY_Zacute
const CLUTTER_Eth = C.CLUTTER_Eth
const CLUTTER_Hangul_Romaja = C.CLUTTER_Hangul_Romaja
const CLUTTER_Pointer_Button1 = C.CLUTTER_Pointer_Button1
const CLUTTER_KEY_greater = C.CLUTTER_KEY_greater
const CLUTTER_KEY_Shift_Lock = C.CLUTTER_KEY_Shift_Lock
const CLUTTER_KEY_Sinh_ai2 = C.CLUTTER_KEY_Sinh_ai2
const CLUTTER_q = C.CLUTTER_q
const CLUTTER_LINEAR = C.CLUTTER_LINEAR
const CLUTTER_Yacute = C.CLUTTER_Yacute
const CLUTTER_Sinh_tha = C.CLUTTER_Sinh_tha
const CLUTTER_KEY_braille_dots_14567 = C.CLUTTER_KEY_braille_dots_14567
const CLUTTER_Home = C.CLUTTER_Home
const CLUTTER_KEY_kana_HA = C.CLUTTER_KEY_kana_HA
const CLUTTER_Cyrillic_O_bar = C.CLUTTER_Cyrillic_O_bar
const CLUTTER_KEY_Gcircumflex = C.CLUTTER_KEY_Gcircumflex
const CLUTTER_w = C.CLUTTER_w
const CLUTTER_KEY_obelowdot = C.CLUTTER_KEY_obelowdot
const CLUTTER_KEY_braille_dots_14568 = C.CLUTTER_KEY_braille_dots_14568
const CLUTTER_KEY_ScreenSaver = C.CLUTTER_KEY_ScreenSaver
const CLUTTER_KEY_ssharp = C.CLUTTER_KEY_ssharp
const CLUTTER_Ch = C.CLUTTER_Ch
const CLUTTER_KEY_Help = C.CLUTTER_KEY_Help
const CLUTTER_ocircumflexgrave = C.CLUTTER_ocircumflexgrave
const CLUTTER_Greek_UPSILONdieresis = C.CLUTTER_Greek_UPSILONdieresis
const CLUTTER_topleftsummation = C.CLUTTER_topleftsummation
const CLUTTER_KEY_OE = C.CLUTTER_KEY_OE
const CLUTTER_SingleCandidate = C.CLUTTER_SingleCandidate
const CLUTTER_KEY_Ohornacute = C.CLUTTER_KEY_Ohornacute
const CLUTTER_EASE_IN_OUT_BOUNCE = C.CLUTTER_EASE_IN_OUT_BOUNCE
const CLUTTER_KEY_braille_dots_256 = C.CLUTTER_KEY_braille_dots_256
const CLUTTER_ISO_Left_Tab = C.CLUTTER_ISO_Left_Tab
const CLUTTER_KEY_Arabic_theh = C.CLUTTER_KEY_Arabic_theh
const CLUTTER_Hangul_YA = C.CLUTTER_Hangul_YA
const CLUTTER_Hangul_YO = C.CLUTTER_Hangul_YO
const CLUTTER_KEY_KP_Right = C.CLUTTER_KEY_KP_Right
const CLUTTER_i = C.CLUTTER_i
const CLUTTER_Hangul_YI = C.CLUTTER_Hangul_YI
const CLUTTER_KEY_Cyrillic_ZE = C.CLUTTER_KEY_Cyrillic_ZE
const CLUTTER_CH = C.CLUTTER_CH
const CLUTTER_kana_WO = C.CLUTTER_kana_WO
const CLUTTER_Hangul_YU = C.CLUTTER_Hangul_YU
const CLUTTER_Music = C.CLUTTER_Music
const CLUTTER_KEY_braille_dots_1468 = C.CLUTTER_KEY_braille_dots_1468
const CLUTTER_KEY_Pointer_DblClick_Dflt = C.CLUTTER_KEY_Pointer_DblClick_Dflt
const CLUTTER_KEY_sixsubscript = C.CLUTTER_KEY_sixsubscript
const CLUTTER_CD = C.CLUTTER_CD
const CLUTTER_Arabic_comma = C.CLUTTER_Arabic_comma
const CLUTTER_KEY_ISO_Lock = C.CLUTTER_KEY_ISO_Lock
const CLUTTER_KEY_Page_Down = C.CLUTTER_KEY_Page_Down
const CLUTTER_Pointer_UpRight = C.CLUTTER_Pointer_UpRight
const CLUTTER_Arabic_ain = C.CLUTTER_Arabic_ain
const CLUTTER_braille_dots_14567 = C.CLUTTER_braille_dots_14567
const CLUTTER_udoubleacute = C.CLUTTER_udoubleacute
const CLUTTER_braille_dots_14568 = C.CLUTTER_braille_dots_14568
const CLUTTER_KEY_Ybelowdot = C.CLUTTER_KEY_Ybelowdot
const CLUTTER_l = C.CLUTTER_l
const CLUTTER_COLOR_ORANGE = C.CLUTTER_COLOR_ORANGE
const CLUTTER_KEY_Delete = C.CLUTTER_KEY_Delete
const CLUTTER_Page_Down = C.CLUTTER_Page_Down
const CLUTTER_WonSign = C.CLUTTER_WonSign
const CLUTTER_Armenian_BEN = C.CLUTTER_Armenian_BEN
const CLUTTER_KEY_dead_semivoiced_sound = C.CLUTTER_KEY_dead_semivoiced_sound
const CLUTTER_KEY_Arabic_zah = C.CLUTTER_KEY_Arabic_zah
const CLUTTER_hebrew_ayin = C.CLUTTER_hebrew_ayin
const CLUTTER_Greek_MU = C.CLUTTER_Greek_MU
const CLUTTER_KEY_gcaron = C.CLUTTER_KEY_gcaron
const CLUTTER_Hangul_J_Hieuh = C.CLUTTER_Hangul_J_Hieuh
const CLUTTER_Cyrillic_HA_descender = C.CLUTTER_Cyrillic_HA_descender
const CLUTTER_KEY_Next = C.CLUTTER_KEY_Next
const CLUTTER_KEY_Georgian_xan = C.CLUTTER_KEY_Georgian_xan
const CLUTTER_Abrevebelowdot = C.CLUTTER_Abrevebelowdot
const CLUTTER_function = C.CLUTTER_function
const CLUTTER_Cyrillic_je = C.CLUTTER_Cyrillic_je
const CLUTTER_KEY_Sinh_i2 = C.CLUTTER_KEY_Sinh_i2
const CLUTTER_KEY_endash = C.CLUTTER_KEY_endash
const CLUTTER_KEY_Thai_thanthakhat = C.CLUTTER_KEY_Thai_thanthakhat
const CLUTTER_jot = C.CLUTTER_jot
const CLUTTER_braille_dots_1268 = C.CLUTTER_braille_dots_1268
const CLUTTER_THORN = C.CLUTTER_THORN
const CLUTTER_KEY_toprightsummation = C.CLUTTER_KEY_toprightsummation
const CLUTTER_KEY_Arabic_heh = C.CLUTTER_KEY_Arabic_heh
const CLUTTER_RepeatKeys_Enable = C.CLUTTER_RepeatKeys_Enable
const CLUTTER_braille_dots_1367 = C.CLUTTER_braille_dots_1367
const CLUTTER_Hangul_YE = C.CLUTTER_Hangul_YE
const CLUTTER_KEY_Greek_iota = C.CLUTTER_KEY_Greek_iota
const CLUTTER_d = C.CLUTTER_d
const CLUTTER_botleftparens = C.CLUTTER_botleftparens
const CLUTTER_ISO_Level3_Lock = C.CLUTTER_ISO_Level3_Lock
const CLUTTER_Korean_Won = C.CLUTTER_Korean_Won
const CLUTTER_KEY_uptack = C.CLUTTER_KEY_uptack
const CLUTTER_braille_dots_1248 = C.CLUTTER_braille_dots_1248
const CLUTTER_KEY_KP_Insert = C.CLUTTER_KEY_KP_Insert
const CLUTTER_leftsinglequotemark = C.CLUTTER_leftsinglequotemark
const CLUTTER_braille_dots_125678 = C.CLUTTER_braille_dots_125678
const CLUTTER_KEY_Sinh_lu2 = C.CLUTTER_KEY_Sinh_lu2
const CLUTTER_braille_dots_1246 = C.CLUTTER_braille_dots_1246
const CLUTTER_KEY_MouseKeys_Accel_Enable = C.CLUTTER_KEY_MouseKeys_Accel_Enable
const CLUTTER_Cyrillic_zhe = C.CLUTTER_Cyrillic_zhe
const CLUTTER_KEY_Sinh_aa = C.CLUTTER_KEY_Sinh_aa
const CLUTTER_Cyrillic_YERU = C.CLUTTER_Cyrillic_YERU
const CLUTTER_KEY_Serbian_NJE = C.CLUTTER_KEY_Serbian_NJE
const CLUTTER_Odoubleacute = C.CLUTTER_Odoubleacute
const CLUTTER_dcaron = C.CLUTTER_dcaron
const CLUTTER_Ukranian_JE = C.CLUTTER_Ukranian_JE
const CLUTTER_EXTENSION_DEVICE = C.CLUTTER_EXTENSION_DEVICE
const CLUTTER_KEY_botrightsqbracket = C.CLUTTER_KEY_botrightsqbracket
const CLUTTER_KEY_braille_dots_678 = C.CLUTTER_KEY_braille_dots_678
const CLUTTER_KEY_braille_dots_347 = C.CLUTTER_KEY_braille_dots_347
const CLUTTER_Print = C.CLUTTER_Print
const CLUTTER_KEY_ScrollDown = C.CLUTTER_KEY_ScrollDown
const CLUTTER_braille_dots_134578 = C.CLUTTER_braille_dots_134578
const CLUTTER_Greek_switch = C.CLUTTER_Greek_switch
const CLUTTER_KEY_FrameBack = C.CLUTTER_KEY_FrameBack
const CLUTTER_zstroke = C.CLUTTER_zstroke
const CLUTTER_braille_dots_368 = C.CLUTTER_braille_dots_368
const CLUTTER_marker = C.CLUTTER_marker
const CLUTTER_kana_yo = C.CLUTTER_kana_yo
const CLUTTER_KEY_hebrew_zain = C.CLUTTER_KEY_hebrew_zain
const CLUTTER_L10 = C.CLUTTER_L10
const CLUTTER_braille_dots_1245 = C.CLUTTER_braille_dots_1245
const CLUTTER_KEY_braille_dots_1348 = C.CLUTTER_KEY_braille_dots_1348
const CLUTTER_KEY_em3space = C.CLUTTER_KEY_em3space
const CLUTTER_KEY_ohornacute = C.CLUTTER_KEY_ohornacute
const CLUTTER_PATH_CLOSE = C.CLUTTER_PATH_CLOSE
const CLUTTER_Georgian_don = C.CLUTTER_Georgian_don
const CLUTTER_KEY_Arabic_alef = C.CLUTTER_KEY_Arabic_alef
const CLUTTER_CONTENT_GRAVITY_TOP = C.CLUTTER_CONTENT_GRAVITY_TOP
const CLUTTER_KEY_foursubscript = C.CLUTTER_KEY_foursubscript
const CLUTTER_AudioLowerVolume = C.CLUTTER_AudioLowerVolume
const CLUTTER_KEY_Sinh_luu = C.CLUTTER_KEY_Sinh_luu
const CLUTTER_KEY_kana_NO = C.CLUTTER_KEY_kana_NO
const CLUTTER_FEATURE_SYNC_TO_VBLANK = C.CLUTTER_FEATURE_SYNC_TO_VBLANK
const CLUTTER_KEY_Game = C.CLUTTER_KEY_Game
const CLUTTER_Thai_khokhon = C.CLUTTER_Thai_khokhon
const CLUTTER_KP_Begin = C.CLUTTER_KP_Begin
const CLUTTER_KEY_3270_BackTab = C.CLUTTER_KEY_3270_BackTab
const CLUTTER_KEY_kana_NI = C.CLUTTER_KEY_kana_NI
const CLUTTER_Sinh_ya = C.CLUTTER_Sinh_ya
const CLUTTER_Arabic_damma = C.CLUTTER_Arabic_damma
const CLUTTER_KEY_ISO_Partial_Space_Right = C.CLUTTER_KEY_ISO_Partial_Space_Right
const CLUTTER_ACTOR_ALIGN_START = C.CLUTTER_ACTOR_ALIGN_START
const CLUTTER_TEXTURE_YUV_FLAG_YUV2 = C.CLUTTER_TEXTURE_YUV_FLAG_YUV2
const CLUTTER_KEY_hebrew_aleph = C.CLUTTER_KEY_hebrew_aleph
const CLUTTER_KEY_Sinh_mba = C.CLUTTER_KEY_Sinh_mba
const CLUTTER_KEY_Thai_fofa = C.CLUTTER_KEY_Thai_fofa
const CLUTTER_KEY_braille_dots_137 = C.CLUTTER_KEY_braille_dots_137
const CLUTTER_KEY_Serbian_LJE = C.CLUTTER_KEY_Serbian_LJE
const CLUTTER_Ukrainian_ie = C.CLUTTER_Ukrainian_ie
const CLUTTER_KEY_logicalor = C.CLUTTER_KEY_logicalor
const CLUTTER_KEY_Cyrillic_DE = C.CLUTTER_KEY_Cyrillic_DE
const CLUTTER_KEY_braille_dots_123568 = C.CLUTTER_KEY_braille_dots_123568
const CLUTTER_etilde = C.CLUTTER_etilde
const CLUTTER_kana_o = C.CLUTTER_kana_o
const CLUTTER_Hangul_RieulSios = C.CLUTTER_Hangul_RieulSios
const CLUTTER_KEY_dollar = C.CLUTTER_KEY_dollar
const CLUTTER_Cyrillic_schwa = C.CLUTTER_Cyrillic_schwa
const CLUTTER_club = C.CLUTTER_club
const CLUTTER_KEY_registered = C.CLUTTER_KEY_registered
const CLUTTER_Arabic_hamzaonyeh = C.CLUTTER_Arabic_hamzaonyeh
const CLUTTER_pabovedot = C.CLUTTER_pabovedot
const CLUTTER_KEY_Sinh_tta = C.CLUTTER_KEY_Sinh_tta
const CLUTTER_braille_dots_35678 = C.CLUTTER_braille_dots_35678
const CLUTTER_EVENT_NONE = C.CLUTTER_EVENT_NONE
const CLUTTER_KEY_Arabic_hamza_above = C.CLUTTER_KEY_Arabic_hamza_above
const CLUTTER_abrevebelowdot = C.CLUTTER_abrevebelowdot
const CLUTTER_Prev_VMode = C.CLUTTER_Prev_VMode
const CLUTTER_Sinh_ee = C.CLUTTER_Sinh_ee
const CLUTTER_KEY_Greek_GAMMA = C.CLUTTER_KEY_Greek_GAMMA
const CLUTTER_KEY_3270_Copy = C.CLUTTER_KEY_3270_Copy
const CLUTTER_KEY_Rcedilla = C.CLUTTER_KEY_Rcedilla
const CLUTTER_KEY_leftanglebracket = C.CLUTTER_KEY_leftanglebracket
const CLUTTER_KEY_3270_Setup = C.CLUTTER_KEY_3270_Setup
const CLUTTER_Delete = C.CLUTTER_Delete
const CLUTTER_KEY_uhornacute = C.CLUTTER_KEY_uhornacute
const CLUTTER_F5 = C.CLUTTER_F5
const CLUTTER_Thai_soso = C.CLUTTER_Thai_soso
const CLUTTER_braille_dots_167 = C.CLUTTER_braille_dots_167
const CLUTTER_KEY_braille_dots_12468 = C.CLUTTER_KEY_braille_dots_12468
const CLUTTER_ISO_Group_Lock = C.CLUTTER_ISO_Group_Lock
const CLUTTER_KP_Divide = C.CLUTTER_KP_Divide
const CLUTTER_femalesymbol = C.CLUTTER_femalesymbol
const CLUTTER_Sinh_i = C.CLUTTER_Sinh_i
const CLUTTER_KEY_Hangul_E = C.CLUTTER_KEY_Hangul_E
const CLUTTER_KEY_uhorntilde = C.CLUTTER_KEY_uhorntilde
const CLUTTER_KEY_Ukranian_i = C.CLUTTER_KEY_Ukranian_i
const CLUTTER_KEY_Sinh_ee2 = C.CLUTTER_KEY_Sinh_ee2
const CLUTTER_Sinh_a = C.CLUTTER_Sinh_a
const CLUTTER_KEY_Thai_maitho = C.CLUTTER_KEY_Thai_maitho
const CLUTTER_Sinh_e = C.CLUTTER_Sinh_e
const CLUTTER_kana_switch = C.CLUTTER_kana_switch
const CLUTTER_KEY_enopencircbullet = C.CLUTTER_KEY_enopencircbullet
const CLUTTER_dead_a = C.CLUTTER_dead_a
const CLUTTER_KEY_Georgian_jil = C.CLUTTER_KEY_Georgian_jil
const CLUTTER_DESTROY_NOTIFY = C.CLUTTER_DESTROY_NOTIFY
const CLUTTER_KEY_Hangul_Hieuh = C.CLUTTER_KEY_Hangul_Hieuh
const CLUTTER_KEY_braille_dots_57 = C.CLUTTER_KEY_braille_dots_57
const CLUTTER_nobreakspace = C.CLUTTER_nobreakspace
const CLUTTER_KEY_Cyrillic_ghe_bar = C.CLUTTER_KEY_Cyrillic_ghe_bar
const CLUTTER_Sinh_u = C.CLUTTER_Sinh_u
const CLUTTER_KEY_containsas = C.CLUTTER_KEY_containsas
const CLUTTER_KEY_braille_dots_26 = C.CLUTTER_KEY_braille_dots_26
const CLUTTER_KEY_braille_dots_27 = C.CLUTTER_KEY_braille_dots_27
const CLUTTER_KEY_braille_dots_24 = C.CLUTTER_KEY_braille_dots_24
const CLUTTER_KEY_braille_dots_25 = C.CLUTTER_KEY_braille_dots_25
const CLUTTER_KEY_Cyrillic_SHORTI = C.CLUTTER_KEY_Cyrillic_SHORTI
const CLUTTER_KEY_braille_dots_23 = C.CLUTTER_KEY_braille_dots_23
const CLUTTER_KEY_upshoe = C.CLUTTER_KEY_upshoe
const CLUTTER_twosubscript = C.CLUTTER_twosubscript
const CLUTTER_KEY_Pointer_Down = C.CLUTTER_KEY_Pointer_Down
const CLUTTER_TouchpadOff = C.CLUTTER_TouchpadOff
const CLUTTER_EASE_IN_CUBIC = C.CLUTTER_EASE_IN_CUBIC
const CLUTTER_OE = C.CLUTTER_OE
const CLUTTER_KEY_braille_dots_28 = C.CLUTTER_KEY_braille_dots_28
const CLUTTER_horizconnector = C.CLUTTER_horizconnector
const CLUTTER_KEY_braille_dots_4678 = C.CLUTTER_KEY_braille_dots_4678
const CLUTTER_KEY_uacute = C.CLUTTER_KEY_uacute
const CLUTTER_hebrew_finalkaph = C.CLUTTER_hebrew_finalkaph
const CLUTTER_KEY_3270_Left2 = C.CLUTTER_KEY_3270_Left2
const CLUTTER_Georgian_ban = C.CLUTTER_Georgian_ban
const CLUTTER_KEY_TopMenu = C.CLUTTER_KEY_TopMenu
const CLUTTER_KEY_dead_psili = C.CLUTTER_KEY_dead_psili
const CLUTTER_KEY_Arabic_kasratan = C.CLUTTER_KEY_Arabic_kasratan
const CLUTTER_KEY_Acircumflexgrave = C.CLUTTER_KEY_Acircumflexgrave
const CLUTTER_KEY_Thai_lekha = C.CLUTTER_KEY_Thai_lekha
const CLUTTER_zcaron = C.CLUTTER_zcaron
const CLUTTER_KEY_Hangul_SsangPieub = C.CLUTTER_KEY_Hangul_SsangPieub
const CLUTTER_Uhornbelowdot = C.CLUTTER_Uhornbelowdot
const CLUTTER_braille_dots_2345 = C.CLUTTER_braille_dots_2345
const CLUTTER_Hangul_EU = C.CLUTTER_Hangul_EU
const CLUTTER_kana_RO = C.CLUTTER_kana_RO
const CLUTTER_ucircumflex = C.CLUTTER_ucircumflex
const CLUTTER_KEY_Sinh_va = C.CLUTTER_KEY_Sinh_va
const CLUTTER_KEY_Hangul_Phieuf = C.CLUTTER_KEY_Hangul_Phieuf
const CLUTTER_Arabic_gaf = C.CLUTTER_Arabic_gaf
const CLUTTER_hebrew_teth = C.CLUTTER_hebrew_teth
const CLUTTER_KEY_checkerboard = C.CLUTTER_KEY_checkerboard
const CLUTTER_Hebrew_switch = C.CLUTTER_Hebrew_switch
const CLUTTER_musicalsharp = C.CLUTTER_musicalsharp
const CLUTTER_Imacron = C.CLUTTER_Imacron
const CLUTTER_KEY_LogGrabInfo = C.CLUTTER_KEY_LogGrabInfo
const CLUTTER_notequal = C.CLUTTER_notequal
const CLUTTER_KEY_Cyrillic_ve = C.CLUTTER_KEY_Cyrillic_ve
const CLUTTER_Hangul_EO = C.CLUTTER_Hangul_EO
const CLUTTER_Greek_psi = C.CLUTTER_Greek_psi
const CLUTTER_KEY_sixsuperior = C.CLUTTER_KEY_sixsuperior
const CLUTTER_First_Virtual_Screen = C.CLUTTER_First_Virtual_Screen
const CLUTTER_COLOR_LIGHT_GRAY = C.CLUTTER_COLOR_LIGHT_GRAY
const CLUTTER_KEY_iacute = C.CLUTTER_KEY_iacute
const CLUTTER_macron = C.CLUTTER_macron
const CLUTTER_braille_dots_135678 = C.CLUTTER_braille_dots_135678
const CLUTTER_KEY_overline = C.CLUTTER_KEY_overline
const CLUTTER_Cyrillic_che_vertstroke = C.CLUTTER_Cyrillic_che_vertstroke
const CLUTTER_Cyrillic_ya = C.CLUTTER_Cyrillic_ya
const CLUTTER_KEY_Pointer_DfltBtnNext = C.CLUTTER_KEY_Pointer_DfltBtnNext
const CLUTTER_KEY_Arabic_jeh = C.CLUTTER_KEY_Arabic_jeh
const CLUTTER_KEY_Ukranian_I = C.CLUTTER_KEY_Ukranian_I
const CLUTTER_Thai_saraii = C.CLUTTER_Thai_saraii
const CLUTTER_KEY_Sinh_cha = C.CLUTTER_KEY_Sinh_cha
const CLUTTER_KEY_ht = C.CLUTTER_KEY_ht
const CLUTTER_ISO_Emphasize = C.CLUTTER_ISO_Emphasize
const CLUTTER_KEY_greaterthanequal = C.CLUTTER_KEY_greaterthanequal
const CLUTTER_Cyrillic_yu = C.CLUTTER_Cyrillic_yu
const CLUTTER_nabla = C.CLUTTER_nabla
const CLUTTER_ohook = C.CLUTTER_ohook
const CLUTTER_KEY_Sinh_ndha = C.CLUTTER_KEY_Sinh_ndha
const CLUTTER_KEY_Thai_yoying = C.CLUTTER_KEY_Thai_yoying
const CLUTTER_KEY_Super_L = C.CLUTTER_KEY_Super_L
const CLUTTER_enfilledsqbullet = C.CLUTTER_enfilledsqbullet
const CLUTTER_twothirds = C.CLUTTER_twothirds
const CLUTTER_KEY_telephonerecorder = C.CLUTTER_KEY_telephonerecorder
const CLUTTER_3270_Ident = C.CLUTTER_3270_Ident
const CLUTTER_INPUT_AXIS_WHEEL = C.CLUTTER_INPUT_AXIS_WHEEL
const CLUTTER_KEY_stricteq = C.CLUTTER_KEY_stricteq
const CLUTTER_Ocircumflexacute = C.CLUTTER_Ocircumflexacute
const CLUTTER_KEY_Super_R = C.CLUTTER_KEY_Super_R
const CLUTTER_ISO_Level5_Latch = C.CLUTTER_ISO_Level5_Latch
const CLUTTER_MODIFIER_RESERVED_21_MASK = C.CLUTTER_MODIFIER_RESERVED_21_MASK
const CLUTTER_Ooblique = C.CLUTTER_Ooblique
const CLUTTER_KEY_Cyrillic_zhe_descender = C.CLUTTER_KEY_Cyrillic_zhe_descender
const CLUTTER_KEY_blank = C.CLUTTER_KEY_blank
const CLUTTER_KEY_Cyrillic_tse = C.CLUTTER_KEY_Cyrillic_tse
const CLUTTER_KEY_Hangul_PanSios = C.CLUTTER_KEY_Hangul_PanSios
const CLUTTER_KEY_Arabic_meem = C.CLUTTER_KEY_Arabic_meem
const CLUTTER_KEY_Hangul_WEO = C.CLUTTER_KEY_Hangul_WEO
const CLUTTER_Arabic_feh = C.CLUTTER_Arabic_feh
const CLUTTER_3270_Test = C.CLUTTER_3270_Test
const CLUTTER_KEY_braille_dots_468 = C.CLUTTER_KEY_braille_dots_468
const CLUTTER_KbdBrightnessDown = C.CLUTTER_KbdBrightnessDown
const CLUTTER_WebCam = C.CLUTTER_WebCam
const CLUTTER_MultipleCandidate = C.CLUTTER_MultipleCandidate
const CLUTTER_KEY_Sinh_aee2 = C.CLUTTER_KEY_Sinh_aee2
const CLUTTER_KEY_Pabovedot = C.CLUTTER_KEY_Pabovedot
const CLUTTER_KEY_Georgian_ghan = C.CLUTTER_KEY_Georgian_ghan
const CLUTTER_omacron = C.CLUTTER_omacron
const CLUTTER_KEY_topleftradical = C.CLUTTER_KEY_topleftradical
const CLUTTER_KEY_Hangul_U = C.CLUTTER_KEY_Hangul_U
const CLUTTER_openstar = C.CLUTTER_openstar
const CLUTTER_Armenian_accent = C.CLUTTER_Armenian_accent
const CLUTTER_KEY_Sinh_ruu2 = C.CLUTTER_KEY_Sinh_ruu2
const CLUTTER_Oacute = C.CLUTTER_Oacute
const CLUTTER_Georgian_can = C.CLUTTER_Georgian_can
const CLUTTER_Sinh_ssha = C.CLUTTER_Sinh_ssha
const CLUTTER_nl = C.CLUTTER_nl
const CLUTTER_Arabic_thal = C.CLUTTER_Arabic_thal
const CLUTTER_KEY_braille_dots_12578 = C.CLUTTER_KEY_braille_dots_12578
const CLUTTER_Thai_thothan = C.CLUTTER_Thai_thothan
const CLUTTER_Armenian_ligature_ew = C.CLUTTER_Armenian_ligature_ew
const CLUTTER_SWIPE_DIRECTION_DOWN = C.CLUTTER_SWIPE_DIRECTION_DOWN
const CLUTTER_punctspace = C.CLUTTER_punctspace
const CLUTTER_Mail = C.CLUTTER_Mail
const CLUTTER_KEY_Hangul_I = C.CLUTTER_KEY_Hangul_I
const CLUTTER_ehook = C.CLUTTER_ehook
const CLUTTER_KEY_Hangul_O = C.CLUTTER_KEY_Hangul_O
const CLUTTER_KEY_enfilledcircbullet = C.CLUTTER_KEY_enfilledcircbullet
const CLUTTER_Pointer_Left = C.CLUTTER_Pointer_Left
const CLUTTER_Arabic_heh_goal = C.CLUTTER_Arabic_heh_goal
const CLUTTER_downshoe = C.CLUTTER_downshoe
const CLUTTER_KEY_Udiaeresis = C.CLUTTER_KEY_Udiaeresis
const CLUTTER_KEY_braille_dots_467 = C.CLUTTER_KEY_braille_dots_467
const CLUTTER_Greek_eta = C.CLUTTER_Greek_eta
const CLUTTER_Thai_sarau = C.CLUTTER_Thai_sarau
const CLUTTER_Sinh_mba = C.CLUTTER_Sinh_mba
const CLUTTER_GRAVITY_WEST = C.CLUTTER_GRAVITY_WEST
const CLUTTER_KEY_braille_dots_2567 = C.CLUTTER_KEY_braille_dots_2567
const CLUTTER_KEY_Cancel = C.CLUTTER_KEY_Cancel
const CLUTTER_KEY_trademarkincircle = C.CLUTTER_KEY_trademarkincircle
const CLUTTER_KEY_Cyrillic_KA_vertstroke = C.CLUTTER_KEY_Cyrillic_KA_vertstroke
const CLUTTER_Oslash = C.CLUTTER_Oslash
const CLUTTER_kcedilla = C.CLUTTER_kcedilla
const CLUTTER_KEY_Greek_alphaaccent = C.CLUTTER_KEY_Greek_alphaaccent
const CLUTTER_Hibernate = C.CLUTTER_Hibernate
const CLUTTER_KP_Equal = C.CLUTTER_KP_Equal
const CLUTTER_KEY_gbreve = C.CLUTTER_KEY_gbreve
const CLUTTER_gcaron = C.CLUTTER_gcaron
const CLUTTER_KEY_braille_dots_2568 = C.CLUTTER_KEY_braille_dots_2568
const CLUTTER_KEY_braille_dots_2368 = C.CLUTTER_KEY_braille_dots_2368
const CLUTTER_EASE_OUT_QUART = C.CLUTTER_EASE_OUT_QUART
const CLUTTER_KEY_permille = C.CLUTTER_KEY_permille
const CLUTTER_Cyrillic_ka = C.CLUTTER_Cyrillic_ka
const CLUTTER_KEY_onesuperior = C.CLUTTER_KEY_onesuperior
const CLUTTER_EASE_IN_CIRC = C.CLUTTER_EASE_IN_CIRC
const CLUTTER_KEY_Book = C.CLUTTER_KEY_Book
const CLUTTER_KEY_braille_dots_2367 = C.CLUTTER_KEY_braille_dots_2367
const CLUTTER_COLOR_PLUM_LIGHT = C.CLUTTER_COLOR_PLUM_LIGHT
const CLUTTER_dead_tilde = C.CLUTTER_dead_tilde
const CLUTTER_KEY_downshoe = C.CLUTTER_KEY_downshoe
const CLUTTER_KEY_User1KB = C.CLUTTER_KEY_User1KB
const CLUTTER_FONT_HINTING = C.CLUTTER_FONT_HINTING
const CLUTTER_Ocircumflexhook = C.CLUTTER_Ocircumflexhook
const CLUTTER_SCROLL_NONE = C.CLUTTER_SCROLL_NONE
const CLUTTER_KEY_Armenian_RA = C.CLUTTER_KEY_Armenian_RA
const CLUTTER_Armenian_but = C.CLUTTER_Armenian_but
const CLUTTER_KEY_Armenian_RE = C.CLUTTER_KEY_Armenian_RE
const CLUTTER_DELEGATE_LAYOUT = C.CLUTTER_DELEGATE_LAYOUT
const CLUTTER_KEY_Armenian_DA = C.CLUTTER_KEY_Armenian_DA
const CLUTTER_paragraph = C.CLUTTER_paragraph
const CLUTTER_KEY_hebrew_samech = C.CLUTTER_KEY_hebrew_samech
const CLUTTER_dead_perispomeni = C.CLUTTER_dead_perispomeni
const CLUTTER_KEY_Hangul_J_KiyeogSios = C.CLUTTER_KEY_Hangul_J_KiyeogSios
const CLUTTER_KEY_Cacute = C.CLUTTER_KEY_Cacute
const CLUTTER_EASE_IN_QUINT = C.CLUTTER_EASE_IN_QUINT
const CLUTTER_KEY_Armenian_sha = C.CLUTTER_KEY_Armenian_sha
const CLUTTER_KEY_braille_dots_1234678 = C.CLUTTER_KEY_braille_dots_1234678
const CLUTTER_Abreveacute = C.CLUTTER_Abreveacute
const CLUTTER_EASE_IN_BOUNCE = C.CLUTTER_EASE_IN_BOUNCE
const CLUTTER_n = C.CLUTTER_n
const CLUTTER_emspace = C.CLUTTER_emspace
const CLUTTER_zacute = C.CLUTTER_zacute
const CLUTTER_KEY_Cyrillic_CHE_descender = C.CLUTTER_KEY_Cyrillic_CHE_descender
const CLUTTER_KEY_Thai_leknung = C.CLUTTER_KEY_Thai_leknung
const CLUTTER_utilde = C.CLUTTER_utilde
const CLUTTER_KEY_braille_dots_247 = C.CLUTTER_KEY_braille_dots_247
const CLUTTER_KEY_braille_dots_246 = C.CLUTTER_KEY_braille_dots_246
const CLUTTER_KEY_braille_dots_245 = C.CLUTTER_KEY_braille_dots_245
const CLUTTER_KEY_braille_dots_3568 = C.CLUTTER_KEY_braille_dots_3568
const CLUTTER_KEY_braille_dots_1678 = C.CLUTTER_KEY_braille_dots_1678
const CLUTTER_KEY_Pictures = C.CLUTTER_KEY_Pictures
const CLUTTER_KEY_Iacute = C.CLUTTER_KEY_Iacute
const CLUTTER_KEY_Greek_delta = C.CLUTTER_KEY_Greek_delta
const CLUTTER_KEY_braille_dots_248 = C.CLUTTER_KEY_braille_dots_248
const CLUTTER_KEY_braille_dots_1478 = C.CLUTTER_KEY_braille_dots_1478
const CLUTTER_KP_Right = C.CLUTTER_KP_Right
const CLUTTER_KEY_Abrevetilde = C.CLUTTER_KEY_Abrevetilde
const CLUTTER_uhook = C.CLUTTER_uhook
const CLUTTER_KEY_Sinh_nja = C.CLUTTER_KEY_Sinh_nja
const CLUTTER_Mae_Koho = C.CLUTTER_Mae_Koho
const CLUTTER_KEY_Greek_rho = C.CLUTTER_KEY_Greek_rho
const CLUTTER_amacron = C.CLUTTER_amacron
const CLUTTER_Hangul_SsangSios = C.CLUTTER_Hangul_SsangSios
const CLUTTER_KEY_kana_CHI = C.CLUTTER_KEY_kana_CHI
const CLUTTER_KEY_Agrave = C.CLUTTER_KEY_Agrave
const CLUTTER_KEY_dead_perispomeni = C.CLUTTER_KEY_dead_perispomeni
const CLUTTER_KEY_Cyrillic_o_bar = C.CLUTTER_KEY_Cyrillic_o_bar
const CLUTTER_kana_HO = C.CLUTTER_kana_HO
const CLUTTER_kana_HA = C.CLUTTER_kana_HA
const CLUTTER_KEY_Pointer_DownRight = C.CLUTTER_KEY_Pointer_DownRight
const CLUTTER_KEY_Cyrillic_HARDSIGN = C.CLUTTER_KEY_Cyrillic_HARDSIGN
const CLUTTER_kana_HE = C.CLUTTER_kana_HE
const CLUTTER_KEY_Gbreve = C.CLUTTER_KEY_Gbreve
const CLUTTER_KEY_Arabic_tteh = C.CLUTTER_KEY_Arabic_tteh
const CLUTTER_KEY_trademark = C.CLUTTER_KEY_trademark
const CLUTTER_KEY_Georgian_in = C.CLUTTER_KEY_Georgian_in
const CLUTTER_BackForward = C.CLUTTER_BackForward
const CLUTTER_KEY_Thai_leksun = C.CLUTTER_KEY_Thai_leksun
const CLUTTER_Wcircumflex = C.CLUTTER_Wcircumflex
const CLUTTER_KEY_ytilde = C.CLUTTER_KEY_ytilde
const CLUTTER_kana_HU = C.CLUTTER_kana_HU
const CLUTTER_KEY_Sinh_gha = C.CLUTTER_KEY_Sinh_gha
const CLUTTER_KEY_Cyrillic_EL = C.CLUTTER_KEY_Cyrillic_EL
const CLUTTER_KEY_Cyrillic_EM = C.CLUTTER_KEY_Cyrillic_EM
const CLUTTER_KEY_Cyrillic_EN = C.CLUTTER_KEY_Cyrillic_EN
const CLUTTER_KEY_L7 = C.CLUTTER_KEY_L7
const CLUTTER_KEY_L1 = C.CLUTTER_KEY_L1
const CLUTTER_KEY_L2 = C.CLUTTER_KEY_L2
const CLUTTER_KEY_Hangul_A = C.CLUTTER_KEY_Hangul_A
const CLUTTER_Escape = C.CLUTTER_Escape
const CLUTTER_KEY_Cyrillic_EF = C.CLUTTER_KEY_Cyrillic_EF
const CLUTTER_tabovedot = C.CLUTTER_tabovedot
const CLUTTER_KEY_L8 = C.CLUTTER_KEY_L8
const CLUTTER_HYPER_MASK = C.CLUTTER_HYPER_MASK
const CLUTTER_doublelowquotemark = C.CLUTTER_doublelowquotemark
const CLUTTER_KEY_Serbian_dje = C.CLUTTER_KEY_Serbian_dje
const CLUTTER_Ocircumflexgrave = C.CLUTTER_Ocircumflexgrave
const CLUTTER_BUTTON_MIDDLE = C.CLUTTER_BUTTON_MIDDLE
const CLUTTER_KEY_Hcircumflex = C.CLUTTER_KEY_Hcircumflex
const CLUTTER_Cyrillic_EF = C.CLUTTER_Cyrillic_EF
const CLUTTER_KEY_Cyrillic_ER = C.CLUTTER_KEY_Cyrillic_ER
const CLUTTER_KEY_Cyrillic_ES = C.CLUTTER_KEY_Cyrillic_ES
const CLUTTER_Meta_L = C.CLUTTER_Meta_L
const CLUTTER_MySites = C.CLUTTER_MySites
const CLUTTER_braille_dots_1258 = C.CLUTTER_braille_dots_1258
const CLUTTER_Armenian_ke = C.CLUTTER_Armenian_ke
const CLUTTER_KEY_Last_Virtual_Screen = C.CLUTTER_KEY_Last_Virtual_Screen
const CLUTTER_braille_dots_1257 = C.CLUTTER_braille_dots_1257
const CLUTTER_Serbian_JE = C.CLUTTER_Serbian_JE
const CLUTTER_Hangul_Hanja = C.CLUTTER_Hangul_Hanja
const CLUTTER_KEY_abrevebelowdot = C.CLUTTER_KEY_abrevebelowdot
const CLUTTER_em4space = C.CLUTTER_em4space
const CLUTTER_Sinh_oo2 = C.CLUTTER_Sinh_oo2
const CLUTTER_KEY_idiaeresis = C.CLUTTER_KEY_idiaeresis
const CLUTTER_yhook = C.CLUTTER_yhook
const CLUTTER_Sinh_nya = C.CLUTTER_Sinh_nya
const CLUTTER_KEY_dead_hook = C.CLUTTER_KEY_dead_hook
const CLUTTER_Hangul_J_Cieuc = C.CLUTTER_Hangul_J_Cieuc
const CLUTTER_ACTOR_ALIGN_END = C.CLUTTER_ACTOR_ALIGN_END
const CLUTTER_emfilledrect = C.CLUTTER_emfilledrect
const CLUTTER_KEY_dabovedot = C.CLUTTER_KEY_dabovedot
const CLUTTER_KEY_Thai_nikhahit = C.CLUTTER_KEY_Thai_nikhahit
const CLUTTER_KEY_Wcircumflex = C.CLUTTER_KEY_Wcircumflex
const CLUTTER_KEY_Arabic_madda_above = C.CLUTTER_KEY_Arabic_madda_above
const CLUTTER_KEY_latincross = C.CLUTTER_KEY_latincross
const CLUTTER_KP_Next = C.CLUTTER_KP_Next
const CLUTTER_Uogonek = C.CLUTTER_Uogonek
const CLUTTER_KEY_fivesixths = C.CLUTTER_KEY_fivesixths
const CLUTTER_KEY_Sinh_ha = C.CLUTTER_KEY_Sinh_ha
const CLUTTER_KEY_braille_dots_2358 = C.CLUTTER_KEY_braille_dots_2358
const CLUTTER_KEY_Armenian_PYUR = C.CLUTTER_KEY_Armenian_PYUR
const CLUTTER_BUTTON_RELEASE = C.CLUTTER_BUTTON_RELEASE
const CLUTTER_ISO_Group_Shift = C.CLUTTER_ISO_Group_Shift
const CLUTTER_KEY_Thai_maitaikhu = C.CLUTTER_KEY_Thai_maitaikhu
const CLUTTER_Hangul_Tieut = C.CLUTTER_Hangul_Tieut
const CLUTTER_PICK_REACTIVE = C.CLUTTER_PICK_REACTIVE
const CLUTTER_Hangul_J_SsangKiyeog = C.CLUTTER_Hangul_J_SsangKiyeog
const CLUTTER_KEY_RockerDown = C.CLUTTER_KEY_RockerDown
const CLUTTER_KP_End = C.CLUTTER_KP_End
const CLUTTER_KEY_dead_invertedbreve = C.CLUTTER_KEY_dead_invertedbreve
const CLUTTER_KEY_Cyrillic_ka_descender = C.CLUTTER_KEY_Cyrillic_ka_descender
const CLUTTER_KEY_copyright = C.CLUTTER_KEY_copyright
const CLUTTER_Green = C.CLUTTER_Green
const CLUTTER_MOD1_MASK = C.CLUTTER_MOD1_MASK
const CLUTTER_KEY_dead_stroke = C.CLUTTER_KEY_dead_stroke
const CLUTTER_gbreve = C.CLUTTER_gbreve
const CLUTTER_hebrew_gimmel = C.CLUTTER_hebrew_gimmel
const CLUTTER_KEY_Cyrillic_NJE = C.CLUTTER_KEY_Cyrillic_NJE
const CLUTTER_SCROLL_HORIZONTALLY = C.CLUTTER_SCROLL_HORIZONTALLY
const CLUTTER_KEY_Byelorussian_SHORTU = C.CLUTTER_KEY_Byelorussian_SHORTU
const CLUTTER_hebrew_bet = C.CLUTTER_hebrew_bet
const CLUTTER_Scroll_Lock = C.CLUTTER_Scroll_Lock
const CLUTTER_Sinh_ja = C.CLUTTER_Sinh_ja
const CLUTTER_braille_dots_12367 = C.CLUTTER_braille_dots_12367
const CLUTTER_KEY_Pointer_EnableKeys = C.CLUTTER_KEY_Pointer_EnableKeys
const CLUTTER_KEY_braille_dots_123578 = C.CLUTTER_KEY_braille_dots_123578
const CLUTTER_KEY_Cut = C.CLUTTER_KEY_Cut
const CLUTTER_hebrew_pe = C.CLUTTER_hebrew_pe
const CLUTTER_CONTENT_GRAVITY_CENTER = C.CLUTTER_CONTENT_GRAVITY_CENTER
const CLUTTER_MODIFIER_RESERVED_23_MASK = C.CLUTTER_MODIFIER_RESERVED_23_MASK
const CLUTTER_braille_dots_578 = C.CLUTTER_braille_dots_578
const CLUTTER_KEY_vertbar = C.CLUTTER_KEY_vertbar
const CLUTTER_KEY_dead_belowcircumflex = C.CLUTTER_KEY_dead_belowcircumflex
const CLUTTER_KEY_punctspace = C.CLUTTER_KEY_punctspace
const CLUTTER_KEY_Armenian_verjaket = C.CLUTTER_KEY_Armenian_verjaket
const CLUTTER_ubreve = C.CLUTTER_ubreve
const CLUTTER_lefttack = C.CLUTTER_lefttack
const CLUTTER_Hangul_PreHanja = C.CLUTTER_Hangul_PreHanja
const CLUTTER_KEY_Thai_rorua = C.CLUTTER_KEY_Thai_rorua
const CLUTTER_KEY_AudioNext = C.CLUTTER_KEY_AudioNext
const CLUTTER_KEY_Tcedilla = C.CLUTTER_KEY_Tcedilla
const CLUTTER_KEY_braille_dots_23578 = C.CLUTTER_KEY_braille_dots_23578
const CLUTTER_Cyrillic_HARDSIGN = C.CLUTTER_Cyrillic_HARDSIGN
const CLUTTER_Favorites = C.CLUTTER_Favorites
const CLUTTER_Macedonia_dse = C.CLUTTER_Macedonia_dse
const CLUTTER_Thai_ngongu = C.CLUTTER_Thai_ngongu
const CLUTTER_Thai_baht = C.CLUTTER_Thai_baht
const CLUTTER_KEY_Greek_EPSILON = C.CLUTTER_KEY_Greek_EPSILON
const CLUTTER_Aacute = C.CLUTTER_Aacute
const CLUTTER_KEY_Thai_totao = C.CLUTTER_KEY_Thai_totao
const CLUTTER_Sinh_i2 = C.CLUTTER_Sinh_i2
const CLUTTER_braille_dots_245678 = C.CLUTTER_braille_dots_245678
const CLUTTER_KEY_KP_End = C.CLUTTER_KEY_KP_End
const CLUTTER_braille_dots_128 = C.CLUTTER_braille_dots_128
const CLUTTER_KEY_rightanglebracket = C.CLUTTER_KEY_rightanglebracket
const CLUTTER_filledlefttribullet = C.CLUTTER_filledlefttribullet
const CLUTTER_KEY_scedilla = C.CLUTTER_KEY_scedilla
const CLUTTER_bracketleft = C.CLUTTER_bracketleft
const CLUTTER_KEY_zerosuperior = C.CLUTTER_KEY_zerosuperior
const CLUTTER_KEY_hebrew_waw = C.CLUTTER_KEY_hebrew_waw
const CLUTTER_abrevetilde = C.CLUTTER_abrevetilde
const CLUTTER_KEY_hebrew_doublelowline = C.CLUTTER_KEY_hebrew_doublelowline
const CLUTTER_KEY_ntilde = C.CLUTTER_KEY_ntilde
const CLUTTER_Sinh_thha = C.CLUTTER_Sinh_thha
const CLUTTER_rightopentriangle = C.CLUTTER_rightopentriangle
const CLUTTER_KEY_Uhornhook = C.CLUTTER_KEY_Uhornhook
const CLUTTER_KEY_Undo = C.CLUTTER_KEY_Undo
const CLUTTER_KEY_braille_dots_125 = C.CLUTTER_KEY_braille_dots_125
const CLUTTER_Armenian_da = C.CLUTTER_Armenian_da
const CLUTTER_Egrave = C.CLUTTER_Egrave
const CLUTTER_KEY_Thai_ngongu = C.CLUTTER_KEY_Thai_ngongu
const CLUTTER_braille_dots_23578 = C.CLUTTER_braille_dots_23578
const CLUTTER_KEY_Rcaron = C.CLUTTER_KEY_Rcaron
const CLUTTER_braille_dots_468 = C.CLUTTER_braille_dots_468
const CLUTTER_KEY_MultipleCandidate = C.CLUTTER_KEY_MultipleCandidate
const CLUTTER_Ukrainian_GHE_WITH_UPTURN = C.CLUTTER_Ukrainian_GHE_WITH_UPTURN
const CLUTTER_KEY_Ihook = C.CLUTTER_KEY_Ihook
const CLUTTER_KEY_Sinh_dha = C.CLUTTER_KEY_Sinh_dha
const CLUTTER_imacron = C.CLUTTER_imacron
const CLUTTER_oe = C.CLUTTER_oe
const CLUTTER_KEY_braille_dots_2356 = C.CLUTTER_KEY_braille_dots_2356
const CLUTTER_Pointer_UpLeft = C.CLUTTER_Pointer_UpLeft
const CLUTTER_KEY_Ocircumflexbelowdot = C.CLUTTER_KEY_Ocircumflexbelowdot
const CLUTTER_Cyrillic_U_straight_bar = C.CLUTTER_Cyrillic_U_straight_bar
const CLUTTER_ydiaeresis = C.CLUTTER_ydiaeresis
const CLUTTER_KEY_KP_F4 = C.CLUTTER_KEY_KP_F4
const CLUTTER_braille_dots_2356 = C.CLUTTER_braille_dots_2356
const CLUTTER_KEY_rightpointer = C.CLUTTER_KEY_rightpointer
const CLUTTER_KEY_KP_F1 = C.CLUTTER_KEY_KP_F1
const CLUTTER_KEY_KP_F3 = C.CLUTTER_KEY_KP_F3
const CLUTTER_KEY_KP_F2 = C.CLUTTER_KEY_KP_F2
const CLUTTER_KEY_Pointer_Button3 = C.CLUTTER_KEY_Pointer_Button3
const CLUTTER_KEY_Pointer_Button2 = C.CLUTTER_KEY_Pointer_Button2
const CLUTTER_KEY_Pointer_Button1 = C.CLUTTER_KEY_Pointer_Button1
const CLUTTER_KEY_ellipsis = C.CLUTTER_KEY_ellipsis
const CLUTTER_braille_dots_2358 = C.CLUTTER_braille_dots_2358
const CLUTTER_KEY_Wacute = C.CLUTTER_KEY_Wacute
const CLUTTER_KEY_Pointer_Button5 = C.CLUTTER_KEY_Pointer_Button5
const CLUTTER_KEY_Pointer_Button4 = C.CLUTTER_KEY_Pointer_Button4
const CLUTTER_Ecircumflexgrave = C.CLUTTER_Ecircumflexgrave
const CLUTTER_Switch_VT_4 = C.CLUTTER_Switch_VT_4
const CLUTTER_Switch_VT_7 = C.CLUTTER_Switch_VT_7
const CLUTTER_Switch_VT_6 = C.CLUTTER_Switch_VT_6
const CLUTTER_Switch_VT_1 = C.CLUTTER_Switch_VT_1
const CLUTTER_Switch_VT_3 = C.CLUTTER_Switch_VT_3
const CLUTTER_Switch_VT_2 = C.CLUTTER_Switch_VT_2
const CLUTTER_KEY_braille_dots_1278 = C.CLUTTER_KEY_braille_dots_1278
const CLUTTER_Switch_VT_9 = C.CLUTTER_Switch_VT_9
const CLUTTER_Switch_VT_8 = C.CLUTTER_Switch_VT_8
const CLUTTER_Cyrillic_HA = C.CLUTTER_Cyrillic_HA
const CLUTTER_KEY_braille_dots_1356 = C.CLUTTER_KEY_braille_dots_1356
const CLUTTER_Hyper_L = C.CLUTTER_Hyper_L
const CLUTTER_Hangul_PostHanja = C.CLUTTER_Hangul_PostHanja
const CLUTTER_Pointer_Up = C.CLUTTER_Pointer_Up
const CLUTTER_filledtribulletdown = C.CLUTTER_filledtribulletdown
const CLUTTER_KEY_Linefeed = C.CLUTTER_KEY_Linefeed
const CLUTTER_Greek_SIGMA = C.CLUTTER_Greek_SIGMA
const CLUTTER_KEY_Cyrillic_CHE = C.CLUTTER_KEY_Cyrillic_CHE
const CLUTTER_KEY_Farsi_8 = C.CLUTTER_KEY_Farsi_8
const CLUTTER_Hangul_switch = C.CLUTTER_Hangul_switch
const CLUTTER_KEY_Farsi_3 = C.CLUTTER_KEY_Farsi_3
const CLUTTER_KEY_Farsi_2 = C.CLUTTER_KEY_Farsi_2
const CLUTTER_KEY_Farsi_1 = C.CLUTTER_KEY_Farsi_1
const CLUTTER_KEY_Farsi_0 = C.CLUTTER_KEY_Farsi_0
const CLUTTER_KEY_Armenian_CHA = C.CLUTTER_KEY_Armenian_CHA
const CLUTTER_KEY_Farsi_6 = C.CLUTTER_KEY_Farsi_6
const CLUTTER_KEY_Arabic_tah = C.CLUTTER_KEY_Arabic_tah
const CLUTTER_KEY_Farsi_4 = C.CLUTTER_KEY_Farsi_4
const CLUTTER_KP_8 = C.CLUTTER_KP_8
const CLUTTER_AudioRandomPlay = C.CLUTTER_AudioRandomPlay
const CLUTTER_KEY_ocircumflexhook = C.CLUTTER_KEY_ocircumflexhook
const CLUTTER_KEY_Hangul_OE = C.CLUTTER_KEY_Hangul_OE
const CLUTTER_KEY_braille_dots_1345678 = C.CLUTTER_KEY_braille_dots_1345678
const CLUTTER_VendorHome = C.CLUTTER_VendorHome
const CLUTTER_KEY_notidentical = C.CLUTTER_KEY_notidentical
const CLUTTER_Cut = C.CLUTTER_Cut
const CLUTTER_KEY_Greek_ETA = C.CLUTTER_KEY_Greek_ETA
const CLUTTER_braille_dots_358 = C.CLUTTER_braille_dots_358
const CLUTTER_dead_capital_schwa = C.CLUTTER_dead_capital_schwa
const CLUTTER_Thai_sarae = C.CLUTTER_Thai_sarae
const CLUTTER_KEY_twothirds = C.CLUTTER_KEY_twothirds
const CLUTTER_KEY_braille_dots_234578 = C.CLUTTER_KEY_braille_dots_234578
const CLUTTER_dead_small_schwa = C.CLUTTER_dead_small_schwa
const CLUTTER_KEY_Thai_sosala = C.CLUTTER_KEY_Thai_sosala
const CLUTTER_KEY_3270_Right2 = C.CLUTTER_KEY_3270_Right2
const CLUTTER_KEY_EcuSign = C.CLUTTER_KEY_EcuSign
const CLUTTER_Ocaron = C.CLUTTER_Ocaron
const CLUTTER_KEY_hebrew_yod = C.CLUTTER_KEY_hebrew_yod
const CLUTTER_KEY_Greek_iotadieresis = C.CLUTTER_KEY_Greek_iotadieresis
const CLUTTER_KEY_hebrew_zadi = C.CLUTTER_KEY_hebrew_zadi
const CLUTTER_KEY_Sinh_ya = C.CLUTTER_KEY_Sinh_ya
const CLUTTER_EASE_IN_OUT_QUAD = C.CLUTTER_EASE_IN_OUT_QUAD
const CLUTTER_KEY_nabla = C.CLUTTER_KEY_nabla
const CLUTTER_Thai_saraa = C.CLUTTER_Thai_saraa
const CLUTTER_Hangul_J_KiyeogSios = C.CLUTTER_Hangul_J_KiyeogSios
const CLUTTER_KEY_ogonek = C.CLUTTER_KEY_ogonek
const CLUTTER_VERSION_S = C.CLUTTER_VERSION_S
const CLUTTER_braille_dots_4568 = C.CLUTTER_braille_dots_4568
const CLUTTER_Thai_sarao = C.CLUTTER_Thai_sarao
const CLUTTER_Cyrillic_GHE_bar = C.CLUTTER_Cyrillic_GHE_bar
const CLUTTER_ohornacute = C.CLUTTER_ohornacute
const CLUTTER_braille_dots_4567 = C.CLUTTER_braille_dots_4567
const CLUTTER_ACTOR_ALIGN_CENTER = C.CLUTTER_ACTOR_ALIGN_CENTER
const CLUTTER_uptack = C.CLUTTER_uptack
const CLUTTER_Sinh_ka = C.CLUTTER_Sinh_ka
const CLUTTER_EuroSign = C.CLUTTER_EuroSign
const CLUTTER_Uacute = C.CLUTTER_Uacute
const CLUTTER_REPAINT_FLAGS_QUEUE_REDRAW_ON_ADD = C.CLUTTER_REPAINT_FLAGS_QUEUE_REDRAW_ON_ADD
const CLUTTER_ISO_Move_Line_Down = C.CLUTTER_ISO_Move_Line_Down
const CLUTTER_KEY_braille_dots_67 = C.CLUTTER_KEY_braille_dots_67
const CLUTTER_KEY_Hangul_Tieut = C.CLUTTER_KEY_Hangul_Tieut
const CLUTTER_KEY_Bluetooth = C.CLUTTER_KEY_Bluetooth
const CLUTTER_Cyrillic_LJE = C.CLUTTER_Cyrillic_LJE
const CLUTTER_KEY_3270_PA2 = C.CLUTTER_KEY_3270_PA2
const CLUTTER_KEY_3270_PA3 = C.CLUTTER_KEY_3270_PA3
const CLUTTER_KEY_WindowClear = C.CLUTTER_KEY_WindowClear
const CLUTTER_KEY_3270_PA1 = C.CLUTTER_KEY_3270_PA1
const CLUTTER_Cyrillic_ze = C.CLUTTER_Cyrillic_ze
const CLUTTER_toprightsummation = C.CLUTTER_toprightsummation
const CLUTTER_KEY_3270_Record = C.CLUTTER_KEY_3270_Record
const CLUTTER_adiaeresis = C.CLUTTER_adiaeresis
const CLUTTER_oneeighth = C.CLUTTER_oneeighth
const CLUTTER_Armenian_re = C.CLUTTER_Armenian_re
const CLUTTER_kana_N = C.CLUTTER_kana_N
const CLUTTER_KEY_Thai_honokhuk = C.CLUTTER_KEY_Thai_honokhuk
const CLUTTER_Armenian_ra = C.CLUTTER_Armenian_ra
const CLUTTER_KEY_KP_Down = C.CLUTTER_KEY_KP_Down
const CLUTTER_KEY_uogonek = C.CLUTTER_KEY_uogonek
const CLUTTER_KEY_Georgian_zen = C.CLUTTER_KEY_Georgian_zen
const CLUTTER_KEY_section = C.CLUTTER_KEY_section
const CLUTTER_CONTENT_GRAVITY_BOTTOM_LEFT = C.CLUTTER_CONTENT_GRAVITY_BOTTOM_LEFT
const CLUTTER_KEY_SelectButton = C.CLUTTER_KEY_SelectButton
const CLUTTER_Ihook = C.CLUTTER_Ihook
const CLUTTER_Gbreve = C.CLUTTER_Gbreve
const CLUTTER_KEY_braille_dots_12467 = C.CLUTTER_KEY_braille_dots_12467
const CLUTTER_KEY_Green = C.CLUTTER_KEY_Green
const CLUTTER_KEY_braille_dots_2578 = C.CLUTTER_KEY_braille_dots_2578
const CLUTTER_EASE_OUT_ELASTIC = C.CLUTTER_EASE_OUT_ELASTIC
const CLUTTER_KEY_Terminal = C.CLUTTER_KEY_Terminal
const CLUTTER_KEY_Arabic_sad = C.CLUTTER_KEY_Arabic_sad
const CLUTTER_CONTENT_GRAVITY_TOP_LEFT = C.CLUTTER_CONTENT_GRAVITY_TOP_LEFT
const CLUTTER_KEY_digitspace = C.CLUTTER_KEY_digitspace
const CLUTTER_KEY_Overlay1_Enable = C.CLUTTER_KEY_Overlay1_Enable
const CLUTTER_KEY_braille_dots_2378 = C.CLUTTER_KEY_braille_dots_2378
const CLUTTER_Georgian_tar = C.CLUTTER_Georgian_tar
const CLUTTER_Armenian_TCHE = C.CLUTTER_Armenian_TCHE
const CLUTTER_KEY_Eisu_toggle = C.CLUTTER_KEY_Eisu_toggle
const CLUTTER_Thai_phinthu = C.CLUTTER_Thai_phinthu
const CLUTTER_Armenian_KHE = C.CLUTTER_Armenian_KHE
const CLUTTER_Sinh_ee2 = C.CLUTTER_Sinh_ee2
const CLUTTER_KEY_hebrew_pe = C.CLUTTER_KEY_hebrew_pe
const CLUTTER_Multi_key = C.CLUTTER_Multi_key
const CLUTTER_KEY_Georgian_qar = C.CLUTTER_KEY_Georgian_qar
const CLUTTER_MenuKB = C.CLUTTER_MenuKB
const CLUTTER_Georgian_tan = C.CLUTTER_Georgian_tan
const CLUTTER_KEY_opentribulletup = C.CLUTTER_KEY_opentribulletup
const CLUTTER_KEY_tcaron = C.CLUTTER_KEY_tcaron
const CLUTTER_COLOR_CHAMELEON_DARK = C.CLUTTER_COLOR_CHAMELEON_DARK
const CLUTTER_KEY_Hangul_SunkyeongeumPhieuf = C.CLUTTER_KEY_Hangul_SunkyeongeumPhieuf
const CLUTTER_KEY_Serbian_TSHE = C.CLUTTER_KEY_Serbian_TSHE
const CLUTTER_backslash = C.CLUTTER_backslash
const CLUTTER_Abrevehook = C.CLUTTER_Abrevehook
const CLUTTER_KEY_Sinh_uu2 = C.CLUTTER_KEY_Sinh_uu2
const CLUTTER_Cyrillic_GHE = C.CLUTTER_Cyrillic_GHE
const CLUTTER_TaskPane = C.CLUTTER_TaskPane
const CLUTTER_KEY_Pointer_Left = C.CLUTTER_KEY_Pointer_Left
const CLUTTER_Sinh_au2 = C.CLUTTER_Sinh_au2
const CLUTTER_KEY_Wgrave = C.CLUTTER_KEY_Wgrave
const CLUTTER_KEY_enspace = C.CLUTTER_KEY_enspace
const CLUTTER_KEY_Thai_lu = C.CLUTTER_KEY_Thai_lu
const CLUTTER_KEY_em4space = C.CLUTTER_KEY_em4space
const CLUTTER_3270_BackTab = C.CLUTTER_3270_BackTab
const CLUTTER_ROTATE_CW = C.CLUTTER_ROTATE_CW
const CLUTTER_braille_dots_12468 = C.CLUTTER_braille_dots_12468
const CLUTTER_KEY_Thai_saraaimaimuan = C.CLUTTER_KEY_Thai_saraaimaimuan
const CLUTTER_KEY_Ecircumflexbelowdot = C.CLUTTER_KEY_Ecircumflexbelowdot
const CLUTTER_Pointer_DblClick4 = C.CLUTTER_Pointer_DblClick4
const CLUTTER_Pointer_DblClick3 = C.CLUTTER_Pointer_DblClick3
const CLUTTER_MODIFIER_RESERVED_19_MASK = C.CLUTTER_MODIFIER_RESERVED_19_MASK
const CLUTTER_Pointer_DblClick1 = C.CLUTTER_Pointer_DblClick1
const CLUTTER_REPAINT_FLAGS_PRE_PAINT = C.CLUTTER_REPAINT_FLAGS_PRE_PAINT
const CLUTTER_KEY_dead_belowcomma = C.CLUTTER_KEY_dead_belowcomma
const CLUTTER_KEY_Armenian_TCHE = C.CLUTTER_KEY_Armenian_TCHE
const CLUTTER_KEY_braille_dots_278 = C.CLUTTER_KEY_braille_dots_278
const CLUTTER_otilde = C.CLUTTER_otilde
const CLUTTER_Armenian_VEV = C.CLUTTER_Armenian_VEV
const CLUTTER_KEY_Meeting = C.CLUTTER_KEY_Meeting
const CLUTTER_Thai_leksi = C.CLUTTER_Thai_leksi
const CLUTTER_Macedonia_KJE = C.CLUTTER_Macedonia_KJE
const CLUTTER_KEY_dead_caron = C.CLUTTER_KEY_dead_caron
const CLUTTER_KEY_heart = C.CLUTTER_KEY_heart
const CLUTTER_Sinh_oo = C.CLUTTER_Sinh_oo
const CLUTTER_AE = C.CLUTTER_AE
const CLUTTER_KEY_Suspend = C.CLUTTER_KEY_Suspend
const CLUTTER_KEY_Sinh_ka = C.CLUTTER_KEY_Sinh_ka
const CLUTTER_KEY_Cyrillic_TE = C.CLUTTER_KEY_Cyrillic_TE
const CLUTTER_Armenian_PYUR = C.CLUTTER_Armenian_PYUR
const CLUTTER_KEY_horizconnector = C.CLUTTER_KEY_horizconnector
const CLUTTER_Iogonek = C.CLUTTER_Iogonek
const CLUTTER_Sinh_tta = C.CLUTTER_Sinh_tta
const CLUTTER_enopencircbullet = C.CLUTTER_enopencircbullet
const CLUTTER_Greek_iotadieresis = C.CLUTTER_Greek_iotadieresis
const CLUTTER_3270_Attn = C.CLUTTER_3270_Attn
const CLUTTER_KEY_Arabic_khah = C.CLUTTER_KEY_Arabic_khah
const CLUTTER_KEY_uhornbelowdot = C.CLUTTER_KEY_uhornbelowdot
const CLUTTER_KEY_Iabovedot = C.CLUTTER_KEY_Iabovedot
const CLUTTER_KEY_Back = C.CLUTTER_KEY_Back
const CLUTTER_Acircumflextilde = C.CLUTTER_Acircumflextilde
const CLUTTER_Hangul_RieulPhieuf = C.CLUTTER_Hangul_RieulPhieuf
const CLUTTER_KEY_Ediaeresis = C.CLUTTER_KEY_Ediaeresis
const CLUTTER_KP_Left = C.CLUTTER_KP_Left
const CLUTTER_braille_dots_2478 = C.CLUTTER_braille_dots_2478
const CLUTTER_3270_Setup = C.CLUTTER_3270_Setup
const CLUTTER_vertconnector = C.CLUTTER_vertconnector
const CLUTTER_braille_dots_3 = C.CLUTTER_braille_dots_3
const CLUTTER_KEY_3270_KeyClick = C.CLUTTER_KEY_3270_KeyClick
const CLUTTER_braille_dots_1 = C.CLUTTER_braille_dots_1
const CLUTTER_braille_dots_7 = C.CLUTTER_braille_dots_7
const CLUTTER_KEY_Ncedilla = C.CLUTTER_KEY_Ncedilla
const CLUTTER_braille_dots_5 = C.CLUTTER_braille_dots_5
const CLUTTER_Sabovedot = C.CLUTTER_Sabovedot
const CLUTTER_KEY_Send = C.CLUTTER_KEY_Send
const CLUTTER_KEY_ISO_Level5_Latch = C.CLUTTER_KEY_ISO_Level5_Latch
const CLUTTER_KEY_Thai_oang = C.CLUTTER_KEY_Thai_oang
const CLUTTER_KEY_Thai_thothung = C.CLUTTER_KEY_Thai_thothung
const CLUTTER_KEY_Gabovedot = C.CLUTTER_KEY_Gabovedot
const CLUTTER_KEY_Armenian_AYB = C.CLUTTER_KEY_Armenian_AYB
const CLUTTER_braille_dots_235678 = C.CLUTTER_braille_dots_235678
const CLUTTER_KEY_braille_dots_1258 = C.CLUTTER_KEY_braille_dots_1258
const CLUTTER_KEY_Hangul_J_RieulSios = C.CLUTTER_KEY_Hangul_J_RieulSios
const CLUTTER_rightmiddlecurlybrace = C.CLUTTER_rightmiddlecurlybrace
const CLUTTER_Arabic_9 = C.CLUTTER_Arabic_9
const CLUTTER_Arabic_8 = C.CLUTTER_Arabic_8
const CLUTTER_Arabic_7 = C.CLUTTER_Arabic_7
const CLUTTER_Arabic_6 = C.CLUTTER_Arabic_6
const CLUTTER_Arabic_5 = C.CLUTTER_Arabic_5
const CLUTTER_Arabic_4 = C.CLUTTER_Arabic_4
const CLUTTER_Arabic_3 = C.CLUTTER_Arabic_3
const CLUTTER_KEY_Armenian_SE = C.CLUTTER_KEY_Armenian_SE
const CLUTTER_ApplicationRight = C.CLUTTER_ApplicationRight
const CLUTTER_Arabic_0 = C.CLUTTER_Arabic_0
const CLUTTER_KEY_Sinh_e2 = C.CLUTTER_KEY_Sinh_e2
const CLUTTER_MODIFIER_RESERVED_18_MASK = C.CLUTTER_MODIFIER_RESERVED_18_MASK
const CLUTTER_KEY_3270_Attn = C.CLUTTER_KEY_3270_Attn
const CLUTTER_Hangul_J_Tieut = C.CLUTTER_Hangul_J_Tieut
const CLUTTER_braille_dots_67 = C.CLUTTER_braille_dots_67
const CLUTTER_TOUCH_CANCEL = C.CLUTTER_TOUCH_CANCEL
const CLUTTER_KEY_Greek_omegaaccent = C.CLUTTER_KEY_Greek_omegaaccent
const CLUTTER_bracketright = C.CLUTTER_bracketright
const CLUTTER_KEY_Zstroke = C.CLUTTER_KEY_Zstroke
const CLUTTER_KEY_dead_tilde = C.CLUTTER_KEY_dead_tilde
const CLUTTER_SHIFT_MASK = C.CLUTTER_SHIFT_MASK
const CLUTTER_KEY_SplitScreen = C.CLUTTER_KEY_SplitScreen
const CLUTTER_KEY_Shift_L = C.CLUTTER_KEY_Shift_L
const CLUTTER_KEY_Thai_leksong = C.CLUTTER_KEY_Thai_leksong
const CLUTTER_dead_cedilla = C.CLUTTER_dead_cedilla
const CLUTTER_PEN_DEVICE = C.CLUTTER_PEN_DEVICE
const CLUTTER_ecaron = C.CLUTTER_ecaron
const CLUTTER_KEY_Arabic_seen = C.CLUTTER_KEY_Arabic_seen
const CLUTTER_EVENT_FLAG_SYNTHETIC = C.CLUTTER_EVENT_FLAG_SYNTHETIC
const CLUTTER_KEY_dead_doubleacute = C.CLUTTER_KEY_dead_doubleacute
const CLUTTER_KEY_upcaret = C.CLUTTER_KEY_upcaret
const CLUTTER_KEY_ISO_Level3_Lock = C.CLUTTER_KEY_ISO_Level3_Lock
const CLUTTER_leftcaret = C.CLUTTER_leftcaret
const CLUTTER_TEXTURE_RGB_FLAG_BGR = C.CLUTTER_TEXTURE_RGB_FLAG_BGR
const CLUTTER_braille_dots_347 = C.CLUTTER_braille_dots_347
const CLUTTER_KEY_Phone = C.CLUTTER_KEY_Phone
const CLUTTER_quotedbl = C.CLUTTER_quotedbl
const CLUTTER_LONG_PRESS_QUERY = C.CLUTTER_LONG_PRESS_QUERY
const CLUTTER_braille_dots_348 = C.CLUTTER_braille_dots_348
const CLUTTER_Georgian_cil = C.CLUTTER_Georgian_cil
const CLUTTER_KEY_Shift_R = C.CLUTTER_KEY_Shift_R
const CLUTTER_KEY_Ubreve = C.CLUTTER_KEY_Ubreve
const CLUTTER_KEY_hebrew_zayin = C.CLUTTER_KEY_hebrew_zayin
const CLUTTER_SWIPE_DIRECTION_RIGHT = C.CLUTTER_SWIPE_DIRECTION_RIGHT
const CLUTTER_KEY_dead_horn = C.CLUTTER_KEY_dead_horn
const CLUTTER_filledrighttribullet = C.CLUTTER_filledrighttribullet
const CLUTTER_Ucircumflex = C.CLUTTER_Ucircumflex
const CLUTTER_KEY_WakeUp = C.CLUTTER_KEY_WakeUp
const CLUTTER_BIND_POSITION = C.CLUTTER_BIND_POSITION
const CLUTTER_kana_TU = C.CLUTTER_kana_TU
const CLUTTER_KEY_Ch = C.CLUTTER_KEY_Ch
const CLUTTER_KEY_Greek_NU = C.CLUTTER_KEY_Greek_NU
const CLUTTER_abreve = C.CLUTTER_abreve
const CLUTTER_KEY_kana_comma = C.CLUTTER_KEY_kana_comma
const CLUTTER_Greek_theta = C.CLUTTER_Greek_theta
const CLUTTER_KEY_onehalf = C.CLUTTER_KEY_onehalf
const CLUTTER_Armenian_KE = C.CLUTTER_Armenian_KE
const CLUTTER_KEY_VendorHome = C.CLUTTER_KEY_VendorHome
const CLUTTER_Ukrainian_yi = C.CLUTTER_Ukrainian_yi
const CLUTTER_ooblique = C.CLUTTER_ooblique
const CLUTTER_Ecircumflexbelowdot = C.CLUTTER_Ecircumflexbelowdot
const CLUTTER_twosuperior = C.CLUTTER_twosuperior
const CLUTTER_KEY_Sinh_aee = C.CLUTTER_KEY_Sinh_aee
const CLUTTER_KEY_Georgian_can = C.CLUTTER_KEY_Georgian_can
const CLUTTER_Hangul_J_PieubSios = C.CLUTTER_Hangul_J_PieubSios
const CLUTTER_Arabic_sukun = C.CLUTTER_Arabic_sukun
const CLUTTER_heart = C.CLUTTER_heart
const CLUTTER_KEY_Touroku = C.CLUTTER_KEY_Touroku
const CLUTTER_Wacute = C.CLUTTER_Wacute
const CLUTTER_Cabovedot = C.CLUTTER_Cabovedot
const CLUTTER_KEY_CH = C.CLUTTER_KEY_CH
const CLUTTER_KEY_nobreakspace = C.CLUTTER_KEY_nobreakspace
const CLUTTER_KEY_Finance = C.CLUTTER_KEY_Finance
const CLUTTER_dead_semivoiced_sound = C.CLUTTER_dead_semivoiced_sound
const CLUTTER_KEY_CD = C.CLUTTER_KEY_CD
const CLUTTER_KEY_Thai_sarauee = C.CLUTTER_KEY_Thai_sarauee
const CLUTTER_KEY_hebrew_gimel = C.CLUTTER_KEY_hebrew_gimel
const CLUTTER_KP_Tab = C.CLUTTER_KP_Tab
const CLUTTER_KEY_ScrollUp = C.CLUTTER_KEY_ScrollUp
const CLUTTER_KEY_Ehook = C.CLUTTER_KEY_Ehook
const CLUTTER_COLOR_CHAMELEON_LIGHT = C.CLUTTER_COLOR_CHAMELEON_LIGHT
const CLUTTER_KEY_ISO_First_Group = C.CLUTTER_KEY_ISO_First_Group
const CLUTTER_EASE_OUT_QUAD = C.CLUTTER_EASE_OUT_QUAD
const CLUTTER_KEY_braille_dots_3567 = C.CLUTTER_KEY_braille_dots_3567
const CLUTTER_ibreve = C.CLUTTER_ibreve
const CLUTTER_KEY_Scaron = C.CLUTTER_KEY_Scaron
const CLUTTER_PATH_CURVE_TO = C.CLUTTER_PATH_CURVE_TO
const CLUTTER_Sinh_ng2 = C.CLUTTER_Sinh_ng2
const CLUTTER_Macedonia_gje = C.CLUTTER_Macedonia_gje
const CLUTTER_KEY_kana_middledot = C.CLUTTER_KEY_kana_middledot
const CLUTTER_hebrew_beth = C.CLUTTER_hebrew_beth
const CLUTTER_KEY_kana_KU = C.CLUTTER_KEY_kana_KU
const CLUTTER_lowleftcorner = C.CLUTTER_lowleftcorner
const CLUTTER_Red = C.CLUTTER_Red
const CLUTTER_KEY_HotLinks = C.CLUTTER_KEY_HotLinks
const CLUTTER_BUTTON_PRESS = C.CLUTTER_BUTTON_PRESS
const CLUTTER_KEY_braille_dots_23568 = C.CLUTTER_KEY_braille_dots_23568
const CLUTTER_KEY_Cyrillic_be = C.CLUTTER_KEY_Cyrillic_be
const CLUTTER_KEY_Armenian_zhe = C.CLUTTER_KEY_Armenian_zhe
const CLUTTER_KEY_Sinh_ee = C.CLUTTER_KEY_Sinh_ee
const CLUTTER_KEY_ocircumflexacute = C.CLUTTER_KEY_ocircumflexacute
const CLUTTER_KEY_Terminate_Server = C.CLUTTER_KEY_Terminate_Server
const CLUTTER_Greek_xi = C.CLUTTER_Greek_xi
const CLUTTER_Armenian_full_stop = C.CLUTTER_Armenian_full_stop
const CLUTTER_KEY_ISO_Level2_Latch = C.CLUTTER_KEY_ISO_Level2_Latch
const CLUTTER_KEY_identical = C.CLUTTER_KEY_identical
const CLUTTER_Gabovedot = C.CLUTTER_Gabovedot
const CLUTTER_braille_dots_123 = C.CLUTTER_braille_dots_123
const CLUTTER_trademark = C.CLUTTER_trademark
const CLUTTER_KEY_ninesuperior = C.CLUTTER_KEY_ninesuperior
const CLUTTER_KEY_Hangul_SingleCandidate = C.CLUTTER_KEY_Hangul_SingleCandidate
const CLUTTER_KEY_ae = C.CLUTTER_KEY_ae
const CLUTTER_KEY_bar = C.CLUTTER_KEY_bar
const CLUTTER_KEY_Armenian_TYUN = C.CLUTTER_KEY_Armenian_TYUN
const CLUTTER_kana_KO = C.CLUTTER_kana_KO
const CLUTTER_Armenian_exclam = C.CLUTTER_Armenian_exclam
const CLUTTER_Cyrillic_EN_descender = C.CLUTTER_Cyrillic_EN_descender
const CLUTTER_NOTHING = C.CLUTTER_NOTHING
const CLUTTER_KEY_L9 = C.CLUTTER_KEY_L9
const CLUTTER_doubbaselinedot = C.CLUTTER_doubbaselinedot
const CLUTTER_Overlay2_Enable = C.CLUTTER_Overlay2_Enable
const CLUTTER_braille_dots_3568 = C.CLUTTER_braille_dots_3568
const CLUTTER_acircumflexgrave = C.CLUTTER_acircumflexgrave
const CLUTTER_braille_dots_23678 = C.CLUTTER_braille_dots_23678
const CLUTTER_KEY_braille_dots_1248 = C.CLUTTER_KEY_braille_dots_1248
const CLUTTER_KEY_braille_dots_1247 = C.CLUTTER_KEY_braille_dots_1247
const CLUTTER_Hangul_KkogjiDalrinIeung = C.CLUTTER_Hangul_KkogjiDalrinIeung
const CLUTTER_KEY_braille_dots_1245 = C.CLUTTER_KEY_braille_dots_1245
const CLUTTER_KEY_Cyrillic_U_macron = C.CLUTTER_KEY_Cyrillic_U_macron
const CLUTTER_Arabic_beh = C.CLUTTER_Arabic_beh
const CLUTTER_thorn = C.CLUTTER_thorn
const CLUTTER_KEY_fourthroot = C.CLUTTER_KEY_fourthroot
const CLUTTER_braille_dots_23568 = C.CLUTTER_braille_dots_23568
const CLUTTER_KEY_oacute = C.CLUTTER_KEY_oacute
const CLUTTER_KEY_ISO_Level5_Shift = C.CLUTTER_KEY_ISO_Level5_Shift
const CLUTTER_L6 = C.CLUTTER_L6
const CLUTTER_KEY_Reload = C.CLUTTER_KEY_Reload
const CLUTTER_KEY_Arabic_switch = C.CLUTTER_KEY_Arabic_switch
const CLUTTER_Word = C.CLUTTER_Word
const CLUTTER_Pointer_Button5 = C.CLUTTER_Pointer_Button5
const CLUTTER_Pointer_Button4 = C.CLUTTER_Pointer_Button4
const CLUTTER_Pointer_Button3 = C.CLUTTER_Pointer_Button3
const CLUTTER_Pointer_Button2 = C.CLUTTER_Pointer_Button2
const CLUTTER_KEY_Cyrillic_pe = C.CLUTTER_KEY_Cyrillic_pe
const CLUTTER_SCRIPT_ERROR_INVALID_TYPE_FUNCTION = C.CLUTTER_SCRIPT_ERROR_INVALID_TYPE_FUNCTION
const CLUTTER_doubleacute = C.CLUTTER_doubleacute
const CLUTTER_Sinh_uu = C.CLUTTER_Sinh_uu
const CLUTTER_at = C.CLUTTER_at
const CLUTTER_Video = C.CLUTTER_Video
const CLUTTER_Arabic_fatha = C.CLUTTER_Arabic_fatha
const CLUTTER_KEY_Acircumflex = C.CLUTTER_KEY_Acircumflex
const CLUTTER_KEY_braille_dots_367 = C.CLUTTER_KEY_braille_dots_367
const CLUTTER_babovedot = C.CLUTTER_babovedot
const CLUTTER_braille_dots_23457 = C.CLUTTER_braille_dots_23457
const CLUTTER_Thai_maichattawa = C.CLUTTER_Thai_maichattawa
const CLUTTER_STEP_MODE_END = C.CLUTTER_STEP_MODE_END
const CLUTTER_topleftparens = C.CLUTTER_topleftparens
const CLUTTER_KEY_kana_WO = C.CLUTTER_KEY_kana_WO
const CLUTTER_KEY_Armenian_TSA = C.CLUTTER_KEY_Armenian_TSA
const CLUTTER_KEY_Armenian_INI = C.CLUTTER_KEY_Armenian_INI
const CLUTTER_KEY_braille_dots_234567 = C.CLUTTER_KEY_braille_dots_234567
const CLUTTER_KEY_ISO_Release_Both_Margins = C.CLUTTER_KEY_ISO_Release_Both_Margins
const CLUTTER_KEY_thorn = C.CLUTTER_KEY_thorn
const CLUTTER_kana_HI = C.CLUTTER_kana_HI
const CLUTTER_Thai_fofa = C.CLUTTER_Thai_fofa
const CLUTTER_KEY_Thai_sarau = C.CLUTTER_KEY_Thai_sarau
const CLUTTER_braille_dots_1345678 = C.CLUTTER_braille_dots_1345678
const CLUTTER_KEY_nl = C.CLUTTER_KEY_nl
const CLUTTER_topintegral = C.CLUTTER_topintegral
const CLUTTER_Copy = C.CLUTTER_Copy
const CLUTTER_KEY_ibelowdot = C.CLUTTER_KEY_ibelowdot
const CLUTTER_braille_dots_3567 = C.CLUTTER_braille_dots_3567
const CLUTTER_KEY_foursuperior = C.CLUTTER_KEY_foursuperior
const CLUTTER_RockerEnter = C.CLUTTER_RockerEnter
const CLUTTER_KEY_braille_dots_23458 = C.CLUTTER_KEY_braille_dots_23458
const CLUTTER_KEY_hebrew_bet = C.CLUTTER_KEY_hebrew_bet
const CLUTTER_e = C.CLUTTER_e
const CLUTTER_underscore = C.CLUTTER_underscore
const CLUTTER_KEY_ENG = C.CLUTTER_KEY_ENG
const CLUTTER_KEY_Armenian_men = C.CLUTTER_KEY_Armenian_men
const CLUTTER_KEY_quad = C.CLUTTER_KEY_quad
const CLUTTER_KEY_MouseKeys_Enable = C.CLUTTER_KEY_MouseKeys_Enable
const CLUTTER_degree = C.CLUTTER_degree
const CLUTTER_KEY_nacute = C.CLUTTER_KEY_nacute
const CLUTTER_PICK_NONE = C.CLUTTER_PICK_NONE
const CLUTTER_KEY_breve = C.CLUTTER_KEY_breve
const CLUTTER_signifblank = C.CLUTTER_signifblank
const CLUTTER_braille_dots_145678 = C.CLUTTER_braille_dots_145678
const CLUTTER_KEY_Greek_ALPHAaccent = C.CLUTTER_KEY_Greek_ALPHAaccent
const CLUTTER_ecircumflex = C.CLUTTER_ecircumflex
const CLUTTER_soliddiamond = C.CLUTTER_soliddiamond
const CLUTTER_ERASER_DEVICE = C.CLUTTER_ERASER_DEVICE
const CLUTTER_KEY_Greek_upsilondieresis = C.CLUTTER_KEY_Greek_upsilondieresis
const CLUTTER_KEY_braceleft = C.CLUTTER_KEY_braceleft
const CLUTTER_MOTION = C.CLUTTER_MOTION
const CLUTTER_KEY_Arabic_heh_goal = C.CLUTTER_KEY_Arabic_heh_goal
const CLUTTER_Greek_nu = C.CLUTTER_Greek_nu
const CLUTTER_KEY_periodcentered = C.CLUTTER_KEY_periodcentered
const CLUTTER_Armenian_AT = C.CLUTTER_Armenian_AT
const CLUTTER_KEY_hcircumflex = C.CLUTTER_KEY_hcircumflex
const CLUTTER_KEY_Greek_kappa = C.CLUTTER_KEY_Greek_kappa
const CLUTTER_Sinh_ndda = C.CLUTTER_Sinh_ndda
const CLUTTER_KEY_braille_dot_9 = C.CLUTTER_KEY_braille_dot_9
const CLUTTER_KEY_notelementof = C.CLUTTER_KEY_notelementof
const CLUTTER_Sinh_gha = C.CLUTTER_Sinh_gha
const CLUTTER_Georgian_man = C.CLUTTER_Georgian_man
const CLUTTER_KEY_KP_Equal = C.CLUTTER_KEY_KP_Equal
const CLUTTER_R = C.CLUTTER_R
const CLUTTER_KEY_lowrightcorner = C.CLUTTER_KEY_lowrightcorner
const CLUTTER_ABSOLUTE_ORIGIN_CHANGED = C.CLUTTER_ABSOLUTE_ORIGIN_CHANGED
const CLUTTER_Hangul_Pieub = C.CLUTTER_Hangul_Pieub
const CLUTTER_copyright = C.CLUTTER_copyright
const CLUTTER_Pause = C.CLUTTER_Pause
const CLUTTER_Cyrillic_IO = C.CLUTTER_Cyrillic_IO
const CLUTTER_Armenian_gim = C.CLUTTER_Armenian_gim
const CLUTTER_braille_dots_57 = C.CLUTTER_braille_dots_57
const CLUTTER_Cyrillic_IE = C.CLUTTER_Cyrillic_IE
const CLUTTER_KEY_KbdLightOnOff = C.CLUTTER_KEY_KbdLightOnOff
const CLUTTER_fiveeighths = C.CLUTTER_fiveeighths
const CLUTTER_CONTENT_GRAVITY_RESIZE_FILL = C.CLUTTER_CONTENT_GRAVITY_RESIZE_FILL
const CLUTTER_Redo = C.CLUTTER_Redo
const CLUTTER_KEY_Cyrillic_lje = C.CLUTTER_KEY_Cyrillic_lje
const CLUTTER_KEY_Thai_chochan = C.CLUTTER_KEY_Thai_chochan
const CLUTTER_braille_dots_3678 = C.CLUTTER_braille_dots_3678
const CLUTTER_rcedilla = C.CLUTTER_rcedilla
const CLUTTER_Serbian_DJE = C.CLUTTER_Serbian_DJE
const CLUTTER_Armenian_KEN = C.CLUTTER_Armenian_KEN
const CLUTTER_ISO_Next_Group = C.CLUTTER_ISO_Next_Group
const CLUTTER_Sinh_luu = C.CLUTTER_Sinh_luu
const CLUTTER_AddFavorite = C.CLUTTER_AddFavorite
const CLUTTER_KEY_F19 = C.CLUTTER_KEY_F19
const CLUTTER_KP_4 = C.CLUTTER_KP_4
const CLUTTER_KP_5 = C.CLUTTER_KP_5
const CLUTTER_KP_2 = C.CLUTTER_KP_2
const CLUTTER_KP_3 = C.CLUTTER_KP_3
const CLUTTER_KP_0 = C.CLUTTER_KP_0
const CLUTTER_KP_1 = C.CLUTTER_KP_1
const CLUTTER_KEY_F10 = C.CLUTTER_KEY_F10
const CLUTTER_KEY_F11 = C.CLUTTER_KEY_F11
const CLUTTER_KEY_F12 = C.CLUTTER_KEY_F12
const CLUTTER_KEY_Close = C.CLUTTER_KEY_Close
const CLUTTER_KEY_F14 = C.CLUTTER_KEY_F14
const CLUTTER_KEY_F15 = C.CLUTTER_KEY_F15
const CLUTTER_KEY_F16 = C.CLUTTER_KEY_F16
const CLUTTER_KEY_F17 = C.CLUTTER_KEY_F17
const CLUTTER_KEY_Armenian_PE = C.CLUTTER_KEY_Armenian_PE
const CLUTTER_KEY_braille_dots_2346 = C.CLUTTER_KEY_braille_dots_2346
const CLUTTER_KEY_braille_dots_2345 = C.CLUTTER_KEY_braille_dots_2345
const CLUTTER_Switch_VT_5 = C.CLUTTER_Switch_VT_5
const CLUTTER_Cyrillic_el = C.CLUTTER_Cyrillic_el
const CLUTTER_Cyrillic_em = C.CLUTTER_Cyrillic_em
const CLUTTER_Cyrillic_en = C.CLUTTER_Cyrillic_en
const CLUTTER_Thai_saraam = C.CLUTTER_Thai_saraam
const CLUTTER_KEY_Support = C.CLUTTER_KEY_Support
const CLUTTER_KEY_MenuKB = C.CLUTTER_KEY_MenuKB
const CLUTTER_dead_acute = C.CLUTTER_dead_acute
const CLUTTER_KEY_Abrevebelowdot = C.CLUTTER_KEY_Abrevebelowdot
const CLUTTER_Cyrillic_ef = C.CLUTTER_Cyrillic_ef
const CLUTTER_KEY_braille_dots_2348 = C.CLUTTER_KEY_braille_dots_2348
const CLUTTER_KEY_Hangul_J_RieulPieub = C.CLUTTER_KEY_Hangul_J_RieulPieub
const CLUTTER_KEY_Armenian_pyur = C.CLUTTER_KEY_Armenian_pyur
const CLUTTER_KEY_horizlinescan5 = C.CLUTTER_KEY_horizlinescan5
const CLUTTER_Cyrillic_er = C.CLUTTER_Cyrillic_er
const CLUTTER_Cyrillic_es = C.CLUTTER_Cyrillic_es
const CLUTTER_KEY_3270_Duplicate = C.CLUTTER_KEY_3270_Duplicate
const CLUTTER_wdiaeresis = C.CLUTTER_wdiaeresis
const CLUTTER_KEY_hebrew_taw = C.CLUTTER_KEY_hebrew_taw
const CLUTTER_KEY_Katakana = C.CLUTTER_KEY_Katakana
const CLUTTER_KEY_hebrew_finalkaph = C.CLUTTER_KEY_hebrew_finalkaph
const CLUTTER_KEY_dintegral = C.CLUTTER_KEY_dintegral
const CLUTTER_KEY_braille_dots_35678 = C.CLUTTER_KEY_braille_dots_35678
const CLUTTER_GRID_POSITION_LEFT = C.CLUTTER_GRID_POSITION_LEFT
const CLUTTER_KEY_Standby = C.CLUTTER_KEY_Standby
const CLUTTER_KEY_L5 = C.CLUTTER_KEY_L5
const CLUTTER_Sinh_lu2 = C.CLUTTER_Sinh_lu2
const CLUTTER_lacute = C.CLUTTER_lacute
const CLUTTER_Armenian_LYUN = C.CLUTTER_Armenian_LYUN
const CLUTTER_KEY_Greek_pi = C.CLUTTER_KEY_Greek_pi
const CLUTTER_Armenian_JE = C.CLUTTER_Armenian_JE
const CLUTTER_KEY_emacron = C.CLUTTER_KEY_emacron
const CLUTTER_KEY_News = C.CLUTTER_KEY_News
const CLUTTER_Cyrillic_ghe_bar = C.CLUTTER_Cyrillic_ghe_bar
const CLUTTER_Nacute = C.CLUTTER_Nacute
const CLUTTER_KEY_wcircumflex = C.CLUTTER_KEY_wcircumflex
const CLUTTER_emfilledcircle = C.CLUTTER_emfilledcircle
const CLUTTER_toprightsqbracket = C.CLUTTER_toprightsqbracket
const CLUTTER_braille_dots_12478 = C.CLUTTER_braille_dots_12478
const CLUTTER_asciicircum = C.CLUTTER_asciicircum
const CLUTTER_KEY_Start = C.CLUTTER_KEY_Start
const CLUTTER_GRID_POSITION_BOTTOM = C.CLUTTER_GRID_POSITION_BOTTOM
const CLUTTER_KEY_Hangul_J_Jieuj = C.CLUTTER_KEY_Hangul_J_Jieuj
const CLUTTER_KEY_percent = C.CLUTTER_KEY_percent
const CLUTTER_containsas = C.CLUTTER_containsas
const CLUTTER_KEY_Thai_chochoe = C.CLUTTER_KEY_Thai_chochoe
const CLUTTER_KEY_Sinh_h2 = C.CLUTTER_KEY_Sinh_h2
const CLUTTER_KEY_threequarters = C.CLUTTER_KEY_threequarters
const CLUTTER_KEY_Greek_OMEGA = C.CLUTTER_KEY_Greek_OMEGA
const CLUTTER_KEY_L3 = C.CLUTTER_KEY_L3
const CLUTTER_KEY_doubleacute = C.CLUTTER_KEY_doubleacute
const CLUTTER_KEY_Armenian_VYUN = C.CLUTTER_KEY_Armenian_VYUN
const CLUTTER_hairspace = C.CLUTTER_hairspace
const CLUTTER_Idiaeresis = C.CLUTTER_Idiaeresis
const CLUTTER_Armenian_ben = C.CLUTTER_Armenian_ben
const CLUTTER_dead_doubleacute = C.CLUTTER_dead_doubleacute
const CLUTTER_KEY_braille_dots_268 = C.CLUTTER_KEY_braille_dots_268
const CLUTTER_Armenian_tso = C.CLUTTER_Armenian_tso
const CLUTTER_Armenian_se = C.CLUTTER_Armenian_se
const CLUTTER_KEY_braille_dots_267 = C.CLUTTER_KEY_braille_dots_267
const CLUTTER_Ecircumflexacute = C.CLUTTER_Ecircumflexacute
const CLUTTER_Greek_OMICRONaccent = C.CLUTTER_Greek_OMICRONaccent
const CLUTTER_F6 = C.CLUTTER_F6
const CLUTTER_F7 = C.CLUTTER_F7
const CLUTTER_F4 = C.CLUTTER_F4
const CLUTTER_Cyrillic_i_macron = C.CLUTTER_Cyrillic_i_macron
const CLUTTER_F2 = C.CLUTTER_F2
const CLUTTER_F3 = C.CLUTTER_F3
const CLUTTER_F1 = C.CLUTTER_F1
const CLUTTER_KEY_Hangul_Cieuc = C.CLUTTER_KEY_Hangul_Cieuc
const CLUTTER_Greek_DELTA = C.CLUTTER_Greek_DELTA
const CLUTTER_KEY_Yacute = C.CLUTTER_KEY_Yacute
const CLUTTER_ezh = C.CLUTTER_ezh
const CLUTTER_Arabic_alefmaksura = C.CLUTTER_Arabic_alefmaksura
const CLUTTER_F8 = C.CLUTTER_F8
const CLUTTER_F9 = C.CLUTTER_F9
const CLUTTER_ccircumflex = C.CLUTTER_ccircumflex
const CLUTTER_Serbian_lje = C.CLUTTER_Serbian_lje
const CLUTTER_TOUCHSCREEN_DEVICE = C.CLUTTER_TOUCHSCREEN_DEVICE
const CLUTTER_KEY_Thai_saraii = C.CLUTTER_KEY_Thai_saraii
const CLUTTER_kana_comma = C.CLUTTER_kana_comma
const CLUTTER_Armenian_HI = C.CLUTTER_Armenian_HI
const CLUTTER_KEY_PRESS = C.CLUTTER_KEY_PRESS
const CLUTTER_Cyrillic_shcha = C.CLUTTER_Cyrillic_shcha
const CLUTTER_SCROLL_RIGHT = C.CLUTTER_SCROLL_RIGHT
const CLUTTER_Armenian_HO = C.CLUTTER_Armenian_HO
const CLUTTER_KEY_uhorn = C.CLUTTER_KEY_uhorn
const CLUTTER_KEY_gcircumflex = C.CLUTTER_KEY_gcircumflex
const CLUTTER_KEY_Armenian_nu = C.CLUTTER_KEY_Armenian_nu
const CLUTTER_FEATURE_STAGE_CURSOR = C.CLUTTER_FEATURE_STAGE_CURSOR
const CLUTTER_Hangul_YeorinHieuh = C.CLUTTER_Hangul_YeorinHieuh
const CLUTTER_KEY_Prior = C.CLUTTER_KEY_Prior
const CLUTTER_KEY_Greek_gamma = C.CLUTTER_KEY_Greek_gamma
const CLUTTER_careof = C.CLUTTER_careof
const CLUTTER_KEY_Greek_IOTA = C.CLUTTER_KEY_Greek_IOTA
const CLUTTER_KEY_Insert = C.CLUTTER_KEY_Insert
const CLUTTER_braille_dots_13458 = C.CLUTTER_braille_dots_13458
const CLUTTER_KEY_Greek_BETA = C.CLUTTER_KEY_Greek_BETA
const CLUTTER_Ukrainian_IE = C.CLUTTER_Ukrainian_IE
const CLUTTER_Search = C.CLUTTER_Search
const CLUTTER_TEXTURE_QUALITY_LOW = C.CLUTTER_TEXTURE_QUALITY_LOW
const CLUTTER_multiply = C.CLUTTER_multiply
const CLUTTER_braille_dots_45678 = C.CLUTTER_braille_dots_45678
const CLUTTER_Hangul_YEO = C.CLUTTER_Hangul_YEO
const CLUTTER_KEY_Prev_VMode = C.CLUTTER_KEY_Prev_VMode
const CLUTTER_EASE_IN_OUT_ELASTIC = C.CLUTTER_EASE_IN_OUT_ELASTIC
const CLUTTER_Hangul_End = C.CLUTTER_Hangul_End
const CLUTTER_EVENT_LAST = C.CLUTTER_EVENT_LAST
const CLUTTER_EASE_IN_QUART = C.CLUTTER_EASE_IN_QUART
const CLUTTER_KEY_braille_dots_236 = C.CLUTTER_KEY_braille_dots_236
const CLUTTER_ohorn = C.CLUTTER_ohorn
const CLUTTER_KEY_ISO_Release_Margin_Left = C.CLUTTER_KEY_ISO_Release_Margin_Left
const CLUTTER_KEY_Pointer_UpRight = C.CLUTTER_KEY_Pointer_UpRight
const CLUTTER_questiondown = C.CLUTTER_questiondown
const CLUTTER_KEY_signaturemark = C.CLUTTER_KEY_signaturemark
const CLUTTER_KEY_Kana_Shift = C.CLUTTER_KEY_Kana_Shift
const CLUTTER_Arabic_superscript_alef = C.CLUTTER_Arabic_superscript_alef
const CLUTTER_Ubreve = C.CLUTTER_Ubreve
const CLUTTER_KEY_CycleAngle = C.CLUTTER_KEY_CycleAngle
const CLUTTER_KEY_Greek_KAPPA = C.CLUTTER_KEY_Greek_KAPPA
const CLUTTER_Arabic_waw = C.CLUTTER_Arabic_waw
const CLUTTER_acircumflexacute = C.CLUTTER_acircumflexacute
const CLUTTER_KEY_kana_KE = C.CLUTTER_KEY_kana_KE
const CLUTTER_braille_dots_357 = C.CLUTTER_braille_dots_357
const CLUTTER_braille_dots_356 = C.CLUTTER_braille_dots_356
const CLUTTER_KEY_braille_dots_34678 = C.CLUTTER_KEY_braille_dots_34678
const CLUTTER_dead_hook = C.CLUTTER_dead_hook
const CLUTTER_KEY_Pointer_Button_Dflt = C.CLUTTER_KEY_Pointer_Button_Dflt
const CLUTTER_FLOW_HORIZONTAL = C.CLUTTER_FLOW_HORIZONTAL
const CLUTTER_KEY_Sinh_ja = C.CLUTTER_KEY_Sinh_ja
const CLUTTER_KEY_FrameForward = C.CLUTTER_KEY_FrameForward
const CLUTTER_Zenkaku = C.CLUTTER_Zenkaku
const CLUTTER_KEY_Serbian_je = C.CLUTTER_KEY_Serbian_je
const CLUTTER_Armenian_FE = C.CLUTTER_Armenian_FE
const CLUTTER_SCROLL = C.CLUTTER_SCROLL
const CLUTTER_COLOR_DARK_GREEN = C.CLUTTER_COLOR_DARK_GREEN
const CLUTTER_KEY_uprightcorner = C.CLUTTER_KEY_uprightcorner
const CLUTTER_KEY_ZoomIn = C.CLUTTER_KEY_ZoomIn
const CLUTTER_FEATURE_SWAP_EVENTS = C.CLUTTER_FEATURE_SWAP_EVENTS
const CLUTTER_equal = C.CLUTTER_equal
const CLUTTER_KEY_Thai_saraaimaimalai = C.CLUTTER_KEY_Thai_saraaimaimalai
const CLUTTER_Ccedilla = C.CLUTTER_Ccedilla
const CLUTTER_History = C.CLUTTER_History
const CLUTTER_Thai_oang = C.CLUTTER_Thai_oang
const CLUTTER_AudioCycleTrack = C.CLUTTER_AudioCycleTrack
const CLUTTER_SWIPE_DIRECTION_LEFT = C.CLUTTER_SWIPE_DIRECTION_LEFT
const CLUTTER_Eacute = C.CLUTTER_Eacute
const CLUTTER_braille_dots_248 = C.CLUTTER_braille_dots_248
const CLUTTER_KEY_KP_Tab = C.CLUTTER_KEY_KP_Tab
const CLUTTER_checkerboard = C.CLUTTER_checkerboard
const CLUTTER_KEY_Thai_thothan = C.CLUTTER_KEY_Thai_thothan
const CLUTTER_eightsubscript = C.CLUTTER_eightsubscript
const CLUTTER_squareroot = C.CLUTTER_squareroot
const CLUTTER_Arabic_hamzaonwaw = C.CLUTTER_Arabic_hamzaonwaw
const CLUTTER_BIN_ALIGNMENT_CENTER = C.CLUTTER_BIN_ALIGNMENT_CENTER
const CLUTTER_KEY_Thai_maihanakat = C.CLUTTER_KEY_Thai_maihanakat
const CLUTTER_notapproxeq = C.CLUTTER_notapproxeq
const CLUTTER_KEY_Hyper_L = C.CLUTTER_KEY_Hyper_L
const CLUTTER_KEY_Armenian_DZA = C.CLUTTER_KEY_Armenian_DZA
const CLUTTER_KEY_hebrew_chet = C.CLUTTER_KEY_hebrew_chet
const CLUTTER_KEY_rightopentriangle = C.CLUTTER_KEY_rightopentriangle
const CLUTTER_KEY_Cyrillic_EN_descender = C.CLUTTER_KEY_Cyrillic_EN_descender
const CLUTTER_quoteright = C.CLUTTER_quoteright
const CLUTTER_AudioForward = C.CLUTTER_AudioForward
const CLUTTER_stricteq = C.CLUTTER_stricteq
const CLUTTER_botrightsummation = C.CLUTTER_botrightsummation
const CLUTTER_SWIPE_DIRECTION_UP = C.CLUTTER_SWIPE_DIRECTION_UP
const CLUTTER_KEY_KbdBrightnessUp = C.CLUTTER_KEY_KbdBrightnessUp
const CLUTTER_Thai_yoying = C.CLUTTER_Thai_yoying
const CLUTTER_Armenian_hyphen = C.CLUTTER_Armenian_hyphen
const CLUTTER_Pointer_Right = C.CLUTTER_Pointer_Right
const CLUTTER_Georgian_har = C.CLUTTER_Georgian_har
const CLUTTER_KEY_righttack = C.CLUTTER_KEY_righttack
const CLUTTER_KEY_eightsubscript = C.CLUTTER_KEY_eightsubscript
const CLUTTER_braille_dots_138 = C.CLUTTER_braille_dots_138
const CLUTTER_ogonek = C.CLUTTER_ogonek
const CLUTTER_braille_dots_135 = C.CLUTTER_braille_dots_135
const CLUTTER_braille_dots_134 = C.CLUTTER_braille_dots_134
const CLUTTER_braille_dots_137 = C.CLUTTER_braille_dots_137
const CLUTTER_braille_dots_136 = C.CLUTTER_braille_dots_136
const CLUTTER_KEY_toprightparens = C.CLUTTER_KEY_toprightparens
const CLUTTER_SHADER_ERROR_NO_ASM = C.CLUTTER_SHADER_ERROR_NO_ASM
const CLUTTER_KEY_radical = C.CLUTTER_KEY_radical
const CLUTTER_acute = C.CLUTTER_acute
const CLUTTER_Armenian_verjaket = C.CLUTTER_Armenian_verjaket
const CLUTTER_KEY_Ytilde = C.CLUTTER_KEY_Ytilde
const CLUTTER_KEY_Prev_Virtual_Screen = C.CLUTTER_KEY_Prev_Virtual_Screen
const CLUTTER_KEY_Hyper_R = C.CLUTTER_KEY_Hyper_R
const CLUTTER_KEY_kana_YU = C.CLUTTER_KEY_kana_YU
const CLUTTER_Switch_VT_11 = C.CLUTTER_Switch_VT_11
const CLUTTER_KEY_partialderivative = C.CLUTTER_KEY_partialderivative
const CLUTTER_braille_dots_13467 = C.CLUTTER_braille_dots_13467
const CLUTTER_KEY_exclam = C.CLUTTER_KEY_exclam
const CLUTTER_Thai_khokhai = C.CLUTTER_Thai_khokhai
const CLUTTER_ISO_Continuous_Underline = C.CLUTTER_ISO_Continuous_Underline
const CLUTTER_KEY_Hangul_RieulHieuh = C.CLUTTER_KEY_Hangul_RieulHieuh
const CLUTTER_KEY_braille_dots_1256 = C.CLUTTER_KEY_braille_dots_1256
const CLUTTER_KEY_braille_dots_1257 = C.CLUTTER_KEY_braille_dots_1257
const CLUTTER_hstroke = C.CLUTTER_hstroke
const CLUTTER_hebrew_chet = C.CLUTTER_hebrew_chet
const CLUTTER_EASE_IN_OUT = C.CLUTTER_EASE_IN_OUT
const CLUTTER_Sinh_aee = C.CLUTTER_Sinh_aee
const CLUTTER_Greek_IOTAaccent = C.CLUTTER_Greek_IOTAaccent
const CLUTTER_Greek_mu = C.CLUTTER_Greek_mu
const CLUTTER_KEY_rcaron = C.CLUTTER_KEY_rcaron
const CLUTTER_braille_dots_2567 = C.CLUTTER_braille_dots_2567
const CLUTTER_KEY_3270_EraseEOF = C.CLUTTER_KEY_3270_EraseEOF
const CLUTTER_KEY_imacron = C.CLUTTER_KEY_imacron
const CLUTTER_Hangul_Phieuf = C.CLUTTER_Hangul_Phieuf
const CLUTTER_Ehook = C.CLUTTER_Ehook
const CLUTTER_Cyrillic_JE = C.CLUTTER_Cyrillic_JE
const CLUTTER_KEY_9 = C.CLUTTER_KEY_9
const CLUTTER_KEY_8 = C.CLUTTER_KEY_8
const CLUTTER_KEY_7 = C.CLUTTER_KEY_7
const CLUTTER_KEY_6 = C.CLUTTER_KEY_6
const CLUTTER_KEY_5 = C.CLUTTER_KEY_5
const CLUTTER_KEY_4 = C.CLUTTER_KEY_4
const CLUTTER_KEY_3 = C.CLUTTER_KEY_3
const CLUTTER_KEY_2 = C.CLUTTER_KEY_2
const CLUTTER_KEY_1 = C.CLUTTER_KEY_1
const CLUTTER_KEY_0 = C.CLUTTER_KEY_0
const CLUTTER_Hangul_KiyeogSios = C.CLUTTER_Hangul_KiyeogSios
const CLUTTER_KEY_Hangul_Banja = C.CLUTTER_KEY_Hangul_Banja
const CLUTTER_KEY_Greek_omicron = C.CLUTTER_KEY_Greek_omicron
const CLUTTER_Georgian_en = C.CLUTTER_Georgian_en
const CLUTTER_hebrew_kuf = C.CLUTTER_hebrew_kuf
const CLUTTER_GRAVITY_SOUTH = C.CLUTTER_GRAVITY_SOUTH
const CLUTTER_KEY_Ecircumflexacute = C.CLUTTER_KEY_Ecircumflexacute
const CLUTTER_KEY_Refresh = C.CLUTTER_KEY_Refresh
const CLUTTER_Abrevegrave = C.CLUTTER_Abrevegrave
const CLUTTER_BOX_ALIGNMENT_START = C.CLUTTER_BOX_ALIGNMENT_START
const CLUTTER_numerosign = C.CLUTTER_numerosign
const CLUTTER_KEY_Z = C.CLUTTER_KEY_Z
const CLUTTER_KEY_Y = C.CLUTTER_KEY_Y
const CLUTTER_KEY_X = C.CLUTTER_KEY_X
const CLUTTER_KEY_W = C.CLUTTER_KEY_W
const CLUTTER_KEY_V = C.CLUTTER_KEY_V
const CLUTTER_KEY_U = C.CLUTTER_KEY_U
const CLUTTER_KEY_T = C.CLUTTER_KEY_T
const CLUTTER_KEY_S = C.CLUTTER_KEY_S
const CLUTTER_KEY_R = C.CLUTTER_KEY_R
const CLUTTER_KEY_Q = C.CLUTTER_KEY_Q
const CLUTTER_Arabic_kasra = C.CLUTTER_Arabic_kasra
const CLUTTER_KEY_O = C.CLUTTER_KEY_O
const CLUTTER_KEY_N = C.CLUTTER_KEY_N
const CLUTTER_KEY_M = C.CLUTTER_KEY_M
const CLUTTER_KEY_L = C.CLUTTER_KEY_L
const CLUTTER_F18 = C.CLUTTER_F18
const CLUTTER_F19 = C.CLUTTER_F19
const CLUTTER_KEY_I = C.CLUTTER_KEY_I
const CLUTTER_KEY_H = C.CLUTTER_KEY_H
const CLUTTER_F14 = C.CLUTTER_F14
const CLUTTER_F15 = C.CLUTTER_F15
const CLUTTER_KEY_E = C.CLUTTER_KEY_E
const CLUTTER_KEY_D = C.CLUTTER_KEY_D
const CLUTTER_KEY_C = C.CLUTTER_KEY_C
const CLUTTER_F11 = C.CLUTTER_F11
const CLUTTER_KEY_A = C.CLUTTER_KEY_A
const CLUTTER_F13 = C.CLUTTER_F13
const CLUTTER_onesixth = C.CLUTTER_onesixth
const CLUTTER_TOUCH_BEGIN = C.CLUTTER_TOUCH_BEGIN
const CLUTTER_Armenian_TYUN = C.CLUTTER_Armenian_TYUN
const CLUTTER_KEY_Greek_phi = C.CLUTTER_KEY_Greek_phi
const CLUTTER_KEY_EuroSign = C.CLUTTER_KEY_EuroSign
const CLUTTER_KEY_x = C.CLUTTER_KEY_x
const CLUTTER_AccessX_Enable = C.CLUTTER_AccessX_Enable
const CLUTTER_KEY_v = C.CLUTTER_KEY_v
const CLUTTER_Cyrillic_sha = C.CLUTTER_Cyrillic_sha
const CLUTTER_KEY_t = C.CLUTTER_KEY_t
const CLUTTER_KEY_s = C.CLUTTER_KEY_s
const CLUTTER_Greek_OMEGAaccent = C.CLUTTER_Greek_OMEGAaccent
const CLUTTER_KEY_Eabovedot = C.CLUTTER_KEY_Eabovedot
const CLUTTER_KEY_Thai_lekchet = C.CLUTTER_KEY_Thai_lekchet
const CLUTTER_KEY_o = C.CLUTTER_KEY_o
const CLUTTER_KEY_n = C.CLUTTER_KEY_n
const CLUTTER_KEY_m = C.CLUTTER_KEY_m
const CLUTTER_KEY_braille_dots_12348 = C.CLUTTER_KEY_braille_dots_12348
const CLUTTER_KEY_k = C.CLUTTER_KEY_k
const CLUTTER_KEY_j = C.CLUTTER_KEY_j
const CLUTTER_KEY_i = C.CLUTTER_KEY_i
const CLUTTER_KEY_botintegral = C.CLUTTER_KEY_botintegral
const CLUTTER_KEY_g = C.CLUTTER_KEY_g
const CLUTTER_KEY_f = C.CLUTTER_KEY_f
const CLUTTER_Armenian_TO = C.CLUTTER_Armenian_TO
const CLUTTER_KEY_d = C.CLUTTER_KEY_d
const CLUTTER_KEY_adiaeresis = C.CLUTTER_KEY_adiaeresis
const CLUTTER_KEY_Georgian_en = C.CLUTTER_KEY_Georgian_en
const CLUTTER_KEY_a = C.CLUTTER_KEY_a
const CLUTTER_braille_dot_1 = C.CLUTTER_braille_dot_1
const CLUTTER_Georgian_rae = C.CLUTTER_Georgian_rae
const CLUTTER_KEY_Greek_etaaccent = C.CLUTTER_KEY_Greek_etaaccent
const CLUTTER_R13 = C.CLUTTER_R13
const CLUTTER_braille_dot_5 = C.CLUTTER_braille_dot_5
const CLUTTER_braille_dot_4 = C.CLUTTER_braille_dot_4
const CLUTTER_braille_dot_7 = C.CLUTTER_braille_dot_7
const CLUTTER_braille_dot_6 = C.CLUTTER_braille_dot_6
const CLUTTER_braille_dot_9 = C.CLUTTER_braille_dot_9
const CLUTTER_braille_dot_8 = C.CLUTTER_braille_dot_8
const CLUTTER_KEY_dead_currency = C.CLUTTER_KEY_dead_currency
const CLUTTER_leftshoe = C.CLUTTER_leftshoe
const CLUTTER_KEY_idotless = C.CLUTTER_KEY_idotless
const CLUTTER_hebrew_samech = C.CLUTTER_hebrew_samech
const CLUTTER_KEY_onesubscript = C.CLUTTER_KEY_onesubscript
const CLUTTER_enspace = C.CLUTTER_enspace
const CLUTTER_KEY_KP_1 = C.CLUTTER_KEY_KP_1
const CLUTTER_Thai_khokhuat = C.CLUTTER_Thai_khokhuat
const CLUTTER_Hangul_WAE = C.CLUTTER_Hangul_WAE
const CLUTTER_Armenian_VYUN = C.CLUTTER_Armenian_VYUN
const CLUTTER_ISO_Fast_Cursor_Up = C.CLUTTER_ISO_Fast_Cursor_Up
const CLUTTER_Armenian_pe = C.CLUTTER_Armenian_pe
const CLUTTER_braille_dots_3468 = C.CLUTTER_braille_dots_3468
const CLUTTER_lbelowdot = C.CLUTTER_lbelowdot
const CLUTTER_Xabovedot = C.CLUTTER_Xabovedot
const CLUTTER_Greek_ETA = C.CLUTTER_Greek_ETA
const CLUTTER_Sinh_fa = C.CLUTTER_Sinh_fa
const CLUTTER_KEY_Cyrillic_TSE = C.CLUTTER_KEY_Cyrillic_TSE
const CLUTTER_BounceKeys_Enable = C.CLUTTER_BounceKeys_Enable
const CLUTTER_KEY_braille_dots_45678 = C.CLUTTER_KEY_braille_dots_45678
const CLUTTER_PreviousCandidate = C.CLUTTER_PreviousCandidate
const CLUTTER_KEY_openrectbullet = C.CLUTTER_KEY_openrectbullet
const CLUTTER_Pointer_Drag5 = C.CLUTTER_Pointer_Drag5
const CLUTTER_KEY_dead_i = C.CLUTTER_KEY_dead_i
const CLUTTER_KEY_Georgian_chin = C.CLUTTER_KEY_Georgian_chin
const CLUTTER_KP_F2 = C.CLUTTER_KP_F2
const CLUTTER_braille_dots_45 = C.CLUTTER_braille_dots_45
const CLUTTER_braille_dots_46 = C.CLUTTER_braille_dots_46
const CLUTTER_braille_dots_47 = C.CLUTTER_braille_dots_47
const CLUTTER_Ediaeresis = C.CLUTTER_Ediaeresis
const CLUTTER_Cyrillic_te = C.CLUTTER_Cyrillic_te
const CLUTTER_EASE_IN_OUT_CIRC = C.CLUTTER_EASE_IN_OUT_CIRC
const CLUTTER_KP_Up = C.CLUTTER_KP_Up
const CLUTTER_KEY_ecircumflexbelowdot = C.CLUTTER_KEY_ecircumflexbelowdot
const CLUTTER_KEY_Thai_sosua = C.CLUTTER_KEY_Thai_sosua
const CLUTTER_GRAVITY_NORTH_WEST = C.CLUTTER_GRAVITY_NORTH_WEST
const CLUTTER_braille_dots_378 = C.CLUTTER_braille_dots_378
const CLUTTER_KEY_emopenrectangle = C.CLUTTER_KEY_emopenrectangle
const CLUTTER_KEY_notsign = C.CLUTTER_KEY_notsign
const CLUTTER_braille_dots_1378 = C.CLUTTER_braille_dots_1378
const CLUTTER_KEY_Option = C.CLUTTER_KEY_Option
const CLUTTER_KEY_F25 = C.CLUTTER_KEY_F25
const CLUTTER_KEY_F24 = C.CLUTTER_KEY_F24
const CLUTTER_KEY_F27 = C.CLUTTER_KEY_F27
const CLUTTER_KEY_F26 = C.CLUTTER_KEY_F26
const CLUTTER_KEY_F21 = C.CLUTTER_KEY_F21
const CLUTTER_KEY_F20 = C.CLUTTER_KEY_F20
const CLUTTER_KEY_F23 = C.CLUTTER_KEY_F23
const CLUTTER_KEY_F22 = C.CLUTTER_KEY_F22
const CLUTTER_R10 = C.CLUTTER_R10
const CLUTTER_KEY_P = C.CLUTTER_KEY_P
const CLUTTER_KEY_F29 = C.CLUTTER_KEY_F29
const CLUTTER_KEY_F28 = C.CLUTTER_KEY_F28
const CLUTTER_Scircumflex = C.CLUTTER_Scircumflex
const CLUTTER_Pointer_Drag3 = C.CLUTTER_Pointer_Drag3
const CLUTTER_KEY_LightBulb = C.CLUTTER_KEY_LightBulb
const CLUTTER_Serbian_DZE = C.CLUTTER_Serbian_DZE
const CLUTTER_KEY_dead_diaeresis = C.CLUTTER_KEY_dead_diaeresis
const CLUTTER_KEY_Armenian_full_stop = C.CLUTTER_KEY_Armenian_full_stop
const CLUTTER_KEY_braille_dots_2357 = C.CLUTTER_KEY_braille_dots_2357
const CLUTTER_KEY_Hangul_PreHanja = C.CLUTTER_KEY_Hangul_PreHanja
const CLUTTER_MOD3_MASK = C.CLUTTER_MOD3_MASK
const CLUTTER_Hiragana = C.CLUTTER_Hiragana
const CLUTTER_Pointer_Drag1 = C.CLUTTER_Pointer_Drag1
const CLUTTER_hebrew_zadi = C.CLUTTER_hebrew_zadi
const CLUTTER_KEY_Zabovedot = C.CLUTTER_KEY_Zabovedot
const CLUTTER_KP_F4 = C.CLUTTER_KP_F4
const CLUTTER_sixsubscript = C.CLUTTER_sixsubscript
const CLUTTER_hebrew_dalet = C.CLUTTER_hebrew_dalet
const CLUTTER_R5 = C.CLUTTER_R5
const CLUTTER_KEY_K = C.CLUTTER_KEY_K
const CLUTTER_Hangul_PreviousCandidate = C.CLUTTER_Hangul_PreviousCandidate
const CLUTTER_INPUT_AXIS_PRESSURE = C.CLUTTER_INPUT_AXIS_PRESSURE
const CLUTTER_Greek_IOTA = C.CLUTTER_Greek_IOTA
const CLUTTER_KEY_J = C.CLUTTER_KEY_J
const CLUTTER_KEY_acircumflexgrave = C.CLUTTER_KEY_acircumflexgrave
const CLUTTER_KEY_pabovedot = C.CLUTTER_KEY_pabovedot
const CLUTTER_KEY_Armenian_e = C.CLUTTER_KEY_Armenian_e
const CLUTTER_KEY_decimalpoint = C.CLUTTER_KEY_decimalpoint
const CLUTTER_Fabovedot = C.CLUTTER_Fabovedot
const CLUTTER_KEY_dead_macron = C.CLUTTER_KEY_dead_macron
const CLUTTER_KEY_Thai_phophung = C.CLUTTER_KEY_Thai_phophung
const CLUTTER_EASE_IN_OUT_CUBIC = C.CLUTTER_EASE_IN_OUT_CUBIC
const CLUTTER_KEY_ecaron = C.CLUTTER_KEY_ecaron
const CLUTTER_dead_belowring = C.CLUTTER_dead_belowring
const CLUTTER_KEY_Armenian_o = C.CLUTTER_KEY_Armenian_o
const CLUTTER_KEY_G = C.CLUTTER_KEY_G
const CLUTTER_POINTER_DEVICE = C.CLUTTER_POINTER_DEVICE
const CLUTTER_KEY_Greek_RHO = C.CLUTTER_KEY_Greek_RHO
const CLUTTER_Cacute = C.CLUTTER_Cacute
const CLUTTER_KEY_Georgian_nar = C.CLUTTER_KEY_Georgian_nar
const CLUTTER_KEY_F = C.CLUTTER_KEY_F
const CLUTTER_Go = C.CLUTTER_Go
const CLUTTER_F16 = C.CLUTTER_F16
const CLUTTER_threeeighths = C.CLUTTER_threeeighths
const CLUTTER_COLOR_PLUM_DARK = C.CLUTTER_COLOR_PLUM_DARK
const CLUTTER_KEY_abrevetilde = C.CLUTTER_KEY_abrevetilde
const CLUTTER_F17 = C.CLUTTER_F17
const CLUTTER_doubledagger = C.CLUTTER_doubledagger
const CLUTTER_KEY_Armenian_E = C.CLUTTER_KEY_Armenian_E
const CLUTTER_KEY_braille_dots_237 = C.CLUTTER_KEY_braille_dots_237
const CLUTTER_F10 = C.CLUTTER_F10
const CLUTTER_Eabovedot = C.CLUTTER_Eabovedot
const CLUTTER_KEY_Mail = C.CLUTTER_KEY_Mail
const CLUTTER_Hangul_AraeAE = C.CLUTTER_Hangul_AraeAE
const CLUTTER_KEY_dead_E = C.CLUTTER_KEY_dead_E
const CLUTTER_KEY_Hangul_Jeonja = C.CLUTTER_KEY_Hangul_Jeonja
const CLUTTER_KEY_Armenian_O = C.CLUTTER_KEY_Armenian_O
const CLUTTER_hebrew_finalzadi = C.CLUTTER_hebrew_finalzadi
const CLUTTER_SNAP_EDGE_BOTTOM = C.CLUTTER_SNAP_EDGE_BOTTOM
const CLUTTER_F12 = C.CLUTTER_F12
const CLUTTER_KEY_Sinh_uu = C.CLUTTER_KEY_Sinh_uu
const CLUTTER_Arabic_ra = C.CLUTTER_Arabic_ra
const CLUTTER_KEY_Sinh_kunddaliya = C.CLUTTER_KEY_Sinh_kunddaliya
const CLUTTER_Kcedilla = C.CLUTTER_Kcedilla
const CLUTTER_KEY_Cyrillic_VE = C.CLUTTER_KEY_Cyrillic_VE
const CLUTTER_Page_Up = C.CLUTTER_Page_Up
const CLUTTER_cacute = C.CLUTTER_cacute
const CLUTTER_Hangul_RieulTieut = C.CLUTTER_Hangul_RieulTieut
const CLUTTER_KP_Separator = C.CLUTTER_KP_Separator
const CLUTTER_KEY_Gcaron = C.CLUTTER_KEY_Gcaron
const CLUTTER_KEY_braille_dot_8 = C.CLUTTER_KEY_braille_dot_8
const CLUTTER_KEY_dagger = C.CLUTTER_KEY_dagger
const CLUTTER_Cyrillic_shorti = C.CLUTTER_Cyrillic_shorti
const CLUTTER_KEY_braille_dot_4 = C.CLUTTER_KEY_braille_dot_4
const CLUTTER_KEY_braille_dot_7 = C.CLUTTER_KEY_braille_dot_7
const CLUTTER_KEY_braille_dot_6 = C.CLUTTER_KEY_braille_dot_6
const CLUTTER_KEY_braille_dot_1 = C.CLUTTER_KEY_braille_dot_1
const CLUTTER_scedilla = C.CLUTTER_scedilla
const CLUTTER_KEY_braille_dot_3 = C.CLUTTER_KEY_braille_dot_3
const CLUTTER_KEY_braille_dot_2 = C.CLUTTER_KEY_braille_dot_2
const CLUTTER_braille_dots_13468 = C.CLUTTER_braille_dots_13468
const CLUTTER_KEY_braille_dots_4568 = C.CLUTTER_KEY_braille_dots_4568
const CLUTTER_braille_dots_2457 = C.CLUTTER_braille_dots_2457
const CLUTTER_Scaron = C.CLUTTER_Scaron
const CLUTTER_Battery = C.CLUTTER_Battery
const CLUTTER_KEY_Arabic_maddaonalef = C.CLUTTER_KEY_Arabic_maddaonalef
const CLUTTER_Kanji_Bangou = C.CLUTTER_Kanji_Bangou
const CLUTTER_Ukranian_je = C.CLUTTER_Ukranian_je
const CLUTTER_iacute = C.CLUTTER_iacute
const CLUTTER_KEY_Cyrillic_GHE_bar = C.CLUTTER_KEY_Cyrillic_GHE_bar
const CLUTTER_KEY_Ecircumflex = C.CLUTTER_KEY_Ecircumflex
const CLUTTER_KEY_ISO_Release_Margin_Right = C.CLUTTER_KEY_ISO_Release_Margin_Right
const CLUTTER_KEY_braille_dots_456 = C.CLUTTER_KEY_braille_dots_456
const CLUTTER_KEY_braille_dots_457 = C.CLUTTER_KEY_braille_dots_457
const CLUTTER_Katakana = C.CLUTTER_Katakana
const CLUTTER_FEATURE_TEXTURE_YUV = C.CLUTTER_FEATURE_TEXTURE_YUV
const CLUTTER_KEY_asciitilde = C.CLUTTER_KEY_asciitilde
const CLUTTER_KEY_Hankaku = C.CLUTTER_KEY_Hankaku
const CLUTTER_bar = C.CLUTTER_bar
const CLUTTER_KEY_Sinh_au2 = C.CLUTTER_KEY_Sinh_au2
const CLUTTER_KEY_braille_dots_458 = C.CLUTTER_KEY_braille_dots_458
const CLUTTER_KEY_kana_switch = C.CLUTTER_KEY_kana_switch
const CLUTTER_braille_dots_2456 = C.CLUTTER_braille_dots_2456
const CLUTTER_KEY_Sinh_u2 = C.CLUTTER_KEY_Sinh_u2
const CLUTTER_Pointer_Drag_Dflt = C.CLUTTER_Pointer_Drag_Dflt
const CLUTTER_Pointer_DownLeft = C.CLUTTER_Pointer_DownLeft
const CLUTTER_ocircumflex = C.CLUTTER_ocircumflex
const CLUTTER_KEY_dead_I = C.CLUTTER_KEY_dead_I
const CLUTTER_Greek_lamda = C.CLUTTER_Greek_lamda
const CLUTTER_KEY_OfficeHome = C.CLUTTER_KEY_OfficeHome
const CLUTTER_KEY_3270_ChangeScreen = C.CLUTTER_KEY_3270_ChangeScreen
const CLUTTER_Armenian_shesht = C.CLUTTER_Armenian_shesht
const CLUTTER_Hangul_WI = C.CLUTTER_Hangul_WI
const CLUTTER_ModeLock = C.CLUTTER_ModeLock
const CLUTTER_KEY_numerosign = C.CLUTTER_KEY_numerosign
const CLUTTER_KEY_numbersign = C.CLUTTER_KEY_numbersign
const CLUTTER_Hangul_WA = C.CLUTTER_Hangul_WA
const CLUTTER_Cyrillic_u = C.CLUTTER_Cyrillic_u
const CLUTTER_Armenian_yech = C.CLUTTER_Armenian_yech
const CLUTTER_Hangul_WE = C.CLUTTER_Hangul_WE
const CLUTTER_Cyrillic_U_macron = C.CLUTTER_Cyrillic_U_macron
const CLUTTER_idiaeresis = C.CLUTTER_idiaeresis
const CLUTTER_Cyrillic_o = C.CLUTTER_Cyrillic_o
const CLUTTER_sevensubscript = C.CLUTTER_sevensubscript
const CLUTTER_kana_i = C.CLUTTER_kana_i
const CLUTTER_KEY_braille_dots_148 = C.CLUTTER_KEY_braille_dots_148
const CLUTTER_3270_KeyClick = C.CLUTTER_3270_KeyClick
const CLUTTER_Cyrillic_i = C.CLUTTER_Cyrillic_i
const CLUTTER_KEY_braille_dots_145 = C.CLUTTER_KEY_braille_dots_145
const CLUTTER_KEY_Armenian_amanak = C.CLUTTER_KEY_Armenian_amanak
const CLUTTER_Cyrillic_e = C.CLUTTER_Cyrillic_e
const CLUTTER_abovedot = C.CLUTTER_abovedot
const CLUTTER_Cyrillic_a = C.CLUTTER_Cyrillic_a
const CLUTTER_KEY_Memo = C.CLUTTER_KEY_Memo
const CLUTTER_KEY_abrevegrave = C.CLUTTER_KEY_abrevegrave
const CLUTTER_BUTTON5_MASK = C.CLUTTER_BUTTON5_MASK
const CLUTTER_KEY_threefifths = C.CLUTTER_KEY_threefifths
const CLUTTER_KEY_Hangul_J_PieubSios = C.CLUTTER_KEY_Hangul_J_PieubSios
const CLUTTER_KEY_acircumflextilde = C.CLUTTER_KEY_acircumflextilde
const CLUTTER_Cyrillic_U = C.CLUTTER_Cyrillic_U
const CLUTTER_prescription = C.CLUTTER_prescription
const CLUTTER_Subtitle = C.CLUTTER_Subtitle
const CLUTTER_Up = C.CLUTTER_Up
const CLUTTER_KEY_PesetaSign = C.CLUTTER_KEY_PesetaSign
const CLUTTER_Cyrillic_O = C.CLUTTER_Cyrillic_O
const CLUTTER_KEY_filledlefttribullet = C.CLUTTER_KEY_filledlefttribullet
const CLUTTER_braille_dots_124578 = C.CLUTTER_braille_dots_124578
const CLUTTER_Cyrillic_I = C.CLUTTER_Cyrillic_I
const CLUTTER_KEY_Hangul_Ieung = C.CLUTTER_KEY_Hangul_Ieung
const CLUTTER_Cyrillic_E = C.CLUTTER_Cyrillic_E
const CLUTTER_KEY_Hangul_J_RieulKiyeog = C.CLUTTER_KEY_Hangul_J_RieulKiyeog
const CLUTTER_KEY_Dabovedot = C.CLUTTER_KEY_Dabovedot
const CLUTTER_seveneighths = C.CLUTTER_seveneighths
const CLUTTER_kana_KA = C.CLUTTER_kana_KA
const CLUTTER_KEY_Henkan = C.CLUTTER_KEY_Henkan
const CLUTTER_acircumflexhook = C.CLUTTER_acircumflexhook
const CLUTTER_KEY_h = C.CLUTTER_KEY_h
const CLUTTER_Thai_wowaen = C.CLUTTER_Thai_wowaen
const CLUTTER_quoteleft = C.CLUTTER_quoteleft
const CLUTTER_STAGE_STATE_ACTIVATED = C.CLUTTER_STAGE_STATE_ACTIVATED
const CLUTTER_KEY_Sinh_ga = C.CLUTTER_KEY_Sinh_ga
const CLUTTER_KEY_odiaeresis = C.CLUTTER_KEY_odiaeresis
const CLUTTER_Sinh_ae2 = C.CLUTTER_Sinh_ae2
const CLUTTER_braille_dots_478 = C.CLUTTER_braille_dots_478
const CLUTTER_braille_dots_1234567 = C.CLUTTER_braille_dots_1234567
const CLUTTER_EASE_OUT_BACK = C.CLUTTER_EASE_OUT_BACK
const CLUTTER_KEY_e = C.CLUTTER_KEY_e
const CLUTTER_iogonek = C.CLUTTER_iogonek
const CLUTTER_sterling = C.CLUTTER_sterling
const CLUTTER_KEY_ISO_Next_Group_Lock = C.CLUTTER_KEY_ISO_Next_Group_Lock
const CLUTTER_KEY_c = C.CLUTTER_KEY_c
const CLUTTER_ENG = C.CLUTTER_ENG
const CLUTTER_KEY_Georgian_zhar = C.CLUTTER_KEY_Georgian_zhar
const CLUTTER_exclam = C.CLUTTER_exclam
const CLUTTER_braille_dots_1358 = C.CLUTTER_braille_dots_1358
const CLUTTER_KEY_AE = C.CLUTTER_KEY_AE
const CLUTTER_ACTOR_REACTIVE = C.CLUTTER_ACTOR_REACTIVE
const CLUTTER_FEATURE_STAGE_MULTIPLE = C.CLUTTER_FEATURE_STAGE_MULTIPLE
const CLUTTER_openrectbullet = C.CLUTTER_openrectbullet
const CLUTTER_KEY_Print = C.CLUTTER_KEY_Print
const CLUTTER_Armenian_ini = C.CLUTTER_Armenian_ini
const CLUTTER_KEY_apostrophe = C.CLUTTER_KEY_apostrophe
const CLUTTER_RupeeSign = C.CLUTTER_RupeeSign
const CLUTTER_KEY_Hangul_Jamo = C.CLUTTER_KEY_Hangul_Jamo
const CLUTTER_lstroke = C.CLUTTER_lstroke
const CLUTTER_KEY_crossinglines = C.CLUTTER_KEY_crossinglines
const CLUTTER_braille_dots_1356 = C.CLUTTER_braille_dots_1356
const CLUTTER_Tcedilla = C.CLUTTER_Tcedilla
const CLUTTER_Sinh_aa = C.CLUTTER_Sinh_aa
const CLUTTER_KEY_Thai_phinthu = C.CLUTTER_KEY_Thai_phinthu
const CLUTTER_Sinh_ae = C.CLUTTER_Sinh_ae
const CLUTTER_KEY_Macedonia_dse = C.CLUTTER_KEY_Macedonia_dse
const CLUTTER_KEY_circle = C.CLUTTER_KEY_circle
const CLUTTER_Sinh_ai = C.CLUTTER_Sinh_ai
const CLUTTER_Cyrillic_YA = C.CLUTTER_Cyrillic_YA
const CLUTTER_Sinh_pha = C.CLUTTER_Sinh_pha
const CLUTTER_KEY_UserPB = C.CLUTTER_KEY_UserPB
const CLUTTER_braille_dot_2 = C.CLUTTER_braille_dot_2
const CLUTTER_KEY_Greek_TAU = C.CLUTTER_KEY_Greek_TAU
const CLUTTER_Sinh_au = C.CLUTTER_Sinh_au
const CLUTTER_braille_dots_12346 = C.CLUTTER_braille_dots_12346
const CLUTTER_KEY_topintegral = C.CLUTTER_KEY_topintegral
const CLUTTER_Cyrillic_YU = C.CLUTTER_Cyrillic_YU
const CLUTTER_KEY_Ohornbelowdot = C.CLUTTER_KEY_Ohornbelowdot
const CLUTTER_Romaji = C.CLUTTER_Romaji
const CLUTTER_braille_dots_12345 = C.CLUTTER_braille_dots_12345
const CLUTTER_KEY_WonSign = C.CLUTTER_KEY_WonSign
const CLUTTER_braille_dots_123456 = C.CLUTTER_braille_dots_123456
const CLUTTER_BIN_ALIGNMENT_END = C.CLUTTER_BIN_ALIGNMENT_END
const CLUTTER_KEY_Uogonek = C.CLUTTER_KEY_Uogonek
const CLUTTER_KEY_Georgian_hie = C.CLUTTER_KEY_Georgian_hie
const CLUTTER_abelowdot = C.CLUTTER_abelowdot
const CLUTTER_KEY_Hangul_WA = C.CLUTTER_KEY_Hangul_WA
const CLUTTER_CycleAngle = C.CLUTTER_CycleAngle
const CLUTTER_KEY_Oacute = C.CLUTTER_KEY_Oacute
const CLUTTER_KEY_udiaeresis = C.CLUTTER_KEY_udiaeresis
const CLUTTER_KEY_Overlay2_Enable = C.CLUTTER_KEY_Overlay2_Enable
const CLUTTER_kana_u = C.CLUTTER_kana_u
const CLUTTER_Hangul_J_RieulKiyeog = C.CLUTTER_Hangul_J_RieulKiyeog
const CLUTTER_Hangul_RieulMieum = C.CLUTTER_Hangul_RieulMieum
const CLUTTER_Thai_nonen = C.CLUTTER_Thai_nonen
const CLUTTER_KEY_aring = C.CLUTTER_KEY_aring
const CLUTTER_braille_dots_6 = C.CLUTTER_braille_dots_6
const CLUTTER_KEY_braille_dots_3468 = C.CLUTTER_KEY_braille_dots_3468
const CLUTTER_KEY_dead_iota = C.CLUTTER_KEY_dead_iota
const CLUTTER_Thai_moma = C.CLUTTER_Thai_moma
const CLUTTER_UNIT_POINT = C.CLUTTER_UNIT_POINT
const CLUTTER_Sinh_dha = C.CLUTTER_Sinh_dha
const CLUTTER_Pointer_EnableKeys = C.CLUTTER_Pointer_EnableKeys
const CLUTTER_Arabic_jeh = C.CLUTTER_Arabic_jeh
const CLUTTER_Arabic_tteh = C.CLUTTER_Arabic_tteh
const CLUTTER_intersection = C.CLUTTER_intersection
const CLUTTER_tintegral = C.CLUTTER_tintegral
const CLUTTER_Ocircumflexbelowdot = C.CLUTTER_Ocircumflexbelowdot
const CLUTTER_KEY_KP_Multiply = C.CLUTTER_KEY_KP_Multiply
const CLUTTER_KEY_Armenian_paruyk = C.CLUTTER_KEY_Armenian_paruyk
const CLUTTER_KEY_braille_dots_7 = C.CLUTTER_KEY_braille_dots_7
const CLUTTER_KEY_ncaron = C.CLUTTER_KEY_ncaron
const CLUTTER_KEY_Pointer_Up = C.CLUTTER_KEY_Pointer_Up
const CLUTTER_Armenian_separation_mark = C.CLUTTER_Armenian_separation_mark
const CLUTTER_KEY_Etilde = C.CLUTTER_KEY_Etilde
const CLUTTER_KEY_opentribulletdown = C.CLUTTER_KEY_opentribulletdown
const CLUTTER_KEY_rightt = C.CLUTTER_KEY_rightt
const CLUTTER_L7 = C.CLUTTER_L7
const CLUTTER_KEY_braille_dots_5 = C.CLUTTER_KEY_braille_dots_5
const CLUTTER_EASE_OUT_BOUNCE = C.CLUTTER_EASE_OUT_BOUNCE
const CLUTTER_KEY_Cyrillic_che = C.CLUTTER_KEY_Cyrillic_che
const CLUTTER_Switch_VT_12 = C.CLUTTER_Switch_VT_12
const CLUTTER_KEY_hebrew_finalzadi = C.CLUTTER_KEY_hebrew_finalzadi
const CLUTTER_braceright = C.CLUTTER_braceright
const CLUTTER_KEY_hebrew_finalzade = C.CLUTTER_KEY_hebrew_finalzade
const CLUTTER_MonBrightnessUp = C.CLUTTER_MonBrightnessUp
const CLUTTER_KEY_dead_acute = C.CLUTTER_KEY_dead_acute
const CLUTTER_Hangul_AE = C.CLUTTER_Hangul_AE
const CLUTTER_KEY_Armenian_cha = C.CLUTTER_KEY_Armenian_cha
const CLUTTER_KEY_ocircumflexgrave = C.CLUTTER_KEY_ocircumflexgrave
const CLUTTER_Standby = C.CLUTTER_Standby
const CLUTTER_KEY_squareroot = C.CLUTTER_KEY_squareroot
const CLUTTER_KEY_Lacute = C.CLUTTER_KEY_Lacute
const CLUTTER_cuberoot = C.CLUTTER_cuberoot
const CLUTTER_decimalpoint = C.CLUTTER_decimalpoint
const CLUTTER_foursubscript = C.CLUTTER_foursubscript
const CLUTTER_KEY_braille_dots_1 = C.CLUTTER_KEY_braille_dots_1
const CLUTTER_KEY_Hangul_J_Nieun = C.CLUTTER_KEY_Hangul_J_Nieun
const CLUTTER_Serbian_je = C.CLUTTER_Serbian_je
const CLUTTER_KEY_Tools = C.CLUTTER_KEY_Tools
const CLUTTER_F21 = C.CLUTTER_F21
const CLUTTER_F20 = C.CLUTTER_F20
const CLUTTER_F23 = C.CLUTTER_F23
const CLUTTER_F22 = C.CLUTTER_F22
const CLUTTER_F25 = C.CLUTTER_F25
const CLUTTER_F24 = C.CLUTTER_F24
const CLUTTER_F27 = C.CLUTTER_F27
const CLUTTER_F26 = C.CLUTTER_F26
const CLUTTER_F29 = C.CLUTTER_F29
const CLUTTER_F28 = C.CLUTTER_F28
const CLUTTER_SCROLL_BOTH = C.CLUTTER_SCROLL_BOTH
const CLUTTER_KEY_Ukrainian_I = C.CLUTTER_KEY_Ukrainian_I
const CLUTTER_KEY_kana_SHI = C.CLUTTER_KEY_kana_SHI
const CLUTTER_KEY_Hangul_J_Rieul = C.CLUTTER_KEY_Hangul_J_Rieul
const CLUTTER_circle = C.CLUTTER_circle
const CLUTTER_KEY_Yhook = C.CLUTTER_KEY_Yhook
const CLUTTER_KEY_Arabic_semicolon = C.CLUTTER_KEY_Arabic_semicolon
const CLUTTER_LightBulb = C.CLUTTER_LightBulb
const CLUTTER_KEY_Thai_topatak = C.CLUTTER_KEY_Thai_topatak
const CLUTTER_dead_belowtilde = C.CLUTTER_dead_belowtilde
const CLUTTER_KEY_elementof = C.CLUTTER_KEY_elementof
const CLUTTER_threefifths = C.CLUTTER_threefifths
const CLUTTER_braille_dots_24 = C.CLUTTER_braille_dots_24
const CLUTTER_KEY_dead_dasia = C.CLUTTER_KEY_dead_dasia
const CLUTTER_KEY_quoteright = C.CLUTTER_KEY_quoteright
const CLUTTER_kana_RU = C.CLUTTER_kana_RU
const CLUTTER_braille_dots_56 = C.CLUTTER_braille_dots_56
const CLUTTER_scaron = C.CLUTTER_scaron
const CLUTTER_KEY_Ukrainian_i = C.CLUTTER_KEY_Ukrainian_i
const CLUTTER_Community = C.CLUTTER_Community
const CLUTTER_percent = C.CLUTTER_percent
const CLUTTER_KEY_Sinh_thha = C.CLUTTER_KEY_Sinh_thha
const CLUTTER_KEY_Armenian_yech = C.CLUTTER_KEY_Armenian_yech
const CLUTTER_Armenian_ayb = C.CLUTTER_Armenian_ayb
const CLUTTER_KEY_leftsinglequotemark = C.CLUTTER_KEY_leftsinglequotemark
const CLUTTER_KEY_Sinh_pha = C.CLUTTER_KEY_Sinh_pha
const CLUTTER_guillemotright = C.CLUTTER_guillemotright
const CLUTTER_KEY_Cyrillic_KA_descender = C.CLUTTER_KEY_Cyrillic_KA_descender
const CLUTTER_ScreenSaver = C.CLUTTER_ScreenSaver
const CLUTTER_KEY_Armenian_shesht = C.CLUTTER_KEY_Armenian_shesht
const CLUTTER_KEY_LogOff = C.CLUTTER_KEY_LogOff
const CLUTTER_KEY_Cyrillic_u = C.CLUTTER_KEY_Cyrillic_u
const CLUTTER_asciitilde = C.CLUTTER_asciitilde
const CLUTTER_KEY_Korean_Won = C.CLUTTER_KEY_Korean_Won
const CLUTTER_cabovedot = C.CLUTTER_cabovedot
const CLUTTER_KEY_Cyrillic_i = C.CLUTTER_KEY_Cyrillic_i
const CLUTTER_KEY_Cyrillic_o = C.CLUTTER_KEY_Cyrillic_o
const CLUTTER_WLAN = C.CLUTTER_WLAN
const CLUTTER_KEY_Cyrillic_a = C.CLUTTER_KEY_Cyrillic_a
const CLUTTER_KEY_Cyrillic_e = C.CLUTTER_KEY_Cyrillic_e
const CLUTTER_Arabic_veh = C.CLUTTER_Arabic_veh
const CLUTTER_Arabic_theh = C.CLUTTER_Arabic_theh
const CLUTTER_KEY_RELEASE = C.CLUTTER_KEY_RELEASE
const CLUTTER_KEY_hebrew_nun = C.CLUTTER_KEY_hebrew_nun
const CLUTTER_KEY_Arabic_sheen = C.CLUTTER_KEY_Arabic_sheen
const CLUTTER_MyComputer = C.CLUTTER_MyComputer
const CLUTTER_KEY_leftmiddlecurlybrace = C.CLUTTER_KEY_leftmiddlecurlybrace
const CLUTTER_Cyrillic_KA = C.CLUTTER_Cyrillic_KA
const CLUTTER_KEY_emspace = C.CLUTTER_KEY_emspace
const CLUTTER_upcaret = C.CLUTTER_upcaret
const CLUTTER_KEY_Cyrillic_U = C.CLUTTER_KEY_Cyrillic_U
const CLUTTER_Ccircumflex = C.CLUTTER_Ccircumflex
const CLUTTER_braille_dots_78 = C.CLUTTER_braille_dots_78
const CLUTTER_COLOR_CHOCOLATE_DARK = C.CLUTTER_COLOR_CHOCOLATE_DARK
const CLUTTER_KEY_Cyrillic_I = C.CLUTTER_KEY_Cyrillic_I
const CLUTTER_KEY_Cyrillic_O = C.CLUTTER_KEY_Cyrillic_O
const CLUTTER_MOD2_MASK = C.CLUTTER_MOD2_MASK
const CLUTTER_PATH_LINE_TO = C.CLUTTER_PATH_LINE_TO
const CLUTTER_Ocircumflex = C.CLUTTER_Ocircumflex
const CLUTTER_KEY_Cyrillic_A = C.CLUTTER_KEY_Cyrillic_A
const CLUTTER_agrave = C.CLUTTER_agrave
const CLUTTER_braille_dots_3467 = C.CLUTTER_braille_dots_3467
const CLUTTER_KEY_Cyrillic_E = C.CLUTTER_KEY_Cyrillic_E
const CLUTTER_KEY_Arabic_dad = C.CLUTTER_KEY_Arabic_dad
const CLUTTER_cr = C.CLUTTER_cr
const CLUTTER_KEY_variation = C.CLUTTER_KEY_variation
const CLUTTER_Cyrillic_SOFTSIGN = C.CLUTTER_Cyrillic_SOFTSIGN
const CLUTTER_KEY_Sinh_aa2 = C.CLUTTER_KEY_Sinh_aa2
const CLUTTER_KEY_Arabic_dal = C.CLUTTER_KEY_Arabic_dal
const CLUTTER_KEY_Acircumflexacute = C.CLUTTER_KEY_Acircumflexacute
const CLUTTER_onehalf = C.CLUTTER_onehalf
const CLUTTER_KEY_F32 = C.CLUTTER_KEY_F32
const CLUTTER_KEY_F33 = C.CLUTTER_KEY_F33
const CLUTTER_KEY_F30 = C.CLUTTER_KEY_F30
const CLUTTER_KEY_F31 = C.CLUTTER_KEY_F31
const CLUTTER_KEY_F34 = C.CLUTTER_KEY_F34
const CLUTTER_KEY_F35 = C.CLUTTER_KEY_F35
const CLUTTER_DRAG_X_AXIS = C.CLUTTER_DRAG_X_AXIS
const CLUTTER_phonographcopyright = C.CLUTTER_phonographcopyright
const CLUTTER_dead_belowdiaeresis = C.CLUTTER_dead_belowdiaeresis
const CLUTTER_KEY_Save = C.CLUTTER_KEY_Save
const CLUTTER_PAN_Y_AXIS = C.CLUTTER_PAN_Y_AXIS
const CLUTTER_ColonSign = C.CLUTTER_ColonSign
const CLUTTER_KEY_Hangul = C.CLUTTER_KEY_Hangul
const CLUTTER_uring = C.CLUTTER_uring
const CLUTTER_KEY_obarred = C.CLUTTER_KEY_obarred
const CLUTTER_KEY_braille_dots_12678 = C.CLUTTER_KEY_braille_dots_12678
const CLUTTER_KEY_3270_Rule = C.CLUTTER_KEY_3270_Rule
const CLUTTER_Cyrillic_ghe = C.CLUTTER_Cyrillic_ghe
const CLUTTER_Hangul_RieulPieub = C.CLUTTER_Hangul_RieulPieub
const CLUTTER_3270_CursorBlink = C.CLUTTER_3270_CursorBlink
const CLUTTER_ibelowdot = C.CLUTTER_ibelowdot
const CLUTTER_KEY_lf = C.CLUTTER_KEY_lf
const CLUTTER_MINOR_VERSION = C.CLUTTER_MINOR_VERSION
const CLUTTER_braille_dots_12356 = C.CLUTTER_braille_dots_12356
const CLUTTER_braille_dots_48 = C.CLUTTER_braille_dots_48
const CLUTTER_KEY_kana_fullstop = C.CLUTTER_KEY_kana_fullstop
const CLUTTER_KEY_Greek_OMICRONaccent = C.CLUTTER_KEY_Greek_OMICRONaccent
const CLUTTER_KEY_onethird = C.CLUTTER_KEY_onethird
const CLUTTER_KEY_guillemotright = C.CLUTTER_KEY_guillemotright
const CLUTTER_KEY_PowerDown = C.CLUTTER_KEY_PowerDown
const CLUTTER_KEY_braille_dots_24568 = C.CLUTTER_KEY_braille_dots_24568
const CLUTTER_KEY_Thai_lochula = C.CLUTTER_KEY_Thai_lochula
const CLUTTER_enfilledcircbullet = C.CLUTTER_enfilledcircbullet
const CLUTTER_COLOR_MAGENTA = C.CLUTTER_COLOR_MAGENTA
const CLUTTER_WheelButton = C.CLUTTER_WheelButton
const CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY = C.CLUTTER_OFFSCREEN_REDIRECT_AUTOMATIC_FOR_OPACITY
const CLUTTER_fourthroot = C.CLUTTER_fourthroot
const CLUTTER_Etilde = C.CLUTTER_Etilde
const CLUTTER_braille_dots_13478 = C.CLUTTER_braille_dots_13478
const CLUTTER_Pointer_DblClick2 = C.CLUTTER_Pointer_DblClick2
const CLUTTER_braille_dots_12678 = C.CLUTTER_braille_dots_12678
const CLUTTER_KEY_ubreve = C.CLUTTER_KEY_ubreve
const CLUTTER_KEY_Arabic_hamzaunderalef = C.CLUTTER_KEY_Arabic_hamzaunderalef
const CLUTTER_EASE_OUT = C.CLUTTER_EASE_OUT
const CLUTTER_KEY_dead_breve = C.CLUTTER_KEY_dead_breve
const CLUTTER_Iacute = C.CLUTTER_Iacute
const CLUTTER_EASE_IN = C.CLUTTER_EASE_IN
const CLUTTER_latincross = C.CLUTTER_latincross
const CLUTTER_Super_R = C.CLUTTER_Super_R
const CLUTTER_topt = C.CLUTTER_topt
const CLUTTER_Aogonek = C.CLUTTER_Aogonek
const CLUTTER_KEY_braille_dots_12457 = C.CLUTTER_KEY_braille_dots_12457
const CLUTTER_KEY_braille_dots_12456 = C.CLUTTER_KEY_braille_dots_12456
const CLUTTER_Cyrillic_ZHE = C.CLUTTER_Cyrillic_ZHE
const CLUTTER_braille_dots_23478 = C.CLUTTER_braille_dots_23478
const CLUTTER_Emacron = C.CLUTTER_Emacron
const CLUTTER_Ncedilla = C.CLUTTER_Ncedilla
const CLUTTER_INIT_SUCCESS = C.CLUTTER_INIT_SUCCESS
const CLUTTER_KEY_Sinh_nna = C.CLUTTER_KEY_Sinh_nna
const CLUTTER_Super_L = C.CLUTTER_Super_L
const CLUTTER_Arabic_shadda = C.CLUTTER_Arabic_shadda
const CLUTTER_SCRIPT_ERROR_INVALID_PROPERTY = C.CLUTTER_SCRIPT_ERROR_INVALID_PROPERTY
const CLUTTER_REQUEST_WIDTH_FOR_HEIGHT = C.CLUTTER_REQUEST_WIDTH_FOR_HEIGHT
const CLUTTER_Arabic_hamza = C.CLUTTER_Arabic_hamza
const CLUTTER_INIT_ERROR_BACKEND = C.CLUTTER_INIT_ERROR_BACKEND
const CLUTTER_CONTROL_MASK = C.CLUTTER_CONTROL_MASK
const CLUTTER_KEY_braille_dots_124678 = C.CLUTTER_KEY_braille_dots_124678
const CLUTTER_Arabic_dammatan = C.CLUTTER_Arabic_dammatan
const CLUTTER_braille_dots_24567 = C.CLUTTER_braille_dots_24567
const CLUTTER_Uhook = C.CLUTTER_Uhook
const CLUTTER_KEY_twosubscript = C.CLUTTER_KEY_twosubscript
const CLUTTER_Hangul_J_Mieum = C.CLUTTER_Hangul_J_Mieum
const CLUTTER_KEY_dead_abovedot = C.CLUTTER_KEY_dead_abovedot
const CLUTTER_Hangul_J_NieunHieuh = C.CLUTTER_Hangul_J_NieunHieuh
const CLUTTER_KEY_Cyrillic_BE = C.CLUTTER_KEY_Cyrillic_BE
const CLUTTER_KEY_braille_dots_4578 = C.CLUTTER_KEY_braille_dots_4578
const CLUTTER_CONTENT_GRAVITY_RESIZE_ASPECT = C.CLUTTER_CONTENT_GRAVITY_RESIZE_ASPECT
const CLUTTER_UNIT_EM = C.CLUTTER_UNIT_EM
const CLUTTER_kana_TI = C.CLUTTER_kana_TI
const CLUTTER_KEY_Hangul_J_Ieung = C.CLUTTER_KEY_Hangul_J_Ieung
const CLUTTER_Arabic_tah = C.CLUTTER_Arabic_tah
const CLUTTER_KEY_Sinh_fa = C.CLUTTER_KEY_Sinh_fa
const CLUTTER_Undo = C.CLUTTER_Undo
const CLUTTER_KEY_HomePage = C.CLUTTER_KEY_HomePage
const CLUTTER_Ukranian_YI = C.CLUTTER_Ukranian_YI
const CLUTTER_BOX_ALIGNMENT_END = C.CLUTTER_BOX_ALIGNMENT_END
const CLUTTER_Tslash = C.CLUTTER_Tslash
const CLUTTER_KEY_Georgian_cil = C.CLUTTER_KEY_Georgian_cil
const CLUTTER_braille_dots_12457 = C.CLUTTER_braille_dots_12457
const CLUTTER_KEY_Num_Lock = C.CLUTTER_KEY_Num_Lock
const CLUTTER_ToDoList = C.CLUTTER_ToDoList
const CLUTTER_BUTTON4_MASK = C.CLUTTER_BUTTON4_MASK
const CLUTTER_KEY_Emacron = C.CLUTTER_KEY_Emacron
const CLUTTER_KEY_braille_dots_167 = C.CLUTTER_KEY_braille_dots_167
const CLUTTER_KEY_because = C.CLUTTER_KEY_because
const CLUTTER_Thai_popla = C.CLUTTER_Thai_popla
const CLUTTER_Thai_thonangmontho = C.CLUTTER_Thai_thonangmontho
const CLUTTER_EASE_IN_SINE = C.CLUTTER_EASE_IN_SINE
const CLUTTER_kra = C.CLUTTER_kra
const CLUTTER_Cyrillic_KA_descender = C.CLUTTER_Cyrillic_KA_descender
const CLUTTER_KEY_Lcedilla = C.CLUTTER_KEY_Lcedilla
const CLUTTER_braille_dots_1568 = C.CLUTTER_braille_dots_1568
const CLUTTER_Ibelowdot = C.CLUTTER_Ibelowdot
const CLUTTER_KEY_F2 = C.CLUTTER_KEY_F2
const CLUTTER_KEY_F3 = C.CLUTTER_KEY_F3
const CLUTTER_KEY_F1 = C.CLUTTER_KEY_F1
const CLUTTER_KEY_F6 = C.CLUTTER_KEY_F6
const CLUTTER_KEY_F7 = C.CLUTTER_KEY_F7
const CLUTTER_KEY_F4 = C.CLUTTER_KEY_F4
const CLUTTER_KEY_F5 = C.CLUTTER_KEY_F5
const CLUTTER_KEY_F8 = C.CLUTTER_KEY_F8
const CLUTTER_KEY_F9 = C.CLUTTER_KEY_F9
const CLUTTER_KEY_braille_dots_3678 = C.CLUTTER_KEY_braille_dots_3678
const CLUTTER_braille_dots_12357 = C.CLUTTER_braille_dots_12357
const CLUTTER_PesetaSign = C.CLUTTER_PesetaSign
const CLUTTER_KEY_Cyrillic_KA = C.CLUTTER_KEY_Cyrillic_KA
const CLUTTER_KEY_includes = C.CLUTTER_KEY_includes
const CLUTTER_Armenian_apostrophe = C.CLUTTER_Armenian_apostrophe
const CLUTTER_KEY_braille_dots_158 = C.CLUTTER_KEY_braille_dots_158
const CLUTTER_KEY_braille_dots_157 = C.CLUTTER_KEY_braille_dots_157
const CLUTTER_KEY_braille_dots_156 = C.CLUTTER_KEY_braille_dots_156
const CLUTTER_KEY_Serbian_DJE = C.CLUTTER_KEY_Serbian_DJE
const CLUTTER_KEY_Caps_Lock = C.CLUTTER_KEY_Caps_Lock
const CLUTTER_KEY_Zenkaku = C.CLUTTER_KEY_Zenkaku
const CLUTTER_therefore = C.CLUTTER_therefore
const CLUTTER_KEY_Hangul_Start = C.CLUTTER_KEY_Hangul_Start
const CLUTTER_KEY_braille_dots_2457 = C.CLUTTER_KEY_braille_dots_2457
const CLUTTER_KEY_dead_belowbreve = C.CLUTTER_KEY_dead_belowbreve
const CLUTTER_braille_dots_23467 = C.CLUTTER_braille_dots_23467
const CLUTTER_KEY_Hangul_Codeinput = C.CLUTTER_KEY_Hangul_Codeinput
const CLUTTER_KP_Down = C.CLUTTER_KP_Down
const CLUTTER_KEY_oslash = C.CLUTTER_KEY_oslash
const CLUTTER_Bluetooth = C.CLUTTER_Bluetooth
const CLUTTER_Zstroke = C.CLUTTER_Zstroke
const CLUTTER_KEY_CruzeiroSign = C.CLUTTER_KEY_CruzeiroSign
const CLUTTER_Hangul_PieubSios = C.CLUTTER_Hangul_PieubSios
const CLUTTER_Cyrillic_en_descender = C.CLUTTER_Cyrillic_en_descender
const CLUTTER_uhorngrave = C.CLUTTER_uhorngrave
const CLUTTER_Away = C.CLUTTER_Away
const CLUTTER_braille_dots_124568 = C.CLUTTER_braille_dots_124568
const CLUTTER_Greek_omicron = C.CLUTTER_Greek_omicron
const CLUTTER_Greek_ALPHAaccent = C.CLUTTER_Greek_ALPHAaccent
const CLUTTER_rightcaret = C.CLUTTER_rightcaret
const CLUTTER_Cyrillic_u_straight_bar = C.CLUTTER_Cyrillic_u_straight_bar
const CLUTTER_Ydiaeresis = C.CLUTTER_Ydiaeresis
const CLUTTER_AudibleBell_Enable = C.CLUTTER_AudibleBell_Enable
const CLUTTER_Y = C.CLUTTER_Y
const CLUTTER_X = C.CLUTTER_X
const CLUTTER_Armenian_DA = C.CLUTTER_Armenian_DA
const CLUTTER_Cyrillic_U_straight = C.CLUTTER_Cyrillic_U_straight
const CLUTTER_REPEAT_NONE = C.CLUTTER_REPEAT_NONE
const CLUTTER_S = C.CLUTTER_S
const CLUTTER_Georgian_un = C.CLUTTER_Georgian_un
const CLUTTER_Q = C.CLUTTER_Q
const CLUTTER_KEY_Greek_OMICRON = C.CLUTTER_KEY_Greek_OMICRON
const CLUTTER_W = C.CLUTTER_W
const CLUTTER_V = C.CLUTTER_V
const CLUTTER_U = C.CLUTTER_U
const CLUTTER_T = C.CLUTTER_T
const CLUTTER_K = C.CLUTTER_K
const CLUTTER_J = C.CLUTTER_J
const CLUTTER_I = C.CLUTTER_I
const CLUTTER_H = C.CLUTTER_H
const CLUTTER_O = C.CLUTTER_O
const CLUTTER_N = C.CLUTTER_N
const CLUTTER_M = C.CLUTTER_M
const CLUTTER_Greek_LAMDA = C.CLUTTER_Greek_LAMDA
const CLUTTER_Gcaron = C.CLUTTER_Gcaron
const CLUTTER_B = C.CLUTTER_B
const CLUTTER_A = C.CLUTTER_A
const CLUTTER_G = C.CLUTTER_G
const CLUTTER_F = C.CLUTTER_F
const CLUTTER_E = C.CLUTTER_E
const CLUTTER_D = C.CLUTTER_D
const CLUTTER_Hangul_SsangPieub = C.CLUTTER_Hangul_SsangPieub
const CLUTTER_z = C.CLUTTER_z
const CLUTTER_y = C.CLUTTER_y
const CLUTTER_KEY_RupeeSign = C.CLUTTER_KEY_RupeeSign
const CLUTTER_Acircumflexgrave = C.CLUTTER_Acircumflexgrave
const CLUTTER_s = C.CLUTTER_s
const CLUTTER_KEY_Massyo = C.CLUTTER_KEY_Massyo
const CLUTTER_Armenian_tsa = C.CLUTTER_Armenian_tsa
const CLUTTER_p = C.CLUTTER_p
const CLUTTER_KEY_Armenian_SHA = C.CLUTTER_KEY_Armenian_SHA
const CLUTTER_v = C.CLUTTER_v
const CLUTTER_braille_dots_12368 = C.CLUTTER_braille_dots_12368
const CLUTTER_t = C.CLUTTER_t
const CLUTTER_k = C.CLUTTER_k
const CLUTTER_j = C.CLUTTER_j
const CLUTTER_braille_dots_1348 = C.CLUTTER_braille_dots_1348
const CLUTTER_h = C.CLUTTER_h
const CLUTTER_o = C.CLUTTER_o
const CLUTTER_KEY_Hangul_RieulSios = C.CLUTTER_KEY_Hangul_RieulSios
const CLUTTER_m = C.CLUTTER_m
const CLUTTER_Sinh_va = C.CLUTTER_Sinh_va
const CLUTTER_KEY_Greek_ALPHA = C.CLUTTER_KEY_Greek_ALPHA
const CLUTTER_b = C.CLUTTER_b
const CLUTTER_a = C.CLUTTER_a
const CLUTTER_KEY_braille_dots_2458 = C.CLUTTER_KEY_braille_dots_2458
const CLUTTER_braille_dots_1346 = C.CLUTTER_braille_dots_1346
const CLUTTER_Documents = C.CLUTTER_Documents
const CLUTTER_Hangul_J_Pieub = C.CLUTTER_Hangul_J_Pieub
const CLUTTER_braille_dots_1345 = C.CLUTTER_braille_dots_1345
const CLUTTER_KEY_cent = C.CLUTTER_KEY_cent
const CLUTTER_emdash = C.CLUTTER_emdash
const CLUTTER_Uhornhook = C.CLUTTER_Uhornhook
const CLUTTER_Ycircumflex = C.CLUTTER_Ycircumflex
const CLUTTER_Close = C.CLUTTER_Close
const CLUTTER_KEY_kana_TSU = C.CLUTTER_KEY_kana_TSU
const CLUTTER_SCROLL_LEFT = C.CLUTTER_SCROLL_LEFT
const CLUTTER_KEY_Georgian_un = C.CLUTTER_KEY_Georgian_un
const CLUTTER_Hangul_Dikeud = C.CLUTTER_Hangul_Dikeud
const CLUTTER_ContrastAdjust = C.CLUTTER_ContrastAdjust
const CLUTTER_Thai_phosamphao = C.CLUTTER_Thai_phosamphao
const CLUTTER_KEY_Armenian_za = C.CLUTTER_KEY_Armenian_za
const CLUTTER_hebrew_zade = C.CLUTTER_hebrew_zade
const CLUTTER_Greek_iotaaccent = C.CLUTTER_Greek_iotaaccent
const CLUTTER_KEY_Arabic_fathatan = C.CLUTTER_KEY_Arabic_fathatan
const CLUTTER_ellipsis = C.CLUTTER_ellipsis
const CLUTTER_GRID_POSITION_TOP = C.CLUTTER_GRID_POSITION_TOP
const CLUTTER_9 = C.CLUTTER_9
const CLUTTER_8 = C.CLUTTER_8
const CLUTTER_KEY_Greek_XI = C.CLUTTER_KEY_Greek_XI
const CLUTTER_KEY_ColonSign = C.CLUTTER_KEY_ColonSign
const CLUTTER_3 = C.CLUTTER_3
const CLUTTER_2 = C.CLUTTER_2
const CLUTTER_1 = C.CLUTTER_1
const CLUTTER_0 = C.CLUTTER_0
const CLUTTER_7 = C.CLUTTER_7
const CLUTTER_6 = C.CLUTTER_6
const CLUTTER_5 = C.CLUTTER_5
const CLUTTER_4 = C.CLUTTER_4
const CLUTTER_3270_Duplicate = C.CLUTTER_3270_Duplicate
const CLUTTER_KEY_Calendar = C.CLUTTER_KEY_Calendar
const CLUTTER_ytilde = C.CLUTTER_ytilde
const CLUTTER_Left = C.CLUTTER_Left
const CLUTTER_BIND_ALL = C.CLUTTER_BIND_ALL
const CLUTTER_KEY_Documents = C.CLUTTER_KEY_Documents
const CLUTTER_braille_dots_14578 = C.CLUTTER_braille_dots_14578
const CLUTTER_KEY_MenuPB = C.CLUTTER_KEY_MenuPB
const CLUTTER_kana_FU = C.CLUTTER_kana_FU
const CLUTTER_OpenURL = C.CLUTTER_OpenURL
const CLUTTER_KEY_Hangul_End = C.CLUTTER_KEY_Hangul_End
const CLUTTER_KEY_Red = C.CLUTTER_KEY_Red
const CLUTTER_KEY_Hangul_Dikeud = C.CLUTTER_KEY_Hangul_Dikeud
const CLUTTER_KEY_udoubleacute = C.CLUTTER_KEY_udoubleacute
const CLUTTER_Arabic_yeh_baree = C.CLUTTER_Arabic_yeh_baree
const CLUTTER_Georgian_vin = C.CLUTTER_Georgian_vin
const CLUTTER_Lbelowdot = C.CLUTTER_Lbelowdot
const CLUTTER_KEY_signifblank = C.CLUTTER_KEY_signifblank
const CLUTTER_braille_dots_34 = C.CLUTTER_braille_dots_34
const CLUTTER_KEY_Arabic_tatweel = C.CLUTTER_KEY_Arabic_tatweel
const CLUTTER_braille_dots_2578 = C.CLUTTER_braille_dots_2578
const CLUTTER_uhorn = C.CLUTTER_uhorn
const CLUTTER_Arabic_switch = C.CLUTTER_Arabic_switch
const CLUTTER_KEY_Thai_lekhok = C.CLUTTER_KEY_Thai_lekhok
const CLUTTER_Hangul_J_RieulPhieuf = C.CLUTTER_Hangul_J_RieulPhieuf
const CLUTTER_EASE_IN_OUT_QUINT = C.CLUTTER_EASE_IN_OUT_QUINT
const CLUTTER_KEY_MySites = C.CLUTTER_KEY_MySites
const CLUTTER_Henkan = C.CLUTTER_Henkan
const CLUTTER_KEY_dead_belowdiaeresis = C.CLUTTER_KEY_dead_belowdiaeresis
const CLUTTER_KEY_ooblique = C.CLUTTER_KEY_ooblique
const CLUTTER_maltesecross = C.CLUTTER_maltesecross
const CLUTTER_KEY_doubbaselinedot = C.CLUTTER_KEY_doubbaselinedot
const CLUTTER_Arabic_sheen = C.CLUTTER_Arabic_sheen
const CLUTTER_KEY_oneeighth = C.CLUTTER_KEY_oneeighth
const CLUTTER_KEY_doublelowquotemark = C.CLUTTER_KEY_doublelowquotemark
const CLUTTER_Sinh_bha = C.CLUTTER_Sinh_bha
const CLUTTER_KEY_Ohornhook = C.CLUTTER_KEY_Ohornhook
const CLUTTER_Cyrillic_DE = C.CLUTTER_Cyrillic_DE
const CLUTTER_KEY_musicalflat = C.CLUTTER_KEY_musicalflat
const CLUTTER_Thorn = C.CLUTTER_Thorn
const CLUTTER_KEY_dead_circumflex = C.CLUTTER_KEY_dead_circumflex
const CLUTTER_Arabic_tehmarbuta = C.CLUTTER_Arabic_tehmarbuta
const CLUTTER_Macedonia_kje = C.CLUTTER_Macedonia_kje
const CLUTTER_KEY_Hangul_J_RieulHieuh = C.CLUTTER_KEY_Hangul_J_RieulHieuh
const CLUTTER_KEY_Thai_thophuthao = C.CLUTTER_KEY_Thai_thophuthao
const CLUTTER_KEY_Arabic_yeh = C.CLUTTER_KEY_Arabic_yeh
const CLUTTER_KEY_Sinh_au = C.CLUTTER_KEY_Sinh_au
const CLUTTER_RockerUp = C.CLUTTER_RockerUp
const CLUTTER_KEY_Armenian_khe = C.CLUTTER_KEY_Armenian_khe
const CLUTTER_KEY_Cyrillic_je = C.CLUTTER_KEY_Cyrillic_je
const CLUTTER_KEY_cursor = C.CLUTTER_KEY_cursor
const CLUTTER_KEY_Eacute = C.CLUTTER_KEY_Eacute
const CLUTTER_braille_dots_36 = C.CLUTTER_braille_dots_36
const CLUTTER_KEY_utilde = C.CLUTTER_KEY_utilde
const CLUTTER_KEY_KP_6 = C.CLUTTER_KEY_KP_6
const CLUTTER_Y_AXIS = C.CLUTTER_Y_AXIS
const CLUTTER_ntilde = C.CLUTTER_ntilde
const CLUTTER_Cancel = C.CLUTTER_Cancel
const CLUTTER_KEY_TaskPane = C.CLUTTER_KEY_TaskPane
const CLUTTER_KEY_dead_voiced_sound = C.CLUTTER_KEY_dead_voiced_sound
const CLUTTER_KEY_Arabic_ha = C.CLUTTER_KEY_Arabic_ha
const CLUTTER_KEY_Arabic_teh = C.CLUTTER_KEY_Arabic_teh
const CLUTTER_F35 = C.CLUTTER_F35
const CLUTTER_F32 = C.CLUTTER_F32
const CLUTTER_F33 = C.CLUTTER_F33
const CLUTTER_F30 = C.CLUTTER_F30
const CLUTTER_F31 = C.CLUTTER_F31
const CLUTTER_KEY_KP_Add = C.CLUTTER_KEY_KP_Add
const CLUTTER_braille_dot_3 = C.CLUTTER_braille_dot_3
const CLUTTER_STAGE_STATE_FULLSCREEN = C.CLUTTER_STAGE_STATE_FULLSCREEN
const CLUTTER_KEY_Ibelowdot = C.CLUTTER_KEY_Ibelowdot
const CLUTTER_Thai_sarai = C.CLUTTER_Thai_sarai
const CLUTTER_KEY_lbelowdot = C.CLUTTER_KEY_lbelowdot
const CLUTTER_KEY_AudioPlay = C.CLUTTER_KEY_AudioPlay
const CLUTTER_KEY_omacron = C.CLUTTER_KEY_omacron
const CLUTTER_KEY_Thai_dochada = C.CLUTTER_KEY_Thai_dochada
const CLUTTER_Tools = C.CLUTTER_Tools
const CLUTTER_KEY_eogonek = C.CLUTTER_KEY_eogonek
const CLUTTER_KEY_rightcaret = C.CLUTTER_KEY_rightcaret
const CLUTTER_Cyrillic_ZE = C.CLUTTER_Cyrillic_ZE
const CLUTTER_Armenian_ZHE = C.CLUTTER_Armenian_ZHE
const CLUTTER_Armenian_RE = C.CLUTTER_Armenian_RE
const CLUTTER_KEY_mu = C.CLUTTER_KEY_mu
const CLUTTER_Armenian_RA = C.CLUTTER_Armenian_RA
const CLUTTER_singlelowquotemark = C.CLUTTER_singlelowquotemark
const CLUTTER_rightmiddlesummation = C.CLUTTER_rightmiddlesummation
const CLUTTER_KEY_Armenian_vev = C.CLUTTER_KEY_Armenian_vev
const CLUTTER_AudioNext = C.CLUTTER_AudioNext
const CLUTTER_COLOR_DARK_RED = C.CLUTTER_COLOR_DARK_RED
const CLUTTER_KEY_AudioLowerVolume = C.CLUTTER_KEY_AudioLowerVolume
const CLUTTER_braille_dots_68 = C.CLUTTER_braille_dots_68
const CLUTTER_Thai_lochula = C.CLUTTER_Thai_lochula
const CLUTTER_KEY_Hangul_J_Cieuc = C.CLUTTER_KEY_Hangul_J_Cieuc
const CLUTTER_REQUEST_HEIGHT_FOR_WIDTH = C.CLUTTER_REQUEST_HEIGHT_FOR_WIDTH
const CLUTTER_Thai_chochang = C.CLUTTER_Thai_chochang
const CLUTTER_filledrectbullet = C.CLUTTER_filledrectbullet
const CLUTTER_KEY_questiondown = C.CLUTTER_KEY_questiondown
const CLUTTER_COLOR_YELLOW = C.CLUTTER_COLOR_YELLOW
const CLUTTER_ACTOR_ALIGN_FILL = C.CLUTTER_ACTOR_ALIGN_FILL
const CLUTTER_KEY_downtack = C.CLUTTER_KEY_downtack
const CLUTTER_Ohornhook = C.CLUTTER_Ohornhook
const CLUTTER_Cyrillic_u_macron = C.CLUTTER_Cyrillic_u_macron
const CLUTTER_kana_I = C.CLUTTER_kana_I
const CLUTTER_CONTENT_GRAVITY_RIGHT = C.CLUTTER_CONTENT_GRAVITY_RIGHT
const CLUTTER_ecircumflexgrave = C.CLUTTER_ecircumflexgrave
const CLUTTER_KEY_Uhornbelowdot = C.CLUTTER_KEY_Uhornbelowdot
const CLUTTER_Pointer_DblClick_Dflt = C.CLUTTER_Pointer_DblClick_Dflt
const CLUTTER_KEY_Armenian_AT = C.CLUTTER_KEY_Armenian_AT
const CLUTTER_KEY_Cyrillic_I_macron = C.CLUTTER_KEY_Cyrillic_I_macron
const CLUTTER_KEY_scaron = C.CLUTTER_KEY_scaron
const CLUTTER_Touroku = C.CLUTTER_Touroku
const CLUTTER_braille_dots_1578 = C.CLUTTER_braille_dots_1578
const CLUTTER_KEY_Down = C.CLUTTER_KEY_Down
const CLUTTER_Greek_ZETA = C.CLUTTER_Greek_ZETA
const CLUTTER_KEY_Tab = C.CLUTTER_KEY_Tab
const CLUTTER_KEY_Go = C.CLUTTER_KEY_Go
const CLUTTER_ae = C.CLUTTER_ae
const CLUTTER_KEY_Sinh_la = C.CLUTTER_KEY_Sinh_la
const CLUTTER_Cyrillic_ve = C.CLUTTER_Cyrillic_ve
const CLUTTER_KEY_overbar = C.CLUTTER_KEY_overbar
const CLUTTER_KEY_Hangul_Rieul = C.CLUTTER_KEY_Hangul_Rieul
const CLUTTER_downarrow = C.CLUTTER_downarrow
const CLUTTER_KEY_Cyrillic_U_straight = C.CLUTTER_KEY_Cyrillic_U_straight
const CLUTTER_KEY_partdifferential = C.CLUTTER_KEY_partdifferential
const CLUTTER_hebrew_lamed = C.CLUTTER_hebrew_lamed
const CLUTTER_KEY_approxeq = C.CLUTTER_KEY_approxeq
const CLUTTER_COLOR_DARK_BLUE = C.CLUTTER_COLOR_DARK_BLUE
const CLUTTER_KEY_braille_dots_13467 = C.CLUTTER_KEY_braille_dots_13467
const CLUTTER_KEY_Cyrillic_i_macron = C.CLUTTER_KEY_Cyrillic_i_macron
const CLUTTER_KEY_braille_dots_13468 = C.CLUTTER_KEY_braille_dots_13468
const CLUTTER_Pointer_DfltBtnNext = C.CLUTTER_Pointer_DfltBtnNext
const CLUTTER_ahook = C.CLUTTER_ahook
const CLUTTER_Amacron = C.CLUTTER_Amacron
const CLUTTER_ANIMATION_LAST = C.CLUTTER_ANIMATION_LAST
const CLUTTER_ISO_Set_Margin_Left = C.CLUTTER_ISO_Set_Margin_Left
const CLUTTER_hebrew_daleth = C.CLUTTER_hebrew_daleth
const CLUTTER_Open = C.CLUTTER_Open
const CLUTTER_greaterthanequal = C.CLUTTER_greaterthanequal
const CLUTTER_Hangul_Khieuq = C.CLUTTER_Hangul_Khieuq
const CLUTTER_KEY_Mabovedot = C.CLUTTER_KEY_Mabovedot
const CLUTTER_KEY_Cyrillic_CHE_vertstroke = C.CLUTTER_KEY_Cyrillic_CHE_vertstroke
const CLUTTER_kana_NU = C.CLUTTER_kana_NU
const CLUTTER_KEY_ISO_Last_Group = C.CLUTTER_KEY_ISO_Last_Group
const CLUTTER_Ecircumflexhook = C.CLUTTER_Ecircumflexhook
const CLUTTER_KEY_3270_AltCursor = C.CLUTTER_KEY_3270_AltCursor
const CLUTTER_Georgian_in = C.CLUTTER_Georgian_in
const CLUTTER_braille_dots_13568 = C.CLUTTER_braille_dots_13568
const CLUTTER_Thai_maihanakat = C.CLUTTER_Thai_maihanakat
const CLUTTER_KEY_kana_RU = C.CLUTTER_KEY_kana_RU
const CLUTTER_odiaeresis = C.CLUTTER_odiaeresis
const CLUTTER_KEY_Arabic_question_mark = C.CLUTTER_KEY_Arabic_question_mark
const CLUTTER_KEY_Arabic_ghain = C.CLUTTER_KEY_Arabic_ghain
const CLUTTER_KEY_dead_capital_schwa = C.CLUTTER_KEY_dead_capital_schwa
const CLUTTER_Sinh_ru2 = C.CLUTTER_Sinh_ru2
const CLUTTER_KEY_kana_RA = C.CLUTTER_KEY_kana_RA
const CLUTTER_Greek_sigma = C.CLUTTER_Greek_sigma
const CLUTTER_KEY_kana_RE = C.CLUTTER_KEY_kana_RE
const CLUTTER_KEY_ubelowdot = C.CLUTTER_KEY_ubelowdot
const CLUTTER_Thai_lekchet = C.CLUTTER_Thai_lekchet
const CLUTTER_KEY_kana_RI = C.CLUTTER_KEY_kana_RI
const CLUTTER_braille_dots_12567 = C.CLUTTER_braille_dots_12567
const CLUTTER_ecircumflexhook = C.CLUTTER_ecircumflexhook
const CLUTTER_TIMELINE_BACKWARD = C.CLUTTER_TIMELINE_BACKWARD
const CLUTTER_KEY_kana_RO = C.CLUTTER_KEY_kana_RO
const CLUTTER_KEY_braille_dots_24578 = C.CLUTTER_KEY_braille_dots_24578
const CLUTTER_AudioMedia = C.CLUTTER_AudioMedia
const CLUTTER_Serbian_dje = C.CLUTTER_Serbian_dje
const CLUTTER_KEY_onesixth = C.CLUTTER_KEY_onesixth
const CLUTTER_KEY_B = C.CLUTTER_KEY_B
const CLUTTER_Hangul_RieulYeorinHieuh = C.CLUTTER_Hangul_RieulYeorinHieuh
const CLUTTER_ninesuperior = C.CLUTTER_ninesuperior
const CLUTTER_fivesubscript = C.CLUTTER_fivesubscript
const CLUTTER_KEY_ZoomOut = C.CLUTTER_KEY_ZoomOut
const CLUTTER_KEY_Ucircumflex = C.CLUTTER_KEY_Ucircumflex
const CLUTTER_KEY_Nacute = C.CLUTTER_KEY_Nacute
const CLUTTER_Greek_PHI = C.CLUTTER_Greek_PHI
const CLUTTER_Omacron = C.CLUTTER_Omacron
const CLUTTER_KEY_Cyrillic_DZHE = C.CLUTTER_KEY_Cyrillic_DZHE
const CLUTTER_KEY_ncedilla = C.CLUTTER_KEY_ncedilla
const CLUTTER_KEY_kana_NE = C.CLUTTER_KEY_kana_NE
const CLUTTER_Cyrillic_dzhe = C.CLUTTER_Cyrillic_dzhe
const CLUTTER_KEY_emdash = C.CLUTTER_KEY_emdash
const CLUTTER_tcedilla = C.CLUTTER_tcedilla
const CLUTTER_Ytilde = C.CLUTTER_Ytilde
const CLUTTER_braille_dots_12568 = C.CLUTTER_braille_dots_12568
const CLUTTER_KEY_braille_dots_134567 = C.CLUTTER_KEY_braille_dots_134567
const CLUTTER_KEY_Cyrillic_PE = C.CLUTTER_KEY_Cyrillic_PE
const CLUTTER_Obelowdot = C.CLUTTER_Obelowdot
const CLUTTER_KEY_braille_dots_1235678 = C.CLUTTER_KEY_braille_dots_1235678
const CLUTTER_NewSheqelSign = C.CLUTTER_NewSheqelSign
const CLUTTER_KEY_braille_dots_134568 = C.CLUTTER_KEY_braille_dots_134568
const CLUTTER_KEY_rcedilla = C.CLUTTER_KEY_rcedilla
const CLUTTER_uogonek = C.CLUTTER_uogonek
const CLUTTER_Hangul_J_RieulSios = C.CLUTTER_Hangul_J_RieulSios
const CLUTTER_KEY_Mae_Koho = C.CLUTTER_KEY_Mae_Koho
const CLUTTER_KEY_braille_dots_234 = C.CLUTTER_KEY_braille_dots_234
const CLUTTER_KEY_braille_dots_235 = C.CLUTTER_KEY_braille_dots_235
const CLUTTER_KEY_hebrew_teth = C.CLUTTER_KEY_hebrew_teth
const CLUTTER_Wdiaeresis = C.CLUTTER_Wdiaeresis
const CLUTTER_CUBIC_BEZIER = C.CLUTTER_CUBIC_BEZIER
const CLUTTER_KEY_gcedilla = C.CLUTTER_KEY_gcedilla
const CLUTTER_Georgian_par = C.CLUTTER_Georgian_par
const CLUTTER_kana_NE = C.CLUTTER_kana_NE
const CLUTTER_braille_dots_13567 = C.CLUTTER_braille_dots_13567
const CLUTTER_KEY_braille_dots_238 = C.CLUTTER_KEY_braille_dots_238
const CLUTTER_EASE_OUT_QUINT = C.CLUTTER_EASE_OUT_QUINT
const CLUTTER_Arabic_hamza_above = C.CLUTTER_Arabic_hamza_above
const CLUTTER_KEY_Cyrillic_zhe = C.CLUTTER_KEY_Cyrillic_zhe
const CLUTTER_braille_dots_24578 = C.CLUTTER_braille_dots_24578
const CLUTTER_RockerDown = C.CLUTTER_RockerDown
const CLUTTER_KEY_lstroke = C.CLUTTER_KEY_lstroke
const CLUTTER_Hangul_RieulHieuh = C.CLUTTER_Hangul_RieulHieuh
const CLUTTER_KEY_Armenian_MEN = C.CLUTTER_KEY_Armenian_MEN
const CLUTTER_Pointer_Drag2 = C.CLUTTER_Pointer_Drag2
const CLUTTER_braille_dots_237 = C.CLUTTER_braille_dots_237
const CLUTTER_Serbian_tshe = C.CLUTTER_Serbian_tshe
const CLUTTER_ocircumflexbelowdot = C.CLUTTER_ocircumflexbelowdot
const CLUTTER_Thai_leksun = C.CLUTTER_Thai_leksun
const CLUTTER_Pointer_Accelerate = C.CLUTTER_Pointer_Accelerate
const CLUTTER_Cyrillic_ZHE_descender = C.CLUTTER_Cyrillic_ZHE_descender
const CLUTTER_Greek_alphaaccent = C.CLUTTER_Greek_alphaaccent
const CLUTTER_KEY_Pointer_Drag_Dflt = C.CLUTTER_KEY_Pointer_Drag_Dflt
const CLUTTER_Hangul_SingleCandidate = C.CLUTTER_Hangul_SingleCandidate
const CLUTTER_ohorntilde = C.CLUTTER_ohorntilde
const CLUTTER_BUTTON_PRIMARY = C.CLUTTER_BUTTON_PRIMARY
const CLUTTER_KEY_lessthanequal = C.CLUTTER_KEY_lessthanequal
const CLUTTER_KEY_ISO_Last_Group_Lock = C.CLUTTER_KEY_ISO_Last_Group_Lock
const CLUTTER_KEY_leftt = C.CLUTTER_KEY_leftt
const CLUTTER_Thai_maihanakat_maitho = C.CLUTTER_Thai_maihanakat_maitho
const CLUTTER_KEY_Farsi_9 = C.CLUTTER_KEY_Farsi_9
const CLUTTER_KEY_braille_dots_3467 = C.CLUTTER_KEY_braille_dots_3467
const CLUTTER_KEY_cr = C.CLUTTER_KEY_cr
const CLUTTER_KEY_Arabic_zain = C.CLUTTER_KEY_Arabic_zain
const CLUTTER_ch = C.CLUTTER_ch
const CLUTTER_Thai_honokhuk = C.CLUTTER_Thai_honokhuk
const CLUTTER_KEY_kana_conjunctive = C.CLUTTER_KEY_kana_conjunctive
const CLUTTER_KEY_braille_dots_124567 = C.CLUTTER_KEY_braille_dots_124567
const CLUTTER_KEY_Georgian_gan = C.CLUTTER_KEY_Georgian_gan
const CLUTTER_braille_dots_23468 = C.CLUTTER_braille_dots_23468
const CLUTTER_KEY_Macedonia_KJE = C.CLUTTER_KEY_Macedonia_KJE
const CLUTTER_KEY_Ccedilla = C.CLUTTER_KEY_Ccedilla
const CLUTTER_KEY_Meta_R = C.CLUTTER_KEY_Meta_R
const CLUTTER_KEY_Georgian_las = C.CLUTTER_KEY_Georgian_las
const CLUTTER_KEY_Odiaeresis = C.CLUTTER_KEY_Odiaeresis
const CLUTTER_Thai_rorua = C.CLUTTER_Thai_rorua
const CLUTTER_KEY_Pointer_UpLeft = C.CLUTTER_KEY_Pointer_UpLeft
const CLUTTER_KP_Delete = C.CLUTTER_KP_Delete
const CLUTTER_KEY_Hangul_Jieuj = C.CLUTTER_KEY_Hangul_Jieuj
const CLUTTER_KEY_Serbian_JE = C.CLUTTER_KEY_Serbian_JE
const CLUTTER_KEY_horizlinescan9 = C.CLUTTER_KEY_horizlinescan9
const CLUTTER_KEY_Georgian_don = C.CLUTTER_KEY_Georgian_don
const CLUTTER_dead_iota = C.CLUTTER_dead_iota
const CLUTTER_wacute = C.CLUTTER_wacute
const CLUTTER_KEY_braille_dots_168 = C.CLUTTER_KEY_braille_dots_168
const CLUTTER_radical = C.CLUTTER_radical
const CLUTTER_Thai_sosala = C.CLUTTER_Thai_sosala
const CLUTTER_Georgian_san = C.CLUTTER_Georgian_san
const CLUTTER_ISO_Prev_Group_Lock = C.CLUTTER_ISO_Prev_Group_Lock
const CLUTTER_KEY_acircumflex = C.CLUTTER_KEY_acircumflex
const CLUTTER_Thai_phophung = C.CLUTTER_Thai_phophung
const CLUTTER_KEY_KP_Up = C.CLUTTER_KEY_KP_Up
const CLUTTER_KEY_Armenian_dza = C.CLUTTER_KEY_Armenian_dza
const CLUTTER_KEY_Meta_L = C.CLUTTER_KEY_Meta_L
const CLUTTER_COLOR_ORANGE_LIGHT = C.CLUTTER_COLOR_ORANGE_LIGHT
const CLUTTER_RotationKB = C.CLUTTER_RotationKB
const CLUTTER_KEY_hebrew_mem = C.CLUTTER_KEY_hebrew_mem
const CLUTTER_Cyrillic_ka_vertstroke = C.CLUTTER_Cyrillic_ka_vertstroke
const CLUTTER_Hyper_R = C.CLUTTER_Hyper_R
const CLUTTER_dead_abovecomma = C.CLUTTER_dead_abovecomma
const CLUTTER_Thai_thanthakhat = C.CLUTTER_Thai_thanthakhat
const CLUTTER_toprightparens = C.CLUTTER_toprightparens
const CLUTTER_KEY_Video = C.CLUTTER_KEY_Video
const CLUTTER_KEY_Ccircumflex = C.CLUTTER_KEY_Ccircumflex
const CLUTTER_KEY_Farsi_5 = C.CLUTTER_KEY_Farsi_5
const CLUTTER_KEY_Racute = C.CLUTTER_KEY_Racute
const CLUTTER_KEY_ISO_Group_Shift = C.CLUTTER_KEY_ISO_Group_Shift
const CLUTTER_Greek_upsilondieresis = C.CLUTTER_Greek_upsilondieresis
const CLUTTER_KEY_ecircumflexacute = C.CLUTTER_KEY_ecircumflexacute
const CLUTTER_Sinh_nna = C.CLUTTER_Sinh_nna
const CLUTTER_KEY_Hangul_SsangJieuj = C.CLUTTER_KEY_Hangul_SsangJieuj
const CLUTTER_KEY_Left = C.CLUTTER_KEY_Left
const CLUTTER_KEY_KP_8 = C.CLUTTER_KEY_KP_8
const CLUTTER_KEY_KP_9 = C.CLUTTER_KEY_KP_9
const CLUTTER_GRID_POSITION_RIGHT = C.CLUTTER_GRID_POSITION_RIGHT
const CLUTTER_KEY_sevensubscript = C.CLUTTER_KEY_sevensubscript
const CLUTTER_KEY_KP_2 = C.CLUTTER_KEY_KP_2
const CLUTTER_KEY_KP_3 = C.CLUTTER_KEY_KP_3
const CLUTTER_KEY_KP_0 = C.CLUTTER_KEY_KP_0
const CLUTTER_Armenian_question = C.CLUTTER_Armenian_question
const CLUTTER_Armenian_YECH = C.CLUTTER_Armenian_YECH
const CLUTTER_KEY_KP_7 = C.CLUTTER_KEY_KP_7
const CLUTTER_KEY_KP_4 = C.CLUTTER_KEY_KP_4
const CLUTTER_KEY_KP_5 = C.CLUTTER_KEY_KP_5
const CLUTTER_Arabic_keheh = C.CLUTTER_Arabic_keheh
const CLUTTER_KEY_Greek_IOTAaccent = C.CLUTTER_KEY_Greek_IOTAaccent
const CLUTTER_KEY_Sinh_al = C.CLUTTER_KEY_Sinh_al
const CLUTTER_KEY_eabovedot = C.CLUTTER_KEY_eabovedot
const CLUTTER_KEY_Sinh_ai = C.CLUTTER_KEY_Sinh_ai
const CLUTTER_KEY_braille_dots_358 = C.CLUTTER_KEY_braille_dots_358
const CLUTTER_KEY_Cyrillic_SCHWA = C.CLUTTER_KEY_Cyrillic_SCHWA
const CLUTTER_KEY_Sinh_ae = C.CLUTTER_KEY_Sinh_ae
const CLUTTER_Find = C.CLUTTER_Find
const CLUTTER_kana_SHI = C.CLUTTER_kana_SHI
const CLUTTER_KEY_topleftsummation = C.CLUTTER_KEY_topleftsummation
const CLUTTER_Armenian_yentamna = C.CLUTTER_Armenian_yentamna
const CLUTTER_Greek_omicronaccent = C.CLUTTER_Greek_omicronaccent
const CLUTTER_KEY_Arabic_ddal = C.CLUTTER_KEY_Arabic_ddal
const CLUTTER_braille_dots_256 = C.CLUTTER_braille_dots_256
const CLUTTER_braille_dots_257 = C.CLUTTER_braille_dots_257
const CLUTTER_braille_dots_258 = C.CLUTTER_braille_dots_258
const CLUTTER_Greek_IOTAdiaeresis = C.CLUTTER_Greek_IOTAdiaeresis
const CLUTTER_KEY_zcaron = C.CLUTTER_KEY_zcaron
const CLUTTER_braille_dots_34567 = C.CLUTTER_braille_dots_34567
const CLUTTER_KEY_ISO_Left_Tab = C.CLUTTER_KEY_ISO_Left_Tab
const CLUTTER_ISO_Move_Line_Up = C.CLUTTER_ISO_Move_Line_Up
const CLUTTER_kana_NA = C.CLUTTER_kana_NA
const CLUTTER_KEY_Arabic_keheh = C.CLUTTER_KEY_Arabic_keheh
const CLUTTER_KEY_cacute = C.CLUTTER_KEY_cacute
const CLUTTER_KEY_Ccaron = C.CLUTTER_KEY_Ccaron
const CLUTTER_KEY_braille_dots_257 = C.CLUTTER_KEY_braille_dots_257
const CLUTTER_KEY_Sinh_luu2 = C.CLUTTER_KEY_Sinh_luu2
const CLUTTER_KEY_ohornhook = C.CLUTTER_KEY_ohornhook
const CLUTTER_emptyset = C.CLUTTER_emptyset
const CLUTTER_KEY_Armenian_YECH = C.CLUTTER_KEY_Armenian_YECH
const CLUTTER_Hangul_J_Phieuf = C.CLUTTER_Hangul_J_Phieuf
const CLUTTER_KEY_rightarrow = C.CLUTTER_KEY_rightarrow
const CLUTTER_KEY_braille_dots_25678 = C.CLUTTER_KEY_braille_dots_25678
const CLUTTER_KEY_Battery = C.CLUTTER_KEY_Battery
const CLUTTER_KEY_fivesuperior = C.CLUTTER_KEY_fivesuperior
const CLUTTER_Serbian_dze = C.CLUTTER_Serbian_dze
const CLUTTER_KEY_singlelowquotemark = C.CLUTTER_KEY_singlelowquotemark
const CLUTTER_KEY_Thai_lakkhangyao = C.CLUTTER_KEY_Thai_lakkhangyao
const CLUTTER_ACTOR_REALIZED = C.CLUTTER_ACTOR_REALIZED
const CLUTTER_KEY_Greek_MU = C.CLUTTER_KEY_Greek_MU
const CLUTTER_KEY_Kanji_Bangou = C.CLUTTER_KEY_Kanji_Bangou
const CLUTTER_KEY_Atilde = C.CLUTTER_KEY_Atilde
const CLUTTER_KEY_Georgian_ban = C.CLUTTER_KEY_Georgian_ban
const CLUTTER_KEY_dstroke = C.CLUTTER_KEY_dstroke
const CLUTTER_KEY_Georgian_hoe = C.CLUTTER_KEY_Georgian_hoe
const CLUTTER_braille_dots_12345678 = C.CLUTTER_braille_dots_12345678
const CLUTTER_KEY_acute = C.CLUTTER_KEY_acute
const CLUTTER_Sinh_ca = C.CLUTTER_Sinh_ca
const CLUTTER_KEY_Cyrillic_SHHA = C.CLUTTER_KEY_Cyrillic_SHHA
const CLUTTER_KEY_ccircumflex = C.CLUTTER_KEY_ccircumflex
const CLUTTER_Serbian_LJE = C.CLUTTER_Serbian_LJE
const CLUTTER_Acircumflexhook = C.CLUTTER_Acircumflexhook
const CLUTTER_KEY_braille_dots_123457 = C.CLUTTER_KEY_braille_dots_123457
const CLUTTER_KEY_braille_dots_123456 = C.CLUTTER_KEY_braille_dots_123456
const CLUTTER_KEY_End = C.CLUTTER_KEY_End
const CLUTTER_Greek_accentdieresis = C.CLUTTER_Greek_accentdieresis
const CLUTTER_KEY_Cabovedot = C.CLUTTER_KEY_Cabovedot
const CLUTTER_KEY_braille_dot_5 = C.CLUTTER_KEY_braille_dot_5
const CLUTTER_FEATURE_TEXTURE_READ_PIXELS = C.CLUTTER_FEATURE_TEXTURE_READ_PIXELS
const CLUTTER_KEY_Georgian_fi = C.CLUTTER_KEY_Georgian_fi
const CLUTTER_FEATURE_OFFSCREEN = C.CLUTTER_FEATURE_OFFSCREEN
const CLUTTER_Armenian_SE = C.CLUTTER_Armenian_SE
const CLUTTER_VoidSymbol = C.CLUTTER_VoidSymbol
const CLUTTER_KEY_Pointer_Accelerate = C.CLUTTER_KEY_Pointer_Accelerate
const CLUTTER_Acircumflex = C.CLUTTER_Acircumflex
const CLUTTER_Explorer = C.CLUTTER_Explorer
const CLUTTER_KEY_Greek_UPSILON = C.CLUTTER_KEY_Greek_UPSILON
const CLUTTER_KEY_Macedonia_gje = C.CLUTTER_KEY_Macedonia_gje
const CLUTTER_SCALING_FILTER_NEAREST = C.CLUTTER_SCALING_FILTER_NEAREST
const CLUTTER_KEY_Sinh_tha = C.CLUTTER_KEY_Sinh_tha
const CLUTTER_KEY_hebrew_ayin = C.CLUTTER_KEY_hebrew_ayin
const CLUTTER_KEY_braille_dots_47 = C.CLUTTER_KEY_braille_dots_47
const CLUTTER_SNAP_EDGE_RIGHT = C.CLUTTER_SNAP_EDGE_RIGHT
const CLUTTER_KEY_braille_dots_13567 = C.CLUTTER_KEY_braille_dots_13567
const CLUTTER_Uhorn = C.CLUTTER_Uhorn
const CLUTTER_KEY_Thai_khokhwai = C.CLUTTER_KEY_Thai_khokhwai
const CLUTTER_KEY_w = C.CLUTTER_KEY_w
const CLUTTER_KEY_botleftsqbracket = C.CLUTTER_KEY_botleftsqbracket
const CLUTTER_Greek_RHO = C.CLUTTER_Greek_RHO
const CLUTTER_ISO_Level3_Shift = C.CLUTTER_ISO_Level3_Shift
const CLUTTER_KEY_Ukranian_YI = C.CLUTTER_KEY_Ukranian_YI
const CLUTTER_masculine = C.CLUTTER_masculine
const CLUTTER_KEY_BackForward = C.CLUTTER_KEY_BackForward
const CLUTTER_KEY_Redo = C.CLUTTER_KEY_Redo
const CLUTTER_SHADER_ERROR_COMPILE = C.CLUTTER_SHADER_ERROR_COMPILE
const CLUTTER_braille_dots_678 = C.CLUTTER_braille_dots_678
const CLUTTER_Armenian_tche = C.CLUTTER_Armenian_tche
const CLUTTER_Armenian_VO = C.CLUTTER_Armenian_VO
const CLUTTER_Racute = C.CLUTTER_Racute
const CLUTTER_KEY_Up = C.CLUTTER_KEY_Up
const CLUTTER_filledtribulletup = C.CLUTTER_filledtribulletup
const CLUTTER_KEY_ToDoList = C.CLUTTER_KEY_ToDoList
const CLUTTER_DELETE = C.CLUTTER_DELETE
const CLUTTER_rcaron = C.CLUTTER_rcaron
const CLUTTER_KEY_Ecircumflexgrave = C.CLUTTER_KEY_Ecircumflexgrave
const CLUTTER_KEY_Escape = C.CLUTTER_KEY_Escape
const CLUTTER_kana_fullstop = C.CLUTTER_kana_fullstop
const CLUTTER_KEY_yacute = C.CLUTTER_KEY_yacute
const CLUTTER_KEY_Armenian_exclam = C.CLUTTER_KEY_Armenian_exclam
const CLUTTER_tcaron = C.CLUTTER_tcaron
const CLUTTER_Cyrillic_ka_descender = C.CLUTTER_Cyrillic_ka_descender
const CLUTTER_MODIFIER_MASK = C.CLUTTER_MODIFIER_MASK
const CLUTTER_KEY_ahook = C.CLUTTER_KEY_ahook
const CLUTTER_3270_CursorSelect = C.CLUTTER_3270_CursorSelect
const CLUTTER_KEY_Lstroke = C.CLUTTER_KEY_Lstroke
const CLUTTER_caret = C.CLUTTER_caret
const CLUTTER_KEY_AudioForward = C.CLUTTER_KEY_AudioForward
const CLUTTER_KEY_3270_PrintScreen = C.CLUTTER_KEY_3270_PrintScreen
const CLUTTER_TopMenu = C.CLUTTER_TopMenu
const CLUTTER_KEY_ISO_Level5_Lock = C.CLUTTER_KEY_ISO_Level5_Lock
const CLUTTER_Cyrillic_hardsign = C.CLUTTER_Cyrillic_hardsign
const CLUTTER_Cyrillic_SHA = C.CLUTTER_Cyrillic_SHA
const CLUTTER_KEY_Thai_lekkao = C.CLUTTER_KEY_Thai_lekkao
const CLUTTER_Sys_Req = C.CLUTTER_Sys_Req
const CLUTTER_KEY_braille_dots_1245678 = C.CLUTTER_KEY_braille_dots_1245678
const CLUTTER_Armenian_paruyk = C.CLUTTER_Armenian_paruyk
const CLUTTER_Georgian_he = C.CLUTTER_Georgian_he
const CLUTTER_ISO_Last_Group = C.CLUTTER_ISO_Last_Group
const CLUTTER_MAJOR_VERSION = C.CLUTTER_MAJOR_VERSION
const CLUTTER_Arabic_sad = C.CLUTTER_Arabic_sad
const CLUTTER_KEY_Sinh_jha = C.CLUTTER_KEY_Sinh_jha
const CLUTTER_KEY_Armenian_GIM = C.CLUTTER_KEY_Armenian_GIM
const CLUTTER_KEY_seconds = C.CLUTTER_KEY_seconds
const CLUTTER_KEY_Armenian_ken = C.CLUTTER_KEY_Armenian_ken
const CLUTTER_BIN_ALIGNMENT_START = C.CLUTTER_BIN_ALIGNMENT_START
const CLUTTER_Armenian_at = C.CLUTTER_Armenian_at
const CLUTTER_KEY_kana_SU = C.CLUTTER_KEY_kana_SU
const CLUTTER_Arabic_ghain = C.CLUTTER_Arabic_ghain
const CLUTTER_KEY_Dcaron = C.CLUTTER_KEY_Dcaron
const CLUTTER_Thai_loling = C.CLUTTER_Thai_loling
const CLUTTER_KEY_Ygrave = C.CLUTTER_KEY_Ygrave
const CLUTTER_Agrave = C.CLUTTER_Agrave
const CLUTTER_hebrew_finalzade = C.CLUTTER_hebrew_finalzade
const CLUTTER_SCROLL_SMOOTH = C.CLUTTER_SCROLL_SMOOTH
const CLUTTER_opentribulletdown = C.CLUTTER_opentribulletdown
const CLUTTER_Zacute = C.CLUTTER_Zacute
const CLUTTER_lowrightcorner = C.CLUTTER_lowrightcorner
const CLUTTER_KEY_Henkan_Mode = C.CLUTTER_KEY_Henkan_Mode
const CLUTTER_KEY_Ohorn = C.CLUTTER_KEY_Ohorn
const CLUTTER_CUSTOM_MODE = C.CLUTTER_CUSTOM_MODE
const CLUTTER_Cyrillic_nje = C.CLUTTER_Cyrillic_nje
const CLUTTER_KEY_kana_SA = C.CLUTTER_KEY_kana_SA
const CLUTTER_KEY_kana_SO = C.CLUTTER_KEY_kana_SO
const CLUTTER_KEY_Cyrillic_ha = C.CLUTTER_KEY_Cyrillic_ha
const CLUTTER_FONT_MIPMAPPING = C.CLUTTER_FONT_MIPMAPPING
const CLUTTER_includedin = C.CLUTTER_includedin
const CLUTTER_KEY_Stop = C.CLUTTER_KEY_Stop
const CLUTTER_PRIORITY_REDRAW = C.CLUTTER_PRIORITY_REDRAW
const CLUTTER_KEY_Romaji = C.CLUTTER_KEY_Romaji
const CLUTTER_braille_dots_12 = C.CLUTTER_braille_dots_12
const CLUTTER_braille_dots_17 = C.CLUTTER_braille_dots_17
const CLUTTER_braille_dots_16 = C.CLUTTER_braille_dots_16
const CLUTTER_braille_dots_15 = C.CLUTTER_braille_dots_15
const CLUTTER_KEY_KP_Separator = C.CLUTTER_KEY_KP_Separator
const CLUTTER_braille_dots_18 = C.CLUTTER_braille_dots_18
const CLUTTER_ISO_First_Group = C.CLUTTER_ISO_First_Group
const CLUTTER_ordfeminine = C.CLUTTER_ordfeminine
const CLUTTER_section = C.CLUTTER_section
const CLUTTER_KEY_Georgian_he = C.CLUTTER_KEY_Georgian_he
const CLUTTER_ecircumflextilde = C.CLUTTER_ecircumflextilde
const CLUTTER_KEY_Acircumflexbelowdot = C.CLUTTER_KEY_Acircumflexbelowdot
const CLUTTER_KEY_Sacute = C.CLUTTER_KEY_Sacute
const CLUTTER_Hangul_J_RieulMieum = C.CLUTTER_Hangul_J_RieulMieum
const CLUTTER_KEY_RotateWindows = C.CLUTTER_KEY_RotateWindows
const CLUTTER_COLOR_CHOCOLATE_LIGHT = C.CLUTTER_COLOR_CHOCOLATE_LIGHT
const CLUTTER_KEY_Arabic_fullstop = C.CLUTTER_KEY_Arabic_fullstop
const CLUTTER_ISO_Level2_Latch = C.CLUTTER_ISO_Level2_Latch
const CLUTTER_braille_dots_1567 = C.CLUTTER_braille_dots_1567
const CLUTTER_braille_dots_3456 = C.CLUTTER_braille_dots_3456
const CLUTTER_KEY_Hangul_MultipleCandidate = C.CLUTTER_KEY_Hangul_MultipleCandidate
const CLUTTER_Cyrillic_EL = C.CLUTTER_Cyrillic_EL
const CLUTTER_Cyrillic_EM = C.CLUTTER_Cyrillic_EM
const CLUTTER_Cyrillic_EN = C.CLUTTER_Cyrillic_EN
const CLUTTER_KEY_r = C.CLUTTER_KEY_r
const CLUTTER_Kana_Lock = C.CLUTTER_Kana_Lock
const CLUTTER_EASE = C.CLUTTER_EASE
const CLUTTER_KEY_botrightsummation = C.CLUTTER_KEY_botrightsummation
const CLUTTER_KEY_braille_dots_13678 = C.CLUTTER_KEY_braille_dots_13678
const CLUTTER_SCROLL_VERTICALLY = C.CLUTTER_SCROLL_VERTICALLY
const CLUTTER_SCALING_FILTER_LINEAR = C.CLUTTER_SCALING_FILTER_LINEAR
const CLUTTER_ALIGN_Y_AXIS = C.CLUTTER_ALIGN_Y_AXIS
const CLUTTER_Num_Lock = C.CLUTTER_Num_Lock
const CLUTTER_Georgian_fi = C.CLUTTER_Georgian_fi
const CLUTTER_Cyrillic_ER = C.CLUTTER_Cyrillic_ER
const CLUTTER_Cyrillic_ES = C.CLUTTER_Cyrillic_ES
const CLUTTER_Hangul_SsangKiyeog = C.CLUTTER_Hangul_SsangKiyeog
const CLUTTER_parenright = C.CLUTTER_parenright
const CLUTTER_KEY_braille_dots_23678 = C.CLUTTER_KEY_braille_dots_23678
const CLUTTER_WakeUp = C.CLUTTER_WakeUp
const CLUTTER_KEY_minutes = C.CLUTTER_KEY_minutes
const CLUTTER_ecircumflexbelowdot = C.CLUTTER_ecircumflexbelowdot
const CLUTTER_Game = C.CLUTTER_Game
const CLUTTER_fourfifths = C.CLUTTER_fourfifths
const CLUTTER_kana_YU = C.CLUTTER_kana_YU
const CLUTTER_Hangul_J_NieunJieuj = C.CLUTTER_Hangul_J_NieunJieuj
const CLUTTER_KEY_Arabic_lam = C.CLUTTER_KEY_Arabic_lam
const CLUTTER_KEY_braille_dots_13458 = C.CLUTTER_KEY_braille_dots_13458
const CLUTTER_CONTENT_GRAVITY_BOTTOM = C.CLUTTER_CONTENT_GRAVITY_BOTTOM
const CLUTTER_Ahook = C.CLUTTER_Ahook
const CLUTTER_topvertsummationconnector = C.CLUTTER_topvertsummationconnector
const CLUTTER_KEY_braille_dots_13456 = C.CLUTTER_KEY_braille_dots_13456
const CLUTTER_KEY_braille_dots_13457 = C.CLUTTER_KEY_braille_dots_13457
const CLUTTER_KEY_Xfer = C.CLUTTER_KEY_Xfer
const CLUTTER_KEY_p = C.CLUTTER_KEY_p
const CLUTTER_IMAGE_ERROR_INVALID_DATA = C.CLUTTER_IMAGE_ERROR_INVALID_DATA
const CLUTTER_KEY_function = C.CLUTTER_KEY_function
const CLUTTER_braille_dots_13678 = C.CLUTTER_braille_dots_13678
const CLUTTER_KEY_Shop = C.CLUTTER_KEY_Shop
const CLUTTER_KEY_ClearGrab = C.CLUTTER_KEY_ClearGrab
const CLUTTER_New = C.CLUTTER_New
const CLUTTER_MODIFIER_RESERVED_16_MASK = C.CLUTTER_MODIFIER_RESERVED_16_MASK
const CLUTTER_KEY_Eisu_Shift = C.CLUTTER_KEY_Eisu_Shift
const CLUTTER_KEY_ohorntilde = C.CLUTTER_KEY_ohorntilde
const CLUTTER_Cyrillic_zhe_descender = C.CLUTTER_Cyrillic_zhe_descender
const CLUTTER_KP_Multiply = C.CLUTTER_KP_Multiply
const CLUTTER_Sinh_luu2 = C.CLUTTER_Sinh_luu2
const CLUTTER_kana_openingbracket = C.CLUTTER_kana_openingbracket
const CLUTTER_KEY_Lbelowdot = C.CLUTTER_KEY_Lbelowdot
const CLUTTER_Greek_PI = C.CLUTTER_Greek_PI
const CLUTTER_kana_YO = C.CLUTTER_kana_YO
const CLUTTER_KEY_braille_dots_125678 = C.CLUTTER_KEY_braille_dots_125678
const CLUTTER_KEY_Hangul_J_Phieuf = C.CLUTTER_KEY_Hangul_J_Phieuf
const CLUTTER_Greek_TAU = C.CLUTTER_Greek_TAU
const CLUTTER_ugrave = C.CLUTTER_ugrave
const CLUTTER_Execute = C.CLUTTER_Execute
const CLUTTER_KEY_rightdoublequotemark = C.CLUTTER_KEY_rightdoublequotemark
const CLUTTER_KEY_ocircumflextilde = C.CLUTTER_KEY_ocircumflextilde
const CLUTTER_KEY_Ukrainian_ie = C.CLUTTER_KEY_Ukrainian_ie
const CLUTTER_Ugrave = C.CLUTTER_Ugrave
const CLUTTER_KEY_ISO_Emphasize = C.CLUTTER_KEY_ISO_Emphasize
const CLUTTER_KEY_Switch_VT_11 = C.CLUTTER_KEY_Switch_VT_11
const CLUTTER_KEY_Switch_VT_10 = C.CLUTTER_KEY_Switch_VT_10
const CLUTTER_braille_dots_13456 = C.CLUTTER_braille_dots_13456
const CLUTTER_KEY_Switch_VT_12 = C.CLUTTER_KEY_Switch_VT_12
const CLUTTER_KEY_kana_MI = C.CLUTTER_KEY_kana_MI
const CLUTTER_KEY_Zenkaku_Hankaku = C.CLUTTER_KEY_Zenkaku_Hankaku
const CLUTTER_Armenian_tyun = C.CLUTTER_Armenian_tyun
const CLUTTER_EASE_IN_OUT_EXPO = C.CLUTTER_EASE_IN_OUT_EXPO
const CLUTTER_KEY_kana_MO = C.CLUTTER_KEY_kana_MO
const CLUTTER_KEY_braille_dots_134578 = C.CLUTTER_KEY_braille_dots_134578
const CLUTTER_KEY_kana_MA = C.CLUTTER_KEY_kana_MA
const CLUTTER_KEY_Armenian_NU = C.CLUTTER_KEY_Armenian_NU
const CLUTTER_KEY_New = C.CLUTTER_KEY_New
const CLUTTER_KEY_kana_ME = C.CLUTTER_KEY_kana_ME
const CLUTTER_KEY_braille_dots_234678 = C.CLUTTER_KEY_braille_dots_234678
const CLUTTER_KEY_Hangul_J_SsangKiyeog = C.CLUTTER_KEY_Hangul_J_SsangKiyeog
const CLUTTER_ff = C.CLUTTER_ff
const CLUTTER_StickyKeys_Enable = C.CLUTTER_StickyKeys_Enable
const CLUTTER_uprightcorner = C.CLUTTER_uprightcorner
const CLUTTER_Thai_kokai = C.CLUTTER_Thai_kokai
const CLUTTER_KEY_kana_MU = C.CLUTTER_KEY_kana_MU
const CLUTTER_KEY_guillemotleft = C.CLUTTER_KEY_guillemotleft
const CLUTTER_KEY_Thai_saraue = C.CLUTTER_KEY_Thai_saraue
const CLUTTER_Thai_leksong = C.CLUTTER_Thai_leksong
const CLUTTER_KEY_soliddiamond = C.CLUTTER_KEY_soliddiamond
const CLUTTER_KEY_Arabic_kaf = C.CLUTTER_KEY_Arabic_kaf
const CLUTTER_KEY_Execute = C.CLUTTER_KEY_Execute
const CLUTTER_KEY_gabovedot = C.CLUTTER_KEY_gabovedot
const CLUTTER_KEY_3270_DeleteWord = C.CLUTTER_KEY_3270_DeleteWord
const CLUTTER_ISO_Partial_Line_Up = C.CLUTTER_ISO_Partial_Line_Up
const CLUTTER_KEY_Thai_sarauu = C.CLUTTER_KEY_Thai_sarauu
const CLUTTER_KEY_3270_Reset = C.CLUTTER_KEY_3270_Reset
const CLUTTER_KEY_Sinh_kha = C.CLUTTER_KEY_Sinh_kha
const CLUTTER_kana_NO = C.CLUTTER_kana_NO
const CLUTTER_jcircumflex = C.CLUTTER_jcircumflex
const CLUTTER_KEY_braille_dots_2678 = C.CLUTTER_KEY_braille_dots_2678
const CLUTTER_KEY_Zen_Koho = C.CLUTTER_KEY_Zen_Koho
const CLUTTER_KEY_Hangul_SsangDikeud = C.CLUTTER_KEY_Hangul_SsangDikeud
const CLUTTER_KEY_braille_dots_134678 = C.CLUTTER_KEY_braille_dots_134678
const CLUTTER_braille_dots_25678 = C.CLUTTER_braille_dots_25678
const CLUTTER_Armenian_vyun = C.CLUTTER_Armenian_vyun
const CLUTTER_KEY_braille_dots_3478 = C.CLUTTER_KEY_braille_dots_3478
const CLUTTER_braille_dots_28 = C.CLUTTER_braille_dots_28
const CLUTTER_dead_stroke = C.CLUTTER_dead_stroke
const CLUTTER_KEY_Armenian_je = C.CLUTTER_KEY_Armenian_je
const CLUTTER_KEY_Thai_hohip = C.CLUTTER_KEY_Thai_hohip
const CLUTTER_KEY_AudioRandomPlay = C.CLUTTER_KEY_AudioRandomPlay
const CLUTTER_KEY_Gcedilla = C.CLUTTER_KEY_Gcedilla
const CLUTTER_KEY_braille_dots_23467 = C.CLUTTER_KEY_braille_dots_23467
const CLUTTER_ubelowdot = C.CLUTTER_ubelowdot
const CLUTTER_PAN_X_AXIS = C.CLUTTER_PAN_X_AXIS
const CLUTTER_Thai_fofan = C.CLUTTER_Thai_fofan
const CLUTTER_Georgian_zhar = C.CLUTTER_Georgian_zhar
const CLUTTER_tslash = C.CLUTTER_tslash
const CLUTTER_KEY_atilde = C.CLUTTER_KEY_atilde
const CLUTTER_KEY_Hangul_Special = C.CLUTTER_KEY_Hangul_Special
const CLUTTER_KEY_Arabic_hamzaonyeh = C.CLUTTER_KEY_Arabic_hamzaonyeh
const CLUTTER_KEY_Hangul_PreviousCandidate = C.CLUTTER_KEY_Hangul_PreviousCandidate
const CLUTTER_KEY_ecircumflextilde = C.CLUTTER_KEY_ecircumflextilde
const CLUTTER_KEY_Abreve = C.CLUTTER_KEY_Abreve
const CLUTTER_dead_i = C.CLUTTER_dead_i
const CLUTTER_dead_o = C.CLUTTER_dead_o
const CLUTTER_KEY_Greek_omega = C.CLUTTER_KEY_Greek_omega
const CLUTTER_KEY_Oslash = C.CLUTTER_KEY_Oslash
const CLUTTER_braille_dots_267 = C.CLUTTER_braille_dots_267
const CLUTTER_Hangul_J_Kiyeog = C.CLUTTER_Hangul_J_Kiyeog
const CLUTTER_iTouch = C.CLUTTER_iTouch
const CLUTTER_KEY_vt = C.CLUTTER_KEY_vt
const CLUTTER_UNIT_CM = C.CLUTTER_UNIT_CM
const CLUTTER_Hangul_J_RieulTieut = C.CLUTTER_Hangul_J_RieulTieut
const CLUTTER_KEY_Thai_maihanakat_maitho = C.CLUTTER_KEY_Thai_maihanakat_maitho
const CLUTTER_3270_FieldMark = C.CLUTTER_3270_FieldMark
const CLUTTER_KEY_braille_dots_178 = C.CLUTTER_KEY_braille_dots_178
const CLUTTER_dead_u = C.CLUTTER_dead_u
const CLUTTER_dead_I = C.CLUTTER_dead_I
const CLUTTER_dead_O = C.CLUTTER_dead_O
const CLUTTER_KEY_Thai_leksam = C.CLUTTER_KEY_Thai_leksam
const CLUTTER_braille_dots_14 = C.CLUTTER_braille_dots_14
const CLUTTER_malesymbol = C.CLUTTER_malesymbol
const CLUTTER_KEY_slash = C.CLUTTER_KEY_slash
const CLUTTER_dead_A = C.CLUTTER_dead_A
const CLUTTER_REPEAT_X_AXIS = C.CLUTTER_REPEAT_X_AXIS
const CLUTTER_KEY_ygrave = C.CLUTTER_KEY_ygrave
const CLUTTER_Macedonia_GJE = C.CLUTTER_Macedonia_GJE
const CLUTTER_dead_E = C.CLUTTER_dead_E
const CLUTTER_Thai_maitri = C.CLUTTER_Thai_maitri
const CLUTTER_Thai_sarauee = C.CLUTTER_Thai_sarauee
const CLUTTER_Hangul_YAE = C.CLUTTER_Hangul_YAE
const CLUTTER_hebrew_resh = C.CLUTTER_hebrew_resh
const CLUTTER_KEY_Clear = C.CLUTTER_KEY_Clear
const CLUTTER_KEY_MailForward = C.CLUTTER_KEY_MailForward
const CLUTTER_dead_U = C.CLUTTER_dead_U
const CLUTTER_braille_dots_345678 = C.CLUTTER_braille_dots_345678
const CLUTTER_Hangul_PanSios = C.CLUTTER_Hangul_PanSios
const CLUTTER_KEY_Favorites = C.CLUTTER_KEY_Favorites
const CLUTTER_ISO_Set_Margin_Right = C.CLUTTER_ISO_Set_Margin_Right
const CLUTTER_Georgian_we = C.CLUTTER_Georgian_we
const CLUTTER_Eogonek = C.CLUTTER_Eogonek
const CLUTTER_Iabovedot = C.CLUTTER_Iabovedot
const CLUTTER_Georgian_hae = C.CLUTTER_Georgian_hae
const CLUTTER_KEY_Ocircumflex = C.CLUTTER_KEY_Ocircumflex
const CLUTTER_hebrew_gimel = C.CLUTTER_hebrew_gimel
const CLUTTER_nacute = C.CLUTTER_nacute
const CLUTTER_STEP_END = C.CLUTTER_STEP_END
const CLUTTER_KEY_Ecircumflexhook = C.CLUTTER_KEY_Ecircumflexhook
const CLUTTER_leftradical = C.CLUTTER_leftradical
const CLUTTER_KEY_kcedilla = C.CLUTTER_KEY_kcedilla
const CLUTTER_KEY_braille_dots_146 = C.CLUTTER_KEY_braille_dots_146
const CLUTTER_KEY_semivoicedsound = C.CLUTTER_KEY_semivoicedsound
const CLUTTER_KEY_Thai_bobaimai = C.CLUTTER_KEY_Thai_bobaimai
const CLUTTER_Thai_choching = C.CLUTTER_Thai_choching
const CLUTTER_EASE_IN_OUT_QUART = C.CLUTTER_EASE_IN_OUT_QUART
const CLUTTER_KEY_braille_dots_147 = C.CLUTTER_KEY_braille_dots_147
const CLUTTER_braille_dots_247 = C.CLUTTER_braille_dots_247
const CLUTTER_braille_dots_246 = C.CLUTTER_braille_dots_246
const CLUTTER_KEY_Forward = C.CLUTTER_KEY_Forward
const CLUTTER_GRAVITY_NORTH_EAST = C.CLUTTER_GRAVITY_NORTH_EAST
const CLUTTER_MODIFIER_RESERVED_17_MASK = C.CLUTTER_MODIFIER_RESERVED_17_MASK
const CLUTTER_dead_belowbreve = C.CLUTTER_dead_belowbreve
const CLUTTER_eogonek = C.CLUTTER_eogonek
const CLUTTER_Thai_lekha = C.CLUTTER_Thai_lekha
const CLUTTER_KEY_tcedilla = C.CLUTTER_KEY_tcedilla
const CLUTTER_Sinh_pa = C.CLUTTER_Sinh_pa
const CLUTTER_KEY_integral = C.CLUTTER_KEY_integral
const CLUTTER_KEY_Uacute = C.CLUTTER_KEY_Uacute
const CLUTTER_KEY_Pointer_DfltBtnPrev = C.CLUTTER_KEY_Pointer_DfltBtnPrev
const CLUTTER_VERSION_HEX = C.CLUTTER_VERSION_HEX
const CLUTTER_braille_dots_1368 = C.CLUTTER_braille_dots_1368
const CLUTTER_Obarred = C.CLUTTER_Obarred
const CLUTTER_KEY_Greek_lambda = C.CLUTTER_KEY_Greek_lambda
const CLUTTER_Wgrave = C.CLUTTER_Wgrave
const CLUTTER_COLOR_DARK_MAGENTA = C.CLUTTER_COLOR_DARK_MAGENTA
const CLUTTER_Next_Virtual_Screen = C.CLUTTER_Next_Virtual_Screen
const CLUTTER_ENTER = C.CLUTTER_ENTER
const CLUTTER_KEY_Arabic_peh = C.CLUTTER_KEY_Arabic_peh
const CLUTTER_hebrew_finalpe = C.CLUTTER_hebrew_finalpe
const CLUTTER_KEY_Georgian_we = C.CLUTTER_KEY_Georgian_we
const CLUTTER_KEY_eng = C.CLUTTER_KEY_eng
const CLUTTER_BackSpace = C.CLUTTER_BackSpace
const CLUTTER_KEY_otilde = C.CLUTTER_KEY_otilde
const CLUTTER_Acircumflexacute = C.CLUTTER_Acircumflexacute
const CLUTTER_BUTTON3_MASK = C.CLUTTER_BUTTON3_MASK
const CLUTTER_INPUT_MODE_MASTER = C.CLUTTER_INPUT_MODE_MASTER
const CLUTTER_KEY_aogonek = C.CLUTTER_KEY_aogonek
const CLUTTER_wgrave = C.CLUTTER_wgrave
const CLUTTER_ocaron = C.CLUTTER_ocaron
const CLUTTER_Sinh_h2 = C.CLUTTER_Sinh_h2
const CLUTTER_KEY_braille_dots_123 = C.CLUTTER_KEY_braille_dots_123
const CLUTTER_Ungrab = C.CLUTTER_Ungrab
const CLUTTER_KEY_RockerUp = C.CLUTTER_KEY_RockerUp
const CLUTTER_TOUCHPAD_DEVICE = C.CLUTTER_TOUCHPAD_DEVICE
const CLUTTER_KEY_BounceKeys_Enable = C.CLUTTER_KEY_BounceKeys_Enable
const CLUTTER_KEY_Thai_leksi = C.CLUTTER_KEY_Thai_leksi
const CLUTTER_3270_Rule = C.CLUTTER_3270_Rule
const CLUTTER_Gcedilla = C.CLUTTER_Gcedilla
const CLUTTER_KEY_Lcaron = C.CLUTTER_KEY_Lcaron
const CLUTTER_Tab = C.CLUTTER_Tab
const CLUTTER_topleftradical = C.CLUTTER_topleftradical
const CLUTTER_Rcaron = C.CLUTTER_Rcaron
const CLUTTER_INPUT_AXIS_XTILT = C.CLUTTER_INPUT_AXIS_XTILT
const CLUTTER_lessthanequal = C.CLUTTER_lessthanequal
const CLUTTER_Georgian_jil = C.CLUTTER_Georgian_jil
const CLUTTER_Dcaron = C.CLUTTER_Dcaron
const CLUTTER_COLOR_CYAN = C.CLUTTER_COLOR_CYAN
const CLUTTER_Greek_upsilonaccent = C.CLUTTER_Greek_upsilonaccent
const CLUTTER_KEY_Serbian_tshe = C.CLUTTER_KEY_Serbian_tshe
const CLUTTER_AudioRewind = C.CLUTTER_AudioRewind
const CLUTTER_Memo = C.CLUTTER_Memo
const CLUTTER_Cyrillic_SHORTI = C.CLUTTER_Cyrillic_SHORTI
const CLUTTER_Blue = C.CLUTTER_Blue
const CLUTTER_kana_TA = C.CLUTTER_kana_TA
const CLUTTER_KEY_dead_ogonek = C.CLUTTER_KEY_dead_ogonek
const CLUTTER_GRAVITY_NORTH = C.CLUTTER_GRAVITY_NORTH
const CLUTTER_KEY_braille_dots_23468 = C.CLUTTER_KEY_braille_dots_23468
const CLUTTER_KEY_Sinh_ddha = C.CLUTTER_KEY_Sinh_ddha
const CLUTTER_KEY_braille_dot_10 = C.CLUTTER_KEY_braille_dot_10
const CLUTTER_COLOR_BUTTER = C.CLUTTER_COLOR_BUTTER
const CLUTTER_SCROLL_UP = C.CLUTTER_SCROLL_UP
const CLUTTER_Arabic_question_mark = C.CLUTTER_Arabic_question_mark
const CLUTTER_Abreve = C.CLUTTER_Abreve
const CLUTTER_KEY_hstroke = C.CLUTTER_KEY_hstroke
const CLUTTER_PAN_AXIS_NONE = C.CLUTTER_PAN_AXIS_NONE
const CLUTTER_KEY_botleftparens = C.CLUTTER_KEY_botleftparens
const CLUTTER_PowerDown = C.CLUTTER_PowerDown
const CLUTTER_KEY_braille_dots_37 = C.CLUTTER_KEY_braille_dots_37
const CLUTTER_KEY_R14 = C.CLUTTER_KEY_R14
const CLUTTER_KEY_R15 = C.CLUTTER_KEY_R15
const CLUTTER_KEY_club = C.CLUTTER_KEY_club
const CLUTTER_Cyrillic_CHE_vertstroke = C.CLUTTER_Cyrillic_CHE_vertstroke
const CLUTTER_KEY_R10 = C.CLUTTER_KEY_R10
const CLUTTER_KEY_R11 = C.CLUTTER_KEY_R11
const CLUTTER_KEY_R12 = C.CLUTTER_KEY_R12
const CLUTTER_KEY_R13 = C.CLUTTER_KEY_R13
const CLUTTER_RotationPB = C.CLUTTER_RotationPB
const CLUTTER_KEY_brokenbar = C.CLUTTER_KEY_brokenbar
const CLUTTER_KEY_BrightnessAdjust = C.CLUTTER_KEY_BrightnessAdjust
const CLUTTER_KEY_L4 = C.CLUTTER_KEY_L4
const CLUTTER_Uhornacute = C.CLUTTER_Uhornacute
const CLUTTER_ACTOR_VISIBLE = C.CLUTTER_ACTOR_VISIBLE
const CLUTTER_Shift_Lock = C.CLUTTER_Shift_Lock
const CLUTTER_KEY_Thai_loling = C.CLUTTER_KEY_Thai_loling
const CLUTTER_KEY_iogonek = C.CLUTTER_KEY_iogonek
const CLUTTER_KEY_threesuperior = C.CLUTTER_KEY_threesuperior
const CLUTTER_Uhorntilde = C.CLUTTER_Uhorntilde
const CLUTTER_Arabic_tatweel = C.CLUTTER_Arabic_tatweel
const CLUTTER_Hangul_SunkyeongeumPhieuf = C.CLUTTER_Hangul_SunkyeongeumPhieuf
const CLUTTER_Sinh_aa2 = C.CLUTTER_Sinh_aa2
const CLUTTER_Thai_dodek = C.CLUTTER_Thai_dodek
const CLUTTER_KEY_b = C.CLUTTER_KEY_b
const CLUTTER_KEY_Arabic_alefmaksura = C.CLUTTER_KEY_Arabic_alefmaksura
const CLUTTER_KEY_3270_FieldMark = C.CLUTTER_KEY_3270_FieldMark
const CLUTTER_umacron = C.CLUTTER_umacron
const CLUTTER_Ecircumflextilde = C.CLUTTER_Ecircumflextilde
const CLUTTER_KEY_malesymbol = C.CLUTTER_KEY_malesymbol
const CLUTTER_onequarter = C.CLUTTER_onequarter
const CLUTTER_KEY_Page_Up = C.CLUTTER_KEY_Page_Up
const CLUTTER_idotless = C.CLUTTER_idotless
const CLUTTER_KEY_KP_Divide = C.CLUTTER_KEY_KP_Divide
const CLUTTER_Thai_saraaimaimuan = C.CLUTTER_Thai_saraaimaimuan
const CLUTTER_Paste = C.CLUTTER_Paste
const CLUTTER_Sinh_ba = C.CLUTTER_Sinh_ba
const CLUTTER_KEY_Hibernate = C.CLUTTER_KEY_Hibernate
const CLUTTER_KEY_Cyrillic_LJE = C.CLUTTER_KEY_Cyrillic_LJE
const CLUTTER_Armenian_PE = C.CLUTTER_Armenian_PE
const CLUTTER_braille_dots_34678 = C.CLUTTER_braille_dots_34678
const CLUTTER_FEATURE_STAGE_USER_RESIZE = C.CLUTTER_FEATURE_STAGE_USER_RESIZE
const CLUTTER_KEY_hyphen = C.CLUTTER_KEY_hyphen
const CLUTTER_KEY_ybelowdot = C.CLUTTER_KEY_ybelowdot
const CLUTTER_KEY_dead_belowmacron = C.CLUTTER_KEY_dead_belowmacron
const CLUTTER_Ubelowdot = C.CLUTTER_Ubelowdot
const CLUTTER_braille_dots_1245678 = C.CLUTTER_braille_dots_1245678
const CLUTTER_KEY_L6 = C.CLUTTER_KEY_L6
const CLUTTER_asterisk = C.CLUTTER_asterisk
const CLUTTER_KEY_Arabic_hamza_below = C.CLUTTER_KEY_Arabic_hamza_below
const CLUTTER_Hangul_J_Khieuq = C.CLUTTER_Hangul_J_Khieuq
const CLUTTER_KEY_Armenian_vo = C.CLUTTER_KEY_Armenian_vo
const CLUTTER_KEY_braille_dots_1347 = C.CLUTTER_KEY_braille_dots_1347
const CLUTTER_Georgian_chin = C.CLUTTER_Georgian_chin
const CLUTTER_Cyrillic_A = C.CLUTTER_Cyrillic_A
const CLUTTER_Greek_THETA = C.CLUTTER_Greek_THETA
const CLUTTER_Cyrillic_TE = C.CLUTTER_Cyrillic_TE
const CLUTTER_Suspend = C.CLUTTER_Suspend
const CLUTTER_KEY_Ukranian_JE = C.CLUTTER_KEY_Ukranian_JE
const CLUTTER_KEY_Hangul_J_PanSios = C.CLUTTER_KEY_Hangul_J_PanSios
const CLUTTER_KEY_period = C.CLUTTER_KEY_period
const CLUTTER_KEY_Ohorntilde = C.CLUTTER_KEY_Ohorntilde
const CLUTTER_Hangul_WEO = C.CLUTTER_Hangul_WEO
const CLUTTER_Ecaron = C.CLUTTER_Ecaron
const CLUTTER_RotateWindows = C.CLUTTER_RotateWindows
const CLUTTER_KEY_iTouch = C.CLUTTER_KEY_iTouch
const CLUTTER_KEY_Uhook = C.CLUTTER_KEY_Uhook
const CLUTTER_braille_dots_123568 = C.CLUTTER_braille_dots_123568
const CLUTTER_KEY_ISO_Set_Margin_Left = C.CLUTTER_KEY_ISO_Set_Margin_Left
const CLUTTER_ISO_Last_Group_Lock = C.CLUTTER_ISO_Last_Group_Lock
const CLUTTER_KEY_kana_o = C.CLUTTER_KEY_kana_o
const CLUTTER_dead_diaeresis = C.CLUTTER_dead_diaeresis
const CLUTTER_ccaron = C.CLUTTER_ccaron
const CLUTTER_cedilla = C.CLUTTER_cedilla
const CLUTTER_dabovedot = C.CLUTTER_dabovedot
const CLUTTER_KEY_Arabic_tcheh = C.CLUTTER_KEY_Arabic_tcheh
const CLUTTER_TABLE_ALIGNMENT_CENTER = C.CLUTTER_TABLE_ALIGNMENT_CENTER
const CLUTTER_braille_dots_123567 = C.CLUTTER_braille_dots_123567
const CLUTTER_Cyrillic_pe = C.CLUTTER_Cyrillic_pe
const CLUTTER_LOCK_MASK = C.CLUTTER_LOCK_MASK
const CLUTTER_KEY_AccessX_Enable = C.CLUTTER_KEY_AccessX_Enable
const CLUTTER_Odiaeresis = C.CLUTTER_Odiaeresis
const CLUTTER_KEY_Cyrillic_sha = C.CLUTTER_KEY_Cyrillic_sha
const CLUTTER_KEY_Georgian_tar = C.CLUTTER_KEY_Georgian_tar
const CLUTTER_Refresh = C.CLUTTER_Refresh
const CLUTTER_kana_KE = C.CLUTTER_kana_KE
const CLUTTER_KEY_kana_NA = C.CLUTTER_KEY_kana_NA
const CLUTTER_KEY_Sinh_nya = C.CLUTTER_KEY_Sinh_nya
const CLUTTER_LONG_PRESS_CANCEL = C.CLUTTER_LONG_PRESS_CANCEL
const CLUTTER_KEY_Georgian_tan = C.CLUTTER_KEY_Georgian_tan
const CLUTTER_KEY_braille_dots_56 = C.CLUTTER_KEY_braille_dots_56
const CLUTTER_KEY_caron = C.CLUTTER_KEY_caron
const CLUTTER_KEY_kana_NU = C.CLUTTER_KEY_kana_NU
const CLUTTER_KEY_braille_dots_58 = C.CLUTTER_KEY_braille_dots_58
const CLUTTER_braille_dots_123468 = C.CLUTTER_braille_dots_123468
const CLUTTER_KEY_currency = C.CLUTTER_KEY_currency
const CLUTTER_Armenian_e = C.CLUTTER_Armenian_e
const CLUTTER_Terminate_Server = C.CLUTTER_Terminate_Server
const CLUTTER_kana_KI = C.CLUTTER_kana_KI
const CLUTTER_KEY_Cyrillic_GHE = C.CLUTTER_KEY_Cyrillic_GHE
const CLUTTER_partialderivative = C.CLUTTER_partialderivative
const CLUTTER_Armenian_o = C.CLUTTER_Armenian_o
const CLUTTER_ISO_Release_Both_Margins = C.CLUTTER_ISO_Release_Both_Margins
const CLUTTER_KEY_Eogonek = C.CLUTTER_KEY_Eogonek
const CLUTTER_hebrew_zain = C.CLUTTER_hebrew_zain
const CLUTTER_KEY_Egrave = C.CLUTTER_KEY_Egrave
const CLUTTER_uhornacute = C.CLUTTER_uhornacute
const CLUTTER_KEY_Greek_UPSILONaccent = C.CLUTTER_KEY_Greek_UPSILONaccent
const CLUTTER_Hangul_SsangDikeud = C.CLUTTER_Hangul_SsangDikeud
const CLUTTER_Byelorussian_SHORTU = C.CLUTTER_Byelorussian_SHORTU
const CLUTTER_Armenian_E = C.CLUTTER_Armenian_E
const CLUTTER_Hangul_Jeonja = C.CLUTTER_Hangul_Jeonja
const CLUTTER_grave = C.CLUTTER_grave
const CLUTTER_KEY_Sinh_ssha = C.CLUTTER_KEY_Sinh_ssha
const CLUTTER_Reply = C.CLUTTER_Reply
const CLUTTER_STAGE_TYPE = C.CLUTTER_STAGE_TYPE
const CLUTTER_Hangul_J_YeorinHieuh = C.CLUTTER_Hangul_J_YeorinHieuh
const CLUTTER_Armenian_O = C.CLUTTER_Armenian_O
const CLUTTER_onesuperior = C.CLUTTER_onesuperior
const CLUTTER_AudioStop = C.CLUTTER_AudioStop
const CLUTTER_Armenian_nu = C.CLUTTER_Armenian_nu
const CLUTTER_Greek_zeta = C.CLUTTER_Greek_zeta
const CLUTTER_3270_Record = C.CLUTTER_3270_Record
const CLUTTER_KEY_ISO_Set_Margin_Right = C.CLUTTER_KEY_ISO_Set_Margin_Right
const CLUTTER_KEY_Cyrillic_io = C.CLUTTER_KEY_Cyrillic_io
const CLUTTER_KEY_Cyrillic_ie = C.CLUTTER_KEY_Cyrillic_ie
const CLUTTER_SlowKeys_Enable = C.CLUTTER_SlowKeys_Enable
const CLUTTER_KEY_enfilledsqbullet = C.CLUTTER_KEY_enfilledsqbullet
const CLUTTER_Armenian_sha = C.CLUTTER_Armenian_sha
const CLUTTER_KEY_leftshoe = C.CLUTTER_KEY_leftshoe
const CLUTTER_L4 = C.CLUTTER_L4
const CLUTTER_KEY_ordfeminine = C.CLUTTER_KEY_ordfeminine
const CLUTTER_KEY_ScrollClick = C.CLUTTER_KEY_ScrollClick
const CLUTTER_kana_KU = C.CLUTTER_kana_KU
const CLUTTER_KEY_Hangul_AraeA = C.CLUTTER_KEY_Hangul_AraeA
const CLUTTER_KEY_braille_dots_15678 = C.CLUTTER_KEY_braille_dots_15678
const CLUTTER_KEY_KbdBrightnessDown = C.CLUTTER_KEY_KbdBrightnessDown
const CLUTTER_Ncaron = C.CLUTTER_Ncaron
const CLUTTER_KEY_Greek_SIGMA = C.CLUTTER_KEY_Greek_SIGMA
const CLUTTER_braille_dots_5678 = C.CLUTTER_braille_dots_5678
const CLUTTER_KEY_ccaron = C.CLUTTER_KEY_ccaron
const CLUTTER_kana_tsu = C.CLUTTER_kana_tsu
const CLUTTER_obarred = C.CLUTTER_obarred
const CLUTTER_KEY_Ukrainian_YI = C.CLUTTER_KEY_Ukrainian_YI
const CLUTTER_KEY_Time = C.CLUTTER_KEY_Time
const CLUTTER_Kana_Shift = C.CLUTTER_Kana_Shift
const CLUTTER_L5 = C.CLUTTER_L5
const CLUTTER_KEY_Scroll_Lock = C.CLUTTER_KEY_Scroll_Lock
const CLUTTER_KEY_ebelowdot = C.CLUTTER_KEY_ebelowdot
const CLUTTER_KEY_hebrew_zade = C.CLUTTER_KEY_hebrew_zade
const CLUTTER_diamond = C.CLUTTER_diamond
const CLUTTER_KEY_Sinh_ba = C.CLUTTER_KEY_Sinh_ba
const CLUTTER_Georgian_xan = C.CLUTTER_Georgian_xan
const CLUTTER_Pointer_Button_Dflt = C.CLUTTER_Pointer_Button_Dflt
const CLUTTER_KEY_topvertsummationconnector = C.CLUTTER_KEY_topvertsummationconnector
const CLUTTER_ISO_First_Group_Lock = C.CLUTTER_ISO_First_Group_Lock
const CLUTTER_mabovedot = C.CLUTTER_mabovedot
const CLUTTER_KEY_kana_SE = C.CLUTTER_KEY_kana_SE
const CLUTTER_horizlinescan9 = C.CLUTTER_horizlinescan9
const CLUTTER_hebrew_waw = C.CLUTTER_hebrew_waw
const CLUTTER_horizlinescan5 = C.CLUTTER_horizlinescan5
const CLUTTER_horizlinescan7 = C.CLUTTER_horizlinescan7
const CLUTTER_KEY_KP_Page_Up = C.CLUTTER_KEY_KP_Page_Up
const CLUTTER_horizlinescan1 = C.CLUTTER_horizlinescan1
const CLUTTER_Arabic_meem = C.CLUTTER_Arabic_meem
const CLUTTER_horizlinescan3 = C.CLUTTER_horizlinescan3
const CLUTTER_KEY_braille_dots_1358 = C.CLUTTER_KEY_braille_dots_1358
const CLUTTER_KEY_Greek_upsilon = C.CLUTTER_KEY_Greek_upsilon
const CLUTTER_Hangul_J_Nieun = C.CLUTTER_Hangul_J_Nieun
const CLUTTER_KEY_ISO_Fast_Cursor_Right = C.CLUTTER_KEY_ISO_Fast_Cursor_Right
const CLUTTER_Icircumflex = C.CLUTTER_Icircumflex
const CLUTTER_KEY_WheelButton = C.CLUTTER_KEY_WheelButton
const CLUTTER_LogWindowTree = C.CLUTTER_LogWindowTree
const CLUTTER_braille_dots_15678 = C.CLUTTER_braille_dots_15678
const CLUTTER_numbersign = C.CLUTTER_numbersign
const CLUTTER_STEP_MODE_START = C.CLUTTER_STEP_MODE_START
const CLUTTER_Hangul_J_Rieul = C.CLUTTER_Hangul_J_Rieul
const CLUTTER_KEY_Greek_LAMDA = C.CLUTTER_KEY_Greek_LAMDA
const CLUTTER_braille_dots_23567 = C.CLUTTER_braille_dots_23567
const CLUTTER_KEY_Open = C.CLUTTER_KEY_Open
const CLUTTER_KEY_babovedot = C.CLUTTER_KEY_babovedot
const CLUTTER_KEY_Uring = C.CLUTTER_KEY_Uring
const CLUTTER_Cyrillic_be = C.CLUTTER_Cyrillic_be
const CLUTTER_KEY_braille_dots_1357 = C.CLUTTER_KEY_braille_dots_1357
const CLUTTER_GRAVITY_CENTER = C.CLUTTER_GRAVITY_CENTER
const CLUTTER_ACTOR_MAPPED = C.CLUTTER_ACTOR_MAPPED
const CLUTTER_KEY_Sinh_u = C.CLUTTER_KEY_Sinh_u
const CLUTTER_KEY_at = C.CLUTTER_KEY_at
const CLUTTER_KEY_RockerEnter = C.CLUTTER_KEY_RockerEnter
const CLUTTER_braille_dots_12467 = C.CLUTTER_braille_dots_12467
const CLUTTER_KEY_braille_dots_1578 = C.CLUTTER_KEY_braille_dots_1578
const CLUTTER_End = C.CLUTTER_End
const CLUTTER_KEY_braille_dots_368 = C.CLUTTER_KEY_braille_dots_368
const CLUTTER_braille_dots_4678 = C.CLUTTER_braille_dots_4678
const CLUTTER_KEY_Sinh_e = C.CLUTTER_KEY_Sinh_e
const CLUTTER_KEY_Sinh_a = C.CLUTTER_KEY_Sinh_a
const CLUTTER_zerosuperior = C.CLUTTER_zerosuperior
const CLUTTER_KEY_Sinh_o = C.CLUTTER_KEY_Sinh_o
const CLUTTER_KEY_odoubleacute = C.CLUTTER_KEY_odoubleacute
const CLUTTER_KEY_kana_I = C.CLUTTER_KEY_kana_I
const CLUTTER_KEY_Sinh_i = C.CLUTTER_KEY_Sinh_i
const CLUTTER_KEY_bracketleft = C.CLUTTER_KEY_bracketleft
const CLUTTER_braille_dots_13 = C.CLUTTER_braille_dots_13
const CLUTTER_KbdBrightnessUp = C.CLUTTER_KbdBrightnessUp
const CLUTTER_hebrew_taw = C.CLUTTER_hebrew_taw
const CLUTTER_colon = C.CLUTTER_colon
const CLUTTER_KEY_Find = C.CLUTTER_KEY_Find
const CLUTTER_Tabovedot = C.CLUTTER_Tabovedot
const CLUTTER_KEY_braille_dots_1246 = C.CLUTTER_KEY_braille_dots_1246
const CLUTTER_KEY_Georgian_phar = C.CLUTTER_KEY_Georgian_phar
const CLUTTER_hebrew_taf = C.CLUTTER_hebrew_taf
const CLUTTER_KEY_Arabic_noon_ghunna = C.CLUTTER_KEY_Arabic_noon_ghunna
const CLUTTER_KEY_Obarred = C.CLUTTER_KEY_Obarred
const CLUTTER_Greek_OMICRON = C.CLUTTER_Greek_OMICRON
const CLUTTER_KEY_Armenian_BEN = C.CLUTTER_KEY_Armenian_BEN
const CLUTTER_KEY_braille_dots_245678 = C.CLUTTER_KEY_braille_dots_245678
const CLUTTER_Hangul_J_SsangSios = C.CLUTTER_Hangul_J_SsangSios
const CLUTTER_KEY_uhornhook = C.CLUTTER_KEY_uhornhook
const CLUTTER_KEY_braille_dots_567 = C.CLUTTER_KEY_braille_dots_567
const CLUTTER_kana_tu = C.CLUTTER_kana_tu
const CLUTTER_KEY_Hangul_YA = C.CLUTTER_KEY_Hangul_YA
const CLUTTER_VERTEX_SHADER = C.CLUTTER_VERTEX_SHADER
const CLUTTER_KEY_Zcaron = C.CLUTTER_KEY_Zcaron
const CLUTTER_Greek_upsilon = C.CLUTTER_Greek_upsilon
const CLUTTER_sevensuperior = C.CLUTTER_sevensuperior
const CLUTTER_KEY_braille_dots_568 = C.CLUTTER_KEY_braille_dots_568
const CLUTTER_EASE_IN_BACK = C.CLUTTER_EASE_IN_BACK
const CLUTTER_KEY_braceright = C.CLUTTER_KEY_braceright
const CLUTTER_KEY_amacron = C.CLUTTER_KEY_amacron
const CLUTTER_KEY_diaeresis = C.CLUTTER_KEY_diaeresis
const CLUTTER_KEY_space = C.CLUTTER_KEY_space
const CLUTTER_KEY_Thai_maitri = C.CLUTTER_KEY_Thai_maitri
const CLUTTER_KEY_Arabic_shadda = C.CLUTTER_KEY_Arabic_shadda
const CLUTTER_Hstroke = C.CLUTTER_Hstroke
const CLUTTER_KEY_z = C.CLUTTER_KEY_z
const CLUTTER_KEY_ograve = C.CLUTTER_KEY_ograve
const CLUTTER_less = C.CLUTTER_less
const CLUTTER_KEY_Sinh_ca = C.CLUTTER_KEY_Sinh_ca
const CLUTTER_KEY_comma = C.CLUTTER_KEY_comma
const CLUTTER_KEY_Yellow = C.CLUTTER_KEY_Yellow
const CLUTTER_Thai_saraue = C.CLUTTER_Thai_saraue
const CLUTTER_KEY_botrightparens = C.CLUTTER_KEY_botrightparens
const CLUTTER_INPUT_MODE_FLOATING = C.CLUTTER_INPUT_MODE_FLOATING
const CLUTTER_Armenian_AYB = C.CLUTTER_Armenian_AYB
const CLUTTER_KEY_ohook = C.CLUTTER_KEY_ohook
const CLUTTER_3270_EraseEOF = C.CLUTTER_3270_EraseEOF
const CLUTTER_KEY_Ungrab = C.CLUTTER_KEY_Ungrab
const CLUTTER_Arabic_rreh = C.CLUTTER_Arabic_rreh
const CLUTTER_KEY_racute = C.CLUTTER_KEY_racute
const CLUTTER_kana_WA = C.CLUTTER_kana_WA
const CLUTTER_COGL = C.CLUTTER_COGL
const CLUTTER_Greek_alpha = C.CLUTTER_Greek_alpha
const CLUTTER_Sinh_jha = C.CLUTTER_Sinh_jha
const CLUTTER_KEY_braille_dots_1567 = C.CLUTTER_KEY_braille_dots_1567
const CLUTTER_KEY_braille_dots_13478 = C.CLUTTER_KEY_braille_dots_13478
const CLUTTER_Cyrillic_I_macron = C.CLUTTER_Cyrillic_I_macron
const CLUTTER_KEY_Armenian_ke = C.CLUTTER_KEY_Armenian_ke
const CLUTTER_Serbian_NJE = C.CLUTTER_Serbian_NJE
const CLUTTER_KEY_kana_tsu = C.CLUTTER_KEY_kana_tsu
const CLUTTER_R11 = C.CLUTTER_R11
const CLUTTER_R12 = C.CLUTTER_R12
const CLUTTER_Menu = C.CLUTTER_Menu
const CLUTTER_R14 = C.CLUTTER_R14
const CLUTTER_R15 = C.CLUTTER_R15
const CLUTTER_braille_dots_278 = C.CLUTTER_braille_dots_278
const CLUTTER_KEY_Hangul_J_RieulPhieuf = C.CLUTTER_KEY_Hangul_J_RieulPhieuf
const CLUTTER_COLOR_ALUMINIUM_2 = C.CLUTTER_COLOR_ALUMINIUM_2
const CLUTTER_NO_FPU = C.CLUTTER_NO_FPU
const CLUTTER_KEY_3270_Ident = C.CLUTTER_KEY_3270_Ident
const CLUTTER_CONTENT_GRAVITY_BOTTOM_RIGHT = C.CLUTTER_CONTENT_GRAVITY_BOTTOM_RIGHT
const CLUTTER_KEY_lowleftcorner = C.CLUTTER_KEY_lowleftcorner
const CLUTTER_TEXTURE_ERROR_NO_YUV = C.CLUTTER_TEXTURE_ERROR_NO_YUV
const CLUTTER_KEY_ApplicationLeft = C.CLUTTER_KEY_ApplicationLeft
const CLUTTER_yacute = C.CLUTTER_yacute
const CLUTTER_exclamdown = C.CLUTTER_exclamdown
const CLUTTER_KEY_kana_O = C.CLUTTER_KEY_kana_O
const CLUTTER_Cyrillic_che_descender = C.CLUTTER_Cyrillic_che_descender
const CLUTTER_KEY_onequarter = C.CLUTTER_KEY_onequarter
const CLUTTER_botrightsqbracket = C.CLUTTER_botrightsqbracket
const CLUTTER_KEY_Farsi_yeh = C.CLUTTER_KEY_Farsi_yeh
const CLUTTER_KEY_Hangul_Mieum = C.CLUTTER_KEY_Hangul_Mieum
const CLUTTER_KEY_c_h = C.CLUTTER_KEY_c_h
const CLUTTER_kana_CHI = C.CLUTTER_kana_CHI
const CLUTTER_Sinh_ma = C.CLUTTER_Sinh_ma
const CLUTTER_KEY_Arabic_damma = C.CLUTTER_KEY_Arabic_damma
const CLUTTER_TABLE_ALIGNMENT_END = C.CLUTTER_TABLE_ALIGNMENT_END
const CLUTTER_EASE_OUT_CUBIC = C.CLUTTER_EASE_OUT_CUBIC
const CLUTTER_KEY_Arabic_jeem = C.CLUTTER_KEY_Arabic_jeem
const CLUTTER_KEY_3270_Enter = C.CLUTTER_KEY_3270_Enter
const CLUTTER_KEY_braille_dots_123478 = C.CLUTTER_KEY_braille_dots_123478
const CLUTTER_kana_O = C.CLUTTER_kana_O
const CLUTTER_Thai_thothung = C.CLUTTER_Thai_thothung
const CLUTTER_KEY_yen = C.CLUTTER_KEY_yen
const CLUTTER_braille_dots_1256 = C.CLUTTER_braille_dots_1256
const CLUTTER_dead_belowmacron = C.CLUTTER_dead_belowmacron
const CLUTTER_KEY_AudioStop = C.CLUTTER_KEY_AudioStop
const CLUTTER_Greek_delta = C.CLUTTER_Greek_delta
const CLUTTER_Arabic_hamzaunderalef = C.CLUTTER_Arabic_hamzaunderalef
const CLUTTER_KEY_ecircumflex = C.CLUTTER_KEY_ecircumflex
const CLUTTER_KEY_ihook = C.CLUTTER_KEY_ihook
const CLUTTER_KEY_braille_dots_12368 = C.CLUTTER_KEY_braille_dots_12368
const CLUTTER_hebrew_qoph = C.CLUTTER_hebrew_qoph
const CLUTTER_KEY_ohornbelowdot = C.CLUTTER_KEY_ohornbelowdot
const CLUTTER_KEY_Thai_kokai = C.CLUTTER_KEY_Thai_kokai
const CLUTTER_Georgian_qar = C.CLUTTER_Georgian_qar
const CLUTTER_PATH_REL_CURVE_TO = C.CLUTTER_PATH_REL_CURVE_TO
const CLUTTER_Cyrillic_TSE = C.CLUTTER_Cyrillic_TSE
const CLUTTER_KEY_KP_Delete = C.CLUTTER_KEY_KP_Delete
const CLUTTER_Otilde = C.CLUTTER_Otilde
const CLUTTER_KEY_scircumflex = C.CLUTTER_KEY_scircumflex
const CLUTTER_leftt = C.CLUTTER_leftt
const CLUTTER_KEY_Thai_khokhai = C.CLUTTER_KEY_Thai_khokhai
const CLUTTER_KEY_hebrew_lamed = C.CLUTTER_KEY_hebrew_lamed
const CLUTTER_EASE_IN_ELASTIC = C.CLUTTER_EASE_IN_ELASTIC
const CLUTTER_Sinh_sa = C.CLUTTER_Sinh_sa
const CLUTTER_KEY_braille_dots_23478 = C.CLUTTER_KEY_braille_dots_23478
const CLUTTER_braille_dots_123458 = C.CLUTTER_braille_dots_123458
const CLUTTER_KEY_MonBrightnessDown = C.CLUTTER_KEY_MonBrightnessDown
const CLUTTER_Armenian_zhe = C.CLUTTER_Armenian_zhe
const CLUTTER_KEY_Pointer_DownLeft = C.CLUTTER_KEY_Pointer_DownLeft
const CLUTTER_Sinh_al = C.CLUTTER_Sinh_al
const CLUTTER_KEY_First_Virtual_Screen = C.CLUTTER_KEY_First_Virtual_Screen
const CLUTTER_F34 = C.CLUTTER_F34
const CLUTTER_KEY_Macedonia_DSE = C.CLUTTER_KEY_Macedonia_DSE
const CLUTTER_PATH_REL_MOVE_TO = C.CLUTTER_PATH_REL_MOVE_TO
const CLUTTER_KEY_Armenian_tsa = C.CLUTTER_KEY_Armenian_tsa
const CLUTTER_obelowdot = C.CLUTTER_obelowdot
const CLUTTER_KEY_dead_belowdot = C.CLUTTER_KEY_dead_belowdot
const CLUTTER_uhornhook = C.CLUTTER_uhornhook
const CLUTTER_KEY_Greek_CHI = C.CLUTTER_KEY_Greek_CHI
const CLUTTER_KEY_Armenian_tso = C.CLUTTER_KEY_Armenian_tso
const CLUTTER_Meeting = C.CLUTTER_Meeting
const CLUTTER_braille_dots_158 = C.CLUTTER_braille_dots_158
const CLUTTER_Thai_thophuthao = C.CLUTTER_Thai_thophuthao
const CLUTTER_KEY_umacron = C.CLUTTER_KEY_umacron
const CLUTTER_MODIFIER_RESERVED_14_MASK = C.CLUTTER_MODIFIER_RESERVED_14_MASK
const CLUTTER_KEY_Hangul_KiyeogSios = C.CLUTTER_KEY_Hangul_KiyeogSios
const CLUTTER_LaunchE = C.CLUTTER_LaunchE
const CLUTTER_Arabic_alef = C.CLUTTER_Arabic_alef
const CLUTTER_KEY_ISO_Next_Group = C.CLUTTER_KEY_ISO_Next_Group
const CLUTTER_braille_dots_3458 = C.CLUTTER_braille_dots_3458
const CLUTTER_KEY_telephone = C.CLUTTER_KEY_telephone
const CLUTTER_KEY_intersection = C.CLUTTER_KEY_intersection
const CLUTTER_Sinh_ai2 = C.CLUTTER_Sinh_ai2
const CLUTTER_Armenian_CHA = C.CLUTTER_Armenian_CHA
const CLUTTER_KEY_Georgian_man = C.CLUTTER_KEY_Georgian_man
const CLUTTER_KEY_Greek_iotaaccent = C.CLUTTER_KEY_Greek_iotaaccent
const CLUTTER_KEY_Greek_EPSILONaccent = C.CLUTTER_KEY_Greek_EPSILONaccent
const CLUTTER_KEY_Ecircumflextilde = C.CLUTTER_KEY_Ecircumflextilde
const CLUTTER_upleftcorner = C.CLUTTER_upleftcorner
const CLUTTER_3270_Quit = C.CLUTTER_3270_Quit
const CLUTTER_braille_dots_2458 = C.CLUTTER_braille_dots_2458
const CLUTTER_wcircumflex = C.CLUTTER_wcircumflex
const CLUTTER_KEY_Armenian_KHE = C.CLUTTER_KEY_Armenian_KHE
const CLUTTER_Cyrillic_softsign = C.CLUTTER_Cyrillic_softsign
const CLUTTER_Hangul_SunkyeongeumMieum = C.CLUTTER_Hangul_SunkyeongeumMieum
const CLUTTER_hebrew_shin = C.CLUTTER_hebrew_shin
const CLUTTER_COLOR_ORANGE_DARK = C.CLUTTER_COLOR_ORANGE_DARK
const CLUTTER_Georgian_jhan = C.CLUTTER_Georgian_jhan
const CLUTTER_KEY_dead_grave = C.CLUTTER_KEY_dead_grave
const CLUTTER_KEY_RepeatKeys_Enable = C.CLUTTER_KEY_RepeatKeys_Enable
const CLUTTER_KEY_braille_dots_1378 = C.CLUTTER_KEY_braille_dots_1378
const CLUTTER_KEY_ETH = C.CLUTTER_KEY_ETH
const CLUTTER_Terminal = C.CLUTTER_Terminal
const CLUTTER_gcedilla = C.CLUTTER_gcedilla
const CLUTTER_Thai_ru = C.CLUTTER_Thai_ru
const CLUTTER_Send = C.CLUTTER_Send
const CLUTTER_KEY_Hebrew_switch = C.CLUTTER_KEY_Hebrew_switch
const CLUTTER_KEY_fivesubscript = C.CLUTTER_KEY_fivesubscript
const CLUTTER_3270_DeleteWord = C.CLUTTER_3270_DeleteWord
const CLUTTER_NairaSign = C.CLUTTER_NairaSign
const CLUTTER_braille_dots_38 = C.CLUTTER_braille_dots_38
const CLUTTER_Arabic_dad = C.CLUTTER_Arabic_dad
const CLUTTER_Sinh_ddha = C.CLUTTER_Sinh_ddha
const CLUTTER_KEY_lcedilla = C.CLUTTER_KEY_lcedilla
const CLUTTER_Hangul_E = C.CLUTTER_Hangul_E
const CLUTTER_braille_dots_37 = C.CLUTTER_braille_dots_37
const CLUTTER_KEY_Ahook = C.CLUTTER_KEY_Ahook
const CLUTTER_voicedsound = C.CLUTTER_voicedsound
const CLUTTER_Arabic_dal = C.CLUTTER_Arabic_dal
const CLUTTER_Launch7 = C.CLUTTER_Launch7
const CLUTTER_eightsuperior = C.CLUTTER_eightsuperior
const CLUTTER_KEY_AddFavorite = C.CLUTTER_KEY_AddFavorite
const CLUTTER_Thai_yoyak = C.CLUTTER_Thai_yoyak
const CLUTTER_KEY_3270_Jump = C.CLUTTER_KEY_3270_Jump
const CLUTTER_kana_A = C.CLUTTER_kana_A
const CLUTTER_KEY_EZH = C.CLUTTER_KEY_EZH
const CLUTTER_KEY_hebrew_het = C.CLUTTER_KEY_hebrew_het
const CLUTTER_Z = C.CLUTTER_Z
const CLUTTER_ISO_Fast_Cursor_Left = C.CLUTTER_ISO_Fast_Cursor_Left
const CLUTTER_Ohorn = C.CLUTTER_Ohorn
const CLUTTER_scircumflex = C.CLUTTER_scircumflex
const CLUTTER_braille_dots_1347 = C.CLUTTER_braille_dots_1347
const CLUTTER_Armenian_men = C.CLUTTER_Armenian_men
const CLUTTER_Hangul_Kiyeog = C.CLUTTER_Hangul_Kiyeog
const CLUTTER_RELEASE_MASK = C.CLUTTER_RELEASE_MASK
const CLUTTER_ISO_Group_Latch = C.CLUTTER_ISO_Group_Latch
const CLUTTER_KEY_Thai_thothahan = C.CLUTTER_KEY_Thai_thothahan
const CLUTTER_KEY_Cyrillic_u_macron = C.CLUTTER_KEY_Cyrillic_u_macron
const CLUTTER_braille_dots_123578 = C.CLUTTER_braille_dots_123578
const CLUTTER_KEY_Thai_choching = C.CLUTTER_KEY_Thai_choching
const CLUTTER_abrevehook = C.CLUTTER_abrevehook
const CLUTTER_Greek_gamma = C.CLUTTER_Greek_gamma
const CLUTTER_KEY_braille_dots_45 = C.CLUTTER_KEY_braille_dots_45
const CLUTTER_KEY_braille_dots_46 = C.CLUTTER_KEY_braille_dots_46
const CLUTTER_KEY_Arabic_tehmarbuta = C.CLUTTER_KEY_Arabic_tehmarbuta
const CLUTTER_KEY_braille_dots_48 = C.CLUTTER_KEY_braille_dots_48
const CLUTTER_ccedilla = C.CLUTTER_ccedilla
const CLUTTER_TABLE_ALIGNMENT_START = C.CLUTTER_TABLE_ALIGNMENT_START
const CLUTTER_braceleft = C.CLUTTER_braceleft
const CLUTTER_Sinh_jnya = C.CLUTTER_Sinh_jnya
const CLUTTER_KEY_Cyrillic_u_straight_bar = C.CLUTTER_KEY_Cyrillic_u_straight_bar
const CLUTTER_ZOOM_BOTH = C.CLUTTER_ZOOM_BOTH
const CLUTTER_hebrew_doublelowline = C.CLUTTER_hebrew_doublelowline
const CLUTTER_Macedonia_DSE = C.CLUTTER_Macedonia_DSE
const CLUTTER_KEY_femalesymbol = C.CLUTTER_KEY_femalesymbol
const CLUTTER_twofifths = C.CLUTTER_twofifths
const CLUTTER_GRAVITY_SOUTH_WEST = C.CLUTTER_GRAVITY_SOUTH_WEST
const CLUTTER_KEY_emfilledcircle = C.CLUTTER_KEY_emfilledcircle
const CLUTTER_braille_dots_2 = C.CLUTTER_braille_dots_2
const CLUTTER_KEY_Cyrillic_yeru = C.CLUTTER_KEY_Cyrillic_yeru
const CLUTTER_KEY_dead_cedilla = C.CLUTTER_KEY_dead_cedilla
const CLUTTER_KEY_Hiragana = C.CLUTTER_KEY_Hiragana
const CLUTTER_Hangul_J_Jieuj = C.CLUTTER_Hangul_J_Jieuj
const CLUTTER_braille_dots_1234678 = C.CLUTTER_braille_dots_1234678
const CLUTTER_KEY_division = C.CLUTTER_KEY_division
const CLUTTER_overline = C.CLUTTER_overline
const CLUTTER_guillemotleft = C.CLUTTER_guillemotleft
const CLUTTER_Hangul_MultipleCandidate = C.CLUTTER_Hangul_MultipleCandidate
const CLUTTER_egrave = C.CLUTTER_egrave
const CLUTTER_KEY_Sinh_ii = C.CLUTTER_KEY_Sinh_ii
const CLUTTER_Eisu_toggle = C.CLUTTER_Eisu_toggle
const CLUTTER_KEY_schwa = C.CLUTTER_KEY_schwa
const CLUTTER_KEY_ff = C.CLUTTER_KEY_ff
const CLUTTER_KEY_braille_dots_235678 = C.CLUTTER_KEY_braille_dots_235678
const CLUTTER_braille_dots_4 = C.CLUTTER_braille_dots_4
const CLUTTER_KEY_hebrew_samekh = C.CLUTTER_KEY_hebrew_samekh
const CLUTTER_KEY_Serbian_DZE = C.CLUTTER_KEY_Serbian_DZE
const CLUTTER_braille_dots_178 = C.CLUTTER_braille_dots_178
const CLUTTER_KEY_braille_dots_478 = C.CLUTTER_KEY_braille_dots_478
const CLUTTER_Hangul_Nieun = C.CLUTTER_Hangul_Nieun
const CLUTTER_KEY_abreve = C.CLUTTER_KEY_abreve
const CLUTTER_COLOR_ALUMINIUM_1 = C.CLUTTER_COLOR_ALUMINIUM_1
const CLUTTER_KEY_Thai_baht = C.CLUTTER_KEY_Thai_baht
const CLUTTER_KEY_Word = C.CLUTTER_KEY_Word
const CLUTTER_KEY_ISO_Partial_Line_Up = C.CLUTTER_KEY_ISO_Partial_Line_Up
const CLUTTER_COLOR_ALUMINIUM_5 = C.CLUTTER_COLOR_ALUMINIUM_5
const CLUTTER_COLOR_ALUMINIUM_4 = C.CLUTTER_COLOR_ALUMINIUM_4
const CLUTTER_KEY_topleftparens = C.CLUTTER_KEY_topleftparens
const CLUTTER_KEY_Cyrillic_SHCHA = C.CLUTTER_KEY_Cyrillic_SHCHA
const CLUTTER_KEY_braille_dots_2478 = C.CLUTTER_KEY_braille_dots_2478
const CLUTTER_ampersand = C.CLUTTER_ampersand
const CLUTTER_bott = C.CLUTTER_bott
const CLUTTER_COLOR_RED = C.CLUTTER_COLOR_RED
const CLUTTER_KEY_twofifths = C.CLUTTER_KEY_twofifths
const CLUTTER_ocircumflexacute = C.CLUTTER_ocircumflexacute
const CLUTTER_Greek_finalsmallsigma = C.CLUTTER_Greek_finalsmallsigma
const CLUTTER_KEY_Macedonia_kje = C.CLUTTER_KEY_Macedonia_kje
const CLUTTER_KEY_uhorngrave = C.CLUTTER_KEY_uhorngrave
const CLUTTER_Hankaku = C.CLUTTER_Hankaku
const CLUTTER_ograve = C.CLUTTER_ograve
const CLUTTER_Alt_R = C.CLUTTER_Alt_R
const CLUTTER_KEY_Arabic_noon = C.CLUTTER_KEY_Arabic_noon
const CLUTTER_PATH_MOVE_TO = C.CLUTTER_PATH_MOVE_TO
const CLUTTER_Arabic_qaf = C.CLUTTER_Arabic_qaf
const CLUTTER_KEY_oe = C.CLUTTER_KEY_oe
const CLUTTER_KEY_Greek_epsilon = C.CLUTTER_KEY_Greek_epsilon
const CLUTTER_KEY_tintegral = C.CLUTTER_KEY_tintegral
const CLUTTER_Ukrainian_ghe_with_upturn = C.CLUTTER_Ukrainian_ghe_with_upturn
const CLUTTER_ygrave = C.CLUTTER_ygrave
const CLUTTER_Alt_L = C.CLUTTER_Alt_L
const CLUTTER_dead_caron = C.CLUTTER_dead_caron
const CLUTTER_KEY_Greek_beta = C.CLUTTER_KEY_Greek_beta
const CLUTTER_KEY_Sinh_oo2 = C.CLUTTER_KEY_Sinh_oo2
const CLUTTER_Cyrillic_tse = C.CLUTTER_Cyrillic_tse
const CLUTTER_KEY_Arabic_ain = C.CLUTTER_KEY_Arabic_ain
const CLUTTER_KEY_hebrew_finalnun = C.CLUTTER_KEY_hebrew_finalnun
const CLUTTER_KEY_Xabovedot = C.CLUTTER_KEY_Xabovedot
const CLUTTER_botrightparens = C.CLUTTER_botrightparens
const CLUTTER_KEY_LogWindowTree = C.CLUTTER_KEY_LogWindowTree
const CLUTTER_INPUT_AXIS_Y = C.CLUTTER_INPUT_AXIS_Y
const CLUTTER_Arabic_farsi_yeh = C.CLUTTER_Arabic_farsi_yeh
const CLUTTER_Aring = C.CLUTTER_Aring
const CLUTTER_oacute = C.CLUTTER_oacute
const CLUTTER_KEY_Abreveacute = C.CLUTTER_KEY_Abreveacute
const CLUTTER_Back = C.CLUTTER_Back
const CLUTTER_Arabic_khah = C.CLUTTER_Arabic_khah
const CLUTTER_KEY_Greek_nu = C.CLUTTER_KEY_Greek_nu
const CLUTTER_hyphen = C.CLUTTER_hyphen
const CLUTTER_braille_dots_145 = C.CLUTTER_braille_dots_145
const CLUTTER_Cyrillic_de = C.CLUTTER_Cyrillic_de
const CLUTTER_Arabic_teh = C.CLUTTER_Arabic_teh
const CLUTTER_INPUT_NULL = C.CLUTTER_INPUT_NULL
const CLUTTER_dead_doublegrave = C.CLUTTER_dead_doublegrave
const CLUTTER_KEY_Umacron = C.CLUTTER_KEY_Umacron
const CLUTTER_hcircumflex = C.CLUTTER_hcircumflex
const CLUTTER_SNAP_EDGE_LEFT = C.CLUTTER_SNAP_EDGE_LEFT
const CLUTTER_KEY_Control_L = C.CLUTTER_KEY_Control_L
const CLUTTER_KEY_Armenian_ho = C.CLUTTER_KEY_Armenian_ho
const CLUTTER_KEY_Cyrillic_ZHE = C.CLUTTER_KEY_Cyrillic_ZHE
const CLUTTER_KEY_Armenian_hi = C.CLUTTER_KEY_Armenian_hi
const CLUTTER_KEY_Jcircumflex = C.CLUTTER_KEY_Jcircumflex
const CLUTTER_KEY_braille_dots_3456 = C.CLUTTER_KEY_braille_dots_3456
const CLUTTER_KEY_braille_dots_3457 = C.CLUTTER_KEY_braille_dots_3457
const CLUTTER_KEY_braille_dots_3458 = C.CLUTTER_KEY_braille_dots_3458
const CLUTTER_braille_dots_123678 = C.CLUTTER_braille_dots_123678
const CLUTTER_KEY_braille_dots_1568 = C.CLUTTER_KEY_braille_dots_1568
const CLUTTER_trademarkincircle = C.CLUTTER_trademarkincircle
const CLUTTER_Overlay1_Enable = C.CLUTTER_Overlay1_Enable
const CLUTTER_ISO_Partial_Line_Down = C.CLUTTER_ISO_Partial_Line_Down
const CLUTTER_KEY_Sinh_dhha = C.CLUTTER_KEY_Sinh_dhha
const CLUTTER_braille_dots_14678 = C.CLUTTER_braille_dots_14678
const CLUTTER_KEY_braille_dots_378 = C.CLUTTER_KEY_braille_dots_378
const CLUTTER_KEY_ISO_Move_Line_Up = C.CLUTTER_KEY_ISO_Move_Line_Up
const CLUTTER_KEY_Aogonek = C.CLUTTER_KEY_Aogonek
const CLUTTER_plusminus = C.CLUTTER_plusminus
const CLUTTER_Hangul_Jamo = C.CLUTTER_Hangul_Jamo
const CLUTTER_LaunchC = C.CLUTTER_LaunchC
const CLUTTER_LaunchA = C.CLUTTER_LaunchA
const CLUTTER_LaunchF = C.CLUTTER_LaunchF
const CLUTTER_braille_dots_234578 = C.CLUTTER_braille_dots_234578
const CLUTTER_Break = C.CLUTTER_Break
const CLUTTER_KEY_Control_R = C.CLUTTER_KEY_Control_R
const CLUTTER_Ebelowdot = C.CLUTTER_Ebelowdot
const CLUTTER_Launch9 = C.CLUTTER_Launch9
const CLUTTER_KEY_AudioPause = C.CLUTTER_KEY_AudioPause
const CLUTTER_WindowClear = C.CLUTTER_WindowClear
const CLUTTER_Sinh_rii = C.CLUTTER_Sinh_rii
const CLUTTER_Launch2 = C.CLUTTER_Launch2
const CLUTTER_Launch3 = C.CLUTTER_Launch3
const CLUTTER_Launch0 = C.CLUTTER_Launch0
const CLUTTER_Launch1 = C.CLUTTER_Launch1
const CLUTTER_Launch6 = C.CLUTTER_Launch6
const CLUTTER_KEY_Uhorngrave = C.CLUTTER_KEY_Uhorngrave
const CLUTTER_Launch4 = C.CLUTTER_Launch4
const CLUTTER_Launch5 = C.CLUTTER_Launch5
const CLUTTER_KEY_Armenian_ZA = C.CLUTTER_KEY_Armenian_ZA
const CLUTTER_topleftsqbracket = C.CLUTTER_topleftsqbracket
const CLUTTER_STEP_START = C.CLUTTER_STEP_START
const CLUTTER_uhornbelowdot = C.CLUTTER_uhornbelowdot
const CLUTTER_KEY_Greek_PSI = C.CLUTTER_KEY_Greek_PSI
const CLUTTER_KEY_dead_O = C.CLUTTER_KEY_dead_O
const CLUTTER_division = C.CLUTTER_division
const CLUTTER_KEY_leftradical = C.CLUTTER_KEY_leftradical
const CLUTTER_KEY_Thai_lekpaet = C.CLUTTER_KEY_Thai_lekpaet
const CLUTTER_Greek_UPSILONaccent = C.CLUTTER_Greek_UPSILONaccent
const CLUTTER_KEY_Armenian_VEV = C.CLUTTER_KEY_Armenian_VEV
const CLUTTER_KEY_eightsuperior = C.CLUTTER_KEY_eightsuperior
const CLUTTER_KEY_Greek_xi = C.CLUTTER_KEY_Greek_xi
const CLUTTER_KEY_kana_ya = C.CLUTTER_KEY_kana_ya
const CLUTTER_TEXTURE_ERROR_BAD_FORMAT = C.CLUTTER_TEXTURE_ERROR_BAD_FORMAT
const CLUTTER_KEY_dead_belowtilde = C.CLUTTER_KEY_dead_belowtilde
const CLUTTER_infinity = C.CLUTTER_infinity
const CLUTTER_KEY_braille_dots_578 = C.CLUTTER_KEY_braille_dots_578
const CLUTTER_KEY_kana_yo = C.CLUTTER_KEY_kana_yo
const CLUTTER_KEY_Sinh_pa = C.CLUTTER_KEY_Sinh_pa
const CLUTTER_Arabic_2 = C.CLUTTER_Arabic_2
const CLUTTER_KEY_kana_yu = C.CLUTTER_KEY_kana_yu
const CLUTTER_KEY_dead_abovereversedcomma = C.CLUTTER_KEY_dead_abovereversedcomma
const CLUTTER_KEY_plusminus = C.CLUTTER_KEY_plusminus
const CLUTTER_KEY_Greek_tau = C.CLUTTER_KEY_Greek_tau
const CLUTTER_Arabic_1 = C.CLUTTER_Arabic_1
const CLUTTER_KEY_AudioPrev = C.CLUTTER_KEY_AudioPrev
const CLUTTER_FRAGMENT_SHADER = C.CLUTTER_FRAGMENT_SHADER
const CLUTTER_Arabic_heh = C.CLUTTER_Arabic_heh
const CLUTTER_KEY_Tslash = C.CLUTTER_KEY_Tslash
const CLUTTER_thinspace = C.CLUTTER_thinspace
const CLUTTER_MOD5_MASK = C.CLUTTER_MOD5_MASK
