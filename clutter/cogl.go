// this file is auto-generated by gtk-go

package clutter

// #cgo pkg-config: cogl-1.0 gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <cogl/cogl.h>
/*
gboolean _cogl_bitmap_get_size_from_file(char * filename, int * width, int * height) {
	return (gboolean)cogl_bitmap_get_size_from_file((const char *)(filename), width, height);
}
void _cogl_clear(CoglColor * color, gulong buffers) {
	(void)cogl_clear((const CoglColor *)(color), (unsigned long)(buffers));
}
gboolean _cogl_color_equal(gpointer v1, gpointer v2) {
	return (gboolean)cogl_color_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
guint _cogl_double_to_uint(double value) {
	return (guint)cogl_double_to_uint(value);
}
CoglFuncPtr _cogl_get_proc_address(char * name) {
	return (CoglFuncPtr)cogl_get_proc_address((const char *)(name));
}
gboolean _cogl_matrix_equal(gpointer v1, gpointer v2) {
	return (gboolean)cogl_matrix_equal((gconstpointer)(v1), (gconstpointer)(v2));
}
void _cogl_polygon(CoglTextureVertex * vertices, guint n_vertices, gboolean use_color) {
	(void)cogl_polygon((const CoglTextureVertex *)(vertices), (unsigned int)(n_vertices), use_color);
}
int _cogl_program_get_uniform_location(CoglHandle handle, char * uniform_name) {
	return (int)cogl_program_get_uniform_location(handle, (const char *)(uniform_name));
}
void _cogl_set_fog(CoglColor * fog_color, CoglFogMode mode, float density, float z_near, float z_far) {
	(void)cogl_set_fog((const CoglColor *)(fog_color), mode, density, z_near, z_far);
}
void _cogl_set_source_color(CoglColor * color) {
	(void)cogl_set_source_color((const CoglColor *)(color));
}
void _cogl_shader_source(CoglHandle shader, char * source) {
	(void)cogl_shader_source(shader, (const char *)(source));
}
void _cogl_transform(CoglMatrix * matrix) {
	(void)cogl_transform((const CoglMatrix *)(matrix));
}
void _cogl_vertex_buffer_add(CoglHandle handle, char * attribute_name, guint8 n_components, CoglAttributeType type, gboolean normalized, guint16 stride, void * pointer) {
	(void)cogl_vertex_buffer_add(handle, (const char *)(attribute_name), n_components, type, normalized, stride, (const void *)(pointer));
}
void _cogl_vertex_buffer_delete(CoglHandle handle, char * attribute_name) {
	(void)cogl_vertex_buffer_delete(handle, (const char *)(attribute_name));
}
void _cogl_vertex_buffer_disable(CoglHandle handle, char * attribute_name) {
	(void)cogl_vertex_buffer_disable(handle, (const char *)(attribute_name));
}
void _cogl_vertex_buffer_enable(CoglHandle handle, char * attribute_name) {
	(void)cogl_vertex_buffer_enable(handle, (const char *)(attribute_name));
}
guint _cogl_vertex_buffer_get_n_vertices(CoglHandle handle) {
	return (guint)cogl_vertex_buffer_get_n_vertices(handle);
}
CoglHandle _cogl_vertex_buffer_indices_get_for_quads(guint n_indices) {
	return (CoglHandle)cogl_vertex_buffer_indices_get_for_quads((unsigned int)(n_indices));
}
CoglHandle _cogl_vertex_buffer_new(guint n_vertices) {
	return (CoglHandle)cogl_vertex_buffer_new((unsigned int)(n_vertices));
}
CoglBitmap * _cogl_bitmap_new_from_file(char * filename, void * error) {
	return (CoglBitmap *)cogl_bitmap_new_from_file((const char *)(filename), (GError **)(error));
}
CoglColor * _cogl_color_copy(CoglColor * _self_) {
	return (CoglColor *)cogl_color_copy((const CoglColor *)(_self_));
}
float _cogl_color_get_alpha(CoglColor * _self_) {
	return (float)cogl_color_get_alpha((const CoglColor *)(_self_));
}
guchar _cogl_color_get_alpha_byte(CoglColor * _self_) {
	return (guchar)cogl_color_get_alpha_byte((const CoglColor *)(_self_));
}
float _cogl_color_get_alpha_float(CoglColor * _self_) {
	return (float)cogl_color_get_alpha_float((const CoglColor *)(_self_));
}
float _cogl_color_get_blue(CoglColor * _self_) {
	return (float)cogl_color_get_blue((const CoglColor *)(_self_));
}
guchar _cogl_color_get_blue_byte(CoglColor * _self_) {
	return (guchar)cogl_color_get_blue_byte((const CoglColor *)(_self_));
}
float _cogl_color_get_blue_float(CoglColor * _self_) {
	return (float)cogl_color_get_blue_float((const CoglColor *)(_self_));
}
float _cogl_color_get_green(CoglColor * _self_) {
	return (float)cogl_color_get_green((const CoglColor *)(_self_));
}
guchar _cogl_color_get_green_byte(CoglColor * _self_) {
	return (guchar)cogl_color_get_green_byte((const CoglColor *)(_self_));
}
float _cogl_color_get_green_float(CoglColor * _self_) {
	return (float)cogl_color_get_green_float((const CoglColor *)(_self_));
}
float _cogl_color_get_red(CoglColor * _self_) {
	return (float)cogl_color_get_red((const CoglColor *)(_self_));
}
guchar _cogl_color_get_red_byte(CoglColor * _self_) {
	return (guchar)cogl_color_get_red_byte((const CoglColor *)(_self_));
}
float _cogl_color_get_red_float(CoglColor * _self_) {
	return (float)cogl_color_get_red_float((const CoglColor *)(_self_));
}
void _cogl_color_set_alpha_byte(CoglColor * _self_, guchar alpha) {
	(void)cogl_color_set_alpha_byte(_self_, (unsigned char)(alpha));
}
void _cogl_color_set_blue_byte(CoglColor * _self_, guchar blue) {
	(void)cogl_color_set_blue_byte(_self_, (unsigned char)(blue));
}
void _cogl_color_set_green_byte(CoglColor * _self_, guchar green) {
	(void)cogl_color_set_green_byte(_self_, (unsigned char)(green));
}
void _cogl_color_set_red_byte(CoglColor * _self_, guchar red) {
	(void)cogl_color_set_red_byte(_self_, (unsigned char)(red));
}
GList * _cogl_material_get_layers(CoglMaterial * _self_) {
	return (GList *)cogl_material_get_layers(_self_);
}
void _cogl_material_set_ambient(CoglMaterial * _self_, CoglColor * ambient) {
	(void)cogl_material_set_ambient(_self_, (const CoglColor *)(ambient));
}
void _cogl_material_set_ambient_and_diffuse(CoglMaterial * _self_, CoglColor * color) {
	(void)cogl_material_set_ambient_and_diffuse(_self_, (const CoglColor *)(color));
}
gboolean _cogl_material_set_blend(CoglMaterial * _self_, char * blend_string, void * error) {
	return (gboolean)cogl_material_set_blend(_self_, (const char *)(blend_string), (GError **)(error));
}
void _cogl_material_set_blend_constant(CoglMaterial * _self_, CoglColor * constant_color) {
	(void)cogl_material_set_blend_constant(_self_, (const CoglColor *)(constant_color));
}
void _cogl_material_set_color(CoglMaterial * _self_, CoglColor * color) {
	(void)cogl_material_set_color(_self_, (const CoglColor *)(color));
}
void _cogl_material_set_diffuse(CoglMaterial * _self_, CoglColor * diffuse) {
	(void)cogl_material_set_diffuse(_self_, (const CoglColor *)(diffuse));
}
void _cogl_material_set_emission(CoglMaterial * _self_, CoglColor * emission) {
	(void)cogl_material_set_emission(_self_, (const CoglColor *)(emission));
}
gboolean _cogl_material_set_layer_combine(CoglMaterial * _self_, int layer_index, char * blend_string, void * error) {
	return (gboolean)cogl_material_set_layer_combine(_self_, layer_index, (const char *)(blend_string), (GError **)(error));
}
void _cogl_material_set_layer_combine_constant(CoglMaterial * _self_, int layer_index, CoglColor * constant) {
	(void)cogl_material_set_layer_combine_constant(_self_, layer_index, (const CoglColor *)(constant));
}
void _cogl_material_set_layer_matrix(CoglMaterial * _self_, int layer_index, CoglMatrix * matrix) {
	(void)cogl_material_set_layer_matrix(_self_, layer_index, (const CoglMatrix *)(matrix));
}
gboolean _cogl_material_set_layer_point_sprite_coords_enabled(CoglMaterial * _self_, int layer_index, gboolean enable, void * error) {
	return (gboolean)cogl_material_set_layer_point_sprite_coords_enabled(_self_, layer_index, enable, (GError **)(error));
}
void _cogl_material_set_specular(CoglMaterial * _self_, CoglColor * specular) {
	(void)cogl_material_set_specular(_self_, (const CoglColor *)(specular));
}
CoglMatrix * _cogl_matrix_copy(CoglMatrix * _self_) {
	return (CoglMatrix *)cogl_matrix_copy((const CoglMatrix *)(_self_));
}
float * _cogl_matrix_get_array(CoglMatrix * _self_) {
	return (float *)cogl_matrix_get_array((const CoglMatrix *)(_self_));
}
gboolean _cogl_matrix_get_inverse(CoglMatrix * _self_, CoglMatrix * inverse) {
	return (gboolean)cogl_matrix_get_inverse((const CoglMatrix *)(_self_), inverse);
}
void _cogl_matrix_init_from_array(CoglMatrix * _self_, float * array) {
	(void)cogl_matrix_init_from_array(_self_, (const float *)(array));
}
gboolean _cogl_matrix_is_identity(CoglMatrix * _self_) {
	return (gboolean)cogl_matrix_is_identity((const CoglMatrix *)(_self_));
}
void _cogl_matrix_multiply(CoglMatrix * _self_, CoglMatrix * a, CoglMatrix * b) {
	(void)cogl_matrix_multiply(_self_, (const CoglMatrix *)(a), (const CoglMatrix *)(b));
}
CoglTexture * _cogl_texture_new_from_data(guint width, guint height, CoglTextureFlags flags, CoglPixelFormat format, CoglPixelFormat internal_format, guint rowstride, guint8 * data) {
	return (CoglTexture *)cogl_texture_new_from_data((unsigned int)(width), (unsigned int)(height), flags, format, internal_format, (unsigned int)(rowstride), (const guint8 *)(data));
}
CoglTexture * _cogl_texture_new_from_file(char * filename, CoglTextureFlags flags, CoglPixelFormat internal_format, void * error) {
	return (CoglTexture *)cogl_texture_new_from_file((const char *)(filename), flags, internal_format, (GError **)(error));
}
CoglTexture * _cogl_texture_new_with_size(guint width, guint height, CoglTextureFlags flags, CoglPixelFormat internal_format) {
	return (CoglTexture *)cogl_texture_new_with_size((unsigned int)(width), (unsigned int)(height), flags, internal_format);
}
int _cogl_texture_get_data(CoglTexture * _self_, CoglPixelFormat format, guint rowstride, guint8 * data) {
	return (int)cogl_texture_get_data(_self_, format, (unsigned int)(rowstride), data);
}
guint _cogl_texture_get_height(CoglTexture * _self_) {
	return (guint)cogl_texture_get_height(_self_);
}
guint _cogl_texture_get_width(CoglTexture * _self_) {
	return (guint)cogl_texture_get_width(_self_);
}
gboolean _cogl_texture_set_region(CoglTexture * _self_, int src_x, int src_y, int dst_x, int dst_y, guint dst_width, guint dst_height, int width, int height, CoglPixelFormat format, guint rowstride, guint8 * data) {
	return (gboolean)cogl_texture_set_region(_self_, src_x, src_y, dst_x, dst_y, (unsigned int)(dst_width), (unsigned int)(dst_height), width, height, format, (unsigned int)(rowstride), (const guint8 *)(data));
}
*/
import "C"
import (
	"unsafe"
)

type Offscreen C.CoglOffscreen
type Material C.CoglMaterial
type Matrix C.CoglMatrix
type MaterialLayer C.CoglMaterialLayer
type TextureVertex C.CoglTextureVertex
type CoglPath C.CoglPath
type Bitmap C.CoglBitmap
type Quaternion C.CoglQuaternion
type CoglTexture C.CoglTexture
type CoglColor C.CoglColor
type Euler C.CoglEuler
func AngleCos(angle C.CoglAngle) (_return_ C.CoglFixed) {
	_return_ = C.cogl_angle_cos(angle)
	return
}

func AngleSin(angle C.CoglAngle) (_return_ C.CoglFixed) {
	_return_ = C.cogl_angle_sin(angle)
	return
}

func AngleTan(angle C.CoglAngle) (_return_ C.CoglFixed) {
	_return_ = C.cogl_angle_tan(angle)
	return
}

func BeginGl() () {
	C.cogl_begin_gl()
	return
}

func BitmapErrorQuark() (_return_ C.GQuark) {
	_return_ = C.cogl_bitmap_error_quark()
	return
}

func BitmapGetSizeFromFile(filename string) (_go__return__ bool, width C.int, height C.int) {
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.char)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	var _return_ C.gboolean
	_return_ = C._cogl_bitmap_get_size_from_file(_cgo_filename_, &width, &height)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func BlendStringErrorQuark() (_return_ C.GQuark) {
	_return_ = C.cogl_blend_string_error_quark()
	return
}

func Clear(color *CoglColor, buffers uint64) () {
	_cgo_color_ := (*C.CoglColor)(unsafe.Pointer(color))
	_cgo_buffers_ := (C.gulong)(buffers)
	C._cogl_clear(_cgo_color_, _cgo_buffers_)
	return
}

func ClipPop() () {
	C.cogl_clip_pop()
	return
}

func ClipPushFromPathPreserve() () {
	C.cogl_clip_push_from_path_preserve()
	return
}

func ClipPushRectangle(x0 C.float, y0 C.float, x1 C.float, y1 C.float) () {
	C.cogl_clip_push_rectangle(x0, y0, x1, y1)
	return
}

func ClipPushWindowRectangle(x_offset C.int, y_offset C.int, width C.int, height C.int) () {
	C.cogl_clip_push_window_rectangle(x_offset, y_offset, width, height)
	return
}

func ColorEqual(v1 C.gpointer, v2 C.gpointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._cogl_color_equal(v1, v2)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func CreateProgram() (_return_ C.CoglHandle) {
	_return_ = C.cogl_create_program()
	return
}

func CreateShader(shader_type C.CoglShaderType) (_return_ C.CoglHandle) {
	_return_ = C.cogl_create_shader(shader_type)
	return
}

func DisableFog() () {
	C.cogl_disable_fog()
	return
}

func DoubleToFixed(value C.double) (_return_ C.CoglFixed) {
	_return_ = C.cogl_double_to_fixed(value)
	return
}

func DoubleToInt(value C.double) (_return_ C.int) {
	_return_ = C.cogl_double_to_int(value)
	return
}

func DoubleToUint(value C.double) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._cogl_double_to_uint(value)
	_go__return__ = (uint)(_return_)
	return
}

func EndGl() () {
	C.cogl_end_gl()
	return
}

func FeaturesAvailable(features C.CoglFeatureFlags) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_features_available(features)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func Flush() () {
	C.cogl_flush()
	return
}

func Frustum(left C.float, right C.float, bottom C.float, top C.float, z_near C.float, z_far C.float) () {
	C.cogl_frustum(left, right, bottom, top, z_near, z_far)
	return
}

func GetBackfaceCullingEnabled() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_get_backface_culling_enabled()
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func GetBitmasks() (red C.int, green C.int, blue C.int, alpha C.int) {
	C.cogl_get_bitmasks(&red, &green, &blue, &alpha)
	return
}

func GetFeatures() (_return_ C.CoglFeatureFlags) {
	_return_ = C.cogl_get_features()
	return
}

func GetModelviewMatrix() (matrix *Matrix) {
	var _allocated_matrix_ C.CoglMatrix
	C.cogl_get_modelview_matrix(&_allocated_matrix_)
	matrix = (*Matrix)(unsafe.Pointer(&_allocated_matrix_))
	return
}

func CoglGetOptionGroup() (_return_ *C.GOptionGroup) {
	_return_ = C.cogl_get_option_group()
	return
}

func GetPath() (_go__return__ *CoglPath) {
	var _return_ *C.CoglPath
	_return_ = C.cogl_get_path()
	_go__return__ = (*CoglPath)(unsafe.Pointer(_return_))
	return
}

func GetProcAddress(name string) (_return_ C.CoglFuncPtr) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.char)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._cogl_get_proc_address(_cgo_name_)
	return
}

func GetProjectionMatrix() (matrix *Matrix) {
	var _allocated_matrix_ C.CoglMatrix
	C.cogl_get_projection_matrix(&_allocated_matrix_)
	matrix = (*Matrix)(unsafe.Pointer(&_allocated_matrix_))
	return
}

func GetSource() (_return_ unsafe.Pointer) {
	_return_ = C.cogl_get_source()
	return
}

func HandleGetType() (_return_ C.GType) {
	_return_ = C.cogl_handle_get_type()
	return
}

func HandleRef(handle C.CoglHandle) (_return_ C.CoglHandle) {
	_return_ = C.cogl_handle_ref(handle)
	return
}

func HandleUnref(handle C.CoglHandle) () {
	C.cogl_handle_unref(handle)
	return
}

func IsBitmap(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_bitmap(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsMaterial(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_material(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsOffscreen(object unsafe.Pointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_offscreen(object)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsPath(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_path(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsProgram(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_program(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsShader(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_shader(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsTexture(object unsafe.Pointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_texture(object)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsVertexBuffer(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_vertex_buffer(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func IsVertexBufferIndices(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_is_vertex_buffer_indices(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func MatrixEqual(v1 C.gpointer, v2 C.gpointer) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._cogl_matrix_equal(v1, v2)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ObjectRef(object unsafe.Pointer) (_return_ unsafe.Pointer) {
	_return_ = C.cogl_object_ref(object)
	return
}

func ObjectUnref(object unsafe.Pointer) () {
	C.cogl_object_unref(object)
	return
}

func Ortho(left C.float, right C.float, bottom C.float, top C.float, near C.float, far C.float) () {
	C.cogl_ortho(left, right, bottom, top, near, far)
	return
}

func PathArc(center_x C.float, center_y C.float, radius_x C.float, radius_y C.float, angle_1 C.float, angle_2 C.float) () {
	C.cogl_path_arc(center_x, center_y, radius_x, radius_y, angle_1, angle_2)
	return
}

func PathClose() () {
	C.cogl_path_close()
	return
}

func PathCurveTo(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float, x_3 C.float, y_3 C.float) () {
	C.cogl_path_curve_to(x_1, y_1, x_2, y_2, x_3, y_3)
	return
}

func PathEllipse(center_x C.float, center_y C.float, radius_x C.float, radius_y C.float) () {
	C.cogl_path_ellipse(center_x, center_y, radius_x, radius_y)
	return
}

func PathFill() () {
	C.cogl_path_fill()
	return
}

func PathFillPreserve() () {
	C.cogl_path_fill_preserve()
	return
}

func PathGetFillRule() (_return_ C.CoglPathFillRule) {
	_return_ = C.cogl_path_get_fill_rule()
	return
}

func PathLine(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float) () {
	C.cogl_path_line(x_1, y_1, x_2, y_2)
	return
}

func PathLineTo(x C.float, y C.float) () {
	C.cogl_path_line_to(x, y)
	return
}

func PathMoveTo(x C.float, y C.float) () {
	C.cogl_path_move_to(x, y)
	return
}

func CoglPathNew() () {
	C.cogl_path_new()
	return
}

func PathRectangle(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float) () {
	C.cogl_path_rectangle(x_1, y_1, x_2, y_2)
	return
}

func PathRelCurveTo(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float, x_3 C.float, y_3 C.float) () {
	C.cogl_path_rel_curve_to(x_1, y_1, x_2, y_2, x_3, y_3)
	return
}

func PathRelLineTo(x C.float, y C.float) () {
	C.cogl_path_rel_line_to(x, y)
	return
}

func PathRelMoveTo(x C.float, y C.float) () {
	C.cogl_path_rel_move_to(x, y)
	return
}

func PathRoundRectangle(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float, radius C.float, arc_step C.float) () {
	C.cogl_path_round_rectangle(x_1, y_1, x_2, y_2, radius, arc_step)
	return
}

func PathSetFillRule(fill_rule C.CoglPathFillRule) () {
	C.cogl_path_set_fill_rule(fill_rule)
	return
}

func PathStroke() () {
	C.cogl_path_stroke()
	return
}

func PathStrokePreserve() () {
	C.cogl_path_stroke_preserve()
	return
}

func CoglPerspective(fovy C.float, aspect C.float, z_near C.float, z_far C.float) () {
	C.cogl_perspective(fovy, aspect, z_near, z_far)
	return
}

func Polygon(vertices *TextureVertex, n_vertices uint, use_color bool) () {
	_cgo_vertices_ := (*C.CoglTextureVertex)(unsafe.Pointer(vertices))
	_cgo_n_vertices_ := (C.guint)(n_vertices)
	_cgo_use_color_ := (C.gboolean)(C.FALSE)
	if use_color { _cgo_use_color_ = (C.gboolean)(C.TRUE) }
	C._cogl_polygon(_cgo_vertices_, _cgo_n_vertices_, _cgo_use_color_)
	return
}

func PopFramebuffer() () {
	C.cogl_pop_framebuffer()
	return
}

func PopMatrix() () {
	C.cogl_pop_matrix()
	return
}

func PopSource() () {
	C.cogl_pop_source()
	return
}

func ProgramAttachShader(program_handle C.CoglHandle, shader_handle C.CoglHandle) () {
	C.cogl_program_attach_shader(program_handle, shader_handle)
	return
}

func ProgramGetUniformLocation(handle C.CoglHandle, uniform_name string) (_return_ C.int) {
	_cstring_uniform_name_ := C.CString(uniform_name)
	_cgo_uniform_name_ := (*C.char)(unsafe.Pointer(_cstring_uniform_name_))
	defer C.free(unsafe.Pointer(_cstring_uniform_name_))
	_return_ = C._cogl_program_get_uniform_location(handle, _cgo_uniform_name_)
	return
}

func ProgramLink(handle C.CoglHandle) () {
	C.cogl_program_link(handle)
	return
}

func ProgramSetUniform1f(program C.CoglHandle, uniform_location C.int, value C.float) () {
	C.cogl_program_set_uniform_1f(program, uniform_location, value)
	return
}

func ProgramSetUniform1i(program C.CoglHandle, uniform_location C.int, value C.int) () {
	C.cogl_program_set_uniform_1i(program, uniform_location, value)
	return
}

func ProgramUse(handle C.CoglHandle) () {
	C.cogl_program_use(handle)
	return
}

func PushFramebuffer(buffer *C.CoglFramebuffer) () {
	C.cogl_push_framebuffer(buffer)
	return
}

func PushMatrix() () {
	C.cogl_push_matrix()
	return
}

func PushSource(material unsafe.Pointer) () {
	C.cogl_push_source(material)
	return
}

func ReadPixels(x C.int, y C.int, width C.int, height C.int, source C.CoglReadPixelsFlags, format C.CoglPixelFormat, pixels *C.guint8) () {
	C.cogl_read_pixels(x, y, width, height, source, format, pixels)
	return
}

func Rectangle(x_1 C.float, y_1 C.float, x_2 C.float, y_2 C.float) () {
	C.cogl_rectangle(x_1, y_1, x_2, y_2)
	return
}

func RectangleWithTextureCoords(x1 C.float, y1 C.float, x2 C.float, y2 C.float, tx1 C.float, ty1 C.float, tx2 C.float, ty2 C.float) () {
	C.cogl_rectangle_with_texture_coords(x1, y1, x2, y2, tx1, ty1, tx2, ty2)
	return
}

func Rotate(angle C.float, x C.float, y C.float, z C.float) () {
	C.cogl_rotate(angle, x, y, z)
	return
}

func Scale(x C.float, y C.float, z C.float) () {
	C.cogl_scale(x, y, z)
	return
}

func SetBackfaceCullingEnabled(setting bool) () {
	_cgo_setting_ := (C.gboolean)(C.FALSE)
	if setting { _cgo_setting_ = (C.gboolean)(C.TRUE) }
	C.cogl_set_backface_culling_enabled(_cgo_setting_)
	return
}

func SetFog(fog_color *CoglColor, mode C.CoglFogMode, density C.float, z_near C.float, z_far C.float) () {
	_cgo_fog_color_ := (*C.CoglColor)(unsafe.Pointer(fog_color))
	C._cogl_set_fog(_cgo_fog_color_, mode, density, z_near, z_far)
	return
}

func SetFramebuffer(buffer *C.CoglFramebuffer) () {
	C.cogl_set_framebuffer(buffer)
	return
}

func SetModelviewMatrix(matrix *Matrix) () {
	_cgo_matrix_ := (*C.CoglMatrix)(unsafe.Pointer(matrix))
	C.cogl_set_modelview_matrix(_cgo_matrix_)
	return
}

func SetPath(path *CoglPath) () {
	_cgo_path_ := (*C.CoglPath)(unsafe.Pointer(path))
	C.cogl_set_path(_cgo_path_)
	return
}

func SetProjectionMatrix(matrix *Matrix) () {
	_cgo_matrix_ := (*C.CoglMatrix)(unsafe.Pointer(matrix))
	C.cogl_set_projection_matrix(_cgo_matrix_)
	return
}

func SetSource(material unsafe.Pointer) () {
	C.cogl_set_source(material)
	return
}

func SetSourceColor(color *CoglColor) () {
	_cgo_color_ := (*C.CoglColor)(unsafe.Pointer(color))
	C._cogl_set_source_color(_cgo_color_)
	return
}

func SetSourceColor4f(red C.float, green C.float, blue C.float, alpha C.float) () {
	C.cogl_set_source_color4f(red, green, blue, alpha)
	return
}

func SetSourceColor4ub(red uint8, green uint8, blue uint8, alpha uint8) () {
	_cgo_red_ := (C.guint8)(red)
	_cgo_green_ := (C.guint8)(green)
	_cgo_blue_ := (C.guint8)(blue)
	_cgo_alpha_ := (C.guint8)(alpha)
	C.cogl_set_source_color4ub(_cgo_red_, _cgo_green_, _cgo_blue_, _cgo_alpha_)
	return
}

func SetSourceTexture(texture *CoglTexture) () {
	_cgo_texture_ := (*C.CoglTexture)(unsafe.Pointer(texture))
	C.cogl_set_source_texture(_cgo_texture_)
	return
}

func SetViewport(x C.int, y C.int, width C.int, height C.int) () {
	C.cogl_set_viewport(x, y, width, height)
	return
}

func ShaderCompile(handle C.CoglHandle) () {
	C.cogl_shader_compile(handle)
	return
}

func ShaderGetInfoLog(handle C.CoglHandle) (_go__return__ string) {
	var _return_ *C.char
	_return_ = C.cogl_shader_get_info_log(handle)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ShaderGetType(handle C.CoglHandle) (_return_ C.CoglShaderType) {
	_return_ = C.cogl_shader_get_type(handle)
	return
}

func ShaderIsCompiled(handle C.CoglHandle) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_shader_is_compiled(handle)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ShaderSource(shader C.CoglHandle, source string) () {
	_cstring_source_ := C.CString(source)
	_cgo_source_ := (*C.char)(unsafe.Pointer(_cstring_source_))
	defer C.free(unsafe.Pointer(_cstring_source_))
	C._cogl_shader_source(shader, _cgo_source_)
	return
}

func Sqrti(x C.int) (_return_ C.int) {
	_return_ = C.cogl_sqrti(x)
	return
}

func CoglTextureErrorQuark() (_return_ C.GQuark) {
	_return_ = C.cogl_texture_error_quark()
	return
}

func Transform(matrix *Matrix) () {
	_cgo_matrix_ := (*C.CoglMatrix)(unsafe.Pointer(matrix))
	C._cogl_transform(_cgo_matrix_)
	return
}

func Translate(x C.float, y C.float, z C.float) () {
	C.cogl_translate(x, y, z)
	return
}

func VertexBufferAdd(handle C.CoglHandle, attribute_name string, n_components uint8, type_ C.CoglAttributeType, normalized bool, stride uint16, pointer unsafe.Pointer) () {
	_cgo_n_components_ := (C.guint8)(n_components)
	_cgo_stride_ := (C.guint16)(stride)
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.char)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	_cgo_normalized_ := (C.gboolean)(C.FALSE)
	if normalized { _cgo_normalized_ = (C.gboolean)(C.TRUE) }
	C._cogl_vertex_buffer_add(handle, _cgo_attribute_name_, _cgo_n_components_, type_, _cgo_normalized_, _cgo_stride_, pointer)
	return
}

func VertexBufferDelete(handle C.CoglHandle, attribute_name string) () {
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.char)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	C._cogl_vertex_buffer_delete(handle, _cgo_attribute_name_)
	return
}

func VertexBufferDisable(handle C.CoglHandle, attribute_name string) () {
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.char)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	C._cogl_vertex_buffer_disable(handle, _cgo_attribute_name_)
	return
}

func VertexBufferDraw(handle C.CoglHandle, mode C.CoglVerticesMode, first C.int, count C.int) () {
	C.cogl_vertex_buffer_draw(handle, mode, first, count)
	return
}

func VertexBufferDrawElements(handle C.CoglHandle, mode C.CoglVerticesMode, indices C.CoglHandle, min_index C.int, max_index C.int, indices_offset C.int, count C.int) () {
	C.cogl_vertex_buffer_draw_elements(handle, mode, indices, min_index, max_index, indices_offset, count)
	return
}

func VertexBufferEnable(handle C.CoglHandle, attribute_name string) () {
	_cstring_attribute_name_ := C.CString(attribute_name)
	_cgo_attribute_name_ := (*C.char)(unsafe.Pointer(_cstring_attribute_name_))
	defer C.free(unsafe.Pointer(_cstring_attribute_name_))
	C._cogl_vertex_buffer_enable(handle, _cgo_attribute_name_)
	return
}

func VertexBufferGetNVertices(handle C.CoglHandle) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._cogl_vertex_buffer_get_n_vertices(handle)
	_go__return__ = (uint)(_return_)
	return
}

func VertexBufferIndicesGetForQuads(n_indices uint) (_return_ C.CoglHandle) {
	_cgo_n_indices_ := (C.guint)(n_indices)
	_return_ = C._cogl_vertex_buffer_indices_get_for_quads(_cgo_n_indices_)
	return
}

func VertexBufferIndicesGetType(indices C.CoglHandle) (_return_ C.CoglIndicesType) {
	_return_ = C.cogl_vertex_buffer_indices_get_type(indices)
	return
}

func VertexBufferNew(n_vertices uint) (_return_ C.CoglHandle) {
	_cgo_n_vertices_ := (C.guint)(n_vertices)
	_return_ = C._cogl_vertex_buffer_new(_cgo_n_vertices_)
	return
}

func VertexBufferSubmit(handle C.CoglHandle) () {
	C.cogl_vertex_buffer_submit(handle)
	return
}

func BitmapNewFromFile(filename string) (_go__return__ *Bitmap, _error_ unsafe.Pointer) {
	var _return_ *C.CoglBitmap
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.char)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._cogl_bitmap_new_from_file(_cgo_filename_, _error_)
	_go__return__ = (*Bitmap)(unsafe.Pointer(_return_))
	return
}

func CoglColorNew() (_go__return__ *CoglColor) {
	var _return_ *C.CoglColor
	_return_ = C.cogl_color_new()
	_go__return__ = (*CoglColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CoglColor) Copy() (_go__return__ *CoglColor) {
	var _return_ *C.CoglColor
	_return_ = C._cogl_color_copy((*C.CoglColor)(_self_))
	_go__return__ = (*CoglColor)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CoglColor) Free() () {
	C.cogl_color_free((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetAlpha() (_return_ C.float) {
	_return_ = C._cogl_color_get_alpha((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetAlphaByte() (_go__return__ byte) {
	var _return_ C.guchar
	_return_ = C._cogl_color_get_alpha_byte((*C.CoglColor)(_self_))
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *CoglColor) GetAlphaFloat() (_return_ C.float) {
	_return_ = C._cogl_color_get_alpha_float((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetBlue() (_return_ C.float) {
	_return_ = C._cogl_color_get_blue((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetBlueByte() (_go__return__ byte) {
	var _return_ C.guchar
	_return_ = C._cogl_color_get_blue_byte((*C.CoglColor)(_self_))
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *CoglColor) GetBlueFloat() (_return_ C.float) {
	_return_ = C._cogl_color_get_blue_float((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetGreen() (_return_ C.float) {
	_return_ = C._cogl_color_get_green((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetGreenByte() (_go__return__ byte) {
	var _return_ C.guchar
	_return_ = C._cogl_color_get_green_byte((*C.CoglColor)(_self_))
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *CoglColor) GetGreenFloat() (_return_ C.float) {
	_return_ = C._cogl_color_get_green_float((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetRed() (_return_ C.float) {
	_return_ = C._cogl_color_get_red((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) GetRedByte() (_go__return__ byte) {
	var _return_ C.guchar
	_return_ = C._cogl_color_get_red_byte((*C.CoglColor)(_self_))
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *CoglColor) GetRedFloat() (_return_ C.float) {
	_return_ = C._cogl_color_get_red_float((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) InitFrom4f(red C.float, green C.float, blue C.float, alpha C.float) () {
	C.cogl_color_init_from_4f((*C.CoglColor)(_self_), red, green, blue, alpha)
	return
}

func (_self_ *CoglColor) InitFrom4fv(color_array *C.float) () {
	C.cogl_color_init_from_4fv((*C.CoglColor)(_self_), color_array)
	return
}

func (_self_ *CoglColor) InitFrom4ub(red uint8, green uint8, blue uint8, alpha uint8) () {
	_cgo_red_ := (C.guint8)(red)
	_cgo_green_ := (C.guint8)(green)
	_cgo_blue_ := (C.guint8)(blue)
	_cgo_alpha_ := (C.guint8)(alpha)
	C.cogl_color_init_from_4ub((*C.CoglColor)(_self_), _cgo_red_, _cgo_green_, _cgo_blue_, _cgo_alpha_)
	return
}

func (_self_ *CoglColor) Premultiply() () {
	C.cogl_color_premultiply((*C.CoglColor)(_self_))
	return
}

func (_self_ *CoglColor) SetAlpha(alpha C.float) () {
	C.cogl_color_set_alpha((*C.CoglColor)(_self_), alpha)
	return
}

func (_self_ *CoglColor) SetAlphaByte(alpha byte) () {
	_cgo_alpha_ := (C.guchar)(alpha)
	C._cogl_color_set_alpha_byte((*C.CoglColor)(_self_), _cgo_alpha_)
	return
}

func (_self_ *CoglColor) SetAlphaFloat(alpha C.float) () {
	C.cogl_color_set_alpha_float((*C.CoglColor)(_self_), alpha)
	return
}

func (_self_ *CoglColor) SetBlue(blue C.float) () {
	C.cogl_color_set_blue((*C.CoglColor)(_self_), blue)
	return
}

func (_self_ *CoglColor) SetBlueByte(blue byte) () {
	_cgo_blue_ := (C.guchar)(blue)
	C._cogl_color_set_blue_byte((*C.CoglColor)(_self_), _cgo_blue_)
	return
}

func (_self_ *CoglColor) SetBlueFloat(blue C.float) () {
	C.cogl_color_set_blue_float((*C.CoglColor)(_self_), blue)
	return
}

func (_self_ *CoglColor) SetGreen(green C.float) () {
	C.cogl_color_set_green((*C.CoglColor)(_self_), green)
	return
}

func (_self_ *CoglColor) SetGreenByte(green byte) () {
	_cgo_green_ := (C.guchar)(green)
	C._cogl_color_set_green_byte((*C.CoglColor)(_self_), _cgo_green_)
	return
}

func (_self_ *CoglColor) SetGreenFloat(green C.float) () {
	C.cogl_color_set_green_float((*C.CoglColor)(_self_), green)
	return
}

func (_self_ *CoglColor) SetRed(red C.float) () {
	C.cogl_color_set_red((*C.CoglColor)(_self_), red)
	return
}

func (_self_ *CoglColor) SetRedByte(red byte) () {
	_cgo_red_ := (C.guchar)(red)
	C._cogl_color_set_red_byte((*C.CoglColor)(_self_), _cgo_red_)
	return
}

func (_self_ *CoglColor) SetRedFloat(red C.float) () {
	C.cogl_color_set_red_float((*C.CoglColor)(_self_), red)
	return
}

func (_self_ *CoglColor) Unpremultiply() () {
	C.cogl_color_unpremultiply((*C.CoglColor)(_self_))
	return
}

func MaterialNew() (_go__return__ *Material) {
	var _return_ *C.CoglMaterial
	_return_ = C.cogl_material_new()
	_go__return__ = (*Material)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Material) Copy() (_go__return__ *Material) {
	var _return_ *C.CoglMaterial
	_return_ = C.cogl_material_copy((*C.CoglMaterial)(_self_))
	_go__return__ = (*Material)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Material) GetAmbient(ambient *CoglColor) () {
	_cgo_ambient_ := (*C.CoglColor)(unsafe.Pointer(ambient))
	C.cogl_material_get_ambient((*C.CoglMaterial)(_self_), _cgo_ambient_)
	return
}

func (_self_ *Material) GetColor() (color *CoglColor) {
	var _allocated_color_ C.CoglColor
	C.cogl_material_get_color((*C.CoglMaterial)(_self_), &_allocated_color_)
	color = (*CoglColor)(unsafe.Pointer(&_allocated_color_))
	return
}

func (_self_ *Material) GetDiffuse(diffuse *CoglColor) () {
	_cgo_diffuse_ := (*C.CoglColor)(unsafe.Pointer(diffuse))
	C.cogl_material_get_diffuse((*C.CoglMaterial)(_self_), _cgo_diffuse_)
	return
}

func (_self_ *Material) GetEmission(emission *CoglColor) () {
	_cgo_emission_ := (*C.CoglColor)(unsafe.Pointer(emission))
	C.cogl_material_get_emission((*C.CoglMaterial)(_self_), _cgo_emission_)
	return
}

func (_self_ *Material) GetLayerPointSpriteCoordsEnabled(layer_index C.int) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_material_get_layer_point_sprite_coords_enabled((*C.CoglMaterial)(_self_), layer_index)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Material) GetLayerWrapModeP(layer_index C.int) (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_get_layer_wrap_mode_p((*C.CoglMaterial)(_self_), layer_index)
	return
}

func (_self_ *Material) GetLayerWrapModeS(layer_index C.int) (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_get_layer_wrap_mode_s((*C.CoglMaterial)(_self_), layer_index)
	return
}

func (_self_ *Material) GetLayerWrapModeT(layer_index C.int) (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_get_layer_wrap_mode_t((*C.CoglMaterial)(_self_), layer_index)
	return
}

func (_self_ *Material) GetLayers() (_return_ *C.GList) {
	_return_ = C._cogl_material_get_layers((*C.CoglMaterial)(_self_))
	return
}

func (_self_ *Material) GetNLayers() (_return_ C.int) {
	_return_ = C.cogl_material_get_n_layers((*C.CoglMaterial)(_self_))
	return
}

func (_self_ *Material) GetPointSize() (_return_ C.float) {
	_return_ = C.cogl_material_get_point_size((*C.CoglMaterial)(_self_))
	return
}

func (_self_ *Material) GetShininess() (_return_ C.float) {
	_return_ = C.cogl_material_get_shininess((*C.CoglMaterial)(_self_))
	return
}

func (_self_ *Material) GetSpecular(specular *CoglColor) () {
	_cgo_specular_ := (*C.CoglColor)(unsafe.Pointer(specular))
	C.cogl_material_get_specular((*C.CoglMaterial)(_self_), _cgo_specular_)
	return
}

func (_self_ *Material) GetUserProgram() (_return_ C.CoglHandle) {
	_return_ = C.cogl_material_get_user_program((*C.CoglMaterial)(_self_))
	return
}

func (_self_ *Material) RemoveLayer(layer_index C.int) () {
	C.cogl_material_remove_layer((*C.CoglMaterial)(_self_), layer_index)
	return
}

func (_self_ *Material) SetAlphaTestFunction(alpha_func C.CoglMaterialAlphaFunc, alpha_reference C.float) () {
	C.cogl_material_set_alpha_test_function((*C.CoglMaterial)(_self_), alpha_func, alpha_reference)
	return
}

func (_self_ *Material) SetAmbient(ambient *CoglColor) () {
	_cgo_ambient_ := (*C.CoglColor)(unsafe.Pointer(ambient))
	C._cogl_material_set_ambient((*C.CoglMaterial)(_self_), _cgo_ambient_)
	return
}

func (_self_ *Material) SetAmbientAndDiffuse(color *CoglColor) () {
	_cgo_color_ := (*C.CoglColor)(unsafe.Pointer(color))
	C._cogl_material_set_ambient_and_diffuse((*C.CoglMaterial)(_self_), _cgo_color_)
	return
}

func (_self_ *Material) SetBlend(blend_string string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_blend_string_ := C.CString(blend_string)
	_cgo_blend_string_ := (*C.char)(unsafe.Pointer(_cstring_blend_string_))
	defer C.free(unsafe.Pointer(_cstring_blend_string_))
	var _return_ C.gboolean
	_return_ = C._cogl_material_set_blend((*C.CoglMaterial)(_self_), _cgo_blend_string_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Material) SetBlendConstant(constant_color *CoglColor) () {
	_cgo_constant_color_ := (*C.CoglColor)(unsafe.Pointer(constant_color))
	C._cogl_material_set_blend_constant((*C.CoglMaterial)(_self_), _cgo_constant_color_)
	return
}

func (_self_ *Material) SetColor(color *CoglColor) () {
	_cgo_color_ := (*C.CoglColor)(unsafe.Pointer(color))
	C._cogl_material_set_color((*C.CoglMaterial)(_self_), _cgo_color_)
	return
}

func (_self_ *Material) SetColor4f(red C.float, green C.float, blue C.float, alpha C.float) () {
	C.cogl_material_set_color4f((*C.CoglMaterial)(_self_), red, green, blue, alpha)
	return
}

func (_self_ *Material) SetColor4ub(red uint8, green uint8, blue uint8, alpha uint8) () {
	_cgo_red_ := (C.guint8)(red)
	_cgo_green_ := (C.guint8)(green)
	_cgo_blue_ := (C.guint8)(blue)
	_cgo_alpha_ := (C.guint8)(alpha)
	C.cogl_material_set_color4ub((*C.CoglMaterial)(_self_), _cgo_red_, _cgo_green_, _cgo_blue_, _cgo_alpha_)
	return
}

func (_self_ *Material) SetDiffuse(diffuse *CoglColor) () {
	_cgo_diffuse_ := (*C.CoglColor)(unsafe.Pointer(diffuse))
	C._cogl_material_set_diffuse((*C.CoglMaterial)(_self_), _cgo_diffuse_)
	return
}

func (_self_ *Material) SetEmission(emission *CoglColor) () {
	_cgo_emission_ := (*C.CoglColor)(unsafe.Pointer(emission))
	C._cogl_material_set_emission((*C.CoglMaterial)(_self_), _cgo_emission_)
	return
}

func (_self_ *Material) SetLayer(layer_index C.int, texture C.CoglHandle) () {
	C.cogl_material_set_layer((*C.CoglMaterial)(_self_), layer_index, texture)
	return
}

func (_self_ *Material) SetLayerCombine(layer_index C.int, blend_string string) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cstring_blend_string_ := C.CString(blend_string)
	_cgo_blend_string_ := (*C.char)(unsafe.Pointer(_cstring_blend_string_))
	defer C.free(unsafe.Pointer(_cstring_blend_string_))
	var _return_ C.gboolean
	_return_ = C._cogl_material_set_layer_combine((*C.CoglMaterial)(_self_), layer_index, _cgo_blend_string_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Material) SetLayerCombineConstant(layer_index C.int, constant *CoglColor) () {
	_cgo_constant_ := (*C.CoglColor)(unsafe.Pointer(constant))
	C._cogl_material_set_layer_combine_constant((*C.CoglMaterial)(_self_), layer_index, _cgo_constant_)
	return
}

func (_self_ *Material) SetLayerFilters(layer_index C.int, min_filter C.CoglMaterialFilter, mag_filter C.CoglMaterialFilter) () {
	C.cogl_material_set_layer_filters((*C.CoglMaterial)(_self_), layer_index, min_filter, mag_filter)
	return
}

func (_self_ *Material) SetLayerMatrix(layer_index C.int, matrix *Matrix) () {
	_cgo_matrix_ := (*C.CoglMatrix)(unsafe.Pointer(matrix))
	C._cogl_material_set_layer_matrix((*C.CoglMaterial)(_self_), layer_index, _cgo_matrix_)
	return
}

func (_self_ *Material) SetLayerPointSpriteCoordsEnabled(layer_index C.int, enable bool) (_go__return__ bool, _error_ unsafe.Pointer) {
	_cgo_enable_ := (C.gboolean)(C.FALSE)
	if enable { _cgo_enable_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._cogl_material_set_layer_point_sprite_coords_enabled((*C.CoglMaterial)(_self_), layer_index, _cgo_enable_, _error_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Material) SetLayerWrapMode(layer_index C.int, mode C.CoglMaterialWrapMode) () {
	C.cogl_material_set_layer_wrap_mode((*C.CoglMaterial)(_self_), layer_index, mode)
	return
}

func (_self_ *Material) SetLayerWrapModeP(layer_index C.int, mode C.CoglMaterialWrapMode) () {
	C.cogl_material_set_layer_wrap_mode_p((*C.CoglMaterial)(_self_), layer_index, mode)
	return
}

func (_self_ *Material) SetLayerWrapModeS(layer_index C.int, mode C.CoglMaterialWrapMode) () {
	C.cogl_material_set_layer_wrap_mode_s((*C.CoglMaterial)(_self_), layer_index, mode)
	return
}

func (_self_ *Material) SetLayerWrapModeT(layer_index C.int, mode C.CoglMaterialWrapMode) () {
	C.cogl_material_set_layer_wrap_mode_t((*C.CoglMaterial)(_self_), layer_index, mode)
	return
}

func (_self_ *Material) SetPointSize(point_size C.float) () {
	C.cogl_material_set_point_size((*C.CoglMaterial)(_self_), point_size)
	return
}

func (_self_ *Material) SetShininess(shininess C.float) () {
	C.cogl_material_set_shininess((*C.CoglMaterial)(_self_), shininess)
	return
}

func (_self_ *Material) SetSpecular(specular *CoglColor) () {
	_cgo_specular_ := (*C.CoglColor)(unsafe.Pointer(specular))
	C._cogl_material_set_specular((*C.CoglMaterial)(_self_), _cgo_specular_)
	return
}

func (_self_ *Material) SetUserProgram(program C.CoglHandle) () {
	C.cogl_material_set_user_program((*C.CoglMaterial)(_self_), program)
	return
}

func (_self_ *MaterialLayer) GetMagFilter() (_return_ C.CoglMaterialFilter) {
	_return_ = C.cogl_material_layer_get_mag_filter((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetMinFilter() (_return_ C.CoglMaterialFilter) {
	_return_ = C.cogl_material_layer_get_min_filter((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetTexture() (_return_ C.CoglHandle) {
	_return_ = C.cogl_material_layer_get_texture((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetType() (_return_ C.CoglMaterialLayerType) {
	_return_ = C.cogl_material_layer_get_type((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetWrapModeP() (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_layer_get_wrap_mode_p((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetWrapModeS() (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_layer_get_wrap_mode_s((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *MaterialLayer) GetWrapModeT() (_return_ C.CoglMaterialWrapMode) {
	_return_ = C.cogl_material_layer_get_wrap_mode_t((*C.CoglMaterialLayer)(_self_))
	return
}

func (_self_ *Matrix) Copy() (_go__return__ *Matrix) {
	var _return_ *C.CoglMatrix
	_return_ = C._cogl_matrix_copy((*C.CoglMatrix)(_self_))
	_go__return__ = (*Matrix)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Matrix) Free() () {
	C.cogl_matrix_free((*C.CoglMatrix)(_self_))
	return
}

func (_self_ *Matrix) Frustum(left C.float, right C.float, bottom C.float, top C.float, z_near C.float, z_far C.float) () {
	C.cogl_matrix_frustum((*C.CoglMatrix)(_self_), left, right, bottom, top, z_near, z_far)
	return
}

func (_self_ *Matrix) GetArray() (_return_ *C.float) {
	_return_ = C._cogl_matrix_get_array((*C.CoglMatrix)(_self_))
	return
}

func (_self_ *Matrix) GetInverse() (_go__return__ bool, inverse *Matrix) {
	var _allocated_inverse_ C.CoglMatrix
	var _return_ C.gboolean
	_return_ = C._cogl_matrix_get_inverse((*C.CoglMatrix)(_self_), &_allocated_inverse_)
	inverse = (*Matrix)(unsafe.Pointer(&_allocated_inverse_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Matrix) InitFromArray(array *C.float) () {
	C._cogl_matrix_init_from_array((*C.CoglMatrix)(_self_), array)
	return
}

func (_self_ *Matrix) InitIdentity() () {
	C.cogl_matrix_init_identity((*C.CoglMatrix)(_self_))
	return
}

func (_self_ *Matrix) IsIdentity() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._cogl_matrix_is_identity((*C.CoglMatrix)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Matrix) LookAt(eye_position_x C.float, eye_position_y C.float, eye_position_z C.float, object_x C.float, object_y C.float, object_z C.float, world_up_x C.float, world_up_y C.float, world_up_z C.float) () {
	C.cogl_matrix_look_at((*C.CoglMatrix)(_self_), eye_position_x, eye_position_y, eye_position_z, object_x, object_y, object_z, world_up_x, world_up_y, world_up_z)
	return
}

func (_self_ *Matrix) Multiply(a *Matrix, b *Matrix) () {
	_cgo_a_ := (*C.CoglMatrix)(unsafe.Pointer(a))
	_cgo_b_ := (*C.CoglMatrix)(unsafe.Pointer(b))
	C._cogl_matrix_multiply((*C.CoglMatrix)(_self_), _cgo_a_, _cgo_b_)
	return
}

func (_self_ *Matrix) Perspective(fov_y C.float, aspect C.float, z_near C.float, z_far C.float) () {
	C.cogl_matrix_perspective((*C.CoglMatrix)(_self_), fov_y, aspect, z_near, z_far)
	return
}

func (_self_ *Matrix) Rotate(angle C.float, x C.float, y C.float, z C.float) () {
	C.cogl_matrix_rotate((*C.CoglMatrix)(_self_), angle, x, y, z)
	return
}

func (_self_ *Matrix) Scale(sx C.float, sy C.float, sz C.float) () {
	C.cogl_matrix_scale((*C.CoglMatrix)(_self_), sx, sy, sz)
	return
}

func (_self_ *Matrix) Translate(x C.float, y C.float, z C.float) () {
	C.cogl_matrix_translate((*C.CoglMatrix)(_self_), x, y, z)
	return
}

func (_self_ *Matrix) Transpose() () {
	C.cogl_matrix_transpose((*C.CoglMatrix)(_self_))
	return
}

func OffscreenNewToTexture(texture *CoglTexture) (_go__return__ *Offscreen) {
	_cgo_texture_ := (*C.CoglTexture)(unsafe.Pointer(texture))
	var _return_ *C.CoglOffscreen
	_return_ = C.cogl_offscreen_new_to_texture(_cgo_texture_)
	_go__return__ = (*Offscreen)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CoglPath) Copy() (_go__return__ *CoglPath) {
	var _return_ *C.CoglPath
	_return_ = C.cogl_path_copy((*C.CoglPath)(_self_))
	_go__return__ = (*CoglPath)(unsafe.Pointer(_return_))
	return
}

func TextureNewFromBitmap(bitmap *Bitmap, flags C.CoglTextureFlags, internal_format C.CoglPixelFormat) (_go__return__ *CoglTexture) {
	_cgo_bitmap_ := (*C.CoglBitmap)(unsafe.Pointer(bitmap))
	var _return_ *C.CoglTexture
	_return_ = C.cogl_texture_new_from_bitmap(_cgo_bitmap_, flags, internal_format)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func TextureNewFromData(width uint, height uint, flags C.CoglTextureFlags, format C.CoglPixelFormat, internal_format C.CoglPixelFormat, rowstride uint, data *C.guint8) (_go__return__ *CoglTexture) {
	var _return_ *C.CoglTexture
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	_cgo_rowstride_ := (C.guint)(rowstride)
	_return_ = C._cogl_texture_new_from_data(_cgo_width_, _cgo_height_, flags, format, internal_format, _cgo_rowstride_, data)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func TextureNewFromFile(filename string, flags C.CoglTextureFlags, internal_format C.CoglPixelFormat) (_go__return__ *CoglTexture, _error_ unsafe.Pointer) {
	var _return_ *C.CoglTexture
	_cstring_filename_ := C.CString(filename)
	_cgo_filename_ := (*C.char)(unsafe.Pointer(_cstring_filename_))
	defer C.free(unsafe.Pointer(_cstring_filename_))
	_return_ = C._cogl_texture_new_from_file(_cgo_filename_, flags, internal_format, _error_)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func TextureNewFromForeign(gl_handle C.GLuint, gl_target C.GLenum, width C.GLuint, height C.GLuint, x_pot_waste C.GLuint, y_pot_waste C.GLuint, format C.CoglPixelFormat) (_go__return__ *CoglTexture) {
	var _return_ *C.CoglTexture
	_return_ = C.cogl_texture_new_from_foreign(gl_handle, gl_target, width, height, x_pot_waste, y_pot_waste, format)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func TextureNewWithSize(width uint, height uint, flags C.CoglTextureFlags, internal_format C.CoglPixelFormat) (_go__return__ *CoglTexture) {
	var _return_ *C.CoglTexture
	_cgo_width_ := (C.guint)(width)
	_cgo_height_ := (C.guint)(height)
	_return_ = C._cogl_texture_new_with_size(_cgo_width_, _cgo_height_, flags, internal_format)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CoglTexture) GetData(format C.CoglPixelFormat, rowstride uint, data *C.guint8) (_return_ C.int) {
	_cgo_rowstride_ := (C.guint)(rowstride)
	_return_ = C._cogl_texture_get_data((*C.CoglTexture)(_self_), format, _cgo_rowstride_, data)
	return
}

func (_self_ *CoglTexture) GetFormat() (_return_ C.CoglPixelFormat) {
	_return_ = C.cogl_texture_get_format((*C.CoglTexture)(_self_))
	return
}

func (_self_ *CoglTexture) GetGlTexture() (_go__return__ bool, out_gl_handle *C.GLuint, out_gl_target *C.GLenum) {
	var _return_ C.gboolean
	_return_ = C.cogl_texture_get_gl_texture((*C.CoglTexture)(_self_), out_gl_handle, out_gl_target)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *CoglTexture) GetHeight() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._cogl_texture_get_height((*C.CoglTexture)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CoglTexture) GetMaxWaste() (_return_ C.int) {
	_return_ = C.cogl_texture_get_max_waste((*C.CoglTexture)(_self_))
	return
}

func (_self_ *CoglTexture) GetWidth() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._cogl_texture_get_width((*C.CoglTexture)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *CoglTexture) IsSliced() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.cogl_texture_is_sliced((*C.CoglTexture)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *CoglTexture) NewFromSubTexture(sub_x C.int, sub_y C.int, sub_width C.int, sub_height C.int) (_go__return__ *CoglTexture) {
	var _return_ *C.CoglTexture
	_return_ = C.cogl_texture_new_from_sub_texture((*C.CoglTexture)(_self_), sub_x, sub_y, sub_width, sub_height)
	_go__return__ = (*CoglTexture)(unsafe.Pointer(_return_))
	return
}

func (_self_ *CoglTexture) SetRegion(src_x C.int, src_y C.int, dst_x C.int, dst_y C.int, dst_width uint, dst_height uint, width C.int, height C.int, format C.CoglPixelFormat, rowstride uint, data *C.guint8) (_go__return__ bool) {
	_cgo_dst_width_ := (C.guint)(dst_width)
	_cgo_dst_height_ := (C.guint)(dst_height)
	_cgo_rowstride_ := (C.guint)(rowstride)
	var _return_ C.gboolean
	_return_ = C._cogl_texture_set_region((*C.CoglTexture)(_self_), src_x, src_y, dst_x, dst_y, _cgo_dst_width_, _cgo_dst_height_, width, height, format, _cgo_rowstride_, data)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

const COGL_DEPTH_TEST_FUNCTION_GREATER = C.COGL_DEPTH_TEST_FUNCTION_GREATER
const COGL_SHADER_TYPE_VERTEX = C.COGL_SHADER_TYPE_VERTEX
const COGL_MATERIAL_FILTER_NEAREST_MIPMAP_LINEAR = C.COGL_MATERIAL_FILTER_NEAREST_MIPMAP_LINEAR
const COGL_FEATURE_SHADERS_GLSL = C.COGL_FEATURE_SHADERS_GLSL
const COGL_COLOR_MASK_BLUE = C.COGL_COLOR_MASK_BLUE
const COGL_FEATURE_VBOS = C.COGL_FEATURE_VBOS
const COGL_FIXED_EPSILON = C.COGL_FIXED_EPSILON
const COGL_VERTICES_MODE_LINES = C.COGL_VERTICES_MODE_LINES
const COGL_DEPTH_TEST_FUNCTION_LESS = C.COGL_DEPTH_TEST_FUNCTION_LESS
const COGL_MATERIAL_FILTER_LINEAR_MIPMAP_NEAREST = C.COGL_MATERIAL_FILTER_LINEAR_MIPMAP_NEAREST
const COGL_BLEND_STRING_ERROR_ARGUMENT_PARSE_ERROR = C.COGL_BLEND_STRING_ERROR_ARGUMENT_PARSE_ERROR
const COGL_COLOR_MASK_ALPHA = C.COGL_COLOR_MASK_ALPHA
const COGL_PIXEL_FORMAT_BGRA_1010102 = C.COGL_PIXEL_FORMAT_BGRA_1010102
const COGL_BITMAP_ERROR_FAILED = C.COGL_BITMAP_ERROR_FAILED
const COGL_MATERIAL_ALPHA_FUNC_LEQUAL = C.COGL_MATERIAL_ALPHA_FUNC_LEQUAL
const COGL_PIXEL_FORMAT_RGBA_4444_PRE = C.COGL_PIXEL_FORMAT_RGBA_4444_PRE
const COGL_MATERIAL_ALPHA_FUNC_GREATER = C.COGL_MATERIAL_ALPHA_FUNC_GREATER
const COGL_PIXEL_FORMAT_ARGB_8888_PRE = C.COGL_PIXEL_FORMAT_ARGB_8888_PRE
const COGL_BLEND_STRING_ERROR_PARSE_ERROR = C.COGL_BLEND_STRING_ERROR_PARSE_ERROR
const COGL_BGR_BIT = C.COGL_BGR_BIT
const COGL_TEXTURE_TYPE_RECTANGLE = C.COGL_TEXTURE_TYPE_RECTANGLE
const COGL_DEPTH_TEST_FUNCTION_NOTEQUAL = C.COGL_DEPTH_TEST_FUNCTION_NOTEQUAL
const COGL_FEATURE_TEXTURE_NPOT_MIPMAP = C.COGL_FEATURE_TEXTURE_NPOT_MIPMAP
const COGL_PIXEL_FORMAT_BGR_888 = C.COGL_PIXEL_FORMAT_BGR_888
const COGL_SHADER_TYPE_FRAGMENT = C.COGL_SHADER_TYPE_FRAGMENT
const COGL_FEATURE_OFFSCREEN_MULTISAMPLE = C.COGL_FEATURE_OFFSCREEN_MULTISAMPLE
const COGL_OFFSCREEN_BUFFER = C.COGL_OFFSCREEN_BUFFER
const COGL_FOG_MODE_EXPONENTIAL = C.COGL_FOG_MODE_EXPONENTIAL
const COGL_TEXTURE_NO_AUTO_MIPMAP = C.COGL_TEXTURE_NO_AUTO_MIPMAP
const COGL_FEATURE_PBOS = C.COGL_FEATURE_PBOS
const COGL_WINSYS_FEATURE_MULTIPLE_ONSCREEN = C.COGL_WINSYS_FEATURE_MULTIPLE_ONSCREEN
const COGL_DEPTH_TEST_FUNCTION_ALWAYS = C.COGL_DEPTH_TEST_FUNCTION_ALWAYS
const COGL_PIXEL_FORMAT_BGRA_8888 = C.COGL_PIXEL_FORMAT_BGRA_8888
const COGL_VERTICES_MODE_TRIANGLES = C.COGL_VERTICES_MODE_TRIANGLES
const COGL_PATH_FILL_RULE_EVEN_ODD = C.COGL_PATH_FILL_RULE_EVEN_ODD
const COGL_MATERIAL_FILTER_NEAREST_MIPMAP_NEAREST = C.COGL_MATERIAL_FILTER_NEAREST_MIPMAP_NEAREST
const COGL_FIXED_0_5 = C.COGL_FIXED_0_5
const COGL_BUFFER_BIT_DEPTH = C.COGL_BUFFER_BIT_DEPTH
const COGL_ATTRIBUTE_TYPE_FLOAT = C.COGL_ATTRIBUTE_TYPE_FLOAT
const COGL_FEATURE_MAP_BUFFER_FOR_READ = C.COGL_FEATURE_MAP_BUFFER_FOR_READ
const COGL_FEATURE_OFFSCREEN = C.COGL_FEATURE_OFFSCREEN
const COGL_WINSYS_FEATURE_N_FEATURES = C.COGL_WINSYS_FEATURE_N_FEATURES
const COGL_MATERIAL_ALPHA_FUNC_NEVER = C.COGL_MATERIAL_ALPHA_FUNC_NEVER
const COGL_WINSYS_FEATURE_SWAP_THROTTLE = C.COGL_WINSYS_FEATURE_SWAP_THROTTLE
const COGL_SQRTI_ARG_10_PERCENT = C.COGL_SQRTI_ARG_10_PERCENT
const COGL_BITMAP_ERROR_CORRUPT_IMAGE = C.COGL_BITMAP_ERROR_CORRUPT_IMAGE
const COGL_FIXED_2_PI = C.COGL_FIXED_2_PI
const COGL_BITMAP_ERROR_UNKNOWN_TYPE = C.COGL_BITMAP_ERROR_UNKNOWN_TYPE
const COGL_MATERIAL_FILTER_LINEAR = C.COGL_MATERIAL_FILTER_LINEAR
const COGL_BUFFER_BIT_STENCIL = C.COGL_BUFFER_BIT_STENCIL
const COGL_PIXEL_FORMAT_ARGB_2101010 = C.COGL_PIXEL_FORMAT_ARGB_2101010
const COGL_PIXEL_FORMAT_RGBA_8888_PRE = C.COGL_PIXEL_FORMAT_RGBA_8888_PRE
const COGL_VERTICES_MODE_TRIANGLE_STRIP = C.COGL_VERTICES_MODE_TRIANGLE_STRIP
const COGL_PIXEL_FORMAT_RGBA_1010102_PRE = C.COGL_PIXEL_FORMAT_RGBA_1010102_PRE
const COGL_FIXED_PI_4 = C.COGL_FIXED_PI_4
const COGL_WINDOW_BUFFER = C.COGL_WINDOW_BUFFER
const COGL_AFIRST_BIT = C.COGL_AFIRST_BIT
const COGL_FIXED_PI_2 = C.COGL_FIXED_PI_2
const COGL_FEATURE_TEXTURE_3D = C.COGL_FEATURE_TEXTURE_3D
const COGL_FEATURE_TEXTURE_NPOT = C.COGL_FEATURE_TEXTURE_NPOT
const COGL_FEATURE_TEXTURE_NPOT_BASIC = C.COGL_FEATURE_TEXTURE_NPOT_BASIC
const COGL_MATERIAL_ALPHA_FUNC_LESS = C.COGL_MATERIAL_ALPHA_FUNC_LESS
const COGL_BLEND_STRING_ERROR_GPU_UNSUPPORTED_ERROR = C.COGL_BLEND_STRING_ERROR_GPU_UNSUPPORTED_ERROR
const COGL_MATERIAL_WRAP_MODE_CLAMP_TO_EDGE = C.COGL_MATERIAL_WRAP_MODE_CLAMP_TO_EDGE
const COGL_MATERIAL_ALPHA_FUNC_GEQUAL = C.COGL_MATERIAL_ALPHA_FUNC_GEQUAL
const COGL_FIXED_MIN = C.COGL_FIXED_MIN
const COGL_WINSYS_FEATURE_SWAP_REGION = C.COGL_WINSYS_FEATURE_SWAP_REGION
const COGL_ERROR_NO_MEMORY = C.COGL_ERROR_NO_MEMORY
const COGL_MATERIAL_FILTER_LINEAR_MIPMAP_LINEAR = C.COGL_MATERIAL_FILTER_LINEAR_MIPMAP_LINEAR
const COGL_DEPTH_TEST_FUNCTION_EQUAL = C.COGL_DEPTH_TEST_FUNCTION_EQUAL
const COGL_TEXTURE_ERROR_BAD_PARAMETER = C.COGL_TEXTURE_ERROR_BAD_PARAMETER
const COGL_COLOR_MASK_NONE = C.COGL_COLOR_MASK_NONE
const COGL_FEATURE_OFFSCREEN_BLIT = C.COGL_FEATURE_OFFSCREEN_BLIT
const COGL_PREMULT_BIT = C.COGL_PREMULT_BIT
const COGL_WINSYS_FEATURE_SWAP_BUFFERS_EVENT = C.COGL_WINSYS_FEATURE_SWAP_BUFFERS_EVENT
const COGL_PIXEL_FORMAT_ABGR_2101010_PRE = C.COGL_PIXEL_FORMAT_ABGR_2101010_PRE
const COGL_FIXED_MAX = C.COGL_FIXED_MAX
const COGL_MATERIAL_WRAP_MODE_AUTOMATIC = C.COGL_MATERIAL_WRAP_MODE_AUTOMATIC
const COGL_PIXEL_FORMAT_RGBA_5551_PRE = C.COGL_PIXEL_FORMAT_RGBA_5551_PRE
const COGL_INDICES_TYPE_UNSIGNED_INT = C.COGL_INDICES_TYPE_UNSIGNED_INT
const COGL_FEATURE_STENCIL_BUFFER = C.COGL_FEATURE_STENCIL_BUFFER
const COGL_FEATURE_POINT_SPRITE = C.COGL_FEATURE_POINT_SPRITE
const COGL_FEATURE_MAP_BUFFER_FOR_WRITE = C.COGL_FEATURE_MAP_BUFFER_FOR_WRITE
const COGL_FEATURE_DEPTH_RANGE = C.COGL_FEATURE_DEPTH_RANGE
const COGL_PIXEL_FORMAT_RGB_888 = C.COGL_PIXEL_FORMAT_RGB_888
const COGL_DEPTH_TEST_FUNCTION_GEQUAL = C.COGL_DEPTH_TEST_FUNCTION_GEQUAL
const COGL_MATERIAL_ALPHA_FUNC_ALWAYS = C.COGL_MATERIAL_ALPHA_FUNC_ALWAYS
const COGL_FEATURE_ONSCREEN_MULTIPLE = C.COGL_FEATURE_ONSCREEN_MULTIPLE
const COGL_PATH_FILL_RULE_NON_ZERO = C.COGL_PATH_FILL_RULE_NON_ZERO
const COGL_FIXED_BITS = C.COGL_FIXED_BITS
const COGL_FEATURE_TEXTURE_NPOT_REPEAT = C.COGL_FEATURE_TEXTURE_NPOT_REPEAT
const COGL_TEXTURE_ERROR_SIZE = C.COGL_TEXTURE_ERROR_SIZE
const COGL_FEATURE_TEXTURE_YUV = C.COGL_FEATURE_TEXTURE_YUV
const COGL_FILTER_CONTINUE = C.COGL_FILTER_CONTINUE
const COGL_TEXTURE_TYPE_2D = C.COGL_TEXTURE_TYPE_2D
const COGL_WINSYS_FEATURE_TEXTURE_FROM_PIXMAP = C.COGL_WINSYS_FEATURE_TEXTURE_FROM_PIXMAP
const COGL_READ_PIXELS_COLOR_BUFFER = C.COGL_READ_PIXELS_COLOR_BUFFER
const COGL_SQRTI_ARG_MAX = C.COGL_SQRTI_ARG_MAX
const COGL_TEXTURE_ERROR_FORMAT = C.COGL_TEXTURE_ERROR_FORMAT
const COGL_INDICES_TYPE_UNSIGNED_SHORT = C.COGL_INDICES_TYPE_UNSIGNED_SHORT
const COGL_FIXED_PI = C.COGL_FIXED_PI
const COGL_WINSYS_FEATURE_SWAP_REGION_THROTTLE = C.COGL_WINSYS_FEATURE_SWAP_REGION_THROTTLE
const COGL_PIXEL_FORMAT_ABGR_8888 = C.COGL_PIXEL_FORMAT_ABGR_8888
const COGL_A_BIT = C.COGL_A_BIT
const COGL_SQRTI_ARG_5_PERCENT = C.COGL_SQRTI_ARG_5_PERCENT
const COGL_BUFFER_BIT_COLOR = C.COGL_BUFFER_BIT_COLOR
const COGL_TEXTURE_ERROR_TYPE = C.COGL_TEXTURE_ERROR_TYPE
const COGL_PIXEL_FORMAT_RGB_565 = C.COGL_PIXEL_FORMAT_RGB_565
const COGL_PIXEL_FORMAT_RGBA_8888 = C.COGL_PIXEL_FORMAT_RGBA_8888
const COGL_ERROR_UNSUPPORTED = C.COGL_ERROR_UNSUPPORTED
const COGL_MATERIAL_ALPHA_FUNC_NOTEQUAL = C.COGL_MATERIAL_ALPHA_FUNC_NOTEQUAL
const COGL_COLOR_MASK_RED = C.COGL_COLOR_MASK_RED
const COGL_PIXEL_FORMAT_RGBA_5551 = C.COGL_PIXEL_FORMAT_RGBA_5551
const COGL_FEATURE_SHADERS_ARBFP = C.COGL_FEATURE_SHADERS_ARBFP
const COGL_TEXTURE_TYPE_3D = C.COGL_TEXTURE_TYPE_3D
const COGL_FEATURE_TEXTURE_READ_PIXELS = C.COGL_FEATURE_TEXTURE_READ_PIXELS
const COGL_FOG_MODE_LINEAR = C.COGL_FOG_MODE_LINEAR
const COGL_PIXEL_FORMAT_ARGB_2101010_PRE = C.COGL_PIXEL_FORMAT_ARGB_2101010_PRE
const COGL_VERTICES_MODE_LINE_LOOP = C.COGL_VERTICES_MODE_LINE_LOOP
const COGL_VERTICES_MODE_TRIANGLE_FAN = C.COGL_VERTICES_MODE_TRIANGLE_FAN
const COGL_ATTRIBUTE_TYPE_SHORT = C.COGL_ATTRIBUTE_TYPE_SHORT
const COGL_VERTICES_MODE_LINE_STRIP = C.COGL_VERTICES_MODE_LINE_STRIP
const COGL_PIXEL_FORMAT_RGBA_4444 = C.COGL_PIXEL_FORMAT_RGBA_4444
const COGL_DEPTH_TEST_FUNCTION_NEVER = C.COGL_DEPTH_TEST_FUNCTION_NEVER
const COGL_FIXED_Q = C.COGL_FIXED_Q
const COGL_VERTICES_MODE_POINTS = C.COGL_VERTICES_MODE_POINTS
const COGL_PIXEL_FORMAT_ARGB_8888 = C.COGL_PIXEL_FORMAT_ARGB_8888
const COGL_WINSYS_FEATURE_VBLANK_COUNTER = C.COGL_WINSYS_FEATURE_VBLANK_COUNTER
const COGL_RENDERER_ERROR_NOT_FOUND = C.COGL_RENDERER_ERROR_NOT_FOUND
const COGL_PIXEL_FORMAT_ABGR_8888_PRE = C.COGL_PIXEL_FORMAT_ABGR_8888_PRE
const COGL_ATTRIBUTE_TYPE_UNSIGNED_SHORT = C.COGL_ATTRIBUTE_TYPE_UNSIGNED_SHORT
const COGL_PIXEL_FORMAT_BGRA_8888_PRE = C.COGL_PIXEL_FORMAT_BGRA_8888_PRE
const COGL_WINSYS_FEATURE_SWAP_REGION_SYNCHRONIZED = C.COGL_WINSYS_FEATURE_SWAP_REGION_SYNCHRONIZED
const COGL_FOG_MODE_EXPONENTIAL_SQUARED = C.COGL_FOG_MODE_EXPONENTIAL_SQUARED
const COGL_FILTER_REMOVE = C.COGL_FILTER_REMOVE
const COGL_WINDING_COUNTER_CLOCKWISE = C.COGL_WINDING_COUNTER_CLOCKWISE
const COGL_MATERIAL_ALPHA_FUNC_EQUAL = C.COGL_MATERIAL_ALPHA_FUNC_EQUAL
const COGL_FEATURE_UNSIGNED_INT_INDICES = C.COGL_FEATURE_UNSIGNED_INT_INDICES
const COGL_PIXEL_FORMAT_RGBA_1010102 = C.COGL_PIXEL_FORMAT_RGBA_1010102
const COGL_TEXTURE_NO_ATLAS = C.COGL_TEXTURE_NO_ATLAS
const COGL_BLEND_STRING_ERROR_INVALID_ERROR = C.COGL_BLEND_STRING_ERROR_INVALID_ERROR
const COGL_MATERIAL_FILTER_NEAREST = C.COGL_MATERIAL_FILTER_NEAREST
const COGL_PIXEL_FORMAT_YUV = C.COGL_PIXEL_FORMAT_YUV
const COGL_ATTRIBUTE_TYPE_BYTE = C.COGL_ATTRIBUTE_TYPE_BYTE
const COGL_PIXEL_FORMAT_ABGR_2101010 = C.COGL_PIXEL_FORMAT_ABGR_2101010
const COGL_TEXTURE_NONE = C.COGL_TEXTURE_NONE
const COGL_MATERIAL_LAYER_TYPE_TEXTURE = C.COGL_MATERIAL_LAYER_TYPE_TEXTURE
const COGL_WINDING_CLOCKWISE = C.COGL_WINDING_CLOCKWISE
const COGL_COLOR_MASK_GREEN = C.COGL_COLOR_MASK_GREEN
const COGL_DEPTH_TEST_FUNCTION_LEQUAL = C.COGL_DEPTH_TEST_FUNCTION_LEQUAL
const COGL_PIXEL_FORMAT_ANY = C.COGL_PIXEL_FORMAT_ANY
const COGL_PIXEL_FORMAT_BGRA_1010102_PRE = C.COGL_PIXEL_FORMAT_BGRA_1010102_PRE
const COGL_PIXEL_FORMAT_A_8 = C.COGL_PIXEL_FORMAT_A_8
const COGL_COLOR_MASK_ALL = C.COGL_COLOR_MASK_ALL
const COGL_INDICES_TYPE_UNSIGNED_BYTE = C.COGL_INDICES_TYPE_UNSIGNED_BYTE
const COGL_MATERIAL_WRAP_MODE_REPEAT = C.COGL_MATERIAL_WRAP_MODE_REPEAT
const COGL_FEATURE_FOUR_CLIP_PLANES = C.COGL_FEATURE_FOUR_CLIP_PLANES
const COGL_TEXTURE_MAX_WASTE = C.COGL_TEXTURE_MAX_WASTE
const COGL_PIXEL_FORMAT_G_8 = C.COGL_PIXEL_FORMAT_G_8
const COGL_RADIANS_TO_DEGREES = C.COGL_RADIANS_TO_DEGREES
const COGL_ATTRIBUTE_TYPE_UNSIGNED_BYTE = C.COGL_ATTRIBUTE_TYPE_UNSIGNED_BYTE
const COGL_FIXED_1 = C.COGL_FIXED_1
const COGL_TEXTURE_NO_SLICING = C.COGL_TEXTURE_NO_SLICING
const COGL_FEATURE_TEXTURE_RECTANGLE = C.COGL_FEATURE_TEXTURE_RECTANGLE
const COGL_WINSYS_FEATURE_VBLANK_WAIT = C.COGL_WINSYS_FEATURE_VBLANK_WAIT
const COGL_RENDERER_ERROR_XLIB_DISPLAY_OPEN = C.COGL_RENDERER_ERROR_XLIB_DISPLAY_OPEN
