// this file is auto-generated by gtk-go

package clutter

// #cgo pkg-config: gobject-2.0 gtk+-3.0
// #include <string.h>
// #include <glib-object.h>
// #include <glib/gstdio.h>
// #include <glib-unix.h>
// #include <glib-object.h>
/*
gpointer _g_boxed_copy(GType boxed_type, gpointer src_boxed) {
	return (gpointer)g_boxed_copy(boxed_type, (gconstpointer)(src_boxed));
}
GType _g_boxed_type_register_static(gchar * name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free) {
	return (GType)g_boxed_type_register_static((const gchar *)(name), boxed_copy, boxed_free);
}
void _g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_BOOLEAN__BOXED_BOXED(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_BOOLEAN__FLAGS(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_BOOLEAN__FLAGS(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_STRING__OBJECT_POINTER(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__BOOLEAN(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__BOOLEAN(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__BOXED(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__BOXED(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__CHAR(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__CHAR(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__DOUBLE(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__DOUBLE(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__ENUM(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__ENUM(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__FLAGS(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__FLAGS(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__FLOAT(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__FLOAT(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__INT(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__INT(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__LONG(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__LONG(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__OBJECT(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__OBJECT(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__PARAM(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__PARAM(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__POINTER(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__POINTER(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__STRING(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__STRING(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UCHAR(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__UCHAR(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UINT(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__UINT(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__UINT_POINTER(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__UINT_POINTER(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__ULONG(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__ULONG(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__VARIANT(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__VARIANT(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_VOID__VOID(GClosure * closure, GValue * return_value, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_VOID__VOID(closure, return_value, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_cclosure_marshal_generic(GClosure * closure, GValue * return_gvalue, guint n_param_values, GValue * param_values, gpointer invocation_hint, gpointer marshal_data) {
	(void)g_cclosure_marshal_generic(closure, return_gvalue, n_param_values, (const GValue *)(param_values), invocation_hint, marshal_data);
}
void _g_enum_complete_type_info(GType g_enum_type, GTypeInfo * info, GEnumValue * const_values) {
	(void)g_enum_complete_type_info(g_enum_type, info, (const GEnumValue *)(const_values));
}
GEnumValue * _g_enum_get_value_by_name(GEnumClass * enum_class, gchar * name) {
	return (GEnumValue *)g_enum_get_value_by_name(enum_class, (const gchar *)(name));
}
GEnumValue * _g_enum_get_value_by_nick(GEnumClass * enum_class, gchar * nick) {
	return (GEnumValue *)g_enum_get_value_by_nick(enum_class, (const gchar *)(nick));
}
GType _g_enum_register_static(gchar * name, GEnumValue * const_static_values) {
	return (GType)g_enum_register_static((const gchar *)(name), (const GEnumValue *)(const_static_values));
}
void _g_flags_complete_type_info(GType g_flags_type, GTypeInfo * info, GFlagsValue * const_values) {
	(void)g_flags_complete_type_info(g_flags_type, info, (const GFlagsValue *)(const_values));
}
GFlagsValue * _g_flags_get_value_by_name(GFlagsClass * flags_class, gchar * name) {
	return (GFlagsValue *)g_flags_get_value_by_name(flags_class, (const gchar *)(name));
}
GFlagsValue * _g_flags_get_value_by_nick(GFlagsClass * flags_class, gchar * nick) {
	return (GFlagsValue *)g_flags_get_value_by_nick(flags_class, (const gchar *)(nick));
}
GType _g_flags_register_static(gchar * name, GFlagsValue * const_static_values) {
	return (GType)g_flags_register_static((const gchar *)(name), (const GFlagsValue *)(const_static_values));
}
GParamSpec * _g_param_spec_boolean(gchar * name, gchar * nick, gchar * blurb, gboolean default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_boolean((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), default_value, flags);
}
GParamSpec * _g_param_spec_boxed(gchar * name, gchar * nick, gchar * blurb, GType boxed_type, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_boxed((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), boxed_type, flags);
}
GParamSpec * _g_param_spec_char(gchar * name, gchar * nick, gchar * blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_char((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_double(gchar * name, gchar * nick, gchar * blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_double((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_enum(gchar * name, gchar * nick, gchar * blurb, GType enum_type, gint default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_enum((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), enum_type, default_value, flags);
}
GParamSpec * _g_param_spec_flags(gchar * name, gchar * nick, gchar * blurb, GType flags_type, guint default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_flags((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), flags_type, default_value, flags);
}
GParamSpec * _g_param_spec_float(gchar * name, gchar * nick, gchar * blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_float((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_gtype(gchar * name, gchar * nick, gchar * blurb, GType is_a_type, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_gtype((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), is_a_type, flags);
}
GParamSpec * _g_param_spec_int(gchar * name, gchar * nick, gchar * blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_int((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_int64(gchar * name, gchar * nick, gchar * blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_int64((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_long(gchar * name, gchar * nick, gchar * blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_long((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_object(gchar * name, gchar * nick, gchar * blurb, GType object_type, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_object((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), object_type, flags);
}
GParamSpec * _g_param_spec_override(gchar * name, GParamSpec * overridden) {
	return (GParamSpec *)g_param_spec_override((const gchar *)(name), overridden);
}
GParamSpec * _g_param_spec_param(gchar * name, gchar * nick, gchar * blurb, GType param_type, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_param((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), param_type, flags);
}
GParamSpec * _g_param_spec_pointer(gchar * name, gchar * nick, gchar * blurb, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_pointer((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), flags);
}
GParamSpec * _g_param_spec_string(gchar * name, gchar * nick, gchar * blurb, gchar * default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_string((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), (const gchar *)(default_value), flags);
}
GParamSpec * _g_param_spec_uchar(gchar * name, gchar * nick, gchar * blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_uchar((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_uint(gchar * name, gchar * nick, gchar * blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_uint((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_uint64(gchar * name, gchar * nick, gchar * blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_uint64((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_ulong(gchar * name, gchar * nick, gchar * blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_ulong((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), minimum, maximum, default_value, flags);
}
GParamSpec * _g_param_spec_unichar(gchar * name, gchar * nick, gchar * blurb, gunichar default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_unichar((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), default_value, flags);
}
GParamSpec * _g_param_spec_value_array(gchar * name, gchar * nick, gchar * blurb, GParamSpec * element_spec, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_value_array((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), element_spec, flags);
}
GParamSpec * _g_param_spec_variant(gchar * name, gchar * nick, gchar * blurb, GVariantType * type, GVariant * default_value, GParamFlags flags) {
	return (GParamSpec *)g_param_spec_variant((const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), (const GVariantType *)(type), default_value, flags);
}
GType _g_param_type_register_static(gchar * name, GParamSpecTypeInfo * pspec_info) {
	return (GType)g_param_type_register_static((const gchar *)(name), (const GParamSpecTypeInfo *)(pspec_info));
}
gboolean _g_param_value_convert(GParamSpec * pspec, GValue * src_value, GValue * dest_value, gboolean strict_validation) {
	return (gboolean)g_param_value_convert(pspec, (const GValue *)(src_value), dest_value, strict_validation);
}
gint _g_param_values_cmp(GParamSpec * pspec, GValue * value1, GValue * value2) {
	return (gint)g_param_values_cmp(pspec, (const GValue *)(value1), (const GValue *)(value2));
}
GType _g_pointer_type_register_static(gchar * name) {
	return (GType)g_pointer_type_register_static((const gchar *)(name));
}
gboolean _g_signal_accumulator_first_wins(GSignalInvocationHint * ihint, GValue * return_accu, GValue * handler_return, gpointer dummy) {
	return (gboolean)g_signal_accumulator_first_wins(ihint, return_accu, (const GValue *)(handler_return), dummy);
}
gboolean _g_signal_accumulator_true_handled(GSignalInvocationHint * ihint, GValue * return_accu, GValue * handler_return, gpointer dummy) {
	return (gboolean)g_signal_accumulator_true_handled(ihint, return_accu, (const GValue *)(handler_return), dummy);
}
gulong _g_signal_connect_closure(gpointer instance, gchar * detailed_signal, GClosure * closure, gboolean after) {
	return (gulong)g_signal_connect_closure(instance, (const gchar *)(detailed_signal), closure, after);
}
gulong _g_signal_connect_data(gpointer instance, gchar * detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags) {
	return (gulong)g_signal_connect_data(instance, (const gchar *)(detailed_signal), c_handler, data, destroy_data, connect_flags);
}
gulong _g_signal_connect_object(gpointer instance, gchar * detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags) {
	return (gulong)g_signal_connect_object(instance, (const gchar *)(detailed_signal), c_handler, gobject, connect_flags);
}
guint _g_signal_lookup(gchar * name, GType itype) {
	return (guint)g_signal_lookup((const gchar *)(name), itype);
}
gchar * _g_signal_name(guint signal_id) {
	return (gchar *)g_signal_name(signal_id);
}
void _g_signal_override_class_handler(gchar * signal_name, GType instance_type, GCallback class_handler) {
	(void)g_signal_override_class_handler((const gchar *)(signal_name), instance_type, class_handler);
}
gboolean _g_signal_parse_name(gchar * detailed_signal, GType itype, guint * signal_id_p, GQuark * detail_p, gboolean force_detail_quark) {
	return (gboolean)g_signal_parse_name((const gchar *)(detailed_signal), itype, signal_id_p, detail_p, force_detail_quark);
}
void _g_signal_stop_emission_by_name(gpointer instance, gchar * detailed_signal) {
	(void)g_signal_stop_emission_by_name(instance, (const gchar *)(detailed_signal));
}
gchar * _g_strdup_value_contents(GValue * value) {
	return (gchar *)g_strdup_value_contents((const GValue *)(value));
}
void _g_type_add_interface_static(GType instance_type, GType interface_type, GInterfaceInfo * info) {
	(void)g_type_add_interface_static(instance_type, interface_type, (const GInterfaceInfo *)(info));
}
GType _g_type_from_name(gchar * name) {
	return (GType)g_type_from_name((const gchar *)(name));
}
gchar * _g_type_name(GType type) {
	return (gchar *)g_type_name(type);
}
gchar * _g_type_name_from_class(GTypeClass * g_class) {
	return (gchar *)g_type_name_from_class(g_class);
}
gchar * _g_type_name_from_instance(GTypeInstance * instance) {
	return (gchar *)g_type_name_from_instance(instance);
}
GType _g_type_register_dynamic(GType parent_type, gchar * type_name, GTypePlugin * plugin, GTypeFlags flags) {
	return (GType)g_type_register_dynamic(parent_type, (const gchar *)(type_name), plugin, flags);
}
GType _g_type_register_fundamental(GType type_id, gchar * type_name, GTypeInfo * info, GTypeFundamentalInfo * finfo, GTypeFlags flags) {
	return (GType)g_type_register_fundamental(type_id, (const gchar *)(type_name), (const GTypeInfo *)(info), (const GTypeFundamentalInfo *)(finfo), flags);
}
GType _g_type_register_static(GType parent_type, gchar * type_name, GTypeInfo * info, GTypeFlags flags) {
	return (GType)g_type_register_static(parent_type, (const gchar *)(type_name), (const GTypeInfo *)(info), flags);
}
GType _g_type_register_static_simple(GType parent_type, gchar * type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags) {
	return (GType)g_type_register_static_simple(parent_type, (const gchar *)(type_name), class_size, class_init, instance_size, instance_init, flags);
}
gchar * _g_binding_get_source_property(GBinding * _self_) {
	return (gchar *)g_binding_get_source_property(_self_);
}
gchar * _g_binding_get_target_property(GBinding * _self_) {
	return (gchar *)g_binding_get_target_property(_self_);
}
GParamSpec * _g_object_interface_find_property(gpointer g_iface, gchar * property_name) {
	return (GParamSpec *)g_object_interface_find_property(g_iface, (const gchar *)(property_name));
}
void * _g_object_interface_list_properties(gpointer g_iface, guint * n_properties_p) {
	return (void *)g_object_interface_list_properties(g_iface, n_properties_p);
}
GBinding * _g_object_bind_property(GObject * _self_, gchar * source_property, gpointer target, gchar * target_property, GBindingFlags flags) {
	return (GBinding *)g_object_bind_property((gpointer)(_self_), (const gchar *)(source_property), target, (const gchar *)(target_property), flags);
}
GBinding * _g_object_bind_property_full(GObject * _self_, gchar * source_property, gpointer target, gchar * target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify) {
	return (GBinding *)g_object_bind_property_full((gpointer)(_self_), (const gchar *)(source_property), target, (const gchar *)(target_property), flags, transform_to, transform_from, user_data, notify);
}
GBinding * _g_object_bind_property_with_closures(GObject * _self_, gchar * source_property, gpointer target, gchar * target_property, GBindingFlags flags, GClosure * transform_to, GClosure * transform_from) {
	return (GBinding *)g_object_bind_property_with_closures((gpointer)(_self_), (const gchar *)(source_property), target, (const gchar *)(target_property), flags, transform_to, transform_from);
}
gpointer _g_object_dup_data(GObject * _self_, gchar * key, GDuplicateFunc dup_func, gpointer user_data) {
	return (gpointer)g_object_dup_data(_self_, (const gchar *)(key), dup_func, user_data);
}
gpointer _g_object_get_data(GObject * _self_, gchar * key) {
	return (gpointer)g_object_get_data(_self_, (const gchar *)(key));
}
void _g_object_get_property(GObject * _self_, gchar * property_name, GValue * value) {
	(void)g_object_get_property(_self_, (const gchar *)(property_name), value);
}
gboolean _g_object_is_floating(GObject * _self_) {
	return (gboolean)g_object_is_floating((gpointer)(_self_));
}
void _g_object_notify(GObject * _self_, gchar * property_name) {
	(void)g_object_notify(_self_, (const gchar *)(property_name));
}
gpointer _g_object_ref(GObject * _self_) {
	return (gpointer)g_object_ref((gpointer)(_self_));
}
gpointer _g_object_ref_sink(GObject * _self_) {
	return (gpointer)g_object_ref_sink((gpointer)(_self_));
}
gboolean _g_object_replace_data(GObject * _self_, gchar * key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify * old_destroy) {
	return (gboolean)g_object_replace_data(_self_, (const gchar *)(key), oldval, newval, destroy, old_destroy);
}
void _g_object_set_data(GObject * _self_, gchar * key, gpointer data) {
	(void)g_object_set_data(_self_, (const gchar *)(key), data);
}
void _g_object_set_data_full(GObject * _self_, gchar * key, gpointer data, GDestroyNotify destroy) {
	(void)g_object_set_data_full(_self_, (const gchar *)(key), data, destroy);
}
void _g_object_set_property(GObject * _self_, gchar * property_name, GValue * value) {
	(void)g_object_set_property(_self_, (const gchar *)(property_name), (const GValue *)(value));
}
gpointer _g_object_steal_data(GObject * _self_, gchar * key) {
	return (gpointer)g_object_steal_data(_self_, (const gchar *)(key));
}
void _g_object_unref(GObject * _self_) {
	(void)g_object_unref((gpointer)(_self_));
}
gpointer _g_param_spec_internal(GType param_type, gchar * name, gchar * nick, gchar * blurb, GParamFlags flags) {
	return (gpointer)g_param_spec_internal(param_type, (const gchar *)(name), (const gchar *)(nick), (const gchar *)(blurb), flags);
}
gchar * _g_param_spec_get_blurb(GParamSpec * _self_) {
	return (gchar *)g_param_spec_get_blurb(_self_);
}
gchar * _g_param_spec_get_name(GParamSpec * _self_) {
	return (gchar *)g_param_spec_get_name(_self_);
}
gchar * _g_param_spec_get_nick(GParamSpec * _self_) {
	return (gchar *)g_param_spec_get_nick(_self_);
}
void _g_type_module_add_interface(GTypeModule * _self_, GType instance_type, GType interface_type, GInterfaceInfo * interface_info) {
	(void)g_type_module_add_interface(_self_, instance_type, interface_type, (const GInterfaceInfo *)(interface_info));
}
GType _g_type_module_register_enum(GTypeModule * _self_, gchar * name, GEnumValue * const_static_values) {
	return (GType)g_type_module_register_enum(_self_, (const gchar *)(name), (const GEnumValue *)(const_static_values));
}
GType _g_type_module_register_flags(GTypeModule * _self_, gchar * name, GFlagsValue * const_static_values) {
	return (GType)g_type_module_register_flags(_self_, (const gchar *)(name), (const GFlagsValue *)(const_static_values));
}
GType _g_type_module_register_type(GTypeModule * _self_, GType parent_type, gchar * type_name, GTypeInfo * type_info, GTypeFlags flags) {
	return (GType)g_type_module_register_type(_self_, parent_type, (const gchar *)(type_name), (const GTypeInfo *)(type_info), flags);
}
void _g_type_module_set_name(GTypeModule * _self_, gchar * name) {
	(void)g_type_module_set_name(_self_, (const gchar *)(name));
}
GParamSpec * _g_object_class_find_property(GObjectClass * _self_, gchar * property_name) {
	return (GParamSpec *)g_object_class_find_property(_self_, (const gchar *)(property_name));
}
void * _g_object_class_list_properties(GObjectClass * _self_, guint * n_properties) {
	return (void *)g_object_class_list_properties(_self_, n_properties);
}
void _g_object_class_override_property(GObjectClass * _self_, guint property_id, gchar * name) {
	(void)g_object_class_override_property(_self_, property_id, (const gchar *)(name));
}
void * _g_param_spec_pool_list(GParamSpecPool * _self_, GType owner_type, guint * n_pspecs_p) {
	return (void *)g_param_spec_pool_list(_self_, owner_type, n_pspecs_p);
}
GParamSpec * _g_param_spec_pool_lookup(GParamSpecPool * _self_, gchar * param_name, GType owner_type, gboolean walk_ancestors) {
	return (GParamSpec *)g_param_spec_pool_lookup(_self_, (const gchar *)(param_name), owner_type, walk_ancestors);
}
gpointer _g_type_class_peek_parent(GTypeClass * _self_) {
	return (gpointer)g_type_class_peek_parent((gpointer)(_self_));
}
void _g_type_class_unref(GTypeClass * _self_) {
	(void)g_type_class_unref((gpointer)(_self_));
}
void _g_type_class_unref_uncached(GTypeClass * _self_) {
	(void)g_type_class_unref_uncached((gpointer)(_self_));
}
gpointer _g_type_interface_peek_parent(GTypeInterface * _self_) {
	return (gpointer)g_type_interface_peek_parent((gpointer)(_self_));
}
void _g_value_copy(GValue * _self_, GValue * dest_value) {
	(void)g_value_copy((const GValue *)(_self_), dest_value);
}
gpointer _g_value_dup_boxed(GValue * _self_) {
	return (gpointer)g_value_dup_boxed((const GValue *)(_self_));
}
gpointer _g_value_dup_object(GValue * _self_) {
	return (gpointer)g_value_dup_object((const GValue *)(_self_));
}
GParamSpec * _g_value_dup_param(GValue * _self_) {
	return (GParamSpec *)g_value_dup_param((const GValue *)(_self_));
}
gchar * _g_value_dup_string(GValue * _self_) {
	return (gchar *)g_value_dup_string((const GValue *)(_self_));
}
GVariant * _g_value_dup_variant(GValue * _self_) {
	return (GVariant *)g_value_dup_variant((const GValue *)(_self_));
}
gboolean _g_value_fits_pointer(GValue * _self_) {
	return (gboolean)g_value_fits_pointer((const GValue *)(_self_));
}
gboolean _g_value_get_boolean(GValue * _self_) {
	return (gboolean)g_value_get_boolean((const GValue *)(_self_));
}
gpointer _g_value_get_boxed(GValue * _self_) {
	return (gpointer)g_value_get_boxed((const GValue *)(_self_));
}
gdouble _g_value_get_double(GValue * _self_) {
	return (gdouble)g_value_get_double((const GValue *)(_self_));
}
gint _g_value_get_enum(GValue * _self_) {
	return (gint)g_value_get_enum((const GValue *)(_self_));
}
guint _g_value_get_flags(GValue * _self_) {
	return (guint)g_value_get_flags((const GValue *)(_self_));
}
gfloat _g_value_get_float(GValue * _self_) {
	return (gfloat)g_value_get_float((const GValue *)(_self_));
}
GType _g_value_get_gtype(GValue * _self_) {
	return (GType)g_value_get_gtype((const GValue *)(_self_));
}
gint _g_value_get_int(GValue * _self_) {
	return (gint)g_value_get_int((const GValue *)(_self_));
}
gint64 _g_value_get_int64(GValue * _self_) {
	return (gint64)g_value_get_int64((const GValue *)(_self_));
}
glong _g_value_get_long(GValue * _self_) {
	return (glong)g_value_get_long((const GValue *)(_self_));
}
gpointer _g_value_get_object(GValue * _self_) {
	return (gpointer)g_value_get_object((const GValue *)(_self_));
}
GParamSpec * _g_value_get_param(GValue * _self_) {
	return (GParamSpec *)g_value_get_param((const GValue *)(_self_));
}
gpointer _g_value_get_pointer(GValue * _self_) {
	return (gpointer)g_value_get_pointer((const GValue *)(_self_));
}
gint8 _g_value_get_schar(GValue * _self_) {
	return (gint8)g_value_get_schar((const GValue *)(_self_));
}
gchar * _g_value_get_string(GValue * _self_) {
	return (gchar *)g_value_get_string((const GValue *)(_self_));
}
guchar _g_value_get_uchar(GValue * _self_) {
	return (guchar)g_value_get_uchar((const GValue *)(_self_));
}
guint _g_value_get_uint(GValue * _self_) {
	return (guint)g_value_get_uint((const GValue *)(_self_));
}
guint64 _g_value_get_uint64(GValue * _self_) {
	return (guint64)g_value_get_uint64((const GValue *)(_self_));
}
gulong _g_value_get_ulong(GValue * _self_) {
	return (gulong)g_value_get_ulong((const GValue *)(_self_));
}
GVariant * _g_value_get_variant(GValue * _self_) {
	return (GVariant *)g_value_get_variant((const GValue *)(_self_));
}
gpointer _g_value_peek_pointer(GValue * _self_) {
	return (gpointer)g_value_peek_pointer((const GValue *)(_self_));
}
void _g_value_set_boxed(GValue * _self_, gpointer v_boxed) {
	(void)g_value_set_boxed(_self_, (gconstpointer)(v_boxed));
}
void _g_value_set_static_boxed(GValue * _self_, gpointer v_boxed) {
	(void)g_value_set_static_boxed(_self_, (gconstpointer)(v_boxed));
}
void _g_value_set_static_string(GValue * _self_, gchar * v_string) {
	(void)g_value_set_static_string(_self_, (const gchar *)(v_string));
}
void _g_value_set_string(GValue * _self_, gchar * v_string) {
	(void)g_value_set_string(_self_, (const gchar *)(v_string));
}
void _g_value_take_boxed(GValue * _self_, gpointer v_boxed) {
	(void)g_value_take_boxed(_self_, (gconstpointer)(v_boxed));
}
gboolean _g_value_transform(GValue * _self_, GValue * dest_value) {
	return (gboolean)g_value_transform((const GValue *)(_self_), dest_value);
}
*/
import "C"
import (
	"unsafe"
)

type EnumClass C.GEnumClass
type TypeInstance C.GTypeInstance
type TypeInterface C.GTypeInterface
type TypeClass C.GTypeClass
type SignalQuery C.GSignalQuery
type Parameter C.GParameter
type ClosureNotifyData C.GClosureNotifyData
type ParamSpecTypeInfo C.GParamSpecTypeInfo
type TypePluginClass C.GTypePluginClass
type InitiallyUnownedClass C.GInitiallyUnownedClass
type ObjectClass C.GObjectClass
type FlagsClass C.GFlagsClass
type ObjectConstructParam C.GObjectConstructParam
type Closure C.GClosure
type TypeInfo C.GTypeInfo
type TypeModuleClass C.GTypeModuleClass
type ParamSpecClass C.GParamSpecClass
type SignalInvocationHint C.GSignalInvocationHint
type WeakRef C.GWeakRef
type Value C.GValue
type FlagsValue C.GFlagsValue
type CClosure C.GCClosure
type TypeFundamentalInfo C.GTypeFundamentalInfo
type EnumValue C.GEnumValue
type InterfaceInfo C.GInterfaceInfo
type TypeQuery C.GTypeQuery
type ValueArray C.GValueArray
type TypeValueTable C.GTypeValueTable
type ParamSpecPool C.GParamSpecPool
type ParamSpecUnichar struct { ParamSpec }
type ParamSpecUnicharKind interface {
  _IsParamSpecUnichar()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecUnichar) _IsParamSpecUnichar () {}
func (self ParamSpecUnichar) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecUnichar(value unsafe.Pointer) ParamSpecUnichar { return ParamSpecUnichar{ParamSpec{value}} }
type ParamSpecULong struct { ParamSpec }
type ParamSpecULongKind interface {
  _IsParamSpecULong()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecULong) _IsParamSpecULong () {}
func (self ParamSpecULong) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecULong(value unsafe.Pointer) ParamSpecULong { return ParamSpecULong{ParamSpec{value}} }
type ParamSpecDouble struct { ParamSpec }
type ParamSpecDoubleKind interface {
  _IsParamSpecDouble()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecDouble) _IsParamSpecDouble () {}
func (self ParamSpecDouble) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecDouble(value unsafe.Pointer) ParamSpecDouble { return ParamSpecDouble{ParamSpec{value}} }
type ParamSpecInt64 struct { ParamSpec }
type ParamSpecInt64Kind interface {
  _IsParamSpecInt64()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecInt64) _IsParamSpecInt64 () {}
func (self ParamSpecInt64) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecInt64(value unsafe.Pointer) ParamSpecInt64 { return ParamSpecInt64{ParamSpec{value}} }
type ParamSpecBoolean struct { ParamSpec }
type ParamSpecBooleanKind interface {
  _IsParamSpecBoolean()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecBoolean) _IsParamSpecBoolean () {}
func (self ParamSpecBoolean) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecBoolean(value unsafe.Pointer) ParamSpecBoolean { return ParamSpecBoolean{ParamSpec{value}} }
type ParamSpecParam struct { ParamSpec }
type ParamSpecParamKind interface {
  _IsParamSpecParam()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecParam) _IsParamSpecParam () {}
func (self ParamSpecParam) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecParam(value unsafe.Pointer) ParamSpecParam { return ParamSpecParam{ParamSpec{value}} }
type TypePlugin struct { _value_ unsafe.Pointer }
type TypePluginKind interface {
  _IsTypePlugin()
  GetGObject() unsafe.Pointer
}
func (self TypePlugin) _IsTypePlugin () {}
func (self TypePlugin) GetGObject() unsafe.Pointer { return self._value_ }
func ToTypePlugin(value unsafe.Pointer) TypePlugin { return TypePlugin{value} }
type Object struct { _value_ unsafe.Pointer }
type ObjectKind interface {
  _IsObject()
  GetGObject() unsafe.Pointer
}
func (self Object) _IsObject () {}
func (self Object) GetGObject() unsafe.Pointer { return self._value_ }
func ToObject(value unsafe.Pointer) Object { return Object{value} }
type ParamSpecFloat struct { ParamSpec }
type ParamSpecFloatKind interface {
  _IsParamSpecFloat()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecFloat) _IsParamSpecFloat () {}
func (self ParamSpecFloat) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecFloat(value unsafe.Pointer) ParamSpecFloat { return ParamSpecFloat{ParamSpec{value}} }
type ParamSpec struct { _value_ unsafe.Pointer }
type ParamSpecKind interface {
  _IsParamSpec()
  GetGObject() unsafe.Pointer
}
func (self ParamSpec) _IsParamSpec () {}
func (self ParamSpec) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpec(value unsafe.Pointer) ParamSpec { return ParamSpec{value} }
type ParamSpecPointer struct { ParamSpec }
type ParamSpecPointerKind interface {
  _IsParamSpecPointer()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecPointer) _IsParamSpecPointer () {}
func (self ParamSpecPointer) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecPointer(value unsafe.Pointer) ParamSpecPointer { return ParamSpecPointer{ParamSpec{value}} }
type ParamSpecString struct { ParamSpec }
type ParamSpecStringKind interface {
  _IsParamSpecString()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecString) _IsParamSpecString () {}
func (self ParamSpecString) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecString(value unsafe.Pointer) ParamSpecString { return ParamSpecString{ParamSpec{value}} }
type ParamSpecUInt struct { ParamSpec }
type ParamSpecUIntKind interface {
  _IsParamSpecUInt()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecUInt) _IsParamSpecUInt () {}
func (self ParamSpecUInt) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecUInt(value unsafe.Pointer) ParamSpecUInt { return ParamSpecUInt{ParamSpec{value}} }
type ParamSpecObject struct { ParamSpec }
type ParamSpecObjectKind interface {
  _IsParamSpecObject()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecObject) _IsParamSpecObject () {}
func (self ParamSpecObject) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecObject(value unsafe.Pointer) ParamSpecObject { return ParamSpecObject{ParamSpec{value}} }
type ParamSpecUChar struct { ParamSpec }
type ParamSpecUCharKind interface {
  _IsParamSpecUChar()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecUChar) _IsParamSpecUChar () {}
func (self ParamSpecUChar) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecUChar(value unsafe.Pointer) ParamSpecUChar { return ParamSpecUChar{ParamSpec{value}} }
type ParamSpecGType struct { ParamSpec }
type ParamSpecGTypeKind interface {
  _IsParamSpecGType()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecGType) _IsParamSpecGType () {}
func (self ParamSpecGType) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecGType(value unsafe.Pointer) ParamSpecGType { return ParamSpecGType{ParamSpec{value}} }
type ParamSpecChar struct { ParamSpec }
type ParamSpecCharKind interface {
  _IsParamSpecChar()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecChar) _IsParamSpecChar () {}
func (self ParamSpecChar) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecChar(value unsafe.Pointer) ParamSpecChar { return ParamSpecChar{ParamSpec{value}} }
type ParamSpecBoxed struct { ParamSpec }
type ParamSpecBoxedKind interface {
  _IsParamSpecBoxed()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecBoxed) _IsParamSpecBoxed () {}
func (self ParamSpecBoxed) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecBoxed(value unsafe.Pointer) ParamSpecBoxed { return ParamSpecBoxed{ParamSpec{value}} }
type InitiallyUnowned struct { Object }
type InitiallyUnownedKind interface {
  _IsInitiallyUnowned()
  GetGObject() unsafe.Pointer
}
func (self InitiallyUnowned) _IsInitiallyUnowned () {}
func (self InitiallyUnowned) GetGObject() unsafe.Pointer { return self._value_ }
func ToInitiallyUnowned(value unsafe.Pointer) InitiallyUnowned { return InitiallyUnowned{Object{value}} }
type ParamSpecLong struct { ParamSpec }
type ParamSpecLongKind interface {
  _IsParamSpecLong()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecLong) _IsParamSpecLong () {}
func (self ParamSpecLong) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecLong(value unsafe.Pointer) ParamSpecLong { return ParamSpecLong{ParamSpec{value}} }
type ParamSpecEnum struct { ParamSpec }
type ParamSpecEnumKind interface {
  _IsParamSpecEnum()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecEnum) _IsParamSpecEnum () {}
func (self ParamSpecEnum) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecEnum(value unsafe.Pointer) ParamSpecEnum { return ParamSpecEnum{ParamSpec{value}} }
type ParamSpecFlags struct { ParamSpec }
type ParamSpecFlagsKind interface {
  _IsParamSpecFlags()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecFlags) _IsParamSpecFlags () {}
func (self ParamSpecFlags) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecFlags(value unsafe.Pointer) ParamSpecFlags { return ParamSpecFlags{ParamSpec{value}} }
type ParamSpecValueArray struct { ParamSpec }
type ParamSpecValueArrayKind interface {
  _IsParamSpecValueArray()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecValueArray) _IsParamSpecValueArray () {}
func (self ParamSpecValueArray) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecValueArray(value unsafe.Pointer) ParamSpecValueArray { return ParamSpecValueArray{ParamSpec{value}} }
type ParamSpecInt struct { ParamSpec }
type ParamSpecIntKind interface {
  _IsParamSpecInt()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecInt) _IsParamSpecInt () {}
func (self ParamSpecInt) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecInt(value unsafe.Pointer) ParamSpecInt { return ParamSpecInt{ParamSpec{value}} }
type Binding struct { Object }
type BindingKind interface {
  _IsBinding()
  GetGObject() unsafe.Pointer
}
func (self Binding) _IsBinding () {}
func (self Binding) GetGObject() unsafe.Pointer { return self._value_ }
func ToBinding(value unsafe.Pointer) Binding { return Binding{Object{value}} }
type ParamSpecVariant struct { ParamSpec }
type ParamSpecVariantKind interface {
  _IsParamSpecVariant()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecVariant) _IsParamSpecVariant () {}
func (self ParamSpecVariant) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecVariant(value unsafe.Pointer) ParamSpecVariant { return ParamSpecVariant{ParamSpec{value}} }
type ParamSpecUInt64 struct { ParamSpec }
type ParamSpecUInt64Kind interface {
  _IsParamSpecUInt64()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecUInt64) _IsParamSpecUInt64 () {}
func (self ParamSpecUInt64) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecUInt64(value unsafe.Pointer) ParamSpecUInt64 { return ParamSpecUInt64{ParamSpec{value}} }
type TypeModule struct { Object }
type TypeModuleKind interface {
  _IsTypeModule()
  GetGObject() unsafe.Pointer
}
func (self TypeModule) _IsTypeModule () {}
func (self TypeModule) GetGObject() unsafe.Pointer { return self._value_ }
func ToTypeModule(value unsafe.Pointer) TypeModule { return TypeModule{Object{value}} }
func (self TypeModule) _IsTypePlugin () {}
type ParamSpecOverride struct { ParamSpec }
type ParamSpecOverrideKind interface {
  _IsParamSpecOverride()
  GetGObject() unsafe.Pointer
}
func (self ParamSpecOverride) _IsParamSpecOverride () {}
func (self ParamSpecOverride) GetGObject() unsafe.Pointer { return self._value_ }
func ToParamSpecOverride(value unsafe.Pointer) ParamSpecOverride { return ParamSpecOverride{ParamSpec{value}} }
func BoxedCopy(boxed_type C.GType, src_boxed C.gpointer) (_return_ C.gpointer) {
	_return_ = C._g_boxed_copy(boxed_type, src_boxed)
	return
}

func BoxedFree(boxed_type C.GType, boxed C.gpointer) () {
	C.g_boxed_free(boxed_type, boxed)
	return
}

func BoxedTypeRegisterStatic(name string, boxed_copy C.GBoxedCopyFunc, boxed_free C.GBoxedFreeFunc) (_return_ C.GType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_boxed_type_register_static(_cgo_name_, boxed_copy, boxed_free)
	return
}

func CclosureMarshalBooleanBoxedBoxed(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_BOOLEAN__BOXED_BOXED(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalBooleanFlags(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_BOOLEAN__FLAGS(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalStringObjectPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_STRING__OBJECT_POINTER(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidBoolean(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__BOOLEAN(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidBoxed(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__BOXED(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidChar(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__CHAR(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidDouble(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__DOUBLE(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidEnum(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__ENUM(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidFlags(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__FLAGS(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidFloat(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__FLOAT(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidInt(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__INT(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidLong(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__LONG(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidObject(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__OBJECT(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidParam(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__PARAM(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__POINTER(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidString(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__STRING(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidUchar(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__UCHAR(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidUint(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__UINT(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidUintPointer(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__UINT_POINTER(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidUlong(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__ULONG(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidVariant(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__VARIANT(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalVoidVoid(closure *Closure, return_value *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_value_ := (*C.GValue)(unsafe.Pointer(return_value))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_VOID__VOID(_cgo_closure_, _cgo_return_value_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureMarshalGeneric(closure *Closure, return_gvalue *Value, n_param_values uint, param_values *Value, invocation_hint C.gpointer, marshal_data C.gpointer) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_return_gvalue_ := (*C.GValue)(unsafe.Pointer(return_gvalue))
	_cgo_param_values_ := (*C.GValue)(unsafe.Pointer(param_values))
	_cgo_n_param_values_ := (C.guint)(n_param_values)
	C._g_cclosure_marshal_generic(_cgo_closure_, _cgo_return_gvalue_, _cgo_n_param_values_, _cgo_param_values_, invocation_hint, marshal_data)
	return
}

func CclosureNew(callback_func C.GCallback, user_data C.gpointer, destroy_data C.GClosureNotify) (_go__return__ *Closure) {
	var _return_ *C.GClosure
	_return_ = C.g_cclosure_new(callback_func, user_data, destroy_data)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func CclosureNewObject(callback_func C.GCallback, object ObjectKind) (_go__return__ *Closure) {
	_cgo_object_ := (*C.GObject)(object.GetGObject())
	var _return_ *C.GClosure
	_return_ = C.g_cclosure_new_object(callback_func, _cgo_object_)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func CclosureNewObjectSwap(callback_func C.GCallback, object ObjectKind) (_go__return__ *Closure) {
	_cgo_object_ := (*C.GObject)(object.GetGObject())
	var _return_ *C.GClosure
	_return_ = C.g_cclosure_new_object_swap(callback_func, _cgo_object_)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func CclosureNewSwap(callback_func C.GCallback, user_data C.gpointer, destroy_data C.GClosureNotify) (_go__return__ *Closure) {
	var _return_ *C.GClosure
	_return_ = C.g_cclosure_new_swap(callback_func, user_data, destroy_data)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func EnumCompleteTypeInfo(g_enum_type C.GType, info *TypeInfo, const_values *EnumValue) () {
	_cgo_info_ := (*C.GTypeInfo)(unsafe.Pointer(info))
	_cgo_const_values_ := (*C.GEnumValue)(unsafe.Pointer(const_values))
	C._g_enum_complete_type_info(g_enum_type, _cgo_info_, _cgo_const_values_)
	return
}

func EnumGetValue(enum_class *EnumClass, value int) (_go__return__ *EnumValue) {
	_cgo_enum_class_ := (*C.GEnumClass)(unsafe.Pointer(enum_class))
	var _return_ *C.GEnumValue
	_cgo_value_ := (C.gint)(value)
	_return_ = C.g_enum_get_value(_cgo_enum_class_, _cgo_value_)
	_go__return__ = (*EnumValue)(unsafe.Pointer(_return_))
	return
}

func EnumGetValueByName(enum_class *EnumClass, name string) (_go__return__ *EnumValue) {
	_cgo_enum_class_ := (*C.GEnumClass)(unsafe.Pointer(enum_class))
	var _return_ *C.GEnumValue
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_enum_get_value_by_name(_cgo_enum_class_, _cgo_name_)
	_go__return__ = (*EnumValue)(unsafe.Pointer(_return_))
	return
}

func EnumGetValueByNick(enum_class *EnumClass, nick string) (_go__return__ *EnumValue) {
	_cgo_enum_class_ := (*C.GEnumClass)(unsafe.Pointer(enum_class))
	var _return_ *C.GEnumValue
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_return_ = C._g_enum_get_value_by_nick(_cgo_enum_class_, _cgo_nick_)
	_go__return__ = (*EnumValue)(unsafe.Pointer(_return_))
	return
}

func EnumRegisterStatic(name string, const_static_values *EnumValue) (_return_ C.GType) {
	_cgo_const_static_values_ := (*C.GEnumValue)(unsafe.Pointer(const_static_values))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_enum_register_static(_cgo_name_, _cgo_const_static_values_)
	return
}

func FlagsCompleteTypeInfo(g_flags_type C.GType, info *TypeInfo, const_values *FlagsValue) () {
	_cgo_info_ := (*C.GTypeInfo)(unsafe.Pointer(info))
	_cgo_const_values_ := (*C.GFlagsValue)(unsafe.Pointer(const_values))
	C._g_flags_complete_type_info(g_flags_type, _cgo_info_, _cgo_const_values_)
	return
}

func FlagsGetFirstValue(flags_class *FlagsClass, value uint) (_go__return__ *FlagsValue) {
	_cgo_flags_class_ := (*C.GFlagsClass)(unsafe.Pointer(flags_class))
	var _return_ *C.GFlagsValue
	_cgo_value_ := (C.guint)(value)
	_return_ = C.g_flags_get_first_value(_cgo_flags_class_, _cgo_value_)
	_go__return__ = (*FlagsValue)(unsafe.Pointer(_return_))
	return
}

func FlagsGetValueByName(flags_class *FlagsClass, name string) (_go__return__ *FlagsValue) {
	_cgo_flags_class_ := (*C.GFlagsClass)(unsafe.Pointer(flags_class))
	var _return_ *C.GFlagsValue
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_flags_get_value_by_name(_cgo_flags_class_, _cgo_name_)
	_go__return__ = (*FlagsValue)(unsafe.Pointer(_return_))
	return
}

func FlagsGetValueByNick(flags_class *FlagsClass, nick string) (_go__return__ *FlagsValue) {
	_cgo_flags_class_ := (*C.GFlagsClass)(unsafe.Pointer(flags_class))
	var _return_ *C.GFlagsValue
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_return_ = C._g_flags_get_value_by_nick(_cgo_flags_class_, _cgo_nick_)
	_go__return__ = (*FlagsValue)(unsafe.Pointer(_return_))
	return
}

func FlagsRegisterStatic(name string, const_static_values *FlagsValue) (_return_ C.GType) {
	_cgo_const_static_values_ := (*C.GFlagsValue)(unsafe.Pointer(const_static_values))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_flags_register_static(_cgo_name_, _cgo_const_static_values_)
	return
}

func GtypeGetType() (_return_ C.GType) {
	_return_ = C.g_gtype_get_type()
	return
}

func GobjectParamSpecBoolean(name string, nick string, blurb string, default_value bool, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_cgo_default_value_ := (C.gboolean)(C.FALSE)
	if default_value { _cgo_default_value_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_param_spec_boolean(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecBoxed(name string, nick string, blurb string, boxed_type C.GType, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_boxed(_cgo_name_, _cgo_nick_, _cgo_blurb_, boxed_type, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecChar(name string, nick string, blurb string, minimum int8, maximum int8, default_value int8, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gint8)(minimum)
	_cgo_maximum_ := (C.gint8)(maximum)
	_cgo_default_value_ := (C.gint8)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_char(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecDouble(name string, nick string, blurb string, minimum float64, maximum float64, default_value float64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gdouble)(minimum)
	_cgo_maximum_ := (C.gdouble)(maximum)
	_cgo_default_value_ := (C.gdouble)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_double(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecEnum(name string, nick string, blurb string, enum_type C.GType, default_value int, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_default_value_ := (C.gint)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_enum(_cgo_name_, _cgo_nick_, _cgo_blurb_, enum_type, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecFlags(name string, nick string, blurb string, flags_type C.GType, default_value uint, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_default_value_ := (C.guint)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_flags(_cgo_name_, _cgo_nick_, _cgo_blurb_, flags_type, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecFloat(name string, nick string, blurb string, minimum float64, maximum float64, default_value float64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gfloat)(minimum)
	_cgo_maximum_ := (C.gfloat)(maximum)
	_cgo_default_value_ := (C.gfloat)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_float(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecGtype(name string, nick string, blurb string, is_a_type C.GType, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_gtype(_cgo_name_, _cgo_nick_, _cgo_blurb_, is_a_type, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecInt(name string, nick string, blurb string, minimum int, maximum int, default_value int, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gint)(minimum)
	_cgo_maximum_ := (C.gint)(maximum)
	_cgo_default_value_ := (C.gint)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_int(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecInt64(name string, nick string, blurb string, minimum int64, maximum int64, default_value int64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gint64)(minimum)
	_cgo_maximum_ := (C.gint64)(maximum)
	_cgo_default_value_ := (C.gint64)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_int64(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecLong(name string, nick string, blurb string, minimum int64, maximum int64, default_value int64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.glong)(minimum)
	_cgo_maximum_ := (C.glong)(maximum)
	_cgo_default_value_ := (C.glong)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_long(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecObject(name string, nick string, blurb string, object_type C.GType, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_object(_cgo_name_, _cgo_nick_, _cgo_blurb_, object_type, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecOverride(name string, overridden ParamSpecKind) (_go__return__ ParamSpec) {
	_cgo_overridden_ := (*C.GParamSpec)(overridden.GetGObject())
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_param_spec_override(_cgo_name_, _cgo_overridden_)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecParam(name string, nick string, blurb string, param_type C.GType, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_param(_cgo_name_, _cgo_nick_, _cgo_blurb_, param_type, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecPointer(name string, nick string, blurb string, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_pointer(_cgo_name_, _cgo_nick_, _cgo_blurb_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecPoolNew(type_prefixing bool) (_go__return__ *ParamSpecPool) {
	var _return_ *C.GParamSpecPool
	_cgo_type_prefixing_ := (C.gboolean)(C.FALSE)
	if type_prefixing { _cgo_type_prefixing_ = (C.gboolean)(C.TRUE) }
	_return_ = C.g_param_spec_pool_new(_cgo_type_prefixing_)
	_go__return__ = (*ParamSpecPool)(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecString(name string, nick string, blurb string, default_value string, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_cstring_default_value_ := C.CString(default_value)
	_cgo_default_value_ := (*C.gchar)(unsafe.Pointer(_cstring_default_value_))
	defer C.free(unsafe.Pointer(_cstring_default_value_))
	_return_ = C._g_param_spec_string(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecUchar(name string, nick string, blurb string, minimum uint8, maximum uint8, default_value uint8, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.guint8)(minimum)
	_cgo_maximum_ := (C.guint8)(maximum)
	_cgo_default_value_ := (C.guint8)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_uchar(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecUint(name string, nick string, blurb string, minimum uint, maximum uint, default_value uint, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.guint)(minimum)
	_cgo_maximum_ := (C.guint)(maximum)
	_cgo_default_value_ := (C.guint)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_uint(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecUint64(name string, nick string, blurb string, minimum uint64, maximum uint64, default_value uint64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.guint64)(minimum)
	_cgo_maximum_ := (C.guint64)(maximum)
	_cgo_default_value_ := (C.guint64)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_uint64(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamSpecUlong(name string, nick string, blurb string, minimum uint64, maximum uint64, default_value uint64, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cgo_minimum_ := (C.gulong)(minimum)
	_cgo_maximum_ := (C.gulong)(maximum)
	_cgo_default_value_ := (C.gulong)(default_value)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_ulong(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_minimum_, _cgo_maximum_, _cgo_default_value_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecUnichar(name string, nick string, blurb string, default_value C.gunichar, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_unichar(_cgo_name_, _cgo_nick_, _cgo_blurb_, default_value, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecValueArray(name string, nick string, blurb string, element_spec ParamSpecKind, flags C.GParamFlags) (_go__return__ ParamSpec) {
	_cgo_element_spec_ := (*C.GParamSpec)(element_spec.GetGObject())
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_value_array(_cgo_name_, _cgo_nick_, _cgo_blurb_, _cgo_element_spec_, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func GobjectParamSpecVariant(name string, nick string, blurb string, type_ *C.GVariantType, default_value *C.GVariant, flags C.GParamFlags) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_variant(_cgo_name_, _cgo_nick_, _cgo_blurb_, type_, default_value, flags)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ParamTypeRegisterStatic(name string, pspec_info *ParamSpecTypeInfo) (_return_ C.GType) {
	_cgo_pspec_info_ := (*C.GParamSpecTypeInfo)(unsafe.Pointer(pspec_info))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_param_type_register_static(_cgo_name_, _cgo_pspec_info_)
	return
}

func ParamValueConvert(pspec ParamSpecKind, src_value *Value, dest_value *Value, strict_validation bool) (_go__return__ bool) {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_src_value_ := (*C.GValue)(unsafe.Pointer(src_value))
	_cgo_dest_value_ := (*C.GValue)(unsafe.Pointer(dest_value))
	_cgo_strict_validation_ := (C.gboolean)(C.FALSE)
	if strict_validation { _cgo_strict_validation_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_param_value_convert(_cgo_pspec_, _cgo_src_value_, _cgo_dest_value_, _cgo_strict_validation_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ParamValueDefaults(pspec ParamSpecKind, value *Value) (_go__return__ bool) {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	var _return_ C.gboolean
	_return_ = C.g_param_value_defaults(_cgo_pspec_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ParamValueSetDefault(pspec ParamSpecKind, value *Value) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	C.g_param_value_set_default(_cgo_pspec_, _cgo_value_)
	return
}

func ParamValueValidate(pspec ParamSpecKind, value *Value) (_go__return__ bool) {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	var _return_ C.gboolean
	_return_ = C.g_param_value_validate(_cgo_pspec_, _cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ParamValuesCmp(pspec ParamSpecKind, value1 *Value, value2 *Value) (_go__return__ int) {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_value1_ := (*C.GValue)(unsafe.Pointer(value1))
	_cgo_value2_ := (*C.GValue)(unsafe.Pointer(value2))
	var _return_ C.gint
	_return_ = C._g_param_values_cmp(_cgo_pspec_, _cgo_value1_, _cgo_value2_)
	_go__return__ = (int)(_return_)
	return
}

func PointerTypeRegisterStatic(name string) (_return_ C.GType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_pointer_type_register_static(_cgo_name_)
	return
}

func SignalAccumulatorFirstWins(ihint *SignalInvocationHint, return_accu *Value, handler_return *Value, dummy C.gpointer) (_go__return__ bool) {
	_cgo_ihint_ := (*C.GSignalInvocationHint)(unsafe.Pointer(ihint))
	_cgo_return_accu_ := (*C.GValue)(unsafe.Pointer(return_accu))
	_cgo_handler_return_ := (*C.GValue)(unsafe.Pointer(handler_return))
	var _return_ C.gboolean
	_return_ = C._g_signal_accumulator_first_wins(_cgo_ihint_, _cgo_return_accu_, _cgo_handler_return_, dummy)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SignalAccumulatorTrueHandled(ihint *SignalInvocationHint, return_accu *Value, handler_return *Value, dummy C.gpointer) (_go__return__ bool) {
	_cgo_ihint_ := (*C.GSignalInvocationHint)(unsafe.Pointer(ihint))
	_cgo_return_accu_ := (*C.GValue)(unsafe.Pointer(return_accu))
	_cgo_handler_return_ := (*C.GValue)(unsafe.Pointer(handler_return))
	var _return_ C.gboolean
	_return_ = C._g_signal_accumulator_true_handled(_cgo_ihint_, _cgo_return_accu_, _cgo_handler_return_, dummy)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SignalAddEmissionHook(signal_id uint, detail C.GQuark, hook_func C.GSignalEmissionHook, hook_data C.gpointer, data_destroy C.GDestroyNotify) (_go__return__ uint64) {
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.gulong
	_return_ = C.g_signal_add_emission_hook(_cgo_signal_id_, detail, hook_func, hook_data, data_destroy)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalConnectClosure(instance C.gpointer, detailed_signal string, closure *Closure, after bool) (_go__return__ uint64) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	var _return_ C.gulong
	_cstring_detailed_signal_ := C.CString(detailed_signal)
	_cgo_detailed_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_signal_))
	defer C.free(unsafe.Pointer(_cstring_detailed_signal_))
	_cgo_after_ := (C.gboolean)(C.FALSE)
	if after { _cgo_after_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_signal_connect_closure(instance, _cgo_detailed_signal_, _cgo_closure_, _cgo_after_)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalConnectClosureById(instance C.gpointer, signal_id uint, detail C.GQuark, closure *Closure, after bool) (_go__return__ uint64) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.gulong
	_cgo_after_ := (C.gboolean)(C.FALSE)
	if after { _cgo_after_ = (C.gboolean)(C.TRUE) }
	_return_ = C.g_signal_connect_closure_by_id(instance, _cgo_signal_id_, detail, _cgo_closure_, _cgo_after_)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalConnectData(instance C.gpointer, detailed_signal string, c_handler C.GCallback, data C.gpointer, destroy_data C.GClosureNotify, connect_flags C.GConnectFlags) (_go__return__ uint64) {
	var _return_ C.gulong
	_cstring_detailed_signal_ := C.CString(detailed_signal)
	_cgo_detailed_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_signal_))
	defer C.free(unsafe.Pointer(_cstring_detailed_signal_))
	_return_ = C._g_signal_connect_data(instance, _cgo_detailed_signal_, c_handler, data, destroy_data, connect_flags)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalConnectObject(instance C.gpointer, detailed_signal string, c_handler C.GCallback, gobject C.gpointer, connect_flags C.GConnectFlags) (_go__return__ uint64) {
	var _return_ C.gulong
	_cstring_detailed_signal_ := C.CString(detailed_signal)
	_cgo_detailed_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_signal_))
	defer C.free(unsafe.Pointer(_cstring_detailed_signal_))
	_return_ = C._g_signal_connect_object(instance, _cgo_detailed_signal_, c_handler, gobject, connect_flags)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalGetInvocationHint(instance C.gpointer) (_go__return__ *SignalInvocationHint) {
	var _return_ *C.GSignalInvocationHint
	_return_ = C.g_signal_get_invocation_hint(instance)
	_go__return__ = (*SignalInvocationHint)(unsafe.Pointer(_return_))
	return
}

func SignalHandlerBlock(instance C.gpointer, handler_id uint64) () {
	_cgo_handler_id_ := (C.gulong)(handler_id)
	C.g_signal_handler_block(instance, _cgo_handler_id_)
	return
}

func SignalHandlerDisconnect(instance C.gpointer, handler_id uint64) () {
	_cgo_handler_id_ := (C.gulong)(handler_id)
	C.g_signal_handler_disconnect(instance, _cgo_handler_id_)
	return
}

func SignalHandlerFind(instance C.gpointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ C.gpointer, data C.gpointer) (_go__return__ uint64) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.gulong
	_return_ = C.g_signal_handler_find(instance, mask, _cgo_signal_id_, detail, _cgo_closure_, func_, data)
	_go__return__ = (uint64)(_return_)
	return
}

func SignalHandlerIsConnected(instance C.gpointer, handler_id uint64) (_go__return__ bool) {
	_cgo_handler_id_ := (C.gulong)(handler_id)
	var _return_ C.gboolean
	_return_ = C.g_signal_handler_is_connected(instance, _cgo_handler_id_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SignalHandlerUnblock(instance C.gpointer, handler_id uint64) () {
	_cgo_handler_id_ := (C.gulong)(handler_id)
	C.g_signal_handler_unblock(instance, _cgo_handler_id_)
	return
}

func SignalHandlersBlockMatched(instance C.gpointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ C.gpointer, data C.gpointer) (_go__return__ uint) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.guint
	_return_ = C.g_signal_handlers_block_matched(instance, mask, _cgo_signal_id_, detail, _cgo_closure_, func_, data)
	_go__return__ = (uint)(_return_)
	return
}

func SignalHandlersDestroy(instance C.gpointer) () {
	C.g_signal_handlers_destroy(instance)
	return
}

func SignalHandlersDisconnectMatched(instance C.gpointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ C.gpointer, data C.gpointer) (_go__return__ uint) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.guint
	_return_ = C.g_signal_handlers_disconnect_matched(instance, mask, _cgo_signal_id_, detail, _cgo_closure_, func_, data)
	_go__return__ = (uint)(_return_)
	return
}

func SignalHandlersUnblockMatched(instance C.gpointer, mask C.GSignalMatchType, signal_id uint, detail C.GQuark, closure *Closure, func_ C.gpointer, data C.gpointer) (_go__return__ uint) {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ C.guint
	_return_ = C.g_signal_handlers_unblock_matched(instance, mask, _cgo_signal_id_, detail, _cgo_closure_, func_, data)
	_go__return__ = (uint)(_return_)
	return
}

func SignalHasHandlerPending(instance C.gpointer, signal_id uint, detail C.GQuark, may_be_blocked bool) (_go__return__ bool) {
	_cgo_signal_id_ := (C.guint)(signal_id)
	_cgo_may_be_blocked_ := (C.gboolean)(C.FALSE)
	if may_be_blocked { _cgo_may_be_blocked_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C.g_signal_has_handler_pending(instance, _cgo_signal_id_, detail, _cgo_may_be_blocked_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func SignalListIds(itype C.GType) (_return_ *C.guint, _go_n_ids_ uint) {
	var n_ids C.guint
	_return_ = C.g_signal_list_ids(itype, &n_ids)
	_go_n_ids_ = (uint)(n_ids)
	return
}

func SignalLookup(name string, itype C.GType) (_go__return__ uint) {
	var _return_ C.guint
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_signal_lookup(_cgo_name_, itype)
	_go__return__ = (uint)(_return_)
	return
}

func SignalName(signal_id uint) (_go__return__ string) {
	_cgo_signal_id_ := (C.guint)(signal_id)
	var _return_ *C.gchar
	_return_ = C._g_signal_name(_cgo_signal_id_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func SignalOverrideClassClosure(signal_id uint, instance_type C.GType, class_closure *Closure) () {
	_cgo_class_closure_ := (*C.GClosure)(unsafe.Pointer(class_closure))
	_cgo_signal_id_ := (C.guint)(signal_id)
	C.g_signal_override_class_closure(_cgo_signal_id_, instance_type, _cgo_class_closure_)
	return
}

func SignalOverrideClassHandler(signal_name string, instance_type C.GType, class_handler C.GCallback) () {
	_cstring_signal_name_ := C.CString(signal_name)
	_cgo_signal_name_ := (*C.gchar)(unsafe.Pointer(_cstring_signal_name_))
	defer C.free(unsafe.Pointer(_cstring_signal_name_))
	C._g_signal_override_class_handler(_cgo_signal_name_, instance_type, class_handler)
	return
}

func SignalParseName(detailed_signal string, itype C.GType, force_detail_quark bool) (_go__return__ bool, _go_signal_id_p_ uint, detail_p *C.GQuark) {
	var signal_id_p C.guint
	_cstring_detailed_signal_ := C.CString(detailed_signal)
	_cgo_detailed_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_signal_))
	defer C.free(unsafe.Pointer(_cstring_detailed_signal_))
	_cgo_force_detail_quark_ := (C.gboolean)(C.FALSE)
	if force_detail_quark { _cgo_force_detail_quark_ = (C.gboolean)(C.TRUE) }
	var _return_ C.gboolean
	_return_ = C._g_signal_parse_name(_cgo_detailed_signal_, itype, &signal_id_p, detail_p, _cgo_force_detail_quark_)
	_go_signal_id_p_ = (uint)(signal_id_p)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func GobjectSignalQuery(signal_id uint) (query *SignalQuery) {
	var _allocated_query_ C.GSignalQuery
	_cgo_signal_id_ := (C.guint)(signal_id)
	C.g_signal_query(_cgo_signal_id_, &_allocated_query_)
	query = (*SignalQuery)(unsafe.Pointer(&_allocated_query_))
	return
}

func SignalRemoveEmissionHook(signal_id uint, hook_id uint64) () {
	_cgo_signal_id_ := (C.guint)(signal_id)
	_cgo_hook_id_ := (C.gulong)(hook_id)
	C.g_signal_remove_emission_hook(_cgo_signal_id_, _cgo_hook_id_)
	return
}

func SignalSetVaMarshaller(signal_id uint, instance_type C.GType, va_marshaller C.GSignalCVaMarshaller) () {
	_cgo_signal_id_ := (C.guint)(signal_id)
	C.g_signal_set_va_marshaller(_cgo_signal_id_, instance_type, va_marshaller)
	return
}

func SignalStopEmission(instance C.gpointer, signal_id uint, detail C.GQuark) () {
	_cgo_signal_id_ := (C.guint)(signal_id)
	C.g_signal_stop_emission(instance, _cgo_signal_id_, detail)
	return
}

func SignalStopEmissionByName(instance C.gpointer, detailed_signal string) () {
	_cstring_detailed_signal_ := C.CString(detailed_signal)
	_cgo_detailed_signal_ := (*C.gchar)(unsafe.Pointer(_cstring_detailed_signal_))
	defer C.free(unsafe.Pointer(_cstring_detailed_signal_))
	C._g_signal_stop_emission_by_name(instance, _cgo_detailed_signal_)
	return
}

func SignalTypeCclosureNew(itype C.GType, struct_offset uint) (_go__return__ *Closure) {
	var _return_ *C.GClosure
	_cgo_struct_offset_ := (C.guint)(struct_offset)
	_return_ = C.g_signal_type_cclosure_new(itype, _cgo_struct_offset_)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func SourceSetClosure(source *C.GSource, closure *Closure) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	C.g_source_set_closure(source, _cgo_closure_)
	return
}

func SourceSetDummyCallback(source *C.GSource) () {
	C.g_source_set_dummy_callback(source)
	return
}

func StrdupValueContents(value *Value) (_go__return__ string) {
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	var _return_ *C.gchar
	_return_ = C._g_strdup_value_contents(_cgo_value_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TypeAddClassCacheFunc(cache_data C.gpointer, cache_func C.GTypeClassCacheFunc) () {
	C.g_type_add_class_cache_func(cache_data, cache_func)
	return
}

func TypeAddClassPrivate(class_type C.GType, private_size uint64) () {
	_cgo_private_size_ := (C.gsize)(private_size)
	C.g_type_add_class_private(class_type, _cgo_private_size_)
	return
}

func TypeAddInterfaceCheck(check_data C.gpointer, check_func C.GTypeInterfaceCheckFunc) () {
	C.g_type_add_interface_check(check_data, check_func)
	return
}

func TypeAddInterfaceDynamic(instance_type C.GType, interface_type C.GType, plugin TypePluginKind) () {
	_cgo_plugin_ := (*C.GTypePlugin)(plugin.GetGObject())
	C.g_type_add_interface_dynamic(instance_type, interface_type, _cgo_plugin_)
	return
}

func TypeAddInterfaceStatic(instance_type C.GType, interface_type C.GType, info *InterfaceInfo) () {
	_cgo_info_ := (*C.GInterfaceInfo)(unsafe.Pointer(info))
	C._g_type_add_interface_static(instance_type, interface_type, _cgo_info_)
	return
}

func TypeCheckClassCast(g_class *TypeClass, is_a_type C.GType) (_go__return__ *TypeClass) {
	_cgo_g_class_ := (*C.GTypeClass)(unsafe.Pointer(g_class))
	var _return_ *C.GTypeClass
	_return_ = C.g_type_check_class_cast(_cgo_g_class_, is_a_type)
	_go__return__ = (*TypeClass)(unsafe.Pointer(_return_))
	return
}

func TypeCheckClassIsA(g_class *TypeClass, is_a_type C.GType) (_go__return__ bool) {
	_cgo_g_class_ := (*C.GTypeClass)(unsafe.Pointer(g_class))
	var _return_ C.gboolean
	_return_ = C.g_type_check_class_is_a(_cgo_g_class_, is_a_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeCheckInstance(instance *TypeInstance) (_go__return__ bool) {
	_cgo_instance_ := (*C.GTypeInstance)(unsafe.Pointer(instance))
	var _return_ C.gboolean
	_return_ = C.g_type_check_instance(_cgo_instance_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeCheckInstanceCast(instance *TypeInstance, iface_type C.GType) (_go__return__ *TypeInstance) {
	_cgo_instance_ := (*C.GTypeInstance)(unsafe.Pointer(instance))
	var _return_ *C.GTypeInstance
	_return_ = C.g_type_check_instance_cast(_cgo_instance_, iface_type)
	_go__return__ = (*TypeInstance)(unsafe.Pointer(_return_))
	return
}

func TypeCheckInstanceIsA(instance *TypeInstance, iface_type C.GType) (_go__return__ bool) {
	_cgo_instance_ := (*C.GTypeInstance)(unsafe.Pointer(instance))
	var _return_ C.gboolean
	_return_ = C.g_type_check_instance_is_a(_cgo_instance_, iface_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeCheckIsValueType(type_ C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_type_check_is_value_type(type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeCheckValue(value *Value) (_go__return__ bool) {
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	var _return_ C.gboolean
	_return_ = C.g_type_check_value(_cgo_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeCheckValueHolds(value *Value, type_ C.GType) (_go__return__ bool) {
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	var _return_ C.gboolean
	_return_ = C.g_type_check_value_holds(_cgo_value_, type_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeChildren(type_ C.GType) (_return_ *C.GType, _go_n_children_ uint) {
	var n_children C.guint
	_return_ = C.g_type_children(type_, &n_children)
	_go_n_children_ = (uint)(n_children)
	return
}

func TypeClassAddPrivate(g_class C.gpointer, private_size uint64) () {
	_cgo_private_size_ := (C.gsize)(private_size)
	C.g_type_class_add_private(g_class, _cgo_private_size_)
	return
}

func TypeClassPeek(type_ C.GType) (_go__return__ *TypeClass) {
	var _return_ C.gpointer
	_return_ = C.g_type_class_peek(type_)
	_go__return__ = (*TypeClass)(unsafe.Pointer(_return_))
	return
}

func TypeClassPeekStatic(type_ C.GType) (_go__return__ *TypeClass) {
	var _return_ C.gpointer
	_return_ = C.g_type_class_peek_static(type_)
	_go__return__ = (*TypeClass)(unsafe.Pointer(_return_))
	return
}

func TypeClassRef(type_ C.GType) (_go__return__ *TypeClass) {
	var _return_ C.gpointer
	_return_ = C.g_type_class_ref(type_)
	_go__return__ = (*TypeClass)(unsafe.Pointer(_return_))
	return
}

func TypeCreateInstance(type_ C.GType) (_go__return__ *TypeInstance) {
	var _return_ *C.GTypeInstance
	_return_ = C.g_type_create_instance(type_)
	_go__return__ = (*TypeInstance)(unsafe.Pointer(_return_))
	return
}

func TypeDefaultInterfacePeek(g_type C.GType) (_go__return__ *TypeInterface) {
	var _return_ C.gpointer
	_return_ = C.g_type_default_interface_peek(g_type)
	_go__return__ = (*TypeInterface)(unsafe.Pointer(_return_))
	return
}

func TypeDefaultInterfaceRef(g_type C.GType) (_go__return__ *TypeInterface) {
	var _return_ C.gpointer
	_return_ = C.g_type_default_interface_ref(g_type)
	_go__return__ = (*TypeInterface)(unsafe.Pointer(_return_))
	return
}

func TypeDefaultInterfaceUnref(g_iface *TypeInterface) () {
	_cgo_g_iface_ := (C.gpointer)(unsafe.Pointer(g_iface))
	C.g_type_default_interface_unref(_cgo_g_iface_)
	return
}

func TypeDepth(type_ C.GType) (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C.g_type_depth(type_)
	_go__return__ = (uint)(_return_)
	return
}

func TypeEnsure(type_ C.GType) () {
	C.g_type_ensure(type_)
	return
}

func TypeFreeInstance(instance *TypeInstance) () {
	_cgo_instance_ := (*C.GTypeInstance)(unsafe.Pointer(instance))
	C.g_type_free_instance(_cgo_instance_)
	return
}

func TypeFromName(name string) (_return_ C.GType) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_type_from_name(_cgo_name_)
	return
}

func TypeFundamental(type_id C.GType) (_return_ C.GType) {
	_return_ = C.g_type_fundamental(type_id)
	return
}

func TypeFundamentalNext() (_return_ C.GType) {
	_return_ = C.g_type_fundamental_next()
	return
}

func TypeGetPlugin(type_ C.GType) (_go__return__ TypePlugin) {
	var _return_ *C.GTypePlugin
	_return_ = C.g_type_get_plugin(type_)
	_go__return__ = ToTypePlugin(unsafe.Pointer(_return_))
	return
}

func TypeGetQdata(type_ C.GType, quark C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_type_get_qdata(type_, quark)
	return
}

func TypeInterfaceAddPrerequisite(interface_type C.GType, prerequisite_type C.GType) () {
	C.g_type_interface_add_prerequisite(interface_type, prerequisite_type)
	return
}

func TypeInterfaceGetPlugin(instance_type C.GType, interface_type C.GType) (_go__return__ TypePlugin) {
	var _return_ *C.GTypePlugin
	_return_ = C.g_type_interface_get_plugin(instance_type, interface_type)
	_go__return__ = ToTypePlugin(unsafe.Pointer(_return_))
	return
}

func TypeInterfacePeek(instance_class *TypeClass, iface_type C.GType) (_go__return__ *TypeInterface) {
	_cgo_instance_class_ := (C.gpointer)(unsafe.Pointer(instance_class))
	var _return_ C.gpointer
	_return_ = C.g_type_interface_peek(_cgo_instance_class_, iface_type)
	_go__return__ = (*TypeInterface)(unsafe.Pointer(_return_))
	return
}

func TypeInterfacePrerequisites(interface_type C.GType) (_return_ *C.GType, _go_n_prerequisites_ uint) {
	var n_prerequisites C.guint
	_return_ = C.g_type_interface_prerequisites(interface_type, &n_prerequisites)
	_go_n_prerequisites_ = (uint)(n_prerequisites)
	return
}

func TypeInterfaces(type_ C.GType) (_return_ *C.GType, _go_n_interfaces_ uint) {
	var n_interfaces C.guint
	_return_ = C.g_type_interfaces(type_, &n_interfaces)
	_go_n_interfaces_ = (uint)(n_interfaces)
	return
}

func TypeIsA(type_ C.GType, is_a_type C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_type_is_a(type_, is_a_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeName(type_ C.GType) (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_type_name(type_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TypeNameFromClass(g_class *TypeClass) (_go__return__ string) {
	_cgo_g_class_ := (*C.GTypeClass)(unsafe.Pointer(g_class))
	var _return_ *C.gchar
	_return_ = C._g_type_name_from_class(_cgo_g_class_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TypeNameFromInstance(instance *TypeInstance) (_go__return__ string) {
	_cgo_instance_ := (*C.GTypeInstance)(unsafe.Pointer(instance))
	var _return_ *C.gchar
	_return_ = C._g_type_name_from_instance(_cgo_instance_)
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func TypeNextBase(leaf_type C.GType, root_type C.GType) (_return_ C.GType) {
	_return_ = C.g_type_next_base(leaf_type, root_type)
	return
}

func TypeParent(type_ C.GType) (_return_ C.GType) {
	_return_ = C.g_type_parent(type_)
	return
}

func TypeQname(type_ C.GType) (_return_ C.GQuark) {
	_return_ = C.g_type_qname(type_)
	return
}

func GobjectTypeQuery(type_ C.GType) (query *TypeQuery) {
	var _allocated_query_ C.GTypeQuery
	C.g_type_query(type_, &_allocated_query_)
	query = (*TypeQuery)(unsafe.Pointer(&_allocated_query_))
	return
}

func TypeRegisterDynamic(parent_type C.GType, type_name string, plugin TypePluginKind, flags C.GTypeFlags) (_return_ C.GType) {
	_cgo_plugin_ := (*C.GTypePlugin)(plugin.GetGObject())
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._g_type_register_dynamic(parent_type, _cgo_type_name_, _cgo_plugin_, flags)
	return
}

func TypeRegisterFundamental(type_id C.GType, type_name string, info *TypeInfo, finfo *TypeFundamentalInfo, flags C.GTypeFlags) (_return_ C.GType) {
	_cgo_info_ := (*C.GTypeInfo)(unsafe.Pointer(info))
	_cgo_finfo_ := (*C.GTypeFundamentalInfo)(unsafe.Pointer(finfo))
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._g_type_register_fundamental(type_id, _cgo_type_name_, _cgo_info_, _cgo_finfo_, flags)
	return
}

func TypeRegisterStatic(parent_type C.GType, type_name string, info *TypeInfo, flags C.GTypeFlags) (_return_ C.GType) {
	_cgo_info_ := (*C.GTypeInfo)(unsafe.Pointer(info))
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._g_type_register_static(parent_type, _cgo_type_name_, _cgo_info_, flags)
	return
}

func TypeRegisterStaticSimple(parent_type C.GType, type_name string, class_size uint, class_init C.GClassInitFunc, instance_size uint, instance_init C.GInstanceInitFunc, flags C.GTypeFlags) (_return_ C.GType) {
	_cgo_class_size_ := (C.guint)(class_size)
	_cgo_instance_size_ := (C.guint)(instance_size)
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._g_type_register_static_simple(parent_type, _cgo_type_name_, _cgo_class_size_, class_init, _cgo_instance_size_, instance_init, flags)
	return
}

func TypeRemoveClassCacheFunc(cache_data C.gpointer, cache_func C.GTypeClassCacheFunc) () {
	C.g_type_remove_class_cache_func(cache_data, cache_func)
	return
}

func TypeRemoveInterfaceCheck(check_data C.gpointer, check_func C.GTypeInterfaceCheckFunc) () {
	C.g_type_remove_interface_check(check_data, check_func)
	return
}

func TypeSetQdata(type_ C.GType, quark C.GQuark, data C.gpointer) () {
	C.g_type_set_qdata(type_, quark, data)
	return
}

func TypeTestFlags(type_ C.GType, flags uint) (_go__return__ bool) {
	_cgo_flags_ := (C.guint)(flags)
	var _return_ C.gboolean
	_return_ = C.g_type_test_flags(type_, _cgo_flags_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func TypeValueTablePeek(type_ C.GType) (_go__return__ *TypeValueTable) {
	var _return_ *C.GTypeValueTable
	_return_ = C.g_type_value_table_peek(type_)
	_go__return__ = (*TypeValueTable)(unsafe.Pointer(_return_))
	return
}

func ValueRegisterTransformFunc(src_type C.GType, dest_type C.GType, transform_func C.GValueTransform) () {
	C.g_value_register_transform_func(src_type, dest_type, transform_func)
	return
}

func ValueTypeCompatible(src_type C.GType, dest_type C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_value_type_compatible(src_type, dest_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ValueTypeTransformable(src_type C.GType, dest_type C.GType) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_value_type_transformable(src_type, dest_type)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Binding) GetFlags() (_return_ C.GBindingFlags) {
	_return_ = C.g_binding_get_flags((*C.GBinding)(_self_._value_))
	return
}

func (_self_ *Binding) GetSource() (_go__return__ Object) {
	var _return_ *C.GObject
	_return_ = C.g_binding_get_source((*C.GBinding)(_self_._value_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Binding) GetSourceProperty() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_binding_get_source_property((*C.GBinding)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Binding) GetTarget() (_go__return__ Object) {
	var _return_ *C.GObject
	_return_ = C.g_binding_get_target((*C.GBinding)(_self_._value_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Binding) GetTargetProperty() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_binding_get_target_property((*C.GBinding)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func ObjectInterfaceFindProperty(g_iface C.gpointer, property_name string) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._g_object_interface_find_property(g_iface, _cgo_property_name_)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func ObjectInterfaceInstallProperty(g_iface C.gpointer, pspec ParamSpecKind) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	C.g_object_interface_install_property(g_iface, _cgo_pspec_)
	return
}

func ObjectInterfaceListProperties(g_iface C.gpointer) (_return_ unsafe.Pointer, _go_n_properties_p_ uint) {
	var n_properties_p C.guint
	_return_ = C._g_object_interface_list_properties(g_iface, &n_properties_p)
	_go_n_properties_p_ = (uint)(n_properties_p)
	return
}

func (_self_ *Object) AddToggleRef(notify C.GToggleNotify, data C.gpointer) () {
	C.g_object_add_toggle_ref((*C.GObject)(_self_._value_), notify, data)
	return
}

func (_self_ *Object) BindProperty(source_property string, target ObjectKind, target_property string, flags C.GBindingFlags) (_go__return__ Binding) {
	_cgo_target_ := (C.gpointer)(target.GetGObject())
	var _return_ *C.GBinding
	_cstring_source_property_ := C.CString(source_property)
	_cgo_source_property_ := (*C.gchar)(unsafe.Pointer(_cstring_source_property_))
	defer C.free(unsafe.Pointer(_cstring_source_property_))
	_cstring_target_property_ := C.CString(target_property)
	_cgo_target_property_ := (*C.gchar)(unsafe.Pointer(_cstring_target_property_))
	defer C.free(unsafe.Pointer(_cstring_target_property_))
	_return_ = C._g_object_bind_property((*C.GObject)(_self_._value_), _cgo_source_property_, _cgo_target_, _cgo_target_property_, flags)
	_go__return__ = ToBinding(unsafe.Pointer(_return_))
	return
}

func (_self_ *Object) BindPropertyFull(source_property string, target ObjectKind, target_property string, flags C.GBindingFlags, transform_to C.GBindingTransformFunc, transform_from C.GBindingTransformFunc, user_data C.gpointer, notify C.GDestroyNotify) (_go__return__ Binding) {
	_cgo_target_ := (C.gpointer)(target.GetGObject())
	var _return_ *C.GBinding
	_cstring_source_property_ := C.CString(source_property)
	_cgo_source_property_ := (*C.gchar)(unsafe.Pointer(_cstring_source_property_))
	defer C.free(unsafe.Pointer(_cstring_source_property_))
	_cstring_target_property_ := C.CString(target_property)
	_cgo_target_property_ := (*C.gchar)(unsafe.Pointer(_cstring_target_property_))
	defer C.free(unsafe.Pointer(_cstring_target_property_))
	_return_ = C._g_object_bind_property_full((*C.GObject)(_self_._value_), _cgo_source_property_, _cgo_target_, _cgo_target_property_, flags, transform_to, transform_from, user_data, notify)
	_go__return__ = ToBinding(unsafe.Pointer(_return_))
	return
}

func (_self_ *Object) BindPropertyWithClosures(source_property string, target ObjectKind, target_property string, flags C.GBindingFlags, transform_to *Closure, transform_from *Closure) (_go__return__ Binding) {
	_cgo_target_ := (C.gpointer)(target.GetGObject())
	_cgo_transform_to_ := (*C.GClosure)(unsafe.Pointer(transform_to))
	_cgo_transform_from_ := (*C.GClosure)(unsafe.Pointer(transform_from))
	var _return_ *C.GBinding
	_cstring_source_property_ := C.CString(source_property)
	_cgo_source_property_ := (*C.gchar)(unsafe.Pointer(_cstring_source_property_))
	defer C.free(unsafe.Pointer(_cstring_source_property_))
	_cstring_target_property_ := C.CString(target_property)
	_cgo_target_property_ := (*C.gchar)(unsafe.Pointer(_cstring_target_property_))
	defer C.free(unsafe.Pointer(_cstring_target_property_))
	_return_ = C._g_object_bind_property_with_closures((*C.GObject)(_self_._value_), _cgo_source_property_, _cgo_target_, _cgo_target_property_, flags, _cgo_transform_to_, _cgo_transform_from_)
	_go__return__ = ToBinding(unsafe.Pointer(_return_))
	return
}

func (_self_ *Object) DupData(key string, dup_func C.GDuplicateFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_object_dup_data((*C.GObject)(_self_._value_), _cgo_key_, dup_func, user_data)
	return
}

func (_self_ *Object) DupQdata(quark C.GQuark, dup_func C.GDuplicateFunc, user_data C.gpointer) (_return_ C.gpointer) {
	_return_ = C.g_object_dup_qdata((*C.GObject)(_self_._value_), quark, dup_func, user_data)
	return
}

func (_self_ *Object) ForceFloating() () {
	C.g_object_force_floating((*C.GObject)(_self_._value_))
	return
}

func (_self_ *Object) FreezeNotify() () {
	C.g_object_freeze_notify((*C.GObject)(_self_._value_))
	return
}

func (_self_ *Object) GetData(key string) (_return_ C.gpointer) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_object_get_data((*C.GObject)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *Object) GetProperty(property_name string, value *Value) () {
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._g_object_get_property((*C.GObject)(_self_._value_), _cgo_property_name_, _cgo_value_)
	return
}

func (_self_ *Object) GetQdata(quark C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_object_get_qdata((*C.GObject)(_self_._value_), quark)
	return
}

func (_self_ *Object) IsFloating() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._g_object_is_floating((*C.GObject)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Object) Notify(property_name string) () {
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._g_object_notify((*C.GObject)(_self_._value_), _cgo_property_name_)
	return
}

func (_self_ *Object) NotifyByPspec(pspec ParamSpecKind) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	C.g_object_notify_by_pspec((*C.GObject)(_self_._value_), _cgo_pspec_)
	return
}

func (_self_ *Object) Ref() (_go__return__ Object) {
	var _return_ C.gpointer
	_return_ = C._g_object_ref((*C.GObject)(_self_._value_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Object) RefSink() (_go__return__ Object) {
	var _return_ C.gpointer
	_return_ = C._g_object_ref_sink((*C.GObject)(_self_._value_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Object) RemoveToggleRef(notify C.GToggleNotify, data C.gpointer) () {
	C.g_object_remove_toggle_ref((*C.GObject)(_self_._value_), notify, data)
	return
}

func (_self_ *Object) ReplaceData(key string, oldval C.gpointer, newval C.gpointer, destroy C.GDestroyNotify, old_destroy *C.GDestroyNotify) (_go__return__ bool) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	var _return_ C.gboolean
	_return_ = C._g_object_replace_data((*C.GObject)(_self_._value_), _cgo_key_, oldval, newval, destroy, old_destroy)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Object) ReplaceQdata(quark C.GQuark, oldval C.gpointer, newval C.gpointer, destroy C.GDestroyNotify, old_destroy *C.GDestroyNotify) (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_object_replace_qdata((*C.GObject)(_self_._value_), quark, oldval, newval, destroy, old_destroy)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Object) RunDispose() () {
	C.g_object_run_dispose((*C.GObject)(_self_._value_))
	return
}

func (_self_ *Object) SetData(key string, data C.gpointer) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._g_object_set_data((*C.GObject)(_self_._value_), _cgo_key_, data)
	return
}

func (_self_ *Object) SetDataFull(key string, data C.gpointer, destroy C.GDestroyNotify) () {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	C._g_object_set_data_full((*C.GObject)(_self_._value_), _cgo_key_, data, destroy)
	return
}

func (_self_ *Object) SetProperty(property_name string, value *Value) () {
	_cgo_value_ := (*C.GValue)(unsafe.Pointer(value))
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	C._g_object_set_property((*C.GObject)(_self_._value_), _cgo_property_name_, _cgo_value_)
	return
}

func (_self_ *Object) SetQdata(quark C.GQuark, data C.gpointer) () {
	C.g_object_set_qdata((*C.GObject)(_self_._value_), quark, data)
	return
}

func (_self_ *Object) SetQdataFull(quark C.GQuark, data C.gpointer, destroy C.GDestroyNotify) () {
	C.g_object_set_qdata_full((*C.GObject)(_self_._value_), quark, data, destroy)
	return
}

func (_self_ *Object) StealData(key string) (_return_ C.gpointer) {
	_cstring_key_ := C.CString(key)
	_cgo_key_ := (*C.gchar)(unsafe.Pointer(_cstring_key_))
	defer C.free(unsafe.Pointer(_cstring_key_))
	_return_ = C._g_object_steal_data((*C.GObject)(_self_._value_), _cgo_key_)
	return
}

func (_self_ *Object) StealQdata(quark C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_object_steal_qdata((*C.GObject)(_self_._value_), quark)
	return
}

func (_self_ *Object) ThawNotify() () {
	C.g_object_thaw_notify((*C.GObject)(_self_._value_))
	return
}

func (_self_ *Object) Unref() () {
	C._g_object_unref((*C.GObject)(_self_._value_))
	return
}

func (_self_ *Object) WatchClosure(closure *Closure) () {
	_cgo_closure_ := (*C.GClosure)(unsafe.Pointer(closure))
	C.g_object_watch_closure((*C.GObject)(_self_._value_), _cgo_closure_)
	return
}

func (_self_ *Object) WeakRef(notify C.GWeakNotify, data C.gpointer) () {
	C.g_object_weak_ref((*C.GObject)(_self_._value_), notify, data)
	return
}

func (_self_ *Object) WeakUnref(notify C.GWeakNotify, data C.gpointer) () {
	C.g_object_weak_unref((*C.GObject)(_self_._value_), notify, data)
	return
}

func ParamSpecInternal(param_type C.GType, name string, nick string, blurb string, flags C.GParamFlags) (_return_ C.gpointer) {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_cstring_nick_ := C.CString(nick)
	_cgo_nick_ := (*C.gchar)(unsafe.Pointer(_cstring_nick_))
	defer C.free(unsafe.Pointer(_cstring_nick_))
	_cstring_blurb_ := C.CString(blurb)
	_cgo_blurb_ := (*C.gchar)(unsafe.Pointer(_cstring_blurb_))
	defer C.free(unsafe.Pointer(_cstring_blurb_))
	_return_ = C._g_param_spec_internal(param_type, _cgo_name_, _cgo_nick_, _cgo_blurb_, flags)
	return
}

func (_self_ *ParamSpec) GetBlurb() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_param_spec_get_blurb((*C.GParamSpec)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ParamSpec) GetName() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_param_spec_get_name((*C.GParamSpec)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ParamSpec) GetNick() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_param_spec_get_nick((*C.GParamSpec)(_self_._value_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *ParamSpec) GetQdata(quark C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_param_spec_get_qdata((*C.GParamSpec)(_self_._value_), quark)
	return
}

func (_self_ *ParamSpec) GetRedirectTarget() (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_return_ = C.g_param_spec_get_redirect_target((*C.GParamSpec)(_self_._value_))
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *ParamSpec) Ref() (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_return_ = C.g_param_spec_ref((*C.GParamSpec)(_self_._value_))
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *ParamSpec) RefSink() (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_return_ = C.g_param_spec_ref_sink((*C.GParamSpec)(_self_._value_))
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *ParamSpec) SetQdata(quark C.GQuark, data C.gpointer) () {
	C.g_param_spec_set_qdata((*C.GParamSpec)(_self_._value_), quark, data)
	return
}

func (_self_ *ParamSpec) SetQdataFull(quark C.GQuark, data C.gpointer, destroy C.GDestroyNotify) () {
	C.g_param_spec_set_qdata_full((*C.GParamSpec)(_self_._value_), quark, data, destroy)
	return
}

func (_self_ *ParamSpec) Sink() () {
	C.g_param_spec_sink((*C.GParamSpec)(_self_._value_))
	return
}

func (_self_ *ParamSpec) StealQdata(quark C.GQuark) (_return_ C.gpointer) {
	_return_ = C.g_param_spec_steal_qdata((*C.GParamSpec)(_self_._value_), quark)
	return
}

func (_self_ *ParamSpec) Unref() () {
	C.g_param_spec_unref((*C.GParamSpec)(_self_._value_))
	return
}

func (_self_ *TypeModule) AddInterface(instance_type C.GType, interface_type C.GType, interface_info *InterfaceInfo) () {
	_cgo_interface_info_ := (*C.GInterfaceInfo)(unsafe.Pointer(interface_info))
	C._g_type_module_add_interface((*C.GTypeModule)(_self_._value_), instance_type, interface_type, _cgo_interface_info_)
	return
}

func (_self_ *TypeModule) RegisterEnum(name string, const_static_values *EnumValue) (_return_ C.GType) {
	_cgo_const_static_values_ := (*C.GEnumValue)(unsafe.Pointer(const_static_values))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_type_module_register_enum((*C.GTypeModule)(_self_._value_), _cgo_name_, _cgo_const_static_values_)
	return
}

func (_self_ *TypeModule) RegisterFlags(name string, const_static_values *FlagsValue) (_return_ C.GType) {
	_cgo_const_static_values_ := (*C.GFlagsValue)(unsafe.Pointer(const_static_values))
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	_return_ = C._g_type_module_register_flags((*C.GTypeModule)(_self_._value_), _cgo_name_, _cgo_const_static_values_)
	return
}

func (_self_ *TypeModule) RegisterType(parent_type C.GType, type_name string, type_info *TypeInfo, flags C.GTypeFlags) (_return_ C.GType) {
	_cgo_type_info_ := (*C.GTypeInfo)(unsafe.Pointer(type_info))
	_cstring_type_name_ := C.CString(type_name)
	_cgo_type_name_ := (*C.gchar)(unsafe.Pointer(_cstring_type_name_))
	defer C.free(unsafe.Pointer(_cstring_type_name_))
	_return_ = C._g_type_module_register_type((*C.GTypeModule)(_self_._value_), parent_type, _cgo_type_name_, _cgo_type_info_, flags)
	return
}

func (_self_ *TypeModule) SetName(name string) () {
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._g_type_module_set_name((*C.GTypeModule)(_self_._value_), _cgo_name_)
	return
}

func (_self_ *TypeModule) Unuse() () {
	C.g_type_module_unuse((*C.GTypeModule)(_self_._value_))
	return
}

func (_self_ *TypeModule) Use() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C.g_type_module_use((*C.GTypeModule)(_self_._value_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func ClosureNewObject(sizeof_closure uint, object ObjectKind) (_go__return__ *Closure) {
	_cgo_object_ := (*C.GObject)(object.GetGObject())
	var _return_ *C.GClosure
	_cgo_sizeof_closure_ := (C.guint)(sizeof_closure)
	_return_ = C.g_closure_new_object(_cgo_sizeof_closure_, _cgo_object_)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func ClosureNewSimple(sizeof_closure uint, data C.gpointer) (_go__return__ *Closure) {
	var _return_ *C.GClosure
	_cgo_sizeof_closure_ := (C.guint)(sizeof_closure)
	_return_ = C.g_closure_new_simple(_cgo_sizeof_closure_, data)
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Closure) AddFinalizeNotifier(notify_data C.gpointer, notify_func C.GClosureNotify) () {
	C.g_closure_add_finalize_notifier((*C.GClosure)(_self_), notify_data, notify_func)
	return
}

func (_self_ *Closure) AddInvalidateNotifier(notify_data C.gpointer, notify_func C.GClosureNotify) () {
	C.g_closure_add_invalidate_notifier((*C.GClosure)(_self_), notify_data, notify_func)
	return
}

func (_self_ *Closure) AddMarshalGuards(pre_marshal_data C.gpointer, pre_marshal_notify C.GClosureNotify, post_marshal_data C.gpointer, post_marshal_notify C.GClosureNotify) () {
	C.g_closure_add_marshal_guards((*C.GClosure)(_self_), pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify)
	return
}

func (_self_ *Closure) Invalidate() () {
	C.g_closure_invalidate((*C.GClosure)(_self_))
	return
}

func (_self_ *Closure) Ref() (_go__return__ *Closure) {
	var _return_ *C.GClosure
	_return_ = C.g_closure_ref((*C.GClosure)(_self_))
	_go__return__ = (*Closure)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Closure) RemoveFinalizeNotifier(notify_data C.gpointer, notify_func C.GClosureNotify) () {
	C.g_closure_remove_finalize_notifier((*C.GClosure)(_self_), notify_data, notify_func)
	return
}

func (_self_ *Closure) RemoveInvalidateNotifier(notify_data C.gpointer, notify_func C.GClosureNotify) () {
	C.g_closure_remove_invalidate_notifier((*C.GClosure)(_self_), notify_data, notify_func)
	return
}

func (_self_ *Closure) SetMarshal(marshal C.GClosureMarshal) () {
	C.g_closure_set_marshal((*C.GClosure)(_self_), marshal)
	return
}

func (_self_ *Closure) SetMetaMarshal(marshal_data C.gpointer, meta_marshal C.GClosureMarshal) () {
	C.g_closure_set_meta_marshal((*C.GClosure)(_self_), marshal_data, meta_marshal)
	return
}

func (_self_ *Closure) Sink() () {
	C.g_closure_sink((*C.GClosure)(_self_))
	return
}

func (_self_ *Closure) Unref() () {
	C.g_closure_unref((*C.GClosure)(_self_))
	return
}

func (_self_ *ObjectClass) FindProperty(property_name string) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_property_name_ := C.CString(property_name)
	_cgo_property_name_ := (*C.gchar)(unsafe.Pointer(_cstring_property_name_))
	defer C.free(unsafe.Pointer(_cstring_property_name_))
	_return_ = C._g_object_class_find_property((*C.GObjectClass)(_self_), _cgo_property_name_)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *ObjectClass) InstallProperty(property_id uint, pspec ParamSpecKind) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	_cgo_property_id_ := (C.guint)(property_id)
	C.g_object_class_install_property((*C.GObjectClass)(_self_), _cgo_property_id_, _cgo_pspec_)
	return
}

func (_self_ *ObjectClass) ListProperties() (_return_ unsafe.Pointer, _go_n_properties_ uint) {
	var n_properties C.guint
	_return_ = C._g_object_class_list_properties((*C.GObjectClass)(_self_), &n_properties)
	_go_n_properties_ = (uint)(n_properties)
	return
}

func (_self_ *ObjectClass) OverrideProperty(property_id uint, name string) () {
	_cgo_property_id_ := (C.guint)(property_id)
	_cstring_name_ := C.CString(name)
	_cgo_name_ := (*C.gchar)(unsafe.Pointer(_cstring_name_))
	defer C.free(unsafe.Pointer(_cstring_name_))
	C._g_object_class_override_property((*C.GObjectClass)(_self_), _cgo_property_id_, _cgo_name_)
	return
}

func (_self_ *ParamSpecPool) Insert(pspec ParamSpecKind, owner_type C.GType) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	C.g_param_spec_pool_insert((*C.GParamSpecPool)(_self_), _cgo_pspec_, owner_type)
	return
}

func (_self_ *ParamSpecPool) List(owner_type C.GType) (_return_ unsafe.Pointer, _go_n_pspecs_p_ uint) {
	var n_pspecs_p C.guint
	_return_ = C._g_param_spec_pool_list((*C.GParamSpecPool)(_self_), owner_type, &n_pspecs_p)
	_go_n_pspecs_p_ = (uint)(n_pspecs_p)
	return
}

func (_self_ *ParamSpecPool) ListOwned(owner_type C.GType) (_return_ *C.GList) {
	_return_ = C.g_param_spec_pool_list_owned((*C.GParamSpecPool)(_self_), owner_type)
	return
}

func (_self_ *ParamSpecPool) Lookup(param_name string, owner_type C.GType, walk_ancestors bool) (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_cstring_param_name_ := C.CString(param_name)
	_cgo_param_name_ := (*C.gchar)(unsafe.Pointer(_cstring_param_name_))
	defer C.free(unsafe.Pointer(_cstring_param_name_))
	_cgo_walk_ancestors_ := (C.gboolean)(C.FALSE)
	if walk_ancestors { _cgo_walk_ancestors_ = (C.gboolean)(C.TRUE) }
	_return_ = C._g_param_spec_pool_lookup((*C.GParamSpecPool)(_self_), _cgo_param_name_, owner_type, _cgo_walk_ancestors_)
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *ParamSpecPool) Remove(pspec ParamSpecKind) () {
	_cgo_pspec_ := (*C.GParamSpec)(pspec.GetGObject())
	C.g_param_spec_pool_remove((*C.GParamSpecPool)(_self_), _cgo_pspec_)
	return
}

func (_self_ *TypeClass) GetPrivate(private_type C.GType) (_return_ C.gpointer) {
	_return_ = C.g_type_class_get_private((*C.GTypeClass)(_self_), private_type)
	return
}

func (_self_ *TypeClass) PeekParent() (_go__return__ *TypeClass) {
	var _return_ C.gpointer
	_return_ = C._g_type_class_peek_parent((*C.GTypeClass)(_self_))
	_go__return__ = (*TypeClass)(unsafe.Pointer(_return_))
	return
}

func (_self_ *TypeClass) Unref() () {
	C._g_type_class_unref((*C.GTypeClass)(_self_))
	return
}

func (_self_ *TypeClass) UnrefUncached() () {
	C._g_type_class_unref_uncached((*C.GTypeClass)(_self_))
	return
}

func (_self_ *TypeInstance) GetPrivate(private_type C.GType) (_return_ C.gpointer) {
	_return_ = C.g_type_instance_get_private((*C.GTypeInstance)(_self_), private_type)
	return
}

func (_self_ *TypeInterface) PeekParent() (_go__return__ *TypeInterface) {
	var _return_ C.gpointer
	_return_ = C._g_type_interface_peek_parent((*C.GTypeInterface)(_self_))
	_go__return__ = (*TypeInterface)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) Copy(dest_value *Value) () {
	_cgo_dest_value_ := (*C.GValue)(unsafe.Pointer(dest_value))
	C._g_value_copy((*C.GValue)(_self_), _cgo_dest_value_)
	return
}

func (_self_ *Value) DupBoxed() (_return_ C.gpointer) {
	_return_ = C._g_value_dup_boxed((*C.GValue)(_self_))
	return
}

func (_self_ *Value) DupObject() (_go__return__ Object) {
	var _return_ C.gpointer
	_return_ = C._g_value_dup_object((*C.GValue)(_self_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) DupParam() (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_return_ = C._g_value_dup_param((*C.GValue)(_self_))
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) DupString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_value_dup_string((*C.GValue)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Value) DupVariant() (_return_ *C.GVariant) {
	_return_ = C._g_value_dup_variant((*C.GValue)(_self_))
	return
}

func (_self_ *Value) FitsPointer() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._g_value_fits_pointer((*C.GValue)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Value) GetBoolean() (_go__return__ bool) {
	var _return_ C.gboolean
	_return_ = C._g_value_get_boolean((*C.GValue)(_self_))
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Value) GetBoxed() (_return_ C.gpointer) {
	_return_ = C._g_value_get_boxed((*C.GValue)(_self_))
	return
}

func (_self_ *Value) GetDouble() (_go__return__ float64) {
	var _return_ C.gdouble
	_return_ = C._g_value_get_double((*C.GValue)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Value) GetEnum() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._g_value_get_enum((*C.GValue)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Value) GetFlags() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._g_value_get_flags((*C.GValue)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Value) GetFloat() (_go__return__ float64) {
	var _return_ C.gfloat
	_return_ = C._g_value_get_float((*C.GValue)(_self_))
	_go__return__ = (float64)(_return_)
	return
}

func (_self_ *Value) GetGtype() (_return_ C.GType) {
	_return_ = C._g_value_get_gtype((*C.GValue)(_self_))
	return
}

func (_self_ *Value) GetInt() (_go__return__ int) {
	var _return_ C.gint
	_return_ = C._g_value_get_int((*C.GValue)(_self_))
	_go__return__ = (int)(_return_)
	return
}

func (_self_ *Value) GetInt64() (_go__return__ int64) {
	var _return_ C.gint64
	_return_ = C._g_value_get_int64((*C.GValue)(_self_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *Value) GetLong() (_go__return__ int64) {
	var _return_ C.glong
	_return_ = C._g_value_get_long((*C.GValue)(_self_))
	_go__return__ = (int64)(_return_)
	return
}

func (_self_ *Value) GetObject() (_go__return__ Object) {
	var _return_ C.gpointer
	_return_ = C._g_value_get_object((*C.GValue)(_self_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) GetParam() (_go__return__ ParamSpec) {
	var _return_ *C.GParamSpec
	_return_ = C._g_value_get_param((*C.GValue)(_self_))
	_go__return__ = ToParamSpec(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) GetPointer() (_return_ C.gpointer) {
	_return_ = C._g_value_get_pointer((*C.GValue)(_self_))
	return
}

func (_self_ *Value) GetSchar() (_go__return__ int8) {
	var _return_ C.gint8
	_return_ = C._g_value_get_schar((*C.GValue)(_self_))
	_go__return__ = (int8)(_return_)
	return
}

func (_self_ *Value) GetString() (_go__return__ string) {
	var _return_ *C.gchar
	_return_ = C._g_value_get_string((*C.GValue)(_self_))
	_go__return__ = C.GoString((*C.char)(unsafe.Pointer(_return_)))
	return
}

func (_self_ *Value) GetUchar() (_go__return__ byte) {
	var _return_ C.guchar
	_return_ = C._g_value_get_uchar((*C.GValue)(_self_))
	_go__return__ = (byte)(_return_)
	return
}

func (_self_ *Value) GetUint() (_go__return__ uint) {
	var _return_ C.guint
	_return_ = C._g_value_get_uint((*C.GValue)(_self_))
	_go__return__ = (uint)(_return_)
	return
}

func (_self_ *Value) GetUint64() (_go__return__ uint64) {
	var _return_ C.guint64
	_return_ = C._g_value_get_uint64((*C.GValue)(_self_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *Value) GetUlong() (_go__return__ uint64) {
	var _return_ C.gulong
	_return_ = C._g_value_get_ulong((*C.GValue)(_self_))
	_go__return__ = (uint64)(_return_)
	return
}

func (_self_ *Value) GetVariant() (_return_ *C.GVariant) {
	_return_ = C._g_value_get_variant((*C.GValue)(_self_))
	return
}

func (_self_ *Value) Init(g_type C.GType) (_go__return__ *Value) {
	var _return_ *C.GValue
	_return_ = C.g_value_init((*C.GValue)(_self_), g_type)
	_go__return__ = (*Value)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) PeekPointer() (_return_ C.gpointer) {
	_return_ = C._g_value_peek_pointer((*C.GValue)(_self_))
	return
}

func (_self_ *Value) Reset() (_go__return__ *Value) {
	var _return_ *C.GValue
	_return_ = C.g_value_reset((*C.GValue)(_self_))
	_go__return__ = (*Value)(unsafe.Pointer(_return_))
	return
}

func (_self_ *Value) SetBoolean(v_boolean bool) () {
	_cgo_v_boolean_ := (C.gboolean)(C.FALSE)
	if v_boolean { _cgo_v_boolean_ = (C.gboolean)(C.TRUE) }
	C.g_value_set_boolean((*C.GValue)(_self_), _cgo_v_boolean_)
	return
}

func (_self_ *Value) SetBoxed(v_boxed C.gpointer) () {
	C._g_value_set_boxed((*C.GValue)(_self_), v_boxed)
	return
}

func (_self_ *Value) SetDouble(v_double float64) () {
	_cgo_v_double_ := (C.gdouble)(v_double)
	C.g_value_set_double((*C.GValue)(_self_), _cgo_v_double_)
	return
}

func (_self_ *Value) SetEnum(v_enum int) () {
	_cgo_v_enum_ := (C.gint)(v_enum)
	C.g_value_set_enum((*C.GValue)(_self_), _cgo_v_enum_)
	return
}

func (_self_ *Value) SetFlags(v_flags uint) () {
	_cgo_v_flags_ := (C.guint)(v_flags)
	C.g_value_set_flags((*C.GValue)(_self_), _cgo_v_flags_)
	return
}

func (_self_ *Value) SetFloat(v_float float64) () {
	_cgo_v_float_ := (C.gfloat)(v_float)
	C.g_value_set_float((*C.GValue)(_self_), _cgo_v_float_)
	return
}

func (_self_ *Value) SetGtype(v_gtype C.GType) () {
	C.g_value_set_gtype((*C.GValue)(_self_), v_gtype)
	return
}

func (_self_ *Value) SetInstance(instance C.gpointer) () {
	C.g_value_set_instance((*C.GValue)(_self_), instance)
	return
}

func (_self_ *Value) SetInt(v_int int) () {
	_cgo_v_int_ := (C.gint)(v_int)
	C.g_value_set_int((*C.GValue)(_self_), _cgo_v_int_)
	return
}

func (_self_ *Value) SetInt64(v_int64 int64) () {
	_cgo_v_int64_ := (C.gint64)(v_int64)
	C.g_value_set_int64((*C.GValue)(_self_), _cgo_v_int64_)
	return
}

func (_self_ *Value) SetLong(v_long int64) () {
	_cgo_v_long_ := (C.glong)(v_long)
	C.g_value_set_long((*C.GValue)(_self_), _cgo_v_long_)
	return
}

func (_self_ *Value) SetObject(v_object ObjectKind) () {
	_cgo_v_object_ := (C.gpointer)(v_object.GetGObject())
	C.g_value_set_object((*C.GValue)(_self_), _cgo_v_object_)
	return
}

func (_self_ *Value) SetParam(param ParamSpecKind) () {
	_cgo_param_ := (*C.GParamSpec)(param.GetGObject())
	C.g_value_set_param((*C.GValue)(_self_), _cgo_param_)
	return
}

func (_self_ *Value) SetPointer(v_pointer C.gpointer) () {
	C.g_value_set_pointer((*C.GValue)(_self_), v_pointer)
	return
}

func (_self_ *Value) SetSchar(v_char int8) () {
	_cgo_v_char_ := (C.gint8)(v_char)
	C.g_value_set_schar((*C.GValue)(_self_), _cgo_v_char_)
	return
}

func (_self_ *Value) SetStaticBoxed(v_boxed C.gpointer) () {
	C._g_value_set_static_boxed((*C.GValue)(_self_), v_boxed)
	return
}

func (_self_ *Value) SetStaticString(v_string string) () {
	_cstring_v_string_ := C.CString(v_string)
	_cgo_v_string_ := (*C.gchar)(unsafe.Pointer(_cstring_v_string_))
	defer C.free(unsafe.Pointer(_cstring_v_string_))
	C._g_value_set_static_string((*C.GValue)(_self_), _cgo_v_string_)
	return
}

func (_self_ *Value) SetString(v_string string) () {
	_cstring_v_string_ := C.CString(v_string)
	_cgo_v_string_ := (*C.gchar)(unsafe.Pointer(_cstring_v_string_))
	defer C.free(unsafe.Pointer(_cstring_v_string_))
	C._g_value_set_string((*C.GValue)(_self_), _cgo_v_string_)
	return
}

func (_self_ *Value) SetUchar(v_uchar byte) () {
	_cgo_v_uchar_ := (C.guchar)(v_uchar)
	C.g_value_set_uchar((*C.GValue)(_self_), _cgo_v_uchar_)
	return
}

func (_self_ *Value) SetUint(v_uint uint) () {
	_cgo_v_uint_ := (C.guint)(v_uint)
	C.g_value_set_uint((*C.GValue)(_self_), _cgo_v_uint_)
	return
}

func (_self_ *Value) SetUint64(v_uint64 uint64) () {
	_cgo_v_uint64_ := (C.guint64)(v_uint64)
	C.g_value_set_uint64((*C.GValue)(_self_), _cgo_v_uint64_)
	return
}

func (_self_ *Value) SetUlong(v_ulong uint64) () {
	_cgo_v_ulong_ := (C.gulong)(v_ulong)
	C.g_value_set_ulong((*C.GValue)(_self_), _cgo_v_ulong_)
	return
}

func (_self_ *Value) SetVariant(variant *C.GVariant) () {
	C.g_value_set_variant((*C.GValue)(_self_), variant)
	return
}

func (_self_ *Value) TakeBoxed(v_boxed C.gpointer) () {
	C._g_value_take_boxed((*C.GValue)(_self_), v_boxed)
	return
}

func (_self_ *Value) TakeObject(v_object C.gpointer) () {
	C.g_value_take_object((*C.GValue)(_self_), v_object)
	return
}

func (_self_ *Value) TakeParam(param ParamSpecKind) () {
	_cgo_param_ := (*C.GParamSpec)(param.GetGObject())
	C.g_value_take_param((*C.GValue)(_self_), _cgo_param_)
	return
}

func (_self_ *Value) TakeString(v_string string) () {
	_cstring_v_string_ := C.CString(v_string)
	_cgo_v_string_ := (*C.gchar)(unsafe.Pointer(_cstring_v_string_))
	defer C.free(unsafe.Pointer(_cstring_v_string_))
	C.g_value_take_string((*C.GValue)(_self_), _cgo_v_string_)
	return
}

func (_self_ *Value) TakeVariant(variant *C.GVariant) () {
	C.g_value_take_variant((*C.GValue)(_self_), variant)
	return
}

func (_self_ *Value) Transform(dest_value *Value) (_go__return__ bool) {
	_cgo_dest_value_ := (*C.GValue)(unsafe.Pointer(dest_value))
	var _return_ C.gboolean
	_return_ = C._g_value_transform((*C.GValue)(_self_), _cgo_dest_value_)
	_go__return__ = _return_ == (C.gboolean)(C.TRUE)
	return
}

func (_self_ *Value) Unset() () {
	C.g_value_unset((*C.GValue)(_self_))
	return
}

func (_self_ *WeakRef) Clear() () {
	C.g_weak_ref_clear((*C.GWeakRef)(_self_))
	return
}

func (_self_ *WeakRef) Get() (_go__return__ Object) {
	var _return_ C.gpointer
	_return_ = C.g_weak_ref_get((*C.GWeakRef)(_self_))
	_go__return__ = ToObject(unsafe.Pointer(_return_))
	return
}

func (_self_ *WeakRef) Init(object C.gpointer) () {
	C.g_weak_ref_init((*C.GWeakRef)(_self_), object)
	return
}

func (_self_ *WeakRef) Set(object C.gpointer) () {
	C.g_weak_ref_set((*C.GWeakRef)(_self_), object)
	return
}

func (_self_ *TypePlugin) CompleteInterfaceInfo(instance_type C.GType, interface_type C.GType, info *InterfaceInfo) () {
	_cgo_info_ := (*C.GInterfaceInfo)(unsafe.Pointer(info))
	C.g_type_plugin_complete_interface_info((*C.GTypePlugin)(_self_._value_), instance_type, interface_type, _cgo_info_)
	return
}

func (_self_ *TypePlugin) CompleteTypeInfo(g_type C.GType, info *TypeInfo, value_table *TypeValueTable) () {
	_cgo_info_ := (*C.GTypeInfo)(unsafe.Pointer(info))
	_cgo_value_table_ := (*C.GTypeValueTable)(unsafe.Pointer(value_table))
	C.g_type_plugin_complete_type_info((*C.GTypePlugin)(_self_._value_), g_type, _cgo_info_, _cgo_value_table_)
	return
}

func (_self_ *TypePlugin) Unuse() () {
	C.g_type_plugin_unuse((*C.GTypePlugin)(_self_._value_))
	return
}

func (_self_ *TypePlugin) Use() () {
	C.g_type_plugin_use((*C.GTypePlugin)(_self_._value_))
	return
}

const G_PARAM_READWRITE = C.G_PARAM_READWRITE
const G_TYPE_FLAG_INSTANTIATABLE = C.G_TYPE_FLAG_INSTANTIATABLE
const G_PARAM_STATIC_NICK = C.G_PARAM_STATIC_NICK
const G_SIGNAL_ACTION = C.G_SIGNAL_ACTION
const G_TYPE_FLAG_RESERVED_ID_BIT = C.G_TYPE_FLAG_RESERVED_ID_BIT
const G_BINDING_BIDIRECTIONAL = C.G_BINDING_BIDIRECTIONAL
const G_TYPE_FLAG_DERIVABLE = C.G_TYPE_FLAG_DERIVABLE
const G_PARAM_STATIC_BLURB = C.G_PARAM_STATIC_BLURB
const G_SIGNAL_RUN_CLEANUP = C.G_SIGNAL_RUN_CLEANUP
const G_PARAM_CONSTRUCT_ONLY = C.G_PARAM_CONSTRUCT_ONLY
const G_TYPE_FUNDAMENTAL_MAX = C.G_TYPE_FUNDAMENTAL_MAX
const G_SIGNAL_NO_HOOKS = C.G_SIGNAL_NO_HOOKS
const G_BINDING_SYNC_CREATE = C.G_BINDING_SYNC_CREATE
const G_PARAM_READABLE = C.G_PARAM_READABLE
const G_SIGNAL_MATCH_ID = C.G_SIGNAL_MATCH_ID
const G_PARAM_CONSTRUCT = C.G_PARAM_CONSTRUCT
const G_TYPE_RESERVED_USER_FIRST = C.G_TYPE_RESERVED_USER_FIRST
const G_PARAM_LAX_VALIDATION = C.G_PARAM_LAX_VALIDATION
const G_TYPE_FLAG_DEEP_DERIVABLE = C.G_TYPE_FLAG_DEEP_DERIVABLE
const G_SIGNAL_FLAGS_MASK = C.G_SIGNAL_FLAGS_MASK
const G_SIGNAL_RUN_LAST = C.G_SIGNAL_RUN_LAST
const G_TYPE_FLAG_ABSTRACT = C.G_TYPE_FLAG_ABSTRACT
const G_TYPE_RESERVED_GLIB_LAST = C.G_TYPE_RESERVED_GLIB_LAST
const G_TYPE_RESERVED_BSE_FIRST = C.G_TYPE_RESERVED_BSE_FIRST
const G_SIGNAL_MATCH_MASK = C.G_SIGNAL_MATCH_MASK
const G_PARAM_PRIVATE = C.G_PARAM_PRIVATE
const G_PARAM_MASK = C.G_PARAM_MASK
const G_TYPE_FUNDAMENTAL_SHIFT = C.G_TYPE_FUNDAMENTAL_SHIFT
const G_CONNECT_AFTER = C.G_CONNECT_AFTER
const G_TYPE_DEBUG_SIGNALS = C.G_TYPE_DEBUG_SIGNALS
const G_PARAM_STATIC_NAME = C.G_PARAM_STATIC_NAME
const G_PARAM_DEPRECATED = C.G_PARAM_DEPRECATED
const G_TYPE_DEBUG_OBJECTS = C.G_TYPE_DEBUG_OBJECTS
const G_SIGNAL_MATCH_CLOSURE = C.G_SIGNAL_MATCH_CLOSURE
const G_SIGNAL_NO_RECURSE = C.G_SIGNAL_NO_RECURSE
const G_TYPE_DEBUG_MASK = C.G_TYPE_DEBUG_MASK
const G_SIGNAL_MATCH_FUNC = C.G_SIGNAL_MATCH_FUNC
const G_PARAM_STATIC_STRINGS = C.G_PARAM_STATIC_STRINGS
const G_TYPE_RESERVED_BSE_LAST = C.G_TYPE_RESERVED_BSE_LAST
const G_VALUE_NOCOPY_CONTENTS = C.G_VALUE_NOCOPY_CONTENTS
const G_SIGNAL_MATCH_DATA = C.G_SIGNAL_MATCH_DATA
const G_BINDING_DEFAULT = C.G_BINDING_DEFAULT
const G_CONNECT_SWAPPED = C.G_CONNECT_SWAPPED
const G_SIGNAL_MATCH_UNBLOCKED = C.G_SIGNAL_MATCH_UNBLOCKED
const G_SIGNAL_DETAILED = C.G_SIGNAL_DETAILED
const G_SIGNAL_MATCH_DETAIL = C.G_SIGNAL_MATCH_DETAIL
const G_TYPE_FLAG_CLASSED = C.G_TYPE_FLAG_CLASSED
const G_BINDING_INVERT_BOOLEAN = C.G_BINDING_INVERT_BOOLEAN
const G_TYPE_FLAG_VALUE_ABSTRACT = C.G_TYPE_FLAG_VALUE_ABSTRACT
const G_PARAM_USER_SHIFT = C.G_PARAM_USER_SHIFT
const G_SIGNAL_MUST_COLLECT = C.G_SIGNAL_MUST_COLLECT
const G_PARAM_WRITABLE = C.G_PARAM_WRITABLE
const G_TYPE_RESERVED_GLIB_FIRST = C.G_TYPE_RESERVED_GLIB_FIRST
const G_TYPE_DEBUG_NONE = C.G_TYPE_DEBUG_NONE
const G_SIGNAL_RUN_FIRST = C.G_SIGNAL_RUN_FIRST
const G_SIGNAL_DEPRECATED = C.G_SIGNAL_DEPRECATED
